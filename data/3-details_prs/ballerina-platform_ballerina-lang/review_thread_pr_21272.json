{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMTY3ODYw", "number": 21272, "reviewThreads": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzoxMDozOFrODjEc5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTozNTowNlrODjbhDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDk5Njg1OnYy", "diffSide": "RIGHT", "path": "gradle/javaProject.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzoxMDozOFrOFuq3-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzoxMzoxM1rOFuq9Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4MTI3NQ==", "bodyText": "Why do we need these dependencies here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384481275", "createdAt": "2020-02-26T13:10:38Z", "author": {"login": "anupama-pathirage"}, "path": "gradle/javaProject.gradle", "diffHunk": "@@ -39,6 +39,8 @@ dependencies {\n         implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.8'\n         implementation 'com.h2database:h2:1.4.199'\n         implementation 'org.hsqldb:hsqldb:2.2.7'\n+        implementation 'ch.vorburger.mariaDB4j:mariaDB4j:2.4.0'\n+        implementation 'mysql:mysql-connector-java:8.0.19'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d9aded8bd2f26e1413783fdf2e9578bd5a8c3f6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4MjYzMQ==", "bodyText": "This is required for mysql module unit tests.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384482631", "createdAt": "2020-02-26T13:13:13Z", "author": {"login": "sinthuja"}, "path": "gradle/javaProject.gradle", "diffHunk": "@@ -39,6 +39,8 @@ dependencies {\n         implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.8'\n         implementation 'com.h2database:h2:1.4.199'\n         implementation 'org.hsqldb:hsqldb:2.2.7'\n+        implementation 'ch.vorburger.mariaDB4j:mariaDB4j:2.4.0'\n+        implementation 'mysql:mysql-connector-java:8.0.19'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4MTI3NQ=="}, "originalCommit": {"oid": "6d9aded8bd2f26e1413783fdf2e9578bd5a8c3f6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTY0NDEyOnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc2/src/main/ballerina/src/java.jdbc/client.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNTo1MDo1N1rOFuxGZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNTo1MDo1N1rOFuxGZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU4MzI3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    options:options,\n          \n          \n            \n                    options: options,", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384583271", "createdAt": "2020-02-26T15:50:57Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc2/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -0,0 +1,81 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerinax/java;\n+import ballerina/sql;\n+\n+# Represents a JDBC client.\n+#\n+public type Client client object {\n+    *sql:Client;\n+    private boolean clientActive = true;\n+\n+    # Gets called when the JDBC client is instantiated.\n+    public function __init(public string url, public string? user = (), public string? password = (),\n+                           public Options? options = (), public sql:ConnectionPool? connPool = ()) returns sql:Error? {\n+      ClientConfiguration clientConf = {\n+        url: url,\n+        user: user,\n+        password: password,\n+        options:options,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTY0ODIwOnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc2/src/main/ballerina/src/java.jdbc/client.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNTo1MTo0OFrOFuxJAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNTo1MTo0OFrOFuxJAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU4MzkzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + options - A map of DB specific `Options`.\n          \n          \n            \n            # + options - A map of DB specific `Options`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384583936", "createdAt": "2020-02-26T15:51:48Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc2/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -0,0 +1,81 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerinax/java;\n+import ballerina/sql;\n+\n+# Represents a JDBC client.\n+#\n+public type Client client object {\n+    *sql:Client;\n+    private boolean clientActive = true;\n+\n+    # Gets called when the JDBC client is instantiated.\n+    public function __init(public string url, public string? user = (), public string? password = (),\n+                           public Options? options = (), public sql:ConnectionPool? connPool = ()) returns sql:Error? {\n+      ClientConfiguration clientConf = {\n+        url: url,\n+        user: user,\n+        password: password,\n+        options:options,\n+        connPool: connPool\n+      };\n+      return createClient(self, clientConf, sql:getGlobalConnectionPool());\n+    }\n+\n+    # Stops the JDBC client.\n+    #\n+    # + return - Possible error during closing the client\n+    public function close() returns error? {\n+        self.clientActive = false;\n+        return close(self);\n+    }\n+};\n+\n+\n+# Provides a set of configuration related to database.\n+# + datasourceName - The driver class name to be used to get the connection\n+# + properties - the properties of the database which should be applied when getting the connection\n+public type Options record {|\n+    string? datasourceName = ();\n+    map<anydata>? properties = ();\n+|};\n+\n+# Provides a set of configurations for the JDBC Client to be passed internally within the module.\n+#\n+# + url - URL of the database to connect\n+# + user - Username for the database connection\n+# + password - Password for the database connection\n+# + options - A map of DB specific `Options`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTY2NTMyOnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc2/src/main/ballerina/src/java.jdbc/client.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNTo1NTozM1rOFuxT7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNTo1NTozM1rOFuxT7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU4NjczMw==", "bodyText": "Extra new line?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384586733", "createdAt": "2020-02-26T15:55:33Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc2/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -0,0 +1,81 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerinax/java;\n+import ballerina/sql;\n+\n+# Represents a JDBC client.\n+#\n+public type Client client object {\n+    *sql:Client;\n+    private boolean clientActive = true;\n+\n+    # Gets called when the JDBC client is instantiated.\n+    public function __init(public string url, public string? user = (), public string? password = (),\n+                           public Options? options = (), public sql:ConnectionPool? connPool = ()) returns sql:Error? {\n+      ClientConfiguration clientConf = {\n+        url: url,\n+        user: user,\n+        password: password,\n+        options:options,\n+        connPool: connPool\n+      };\n+      return createClient(self, clientConf, sql:getGlobalConnectionPool());\n+    }\n+\n+    # Stops the JDBC client.\n+    #\n+    # + return - Possible error during closing the client\n+    public function close() returns error? {\n+        self.clientActive = false;\n+        return close(self);\n+    }\n+};\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTY2Njk2OnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc2/src/main/ballerina/src/java.jdbc/client.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNTo1NTo1NFrOFuxU7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNTo1NTo1NFrOFuxU7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU4Njk5MA==", "bodyText": "Extra new line?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384586990", "createdAt": "2020-02-26T15:55:54Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc2/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -0,0 +1,81 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerinax/java;\n+import ballerina/sql;\n+\n+# Represents a JDBC client.\n+#\n+public type Client client object {\n+    *sql:Client;\n+    private boolean clientActive = true;\n+\n+    # Gets called when the JDBC client is instantiated.\n+    public function __init(public string url, public string? user = (), public string? password = (),\n+                           public Options? options = (), public sql:ConnectionPool? connPool = ()) returns sql:Error? {\n+      ClientConfiguration clientConf = {\n+        url: url,\n+        user: user,\n+        password: password,\n+        options:options,\n+        connPool: connPool\n+      };\n+      return createClient(self, clientConf, sql:getGlobalConnectionPool());\n+    }\n+\n+    # Stops the JDBC client.\n+    #\n+    # + return - Possible error during closing the client\n+    public function close() returns error? {\n+        self.clientActive = false;\n+        return close(self);\n+    }\n+};\n+\n+\n+# Provides a set of configuration related to database.\n+# + datasourceName - The driver class name to be used to get the connection\n+# + properties - the properties of the database which should be applied when getting the connection\n+public type Options record {|\n+    string? datasourceName = ();\n+    map<anydata>? properties = ();\n+|};\n+\n+# Provides a set of configurations for the JDBC Client to be passed internally within the module.\n+#\n+# + url - URL of the database to connect\n+# + user - Username for the database connection\n+# + password - Password for the database connection\n+# + options - A map of DB specific `Options`.\n+# + connPool - Properties for the connection pool configuration. Refer `sql:ConnectionPool` for more details\n+type ClientConfiguration record {|\n+    string? url;\n+    string? user;\n+    string? password;\n+    Options? options;\n+    sql:ConnectionPool? connPool;\n+|};\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTY2NzkyOnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc2/src/main/java/org/ballerinalang/jdbc/NativeImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNTo1NjowNVrOFuxVdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNTo1NjowNVrOFuxVdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU4NzEyNg==", "bodyText": "Extra new line?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384587126", "createdAt": "2020-02-26T15:56:05Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc2/src/main/java/org/ballerinalang/jdbc/NativeImpl.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.jdbc;\n+\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.sql.datasource.SQLDatasource;\n+import org.ballerinalang.sql.exceptions.ErrorGenerator;\n+import org.ballerinalang.sql.utils.ClientUtils;\n+\n+/**\n+ * This class will include the native method implementation for the JDBC client.\n+ *\n+ * @since 1.2.0\n+ */\n+public class NativeImpl {\n+\n+    public static Object createClient(ObjectValue client, MapValue<String, Object> clientConfig,\n+                                      MapValue<String, Object> globalPool) {\n+        String url = clientConfig.getStringValue(Constants.ClientConfiguration.URL);\n+        if (!isJdbcUrlValid(url)) {\n+            return ErrorGenerator.getSQLApplicationError(\"invalid JDBC URL: \" + url);\n+        }\n+        String user = clientConfig.getStringValue(Constants.ClientConfiguration.USER);\n+        String password = clientConfig.getStringValue(Constants.ClientConfiguration.PASSWORD);\n+        MapValue options = clientConfig.getMapValue(Constants.ClientConfiguration.OPTIONS);\n+        MapValue properties = null;\n+        String datasourceName = null;\n+        if (options != null) {\n+            properties = options.getMapValue(Constants.ClientConfiguration.PROPERTIES);\n+            datasourceName = options.getStringValue(Constants.ClientConfiguration.DATASOURCE_NAME);\n+        }\n+        MapValue connectionPool = clientConfig.getMapValue(Constants.ClientConfiguration.CONNECTION_POOL_OPTIONS);\n+        if (connectionPool == null) {\n+            connectionPool = globalPool;\n+        }\n+        SQLDatasource.SQLDatasourceParams sqlDatasourceParams = new SQLDatasource.SQLDatasourceParams().\n+                setUrl(url).setUser(user).setPassword(password).setDatasourceName(datasourceName).\n+                setOptions(properties).setConnectionPool(connectionPool);\n+        return ClientUtils.createClient(client, sqlDatasourceParams);\n+    }\n+\n+    // Unable to perform a complete validation since URL differs based on the database.\n+    private static boolean isJdbcUrlValid(String jdbcUrl) {\n+        return !jdbcUrl.isEmpty() && jdbcUrl.trim().startsWith(\"jdbc:\");\n+    }\n+\n+    public static Object close(ObjectValue client) {\n+        return ClientUtils.close(client);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTY4NTg4OnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc2/src/test/resources/test-src/connection/connector_init_test.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNTo1OTo1NFrOFuxgpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNTo1OTo1NFrOFuxgpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU4OTk4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            function testConnection1(string jdbcURL, string user, string password) returns error?{\n          \n          \n            \n            function testConnection1(string jdbcURL, string user, string password) returns error? {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384589988", "createdAt": "2020-02-26T15:59:54Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc2/src/test/resources/test-src/connection/connector_init_test.bal", "diffHunk": "@@ -0,0 +1,119 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function testConnection1(string jdbcURL, string user, string password) returns error?{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTY4NzQyOnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc2/src/test/resources/test-src/connection/connector_init_test.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjowMDoxMFrOFuxhlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjowMDo0MVrOFuxjAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU5MDIzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                jdbc:Client testDB = check new (url=jdbcURL, user = user, password = password);\n          \n          \n            \n                jdbc:Client testDB = check new (url = jdbcURL, user = user, password = password);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384590231", "createdAt": "2020-02-26T16:00:10Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc2/src/test/resources/test-src/connection/connector_init_test.bal", "diffHunk": "@@ -0,0 +1,119 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function testConnection1(string jdbcURL, string user, string password) returns error?{\n+    jdbc:Client testDB = check new (url=jdbcURL, user = user, password = password);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU5MDU5Mg==", "bodyText": "Please reformat the file using format tool.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384590592", "createdAt": "2020-02-26T16:00:41Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc2/src/test/resources/test-src/connection/connector_init_test.bal", "diffHunk": "@@ -0,0 +1,119 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function testConnection1(string jdbcURL, string user, string password) returns error?{\n+    jdbc:Client testDB = check new (url=jdbcURL, user = user, password = password);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU5MDIzMQ=="}, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTY5Nzg1OnYy", "diffSide": "RIGHT", "path": "stdlib/mysql/src/main/ballerina/src/mysql/client.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjowMjozNFrOFuxoMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjo1MzozN1rOFvG8Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU5MTkyMg==", "bodyText": "Reformat the file", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384591922", "createdAt": "2020-02-26T16:02:34Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/mysql/src/main/ballerina/src/mysql/client.bal", "diffHunk": "@@ -0,0 +1,112 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/crypto;\n+import ballerinax/java;\n+import ballerina/sql;\n+\n+# Represents a MySQL database client.\n+#\n+public type Client client object {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk0MTA3OQ==", "bodyText": "Done.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384941079", "createdAt": "2020-02-27T06:53:37Z", "author": {"login": "sinthuja"}, "path": "stdlib/mysql/src/main/ballerina/src/mysql/client.bal", "diffHunk": "@@ -0,0 +1,112 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/crypto;\n+import ballerinax/java;\n+import ballerina/sql;\n+\n+# Represents a MySQL database client.\n+#\n+public type Client client object {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU5MTkyMg=="}, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTcwMTg1OnYy", "diffSide": "RIGHT", "path": "stdlib/mysql/src/main/ballerina/src/mysql/client.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjowMzoyOVrOFuxqsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjowMzoyOVrOFuxqsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU5MjU2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + options - Mysql datasource `Options` to be configured.\n          \n          \n            \n            # + options - Mysql datasource `Options` to be configured", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384592560", "createdAt": "2020-02-26T16:03:29Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/mysql/src/main/ballerina/src/mysql/client.bal", "diffHunk": "@@ -0,0 +1,112 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/crypto;\n+import ballerinax/java;\n+import ballerina/sql;\n+\n+# Represents a MySQL database client.\n+#\n+public type Client client object {\n+    *sql:Client;\n+    private boolean clientActive = true;\n+\n+    public function __init(public string host=\"localhost\",\n+        public string? user = (), public string? password= (), public string? database = (),\n+        public int port=3306, public Options? options = (),\n+        public sql:ConnectionPool? connPool = ()) returns sql:Error? {\n+        ClientConfiguration clientConfig = {\n+            host: host,\n+            port :port,\n+            user: user,\n+            password: password,\n+            database: database,\n+            options:options,\n+            connPool: connPool\n+        };\n+        return createClient(self, clientConfig, sql:getGlobalConnectionPool());\n+    }\n+\n+    # Close the SQL client.\n+    #\n+    # + return - Possible error during closing the client\n+    public function close() returns error?{\n+       self.clientActive = false;\n+       return close(self);\n+    }\n+};\n+\n+\n+# Provides a set of configurations for the mysql client to be passed internally within the module.\n+#\n+# + host - URL of the database to connect\n+# + port - Port of the database to connect\n+# + user - Username for the database connection\n+# + password - Password for the database connection\n+# + database - Name of the database\n+# + options - Mysql datasource `Options` to be configured.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTcwMzA1OnYy", "diffSide": "RIGHT", "path": "stdlib/mysql/src/main/ballerina/src/mysql/client.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjowMzo0MVrOFuxrXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjowMzo0MVrOFuxrXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU5MjczNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + connectTimeoutSeconds - Timeout to be used when connecting to the mysql serevr.\n          \n          \n            \n            # + connectTimeoutSeconds - Timeout to be used when connecting to the mysql server", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384592735", "createdAt": "2020-02-26T16:03:41Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/mysql/src/main/ballerina/src/mysql/client.bal", "diffHunk": "@@ -0,0 +1,112 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/crypto;\n+import ballerinax/java;\n+import ballerina/sql;\n+\n+# Represents a MySQL database client.\n+#\n+public type Client client object {\n+    *sql:Client;\n+    private boolean clientActive = true;\n+\n+    public function __init(public string host=\"localhost\",\n+        public string? user = (), public string? password= (), public string? database = (),\n+        public int port=3306, public Options? options = (),\n+        public sql:ConnectionPool? connPool = ()) returns sql:Error? {\n+        ClientConfiguration clientConfig = {\n+            host: host,\n+            port :port,\n+            user: user,\n+            password: password,\n+            database: database,\n+            options:options,\n+            connPool: connPool\n+        };\n+        return createClient(self, clientConfig, sql:getGlobalConnectionPool());\n+    }\n+\n+    # Close the SQL client.\n+    #\n+    # + return - Possible error during closing the client\n+    public function close() returns error?{\n+       self.clientActive = false;\n+       return close(self);\n+    }\n+};\n+\n+\n+# Provides a set of configurations for the mysql client to be passed internally within the module.\n+#\n+# + host - URL of the database to connect\n+# + port - Port of the database to connect\n+# + user - Username for the database connection\n+# + password - Password for the database connection\n+# + database - Name of the database\n+# + options - Mysql datasource `Options` to be configured.\n+# + connPool - Properties for the connection pool configuration. Refer `sql:ConnectionPool` for more details\n+type ClientConfiguration record {|\n+    string host;\n+    int port;\n+    string? user;\n+    string? password;\n+    string? database;\n+    Options? options;\n+    sql:ConnectionPool? connPool;\n+|};\n+\n+\n+# MySQL database options.\n+#\n+# + ssl - SSL Configuration to be used\n+# + useXADatasource - Boolean value to enable XADatasource\n+# + connectTimeoutSeconds - Timeout to be used when connecting to the mysql serevr.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTcwNTUwOnYy", "diffSide": "RIGHT", "path": "stdlib/mysql/src/main/ballerina/src/mysql/client.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjowNDoxNFrOFuxs3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjowNDoxNFrOFuxs3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU5MzExNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + socketTimeoutSeconds - Timeout during the read/write operations with mysql server.\n          \n          \n            \n            # + socketTimeoutSeconds - Timeout during the read/write operations with mysql server", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384593117", "createdAt": "2020-02-26T16:04:14Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/mysql/src/main/ballerina/src/mysql/client.bal", "diffHunk": "@@ -0,0 +1,112 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/crypto;\n+import ballerinax/java;\n+import ballerina/sql;\n+\n+# Represents a MySQL database client.\n+#\n+public type Client client object {\n+    *sql:Client;\n+    private boolean clientActive = true;\n+\n+    public function __init(public string host=\"localhost\",\n+        public string? user = (), public string? password= (), public string? database = (),\n+        public int port=3306, public Options? options = (),\n+        public sql:ConnectionPool? connPool = ()) returns sql:Error? {\n+        ClientConfiguration clientConfig = {\n+            host: host,\n+            port :port,\n+            user: user,\n+            password: password,\n+            database: database,\n+            options:options,\n+            connPool: connPool\n+        };\n+        return createClient(self, clientConfig, sql:getGlobalConnectionPool());\n+    }\n+\n+    # Close the SQL client.\n+    #\n+    # + return - Possible error during closing the client\n+    public function close() returns error?{\n+       self.clientActive = false;\n+       return close(self);\n+    }\n+};\n+\n+\n+# Provides a set of configurations for the mysql client to be passed internally within the module.\n+#\n+# + host - URL of the database to connect\n+# + port - Port of the database to connect\n+# + user - Username for the database connection\n+# + password - Password for the database connection\n+# + database - Name of the database\n+# + options - Mysql datasource `Options` to be configured.\n+# + connPool - Properties for the connection pool configuration. Refer `sql:ConnectionPool` for more details\n+type ClientConfiguration record {|\n+    string host;\n+    int port;\n+    string? user;\n+    string? password;\n+    string? database;\n+    Options? options;\n+    sql:ConnectionPool? connPool;\n+|};\n+\n+\n+# MySQL database options.\n+#\n+# + ssl - SSL Configuration to be used\n+# + useXADatasource - Boolean value to enable XADatasource\n+# + connectTimeoutSeconds - Timeout to be used when connecting to the mysql serevr.\n+# + socketTimeoutSeconds - Timeout during the read/write operations with mysql server.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTcyMjE2OnYy", "diffSide": "RIGHT", "path": "stdlib/mysql/src/main/ballerina/src/mysql/client.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjowNzo1NlrOFux3Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjowNzo1NlrOFux3Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU5NTc5OQ==", "bodyText": "Shall we use the convention of xxxTimoutInSeconds as this the pattern used by all the other modules?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384595799", "createdAt": "2020-02-26T16:07:56Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/mysql/src/main/ballerina/src/mysql/client.bal", "diffHunk": "@@ -0,0 +1,112 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/crypto;\n+import ballerinax/java;\n+import ballerina/sql;\n+\n+# Represents a MySQL database client.\n+#\n+public type Client client object {\n+    *sql:Client;\n+    private boolean clientActive = true;\n+\n+    public function __init(public string host=\"localhost\",\n+        public string? user = (), public string? password= (), public string? database = (),\n+        public int port=3306, public Options? options = (),\n+        public sql:ConnectionPool? connPool = ()) returns sql:Error? {\n+        ClientConfiguration clientConfig = {\n+            host: host,\n+            port :port,\n+            user: user,\n+            password: password,\n+            database: database,\n+            options:options,\n+            connPool: connPool\n+        };\n+        return createClient(self, clientConfig, sql:getGlobalConnectionPool());\n+    }\n+\n+    # Close the SQL client.\n+    #\n+    # + return - Possible error during closing the client\n+    public function close() returns error?{\n+       self.clientActive = false;\n+       return close(self);\n+    }\n+};\n+\n+\n+# Provides a set of configurations for the mysql client to be passed internally within the module.\n+#\n+# + host - URL of the database to connect\n+# + port - Port of the database to connect\n+# + user - Username for the database connection\n+# + password - Password for the database connection\n+# + database - Name of the database\n+# + options - Mysql datasource `Options` to be configured.\n+# + connPool - Properties for the connection pool configuration. Refer `sql:ConnectionPool` for more details\n+type ClientConfiguration record {|\n+    string host;\n+    int port;\n+    string? user;\n+    string? password;\n+    string? database;\n+    Options? options;\n+    sql:ConnectionPool? connPool;\n+|};\n+\n+\n+# MySQL database options.\n+#\n+# + ssl - SSL Configuration to be used\n+# + useXADatasource - Boolean value to enable XADatasource\n+# + connectTimeoutSeconds - Timeout to be used when connecting to the mysql serevr.\n+# + socketTimeoutSeconds - Timeout during the read/write operations with mysql server.\n+public type Options record{|\n+    SSLConfig? ssl = {};\n+    boolean useXADatasource = false;\n+    decimal connectTimeoutSeconds = 30;\n+    decimal socketTimeoutSeconds = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTczMTM4OnYy", "diffSide": "RIGHT", "path": "stdlib/mysql/src/main/java/org/ballerinalang/mysql/Utils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjowOTo1OVrOFux89w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNzowMzozN1rOFvHHrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU5NzIzOQ==", "bodyText": "This should be Constants.Options.SOCKET_TIMEOUT_SECONDS?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384597239", "createdAt": "2020-02-26T16:09:59Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/mysql/src/main/java/org/ballerinalang/mysql/Utils.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.mysql;\n+\n+import org.ballerinalang.jvm.values.DecimalValue;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.MapValueImpl;\n+\n+/**\n+ * This class includes utility functions.\n+ */\n+public class Utils {\n+\n+    static MapValue generateOptionsMap(MapValue mysqlOptions) {\n+        if (mysqlOptions != null) {\n+            MapValue<String, Object> options = new MapValueImpl<>();\n+            addSSLOptions(mysqlOptions.getMapValue(Constants.Options.SSL), options);\n+\n+            long connectTimeout = getTimeout(mysqlOptions.get(Constants.Options.CONNECT_TIMEOUT_SECONDS));\n+            if (connectTimeout > 0) {\n+                options.put(Constants.DatabaseProps.CONNECT_TIMEOUT, connectTimeout);\n+            }\n+\n+            long socketTimeout = getTimeout(mysqlOptions.get(Constants.Options.CONNECT_TIMEOUT_SECONDS));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk0NDA0Ng==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384944046", "createdAt": "2020-02-27T07:03:37Z", "author": {"login": "sinthuja"}, "path": "stdlib/mysql/src/main/java/org/ballerinalang/mysql/Utils.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.mysql;\n+\n+import org.ballerinalang.jvm.values.DecimalValue;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.MapValueImpl;\n+\n+/**\n+ * This class includes utility functions.\n+ */\n+public class Utils {\n+\n+    static MapValue generateOptionsMap(MapValue mysqlOptions) {\n+        if (mysqlOptions != null) {\n+            MapValue<String, Object> options = new MapValueImpl<>();\n+            addSSLOptions(mysqlOptions.getMapValue(Constants.Options.SSL), options);\n+\n+            long connectTimeout = getTimeout(mysqlOptions.get(Constants.Options.CONNECT_TIMEOUT_SECONDS));\n+            if (connectTimeout > 0) {\n+                options.put(Constants.DatabaseProps.CONNECT_TIMEOUT, connectTimeout);\n+            }\n+\n+            long socketTimeout = getTimeout(mysqlOptions.get(Constants.Options.CONNECT_TIMEOUT_SECONDS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU5NzIzOQ=="}, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTczOTA4OnYy", "diffSide": "RIGHT", "path": "stdlib/mysql/src/test/java/org/ballerinalang/mysql/init/ConnectionInitSSLTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjoxMTozOVrOFuyB1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjoxMTozOVrOFuyB1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU5ODQ4Nw==", "bodyText": "Typo in datbase?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384598487", "createdAt": "2020-02-26T16:11:39Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/mysql/src/test/java/org/ballerinalang/mysql/init/ConnectionInitSSLTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.mysql.init;\n+\n+import ch.vorburger.exec.ManagedProcessException;\n+import ch.vorburger.mariadb4j.DB;\n+import ch.vorburger.mariadb4j.DBConfigurationBuilder;\n+import org.ballerinalang.model.values.BError;\n+import org.ballerinalang.model.values.BMap;\n+import org.ballerinalang.model.values.BValue;\n+import org.ballerinalang.mysql.utils.SQLDBUtils;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+\n+/**\n+ * This test case validates the SSL connections.\n+ *\n+ * @since 1.2.0\n+ */\n+public class ConnectionInitSSLTest {\n+    private static final String DB_NAME = \"SSL_CONNECT_DB\";\n+    private CompileResult result;\n+    private DB datbase;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTc0MjMwOnYy", "diffSide": "RIGHT", "path": "stdlib/mysql/src/test/java/org/ballerinalang/mysql/init/ConnectionInitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjoxMjoyNlrOFuyD-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjoxMjoyNlrOFuyD-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU5OTAzMg==", "bodyText": "Typo in datbase?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384599032", "createdAt": "2020-02-26T16:12:26Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/mysql/src/test/java/org/ballerinalang/mysql/init/ConnectionInitTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.mysql.init;\n+\n+import ch.vorburger.exec.ManagedProcessException;\n+import ch.vorburger.mariadb4j.DB;\n+import ch.vorburger.mariadb4j.DBConfigurationBuilder;\n+import org.ballerinalang.model.values.BError;\n+import org.ballerinalang.model.values.BInteger;\n+import org.ballerinalang.model.values.BMap;\n+import org.ballerinalang.model.values.BString;\n+import org.ballerinalang.model.values.BValue;\n+import org.ballerinalang.mysql.utils.SQLDBUtils;\n+import org.ballerinalang.sql.Constants;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.SkipException;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.BeforeSuite;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+\n+/**\n+ * This test case validates the connections.\n+ *\n+ * @since 1.2.0\n+ */\n+public class ConnectionInitTest {\n+    private static final String DB_NAME = \"CONNECT_DB\";\n+    private CompileResult result;\n+    private DB datbase;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTc0OTY4OnYy", "diffSide": "RIGHT", "path": "stdlib/mysql/src/test/resources/test-src/connection/connection_init_test.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjoxNDoxMVrOFuyIow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjoxNDoxMVrOFuyIow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwMDIyNw==", "bodyText": "Reformat the file", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384600227", "createdAt": "2020-02-26T16:14:11Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/mysql/src/test/resources/test-src/connection/connection_init_test.bal", "diffHunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+//TODO:Remove this and pass with functions.\n+//After fixing this https://github.com/ballerina-platform/ballerina-lang/issues/21259\n+string host = \"localhost\";\n+string user=\"test\";\n+string password = \"test123\";\n+string database = \"CONNECT_DB\";\n+int port = 3305;\n+\n+function testConnectionWithNoFields() returns error? {\n+    mysql:Client|sql:Error dbClient = new ();\n+    if(dbClient is sql:Error){\n+        return dbClient;\n+    } else {\n+        return dbClient.close();\n+    }\n+}\n+\n+function testWithURLParams(string host, string user, string password, string database, int port) returns error? {\n+    mysql:Client dbClient = check new (host, user, password, database, port);\n+    return dbClient.close();\n+}\n+\n+function testWithoutHost() returns error? {\n+    mysql:Client dbClient = check new (user = user, password=password, database = database, port=port);\n+    return dbClient.close();\n+}\n+\n+function testWithOptions() returns error? {\n+    mysql:Options options = {\n+        ssl: (),\n+        connectTimeoutSeconds: 60\n+    };\n+    mysql:Client dbClient = check new (user = user, password=password, database = database,\n+    port=port, options = options);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTc1MDU1OnYy", "diffSide": "RIGHT", "path": "stdlib/mysql/src/test/resources/test-src/connection/connection_ssl_test.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjoxNDoyNFrOFuyJNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjoxNDoyNFrOFuyJNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwMDM3NQ==", "bodyText": "Reformat the file", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384600375", "createdAt": "2020-02-26T16:14:24Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/mysql/src/test/resources/test-src/connection/connection_ssl_test.bal", "diffHunk": "@@ -0,0 +1,88 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/mysql;\n+\n+//TODO:Remove this and pass with functions.\n+//After fixing this https://github.com/ballerina-platform/ballerina-lang/issues/21259\n+string host = \"localhost\";\n+string user=\"test\";\n+string password = \"test123\";\n+string database = \"SSL_CONNECT_DB\";\n+int port = 3305;\n+\n+function testSSLVerifyCert() returns error? {\n+    mysql:Options options = {\n+        ssl: {\n+            mode: \"VERIFY_CERT\",\n+            clientCertKeystore : {\n+                path: \"../../keystore/client-keystore.p12\",\n+                password: \"changeit\"\n+            },\n+            trustCertKeystore: {\n+                 path: \"../../keystore/trust-keystore.p12\",\n+                 password: \"changeit\"\n+            }\n+        }\n+    };\n+    mysql:Client dbClient = check new (user = user, password=password, database = database,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTc1NzIzOnYy", "diffSide": "RIGHT", "path": "stdlib/sql/src/main/ballerina/src/sql/error.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjoxNTo1NFrOFuyNYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjoxNTo1NFrOFuyNYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwMTQ0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents the properties belonging to a `DatabaseError`\n          \n          \n            \n            # Represents the properties belonging to a `DatabaseError`.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384601442", "createdAt": "2020-02-26T16:15:54Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/sql/src/main/ballerina/src/sql/error.bal", "diffHunk": "@@ -0,0 +1,52 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+public const DATABASE_ERROR_REASON = \"{ballerina/sql}DatabaseError\";\n+\n+# Represents the properties belonging to a `DatabaseError`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTc1ODA0OnYy", "diffSide": "RIGHT", "path": "stdlib/sql/src/main/ballerina/src/sql/error.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjoxNjowNVrOFuyN3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjoxNjowNVrOFuyN3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwMTU2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents the properties belonging to an `ApplicationError`\n          \n          \n            \n            # Represents the properties belonging to an `ApplicationError`.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384601564", "createdAt": "2020-02-26T16:16:05Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/sql/src/main/ballerina/src/sql/error.bal", "diffHunk": "@@ -0,0 +1,52 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+public const DATABASE_ERROR_REASON = \"{ballerina/sql}DatabaseError\";\n+\n+# Represents the properties belonging to a `DatabaseError`\n+#\n+# + message - Error message\n+# + errorCode - SQL error code\n+# + sqlState - SQL state\n+# + cause - Cause of the error\n+public type DatabaseErrorData record {|\n+    string message?;\n+    int errorCode;\n+    string sqlState;\n+    error cause?;\n+|};\n+\n+public const APPLICATION_ERROR_REASON = \"{ballerina/sql}ApplicationError\";\n+\n+# Represents the properties belonging to an `ApplicationError`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTc2Mzc3OnYy", "diffSide": "RIGHT", "path": "stdlib/sql/src/main/ballerina/src/sql/types.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjoxNzoyNFrOFuyRZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjo1Nzo1NVrOFvHBWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwMjQ2OA==", "bodyText": "Missing license header?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384602468", "createdAt": "2020-02-26T16:17:24Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/sql/src/main/ballerina/src/sql/types.bal", "diffHunk": "@@ -0,0 +1,48 @@\n+import ballerina/config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk0MjQyNQ==", "bodyText": "Added.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384942425", "createdAt": "2020-02-27T06:57:55Z", "author": {"login": "sinthuja"}, "path": "stdlib/sql/src/main/ballerina/src/sql/types.bal", "diffHunk": "@@ -0,0 +1,48 @@\n+import ballerina/config;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwMjQ2OA=="}, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTc2NDQ0OnYy", "diffSide": "RIGHT", "path": "stdlib/sql/src/main/ballerina/src/sql/error.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjoxNzozM1rOFuyRyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjoxNzozM1rOFuyRyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwMjU3MQ==", "bodyText": "Extra new line", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384602571", "createdAt": "2020-02-26T16:17:33Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/sql/src/main/ballerina/src/sql/error.bal", "diffHunk": "@@ -0,0 +1,52 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+public const DATABASE_ERROR_REASON = \"{ballerina/sql}DatabaseError\";\n+\n+# Represents the properties belonging to a `DatabaseError`\n+#\n+# + message - Error message\n+# + errorCode - SQL error code\n+# + sqlState - SQL state\n+# + cause - Cause of the error\n+public type DatabaseErrorData record {|\n+    string message?;\n+    int errorCode;\n+    string sqlState;\n+    error cause?;\n+|};\n+\n+public const APPLICATION_ERROR_REASON = \"{ballerina/sql}ApplicationError\";\n+\n+# Represents the properties belonging to an `ApplicationError`\n+#\n+# + message - Error message\n+# + cause - Cause of the error\n+public type ApplicationErrorData record {|\n+    string message?;\n+    error cause?;\n+|};\n+\n+# Represents an error caused by an issue related to database accessibility, erroneous queries, constraint violations,\n+# database resource clean-up, and other similar scenarios.\n+public type DatabaseError error<DATABASE_ERROR_REASON, DatabaseErrorData>;\n+\n+# Represents an error originating from application-level causes.\n+public type ApplicationError error<APPLICATION_ERROR_REASON, ApplicationErrorData>;\n+\n+# Represents a database or application level error returned from JDBC client remote functions.\n+public type Error DatabaseError|ApplicationError;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTc3ODA5OnYy", "diffSide": "RIGHT", "path": "stdlib/sql/src/main/ballerina/src/sql/types.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjoyMDo0OVrOFuyaaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjoyMDo0OVrOFuyaaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwNDc3Ng==", "bodyText": "Missng new line", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384604776", "createdAt": "2020-02-26T16:20:49Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/sql/src/main/ballerina/src/sql/types.bal", "diffHunk": "@@ -0,0 +1,48 @@\n+import ballerina/config;\n+import ballerinax/java;\n+\n+# Represents the properties which are used to configure DB connection pool.\n+# Default values of the fields can be set through the configuration API.\n+#\n+# + maxOpenConnections - The maximum number of open connections that the pool is allowed to have, including both idle and in-use connections.\n+#                     Default value is 15 and it can be changed through the configuration API with the key\n+#                     `b7a.sql.pool.maximumPoolSize`.\n+# + minIdleConnections - The minimum number of idle connections that pool tries to maintain in the pool. Default is the same as\n+#                 maxOpenConnections and it can be changed through the configuration API with the key\n+#                 `b7a.sql.pool.minimumIdle`.\n+# + maxConnectionLifeTimeSeconds - The maximum lifetime of a connection in the pool. Default value is 1800 seconds (30 minutes)\n+#                  and it can be changed through the configuration API with the key `b7a.sql.pool.maxLifetimeInMillis`.\n+#                  A value of 0 indicates unlimited maximum lifetime (infinite lifetime).\n+public type ConnectionPool record {|\n+    int maxOpenConnections = config:getAsInt(\"\\\"b7a.sql.pool.maxOpenConnections\\\"\", 15);\n+    decimal maxConnectionLifeTimeSeconds = <decimal>config:getAsFloat(\"b7a.sql.pool.maxConnectionLifeTime\", 1800.0);\n+    int minIdleConnections = config:getAsInt(\"b7a.sql.pool.minIdleConnections\", 15);\n+|};\n+\n+// This is a container object that holds the global pool config and initializes the internal map of connection pools\n+type GlobalConnectionPoolContainer object {\n+    private ConnectionPool connectionPool = {};\n+\n+    function __init() {\n+        // poolConfig record is frozen so that it cannot be modified during runtime\n+        ConnectionPool frozenConfig = self.connectionPool.cloneReadOnly();\n+        initGlobalPoolContainer(frozenConfig);\n+    }\n+\n+    public function getGlobalConnectionPool() returns ConnectionPool {\n+        return self.connectionPool;\n+    }\n+};\n+\n+function initGlobalPoolContainer(ConnectionPool poolConfig) = @java:Method {\n+    class: \"org.ballerinalang.sql.utils.ConnectionPoolUtils\"\n+} external;\n+\n+// This is an instance of GlobalPoolConfigContainer object type. The __init functions of database clients pass\n+// poolConfig member of this instance to the external client creation logic in order to access the internal map\n+// of connection pools.\n+final GlobalConnectionPoolContainer globalPoolContainer = new;\n+\n+public function getGlobalConnectionPool() returns ConnectionPool{\n+    return globalPoolContainer.getGlobalConnectionPool();\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTc4MzAzOnYy", "diffSide": "RIGHT", "path": "stdlib/sql/src/main/ballerina/src/sql/types.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjoyMTo0OFrOFuydRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjoyMTo0OFrOFuydRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwNTUxMQ==", "bodyText": "Why need to escape b7a.sql.pool.maxOpenConnections specifically here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384605511", "createdAt": "2020-02-26T16:21:48Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/sql/src/main/ballerina/src/sql/types.bal", "diffHunk": "@@ -0,0 +1,48 @@\n+import ballerina/config;\n+import ballerinax/java;\n+\n+# Represents the properties which are used to configure DB connection pool.\n+# Default values of the fields can be set through the configuration API.\n+#\n+# + maxOpenConnections - The maximum number of open connections that the pool is allowed to have, including both idle and in-use connections.\n+#                     Default value is 15 and it can be changed through the configuration API with the key\n+#                     `b7a.sql.pool.maximumPoolSize`.\n+# + minIdleConnections - The minimum number of idle connections that pool tries to maintain in the pool. Default is the same as\n+#                 maxOpenConnections and it can be changed through the configuration API with the key\n+#                 `b7a.sql.pool.minimumIdle`.\n+# + maxConnectionLifeTimeSeconds - The maximum lifetime of a connection in the pool. Default value is 1800 seconds (30 minutes)\n+#                  and it can be changed through the configuration API with the key `b7a.sql.pool.maxLifetimeInMillis`.\n+#                  A value of 0 indicates unlimited maximum lifetime (infinite lifetime).\n+public type ConnectionPool record {|\n+    int maxOpenConnections = config:getAsInt(\"\\\"b7a.sql.pool.maxOpenConnections\\\"\", 15);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTc4Nzc0OnYy", "diffSide": "RIGHT", "path": "stdlib/sql/src/main/ballerina/src/sql/types.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjoyMjo1OVrOFuygPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjoyNjo1MlrOFvGgmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwNjI2OA==", "bodyText": "The key here (b7a.sql.pool.maximumPoolSize) seems doesn't match with the actual key used (b7a.sql.pool.maxOpenConnection).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384606268", "createdAt": "2020-02-26T16:22:59Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/sql/src/main/ballerina/src/sql/types.bal", "diffHunk": "@@ -0,0 +1,48 @@\n+import ballerina/config;\n+import ballerinax/java;\n+\n+# Represents the properties which are used to configure DB connection pool.\n+# Default values of the fields can be set through the configuration API.\n+#\n+# + maxOpenConnections - The maximum number of open connections that the pool is allowed to have, including both idle and in-use connections.\n+#                     Default value is 15 and it can be changed through the configuration API with the key\n+#                     `b7a.sql.pool.maximumPoolSize`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNDA0MA==", "bodyText": "Yes, I missed to rename the API key in the comment when I was changing the name. I'll make the necessary changes.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384934040", "createdAt": "2020-02-27T06:26:52Z", "author": {"login": "sinthuja"}, "path": "stdlib/sql/src/main/ballerina/src/sql/types.bal", "diffHunk": "@@ -0,0 +1,48 @@\n+import ballerina/config;\n+import ballerinax/java;\n+\n+# Represents the properties which are used to configure DB connection pool.\n+# Default values of the fields can be set through the configuration API.\n+#\n+# + maxOpenConnections - The maximum number of open connections that the pool is allowed to have, including both idle and in-use connections.\n+#                     Default value is 15 and it can be changed through the configuration API with the key\n+#                     `b7a.sql.pool.maximumPoolSize`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwNjI2OA=="}, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTc5MTU0OnYy", "diffSide": "RIGHT", "path": "stdlib/sql/src/main/ballerina/src/sql/types.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjoyMzo1N1rOFuyiqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjoyNDo0MFrOFuykyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwNjg5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                decimal maxConnectionLifeTimeSeconds = <decimal>config:getAsFloat(\"b7a.sql.pool.maxConnectionLifeTime\", 1800.0);\n          \n          \n            \n                decimal maxConnectionLifeTimeInSeconds = <decimal>config:getAsFloat(\"b7a.sql.pool.maxConnectionLifeTimeInSeconds\", 1800.0);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384606890", "createdAt": "2020-02-26T16:23:57Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/sql/src/main/ballerina/src/sql/types.bal", "diffHunk": "@@ -0,0 +1,48 @@\n+import ballerina/config;\n+import ballerinax/java;\n+\n+# Represents the properties which are used to configure DB connection pool.\n+# Default values of the fields can be set through the configuration API.\n+#\n+# + maxOpenConnections - The maximum number of open connections that the pool is allowed to have, including both idle and in-use connections.\n+#                     Default value is 15 and it can be changed through the configuration API with the key\n+#                     `b7a.sql.pool.maximumPoolSize`.\n+# + minIdleConnections - The minimum number of idle connections that pool tries to maintain in the pool. Default is the same as\n+#                 maxOpenConnections and it can be changed through the configuration API with the key\n+#                 `b7a.sql.pool.minimumIdle`.\n+# + maxConnectionLifeTimeSeconds - The maximum lifetime of a connection in the pool. Default value is 1800 seconds (30 minutes)\n+#                  and it can be changed through the configuration API with the key `b7a.sql.pool.maxLifetimeInMillis`.\n+#                  A value of 0 indicates unlimited maximum lifetime (infinite lifetime).\n+public type ConnectionPool record {|\n+    int maxOpenConnections = config:getAsInt(\"\\\"b7a.sql.pool.maxOpenConnections\\\"\", 15);\n+    decimal maxConnectionLifeTimeSeconds = <decimal>config:getAsFloat(\"b7a.sql.pool.maxConnectionLifeTime\", 1800.0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwNzQzMg==", "bodyText": "Shall we make sure the property name and config key is same, so it is easy to map", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384607432", "createdAt": "2020-02-26T16:24:40Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/sql/src/main/ballerina/src/sql/types.bal", "diffHunk": "@@ -0,0 +1,48 @@\n+import ballerina/config;\n+import ballerinax/java;\n+\n+# Represents the properties which are used to configure DB connection pool.\n+# Default values of the fields can be set through the configuration API.\n+#\n+# + maxOpenConnections - The maximum number of open connections that the pool is allowed to have, including both idle and in-use connections.\n+#                     Default value is 15 and it can be changed through the configuration API with the key\n+#                     `b7a.sql.pool.maximumPoolSize`.\n+# + minIdleConnections - The minimum number of idle connections that pool tries to maintain in the pool. Default is the same as\n+#                 maxOpenConnections and it can be changed through the configuration API with the key\n+#                 `b7a.sql.pool.minimumIdle`.\n+# + maxConnectionLifeTimeSeconds - The maximum lifetime of a connection in the pool. Default value is 1800 seconds (30 minutes)\n+#                  and it can be changed through the configuration API with the key `b7a.sql.pool.maxLifetimeInMillis`.\n+#                  A value of 0 indicates unlimited maximum lifetime (infinite lifetime).\n+public type ConnectionPool record {|\n+    int maxOpenConnections = config:getAsInt(\"\\\"b7a.sql.pool.maxOpenConnections\\\"\", 15);\n+    decimal maxConnectionLifeTimeSeconds = <decimal>config:getAsFloat(\"b7a.sql.pool.maxConnectionLifeTime\", 1800.0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwNjg5MA=="}, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTc5OTg5OnYy", "diffSide": "RIGHT", "path": "stdlib/sql/src/main/ballerina/src/sql/types.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjoyNTo1M1rOFuyoDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjoyNTo1M1rOFuyoDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwODI3MA==", "bodyText": "Same as above, keys are not matching.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384608270", "createdAt": "2020-02-26T16:25:53Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/sql/src/main/ballerina/src/sql/types.bal", "diffHunk": "@@ -0,0 +1,48 @@\n+import ballerina/config;\n+import ballerinax/java;\n+\n+# Represents the properties which are used to configure DB connection pool.\n+# Default values of the fields can be set through the configuration API.\n+#\n+# + maxOpenConnections - The maximum number of open connections that the pool is allowed to have, including both idle and in-use connections.\n+#                     Default value is 15 and it can be changed through the configuration API with the key\n+#                     `b7a.sql.pool.maximumPoolSize`.\n+# + minIdleConnections - The minimum number of idle connections that pool tries to maintain in the pool. Default is the same as\n+#                 maxOpenConnections and it can be changed through the configuration API with the key\n+#                 `b7a.sql.pool.minimumIdle`.\n+# + maxConnectionLifeTimeSeconds - The maximum lifetime of a connection in the pool. Default value is 1800 seconds (30 minutes)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTgwOTI2OnYy", "diffSide": "RIGHT", "path": "stdlib/sql/src/main/ballerina/src/sql/types.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjoyNzo1N1rOFuyt5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjoyNzo1N1rOFuyt5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwOTc2NQ==", "bodyText": "Shall we wrap the lines at 120 chars", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384609765", "createdAt": "2020-02-26T16:27:57Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/sql/src/main/ballerina/src/sql/types.bal", "diffHunk": "@@ -0,0 +1,48 @@\n+import ballerina/config;\n+import ballerinax/java;\n+\n+# Represents the properties which are used to configure DB connection pool.\n+# Default values of the fields can be set through the configuration API.\n+#\n+# + maxOpenConnections - The maximum number of open connections that the pool is allowed to have, including both idle and in-use connections.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTgyNjY4OnYy", "diffSide": "RIGHT", "path": "stdlib/sql/src/main/java/org/ballerinalang/sql/datasource/SQLDatasource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjozMjoxMVrOFuy5HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjo1MToxNlrOFvG5xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYxMjYzNg==", "bodyText": "Instead of using raw MapValue shall we use the proper types? ex: MapValue<String, Object>", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384612636", "createdAt": "2020-02-26T16:32:11Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/sql/src/main/java/org/ballerinalang/sql/datasource/SQLDatasource.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.sql.datasource;\n+\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import org.ballerinalang.jvm.values.DecimalValue;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.sql.Constants;\n+import org.ballerinalang.sql.exceptions.ErrorGenerator;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * SQL datasource representation.\n+ *\n+ * @since 1.2.0\n+ */\n+public class SQLDatasource {\n+\n+    private HikariDataSource hikariDataSource;\n+    private AtomicInteger clientCounter = new AtomicInteger(0);\n+    private Lock mutex = new ReentrantLock();\n+    private boolean poolShutdown = false;\n+\n+    private SQLDatasource(SQLDatasourceParams sqlDatasourceParams) {\n+        buildDataSource(sqlDatasourceParams);\n+        try (Connection con = getSQLConnection()) {\n+        } catch (SQLException e) {\n+            throw ErrorGenerator.getSQLDatabaseError(e,\n+                    \"error while obtaining connection for \" + Constants.CONNECTOR_NAME + \", \");\n+        }\n+    }\n+\n+    /**\n+     * Retrieve the {@link SQLDatasource}} object corresponding to the provided  URL in\n+     * {@link SQLDatasource.SQLDatasourceParams}.\n+     * Creates a datasource if it doesn't exist.\n+     *\n+     * @param sqlDatasourceParams datasource parameters required to retrieve the JDBC URL for datasource lookup and\n+     *                            initialization of the newly created datasource if it doesn't exists\n+     * @return The existing or newly created {@link SQLDatasource} object\n+     */\n+    public static SQLDatasource retrieveDatasource(SQLDatasource.SQLDatasourceParams sqlDatasourceParams) {\n+        PoolKey poolKey = new PoolKey(sqlDatasourceParams.url, sqlDatasourceParams.options);\n+        Map<PoolKey, SQLDatasource> hikariDatasourceMap = SQLDatasourceUtils\n+                .retrieveDatasourceContainer(sqlDatasourceParams.connectionPool);\n+        // map could be null only in a local pool creation scenario\n+        if (hikariDatasourceMap == null) {\n+            hikariDatasourceMap = SQLDatasourceUtils.putDatasourceContainer(sqlDatasourceParams.connectionPool,\n+                    new ConcurrentHashMap<>());\n+        }\n+        SQLDatasource existingSqlDatasource = hikariDatasourceMap.get(poolKey);\n+        SQLDatasource sqlDatasourceToBeReturned = existingSqlDatasource;\n+        if (existingSqlDatasource != null) {\n+            existingSqlDatasource.acquireMutex();\n+            try {\n+                if (!existingSqlDatasource.isPoolShutdown()) {\n+                    existingSqlDatasource.incrementClientCounter();\n+                } else {\n+                    sqlDatasourceToBeReturned = hikariDatasourceMap.compute(poolKey,\n+                            (key, value) -> createAndInitDatasource(sqlDatasourceParams));\n+                }\n+            } finally {\n+                existingSqlDatasource.releaseMutex();\n+            }\n+        } else {\n+            sqlDatasourceToBeReturned = hikariDatasourceMap.computeIfAbsent(poolKey,\n+                    key -> createAndInitDatasource(sqlDatasourceParams));\n+\n+        }\n+        return sqlDatasourceToBeReturned;\n+    }\n+\n+    private static SQLDatasource createAndInitDatasource(SQLDatasource.SQLDatasourceParams sqlDatasourceParams) {\n+        SQLDatasource newSqlDatasource = new SQLDatasource(sqlDatasourceParams);\n+        newSqlDatasource.incrementClientCounter();\n+        return newSqlDatasource;\n+    }\n+\n+\n+    private Connection getSQLConnection() throws SQLException {\n+        return hikariDataSource.getConnection();\n+    }\n+\n+    private void closeConnectionPool() {\n+        hikariDataSource.close();\n+        poolShutdown = true;\n+    }\n+\n+    private boolean isPoolShutdown() {\n+        return poolShutdown;\n+    }\n+\n+    private void incrementClientCounter() {\n+        clientCounter.incrementAndGet();\n+    }\n+\n+    public void decrementClientCounterAndAttemptPoolShutdown() {\n+        acquireMutex();\n+        if (!poolShutdown) {\n+            if (clientCounter.decrementAndGet() == 0) {\n+                closeConnectionPool();\n+            }\n+        }\n+        releaseMutex();\n+    }\n+\n+    private void releaseMutex() {\n+        mutex.unlock();\n+    }\n+\n+    private void acquireMutex() {\n+        mutex.lock();\n+    }\n+\n+    private void buildDataSource(SQLDatasourceParams sqlDatasourceParams) {\n+        try {\n+            HikariConfig config = new HikariConfig();\n+            config.setJdbcUrl(sqlDatasourceParams.url);\n+            config.setUsername(sqlDatasourceParams.user);\n+            config.setPassword(sqlDatasourceParams.password);\n+            if (sqlDatasourceParams.datasourceName != null && !sqlDatasourceParams.datasourceName.isEmpty()) {\n+                if (sqlDatasourceParams.options == null || !sqlDatasourceParams.options\n+                        .containsKey(Constants.Options.URL)) {\n+                    //It is required to set the url to the datasource property when the\n+                    //datasource class name is provided. Because according to hikari\n+                    //either jdbcUrl or datasourceClassName will be honoured.\n+                    config.addDataSourceProperty(Constants.Options.URL, sqlDatasourceParams.url);\n+                }\n+            }\n+            config.setDataSourceClassName(sqlDatasourceParams.datasourceName);\n+            if (sqlDatasourceParams.connectionPool != null) {\n+                int maxOpenConn = sqlDatasourceParams.connectionPool.\n+                        getIntValue(Constants.ConnectionPool.MAX_OPEN_CONNECTIONS).intValue();\n+                if (maxOpenConn < 0) {\n+                    config.setMaximumPoolSize(maxOpenConn);\n+                }\n+\n+                Object connLifeTimeSec = sqlDatasourceParams.connectionPool\n+                        .get(Constants.ConnectionPool.MAX_CONNECTION_LIFE_TIME_SECONDS);\n+                if (connLifeTimeSec instanceof DecimalValue) {\n+                    DecimalValue connLifeTime = (DecimalValue) connLifeTimeSec;\n+                    if (connLifeTime.floatValue() > 0) {\n+                        long connLifeTimeMS = Double.valueOf(connLifeTime.floatValue() * 1000).longValue();\n+                        config.setMaxLifetime(connLifeTimeMS);\n+                    }\n+                }\n+                int minIdleConnections = sqlDatasourceParams.connectionPool\n+                        .getIntValue(Constants.ConnectionPool.MIN_IDLE_CONNECTIONS).intValue();\n+                if (minIdleConnections < 0) {\n+                    config.setMinimumIdle(minIdleConnections);\n+                }\n+            }\n+            if (sqlDatasourceParams.options != null) {\n+                MapValue<String, Object> optionMap = (MapValue<String, Object>) sqlDatasourceParams.options;\n+                optionMap.entrySet().forEach(entry -> {\n+                    if (SQLDatasourceUtils.isSupportedDbOptionType(entry.getValue())) {\n+                        config.addDataSourceProperty(entry.getKey(), entry.getValue());\n+                    } else {\n+                        throw ErrorGenerator.getSQLApplicationError(\"unsupported type \" + entry.getKey()\n+                                + \" for the db option\");\n+                    }\n+                });\n+            }\n+            hikariDataSource = new HikariDataSource(config);\n+            Runtime.getRuntime().addShutdownHook(new Thread(this::closeConnectionPool));\n+        } catch (Throwable t) {\n+            String message = \"error in sql connector configuration: \" + t.getMessage();\n+            if (t.getCause() != null) {\n+                message += \":\" + t.getCause().getMessage();\n+            }\n+            throw ErrorGenerator.getSQLApplicationError(message);\n+        }\n+    }\n+    /**\n+     * This class encapsulates the parameters required for the initialization of {@code SQLDatasource} class.\n+     */\n+    public static class SQLDatasourceParams {\n+        private String url;\n+        private String user;\n+        private String password;\n+        private String datasourceName;\n+        private MapValue connectionPool;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk0MDQ4Ng==", "bodyText": "The MapValue interface considers the key as String, and hence I don't think there is any difference of using the raw MapValue or MapValue<String, Object> here.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384940486", "createdAt": "2020-02-27T06:51:16Z", "author": {"login": "sinthuja"}, "path": "stdlib/sql/src/main/java/org/ballerinalang/sql/datasource/SQLDatasource.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.sql.datasource;\n+\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import org.ballerinalang.jvm.values.DecimalValue;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.sql.Constants;\n+import org.ballerinalang.sql.exceptions.ErrorGenerator;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * SQL datasource representation.\n+ *\n+ * @since 1.2.0\n+ */\n+public class SQLDatasource {\n+\n+    private HikariDataSource hikariDataSource;\n+    private AtomicInteger clientCounter = new AtomicInteger(0);\n+    private Lock mutex = new ReentrantLock();\n+    private boolean poolShutdown = false;\n+\n+    private SQLDatasource(SQLDatasourceParams sqlDatasourceParams) {\n+        buildDataSource(sqlDatasourceParams);\n+        try (Connection con = getSQLConnection()) {\n+        } catch (SQLException e) {\n+            throw ErrorGenerator.getSQLDatabaseError(e,\n+                    \"error while obtaining connection for \" + Constants.CONNECTOR_NAME + \", \");\n+        }\n+    }\n+\n+    /**\n+     * Retrieve the {@link SQLDatasource}} object corresponding to the provided  URL in\n+     * {@link SQLDatasource.SQLDatasourceParams}.\n+     * Creates a datasource if it doesn't exist.\n+     *\n+     * @param sqlDatasourceParams datasource parameters required to retrieve the JDBC URL for datasource lookup and\n+     *                            initialization of the newly created datasource if it doesn't exists\n+     * @return The existing or newly created {@link SQLDatasource} object\n+     */\n+    public static SQLDatasource retrieveDatasource(SQLDatasource.SQLDatasourceParams sqlDatasourceParams) {\n+        PoolKey poolKey = new PoolKey(sqlDatasourceParams.url, sqlDatasourceParams.options);\n+        Map<PoolKey, SQLDatasource> hikariDatasourceMap = SQLDatasourceUtils\n+                .retrieveDatasourceContainer(sqlDatasourceParams.connectionPool);\n+        // map could be null only in a local pool creation scenario\n+        if (hikariDatasourceMap == null) {\n+            hikariDatasourceMap = SQLDatasourceUtils.putDatasourceContainer(sqlDatasourceParams.connectionPool,\n+                    new ConcurrentHashMap<>());\n+        }\n+        SQLDatasource existingSqlDatasource = hikariDatasourceMap.get(poolKey);\n+        SQLDatasource sqlDatasourceToBeReturned = existingSqlDatasource;\n+        if (existingSqlDatasource != null) {\n+            existingSqlDatasource.acquireMutex();\n+            try {\n+                if (!existingSqlDatasource.isPoolShutdown()) {\n+                    existingSqlDatasource.incrementClientCounter();\n+                } else {\n+                    sqlDatasourceToBeReturned = hikariDatasourceMap.compute(poolKey,\n+                            (key, value) -> createAndInitDatasource(sqlDatasourceParams));\n+                }\n+            } finally {\n+                existingSqlDatasource.releaseMutex();\n+            }\n+        } else {\n+            sqlDatasourceToBeReturned = hikariDatasourceMap.computeIfAbsent(poolKey,\n+                    key -> createAndInitDatasource(sqlDatasourceParams));\n+\n+        }\n+        return sqlDatasourceToBeReturned;\n+    }\n+\n+    private static SQLDatasource createAndInitDatasource(SQLDatasource.SQLDatasourceParams sqlDatasourceParams) {\n+        SQLDatasource newSqlDatasource = new SQLDatasource(sqlDatasourceParams);\n+        newSqlDatasource.incrementClientCounter();\n+        return newSqlDatasource;\n+    }\n+\n+\n+    private Connection getSQLConnection() throws SQLException {\n+        return hikariDataSource.getConnection();\n+    }\n+\n+    private void closeConnectionPool() {\n+        hikariDataSource.close();\n+        poolShutdown = true;\n+    }\n+\n+    private boolean isPoolShutdown() {\n+        return poolShutdown;\n+    }\n+\n+    private void incrementClientCounter() {\n+        clientCounter.incrementAndGet();\n+    }\n+\n+    public void decrementClientCounterAndAttemptPoolShutdown() {\n+        acquireMutex();\n+        if (!poolShutdown) {\n+            if (clientCounter.decrementAndGet() == 0) {\n+                closeConnectionPool();\n+            }\n+        }\n+        releaseMutex();\n+    }\n+\n+    private void releaseMutex() {\n+        mutex.unlock();\n+    }\n+\n+    private void acquireMutex() {\n+        mutex.lock();\n+    }\n+\n+    private void buildDataSource(SQLDatasourceParams sqlDatasourceParams) {\n+        try {\n+            HikariConfig config = new HikariConfig();\n+            config.setJdbcUrl(sqlDatasourceParams.url);\n+            config.setUsername(sqlDatasourceParams.user);\n+            config.setPassword(sqlDatasourceParams.password);\n+            if (sqlDatasourceParams.datasourceName != null && !sqlDatasourceParams.datasourceName.isEmpty()) {\n+                if (sqlDatasourceParams.options == null || !sqlDatasourceParams.options\n+                        .containsKey(Constants.Options.URL)) {\n+                    //It is required to set the url to the datasource property when the\n+                    //datasource class name is provided. Because according to hikari\n+                    //either jdbcUrl or datasourceClassName will be honoured.\n+                    config.addDataSourceProperty(Constants.Options.URL, sqlDatasourceParams.url);\n+                }\n+            }\n+            config.setDataSourceClassName(sqlDatasourceParams.datasourceName);\n+            if (sqlDatasourceParams.connectionPool != null) {\n+                int maxOpenConn = sqlDatasourceParams.connectionPool.\n+                        getIntValue(Constants.ConnectionPool.MAX_OPEN_CONNECTIONS).intValue();\n+                if (maxOpenConn < 0) {\n+                    config.setMaximumPoolSize(maxOpenConn);\n+                }\n+\n+                Object connLifeTimeSec = sqlDatasourceParams.connectionPool\n+                        .get(Constants.ConnectionPool.MAX_CONNECTION_LIFE_TIME_SECONDS);\n+                if (connLifeTimeSec instanceof DecimalValue) {\n+                    DecimalValue connLifeTime = (DecimalValue) connLifeTimeSec;\n+                    if (connLifeTime.floatValue() > 0) {\n+                        long connLifeTimeMS = Double.valueOf(connLifeTime.floatValue() * 1000).longValue();\n+                        config.setMaxLifetime(connLifeTimeMS);\n+                    }\n+                }\n+                int minIdleConnections = sqlDatasourceParams.connectionPool\n+                        .getIntValue(Constants.ConnectionPool.MIN_IDLE_CONNECTIONS).intValue();\n+                if (minIdleConnections < 0) {\n+                    config.setMinimumIdle(minIdleConnections);\n+                }\n+            }\n+            if (sqlDatasourceParams.options != null) {\n+                MapValue<String, Object> optionMap = (MapValue<String, Object>) sqlDatasourceParams.options;\n+                optionMap.entrySet().forEach(entry -> {\n+                    if (SQLDatasourceUtils.isSupportedDbOptionType(entry.getValue())) {\n+                        config.addDataSourceProperty(entry.getKey(), entry.getValue());\n+                    } else {\n+                        throw ErrorGenerator.getSQLApplicationError(\"unsupported type \" + entry.getKey()\n+                                + \" for the db option\");\n+                    }\n+                });\n+            }\n+            hikariDataSource = new HikariDataSource(config);\n+            Runtime.getRuntime().addShutdownHook(new Thread(this::closeConnectionPool));\n+        } catch (Throwable t) {\n+            String message = \"error in sql connector configuration: \" + t.getMessage();\n+            if (t.getCause() != null) {\n+                message += \":\" + t.getCause().getMessage();\n+            }\n+            throw ErrorGenerator.getSQLApplicationError(message);\n+        }\n+    }\n+    /**\n+     * This class encapsulates the parameters required for the initialization of {@code SQLDatasource} class.\n+     */\n+    public static class SQLDatasourceParams {\n+        private String url;\n+        private String user;\n+        private String password;\n+        private String datasourceName;\n+        private MapValue connectionPool;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYxMjYzNg=="}, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTg0MDY0OnYy", "diffSide": "RIGHT", "path": "stdlib/sql/src/main/java/org/ballerinalang/sql/exceptions/ApplicationException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjozNToyOFrOFuzBrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjozNToyOFrOFuzBrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYxNDgzMA==", "bodyText": "What is the usage of this class? Seems it is not used", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384614830", "createdAt": "2020-02-26T16:35:28Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/sql/src/main/java/org/ballerinalang/sql/exceptions/ApplicationException.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ * <p>\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.sql.exceptions;\n+\n+/**\n+ * The exception to throw application related exceptions of SQL client.\n+ *\n+ * @since 1.2.0\n+ */\n+public class ApplicationException extends Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTg0MDk1OnYy", "diffSide": "RIGHT", "path": "stdlib/sql/src/main/java/org/ballerinalang/sql/exceptions/DatabaseException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjozNTozNFrOFuzB7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjozNTozNFrOFuzB7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYxNDg5NA==", "bodyText": "What is the usage of this class? Seems it is not used", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384614894", "createdAt": "2020-02-26T16:35:34Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/sql/src/main/java/org/ballerinalang/sql/exceptions/DatabaseException.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.sql.exceptions;\n+\n+import java.sql.SQLException;\n+\n+/**\n+ * This exception represents the underneath database communication error.\n+ *\n+ * @since 1.2.0\n+ */\n+public class DatabaseException extends SQLException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTg1MDY4OnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc2/src/main/ballerina/Ballerina.toml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjozNzo1OVrOFuzIJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjozNzo1OVrOFuzIJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYxNjQ4NQ==", "bodyText": "Extra new line?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384616485", "createdAt": "2020-02-26T16:37:59Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc2/src/main/ballerina/Ballerina.toml", "diffHunk": "@@ -0,0 +1,21 @@\n+[project]\n+org-name = \"ballerina\"\n+version = \"0.0.0\"\n+\n+[platform]\n+target = \"java8\"\n+\n+    [[platform.libraries]]\n+    artifactId = \"jdbc\"\n+    version = \"@project.version@\"\n+    path = \"./lib/ballerina-jdbc2-@project.version@.jar\"\n+    groupId = \"ballerina\"\n+    modules = [\"jdbc\"]\n+\n+    [[platform.libraries]]\n+    artifactId = \"jdbc\"\n+    version = \"@project.version@\"\n+    path = \"./lib/ballerina-sql-@project.version@.jar\"\n+    groupId = \"ballerina\"\n+    modules = [\"jdbc\"]\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTg1NzkzOnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc2/src/main/ballerina/src/java.jdbc/client.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjozOTo0M1rOFuzMyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNjozOTo0M1rOFuzMyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYxNzY3NQ==", "bodyText": "Shall we rename this to connectionPool?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r384617675", "createdAt": "2020-02-26T16:39:43Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc2/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -0,0 +1,81 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerinax/java;\n+import ballerina/sql;\n+\n+# Represents a JDBC client.\n+#\n+public type Client client object {\n+    *sql:Client;\n+    private boolean clientActive = true;\n+\n+    # Gets called when the JDBC client is instantiated.\n+    public function __init(public string url, public string? user = (), public string? password = (),\n+                           public Options? options = (), public sql:ConnectionPool? connPool = ()) returns sql:Error? {\n+      ClientConfiguration clientConf = {\n+        url: url,\n+        user: user,\n+        password: password,\n+        options:options,\n+        connPool: connPool\n+      };\n+      return createClient(self, clientConf, sql:getGlobalConnectionPool());\n+    }\n+\n+    # Stops the JDBC client.\n+    #\n+    # + return - Possible error during closing the client\n+    public function close() returns error? {\n+        self.clientActive = false;\n+        return close(self);\n+    }\n+};\n+\n+\n+# Provides a set of configuration related to database.\n+# + datasourceName - The driver class name to be used to get the connection\n+# + properties - the properties of the database which should be applied when getting the connection\n+public type Options record {|\n+    string? datasourceName = ();\n+    map<anydata>? properties = ();\n+|};\n+\n+# Provides a set of configurations for the JDBC Client to be passed internally within the module.\n+#\n+# + url - URL of the database to connect\n+# + user - Username for the database connection\n+# + password - Password for the database connection\n+# + options - A map of DB specific `Options`.\n+# + connPool - Properties for the connection pool configuration. Refer `sql:ConnectionPool` for more details\n+type ClientConfiguration record {|\n+    string? url;\n+    string? user;\n+    string? password;\n+    Options? options;\n+    sql:ConnectionPool? connPool;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a660b539cd1d168afc1b94a7c0ab1a55d8e083ca"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDc3NDYyOnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/java/org/ballerinalang/sql/datasource/SQLDatasource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTozNDozN1rOFvO5eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzoxODowM1rOFvRzuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3MTQ4MA==", "bodyText": "Is this condition correct? I think it should be maxOpenConn > 0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r385071480", "createdAt": "2020-02-27T11:34:37Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/database/sql/src/main/java/org/ballerinalang/sql/datasource/SQLDatasource.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.sql.datasource;\n+\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import org.ballerinalang.jvm.values.DecimalValue;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.sql.Constants;\n+import org.ballerinalang.sql.utils.ErrorGenerator;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * SQL datasource representation.\n+ *\n+ * @since 1.2.0\n+ */\n+public class SQLDatasource {\n+\n+    private HikariDataSource hikariDataSource;\n+    private AtomicInteger clientCounter = new AtomicInteger(0);\n+    private Lock mutex = new ReentrantLock();\n+    private boolean poolShutdown = false;\n+\n+    private SQLDatasource(SQLDatasourceParams sqlDatasourceParams) {\n+        buildDataSource(sqlDatasourceParams);\n+        try (Connection con = getSQLConnection()) {\n+        } catch (SQLException e) {\n+            throw ErrorGenerator.getSQLDatabaseError(e,\n+                    \"error while obtaining connection for \" + Constants.CONNECTOR_NAME + \", \");\n+        }\n+    }\n+\n+    /**\n+     * Retrieve the {@link SQLDatasource}} object corresponding to the provided  URL in\n+     * {@link SQLDatasource.SQLDatasourceParams}.\n+     * Creates a datasource if it doesn't exist.\n+     *\n+     * @param sqlDatasourceParams datasource parameters required to retrieve the JDBC URL for datasource lookup and\n+     *                            initialization of the newly created datasource if it doesn't exists\n+     * @return The existing or newly created {@link SQLDatasource} object\n+     */\n+    public static SQLDatasource retrieveDatasource(SQLDatasource.SQLDatasourceParams sqlDatasourceParams) {\n+        PoolKey poolKey = new PoolKey(sqlDatasourceParams.url, sqlDatasourceParams.options);\n+        Map<PoolKey, SQLDatasource> hikariDatasourceMap = SQLDatasourceUtils\n+                .retrieveDatasourceContainer(sqlDatasourceParams.connectionPool);\n+        // map could be null only in a local pool creation scenario\n+        if (hikariDatasourceMap == null) {\n+            hikariDatasourceMap = SQLDatasourceUtils.putDatasourceContainer(sqlDatasourceParams.connectionPool,\n+                    new ConcurrentHashMap<>());\n+        }\n+        SQLDatasource existingSqlDatasource = hikariDatasourceMap.get(poolKey);\n+        SQLDatasource sqlDatasourceToBeReturned = existingSqlDatasource;\n+        if (existingSqlDatasource != null) {\n+            existingSqlDatasource.acquireMutex();\n+            try {\n+                if (!existingSqlDatasource.isPoolShutdown()) {\n+                    existingSqlDatasource.incrementClientCounter();\n+                } else {\n+                    sqlDatasourceToBeReturned = hikariDatasourceMap.compute(poolKey,\n+                            (key, value) -> createAndInitDatasource(sqlDatasourceParams));\n+                }\n+            } finally {\n+                existingSqlDatasource.releaseMutex();\n+            }\n+        } else {\n+            sqlDatasourceToBeReturned = hikariDatasourceMap.computeIfAbsent(poolKey,\n+                    key -> createAndInitDatasource(sqlDatasourceParams));\n+\n+        }\n+        return sqlDatasourceToBeReturned;\n+    }\n+\n+    private static SQLDatasource createAndInitDatasource(SQLDatasource.SQLDatasourceParams sqlDatasourceParams) {\n+        SQLDatasource newSqlDatasource = new SQLDatasource(sqlDatasourceParams);\n+        newSqlDatasource.incrementClientCounter();\n+        return newSqlDatasource;\n+    }\n+\n+\n+    private Connection getSQLConnection() throws SQLException {\n+        return hikariDataSource.getConnection();\n+    }\n+\n+    private void closeConnectionPool() {\n+        hikariDataSource.close();\n+        poolShutdown = true;\n+    }\n+\n+    private boolean isPoolShutdown() {\n+        return poolShutdown;\n+    }\n+\n+    private void incrementClientCounter() {\n+        clientCounter.incrementAndGet();\n+    }\n+\n+    public void decrementClientCounterAndAttemptPoolShutdown() {\n+        acquireMutex();\n+        if (!poolShutdown) {\n+            if (clientCounter.decrementAndGet() == 0) {\n+                closeConnectionPool();\n+            }\n+        }\n+        releaseMutex();\n+    }\n+\n+    private void releaseMutex() {\n+        mutex.unlock();\n+    }\n+\n+    private void acquireMutex() {\n+        mutex.lock();\n+    }\n+\n+    private void buildDataSource(SQLDatasourceParams sqlDatasourceParams) {\n+        try {\n+            HikariConfig config = new HikariConfig();\n+            config.setJdbcUrl(sqlDatasourceParams.url);\n+            config.setUsername(sqlDatasourceParams.user);\n+            config.setPassword(sqlDatasourceParams.password);\n+            if (sqlDatasourceParams.datasourceName != null && !sqlDatasourceParams.datasourceName.isEmpty()) {\n+                if (sqlDatasourceParams.options == null || !sqlDatasourceParams.options\n+                        .containsKey(Constants.Options.URL)) {\n+                    //It is required to set the url to the datasource property when the\n+                    //datasource class name is provided. Because according to hikari\n+                    //either jdbcUrl or datasourceClassName will be honoured.\n+                    config.addDataSourceProperty(Constants.Options.URL, sqlDatasourceParams.url);\n+                }\n+            }\n+            config.setDataSourceClassName(sqlDatasourceParams.datasourceName);\n+            if (sqlDatasourceParams.connectionPool != null) {\n+                int maxOpenConn = sqlDatasourceParams.connectionPool.\n+                        getIntValue(Constants.ConnectionPool.MAX_OPEN_CONNECTIONS).intValue();\n+                if (maxOpenConn < 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3effc57e93b76d729af0a6338994d6ee76d1ca12"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExOTE2Mw==", "bodyText": "Yes, it should be greater than zero.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r385119163", "createdAt": "2020-02-27T13:18:03Z", "author": {"login": "sinthuja"}, "path": "stdlib/database/sql/src/main/java/org/ballerinalang/sql/datasource/SQLDatasource.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.sql.datasource;\n+\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import org.ballerinalang.jvm.values.DecimalValue;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.sql.Constants;\n+import org.ballerinalang.sql.utils.ErrorGenerator;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * SQL datasource representation.\n+ *\n+ * @since 1.2.0\n+ */\n+public class SQLDatasource {\n+\n+    private HikariDataSource hikariDataSource;\n+    private AtomicInteger clientCounter = new AtomicInteger(0);\n+    private Lock mutex = new ReentrantLock();\n+    private boolean poolShutdown = false;\n+\n+    private SQLDatasource(SQLDatasourceParams sqlDatasourceParams) {\n+        buildDataSource(sqlDatasourceParams);\n+        try (Connection con = getSQLConnection()) {\n+        } catch (SQLException e) {\n+            throw ErrorGenerator.getSQLDatabaseError(e,\n+                    \"error while obtaining connection for \" + Constants.CONNECTOR_NAME + \", \");\n+        }\n+    }\n+\n+    /**\n+     * Retrieve the {@link SQLDatasource}} object corresponding to the provided  URL in\n+     * {@link SQLDatasource.SQLDatasourceParams}.\n+     * Creates a datasource if it doesn't exist.\n+     *\n+     * @param sqlDatasourceParams datasource parameters required to retrieve the JDBC URL for datasource lookup and\n+     *                            initialization of the newly created datasource if it doesn't exists\n+     * @return The existing or newly created {@link SQLDatasource} object\n+     */\n+    public static SQLDatasource retrieveDatasource(SQLDatasource.SQLDatasourceParams sqlDatasourceParams) {\n+        PoolKey poolKey = new PoolKey(sqlDatasourceParams.url, sqlDatasourceParams.options);\n+        Map<PoolKey, SQLDatasource> hikariDatasourceMap = SQLDatasourceUtils\n+                .retrieveDatasourceContainer(sqlDatasourceParams.connectionPool);\n+        // map could be null only in a local pool creation scenario\n+        if (hikariDatasourceMap == null) {\n+            hikariDatasourceMap = SQLDatasourceUtils.putDatasourceContainer(sqlDatasourceParams.connectionPool,\n+                    new ConcurrentHashMap<>());\n+        }\n+        SQLDatasource existingSqlDatasource = hikariDatasourceMap.get(poolKey);\n+        SQLDatasource sqlDatasourceToBeReturned = existingSqlDatasource;\n+        if (existingSqlDatasource != null) {\n+            existingSqlDatasource.acquireMutex();\n+            try {\n+                if (!existingSqlDatasource.isPoolShutdown()) {\n+                    existingSqlDatasource.incrementClientCounter();\n+                } else {\n+                    sqlDatasourceToBeReturned = hikariDatasourceMap.compute(poolKey,\n+                            (key, value) -> createAndInitDatasource(sqlDatasourceParams));\n+                }\n+            } finally {\n+                existingSqlDatasource.releaseMutex();\n+            }\n+        } else {\n+            sqlDatasourceToBeReturned = hikariDatasourceMap.computeIfAbsent(poolKey,\n+                    key -> createAndInitDatasource(sqlDatasourceParams));\n+\n+        }\n+        return sqlDatasourceToBeReturned;\n+    }\n+\n+    private static SQLDatasource createAndInitDatasource(SQLDatasource.SQLDatasourceParams sqlDatasourceParams) {\n+        SQLDatasource newSqlDatasource = new SQLDatasource(sqlDatasourceParams);\n+        newSqlDatasource.incrementClientCounter();\n+        return newSqlDatasource;\n+    }\n+\n+\n+    private Connection getSQLConnection() throws SQLException {\n+        return hikariDataSource.getConnection();\n+    }\n+\n+    private void closeConnectionPool() {\n+        hikariDataSource.close();\n+        poolShutdown = true;\n+    }\n+\n+    private boolean isPoolShutdown() {\n+        return poolShutdown;\n+    }\n+\n+    private void incrementClientCounter() {\n+        clientCounter.incrementAndGet();\n+    }\n+\n+    public void decrementClientCounterAndAttemptPoolShutdown() {\n+        acquireMutex();\n+        if (!poolShutdown) {\n+            if (clientCounter.decrementAndGet() == 0) {\n+                closeConnectionPool();\n+            }\n+        }\n+        releaseMutex();\n+    }\n+\n+    private void releaseMutex() {\n+        mutex.unlock();\n+    }\n+\n+    private void acquireMutex() {\n+        mutex.lock();\n+    }\n+\n+    private void buildDataSource(SQLDatasourceParams sqlDatasourceParams) {\n+        try {\n+            HikariConfig config = new HikariConfig();\n+            config.setJdbcUrl(sqlDatasourceParams.url);\n+            config.setUsername(sqlDatasourceParams.user);\n+            config.setPassword(sqlDatasourceParams.password);\n+            if (sqlDatasourceParams.datasourceName != null && !sqlDatasourceParams.datasourceName.isEmpty()) {\n+                if (sqlDatasourceParams.options == null || !sqlDatasourceParams.options\n+                        .containsKey(Constants.Options.URL)) {\n+                    //It is required to set the url to the datasource property when the\n+                    //datasource class name is provided. Because according to hikari\n+                    //either jdbcUrl or datasourceClassName will be honoured.\n+                    config.addDataSourceProperty(Constants.Options.URL, sqlDatasourceParams.url);\n+                }\n+            }\n+            config.setDataSourceClassName(sqlDatasourceParams.datasourceName);\n+            if (sqlDatasourceParams.connectionPool != null) {\n+                int maxOpenConn = sqlDatasourceParams.connectionPool.\n+                        getIntValue(Constants.ConnectionPool.MAX_OPEN_CONNECTIONS).intValue();\n+                if (maxOpenConn < 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3MTQ4MA=="}, "originalCommit": {"oid": "3effc57e93b76d729af0a6338994d6ee76d1ca12"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDc3NTgxOnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/java/org/ballerinalang/sql/datasource/SQLDatasource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTozNTowNlrOFvO6SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzoxODoxNFrOFvR0Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3MTY4OQ==", "bodyText": "Same as above? This should be minIdleConnections > 0?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r385071689", "createdAt": "2020-02-27T11:35:06Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/database/sql/src/main/java/org/ballerinalang/sql/datasource/SQLDatasource.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.sql.datasource;\n+\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import org.ballerinalang.jvm.values.DecimalValue;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.sql.Constants;\n+import org.ballerinalang.sql.utils.ErrorGenerator;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * SQL datasource representation.\n+ *\n+ * @since 1.2.0\n+ */\n+public class SQLDatasource {\n+\n+    private HikariDataSource hikariDataSource;\n+    private AtomicInteger clientCounter = new AtomicInteger(0);\n+    private Lock mutex = new ReentrantLock();\n+    private boolean poolShutdown = false;\n+\n+    private SQLDatasource(SQLDatasourceParams sqlDatasourceParams) {\n+        buildDataSource(sqlDatasourceParams);\n+        try (Connection con = getSQLConnection()) {\n+        } catch (SQLException e) {\n+            throw ErrorGenerator.getSQLDatabaseError(e,\n+                    \"error while obtaining connection for \" + Constants.CONNECTOR_NAME + \", \");\n+        }\n+    }\n+\n+    /**\n+     * Retrieve the {@link SQLDatasource}} object corresponding to the provided  URL in\n+     * {@link SQLDatasource.SQLDatasourceParams}.\n+     * Creates a datasource if it doesn't exist.\n+     *\n+     * @param sqlDatasourceParams datasource parameters required to retrieve the JDBC URL for datasource lookup and\n+     *                            initialization of the newly created datasource if it doesn't exists\n+     * @return The existing or newly created {@link SQLDatasource} object\n+     */\n+    public static SQLDatasource retrieveDatasource(SQLDatasource.SQLDatasourceParams sqlDatasourceParams) {\n+        PoolKey poolKey = new PoolKey(sqlDatasourceParams.url, sqlDatasourceParams.options);\n+        Map<PoolKey, SQLDatasource> hikariDatasourceMap = SQLDatasourceUtils\n+                .retrieveDatasourceContainer(sqlDatasourceParams.connectionPool);\n+        // map could be null only in a local pool creation scenario\n+        if (hikariDatasourceMap == null) {\n+            hikariDatasourceMap = SQLDatasourceUtils.putDatasourceContainer(sqlDatasourceParams.connectionPool,\n+                    new ConcurrentHashMap<>());\n+        }\n+        SQLDatasource existingSqlDatasource = hikariDatasourceMap.get(poolKey);\n+        SQLDatasource sqlDatasourceToBeReturned = existingSqlDatasource;\n+        if (existingSqlDatasource != null) {\n+            existingSqlDatasource.acquireMutex();\n+            try {\n+                if (!existingSqlDatasource.isPoolShutdown()) {\n+                    existingSqlDatasource.incrementClientCounter();\n+                } else {\n+                    sqlDatasourceToBeReturned = hikariDatasourceMap.compute(poolKey,\n+                            (key, value) -> createAndInitDatasource(sqlDatasourceParams));\n+                }\n+            } finally {\n+                existingSqlDatasource.releaseMutex();\n+            }\n+        } else {\n+            sqlDatasourceToBeReturned = hikariDatasourceMap.computeIfAbsent(poolKey,\n+                    key -> createAndInitDatasource(sqlDatasourceParams));\n+\n+        }\n+        return sqlDatasourceToBeReturned;\n+    }\n+\n+    private static SQLDatasource createAndInitDatasource(SQLDatasource.SQLDatasourceParams sqlDatasourceParams) {\n+        SQLDatasource newSqlDatasource = new SQLDatasource(sqlDatasourceParams);\n+        newSqlDatasource.incrementClientCounter();\n+        return newSqlDatasource;\n+    }\n+\n+\n+    private Connection getSQLConnection() throws SQLException {\n+        return hikariDataSource.getConnection();\n+    }\n+\n+    private void closeConnectionPool() {\n+        hikariDataSource.close();\n+        poolShutdown = true;\n+    }\n+\n+    private boolean isPoolShutdown() {\n+        return poolShutdown;\n+    }\n+\n+    private void incrementClientCounter() {\n+        clientCounter.incrementAndGet();\n+    }\n+\n+    public void decrementClientCounterAndAttemptPoolShutdown() {\n+        acquireMutex();\n+        if (!poolShutdown) {\n+            if (clientCounter.decrementAndGet() == 0) {\n+                closeConnectionPool();\n+            }\n+        }\n+        releaseMutex();\n+    }\n+\n+    private void releaseMutex() {\n+        mutex.unlock();\n+    }\n+\n+    private void acquireMutex() {\n+        mutex.lock();\n+    }\n+\n+    private void buildDataSource(SQLDatasourceParams sqlDatasourceParams) {\n+        try {\n+            HikariConfig config = new HikariConfig();\n+            config.setJdbcUrl(sqlDatasourceParams.url);\n+            config.setUsername(sqlDatasourceParams.user);\n+            config.setPassword(sqlDatasourceParams.password);\n+            if (sqlDatasourceParams.datasourceName != null && !sqlDatasourceParams.datasourceName.isEmpty()) {\n+                if (sqlDatasourceParams.options == null || !sqlDatasourceParams.options\n+                        .containsKey(Constants.Options.URL)) {\n+                    //It is required to set the url to the datasource property when the\n+                    //datasource class name is provided. Because according to hikari\n+                    //either jdbcUrl or datasourceClassName will be honoured.\n+                    config.addDataSourceProperty(Constants.Options.URL, sqlDatasourceParams.url);\n+                }\n+            }\n+            config.setDataSourceClassName(sqlDatasourceParams.datasourceName);\n+            if (sqlDatasourceParams.connectionPool != null) {\n+                int maxOpenConn = sqlDatasourceParams.connectionPool.\n+                        getIntValue(Constants.ConnectionPool.MAX_OPEN_CONNECTIONS).intValue();\n+                if (maxOpenConn < 0) {\n+                    config.setMaximumPoolSize(maxOpenConn);\n+                }\n+\n+                Object connLifeTimeSec = sqlDatasourceParams.connectionPool\n+                        .get(Constants.ConnectionPool.MAX_CONNECTION_LIFE_TIME_SECONDS);\n+                if (connLifeTimeSec instanceof DecimalValue) {\n+                    DecimalValue connLifeTime = (DecimalValue) connLifeTimeSec;\n+                    if (connLifeTime.floatValue() > 0) {\n+                        long connLifeTimeMS = Double.valueOf(connLifeTime.floatValue() * 1000).longValue();\n+                        config.setMaxLifetime(connLifeTimeMS);\n+                    }\n+                }\n+                int minIdleConnections = sqlDatasourceParams.connectionPool\n+                        .getIntValue(Constants.ConnectionPool.MIN_IDLE_CONNECTIONS).intValue();\n+                if (minIdleConnections < 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3effc57e93b76d729af0a6338994d6ee76d1ca12"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExOTI1MQ==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21272#discussion_r385119251", "createdAt": "2020-02-27T13:18:14Z", "author": {"login": "sinthuja"}, "path": "stdlib/database/sql/src/main/java/org/ballerinalang/sql/datasource/SQLDatasource.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.sql.datasource;\n+\n+import com.zaxxer.hikari.HikariConfig;\n+import com.zaxxer.hikari.HikariDataSource;\n+import org.ballerinalang.jvm.values.DecimalValue;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.sql.Constants;\n+import org.ballerinalang.sql.utils.ErrorGenerator;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * SQL datasource representation.\n+ *\n+ * @since 1.2.0\n+ */\n+public class SQLDatasource {\n+\n+    private HikariDataSource hikariDataSource;\n+    private AtomicInteger clientCounter = new AtomicInteger(0);\n+    private Lock mutex = new ReentrantLock();\n+    private boolean poolShutdown = false;\n+\n+    private SQLDatasource(SQLDatasourceParams sqlDatasourceParams) {\n+        buildDataSource(sqlDatasourceParams);\n+        try (Connection con = getSQLConnection()) {\n+        } catch (SQLException e) {\n+            throw ErrorGenerator.getSQLDatabaseError(e,\n+                    \"error while obtaining connection for \" + Constants.CONNECTOR_NAME + \", \");\n+        }\n+    }\n+\n+    /**\n+     * Retrieve the {@link SQLDatasource}} object corresponding to the provided  URL in\n+     * {@link SQLDatasource.SQLDatasourceParams}.\n+     * Creates a datasource if it doesn't exist.\n+     *\n+     * @param sqlDatasourceParams datasource parameters required to retrieve the JDBC URL for datasource lookup and\n+     *                            initialization of the newly created datasource if it doesn't exists\n+     * @return The existing or newly created {@link SQLDatasource} object\n+     */\n+    public static SQLDatasource retrieveDatasource(SQLDatasource.SQLDatasourceParams sqlDatasourceParams) {\n+        PoolKey poolKey = new PoolKey(sqlDatasourceParams.url, sqlDatasourceParams.options);\n+        Map<PoolKey, SQLDatasource> hikariDatasourceMap = SQLDatasourceUtils\n+                .retrieveDatasourceContainer(sqlDatasourceParams.connectionPool);\n+        // map could be null only in a local pool creation scenario\n+        if (hikariDatasourceMap == null) {\n+            hikariDatasourceMap = SQLDatasourceUtils.putDatasourceContainer(sqlDatasourceParams.connectionPool,\n+                    new ConcurrentHashMap<>());\n+        }\n+        SQLDatasource existingSqlDatasource = hikariDatasourceMap.get(poolKey);\n+        SQLDatasource sqlDatasourceToBeReturned = existingSqlDatasource;\n+        if (existingSqlDatasource != null) {\n+            existingSqlDatasource.acquireMutex();\n+            try {\n+                if (!existingSqlDatasource.isPoolShutdown()) {\n+                    existingSqlDatasource.incrementClientCounter();\n+                } else {\n+                    sqlDatasourceToBeReturned = hikariDatasourceMap.compute(poolKey,\n+                            (key, value) -> createAndInitDatasource(sqlDatasourceParams));\n+                }\n+            } finally {\n+                existingSqlDatasource.releaseMutex();\n+            }\n+        } else {\n+            sqlDatasourceToBeReturned = hikariDatasourceMap.computeIfAbsent(poolKey,\n+                    key -> createAndInitDatasource(sqlDatasourceParams));\n+\n+        }\n+        return sqlDatasourceToBeReturned;\n+    }\n+\n+    private static SQLDatasource createAndInitDatasource(SQLDatasource.SQLDatasourceParams sqlDatasourceParams) {\n+        SQLDatasource newSqlDatasource = new SQLDatasource(sqlDatasourceParams);\n+        newSqlDatasource.incrementClientCounter();\n+        return newSqlDatasource;\n+    }\n+\n+\n+    private Connection getSQLConnection() throws SQLException {\n+        return hikariDataSource.getConnection();\n+    }\n+\n+    private void closeConnectionPool() {\n+        hikariDataSource.close();\n+        poolShutdown = true;\n+    }\n+\n+    private boolean isPoolShutdown() {\n+        return poolShutdown;\n+    }\n+\n+    private void incrementClientCounter() {\n+        clientCounter.incrementAndGet();\n+    }\n+\n+    public void decrementClientCounterAndAttemptPoolShutdown() {\n+        acquireMutex();\n+        if (!poolShutdown) {\n+            if (clientCounter.decrementAndGet() == 0) {\n+                closeConnectionPool();\n+            }\n+        }\n+        releaseMutex();\n+    }\n+\n+    private void releaseMutex() {\n+        mutex.unlock();\n+    }\n+\n+    private void acquireMutex() {\n+        mutex.lock();\n+    }\n+\n+    private void buildDataSource(SQLDatasourceParams sqlDatasourceParams) {\n+        try {\n+            HikariConfig config = new HikariConfig();\n+            config.setJdbcUrl(sqlDatasourceParams.url);\n+            config.setUsername(sqlDatasourceParams.user);\n+            config.setPassword(sqlDatasourceParams.password);\n+            if (sqlDatasourceParams.datasourceName != null && !sqlDatasourceParams.datasourceName.isEmpty()) {\n+                if (sqlDatasourceParams.options == null || !sqlDatasourceParams.options\n+                        .containsKey(Constants.Options.URL)) {\n+                    //It is required to set the url to the datasource property when the\n+                    //datasource class name is provided. Because according to hikari\n+                    //either jdbcUrl or datasourceClassName will be honoured.\n+                    config.addDataSourceProperty(Constants.Options.URL, sqlDatasourceParams.url);\n+                }\n+            }\n+            config.setDataSourceClassName(sqlDatasourceParams.datasourceName);\n+            if (sqlDatasourceParams.connectionPool != null) {\n+                int maxOpenConn = sqlDatasourceParams.connectionPool.\n+                        getIntValue(Constants.ConnectionPool.MAX_OPEN_CONNECTIONS).intValue();\n+                if (maxOpenConn < 0) {\n+                    config.setMaximumPoolSize(maxOpenConn);\n+                }\n+\n+                Object connLifeTimeSec = sqlDatasourceParams.connectionPool\n+                        .get(Constants.ConnectionPool.MAX_CONNECTION_LIFE_TIME_SECONDS);\n+                if (connLifeTimeSec instanceof DecimalValue) {\n+                    DecimalValue connLifeTime = (DecimalValue) connLifeTimeSec;\n+                    if (connLifeTime.floatValue() > 0) {\n+                        long connLifeTimeMS = Double.valueOf(connLifeTime.floatValue() * 1000).longValue();\n+                        config.setMaxLifetime(connLifeTimeMS);\n+                    }\n+                }\n+                int minIdleConnections = sqlDatasourceParams.connectionPool\n+                        .getIntValue(Constants.ConnectionPool.MIN_IDLE_CONNECTIONS).intValue();\n+                if (minIdleConnections < 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3MTY4OQ=="}, "originalCommit": {"oid": "3effc57e93b76d729af0a6338994d6ee76d1ca12"}, "originalPosition": 172}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 991, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}