{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxNjU3MDcw", "number": 27544, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMDo1OToyMFrOFLowSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMDo1OToyMFrOFLowSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzQ2Mzc5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMDo1OToyMFrOIO6Yzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNDozMzozOVrOIPEGeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUwNzU5OA==", "bodyText": "Can we extract a method here", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27544#discussion_r552507598", "createdAt": "2021-01-06T10:59:20Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -602,7 +607,53 @@ public void visit(BLangObjectTypeNode objectTypeNode) {\n     @Override\n     public void visit(BLangRecordTypeNode recordTypeNode) {\n         SymbolEnv recordEnv = SymbolEnv.createTypeEnv(recordTypeNode, recordTypeNode.symbol.scope, env);\n-        recordTypeNode.fields.forEach(field -> analyzeDef(field, recordEnv));\n+\n+        BType type = recordTypeNode.type;\n+\n+        boolean isRecordType = false;\n+        LinkedHashMap<String, BField> fields = null;\n+\n+        boolean allReadOnlyFields = false;\n+\n+        if (type.tag == TypeTags.RECORD) {\n+            isRecordType = true;\n+\n+            BRecordType recordType = (BRecordType) type;\n+            fields = recordType.fields;\n+            allReadOnlyFields = recordType.sealed;\n+        }\n+\n+        for (BLangSimpleVariable field : recordTypeNode.fields) {\n+            if (field.flagSet.contains(Flag.READONLY)) {\n+                BType fieldType = field.type;\n+\n+                if (fieldType == symTable.semanticError) {\n+                    continue;\n+                }\n+\n+                BType readOnlyFieldType = getReadOnlyFieldType(field.pos, fieldType);\n+\n+                if (readOnlyFieldType == symTable.semanticError) {\n+                    dlog.error(field.pos, DiagnosticErrorCode.INVALID_READONLY_FIELD_TYPE, fieldType);\n+                } else {\n+                    if (isRecordType) {\n+                        fields.get(field.name.value).type = readOnlyFieldType;\n+                    }\n+\n+                    field.type = field.symbol.type = readOnlyFieldType;\n+                }\n+            } else {\n+                allReadOnlyFields = false;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "983501c704a0447b3e5b0f66d17b335c38ac22f6"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY2Njc0Ng==", "bodyText": "Moved the logic in the if block to a separate method in af704cb.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27544#discussion_r552666746", "createdAt": "2021-01-06T14:33:39Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -602,7 +607,53 @@ public void visit(BLangObjectTypeNode objectTypeNode) {\n     @Override\n     public void visit(BLangRecordTypeNode recordTypeNode) {\n         SymbolEnv recordEnv = SymbolEnv.createTypeEnv(recordTypeNode, recordTypeNode.symbol.scope, env);\n-        recordTypeNode.fields.forEach(field -> analyzeDef(field, recordEnv));\n+\n+        BType type = recordTypeNode.type;\n+\n+        boolean isRecordType = false;\n+        LinkedHashMap<String, BField> fields = null;\n+\n+        boolean allReadOnlyFields = false;\n+\n+        if (type.tag == TypeTags.RECORD) {\n+            isRecordType = true;\n+\n+            BRecordType recordType = (BRecordType) type;\n+            fields = recordType.fields;\n+            allReadOnlyFields = recordType.sealed;\n+        }\n+\n+        for (BLangSimpleVariable field : recordTypeNode.fields) {\n+            if (field.flagSet.contains(Flag.READONLY)) {\n+                BType fieldType = field.type;\n+\n+                if (fieldType == symTable.semanticError) {\n+                    continue;\n+                }\n+\n+                BType readOnlyFieldType = getReadOnlyFieldType(field.pos, fieldType);\n+\n+                if (readOnlyFieldType == symTable.semanticError) {\n+                    dlog.error(field.pos, DiagnosticErrorCode.INVALID_READONLY_FIELD_TYPE, fieldType);\n+                } else {\n+                    if (isRecordType) {\n+                        fields.get(field.name.value).type = readOnlyFieldType;\n+                    }\n+\n+                    field.type = field.symbol.type = readOnlyFieldType;\n+                }\n+            } else {\n+                allReadOnlyFields = false;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUwNzU5OA=="}, "originalCommit": {"oid": "983501c704a0447b3e5b0f66d17b335c38ac22f6"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2765, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}