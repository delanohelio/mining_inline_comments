{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NDE3MzUw", "number": 23705, "title": "Add support for raw template literals", "bodyText": "Purpose\n\nThis PR adds support for raw template literals. A raw template literal is similar to a string template literal, except the value create for it is a RawTemplate object (or a subtype of it).\nFixes #23336\n\nApproach\n\n\nIntroduce a new expression, BLangRawTemplateLiteral\nDefine the RawTemplate abstract in the lang.object module\nAdd the RawTemplate type to the symbol table when loading the lang libs.\nSemantic checks include the following checks:\n\nCheck if the contextually expected type is compatible with the RawTemplate object type\nCheck the additional constraints (i.e., only strings and insertions fields allowed, no methods, must be an abstract type)\nType check the insertions and strings\n\n\nThe raw template literal gets desugared to a type init expression. For each literal, a new object class type def is generated from the object type. The type init expression creates an instance of this generated object type. For example, consider the following statements:\n\n\nstring name = \"Pubudu\";\n'object:RawTemplate rt = `Hello ${name}!`;\n\nThe raw template literal above is desugared to:\n\ntype RawTemplate$Impl$0 object {\n    public string[] strings = [\"Hello \", \"!\"];\n    public (any|error)[] insertions;\n\n    function init((any|error)[] insertions) {\n        self.insertions = insertions;\n    }\n};\n\n// somewhere in code\n'object:RawTemplate rt = new RawTemplate$Impl$0([name]);\nSamples\n\nSample 1\n\nimport ballerina/lang.'object as ob;\nimport ballerina/io;\n\npublic function main() {\n    string name = \"Pubudu\";\n    ob:RawTemplate greeting = `Hello ${name}`;\n\n    io:println(greeting.strings);\n    io:println(greeting.insertions);\n}\n\nSample 2\n\nimport ballerina/lang.'object as ob;\nimport ballerina/io;\n\npublic function main() {\n    int[] arr = [100, 200, 300, 400, 500];\n    \n    ob:RawTemplate[] sqlQueries = from var x in arr\n        select `INSERT INTO product ('id', 'name', 'price') VALUES (${x}, ${x + 10}, ${x + 20})`;\n\n    io:println(\"Strings:\");\n    foreach var x in sqlQueries {\n        io:println(x.strings);\n    }\n\n    io:println(\"\\nInsertions:\");\n    foreach var x in sqlQueries {\n        io:println(x.insertions);\n    }\n}\noutput\nStrings:\nINSERT INTO product ('id', 'name', 'price') VALUES ( ,  ,  )\nINSERT INTO product ('id', 'name', 'price') VALUES ( ,  ,  )\nINSERT INTO product ('id', 'name', 'price') VALUES ( ,  ,  )\nINSERT INTO product ('id', 'name', 'price') VALUES ( ,  ,  )\nINSERT INTO product ('id', 'name', 'price') VALUES ( ,  ,  )\n\nInsertions:\n100 110 120\n200 210 220\n300 310 320\n400 410 420\n500 510 52\n\n\nSample 3\n\nimport ballerina/io;\n\n// Query is a subtype of 'RawTemplate' object\ntype Query abstract object {\n    public string[] strings;\n    public [int, string, float] insertions;\n};\n\npublic function main() {\n    int id = 10;\n    string name = \"Fresh Milk\";\n    float price = 23.45;\n\n    Query qu = `INSERT INTO product ('id', 'name', 'price') VALUES (${id}, ${name}, ${price})`;\n    \n    io:println(\"Strings:\");\n    foreach var x in qu.strings {\n        io:println(x);\n    }\n\n    int id2 = qu.insertions[0];\n    string name2 = qu.insertions[1];\n    float price2 = qu.insertions[2];\n\n    io:println(\"\\nInsertions: [\", id2, \", \", name2, \", \", price2, \"]\");\n}\noutput\nStrings:\nINSERT INTO product ('id', 'name', 'price') VALUES (\n, \n, \n)\n\nInsertions: [10, FreshMilk, 23.45]\n\nRemarks\n\nTODO\n\n\n Add support for assigning to subtypes of RawTemplate\n Add tests\n Add type checking for fixed length arrays\n Test tuples and fixed length arrays for strings field\n Add negative test cases\n Disallow __init() method for raw template and its subtypes.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-06-03T19:48:48Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23705", "merged": true, "mergeCommit": {"oid": "03dd7edba3392ace6fa046a42fa3bea296973d5b"}, "closed": true, "closedAt": "2020-06-14T04:18:12Z", "author": {"login": "pubudu91"}, "timelineItems": {"totalCount": 46, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnzdJBgFqTQyNDAzNDI5Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcrEMdHgFqTQzMDE4NjE0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MDM0Mjky", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23705#pullrequestreview-424034292", "createdAt": "2020-06-04T01:06:07Z", "commit": {"oid": "5126d4c60a558ea9413a498955cf6399ca92c258"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMTowNjowN1rOGeyaZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMTowNjowN1rOGeyaZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkzNjQyMw==", "bodyText": "Let's not use Preview1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23705#discussion_r434936423", "createdAt": "2020-06-04T01:06:07Z", "author": {"login": "hasithaa"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/TemplateLiteralNode.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+*  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package org.ballerinalang.model.tree.expressions;\n+\n+import java.util.List;\n+\n+/**\n+ * Represents a backtick string template literal node.\n+ *\n+ * @since 2.0.0-Preview1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5126d4c60a558ea9413a498955cf6399ca92c258"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MDM1ODQ1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23705#pullrequestreview-424035845", "createdAt": "2020-06-04T01:11:20Z", "commit": {"oid": "5126d4c60a558ea9413a498955cf6399ca92c258"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMToxMToyMFrOGeye9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMToxMToyMFrOGeye9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkzNzU4OA==", "bodyText": "Shall we add a comment explaining the final desugar outcome?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23705#discussion_r434937588", "createdAt": "2020-06-04T01:11:20Z", "author": {"login": "hasithaa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -4368,6 +4369,55 @@ public void visit(BLangStringTemplateLiteral stringTemplateLiteral) {\n         result = rewriteExpr(constructStringTemplateConcatExpression(stringTemplateLiteral.exprs));\n     }\n \n+    @Override\n+    public void visit(BLangRawTemplateLiteral rawTemplateLiteral) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5126d4c60a558ea9413a498955cf6399ca92c258"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "97acd0ef7bbd215385d249ea82bd148c00243c83", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/97acd0ef7bbd215385d249ea82bd148c00243c83", "committedDate": "2020-06-04T20:37:51Z", "message": "Implement node transform logic for query-expr and from, select, where clauses"}, "afterCommit": {"oid": "02b7eb0c50c102818c98076a9625f106c8cfe426", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/02b7eb0c50c102818c98076a9625f106c8cfe426", "committedDate": "2020-06-04T20:39:03Z", "message": "Implement node transform logic for query-expr and from, select, where clauses"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "58cdbefdc743baff01ee99c99f71f1c87cec2110", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/58cdbefdc743baff01ee99c99f71f1c87cec2110", "committedDate": "2020-06-05T19:54:46Z", "message": "Add subtype support for raw template literals"}, "afterCommit": {"oid": "2d3f8f78ed4735e47af9ec09d5db3edaf1c9b0f8", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2d3f8f78ed4735e47af9ec09d5db3edaf1c9b0f8", "committedDate": "2020-06-05T20:04:33Z", "message": "Add subtype support for raw template literals"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2d3f8f78ed4735e47af9ec09d5db3edaf1c9b0f8", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2d3f8f78ed4735e47af9ec09d5db3edaf1c9b0f8", "committedDate": "2020-06-05T20:04:33Z", "message": "Add subtype support for raw template literals"}, "afterCommit": {"oid": "7592a72924d5c50a61e2c014ec7c3f00b6f129de", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7592a72924d5c50a61e2c014ec7c3f00b6f129de", "committedDate": "2020-06-07T14:18:47Z", "message": "Add subtype support for raw template literals"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8ce1b8201162df9a5305f20b4f68149ee6d312f7", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8ce1b8201162df9a5305f20b4f68149ee6d312f7", "committedDate": "2020-06-07T20:40:56Z", "message": "Add test cases for raw template literals"}, "afterCommit": {"oid": "c70d86aa75259e08fd8f002a3f4fb9b03d07ee27", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c70d86aa75259e08fd8f002a3f4fb9b03d07ee27", "committedDate": "2020-06-08T05:09:24Z", "message": "Add test cases for raw template literals"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c70d86aa75259e08fd8f002a3f4fb9b03d07ee27", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c70d86aa75259e08fd8f002a3f4fb9b03d07ee27", "committedDate": "2020-06-08T05:09:24Z", "message": "Add test cases for raw template literals"}, "afterCommit": {"oid": "664d7a1a6e6b189bebef7477308925dc573a8a1c", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/664d7a1a6e6b189bebef7477308925dc573a8a1c", "committedDate": "2020-06-08T14:32:15Z", "message": "Add more subtyping tests and negative tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "71b16c86f9ee56d24c61044fbe1bce606be7735a", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/71b16c86f9ee56d24c61044fbe1bce606be7735a", "committedDate": "2020-06-10T14:35:33Z", "message": "Rewrite the raw template literal desugar logic"}, "afterCommit": {"oid": "c14f7763b91fdf5587ee75207dc30c88d463d2f8", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c14f7763b91fdf5587ee75207dc30c88d463d2f8", "committedDate": "2020-06-10T14:38:55Z", "message": "Rewrite the raw template literal desugar logic"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c14f7763b91fdf5587ee75207dc30c88d463d2f8", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c14f7763b91fdf5587ee75207dc30c88d463d2f8", "committedDate": "2020-06-10T14:38:55Z", "message": "Rewrite the raw template literal desugar logic"}, "afterCommit": {"oid": "563ee547a6c17630cad9b8e902fbf04161a9bab0", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/563ee547a6c17630cad9b8e902fbf04161a9bab0", "committedDate": "2020-06-10T14:59:28Z", "message": "Resolve syncing errors"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "563ee547a6c17630cad9b8e902fbf04161a9bab0", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/563ee547a6c17630cad9b8e902fbf04161a9bab0", "committedDate": "2020-06-10T14:59:28Z", "message": "Resolve syncing errors"}, "afterCommit": {"oid": "e66f5f6555b4de42627fc6ab29a6d0081c226ce1", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e66f5f6555b4de42627fc6ab29a6d0081c226ce1", "committedDate": "2020-06-10T15:39:08Z", "message": "Resolve syncing errors"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3fe40d5a6c44ee05e093ea6c237519ef5deaf48b", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3fe40d5a6c44ee05e093ea6c237519ef5deaf48b", "committedDate": "2020-06-10T20:55:20Z", "message": "Update type checking rules of raw template literals"}, "afterCommit": {"oid": "8ae4b7db94637e24df2fb309bf349c2cd3f8bc00", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8ae4b7db94637e24df2fb309bf349c2cd3f8bc00", "committedDate": "2020-06-10T21:05:21Z", "message": "Update type checking rules of raw template literals"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NjE0OTg0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23705#pullrequestreview-428614984", "createdAt": "2020-06-11T06:05:34Z", "commit": {"oid": "8ae4b7db94637e24df2fb309bf349c2cd3f8bc00"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNjowNTozNFrOGiPo7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNjowODoyMVrOGiPsjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU2MTAwNw==", "bodyText": "Shouldn't this be readonly & string[]", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23705#discussion_r438561007", "createdAt": "2020-06-11T06:05:34Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -4263,6 +4281,160 @@ public void visit(BLangStringTemplateLiteral stringTemplateLiteral) {\n         result = rewriteExpr(constructStringTemplateConcatExpression(stringTemplateLiteral.exprs));\n     }\n \n+    /**\n+     * The raw template literal gets desugared to a type init expression. For each literal, a new object class type\n+     * def is generated from the object type. The type init expression creates an instance of this generated object\n+     * type. For example, consider the following statements:\n+     *      string name = \"Pubudu\";\n+     *      'object:RawTemplate rt = `Hello ${name}!`;\n+     *\n+     * The raw template literal above is desugared to:\n+     *      type RawTemplate$Impl$0 object {\n+     *          public string[] strings = [\"Hello \", \"!\"];\n+     *          public (any|error)[] insertions;\n+     *\n+     *          function init((any|error)[] insertions) {\n+     *              self.insertions = insertions;\n+     *          }\n+     *      };\n+     *\n+     *      // somewhere in code\n+     *      'object:RawTemplate rt = new RawTemplate$Impl$0([name]);\n+     *\n+     * @param rawTemplateLiteral The raw template literal to be desugared.\n+     */\n+    @Override\n+    public void visit(BLangRawTemplateLiteral rawTemplateLiteral) {\n+        DiagnosticPos pos = rawTemplateLiteral.pos;\n+        BObjectType objType = (BObjectType) rawTemplateLiteral.type;\n+        BLangTypeDefinition objClassDef = desugarTemplateLiteralObjectTypedef(rawTemplateLiteral.strings, objType, pos);\n+        BObjectType classObjType = (BObjectType) objClassDef.type;\n+\n+        BVarSymbol insertionsSym = classObjType.fields.get(\"insertions\").symbol;\n+        BLangListConstructorExpr insertionsList = ASTBuilderUtil.createEmptyArrayLiteral(pos, insertionsSym.type);\n+        insertionsList.exprs.addAll(rawTemplateLiteral.insertions);\n+        insertionsList.expectedType = insertionsSym.type;\n+\n+        // Create an instance of the generated object class\n+        BLangTypeInit typeNewExpr = ASTBuilderUtil.createEmptyTypeInit(pos, classObjType);\n+        typeNewExpr.argsExpr.add(insertionsList);\n+        typeNewExpr.initInvocation.argExprs.add(insertionsList);\n+        typeNewExpr.initInvocation.requiredArgs.add(insertionsList);\n+\n+        result = rewriteExpr(typeNewExpr);\n+    }\n+\n+    /**\n+     * This method desugars a raw template literal object class for the provided raw template object type as follows:\n+     * A literal defined as 'object:RawTemplate rt = `Hello ${name}!`;\n+     * is desugared to,\n+     *      type $anonType$0 object {\n+     *          public string[] strings = [\"Hello \", \"!\"];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae4b7db94637e24df2fb309bf349c2cd3f8bc00"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU2MTkzNA==", "bodyText": "Also can't we have this as an actual object defined in lang.object\nballerina-platform/ballerina-spec#442 (comment)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23705#discussion_r438561934", "createdAt": "2020-06-11T06:08:21Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -4263,6 +4281,160 @@ public void visit(BLangStringTemplateLiteral stringTemplateLiteral) {\n         result = rewriteExpr(constructStringTemplateConcatExpression(stringTemplateLiteral.exprs));\n     }\n \n+    /**\n+     * The raw template literal gets desugared to a type init expression. For each literal, a new object class type\n+     * def is generated from the object type. The type init expression creates an instance of this generated object\n+     * type. For example, consider the following statements:\n+     *      string name = \"Pubudu\";\n+     *      'object:RawTemplate rt = `Hello ${name}!`;\n+     *\n+     * The raw template literal above is desugared to:\n+     *      type RawTemplate$Impl$0 object {\n+     *          public string[] strings = [\"Hello \", \"!\"];\n+     *          public (any|error)[] insertions;\n+     *\n+     *          function init((any|error)[] insertions) {\n+     *              self.insertions = insertions;\n+     *          }\n+     *      };\n+     *\n+     *      // somewhere in code\n+     *      'object:RawTemplate rt = new RawTemplate$Impl$0([name]);\n+     *\n+     * @param rawTemplateLiteral The raw template literal to be desugared.\n+     */\n+    @Override\n+    public void visit(BLangRawTemplateLiteral rawTemplateLiteral) {\n+        DiagnosticPos pos = rawTemplateLiteral.pos;\n+        BObjectType objType = (BObjectType) rawTemplateLiteral.type;\n+        BLangTypeDefinition objClassDef = desugarTemplateLiteralObjectTypedef(rawTemplateLiteral.strings, objType, pos);\n+        BObjectType classObjType = (BObjectType) objClassDef.type;\n+\n+        BVarSymbol insertionsSym = classObjType.fields.get(\"insertions\").symbol;\n+        BLangListConstructorExpr insertionsList = ASTBuilderUtil.createEmptyArrayLiteral(pos, insertionsSym.type);\n+        insertionsList.exprs.addAll(rawTemplateLiteral.insertions);\n+        insertionsList.expectedType = insertionsSym.type;\n+\n+        // Create an instance of the generated object class\n+        BLangTypeInit typeNewExpr = ASTBuilderUtil.createEmptyTypeInit(pos, classObjType);\n+        typeNewExpr.argsExpr.add(insertionsList);\n+        typeNewExpr.initInvocation.argExprs.add(insertionsList);\n+        typeNewExpr.initInvocation.requiredArgs.add(insertionsList);\n+\n+        result = rewriteExpr(typeNewExpr);\n+    }\n+\n+    /**\n+     * This method desugars a raw template literal object class for the provided raw template object type as follows:\n+     * A literal defined as 'object:RawTemplate rt = `Hello ${name}!`;\n+     * is desugared to,\n+     *      type $anonType$0 object {\n+     *          public string[] strings = [\"Hello \", \"!\"];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU2MTAwNw=="}, "originalCommit": {"oid": "8ae4b7db94637e24df2fb309bf349c2cd3f8bc00"}, "originalPosition": 147}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NjE4ODEy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23705#pullrequestreview-428618812", "createdAt": "2020-06-11T06:14:47Z", "commit": {"oid": "8ae4b7db94637e24df2fb309bf349c2cd3f8bc00"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNjoxNDo0N1rOGiP0tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNjoxNDo0N1rOGiP0tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU2NDAyMw==", "bodyText": "This is currently failing right.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23705#discussion_r438564023", "createdAt": "2020-06-11T06:14:47Z", "author": {"login": "KRVPerera"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/rawtemplate/raw_template_literal_test.bal", "diffHunk": "@@ -0,0 +1,230 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/lang.'object as ob;\n+\n+function testBasicUsage() {\n+    string name = \"Pubudu\";\n+    ob:RawTemplate rt = `Hello ${name}!`;\n+\n+    assert(<string[]>[\"Hello \", \"!\"], rt.strings);\n+    assert(\"Pubudu\", <string>rt.insertions[0]);\n+}\n+\n+function testEmptyLiteral() {\n+    ob:RawTemplate rt = ``;\n+\n+    assert(<string[]>[], rt.strings);\n+    assert(0, rt.insertions.length());\n+}\n+\n+function testLiteralWithNoInterpolations() {\n+    ob:RawTemplate rt = `Hello World!`;\n+\n+    assert(<string[]>[\"Hello World!\"], rt.strings);\n+    assert(0, rt.insertions.length());\n+}\n+\n+function testLiteralWithNoStrings() {\n+    string hello = \"Hello\";\n+    int n = 10;\n+    string world = \"World\";\n+\n+    ob:RawTemplate rt = `${hello}${n}${world}`;\n+\n+    assert(<string[]>[], rt.strings);\n+    assert(\"Hello\", <string>rt.insertions[0]);\n+    assert(10, <int>rt.insertions[1]);\n+    assert(\"World\", <string>rt.insertions[2]);\n+}\n+\n+type Person object {\n+    string name;\n+    int age;\n+\n+    function __init(string name, int age) {\n+        self.name = name;\n+        self.age = age;\n+    }\n+\n+    function toString() returns string {\n+        return string `name: ${self.name}, age: ${self.age}`;\n+    }\n+};\n+\n+function testComplexExpressions() {\n+    int x = 10;\n+    int y = 20;\n+\n+    ob:RawTemplate rt1 = `x + y = ${x + y}`;\n+    assert(<string[]>[\"x + y = \"], rt1.strings);\n+    assert(30, <int>rt1.insertions[0]);\n+\n+    var fn = function () returns string { return \"Pubudu\"; };\n+\n+    ob:RawTemplate rt2 = `Hello ${fn()}!`;\n+    assert(<string[]>[\"Hello \", \"!\"], rt2.strings);\n+    assert(\"Pubudu\", <string>rt2.insertions[0]);\n+\n+    Person p = new(\"John Doe\", 20);\n+\n+    ob:RawTemplate rt3 = `${p} is a person`;\n+    assert(<string[]>[\" is a person\"], rt3.strings);\n+    assert(\"name: John Doe, age: 20\", rt3.insertions[0].toString());\n+}\n+\n+type Template1 object {\n+    public string[] strings = [];\n+    public int[] insertions = [];\n+\n+    function toString() returns string {\n+        return string `${self.insertions[0]}${self.strings[0]}${self.insertions[1]}${self.strings[1]}${self.insertions[2]}`;\n+    }\n+};\n+\n+function testSubtyping1() {\n+    int x = 10;\n+    int y = 20;\n+\n+    Template1 t = `${x} + ${y} = ${x + y}`;\n+    assert(\"10 + 20 = 30\", t.toString());\n+}\n+\n+type Template2 object {\n+    public string[] strings = [];\n+    public [int, string, float] insertions = [];\n+};\n+\n+function testSubtyping2() {\n+    int x = 25;\n+    string s = \"foo\";\n+    float f = 12.34;\n+\n+    Template2 t = `Using tuples: ${x}, ${s}, ${f}`;\n+    assert(\"Using tuples:  ,  , \", t.strings.toString());\n+    assert(x, t.insertions[0]);\n+    assert(s, t.insertions[1]);\n+    assert(f, t.insertions[2]);\n+\n+    object {\n+        public string[] strings = [];\n+        public [int, string, anydata...] insertions;\n+        string name = \"\";\n+\n+        function __init() {\n+            self.insertions = [];\n+        }\n+    } temp2 = `Using tuples 2: ${x}, ${s}, ${f}`;\n+\n+    assert(\"Using tuples 2:  ,  , \", temp2.strings.toString());\n+    assert(x, temp2.insertions[0]);\n+    assert(s, temp2.insertions[1]);\n+    assert(f, temp2.insertions[2]);\n+\n+    object {\n+        public string[] strings = [];\n+        public [anydata...] insertions = [];\n+        string name = \"\";\n+    } temp3 = `Using tuples 3: ${x}, ${s}, ${f}`;\n+\n+    assert(\"Using tuples 3:  ,  , \", temp3.strings.toString());\n+    assert(x, temp2.insertions[0]);\n+    assert(s, temp3.insertions[1]);\n+    assert(f, temp3.insertions[2]);\n+}\n+\n+const FOO = \"Foo\";\n+const BAR = \"Bar\";\n+\n+type FooBar FOO|BAR;\n+\n+function testSubtyping3() {\n+    int x = 10;\n+\n+    object {\n+        public FooBar[] strings = [];\n+        public int[] insertions = [];\n+    } temp1 = `Foo${x}Bar`;\n+\n+    assert(<string[]>[\"Foo\", \"Bar\"], temp1.strings);\n+    assert(10, temp1.insertions[0]);\n+}\n+\n+function testUsageWithQueryExpressions() {\n+    int[] arr = [100, 200, 300, 400, 500];\n+\n+    ob:RawTemplate[] queries = from var x in arr\n+        select `INSERT INTO product ('id', 'name', 'price') VALUES (${x}, ${x + 10}, ${x + 20})`;\n+\n+    foreach var x in queries {\n+        assert(\"INSERT INTO product ('id', 'name', 'price') VALUES ( ,  ,  )\", x.strings.toString());\n+    }\n+\n+    int i = 0;\n+    foreach var x in queries {\n+        assert(string `${arr[i]} ${arr[i] + 10} ${arr[i] + 20}`, x.insertions.toString());\n+        i += 1;\n+    }\n+}\n+\n+public type Value ()|int|float|decimal|string|xml;\n+\n+public type ParameterizedQuery object {\n+    public string[] strings = [];\n+    public Value[] insertions = [];\n+};\n+\n+function testUsageWithQueryExpressions2() {\n+    var data = [\n+        {name: \"Alice1\"},\n+        {name: \"Alice2\"},\n+        {name: \"Alice3\"}\n+    ];\n+\n+    ParameterizedQuery[] queries = from var rec in data select `INSERT INTO People (name) values (${rec.name});`;\n+\n+    foreach var x in queries {\n+        assert(\"INSERT INTO People (name) values ( );\", x.strings.toString());\n+    }\n+\n+    int i = 0;\n+    foreach var x in queries {\n+        assert(data[i][\"name\"], x.insertions.toString());\n+        i += 1;\n+    }\n+}\n+\n+function testUseWithVar() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae4b7db94637e24df2fb309bf349c2cd3f8bc00"}, "originalPosition": 210}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8ae4b7db94637e24df2fb309bf349c2cd3f8bc00", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8ae4b7db94637e24df2fb309bf349c2cd3f8bc00", "committedDate": "2020-06-10T21:05:21Z", "message": "Update type checking rules of raw template literals"}, "afterCommit": {"oid": "66641535b5ebb4c17aab78b0c7d6426a285b721c", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/66641535b5ebb4c17aab78b0c7d6426a285b721c", "committedDate": "2020-06-11T13:26:15Z", "message": "Improve error messages and fix test cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4OTc0MzMz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23705#pullrequestreview-428974333", "createdAt": "2020-06-11T14:34:27Z", "commit": {"oid": "66641535b5ebb4c17aab78b0c7d6426a285b721c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDozNDoyN1rOGigN0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDozNDoyN1rOGigN0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzMjU5NQ==", "bodyText": "not used ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23705#discussion_r438832595", "createdAt": "2020-06-11T14:34:27Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/util/Flags.java", "diffHunk": "@@ -225,6 +225,10 @@ public static int asMask(Set<Flag> flagSet) {\n         return flagSet;\n     }\n \n+    public static int unset(int mask, int flag) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66641535b5ebb4c17aab78b0c7d6426a285b721c"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4OTc3Mjkw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23705#pullrequestreview-428977290", "createdAt": "2020-06-11T14:37:27Z", "commit": {"oid": "66641535b5ebb4c17aab78b0c7d6426a285b721c"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ed2ff235a7b21c5fea3c740f46ba2533779e8ce", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1ed2ff235a7b21c5fea3c740f46ba2533779e8ce", "committedDate": "2020-06-11T20:10:39Z", "message": "Improve type checking logic to better handle handle error scenarios"}, "afterCommit": {"oid": "fd82f348921449885db5de62db2be7576acdb103", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fd82f348921449885db5de62db2be7576acdb103", "committedDate": "2020-06-12T14:54:21Z", "message": "Add explicit empty strings around interpolations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NjI2Mzc5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23705#pullrequestreview-428626379", "createdAt": "2020-06-11T06:31:39Z", "commit": {"oid": "8ae4b7db94637e24df2fb309bf349c2cd3f8bc00"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNjozMTozOVrOGiQMIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODoxNTo1MlrOGjNdHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU3MDAxNw==", "bodyText": "Shouldn't we keep this as is and use BLangListConstructorExpr.BLangTupleLiteral for tuples?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23705#discussion_r438570017", "createdAt": "2020-06-11T06:31:39Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ASTBuilderUtil.java", "diffHunk": "@@ -626,7 +625,11 @@ static BLangRecordLiteral createEmptyRecordLiteral(DiagnosticPos pos, BType type\n         return recordKeyValue;\n     }\n \n-    static BLangListConstructorExpr.BLangArrayLiteral createEmptyArrayLiteral(DiagnosticPos pos, BArrayType type) {\n+    static BLangListConstructorExpr.BLangArrayLiteral createEmptyArrayLiteral(DiagnosticPos pos, BType type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ae4b7db94637e24df2fb309bf349c2cd3f8bc00"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0Mzg3NA==", "bodyText": "Is this comment still valid?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23705#discussion_r438943874", "createdAt": "2020-06-11T17:15:59Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -4263,6 +4281,160 @@ public void visit(BLangStringTemplateLiteral stringTemplateLiteral) {\n         result = rewriteExpr(constructStringTemplateConcatExpression(stringTemplateLiteral.exprs));\n     }\n \n+    /**\n+     * The raw template literal gets desugared to a type init expression. For each literal, a new object class type\n+     * def is generated from the object type. The type init expression creates an instance of this generated object\n+     * type. For example, consider the following statements:\n+     *      string name = \"Pubudu\";\n+     *      'object:RawTemplate rt = `Hello ${name}!`;\n+     *\n+     * The raw template literal above is desugared to:\n+     *      type RawTemplate$Impl$0 object {\n+     *          public string[] strings = [\"Hello \", \"!\"];\n+     *          public (any|error)[] insertions;\n+     *\n+     *          function init((any|error)[] insertions) {\n+     *              self.insertions = insertions;\n+     *          }\n+     *      };\n+     *\n+     *      // somewhere in code\n+     *      'object:RawTemplate rt = new RawTemplate$Impl$0([name]);\n+     *\n+     * @param rawTemplateLiteral The raw template literal to be desugared.\n+     */\n+    @Override\n+    public void visit(BLangRawTemplateLiteral rawTemplateLiteral) {\n+        DiagnosticPos pos = rawTemplateLiteral.pos;\n+        BObjectType objType = (BObjectType) rawTemplateLiteral.type;\n+        BLangTypeDefinition objClassDef = desugarTemplateLiteralObjectTypedef(rawTemplateLiteral.strings, objType, pos);\n+        BObjectType classObjType = (BObjectType) objClassDef.type;\n+\n+        BVarSymbol insertionsSym = classObjType.fields.get(\"insertions\").symbol;\n+        BLangListConstructorExpr insertionsList = ASTBuilderUtil.createEmptyArrayLiteral(pos, insertionsSym.type);\n+        insertionsList.exprs.addAll(rawTemplateLiteral.insertions);\n+        insertionsList.expectedType = insertionsSym.type;\n+\n+        // Create an instance of the generated object class\n+        BLangTypeInit typeNewExpr = ASTBuilderUtil.createEmptyTypeInit(pos, classObjType);\n+        typeNewExpr.argsExpr.add(insertionsList);\n+        typeNewExpr.initInvocation.argExprs.add(insertionsList);\n+        typeNewExpr.initInvocation.requiredArgs.add(insertionsList);\n+\n+        result = rewriteExpr(typeNewExpr);\n+    }\n+\n+    /**\n+     * This method desugars a raw template literal object class for the provided raw template object type as follows.\n+     * A literal defined as 'object:RawTemplate rt = `Hello ${name}!`;\n+     * is desugared to,\n+     *      type $anonType$0 object {\n+     *          public string[] strings = [\"Hello \", \"!\"];\n+     *          public (any|error)[] insertions;\n+     *\n+     *          function init((any|error)[] insertions) {\n+     *              self.insertions = insertions;\n+     *          }\n+     *      };\n+     * @param strings    The string portions of the literal\n+     * @param objectType The abstract object type for which an object class needs to be generated\n+     * @param pos        The diagnostic position info for the type node\n+     * @return Returns the generated concrete object class def\n+     */\n+    private BLangTypeDefinition desugarTemplateLiteralObjectTypedef(List<BLangLiteral> strings, BObjectType objectType,\n+                                                                    DiagnosticPos pos) {\n+        // TODO: Use the anon model helper to generate the object name?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "891490b3a6b6b735e7100ecee4a9aea422113bcc"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQwODI2NQ==", "bodyText": "Should we add at least a one-line description for the time-being?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23705#discussion_r439408265", "createdAt": "2020-06-12T13:09:37Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.object/src/main/ballerina/src/lang.object/raw_template.bal", "diffHunk": "@@ -0,0 +1,21 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// TODO: Add docs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ed2ff235a7b21c5fea3c740f46ba2533779e8ce"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUwMDI4Mw==", "bodyText": "When we use an invalid type now, the error is for the rawTemplateLiteral itself.\npublic type Template abstract object {\n    public string[] strings;\n};\n\npublic function main() {\n    string name = \"World\";\n\n    Template greeting = `Hello ${name}`; // error: .::xyz.bal:8:25: incompatible types: expected 'ballerina/lang.object:1.0.0:RawTemplate', found 'Template'\n}\nShouldn't the error be for the expected type, to say something like these template literals are only allowed with sub-types of 'lang.object:RawTemplate'?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23705#discussion_r439500283", "createdAt": "2020-06-12T15:50:00Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3619,6 +3622,111 @@ public void visit(BLangStringTemplateLiteral stringTemplateLiteral) {\n         resultType = types.checkType(stringTemplateLiteral, symTable.stringType, expType);\n     }\n \n+    @Override\n+    public void visit(BLangRawTemplateLiteral rawTemplateLiteral) {\n+        // First, ensure that the contextually expected type is compatible with the RawTemplate type.\n+        // The RawTemplate type should have just two fields: strings and insertions. There shouldn't be any methods.\n+        BType type = determineRawTemplateLiteralType(rawTemplateLiteral, expType);\n+\n+        if (type == symTable.semanticError) {\n+            resultType = type;\n+            return;\n+        }\n+\n+        // Once we ensure the types are compatible, need to ensure that the types of the strings and insertions are\n+        // compatible with the types of the strings and insertions fields.\n+        BObjectType literalType = (BObjectType) type;\n+        BType stringsType = literalType.fields.get(\"strings\").type;\n+\n+        if (evaluateRawTemplateExprs(rawTemplateLiteral.strings, stringsType, INVALID_NUM_STRINGS,\n+                                     rawTemplateLiteral.pos)) {\n+            type = symTable.semanticError;\n+        }\n+\n+        BType insertionsType = literalType.fields.get(\"insertions\").type;\n+\n+        if (evaluateRawTemplateExprs(rawTemplateLiteral.insertions, insertionsType, INVALID_NUM_INSERTIONS,\n+                                     rawTemplateLiteral.pos)) {\n+            type = symTable.semanticError;\n+        }\n+\n+        resultType = type;\n+    }\n+\n+    private BType determineRawTemplateLiteralType(BLangRawTemplateLiteral rawTemplateLiteral, BType expType) {\n+        // Contextually expected type is NoType when `var` is used.\n+        // Therefore consider the literal as of type RawTemplate\n+        if (expType == symTable.noType) {\n+            return symTable.rawTemplateType;\n+        }\n+\n+        BType type = types.checkType(rawTemplateLiteral, expType, symTable.rawTemplateType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd82f348921449885db5de62db2be7576acdb103"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUwOTQxMQ==", "bodyText": "Could this ever get printed? Shouldn't the string representation differentiate between the insertions and the strings?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23705#discussion_r439509411", "createdAt": "2020-06-12T16:07:18Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangRawTemplateLiteral.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.expressions;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.expressions.ExpressionNode;\n+import org.ballerinalang.model.tree.expressions.RawTemplateLiteralNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Represents a raw template literal of the form: `Hello ${name}!`. This gets desugared to an object:RawTemplate object\n+ * or a subtype of this.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BLangRawTemplateLiteral extends BLangExpression implements RawTemplateLiteralNode {\n+\n+    public List<BLangExpression> insertions;\n+    public List<BLangLiteral> strings;\n+\n+    public BLangRawTemplateLiteral() {\n+        insertions = new ArrayList<>();\n+        strings = new ArrayList<>();\n+    }\n+\n+    @Override\n+    public void accept(BLangNodeVisitor visitor) {\n+        visitor.visit(this);\n+    }\n+\n+    @Override\n+    public NodeKind getKind() {\n+        return NodeKind.RAW_TEMPLATE_LITERAL;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"BLangRawTemplateLiteral: \" + insertions + \" \" + strings;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd82f348921449885db5de62db2be7576acdb103"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUxMjEyMg==", "bodyText": "Should we say\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              invalid raw template assignment: ''{0}'' expected to be abstract\n          \n          \n            \n              invalid raw template assignment: ''{0}'' should be an abstract object", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23705#discussion_r439512122", "createdAt": "2020-06-12T16:11:38Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -1363,3 +1363,18 @@ error.invalid.param.type.for.return.type=\\\n \n error.invalid.typedesc.param=\\\n   default value for a ''typedesc'' parameter used in the return type should be a reference to a type\n+\n+error.invalid.num.of.strings=\\\n+  invalid raw template: expected {0} string(s), but found {1} string(s)\n+\n+error.invalid.num.of.insertions=\\\n+  invalid raw template: expected {0} insertion(s), but found {1} insertion(s)\n+\n+error.invalid.raw.template.assignment=\\\n+  invalid raw template assignment: ''{0}'' expected to be abstract", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd82f348921449885db5de62db2be7576acdb103"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2NTEwOA==", "bodyText": "If we are changing this we'll have to change the next 2 too.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23705#discussion_r439565108", "createdAt": "2020-06-12T17:56:38Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -1363,3 +1363,18 @@ error.invalid.param.type.for.return.type=\\\n \n error.invalid.typedesc.param=\\\n   default value for a ''typedesc'' parameter used in the return type should be a reference to a type\n+\n+error.invalid.num.of.strings=\\\n+  invalid raw template: expected {0} string(s), but found {1} string(s)\n+\n+error.invalid.num.of.insertions=\\\n+  invalid raw template: expected {0} insertion(s), but found {1} insertion(s)\n+\n+error.invalid.raw.template.assignment=\\\n+  invalid raw template assignment: ''{0}'' expected to be abstract", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUxMjEyMg=="}, "originalCommit": {"oid": "fd82f348921449885db5de62db2be7576acdb103"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU3MjA0MQ==", "bodyText": "Can/should we infer a narrower type instead, at least in the future??\nFor example, for\npublic function main() {\n    string item = \"Book\";\n    int count = 2;\n\n    var temp = `${item} count: ${count}`;\n}\ncan we infer something like\nabstract object {\n    public [string, string, string] strings;\n    public [string, int] insertions;\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23705#discussion_r439572041", "createdAt": "2020-06-12T18:12:07Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3619,6 +3622,111 @@ public void visit(BLangStringTemplateLiteral stringTemplateLiteral) {\n         resultType = types.checkType(stringTemplateLiteral, symTable.stringType, expType);\n     }\n \n+    @Override\n+    public void visit(BLangRawTemplateLiteral rawTemplateLiteral) {\n+        // First, ensure that the contextually expected type is compatible with the RawTemplate type.\n+        // The RawTemplate type should have just two fields: strings and insertions. There shouldn't be any methods.\n+        BType type = determineRawTemplateLiteralType(rawTemplateLiteral, expType);\n+\n+        if (type == symTable.semanticError) {\n+            resultType = type;\n+            return;\n+        }\n+\n+        // Once we ensure the types are compatible, need to ensure that the types of the strings and insertions are\n+        // compatible with the types of the strings and insertions fields.\n+        BObjectType literalType = (BObjectType) type;\n+        BType stringsType = literalType.fields.get(\"strings\").type;\n+\n+        if (evaluateRawTemplateExprs(rawTemplateLiteral.strings, stringsType, INVALID_NUM_STRINGS,\n+                                     rawTemplateLiteral.pos)) {\n+            type = symTable.semanticError;\n+        }\n+\n+        BType insertionsType = literalType.fields.get(\"insertions\").type;\n+\n+        if (evaluateRawTemplateExprs(rawTemplateLiteral.insertions, insertionsType, INVALID_NUM_INSERTIONS,\n+                                     rawTemplateLiteral.pos)) {\n+            type = symTable.semanticError;\n+        }\n+\n+        resultType = type;\n+    }\n+\n+    private BType determineRawTemplateLiteralType(BLangRawTemplateLiteral rawTemplateLiteral, BType expType) {\n+        // Contextually expected type is NoType when `var` is used.\n+        // Therefore consider the literal as of type RawTemplate\n+        if (expType == symTable.noType) {\n+            return symTable.rawTemplateType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd82f348921449885db5de62db2be7576acdb103"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU3Mzc4OA==", "bodyText": "Will we be updating the logic for fixed-length arrays in this PR?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23705#discussion_r439573788", "createdAt": "2020-06-12T18:15:52Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3619,6 +3622,111 @@ public void visit(BLangStringTemplateLiteral stringTemplateLiteral) {\n         resultType = types.checkType(stringTemplateLiteral, symTable.stringType, expType);\n     }\n \n+    @Override\n+    public void visit(BLangRawTemplateLiteral rawTemplateLiteral) {\n+        // First, ensure that the contextually expected type is compatible with the RawTemplate type.\n+        // The RawTemplate type should have just two fields: strings and insertions. There shouldn't be any methods.\n+        BType type = determineRawTemplateLiteralType(rawTemplateLiteral, expType);\n+\n+        if (type == symTable.semanticError) {\n+            resultType = type;\n+            return;\n+        }\n+\n+        // Once we ensure the types are compatible, need to ensure that the types of the strings and insertions are\n+        // compatible with the types of the strings and insertions fields.\n+        BObjectType literalType = (BObjectType) type;\n+        BType stringsType = literalType.fields.get(\"strings\").type;\n+\n+        if (evaluateRawTemplateExprs(rawTemplateLiteral.strings, stringsType, INVALID_NUM_STRINGS,\n+                                     rawTemplateLiteral.pos)) {\n+            type = symTable.semanticError;\n+        }\n+\n+        BType insertionsType = literalType.fields.get(\"insertions\").type;\n+\n+        if (evaluateRawTemplateExprs(rawTemplateLiteral.insertions, insertionsType, INVALID_NUM_INSERTIONS,\n+                                     rawTemplateLiteral.pos)) {\n+            type = symTable.semanticError;\n+        }\n+\n+        resultType = type;\n+    }\n+\n+    private BType determineRawTemplateLiteralType(BLangRawTemplateLiteral rawTemplateLiteral, BType expType) {\n+        // Contextually expected type is NoType when `var` is used.\n+        // Therefore consider the literal as of type RawTemplate\n+        if (expType == symTable.noType) {\n+            return symTable.rawTemplateType;\n+        }\n+\n+        BType type = types.checkType(rawTemplateLiteral, expType, symTable.rawTemplateType);\n+\n+        if (type == symTable.semanticError) {\n+            return type;\n+        }\n+\n+        // Raw template literals can be directly assigned only to abstract object types\n+        if (!Symbols.isFlagOn(type.tsymbol.flags, Flags.ABSTRACT)) {\n+            dlog.error(rawTemplateLiteral.pos, DiagnosticCode.INVALID_RAW_TEMPLATE_ASSIGNMENT, type);\n+            return symTable.semanticError;\n+        }\n+\n+        // Ensure that only the two fields, strings and insertions, are there\n+        BObjectType litObjType = (BObjectType) type;\n+        BObjectTypeSymbol objTSymbol = (BObjectTypeSymbol) litObjType.tsymbol;\n+\n+        if (litObjType.fields.size() > 2) {\n+            dlog.error(rawTemplateLiteral.pos, DiagnosticCode.INVALID_NUM_FIELDS, litObjType);\n+            type = symTable.semanticError;\n+        }\n+\n+        if (!objTSymbol.attachedFuncs.isEmpty()) {\n+            dlog.error(rawTemplateLiteral.pos, DiagnosticCode.METHODS_NOT_ALLOWED, litObjType);\n+            type = symTable.semanticError;\n+        }\n+\n+        return type;\n+    }\n+\n+    private boolean evaluateRawTemplateExprs(List<? extends BLangExpression> exprs, BType listType, DiagnosticCode code,\n+                                             DiagnosticPos pos) {\n+        boolean errored = false;\n+\n+        if (listType.tag == TypeTags.ARRAY) {\n+            BArrayType arrayType = (BArrayType) listType;\n+            for (BLangExpression expr : exprs) {\n+                errored = (checkExpr(expr, env, arrayType.eType) == symTable.semanticError) || errored;\n+            }\n+            // TODO: Consider fixed-length arrays", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd82f348921449885db5de62db2be7576acdb103"}, "originalPosition": 106}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fd82f348921449885db5de62db2be7576acdb103", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fd82f348921449885db5de62db2be7576acdb103", "committedDate": "2020-06-12T14:54:21Z", "message": "Add explicit empty strings around interpolations"}, "afterCommit": {"oid": "cc2c2f4ed0cefc71adae73bdac03c5a8e6448203", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cc2c2f4ed0cefc71adae73bdac03c5a8e6448203", "committedDate": "2020-06-12T20:33:37Z", "message": "Add an API for creating a list constructor expr"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cc2c2f4ed0cefc71adae73bdac03c5a8e6448203", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cc2c2f4ed0cefc71adae73bdac03c5a8e6448203", "committedDate": "2020-06-12T20:33:37Z", "message": "Add an API for creating a list constructor expr"}, "afterCommit": {"oid": "3a27023b37120a4897d4fb0029961dab21650225", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3a27023b37120a4897d4fb0029961dab21650225", "committedDate": "2020-06-13T07:20:00Z", "message": "Change the type checking error message for raw templates"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "90bb35de89275633cfd2ace2e40ff799ce37e0b8", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/90bb35de89275633cfd2ace2e40ff799ce37e0b8", "committedDate": "2020-06-13T07:27:57Z", "message": "Add test case for using raw templates with any"}, "afterCommit": {"oid": "f494648d56ce24b6567dc9f7c437f8a4b509474f", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f494648d56ce24b6567dc9f7c437f8a4b509474f", "committedDate": "2020-06-13T15:14:59Z", "message": "Add type checking for fixed length arrays"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f494648d56ce24b6567dc9f7c437f8a4b509474f", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f494648d56ce24b6567dc9f7c437f8a4b509474f", "committedDate": "2020-06-13T15:14:59Z", "message": "Add type checking for fixed length arrays"}, "afterCommit": {"oid": "8ef05a6e0c57f0d27b4214979b607f0a43cc022d", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8ef05a6e0c57f0d27b4214979b607f0a43cc022d", "committedDate": "2020-06-13T16:49:54Z", "message": "Add type checking for fixed length arrays"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c430e4a15d4bfb6ff2cea02444401f1f010fd30", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2c430e4a15d4bfb6ff2cea02444401f1f010fd30", "committedDate": "2020-06-13T17:11:22Z", "message": "Introduce raw template literal and add node transformer logic for it"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66ff87c19ab5347f766e27eb8b887bf7f824050a", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/66ff87c19ab5347f766e27eb8b887bf7f824050a", "committedDate": "2020-06-13T17:11:32Z", "message": "Introduce RawTemplate object type and add it to symbol table"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2713a4a5c83a26600e25b8a82061350db3989f7", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a2713a4a5c83a26600e25b8a82061350db3989f7", "committedDate": "2020-06-13T17:11:32Z", "message": "Add semantic checking logic for raw template literals"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94a1c0108b3ea0cfeb95276a2677bf805a03d22b", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/94a1c0108b3ea0cfeb95276a2677bf805a03d22b", "committedDate": "2020-06-13T17:11:32Z", "message": "Desugar raw template literal to RawTemplate object"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6b9be14c66a2cc231c2659cccae86acb9bab40a", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e6b9be14c66a2cc231c2659cccae86acb9bab40a", "committedDate": "2020-06-13T17:11:32Z", "message": "Implement visit() for raw template literal in query desugar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fa6ee069cb85582073f9963d3479fb705378646", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2fa6ee069cb85582073f9963d3479fb705378646", "committedDate": "2020-06-13T17:11:33Z", "message": "Add subtype support for raw template literals"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b87915ab1cde926f3385bec74d29f9060bab8f3e", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b87915ab1cde926f3385bec74d29f9060bab8f3e", "committedDate": "2020-06-13T17:11:33Z", "message": "Clean up the code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b5a5e30497e0079cd4b9c01c9afeb66f4d29668", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4b5a5e30497e0079cd4b9c01c9afeb66f4d29668", "committedDate": "2020-06-13T17:12:59Z", "message": "Add test cases for raw template literals"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "420a792394b3dff02b2d11ac92e16aeca613556a", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/420a792394b3dff02b2d11ac92e16aeca613556a", "committedDate": "2020-06-13T17:12:59Z", "message": "Add support for use with var and subtyping support for strings field"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d0dbd722e4ad2d2fc7765b1b3303dccd103bcad", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3d0dbd722e4ad2d2fc7765b1b3303dccd103bcad", "committedDate": "2020-06-13T17:12:59Z", "message": "Add more subtyping tests and negative tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0b6cd0f49af97463bf862ec630a29eb51ca0109", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b0b6cd0f49af97463bf862ec630a29eb51ca0109", "committedDate": "2020-06-13T17:13:00Z", "message": "Rewrite the raw template literal desugar logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fb9c521d26782d82e4f8fc8446ba06e47c3f45e", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0fb9c521d26782d82e4f8fc8446ba06e47c3f45e", "committedDate": "2020-06-13T17:13:00Z", "message": "Resolve syncing errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62a2acf8f7b152bafe4137c50103fd75131bd241", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/62a2acf8f7b152bafe4137c50103fd75131bd241", "committedDate": "2020-06-13T17:13:00Z", "message": "Update type checking rules of raw template literals"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e05b865c9b685e65ba27f872513fdbac4dc2e6eb", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e05b865c9b685e65ba27f872513fdbac4dc2e6eb", "committedDate": "2020-06-13T17:13:00Z", "message": "Improve error messages and fix test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd1f46b507b5eda4666a864d8d4e994afe632c1b", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fd1f46b507b5eda4666a864d8d4e994afe632c1b", "committedDate": "2020-06-13T17:13:00Z", "message": "Fix checkstyle issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d367f73ba85b0a4215ab253aafe51260392d4544", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d367f73ba85b0a4215ab253aafe51260392d4544", "committedDate": "2020-06-13T17:13:01Z", "message": "Improve type checking logic to better handle handle error scenarios"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a3d5e5249ca8ccf684bfdf7c5ef5fed96bdcda4", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1a3d5e5249ca8ccf684bfdf7c5ef5fed96bdcda4", "committedDate": "2020-06-13T17:13:01Z", "message": "Add explicit empty strings around interpolations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab0ae750c6c653b929ebb1bb0e8f84e002e31cd5", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ab0ae750c6c653b929ebb1bb0e8f84e002e31cd5", "committedDate": "2020-06-13T17:13:01Z", "message": "Improve error messages and add docs to raw template def"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "733514b0e053a6f232598ef4f06c54701af8cd02", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/733514b0e053a6f232598ef4f06c54701af8cd02", "committedDate": "2020-06-13T17:13:01Z", "message": "Add an API for creating a list constructor expr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a24da8287657e0f8216ac8465cfca72bea7b19e4", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a24da8287657e0f8216ac8465cfca72bea7b19e4", "committedDate": "2020-06-13T17:13:01Z", "message": "Change the type checking error message for raw templates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "000c62a21bd81482471668023beaa8a484cf58ac", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/000c62a21bd81482471668023beaa8a484cf58ac", "committedDate": "2020-06-13T17:13:02Z", "message": "Add test case for using raw templates with any"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72afc2dd689dc5ffd78a591bf9a2b0192d97fc14", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/72afc2dd689dc5ffd78a591bf9a2b0192d97fc14", "committedDate": "2020-06-13T17:13:02Z", "message": "Add type checking for fixed length arrays"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8ef05a6e0c57f0d27b4214979b607f0a43cc022d", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8ef05a6e0c57f0d27b4214979b607f0a43cc022d", "committedDate": "2020-06-13T16:49:54Z", "message": "Add type checking for fixed length arrays"}, "afterCommit": {"oid": "72afc2dd689dc5ffd78a591bf9a2b0192d97fc14", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/72afc2dd689dc5ffd78a591bf9a2b0192d97fc14", "committedDate": "2020-06-13T17:13:02Z", "message": "Add type checking for fixed length arrays"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMTg2MTQw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23705#pullrequestreview-430186140", "createdAt": "2020-06-14T04:18:03Z", "commit": {"oid": "72afc2dd689dc5ffd78a591bf9a2b0192d97fc14"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4385, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}