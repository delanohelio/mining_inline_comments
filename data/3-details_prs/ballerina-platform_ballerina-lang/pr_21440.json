{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyODk5MzM1", "number": 21440, "title": "Add Let Expression BBE", "bodyText": "Purpose\n#21209 adds support for let expression.\nThis PR is to add BBEs for let expression.\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-03-03T11:35:09Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440", "merged": true, "mergeCommit": {"oid": "872a834407b2ecea828e2ed5413c7ec199048a51"}, "closed": true, "closedAt": "2020-03-16T14:08:31Z", "author": {"login": "irshadnilam"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKQhaVAFqTM2ODUyMTY3MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOOsQdAFqTM3NTI0NTA4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NTIxNjcx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#pullrequestreview-368521671", "createdAt": "2020-03-04T06:00:18Z", "commit": {"oid": "1f660378a682f3205731244778ded84d0b2da46e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjowMDoxOFrOFxg3IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjowMDoxOFrOFxg3IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2Mjk0NQ==", "bodyText": "Extra new line?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r387462945", "createdAt": "2020-03-04T06:00:18Z", "author": {"login": "anupama-pathirage"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,15 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    int a = let b = 1 in b*2;\n+    io:println(\"a: \", a);\n+\n+    string greeting = string hello = \"hello \", string ballerina = \"ballerina\" in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    [int, int] v1 = [10, 20];\n+    int binding = let [int, int] [d1, d2] = v1, int d3 = d1 + d2 in  d3 * 2;\n+    io:println(\"binding: \", binding);\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f660378a682f3205731244778ded84d0b2da46e"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NTIxOTA1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#pullrequestreview-368521905", "createdAt": "2020-03-04T06:01:09Z", "commit": {"oid": "1f660378a682f3205731244778ded84d0b2da46e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjowMTowOVrOFxg4Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjowMTowOVrOFxg4Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2MzE5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                int a = let b = 1 in b<span class=\"x x-first x-last\">*</span>2;\n          \n          \n            \n                int a = let b = 1 in b<span class=\"x x-first x-last\"> * </span>2;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r387463194", "createdAt": "2020-03-04T06:01:09Z", "author": {"login": "anupama-pathirage"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,15 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    int a = let b = 1 in b*2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f660378a682f3205731244778ded84d0b2da46e"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NTIyMDE3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#pullrequestreview-368522017", "createdAt": "2020-03-04T06:01:31Z", "commit": {"oid": "1f660378a682f3205731244778ded84d0b2da46e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjowMTozMVrOFxg4eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjowMTozMVrOFxg4eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2MzI5MA==", "bodyText": "Missing new line?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r387463290", "createdAt": "2020-03-04T06:01:31Z", "author": {"login": "anupama-pathirage"}, "path": "examples/let-expression/let_expression.description", "diffHunk": "@@ -0,0 +1 @@\n+A let-expr binds variables and then evaluates an expression with those variables in scope.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f660378a682f3205731244778ded84d0b2da46e"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NTIyMTg5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#pullrequestreview-368522189", "createdAt": "2020-03-04T06:02:10Z", "commit": {"oid": "1f660378a682f3205731244778ded84d0b2da46e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjowMjoxMFrOFxg5Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjowMjoxMFrOFxg5Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2MzQ1MA==", "bodyText": "Why don't we have any comment for the example? That won't look good when rendering the BBE in b.io", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r387463450", "createdAt": "2020-03-04T06:02:10Z", "author": {"login": "anupama-pathirage"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,15 @@\n+import ballerina/io;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f660378a682f3205731244778ded84d0b2da46e"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NTI5MTYz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#pullrequestreview-369529163", "createdAt": "2020-03-05T12:31:00Z", "commit": {"oid": "a02ef33f3c18f7ca0234f4e99803414f91bf0d37"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMjozMTowMFrOFyRuNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMjo0NTowNVrOFySH7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI2MzQ3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // <span class=\"x x-first x-last\">Following</span> is a simple let expression which involves only a single\n          \n          \n            \n                // <span class=\"x x-first x-last\">This</span> is a simple let expression which involves only a single\n          \n      \n    \n    \n  \n\nSince the comments are rendered on the side atm.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r388263479", "createdAt": "2020-03-05T12:31:00Z", "author": {"login": "MaryamZi"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,47 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // Following is a simple let expression which involves only a single", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a02ef33f3c18f7ca0234f4e99803414f91bf0d37"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI2NDI0OA==", "bodyText": "Shall we indent this line for it to be aligned with the let var declaration in the previous line?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r388264248", "createdAt": "2020-03-05T12:32:30Z", "author": {"login": "MaryamZi"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,47 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // Following is a simple let expression which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                      string ballerina = \"Ballerina!\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a02ef33f3c18f7ca0234f4e99803414f91bf0d37"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI2NTQ3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <span class=\"x x-first x-last\">// Use let expression with tuple binding pattern.</span>\n          \n          \n            \n                <span class=\"x x-first x-last\">[int, int] v1 = [10, 20];</span>\n          \n          \n            \n                <span class=\"x x-first x-last\">[int, int] v1 = [10, 20];</span>\n          \n          \n            \n                <span class=\"x x-first x-last\">// Let variable declarations can include binding patterns.</span>", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r388265477", "createdAt": "2020-03-05T12:35:13Z", "author": {"login": "MaryamZi"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,47 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // Following is a simple let expression which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                      string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Use let expression with tuple binding pattern.\n+    [int, int] v1 = [10, 20];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a02ef33f3c18f7ca0234f4e99803414f91bf0d37"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI2NTcxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                int tupleBindingResult = let [int, int] [d1, d2] = v1,\n          \n          \n            \n                                         int d3 = d1 + d2 in  d3 * 2;\n          \n          \n            \n                int tupleBindingResult = let [int, int] [d1, d2] = v1,\n          \n          \n            \n                                             int d3 = d1 + d2 \n          \n          \n            \n                                         in d3 * 2;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r388265712", "createdAt": "2020-03-05T12:35:44Z", "author": {"login": "MaryamZi"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,47 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // Following is a simple let expression which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                      string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Use let expression with tuple binding pattern.\n+    [int, int] v1 = [10, 20];\n+    int tupleBindingResult = let [int, int] [d1, d2] = v1,\n+                             int d3 = d1 + d2 in  d3 * 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a02ef33f3c18f7ca0234f4e99803414f91bf0d37"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI2NjI2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                io:println(\"<span class=\"x x-first x-last\">tupleBindingResult</span>: \", tupleBindingResult);\n          \n          \n            \n                io:println(\"<span class=\"x x-first x-last\">tuple binding result</span>: \", tupleBindingResult);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r388266262", "createdAt": "2020-03-05T12:36:56Z", "author": {"login": "MaryamZi"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,47 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // Following is a simple let expression which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                      string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Use let expression with tuple binding pattern.\n+    [int, int] v1 = [10, 20];\n+    int tupleBindingResult = let [int, int] [d1, d2] = v1,\n+                             int d3 = d1 + d2 in  d3 * 2;\n+    io:println(\"tupleBindingResult: \", tupleBindingResult);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a02ef33f3c18f7ca0234f4e99803414f91bf0d37"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI2ODUzNg==", "bodyText": "Not sure if we need another comment if we change the above to remove tuple.\nSpecifically saying tuple and record and then ignoring error kinda seems incomplete.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r388268536", "createdAt": "2020-03-05T12:41:39Z", "author": {"login": "MaryamZi"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,47 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // Following is a simple let expression which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                      string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Use let expression with tuple binding pattern.\n+    [int, int] v1 = [10, 20];\n+    int tupleBindingResult = let [int, int] [d1, d2] = v1,\n+                             int d3 = d1 + d2 in  d3 * 2;\n+    io:println(\"tupleBindingResult: \", tupleBindingResult);\n+\n+    // Use let expression with record binding pattern.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a02ef33f3c18f7ca0234f4e99803414f91bf0d37"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI2OTcxMA==", "bodyText": "Shall we reformat this too?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r388269710", "createdAt": "2020-03-05T12:44:23Z", "author": {"login": "MaryamZi"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,47 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // Following is a simple let expression which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                      string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Use let expression with tuple binding pattern.\n+    [int, int] v1 = [10, 20];\n+    int tupleBindingResult = let [int, int] [d1, d2] = v1,\n+                             int d3 = d1 + d2 in  d3 * 2;\n+    io:println(\"tupleBindingResult: \", tupleBindingResult);\n+\n+    // Use let expression with record binding pattern.\n+    int age = let Person { name: firstName, age: personAge,\n+     ...otherDetails } = getPerson() in personAge;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a02ef33f3c18f7ca0234f4e99803414f91bf0d37"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3MDA2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Person person = { name: \"John\", age: 31, country: \"USA\",\n          \n          \n            \n                                  \"occupation\": \"Lawyer\" };\n          \n          \n            \n                return person;\n          \n          \n            \n                return { \n          \n          \n            \n                   name: \"John\", \n          \n          \n            \n                   age: 31, \n          \n          \n            \n                   country: \"USA\",\n          \n          \n            \n                   \"occupation\": \"Lawyer\"\n          \n          \n            \n                };", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r388270062", "createdAt": "2020-03-05T12:45:05Z", "author": {"login": "MaryamZi"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,47 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // Following is a simple let expression which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                      string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Use let expression with tuple binding pattern.\n+    [int, int] v1 = [10, 20];\n+    int tupleBindingResult = let [int, int] [d1, d2] = v1,\n+                             int d3 = d1 + d2 in  d3 * 2;\n+    io:println(\"tupleBindingResult: \", tupleBindingResult);\n+\n+    // Use let expression with record binding pattern.\n+    int age = let Person { name: firstName, age: personAge,\n+     ...otherDetails } = getPerson() in personAge;\n+    io:println(\"age: \", age);\n+}\n+\n+public function getInt() returns int {\n+    return 1;\n+}\n+\n+type Person record {\n+    string name;\n+    int age;\n+    string country;\n+};\n+\n+function getPerson() returns Person {\n+    Person person = { name: \"John\", age: 31, country: \"USA\",\n+                      \"occupation\": \"Lawyer\" };\n+    return person;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a02ef33f3c18f7ca0234f4e99803414f91bf0d37"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwODEyMjE2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#pullrequestreview-370812216", "createdAt": "2020-03-08T08:14:44Z", "commit": {"oid": "6794b2110efbe8691c0288e670f8a04dc673db0c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwODoxNDo0NFrOFzT0Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwODoxNToxOFrOFzT0VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0NjM1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // This is a simple let expression which involves only a single\n          \n          \n            \n                // This is a simple let expression<span class=\"x x-first x-last\">,</span> which involves only a single", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r389346359", "createdAt": "2020-03-08T08:14:44Z", "author": {"login": "praneesha"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,64 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // This is a simple let expression which involves only a single", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6794b2110efbe8691c0288e670f8a04dc673db0c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM0NjM4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A let expression binds variables and then evaluates an expression with those variables in scope.\n          \n          \n            \n            A let expression binds variables and then evaluates an expression with those variables in the scope.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r389346388", "createdAt": "2020-03-08T08:15:18Z", "author": {"login": "praneesha"}, "path": "examples/let-expression/let_expression.description", "diffHunk": "@@ -0,0 +1 @@\n+A let expression binds variables and then evaluates an expression with those variables in scope.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6794b2110efbe8691c0288e670f8a04dc673db0c"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxODY5MjM2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#pullrequestreview-371869236", "createdAt": "2020-03-10T11:25:13Z", "commit": {"oid": "dafad70b2b7f9ab6681ce494f683ae6fc7e6497e"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMToyNToxNFrOF0K37A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTo0Mzo0NlrOF0LZzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0ODQyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Declare variables using the keyword <span class=\"x x-first x-last\">'</span>var` in a let expression.\n          \n          \n            \n                // Declare variables using the keyword <span class=\"x x-first x-last\">`</span>var` in a let expression.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r390248428", "createdAt": "2020-03-10T11:25:14Z", "author": {"login": "MaryamZi"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,64 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // This is a simple let expression, which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                          string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Declare variables using the keyword 'var` in a let expression.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dafad70b2b7f9ab6681ce494f683ae6fc7e6497e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0ODg5MA==", "bodyText": "Extra line.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r390248890", "createdAt": "2020-03-10T11:26:09Z", "author": {"login": "MaryamZi"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,64 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // This is a simple let expression, which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                          string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Declare variables using the keyword 'var` in a let expression.\n+    int length = let var num = 10, var txt = \"four\" in num + txt.length();\n+    io:println(\"length: \", length);\n+\n+    [int, int] v1 = [10, 20];\n+    // Let variable declarations can include binding patterns.\n+    int tupleBindingResult = let [int, int] [d1, d2] = v1,\n+                                 int d3 = d1 + d2\n+                             in  d3 * 2;\n+    io:println(\"tuple binding result: \", tupleBindingResult);\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dafad70b2b7f9ab6681ce494f683ae6fc7e6497e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MTczMg==", "bodyText": "Can we fix formatting, something like\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                int age = let Person { name: firstName, age: personAge,\n          \n          \n            \n                              ...otherDetails } = getPerson()\n          \n          \n            \n                          in personAge;\n          \n          \n            \n                int age = let Person {\n          \n          \n            \n                                name: firstName, \n          \n          \n            \n                                age: personAge, \n          \n          \n            \n                                ...otherDetails \n          \n          \n            \n                              } = getPerson()\n          \n          \n            \n                          in personAge;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r390251732", "createdAt": "2020-03-10T11:32:28Z", "author": {"login": "MaryamZi"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,64 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // This is a simple let expression, which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                          string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Declare variables using the keyword 'var` in a let expression.\n+    int length = let var num = 10, var txt = \"four\" in num + txt.length();\n+    io:println(\"length: \", length);\n+\n+    [int, int] v1 = [10, 20];\n+    // Let variable declarations can include binding patterns.\n+    int tupleBindingResult = let [int, int] [d1, d2] = v1,\n+                                 int d3 = d1 + d2\n+                             in  d3 * 2;\n+    io:println(\"tuple binding result: \", tupleBindingResult);\n+\n+\n+    int age = let Person { name: firstName, age: personAge,\n+                  ...otherDetails } = getPerson()\n+              in personAge;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dafad70b2b7f9ab6681ce494f683ae6fc7e6497e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1NzEwMA==", "bodyText": "Wondering if we should use expression bodied functions here (and for getSampleError).\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            function getPerson() returns Person {\n          \n          \n            \n                return {\n          \n          \n            \n                   name: \"John\",\n          \n          \n            \n                   age: 31,\n          \n          \n            \n                   country: \"USA\",\n          \n          \n            \n                   \"occupation\": \"Lawyer\"\n          \n          \n            \n                };\n          \n          \n            \n            }\n          \n          \n            \n            function getPerson() returns Person => {\n          \n          \n            \n                name: \"John\",\n          \n          \n            \n                age: 31,\n          \n          \n            \n                country: \"USA\",\n          \n          \n            \n                \"occupation\": \"Lawyer\"\n          \n          \n            \n            };", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r390257100", "createdAt": "2020-03-10T11:43:46Z", "author": {"login": "MaryamZi"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,64 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // This is a simple let expression, which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                          string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Declare variables using the keyword 'var` in a let expression.\n+    int length = let var num = 10, var txt = \"four\" in num + txt.length();\n+    io:println(\"length: \", length);\n+\n+    [int, int] v1 = [10, 20];\n+    // Let variable declarations can include binding patterns.\n+    int tupleBindingResult = let [int, int] [d1, d2] = v1,\n+                                 int d3 = d1 + d2\n+                             in  d3 * 2;\n+    io:println(\"tuple binding result: \", tupleBindingResult);\n+\n+\n+    int age = let Person { name: firstName, age: personAge,\n+                  ...otherDetails } = getPerson()\n+              in personAge;\n+    io:println(\"age: \", age);\n+\n+    boolean fatal = let var error(reason, ...params) = getSampleError()\n+                    in params[\"fatal\"];\n+    io:println(\"fatal: \", fatal);\n+}\n+\n+public function getInt() returns int {\n+    return 1;\n+}\n+\n+type Person record {\n+    string name;\n+    int age;\n+    string country;\n+};\n+\n+function getPerson() returns Person {\n+    return {\n+       name: \"John\",\n+       age: 31,\n+       country: \"USA\",\n+       \"occupation\": \"Lawyer\"\n+    };\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dafad70b2b7f9ab6681ce494f683ae6fc7e6497e"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MTE3Mzc1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#pullrequestreview-374117375", "createdAt": "2020-03-13T08:24:43Z", "commit": {"oid": "9570a6a3fdfb969a4e01aee25b4c5d44d4ed43d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwODoyNDo0M1rOF17DcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwODoyNDo0M1rOF17DcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA4NjM4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // <span class=\"x x-first x-last\">just after the</span> declaration to the end of the let expression.\n          \n          \n            \n                // <span class=\"x x-first x-last\">the point of</span> declaration to the end of the let expression.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r392086384", "createdAt": "2020-03-13T08:24:43Z", "author": {"login": "pubudu91"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,64 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // This is a simple let expression, which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                          string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9570a6a3fdfb969a4e01aee25b4c5d44d4ed43d9"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0Njk1MjYy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#pullrequestreview-374695262", "createdAt": "2020-03-14T03:49:38Z", "commit": {"oid": "9570a6a3fdfb969a4e01aee25b4c5d44d4ed43d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMzo0OTozOFrOF2Xk8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMzo0OTozOFrOF2Xk8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1MzcxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public function getInt() returns int {\n          \n          \n            \n                return 1;\n          \n          \n            \n            }\n          \n          \n            \n            public function getInt() returns int => 1;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r392553715", "createdAt": "2020-03-14T03:49:38Z", "author": {"login": "MaryamZi"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,64 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // This is a simple let expression, which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                          string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Declare variables using the keyword `var` in a let expression.\n+    int length = let var num = 10, var txt = \"four\" in num + txt.length();\n+    io:println(\"length: \", length);\n+\n+    [int, int] v1 = [10, 20];\n+    // Let variable declarations can include binding patterns.\n+    int tupleBindingResult = let [int, int] [d1, d2] = v1,\n+                                 int d3 = d1 + d2\n+                             in  d3 * 2;\n+    io:println(\"tuple binding result: \", tupleBindingResult);\n+\n+    int age = let Person {\n+                        name: firstName,\n+                        age: personAge,\n+                        ...otherDetails\n+                      } = getPerson()\n+                  in personAge;\n+    io:println(\"age: \", age);\n+\n+    boolean fatal = let var error(reason, ...params) = getSampleError()\n+                    in params[\"fatal\"];\n+    io:println(\"fatal: \", fatal);\n+}\n+\n+public function getInt() returns int {\n+    return 1;\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9570a6a3fdfb969a4e01aee25b4c5d44d4ed43d9"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0Njk1MzI1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#pullrequestreview-374695325", "createdAt": "2020-03-14T03:50:50Z", "commit": {"oid": "9570a6a3fdfb969a4e01aee25b4c5d44d4ed43d9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMzo1MDo1MFrOF2XlLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMzo1MTowNVrOF2XlRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1Mzc3NA==", "bodyText": "Formatting still seems off.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r392553774", "createdAt": "2020-03-14T03:50:50Z", "author": {"login": "MaryamZi"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,64 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // This is a simple let expression, which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                          string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Declare variables using the keyword `var` in a let expression.\n+    int length = let var num = 10, var txt = \"four\" in num + txt.length();\n+    io:println(\"length: \", length);\n+\n+    [int, int] v1 = [10, 20];\n+    // Let variable declarations can include binding patterns.\n+    int tupleBindingResult = let [int, int] [d1, d2] = v1,\n+                                 int d3 = d1 + d2\n+                             in  d3 * 2;\n+    io:println(\"tuple binding result: \", tupleBindingResult);\n+\n+    int age = let Person {\n+                        name: firstName,\n+                        age: personAge,\n+                        ...otherDetails\n+                      } = getPerson()\n+                  in personAge;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9570a6a3fdfb969a4e01aee25b4c5d44d4ed43d9"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU1Mzc5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return error(\"<span class=\"x x-first x-last\">Sample Error</span>\", <span class=\"x x-first x-last\">info</span> = \"Detail <span class=\"x x-first x-last\">Msg</span>\", fatal = true);\n          \n          \n            \n                return error(\"<span class=\"x x-first x-last\">SampleError</span>\", <span class=\"x x-first x-last\">message</span> = \"Detail <span class=\"x x-first x-last\">message</span>\", fatal = true);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r392553796", "createdAt": "2020-03-14T03:51:05Z", "author": {"login": "MaryamZi"}, "path": "examples/let-expression/let_expression.bal", "diffHunk": "@@ -0,0 +1,64 @@\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // This is a simple let expression, which involves only a single\n+    // variable declaration.\n+    int a = let int b = 1 in b * 2;\n+    io:println(\"a: \", a);\n+\n+    // Declare multiple variables in a let expression.\n+    string greeting = let string hello = \"Hello \",\n+                          string ballerina = \"Ballerina!\"\n+                      in hello + ballerina;\n+    io:println(\"greeting: \", greeting);\n+\n+    // The scope of a variable declared in a let expression is from\n+    // just after the declaration to the end of the let expression.\n+    int three = let int one = getInt(), int two = one + one in one + two;\n+    io:println(\"three: \", three);\n+\n+    // Declare variables using the keyword `var` in a let expression.\n+    int length = let var num = 10, var txt = \"four\" in num + txt.length();\n+    io:println(\"length: \", length);\n+\n+    [int, int] v1 = [10, 20];\n+    // Let variable declarations can include binding patterns.\n+    int tupleBindingResult = let [int, int] [d1, d2] = v1,\n+                                 int d3 = d1 + d2\n+                             in  d3 * 2;\n+    io:println(\"tuple binding result: \", tupleBindingResult);\n+\n+    int age = let Person {\n+                        name: firstName,\n+                        age: personAge,\n+                        ...otherDetails\n+                      } = getPerson()\n+                  in personAge;\n+    io:println(\"age: \", age);\n+\n+    boolean fatal = let var error(reason, ...params) = getSampleError()\n+                    in params[\"fatal\"];\n+    io:println(\"fatal: \", fatal);\n+}\n+\n+public function getInt() returns int {\n+    return 1;\n+}\n+\n+type Person record {\n+    string name;\n+    int age;\n+    string country;\n+};\n+\n+function getPerson() returns Person => {\n+    name: \"John\",\n+    age: 31,\n+    country: \"USA\",\n+    \"occupation\": \"Lawyer\"\n+};\n+\n+function getSampleError() returns error {\n+    return error(\"Sample Error\", info = \"Detail Msg\", fatal = true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9570a6a3fdfb969a4e01aee25b4c5d44d4ed43d9"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0ODA0OTc1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#pullrequestreview-374804975", "createdAt": "2020-03-15T14:40:44Z", "commit": {"oid": "9570a6a3fdfb969a4e01aee25b4c5d44d4ed43d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNDo0MDo0NFrOF2fSxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNDo0MDo0NFrOF2fSxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY4MDEzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A let expression binds variables and then evaluates an expression with those variables in the scope.\n          \n          \n            \n            A let expression binds variables and then evaluates an expression with those variables in scope.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r392680135", "createdAt": "2020-03-15T14:40:44Z", "author": {"login": "pubudu91"}, "path": "examples/let-expression/let_expression.description", "diffHunk": "@@ -0,0 +1 @@\n+A let expression binds variables and then evaluates an expression with those variables in the scope.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9570a6a3fdfb969a4e01aee25b4c5d44d4ed43d9"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MjQxMTE1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#pullrequestreview-375241115", "createdAt": "2020-03-16T14:03:46Z", "commit": {"oid": "6c7913111006ff115b3c141f72376dcdf4417c90"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDowMzo0NlrOF21i6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDowMzo0NlrOF21i6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA0NDcxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A let expression binds variables and then evaluates an expression with those variables in scope.\n          \n          \n            \n            // A let expression binds variables and then evaluates an expression with those variables in scope.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#discussion_r393044713", "createdAt": "2020-03-16T14:03:46Z", "author": {"login": "MaryamZi"}, "path": "examples/let-expression/let_expression.description", "diffHunk": "@@ -0,0 +1 @@\n+A let expression binds variables and then evaluates an expression with those variables in scope.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c7913111006ff115b3c141f72376dcdf4417c90"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a53bd83fcba7629de1495f7b4499d051bb6f179", "author": {"user": {"login": "irshadnilam", "name": "Irshad Nilam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4a53bd83fcba7629de1495f7b4499d051bb6f179", "committedDate": "2020-03-16T14:06:32Z", "message": "Add let expression BBE"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MjQ1MDg2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21440#pullrequestreview-375245086", "createdAt": "2020-03-16T14:08:02Z", "commit": {"oid": "4a53bd83fcba7629de1495f7b4499d051bb6f179"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3947, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}