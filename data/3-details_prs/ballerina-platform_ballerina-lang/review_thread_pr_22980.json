{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNzcxODA2", "number": 22980, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMzowNjoyN1rOD4CMvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMzowNzo0MFrOD4COng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMDgyODc4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMzowNjoyN1rOGOoXAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwODo0NDo1MVrOGP3dnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk5NDQ5OA==", "bodyText": "I think we can test the complete logic here when we set isAnonymous itself. This is to prevent setting the isAnonymous  again and again. Good call on creating a function. But it is better to move this logic inside to your function.\nCheck here also.\n\n  \n    \n      ballerina-lang/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java\n    \n    \n         Line 489\n      in\n      b9f51f0\n    \n    \n    \n    \n\n        \n          \n           boolean isAnonymous = !(ctx.parent.parent instanceof BallerinaParser.FiniteTypeUnitContext)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22980#discussion_r417994498", "createdAt": "2020-04-30T13:06:27Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java", "diffHunk": "@@ -866,9 +866,30 @@ public void exitInclusiveRecordTypeDescriptor(BallerinaParser.InclusiveRecordTyp\n \n         boolean isAnonymous = !(ctx.parent.parent instanceof BallerinaParser.FiniteTypeUnitContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f811a3540bdc007e64159a6dea938b07bdc4da65"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ1NDMwNQ==", "bodyText": "Yeah I too feel like should be moved to the function itself. I'll fix", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22980#discussion_r418454305", "createdAt": "2020-05-01T08:02:16Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java", "diffHunk": "@@ -866,9 +866,30 @@ public void exitInclusiveRecordTypeDescriptor(BallerinaParser.InclusiveRecordTyp\n \n         boolean isAnonymous = !(ctx.parent.parent instanceof BallerinaParser.FiniteTypeUnitContext);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk5NDQ5OA=="}, "originalCommit": {"oid": "f811a3540bdc007e64159a6dea938b07bdc4da65"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI5MDUyNA==", "bodyText": "Fixed in 6188bc7", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22980#discussion_r419290524", "createdAt": "2020-05-04T08:44:51Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java", "diffHunk": "@@ -866,9 +866,30 @@ public void exitInclusiveRecordTypeDescriptor(BallerinaParser.InclusiveRecordTyp\n \n         boolean isAnonymous = !(ctx.parent.parent instanceof BallerinaParser.FiniteTypeUnitContext);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk5NDQ5OA=="}, "originalCommit": {"oid": "f811a3540bdc007e64159a6dea938b07bdc4da65"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMDgzMzU4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMzowNzo0MFrOGOoaBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwODo0NDo0NVrOGP3dbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk5NTI2OQ==", "bodyText": "Do we need to check the ctx type here?\nI feel like we are pretty sure about this from the places we call this function.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22980#discussion_r417995269", "createdAt": "2020-04-30T13:07:40Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java", "diffHunk": "@@ -866,9 +866,30 @@ public void exitInclusiveRecordTypeDescriptor(BallerinaParser.InclusiveRecordTyp\n \n         boolean isAnonymous = !(ctx.parent.parent instanceof BallerinaParser.FiniteTypeUnitContext);\n \n+        // Validate type AB \"A\"| record { string f; };\n+        if (!isAnonymous) {\n+            isAnonymous = checkIfAnonymousInTypeDef(ctx);\n+        }\n+\n         this.pkgBuilder.addRecordType(getCurrentPos(ctx), getWS(ctx), isAnonymous, false, false);\n     }\n \n+    /**\n+     * Validate if this is a anonymous record type describe in union with a type descriptor.\n+     *\n+     * @param ctx the current context to be validated. can be InclusiveRecordTypeDescriptor or ExclusiveRecordTypeDes.\n+     * @return true if is part of a union type descriptor with on the fly definition\n+     */\n+    private boolean checkIfAnonymousInTypeDef(ParserRuleContext ctx) {\n+        if (!(ctx instanceof BallerinaParser.InclusiveRecordTypeDescriptorContext ||\n+            ctx instanceof BallerinaParser.ExclusiveRecordTypeDescriptorContext)) {\n+            return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f811a3540bdc007e64159a6dea938b07bdc4da65"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ1NDc5MQ==", "bodyText": "Yes we are. Will remove it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22980#discussion_r418454791", "createdAt": "2020-05-01T08:04:32Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java", "diffHunk": "@@ -866,9 +866,30 @@ public void exitInclusiveRecordTypeDescriptor(BallerinaParser.InclusiveRecordTyp\n \n         boolean isAnonymous = !(ctx.parent.parent instanceof BallerinaParser.FiniteTypeUnitContext);\n \n+        // Validate type AB \"A\"| record { string f; };\n+        if (!isAnonymous) {\n+            isAnonymous = checkIfAnonymousInTypeDef(ctx);\n+        }\n+\n         this.pkgBuilder.addRecordType(getCurrentPos(ctx), getWS(ctx), isAnonymous, false, false);\n     }\n \n+    /**\n+     * Validate if this is a anonymous record type describe in union with a type descriptor.\n+     *\n+     * @param ctx the current context to be validated. can be InclusiveRecordTypeDescriptor or ExclusiveRecordTypeDes.\n+     * @return true if is part of a union type descriptor with on the fly definition\n+     */\n+    private boolean checkIfAnonymousInTypeDef(ParserRuleContext ctx) {\n+        if (!(ctx instanceof BallerinaParser.InclusiveRecordTypeDescriptorContext ||\n+            ctx instanceof BallerinaParser.ExclusiveRecordTypeDescriptorContext)) {\n+            return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk5NTI2OQ=="}, "originalCommit": {"oid": "f811a3540bdc007e64159a6dea938b07bdc4da65"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI5MDQ3OA==", "bodyText": "Fixed in 6188bc7", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22980#discussion_r419290478", "createdAt": "2020-05-04T08:44:45Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java", "diffHunk": "@@ -866,9 +866,30 @@ public void exitInclusiveRecordTypeDescriptor(BallerinaParser.InclusiveRecordTyp\n \n         boolean isAnonymous = !(ctx.parent.parent instanceof BallerinaParser.FiniteTypeUnitContext);\n \n+        // Validate type AB \"A\"| record { string f; };\n+        if (!isAnonymous) {\n+            isAnonymous = checkIfAnonymousInTypeDef(ctx);\n+        }\n+\n         this.pkgBuilder.addRecordType(getCurrentPos(ctx), getWS(ctx), isAnonymous, false, false);\n     }\n \n+    /**\n+     * Validate if this is a anonymous record type describe in union with a type descriptor.\n+     *\n+     * @param ctx the current context to be validated. can be InclusiveRecordTypeDescriptor or ExclusiveRecordTypeDes.\n+     * @return true if is part of a union type descriptor with on the fly definition\n+     */\n+    private boolean checkIfAnonymousInTypeDef(ParserRuleContext ctx) {\n+        if (!(ctx instanceof BallerinaParser.InclusiveRecordTypeDescriptorContext ||\n+            ctx instanceof BallerinaParser.ExclusiveRecordTypeDescriptorContext)) {\n+            return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk5NTI2OQ=="}, "originalCommit": {"oid": "f811a3540bdc007e64159a6dea938b07bdc4da65"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3680, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}