{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1NDIxMjU5", "number": 27065, "title": "String Improvements and Bug fixes for Toml Parser", "bodyText": "Purpose\n\nImproves support for\n\nStrings\nMulti line strings\n\n\nImproves string escaping\nNode recovery improvements\n\nFixes\nIssue where not having new line end of file is considered a parser error.\nResolves #26971\nResolves #26865\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-11-23T03:22:08Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27065", "merged": true, "mergeCommit": {"oid": "916659cf364cf0f92aa7fcb48cc9b7d58195d752"}, "closed": true, "closedAt": "2020-11-24T02:57:00Z", "author": {"login": "xlight05"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfMQtcAH2gAyNTI1NDIxMjU5OmQ2ZjgwOTEyOTFiMzMxYjgxYmEzYjdiMDU1NmEwNjRlZTk3MmY1MGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfWmTPAFqTUzNjU1ODEzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d6f8091291b331b81ba3b7b0556a064ee972f50d", "author": {"user": {"login": "xlight05", "name": "Anjana Supun"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d6f8091291b331b81ba3b7b0556a064ee972f50d", "committedDate": "2020-11-23T03:06:00Z", "message": "Add multiline string improvements and escaping"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a7f7c1a90cae4d35db9785481cdf4425d680649", "author": {"user": {"login": "xlight05", "name": "Anjana Supun"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5a7f7c1a90cae4d35db9785481cdf4425d680649", "committedDate": "2020-11-23T03:06:00Z", "message": "Improve String support and bug fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MzUyMjU3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27065#pullrequestreview-536352257", "createdAt": "2020-11-23T10:42:58Z", "commit": {"oid": "5a7f7c1a90cae4d35db9785481cdf4425d680649"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDo0Mjo1OFrOH4H25w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMTowNDo1NVrOH4Im0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYxMTA0Nw==", "bodyText": "lets use a switch-case here.\nAlso remove the else block, since we are returning within if/", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27065#discussion_r528611047", "createdAt": "2020-11-23T10:42:58Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -230,28 +237,50 @@ private STToken readStringToken() {\n         }\n \n         char nextChar = this.reader.peek();\n-        char secondNextChar = this.reader.peek(1);\n-        char thirdNextChar = this.reader.peek(2);\n         if (nextChar == LexerTerminals.DOUBLE_QUOTE) {\n             endMode();\n-            if (secondNextChar == LexerTerminals.DOUBLE_QUOTE && thirdNextChar == LexerTerminals.DOUBLE_QUOTE) {\n-                reader.advance(3);\n-                return getSyntaxToken(SyntaxKind.TRIPLE_DOUBLE_QUOTE_TOKEN);\n-            }\n             reader.advance();\n             return getSyntaxToken(SyntaxKind.DOUBLE_QUOTE_TOKEN);\n         } else {\n             while (!reader.isEOF()) {\n                 nextChar = this.reader.peek();\n-                if (nextChar != LexerTerminals.DOUBLE_QUOTE) {\n+                if (nextChar == LexerTerminals.DOUBLE_QUOTE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a7f7c1a90cae4d35db9785481cdf4425d680649"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYxOTIzNw==", "bodyText": "remove else block", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27065#discussion_r528619237", "createdAt": "2020-11-23T10:57:36Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -261,28 +290,110 @@ private STToken readLiteralStringToken() {\n         }\n \n         char nextChar = this.reader.peek();\n-        char secondNextChar = this.reader.peek(1);\n-        char thirdNextChar = this.reader.peek(2);\n+//        char secondNextChar = this.reader.peek(1);\n+//        char thirdNextChar = this.reader.peek(2);\n         if (nextChar == LexerTerminals.SINGLE_QUOTE) {\n             endMode();\n-            if (secondNextChar == LexerTerminals.SINGLE_QUOTE && thirdNextChar == LexerTerminals.SINGLE_QUOTE) {\n-                reader.advance(3);\n-                return getSyntaxToken(SyntaxKind.TRIPLE_SINGLE_QUOTE_TOKEN);\n-            }\n+//            if (secondNextChar == LexerTerminals.SINGLE_QUOTE && thirdNextChar == LexerTerminals.SINGLE_QUOTE) {\n+//                reader.advance(3);\n+//                return getSyntaxToken(SyntaxKind.TRIPLE_SINGLE_QUOTE_TOKEN);\n+//            }\n             reader.advance();\n             return getSyntaxToken(SyntaxKind.SINGLE_QUOTE_TOKEN);\n         } else {\n             while (!reader.isEOF()) {\n                 nextChar = this.reader.peek();\n-                if (nextChar != LexerTerminals.SINGLE_QUOTE) {\n+                if (nextChar == LexerTerminals.SINGLE_QUOTE) {\n+                    break;\n+                }  else if (nextChar == LexerTerminals.CARRIAGE_RETURN) {\n+                    break;\n+                } else if (nextChar == LexerTerminals.NEWLINE) {\n+                    break;\n+                } else {\n                     reader.advance();\n-                    continue;\n                 }\n-                break;\n             }\n         }\n \n-        return getUnquotedKey();\n+        return getUnquotedKey(false);\n+    }\n+\n+    private STToken readMultilineLiteralStringToken() {\n+        reader.mark();\n+        if (reader.isEOF()) {\n+            return getSyntaxToken(SyntaxKind.EOF_TOKEN);\n+        }\n+\n+        char nextChar = this.reader.peek();\n+        char secondNextChar = this.reader.peek(1);\n+        char thirdNextChar = this.reader.peek(2);\n+        if (nextChar == LexerTerminals.SINGLE_QUOTE && secondNextChar == LexerTerminals.SINGLE_QUOTE &&\n+                thirdNextChar == LexerTerminals.SINGLE_QUOTE) {\n+            endMode();\n+            reader.advance(3);\n+            return getSyntaxToken(SyntaxKind.TRIPLE_SINGLE_QUOTE_TOKEN);\n+        } else {\n+            while (!reader.isEOF()) {\n+                nextChar = this.reader.peek();\n+                if (nextChar == LexerTerminals.SINGLE_QUOTE) {\n+                    break;\n+                } else {\n+                    reader.advance();\n+                }\n+            }\n+        }\n+\n+        return getUnquotedKey(false);\n+    }\n+\n+    private STToken readMultilineStringToken() {\n+        reader.mark();\n+        if (reader.isEOF()) {\n+            return getSyntaxToken(SyntaxKind.EOF_TOKEN);\n+        }\n+\n+        char nextChar = this.reader.peek();\n+        char secondNextChar = this.reader.peek(1);\n+        char thirdNextChar = this.reader.peek(2);\n+        if (nextChar == LexerTerminals.DOUBLE_QUOTE && secondNextChar == LexerTerminals.DOUBLE_QUOTE && thirdNextChar\n+                == LexerTerminals.DOUBLE_QUOTE) {\n+            endMode();\n+            reader.advance(3);\n+            return getSyntaxToken(SyntaxKind.TRIPLE_DOUBLE_QUOTE_TOKEN);\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a7f7c1a90cae4d35db9785481cdf4425d680649"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyMDA1Ng==", "bodyText": "remove else block. Invert the condition and break the loop early.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27065#discussion_r528620056", "createdAt": "2020-11-23T10:59:06Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -261,28 +290,110 @@ private STToken readLiteralStringToken() {\n         }\n \n         char nextChar = this.reader.peek();\n-        char secondNextChar = this.reader.peek(1);\n-        char thirdNextChar = this.reader.peek(2);\n+//        char secondNextChar = this.reader.peek(1);\n+//        char thirdNextChar = this.reader.peek(2);\n         if (nextChar == LexerTerminals.SINGLE_QUOTE) {\n             endMode();\n-            if (secondNextChar == LexerTerminals.SINGLE_QUOTE && thirdNextChar == LexerTerminals.SINGLE_QUOTE) {\n-                reader.advance(3);\n-                return getSyntaxToken(SyntaxKind.TRIPLE_SINGLE_QUOTE_TOKEN);\n-            }\n+//            if (secondNextChar == LexerTerminals.SINGLE_QUOTE && thirdNextChar == LexerTerminals.SINGLE_QUOTE) {\n+//                reader.advance(3);\n+//                return getSyntaxToken(SyntaxKind.TRIPLE_SINGLE_QUOTE_TOKEN);\n+//            }\n             reader.advance();\n             return getSyntaxToken(SyntaxKind.SINGLE_QUOTE_TOKEN);\n         } else {\n             while (!reader.isEOF()) {\n                 nextChar = this.reader.peek();\n-                if (nextChar != LexerTerminals.SINGLE_QUOTE) {\n+                if (nextChar == LexerTerminals.SINGLE_QUOTE) {\n+                    break;\n+                }  else if (nextChar == LexerTerminals.CARRIAGE_RETURN) {\n+                    break;\n+                } else if (nextChar == LexerTerminals.NEWLINE) {\n+                    break;\n+                } else {\n                     reader.advance();\n-                    continue;\n                 }\n-                break;\n             }\n         }\n \n-        return getUnquotedKey();\n+        return getUnquotedKey(false);\n+    }\n+\n+    private STToken readMultilineLiteralStringToken() {\n+        reader.mark();\n+        if (reader.isEOF()) {\n+            return getSyntaxToken(SyntaxKind.EOF_TOKEN);\n+        }\n+\n+        char nextChar = this.reader.peek();\n+        char secondNextChar = this.reader.peek(1);\n+        char thirdNextChar = this.reader.peek(2);\n+        if (nextChar == LexerTerminals.SINGLE_QUOTE && secondNextChar == LexerTerminals.SINGLE_QUOTE &&\n+                thirdNextChar == LexerTerminals.SINGLE_QUOTE) {\n+            endMode();\n+            reader.advance(3);\n+            return getSyntaxToken(SyntaxKind.TRIPLE_SINGLE_QUOTE_TOKEN);\n+        } else {\n+            while (!reader.isEOF()) {\n+                nextChar = this.reader.peek();\n+                if (nextChar == LexerTerminals.SINGLE_QUOTE) {\n+                    break;\n+                } else {\n+                    reader.advance();\n+                }\n+            }\n+        }\n+\n+        return getUnquotedKey(false);\n+    }\n+\n+    private STToken readMultilineStringToken() {\n+        reader.mark();\n+        if (reader.isEOF()) {\n+            return getSyntaxToken(SyntaxKind.EOF_TOKEN);\n+        }\n+\n+        char nextChar = this.reader.peek();\n+        char secondNextChar = this.reader.peek(1);\n+        char thirdNextChar = this.reader.peek(2);\n+        if (nextChar == LexerTerminals.DOUBLE_QUOTE && secondNextChar == LexerTerminals.DOUBLE_QUOTE && thirdNextChar\n+                == LexerTerminals.DOUBLE_QUOTE) {\n+            endMode();\n+            reader.advance(3);\n+            return getSyntaxToken(SyntaxKind.TRIPLE_DOUBLE_QUOTE_TOKEN);\n+        } else {\n+            while (!reader.isEOF()) {\n+                nextChar = this.reader.peek();\n+                if (nextChar == LexerTerminals.DOUBLE_QUOTE && this.reader.peek(1) == LexerTerminals.DOUBLE_QUOTE &&\n+                        this.reader.peek(2) == LexerTerminals.DOUBLE_QUOTE) {\n+                    break;\n+                } else if (nextChar == LexerTerminals.BACKSLASH) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a7f7c1a90cae4d35db9785481cdf4425d680649"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyMTY4Mg==", "bodyText": "you reach here after peeking only 2 tokens. So this should advance only 2 tokens.\nComment in L#796 is also not correct.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27065#discussion_r528621682", "createdAt": "2020-11-23T11:01:59Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -672,4 +786,27 @@ private int peek() {\n     private String getLexeme() {\n         return reader.getMarkedChars();\n     }\n+\n+    /**\n+     * Process string numeric escape.\n+     * <p>\n+     * <code>StringNumericEscape := \\u00E9 </code>\n+     */\n+    private void processStringNumericEscape() {\n+        // Process '\\ u {'\n+        this.reader.advance(3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a7f7c1a90cae4d35db9785481cdf4425d680649"}, "originalPosition": 246}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyMzMxMg==", "bodyText": "Why do we need a flag here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27065#discussion_r528623312", "createdAt": "2020-11-23T11:04:55Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -297,10 +408,13 @@ private STToken getSyntaxToken(SyntaxKind kind) {\n         return STNodeFactory.createToken(kind, leadingTrivia, trailingTrivia);\n     }\n \n-    private STToken getUnquotedKey() {\n+    private STToken getUnquotedKey(boolean skipTrailingTrivia) {\n         STNode leadingTrivia = getLeadingTrivia();\n         String lexeme = getLexeme();\n-        STNode trailingTrivia = processTrailingTrivia();\n+        STNode trailingTrivia = STNodeFactory.createEmptyNodeList();\n+        if (!skipTrailingTrivia) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a7f7c1a90cae4d35db9785481cdf4425d680649"}, "originalPosition": 219}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c2950b637f3d76c60da475f1b82f5d215cceea9c", "author": {"user": {"login": "xlight05", "name": "Anjana Supun"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c2950b637f3d76c60da475f1b82f5d215cceea9c", "committedDate": "2020-11-23T12:26:32Z", "message": "Address review changes"}, "afterCommit": {"oid": "9610a592cb6946e60386ae9c2b9b0d1392c61bdf", "author": {"user": {"login": "xlight05", "name": "Anjana Supun"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9610a592cb6946e60386ae9c2b9b0d1392c61bdf", "committedDate": "2020-11-23T13:16:08Z", "message": "Address review changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9610a592cb6946e60386ae9c2b9b0d1392c61bdf", "author": {"user": {"login": "xlight05", "name": "Anjana Supun"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9610a592cb6946e60386ae9c2b9b0d1392c61bdf", "committedDate": "2020-11-23T13:16:08Z", "message": "Address review changes"}, "afterCommit": {"oid": "a6d0f537c47361c7aa85b8e8977249ae00e95e1d", "author": {"user": {"login": "xlight05", "name": "Anjana Supun"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a6d0f537c47361c7aa85b8e8977249ae00e95e1d", "committedDate": "2020-11-23T13:48:49Z", "message": "Address review changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a6d0f537c47361c7aa85b8e8977249ae00e95e1d", "author": {"user": {"login": "xlight05", "name": "Anjana Supun"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a6d0f537c47361c7aa85b8e8977249ae00e95e1d", "committedDate": "2020-11-23T13:48:49Z", "message": "Address review changes"}, "afterCommit": {"oid": "2c481ce2d424cdd23c8956ab7ae19f5082d0b613", "author": {"user": {"login": "xlight05", "name": "Anjana Supun"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2c481ce2d424cdd23c8956ab7ae19f5082d0b613", "committedDate": "2020-11-23T14:34:37Z", "message": "Address review changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "283ff029239eac9a1a21f0026cfe7b370fa2daea", "author": {"user": {"login": "xlight05", "name": "Anjana Supun"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/283ff029239eac9a1a21f0026cfe7b370fa2daea", "committedDate": "2020-11-23T15:03:48Z", "message": "Address review changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c481ce2d424cdd23c8956ab7ae19f5082d0b613", "author": {"user": {"login": "xlight05", "name": "Anjana Supun"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2c481ce2d424cdd23c8956ab7ae19f5082d0b613", "committedDate": "2020-11-23T14:34:37Z", "message": "Address review changes"}, "afterCommit": {"oid": "283ff029239eac9a1a21f0026cfe7b370fa2daea", "author": {"user": {"login": "xlight05", "name": "Anjana Supun"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/283ff029239eac9a1a21f0026cfe7b370fa2daea", "committedDate": "2020-11-23T15:03:48Z", "message": "Address review changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2NTU4MTM2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27065#pullrequestreview-536558136", "createdAt": "2020-11-23T15:04:16Z", "commit": {"oid": "2c481ce2d424cdd23c8956ab7ae19f5082d0b613"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTowNTowNFrOH4Rekw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTowNzoyNVrOH4Rlhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc2ODY1OQ==", "bodyText": "keep a newline after a block", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27065#discussion_r528768659", "createdAt": "2020-11-23T15:05:04Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -230,27 +234,47 @@ private STToken readStringToken() {\n         }\n \n         char nextChar = this.reader.peek();\n-        char secondNextChar = this.reader.peek(1);\n-        char thirdNextChar = this.reader.peek(2);\n         if (nextChar == LexerTerminals.DOUBLE_QUOTE) {\n             endMode();\n-            if (secondNextChar == LexerTerminals.DOUBLE_QUOTE && thirdNextChar == LexerTerminals.DOUBLE_QUOTE) {\n-                reader.advance(3);\n-                return getSyntaxToken(SyntaxKind.TRIPLE_DOUBLE_QUOTE_TOKEN);\n-            }\n             reader.advance();\n             return getSyntaxToken(SyntaxKind.DOUBLE_QUOTE_TOKEN);\n-        } else {\n-            while (!reader.isEOF()) {\n-                nextChar = this.reader.peek();\n-                if (nextChar != LexerTerminals.DOUBLE_QUOTE) {\n+        }\n+        while (!reader.isEOF()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "283ff029239eac9a1a21f0026cfe7b370fa2daea"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc2ODgxMw==", "bodyText": "same here", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27065#discussion_r528768813", "createdAt": "2020-11-23T15:05:16Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -261,27 +285,74 @@ private STToken readLiteralStringToken() {\n         }\n \n         char nextChar = this.reader.peek();\n-        char secondNextChar = this.reader.peek(1);\n-        char thirdNextChar = this.reader.peek(2);\n         if (nextChar == LexerTerminals.SINGLE_QUOTE) {\n             endMode();\n-            if (secondNextChar == LexerTerminals.SINGLE_QUOTE && thirdNextChar == LexerTerminals.SINGLE_QUOTE) {\n-                reader.advance(3);\n-                return getSyntaxToken(SyntaxKind.TRIPLE_SINGLE_QUOTE_TOKEN);\n-            }\n             reader.advance();\n             return getSyntaxToken(SyntaxKind.SINGLE_QUOTE_TOKEN);\n-        } else {\n-            while (!reader.isEOF()) {\n-                nextChar = this.reader.peek();\n-                if (nextChar != LexerTerminals.SINGLE_QUOTE) {\n+        }\n+        while (!reader.isEOF()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "283ff029239eac9a1a21f0026cfe7b370fa2daea"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc2ODk1NA==", "bodyText": "same for all places", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27065#discussion_r528768954", "createdAt": "2020-11-23T15:05:26Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -261,27 +285,74 @@ private STToken readLiteralStringToken() {\n         }\n \n         char nextChar = this.reader.peek();\n-        char secondNextChar = this.reader.peek(1);\n-        char thirdNextChar = this.reader.peek(2);\n         if (nextChar == LexerTerminals.SINGLE_QUOTE) {\n             endMode();\n-            if (secondNextChar == LexerTerminals.SINGLE_QUOTE && thirdNextChar == LexerTerminals.SINGLE_QUOTE) {\n-                reader.advance(3);\n-                return getSyntaxToken(SyntaxKind.TRIPLE_SINGLE_QUOTE_TOKEN);\n-            }\n             reader.advance();\n             return getSyntaxToken(SyntaxKind.SINGLE_QUOTE_TOKEN);\n-        } else {\n-            while (!reader.isEOF()) {\n-                nextChar = this.reader.peek();\n-                if (nextChar != LexerTerminals.SINGLE_QUOTE) {\n+        }\n+        while (!reader.isEOF()) {\n+            nextChar = this.reader.peek();\n+            switch (nextChar) {\n+                case LexerTerminals.SINGLE_QUOTE:\n+                case LexerTerminals.CARRIAGE_RETURN:\n+                case LexerTerminals.NEWLINE:\n+                    break;\n+                default:\n                     reader.advance();\n                     continue;\n-                }\n-                break;\n             }\n+            break;\n+        }\n+        return getUnquotedKey();\n+    }\n+\n+    private STToken readMultilineStringToken() {\n+        reader.mark();\n+        if (reader.isEOF()) {\n+            return getSyntaxToken(SyntaxKind.EOF_TOKEN);\n         }\n \n+        char nextChar = this.reader.peek();\n+        char secondNextChar = this.reader.peek(1);\n+        char thirdNextChar = this.reader.peek(2);\n+        if (nextChar == LexerTerminals.DOUBLE_QUOTE && secondNextChar == LexerTerminals.DOUBLE_QUOTE && thirdNextChar\n+                == LexerTerminals.DOUBLE_QUOTE) {\n+            endMode();\n+            reader.advance(3);\n+            return getSyntaxToken(SyntaxKind.TRIPLE_DOUBLE_QUOTE_TOKEN);\n+        }\n+        while (!reader.isEOF()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "283ff029239eac9a1a21f0026cfe7b370fa2daea"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc2OTA5Ng==", "bodyText": "since nextChar == LexerTerminals.DOUBLE_QUOTE && this.reader.peek(1) == LexerTerminals.DOUBLE_QUOTE && this.reader.peek(2) == LexerTerminals.DOUBLE_QUOTE is used at L#318 as well, we can take it to a common method", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27065#discussion_r528769096", "createdAt": "2020-11-23T15:05:38Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -261,27 +285,74 @@ private STToken readLiteralStringToken() {\n         }\n \n         char nextChar = this.reader.peek();\n-        char secondNextChar = this.reader.peek(1);\n-        char thirdNextChar = this.reader.peek(2);\n         if (nextChar == LexerTerminals.SINGLE_QUOTE) {\n             endMode();\n-            if (secondNextChar == LexerTerminals.SINGLE_QUOTE && thirdNextChar == LexerTerminals.SINGLE_QUOTE) {\n-                reader.advance(3);\n-                return getSyntaxToken(SyntaxKind.TRIPLE_SINGLE_QUOTE_TOKEN);\n-            }\n             reader.advance();\n             return getSyntaxToken(SyntaxKind.SINGLE_QUOTE_TOKEN);\n-        } else {\n-            while (!reader.isEOF()) {\n-                nextChar = this.reader.peek();\n-                if (nextChar != LexerTerminals.SINGLE_QUOTE) {\n+        }\n+        while (!reader.isEOF()) {\n+            nextChar = this.reader.peek();\n+            switch (nextChar) {\n+                case LexerTerminals.SINGLE_QUOTE:\n+                case LexerTerminals.CARRIAGE_RETURN:\n+                case LexerTerminals.NEWLINE:\n+                    break;\n+                default:\n                     reader.advance();\n                     continue;\n-                }\n-                break;\n             }\n+            break;\n+        }\n+        return getUnquotedKey();\n+    }\n+\n+    private STToken readMultilineStringToken() {\n+        reader.mark();\n+        if (reader.isEOF()) {\n+            return getSyntaxToken(SyntaxKind.EOF_TOKEN);\n         }\n \n+        char nextChar = this.reader.peek();\n+        char secondNextChar = this.reader.peek(1);\n+        char thirdNextChar = this.reader.peek(2);\n+        if (nextChar == LexerTerminals.DOUBLE_QUOTE && secondNextChar == LexerTerminals.DOUBLE_QUOTE && thirdNextChar\n+                == LexerTerminals.DOUBLE_QUOTE) {\n+            endMode();\n+            reader.advance(3);\n+            return getSyntaxToken(SyntaxKind.TRIPLE_DOUBLE_QUOTE_TOKEN);\n+        }\n+        while (!reader.isEOF()) {\n+            nextChar = this.reader.peek();\n+            if (nextChar == LexerTerminals.DOUBLE_QUOTE && this.reader.peek(1) == LexerTerminals.DOUBLE_QUOTE &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "283ff029239eac9a1a21f0026cfe7b370fa2daea"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc3MDQzOA==", "bodyText": "Would be clean to extract this to a separate method like readStringEscapeSequence", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27065#discussion_r528770438", "createdAt": "2020-11-23T15:07:25Z", "author": {"login": "SupunS"}, "path": "misc/toml-parser/src/main/java/io/ballerina/toml/internal/parser/TomlLexer.java", "diffHunk": "@@ -261,27 +285,74 @@ private STToken readLiteralStringToken() {\n         }\n \n         char nextChar = this.reader.peek();\n-        char secondNextChar = this.reader.peek(1);\n-        char thirdNextChar = this.reader.peek(2);\n         if (nextChar == LexerTerminals.SINGLE_QUOTE) {\n             endMode();\n-            if (secondNextChar == LexerTerminals.SINGLE_QUOTE && thirdNextChar == LexerTerminals.SINGLE_QUOTE) {\n-                reader.advance(3);\n-                return getSyntaxToken(SyntaxKind.TRIPLE_SINGLE_QUOTE_TOKEN);\n-            }\n             reader.advance();\n             return getSyntaxToken(SyntaxKind.SINGLE_QUOTE_TOKEN);\n-        } else {\n-            while (!reader.isEOF()) {\n-                nextChar = this.reader.peek();\n-                if (nextChar != LexerTerminals.SINGLE_QUOTE) {\n+        }\n+        while (!reader.isEOF()) {\n+            nextChar = this.reader.peek();\n+            switch (nextChar) {\n+                case LexerTerminals.SINGLE_QUOTE:\n+                case LexerTerminals.CARRIAGE_RETURN:\n+                case LexerTerminals.NEWLINE:\n+                    break;\n+                default:\n                     reader.advance();\n                     continue;\n-                }\n-                break;\n             }\n+            break;\n+        }\n+        return getUnquotedKey();\n+    }\n+\n+    private STToken readMultilineStringToken() {\n+        reader.mark();\n+        if (reader.isEOF()) {\n+            return getSyntaxToken(SyntaxKind.EOF_TOKEN);\n         }\n \n+        char nextChar = this.reader.peek();\n+        char secondNextChar = this.reader.peek(1);\n+        char thirdNextChar = this.reader.peek(2);\n+        if (nextChar == LexerTerminals.DOUBLE_QUOTE && secondNextChar == LexerTerminals.DOUBLE_QUOTE && thirdNextChar\n+                == LexerTerminals.DOUBLE_QUOTE) {\n+            endMode();\n+            reader.advance(3);\n+            return getSyntaxToken(SyntaxKind.TRIPLE_DOUBLE_QUOTE_TOKEN);\n+        }\n+        while (!reader.isEOF()) {\n+            nextChar = this.reader.peek();\n+            if (nextChar == LexerTerminals.DOUBLE_QUOTE && this.reader.peek(1) == LexerTerminals.DOUBLE_QUOTE &&\n+                    this.reader.peek(2) == LexerTerminals.DOUBLE_QUOTE) {\n+                break;\n+            }\n+            if (nextChar != LexerTerminals.BACKSLASH) {\n+                reader.advance();\n+                continue;\n+            }\n+            switch (this.reader.peek(1)) {\n+                case LexerTerminals.CARRIAGE_RETURN:\n+                case LexerTerminals.NEWLINE:\n+                    reader.advance();\n+                    continue;\n+                case 'n':\n+                case 't':\n+                case 'r':\n+                case LexerTerminals.BACKSLASH:\n+                case LexerTerminals.DOUBLE_QUOTE:\n+                    this.reader.advance(2);\n+                    continue;\n+                case 'u':\n+                case 'U':\n+                    processStringNumericEscape();\n+                    continue;\n+                default:\n+                    String escapeSequence = String.valueOf(this.reader.peek(2));\n+                    reportLexerError(DiagnosticErrorCode.ERROR_INVALID_ESCAPE_SEQUENCE, escapeSequence);\n+                    this.reader.advance();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "283ff029239eac9a1a21f0026cfe7b370fa2daea"}, "originalPosition": 166}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4940, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}