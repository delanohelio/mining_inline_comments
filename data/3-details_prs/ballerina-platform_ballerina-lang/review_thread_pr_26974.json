{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyMjAzMzkz", "number": 26974, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMDowNjozOVrOE58Sqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMDowNzo0MlrOE58UWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MTkyMTA2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMDowNjozOVrOH0taPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNTowMDo0NlrOH1dQ8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAzMTk5Ng==", "bodyText": "Rather than the flag, can we use the ParserRuleContext to determine where we are?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26974#discussion_r525031996", "createdAt": "2020-11-17T10:06:39Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -13357,11 +13359,15 @@ private STNode parseAnonFuncExprOrFuncTypeDesc(List<STNode> qualifiers) {\n                 return parseExpressionRhs(DEFAULT_OP_PRECEDENCE, anonFunc, false, true);\n             case IDENTIFIER_TOKEN:\n             default:\n-                switchContext(ParserRuleContext.VAR_DECL_STMT);\n                 STNode funcTypeDesc = STNodeFactory.createFunctionTypeDescriptorNode(qualifierList, functionKeyword,\n                         funcSignature);\n-                return parseComplexTypeDescriptor(funcTypeDesc, ParserRuleContext.TYPE_DESC_IN_TYPE_BINDING_PATTERN,\n-                        true);\n+                if (!isInBracketedList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61b05802554853762327344949cdf3e28e9ebc7"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4NzkyOQ==", "bodyText": "Context information is not available and it's not straightforward to pass the ctx from calling methods. I think using a flag is better here. WDYT?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26974#discussion_r525087929", "createdAt": "2020-11-17T11:37:40Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -13357,11 +13359,15 @@ private STNode parseAnonFuncExprOrFuncTypeDesc(List<STNode> qualifiers) {\n                 return parseExpressionRhs(DEFAULT_OP_PRECEDENCE, anonFunc, false, true);\n             case IDENTIFIER_TOKEN:\n             default:\n-                switchContext(ParserRuleContext.VAR_DECL_STMT);\n                 STNode funcTypeDesc = STNodeFactory.createFunctionTypeDescriptorNode(qualifierList, functionKeyword,\n                         funcSignature);\n-                return parseComplexTypeDescriptor(funcTypeDesc, ParserRuleContext.TYPE_DESC_IN_TYPE_BINDING_PATTERN,\n-                        true);\n+                if (!isInBracketedList) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAzMTk5Ng=="}, "originalCommit": {"oid": "b61b05802554853762327344949cdf3e28e9ebc7"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE1OTQ3NA==", "bodyText": "Catch is, a bracketed list can also exist in a nested level as well. e.g:  [ [function( ], x].\nBut Since you are passing hardcoded false in L#13248 and L#13324, this condition may sometimes return false for valid scenarios.\nIf passing down the context is a pain, We can add a method to get the current context, similar to add/end/switch context methods.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26974#discussion_r525159474", "createdAt": "2020-11-17T13:40:01Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -13357,11 +13359,15 @@ private STNode parseAnonFuncExprOrFuncTypeDesc(List<STNode> qualifiers) {\n                 return parseExpressionRhs(DEFAULT_OP_PRECEDENCE, anonFunc, false, true);\n             case IDENTIFIER_TOKEN:\n             default:\n-                switchContext(ParserRuleContext.VAR_DECL_STMT);\n                 STNode funcTypeDesc = STNodeFactory.createFunctionTypeDescriptorNode(qualifierList, functionKeyword,\n                         funcSignature);\n-                return parseComplexTypeDescriptor(funcTypeDesc, ParserRuleContext.TYPE_DESC_IN_TYPE_BINDING_PATTERN,\n-                        true);\n+                if (!isInBracketedList) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAzMTk5Ng=="}, "originalCommit": {"oid": "b61b05802554853762327344949cdf3e28e9ebc7"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgxNjA0OA==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26974#discussion_r525816048", "createdAt": "2020-11-18T05:00:46Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -13357,11 +13359,15 @@ private STNode parseAnonFuncExprOrFuncTypeDesc(List<STNode> qualifiers) {\n                 return parseExpressionRhs(DEFAULT_OP_PRECEDENCE, anonFunc, false, true);\n             case IDENTIFIER_TOKEN:\n             default:\n-                switchContext(ParserRuleContext.VAR_DECL_STMT);\n                 STNode funcTypeDesc = STNodeFactory.createFunctionTypeDescriptorNode(qualifierList, functionKeyword,\n                         funcSignature);\n-                return parseComplexTypeDescriptor(funcTypeDesc, ParserRuleContext.TYPE_DESC_IN_TYPE_BINDING_PATTERN,\n-                        true);\n+                if (!isInBracketedList) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAzMTk5Ng=="}, "originalCommit": {"oid": "b61b05802554853762327344949cdf3e28e9ebc7"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MTkyNTM2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/test/resources/types/tuple-type/tuple_type_source_04.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMDowNzo0MlrOH0tc5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMTo0NzoyN1rOH0xK6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAzMjY3Ng==", "bodyText": "shall we add a test case for using [function (, x] in a statement-starting expression, (as its the other half of the ambiguity)?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26974#discussion_r525032676", "createdAt": "2020-11-17T10:07:42Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/resources/types/tuple-type/tuple_type_source_04.bal", "diffHunk": "@@ -10,4 +10,5 @@ function foo() returns [int, string... {\n     [string..] i;\n     [string % int a] j;\n     [int]] k;\n+    [function (, int] e;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61b05802554853762327344949cdf3e28e9ebc7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA5MzYwOQ==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26974#discussion_r525093609", "createdAt": "2020-11-17T11:47:27Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/test/resources/types/tuple-type/tuple_type_source_04.bal", "diffHunk": "@@ -10,4 +10,5 @@ function foo() returns [int, string... {\n     [string..] i;\n     [string % int a] j;\n     [int]] k;\n+    [function (, int] e;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAzMjY3Ng=="}, "originalCommit": {"oid": "b61b05802554853762327344949cdf3e28e9ebc7"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3015, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}