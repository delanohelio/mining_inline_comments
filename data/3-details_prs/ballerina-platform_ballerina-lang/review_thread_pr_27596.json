{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzMDg5MDA0", "number": 27596, "reviewThreads": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwNDo1NzowMVrOFN_GQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwOTo1NToyOVrOFRVsDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMjA5NjAzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwNDo1NzowMVrOISfkLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQyMTowNToxNlrOIXTMag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI2MjQ0Ng==", "bodyText": "Can't we rearrange this,\nif (!Symbols.isOptional(lhsField.symbol)) {\n                     return false;\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r556262446", "createdAt": "2021-01-13T04:57:01Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2376,11 +2376,14 @@ private boolean checkFieldEquivalency(BRecordType lhsType, BRecordType rhsType,\n         for (BField lhsField : lhsType.fields.values()) {\n             BField rhsField = rhsFields.get(lhsField.name.value);\n \n-            // There should be a corresponding RHS field\n+            // If LHS field is required, there should be a corresponding RHS field\n             if (rhsField == null) {\n-                return false;\n+                if (Symbols.isOptional(lhsField.symbol)) {\n+                    continue;\n+                } else {\n+                    return false;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4ad53f628bbe529772caea25ca1a51e36e6ac0f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDgyODkyMQ==", "bodyText": "I think we cannot do this. Because when rhsField == null and Symbols.isOptional(lhsField.symbol) becomes true, then it check for flags also.(L2661).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560828921", "createdAt": "2021-01-20T09:55:14Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2376,11 +2376,14 @@ private boolean checkFieldEquivalency(BRecordType lhsType, BRecordType rhsType,\n         for (BField lhsField : lhsType.fields.values()) {\n             BField rhsField = rhsFields.get(lhsField.name.value);\n \n-            // There should be a corresponding RHS field\n+            // If LHS field is required, there should be a corresponding RHS field\n             if (rhsField == null) {\n-                return false;\n+                if (Symbols.isOptional(lhsField.symbol)) {\n+                    continue;\n+                } else {\n+                    return false;\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI2MjQ0Ng=="}, "originalCommit": {"oid": "c4ad53f628bbe529772caea25ca1a51e36e6ac0f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg5Njg0Nw==", "bodyText": "We can remove the else though\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (Symbols.isOptional(lhsField.symbol)) {\n          \n          \n            \n                                continue;\n          \n          \n            \n                            } else {\n          \n          \n            \n                                return false;\n          \n          \n            \n                            }\n          \n          \n            \n                            if (!Symbols.isOptional(lhsField.symbol)) {\n          \n          \n            \n                                return false;\n          \n          \n            \n                            }\n          \n          \n            \n                            continue;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560896847", "createdAt": "2021-01-20T11:43:00Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2376,11 +2376,14 @@ private boolean checkFieldEquivalency(BRecordType lhsType, BRecordType rhsType,\n         for (BField lhsField : lhsType.fields.values()) {\n             BField rhsField = rhsFields.get(lhsField.name.value);\n \n-            // There should be a corresponding RHS field\n+            // If LHS field is required, there should be a corresponding RHS field\n             if (rhsField == null) {\n-                return false;\n+                if (Symbols.isOptional(lhsField.symbol)) {\n+                    continue;\n+                } else {\n+                    return false;\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI2MjQ0Ng=="}, "originalCommit": {"oid": "c4ad53f628bbe529772caea25ca1a51e36e6ac0f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTMwMjYzNA==", "bodyText": "Changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561302634", "createdAt": "2021-01-20T21:05:16Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2376,11 +2376,14 @@ private boolean checkFieldEquivalency(BRecordType lhsType, BRecordType rhsType,\n         for (BField lhsField : lhsType.fields.values()) {\n             BField rhsField = rhsFields.get(lhsField.name.value);\n \n-            // There should be a corresponding RHS field\n+            // If LHS field is required, there should be a corresponding RHS field\n             if (rhsField == null) {\n-                return false;\n+                if (Symbols.isOptional(lhsField.symbol)) {\n+                    continue;\n+                } else {\n+                    return false;\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI2MjQ0Ng=="}, "originalCommit": {"oid": "c4ad53f628bbe529772caea25ca1a51e36e6ac0f"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMTA3ODY3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicParamNode.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwODowNzo0M1rOIWxb-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMDozMToxM1rOIW3wwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0OTU2Mw==", "bodyText": "2021?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560749563", "createdAt": "2021-01-20T08:07:43Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicParamNode.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc1MDI4MQ==", "bodyText": "No, it should be 2020, since the file was created in 2020.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560750281", "createdAt": "2021-01-20T08:08:53Z", "author": {"login": "hasithaa"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicParamNode.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0OTU2Mw=="}, "originalCommit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc1NjE3MA==", "bodyText": "Is it when we created or when the PR is getting merged (i.e class is getting added to the repo for the first time)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560756170", "createdAt": "2021-01-20T08:19:00Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicParamNode.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0OTU2Mw=="}, "originalCommit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc1ODUyMg==", "bodyText": "That is not practical. What matters is the commit and when it created. That is the git model.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560758522", "createdAt": "2021-01-20T08:22:57Z", "author": {"login": "hasithaa"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicParamNode.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0OTU2Mw=="}, "originalCommit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg1MzE4NA==", "bodyText": "Ack", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560853184", "createdAt": "2021-01-20T10:31:13Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicParamNode.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0OTU2Mw=="}, "originalCommit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMTA3OTg0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicParamNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwODowNzo1OVrOIWxcoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwOTozOTozNFrOIW1nWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0OTcyOA==", "bodyText": "Where is the java doc for this class?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560749728", "createdAt": "2021-01-20T08:07:59Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicParamNode.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.ballerinalang.model.tree.expressions;\n+\n+/**\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDgxODAwOQ==", "bodyText": "Miss it. Added.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560818009", "createdAt": "2021-01-20T09:39:34Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicParamNode.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.ballerinalang.model.tree.expressions;\n+\n+/**\n+ *", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0OTcyOA=="}, "originalCommit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMTExMDA5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BIRArgument.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwODoxNjowNVrOIWxu2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwOTozOToyNlrOIW1nGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc1NDM5NA==", "bodyText": "If Argument extends BIROperand, why do we need still get the BIROperand in the constructor ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560754394", "createdAt": "2021-01-20T08:16:05Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BIRArgument.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.bir.model;\n+\n+/**\n+ * {@code BIRArgument} represents an argument in an instruction.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BIRArgument extends BIROperand {\n+\n+    public ArgumentState argState;\n+    public BIROperand userProvidedCondition;\n+\n+    public BIRArgument(ArgumentState argState, BIROperand argVar) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc3MDUzMA==", "bodyText": "I did this because we get argument as BIROperand type. (Within the constructor I used it as BIRVariableDcl). It can be changed to BIRVariableDcl type. I will fix it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560770530", "createdAt": "2021-01-20T08:42:38Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BIRArgument.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.bir.model;\n+\n+/**\n+ * {@code BIRArgument} represents an argument in an instruction.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BIRArgument extends BIROperand {\n+\n+    public ArgumentState argState;\n+    public BIROperand userProvidedCondition;\n+\n+    public BIRArgument(ArgumentState argState, BIROperand argVar) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc1NDM5NA=="}, "originalCommit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc4NzU1NA==", "bodyText": "If you check the usage of the constructor, we are actually wrapping the BIROperand around BIRArgument, which is not needed IMO, if you can directly pass in the varDcl.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560787554", "createdAt": "2021-01-20T08:55:43Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BIRArgument.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.bir.model;\n+\n+/**\n+ * {@code BIRArgument} represents an argument in an instruction.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BIRArgument extends BIROperand {\n+\n+    public ArgumentState argState;\n+    public BIROperand userProvidedCondition;\n+\n+    public BIRArgument(ArgumentState argState, BIROperand argVar) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc1NDM5NA=="}, "originalCommit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDgxNzk0NA==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560817944", "createdAt": "2021-01-20T09:39:26Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BIRArgument.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.bir.model;\n+\n+/**\n+ * {@code BIRArgument} represents an argument in an instruction.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BIRArgument extends BIROperand {\n+\n+    public ArgumentState argState;\n+    public BIROperand userProvidedCondition;\n+\n+    public BIRArgument(ArgumentState argState, BIROperand argVar) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc1NDM5NA=="}, "originalCommit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMTExNDIwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangDynamicParamExpr.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwODoxNzowOVrOIWxxRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwOTozOToyM1rOIW1m8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc1NTAxNA==", "bodyText": "2021? Seems you haven't checked header.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560755014", "createdAt": "2021-01-20T08:17:09Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangDynamicParamExpr.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDgxNzkwNg==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560817906", "createdAt": "2021-01-20T09:39:23Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangDynamicParamExpr.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc1NTAxNA=="}, "originalCommit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMTExNjcyOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/FunctionsWithRestArguments.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwODoxNzo0N1rOIWxyvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwOTozOToyMFrOIW1m1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc1NTM5MQ==", "bodyText": "Unnecessary new lines", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560755391", "createdAt": "2021-01-20T08:17:47Z", "author": {"login": "Kishanthan"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/FunctionsWithRestArguments.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.ballerinalang.test.functions;\n+\n+import org.ballerinalang.test.BAssertUtil;\n+import org.ballerinalang.test.BCompileUtil;\n+import org.ballerinalang.test.BRunUtil;\n+import org.ballerinalang.test.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test Function Arguments with mapping type rest Expression.\n+ *\n+ * @since 2.0.0\n+ */\n+public class FunctionsWithRestArguments {\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDgxNzg3Ng==", "bodyText": "Removed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560817876", "createdAt": "2021-01-20T09:39:20Z", "author": {"login": "chiranSachintha"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/FunctionsWithRestArguments.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.ballerinalang.test.functions;\n+\n+import org.ballerinalang.test.BAssertUtil;\n+import org.ballerinalang.test.BCompileUtil;\n+import org.ballerinalang.test.BRunUtil;\n+import org.ballerinalang.test.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test Function Arguments with mapping type rest Expression.\n+ *\n+ * @since 2.0.0\n+ */\n+public class FunctionsWithRestArguments {\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc1NTM5MQ=="}, "originalCommit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMTc2ODc3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMDo0MToyMFrOIW4LWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwOTo0ODowMVrOIXtqmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg1OTk5Mg==", "bodyText": "This changes the BIR format right? we'll need to update the kaitai file ?\n@Kishanthan wdyt?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560859992", "createdAt": "2021-01-20T10:41:20Z", "author": {"login": "manuranga"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java", "diffHunk": "@@ -421,6 +422,27 @@ public void visit(BIROperand birOperand) {\n         }\n     }\n \n+    public void visit(BIRArgument birArgument) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg2NzQ5MA==", "bodyText": "Yes, the kaitai file has to be updated.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560867490", "createdAt": "2021-01-20T10:52:36Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java", "diffHunk": "@@ -421,6 +422,27 @@ public void visit(BIROperand birOperand) {\n         }\n     }\n \n+    public void visit(BIRArgument birArgument) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg1OTk5Mg=="}, "originalCommit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg2ODAyNg==", "bodyText": "This should fail the BIR tests also I believe.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560868026", "createdAt": "2021-01-20T10:53:30Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java", "diffHunk": "@@ -421,6 +422,27 @@ public void visit(BIROperand birOperand) {\n         }\n     }\n \n+    public void visit(BIRArgument birArgument) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg1OTk5Mg=="}, "originalCommit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAxMDMwNw==", "bodyText": "@chiranSachintha , if this method does the same as visit(BIROperand birOperand), then you can call the same than duplicating the code.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561010307", "createdAt": "2021-01-20T14:39:32Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java", "diffHunk": "@@ -421,6 +422,27 @@ public void visit(BIROperand birOperand) {\n         }\n     }\n \n+    public void visit(BIRArgument birArgument) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg1OTk5Mg=="}, "originalCommit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAzNTYwOQ==", "bodyText": "Yes. I will fix it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561035609", "createdAt": "2021-01-20T15:06:36Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java", "diffHunk": "@@ -421,6 +422,27 @@ public void visit(BIROperand birOperand) {\n         }\n     }\n \n+    public void visit(BIRArgument birArgument) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg1OTk5Mg=="}, "originalCommit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTMxOTcwMQ==", "bodyText": "Fixed. Do we need to update the kaitai file?(When using visit(BIROperand birOperand) method for BIRArgument).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561319701", "createdAt": "2021-01-20T21:30:29Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java", "diffHunk": "@@ -421,6 +422,27 @@ public void visit(BIROperand birOperand) {\n         }\n     }\n \n+    public void visit(BIRArgument birArgument) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg1OTk5Mg=="}, "originalCommit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTU3MTU1Nw==", "bodyText": "Btw, do we need this method at all? I don't see that you added a accept method for BIRArgument and you are not doing anything differently for BIRArgument. So It should still work without this method I think.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561571557", "createdAt": "2021-01-21T03:43:21Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java", "diffHunk": "@@ -421,6 +422,27 @@ public void visit(BIROperand birOperand) {\n         }\n     }\n \n+    public void visit(BIRArgument birArgument) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg1OTk5Mg=="}, "originalCommit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY2NDY3Nw==", "bodyText": "Let me step back a bit. I think we need to have a separate write method for BIRArgument. Because, BIRArgument has a state called ArgumentState and it is not captured in the BIR binary. So, in BIR reader(s), like BIRSymbolEnter and nBallerina readers, we will not have this information read and propagated to the backend.\nFor the moment, we can go ahead with merging this. But lets capture this issue @MaryamZi @chiranSachintha", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561664677", "createdAt": "2021-01-21T07:54:08Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java", "diffHunk": "@@ -421,6 +422,27 @@ public void visit(BIROperand birOperand) {\n         }\n     }\n \n+    public void visit(BIRArgument birArgument) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg1OTk5Mg=="}, "originalCommit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTczNjM0Ng==", "bodyText": "Thanks. I've created #28058 to track fixing the suggestions to this PR.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561736346", "createdAt": "2021-01-21T09:48:01Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java", "diffHunk": "@@ -421,6 +422,27 @@ public void visit(BIROperand birOperand) {\n         }\n     }\n \n+    public void visit(BIRArgument birArgument) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg1OTk5Mg=="}, "originalCommit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMTk4MTg0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMTozNjozNlrOIW6Npw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQyMTowMjo0MFrOIXTHJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg5MzM1MQ==", "bodyText": "We have to introduce these changes in the runtime type checker also.\nThe type test below returns false atm.\ntype Person record {|\n    string name;\n    int id;\n    float avg?;\n|};\n\ntype Student record {|\n    string name;\n    int id;\n|};\n\npublic function main() {\n    Student st = {name: \"Amy\", id: 1234};\n\n    Person pr = st; // Works.\n\n    boolean res = <any> st is Person; // Evaluates to `false`\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560893351", "createdAt": "2021-01-20T11:36:36Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2650,11 +2650,14 @@ private boolean checkFieldEquivalency(BRecordType lhsType, BRecordType rhsType,\n         for (BField lhsField : lhsType.fields.values()) {\n             BField rhsField = rhsFields.get(lhsField.name.value);\n \n-            // There should be a corresponding RHS field\n+            // If LHS field is required, there should be a corresponding RHS field\n             if (rhsField == null) {\n-                return false;\n+                if (Symbols.isOptional(lhsField.symbol)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTMwMTI4NA==", "bodyText": "Fixed it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561301284", "createdAt": "2021-01-20T21:02:40Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2650,11 +2650,14 @@ private boolean checkFieldEquivalency(BRecordType lhsType, BRecordType rhsType,\n         for (BField lhsField : lhsType.fields.values()) {\n             BField rhsField = rhsFields.get(lhsField.name.value);\n \n-            // There should be a corresponding RHS field\n+            // If LHS field is required, there should be a corresponding RHS field\n             if (rhsField == null) {\n-                return false;\n+                if (Symbols.isOptional(lhsField.symbol)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg5MzM1MQ=="}, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMjA3NjA5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicParamNode.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMjowMjozM1rOIW7HHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQyMTowMjo1OVrOIXTHtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkwODA2Mw==", "bodyText": "We can probably include more details, right? This is not quite a named arg?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560908063", "createdAt": "2021-01-20T12:02:33Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicParamNode.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.ballerinalang.model.tree.expressions;\n+\n+/**\n+ * Represent named arguments.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkyODI4OA==", "bodyText": "I added in BLangDynamicParamExpr class(Which extend from this). Do I need to add the same thing here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560928288", "createdAt": "2021-01-20T12:38:36Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicParamNode.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.ballerinalang.model.tree.expressions;\n+\n+/**\n+ * Represent named arguments.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkwODA2Mw=="}, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAzNDc3Nw==", "bodyText": "Yes, we need to sufficiently describe this here. \"Represent named arguments.\" kinda indicates that it represents all named arguments which is not the case.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561034777", "createdAt": "2021-01-20T15:05:37Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicParamNode.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.ballerinalang.model.tree.expressions;\n+\n+/**\n+ * Represent named arguments.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkwODA2Mw=="}, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTMwMTQzMQ==", "bodyText": "Changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561301431", "createdAt": "2021-01-20T21:02:59Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicParamNode.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.ballerinalang.model.tree.expressions;\n+\n+/**\n+ * Represent named arguments.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkwODA2Mw=="}, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMjEyNDkxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ASTBuilderUtil.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMjoxNjowOVrOIW7kbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQyMTowMzoxN1rOIXTIYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkxNTU2Ng==", "bodyText": "Why are we changing these?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560915566", "createdAt": "2021-01-20T12:16:09Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ASTBuilderUtil.java", "diffHunk": "@@ -724,11 +724,11 @@ public static BLangMatchExpression createMatchExpression(BLangExpression expr) {\n         return matchExpr;\n     }\n \n-    public static BLangFieldBasedAccess createFieldAccessExpr(BLangAccessibleExpression varRef, BLangIdentifier field) {\n+    public static BLangFieldBasedAccess createFieldAccessExpr(BLangExpression varRef, BLangIdentifier field) {\n         return createFieldAccessExpr(varRef, field, false);\n     }\n \n-    public static BLangFieldBasedAccess createFieldAccessExpr(BLangAccessibleExpression varRef, BLangIdentifier field,\n+    public static BLangFieldBasedAccess createFieldAccessExpr(BLangExpression varRef, BLangIdentifier field,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkyNjIxOQ==", "bodyText": "Reason to change that is, in BLangAccessExpression class type of expr field is BLangExpression.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560926219", "createdAt": "2021-01-20T12:35:04Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ASTBuilderUtil.java", "diffHunk": "@@ -724,11 +724,11 @@ public static BLangMatchExpression createMatchExpression(BLangExpression expr) {\n         return matchExpr;\n     }\n \n-    public static BLangFieldBasedAccess createFieldAccessExpr(BLangAccessibleExpression varRef, BLangIdentifier field) {\n+    public static BLangFieldBasedAccess createFieldAccessExpr(BLangExpression varRef, BLangIdentifier field) {\n         return createFieldAccessExpr(varRef, field, false);\n     }\n \n-    public static BLangFieldBasedAccess createFieldAccessExpr(BLangAccessibleExpression varRef, BLangIdentifier field,\n+    public static BLangFieldBasedAccess createFieldAccessExpr(BLangExpression varRef, BLangIdentifier field,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkxNTU2Ng=="}, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkyODM0NQ==", "bodyText": "But IINM, right now it holds a BLangAccessibleExpression. So ideally whatever calls this should be passing a BLangAccessibleExpression.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560928345", "createdAt": "2021-01-20T12:38:44Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ASTBuilderUtil.java", "diffHunk": "@@ -724,11 +724,11 @@ public static BLangMatchExpression createMatchExpression(BLangExpression expr) {\n         return matchExpr;\n     }\n \n-    public static BLangFieldBasedAccess createFieldAccessExpr(BLangAccessibleExpression varRef, BLangIdentifier field) {\n+    public static BLangFieldBasedAccess createFieldAccessExpr(BLangExpression varRef, BLangIdentifier field) {\n         return createFieldAccessExpr(varRef, field, false);\n     }\n \n-    public static BLangFieldBasedAccess createFieldAccessExpr(BLangAccessibleExpression varRef, BLangIdentifier field,\n+    public static BLangFieldBasedAccess createFieldAccessExpr(BLangExpression varRef, BLangIdentifier field,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkxNTU2Ng=="}, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk0MzQ5Mw==", "bodyText": "Here I used BLangExpression type varRef to create  FieldAccessExpr. Isn't it correct?\n\n  \n    \n      ballerina-lang/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n    \n    \n         Line 7399\n      in\n      5d1f6c2\n    \n    \n    \n    \n\n        \n          \n           BLangFieldBasedAccess fieldBasedAccessExpression = ASTBuilderUtil.createFieldAccessExpr(", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560943493", "createdAt": "2021-01-20T13:03:31Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ASTBuilderUtil.java", "diffHunk": "@@ -724,11 +724,11 @@ public static BLangMatchExpression createMatchExpression(BLangExpression expr) {\n         return matchExpr;\n     }\n \n-    public static BLangFieldBasedAccess createFieldAccessExpr(BLangAccessibleExpression varRef, BLangIdentifier field) {\n+    public static BLangFieldBasedAccess createFieldAccessExpr(BLangExpression varRef, BLangIdentifier field) {\n         return createFieldAccessExpr(varRef, field, false);\n     }\n \n-    public static BLangFieldBasedAccess createFieldAccessExpr(BLangAccessibleExpression varRef, BLangIdentifier field,\n+    public static BLangFieldBasedAccess createFieldAccessExpr(BLangExpression varRef, BLangIdentifier field,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkxNTU2Ng=="}, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk0Nzk1NQ==", "bodyText": "The varargRef variable you are using here is actually a BLangSimpleVarRef, right? If you change the type of the param to BLangSimpleVarRef in reorderNamedArgs, this could work without any other changes.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560947955", "createdAt": "2021-01-20T13:10:45Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ASTBuilderUtil.java", "diffHunk": "@@ -724,11 +724,11 @@ public static BLangMatchExpression createMatchExpression(BLangExpression expr) {\n         return matchExpr;\n     }\n \n-    public static BLangFieldBasedAccess createFieldAccessExpr(BLangAccessibleExpression varRef, BLangIdentifier field) {\n+    public static BLangFieldBasedAccess createFieldAccessExpr(BLangExpression varRef, BLangIdentifier field) {\n         return createFieldAccessExpr(varRef, field, false);\n     }\n \n-    public static BLangFieldBasedAccess createFieldAccessExpr(BLangAccessibleExpression varRef, BLangIdentifier field,\n+    public static BLangFieldBasedAccess createFieldAccessExpr(BLangExpression varRef, BLangIdentifier field,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkxNTU2Ng=="}, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTMwMTYwMg==", "bodyText": "Changed as we discuss.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561301602", "createdAt": "2021-01-20T21:03:17Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ASTBuilderUtil.java", "diffHunk": "@@ -724,11 +724,11 @@ public static BLangMatchExpression createMatchExpression(BLangExpression expr) {\n         return matchExpr;\n     }\n \n-    public static BLangFieldBasedAccess createFieldAccessExpr(BLangAccessibleExpression varRef, BLangIdentifier field) {\n+    public static BLangFieldBasedAccess createFieldAccessExpr(BLangExpression varRef, BLangIdentifier field) {\n         return createFieldAccessExpr(varRef, field, false);\n     }\n \n-    public static BLangFieldBasedAccess createFieldAccessExpr(BLangAccessibleExpression varRef, BLangIdentifier field,\n+    public static BLangFieldBasedAccess createFieldAccessExpr(BLangExpression varRef, BLangIdentifier field,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkxNTU2Ng=="}, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMjMyMzMxOnYy", "diffSide": "LEFT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/record/ClosedRecordEquivalencyRulesTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMzowODowNFrOIW9caA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMzowODowNFrOIW9caA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk0NjI4MA==", "bodyText": "Please add both negative and positive (compile time and runtime) tests for the record assignability changes introduced in this PR.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560946280", "createdAt": "2021-01-20T13:08:04Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/record/ClosedRecordEquivalencyRulesTest.java", "diffHunk": "@@ -50,8 +50,6 @@ public void testClosedRecordNegatives() {\n         int i = 0;\n         validateError(negative, i++, \"incompatible types: expected 'AnotherPerson', found 'Person1'\", 28, 24);\n         validateError(negative, i++, \"incompatible types: expected 'AnotherPerson', found 'Person2'\", 38, 24);\n-        validateError(negative, i++, \"incompatible types: expected 'AnotherPerson3', found 'Person1'\", 49, 25);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMjQ2Njc0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMzo0Mzo0OFrOIW-z0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQyMTowMzozOVrOIXTJGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk2ODY1Ng==", "bodyText": "These need to go in ASTBuilderUtil\nThere's already two methods to create BLangIndexBasedAccess in ASTBuilderUtil which we can probably reuse here\nWe probably don't need to set pos", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560968656", "createdAt": "2021-01-20T13:43:48Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -7385,6 +7417,41 @@ private void reorderNamedArgs(BLangInvocation iExpr, BInvokableSymbol invokableS\n         iExpr.requiredArgs = args;\n     }\n \n+    private BLangDynamicParamExpr createDynamicParamExpression(BLangExpression condition,\n+                                                               BLangExpression conditionalArg) {\n+        BLangDynamicParamExpr dymaicExpression = new BLangDynamicParamExpr();\n+        dymaicExpression.condition = condition;\n+        dymaicExpression.conditionalArgument = conditionalArg;\n+        return dymaicExpression;\n+    }\n+\n+    private BLangTernaryExpr createTernaryExprNode(BType type, BLangExpression expr, BLangExpression thenExpr,\n+                                                   BLangExpression elseExpr, Location pos) {\n+        BLangTernaryExpr ternaryExpr = (BLangTernaryExpr) TreeBuilder.createTernaryExpressionNode();\n+        ternaryExpr.pos = pos;\n+        ternaryExpr.elseExpr = elseExpr;\n+        ternaryExpr.thenExpr = thenExpr;\n+        ternaryExpr.expr = expr;\n+        ternaryExpr.type = type;\n+        return ternaryExpr;\n+    }\n+\n+    private BLangIndexBasedAccess createMemberAccessExprNode(BType type, BLangExpression expr,\n+                                                             BLangExpression indexExpr, Location pos) {\n+        BLangIndexBasedAccess memberAccessExpr = (BLangIndexBasedAccess) TreeBuilder.createIndexBasedAccessNode();\n+        memberAccessExpr.pos = pos;\n+        memberAccessExpr.expr = expr;\n+        memberAccessExpr.indexExpr = indexExpr;\n+        memberAccessExpr.type = type;\n+        return memberAccessExpr;\n+    }\n+\n+    private BLangExpression createIgnoreExprNode(BType type) {\n+        BLangExpression ignoreExpr = new BLangIgnoreExpr();\n+        ignoreExpr.type = type;\n+        return ignoreExpr;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTMwMTc4Nw==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561301787", "createdAt": "2021-01-20T21:03:39Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -7385,6 +7417,41 @@ private void reorderNamedArgs(BLangInvocation iExpr, BInvokableSymbol invokableS\n         iExpr.requiredArgs = args;\n     }\n \n+    private BLangDynamicParamExpr createDynamicParamExpression(BLangExpression condition,\n+                                                               BLangExpression conditionalArg) {\n+        BLangDynamicParamExpr dymaicExpression = new BLangDynamicParamExpr();\n+        dymaicExpression.condition = condition;\n+        dymaicExpression.conditionalArgument = conditionalArg;\n+        return dymaicExpression;\n+    }\n+\n+    private BLangTernaryExpr createTernaryExprNode(BType type, BLangExpression expr, BLangExpression thenExpr,\n+                                                   BLangExpression elseExpr, Location pos) {\n+        BLangTernaryExpr ternaryExpr = (BLangTernaryExpr) TreeBuilder.createTernaryExpressionNode();\n+        ternaryExpr.pos = pos;\n+        ternaryExpr.elseExpr = elseExpr;\n+        ternaryExpr.thenExpr = thenExpr;\n+        ternaryExpr.expr = expr;\n+        ternaryExpr.type = type;\n+        return ternaryExpr;\n+    }\n+\n+    private BLangIndexBasedAccess createMemberAccessExprNode(BType type, BLangExpression expr,\n+                                                             BLangExpression indexExpr, Location pos) {\n+        BLangIndexBasedAccess memberAccessExpr = (BLangIndexBasedAccess) TreeBuilder.createIndexBasedAccessNode();\n+        memberAccessExpr.pos = pos;\n+        memberAccessExpr.expr = expr;\n+        memberAccessExpr.indexExpr = indexExpr;\n+        memberAccessExpr.type = type;\n+        return memberAccessExpr;\n+    }\n+\n+    private BLangExpression createIgnoreExprNode(BType type) {\n+        BLangExpression ignoreExpr = new BLangIgnoreExpr();\n+        ignoreExpr.type = type;\n+        return ignoreExpr;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk2ODY1Ng=="}, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMjQ2OTMwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMzo0NDoyM1rOIW-1fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQyMTowNjowMVrOIXTONQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk2OTA4NA==", "bodyText": "When moving this to ASTBuilderUtil shall we also create this via TreeBuilder like we do for other nodes?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560969084", "createdAt": "2021-01-20T13:44:23Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -7385,6 +7417,41 @@ private void reorderNamedArgs(BLangInvocation iExpr, BInvokableSymbol invokableS\n         iExpr.requiredArgs = args;\n     }\n \n+    private BLangDynamicParamExpr createDynamicParamExpression(BLangExpression condition,\n+                                                               BLangExpression conditionalArg) {\n+        BLangDynamicParamExpr dymaicExpression = new BLangDynamicParamExpr();\n+        dymaicExpression.condition = condition;\n+        dymaicExpression.conditionalArgument = conditionalArg;\n+        return dymaicExpression;\n+    }\n+\n+    private BLangTernaryExpr createTernaryExprNode(BType type, BLangExpression expr, BLangExpression thenExpr,\n+                                                   BLangExpression elseExpr, Location pos) {\n+        BLangTernaryExpr ternaryExpr = (BLangTernaryExpr) TreeBuilder.createTernaryExpressionNode();\n+        ternaryExpr.pos = pos;\n+        ternaryExpr.elseExpr = elseExpr;\n+        ternaryExpr.thenExpr = thenExpr;\n+        ternaryExpr.expr = expr;\n+        ternaryExpr.type = type;\n+        return ternaryExpr;\n+    }\n+\n+    private BLangIndexBasedAccess createMemberAccessExprNode(BType type, BLangExpression expr,\n+                                                             BLangExpression indexExpr, Location pos) {\n+        BLangIndexBasedAccess memberAccessExpr = (BLangIndexBasedAccess) TreeBuilder.createIndexBasedAccessNode();\n+        memberAccessExpr.pos = pos;\n+        memberAccessExpr.expr = expr;\n+        memberAccessExpr.indexExpr = indexExpr;\n+        memberAccessExpr.type = type;\n+        return memberAccessExpr;\n+    }\n+\n+    private BLangExpression createIgnoreExprNode(BType type) {\n+        BLangExpression ignoreExpr = new BLangIgnoreExpr();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTMwMzA5Mw==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561303093", "createdAt": "2021-01-20T21:06:01Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -7385,6 +7417,41 @@ private void reorderNamedArgs(BLangInvocation iExpr, BInvokableSymbol invokableS\n         iExpr.requiredArgs = args;\n     }\n \n+    private BLangDynamicParamExpr createDynamicParamExpression(BLangExpression condition,\n+                                                               BLangExpression conditionalArg) {\n+        BLangDynamicParamExpr dymaicExpression = new BLangDynamicParamExpr();\n+        dymaicExpression.condition = condition;\n+        dymaicExpression.conditionalArgument = conditionalArg;\n+        return dymaicExpression;\n+    }\n+\n+    private BLangTernaryExpr createTernaryExprNode(BType type, BLangExpression expr, BLangExpression thenExpr,\n+                                                   BLangExpression elseExpr, Location pos) {\n+        BLangTernaryExpr ternaryExpr = (BLangTernaryExpr) TreeBuilder.createTernaryExpressionNode();\n+        ternaryExpr.pos = pos;\n+        ternaryExpr.elseExpr = elseExpr;\n+        ternaryExpr.thenExpr = thenExpr;\n+        ternaryExpr.expr = expr;\n+        ternaryExpr.type = type;\n+        return ternaryExpr;\n+    }\n+\n+    private BLangIndexBasedAccess createMemberAccessExprNode(BType type, BLangExpression expr,\n+                                                             BLangExpression indexExpr, Location pos) {\n+        BLangIndexBasedAccess memberAccessExpr = (BLangIndexBasedAccess) TreeBuilder.createIndexBasedAccessNode();\n+        memberAccessExpr.pos = pos;\n+        memberAccessExpr.expr = expr;\n+        memberAccessExpr.indexExpr = indexExpr;\n+        memberAccessExpr.type = type;\n+        return memberAccessExpr;\n+    }\n+\n+    private BLangExpression createIgnoreExprNode(BType type) {\n+        BLangExpression ignoreExpr = new BLangIgnoreExpr();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk2OTA4NA=="}, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMjYzMDIxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxNDoxOToxN1rOIXAYaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQyMTowMjowM1rOIXTF9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk5NDQwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (requiredParams.contains(nonRestParam)) {\n          \n          \n            \n                                fieldSymbol = new BVarSymbol(Flags.asMask(new HashSet<Flag>() {{\n          \n          \n            \n                                    add(Flag.REQUIRED);\n          \n          \n            \n                                }}), paramName, pkgID, paramType, recordSymbol, null, VIRTUAL);\n          \n          \n            \n                            } else {\n          \n          \n            \n                                fieldSymbol = new BVarSymbol(Flags.asMask(new HashSet<Flag>() {{\n          \n          \n            \n                                    add(Flag.OPTIONAL);\n          \n          \n            \n                                }}), paramName, pkgID, paramType, recordSymbol, null, VIRTUAL);\n          \n          \n            \n                            }\n          \n          \n            \n                            boolean required = requiredParams.contains(nonRestParam);\n          \n          \n            \n                            fieldSymbol = new BVarSymbol(Flags.asMask(new HashSet<Flag>() {{\n          \n          \n            \n                                add(required ? Flag.REQUIRED : Flag.OPTIONAL);\n          \n          \n            \n                            }}), paramName, pkgID, paramType, recordSymbol, null, VIRTUAL);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560994409", "createdAt": "2021-01-20T14:19:17Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -5556,25 +5556,44 @@ private BType checkInvocationArgs(BLangInvocation iExpr, List<BType> paramTypes,\n             return symTable.semanticError;\n         }\n \n-        BType restType = restParam == null ? null : restParam.type;\n+        BType listTypeRestArg = restParam == null ? null : restParam.type;\n+        BRecordType mappingTypeRestArg = null;\n \n-        if (nonRestArgs.size() < nonRestParams.size() && vararg != null) {\n+        if (vararg != null && nonRestArgs.size() < nonRestParams.size()) {\n             // We only reach here if there are no named args and there is a vararg, and part of the non-rest params\n             // are provided via the vararg.\n-            // Create a new tuple type as the expected rest param type with expected required/defaultable param types\n-            // as members.\n+            // Create a new tuple type and a closed record type as the expected rest param type with expected\n+            // required/defaultable paramtypes as members.\n+            PackageID pkgID = env.enclPkg.symbol.pkgID;\n             List<BType> tupleMemberTypes = new ArrayList<>();\n+            BRecordTypeSymbol recordSymbol = createRecordTypeSymbol(pkgID, null, VIRTUAL);\n+            mappingTypeRestArg = new BRecordType(recordSymbol);\n+            LinkedHashMap<String, BField> fields = new LinkedHashMap<>();\n             BType tupleRestType = null;\n+            BVarSymbol fieldSymbol;\n \n             for (int j = nonRestArgs.size(); j < nonRestParams.size(); j++) {\n-                tupleMemberTypes.add(paramTypes.get(j));\n+                BType paramType = paramTypes.get(j);\n+                BVarSymbol nonRestParam = nonRestParams.get(j);\n+                Name paramName = nonRestParam.name;\n+                tupleMemberTypes.add(paramType);\n+                if (requiredParams.contains(nonRestParam)) {\n+                    fieldSymbol = new BVarSymbol(Flags.asMask(new HashSet<Flag>() {{\n+                        add(Flag.REQUIRED);\n+                    }}), paramName, pkgID, paramType, recordSymbol, null, VIRTUAL);\n+                } else {\n+                    fieldSymbol = new BVarSymbol(Flags.asMask(new HashSet<Flag>() {{\n+                        add(Flag.OPTIONAL);\n+                    }}), paramName, pkgID, paramType, recordSymbol, null, VIRTUAL);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTMwMDk4MQ==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561300981", "createdAt": "2021-01-20T21:02:03Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -5556,25 +5556,44 @@ private BType checkInvocationArgs(BLangInvocation iExpr, List<BType> paramTypes,\n             return symTable.semanticError;\n         }\n \n-        BType restType = restParam == null ? null : restParam.type;\n+        BType listTypeRestArg = restParam == null ? null : restParam.type;\n+        BRecordType mappingTypeRestArg = null;\n \n-        if (nonRestArgs.size() < nonRestParams.size() && vararg != null) {\n+        if (vararg != null && nonRestArgs.size() < nonRestParams.size()) {\n             // We only reach here if there are no named args and there is a vararg, and part of the non-rest params\n             // are provided via the vararg.\n-            // Create a new tuple type as the expected rest param type with expected required/defaultable param types\n-            // as members.\n+            // Create a new tuple type and a closed record type as the expected rest param type with expected\n+            // required/defaultable paramtypes as members.\n+            PackageID pkgID = env.enclPkg.symbol.pkgID;\n             List<BType> tupleMemberTypes = new ArrayList<>();\n+            BRecordTypeSymbol recordSymbol = createRecordTypeSymbol(pkgID, null, VIRTUAL);\n+            mappingTypeRestArg = new BRecordType(recordSymbol);\n+            LinkedHashMap<String, BField> fields = new LinkedHashMap<>();\n             BType tupleRestType = null;\n+            BVarSymbol fieldSymbol;\n \n             for (int j = nonRestArgs.size(); j < nonRestParams.size(); j++) {\n-                tupleMemberTypes.add(paramTypes.get(j));\n+                BType paramType = paramTypes.get(j);\n+                BVarSymbol nonRestParam = nonRestParams.get(j);\n+                Name paramName = nonRestParam.name;\n+                tupleMemberTypes.add(paramType);\n+                if (requiredParams.contains(nonRestParam)) {\n+                    fieldSymbol = new BVarSymbol(Flags.asMask(new HashSet<Flag>() {{\n+                        add(Flag.REQUIRED);\n+                    }}), paramName, pkgID, paramType, recordSymbol, null, VIRTUAL);\n+                } else {\n+                    fieldSymbol = new BVarSymbol(Flags.asMask(new HashSet<Flag>() {{\n+                        add(Flag.OPTIONAL);\n+                    }}), paramName, pkgID, paramType, recordSymbol, null, VIRTUAL);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk5NDQwOQ=="}, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMjY2NjYwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxNDoyNjo1OVrOIXAu1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxNDoyNjo1OVrOIXAu1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAwMDE0OA==", "bodyText": "Field access is desugared into member access. Probably better to desugar directly to a member access.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561000148", "createdAt": "2021-01-20T14:26:59Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -7368,15 +7383,32 @@ private void reorderNamedArgs(BLangInvocation iExpr, BInvokableSymbol invokableS\n             } else {\n                 // If a vararg is provided, no parameter defaults are added and no named args are specified.\n                 // Thus, any missing args should come from the vararg.\n-                BLangIndexBasedAccess memberAccessExpr =\n-                        (BLangIndexBasedAccess) TreeBuilder.createIndexBasedAccessNode();\n-                memberAccessExpr.pos = varargRef.pos;\n-                memberAccessExpr.expr = varargRef;\n-                memberAccessExpr.indexExpr = rewriteExpr(createIntLiteral(varargIndex));\n-                memberAccessExpr.type = tupleTypedVararg ? ((BTupleType) varargType).tupleTypes.get(varargIndex) :\n-                        ((BArrayType) varargType).eType;\n-                varargIndex++;\n-                args.add(addConversionExprIfRequired(memberAccessExpr, param.type));\n+                BLangExpression indexExpr;\n+                if (varargRef.type.tag == TypeTags.RECORD) {\n+                    if (param.defaultableParam) {\n+                        BLangInvocation hasKeyInvocation = createLangLibInvocationNode(HAS_KEY, varargRef,\n+                                List.of(createStringLiteral(param.pos, param.name.value)), null, varargRef.pos);\n+                        indexExpr = rewriteExpr(createStringLiteral(param.pos, param.name.value));\n+                        BLangIndexBasedAccess memberAccessExpr = createMemberAccessExprNode(param.type,\n+                                varargRef, indexExpr, varargRef.pos);\n+                        BLangExpression ignoreExpr = createIgnoreExprNode(param.type);\n+                        BLangTernaryExpr ternaryExpr = createTernaryExprNode(param.type, hasKeyInvocation,\n+                                memberAccessExpr, ignoreExpr, varargRef.pos);\n+                        args.add(createDynamicParamExpression(hasKeyInvocation, ternaryExpr));\n+                    } else {\n+                        BLangFieldBasedAccess fieldBasedAccessExpression = ASTBuilderUtil.createFieldAccessExpr(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMjcwMDc3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxNDozMzozMlrOIXBD5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQyMTozMDo0NlrOIXUPmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAwNTU0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    BLangDynamicParamExpr dymaicExpression = new BLangDynamicParamExpr();\n          \n          \n            \n                    BLangDynamicParamExpr dynamicExpression = new BLangDynamicParamExpr();", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561005543", "createdAt": "2021-01-20T14:33:32Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -7385,6 +7417,41 @@ private void reorderNamedArgs(BLangInvocation iExpr, BInvokableSymbol invokableS\n         iExpr.requiredArgs = args;\n     }\n \n+    private BLangDynamicParamExpr createDynamicParamExpression(BLangExpression condition,\n+                                                               BLangExpression conditionalArg) {\n+        BLangDynamicParamExpr dymaicExpression = new BLangDynamicParamExpr();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTMxOTgzMg==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561319832", "createdAt": "2021-01-20T21:30:46Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -7385,6 +7417,41 @@ private void reorderNamedArgs(BLangInvocation iExpr, BInvokableSymbol invokableS\n         iExpr.requiredArgs = args;\n     }\n \n+    private BLangDynamicParamExpr createDynamicParamExpression(BLangExpression condition,\n+                                                               BLangExpression conditionalArg) {\n+        BLangDynamicParamExpr dymaicExpression = new BLangDynamicParamExpr();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAwNTU0Mw=="}, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMjcyMzM3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxNDozODowN1rOIXBR2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQyMjozMzo0NFrOIXWLZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAwOTExNQ==", "bodyText": "This is used only within some of the if/else blocks, and doesn't have to be a common variable, right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561009115", "createdAt": "2021-01-20T14:38:07Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -7368,15 +7383,32 @@ private void reorderNamedArgs(BLangInvocation iExpr, BInvokableSymbol invokableS\n             } else {\n                 // If a vararg is provided, no parameter defaults are added and no named args are specified.\n                 // Thus, any missing args should come from the vararg.\n-                BLangIndexBasedAccess memberAccessExpr =\n-                        (BLangIndexBasedAccess) TreeBuilder.createIndexBasedAccessNode();\n-                memberAccessExpr.pos = varargRef.pos;\n-                memberAccessExpr.expr = varargRef;\n-                memberAccessExpr.indexExpr = rewriteExpr(createIntLiteral(varargIndex));\n-                memberAccessExpr.type = tupleTypedVararg ? ((BTupleType) varargType).tupleTypes.get(varargIndex) :\n-                        ((BArrayType) varargType).eType;\n-                varargIndex++;\n-                args.add(addConversionExprIfRequired(memberAccessExpr, param.type));\n+                BLangExpression indexExpr;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTM1MTUyNg==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561351526", "createdAt": "2021-01-20T22:33:44Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -7368,15 +7383,32 @@ private void reorderNamedArgs(BLangInvocation iExpr, BInvokableSymbol invokableS\n             } else {\n                 // If a vararg is provided, no parameter defaults are added and no named args are specified.\n                 // Thus, any missing args should come from the vararg.\n-                BLangIndexBasedAccess memberAccessExpr =\n-                        (BLangIndexBasedAccess) TreeBuilder.createIndexBasedAccessNode();\n-                memberAccessExpr.pos = varargRef.pos;\n-                memberAccessExpr.expr = varargRef;\n-                memberAccessExpr.indexExpr = rewriteExpr(createIntLiteral(varargIndex));\n-                memberAccessExpr.type = tupleTypedVararg ? ((BTupleType) varargType).tupleTypes.get(varargIndex) :\n-                        ((BArrayType) varargType).eType;\n-                varargIndex++;\n-                args.add(addConversionExprIfRequired(memberAccessExpr, param.type));\n+                BLangExpression indexExpr;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAwOTExNQ=="}, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMjczMTAwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangDynamicParamExpr.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxNDozOTozNFrOIXBWkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQyMTowMTo0MFrOIXTFPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAxMDMyMg==", "bodyText": "Shouldn't this and DynamicParamNode be BLangDynamicArgExpr and DynamicArgNode respectively? This is to represent the argument, right? Not the params?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561010322", "createdAt": "2021-01-20T14:39:34Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangDynamicParamExpr.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.expressions;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.expressions.DynamicParamNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+\n+/**\n+ * Represents named arguments that should evaluate at runtime.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BLangDynamicParamExpr extends BLangExpression implements DynamicParamNode {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTMwMDc5Nw==", "bodyText": "Yes. Changed it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561300797", "createdAt": "2021-01-20T21:01:40Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangDynamicParamExpr.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.expressions;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.expressions.DynamicParamNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+\n+/**\n+ * Represents named arguments that should evaluate at runtime.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BLangDynamicParamExpr extends BLangExpression implements DynamicParamNode {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAxMDMyMg=="}, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMjc4MzUwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BIRArgument.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxNDo0OTo1MVrOIXB3NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQyMTowMToyNlrOIXTE1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAxODY3Ng==", "bodyText": "This isn't quite user provided, right? Should we just call this condition?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561018676", "createdAt": "2021-01-20T14:49:51Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BIRArgument.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.bir.model;\n+\n+/**\n+ * {@code BIRArgument} represents an argument in an instruction.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BIRArgument extends BIROperand {\n+\n+    public ArgumentState argState;\n+    public BIROperand userProvidedCondition;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTMwMDY5Mg==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561300692", "createdAt": "2021-01-20T21:01:26Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BIRArgument.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.bir.model;\n+\n+/**\n+ * {@code BIRArgument} represents an argument in an instruction.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BIRArgument extends BIROperand {\n+\n+    public ArgumentState argState;\n+    public BIROperand userProvidedCondition;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAxODY3Ng=="}, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMjc4NTI4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BIRArgument.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxNDo1MDoxNFrOIXB4Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQyMTowMTowOFrOIXTETw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAxODk4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (this == other) {\n          \n          \n            \n                        return true;\n          \n          \n            \n                    } else {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n                    return this == other;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561018982", "createdAt": "2021-01-20T14:50:14Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BIRArgument.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.bir.model;\n+\n+/**\n+ * {@code BIRArgument} represents an argument in an instruction.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BIRArgument extends BIROperand {\n+\n+    public ArgumentState argState;\n+    public BIROperand userProvidedCondition;\n+\n+    public BIRArgument(ArgumentState argState, BIRVariableDcl argVar) {\n+        super(argVar);\n+        this.argState = argState;\n+    }\n+\n+    public BIRArgument(ArgumentState argState, BIRVariableDcl argVar, BIROperand userProvidedCondition) {\n+        super(argVar);\n+        this.argState = argState;\n+        this.userProvidedCondition = userProvidedCondition;\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        if (this == other) {\n+            return true;\n+        } else {\n+            return false;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTMwMDU1OQ==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561300559", "createdAt": "2021-01-20T21:01:08Z", "author": {"login": "chiranSachintha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BIRArgument.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.bir.model;\n+\n+/**\n+ * {@code BIRArgument} represents an argument in an instruction.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BIRArgument extends BIROperand {\n+\n+    public ArgumentState argState;\n+    public BIROperand userProvidedCondition;\n+\n+    public BIRArgument(ArgumentState argState, BIRVariableDcl argVar) {\n+        super(argVar);\n+        this.argState = argState;\n+    }\n+\n+    public BIRArgument(ArgumentState argState, BIRVariableDcl argVar, BIROperand userProvidedCondition) {\n+        super(argVar);\n+        this.argState = argState;\n+        this.userProvidedCondition = userProvidedCondition;\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        if (this == other) {\n+            return true;\n+        } else {\n+            return false;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAxODk4Mg=="}, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzNjY5NTA4OnYy", "diffSide": "LEFT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/record/MapToRecordAssignabilityTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwNzozMjo1NFrOIXorqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwNzozMjo1NFrOIXorqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY1NDY5Nw==", "bodyText": "We can rewrite the testComplexSubtyping function so that this still fails, right?\nOn a separate note, if it wasn't possible to update the test to test the same concept, we should remove the relevant bal code too.\nPlease check wherever applicable.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561654697", "createdAt": "2021-01-21T07:32:54Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/record/MapToRecordAssignabilityTest.java", "diffHunk": "@@ -86,13 +84,6 @@ public void testSubtyping() {\n         BRunUtil.invoke(compileResult, \"testSubtyping\");\n     }\n \n-    @Test(expectedExceptions = BLangRuntimeException.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9002b8a7d39451578e038ad402181a87069a6c51"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzNjc4MTU1OnYy", "diffSide": "LEFT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/record/MapToRecordAssignabilityTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwNzo1OToyMVrOIXpd3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwNzo1OToyMVrOIXpd3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY2NzU1MQ==", "bodyText": "Same comment re: updating/removing the test.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561667551", "createdAt": "2021-01-21T07:59:21Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/record/MapToRecordAssignabilityTest.java", "diffHunk": "@@ -55,8 +55,6 @@ public void testNegative() {\n         validateError(result, indx++,\n                       \"incompatible types: expected 'record {| string a; string...; |}', found 'map<string>'\", 29, 12);\n         validateError(result, indx++, \"incompatible types: expected 'record {| Bar...; |}', found 'map<Foo>'\", 52, 13);\n-        validateError(result, indx++, \"incompatible types: expected 'record {| Baz x?; Foo...; |}', found 'map<Bar>'\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9002b8a7d39451578e038ad402181a87069a6c51"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzNjc4NzE3OnYy", "diffSide": "LEFT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/record/ClosedRecordEquivalencyRulesTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwODowMDo0OFrOIXphBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwODowMDo0OFrOIXphBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY2ODM1Nw==", "bodyText": "We can remove the source from the bal test file and make them positive tests.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561668357", "createdAt": "2021-01-21T08:00:48Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/record/ClosedRecordEquivalencyRulesTest.java", "diffHunk": "@@ -50,8 +50,6 @@ public void testClosedRecordNegatives() {\n         int i = 0;\n         validateError(negative, i++, \"incompatible types: expected 'AnotherPerson', found 'Person1'\", 28, 24);\n         validateError(negative, i++, \"incompatible types: expected 'AnotherPerson', found 'Person2'\", 38, 24);\n-        validateError(negative, i++, \"incompatible types: expected 'AnotherPerson3', found 'Person1'\", 49, 25);\n-        validateError(negative, i++, \"incompatible types: expected 'AnotherPerson3', found 'Person1'\", 55, 25);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9002b8a7d39451578e038ad402181a87069a6c51"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzNjgzMTMyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/NodeKind.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwODoxMjo0OFrOIXp6Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwODoxMjo0OFrOIXp6Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY3NDc5OA==", "bodyText": "We need to rename this also.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                DYNAMIC_PARAM_EXPR,\n          \n          \n            \n                DYNAMIC_ARG_EXPR,", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561674798", "createdAt": "2021-01-21T08:12:48Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/NodeKind.java", "diffHunk": "@@ -130,6 +130,7 @@\n     TRANSACTIONAL_EXPRESSION,\n     OBJECT_CTOR_EXPRESSION,\n     ERROR_CONSTRUCTOR_EXPRESSION,\n+    DYNAMIC_PARAM_EXPR,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9002b8a7d39451578e038ad402181a87069a6c51"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzNjkyMDcyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwODozNjowMlrOIXqwBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwODozNjowMlrOIXqwBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY4ODU4Mw==", "bodyText": "We should use the ASTBuilderUtil method here.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561688583", "createdAt": "2021-01-21T08:36:02Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -7214,6 +7223,12 @@ private void reorderArguments(BLangInvocation iExpr) {\n             // required/defaultable parameter are added to the new array.\n             BLangRestArgsExpression restArgsExpression = (BLangRestArgsExpression) restArgs.remove(0);\n             BArrayType restParamType = (BArrayType) invokableSymbol.restParam.type;\n+            if (restArgsExpression.type.tag == TypeTags.RECORD) {\n+                BLangExpression expr = new BLangIgnoreExpr();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9002b8a7d39451578e038ad402181a87069a6c51"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzNjkyNjkyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwODozNzoyOFrOIXqzvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwODozNzoyOFrOIXqzvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY4OTUzNA==", "bodyText": "Do we need to add this at all? Can't we just return?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561689534", "createdAt": "2021-01-21T08:37:28Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -7214,6 +7223,12 @@ private void reorderArguments(BLangInvocation iExpr) {\n             // required/defaultable parameter are added to the new array.\n             BLangRestArgsExpression restArgsExpression = (BLangRestArgsExpression) restArgs.remove(0);\n             BArrayType restParamType = (BArrayType) invokableSymbol.restParam.type;\n+            if (restArgsExpression.type.tag == TypeTags.RECORD) {\n+                BLangExpression expr = new BLangIgnoreExpr();\n+                expr.type = restParamType;\n+                restArgs.add(expr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9002b8a7d39451578e038ad402181a87069a6c51"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzNzI0MzkzOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/FunctionsWithRestArguments.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwOTo1MzowOFrOIXt3Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwOTo1MzowOFrOIXt3Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTczOTU5MA==", "bodyText": "Let's also add some taint analysis tests.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561739590", "createdAt": "2021-01-21T09:53:08Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/FunctionsWithRestArguments.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.ballerinalang.test.functions;\n+\n+import org.ballerinalang.test.BAssertUtil;\n+import org.ballerinalang.test.BCompileUtil;\n+import org.ballerinalang.test.BRunUtil;\n+import org.ballerinalang.test.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test Function Arguments with mapping type rest Expression.\n+ *\n+ * @since 2.0.0\n+ */\n+public class FunctionsWithRestArguments {\n+\n+    private CompileResult result;\n+\n+    @BeforeClass\n+    public void setup() {\n+        result = BCompileUtil.compile(\"test-src/functions/functions_with_mapping_type_rest_argument.bal\");\n+    }\n+\n+    @Test(description = \"Test functions arguments with function calls as default value\")\n+    public void testFunctionWithMappingTypeRestArg() {\n+        BRunUtil.invoke(result, \"testFunctionWithMappingTypeRestArg\");\n+    }\n+\n+    @Test\n+    public void testFuncSignatureSemanticsNegative() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9002b8a7d39451578e038ad402181a87069a6c51"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzNzI1NDU1OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/functions/functions_with_mapping_type_rest_argument.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwOTo1NToyOVrOIXt9jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwOTo1NToyOVrOIXt9jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTc0MTE5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Foo f1 = {c:20, d:15};\n          \n          \n            \n                Foo f1 = {c: 20, d: 15};\n          \n      \n    \n    \n  \n\nPlease fix everywhere in this file.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561741197", "createdAt": "2021-01-21T09:55:29Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/functions/functions_with_mapping_type_rest_argument.bal", "diffHunk": "@@ -0,0 +1,82 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+type Foo record {|\n+    int c = 10;\n+    int d?;\n+|};\n+\n+type Bar record {|\n+    int a;\n+    int b;\n+    int c = 10;\n+    int d;\n+|};\n+\n+type Baz record {|\n+    int c;\n+|};\n+\n+type Val record{|\n+|};\n+\n+function getSum(int a, int b, int c, int d = 1) returns int {\n+    return a + b + c + d;\n+}\n+\n+function getAvg(int a, int b, int c, int d) returns int {\n+    return (a + b + c + d)/4;\n+}\n+\n+function getTotal(int a, int b, int c, int... m) returns int {\n+    return a + b + c;\n+}\n+\n+function testFunctionWithMappingTypeRestArg() {\n+    Foo f = {};\n+    Foo f1 = {c:20, d:15};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9002b8a7d39451578e038ad402181a87069a6c51"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2786, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}