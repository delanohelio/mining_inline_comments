{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2ODEwOTY5", "number": 22373, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo1MzoxMFrODtf3UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo1MzoxMFrODtf3UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDM0NTc2OnYy", "diffSide": "RIGHT", "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Slice.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo1MzoxMFrOF-9HbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjowMzo1NlrOF-9cSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1NzM1Nw==", "bodyText": "Shouldn't the new type have the same flags as the original type?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22373#discussion_r401557357", "createdAt": "2020-04-01T11:53:10Z", "author": {"login": "pubudu91"}, "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Slice.java", "diffHunk": "@@ -70,18 +73,24 @@ public static ArrayValue slice(Strand strand, ArrayValue arr, long startIndex, l\n \n         BType arrType = arr.getType();\n         ArrayValue slicedArr;\n-        int elemTypeTag;\n \n         switch (arrType.getTag()) {\n             case TypeTags.ARRAY_TAG:\n                 slicedArr = ((ArrayValueImpl) arr).slice(startIndex, endIndex);\n                 break;\n             case TypeTags.TUPLE_TAG:\n                 BTupleType tupleType = (BTupleType) arrType;\n-                BUnionType unionType = new BUnionType(tupleType.getTupleTypes(), tupleType.getTypeFlags());\n+\n+                List<BType> memTypes = new ArrayList<>(tupleType.getTupleTypes());\n+\n+                BType restType = tupleType.getRestType();\n+                if (restType != null) {\n+                    memTypes.add(restType);\n+                }\n+\n+                BUnionType unionType = new BUnionType(memTypes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fa8dfc8630d383090a1b4fc70e9d2c77ce44230"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2MjY5Ng==", "bodyText": "Not really. For the array type maybe we could use the same but not for the union type.\nThe flags are NILABLE, ANYDATA, PURE.\nConsider the tuple type [int, string?, error...]. The is PURE and ANYDATA.\nThe union created for this is  int|string|error?. This is NILABLE and PURE.\nThis BUnionType constructor computes the new flags - https://github.com/ballerina-platform/ballerina-lang/blob/ballerina-1.2.x/bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BUnionType.java#L56.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22373#discussion_r401562696", "createdAt": "2020-04-01T12:03:56Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Slice.java", "diffHunk": "@@ -70,18 +73,24 @@ public static ArrayValue slice(Strand strand, ArrayValue arr, long startIndex, l\n \n         BType arrType = arr.getType();\n         ArrayValue slicedArr;\n-        int elemTypeTag;\n \n         switch (arrType.getTag()) {\n             case TypeTags.ARRAY_TAG:\n                 slicedArr = ((ArrayValueImpl) arr).slice(startIndex, endIndex);\n                 break;\n             case TypeTags.TUPLE_TAG:\n                 BTupleType tupleType = (BTupleType) arrType;\n-                BUnionType unionType = new BUnionType(tupleType.getTupleTypes(), tupleType.getTypeFlags());\n+\n+                List<BType> memTypes = new ArrayList<>(tupleType.getTupleTypes());\n+\n+                BType restType = tupleType.getRestType();\n+                if (restType != null) {\n+                    memTypes.add(restType);\n+                }\n+\n+                BUnionType unionType = new BUnionType(memTypes);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1NzM1Nw=="}, "originalCommit": {"oid": "9fa8dfc8630d383090a1b4fc70e9d2c77ce44230"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4486, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}