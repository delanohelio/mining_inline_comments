{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMzk1NTE5", "number": 22548, "reviewThreads": {"totalCount": 81, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxNTowNFrODwZkPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozMjoxMlrODw6_wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc3MTE2OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxNTowNFrOGDYJWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0NDo1NVrOGEEBJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NDUyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The generated signature or `crypto:Error` if private key is invalid\n          \n          \n            \n            # + return - The generated signature or `crypto:Error` if private key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406194520", "createdAt": "2020-04-09T13:15:04Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMzMxNg==", "bodyText": "Corrected.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406913316", "createdAt": "2020-04-10T19:44:55Z", "author": {"login": "Maninda"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NDUyMA=="}, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc3MjA1OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxNToyMVrOGDYJ5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0NTowNFrOGEEBVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NDY2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The generated signature or `crypto:Error` if private key is invalid\n          \n          \n            \n            # + return - The generated signature or `crypto:Error` if private key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406194662", "createdAt": "2020-04-09T13:15:21Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMzM2Ng==", "bodyText": "Corrected.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406913366", "createdAt": "2020-04-10T19:45:04Z", "author": {"login": "Maninda"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NDY2Mg=="}, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc3MjUxOnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxNToyOFrOGDYKNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0NToxNVrOGEEBlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NDc0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The generated signature or `crypto:Error` if private key is invalid\n          \n          \n            \n            # + return - The generated signature or `crypto:Error` if private key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406194740", "createdAt": "2020-04-09T13:15:28Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMzQzMA==", "bodyText": "Corrected.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406913430", "createdAt": "2020-04-10T19:45:15Z", "author": {"login": "Maninda"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NDc0MA=="}, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc3MzA3OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxNTozNlrOGDYKiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0NToyM1rOGEEBww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NDgyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The generated signature or `crypto:Error` if private key is invalid\n          \n          \n            \n            # + return - The generated signature or `crypto:Error` if private key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406194825", "createdAt": "2020-04-09T13:15:36Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey); ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or `crypto:Error` if private key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMzQ3NQ==", "bodyText": "Corrected.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406913475", "createdAt": "2020-04-10T19:45:23Z", "author": {"login": "Maninda"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey); ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or `crypto:Error` if private key is invalid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NDgyNQ=="}, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc3MzcwOnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxNTo0NFrOGDYK7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0NTozMlrOGEEB9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NDkyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The generated signature or `crypto:Error` if private key is invalid\n          \n          \n            \n            # + return - The generated signature or `crypto:Error` if private key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406194924", "createdAt": "2020-04-09T13:15:44Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey); ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMzUyNg==", "bodyText": "Corrected.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406913526", "createdAt": "2020-04-10T19:45:32Z", "author": {"login": "Maninda"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey); ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NDkyNA=="}, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc3NDI3OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxNTo1NVrOGDYLUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0NTo1MFrOGEECUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTAyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Validity of the signature or `crypto:Error` if public key is invalid\n          \n          \n            \n            # + return - Validity of the signature or `crypto:Error` if public key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406195027", "createdAt": "2020-04-09T13:15:55Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey); ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMzYxOQ==", "bodyText": "Corrected.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406913619", "createdAt": "2020-04-10T19:45:50Z", "author": {"login": "Maninda"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey); ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTAyNw=="}, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc3NDY0OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxNjowMlrOGDYLmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0NTo1OFrOGEECjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTA5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Validity of the signature or `crypto:Error` if public key is invalid\n          \n          \n            \n            # + return - Validity of the signature or `crypto:Error` if public key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406195096", "createdAt": "2020-04-09T13:16:02Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey); ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha1Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMzY3OQ==", "bodyText": "Corrected.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406913679", "createdAt": "2020-04-10T19:45:58Z", "author": {"login": "Maninda"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey); ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha1Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTA5Ng=="}, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 219}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc3NTEwOnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxNjowOVrOGDYL6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0NjoxMFrOGEEC0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTE3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Validity of the signature or `crypto:Error` if public key is invalid\n          \n          \n            \n            # + return - Validity of the signature or `crypto:Error` if public key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406195177", "createdAt": "2020-04-09T13:16:09Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey); ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha1Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaSha1Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                        returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha1Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA256 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha256Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMzc0Nw==", "bodyText": "Corrected.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406913747", "createdAt": "2020-04-10T19:46:10Z", "author": {"login": "Maninda"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey); ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha1Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaSha1Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                        returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha1Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA256 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha256Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTE3Nw=="}, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 233}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc3NTU1OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxNjoxN1rOGDYMKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0NjoxOVrOGEEC-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTI0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Validity of the signature or `crypto:Error` if public key is invalid\n          \n          \n            \n            # + return - Validity of the signature or `crypto:Error` if public key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406195241", "createdAt": "2020-04-09T13:16:17Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey); ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha1Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaSha1Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                        returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha1Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA256 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha256Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaSha256Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha256Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA384 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha384Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 247}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMzc4Nw==", "bodyText": "Corrected.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406913787", "createdAt": "2020-04-10T19:46:19Z", "author": {"login": "Maninda"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey); ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha1Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaSha1Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                        returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha1Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA256 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha256Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaSha256Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha256Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA384 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha384Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTI0MQ=="}, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 247}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc3NTk2OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxNjoyM1rOGDYMaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0NjoyOFrOGEEDKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTMwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Validity of the signature or `crypto:Error` if public key is invalid\n          \n          \n            \n            # + return - Validity of the signature or `crypto:Error` if public key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406195304", "createdAt": "2020-04-09T13:16:23Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey); ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha1Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaSha1Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                        returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha1Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA256 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha256Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaSha256Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha256Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA384 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha384Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaSha384Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha384Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA512 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha512Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 261}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMzgzMg==", "bodyText": "Corrected.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406913832", "createdAt": "2020-04-10T19:46:28Z", "author": {"login": "Maninda"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey); ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha1Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaSha1Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                        returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha1Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA256 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha256Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaSha256Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha256Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA384 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha384Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaSha384Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha384Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA512 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha512Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTMwNA=="}, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 261}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc3NjY1OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxNjozM1rOGDYM2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0NjozN1rOGEEDfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTQxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Reference to the private key or `crypto:Error` if private key was unreadable\n          \n          \n            \n            # + return - Reference to the private key or `crypto:Error` if private key was unreadable\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406195419", "createdAt": "2020-04-09T13:16:33Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey); ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha1Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaSha1Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                        returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha1Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA256 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha256Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaSha256Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha256Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA384 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha384Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaSha384Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha384Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA512 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha512Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaSha512Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha512Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Read a private key from the provided PKCS#12 archive file.\n+# ```ballerina crypto:PrivateKey|crypto:Error privateKey = crypto:decodePrivateKey(keyStore, keyAlias, keyPassword); ```\n #\n # + keyStore - Key store or Trust store configurations\n # + keyAlias - Key alias\n # + keyPassword - Key password\n-# + return - Reference to the private key or `Error` if private key was unreadable\n+# + return - Reference to the private key or `crypto:Error` if private key was unreadable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 275}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMzkxNg==", "bodyText": "Corrected.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406913916", "createdAt": "2020-04-10T19:46:37Z", "author": {"login": "Maninda"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey); ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey); ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or `crypto:Error` if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha1Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaSha1Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                        returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha1Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA256 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha256Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaSha256Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha256Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA384 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha384Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaSha384Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha384Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA512 based signature.\n+# ```ballerina boolean|crypto:Error validity = crypto:verifyRsaSha512Signature(data, signature, publicKey); ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or `crypto:Error` if public key is invalid\n public function verifyRsaSha512Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha512Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Read a private key from the provided PKCS#12 archive file.\n+# ```ballerina crypto:PrivateKey|crypto:Error privateKey = crypto:decodePrivateKey(keyStore, keyAlias, keyPassword); ```\n #\n # + keyStore - Key store or Trust store configurations\n # + keyAlias - Key alias\n # + keyPassword - Key password\n-# + return - Reference to the private key or `Error` if private key was unreadable\n+# + return - Reference to the private key or `crypto:Error` if private key was unreadable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTQxOQ=="}, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 275}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc3NzMzOnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxNjo0MVrOGDYNPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0Njo0NlrOGEEDsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTUxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Reference to the public key or `crypto:Error` if private key was unreadable\n          \n          \n            \n            # + return - Reference to the public key or `crypto:Error` if private key was unreadable\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406195519", "createdAt": "2020-04-09T13:16:41Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -345,10 +367,11 @@ function externDecodePrivateKey(KeyStore|TrustStore keyStore, handle keyAlias, h\n } external;\n \n # Read a public key from the provided PKCS#12 archive file.\n+# ```ballerina crypto:PublicKey|crypto:Error publicKey = crypto:decodePublicKey(keyStore, keyAlias); ```\n #\n # + keyStore - Key store or Trust store configurations\n # + keyAlias - Key alias\n-# + return - Reference to the public key or `Error` if private key was unreadable\n+# + return - Reference to the public key or `crypto:Error` if private key was unreadable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 288}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMzk3MQ==", "bodyText": "Corrected.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406913971", "createdAt": "2020-04-10T19:46:46Z", "author": {"login": "Maninda"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -345,10 +367,11 @@ function externDecodePrivateKey(KeyStore|TrustStore keyStore, handle keyAlias, h\n } external;\n \n # Read a public key from the provided PKCS#12 archive file.\n+# ```ballerina crypto:PublicKey|crypto:Error publicKey = crypto:decodePublicKey(keyStore, keyAlias); ```\n #\n # + keyStore - Key store or Trust store configurations\n # + keyAlias - Key alias\n-# + return - Reference to the public key or `Error` if private key was unreadable\n+# + return - Reference to the public key or `crypto:Error` if private key was unreadable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTUxOQ=="}, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 288}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc3Nzg0OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxNjo0OFrOGDYNjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0Njo1M1rOGEED-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTU5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Encrypted data or `crypto:Error` if key is invalid\n          \n          \n            \n            # + return - Encrypted data or `crypto:Error` if key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406195596", "createdAt": "2020-04-09T13:16:48Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -360,11 +383,12 @@ function externDecodePublicKey(KeyStore|TrustStore keyStore, handle keyAlias)\n } external;\n \n # Returns RSA encrypted value for the given data.\n+# ```ballerina byte[]|crypto:Error cipherText = crypto:encryptRsaEcb(cipherText, publicKey); ```\n #\n # + input - The content to be encrypted\n # + key - Private or public key used for encryption\n # + padding - The padding\n-# + return - Encrypted data or `Error` if key is invalid\n+# + return - Encrypted data or `crypto:Error` if key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 302}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNDA0MA==", "bodyText": "Corrected.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406914040", "createdAt": "2020-04-10T19:46:53Z", "author": {"login": "Maninda"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -360,11 +383,12 @@ function externDecodePublicKey(KeyStore|TrustStore keyStore, handle keyAlias)\n } external;\n \n # Returns RSA encrypted value for the given data.\n+# ```ballerina byte[]|crypto:Error cipherText = crypto:encryptRsaEcb(cipherText, publicKey); ```\n #\n # + input - The content to be encrypted\n # + key - Private or public key used for encryption\n # + padding - The padding\n-# + return - Encrypted data or `Error` if key is invalid\n+# + return - Encrypted data or `crypto:Error` if key is invalid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTU5Ng=="}, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 302}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc3ODQxOnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxNjo1NVrOGDYN5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0NzowMVrOGEEEHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTY4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Encrypted data or `crypto:Error` if key is invalid\n          \n          \n            \n            # + return - Encrypted data or `crypto:Error` if key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406195685", "createdAt": "2020-04-09T13:16:55Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -377,12 +401,13 @@ function externEncryptRsaEcb(byte[] input, PrivateKey|PublicKey key, handle padd\n } external;\n \n # Returns AES CBC encrypted value for the given data.\n+# ```ballerina byte[]|crypto:Error cipherText = crypto:encryptAesCbc(cipherText, key, initVector); ```\n #\n # + input - The content to be encrypted\n # + key - Encryption key\n # + iv - Initialization vector\n # + padding - The padding\n-# + return - Encrypted data or `Error` if key is invalid\n+# + return - Encrypted data or `crypto:Error` if key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 317}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNDA3OQ==", "bodyText": "Corrected.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406914079", "createdAt": "2020-04-10T19:47:01Z", "author": {"login": "Maninda"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -377,12 +401,13 @@ function externEncryptRsaEcb(byte[] input, PrivateKey|PublicKey key, handle padd\n } external;\n \n # Returns AES CBC encrypted value for the given data.\n+# ```ballerina byte[]|crypto:Error cipherText = crypto:encryptAesCbc(cipherText, key, initVector); ```\n #\n # + input - The content to be encrypted\n # + key - Encryption key\n # + iv - Initialization vector\n # + padding - The padding\n-# + return - Encrypted data or `Error` if key is invalid\n+# + return - Encrypted data or `crypto:Error` if key is invalid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTY4NQ=="}, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 317}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc3ODgyOnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxNzowM1rOGDYOJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0NzoxMFrOGEEEXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTc1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Encrypted data or `crypto:Error` if key is invalid\n          \n          \n            \n            # + return - Encrypted data or `crypto:Error` if key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406195751", "createdAt": "2020-04-09T13:17:03Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -393,11 +418,12 @@ function externEncryptAesCbc(byte[] input, byte[] key, byte[] iv, handle padding\n } external;\n \n # Returns AES ECB encrypted value for the given data.\n+# ```ballerina byte[]|crypto:Error cipherText = crypto:encryptAesEcb(cipherText, key); ```\n #\n # + input - The content to be encrypted\n # + key - Encryption key\n # + padding - The padding\n-# + return - Encrypted data or `Error` if key is invalid\n+# + return - Encrypted data or `crypto:Error` if key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 331}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNDE0MQ==", "bodyText": "Corrected.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406914141", "createdAt": "2020-04-10T19:47:10Z", "author": {"login": "Maninda"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -393,11 +418,12 @@ function externEncryptAesCbc(byte[] input, byte[] key, byte[] iv, handle padding\n } external;\n \n # Returns AES ECB encrypted value for the given data.\n+# ```ballerina byte[]|crypto:Error cipherText = crypto:encryptAesEcb(cipherText, key); ```\n #\n # + input - The content to be encrypted\n # + key - Encryption key\n # + padding - The padding\n-# + return - Encrypted data or `Error` if key is invalid\n+# + return - Encrypted data or `crypto:Error` if key is invalid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTc1MQ=="}, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 331}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc3OTI0OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxNzoxMlrOGDYOdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0NzoxNlrOGEEEfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTgyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Encrypted data or `crypto:Error` if key is invalid\n          \n          \n            \n            # + return - Encrypted data or `crypto:Error` if key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406195829", "createdAt": "2020-04-09T13:17:12Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -408,13 +434,14 @@ function externEncryptAesEcb(byte[] input, byte[] key, handle padding) returns b\n } external;\n \n # Returns AES GCM encrypted value for the given data.\n+# ```ballerina byte[]|crypto:Error cipherText = crypto:encryptAesGcm(cipherText, key, initVector); ```\n #\n # + input - The content to be encrypted\n # + key - Encryption key\n # + iv - Initialization vector\n # + padding - The padding\n # + tagSize - Tag size\n-# + return - Encrypted data or `Error` if key is invalid\n+# + return - Encrypted data or `crypto:Error` if key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 347}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNDE3NQ==", "bodyText": "Corrected.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406914175", "createdAt": "2020-04-10T19:47:16Z", "author": {"login": "Maninda"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -408,13 +434,14 @@ function externEncryptAesEcb(byte[] input, byte[] key, handle padding) returns b\n } external;\n \n # Returns AES GCM encrypted value for the given data.\n+# ```ballerina byte[]|crypto:Error cipherText = crypto:encryptAesGcm(cipherText, key, initVector); ```\n #\n # + input - The content to be encrypted\n # + key - Encryption key\n # + iv - Initialization vector\n # + padding - The padding\n # + tagSize - Tag size\n-# + return - Encrypted data or `Error` if key is invalid\n+# + return - Encrypted data or `crypto:Error` if key is invalid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTgyOQ=="}, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 347}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc3OTcxOnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxNzoxOFrOGDYOtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0NzoyNlrOGEEEsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTg5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Decrypted data or `crypto:Error` if key is invalid\n          \n          \n            \n            # + return - Decrypted data or `crypto:Error` if key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406195894", "createdAt": "2020-04-09T13:17:18Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -428,11 +455,12 @@ function externEncryptAesGcm(byte[] input, byte[] key, byte[] iv, handle padding\n } external;\n \n # Returns RSA decrypted value for the given RSA encrypted data.\n+# ```ballerina byte[]|crypto:Error plainText = crypto:decryptRsaEcb(cipherText, privateKey); ```\n #\n # + input - The content to be decrypted\n # + key - Private or public key used for encryption\n # + padding - The padding\n-# + return - Decrypted data or `Error` if key is invalid\n+# + return - Decrypted data or `crypto:Error` if key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 361}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNDIyNQ==", "bodyText": "Corrected.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406914225", "createdAt": "2020-04-10T19:47:26Z", "author": {"login": "Maninda"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -428,11 +455,12 @@ function externEncryptAesGcm(byte[] input, byte[] key, byte[] iv, handle padding\n } external;\n \n # Returns RSA decrypted value for the given RSA encrypted data.\n+# ```ballerina byte[]|crypto:Error plainText = crypto:decryptRsaEcb(cipherText, privateKey); ```\n #\n # + input - The content to be decrypted\n # + key - Private or public key used for encryption\n # + padding - The padding\n-# + return - Decrypted data or `Error` if key is invalid\n+# + return - Decrypted data or `crypto:Error` if key is invalid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTg5NA=="}, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 361}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc4MDIwOnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxNzoyNlrOGDYPCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0NzozNFrOGEEE0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTk3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Decrypted data or `crypto:Error` if key is invalid\n          \n          \n            \n            # + return - Decrypted data or `crypto:Error` if key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406195979", "createdAt": "2020-04-09T13:17:26Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -445,12 +473,13 @@ function externDecryptRsaEcb(byte[] input, PrivateKey|PublicKey key, handle padd\n } external;\n \n # Returns AES CBC decrypted value for the given AES CBC encrypted data.\n+# ```ballerina byte[]|crypto:Error plainText = crypto:decryptAesCbc(cipherText, key, initVector); ```\n #\n # + input - The content to be decrypted\n # + key - Encryption key\n # + iv - Initialization vector\n # + padding - The padding\n-# + return - Decrypted data or `Error` if key is invalid\n+# + return - Decrypted data or `crypto:Error` if key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 376}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNDI1OQ==", "bodyText": "Corrected.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406914259", "createdAt": "2020-04-10T19:47:34Z", "author": {"login": "Maninda"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -445,12 +473,13 @@ function externDecryptRsaEcb(byte[] input, PrivateKey|PublicKey key, handle padd\n } external;\n \n # Returns AES CBC decrypted value for the given AES CBC encrypted data.\n+# ```ballerina byte[]|crypto:Error plainText = crypto:decryptAesCbc(cipherText, key, initVector); ```\n #\n # + input - The content to be decrypted\n # + key - Encryption key\n # + iv - Initialization vector\n # + padding - The padding\n-# + return - Decrypted data or `Error` if key is invalid\n+# + return - Decrypted data or `crypto:Error` if key is invalid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NTk3OQ=="}, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 376}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc4MDc1OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxNzozM1rOGDYPYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0Nzo0MFrOGEEE9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NjA2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Decrypted data or `crypto:Error` if key is invalid\n          \n          \n            \n            # + return - Decrypted data or `crypto:Error` if key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406196064", "createdAt": "2020-04-09T13:17:33Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -461,11 +490,12 @@ function externDecryptAesCbc(byte[] input, byte[] key, byte[] iv, handle padding\n } external;\n \n # Returns AES ECB decrypted value for the given AES ECB encrypted data.\n+# ```ballerina byte[]|crypto:Error plainText = crypto:decryptAesEcb(cipherText, key); ```\n #\n # + input - The content to be decrypted\n # + key - Encryption key\n # + padding - The padding\n-# + return - Decrypted data or `Error` if key is invalid\n+# + return - Decrypted data or `crypto:Error` if key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 390}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNDI5Mg==", "bodyText": "Corrected.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406914292", "createdAt": "2020-04-10T19:47:40Z", "author": {"login": "Maninda"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -461,11 +490,12 @@ function externDecryptAesCbc(byte[] input, byte[] key, byte[] iv, handle padding\n } external;\n \n # Returns AES ECB decrypted value for the given AES ECB encrypted data.\n+# ```ballerina byte[]|crypto:Error plainText = crypto:decryptAesEcb(cipherText, key); ```\n #\n # + input - The content to be decrypted\n # + key - Encryption key\n # + padding - The padding\n-# + return - Decrypted data or `Error` if key is invalid\n+# + return - Decrypted data or `crypto:Error` if key is invalid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NjA2NA=="}, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 390}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc4MTQ5OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxNzo0NFrOGDYP3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0Nzo0OFrOGEEFIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NjE5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Decrypted data or `crypto:Error` if key is invalid\n          \n          \n            \n            # + return - Decrypted data or `crypto:Error` if key is invalid\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406196191", "createdAt": "2020-04-09T13:17:44Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -476,13 +506,14 @@ function externDecryptAesEcb(byte[] input, byte[] key, handle padding) returns b\n } external;\n \n # Returns AES GCM decrypted value for the given AES GCM encrypted data.\n+# ```ballerina byte[]|crypto:Error plainText = crypto:decryptAesGcm(cipherText, key, initVector); ```\n #\n # + input - The content to be decrypted\n # + key - Encryption key\n # + iv - Initialization vector\n # + padding - The padding\n # + tagSize - Tag size\n-# + return - Decrypted data or `Error` if key is invalid\n+# + return - Decrypted data or `crypto:Error` if key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 406}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNDMzOA==", "bodyText": "Corrected.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406914338", "createdAt": "2020-04-10T19:47:48Z", "author": {"login": "Maninda"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -476,13 +506,14 @@ function externDecryptAesEcb(byte[] input, byte[] key, handle padding) returns b\n } external;\n \n # Returns AES GCM decrypted value for the given AES GCM encrypted data.\n+# ```ballerina byte[]|crypto:Error plainText = crypto:decryptAesGcm(cipherText, key, initVector); ```\n #\n # + input - The content to be decrypted\n # + key - Encryption key\n # + iv - Initialization vector\n # + padding - The padding\n # + tagSize - Tag size\n-# + return - Decrypted data or `Error` if key is invalid\n+# + return - Decrypted data or `crypto:Error` if key is invalid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NjE5MQ=="}, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 406}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc4MzE4OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxODowOFrOGDYQ8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxODowOFrOGDYQ8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NjQ2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 // Signing input value using different signature algorithms, \n          \n          \n            \n                 // Signing the input value using different signature algorithms", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406196466", "createdAt": "2020-04-09T13:18:08Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/Module.md", "diffHunk": "@@ -115,23 +113,23 @@ public function main() returns error? {\n          password: \"ballerina\"\n      };\n      crypto:PrivateKey privateKey = \n-        check crypto:decodePrivateKey(keyStore, \"ballerina\", \"ballerina\");\n+        checkpanic crypto:decodePrivateKey(keyStore, \"ballerina\", \"ballerina\");\n \n      // Signing input value using different signature algorithms, ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc4NDM0OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxODoyNFrOGDYRng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxODoyNFrOGDYRng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NjYzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Encrypt and decrypt input value using RSA ECB PKCS1 padding.\n          \n          \n            \n                // Encrypt and decrypt the input values using RSA ECB PKCS1 padding.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406196638", "createdAt": "2020-04-09T13:18:24Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/Module.md", "diffHunk": "@@ -158,26 +156,26 @@ public function main() returns error? {\n \n     // Public key used for encryption.\n     crypto:PublicKey publicKey = \n-        check crypto:decodePublicKey(keyStore, \"ballerina\");\n+        checkpanic crypto:decodePublicKey(keyStore, \"ballerina\");\n \n     // Private key used for decryption.\n     crypto:PrivateKey privateKey = \n-        check crypto:decodePrivateKey(keyStore, \"ballerina\", \"ballerina\");\n+        checkpanic crypto:decodePrivateKey(keyStore, \"ballerina\", \"ballerina\");\n \n     // Encrypt and decrypt input value using RSA ECB PKCS1 padding.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc4NDkyOnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxODozNVrOGDYSBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxODozNVrOGDYSBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5Njc0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Encrypt and decrypt input value using \n          \n          \n            \n                // Encrypt and decrypt the input values using", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406196741", "createdAt": "2020-04-09T13:18:35Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/Module.md", "diffHunk": "@@ -158,26 +156,26 @@ public function main() returns error? {\n \n     // Public key used for encryption.\n     crypto:PublicKey publicKey = \n-        check crypto:decodePublicKey(keyStore, \"ballerina\");\n+        checkpanic crypto:decodePublicKey(keyStore, \"ballerina\");\n \n     // Private key used for decryption.\n     crypto:PrivateKey privateKey = \n-        check crypto:decodePrivateKey(keyStore, \"ballerina\", \"ballerina\");\n+        checkpanic crypto:decodePrivateKey(keyStore, \"ballerina\", \"ballerina\");\n \n     // Encrypt and decrypt input value using RSA ECB PKCS1 padding.\n-    byte[] output = check crypto:encryptRsaEcb(inputArr, publicKey);\n-    output = check crypto:decryptRsaEcb(output, privateKey);\n+    byte[] output = checkpanic crypto:encryptRsaEcb(inputArr, publicKey);\n+    output = checkpanic crypto:decryptRsaEcb(output, privateKey);\n     io:println(\"RSA ECB PKCS1 decrypted value: \" + \n-        check str:fromBytes(output));\n+        checkpanic str:fromBytes(output));\n \n     // Encrypt and decrypt input value using ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc4NjI4OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxODo1NFrOGDYS3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxODo1NFrOGDYS3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5Njk1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Encrypt and decrypt input value using AES CBC PKCS5 padding.\n          \n          \n            \n                // Encrypt and decrypt the input values using AES CBC PKCS5 padding.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406196959", "createdAt": "2020-04-09T13:18:54Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/Module.md", "diffHunk": "@@ -210,39 +208,39 @@ public function main() returns error? {\n     }\n \n     // Encrypt and decrypt input value using AES CBC PKCS5 padding.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc4NzIyOnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxOTowNlrOGDYTbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxOTowNlrOGDYTbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NzEwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Encrypt and decrypt input value using AES CBC no padding.\n          \n          \n            \n                // Encrypt and decrypt the input values using AES CBC no padding.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406197101", "createdAt": "2020-04-09T13:19:06Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/Module.md", "diffHunk": "@@ -210,39 +208,39 @@ public function main() returns error? {\n     }\n \n     // Encrypt and decrypt input value using AES CBC PKCS5 padding.\n-    byte[] output = check crypto:encryptAesCbc(inputArr, keyArr, ivArr);\n-    output = check crypto:decryptAesCbc(output, keyArr, ivArr);\n+    byte[] output = checkpanic crypto:encryptAesCbc(inputArr, keyArr, ivArr);\n+    output = checkpanic crypto:decryptAesCbc(output, keyArr, ivArr);\n     io:println(\"AES CBC PKCS5 decrypted value: \" + \n-        check str:fromBytes(output));\n+        checkpanic str:fromBytes(output));\n \n     // Encrypt and decrypt input value using AES CBC no padding.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc4Nzk2OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxOToxNFrOGDYT3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxOToxNFrOGDYT3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NzIxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Encrypt and decrypt input value using AES GCM PKCS5 padding.\n          \n          \n            \n                // Encrypt and decrypt the input values using AES GCM PKCS5 padding.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406197213", "createdAt": "2020-04-09T13:19:14Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/Module.md", "diffHunk": "@@ -210,39 +208,39 @@ public function main() returns error? {\n     }\n \n     // Encrypt and decrypt input value using AES CBC PKCS5 padding.\n-    byte[] output = check crypto:encryptAesCbc(inputArr, keyArr, ivArr);\n-    output = check crypto:decryptAesCbc(output, keyArr, ivArr);\n+    byte[] output = checkpanic crypto:encryptAesCbc(inputArr, keyArr, ivArr);\n+    output = checkpanic crypto:decryptAesCbc(output, keyArr, ivArr);\n     io:println(\"AES CBC PKCS5 decrypted value: \" + \n-        check str:fromBytes(output));\n+        checkpanic str:fromBytes(output));\n \n     // Encrypt and decrypt input value using AES CBC no padding.\n-    output = check crypto:encryptAesCbc(inputArr, keyArr, ivArr, crypto:NONE);\n-    output = check crypto:decryptAesCbc(output, keyArr, ivArr, crypto:NONE);\n+    output = checkpanic crypto:encryptAesCbc(inputArr, keyArr, ivArr, crypto:NONE);\n+    output = checkpanic crypto:decryptAesCbc(output, keyArr, ivArr, crypto:NONE);\n     io:println(\"AES CBC no padding decrypted value: \" + \n-        check str:fromBytes(output));\n+        checkpanic str:fromBytes(output));\n \n     // Encrypt and decrypt input value using AES GCM PKCS5 padding.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc4ODQ3OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxOToyNFrOGDYUOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxOToyNFrOGDYUOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NzMwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Encrypt and decrypt input value using AES GCM no padding.\n          \n          \n            \n                // Encrypt and decrypt the input values using AES GCM no padding.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406197305", "createdAt": "2020-04-09T13:19:24Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/Module.md", "diffHunk": "@@ -210,39 +208,39 @@ public function main() returns error? {\n     }\n \n     // Encrypt and decrypt input value using AES CBC PKCS5 padding.\n-    byte[] output = check crypto:encryptAesCbc(inputArr, keyArr, ivArr);\n-    output = check crypto:decryptAesCbc(output, keyArr, ivArr);\n+    byte[] output = checkpanic crypto:encryptAesCbc(inputArr, keyArr, ivArr);\n+    output = checkpanic crypto:decryptAesCbc(output, keyArr, ivArr);\n     io:println(\"AES CBC PKCS5 decrypted value: \" + \n-        check str:fromBytes(output));\n+        checkpanic str:fromBytes(output));\n \n     // Encrypt and decrypt input value using AES CBC no padding.\n-    output = check crypto:encryptAesCbc(inputArr, keyArr, ivArr, crypto:NONE);\n-    output = check crypto:decryptAesCbc(output, keyArr, ivArr, crypto:NONE);\n+    output = checkpanic crypto:encryptAesCbc(inputArr, keyArr, ivArr, crypto:NONE);\n+    output = checkpanic crypto:decryptAesCbc(output, keyArr, ivArr, crypto:NONE);\n     io:println(\"AES CBC no padding decrypted value: \" + \n-        check str:fromBytes(output));\n+        checkpanic str:fromBytes(output));\n \n     // Encrypt and decrypt input value using AES GCM PKCS5 padding.\n-    output = check crypto:encryptAesGcm(inputArr, keyArr, ivArr);\n-    output = check crypto:decryptAesGcm(output, keyArr, ivArr);\n+    output = checkpanic crypto:encryptAesGcm(inputArr, keyArr, ivArr);\n+    output = checkpanic crypto:decryptAesGcm(output, keyArr, ivArr);\n     io:println(\"AES GCM PKCS5 decrypted value: \" + \n-        check str:fromBytes(output));\n+        checkpanic str:fromBytes(output));\n \n     // Encrypt and decrypt input value using AES GCM no padding.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc4OTIyOnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxOTozNVrOGDYUuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxOTozNVrOGDYUuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NzQzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Encrypt and decrypt input value using AES ECB PKCS5 padding.\n          \n          \n            \n                // Encrypt and decrypt the input values using AES ECB PKCS5 padding.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406197435", "createdAt": "2020-04-09T13:19:35Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/Module.md", "diffHunk": "@@ -210,39 +208,39 @@ public function main() returns error? {\n     }\n \n     // Encrypt and decrypt input value using AES CBC PKCS5 padding.\n-    byte[] output = check crypto:encryptAesCbc(inputArr, keyArr, ivArr);\n-    output = check crypto:decryptAesCbc(output, keyArr, ivArr);\n+    byte[] output = checkpanic crypto:encryptAesCbc(inputArr, keyArr, ivArr);\n+    output = checkpanic crypto:decryptAesCbc(output, keyArr, ivArr);\n     io:println(\"AES CBC PKCS5 decrypted value: \" + \n-        check str:fromBytes(output));\n+        checkpanic str:fromBytes(output));\n \n     // Encrypt and decrypt input value using AES CBC no padding.\n-    output = check crypto:encryptAesCbc(inputArr, keyArr, ivArr, crypto:NONE);\n-    output = check crypto:decryptAesCbc(output, keyArr, ivArr, crypto:NONE);\n+    output = checkpanic crypto:encryptAesCbc(inputArr, keyArr, ivArr, crypto:NONE);\n+    output = checkpanic crypto:decryptAesCbc(output, keyArr, ivArr, crypto:NONE);\n     io:println(\"AES CBC no padding decrypted value: \" + \n-        check str:fromBytes(output));\n+        checkpanic str:fromBytes(output));\n \n     // Encrypt and decrypt input value using AES GCM PKCS5 padding.\n-    output = check crypto:encryptAesGcm(inputArr, keyArr, ivArr);\n-    output = check crypto:decryptAesGcm(output, keyArr, ivArr);\n+    output = checkpanic crypto:encryptAesGcm(inputArr, keyArr, ivArr);\n+    output = checkpanic crypto:decryptAesGcm(output, keyArr, ivArr);\n     io:println(\"AES GCM PKCS5 decrypted value: \" + \n-        check str:fromBytes(output));\n+        checkpanic str:fromBytes(output));\n \n     // Encrypt and decrypt input value using AES GCM no padding.\n-    output = check crypto:encryptAesGcm(inputArr, keyArr, ivArr, crypto:NONE);\n-    output = check crypto:decryptAesGcm(output, keyArr, ivArr, crypto:NONE);\n+    output = checkpanic crypto:encryptAesGcm(inputArr, keyArr, ivArr, crypto:NONE);\n+    output = checkpanic crypto:decryptAesGcm(output, keyArr, ivArr, crypto:NONE);\n     io:println(\"AES GCM no padding decrypted value: \" + \n-        check str:fromBytes(output));\n+        checkpanic str:fromBytes(output));\n \n     // Encrypt and decrypt input value using AES ECB PKCS5 padding.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc4OTgxOnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxOTo0M1rOGDYVCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxOTo0M1rOGDYVCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NzUxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Encrypt and decrypt input value using AES ECB no padding.\n          \n          \n            \n                // Encrypt and decrypt the input values using AES ECB no padding.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406197515", "createdAt": "2020-04-09T13:19:43Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/Module.md", "diffHunk": "@@ -210,39 +208,39 @@ public function main() returns error? {\n     }\n \n     // Encrypt and decrypt input value using AES CBC PKCS5 padding.\n-    byte[] output = check crypto:encryptAesCbc(inputArr, keyArr, ivArr);\n-    output = check crypto:decryptAesCbc(output, keyArr, ivArr);\n+    byte[] output = checkpanic crypto:encryptAesCbc(inputArr, keyArr, ivArr);\n+    output = checkpanic crypto:decryptAesCbc(output, keyArr, ivArr);\n     io:println(\"AES CBC PKCS5 decrypted value: \" + \n-        check str:fromBytes(output));\n+        checkpanic str:fromBytes(output));\n \n     // Encrypt and decrypt input value using AES CBC no padding.\n-    output = check crypto:encryptAesCbc(inputArr, keyArr, ivArr, crypto:NONE);\n-    output = check crypto:decryptAesCbc(output, keyArr, ivArr, crypto:NONE);\n+    output = checkpanic crypto:encryptAesCbc(inputArr, keyArr, ivArr, crypto:NONE);\n+    output = checkpanic crypto:decryptAesCbc(output, keyArr, ivArr, crypto:NONE);\n     io:println(\"AES CBC no padding decrypted value: \" + \n-        check str:fromBytes(output));\n+        checkpanic str:fromBytes(output));\n \n     // Encrypt and decrypt input value using AES GCM PKCS5 padding.\n-    output = check crypto:encryptAesGcm(inputArr, keyArr, ivArr);\n-    output = check crypto:decryptAesGcm(output, keyArr, ivArr);\n+    output = checkpanic crypto:encryptAesGcm(inputArr, keyArr, ivArr);\n+    output = checkpanic crypto:decryptAesGcm(output, keyArr, ivArr);\n     io:println(\"AES GCM PKCS5 decrypted value: \" + \n-        check str:fromBytes(output));\n+        checkpanic str:fromBytes(output));\n \n     // Encrypt and decrypt input value using AES GCM no padding.\n-    output = check crypto:encryptAesGcm(inputArr, keyArr, ivArr, crypto:NONE);\n-    output = check crypto:decryptAesGcm(output, keyArr, ivArr, crypto:NONE);\n+    output = checkpanic crypto:encryptAesGcm(inputArr, keyArr, ivArr, crypto:NONE);\n+    output = checkpanic crypto:decryptAesGcm(output, keyArr, ivArr, crypto:NONE);\n     io:println(\"AES GCM no padding decrypted value: \" + \n-        check str:fromBytes(output));\n+        checkpanic str:fromBytes(output));\n \n     // Encrypt and decrypt input value using AES ECB PKCS5 padding.\n-    output = check crypto:encryptAesEcb(inputArr, keyArr);\n-    output = check crypto:decryptAesEcb(output, keyArr);\n+    output = checkpanic crypto:encryptAesEcb(inputArr, keyArr);\n+    output = checkpanic crypto:decryptAesEcb(output, keyArr);\n     io:println(\"AES ECB PKCS5 decrypted value: \" + \n-        check str:fromBytes(output));\n+        checkpanic str:fromBytes(output));\n \n     // Encrypt and decrypt input value using AES ECB no padding.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc5MDM4OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxOTo1M1rOGDYVcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoxOTo1M1rOGDYVcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NzYxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # The key algorithms supported by crypto module.\n          \n          \n            \n            # The key algorithms supported by the Crypto module.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406197616", "createdAt": "2020-04-09T13:19:53Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -20,7 +20,7 @@ import ballerina/java;\n # The key algorithms supported by crypto module.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc5MDk3OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoyMDowM1rOGDYV4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoyMDowM1rOGDYV4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5NzcyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Padding algorithms supported with AES encryption and decryption.\n          \n          \n            \n            # Padding algorithms supported by AES encryption and decryption.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406197729", "createdAt": "2020-04-09T13:20:03Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -20,7 +20,7 @@ import ballerina/java;\n # The key algorithms supported by crypto module.\n public type KeyAlgorithm RSA;\n \n-# The `RSA` algorithm\n+# The `RSA` algorithm.\n public const RSA = \"RSA\";\n \n # Padding algorithms supported with AES encryption and decryption.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc5Mjg0OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoyMDozNVrOGDYXHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoyMDozNVrOGDYXHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5ODA0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns Hex encoded CRC32B value for the provided element.\n          \n          \n            \n            # Returns Hex-encoded CRC32B value for the provided element.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406198046", "createdAt": "2020-04-09T13:20:35Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -205,6 +215,7 @@ public function hmacSha512(byte[] input, byte[] key) returns byte[] = @java:Meth\n } external;\n \n # Returns Hex encoded CRC32B value for the provided element.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDc5Mzc3OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoyMDo0OFrOGDYXpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzoyMDo0OFrOGDYXpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5ODE4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns RSA-MD5 based signature value for the given data.\n          \n          \n            \n            # Returns the RSA-MD5 based signature value for the given data.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406198183", "createdAt": "2020-04-09T13:20:48Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -218,121 +229,132 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n } external;\n \n # Returns RSA-MD5 based signature value for the given data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDg3Nzg5OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/Module.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzo0MDowN1rOGDZMGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0ODoyM1rOGEEF7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMTYxMQ==", "bodyText": "I think we need remove this section and point it to the BBE as per the guideline.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406211611", "createdAt": "2020-04-09T13:40:07Z", "author": {"login": "ldclakmal"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/Module.md", "diffHunk": "@@ -1,5 +1,3 @@\n-## Module overview\n-\n This module provides the necessary utilities that are required to hash content using different hashing mechanisms and algorithms. \n \n ## Samples", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNDU0MA==", "bodyText": "Removed and pointed to the BBE.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406914540", "createdAt": "2020-04-10T19:48:23Z", "author": {"login": "Maninda"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/Module.md", "diffHunk": "@@ -1,5 +1,3 @@\n-## Module overview\n-\n This module provides the necessary utilities that are required to hash content using different hashing mechanisms and algorithms. \n \n ## Samples", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMTYxMQ=="}, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDg4MjM3OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzo0MToxMlrOGDZO8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0ODo0MlrOGEEGeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMjMzOQ==", "bodyText": "Shall we use the following pattern as discussed?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # ```ballerina byte[] hash = crypto:hashMd5(data); ```\n          \n          \n            \n            # ```ballerina\n          \n          \n            \n            # byte[] hash = crypto:hashMd5(data);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406212339", "createdAt": "2020-04-09T13:41:12Z", "author": {"login": "ldclakmal"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -110,6 +110,7 @@ public type Certificate record {|\n |};\n \n # Returns the MD5 hash of the given data.\n+# ```ballerina byte[] hash = crypto:hashMd5(data); ```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNDY4MA==", "bodyText": "Changed the pattern.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r406914680", "createdAt": "2020-04-10T19:48:42Z", "author": {"login": "Maninda"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -110,6 +110,7 @@ public type Certificate record {|\n |};\n \n # Returns the MD5 hash of the given data.\n+# ```ballerina byte[] hash = crypto:hashMd5(data); ```", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMjMzOQ=="}, "originalCommit": {"oid": "46b22ad381f38cf81c42ac31685ace8eb4c9afdb"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjA4NzY2OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMzozNjo0MFrOGEKB4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwMzozNjo0MFrOGEKB4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAxMTgxMA==", "bodyText": "Shall we fix all the places?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The generated signature or else error if private key is invalid\n          \n          \n            \n            # + return - The generated signature or else a `crypto:Error` if the private key is invalid", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407011810", "createdAt": "2020-04-11T03:36:40Z", "author": {"login": "ldclakmal"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 218}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIzNjUzOnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoxNTo1MFrOGELF9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoxNTo1MFrOGELF9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTIzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns the HMAC using MD-5 hash function of the given data.\n          \n          \n            \n            # Returns the HMAC using the MD-5 hash function of the given data.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029236", "createdAt": "2020-04-11T07:15:50Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -155,6 +180,13 @@ public function hashSha512(byte[] input) returns byte[] = @java:Method {\n } external;\n \n # Returns the HMAC using MD-5 hash function of the given data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIzNjYwOnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoxNTo1OVrOGELF_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoxNTo1OVrOGELF_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTI0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns the HMAC using SHA-1 hash function of the given data.\n          \n          \n            \n            # Returns the HMAC using the SHA-1 hash function of the given data.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029245", "createdAt": "2020-04-11T07:15:59Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -165,6 +197,13 @@ public function hmacMd5(byte[] input, byte[] key) returns byte[] = @java:Method\n } external;\n \n # Returns the HMAC using SHA-1 hash function of the given data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIzNjY5OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoxNjoxMFrOGELGBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoxNjoxMFrOGELGBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTI1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns the HMAC using SHA-256 hash function of the given data.\n          \n          \n            \n            # Returns the HMAC using the SHA-256 hash function of the given data.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029254", "createdAt": "2020-04-11T07:16:10Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -175,6 +214,13 @@ public function hmacSha1(byte[] input, byte[] key) returns byte[] = @java:Method\n } external;\n \n # Returns the HMAC using SHA-256 hash function of the given data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIzNjc0OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoxNjoxOVrOGELGDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoxNjoxOVrOGELGDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTI2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns the HMAC using SHA-384 hash function of the given data.\n          \n          \n            \n            # Returns the HMAC using the SHA-384 hash function of the given data.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029263", "createdAt": "2020-04-11T07:16:19Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -185,6 +231,13 @@ public function hmacSha256(byte[] input, byte[] key) returns byte[] = @java:Meth\n } external;\n \n # Returns the HMAC using SHA-384 hash function of the given data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIzNjgyOnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoxNjoyN1rOGELGGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoxNjoyN1rOGELGGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTI3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns the HMAC using SHA-512 hash function of the given data.\n          \n          \n            \n            # Returns the HMAC using the SHA-512 hash function of the given data.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029274", "createdAt": "2020-04-11T07:16:27Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -195,6 +248,13 @@ public function hmacSha384(byte[] input, byte[] key) returns byte[] = @java:Meth\n } external;\n \n # Returns the HMAC using SHA-512 hash function of the given data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIzNjk4OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoxNjozOFrOGELGLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoxNjozOFrOGELGLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTI5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns Hex-encoded CRC32B value for the provided element.\n          \n          \n            \n            # Returns the Hex-encoded CRC32B value for the provided element.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029293", "createdAt": "2020-04-11T07:16:38Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -204,7 +264,12 @@ public function hmacSha512(byte[] input, byte[] key) returns byte[] = @java:Meth\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hmac\"\n } external;\n \n-# Returns Hex encoded CRC32B value for the provided element.\n+# Returns Hex-encoded CRC32B value for the provided element.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIzNzMzOnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoxNjo1NFrOGELGVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoxNjo1NFrOGELGVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTMzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns the RSA-MD5 based signature value for the given data.\n          \n          \n            \n            # Returns the RSA-MD5-based signature value for the given data.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029332", "createdAt": "2020-04-11T07:16:54Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIzNzY2OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoxNzozMVrOGELGew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoxNzozMVrOGELGew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTM3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns RSA-SHA1 based signature value for the given data.\n          \n          \n            \n            # Returns the RSA-SHA1-based signature value for the given data.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029371", "createdAt": "2020-04-11T07:17:31Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 224}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIzODAzOnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoxODowMlrOGELGpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoxODowMlrOGELGpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTQxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The generated signature or else error if private key is invalid\n          \n          \n            \n            # + return - The generated signature or else a `crypto:Error` if the private key is invalid", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029414", "createdAt": "2020-04-11T07:18:02Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 240}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIzODMxOnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoxODoxNlrOGELGxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoxODoxNlrOGELGxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTQ0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns RSA-SHA256 based signature value for the given data.\n          \n          \n            \n            # Returns the RSA-SHA256-based signature value for the given data.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029444", "createdAt": "2020-04-11T07:18:16Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 246}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIzODQyOnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoxODoyOVrOGELG0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoxODoyOVrOGELG0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTQ1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The generated signature or else error if private key is invalid\n          \n          \n            \n            # + return - The generated signature or else a `crypto:Error` if the private key is invalid", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029457", "createdAt": "2020-04-11T07:18:29Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 262}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIzODU2OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoxODozOFrOGELG4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoxODozOFrOGELG4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTQ3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns RSA-SHA384 based signature value for the given data.\n          \n          \n            \n            # Returns the RSA-SHA384-based signature value for the given data.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029473", "createdAt": "2020-04-11T07:18:38Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 268}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIzODc5OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoxODo1MlrOGELG-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoxODo1MlrOGELG-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTQ5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The generated signature or else error if private key is invalid\n          \n          \n            \n            # + return - The generated signature or else a `crypto:Error` if the private key is invalid", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029497", "createdAt": "2020-04-11T07:18:52Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or else error if private key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 285}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIzOTA3OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoxOTowM1rOGELHFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoxOTowM1rOGELHFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTUyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns RSA-SHA512 based signature value for the given data.\n          \n          \n            \n            # Returns the RSA-SHA512-based signature value for the given data.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029526", "createdAt": "2020-04-11T07:19:03Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 291}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIzOTMyOnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoxOToxNlrOGELHMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoxOToxNlrOGELHMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTU1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The generated signature or else error if private key is invalid\n          \n          \n            \n            # + return - The generated signature or else a `crypto:Error` if the private key is invalid", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029554", "createdAt": "2020-04-11T07:19:16Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 307}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIzOTQ3OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoxOToyNlrOGELHQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoxOToyNlrOGELHQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTU3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Verify RSA-MD5 based signature.\n          \n          \n            \n            # Verifies the RSA-MD5-based signature.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029571", "createdAt": "2020-04-11T07:19:26Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 313}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIzOTY2OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoxOTo0OFrOGELHWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoxOTo0OFrOGELHWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTU5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Validity of the signature or else error if public key is invalid\n          \n          \n            \n            # + return - Validity of the signature or else a `crypto:Error` if the public key is invalid", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029594", "createdAt": "2020-04-11T07:19:48Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 331}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIzOTgzOnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMDowM1rOGELHbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMDowM1rOGELHbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTYxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Validity of the signature or else error if public key is invalid\n          \n          \n            \n            # + return - Validity of the signature or else a `crypto:Error` if the public key is invalid", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029612", "createdAt": "2020-04-11T07:20:03Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha1Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 356}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIzOTg4OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMDoxNVrOGELHdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMDoxNVrOGELHdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTYyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Verify RSA-SHA1 based signature.\n          \n          \n            \n            # Verifies the RSA-SHA1-based signature.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029620", "createdAt": "2020-04-11T07:20:15Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 338}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI0MDIwOnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMDoyNlrOGELHlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMDoyNlrOGELHlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTY1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Verify RSA-SHA256 based signature.\n          \n          \n            \n            # Verifies the RSA-SHA256-based signature.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029655", "createdAt": "2020-04-11T07:20:26Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha1Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha1Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                        returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha1Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA256 based signature.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 363}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI0MDQyOnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMDo0OFrOGELHsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMDo0OFrOGELHsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTY4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Validity of the signature or else error if public key is invalid\n          \n          \n            \n            # + return - Validity of the signature or else a `crypto:Error` if the public key is invalid", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029683", "createdAt": "2020-04-11T07:20:48Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha1Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha1Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                        returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha1Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA256 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha256Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 381}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI0MDUzOnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMTowMVrOGELHwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMTowMVrOGELHwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTY5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Verify RSA-SHA384 based signature.\n          \n          \n            \n            # Verifies the RSA-SHA384-based signature.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029696", "createdAt": "2020-04-11T07:21:01Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha1Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha1Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                        returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha1Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA256 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha256Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha256Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha256Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA384 based signature.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 388}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI0MDY3OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMToxNVrOGELH0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMToxNVrOGELH0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTcxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Validity of the signature or else error if public key is invalid\n          \n          \n            \n            # + return - Validity of the signature or else a `crypto:Error` if the public key is invalid", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029715", "createdAt": "2020-04-11T07:21:15Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha1Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha1Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                        returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha1Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA256 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha256Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha256Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha256Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA384 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha384Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 406}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI0MDcxOnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMToyNFrOGELH2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMToyNFrOGELH2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTcyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Verify RSA-SHA512 based signature.\n          \n          \n            \n            # Verifies the RSA-SHA512-based signature.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029721", "createdAt": "2020-04-11T07:21:24Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha1Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha1Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                        returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha1Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA256 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha256Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha256Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha256Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA384 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha384Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha384Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha384Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA512 based signature.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 413}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI0MDg2OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMTozN1rOGELH6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMTozN1rOGELH6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTczNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Validity of the signature or else error if public key is invalid\n          \n          \n            \n            # + return - Validity of the signature or else a `crypto:Error` if the public key is invalid", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029737", "createdAt": "2020-04-11T07:21:37Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha1Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha1Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                        returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha1Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA256 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha256Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha256Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha256Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA384 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha384Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha384Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha384Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA512 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha512Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 431}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI0MDkyOnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMTo0NlrOGELH8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMTo0NlrOGELH8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTc0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Read a private key from the provided PKCS#12 archive file.\n          \n          \n            \n            # Reads a private key from the provided PKCS#12 archive file.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029744", "createdAt": "2020-04-11T07:21:46Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha1Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha1Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                        returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha1Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA256 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha256Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha256Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha256Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA384 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha384Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha384Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha384Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA512 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha512Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha512Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha512Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Read a private key from the provided PKCS#12 archive file.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 438}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI0MTE4OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMjowMFrOGELICg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMjowMFrOGELICg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTc3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Reference to the private key or else error if private key was unreadable\n          \n          \n            \n            # + return - Reference to the private key or else a `crypto:Error` if the private key was unreadable", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029770", "createdAt": "2020-04-11T07:22:00Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -217,122 +282,244 @@ function externCrc32b(byte[] input) returns handle = @java:Method {\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Hash\"\n } external;\n \n-# Returns RSA-MD5 based signature value for the given data.\n+# Returns the RSA-MD5 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaMd5(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaMd5(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaMd5\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA1 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha1(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha1(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha1\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA256 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha256(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha256(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha256\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA384 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha384(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n-# + privateKey - Private key used for signing.\n-# + return - The generated signature or `Error` if private key is invalid\n+# + privateKey - Private key used for signing\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha384(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha384\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Returns RSA-SHA512 based signature value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey =\n+#      checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[]|crypto:Error signature = crypto:signRsaSha512(data, privateKey);\n+# ```\n #\n # + input - The content to be signed\n # + privateKey - Private key used for signing\n-# + return - The generated signature or `Error` if private key is invalid\n+# + return - The generated signature or else error if private key is invalid\n public function signRsaSha512(byte[] input, PrivateKey privateKey) returns byte[]|Error = @java:Method {\n     name: \"signRsaSha512\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-MD5 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaMd5Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaMd5Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                       returns boolean|Error = @java:Method {\n     name: \"verifyRsaMd5Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA1 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha1Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha1Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                        returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha1Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA256 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha256Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha256Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha256Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA384 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha384Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha384Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha384Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Verify RSA-SHA512 based signature.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] signature = checkpanic crypto:signRsaMd5(data, privateKey);\n+#  crypto:PublicKey publicKey =  checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  boolean|crypto:Error validity = crypto:verifyRsaSha512Signature(data, signature, publicKey);\n+# ```\n #\n # + data - The content to be verified\n # + signature - Signature value\n # + publicKey - Public key used for verification\n-# + return - Validity of the signature or `Error` if public key is invalid\n+# + return - Validity of the signature or else error if public key is invalid\n public function verifyRsaSha512Signature(byte[] data, byte[] signature, PublicKey publicKey)\n                                          returns boolean|Error = @java:Method {\n     name: \"verifyRsaSha512Signature\",\n     class: \"org.ballerinalang.stdlib.crypto.nativeimpl.Sign\"\n } external;\n \n # Read a private key from the provided PKCS#12 archive file.\n+# ```ballerina\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PrivateKey|crypto:Error privateKey = crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+# ```\n #\n # + keyStore - Key store or Trust store configurations\n # + keyAlias - Key alias\n # + keyPassword - Key password\n-# + return - Reference to the private key or `Error` if private key was unreadable\n+# + return - Reference to the private key or else error if private key was unreadable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 451}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI0MTIzOnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMjowN1rOGELIEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMjowN1rOGELIEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTc3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Read a public key from the provided PKCS#12 archive file.\n          \n          \n            \n            # Reads a public key from the provided PKCS#12 archive file.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029776", "createdAt": "2020-04-11T07:22:07Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -345,10 +532,17 @@ function externDecodePrivateKey(KeyStore|TrustStore keyStore, handle keyAlias, h\n } external;\n \n # Read a public key from the provided PKCS#12 archive file.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 458}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI0MTQwOnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMjoyMFrOGELIJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMjoyMFrOGELIJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTc5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Reference to the public key or else error if private key was unreadable\n          \n          \n            \n            # + return - Reference to the public key or else a `crypto:Error` if the private key was unreadable", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029796", "createdAt": "2020-04-11T07:22:20Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -345,10 +532,17 @@ function externDecodePrivateKey(KeyStore|TrustStore keyStore, handle keyAlias, h\n } external;\n \n # Read a public key from the provided PKCS#12 archive file.\n+# ```ballerina\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PublicKey|crypto:Error publicKey = crypto:decodePublicKey(keyStore, \"keyAlias\");\n+# ```\n #\n # + keyStore - Key store or Trust store configurations\n # + keyAlias - Key alias\n-# + return - Reference to the public key or `Error` if private key was unreadable\n+# + return - Reference to the public key or else error if private key was unreadable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 470}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI0MTQ5OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMjozMVrOGELILQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMjozMVrOGELILQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTgwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns RSA encrypted value for the given data.\n          \n          \n            \n            # Returns the RSA-encrypted value for the given data.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029805", "createdAt": "2020-04-11T07:22:31Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -360,11 +554,21 @@ function externDecodePublicKey(KeyStore|TrustStore keyStore, handle keyAlias)\n } external;\n \n # Returns RSA encrypted value for the given data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 477}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI0MTYxOnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMjo0NlrOGELIPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMjo0NlrOGELIPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTgyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Encrypted data or else error if key is invalid\n          \n          \n            \n            # + return - Encrypted data or else a `crypto:Error` if the key is invalid", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029820", "createdAt": "2020-04-11T07:22:46Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -360,11 +554,21 @@ function externDecodePublicKey(KeyStore|TrustStore keyStore, handle keyAlias)\n } external;\n \n # Returns RSA encrypted value for the given data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PublicKey publicKey = checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  byte[]|crypto:Error cipherText = crypto:encryptRsaEcb(data, publicKey);\n+# ```\n #\n # + input - The content to be encrypted\n # + key - Private or public key used for encryption\n # + padding - The padding\n-# + return - Encrypted data or `Error` if key is invalid\n+# + return - Encrypted data or else error if key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 493}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI0MjA0OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMzowM1rOGELIaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMzowM1rOGELIaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTg2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns AES CBC encrypted value for the given data.\n          \n          \n            \n            # Returns the AES-CBC-encrypted value for the given data.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029865", "createdAt": "2020-04-11T07:23:03Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -377,12 +581,25 @@ function externEncryptRsaEcb(byte[] input, PrivateKey|PublicKey key, handle padd\n } external;\n \n # Returns AES CBC encrypted value for the given data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 500}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI0MjE3OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMzoxNlrOGELIeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMzoxNlrOGELIeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTg4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Encrypted data or else error if key is invalid\n          \n          \n            \n            # + return - Encrypted data or else a `crypto:Error` if the key is invalid", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029880", "createdAt": "2020-04-11T07:23:16Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -377,12 +581,25 @@ function externEncryptRsaEcb(byte[] input, PrivateKey|PublicKey key, handle padd\n } external;\n \n # Returns AES CBC encrypted value for the given data.\n+# ```ballerina\n+#  string dataString = \"Hello Ballerina!\";\n+#  byte[] data = dataString.toBytes();\n+#  byte[16] key = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n+#  foreach var i in 0...15 {\n+#      key[i] = <byte>math:randomInRange(0, 255);\n+#  }\n+#  byte[16] initialVector = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n+#  foreach var i in 0...15 {\n+#      initialVector[i] = <byte>math:randomInRange(0, 255);\n+#  }\n+#  byte[]|crypto:Error cipherText = crypto:encryptAesCbc(data, key, initialVector);\n+# ```\n #\n # + input - The content to be encrypted\n # + key - Encryption key\n # + iv - Initialization vector\n # + padding - The padding\n-# + return - Encrypted data or `Error` if key is invalid\n+# + return - Encrypted data or else error if key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 520}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI0MjM3OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMzoyN1rOGELIkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMzoyN1rOGELIkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTkwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns AES ECB encrypted value for the given data.\n          \n          \n            \n            # Returns the AES-ECB-encrypted value for the given data.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029904", "createdAt": "2020-04-11T07:23:27Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -393,11 +610,20 @@ function externEncryptAesCbc(byte[] input, byte[] key, byte[] iv, handle padding\n } external;\n \n # Returns AES ECB encrypted value for the given data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 527}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI0MjU4OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMzo0MFrOGELIpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMzo0MFrOGELIpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTkyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Encrypted data or else error if key is invalid\n          \n          \n            \n            # + return - Encrypted data or else a `crypto:Error` if the key is invalid", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029926", "createdAt": "2020-04-11T07:23:40Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -393,11 +610,20 @@ function externEncryptAesCbc(byte[] input, byte[] key, byte[] iv, handle padding\n } external;\n \n # Returns AES ECB encrypted value for the given data.\n+# ```ballerina\n+#  string dataString = \"Hello Ballerina!\";\n+#  byte[] data = dataString.toBytes();\n+#  byte[16] key = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n+#  foreach var i in 0...15 {\n+#      key[i] = <byte>math:randomInRange(0, 255);\n+#  }\n+#  byte[]|crypto:Error cipherText = crypto:encryptAesEcb(data, key);\n+# ```\n #\n # + input - The content to be encrypted\n # + key - Encryption key\n # + padding - The padding\n-# + return - Encrypted data or `Error` if key is invalid\n+# + return - Encrypted data or else error if key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 542}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI0Mjc3OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMzo1MlrOGELIvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyMzo1MlrOGELIvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTk0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns AES GCM encrypted value for the given data.\n          \n          \n            \n            # Returns the AES-GCM-encrypted value for the given data.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029949", "createdAt": "2020-04-11T07:23:52Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -408,13 +634,26 @@ function externEncryptAesEcb(byte[] input, byte[] key, handle padding) returns b\n } external;\n \n # Returns AES GCM encrypted value for the given data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 549}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI0MzA1OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyNDowNFrOGELI2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzoyNDowNFrOGELI2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyOTk3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Encrypted data or else error if key is invalid\n          \n          \n            \n            # + return - Encrypted data or else a `crypto:Error` if the key is invalid", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407029979", "createdAt": "2020-04-11T07:24:04Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -408,13 +634,26 @@ function externEncryptAesEcb(byte[] input, byte[] key, handle padding) returns b\n } external;\n \n # Returns AES GCM encrypted value for the given data.\n+# ```ballerina\n+#  string dataString = \"Hello Ballerina!\";\n+#  byte[] data = dataString.toBytes();\n+#  byte[16] key = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n+#  foreach var i in 0...15 {\n+#      key[i] = <byte>math:randomInRange(0, 255);\n+#  }\n+#  byte[16] initialVector = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n+#  foreach var i in 0...15 {\n+#      initialVector[i] = <byte>math:randomInRange(0, 255);\n+#  }\n+#  byte[]|crypto:Error cipherText = crypto:encryptAesGcm(data, key, initialVector);\n+# ```\n #\n # + input - The content to be encrypted\n # + key - Encryption key\n # + iv - Initialization vector\n # + padding - The padding\n # + tagSize - Tag size\n-# + return - Encrypted data or `Error` if key is invalid\n+# + return - Encrypted data or else error if key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 570}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI0NzQyOnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozMDoyOVrOGELK2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozMDoyOVrOGELK2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMDQ5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns RSA decrypted value for the given RSA encrypted data.\n          \n          \n            \n            # Returns the RSA-decrypted value for the given RSA-encrypted data.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407030490", "createdAt": "2020-04-11T07:30:29Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -428,11 +667,23 @@ function externEncryptAesGcm(byte[] input, byte[] key, byte[] iv, handle padding\n } external;\n \n # Returns RSA decrypted value for the given RSA encrypted data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 577}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI0NzUwOnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozMDo0NFrOGELK5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozMDo0NFrOGELK5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMDUwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Decrypted data or else error if key is invalid\n          \n          \n            \n            # + return - Decrypted data or else a `crypto:Error` if the key is invalid", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407030500", "createdAt": "2020-04-11T07:30:44Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -428,11 +667,23 @@ function externEncryptAesGcm(byte[] input, byte[] key, byte[] iv, handle padding\n } external;\n \n # Returns RSA decrypted value for the given RSA encrypted data.\n+# ```ballerina\n+#  string stringData = \"Hello Ballerina\";\n+#  byte[] data = stringData.toBytes();\n+#  crypto:KeyStore keyStore = {\n+#      path: \"/home/ballerina/keystore.p12\",\n+#      password: \"keystorePassword\"\n+#  };\n+#  crypto:PublicKey publicKey = checkpanic crypto:decodePublicKey(keyStore, \"keyAlias\");\n+#  crypto:PrivateKey privateKey = checkpanic crypto:decodePrivateKey(keyStore, \"keyAlias\", \"keyPassword\");\n+#  byte[] cipherText = checkpanic crypto:encryptRsaEcb(data, publicKey);\n+#  byte[]|crypto:Error plainText = checkpanic crypto:decryptRsaEcb(cipherText, privateKey);\n+# ```\n #\n # + input - The content to be decrypted\n # + key - Private or public key used for encryption\n # + padding - The padding\n-# + return - Decrypted data or `Error` if key is invalid\n+# + return - Decrypted data or else error if key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 595}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI0NzY0OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozMTowMVrOGELK-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozMTowMVrOGELK-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMDUyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns AES CBC decrypted value for the given AES CBC encrypted data.\n          \n          \n            \n            # Returns the AES-CBC-decrypted value for the given AES-CBC-encrypted data.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407030521", "createdAt": "2020-04-11T07:31:01Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -445,12 +696,26 @@ function externDecryptRsaEcb(byte[] input, PrivateKey|PublicKey key, handle padd\n } external;\n \n # Returns AES CBC decrypted value for the given AES CBC encrypted data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 602}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI0NzgwOnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozMToxNVrOGELLCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozMToxNVrOGELLCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMDUzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Decrypted data or else error if key is invalid\n          \n          \n            \n            # + return - Decrypted data or else a `crypto:Error` if the key is invalid", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407030538", "createdAt": "2020-04-11T07:31:15Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -445,12 +696,26 @@ function externDecryptRsaEcb(byte[] input, PrivateKey|PublicKey key, handle padd\n } external;\n \n # Returns AES CBC decrypted value for the given AES CBC encrypted data.\n+# ```ballerina\n+#  string dataString = \"Hello Ballerina!\";\n+#  byte[] data = dataString.toBytes();\n+#  byte[16] key = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n+#  foreach var i in 0...15 {\n+#      key[i] = <byte>math:randomInRange(0, 255);\n+#  }\n+#  byte[16] initialVector = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n+#  foreach var i in 0...15 {\n+#      initialVector[i] = <byte>math:randomInRange(0, 255);\n+#  }\n+#  byte[] cipherText = checkpanic crypto:encryptAesCbc(data, key, initialVector);\n+#  byte[]|crypto:Error plainText = crypto:decryptAesCbc(cipherText, key, initialVector);\n+# ```\n #\n # + input - The content to be decrypted\n # + key - Encryption key\n # + iv - Initialization vector\n # + padding - The padding\n-# + return - Decrypted data or `Error` if key is invalid\n+# + return - Decrypted data or else error if key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 623}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI0Nzg5OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozMTozMVrOGELLFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozMTozMVrOGELLFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMDU0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns AES ECB decrypted value for the given AES ECB encrypted data.\n          \n          \n            \n            # Returns the AES-ECB-decrypted value for the given AES-ECB-encrypted data.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407030549", "createdAt": "2020-04-11T07:31:31Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -461,11 +726,21 @@ function externDecryptAesCbc(byte[] input, byte[] key, byte[] iv, handle padding\n } external;\n \n # Returns AES ECB decrypted value for the given AES ECB encrypted data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 630}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI0Nzk5OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozMTo0NFrOGELLIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozMTo0NFrOGELLIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMDU2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Decrypted data or else error if key is invalid\n          \n          \n            \n            # + return - Decrypted data or else a `crypto:Error` if the key is invalid", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407030562", "createdAt": "2020-04-11T07:31:44Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -461,11 +726,21 @@ function externDecryptAesCbc(byte[] input, byte[] key, byte[] iv, handle padding\n } external;\n \n # Returns AES ECB decrypted value for the given AES ECB encrypted data.\n+# ```ballerina\n+#  string dataString = \"Hello Ballerina!\";\n+#  byte[] data = dataString.toBytes();\n+#  byte[16] key = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n+#  foreach var i in 0...15 {\n+#      key[i] = <byte>math:randomInRange(0, 255);\n+#  }\n+#  byte[] cipherText = checkpanic crypto:encryptAesEcb(data, key);\n+#  byte[]|crypto:Error plainText = crypto:decryptAesEcb(cipherText, key);\n+# ```\n #\n # + input - The content to be decrypted\n # + key - Encryption key\n # + padding - The padding\n-# + return - Decrypted data or `Error` if key is invalid\n+# + return - Decrypted data or else error if key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 646}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI0ODI3OnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozMTo1OVrOGELLQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozMTo1OVrOGELLQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMDU5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns AES GCM decrypted value for the given AES GCM encrypted data.\n          \n          \n            \n            # Returns the AES-GCM-decrypted value for the given AES-GCM-encrypted data.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407030592", "createdAt": "2020-04-11T07:31:59Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -476,13 +751,27 @@ function externDecryptAesEcb(byte[] input, byte[] key, handle padding) returns b\n } external;\n \n # Returns AES GCM decrypted value for the given AES GCM encrypted data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 653}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI0ODMyOnYy", "diffSide": "RIGHT", "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozMjoxMlrOGELLRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozMjoxMlrOGELLRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMDU5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Decrypted data or else error if key is invalid\n          \n          \n            \n            # + return - Decrypted data or else a `crypto:Error` if the key is invalid", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22548#discussion_r407030599", "createdAt": "2020-04-11T07:32:12Z", "author": {"login": "praneesha"}, "path": "stdlib/crypto/src/main/ballerina/src/crypto/crypto.bal", "diffHunk": "@@ -476,13 +751,27 @@ function externDecryptAesEcb(byte[] input, byte[] key, handle padding) returns b\n } external;\n \n # Returns AES GCM decrypted value for the given AES GCM encrypted data.\n+# ```ballerina\n+#  string dataString = \"Hello Ballerina!\";\n+#  byte[] data = dataString.toBytes();\n+#  byte[16] key = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n+#  foreach var i in 0...15 {\n+#      key[i] = <byte>math:randomInRange(0, 255);\n+#  }\n+#  byte[16] initialVector = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n+#  foreach var i in 0...15 {\n+#      initialVector[i] = <byte>math:randomInRange(0, 255);\n+#  }\n+#  byte[] cipherText = checkpanic crypto:encryptAesGcm(data, key, initialVector);\n+#  byte[]|crypto:Error plainText = crypto:decryptAesGcm(cipherText, key, initialVector);\n+# ```\n #\n # + input - The content to be decrypted\n # + key - Encryption key\n # + iv - Initialization vector\n # + padding - The padding\n # + tagSize - Tag size\n-# + return - Decrypted data or `Error` if key is invalid\n+# + return - Decrypted data or else error if key is invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d7712f78179dc5af38ff3d9f4fd3e426111142"}, "originalPosition": 675}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4120, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}