{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MjQzMjM1", "number": 23560, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNDo1NToxN1rOEBl9rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzo0Nzo1NlrOECCkOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTA2MDI4OnYy", "diffSide": "RIGHT", "path": "misc/openapi-ballerina/modules/openapi-validator/src/main/java/org/ballerinalang/openapi/validator/OpenAPIPathSummary.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNDo1NToxN1rOGdiCrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNDo1NToxN1rOGdiCrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYxOTYzMQ==", "bodyText": "@lnash94 We can avoid this additional line", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23560#discussion_r433619631", "createdAt": "2020-06-02T04:55:17Z", "author": {"login": "keizer619"}, "path": "misc/openapi-ballerina/modules/openapi-validator/src/main/java/org/ballerinalang/openapi/validator/OpenAPIPathSummary.java", "diffHunk": "@@ -23,11 +23,12 @@\n import io.swagger.v3.oas.models.media.Schema;\n import io.swagger.v3.oas.models.parameters.Parameter;\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8907d319c06b161cf0107bfa9c8f786edbdd3954"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTA2NDc2OnYy", "diffSide": "RIGHT", "path": "misc/openapi-ballerina/modules/openapi-validator/src/main/java/org/ballerinalang/openapi/validator/Constants.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNDo1ODozNFrOGdiFeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNjozMjozOFrOGdj1dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyMDM0NA==", "bodyText": "Just wondering where we made these access modifiers as default intentionally?\nUsually it has to be public.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23560#discussion_r433620344", "createdAt": "2020-06-02T04:58:34Z", "author": {"login": "keizer619"}, "path": "misc/openapi-ballerina/modules/openapi-validator/src/main/java/org/ballerinalang/openapi/validator/Constants.java", "diffHunk": "@@ -40,4 +40,6 @@\n     static final String OPERATIONS = \"operations\";\n     static final String BODY = \"body\";\n     static final String FAILONERRORS = \"failOnErrors\";\n+    static final String EXCLUDETAGS = \"excludeTags\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8907d319c06b161cf0107bfa9c8f786edbdd3954"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY0ODYyMQ==", "bodyText": "not intensional i think... we can make them public as it cause no harm", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23560#discussion_r433648621", "createdAt": "2020-06-02T06:31:36Z", "author": {"login": "NipunaMarcus"}, "path": "misc/openapi-ballerina/modules/openapi-validator/src/main/java/org/ballerinalang/openapi/validator/Constants.java", "diffHunk": "@@ -40,4 +40,6 @@\n     static final String OPERATIONS = \"operations\";\n     static final String BODY = \"body\";\n     static final String FAILONERRORS = \"failOnErrors\";\n+    static final String EXCLUDETAGS = \"excludeTags\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyMDM0NA=="}, "originalCommit": {"oid": "8907d319c06b161cf0107bfa9c8f786edbdd3954"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY0OTAxNA==", "bodyText": "@lnash94 can you make these public.... follow the below example\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                static final String EXCLUDETAGS = \"excludeTags\";\n          \n          \n            \n                public static final String EXCLUDETAGS = \"excludeTags\";", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23560#discussion_r433649014", "createdAt": "2020-06-02T06:32:38Z", "author": {"login": "NipunaMarcus"}, "path": "misc/openapi-ballerina/modules/openapi-validator/src/main/java/org/ballerinalang/openapi/validator/Constants.java", "diffHunk": "@@ -40,4 +40,6 @@\n     static final String OPERATIONS = \"operations\";\n     static final String BODY = \"body\";\n     static final String FAILONERRORS = \"failOnErrors\";\n+    static final String EXCLUDETAGS = \"excludeTags\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyMDM0NA=="}, "originalCommit": {"oid": "8907d319c06b161cf0107bfa9c8f786edbdd3954"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTA2NTQ5OnYy", "diffSide": "RIGHT", "path": "misc/openapi-ballerina/modules/openapi-validator/src/main/java/org/ballerinalang/openapi/validator/ValidatorUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNDo1OTowOVrOGdiF8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNDo1OTowOVrOGdiF8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyMDQ2NQ==", "bodyText": "We can avoid these extra line", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23560#discussion_r433620465", "createdAt": "2020-06-02T04:59:09Z", "author": {"login": "keizer619"}, "path": "misc/openapi-ballerina/modules/openapi-validator/src/main/java/org/ballerinalang/openapi/validator/ValidatorUtil.java", "diffHunk": "@@ -700,4 +793,54 @@ private static String convertOpenAPITypeToBallerina(String type) {\n     private static Diagnostic.DiagnosticPosition getServiceNamePosition(ServiceNode serviceNode) {\n         return serviceNode.getName().getPosition();\n     }\n+\n+    private static void tagsFilter (ServiceNode serviceNode,\n+                                    OpenAPIPathSummary openApiSummary,\n+                                    List<String> tags,\n+                                    Diagnostic.Kind kind,\n+                                    Diagnostic.Kind kind1,\n+                                    Diagnostic.Kind kind2,\n+                                    DiagnosticLog dLog) {\n+        for (String method : openApiSummary.getAvailableOperations()) {\n+            if (openApiSummary.hasTags(tags, method)) {\n+                kind = kind1;\n+                break;\n+            } else {\n+                kind = kind2;\n+            }\n+        }\n+        dLog.logDiagnostic(kind, getServiceNamePosition(serviceNode),\n+                ErrorMessages.unimplementedOpenAPIPath(openApiSummary.getPath()));\n+    }\n+    //for Operation Filter\n+    private static void operationsFilter (ServiceNode serviceNode,\n+                                          OpenAPIPathSummary openApiSummary,\n+                                          List<String> operations,\n+                                          Diagnostic.Kind kind,\n+                                          Diagnostic.Kind kind1,\n+                                          Diagnostic.Kind kind2,\n+                                          DiagnosticLog dLog) {\n+        for (String method : openApiSummary.getAvailableOperations()) {\n+            if (openApiSummary.hasOperations(operations, method)) {\n+                kind = kind1;\n+                break;\n+            } else {\n+                kind = kind2;\n+            }\n+        }\n+        dLog.logDiagnostic(kind, getServiceNamePosition(serviceNode),\n+                ErrorMessages.unimplementedOpenAPIPath(openApiSummary.getPath()));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8907d319c06b161cf0107bfa9c8f786edbdd3954"}, "originalPosition": 368}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTc0NjUxOnYy", "diffSide": "RIGHT", "path": "misc/openapi-ballerina/modules/openapi-validator/src/main/java/org/ballerinalang/openapi/validator/OpenAPIValidatorPlugin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzo0Nzo1NlrOGeQDqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzo0Nzo1NlrOGeQDqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM3MzU0Ng==", "bodyText": "these can be moved into the error messages class I think... it will be much clear then....", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23560#discussion_r434373546", "createdAt": "2020-06-03T07:47:56Z", "author": {"login": "NipunaMarcus"}, "path": "misc/openapi-ballerina/modules/openapi-validator/src/main/java/org/ballerinalang/openapi/validator/OpenAPIValidatorPlugin.java", "diffHunk": "@@ -136,54 +139,30 @@ public void process(ServiceNode serviceNode, List<AnnotationAttachmentNode> anno\n                                     }\n                                 } else {\n                                     dLog.logDiagnostic(Diagnostic.Kind.ERROR, annotation.getPosition(),\n-                                                       \"Contract path should be applied as a string value\");\n+                                            \"Contract path should be applied as a string value\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdbc2e27f6ec5c3d30e0e40d1b7f258b57625e22"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3516, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}