{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNTMxOTc2", "number": 20604, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNDoxOTo0MlrODYYitA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNToxNjoxMFrODYY85A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODk0NTE2OnYy", "diffSide": "RIGHT", "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Slice.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNDoxOTo0MlrOFeNlbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwODozMTozMVrOFeRbJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIyNDE3Mg==", "bodyText": "I think the array slice should be directly supported by ArrayValue. That way we can use java's system.ArrayCopy which is a native JVM implementation and probably be much faster. Shall we create an issue for that.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20604#discussion_r367224172", "createdAt": "2020-01-16T04:19:42Z", "author": {"login": "rdhananjaya"}, "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Slice.java", "diffHunk": "@@ -77,7 +77,7 @@ public static ArrayValue slice(Strand strand, ArrayValue arr, long startIndex, l\n \n         switch (arrType.getTag()) {\n             case TypeTags.ARRAY_TAG:\n-                slicedArr = new ArrayValueImpl((BArrayType) arrType);\n+                slicedArr = new ArrayValueImpl((BArrayType) arrType, sliceSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6d34e6e636bf02945fb3eb9d3ccc173c729ec06"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIyNTY4OA==", "bodyText": "+1 for using System.arrayCopy()", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20604#discussion_r367225688", "createdAt": "2020-01-16T04:28:36Z", "author": {"login": "pubudu91"}, "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Slice.java", "diffHunk": "@@ -77,7 +77,7 @@ public static ArrayValue slice(Strand strand, ArrayValue arr, long startIndex, l\n \n         switch (arrType.getTag()) {\n             case TypeTags.ARRAY_TAG:\n-                slicedArr = new ArrayValueImpl((BArrayType) arrType);\n+                slicedArr = new ArrayValueImpl((BArrayType) arrType, sliceSize);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIyNDE3Mg=="}, "originalCommit": {"oid": "d6d34e6e636bf02945fb3eb9d3ccc173c729ec06"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4NzA3Nw==", "bodyText": "Created an issue to track this.\n#20632", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20604#discussion_r367287077", "createdAt": "2020-01-16T08:31:31Z", "author": {"login": "irshadnilam"}, "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Slice.java", "diffHunk": "@@ -77,7 +77,7 @@ public static ArrayValue slice(Strand strand, ArrayValue arr, long startIndex, l\n \n         switch (arrType.getTag()) {\n             case TypeTags.ARRAY_TAG:\n-                slicedArr = new ArrayValueImpl((BArrayType) arrType);\n+                slicedArr = new ArrayValueImpl((BArrayType) arrType, sliceSize);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIyNDE3Mg=="}, "originalCommit": {"oid": "d6d34e6e636bf02945fb3eb9d3ccc173c729ec06"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTAxMjIwOnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibArrayTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNToxNjoxMFrOFeOMkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwODoxNjozOFrOFeRDnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIzNDE5NQ==", "bodyText": "Can you add test cases for fixed-length arrays as well (if they aren't there)? Both positive and negative cases.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20604#discussion_r367234195", "createdAt": "2020-01-16T05:16:10Z", "author": {"login": "pubudu91"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibArrayTest.java", "diffHunk": "@@ -120,19 +120,39 @@ public void testSlice() {\n         assertEquals(arr.getFloat(0), 23.45);\n         assertEquals(arr.getFloat(1), 34.56);\n         assertEquals(arr.getFloat(2), 45.67);\n+        assertEquals(((BInteger) result.getRefValue(1)).intValue(), 3);\n \n-        arr = (BValueArray) result.getRefValue(1);\n+        arr = (BValueArray) result.getRefValue(2);\n         assertEquals(arr.elementType.getTag(), TypeTags.FLOAT_TAG);\n         assertEquals(arr.size(), 3);\n         assertEquals(arr.getFloat(0), 34.56);\n         assertEquals(arr.getFloat(1), 45.67);\n         assertEquals(arr.getFloat(2), 56.78);\n+        assertEquals(((BInteger) result.getRefValue(3)).intValue(), 3);\n \n-        arr = (BValueArray) result.getRefValue(2);\n+        arr = (BValueArray) result.getRefValue(4);\n         assertEquals(arr.elementType.getTag(), TypeTags.FLOAT_TAG);\n         assertEquals(arr.size(), 2);\n         assertEquals(arr.getFloat(0), 45.67);\n         assertEquals(arr.getFloat(1), 56.78);\n+        assertEquals(((BInteger) result.getRefValue(5)).intValue(), 2);\n+    }\n+\n+    @Test\n+    public void testPushAfterSlice() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e66c92b8a4049205c68dcaa58e0d38dfa2b62fb7"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4MTA1Mg==", "bodyText": "Added test cases for fixed-length.\nCurrently (with this PR) the result of slice function on a  fixed-length arrays also returns a non-fixed array. Hence, there aren't any negative cases.\nOnce this ballerina-platform/ballerina-spec#391 (comment) is clarified, i'll make the necessary changes and add the negative test cases.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20604#discussion_r367281052", "createdAt": "2020-01-16T08:16:38Z", "author": {"login": "irshadnilam"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibArrayTest.java", "diffHunk": "@@ -120,19 +120,39 @@ public void testSlice() {\n         assertEquals(arr.getFloat(0), 23.45);\n         assertEquals(arr.getFloat(1), 34.56);\n         assertEquals(arr.getFloat(2), 45.67);\n+        assertEquals(((BInteger) result.getRefValue(1)).intValue(), 3);\n \n-        arr = (BValueArray) result.getRefValue(1);\n+        arr = (BValueArray) result.getRefValue(2);\n         assertEquals(arr.elementType.getTag(), TypeTags.FLOAT_TAG);\n         assertEquals(arr.size(), 3);\n         assertEquals(arr.getFloat(0), 34.56);\n         assertEquals(arr.getFloat(1), 45.67);\n         assertEquals(arr.getFloat(2), 56.78);\n+        assertEquals(((BInteger) result.getRefValue(3)).intValue(), 3);\n \n-        arr = (BValueArray) result.getRefValue(2);\n+        arr = (BValueArray) result.getRefValue(4);\n         assertEquals(arr.elementType.getTag(), TypeTags.FLOAT_TAG);\n         assertEquals(arr.size(), 2);\n         assertEquals(arr.getFloat(0), 45.67);\n         assertEquals(arr.getFloat(1), 56.78);\n+        assertEquals(((BInteger) result.getRefValue(5)).intValue(), 2);\n+    }\n+\n+    @Test\n+    public void testPushAfterSlice() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIzNDE5NQ=="}, "originalCommit": {"oid": "e66c92b8a4049205c68dcaa58e0d38dfa2b62fb7"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 495, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}