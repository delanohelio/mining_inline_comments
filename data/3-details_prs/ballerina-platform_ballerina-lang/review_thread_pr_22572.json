{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxODI5NTE0", "number": 22572, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyMjo1MFrODwtYww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzoyMTowNFrODx8gRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDAxODU5OnYy", "diffSide": "RIGHT", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyMjo1MFrOGD28Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyMjo1MFrOGD28Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTAzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - `true` if the two strings are equsl or else `false`\n          \n          \n            \n            # + return - `true` if the two strings are equal or else `false`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r406699030", "createdAt": "2020-04-10T10:22:50Z", "author": {"login": "praneesha"}, "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -18,58 +18,80 @@ import ballerina/java;\n import ballerina/io;\n \n # Checks whether the given string contains a particular substring.\n-#\n-# + originalString - the original string\n-# + substring - string to match\n-# + return - `true` if the original string contains the substring or `false` otherwise\n+# ```ballerina\n+# boolean contains = stringutils:contains(\"Ballerina\", \"in\");\n+# ```\n+# + originalString - The string to check whether it contains the `substring`\n+# + substring - The substring to find within the `originalString`\n+# + return - `true` if the `originalString` contains the provided `substring`\n+#            or else `false`\n public function contains(string originalString, string substring) returns boolean {\n     return containsExternal(java:fromString(originalString), java:fromString(substring));\n }\n \n # Checks if two strings are equal, ignoring the case of the strings.\n+# ```ballerina\n+# boolean isEqual = stringutils:equalsIgnoreCase(\"BaLLerinA\", \"ballERina\");\n+# ```\n #\n-# + firstString - first string to compare\n-# + secondString - second string to compare\n-# + return - `true` if the two strings are the same or `false` if the strings do not match\n+# + firstString - The first string to compare\n+# + secondString - The second string to compare\n+# + return - `true` if the two strings are equsl or else `false`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d3292195244df6e1efbdca90feb89cc7c51aaa"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDAxOTI3OnYy", "diffSide": "RIGHT", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyMzoxM1rOGD28fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyMzoxM1rOGD28fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTEzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + stringToMatch - The string to match with the regex\n          \n          \n            \n            # + stringToMatch - The string to match the regex", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r406699135", "createdAt": "2020-04-10T10:23:13Z", "author": {"login": "praneesha"}, "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -18,58 +18,80 @@ import ballerina/java;\n import ballerina/io;\n \n # Checks whether the given string contains a particular substring.\n-#\n-# + originalString - the original string\n-# + substring - string to match\n-# + return - `true` if the original string contains the substring or `false` otherwise\n+# ```ballerina\n+# boolean contains = stringutils:contains(\"Ballerina\", \"in\");\n+# ```\n+# + originalString - The string to check whether it contains the `substring`\n+# + substring - The substring to find within the `originalString`\n+# + return - `true` if the `originalString` contains the provided `substring`\n+#            or else `false`\n public function contains(string originalString, string substring) returns boolean {\n     return containsExternal(java:fromString(originalString), java:fromString(substring));\n }\n \n # Checks if two strings are equal, ignoring the case of the strings.\n+# ```ballerina\n+# boolean isEqual = stringutils:equalsIgnoreCase(\"BaLLerinA\", \"ballERina\");\n+# ```\n #\n-# + firstString - first string to compare\n-# + secondString - second string to compare\n-# + return - `true` if the two strings are the same or `false` if the strings do not match\n+# + firstString - The first string to compare\n+# + secondString - The second string to compare\n+# + return - `true` if the two strings are equsl or else `false`\n public function equalsIgnoreCase(string firstString, string secondString) returns boolean {\n     return equalsIgnoreCaseExternal(java:fromString(firstString), java:fromString(secondString));\n }\n \n # Returns a hash code for a given string.\n+# ```ballerina\n+# int hashCode = stringutils:hashCode(\"Ballerina\");\n+# ```\n #\n-# + stringValue - string to generate the hash code\n-# + return - hash code for the given string\n+# + stringValue - The string to generate the hash code\n+# + return - The hash code for the given string\n public function hashCode(string stringValue) returns int {\n     return hashCodeExternal(java:fromString(stringValue));\n }\n \n # Returns the last index of the provided substring within a string.\n+# ```ballerina\n+# int lastIndex = stringutils:lastIndexOf(\"int values in Ballerina\", \"in\");\n+# ```\n #\n-# + originalString - the original string to search in\n-# + substring - string to look for\n-# + return - starting point of the last appearance of the provided substring\n+# + originalString - The string to search for the index of the `substring`\n+# + substring - The string to search in the `originalString`\n+# + return - Starting index of the last appearance of the provided substring\n+#            if the `originalString` contains the `substring` or else `-1`\n public function lastIndexOf(string originalString, string substring) returns int {\n     return lastIndexOfExternal(java:fromString(originalString), java:fromString(substring));\n }\n \n # Checks whether the given string matches with the provided regex.\n+# ```ballerina\n+# boolean isMatched = stringutils:matches(\"Ballerina is great\", \"Ba[a-z ]+\");\n+# ```\n #\n-# + stringToMatch - string to match with the regex\n-# + regex - regex to match with the string\n-# + return - `true` if the provided string is matched with the regex, `false` otherwise\n+# + stringToMatch - The string to match with the regex", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d3292195244df6e1efbdca90feb89cc7c51aaa"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDAxOTQ2OnYy", "diffSide": "RIGHT", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyMzoyMVrOGD28pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyMzoyMVrOGD28pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTE3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + regex - The regex to match with the string\n          \n          \n            \n            # + regex - The regex to match the string", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r406699173", "createdAt": "2020-04-10T10:23:21Z", "author": {"login": "praneesha"}, "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -18,58 +18,80 @@ import ballerina/java;\n import ballerina/io;\n \n # Checks whether the given string contains a particular substring.\n-#\n-# + originalString - the original string\n-# + substring - string to match\n-# + return - `true` if the original string contains the substring or `false` otherwise\n+# ```ballerina\n+# boolean contains = stringutils:contains(\"Ballerina\", \"in\");\n+# ```\n+# + originalString - The string to check whether it contains the `substring`\n+# + substring - The substring to find within the `originalString`\n+# + return - `true` if the `originalString` contains the provided `substring`\n+#            or else `false`\n public function contains(string originalString, string substring) returns boolean {\n     return containsExternal(java:fromString(originalString), java:fromString(substring));\n }\n \n # Checks if two strings are equal, ignoring the case of the strings.\n+# ```ballerina\n+# boolean isEqual = stringutils:equalsIgnoreCase(\"BaLLerinA\", \"ballERina\");\n+# ```\n #\n-# + firstString - first string to compare\n-# + secondString - second string to compare\n-# + return - `true` if the two strings are the same or `false` if the strings do not match\n+# + firstString - The first string to compare\n+# + secondString - The second string to compare\n+# + return - `true` if the two strings are equsl or else `false`\n public function equalsIgnoreCase(string firstString, string secondString) returns boolean {\n     return equalsIgnoreCaseExternal(java:fromString(firstString), java:fromString(secondString));\n }\n \n # Returns a hash code for a given string.\n+# ```ballerina\n+# int hashCode = stringutils:hashCode(\"Ballerina\");\n+# ```\n #\n-# + stringValue - string to generate the hash code\n-# + return - hash code for the given string\n+# + stringValue - The string to generate the hash code\n+# + return - The hash code for the given string\n public function hashCode(string stringValue) returns int {\n     return hashCodeExternal(java:fromString(stringValue));\n }\n \n # Returns the last index of the provided substring within a string.\n+# ```ballerina\n+# int lastIndex = stringutils:lastIndexOf(\"int values in Ballerina\", \"in\");\n+# ```\n #\n-# + originalString - the original string to search in\n-# + substring - string to look for\n-# + return - starting point of the last appearance of the provided substring\n+# + originalString - The string to search for the index of the `substring`\n+# + substring - The string to search in the `originalString`\n+# + return - Starting index of the last appearance of the provided substring\n+#            if the `originalString` contains the `substring` or else `-1`\n public function lastIndexOf(string originalString, string substring) returns int {\n     return lastIndexOfExternal(java:fromString(originalString), java:fromString(substring));\n }\n \n # Checks whether the given string matches with the provided regex.\n+# ```ballerina\n+# boolean isMatched = stringutils:matches(\"Ballerina is great\", \"Ba[a-z ]+\");\n+# ```\n #\n-# + stringToMatch - string to match with the regex\n-# + regex - regex to match with the string\n-# + return - `true` if the provided string is matched with the regex, `false` otherwise\n+# + stringToMatch - The string to match with the regex\n+# + regex - The regex to match with the string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d3292195244df6e1efbdca90feb89cc7c51aaa"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDAyMDA4OnYy", "diffSide": "RIGHT", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyMzozM1rOGD289Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyMzozM1rOGD289Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTI1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Replaces the each occurrence of the provided `substring` inside the provided\n          \n          \n            \n            # Replaces each occurrence of the provided `substring` inside the provided", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r406699253", "createdAt": "2020-04-10T10:23:33Z", "author": {"login": "praneesha"}, "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -18,58 +18,80 @@ import ballerina/java;\n import ballerina/io;\n \n # Checks whether the given string contains a particular substring.\n-#\n-# + originalString - the original string\n-# + substring - string to match\n-# + return - `true` if the original string contains the substring or `false` otherwise\n+# ```ballerina\n+# boolean contains = stringutils:contains(\"Ballerina\", \"in\");\n+# ```\n+# + originalString - The string to check whether it contains the `substring`\n+# + substring - The substring to find within the `originalString`\n+# + return - `true` if the `originalString` contains the provided `substring`\n+#            or else `false`\n public function contains(string originalString, string substring) returns boolean {\n     return containsExternal(java:fromString(originalString), java:fromString(substring));\n }\n \n # Checks if two strings are equal, ignoring the case of the strings.\n+# ```ballerina\n+# boolean isEqual = stringutils:equalsIgnoreCase(\"BaLLerinA\", \"ballERina\");\n+# ```\n #\n-# + firstString - first string to compare\n-# + secondString - second string to compare\n-# + return - `true` if the two strings are the same or `false` if the strings do not match\n+# + firstString - The first string to compare\n+# + secondString - The second string to compare\n+# + return - `true` if the two strings are equsl or else `false`\n public function equalsIgnoreCase(string firstString, string secondString) returns boolean {\n     return equalsIgnoreCaseExternal(java:fromString(firstString), java:fromString(secondString));\n }\n \n # Returns a hash code for a given string.\n+# ```ballerina\n+# int hashCode = stringutils:hashCode(\"Ballerina\");\n+# ```\n #\n-# + stringValue - string to generate the hash code\n-# + return - hash code for the given string\n+# + stringValue - The string to generate the hash code\n+# + return - The hash code for the given string\n public function hashCode(string stringValue) returns int {\n     return hashCodeExternal(java:fromString(stringValue));\n }\n \n # Returns the last index of the provided substring within a string.\n+# ```ballerina\n+# int lastIndex = stringutils:lastIndexOf(\"int values in Ballerina\", \"in\");\n+# ```\n #\n-# + originalString - the original string to search in\n-# + substring - string to look for\n-# + return - starting point of the last appearance of the provided substring\n+# + originalString - The string to search for the index of the `substring`\n+# + substring - The string to search in the `originalString`\n+# + return - Starting index of the last appearance of the provided substring\n+#            if the `originalString` contains the `substring` or else `-1`\n public function lastIndexOf(string originalString, string substring) returns int {\n     return lastIndexOfExternal(java:fromString(originalString), java:fromString(substring));\n }\n \n # Checks whether the given string matches with the provided regex.\n+# ```ballerina\n+# boolean isMatched = stringutils:matches(\"Ballerina is great\", \"Ba[a-z ]+\");\n+# ```\n #\n-# + stringToMatch - string to match with the regex\n-# + regex - regex to match with the string\n-# + return - `true` if the provided string is matched with the regex, `false` otherwise\n+# + stringToMatch - The string to match with the regex\n+# + regex - The regex to match with the string\n+# + return - `true` if the provided string is matched with the regex or else\n+#            `false`\n public function matches(string stringToMatch, string regex) returns boolean {\n     return matchesExternal(java:fromString(stringToMatch), java:fromString(regex));\n }\n \n-# Replaces each substring of the provided string, that matches the provided substring, with the specified replacement\n-# string.\n+# Replaces the each occurrence of the provided `substring` inside the provided", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d3292195244df6e1efbdca90feb89cc7c51aaa"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDAyMTE0OnYy", "diffSide": "RIGHT", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyNDowMVrOGD29iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyNDowMVrOGD29iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTQwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Replaces the each occurrence of substrings which matches the provided\n          \n          \n            \n            # Replaces each occurrence of substrings, which match the provided", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r406699401", "createdAt": "2020-04-10T10:24:01Z", "author": {"login": "praneesha"}, "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -80,13 +102,19 @@ public function replace(string originalString, string stringToReplace, string re\n     }\n }\n \n-# Replaces each substring which matches the given regular expression, from the given original string value, with the\n-# specified replacement string.\n+# Replaces the each occurrence of substrings which matches the provided", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d3292195244df6e1efbdca90feb89cc7c51aaa"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDAyMTc0OnYy", "diffSide": "RIGHT", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyNDoxMVrOGD292Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyNDoxMVrOGD292Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTQ4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # regular expression, from the given original string value, with the\n          \n          \n            \n            # regular expression from the given original string value with the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r406699481", "createdAt": "2020-04-10T10:24:11Z", "author": {"login": "praneesha"}, "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -80,13 +102,19 @@ public function replace(string originalString, string stringToReplace, string re\n     }\n }\n \n-# Replaces each substring which matches the given regular expression, from the given original string value, with the\n-# specified replacement string.\n+# Replaces the each occurrence of substrings which matches the provided\n+# regular expression, from the given original string value, with the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d3292195244df6e1efbdca90feb89cc7c51aaa"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDAyMjM1OnYy", "diffSide": "RIGHT", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyNDoyOVrOGD2-KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyNDoyOVrOGD2-KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTU2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #                    substrings that matches the provided `regex`\n          \n          \n            \n            #                    substrings that match the provided `regex`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r406699560", "createdAt": "2020-04-10T10:24:29Z", "author": {"login": "praneesha"}, "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -80,13 +102,19 @@ public function replace(string originalString, string stringToReplace, string re\n     }\n }\n \n-# Replaces each substring which matches the given regular expression, from the given original string value, with the\n-# specified replacement string.\n+# Replaces the each occurrence of substrings which matches the provided\n+# regular expression, from the given original string value, with the\n+# provided replacement string.\n+# ```ballerina\n+# string result = stringutils:replaceAll(\"Ballerina is great\", \"\\s+\", \"_\");\n+# ```\n #\n-# + originalString - original string\n-# + regex - Regex to find substrings to replace\n-# + replacement - the replacement string\n-# + return - the resultant string\n+# + originalString - The original string to replace the occurrences of the\n+#                    substrings that matches the provided `regex`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d3292195244df6e1efbdca90feb89cc7c51aaa"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDAyMjY2OnYy", "diffSide": "RIGHT", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyNDozOVrOGD2-Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyNDozOVrOGD2-Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTYwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + replacement - The `replacement` string to replace the subsgrings which\n          \n          \n            \n            # + replacement - The `replacement` string to replace the subsgrings, which", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r406699603", "createdAt": "2020-04-10T10:24:39Z", "author": {"login": "praneesha"}, "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -80,13 +102,19 @@ public function replace(string originalString, string stringToReplace, string re\n     }\n }\n \n-# Replaces each substring which matches the given regular expression, from the given original string value, with the\n-# specified replacement string.\n+# Replaces the each occurrence of substrings which matches the provided\n+# regular expression, from the given original string value, with the\n+# provided replacement string.\n+# ```ballerina\n+# string result = stringutils:replaceAll(\"Ballerina is great\", \"\\s+\", \"_\");\n+# ```\n #\n-# + originalString - original string\n-# + regex - Regex to find substrings to replace\n-# + replacement - the replacement string\n-# + return - the resultant string\n+# + originalString - The original string to replace the occurrences of the\n+#                    substrings that matches the provided `regex`\n+# + regex - The regex to match substrings in the `originalString` to replace\n+# + replacement - The `replacement` string to replace the subsgrings which", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d3292195244df6e1efbdca90feb89cc7c51aaa"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDAyMjg1OnYy", "diffSide": "RIGHT", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyNDo0NVrOGD2-bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyNDo0NVrOGD2-bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTYzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #                 matches the `regex`\n          \n          \n            \n            #                 match the `regex`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r406699630", "createdAt": "2020-04-10T10:24:45Z", "author": {"login": "praneesha"}, "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -80,13 +102,19 @@ public function replace(string originalString, string stringToReplace, string re\n     }\n }\n \n-# Replaces each substring which matches the given regular expression, from the given original string value, with the\n-# specified replacement string.\n+# Replaces the each occurrence of substrings which matches the provided\n+# regular expression, from the given original string value, with the\n+# provided replacement string.\n+# ```ballerina\n+# string result = stringutils:replaceAll(\"Ballerina is great\", \"\\s+\", \"_\");\n+# ```\n #\n-# + originalString - original string\n-# + regex - Regex to find substrings to replace\n-# + replacement - the replacement string\n-# + return - the resultant string\n+# + originalString - The original string to replace the occurrences of the\n+#                    substrings that matches the provided `regex`\n+# + regex - The regex to match substrings in the `originalString` to replace\n+# + replacement - The `replacement` string to replace the subsgrings which\n+#                 matches the `regex`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d3292195244df6e1efbdca90feb89cc7c51aaa"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDAyMzQwOnYy", "diffSide": "RIGHT", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyNDo1OFrOGD2-ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyNDo1OFrOGD2-ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTcwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Replaces the first substring that matches the given regular expression, with\n          \n          \n            \n            # Replaces the first substring that matches the given regular expression with", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r406699706", "createdAt": "2020-04-10T10:24:58Z", "author": {"login": "praneesha"}, "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -100,12 +128,19 @@ public function replaceAll(string originalString, string regex, string replaceme\n     }\n }\n \n-# Replaces the first substring that matches the given regular expression, with the specified replacement string.\n+# Replaces the first substring that matches the given regular expression, with", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d3292195244df6e1efbdca90feb89cc7c51aaa"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDAyMzc4OnYy", "diffSide": "RIGHT", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyNTowOVrOGD2-8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyNTowOVrOGD2-8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTc2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #                    substrings that matches the provided `regex`\n          \n          \n            \n            #                    substrings that match the provided `regex`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r406699761", "createdAt": "2020-04-10T10:25:09Z", "author": {"login": "praneesha"}, "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -100,12 +128,19 @@ public function replaceAll(string originalString, string regex, string replaceme\n     }\n }\n \n-# Replaces the first substring that matches the given regular expression, with the specified replacement string.\n+# Replaces the first substring that matches the given regular expression, with\n+# the provided `replacement` string.\n+# ```ballerina\n+# string result = stringutils:replaceFirst(\"Ballerina is great\", \"\\s+\", \"_\");\n+# ```\n #\n-# + originalString - the original string\n-# + regex - Regex to find substring to replace\n-# + replacement - the replacement string\n-# + return - the resultant string\n+# + originalString - The original string to replace the occurrences of the\n+#                    substrings that matches the provided `regex`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d3292195244df6e1efbdca90feb89cc7c51aaa"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDAyNDgxOnYy", "diffSide": "RIGHT", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyNTo0NlrOGD2_lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyNTo0NlrOGD2_lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTkyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #           replace\n          \n          \n            \n            #           be replaced", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r406699926", "createdAt": "2020-04-10T10:25:46Z", "author": {"login": "praneesha"}, "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -100,12 +128,19 @@ public function replaceAll(string originalString, string regex, string replaceme\n     }\n }\n \n-# Replaces the first substring that matches the given regular expression, with the specified replacement string.\n+# Replaces the first substring that matches the given regular expression, with\n+# the provided `replacement` string.\n+# ```ballerina\n+# string result = stringutils:replaceFirst(\"Ballerina is great\", \"\\s+\", \"_\");\n+# ```\n #\n-# + originalString - the original string\n-# + regex - Regex to find substring to replace\n-# + replacement - the replacement string\n-# + return - the resultant string\n+# + originalString - The original string to replace the occurrences of the\n+#                    substrings that matches the provided `regex`\n+# + regex - The regex to match the first substring in the `originalString` to\n+#           replace", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d3292195244df6e1efbdca90feb89cc7c51aaa"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDAyNTE0OnYy", "diffSide": "RIGHT", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyNTo1NFrOGD2_xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyNTo1NFrOGD2_xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5OTk3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + replacement - The `replacement` string to replace the first subsgring which\n          \n          \n            \n            # + replacement - The `replacement` string to replace the first subsgring, which", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r406699975", "createdAt": "2020-04-10T10:25:54Z", "author": {"login": "praneesha"}, "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -100,12 +128,19 @@ public function replaceAll(string originalString, string regex, string replaceme\n     }\n }\n \n-# Replaces the first substring that matches the given regular expression, with the specified replacement string.\n+# Replaces the first substring that matches the given regular expression, with\n+# the provided `replacement` string.\n+# ```ballerina\n+# string result = stringutils:replaceFirst(\"Ballerina is great\", \"\\s+\", \"_\");\n+# ```\n #\n-# + originalString - the original string\n-# + regex - Regex to find substring to replace\n-# + replacement - the replacement string\n-# + return - the resultant string\n+# + originalString - The original string to replace the occurrences of the\n+#                    substrings that matches the provided `regex`\n+# + regex - The regex to match the first substring in the `originalString` to\n+#           replace\n+# + replacement - The `replacement` string to replace the first subsgring which", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d3292195244df6e1efbdca90feb89cc7c51aaa"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDAyNjA1OnYy", "diffSide": "RIGHT", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyNjoyNlrOGD3AWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyNjoyNlrOGD3AWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwMDEyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An array of strings containing the splitted individual strings\n          \n          \n            \n            # + return - An array of strings containing the individual strings that are split", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r406700120", "createdAt": "2020-04-10T10:26:26Z", "author": {"login": "praneesha"}, "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -120,20 +155,28 @@ public function replaceFirst(string originalString, string regex, string replace\n     }\n }\n \n-# Splits a string using the given delimiter.\n+# Returns an array of strings by splitting a string using the provided\n+# delimiter.\n+# ```ballerina\n+# string[] result = stringutils:split(\"Ballerina is great\", \" \");\n+# ```\n #\n-# + receiver - the original string\n-# + delimiter - delimiter to split by\n-# + return - array of strings containing the split individual strings\n+# + receiver - The string to split\n+# + delimiter - The delimiter to split by\n+# + return - An array of strings containing the splitted individual strings", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d3292195244df6e1efbdca90feb89cc7c51aaa"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjk2ODY1OnYy", "diffSide": "RIGHT", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzoxNzoxNVrOGFsxag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzoxNzoxNVrOGFsxag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyOTYxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This module provides utility functions to manipulate built-in `string` data type. \n          \n          \n            \n            This module provides utility functions to manipulate the built-in `string` data type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r408629610", "createdAt": "2020-04-15T07:17:15Z", "author": {"login": "praneesha"}, "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/Module.md", "diffHunk": "@@ -1,51 +1,3 @@\n ## Module overview\n \n This module provides utility functions to manipulate built-in `string` data type. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b279f30d8cfcee00aa0d16480d2567ceab04f00"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjk3MDE1OnYy", "diffSide": "RIGHT", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzoxNzo0NlrOGFsyVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToyMjo1M1rOGF_BCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyOTg0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #            or else `false`\n          \n          \n            \n            #            or else `false` otherwise", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r408629846", "createdAt": "2020-04-15T07:17:46Z", "author": {"login": "praneesha"}, "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -18,58 +18,80 @@ import ballerina/java;\n import ballerina/io;\n \n # Checks whether the given string contains a particular substring.\n-#\n-# + originalString - the original string\n-# + substring - string to match\n-# + return - `true` if the original string contains the substring or `false` otherwise\n+# ```ballerina\n+# boolean contains = stringutils:contains(\"Ballerina\", \"in\");\n+# ```\n+# + originalString - The string to check whether it contains the `substring`\n+# + substring - The substring to find within the `originalString`\n+# + return - `true` if the `originalString` contains the provided `substring`\n+#            or else `false`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b279f30d8cfcee00aa0d16480d2567ceab04f00"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcxNTkxOQ==", "bodyText": "This is redundant. Also applies to the other places as well", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r408715919", "createdAt": "2020-04-15T09:45:28Z", "author": {"login": "ThisaruGuruge"}, "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -18,58 +18,80 @@ import ballerina/java;\n import ballerina/io;\n \n # Checks whether the given string contains a particular substring.\n-#\n-# + originalString - the original string\n-# + substring - string to match\n-# + return - `true` if the original string contains the substring or `false` otherwise\n+# ```ballerina\n+# boolean contains = stringutils:contains(\"Ballerina\", \"in\");\n+# ```\n+# + originalString - The string to check whether it contains the `substring`\n+# + substring - The substring to find within the `originalString`\n+# + return - `true` if the `originalString` contains the provided `substring`\n+#            or else `false`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyOTg0Ng=="}, "originalCommit": {"oid": "1b279f30d8cfcee00aa0d16480d2567ceab04f00"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyODUyMg==", "bodyText": "+1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r408928522", "createdAt": "2020-04-15T15:22:53Z", "author": {"login": "praneesha"}, "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -18,58 +18,80 @@ import ballerina/java;\n import ballerina/io;\n \n # Checks whether the given string contains a particular substring.\n-#\n-# + originalString - the original string\n-# + substring - string to match\n-# + return - `true` if the original string contains the substring or `false` otherwise\n+# ```ballerina\n+# boolean contains = stringutils:contains(\"Ballerina\", \"in\");\n+# ```\n+# + originalString - The string to check whether it contains the `substring`\n+# + substring - The substring to find within the `originalString`\n+# + return - `true` if the `originalString` contains the provided `substring`\n+#            or else `false`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyOTg0Ng=="}, "originalCommit": {"oid": "1b279f30d8cfcee00aa0d16480d2567ceab04f00"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjk3MDU3OnYy", "diffSide": "RIGHT", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzoxNzo1NFrOGFsymQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzoxNzo1NFrOGFsymQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyOTkxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Checks if two strings are equal, ignoring the case of the strings.\n          \n          \n            \n            # Checks if two strings are equal ignoring the case of the strings.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r408629913", "createdAt": "2020-04-15T07:17:54Z", "author": {"login": "praneesha"}, "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -18,58 +18,80 @@ import ballerina/java;\n import ballerina/io;\n \n # Checks whether the given string contains a particular substring.\n-#\n-# + originalString - the original string\n-# + substring - string to match\n-# + return - `true` if the original string contains the substring or `false` otherwise\n+# ```ballerina\n+# boolean contains = stringutils:contains(\"Ballerina\", \"in\");\n+# ```\n+# + originalString - The string to check whether it contains the `substring`\n+# + substring - The substring to find within the `originalString`\n+# + return - `true` if the `originalString` contains the provided `substring`\n+#            or else `false`\n public function contains(string originalString, string substring) returns boolean {\n     return containsExternal(java:fromString(originalString), java:fromString(substring));\n }\n \n # Checks if two strings are equal, ignoring the case of the strings.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b279f30d8cfcee00aa0d16480d2567ceab04f00"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjk3MTEwOnYy", "diffSide": "RIGHT", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzoxODowNFrOGFsy5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzoxODowNFrOGFsy5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYyOTk4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - `true` if the two strings are equal or else `false`\n          \n          \n            \n            # + return - `true` if the two strings are equal or else `false` otherwise", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r408629989", "createdAt": "2020-04-15T07:18:04Z", "author": {"login": "praneesha"}, "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -18,58 +18,80 @@ import ballerina/java;\n import ballerina/io;\n \n # Checks whether the given string contains a particular substring.\n-#\n-# + originalString - the original string\n-# + substring - string to match\n-# + return - `true` if the original string contains the substring or `false` otherwise\n+# ```ballerina\n+# boolean contains = stringutils:contains(\"Ballerina\", \"in\");\n+# ```\n+# + originalString - The string to check whether it contains the `substring`\n+# + substring - The substring to find within the `originalString`\n+# + return - `true` if the `originalString` contains the provided `substring`\n+#            or else `false`\n public function contains(string originalString, string substring) returns boolean {\n     return containsExternal(java:fromString(originalString), java:fromString(substring));\n }\n \n # Checks if two strings are equal, ignoring the case of the strings.\n+# ```ballerina\n+# boolean isEqual = stringutils:equalsIgnoreCase(\"BaLLerinA\", \"ballERina\");\n+# ```\n #\n-# + firstString - first string to compare\n-# + secondString - second string to compare\n-# + return - `true` if the two strings are the same or `false` if the strings do not match\n+# + firstString - The first string to compare\n+# + secondString - The second string to compare\n+# + return - `true` if the two strings are equal or else `false`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b279f30d8cfcee00aa0d16480d2567ceab04f00"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjk3MjYxOnYy", "diffSide": "RIGHT", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzoxODozMFrOGFsz1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzoxODozMFrOGFsz1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMDIzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Checks whether the given string matches with the provided regex.\n          \n          \n            \n            # Checks whether the given string matches the provided regex.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r408630230", "createdAt": "2020-04-15T07:18:30Z", "author": {"login": "praneesha"}, "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -18,58 +18,80 @@ import ballerina/java;\n import ballerina/io;\n \n # Checks whether the given string contains a particular substring.\n-#\n-# + originalString - the original string\n-# + substring - string to match\n-# + return - `true` if the original string contains the substring or `false` otherwise\n+# ```ballerina\n+# boolean contains = stringutils:contains(\"Ballerina\", \"in\");\n+# ```\n+# + originalString - The string to check whether it contains the `substring`\n+# + substring - The substring to find within the `originalString`\n+# + return - `true` if the `originalString` contains the provided `substring`\n+#            or else `false`\n public function contains(string originalString, string substring) returns boolean {\n     return containsExternal(java:fromString(originalString), java:fromString(substring));\n }\n \n # Checks if two strings are equal, ignoring the case of the strings.\n+# ```ballerina\n+# boolean isEqual = stringutils:equalsIgnoreCase(\"BaLLerinA\", \"ballERina\");\n+# ```\n #\n-# + firstString - first string to compare\n-# + secondString - second string to compare\n-# + return - `true` if the two strings are the same or `false` if the strings do not match\n+# + firstString - The first string to compare\n+# + secondString - The second string to compare\n+# + return - `true` if the two strings are equal or else `false`\n public function equalsIgnoreCase(string firstString, string secondString) returns boolean {\n     return equalsIgnoreCaseExternal(java:fromString(firstString), java:fromString(secondString));\n }\n \n # Returns a hash code for a given string.\n+# ```ballerina\n+# int hashCode = stringutils:hashCode(\"Ballerina\");\n+# ```\n #\n-# + stringValue - string to generate the hash code\n-# + return - hash code for the given string\n+# + stringValue - The string to generate the hash code\n+# + return - The hash code for the given string\n public function hashCode(string stringValue) returns int {\n     return hashCodeExternal(java:fromString(stringValue));\n }\n \n # Returns the last index of the provided substring within a string.\n+# ```ballerina\n+# int lastIndex = stringutils:lastIndexOf(\"int values in Ballerina\", \"in\");\n+# ```\n #\n-# + originalString - the original string to search in\n-# + substring - string to look for\n-# + return - starting point of the last appearance of the provided substring\n+# + originalString - The string to search for the index of the `substring`\n+# + substring - The string to search in the `originalString`\n+# + return - Starting index of the last appearance of the provided substring\n+#            if the `originalString` contains the `substring` or else `-1`\n public function lastIndexOf(string originalString, string substring) returns int {\n     return lastIndexOfExternal(java:fromString(originalString), java:fromString(substring));\n }\n \n # Checks whether the given string matches with the provided regex.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b279f30d8cfcee00aa0d16480d2567ceab04f00"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjk3MzQ5OnYy", "diffSide": "RIGHT", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzoxODo0NVrOGFs0XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzoxODo0NVrOGFs0XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMDM2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - `true` if the provided string is matched with the regex or else\n          \n          \n            \n            # + return - `true` if the provided string matches the regex or else", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r408630364", "createdAt": "2020-04-15T07:18:45Z", "author": {"login": "praneesha"}, "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -18,58 +18,80 @@ import ballerina/java;\n import ballerina/io;\n \n # Checks whether the given string contains a particular substring.\n-#\n-# + originalString - the original string\n-# + substring - string to match\n-# + return - `true` if the original string contains the substring or `false` otherwise\n+# ```ballerina\n+# boolean contains = stringutils:contains(\"Ballerina\", \"in\");\n+# ```\n+# + originalString - The string to check whether it contains the `substring`\n+# + substring - The substring to find within the `originalString`\n+# + return - `true` if the `originalString` contains the provided `substring`\n+#            or else `false`\n public function contains(string originalString, string substring) returns boolean {\n     return containsExternal(java:fromString(originalString), java:fromString(substring));\n }\n \n # Checks if two strings are equal, ignoring the case of the strings.\n+# ```ballerina\n+# boolean isEqual = stringutils:equalsIgnoreCase(\"BaLLerinA\", \"ballERina\");\n+# ```\n #\n-# + firstString - first string to compare\n-# + secondString - second string to compare\n-# + return - `true` if the two strings are the same or `false` if the strings do not match\n+# + firstString - The first string to compare\n+# + secondString - The second string to compare\n+# + return - `true` if the two strings are equal or else `false`\n public function equalsIgnoreCase(string firstString, string secondString) returns boolean {\n     return equalsIgnoreCaseExternal(java:fromString(firstString), java:fromString(secondString));\n }\n \n # Returns a hash code for a given string.\n+# ```ballerina\n+# int hashCode = stringutils:hashCode(\"Ballerina\");\n+# ```\n #\n-# + stringValue - string to generate the hash code\n-# + return - hash code for the given string\n+# + stringValue - The string to generate the hash code\n+# + return - The hash code for the given string\n public function hashCode(string stringValue) returns int {\n     return hashCodeExternal(java:fromString(stringValue));\n }\n \n # Returns the last index of the provided substring within a string.\n+# ```ballerina\n+# int lastIndex = stringutils:lastIndexOf(\"int values in Ballerina\", \"in\");\n+# ```\n #\n-# + originalString - the original string to search in\n-# + substring - string to look for\n-# + return - starting point of the last appearance of the provided substring\n+# + originalString - The string to search for the index of the `substring`\n+# + substring - The string to search in the `originalString`\n+# + return - Starting index of the last appearance of the provided substring\n+#            if the `originalString` contains the `substring` or else `-1`\n public function lastIndexOf(string originalString, string substring) returns int {\n     return lastIndexOfExternal(java:fromString(originalString), java:fromString(substring));\n }\n \n # Checks whether the given string matches with the provided regex.\n+# ```ballerina\n+# boolean isMatched = stringutils:matches(\"Ballerina is great\", \"Ba[a-z ]+\");\n+# ```\n #\n-# + stringToMatch - string to match with the regex\n-# + regex - regex to match with the string\n-# + return - `true` if the provided string is matched with the regex, `false` otherwise\n+# + stringToMatch - The string to match the regex\n+# + regex - The regex to match the string\n+# + return - `true` if the provided string is matched with the regex or else", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b279f30d8cfcee00aa0d16480d2567ceab04f00"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjk3MzkzOnYy", "diffSide": "RIGHT", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzoxODo1M1rOGFs0mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzoxODo1M1rOGFs0mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMDQyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #            `false`\n          \n          \n            \n            #            `false` otherwise", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r408630427", "createdAt": "2020-04-15T07:18:53Z", "author": {"login": "praneesha"}, "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -18,58 +18,80 @@ import ballerina/java;\n import ballerina/io;\n \n # Checks whether the given string contains a particular substring.\n-#\n-# + originalString - the original string\n-# + substring - string to match\n-# + return - `true` if the original string contains the substring or `false` otherwise\n+# ```ballerina\n+# boolean contains = stringutils:contains(\"Ballerina\", \"in\");\n+# ```\n+# + originalString - The string to check whether it contains the `substring`\n+# + substring - The substring to find within the `originalString`\n+# + return - `true` if the `originalString` contains the provided `substring`\n+#            or else `false`\n public function contains(string originalString, string substring) returns boolean {\n     return containsExternal(java:fromString(originalString), java:fromString(substring));\n }\n \n # Checks if two strings are equal, ignoring the case of the strings.\n+# ```ballerina\n+# boolean isEqual = stringutils:equalsIgnoreCase(\"BaLLerinA\", \"ballERina\");\n+# ```\n #\n-# + firstString - first string to compare\n-# + secondString - second string to compare\n-# + return - `true` if the two strings are the same or `false` if the strings do not match\n+# + firstString - The first string to compare\n+# + secondString - The second string to compare\n+# + return - `true` if the two strings are equal or else `false`\n public function equalsIgnoreCase(string firstString, string secondString) returns boolean {\n     return equalsIgnoreCaseExternal(java:fromString(firstString), java:fromString(secondString));\n }\n \n # Returns a hash code for a given string.\n+# ```ballerina\n+# int hashCode = stringutils:hashCode(\"Ballerina\");\n+# ```\n #\n-# + stringValue - string to generate the hash code\n-# + return - hash code for the given string\n+# + stringValue - The string to generate the hash code\n+# + return - The hash code for the given string\n public function hashCode(string stringValue) returns int {\n     return hashCodeExternal(java:fromString(stringValue));\n }\n \n # Returns the last index of the provided substring within a string.\n+# ```ballerina\n+# int lastIndex = stringutils:lastIndexOf(\"int values in Ballerina\", \"in\");\n+# ```\n #\n-# + originalString - the original string to search in\n-# + substring - string to look for\n-# + return - starting point of the last appearance of the provided substring\n+# + originalString - The string to search for the index of the `substring`\n+# + substring - The string to search in the `originalString`\n+# + return - Starting index of the last appearance of the provided substring\n+#            if the `originalString` contains the `substring` or else `-1`\n public function lastIndexOf(string originalString, string substring) returns int {\n     return lastIndexOfExternal(java:fromString(originalString), java:fromString(substring));\n }\n \n # Checks whether the given string matches with the provided regex.\n+# ```ballerina\n+# boolean isMatched = stringutils:matches(\"Ballerina is great\", \"Ba[a-z ]+\");\n+# ```\n #\n-# + stringToMatch - string to match with the regex\n-# + regex - regex to match with the string\n-# + return - `true` if the provided string is matched with the regex, `false` otherwise\n+# + stringToMatch - The string to match the regex\n+# + regex - The regex to match the string\n+# + return - `true` if the provided string is matched with the regex or else\n+#            `false`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b279f30d8cfcee00aa0d16480d2567ceab04f00"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjk3NTA3OnYy", "diffSide": "RIGHT", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzoxOToxMFrOGFs1Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzoxOToxMFrOGFs1Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMDU5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #                 `stringToReplace`\n          \n          \n            \n            #                 the `stringToReplace`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r408630598", "createdAt": "2020-04-15T07:19:10Z", "author": {"login": "praneesha"}, "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -18,58 +18,80 @@ import ballerina/java;\n import ballerina/io;\n \n # Checks whether the given string contains a particular substring.\n-#\n-# + originalString - the original string\n-# + substring - string to match\n-# + return - `true` if the original string contains the substring or `false` otherwise\n+# ```ballerina\n+# boolean contains = stringutils:contains(\"Ballerina\", \"in\");\n+# ```\n+# + originalString - The string to check whether it contains the `substring`\n+# + substring - The substring to find within the `originalString`\n+# + return - `true` if the `originalString` contains the provided `substring`\n+#            or else `false`\n public function contains(string originalString, string substring) returns boolean {\n     return containsExternal(java:fromString(originalString), java:fromString(substring));\n }\n \n # Checks if two strings are equal, ignoring the case of the strings.\n+# ```ballerina\n+# boolean isEqual = stringutils:equalsIgnoreCase(\"BaLLerinA\", \"ballERina\");\n+# ```\n #\n-# + firstString - first string to compare\n-# + secondString - second string to compare\n-# + return - `true` if the two strings are the same or `false` if the strings do not match\n+# + firstString - The first string to compare\n+# + secondString - The second string to compare\n+# + return - `true` if the two strings are equal or else `false`\n public function equalsIgnoreCase(string firstString, string secondString) returns boolean {\n     return equalsIgnoreCaseExternal(java:fromString(firstString), java:fromString(secondString));\n }\n \n # Returns a hash code for a given string.\n+# ```ballerina\n+# int hashCode = stringutils:hashCode(\"Ballerina\");\n+# ```\n #\n-# + stringValue - string to generate the hash code\n-# + return - hash code for the given string\n+# + stringValue - The string to generate the hash code\n+# + return - The hash code for the given string\n public function hashCode(string stringValue) returns int {\n     return hashCodeExternal(java:fromString(stringValue));\n }\n \n # Returns the last index of the provided substring within a string.\n+# ```ballerina\n+# int lastIndex = stringutils:lastIndexOf(\"int values in Ballerina\", \"in\");\n+# ```\n #\n-# + originalString - the original string to search in\n-# + substring - string to look for\n-# + return - starting point of the last appearance of the provided substring\n+# + originalString - The string to search for the index of the `substring`\n+# + substring - The string to search in the `originalString`\n+# + return - Starting index of the last appearance of the provided substring\n+#            if the `originalString` contains the `substring` or else `-1`\n public function lastIndexOf(string originalString, string substring) returns int {\n     return lastIndexOfExternal(java:fromString(originalString), java:fromString(substring));\n }\n \n # Checks whether the given string matches with the provided regex.\n+# ```ballerina\n+# boolean isMatched = stringutils:matches(\"Ballerina is great\", \"Ba[a-z ]+\");\n+# ```\n #\n-# + stringToMatch - string to match with the regex\n-# + regex - regex to match with the string\n-# + return - `true` if the provided string is matched with the regex, `false` otherwise\n+# + stringToMatch - The string to match the regex\n+# + regex - The regex to match the string\n+# + return - `true` if the provided string is matched with the regex or else\n+#            `false`\n public function matches(string stringToMatch, string regex) returns boolean {\n     return matchesExternal(java:fromString(stringToMatch), java:fromString(regex));\n }\n \n-# Replaces each substring of the provided string, that matches the provided substring, with the specified replacement\n-# string.\n+# Replaces each occurrence of the provided `substring` inside the provided\n+# `originalString` with the specified `replacement` string.\n+# ```ballerina\n+# string result = stringutils:replace(\"Ballerina is great\", \" \", \"_\");\n+# ```\n #\n-# + originalString - original string\n-# + stringToReplace - string to replace\n-# + replacement - replacement string\n-# + return - the resultant string\n+# + originalString - The original string to replace the substrings\n+# + stringToReplace - The string to replace within the `originalString`\n+# + replacement - The `replacement` string to replace the occurrences of\n+#                 `stringToReplace`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b279f30d8cfcee00aa0d16480d2567ceab04f00"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjk3NTc4OnYy", "diffSide": "RIGHT", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzoxOToyNFrOGFs1ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzoxOToyNFrOGFs1ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMDcyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Replaces each occurrence of substrings, which match the provided\n          \n          \n            \n            # Replaces each occurrence of the substrings, which matches the provided", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r408630723", "createdAt": "2020-04-15T07:19:24Z", "author": {"login": "praneesha"}, "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -80,13 +102,19 @@ public function replace(string originalString, string stringToReplace, string re\n     }\n }\n \n-# Replaces each substring which matches the given regular expression, from the given original string value, with the\n-# specified replacement string.\n+# Replaces each occurrence of substrings, which match the provided", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b279f30d8cfcee00aa0d16480d2567ceab04f00"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjk3NzgyOnYy", "diffSide": "RIGHT", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzoyMDowOVrOGFs3FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzoyMDowOVrOGFs3FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMTA2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + regex - The regex to match substrings in the `originalString` to replace\n          \n          \n            \n            # + regex - The regex to match the substrings in the `originalString` to be replaced", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r408631061", "createdAt": "2020-04-15T07:20:09Z", "author": {"login": "praneesha"}, "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -80,13 +102,19 @@ public function replace(string originalString, string stringToReplace, string re\n     }\n }\n \n-# Replaces each substring which matches the given regular expression, from the given original string value, with the\n-# specified replacement string.\n+# Replaces each occurrence of substrings, which match the provided\n+# regular expression from the given original string value with the\n+# provided replacement string.\n+# ```ballerina\n+# string result = stringutils:replaceAll(\"Ballerina is great\", \"\\s+\", \"_\");\n+# ```\n #\n-# + originalString - original string\n-# + regex - Regex to find substrings to replace\n-# + replacement - the replacement string\n-# + return - the resultant string\n+# + originalString - The original string to replace the occurrences of the\n+#                    substrings that match the provided `regex`\n+# + regex - The regex to match substrings in the `originalString` to replace", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b279f30d8cfcee00aa0d16480d2567ceab04f00"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjk3OTY1OnYy", "diffSide": "RIGHT", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzoyMDozOVrOGFs4Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzoyMDozOVrOGFs4Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMTM1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + replacement - The `replacement` string to replace the first subsgring, which\n          \n          \n            \n            # + replacement - The `replacement` string to replace the first substring, which", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r408631359", "createdAt": "2020-04-15T07:20:39Z", "author": {"login": "praneesha"}, "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -100,12 +128,19 @@ public function replaceAll(string originalString, string regex, string replaceme\n     }\n }\n \n-# Replaces the first substring that matches the given regular expression, with the specified replacement string.\n+# Replaces the first substring that matches the given regular expression with\n+# the provided `replacement` string.\n+# ```ballerina\n+# string result = stringutils:replaceFirst(\"Ballerina is great\", \"\\s+\", \"_\");\n+# ```\n #\n-# + originalString - the original string\n-# + regex - Regex to find substring to replace\n-# + replacement - the replacement string\n-# + return - the resultant string\n+# + originalString - The original string to replace the occurrences of the\n+#                    substrings that match the provided `regex`\n+# + regex - The regex to match the first substring in the `originalString` to\n+#           be replaced\n+# + replacement - The `replacement` string to replace the first subsgring, which", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b279f30d8cfcee00aa0d16480d2567ceab04f00"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjk4MTE4OnYy", "diffSide": "RIGHT", "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzoyMTowNFrOGFs5LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo0Njo1OFrOGFtwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMTU5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #            or else `false`\n          \n          \n            \n            #            or else `false` otherwise", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r408631597", "createdAt": "2020-04-15T07:21:04Z", "author": {"login": "praneesha"}, "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -120,20 +155,28 @@ public function replaceFirst(string originalString, string regex, string replace\n     }\n }\n \n-# Splits a string using the given delimiter.\n+# Returns an array of strings by splitting a string using the provided\n+# delimiter.\n+# ```ballerina\n+# string[] result = stringutils:split(\"Ballerina is great\", \" \");\n+# ```\n #\n-# + receiver - the original string\n-# + delimiter - delimiter to split by\n-# + return - array of strings containing the split individual strings\n+# + receiver - The string to split\n+# + delimiter - The delimiter to split by\n+# + return - An array of strings containing the individual strings that are split\n public function split(string receiver, string delimiter) returns string[] {\n     handle res = splitExternal(java:fromString(receiver), java:fromString(delimiter));\n     return getBallerinaStringArray(res);\n }\n \n # Returns a boolean value of a given string.\n+# ```ballerina\n+# boolean result = stringutils:toBoolean(\"true\");\n+# ```\n #\n # + stringValue - string value to convert to a boolean\n-# + return - `true` is the string is `\"true\"` (without considering the case), returns `false` otherwise\n+# + return - `true` if the string is `\"true\"` (without considering the case)\n+#            or else `false`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b279f30d8cfcee00aa0d16480d2567ceab04f00"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MTIyMw==", "bodyText": "I think otherwise is redundant here.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r408641223", "createdAt": "2020-04-15T07:39:03Z", "author": {"login": "ThisaruGuruge"}, "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -120,20 +155,28 @@ public function replaceFirst(string originalString, string regex, string replace\n     }\n }\n \n-# Splits a string using the given delimiter.\n+# Returns an array of strings by splitting a string using the provided\n+# delimiter.\n+# ```ballerina\n+# string[] result = stringutils:split(\"Ballerina is great\", \" \");\n+# ```\n #\n-# + receiver - the original string\n-# + delimiter - delimiter to split by\n-# + return - array of strings containing the split individual strings\n+# + receiver - The string to split\n+# + delimiter - The delimiter to split by\n+# + return - An array of strings containing the individual strings that are split\n public function split(string receiver, string delimiter) returns string[] {\n     handle res = splitExternal(java:fromString(receiver), java:fromString(delimiter));\n     return getBallerinaStringArray(res);\n }\n \n # Returns a boolean value of a given string.\n+# ```ballerina\n+# boolean result = stringutils:toBoolean(\"true\");\n+# ```\n #\n # + stringValue - string value to convert to a boolean\n-# + return - `true` is the string is `\"true\"` (without considering the case), returns `false` otherwise\n+# + return - `true` if the string is `\"true\"` (without considering the case)\n+#            or else `false`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMTU5Nw=="}, "originalCommit": {"oid": "1b279f30d8cfcee00aa0d16480d2567ceab04f00"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0NTY4Ng==", "bodyText": "+1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22572#discussion_r408645686", "createdAt": "2020-04-15T07:46:58Z", "author": {"login": "praneesha"}, "path": "stdlib/stringutils/src/main/ballerina/src/stringutils/natives.bal", "diffHunk": "@@ -120,20 +155,28 @@ public function replaceFirst(string originalString, string regex, string replace\n     }\n }\n \n-# Splits a string using the given delimiter.\n+# Returns an array of strings by splitting a string using the provided\n+# delimiter.\n+# ```ballerina\n+# string[] result = stringutils:split(\"Ballerina is great\", \" \");\n+# ```\n #\n-# + receiver - the original string\n-# + delimiter - delimiter to split by\n-# + return - array of strings containing the split individual strings\n+# + receiver - The string to split\n+# + delimiter - The delimiter to split by\n+# + return - An array of strings containing the individual strings that are split\n public function split(string receiver, string delimiter) returns string[] {\n     handle res = splitExternal(java:fromString(receiver), java:fromString(delimiter));\n     return getBallerinaStringArray(res);\n }\n \n # Returns a boolean value of a given string.\n+# ```ballerina\n+# boolean result = stringutils:toBoolean(\"true\");\n+# ```\n #\n # + stringValue - string value to convert to a boolean\n-# + return - `true` is the string is `\"true\"` (without considering the case), returns `false` otherwise\n+# + return - `true` if the string is `\"true\"` (without considering the case)\n+#            or else `false`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzMTU5Nw=="}, "originalCommit": {"oid": "1b279f30d8cfcee00aa0d16480d2567ceab04f00"}, "originalPosition": 184}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4241, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}