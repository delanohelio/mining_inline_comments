{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxNjU3MDcw", "number": 27544, "title": "Allow `readonly` intersection types with classes and allow `readonly class` types in `readonly` record fields", "bodyText": "Purpose\nThis PR\n\nAllows readonly intersection types with classes if the class' field types are compatible.\n\nreadonly class ReadOnlyClass {\n    int i = 1;\n}\n\nclass NonReadOnlyClass {\n    int i = 2;\n}\n\nclass NeverReadOnlyClass {\n    stream<int> str = (<int[]> [1, 2]).toStream();\n}\n\npublic function main() {\n    ReadOnlyClass & readonly a = new ReadOnlyClass(); // Valid\n\n    ReadOnlyClass & readonly b = object { // Valid\n        int i = 10;\n        int j = 20;\n    };\n\n    NonReadOnlyClass & readonly c = new ReadOnlyClass(); // Valid\n\n    // NonReadOnlyClass & readonly d = new NonReadOnlyClass(); // Error because `new NonReadOnlyClass()` does\n                                                               // not create an immutable value.\n\n    // NeverReadOnlyClass & readonly e = new; // Error because `NeverReadOnlyClass` can never be immutable.\n}\nSince intersections with classes result in types (as opposed to classes) it is not possible to use new with such an intersection.\nreadonly class ReadOnlyClass {\n    int i = 1;\n}\n\nclass NonReadOnlyClass {\n    int i = 2;\n}\n\npublic function main() {\n    ReadOnlyClass & readonly a = new; // Error\n\n    NonReadOnlyClass & readonly b = new; // Error\n}\nFixes #27527\n\nAllows readonly classes as readonly field types of records\n\nreadonly class Foo {\n    int i = 1;\n}\n\nclass Bar { // Also a `readonly` class because all the fields are immutable\n    final int i = 1;\n}\n\ntype Baz record {|\n    readonly Foo a;\n    readonly Bar b = new;\n|};\n\npublic function main() {\n    Baz w = {a: new};\n    Baz x = {a: new, b: new};\n    Baz y = {\n        a: new, \n        b: object {\n            final int i = 10;\n            final boolean j = true;\n        }\n    };\n    Baz z = {\n        a: object {\n            final int i = 101;\n            final int j;\n\n            function init() {\n                self.j = 202;\n            }\n        }, \n        b: object {\n            final int i = 300;\n            final boolean j = true;\n        }        \n    };\n}\nFixes #24702\n\nSets the read-only bit for closed anonymous record types with all readonly fields\n\nThe following is now allowed.\npublic function main() {\n    record {| \n        readonly string s;\n        readonly int i;\n    |} rec = {\n        s: \"anon record\",\n        i: 1\n    };\n\n    readonly rdRec = rec;\n}\nFixes #24475\nRemarks\nCame across #27583 when fixing #24475.\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-12-17T07:08:06Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27544", "merged": true, "mergeCommit": {"oid": "81d3c0f71e8645cf010f80a3cd56de6fb264a6f7"}, "closed": true, "closedAt": "2021-01-07T03:49:56Z", "author": {"login": "MaryamZi"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmxeChgH2gAyNTQxNjU3MDcwOmMyMmQ2NjVjNGQwNDlmZmU2Y2ExMTRkNmFhNGFjMzE0OTQxYWU5MTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdthXTigFqTU2MjgwNjI0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c22d665c4d049ffe6ca114d6aa4ac314941ae913", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c22d665c4d049ffe6ca114d6aa4ac314941ae913", "committedDate": "2020-12-16T16:24:31Z", "message": "Fix using readonly with classes\n\nAllow using readonly intersections with classes and allow using a readonly class as the type of a readonly record field."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a57e8d8413e162f32561ffe1a53bdd6217b15b9", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1a57e8d8413e162f32561ffe1a53bdd6217b15b9", "committedDate": "2020-12-16T17:20:06Z", "message": "Fix all field compatibility check and fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1dd4a31d076971a16593bcfcb91e6c44c9f18ba5", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1dd4a31d076971a16593bcfcb91e6c44c9f18ba5", "committedDate": "2020-12-17T04:04:12Z", "message": "Merge branch 'master' of https://github.com/ballerina-lang/ballerina into fix-readonly-deviations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86f556b2975a781922133c7e82ae18485acc4550", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/86f556b2975a781922133c7e82ae18485acc4550", "committedDate": "2020-12-17T05:09:19Z", "message": "Add tests for classes as readonly record fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07010e33df9952eeeb4382dc737fd124016dad5d", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/07010e33df9952eeeb4382dc737fd124016dad5d", "committedDate": "2020-12-17T06:28:20Z", "message": "Add tests for readonly intersections with classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "864da4a1918875ab9795025a6d844de4607ef3fc", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/864da4a1918875ab9795025a6d844de4607ef3fc", "committedDate": "2020-12-17T07:00:40Z", "message": "Add readonly record field test for implicitly readonly class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2d75b370bb0fcb653e4799adde573f6a2ba5b75", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b2d75b370bb0fcb653e4799adde573f6a2ba5b75", "committedDate": "2020-12-18T04:53:18Z", "message": "Merge branch 'master' of https://github.com/ballerina-lang/ballerina into fix-readonly-deviations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "647e8c2a9f0e55ab8aecb17200e5bea7ae143240", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/647e8c2a9f0e55ab8aecb17200e5bea7ae143240", "committedDate": "2020-12-18T14:22:45Z", "message": "Fix readonly flag not being set for compliant anon records"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71afbb5e3a798394d8720888807a455453300853", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/71afbb5e3a798394d8720888807a455453300853", "committedDate": "2020-12-18T15:03:36Z", "message": "Add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "983501c704a0447b3e5b0f66d17b335c38ac22f6", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/983501c704a0447b3e5b0f66d17b335c38ac22f6", "committedDate": "2021-01-04T05:26:23Z", "message": "Merge branch 'master' of https://github.com/ballerina-lang/ballerina into fix-readonly-deviations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyNTcyMzEw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27544#pullrequestreview-562572310", "createdAt": "2021-01-06T10:59:20Z", "commit": {"oid": "983501c704a0447b3e5b0f66d17b335c38ac22f6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMDo1OToyMFrOIO6Yzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMDo1OToyMFrOIO6Yzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUwNzU5OA==", "bodyText": "Can we extract a method here", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27544#discussion_r552507598", "createdAt": "2021-01-06T10:59:20Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -602,7 +607,53 @@ public void visit(BLangObjectTypeNode objectTypeNode) {\n     @Override\n     public void visit(BLangRecordTypeNode recordTypeNode) {\n         SymbolEnv recordEnv = SymbolEnv.createTypeEnv(recordTypeNode, recordTypeNode.symbol.scope, env);\n-        recordTypeNode.fields.forEach(field -> analyzeDef(field, recordEnv));\n+\n+        BType type = recordTypeNode.type;\n+\n+        boolean isRecordType = false;\n+        LinkedHashMap<String, BField> fields = null;\n+\n+        boolean allReadOnlyFields = false;\n+\n+        if (type.tag == TypeTags.RECORD) {\n+            isRecordType = true;\n+\n+            BRecordType recordType = (BRecordType) type;\n+            fields = recordType.fields;\n+            allReadOnlyFields = recordType.sealed;\n+        }\n+\n+        for (BLangSimpleVariable field : recordTypeNode.fields) {\n+            if (field.flagSet.contains(Flag.READONLY)) {\n+                BType fieldType = field.type;\n+\n+                if (fieldType == symTable.semanticError) {\n+                    continue;\n+                }\n+\n+                BType readOnlyFieldType = getReadOnlyFieldType(field.pos, fieldType);\n+\n+                if (readOnlyFieldType == symTable.semanticError) {\n+                    dlog.error(field.pos, DiagnosticErrorCode.INVALID_READONLY_FIELD_TYPE, fieldType);\n+                } else {\n+                    if (isRecordType) {\n+                        fields.get(field.name.value).type = readOnlyFieldType;\n+                    }\n+\n+                    field.type = field.symbol.type = readOnlyFieldType;\n+                }\n+            } else {\n+                allReadOnlyFields = false;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "983501c704a0447b3e5b0f66d17b335c38ac22f6"}, "originalPosition": 78}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6180f72a5ba0341ac93081b43df6f5e7ce2dc29f", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6180f72a5ba0341ac93081b43df6f5e7ce2dc29f", "committedDate": "2021-01-06T13:49:44Z", "message": "Resolve conflicts and merge branch 'master' of https://github.com/ballerina-lang/ballerina into fix-readonly-deviations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af704cb38e707b6ed10f05520e7e08936ec15fa2", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/af704cb38e707b6ed10f05520e7e08936ec15fa2", "committedDate": "2021-01-06T14:34:27Z", "message": "Refactor code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dd6fc00c1edd38b72badc85493ace669ca3bdbce", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dd6fc00c1edd38b72badc85493ace669ca3bdbce", "committedDate": "2021-01-06T13:58:17Z", "message": "Refactor code"}, "afterCommit": {"oid": "af704cb38e707b6ed10f05520e7e08936ec15fa2", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/af704cb38e707b6ed10f05520e7e08936ec15fa2", "committedDate": "2021-01-06T14:34:27Z", "message": "Refactor code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyODA2MjQ1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27544#pullrequestreview-562806245", "createdAt": "2021-01-06T15:36:09Z", "commit": {"oid": "af704cb38e707b6ed10f05520e7e08936ec15fa2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4626, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}