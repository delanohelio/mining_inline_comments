{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NzA2MzUw", "number": 21511, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjo0NzozM1rODlyOOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODo1Njo1MFrODm0HnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTQ2NzQ3OnYy", "diffSide": "RIGHT", "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjo0NzozM1rOFy3kNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjo0ODoxMVrOFy3lKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg4MzUxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (int i=0; i<str1.length(); i++) {\n          \n          \n            \n                    for (int i = 0; i <str1.length(); i++) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r388883511", "createdAt": "2020-03-06T12:47:33Z", "author": {"login": "anupama-pathirage"}, "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.util.Locale;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i=0; i<str1.length(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d33891839adec52f8bc23f337eb32048f8fe49"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg4Mzc1NQ==", "bodyText": "Isn't this captured as a check style issue during the build?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r388883755", "createdAt": "2020-03-06T12:48:11Z", "author": {"login": "anupama-pathirage"}, "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.util.Locale;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i=0; i<str1.length(); i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg4MzUxMQ=="}, "originalCommit": {"oid": "e3d33891839adec52f8bc23f337eb32048f8fe49"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzYxMTM3OnYy", "diffSide": "RIGHT", "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNzoxNzoyNFrOFzcwoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNzoxNzoyNFrOFzcwoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ5Mjg5Ng==", "bodyText": "How about just\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String charAtIfromOne = Character.toString(str1.charAt(i));\n          \n          \n            \n                        String charFromOne = Character.toString(str1.charAt(i));", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r389492896", "createdAt": "2020-03-09T07:17:24Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.util.Locale;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i=0; i<str1.length(); i++) {\n+            String charAtIfromOne = Character.toString(str1.charAt(i));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d33891839adec52f8bc23f337eb32048f8fe49"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzYxODcxOnYy", "diffSide": "RIGHT", "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNzoyMToxNVrOFzc08g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNzoyMToxNVrOFzc08g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ5NDAwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String charAtIfromTwo = Character.toString(str2.charAt(i));\n          \n          \n            \n                        String charFromTwo = Character.toString(str2.charAt(i));", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r389494002", "createdAt": "2020-03-09T07:21:15Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.util.Locale;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i=0; i<str1.length(); i++) {\n+            String charAtIfromOne = Character.toString(str1.charAt(i));\n+            String charAtIfromTwo = Character.toString(str2.charAt(i));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d33891839adec52f8bc23f337eb32048f8fe49"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzYyNDUwOnYy", "diffSide": "RIGHT", "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNzoyNDoyNVrOFzc4iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNzoyNDoyNVrOFzc4iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ5NDkyMQ==", "bodyText": "Can't we do\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        CharBuffer r = decoder.decode(ByteBuffer.wrap(byteArray));\n          \n          \n            \n                        r.toString();\n          \n          \n            \n                        decoder.decode(ByteBuffer.wrap(byteArray)).toString();", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r389494921", "createdAt": "2020-03-09T07:24:25Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.util.Locale;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i=0; i<str1.length(); i++) {\n+            String charAtIfromOne = Character.toString(str1.charAt(i));\n+            String charAtIfromTwo = Character.toString(str2.charAt(i));\n+            if (!(isPureAscii(charAtIfromOne) && isPureAscii(charAtIfromTwo))) {\n+                if (!charAtIfromOne.equals(charAtIfromTwo)) {\n+                    return false;\n+                }\n+            }\n+            if (!charAtIfromOne.equalsIgnoreCase(charAtIfromTwo)) {\n+                return false;\n+            }\n+\n+        }\n+        return true;\n+    }\n+\n+    private static boolean isPureAscii(String  str) {\n+        byte byteArray[] = str.getBytes();\n+        try {\n+            CharBuffer r = decoder.decode(ByteBuffer.wrap(byteArray));\n+            r.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d33891839adec52f8bc23f337eb32048f8fe49"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzYyNTkzOnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibStringTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNzoyNToxMlrOFzc5ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNzoyNToxMlrOFzc5ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ5NTE0Ng==", "bodyText": "Can't we move these to Ballerina instead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r389495146", "createdAt": "2020-03-09T07:25:12Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibStringTest.java", "diffHunk": "@@ -246,6 +246,23 @@ public void testSubstring(String str, int start, int end, String result) {\n                             \"{ballerina/lang.string}StringOperationError {message:\\\"\" + result + \"\\\"}\");\n     }\n \n+    @Test(dataProvider = \"testEqualsIgnoreCaseDataProvider\")\n+    public void testEqualsIgnoreCaseAscii(String str1, String str2, boolean result) {\n+        BValue[] args = {new BString(str1), new BString(str2), new BBoolean(result)};\n+        BValue[] returns = BRunUtil.invoke(compileResult, \"testEqualsIgnoreCaseAscii\", args);\n+    }\n+\n+    @DataProvider(name = \"testEqualsIgnoreCaseDataProvider\")\n+    public Object[][] testEqualsIgnoreCaseDataProvider() {\n+        return new Object[][] {\n+                {\"aBCdeFg\", \"aBCdeFg\", true},\n+                {\"aBCdeFg\", \"abcdefg\", true},\n+                {\"aBCdeFg\", \"abcdefh\", false},\n+                {\"Du\u0dbd\u0dcaVi\u0db1\u0dca\", \"du\u0dbd\u0dcavi\u0db1\u0dca\", true},\n+                {\"Du\u0db1\u0dcaVi\u0dbd\u0dca\", \"du\u0dbd\u0dcavi\u0db1\u0dca\", false}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d33891839adec52f8bc23f337eb32048f8fe49"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzQ4MDE0OnYy", "diffSide": "RIGHT", "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNToxNzo0N1rOF0ByEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMDowNDowMFrOF0IUSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5OTQ3NA==", "bodyText": "We reach this point even for !(isPureAscii(charAtIfromOne) && !(isPureAscii(charAtIfromTwo)) right? We shouldn't be doing equalsIgnoreCase in that case?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r390099474", "createdAt": "2020-03-10T05:17:47Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.util.Locale;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i=0; i<str1.length(); i++) {\n+            String charAtIfromOne = Character.toString(str1.charAt(i));\n+            String charAtIfromTwo = Character.toString(str2.charAt(i));\n+            if (!(isPureAscii(charAtIfromOne) && isPureAscii(charAtIfromTwo))) {\n+                if (!charAtIfromOne.equals(charAtIfromTwo)) {\n+                    return false;\n+                }\n+            }\n+            if (!charAtIfromOne.equalsIgnoreCase(charAtIfromTwo)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d33891839adec52f8bc23f337eb32048f8fe49"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwMDkyMw==", "bodyText": "Can't we simplify this logic by handling the flow in the following order?\n\nif both are pure ASCII, return equalsIgnoreCase\nelse return equals", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r390100923", "createdAt": "2020-03-10T05:23:24Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.util.Locale;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i=0; i<str1.length(); i++) {\n+            String charAtIfromOne = Character.toString(str1.charAt(i));\n+            String charAtIfromTwo = Character.toString(str2.charAt(i));\n+            if (!(isPureAscii(charAtIfromOne) && isPureAscii(charAtIfromTwo))) {\n+                if (!charAtIfromOne.equals(charAtIfromTwo)) {\n+                    return false;\n+                }\n+            }\n+            if (!charAtIfromOne.equalsIgnoreCase(charAtIfromTwo)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5OTQ3NA=="}, "originalCommit": {"oid": "e3d33891839adec52f8bc23f337eb32048f8fe49"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwNjUzOQ==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r390206539", "createdAt": "2020-03-10T10:04:00Z", "author": {"login": "dulvinw"}, "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.util.Locale;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i=0; i<str1.length(); i++) {\n+            String charAtIfromOne = Character.toString(str1.charAt(i));\n+            String charAtIfromTwo = Character.toString(str2.charAt(i));\n+            if (!(isPureAscii(charAtIfromOne) && isPureAscii(charAtIfromTwo))) {\n+                if (!charAtIfromOne.equals(charAtIfromTwo)) {\n+                    return false;\n+                }\n+            }\n+            if (!charAtIfromOne.equalsIgnoreCase(charAtIfromTwo)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5OTQ3NA=="}, "originalCommit": {"oid": "e3d33891839adec52f8bc23f337eb32048f8fe49"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzgyMTgxOnYy", "diffSide": "RIGHT", "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODoyMzoyNlrOF0FBFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwOToyOTowM1rOF0HFJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE1MjQ3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (!charFromOne.equalsIgnoreCase(charFromTwo)) {\n          \n          \n            \n                                return false;\n          \n          \n            \n                            }\n          \n          \n            \n                            return charFromOne.equalsIgnoreCase(charFromTwo);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r390152471", "createdAt": "2020-03-10T08:23:26Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i = 0; i <str1.length(); i++) {\n+            String charFromOne = Character.toString(str1.charAt(i));\n+            String charFromTwo = Character.toString(str2.charAt(i));\n+            if (isPureAscii(charFromOne) && isPureAscii(charFromTwo)) {\n+                if (!charFromOne.equalsIgnoreCase(charFromTwo)) {\n+                    return false;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c03f943e5bc5930bb7bcce71e81209f0cd086a7"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE1NDU2MA==", "bodyText": "As discussed offline, shall we change these checks to something like\n            boolean charFromOnePureAscii = isPureAscii(charFromOne);\n            boolean charFromTwoPureAscii = isPureAscii(charFromTwo);\n\n            if (charFromOnePureAscii && charFromTwoPureAscii) {\n                return charFromOne.equalsIgnoreCase(charFromTwo);\n            } else if (!charFromOnePureAscii && !charFromTwoPureAscii) {\n                return charFromOne.equals(charFromTwo);\n            }\n            return false;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r390154560", "createdAt": "2020-03-10T08:27:57Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i = 0; i <str1.length(); i++) {\n+            String charFromOne = Character.toString(str1.charAt(i));\n+            String charFromTwo = Character.toString(str2.charAt(i));\n+            if (isPureAscii(charFromOne) && isPureAscii(charFromTwo)) {\n+                if (!charFromOne.equalsIgnoreCase(charFromTwo)) {\n+                    return false;\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE1MjQ3MQ=="}, "originalCommit": {"oid": "9c03f943e5bc5930bb7bcce71e81209f0cd086a7"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE4NjI3OA==", "bodyText": "Sorry, missed the loop. This is OK.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r390186278", "createdAt": "2020-03-10T09:29:03Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i = 0; i <str1.length(); i++) {\n+            String charFromOne = Character.toString(str1.charAt(i));\n+            String charFromTwo = Character.toString(str2.charAt(i));\n+            if (isPureAscii(charFromOne) && isPureAscii(charFromTwo)) {\n+                if (!charFromOne.equalsIgnoreCase(charFromTwo)) {\n+                    return false;\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE1MjQ3MQ=="}, "originalCommit": {"oid": "9c03f943e5bc5930bb7bcce71e81209f0cd086a7"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzgzNTY0OnYy", "diffSide": "RIGHT", "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODoyODowN1rOF0FJhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODoyODowN1rOF0FJhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE1NDYyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r390154629", "createdAt": "2020-03-10T08:28:07Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i = 0; i <str1.length(); i++) {\n+            String charFromOne = Character.toString(str1.charAt(i));\n+            String charFromTwo = Character.toString(str2.charAt(i));\n+            if (isPureAscii(charFromOne) && isPureAscii(charFromTwo)) {\n+                if (!charFromOne.equalsIgnoreCase(charFromTwo)) {\n+                    return false;\n+                }\n+            } else if (!charFromOne.equals(charFromTwo)) {\n+                return false;\n+            }\n+\n+        }\n+        return true;\n+    }\n+\n+    private static boolean isPureAscii(String  str) {\n+        byte byteArray[] = str.getBytes();\n+        try {\n+            decoder.decode(ByteBuffer.wrap(byteArray)).toString();\n+        } catch (CharacterCodingException e) {\n+            return false;\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c03f943e5bc5930bb7bcce71e81209f0cd086a7"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODQxNzc2OnYy", "diffSide": "RIGHT", "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMToyMToyNFrOF0KxNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMToyMToyNFrOF0KxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0NjcwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static boolean isPureAscii(String  str) {\n          \n          \n            \n                private static boolean isPureAscii(String str) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r390246708", "createdAt": "2020-03-10T11:21:24Z", "author": {"login": "dulajdilshan"}, "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i = 0; i < str1.length(); i++) {\n+            String charFromOne = Character.toString(str1.charAt(i));\n+            String charFromTwo = Character.toString(str2.charAt(i));\n+            if (isPureAscii(charFromOne) && isPureAscii(charFromTwo)) {\n+                if (!charFromOne.equalsIgnoreCase(charFromTwo)) {\n+                    return false;\n+                }\n+            } else if (!charFromOne.equals(charFromTwo)) {\n+                return false;\n+            }\n+\n+        }\n+        return true;\n+    }\n+\n+    private static boolean isPureAscii(String  str) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29cfb0a46acff98a739e83af82ce3427d366ff68"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDE3OTQ0OnYy", "diffSide": "RIGHT", "path": "langlib/lang.string/src/main/ballerina/src/lang.string/string.bal", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODozNDozNFrOF0b8Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNToyOTowNFrOF0pqiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyODAyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Compare two given strings ignoring the case. In the comparison, any non ascii character\n          \n          \n            \n            # Compare two given strings ignoring the case. In the comparison, any non ASCII character", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r390528023", "createdAt": "2020-03-10T18:34:34Z", "author": {"login": "pubudu91"}, "path": "langlib/lang.string/src/main/ballerina/src/lang.string/string.bal", "diffHunk": "@@ -154,3 +154,11 @@ public function toCodePointInts(string str) returns int[] = external;\n # + return - a string with a character for each code point in `codePoints`; or an error\n # if any member of `codePoints` is not a valid code point\n public function fromCodePointInts(int[] codePoints) returns string|error = external;\n+\n+# Compare two given strings ignoring the case. In the comparison, any non ascii character", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06505e131c22e31710c57531f141a89a7bbf4553"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc0NzA3Nw==", "bodyText": "@dulvinw, seems like this documentation is different from what is in the spec. Shall we change to use the same?\nhttps://github.com/ballerina-platform/ballerina-spec/blob/master/lang/lib/string.bal#L127", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r390747077", "createdAt": "2020-03-11T05:01:10Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.string/src/main/ballerina/src/lang.string/string.bal", "diffHunk": "@@ -154,3 +154,11 @@ public function toCodePointInts(string str) returns int[] = external;\n # + return - a string with a character for each code point in `codePoints`; or an error\n # if any member of `codePoints` is not a valid code point\n public function fromCodePointInts(int[] codePoints) returns string|error = external;\n+\n+# Compare two given strings ignoring the case. In the comparison, any non ascii character", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyODAyMw=="}, "originalCommit": {"oid": "06505e131c22e31710c57531f141a89a7bbf4553"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc1MjkwNA==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r390752904", "createdAt": "2020-03-11T05:29:04Z", "author": {"login": "dulvinw"}, "path": "langlib/lang.string/src/main/ballerina/src/lang.string/string.bal", "diffHunk": "@@ -154,3 +154,11 @@ public function toCodePointInts(string str) returns int[] = external;\n # + return - a string with a character for each code point in `codePoints`; or an error\n # if any member of `codePoints` is not a valid code point\n public function fromCodePointInts(int[] codePoints) returns string|error = external;\n+\n+# Compare two given strings ignoring the case. In the comparison, any non ascii character", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyODAyMw=="}, "originalCommit": {"oid": "06505e131c22e31710c57531f141a89a7bbf4553"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDI2Mzk2OnYy", "diffSide": "RIGHT", "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODo1Njo1MFrOF0cwyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNToyOToxOVrOF0pqsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0MTUxMg==", "bodyText": "Do we need to make it this complicated? Isn't checking whether the char value is <127 enough?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r390541512", "createdAt": "2020-03-10T18:56:50Z", "author": {"login": "pubudu91"}, "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i = 0; i < str1.length(); i++) {\n+            String charFromOne = Character.toString(str1.charAt(i));\n+            String charFromTwo = Character.toString(str2.charAt(i));\n+            if (isPureAscii(charFromOne) && isPureAscii(charFromTwo)) {\n+                if (!charFromOne.equalsIgnoreCase(charFromTwo)) {\n+                    return false;\n+                }\n+            } else if (!charFromOne.equals(charFromTwo)) {\n+                return false;\n+            }\n+\n+        }\n+        return true;\n+    }\n+\n+    private static boolean isPureAscii(String str) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06505e131c22e31710c57531f141a89a7bbf4553"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc1Mjk0NA==", "bodyText": "Will add an issue to improve performance", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21511#discussion_r390752944", "createdAt": "2020-03-11T05:29:19Z", "author": {"login": "dulvinw"}, "path": "langlib/lang.string/src/main/java/org/ballerinalang/langlib/string/EqualsIgnoreCaseAscii.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.langlib.string;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+\n+/**\n+ * Extern function lang.string:equalsIgnoreCase(string, string).\n+ *\n+ * @since 1.2\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.string\", functionName = \"equalsIgnoreCaseAscii\",\n+        args = {@Argument(name = \"str1\", type = TypeKind.STRING), @Argument(name = \"str2\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.BOOLEAN)},\n+        isPublic = true\n+)\n+\n+public class EqualsIgnoreCaseAscii {\n+    private static CharsetDecoder decoder;\n+\n+    static {\n+        decoder = Charset.forName(\"US-ASCII\").newDecoder();\n+    }\n+\n+    public static boolean equalsIgnoreCaseAscii(Strand strand, String str1, String str2) {\n+        if (str1.length() != str2.length()) {\n+            return false;\n+        }\n+\n+        for (int i = 0; i < str1.length(); i++) {\n+            String charFromOne = Character.toString(str1.charAt(i));\n+            String charFromTwo = Character.toString(str2.charAt(i));\n+            if (isPureAscii(charFromOne) && isPureAscii(charFromTwo)) {\n+                if (!charFromOne.equalsIgnoreCase(charFromTwo)) {\n+                    return false;\n+                }\n+            } else if (!charFromOne.equals(charFromTwo)) {\n+                return false;\n+            }\n+\n+        }\n+        return true;\n+    }\n+\n+    private static boolean isPureAscii(String str) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0MTUxMg=="}, "originalCommit": {"oid": "06505e131c22e31710c57531f141a89a7bbf4553"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 955, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}