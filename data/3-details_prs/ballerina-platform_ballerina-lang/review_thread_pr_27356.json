{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzNDAyNjQ2", "number": 27356, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNzo0MDo0MlrOFE17ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yNlQxODowNjozM1rOGah1fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNjIyMTgwOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/ObservabilityConstants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNzo0MDo0MlrOIFDa6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNzo0MDo0MlrOIFDa6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE2OTgzMg==", "bodyText": "Shall we rename the constant name to CHECKPOINT_EVENT_NAME to be more meaningful ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r542169832", "createdAt": "2020-12-14T07:40:42Z", "author": {"login": "nadundesilva"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/ObservabilityConstants.java", "diffHunk": "@@ -83,4 +83,7 @@ private ObservabilityConstants() {\n \n     // Tracing Configs\n     public static final String CONFIG_TRACING_ENABLED = CONFIG_TABLE_TRACING + \".enabled\";\n+\n+    // Checkpoint Configs\n+    public static final String CHECKPOINT = \"CHECKPOINT\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23337e185ca5ffd4848029ab0dec32404978788d"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzgzMTI0OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/ObserveUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNDo0NDoxMVrOIHkdcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNDo0NDoxMVrOIHkdcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgwODMwNg==", "bodyText": "We can merge these two methods and not create eventAttributes map if observerContext == null and span == null. Also checking tracingEnabled twice can be removed as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r544808306", "createdAt": "2020-12-17T04:44:11Z", "author": {"login": "nadundesilva"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/ObserveUtils.java", "diffHunk": "@@ -124,6 +125,50 @@ public static void startResourceObservation(Environment env, BString serviceName\n         env.setStrandLocal(ObservabilityConstants.SERVICE_NAME, service);\n     }\n \n+    /**\n+     * Add record checkpoint data to trace span.\n+     *\n+     * @param env The Environment the observable code segment belong to\n+     * @param pkg The package the instrumented code belongs to\n+     * @param position The source code position the instrumented code defined in\n+     */\n+    public static void recordCheckpoint(Environment env, BString pkg, BString position) {\n+        if (!tracingEnabled) {\n+            return;\n+        }\n+\n+        // Adding Position and Module ID to the Jaeger Span\n+        Map<String, String> eventAttributes = new HashMap<>(2);\n+        eventAttributes.put(TAG_KEY_MODULE, pkg.getValue());\n+        eventAttributes.put(TAG_KEY_INVOCATION_POSITION, position.getValue());\n+\n+        addEventToActiveSpan(eventAttributes, env);\n+    }\n+\n+    /**\n+     * Add checkpoint event to the active span.\n+     *\n+     * @param eventAttributes The map of event attributes, the Module and the source code position\n+     * @param env The Environment the observable code segment belong to\n+     */\n+    private static void addEventToActiveSpan(Map<String, String> eventAttributes, Environment env) {\n+        if (!tracingEnabled) {\n+            return;\n+        }\n+\n+        ObserverContext observerContext = (ObserverContext) env.getStrandLocal(KEY_OBSERVER_CONTEXT);\n+        if (observerContext == null) {\n+            return;\n+        }\n+        BSpan span = (BSpan) observerContext.getProperty(KEY_SPAN);\n+        if (span == null) {\n+            return;\n+        }\n+        HashMap<String, Object> events = new HashMap<>(1);\n+        events.put(CHECKPOINT, eventAttributes);\n+        span.log(events);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3908654f30770280e760a8c33dd15e554e6052c8"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyOTE2MjU0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNTo1OTo0NVrOIIUL1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwNzowNDozMFrOII5ngA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU5MDIyOA==", "bodyText": "Aren't there constants already defined for these values in Ballerina ? If so let's use them.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r545590228", "createdAt": "2020-12-18T05:59:45Z", "author": {"login": "nadundesilva"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java", "diffHunk": "@@ -108,6 +109,9 @@\n     private static final String FUNC_BODY_INSTRUMENTATION_TYPE = \"funcBody\";\n     private static final Location COMPILE_TIME_CONST_POS =\n             new BLangDiagnosticLocation(null, -1, -1, -1, -1);\n+    private static final String INIT_FUNC = \".<init>\";\n+    private static final String START_FUNC = \".<start>\";\n+    private static final String STOP_FUNC = \".<stop>\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3908654f30770280e760a8c33dd15e554e6052c8"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIwMzUyMA==", "bodyText": "Using the INIT_FUNCTION_SUFFIX defined in BLangConstants creates a circular dependacy between ballerina-core.main and ballerina-lang.main. Therefore i redefined the  INIT_FUNCTION_SUFFIX constants like in MethodGenUtils and ErrorValue", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r546203520", "createdAt": "2020-12-19T07:04:30Z", "author": {"login": "sachiniSam"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java", "diffHunk": "@@ -108,6 +109,9 @@\n     private static final String FUNC_BODY_INSTRUMENTATION_TYPE = \"funcBody\";\n     private static final Location COMPILE_TIME_CONST_POS =\n             new BLangDiagnosticLocation(null, -1, -1, -1, -1);\n+    private static final String INIT_FUNC = \".<init>\";\n+    private static final String START_FUNC = \".<start>\";\n+    private static final String STOP_FUNC = \".<stop>\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTU5MDIyOA=="}, "originalCommit": {"oid": "3908654f30770280e760a8c33dd15e554e6052c8"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMDI3MzI1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMDo1ODozNVrOIIeXzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMDo1ODozNVrOIIeXzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc1NzEzMg==", "bodyText": "Shall we change startBB ? Maybe currentBB ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r545757132", "createdAt": "2020-12-18T10:58:35Z", "author": {"login": "nadundesilva"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java", "diffHunk": "@@ -170,6 +193,65 @@ void instrumentPackage(BIRPackage pkg) {\n         }\n     }\n \n+    /**\n+     * Adding Java Interop calls to basic blocks.\n+     * Here the JI calls are added for all kinds of terminators.\n+     *\n+     * First we check if there are position details for instructions, if present we add the JI calls with those\n+     * positions else, we consider the terminator position to create the JI call.\n+     *\n+     * @param func The function of which the instructions should be rewritten\n+     * @param pkg The package containing the function\n+     */\n+    private void rewriteControlFlowInvocation(BIRFunction func, BIRPackage pkg) {\n+        int i = 0;\n+        while (i < func.basicBlocks.size()) {\n+            // Basic blocks with JI method calls are added for all kinda of Terminators\n+            BIRBasicBlock startBB = func.basicBlocks.get(i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3908654f30770280e760a8c33dd15e554e6052c8"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMDI3NzQyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMDo1OTo0NFrOIIeaLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMDo1OTo0NFrOIIeaLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc1Nzc0MQ==", "bodyText": "Missing space at the beginning of the comment.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r545757741", "createdAt": "2020-12-18T10:59:44Z", "author": {"login": "nadundesilva"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java", "diffHunk": "@@ -170,6 +193,65 @@ void instrumentPackage(BIRPackage pkg) {\n         }\n     }\n \n+    /**\n+     * Adding Java Interop calls to basic blocks.\n+     * Here the JI calls are added for all kinds of terminators.\n+     *\n+     * First we check if there are position details for instructions, if present we add the JI calls with those\n+     * positions else, we consider the terminator position to create the JI call.\n+     *\n+     * @param func The function of which the instructions should be rewritten\n+     * @param pkg The package containing the function\n+     */\n+    private void rewriteControlFlowInvocation(BIRFunction func, BIRPackage pkg) {\n+        int i = 0;\n+        while (i < func.basicBlocks.size()) {\n+            // Basic blocks with JI method calls are added for all kinda of Terminators\n+            BIRBasicBlock startBB = func.basicBlocks.get(i);\n+            Location desugaredPos;\n+            // First we give the priority to Instructions,\n+            // If no instructions are found, then we get the Terminator position\n+            if (startBB.instructions.size() != 0) {\n+                desugaredPos = startBB.instructions.get(0).pos;\n+            } else {\n+                desugaredPos = startBB.terminator.pos;\n+            }\n+            if (desugaredPos != null) {\n+                BIRBasicBlock newBB = insertBasicBlock(func, i + 1);\n+                swapBasicBlockContent(startBB, newBB);\n+                injectCheckpointCall(startBB, pkg, desugaredPos);\n+                startBB.terminator.thenBB = newBB;\n+                //Fix error entries in the error entry table", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3908654f30770280e760a8c33dd15e554e6052c8"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMDI3OTQyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMTowMDoxOFrOIIebYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMTowMDoxOFrOIIebYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc1ODA1MA==", "bodyText": "Should have an empty line between description and params.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r545758050", "createdAt": "2020-12-18T11:00:18Z", "author": {"login": "nadundesilva"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java", "diffHunk": "@@ -170,6 +193,65 @@ void instrumentPackage(BIRPackage pkg) {\n         }\n     }\n \n+    /**\n+     * Adding Java Interop calls to basic blocks.\n+     * Here the JI calls are added for all kinds of terminators.\n+     *\n+     * First we check if there are position details for instructions, if present we add the JI calls with those\n+     * positions else, we consider the terminator position to create the JI call.\n+     *\n+     * @param func The function of which the instructions should be rewritten\n+     * @param pkg The package containing the function\n+     */\n+    private void rewriteControlFlowInvocation(BIRFunction func, BIRPackage pkg) {\n+        int i = 0;\n+        while (i < func.basicBlocks.size()) {\n+            // Basic blocks with JI method calls are added for all kinda of Terminators\n+            BIRBasicBlock startBB = func.basicBlocks.get(i);\n+            Location desugaredPos;\n+            // First we give the priority to Instructions,\n+            // If no instructions are found, then we get the Terminator position\n+            if (startBB.instructions.size() != 0) {\n+                desugaredPos = startBB.instructions.get(0).pos;\n+            } else {\n+                desugaredPos = startBB.terminator.pos;\n+            }\n+            if (desugaredPos != null) {\n+                BIRBasicBlock newBB = insertBasicBlock(func, i + 1);\n+                swapBasicBlockContent(startBB, newBB);\n+                injectCheckpointCall(startBB, pkg, desugaredPos);\n+                startBB.terminator.thenBB = newBB;\n+                //Fix error entries in the error entry table\n+                fixErrorTable(func, startBB, newBB);\n+                i += 1; // Number of inserted BBs\n+            }\n+            i += 1;\n+        }\n+    }\n+\n+    /**\n+     * Inject checkpoint JI method call to a basic block.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3908654f30770280e760a8c33dd15e554e6052c8"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMDI4Mzk0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMTowMTo0NVrOIIeeNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMTowMTo0NVrOIIeeNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc1ODc3Mw==", "bodyText": "Shall we rename desugaredInsPosition to originalInsPosition ? Both are the same here, but we switch names halfway in this function method body.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r545758773", "createdAt": "2020-12-18T11:01:45Z", "author": {"login": "nadundesilva"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java", "diffHunk": "@@ -170,6 +193,65 @@ void instrumentPackage(BIRPackage pkg) {\n         }\n     }\n \n+    /**\n+     * Adding Java Interop calls to basic blocks.\n+     * Here the JI calls are added for all kinds of terminators.\n+     *\n+     * First we check if there are position details for instructions, if present we add the JI calls with those\n+     * positions else, we consider the terminator position to create the JI call.\n+     *\n+     * @param func The function of which the instructions should be rewritten\n+     * @param pkg The package containing the function\n+     */\n+    private void rewriteControlFlowInvocation(BIRFunction func, BIRPackage pkg) {\n+        int i = 0;\n+        while (i < func.basicBlocks.size()) {\n+            // Basic blocks with JI method calls are added for all kinda of Terminators\n+            BIRBasicBlock startBB = func.basicBlocks.get(i);\n+            Location desugaredPos;\n+            // First we give the priority to Instructions,\n+            // If no instructions are found, then we get the Terminator position\n+            if (startBB.instructions.size() != 0) {\n+                desugaredPos = startBB.instructions.get(0).pos;\n+            } else {\n+                desugaredPos = startBB.terminator.pos;\n+            }\n+            if (desugaredPos != null) {\n+                BIRBasicBlock newBB = insertBasicBlock(func, i + 1);\n+                swapBasicBlockContent(startBB, newBB);\n+                injectCheckpointCall(startBB, pkg, desugaredPos);\n+                startBB.terminator.thenBB = newBB;\n+                //Fix error entries in the error entry table\n+                fixErrorTable(func, startBB, newBB);\n+                i += 1; // Number of inserted BBs\n+            }\n+            i += 1;\n+        }\n+    }\n+\n+    /**\n+     * Inject checkpoint JI method call to a basic block.\n+     * @param startBB The basic block to which the checkpoint call should be injected\n+     * @param pkg The package the invocation belongs to\n+     * @param desugaredInsPosition The source code position of the invocation\n+     */\n+    private void injectCheckpointCall(BIRBasicBlock startBB, BIRPackage pkg, Location desugaredInsPosition) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3908654f30770280e760a8c33dd15e554e6052c8"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMDI4NzE0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMTowMjo0MlrOIIegIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMTowMjo0MlrOIIegIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc1OTI2Nw==", "bodyText": "Let's rename observeStartCallTerminator to recordCheckPointCallTerminator", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r545759267", "createdAt": "2020-12-18T11:02:42Z", "author": {"login": "nadundesilva"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java", "diffHunk": "@@ -170,6 +193,65 @@ void instrumentPackage(BIRPackage pkg) {\n         }\n     }\n \n+    /**\n+     * Adding Java Interop calls to basic blocks.\n+     * Here the JI calls are added for all kinds of terminators.\n+     *\n+     * First we check if there are position details for instructions, if present we add the JI calls with those\n+     * positions else, we consider the terminator position to create the JI call.\n+     *\n+     * @param func The function of which the instructions should be rewritten\n+     * @param pkg The package containing the function\n+     */\n+    private void rewriteControlFlowInvocation(BIRFunction func, BIRPackage pkg) {\n+        int i = 0;\n+        while (i < func.basicBlocks.size()) {\n+            // Basic blocks with JI method calls are added for all kinda of Terminators\n+            BIRBasicBlock startBB = func.basicBlocks.get(i);\n+            Location desugaredPos;\n+            // First we give the priority to Instructions,\n+            // If no instructions are found, then we get the Terminator position\n+            if (startBB.instructions.size() != 0) {\n+                desugaredPos = startBB.instructions.get(0).pos;\n+            } else {\n+                desugaredPos = startBB.terminator.pos;\n+            }\n+            if (desugaredPos != null) {\n+                BIRBasicBlock newBB = insertBasicBlock(func, i + 1);\n+                swapBasicBlockContent(startBB, newBB);\n+                injectCheckpointCall(startBB, pkg, desugaredPos);\n+                startBB.terminator.thenBB = newBB;\n+                //Fix error entries in the error entry table\n+                fixErrorTable(func, startBB, newBB);\n+                i += 1; // Number of inserted BBs\n+            }\n+            i += 1;\n+        }\n+    }\n+\n+    /**\n+     * Inject checkpoint JI method call to a basic block.\n+     * @param startBB The basic block to which the checkpoint call should be injected\n+     * @param pkg The package the invocation belongs to\n+     * @param desugaredInsPosition The source code position of the invocation\n+     */\n+    private void injectCheckpointCall(BIRBasicBlock startBB, BIRPackage pkg, Location desugaredInsPosition) {\n+        String pkgId = generatePackageId(pkg);\n+        String position = generatePositionId(desugaredInsPosition);\n+\n+        BIROperand pkgOperand = generateGlobalConstantOperand(pkg, symbolTable.stringType, pkgId);\n+        BIROperand originalInsPosOperand = generateGlobalConstantOperand(pkg, symbolTable.stringType, position);\n+\n+        JIMethodCall observeStartCallTerminator = new JIMethodCall(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3908654f30770280e760a8c33dd15e554e6052c8"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MTY0OTkyOnYy", "diffSide": "RIGHT", "path": "tests/observability-test-utils/src/main/java/org/ballerina/testobserve/tracing/extension/MockTracerUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNjozNTo0OVrOIKBVBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNjozNTo0OVrOIKBVBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzM3ODQzOA==", "bodyText": "We should revert this change. Please check for any changes to the license header in other files in the PR and revert.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r547378438", "createdAt": "2020-12-22T16:35:49Z", "author": {"login": "nadundesilva"}, "path": "tests/observability-test-utils/src/main/java/org/ballerina/testobserve/tracing/extension/MockTracerUtils.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dac3e0b6cd8505d4fcbd1507f3e7798c6572bf34"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MzM0ODkwOnYy", "diffSide": "RIGHT", "path": "tests/observability-test-utils/src/main/java/org/ballerina/testobserve/tracing/extension/BMockSpan.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNDoyNzozN1rOIKQ2aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNDoyNzozN1rOIKQ2aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYzMjc0NQ==", "bodyText": "Minor alignment issue.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r547632745", "createdAt": "2020-12-23T04:27:37Z", "author": {"login": "nadundesilva"}, "path": "tests/observability-test-utils/src/main/java/org/ballerina/testobserve/tracing/extension/BMockSpan.java", "diffHunk": "@@ -79,4 +91,58 @@ public void setParentId(long parentId) {\n     public void setTags(Map<String, Object> tags) {\n         this.tags = tags;\n     }\n+\n+    public List<MockSpan.LogEntry> getEvents() {\n+    return events;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dac3e0b6cd8505d4fcbd1507f3e7798c6572bf34"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NDA4Mjc4OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/MainFunctionTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzozMjoyN1rOIKYR7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzozMjoyN1rOIKYR7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc1NDQ3Nw==", "bodyText": "Minor alignment issue", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r547754477", "createdAt": "2020-12-23T07:32:27Z", "author": {"login": "nadundesilva"}, "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/MainFunctionTestCase.java", "diffHunk": "@@ -73,6 +96,7 @@ public void testMainMethod() throws Exception {\n                     new AbstractMap.SimpleEntry<>(\"src.entry_point.main\", \"true\"),\n                     new AbstractMap.SimpleEntry<>(\"function\", \"main\")\n             ));\n+           Assert.assertEquals(span.getCheckpoints(), expectedCheckpoints);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dac3e0b6cd8505d4fcbd1507f3e7798c6572bf34"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NDA4NjIwOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/MainFunctionTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzozMzoyMVrOIKYUKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzozMzoyMVrOIKYUKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc1NTA1MQ==", "bodyText": "Should align with final keyword", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r547755051", "createdAt": "2020-12-23T07:33:21Z", "author": {"login": "nadundesilva"}, "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/observability/tracing/MainFunctionTestCase.java", "diffHunk": "@@ -48,6 +48,29 @@ public void testMainMethod() throws Exception {\n         final String span4Position = FILE_NAME + \":24:15\";\n         final String span5Position = FILE_NAME + \":32:21\";\n         final String span6Position = FILE_NAME + \":38:16\";\n+        final String moduleID = \"intg_tests/tracing_tests:0.0.1\";\n+        final List<BMockSpan.BMockSpanEvent> expectedCheckpoints = Arrays.asList(\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":20:5\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":22:13\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":25:23\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":32:16\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":32:21\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":33:11\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":38:16\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":39:11\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":53:33\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":53:33\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, \":0:0\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, \":0:0\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":54:31\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":55:5\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":55:5\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":56:11\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":56:5\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":56:5\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":57:1\"),\n+                new BMockSpan.BMockSpanEvent(moduleID, FILE_NAME + \":29:9\")\n+                );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dac3e0b6cd8505d4fcbd1507f3e7798c6572bf34"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTg5NDQ4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwOTozMDoxNlrOIPlLuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwOTozMDoxNlrOIPlLuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzIwODc2Mw==", "bodyText": "should this be start line ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r553208763", "createdAt": "2021-01-07T09:30:16Z", "author": {"login": "manuranga"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -1526,9 +1527,18 @@ public void visit(BLangIf astIfStmt) {\n \n             // If a terminator statement has not been set for the else-block then just add it.\n             if (this.env.enclBB.terminator == null) {\n-                this.env.enclBB.terminator = new BIRTerminator.GOTO(null, nextBB);\n+                if (astIfStmt.elseStmt.pos != null) {\n+                    Location newLocation = new BLangDiagnosticLocation(\n+                            astIfStmt.elseStmt.pos.lineRange().filePath(),\n+                            astIfStmt.elseStmt.pos.lineRange().endLine().line(),\n+                            astIfStmt.elseStmt.pos.lineRange().endLine().line(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e055ec3c199a7fd20e05af100fba7a38e1c7311c"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MjAyNTYxOnYy", "diffSide": "RIGHT", "path": "misc/tracing-extensions/modules/ballerina-choreo-extension/src/main/java/org/ballerinalang/observe/trace/extension/choreo/model/ChoreoTraceSpan.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMDowMzo1NlrOIPmX-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwOTo1Mzo0M1rOIQMGnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzIyODI4Mw==", "bodyText": "let's make this a top level.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r553228283", "createdAt": "2021-01-07T10:03:56Z", "author": {"login": "manuranga"}, "path": "misc/tracing-extensions/modules/ballerina-choreo-extension/src/main/java/org/ballerinalang/observe/trace/extension/choreo/model/ChoreoTraceSpan.java", "diffHunk": "@@ -112,4 +119,31 @@ public Type getRefType() {\n             FOLLOWS_FROM\n         }\n     }\n+\n+    /**\n+    * Trace Span Event.\n+    */\n+    public static class SpanEvent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e055ec3c199a7fd20e05af100fba7a38e1c7311c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg0NjQyOA==", "bodyText": "fixed with the #27702 PR", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r553846428", "createdAt": "2021-01-08T09:53:43Z", "author": {"login": "sachiniSam"}, "path": "misc/tracing-extensions/modules/ballerina-choreo-extension/src/main/java/org/ballerinalang/observe/trace/extension/choreo/model/ChoreoTraceSpan.java", "diffHunk": "@@ -112,4 +119,31 @@ public Type getRefType() {\n             FOLLOWS_FROM\n         }\n     }\n+\n+    /**\n+    * Trace Span Event.\n+    */\n+    public static class SpanEvent {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzIyODI4Mw=="}, "originalCommit": {"oid": "e055ec3c199a7fd20e05af100fba7a38e1c7311c"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDMwNDY3MzY0OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/ObserveUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yNlQxNzo1ODo1OFrOKFeI3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yN1QwNjozMzozM1rOKFybrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjgyNTMxMQ==", "bodyText": "Declaration should be Map", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r676825311", "createdAt": "2021-07-26T17:58:58Z", "author": {"login": "tishan89"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/ObserveUtils.java", "diffHunk": "@@ -124,6 +125,37 @@ public static void startResourceObservation(Environment env, BString serviceName\n         env.setStrandLocal(ObservabilityConstants.SERVICE_NAME, service);\n     }\n \n+    /**\n+     * Add record checkpoint data to active Trace Span.\n+     *\n+     * @param env The Ballerina Environment\n+     * @param pkg The package the instrumented code belongs to\n+     * @param position The source code position the instrumented code defined in\n+     */\n+    public static void recordCheckpoint(Environment env, BString pkg, BString position) {\n+        if (!tracingEnabled) {\n+            return;\n+        }\n+\n+        ObserverContext observerContext = (ObserverContext) env.getStrandLocal(KEY_OBSERVER_CONTEXT);\n+        if (observerContext == null) {\n+            return;\n+        }\n+        BSpan span = (BSpan) observerContext.getProperty(KEY_SPAN);\n+        if (span == null) {\n+            return;\n+        }\n+\n+        // Adding Position and Module ID to the Jaeger Span\n+        Map<String, String> eventAttributes = new HashMap<>(2);\n+        eventAttributes.put(TAG_KEY_MODULE, pkg.getValue());\n+        eventAttributes.put(TAG_KEY_INVOCATION_POSITION, position.getValue());\n+\n+        HashMap<String, Object> events = new HashMap<>(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e055ec3c199a7fd20e05af100fba7a38e1c7311c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NzE1NzgwNA==", "bodyText": "Usage of a HashMap has been removed with the migration to Opentelemetry ->4b8659b", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r677157804", "createdAt": "2021-07-27T06:33:33Z", "author": {"login": "sachiniSam"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/observability/ObserveUtils.java", "diffHunk": "@@ -124,6 +125,37 @@ public static void startResourceObservation(Environment env, BString serviceName\n         env.setStrandLocal(ObservabilityConstants.SERVICE_NAME, service);\n     }\n \n+    /**\n+     * Add record checkpoint data to active Trace Span.\n+     *\n+     * @param env The Ballerina Environment\n+     * @param pkg The package the instrumented code belongs to\n+     * @param position The source code position the instrumented code defined in\n+     */\n+    public static void recordCheckpoint(Environment env, BString pkg, BString position) {\n+        if (!tracingEnabled) {\n+            return;\n+        }\n+\n+        ObserverContext observerContext = (ObserverContext) env.getStrandLocal(KEY_OBSERVER_CONTEXT);\n+        if (observerContext == null) {\n+            return;\n+        }\n+        BSpan span = (BSpan) observerContext.getProperty(KEY_SPAN);\n+        if (span == null) {\n+            return;\n+        }\n+\n+        // Adding Position and Module ID to the Jaeger Span\n+        Map<String, String> eventAttributes = new HashMap<>(2);\n+        eventAttributes.put(TAG_KEY_MODULE, pkg.getValue());\n+        eventAttributes.put(TAG_KEY_INVOCATION_POSITION, position.getValue());\n+\n+        HashMap<String, Object> events = new HashMap<>(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjgyNTMxMQ=="}, "originalCommit": {"oid": "e055ec3c199a7fd20e05af100fba7a38e1c7311c"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDMwNDcwNTI2OnYy", "diffSide": "RIGHT", "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/TestReportTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yNlQxODowNjozM1rOKFecGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0yN1QwNjozODo1M1rOKFymMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjgzMDIzNQ==", "bodyText": "is this enabled?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r676830235", "createdAt": "2021-07-26T18:06:33Z", "author": {"login": "tishan89"}, "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/TestReportTest.java", "diffHunk": "@@ -62,7 +62,7 @@ public void testWarningForReportTools() throws BallerinaTestException, IOExcepti\n         clientLeecher.waitForText(60000);\n     }\n \n-    @Test ()\n+    @Test (enabled = false) // TODO: Enable the test case once the mismatch on line coverage is fixed. issue:#27524", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e055ec3c199a7fd20e05af100fba7a38e1c7311c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NzE2MDQ5Nw==", "bodyText": "yes, it has been enabled with the pr -> 8f5e06c", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27356#discussion_r677160497", "createdAt": "2021-07-27T06:38:53Z", "author": {"login": "sachiniSam"}, "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/TestReportTest.java", "diffHunk": "@@ -62,7 +62,7 @@ public void testWarningForReportTools() throws BallerinaTestException, IOExcepti\n         clientLeecher.waitForText(60000);\n     }\n \n-    @Test ()\n+    @Test (enabled = false) // TODO: Enable the test case once the mismatch on line coverage is fixed. issue:#27524", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NjgzMDIzNQ=="}, "originalCommit": {"oid": "e055ec3c199a7fd20e05af100fba7a38e1c7311c"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2869, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}