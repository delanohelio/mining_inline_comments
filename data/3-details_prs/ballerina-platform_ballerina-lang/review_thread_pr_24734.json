{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4ODM1NjEw", "number": 24734, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDowODoyNlrOEOs8Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDoyODoxOVrOEOtgPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODUxNzk0OnYy", "diffSide": "RIGHT", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDowODoyNlrOGx_5XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDowODoyNlrOGx_5XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA4MDI4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return \"unsupported redirect status code\" + statusCode.toString();\n          \n          \n            \n                    });\n          \n          \n            \n                    return \"unsupported redirect status code\" + statusCode.toString();\n          \n          \n            \n                });", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24734#discussion_r455080284", "createdAt": "2020-07-15T14:08:26Z", "author": {"login": "ldclakmal"}, "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -365,36 +378,40 @@ function createNewEndpointConfig(ClientConfiguration config) returns ClientConfi\n     return newEpConfig;\n }\n \n-//Get the HTTP method that should be used for redirection based on the status code.\n+// Get the HTTP method that should be used for redirection based on the status code.\n+// As per rfc7231 and rfc7538,\n+// +-------------------------------------------+-----------+-----------+\n+// |                                           | Permanent | Temporary |\n+// +-------------------------------------------+-----------+-----------+\n+// | Allows changing the request method from   | 301       | 302       |\n+// | POST to GET                               |           |           |\n+// | Does not allow changing the request       | 308       | 307       |\n+// | method from POST to GET                   |           |           |\n+// +-------------------------------------------+-----------+-----------+\n function getRedirectMethod(HttpOperation httpVerb, Response response) returns HttpOperation|() {\n     int statusCode = response.statusCode;\n-    if ((statusCode == STATUS_MULTIPLE_CHOICES || statusCode == STATUS_USE_PROXY || statusCode == STATUS_TEMPORARY_REDIRECT\n-            || statusCode == STATUS_PERMANENT_REDIRECT) && (httpVerb == HTTP_GET || httpVerb == HTTP_HEAD)) {\n-        return httpVerb;\n-    } else if ((statusCode == STATUS_MOVED_PERMANENTLY || statusCode == STATUS_FOUND) &&\n-        (httpVerb == HTTP_GET || httpVerb == HTTP_HEAD)) {\n+    if (statusCode == STATUS_MOVED_PERMANENTLY || statusCode == STATUS_FOUND || statusCode == STATUS_SEE_OTHER) {\n         return HTTP_GET;\n-    } else if (statusCode == STATUS_SEE_OTHER) {\n-        return HTTP_GET;\n-    } else {\n-        return ();\n     }\n+    if (statusCode == STATUS_TEMPORARY_REDIRECT || statusCode == STATUS_PERMANENT_REDIRECT ||\n+               statusCode == STATUS_MULTIPLE_CHOICES || statusCode == STATUS_USE_PROXY) {\n+        return httpVerb;\n+    }\n+    log:printDebug(function() returns string {\n+            return \"unsupported redirect status code\" + statusCode.toString();\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e68430d4115abab847906d329593754a4dea7ede"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODUyMTA4OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-integration-test/src/test/resources/http/src/httpservices/11_http_redirects.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDowOToxMVrOGx_7dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDowOToxMVrOGx_7dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA4MDgyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    req.setHeader(\"proxy-authorization\", \"Basic YWxhZGRpbjpvcGVuc2VzYW1l\");\n          \n          \n            \n                    req.setHeader(\"Proxy-Authorization\", \"Basic YWxhZGRpbjpvcGVuc2VzYW1l\");", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24734#discussion_r455080821", "createdAt": "2020-07-15T14:09:11Z", "author": {"login": "ldclakmal"}, "path": "tests/jballerina-integration-test/src/test/resources/http/src/httpservices/11_http_redirects.bal", "diffHunk": "@@ -252,6 +253,78 @@ service testRedirect on serviceEndpoint3 {\n             io:println(\"Connector error!\");\n         }\n     }\n+\n+    @http:ResourceConfig {\n+        methods: [\"GET\"],\n+        path: \"/doPost\"\n+    }\n+    resource function PostClearText(http:Caller caller, http:Request request) {\n+        http:Client endPoint4 = new(\"http://localhost:9103\", endPoint4Config );\n+        http:Request req = new;\n+        req.setHeader(\"proxy-authorization\", \"Basic YWxhZGRpbjpvcGVuc2VzYW1l\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e68430d4115abab847906d329593754a4dea7ede"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODUyMjA2OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-integration-test/src/test/resources/http/src/httpservices/11_http_redirects.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDowOToyMVrOGx_8CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDowOToyMVrOGx_8CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA4MDk2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    req.setHeader(\"proxy-authorization\", \"Basic YWxhZGRpbjpvcGVuc2VzYW1l\");\n          \n          \n            \n                    req.setHeader(\"Proxy-Authorization\", \"Basic YWxhZGRpbjpvcGVuc2VzYW1l\");", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24734#discussion_r455080968", "createdAt": "2020-07-15T14:09:21Z", "author": {"login": "ldclakmal"}, "path": "tests/jballerina-integration-test/src/test/resources/http/src/httpservices/11_http_redirects.bal", "diffHunk": "@@ -252,6 +253,78 @@ service testRedirect on serviceEndpoint3 {\n             io:println(\"Connector error!\");\n         }\n     }\n+\n+    @http:ResourceConfig {\n+        methods: [\"GET\"],\n+        path: \"/doPost\"\n+    }\n+    resource function PostClearText(http:Caller caller, http:Request request) {\n+        http:Client endPoint4 = new(\"http://localhost:9103\", endPoint4Config );\n+        http:Request req = new;\n+        req.setHeader(\"proxy-authorization\", \"Basic YWxhZGRpbjpvcGVuc2VzYW1l\");\n+        req.setTextPayload(\"Payload redirected\");\n+        var response = endPoint4->post(\"/redirect1/handlePost\", req);\n+        if (response is http:Response) {\n+            var value = response.getTextPayload();\n+            if (value is string) {\n+                value = value + \":\" + response.resolvedRequestedURI;\n+                checkpanic caller->respond(<@untainted> value);\n+            } else {\n+                io:println(\"Payload error!\");\n+            }\n+        } else {\n+            io:println(\"Connector error!\");\n+        }\n+    }\n+\n+    @http:ResourceConfig {\n+        methods: [\"GET\"],\n+        path: \"/doSecurePut\"\n+    }\n+    resource function testSecurePut(http:Caller caller, http:Request request) {\n+        http:Request req = new;\n+        req.setHeader(\"proxy-authorization\", \"Basic YWxhZGRpbjpvcGVuc2VzYW1l\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e68430d4115abab847906d329593754a4dea7ede"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODUzMDI1OnYy", "diffSide": "RIGHT", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDoxMToxMlrOGyABQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDoxMToxMlrOGyABQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA4MjMwNw==", "bodyText": "Shall we add these headers as constants?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24734#discussion_r455082307", "createdAt": "2020-07-15T14:11:12Z", "author": {"login": "ldclakmal"}, "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -365,36 +378,40 @@ function createNewEndpointConfig(ClientConfiguration config) returns ClientConfi\n     return newEpConfig;\n }\n \n-//Get the HTTP method that should be used for redirection based on the status code.\n+// Get the HTTP method that should be used for redirection based on the status code.\n+// As per rfc7231 and rfc7538,\n+// +-------------------------------------------+-----------+-----------+\n+// |                                           | Permanent | Temporary |\n+// +-------------------------------------------+-----------+-----------+\n+// | Allows changing the request method from   | 301       | 302       |\n+// | POST to GET                               |           |           |\n+// | Does not allow changing the request       | 308       | 307       |\n+// | method from POST to GET                   |           |           |\n+// +-------------------------------------------+-----------+-----------+\n function getRedirectMethod(HttpOperation httpVerb, Response response) returns HttpOperation|() {\n     int statusCode = response.statusCode;\n-    if ((statusCode == STATUS_MULTIPLE_CHOICES || statusCode == STATUS_USE_PROXY || statusCode == STATUS_TEMPORARY_REDIRECT\n-            || statusCode == STATUS_PERMANENT_REDIRECT) && (httpVerb == HTTP_GET || httpVerb == HTTP_HEAD)) {\n-        return httpVerb;\n-    } else if ((statusCode == STATUS_MOVED_PERMANENTLY || statusCode == STATUS_FOUND) &&\n-        (httpVerb == HTTP_GET || httpVerb == HTTP_HEAD)) {\n+    if (statusCode == STATUS_MOVED_PERMANENTLY || statusCode == STATUS_FOUND || statusCode == STATUS_SEE_OTHER) {\n         return HTTP_GET;\n-    } else if (statusCode == STATUS_SEE_OTHER) {\n-        return HTTP_GET;\n-    } else {\n-        return ();\n     }\n+    if (statusCode == STATUS_TEMPORARY_REDIRECT || statusCode == STATUS_PERMANENT_REDIRECT ||\n+               statusCode == STATUS_MULTIPLE_CHOICES || statusCode == STATUS_USE_PROXY) {\n+        return httpVerb;\n+    }\n+    log:printDebug(function() returns string {\n+            return \"unsupported redirect status code\" + statusCode.toString();\n+        });\n+    return ();\n }\n \n-function createRedirectRequest(int statusCode, Request request) returns Request {\n-    Request redirectRequest = new;\n-    string[] headerNames = <@untainted string[]> request.getHeaderNames();\n-    foreach var headerName in headerNames {\n-        string[] headerValues = request.getHeaders(headerName);\n-        foreach var headerValue in headerValues {\n-            redirectRequest.addHeader(headerName, headerValue);\n-        }\n-    }\n-    if (statusCode == STATUS_SEE_OTHER) {\n-        redirectRequest.removeHeader(TRANSFER_ENCODING);\n-        redirectRequest.removeHeader(CONTENT_LENGTH);\n+function createRedirectRequest(Request request, boolean allowAuthorizationHeader) returns Request {\n+    if (allowAuthorizationHeader) {\n+        return request;\n     }\n-    return redirectRequest;\n+    request.removeHeader(AUTHORIZATION);\n+    request.removeHeader(\"Proxy-Authenticate\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e68430d4115abab847906d329593754a4dea7ede"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODYxMDU1OnYy", "diffSide": "RIGHT", "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDoyODoxOVrOGyAzrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDoyODoxOVrOGyAzrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA5NTIxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            function createRedirectRequest(Request request, boolean allowAuthorizationHeader) returns Request {\n          \n          \n            \n                if (allowAuthorizationHeader) {\n          \n          \n            \n            function createRedirectRequest(Request request, boolean allowAuthHeaders) returns Request {\n          \n          \n            \n                if (allowAuthHeaders) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24734#discussion_r455095214", "createdAt": "2020-07-15T14:28:19Z", "author": {"login": "ldclakmal"}, "path": "stdlib/http/src/main/ballerina/src/http/redirect/redirect_client.bal", "diffHunk": "@@ -365,36 +378,40 @@ function createNewEndpointConfig(ClientConfiguration config) returns ClientConfi\n     return newEpConfig;\n }\n \n-//Get the HTTP method that should be used for redirection based on the status code.\n+// Get the HTTP method that should be used for redirection based on the status code.\n+// As per rfc7231 and rfc7538,\n+// +-------------------------------------------+-----------+-----------+\n+// |                                           | Permanent | Temporary |\n+// +-------------------------------------------+-----------+-----------+\n+// | Allows changing the request method from   | 301       | 302       |\n+// | POST to GET                               |           |           |\n+// | Does not allow changing the request       | 308       | 307       |\n+// | method from POST to GET                   |           |           |\n+// +-------------------------------------------+-----------+-----------+\n function getRedirectMethod(HttpOperation httpVerb, Response response) returns HttpOperation|() {\n     int statusCode = response.statusCode;\n-    if ((statusCode == STATUS_MULTIPLE_CHOICES || statusCode == STATUS_USE_PROXY || statusCode == STATUS_TEMPORARY_REDIRECT\n-            || statusCode == STATUS_PERMANENT_REDIRECT) && (httpVerb == HTTP_GET || httpVerb == HTTP_HEAD)) {\n-        return httpVerb;\n-    } else if ((statusCode == STATUS_MOVED_PERMANENTLY || statusCode == STATUS_FOUND) &&\n-        (httpVerb == HTTP_GET || httpVerb == HTTP_HEAD)) {\n+    if (statusCode == STATUS_MOVED_PERMANENTLY || statusCode == STATUS_FOUND || statusCode == STATUS_SEE_OTHER) {\n         return HTTP_GET;\n-    } else if (statusCode == STATUS_SEE_OTHER) {\n-        return HTTP_GET;\n-    } else {\n-        return ();\n     }\n+    if (statusCode == STATUS_TEMPORARY_REDIRECT || statusCode == STATUS_PERMANENT_REDIRECT ||\n+               statusCode == STATUS_MULTIPLE_CHOICES || statusCode == STATUS_USE_PROXY) {\n+        return httpVerb;\n+    }\n+    log:printDebug(function() returns string {\n+            return \"unsupported redirect status code\" + statusCode.toString();\n+        });\n+    return ();\n }\n \n-function createRedirectRequest(int statusCode, Request request) returns Request {\n-    Request redirectRequest = new;\n-    string[] headerNames = <@untainted string[]> request.getHeaderNames();\n-    foreach var headerName in headerNames {\n-        string[] headerValues = request.getHeaders(headerName);\n-        foreach var headerValue in headerValues {\n-            redirectRequest.addHeader(headerName, headerValue);\n-        }\n-    }\n-    if (statusCode == STATUS_SEE_OTHER) {\n-        redirectRequest.removeHeader(TRANSFER_ENCODING);\n-        redirectRequest.removeHeader(CONTENT_LENGTH);\n+function createRedirectRequest(Request request, boolean allowAuthorizationHeader) returns Request {\n+    if (allowAuthorizationHeader) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e68430d4115abab847906d329593754a4dea7ede"}, "originalPosition": 163}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 481, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}