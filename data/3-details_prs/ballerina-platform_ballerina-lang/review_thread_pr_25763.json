{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2MzM3MzYy", "number": 25763, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNjoxMToxMVrOEi-azw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNjoxNzo0MlrOEi-gWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTA5NzExOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNjoxMToxMVrOHRFHVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNzoxNjowMlrOHRGvFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY3MTYzOQ==", "bodyText": "I think we don't need this check. parseComplexTypeDescriptor does the same check indirectly.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25763#discussion_r487671639", "createdAt": "2020-09-14T06:11:11Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1017,22 +1007,39 @@ private STNode parseReturnTypeDescRhs(STNode metadata, STNode functionKeyword, S\n         return funcDef;\n     }\n \n-    private STNode parseVarDeclWithFunctionType(STNode typeDesc, STNode qualifiers, STNode metadata,\n-                                                boolean isObjectMember, boolean isObjectTypeDesc) {\n+    private STNode parseVarDeclWithFunctionType(STNode functionKeyword, STNode funcSignature, STNode qualifiers,\n+                                                STNode metadata, boolean isObjectMember, boolean isObjectTypeDesc) {\n+        endContext(); // end the func-type\n         STNodeList qualifierList = (STNodeList) qualifiers;\n         STNode visibilityQualifier = STNodeFactory.createEmptyNode();\n-        // qualifiers are not allowed except for object filed\n+        List<STNode> validatedQualifierList = new ArrayList<>();\n+        // qualifiers are only allowed in the following cases for func type desc.\n+        // isolated qualifier allowed.\n+        // public or private qualifier allowed in object field.\n         for (int position = 0; position < qualifierList.size(); position++) {\n             STNode qualifier = qualifierList.get(position);\n-            if (isObjectMember && isVisibilityQualifier(qualifier)) {\n+            if (qualifier.kind == SyntaxKind.ISOLATED_KEYWORD) {\n+                validatedQualifierList.add(qualifier);\n+            } else if (isObjectMember && isVisibilityQualifier(qualifier)) {\n                 // public or private qualifier allowed in object field.\n                 visibilityQualifier = qualifier;\n             } else {\n-                typeDesc = SyntaxErrors.cloneWithLeadingInvalidNodeMinutiae(typeDesc, qualifier,\n+                functionKeyword = SyntaxErrors.cloneWithLeadingInvalidNodeMinutiae(functionKeyword, qualifier,\n                         DiagnosticErrorCode.ERROR_QUALIFIER_NOT_ALLOWED, ((STToken) qualifier).text());\n+\n             }\n         }\n \n+        qualifiers = STNodeFactory.createNodeList(validatedQualifierList);\n+        STNode typeDesc = STNodeFactory.createFunctionTypeDescriptorNode(qualifiers, functionKeyword,\n+                funcSignature);\n+\n+        // Check if it is a complex type desc starting with function type\n+        if (isValidTypeContinuationToken(peek())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f1a4b065ec9e856dbb1cede3772fe5cd82509c"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY5ODE5OA==", "bodyText": "I c thax ayye will change.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25763#discussion_r487698198", "createdAt": "2020-09-14T07:16:02Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1017,22 +1007,39 @@ private STNode parseReturnTypeDescRhs(STNode metadata, STNode functionKeyword, S\n         return funcDef;\n     }\n \n-    private STNode parseVarDeclWithFunctionType(STNode typeDesc, STNode qualifiers, STNode metadata,\n-                                                boolean isObjectMember, boolean isObjectTypeDesc) {\n+    private STNode parseVarDeclWithFunctionType(STNode functionKeyword, STNode funcSignature, STNode qualifiers,\n+                                                STNode metadata, boolean isObjectMember, boolean isObjectTypeDesc) {\n+        endContext(); // end the func-type\n         STNodeList qualifierList = (STNodeList) qualifiers;\n         STNode visibilityQualifier = STNodeFactory.createEmptyNode();\n-        // qualifiers are not allowed except for object filed\n+        List<STNode> validatedQualifierList = new ArrayList<>();\n+        // qualifiers are only allowed in the following cases for func type desc.\n+        // isolated qualifier allowed.\n+        // public or private qualifier allowed in object field.\n         for (int position = 0; position < qualifierList.size(); position++) {\n             STNode qualifier = qualifierList.get(position);\n-            if (isObjectMember && isVisibilityQualifier(qualifier)) {\n+            if (qualifier.kind == SyntaxKind.ISOLATED_KEYWORD) {\n+                validatedQualifierList.add(qualifier);\n+            } else if (isObjectMember && isVisibilityQualifier(qualifier)) {\n                 // public or private qualifier allowed in object field.\n                 visibilityQualifier = qualifier;\n             } else {\n-                typeDesc = SyntaxErrors.cloneWithLeadingInvalidNodeMinutiae(typeDesc, qualifier,\n+                functionKeyword = SyntaxErrors.cloneWithLeadingInvalidNodeMinutiae(functionKeyword, qualifier,\n                         DiagnosticErrorCode.ERROR_QUALIFIER_NOT_ALLOWED, ((STToken) qualifier).text());\n+\n             }\n         }\n \n+        qualifiers = STNodeFactory.createNodeList(validatedQualifierList);\n+        STNode typeDesc = STNodeFactory.createFunctionTypeDescriptorNode(qualifiers, functionKeyword,\n+                funcSignature);\n+\n+        // Check if it is a complex type desc starting with function type\n+        if (isValidTypeContinuationToken(peek())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY3MTYzOQ=="}, "originalCommit": {"oid": "20f1a4b065ec9e856dbb1cede3772fe5cd82509c"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTEwMjQxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNjoxMzo0NVrOHRFKow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNzoxMzozMVrOHRGqOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY3MjQ4Mw==", "bodyText": "Seems this block is repeated in 3 places. Shall we extract it to a separate method?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25763#discussion_r487672483", "createdAt": "2020-09-14T06:13:45Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -8828,34 +8839,61 @@ private STNode parseKeyTypeConstraint(STNode keyKeywordToken) {\n     /**\n      * Parse function type descriptor.\n      * <p>\n-     * <code>function-type-descriptor := function function-signature</code>\n+     * <code>function-type-descriptor := [isolated] function function-signature</code>\n      *\n      * @return Function type descriptor node\n      */\n     private STNode parseFunctionTypeDesc() {\n         startContext(ParserRuleContext.FUNC_TYPE_DESC);\n+        List<STNode> qualifiers = new ArrayList<>();\n+        STToken nextToken = peek();\n+        switch (nextToken.kind) {\n+            case ISOLATED_KEYWORD:\n+                qualifiers.add(consume());\n+                break;\n+            case FUNCTION_KEYWORD:\n+                break;\n+            default:\n+                recover(peek(), ParserRuleContext.FUNC_TYPE_DESC_START);\n+                return parseFunctionTypeDesc();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f1a4b065ec9e856dbb1cede3772fe5cd82509c"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY5Njk1NQ==", "bodyText": "moved to parseFunctionQualifiers method", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25763#discussion_r487696955", "createdAt": "2020-09-14T07:13:31Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -8828,34 +8839,61 @@ private STNode parseKeyTypeConstraint(STNode keyKeywordToken) {\n     /**\n      * Parse function type descriptor.\n      * <p>\n-     * <code>function-type-descriptor := function function-signature</code>\n+     * <code>function-type-descriptor := [isolated] function function-signature</code>\n      *\n      * @return Function type descriptor node\n      */\n     private STNode parseFunctionTypeDesc() {\n         startContext(ParserRuleContext.FUNC_TYPE_DESC);\n+        List<STNode> qualifiers = new ArrayList<>();\n+        STToken nextToken = peek();\n+        switch (nextToken.kind) {\n+            case ISOLATED_KEYWORD:\n+                qualifiers.add(consume());\n+                break;\n+            case FUNCTION_KEYWORD:\n+                break;\n+            default:\n+                recover(peek(), ParserRuleContext.FUNC_TYPE_DESC_START);\n+                return parseFunctionTypeDesc();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY3MjQ4Mw=="}, "originalCommit": {"oid": "20f1a4b065ec9e856dbb1cede3772fe5cd82509c"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTEwMjc1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNjoxMzo1NlrOHRFK1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNjoxMzo1NlrOHRFK1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY3MjUzMw==", "bodyText": "extra line?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25763#discussion_r487672533", "createdAt": "2020-09-14T06:13:56Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1017,22 +1007,39 @@ private STNode parseReturnTypeDescRhs(STNode metadata, STNode functionKeyword, S\n         return funcDef;\n     }\n \n-    private STNode parseVarDeclWithFunctionType(STNode typeDesc, STNode qualifiers, STNode metadata,\n-                                                boolean isObjectMember, boolean isObjectTypeDesc) {\n+    private STNode parseVarDeclWithFunctionType(STNode functionKeyword, STNode funcSignature, STNode qualifiers,\n+                                                STNode metadata, boolean isObjectMember, boolean isObjectTypeDesc) {\n+        endContext(); // end the func-type\n         STNodeList qualifierList = (STNodeList) qualifiers;\n         STNode visibilityQualifier = STNodeFactory.createEmptyNode();\n-        // qualifiers are not allowed except for object filed\n+        List<STNode> validatedQualifierList = new ArrayList<>();\n+        // qualifiers are only allowed in the following cases for func type desc.\n+        // isolated qualifier allowed.\n+        // public or private qualifier allowed in object field.\n         for (int position = 0; position < qualifierList.size(); position++) {\n             STNode qualifier = qualifierList.get(position);\n-            if (isObjectMember && isVisibilityQualifier(qualifier)) {\n+            if (qualifier.kind == SyntaxKind.ISOLATED_KEYWORD) {\n+                validatedQualifierList.add(qualifier);\n+            } else if (isObjectMember && isVisibilityQualifier(qualifier)) {\n                 // public or private qualifier allowed in object field.\n                 visibilityQualifier = qualifier;\n             } else {\n-                typeDesc = SyntaxErrors.cloneWithLeadingInvalidNodeMinutiae(typeDesc, qualifier,\n+                functionKeyword = SyntaxErrors.cloneWithLeadingInvalidNodeMinutiae(functionKeyword, qualifier,\n                         DiagnosticErrorCode.ERROR_QUALIFIER_NOT_ALLOWED, ((STToken) qualifier).text());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f1a4b065ec9e856dbb1cede3772fe5cd82509c"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTEwNzE4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNjoxNTo1NVrOHRFNfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNjoxNTo1NVrOHRFNfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY3MzIxMw==", "bodyText": "Can end the context in parseReturnTypeDescRhs and come here.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25763#discussion_r487673213", "createdAt": "2020-09-14T06:15:55Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1017,22 +1007,39 @@ private STNode parseReturnTypeDescRhs(STNode metadata, STNode functionKeyword, S\n         return funcDef;\n     }\n \n-    private STNode parseVarDeclWithFunctionType(STNode typeDesc, STNode qualifiers, STNode metadata,\n-                                                boolean isObjectMember, boolean isObjectTypeDesc) {\n+    private STNode parseVarDeclWithFunctionType(STNode functionKeyword, STNode funcSignature, STNode qualifiers,\n+                                                STNode metadata, boolean isObjectMember, boolean isObjectTypeDesc) {\n+        endContext(); // end the func-type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f1a4b065ec9e856dbb1cede3772fe5cd82509c"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTExMTMxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNjoxNzo0MlrOHRFP3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNjoxNzo0MlrOHRFP3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY3MzgyMg==", "bodyText": "These two also can start with isolated keyword?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25763#discussion_r487673822", "createdAt": "2020-09-14T06:17:42Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -2222,9 +2233,11 @@ protected ParserRuleContext getNextRule(ParserRuleContext currentCtx, int nextLo\n                 return ParserRuleContext.TOP_LEVEL_NODE;\n             case FUNC_DEF:\n             case FUNC_DEF_OR_FUNC_TYPE:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f1a4b065ec9e856dbb1cede3772fe5cd82509c"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 98, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}