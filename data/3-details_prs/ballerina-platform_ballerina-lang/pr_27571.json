{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyMzE3MjI4", "number": 27571, "title": "Introduce extension points for websub message persistence", "bodyText": "Purpose\nIntroduce some extension points to support message persistence. A couple of newly introduced fields to the HubConfiguration record to configure functions to be invoked at the events like receiving updates, update delivery, and update delivery failure. These functions will include information like the message, callback URL, and topic details.\nApproach\nNewly introduced functions,\npublic type HubConfiguration record {|\n    int leaseSeconds = 86400;\n    SignatureMethod signatureMethod = SHA256;\n    RemotePublishConfig remotePublish?;\n    boolean topicRegistrationRequired = true;\n    http:ClientConfiguration clientConfig?;\n    HubPersistenceStore hubPersistenceStore?;\n    function (WebSubContent content) tapOnMessage?;\n    function (string callback, string topic, WebSubContent content) tapOnDelivery?;\n    function (string callback, string topic, WebSubContent content, http:Response|error response) tapOnDeliveryFailure?;\n|};\n\nSamples\nimport ballerina/http;\nimport ballerina/io;\nimport ballerina/runtime;\nimport ballerina/websub;\nimport ballerina/lang.'string;\n\npublic function main() {\n    io:println(\"Starting up the Ballerina Hub Service\");\n\n    websub:Hub webSubHub;\n    var result = websub:startHub(new http:Listener(9191), \"/websub\", \"/hub\",\n        hubConfiguration = {\n            remotePublish: {\n                enabled: true\n            },\n            tapOnMessage: onMessageImpl,\n            tapOnDelivery: onDeliveryImpl,\n            tapOnDeliveryFailure: onDeliveryFailureImpl\n        }\n    );\n    if (result is websub:Hub) {\n        webSubHub = result;\n    } else if (result is websub:HubStartedUpError) {\n        webSubHub = result.startedUpHub;\n    } else {\n        io:println(\"Hub start error:\" + <string>result.detail()?.message);\n        return;\n    }\n    runtime:sleep(60000);\n}\n\nfunction onMessageImpl (websub:WebSubContent content) {\n    var payload = content.payload;\n    if (payload is byte[]) {\n        string|error cont = 'string:fromBytes(payload);\n        if (cont is string) {\n            io:println(cont);\n        }\n    }\n   io:println(\"on message\");\n}\n\nfunction onDeliveryImpl (string callback, string topic, websub:WebSubContent content) {\n   io:println(\"on Delivery\");\n}\n\nfunction onDeliveryFailureImpl (string callback, string topic, websub:WebSubContent content, http:Response|error response, websub:FailureReason reason) {\n   io:println(\"on Delivery failure\");\n}", "createdAt": "2020-12-18T06:25:52Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27571", "merged": true, "mergeCommit": {"oid": "0958009e96a00d83a222cc55f49a16e41cd2fbfa"}, "closed": true, "closedAt": "2020-12-22T01:39:39Z", "author": {"login": "Bhashinee"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdnSJOdgBqjQxMjgzMzc1MDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdogYSnAFqTU1Njc2NDc4Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "43fa93d6972ae50862af36a3e1527fac6bfd3be2", "author": {"user": {"login": "Bhashinee", "name": "Bhashinee"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/43fa93d6972ae50862af36a3e1527fac6bfd3be2", "committedDate": "2020-12-18T06:17:59Z", "message": "Introduce extension points for message persistence"}, "afterCommit": {"oid": "29fe2d55e7f39c89c7229acdb602a53cf3950927", "author": {"user": {"login": "Bhashinee", "name": "Bhashinee"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/29fe2d55e7f39c89c7229acdb602a53cf3950927", "committedDate": "2020-12-18T06:28:04Z", "message": "Introduce extension points for message persistence"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ada0c9581ba05677656a72dc735b3dd0a65e20fa", "author": {"user": {"login": "Bhashinee", "name": "Bhashinee"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ada0c9581ba05677656a72dc735b3dd0a65e20fa", "committedDate": "2020-12-18T07:06:03Z", "message": "Introduce extension points for message persistence"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "29fe2d55e7f39c89c7229acdb602a53cf3950927", "author": {"user": {"login": "Bhashinee", "name": "Bhashinee"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/29fe2d55e7f39c89c7229acdb602a53cf3950927", "committedDate": "2020-12-18T06:28:04Z", "message": "Introduce extension points for message persistence"}, "afterCommit": {"oid": "ada0c9581ba05677656a72dc735b3dd0a65e20fa", "author": {"user": {"login": "Bhashinee", "name": "Bhashinee"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ada0c9581ba05677656a72dc735b3dd0a65e20fa", "committedDate": "2020-12-18T07:06:03Z", "message": "Introduce extension points for message persistence"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1MjExODE3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27571#pullrequestreview-555211817", "createdAt": "2020-12-18T07:02:25Z", "commit": {"oid": "29fe2d55e7f39c89c7229acdb602a53cf3950927"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzowMjoyNVrOIIVZIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwNzoxODozMlrOIIVusA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYxMDAxOQ==", "bodyText": "Do we need to execute the current logic (logging) if the user has specified a custom function?\nInstead of making this nilable shall we just have the functions and assign as the default implementation the current logic that logs?\nGiven that delivery failure can happen due to three reasons, we can add maybe add another FailureReason parameter to quickly figure out what went wrong, and in the default case log the appropriate log.\nconst FAILURE_REASON_SUBSCRIPTION_GONE = \"SUBSCRIPTION_GONE\";\nconst FAILURE_REASON_FAILURE_STATUS_CODE = \"FAILURE_STATUS_CODE\";\nconst FAILURE_REASON_DELIVERY_FAILURE = \"DELIVERY_FAILURE\";\n\ntype FailureReason FAILURE_REASON_SUBSCRIPTION_GONE|FAILURE_REASON_FAILURE_STATUS_CODE|FAILURE_REASON_DELIVERY_FAILURE;\n\nfunction (string callback, string topic, WebSubContent content, http:Response|error response, FailureReason reason) onDeliveryFailureFunction = defaultOnDeliveryFailureFunction;\nThis way we can avoid having to use the type test per delivery.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27571#discussion_r545610019", "createdAt": "2020-12-18T07:02:25Z", "author": {"login": "MaryamZi"}, "path": "stdlib/websub/src/main/ballerina/src/websub/hub_configuration.bal", "diffHunk": "@@ -36,6 +36,9 @@ RemotePublishConfig remotePublishConfig = {};\n boolean hubTopicRegistrationRequired = false;\n string hubPublicUrl = \"\";\n http:ClientConfiguration? hubClientConfig = ();\n+function (WebSubContent content)? onMessageFunction = ();\n+function (string callback, string topic, WebSubContent content)? onDeliveryFunction = ();\n+function (string callback, string topic, WebSubContent content, http:Response|error response)? onDeliveryFailureFunction = ();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fe2d55e7f39c89c7229acdb602a53cf3950927"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYxMDE5Mw==", "bodyText": "The onMessageFunction default implementation can be an empty function or a debug log.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27571#discussion_r545610193", "createdAt": "2020-12-18T07:03:03Z", "author": {"login": "MaryamZi"}, "path": "stdlib/websub/src/main/ballerina/src/websub/hub_configuration.bal", "diffHunk": "@@ -36,6 +36,9 @@ RemotePublishConfig remotePublishConfig = {};\n boolean hubTopicRegistrationRequired = false;\n string hubPublicUrl = \"\";\n http:ClientConfiguration? hubClientConfig = ();\n+function (WebSubContent content)? onMessageFunction = ();\n+function (string callback, string topic, WebSubContent content)? onDeliveryFunction = ();\n+function (string callback, string topic, WebSubContent content, http:Response|error response)? onDeliveryFailureFunction = ();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYxMDAxOQ=="}, "originalCommit": {"oid": "29fe2d55e7f39c89c7229acdb602a53cf3950927"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTYxNTUzNg==", "bodyText": "If we go with just functions as suggested above, we wouldn't need the type test. But generally, it is less expensive to check if a variable is () rather than a specific type, so if we are going with this approach let's invert the check.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27571#discussion_r545615536", "createdAt": "2020-12-18T07:18:32Z", "author": {"login": "MaryamZi"}, "path": "stdlib/websub/src/main/ballerina/src/websub/hub_service.bal", "diffHunk": "@@ -550,6 +559,21 @@ function distributeContent(string callback, SubscriptionDetails subscriptionDeta\n     return;\n }\n \n+function callOnDeliveryFailure(string callback, string topic, WebSubContent notification, http:Response|error response) {\n+    function (string callback, string topic, WebSubContent content, http:Response|error response)?\n+                               onDeliveryFailureFunc = onDeliveryFailureFunction;\n+    if (onDeliveryFailureFunc is function (string callback, string topic, WebSubContent content, http:Response|error response)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ada0c9581ba05677656a72dc735b3dd0a65e20fa"}, "originalPosition": 47}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3e7583105866e0b53c807cd11b38665cd99a72e2", "author": {"user": {"login": "Bhashinee", "name": "Bhashinee"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3e7583105866e0b53c807cd11b38665cd99a72e2", "committedDate": "2020-12-18T10:12:05Z", "message": "Address review suggestions"}, "afterCommit": {"oid": "a91f5423f162e40ab1cef237a31386eca2d5df23", "author": {"user": {"login": "Bhashinee", "name": "Bhashinee"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a91f5423f162e40ab1cef237a31386eca2d5df23", "committedDate": "2020-12-18T10:20:26Z", "message": "Address review suggestions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a91f5423f162e40ab1cef237a31386eca2d5df23", "author": {"user": {"login": "Bhashinee", "name": "Bhashinee"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a91f5423f162e40ab1cef237a31386eca2d5df23", "committedDate": "2020-12-18T10:20:26Z", "message": "Address review suggestions"}, "afterCommit": {"oid": "e143545db417150f014eaed632f8dbf37940861b", "author": {"user": {"login": "Bhashinee", "name": "Bhashinee"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e143545db417150f014eaed632f8dbf37940861b", "committedDate": "2020-12-18T10:28:23Z", "message": "Address review suggestions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e143545db417150f014eaed632f8dbf37940861b", "author": {"user": {"login": "Bhashinee", "name": "Bhashinee"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e143545db417150f014eaed632f8dbf37940861b", "committedDate": "2020-12-18T10:28:23Z", "message": "Address review suggestions"}, "afterCommit": {"oid": "3971cb44d56d353a1fa2b853f32f9f6bd9a3ecb2", "author": {"user": {"login": "Bhashinee", "name": "Bhashinee"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3971cb44d56d353a1fa2b853f32f9f6bd9a3ecb2", "committedDate": "2020-12-18T10:33:40Z", "message": "Address review suggestions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3971cb44d56d353a1fa2b853f32f9f6bd9a3ecb2", "author": {"user": {"login": "Bhashinee", "name": "Bhashinee"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3971cb44d56d353a1fa2b853f32f9f6bd9a3ecb2", "committedDate": "2020-12-18T10:33:40Z", "message": "Address review suggestions"}, "afterCommit": {"oid": "945e5bd7f651d8106c4fcbe2375ed44c753779cb", "author": {"user": {"login": "Bhashinee", "name": "Bhashinee"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/945e5bd7f651d8106c4fcbe2375ed44c753779cb", "committedDate": "2020-12-19T01:40:18Z", "message": "Address review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28649e586b6acae862f9278ceac5ca9a388eb3aa", "author": {"user": {"login": "Bhashinee", "name": "Bhashinee"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/28649e586b6acae862f9278ceac5ca9a388eb3aa", "committedDate": "2020-12-19T01:48:52Z", "message": "Address review suggestions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "945e5bd7f651d8106c4fcbe2375ed44c753779cb", "author": {"user": {"login": "Bhashinee", "name": "Bhashinee"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/945e5bd7f651d8106c4fcbe2375ed44c753779cb", "committedDate": "2020-12-19T01:40:18Z", "message": "Address review suggestions"}, "afterCommit": {"oid": "28649e586b6acae862f9278ceac5ca9a388eb3aa", "author": {"user": {"login": "Bhashinee", "name": "Bhashinee"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/28649e586b6acae862f9278ceac5ca9a388eb3aa", "committedDate": "2020-12-19T01:48:52Z", "message": "Address review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8252d8f48abe2c7d506e6ab5ed15b8628bef545", "author": {"user": {"login": "Bhashinee", "name": "Bhashinee"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d8252d8f48abe2c7d506e6ab5ed15b8628bef545", "committedDate": "2020-12-20T02:32:07Z", "message": "Add support for onMessage extension point in internal hub"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c28561170e03b2f0b84a5338dc98ccd265e9f4ff", "author": {"user": {"login": "Bhashinee", "name": "Bhashinee"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c28561170e03b2f0b84a5338dc98ccd265e9f4ff", "committedDate": "2020-12-20T03:24:10Z", "message": "Add a configuration for specifying the order of the updates"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a4231bf42b0b244f7fc1f444cf0793c784ca8678", "author": {"user": {"login": "Bhashinee", "name": "Bhashinee"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a4231bf42b0b244f7fc1f444cf0793c784ca8678", "committedDate": "2020-12-20T03:17:50Z", "message": "Add a configuration for specifying the order of the updates"}, "afterCommit": {"oid": "c28561170e03b2f0b84a5338dc98ccd265e9f4ff", "author": {"user": {"login": "Bhashinee", "name": "Bhashinee"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c28561170e03b2f0b84a5338dc98ccd265e9f4ff", "committedDate": "2020-12-20T03:24:10Z", "message": "Add a configuration for specifying the order of the updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3892a029fa0f4373af03f4a8299ec265cc25c34", "author": {"user": {"login": "Bhashinee", "name": "Bhashinee"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e3892a029fa0f4373af03f4a8299ec265cc25c34", "committedDate": "2020-12-21T05:40:10Z", "message": "Rename sameOrderDelivery to asyncContentDelivery"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MTQ3MjA5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27571#pullrequestreview-556147209", "createdAt": "2020-12-21T06:05:02Z", "commit": {"oid": "e3892a029fa0f4373af03f4a8299ec265cc25c34"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjowNTowMlrOIJNNIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjoxMTozNFrOIJNTXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUyNDQ0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents subscription delivery failures related to the HTTP 410 Gone status code.\n          \n          \n            \n            # Represents subscription delivery failure due to the subscriber's callback URL\n          \n          \n            \n            # replying with a HTTP 410 Gone status code.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27571#discussion_r546524449", "createdAt": "2020-12-21T06:05:02Z", "author": {"login": "MaryamZi"}, "path": "stdlib/websub/src/main/ballerina/src/websub/commons.bal", "diffHunk": "@@ -480,6 +480,18 @@ public type SubscriptionChangeResponse record {|\n /////////////////////////////////////////////////////////////\n //////////////////// WebSub Hub Commons /////////////////////\n /////////////////////////////////////////////////////////////\n+# Represents subscription delivery failures related to the HTTP 410 Gone status code.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3892a029fa0f4373af03f4a8299ec265cc25c34"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUyNDcwOA==", "bodyText": "Shall we use optional field access instead?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                var onMessageFunc = hubConfiguration[\"onMessage\"];\n          \n          \n            \n                var onMessageFunc = hubConfiguration?.onMessage;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27571#discussion_r546524708", "createdAt": "2020-12-21T06:06:02Z", "author": {"login": "MaryamZi"}, "path": "stdlib/websub/src/main/ballerina/src/websub/commons.bal", "diffHunk": "@@ -557,6 +579,19 @@ public function startHub(http:Listener hubServiceListener,\n     hubSignatureMethod = getSignatureMethod(hubConfiguration.signatureMethod);\n     remotePublishConfig = getRemotePublishConfig(hubConfiguration[\"remotePublish\"]);\n     hubTopicRegistrationRequired = hubConfiguration.topicRegistrationRequired;\n+    var onMessageFunc = hubConfiguration[\"onMessage\"];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3892a029fa0f4373af03f4a8299ec265cc25c34"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUyNDg4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                asyncContentDelivery = hubConfiguration[\"asyncContentDelivery\"];\n          \n          \n            \n                asyncContentDelivery = hubConfiguration,asyncContentDelivery;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27571#discussion_r546524885", "createdAt": "2020-12-21T06:06:37Z", "author": {"login": "MaryamZi"}, "path": "stdlib/websub/src/main/ballerina/src/websub/commons.bal", "diffHunk": "@@ -557,6 +579,19 @@ public function startHub(http:Listener hubServiceListener,\n     hubSignatureMethod = getSignatureMethod(hubConfiguration.signatureMethod);\n     remotePublishConfig = getRemotePublishConfig(hubConfiguration[\"remotePublish\"]);\n     hubTopicRegistrationRequired = hubConfiguration.topicRegistrationRequired;\n+    var onMessageFunc = hubConfiguration[\"onMessage\"];\n+    if (!(onMessageFunc is ())) {\n+       onMessageFunction = onMessageFunc;\n+    }\n+    var onDeliveryFunc = hubConfiguration[\"onDelivery\"];\n+    if (!(onDeliveryFunc is ())) {\n+       onDeliveryFunction = onDeliveryFunc;\n+    }\n+    var onDeliveryFailureFunc = hubConfiguration[\"onDeliveryFailure\"];\n+    if (!(onDeliveryFailureFunc is ())) {\n+       onDeliveryFailureFunction = onDeliveryFailureFunc;\n+    }\n+    asyncContentDelivery = hubConfiguration[\"asyncContentDelivery\"];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3892a029fa0f4373af03f4a8299ec265cc25c34"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUyNTYwMg==", "bodyText": "Let's use the function pointer approach instead, because there's concatenations. https://ballerina.io/learn/by-example/log-api.html\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                log:printDebug(\"Content delivery to callback[\" + callback + \"] successful for topic[\" + topic + \"]\");\n          \n          \n            \n                log:printDebug(() => \"Content delivery to callback[\" + callback + \"] successful for topic[\" + topic + \"]\");", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27571#discussion_r546525602", "createdAt": "2020-12-21T06:09:33Z", "author": {"login": "MaryamZi"}, "path": "stdlib/websub/src/main/ballerina/src/websub/hub_configuration.bal", "diffHunk": "@@ -78,3 +85,27 @@ function getSignatureMethod(SignatureMethod? signatureMethod) returns string {\n function getRemotePublishConfig(RemotePublishConfig? remotePublish) returns RemotePublishConfig {\n     return remotePublish is RemotePublishConfig ? remotePublish : {};\n }\n+\n+function defaultOnMessageFunction(WebSubContent content) {\n+    log:printDebug(\"Message received at the hub\");\n+}\n+\n+function defaultOnDeliveryFunction(string callback, string topic, WebSubContent content) {\n+    log:printDebug(\"Content delivery to callback[\" + callback + \"] successful for topic[\" + topic + \"]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3892a029fa0f4373af03f4a8299ec265cc25c34"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUyNjA0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                 + \"], topic[\" + topic + \"]\");\n          \n          \n            \n                } else if (reason is FAILURE_REASON_FAILURE_STATUS_CODE) {\n          \n          \n            \n                   http:Response resp = <http:Response> response;\n          \n          \n            \n                   log:printError(\"Error delivering content to callback[\" + callback + \"] for topic[\"\n          \n          \n            \n                                            + topic + \"]: received response code \" + resp.statusCode.toString());\n          \n          \n            \n                } else {\n          \n          \n            \n                   error err = <error> response;\n          \n          \n            \n                   log:printError(\"Error delivering content to callback[\" + callback + \"] for topic[\"\n          \n          \n            \n                                               + topic + \"]: \" + <string> err.detail()?.message);\n          \n          \n            \n                }\n          \n          \n            \n                                 + \"], topic[\" + topic + \"]\");\n          \n          \n            \n                   return;                     \n          \n          \n            \n                } \n          \n          \n            \n                \n          \n          \n            \n                if (reason is FAILURE_REASON_FAILURE_STATUS_CODE) {\n          \n          \n            \n                   http:Response resp = <http:Response> response;\n          \n          \n            \n                   log:printError(\"Error delivering content to callback[\" + callback + \"] for topic[\"\n          \n          \n            \n                                            + topic + \"]: received response code \" + resp.statusCode.toString());\n          \n          \n            \n                   return;\n          \n          \n            \n                }\n          \n          \n            \n                \n          \n          \n            \n                error err = <error> response;\n          \n          \n            \n                log:printError(\"Error delivering content to callback[\" + callback + \"] for topic[\"\n          \n          \n            \n                                      + topic + \"]: \" + <string> err.detail()?.message);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27571#discussion_r546526047", "createdAt": "2020-12-21T06:11:34Z", "author": {"login": "MaryamZi"}, "path": "stdlib/websub/src/main/ballerina/src/websub/hub_configuration.bal", "diffHunk": "@@ -78,3 +85,27 @@ function getSignatureMethod(SignatureMethod? signatureMethod) returns string {\n function getRemotePublishConfig(RemotePublishConfig? remotePublish) returns RemotePublishConfig {\n     return remotePublish is RemotePublishConfig ? remotePublish : {};\n }\n+\n+function defaultOnMessageFunction(WebSubContent content) {\n+    log:printDebug(\"Message received at the hub\");\n+}\n+\n+function defaultOnDeliveryFunction(string callback, string topic, WebSubContent content) {\n+    log:printDebug(\"Content delivery to callback[\" + callback + \"] successful for topic[\" + topic + \"]\");\n+}\n+\n+function defaultOnDeliveryFailureFunction(string callback, string topic, WebSubContent content,\n+                           http:Response|error response, FailureReason reason) {\n+    if (reason is FAILURE_REASON_SUBSCRIPTION_GONE) {\n+       log:printInfo(\"HTTP 410 response code received: Subscription deleted for callback[\" + callback\n+                     + \"], topic[\" + topic + \"]\");\n+    } else if (reason is FAILURE_REASON_FAILURE_STATUS_CODE) {\n+       http:Response resp = <http:Response> response;\n+       log:printError(\"Error delivering content to callback[\" + callback + \"] for topic[\"\n+                                + topic + \"]: received response code \" + resp.statusCode.toString());\n+    } else {\n+       error err = <error> response;\n+       log:printError(\"Error delivering content to callback[\" + callback + \"] for topic[\"\n+                                   + topic + \"]: \" + <string> err.detail()?.message);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3892a029fa0f4373af03f4a8299ec265cc25c34"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MTUwMTIy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27571#pullrequestreview-556150122", "createdAt": "2020-12-21T06:14:33Z", "commit": {"oid": "e3892a029fa0f4373af03f4a8299ec265cc25c34"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjoxNDozM1rOIJNWyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjoxNDozM1rOIJNWyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUyNjkyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + asyncContentDelivery - The configuration for specifying the way(sync/async) of the update delivery to subscribers. Setting this to true\n          \n          \n            \n            #                          may change the order\n          \n          \n            \n            # + asyncContentDelivery - The configuration to specify is content delivery to subscribers should be done asynchronously.\n          \n          \n            \n            #                          Setting this to `true` may result in the order not being preserved in message delivery.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27571#discussion_r546526923", "createdAt": "2020-12-21T06:14:33Z", "author": {"login": "MaryamZi"}, "path": "stdlib/websub/src/main/ballerina/src/websub/commons.bal", "diffHunk": "@@ -489,13 +501,23 @@ public type SubscriptionChangeResponse record {|\n #                               to the topic\n # + clientConfig - The configuration for the hub to communicate with remote HTTP endpoints\n # + hubPersistenceStore - The `HubPersistenceStore` to use to persist hub data\n+# + onMessage - The configuration for passing a function to be invoked when an update is received at the hub\n+# + onDelivery - The configuration for passing a function to be invoked when an update is successfully delivered to the subscribers\n+# + onDeliveryFailure - The configuration for passing a function to be invoked when an update is failed to be delivered to the subscribers\n+# + asyncContentDelivery - The configuration for specifying the way(sync/async) of the update delivery to subscribers. Setting this to true\n+#                          may change the order", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3892a029fa0f4373af03f4a8299ec265cc25c34"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MTUwMzE4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27571#pullrequestreview-556150318", "createdAt": "2020-12-21T06:15:07Z", "commit": {"oid": "e3892a029fa0f4373af03f4a8299ec265cc25c34"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjoxNTowN1rOIJNXgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjoxNTowN1rOIJNXgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUyNzEwNA==", "bodyText": "Since this new executeFunctionAsync takes callback as a param, existing 'executeFunctionAsync'  can call this function passing the callback with CountDownLatch. So we do not need to duplicate common logic", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27571#discussion_r546527104", "createdAt": "2020-12-21T06:15:07Z", "author": {"login": "warunalakshitha"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/connector/Executor.java", "diffHunk": "@@ -157,6 +157,49 @@ public void notifyFailure(ErrorValue error) {\n         }\n     }\n \n+    /**\n+     * This method will invoke Ballerina function in a non-blocking manner.\n+     *\n+     * @param scheduler   The Current scheduler\n+     * @param classLoader The classLoader\n+     * @param orgName     The org which the package belongs to\n+     * @param packageName The package which the class belongs to\n+     * @param className   The class name or the file name in which the function resides\n+     * @param methodName  The method name which is to be the invokable unit\n+     * @param callback    The callback to be executed when the execution completes.\n+     * @param paramValues The Parameters to be passed to the invokable unit\n+     */\n+    public static void executeFunctionAsync(Scheduler scheduler, ClassLoader classLoader, final String orgName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3892a029fa0f4373af03f4a8299ec265cc25c34"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "500f507addd62e8544ed8cb51f05a9c25ae4677e", "author": {"user": {"login": "Bhashinee", "name": "Bhashinee"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/500f507addd62e8544ed8cb51f05a9c25ae4677e", "committedDate": "2020-12-21T07:23:12Z", "message": "Address review suggestions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2cb8b4bbf94dd0c3f5dbaafb3947a0bf7f00adc5", "author": {"user": {"login": "Bhashinee", "name": "Bhashinee"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2cb8b4bbf94dd0c3f5dbaafb3947a0bf7f00adc5", "committedDate": "2020-12-21T09:30:14Z", "message": "Remove the async call and address review suggestions"}, "afterCommit": {"oid": "02e9cc8754d7072c042419e8ad747e882e259686", "author": {"user": {"login": "Bhashinee", "name": "Bhashinee"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/02e9cc8754d7072c042419e8ad747e882e259686", "committedDate": "2020-12-21T09:43:23Z", "message": "Remove the async call and address review suggestions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "02e9cc8754d7072c042419e8ad747e882e259686", "author": {"user": {"login": "Bhashinee", "name": "Bhashinee"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/02e9cc8754d7072c042419e8ad747e882e259686", "committedDate": "2020-12-21T09:43:23Z", "message": "Remove the async call and address review suggestions"}, "afterCommit": {"oid": "c17ce742407216c4969493b314fa69ba37dc81e1", "author": {"user": {"login": "Bhashinee", "name": "Bhashinee"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c17ce742407216c4969493b314fa69ba37dc81e1", "committedDate": "2020-12-21T09:46:16Z", "message": "Remove the async call and address review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f0bbb1f5f59f4cd1e210ee780ed41baa3503eac", "author": {"user": {"login": "Bhashinee", "name": "Bhashinee"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4f0bbb1f5f59f4cd1e210ee780ed41baa3503eac", "committedDate": "2020-12-21T09:47:13Z", "message": "Remove the async call and address review suggestions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c17ce742407216c4969493b314fa69ba37dc81e1", "author": {"user": {"login": "Bhashinee", "name": "Bhashinee"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c17ce742407216c4969493b314fa69ba37dc81e1", "committedDate": "2020-12-21T09:46:16Z", "message": "Remove the async call and address review suggestions"}, "afterCommit": {"oid": "4f0bbb1f5f59f4cd1e210ee780ed41baa3503eac", "author": {"user": {"login": "Bhashinee", "name": "Bhashinee"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4f0bbb1f5f59f4cd1e210ee780ed41baa3503eac", "committedDate": "2020-12-21T09:47:13Z", "message": "Remove the async call and address review suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2NzY0Nzg3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27571#pullrequestreview-556764787", "createdAt": "2020-12-22T01:37:42Z", "commit": {"oid": "4f0bbb1f5f59f4cd1e210ee780ed41baa3503eac"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4641, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}