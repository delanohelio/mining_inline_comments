{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2ODM3Nzgw", "number": 22388, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzoxNDowOFrODthq1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDozODoxMlrODtsnSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDY0MTUwOnYy", "diffSide": "RIGHT", "path": "misc/ballerina-bindgen/src/main/java/org/ballerinalang/bindgen/model/JMethod.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzoxNDowOFrOF-__cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzoyOTozM1rOF_AptA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYwNDQ2Ng==", "bodyText": "As a practice, we add @SInCE annotation. Shall we add that.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22388#discussion_r401604466", "createdAt": "2020-04-01T13:14:08Z", "author": {"login": "warunalakshitha"}, "path": "misc/ballerina-bindgen/src/main/java/org/ballerinalang/bindgen/model/JMethod.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.bindgen.model;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Parameter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static org.ballerinalang.bindgen.command.BindingsGenerator.getAllJavaClasses;\n+import static org.ballerinalang.bindgen.command.BindingsGenerator.setClassListForLooping;\n+import static org.ballerinalang.bindgen.utils.BindgenConstants.BALLERINA_RESERVED_WORDS;\n+import static org.ballerinalang.bindgen.utils.BindgenConstants.BALLERINA_STRING;\n+import static org.ballerinalang.bindgen.utils.BindgenConstants.BALLERINA_STRING_ARRAY;\n+import static org.ballerinalang.bindgen.utils.BindgenConstants.METHOD_INTEROP_TYPE;\n+import static org.ballerinalang.bindgen.utils.BindgenUtils.getBallerinaHandleType;\n+import static org.ballerinalang.bindgen.utils.BindgenUtils.getBallerinaParamType;\n+import static org.ballerinalang.bindgen.utils.BindgenUtils.isStaticMethod;\n+\n+/**\n+ * Class for storing details pertaining to a specific Java method used for Ballerina bridge code generation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69df4eff4f02da2415a6ae4b76fa46bda4eba3fc"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYxNTI4NA==", "bodyText": "Added the since annotation.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22388#discussion_r401615284", "createdAt": "2020-04-01T13:29:33Z", "author": {"login": "IrushiL"}, "path": "misc/ballerina-bindgen/src/main/java/org/ballerinalang/bindgen/model/JMethod.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.bindgen.model;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Parameter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import static org.ballerinalang.bindgen.command.BindingsGenerator.getAllJavaClasses;\n+import static org.ballerinalang.bindgen.command.BindingsGenerator.setClassListForLooping;\n+import static org.ballerinalang.bindgen.utils.BindgenConstants.BALLERINA_RESERVED_WORDS;\n+import static org.ballerinalang.bindgen.utils.BindgenConstants.BALLERINA_STRING;\n+import static org.ballerinalang.bindgen.utils.BindgenConstants.BALLERINA_STRING_ARRAY;\n+import static org.ballerinalang.bindgen.utils.BindgenConstants.METHOD_INTEROP_TYPE;\n+import static org.ballerinalang.bindgen.utils.BindgenUtils.getBallerinaHandleType;\n+import static org.ballerinalang.bindgen.utils.BindgenUtils.getBallerinaParamType;\n+import static org.ballerinalang.bindgen.utils.BindgenUtils.isStaticMethod;\n+\n+/**\n+ * Class for storing details pertaining to a specific Java method used for Ballerina bridge code generation.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYwNDQ2Ng=="}, "originalCommit": {"oid": "69df4eff4f02da2415a6ae4b76fa46bda4eba3fc"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDY0MzEzOnYy", "diffSide": "RIGHT", "path": "misc/ballerina-bindgen/src/main/java/org/ballerinalang/bindgen/model/JParameter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzoxNDozMVrOF_AAdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzoyOTozOVrOF_AqDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYwNDcyNA==", "bodyText": "@SInCE tag is missing.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22388#discussion_r401604724", "createdAt": "2020-04-01T13:14:31Z", "author": {"login": "warunalakshitha"}, "path": "misc/ballerina-bindgen/src/main/java/org/ballerinalang/bindgen/model/JParameter.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.bindgen.model;\n+\n+import java.lang.reflect.Parameter;\n+\n+import static org.ballerinalang.bindgen.command.BindingsGenerator.getAllJavaClasses;\n+import static org.ballerinalang.bindgen.command.BindingsGenerator.setClassListForLooping;\n+import static org.ballerinalang.bindgen.utils.BindgenConstants.BALLERINA_STRING;\n+import static org.ballerinalang.bindgen.utils.BindgenConstants.BALLERINA_STRING_ARRAY;\n+import static org.ballerinalang.bindgen.utils.BindgenUtils.getBallerinaHandleType;\n+import static org.ballerinalang.bindgen.utils.BindgenUtils.getBallerinaParamType;\n+import static org.ballerinalang.bindgen.utils.BindgenUtils.getPrimitiveArrayType;\n+\n+/**\n+ * Class for storing specific parameter details of a Java method used for Ballerina bridge code generation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69df4eff4f02da2415a6ae4b76fa46bda4eba3fc"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYxNTM3Mg==", "bodyText": "Added the since annotation.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22388#discussion_r401615372", "createdAt": "2020-04-01T13:29:39Z", "author": {"login": "IrushiL"}, "path": "misc/ballerina-bindgen/src/main/java/org/ballerinalang/bindgen/model/JParameter.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.bindgen.model;\n+\n+import java.lang.reflect.Parameter;\n+\n+import static org.ballerinalang.bindgen.command.BindingsGenerator.getAllJavaClasses;\n+import static org.ballerinalang.bindgen.command.BindingsGenerator.setClassListForLooping;\n+import static org.ballerinalang.bindgen.utils.BindgenConstants.BALLERINA_STRING;\n+import static org.ballerinalang.bindgen.utils.BindgenConstants.BALLERINA_STRING_ARRAY;\n+import static org.ballerinalang.bindgen.utils.BindgenUtils.getBallerinaHandleType;\n+import static org.ballerinalang.bindgen.utils.BindgenUtils.getBallerinaParamType;\n+import static org.ballerinalang.bindgen.utils.BindgenUtils.getPrimitiveArrayType;\n+\n+/**\n+ * Class for storing specific parameter details of a Java method used for Ballerina bridge code generation.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYwNDcyNA=="}, "originalCommit": {"oid": "69df4eff4f02da2415a6ae4b76fa46bda4eba3fc"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjM5Nzg3OnYy", "diffSide": "RIGHT", "path": "misc/ballerina-bindgen/src/main/java/org/ballerinalang/bindgen/model/JClass.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDoyNzowNVrOF_RWKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMTowOTozNVrOF_StbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg4ODgwOQ==", "bodyText": "Assigned variables have never accessed?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22388#discussion_r401888809", "createdAt": "2020-04-01T20:27:05Z", "author": {"login": "pramodya1994"}, "path": "misc/ballerina-bindgen/src/main/java/org/ballerinalang/bindgen/model/JClass.java", "diffHunk": "@@ -39,68 +38,66 @@\n \n /**\n  * Class for storing details pertaining to a specific Java class used for Ballerina bridge code generation.\n+ *\n+ * @since 1.2.0\n  */\n public class JClass {\n \n-    public String shortClassName;\n-    public String packageName;\n-\n     private String prefix;\n     private String className;\n+    private String packageName;\n+    private String shortClassName;\n \n-    private Boolean isInterface = false;\n-    private Boolean directClass = false;\n-    private Boolean isAbstractClass = false;\n-    private Boolean singleConstructor = false;\n-    private Boolean singleConstructorError = false;\n-\n-    private Set<Class> superClassObjects = new HashSet<>();\n+    private boolean isInterface = false;\n+    private boolean isDirectClass = false;\n+    private boolean isAbstract = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02b4f79ed8e0561f91df20949a1f4d07d1e4d1b8"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxMTE0OQ==", "bodyText": "This field is used in the handlebars template.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22388#discussion_r401911149", "createdAt": "2020-04-01T21:09:35Z", "author": {"login": "IrushiL"}, "path": "misc/ballerina-bindgen/src/main/java/org/ballerinalang/bindgen/model/JClass.java", "diffHunk": "@@ -39,68 +38,66 @@\n \n /**\n  * Class for storing details pertaining to a specific Java class used for Ballerina bridge code generation.\n+ *\n+ * @since 1.2.0\n  */\n public class JClass {\n \n-    public String shortClassName;\n-    public String packageName;\n-\n     private String prefix;\n     private String className;\n+    private String packageName;\n+    private String shortClassName;\n \n-    private Boolean isInterface = false;\n-    private Boolean directClass = false;\n-    private Boolean isAbstractClass = false;\n-    private Boolean singleConstructor = false;\n-    private Boolean singleConstructorError = false;\n-\n-    private Set<Class> superClassObjects = new HashSet<>();\n+    private boolean isInterface = false;\n+    private boolean isDirectClass = false;\n+    private boolean isAbstract = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg4ODgwOQ=="}, "originalCommit": {"oid": "02b4f79ed8e0561f91df20949a1f4d07d1e4d1b8"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjQwMTIxOnYy", "diffSide": "RIGHT", "path": "misc/ballerina-bindgen/src/main/java/org/ballerinalang/bindgen/model/JClass.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDoyODowNFrOF_RYKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMTowOTo0NFrOF_Stsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg4OTMyMQ==", "bodyText": "This variable is assigned but never accessed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22388#discussion_r401889321", "createdAt": "2020-04-01T20:28:04Z", "author": {"login": "pramodya1994"}, "path": "misc/ballerina-bindgen/src/main/java/org/ballerinalang/bindgen/model/JClass.java", "diffHunk": "@@ -39,68 +38,66 @@\n \n /**\n  * Class for storing details pertaining to a specific Java class used for Ballerina bridge code generation.\n+ *\n+ * @since 1.2.0\n  */\n public class JClass {\n \n-    public String shortClassName;\n-    public String packageName;\n-\n     private String prefix;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02b4f79ed8e0561f91df20949a1f4d07d1e4d1b8"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxMTIxOA==", "bodyText": "This field is used in the handlebars template.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22388#discussion_r401911218", "createdAt": "2020-04-01T21:09:44Z", "author": {"login": "IrushiL"}, "path": "misc/ballerina-bindgen/src/main/java/org/ballerinalang/bindgen/model/JClass.java", "diffHunk": "@@ -39,68 +38,66 @@\n \n /**\n  * Class for storing details pertaining to a specific Java class used for Ballerina bridge code generation.\n+ *\n+ * @since 1.2.0\n  */\n public class JClass {\n \n-    public String shortClassName;\n-    public String packageName;\n-\n     private String prefix;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg4OTMyMQ=="}, "originalCommit": {"oid": "02b4f79ed8e0561f91df20949a1f4d07d1e4d1b8"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjQwMzkwOnYy", "diffSide": "RIGHT", "path": "misc/ballerina-bindgen/src/main/java/org/ballerinalang/bindgen/model/JClass.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDoyODo1NFrOF_RZzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMToyOTo1NFrOF_TVxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg4OTc0Mg==", "bodyText": "Why this is empty?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22388#discussion_r401889742", "createdAt": "2020-04-01T20:28:54Z", "author": {"login": "pramodya1994"}, "path": "misc/ballerina-bindgen/src/main/java/org/ballerinalang/bindgen/model/JClass.java", "diffHunk": "@@ -111,52 +108,66 @@ public JClass(Class c) {\n     }\n \n     private void populateConstructors(Constructor[] constructors) {\n-\n         int i = 1;\n         for (Constructor constructor : constructors) {\n             JConstructor jConstructor = new JConstructor(constructor);\n-            jConstructor.setConstructorName(\"new\" + this.shortClassName + i);\n-            this.constructorList.add(jConstructor);\n+            jConstructor.setConstructorName(\"new\" + shortClassName + i);\n+            constructorList.add(jConstructor);\n             i++;\n         }\n     }\n \n     private void populateInitFunctions() {\n-\n         int j = 1;\n-        for (JConstructor constructor : this.constructorList) {\n+        for (JConstructor constructor : constructorList) {\n             JConstructor newCons = null;\n             try {\n                 newCons = (JConstructor) constructor.clone();\n-            } catch (CloneNotSupportedException e) {\n-                errStream.println(e);\n+            } catch (CloneNotSupportedException ignore) {\n+\n             }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02b4f79ed8e0561f91df20949a1f4d07d1e4d1b8"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkyMTQ3Nw==", "bodyText": "This error affects only the constructor function generation, therefore adding an output error message there or using a throwable did not make sense since it would either clutter the output or prevent generating the rest of the class. I will address this issue in a later PR by identifying all the incompletely generated bindings and giving a separate output or a detailed log file.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22388#discussion_r401921477", "createdAt": "2020-04-01T21:29:54Z", "author": {"login": "IrushiL"}, "path": "misc/ballerina-bindgen/src/main/java/org/ballerinalang/bindgen/model/JClass.java", "diffHunk": "@@ -111,52 +108,66 @@ public JClass(Class c) {\n     }\n \n     private void populateConstructors(Constructor[] constructors) {\n-\n         int i = 1;\n         for (Constructor constructor : constructors) {\n             JConstructor jConstructor = new JConstructor(constructor);\n-            jConstructor.setConstructorName(\"new\" + this.shortClassName + i);\n-            this.constructorList.add(jConstructor);\n+            jConstructor.setConstructorName(\"new\" + shortClassName + i);\n+            constructorList.add(jConstructor);\n             i++;\n         }\n     }\n \n     private void populateInitFunctions() {\n-\n         int j = 1;\n-        for (JConstructor constructor : this.constructorList) {\n+        for (JConstructor constructor : constructorList) {\n             JConstructor newCons = null;\n             try {\n                 newCons = (JConstructor) constructor.clone();\n-            } catch (CloneNotSupportedException e) {\n-                errStream.println(e);\n+            } catch (CloneNotSupportedException ignore) {\n+\n             }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg4OTc0Mg=="}, "originalCommit": {"oid": "02b4f79ed8e0561f91df20949a1f4d07d1e4d1b8"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjQzMDUyOnYy", "diffSide": "RIGHT", "path": "misc/ballerina-bindgen/src/main/java/org/ballerinalang/bindgen/utils/BindgenUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDozNzowMFrOF_RqSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMToxNzowOFrOF_S7yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg5Mzk2Mw==", "bodyText": "This method has used anywhere?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22388#discussion_r401893963", "createdAt": "2020-04-01T20:37:00Z", "author": {"login": "pramodya1994"}, "path": "misc/ballerina-bindgen/src/main/java/org/ballerinalang/bindgen/utils/BindgenUtils.java", "diffHunk": "@@ -231,7 +301,6 @@ public static void createDirectory(String path) throws BindgenException {\n     }\n \n     public static Set<String> getClassNamesInJar(String jarPath) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02b4f79ed8e0561f91df20949a1f4d07d1e4d1b8"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxNDgyNQ==", "bodyText": "No, ATM support for generating bindings for packages is not provided, but we intend on providing that in the future. This method could be used when implementing that feature and that is why it is not removed even though it is not used.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22388#discussion_r401914825", "createdAt": "2020-04-01T21:17:08Z", "author": {"login": "IrushiL"}, "path": "misc/ballerina-bindgen/src/main/java/org/ballerinalang/bindgen/utils/BindgenUtils.java", "diffHunk": "@@ -231,7 +301,6 @@ public static void createDirectory(String path) throws BindgenException {\n     }\n \n     public static Set<String> getClassNamesInJar(String jarPath) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg5Mzk2Mw=="}, "originalCommit": {"oid": "02b4f79ed8e0561f91df20949a1f4d07d1e4d1b8"}, "originalPosition": 257}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjQzNDY1OnYy", "diffSide": "RIGHT", "path": "misc/ballerina-bindgen/src/main/java/org/ballerinalang/bindgen/utils/BindgenUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDozODoxMlrOF_Rszw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMToxOTowMlrOF_S_dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg5NDYwNw==", "bodyText": "Have we used this method?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22388#discussion_r401894607", "createdAt": "2020-04-01T20:38:12Z", "author": {"login": "pramodya1994"}, "path": "misc/ballerina-bindgen/src/main/java/org/ballerinalang/bindgen/utils/BindgenUtils.java", "diffHunk": "@@ -256,49 +325,41 @@ public static void createDirectory(String path) throws BindgenException {\n     }\n \n     public static boolean isPublicField(Field field) {\n-\n         int modifiers = field.getModifiers();\n         return Modifier.isPublic(modifiers);\n     }\n \n     public static boolean isPublicMethod(Method method) {\n-\n         int modifiers = method.getModifiers();\n         return Modifier.isPublic(modifiers);\n     }\n \n     public static boolean isPublicClass(Class javaClass) {\n-\n         int modifiers = javaClass.getModifiers();\n         return Modifier.isPublic(modifiers);\n     }\n \n     public static boolean isStaticField(Field field) {\n-\n         int modifiers = field.getModifiers();\n         return Modifier.isStatic(modifiers);\n     }\n \n     public static boolean isStaticMethod(Method method) {\n-\n         int modifiers = method.getModifiers();\n         return Modifier.isStatic(modifiers);\n     }\n \n     public static boolean isFinalField(Field field) {\n-\n         int modifiers = field.getModifiers();\n         return Modifier.isFinal(modifiers);\n     }\n \n     public static boolean isAbstractClass(Class javaClass) {\n-\n         int modifiers = javaClass.getModifiers();\n         return Modifier.isAbstract(modifiers);\n     }\n \n     public static String getModuleName(String jarPath) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02b4f79ed8e0561f91df20949a1f4d07d1e4d1b8"}, "originalPosition": 307}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxNTc2NQ==", "bodyText": "No, ATM support for generating bindings for complete jar files is not provided, but we intend on providing that in the future. This method could be used when implementing that feature in order to figure out the name of the module and that is why it is not removed even though it is not used.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22388#discussion_r401915765", "createdAt": "2020-04-01T21:19:02Z", "author": {"login": "IrushiL"}, "path": "misc/ballerina-bindgen/src/main/java/org/ballerinalang/bindgen/utils/BindgenUtils.java", "diffHunk": "@@ -256,49 +325,41 @@ public static void createDirectory(String path) throws BindgenException {\n     }\n \n     public static boolean isPublicField(Field field) {\n-\n         int modifiers = field.getModifiers();\n         return Modifier.isPublic(modifiers);\n     }\n \n     public static boolean isPublicMethod(Method method) {\n-\n         int modifiers = method.getModifiers();\n         return Modifier.isPublic(modifiers);\n     }\n \n     public static boolean isPublicClass(Class javaClass) {\n-\n         int modifiers = javaClass.getModifiers();\n         return Modifier.isPublic(modifiers);\n     }\n \n     public static boolean isStaticField(Field field) {\n-\n         int modifiers = field.getModifiers();\n         return Modifier.isStatic(modifiers);\n     }\n \n     public static boolean isStaticMethod(Method method) {\n-\n         int modifiers = method.getModifiers();\n         return Modifier.isStatic(modifiers);\n     }\n \n     public static boolean isFinalField(Field field) {\n-\n         int modifiers = field.getModifiers();\n         return Modifier.isFinal(modifiers);\n     }\n \n     public static boolean isAbstractClass(Class javaClass) {\n-\n         int modifiers = javaClass.getModifiers();\n         return Modifier.isAbstract(modifiers);\n     }\n \n     public static String getModuleName(String jarPath) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg5NDYwNw=="}, "originalCommit": {"oid": "02b4f79ed8e0561f91df20949a1f4d07d1e4d1b8"}, "originalPosition": 307}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4494, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}