{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0MzYxMTE5", "number": 27025, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwMjo0Nzo0OFrOE7Vx0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwMjo1MzozMlrOE7V12A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjU4MjU5OnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-core/src/test/java/org/ballerinalang/langserver/diagnostics/Diagnostics.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwMjo0Nzo0OFrOH27d3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwMzozOTozOVrOH28Urg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM1OTQ1Mg==", "bodyText": "Shall we name this as DiagnosticsTest", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27025#discussion_r527359452", "createdAt": "2020-11-20T02:47:48Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-core/src/test/java/org/ballerinalang/langserver/diagnostics/Diagnostics.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ *  Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.langserver.diagnostics;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import org.ballerinalang.langserver.LSContextOperation;\n+import org.ballerinalang.langserver.common.utils.CommonUtil;\n+import org.ballerinalang.langserver.commons.DocumentServiceContext;\n+import org.ballerinalang.langserver.contexts.ContextBuilder;\n+import org.ballerinalang.langserver.diagnostic.DiagnosticsHelper;\n+import org.ballerinalang.langserver.util.FileUtils;\n+import org.ballerinalang.langserver.util.TestUtil;\n+import org.ballerinalang.langserver.workspace.BallerinaWorkspaceManager;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.jsonrpc.Endpoint;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.InvalidPathException;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * Diagnostics tests are covered here.\n+ * \n+ * @since 2.0.0\n+ */\n+public class Diagnostics {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "408f25cca391c49727cd73f657fd572c9aed1360"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM3MzQ4Ng==", "bodyText": "+1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27025#discussion_r527373486", "createdAt": "2020-11-20T03:39:39Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/test/java/org/ballerinalang/langserver/diagnostics/Diagnostics.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ *  Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.langserver.diagnostics;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import org.ballerinalang.langserver.LSContextOperation;\n+import org.ballerinalang.langserver.common.utils.CommonUtil;\n+import org.ballerinalang.langserver.commons.DocumentServiceContext;\n+import org.ballerinalang.langserver.contexts.ContextBuilder;\n+import org.ballerinalang.langserver.diagnostic.DiagnosticsHelper;\n+import org.ballerinalang.langserver.util.FileUtils;\n+import org.ballerinalang.langserver.util.TestUtil;\n+import org.ballerinalang.langserver.workspace.BallerinaWorkspaceManager;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.jsonrpc.Endpoint;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.InvalidPathException;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * Diagnostics tests are covered here.\n+ * \n+ * @since 2.0.0\n+ */\n+public class Diagnostics {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM1OTQ1Mg=="}, "originalCommit": {"oid": "408f25cca391c49727cd73f657fd572c9aed1360"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjU5Mjg4OnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/hover/HoverUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwMjo1MzozMlrOH27j4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwMzozOToxN1rOH28UUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM2MDk5NA==", "bodyText": "Since the Symbol.docAttachment(); is at Symbol level, can't we have a single function to get markup content? Easier and minimum changes required to maintain against future lang changes.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27025#discussion_r527360994", "createdAt": "2020-11-20T02:53:32Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/hover/HoverUtil.java", "diffHunk": "@@ -54,80 +49,144 @@\n     /**\n      * Get the hover content.\n      *\n-     * @param context        Hover operation context\n-     * @param cursorPosition Cursor position\n+     * @param context Hover operation context\n      * @return {@link Hover} Hover content\n      */\n-    public static Hover getHover(HoverContext context, Position cursorPosition) throws TokenOrSymbolNotFoundException {\n+    public static Hover getHover(HoverContext context) {\n         Optional<SemanticModel> semanticModel = context.workspace().semanticModel(context.filePath());\n         if (semanticModel.isEmpty()) {\n             return HoverUtil.getDefaultHoverObject();\n         }\n-        // TODO: Migrate to the latest\n-        Token tokenAtCursor = TokensUtil.findTokenAtPosition(context, cursorPosition);\n-        context.setTokenAtCursor(tokenAtCursor);\n \n-        return HoverUtil.getDefaultHoverObject();\n+        Position cursorPosition = context.getCursorPosition();\n+        LinePosition linePosition = LinePosition.from(cursorPosition.getLine(), cursorPosition.getCharacter());\n+        Optional<Symbol> symbolAtCursor = semanticModel.get()\n+                .symbol(context.filePath().getFileName().getFileName().toString(), linePosition);\n+        if (symbolAtCursor.isEmpty()) {\n+            return HoverUtil.getDefaultHoverObject();\n+        }\n+\n+        switch (symbolAtCursor.get().kind()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "408f25cca391c49727cd73f657fd572c9aed1360"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM3MzM5Mg==", "bodyText": "We have to have separate functions since each of the construct behaves differently. For an instance, function's docs and the record's docs are completely different when considered to the class. Instead of having a single method with number of checks to bypass each case.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27025#discussion_r527373392", "createdAt": "2020-11-20T03:39:17Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/hover/HoverUtil.java", "diffHunk": "@@ -54,80 +49,144 @@\n     /**\n      * Get the hover content.\n      *\n-     * @param context        Hover operation context\n-     * @param cursorPosition Cursor position\n+     * @param context Hover operation context\n      * @return {@link Hover} Hover content\n      */\n-    public static Hover getHover(HoverContext context, Position cursorPosition) throws TokenOrSymbolNotFoundException {\n+    public static Hover getHover(HoverContext context) {\n         Optional<SemanticModel> semanticModel = context.workspace().semanticModel(context.filePath());\n         if (semanticModel.isEmpty()) {\n             return HoverUtil.getDefaultHoverObject();\n         }\n-        // TODO: Migrate to the latest\n-        Token tokenAtCursor = TokensUtil.findTokenAtPosition(context, cursorPosition);\n-        context.setTokenAtCursor(tokenAtCursor);\n \n-        return HoverUtil.getDefaultHoverObject();\n+        Position cursorPosition = context.getCursorPosition();\n+        LinePosition linePosition = LinePosition.from(cursorPosition.getLine(), cursorPosition.getCharacter());\n+        Optional<Symbol> symbolAtCursor = semanticModel.get()\n+                .symbol(context.filePath().getFileName().getFileName().toString(), linePosition);\n+        if (symbolAtCursor.isEmpty()) {\n+            return HoverUtil.getDefaultHoverObject();\n+        }\n+\n+        switch (symbolAtCursor.get().kind()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM2MDk5NA=="}, "originalCommit": {"oid": "408f25cca391c49727cd73f657fd572c9aed1360"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3036, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}