{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0ODY0Mzc0", "number": 26156, "title": "Add BaloProject", "bodyText": "Purpose\n\nImplement BaloProject for new Project API to load BaloProject from a balo file.\n\nFixes #25740\nApproach\n\nDescribe how you are implementing the solutions along with the design details.\n\nSamples\n\nProvide high-level details about the samples related to this feature.\n\nRemarks\n\nList any other known issues, related PRs, TODO items, or any other notes related to the PR.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-09-29T14:14:50Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26156", "merged": true, "mergeCommit": {"oid": "d06aa8a179184d25738276b4409e686029e54e3b"}, "closed": true, "closedAt": "2020-10-06T02:49:40Z", "author": {"login": "pramodya1994"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdNo1ODgH2gAyNDk0ODY0Mzc0OjhhN2JmZDU0NjZjNzkwNWYxMzRmZjNiZDlmNDUwYjc5YTBkMzNlZDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdPnuyVAH2gAyNDk0ODY0Mzc0OmJmYzRhMmE1YTA4MGIyZTczNDAzNGFkOWM0NThkZjhlNGZjZDBjMTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8a7bfd5466c7905f134ff3bd9f450b79a0d33ed4", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8a7bfd5466c7905f134ff3bd9f450b79a0d33ed4", "committedDate": "2020-09-29T14:12:35Z", "message": "Add BaloProject\n\nImplement BaloProject for new Project API to load BaloProject\nfrom a balo file.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/25740"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0af3876ebb68f36ded311fa99c165a104e2a3a25", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0af3876ebb68f36ded311fa99c165a104e2a3a25", "committedDate": "2020-09-29T15:03:41Z", "message": "Fix checkstyles"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MzMwNDY0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26156#pullrequestreview-499330464", "createdAt": "2020-09-30T11:26:20Z", "commit": {"oid": "0af3876ebb68f36ded311fa99c165a104e2a3a25"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMToyNjoyMFrOHaZBQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMToyNjoyMFrOHaZBQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQzNDk0Nw==", "bodyText": "We can use a constant for \".balo\". There is already one in ProjectDirConstants. We can copy it to ProjectConstants and use it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26156#discussion_r497434947", "createdAt": "2020-09-30T11:26:20Z", "author": {"login": "azinneera"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/balo/BaloFiles.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package io.ballerina.projects.balo;\n+\n+import com.google.gson.Gson;\n+import io.ballerina.projects.directory.DocumentData;\n+import io.ballerina.projects.directory.ModuleData;\n+import io.ballerina.projects.directory.PackageData;\n+import io.ballerina.projects.model.BallerinaToml;\n+import io.ballerina.projects.model.Package;\n+import io.ballerina.projects.model.PackageJson;\n+import io.ballerina.projects.utils.ProjectUtils;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.ballerina.projects.utils.ProjectConstants.MODULES_ROOT;\n+\n+/**\n+ * Contains a set of utility methods that create an in-memory representation of a Ballerina project using a balo.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BaloFiles {\n+    private static final PathMatcher matcher = FileSystems.getDefault().getPathMatcher(\"glob:**.bal\");\n+    private static Gson gson = new Gson();\n+\n+    private BaloFiles() {\n+    }\n+\n+    public static PackageData loadPackageData(String baloPath) {\n+        Path absBaloPath = validateBaloPath(baloPath);\n+\n+        URI zipURI = URI.create(\"jar:\" + absBaloPath.toUri().toString());\n+        try (FileSystem zipFileSystem = FileSystems.newFileSystem(zipURI, new HashMap<>())) {\n+\n+            // Load BallerinaToml object\n+            Path packageJsonPathInBalo = zipFileSystem.getPath(\"package.json\");\n+            BallerinaToml ballerinaToml = loadBallerinaToml(packageJsonPathInBalo);\n+\n+            // Load default module\n+            Path defaultModulePathInBalo = zipFileSystem.getPath(MODULES_ROOT, ballerinaToml.getPackage().getName());\n+            ModuleData defaultModule = loadModule(defaultModulePathInBalo);\n+\n+            // load other modules\n+            Path modulesPathInBalo = zipFileSystem.getPath(MODULES_ROOT);\n+            List<ModuleData> otherModules = loadOtherModules(modulesPathInBalo, defaultModulePathInBalo);\n+\n+            return PackageData.from(absBaloPath, defaultModule, otherModules);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"cannot read balo:\" + baloPath);\n+        }\n+    }\n+\n+    private static Path validateBaloPath(String baloPath) {\n+        if (baloPath == null) {\n+            throw new IllegalArgumentException(\"baloPath cannot be null\");\n+        }\n+\n+        Path absBaloPath = Paths.get(baloPath).toAbsolutePath();\n+        if (!absBaloPath.toFile().canRead()) {\n+            throw new RuntimeException(\"insufficient privileges to balo: \" + absBaloPath);\n+        }\n+        if (!absBaloPath.toFile().exists()) {\n+            throw new RuntimeException(\"balo does not exists: \" + baloPath);\n+        }\n+\n+        if (!absBaloPath.toString().endsWith(\".balo\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0af3876ebb68f36ded311fa99c165a104e2a3a25"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MzMyMzg3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26156#pullrequestreview-499332387", "createdAt": "2020-09-30T11:29:15Z", "commit": {"oid": "0af3876ebb68f36ded311fa99c165a104e2a3a25"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMToyOToxNVrOHaZHKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMToyOToxNVrOHaZHKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQzNjQ1Ng==", "bodyText": "This method is already there in ProjectFiles class. Shall we make use of that one without duplicating it here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26156#discussion_r497436456", "createdAt": "2020-09-30T11:29:15Z", "author": {"login": "azinneera"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/balo/BaloFiles.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package io.ballerina.projects.balo;\n+\n+import com.google.gson.Gson;\n+import io.ballerina.projects.directory.DocumentData;\n+import io.ballerina.projects.directory.ModuleData;\n+import io.ballerina.projects.directory.PackageData;\n+import io.ballerina.projects.model.BallerinaToml;\n+import io.ballerina.projects.model.Package;\n+import io.ballerina.projects.model.PackageJson;\n+import io.ballerina.projects.utils.ProjectUtils;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.ballerina.projects.utils.ProjectConstants.MODULES_ROOT;\n+\n+/**\n+ * Contains a set of utility methods that create an in-memory representation of a Ballerina project using a balo.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BaloFiles {\n+    private static final PathMatcher matcher = FileSystems.getDefault().getPathMatcher(\"glob:**.bal\");\n+    private static Gson gson = new Gson();\n+\n+    private BaloFiles() {\n+    }\n+\n+    public static PackageData loadPackageData(String baloPath) {\n+        Path absBaloPath = validateBaloPath(baloPath);\n+\n+        URI zipURI = URI.create(\"jar:\" + absBaloPath.toUri().toString());\n+        try (FileSystem zipFileSystem = FileSystems.newFileSystem(zipURI, new HashMap<>())) {\n+\n+            // Load BallerinaToml object\n+            Path packageJsonPathInBalo = zipFileSystem.getPath(\"package.json\");\n+            BallerinaToml ballerinaToml = loadBallerinaToml(packageJsonPathInBalo);\n+\n+            // Load default module\n+            Path defaultModulePathInBalo = zipFileSystem.getPath(MODULES_ROOT, ballerinaToml.getPackage().getName());\n+            ModuleData defaultModule = loadModule(defaultModulePathInBalo);\n+\n+            // load other modules\n+            Path modulesPathInBalo = zipFileSystem.getPath(MODULES_ROOT);\n+            List<ModuleData> otherModules = loadOtherModules(modulesPathInBalo, defaultModulePathInBalo);\n+\n+            return PackageData.from(absBaloPath, defaultModule, otherModules);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"cannot read balo:\" + baloPath);\n+        }\n+    }\n+\n+    private static Path validateBaloPath(String baloPath) {\n+        if (baloPath == null) {\n+            throw new IllegalArgumentException(\"baloPath cannot be null\");\n+        }\n+\n+        Path absBaloPath = Paths.get(baloPath).toAbsolutePath();\n+        if (!absBaloPath.toFile().canRead()) {\n+            throw new RuntimeException(\"insufficient privileges to balo: \" + absBaloPath);\n+        }\n+        if (!absBaloPath.toFile().exists()) {\n+            throw new RuntimeException(\"balo does not exists: \" + baloPath);\n+        }\n+\n+        if (!absBaloPath.toString().endsWith(\".balo\")) {\n+            throw new RuntimeException(\"Not a balo: \" + baloPath);\n+        }\n+        return absBaloPath;\n+    }\n+\n+    private static BallerinaToml loadBallerinaToml(Path packageJsonPath) {\n+        BallerinaToml ballerinaToml = new BallerinaToml();\n+\n+        if (!Files.exists(packageJsonPath)) {\n+            throw new RuntimeException(\"package.json does not exists:\" + packageJsonPath);\n+        }\n+        // Load `package.json`\n+        PackageJson packageJson;\n+        try {\n+            packageJson = gson.fromJson(Files.newBufferedReader(packageJsonPath), PackageJson.class);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"package.json does not exists:\" + packageJsonPath);\n+        }\n+        validatePackageJson(packageJson);\n+        // Create Package\n+        Package tomlPackage = new Package();\n+        tomlPackage.setOrg(packageJson.getOrganization());\n+        tomlPackage.setName(packageJson.getName());\n+        tomlPackage.setVersion(packageJson.getVersion());\n+        tomlPackage.setLicense(packageJson.getLicenses());\n+        tomlPackage.setAuthors(packageJson.getAuthors());\n+        tomlPackage.setRepository(packageJson.getSourceRepository());\n+        tomlPackage.setKeywords(packageJson.getKeywords());\n+\n+        ballerinaToml.setPkg(tomlPackage);\n+        return ballerinaToml;\n+    }\n+\n+    private static void validatePackageJson(PackageJson packageJson) {\n+        if (packageJson.getOrganization() == null || \"\".equals(packageJson.getOrganization())) {\n+            throw new RuntimeException(\"'organization' does not exists in 'package.json'\");\n+        }\n+        if (packageJson.getName() == null || \"\".equals(packageJson.getName())) {\n+            throw new RuntimeException(\"'name' does not exists in 'package.json'\");\n+        }\n+        if (packageJson.getVersion() == null || \"\".equals(packageJson.getVersion())) {\n+            throw new RuntimeException(\"'version' does not exists in 'package.json'\");\n+        }\n+    }\n+\n+    private static ModuleData loadModule(Path modulePath) {\n+        // check module path exists\n+        if (!Files.exists(modulePath)) {\n+            throw new RuntimeException(\"module does not exists:\" + modulePath);\n+        }\n+\n+        String moduleName = String.valueOf(modulePath.getFileName());\n+        if (moduleName.contains(\".\")) { // not default module\n+            moduleName = moduleName.split(\"\\\\.\")[1];\n+            moduleName = moduleName.replace(\"/\", \"\");\n+        }\n+\n+        // validate moduleName\n+        if (!ProjectUtils.validateModuleName(moduleName)) {\n+            throw new RuntimeException(\"Invalid module name : '\" + moduleName + \"' :\\n\" +\n+                    \"Module name can only contain alphanumerics, underscores and periods \" +\n+                    \"and the maximum length is 256 characters\");\n+        }\n+        List<DocumentData> srcDocs = loadDocuments(modulePath);\n+        List<DocumentData> testSrcDocs = Collections.emptyList();\n+\n+        // TODO Read Module.md file. Do we need to? Balo creator may need to package Module.md\n+        return ModuleData.from(modulePath, srcDocs, testSrcDocs);\n+    }\n+\n+    private static List<DocumentData> loadDocuments(Path dirPath) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0af3876ebb68f36ded311fa99c165a104e2a3a25"}, "originalPosition": 166}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MzM0NTQ1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26156#pullrequestreview-499334545", "createdAt": "2020-09-30T11:32:30Z", "commit": {"oid": "0af3876ebb68f36ded311fa99c165a104e2a3a25"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMTozMjozMFrOHaZNxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMTozMjozMFrOHaZNxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQzODE0OA==", "bodyText": "The 2nd argument passed to create an instance of DocumentData should be the content.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26156#discussion_r497438148", "createdAt": "2020-09-30T11:32:30Z", "author": {"login": "azinneera"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/balo/BaloFiles.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package io.ballerina.projects.balo;\n+\n+import com.google.gson.Gson;\n+import io.ballerina.projects.directory.DocumentData;\n+import io.ballerina.projects.directory.ModuleData;\n+import io.ballerina.projects.directory.PackageData;\n+import io.ballerina.projects.model.BallerinaToml;\n+import io.ballerina.projects.model.Package;\n+import io.ballerina.projects.model.PackageJson;\n+import io.ballerina.projects.utils.ProjectUtils;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.ballerina.projects.utils.ProjectConstants.MODULES_ROOT;\n+\n+/**\n+ * Contains a set of utility methods that create an in-memory representation of a Ballerina project using a balo.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BaloFiles {\n+    private static final PathMatcher matcher = FileSystems.getDefault().getPathMatcher(\"glob:**.bal\");\n+    private static Gson gson = new Gson();\n+\n+    private BaloFiles() {\n+    }\n+\n+    public static PackageData loadPackageData(String baloPath) {\n+        Path absBaloPath = validateBaloPath(baloPath);\n+\n+        URI zipURI = URI.create(\"jar:\" + absBaloPath.toUri().toString());\n+        try (FileSystem zipFileSystem = FileSystems.newFileSystem(zipURI, new HashMap<>())) {\n+\n+            // Load BallerinaToml object\n+            Path packageJsonPathInBalo = zipFileSystem.getPath(\"package.json\");\n+            BallerinaToml ballerinaToml = loadBallerinaToml(packageJsonPathInBalo);\n+\n+            // Load default module\n+            Path defaultModulePathInBalo = zipFileSystem.getPath(MODULES_ROOT, ballerinaToml.getPackage().getName());\n+            ModuleData defaultModule = loadModule(defaultModulePathInBalo);\n+\n+            // load other modules\n+            Path modulesPathInBalo = zipFileSystem.getPath(MODULES_ROOT);\n+            List<ModuleData> otherModules = loadOtherModules(modulesPathInBalo, defaultModulePathInBalo);\n+\n+            return PackageData.from(absBaloPath, defaultModule, otherModules);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"cannot read balo:\" + baloPath);\n+        }\n+    }\n+\n+    private static Path validateBaloPath(String baloPath) {\n+        if (baloPath == null) {\n+            throw new IllegalArgumentException(\"baloPath cannot be null\");\n+        }\n+\n+        Path absBaloPath = Paths.get(baloPath).toAbsolutePath();\n+        if (!absBaloPath.toFile().canRead()) {\n+            throw new RuntimeException(\"insufficient privileges to balo: \" + absBaloPath);\n+        }\n+        if (!absBaloPath.toFile().exists()) {\n+            throw new RuntimeException(\"balo does not exists: \" + baloPath);\n+        }\n+\n+        if (!absBaloPath.toString().endsWith(\".balo\")) {\n+            throw new RuntimeException(\"Not a balo: \" + baloPath);\n+        }\n+        return absBaloPath;\n+    }\n+\n+    private static BallerinaToml loadBallerinaToml(Path packageJsonPath) {\n+        BallerinaToml ballerinaToml = new BallerinaToml();\n+\n+        if (!Files.exists(packageJsonPath)) {\n+            throw new RuntimeException(\"package.json does not exists:\" + packageJsonPath);\n+        }\n+        // Load `package.json`\n+        PackageJson packageJson;\n+        try {\n+            packageJson = gson.fromJson(Files.newBufferedReader(packageJsonPath), PackageJson.class);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"package.json does not exists:\" + packageJsonPath);\n+        }\n+        validatePackageJson(packageJson);\n+        // Create Package\n+        Package tomlPackage = new Package();\n+        tomlPackage.setOrg(packageJson.getOrganization());\n+        tomlPackage.setName(packageJson.getName());\n+        tomlPackage.setVersion(packageJson.getVersion());\n+        tomlPackage.setLicense(packageJson.getLicenses());\n+        tomlPackage.setAuthors(packageJson.getAuthors());\n+        tomlPackage.setRepository(packageJson.getSourceRepository());\n+        tomlPackage.setKeywords(packageJson.getKeywords());\n+\n+        ballerinaToml.setPkg(tomlPackage);\n+        return ballerinaToml;\n+    }\n+\n+    private static void validatePackageJson(PackageJson packageJson) {\n+        if (packageJson.getOrganization() == null || \"\".equals(packageJson.getOrganization())) {\n+            throw new RuntimeException(\"'organization' does not exists in 'package.json'\");\n+        }\n+        if (packageJson.getName() == null || \"\".equals(packageJson.getName())) {\n+            throw new RuntimeException(\"'name' does not exists in 'package.json'\");\n+        }\n+        if (packageJson.getVersion() == null || \"\".equals(packageJson.getVersion())) {\n+            throw new RuntimeException(\"'version' does not exists in 'package.json'\");\n+        }\n+    }\n+\n+    private static ModuleData loadModule(Path modulePath) {\n+        // check module path exists\n+        if (!Files.exists(modulePath)) {\n+            throw new RuntimeException(\"module does not exists:\" + modulePath);\n+        }\n+\n+        String moduleName = String.valueOf(modulePath.getFileName());\n+        if (moduleName.contains(\".\")) { // not default module\n+            moduleName = moduleName.split(\"\\\\.\")[1];\n+            moduleName = moduleName.replace(\"/\", \"\");\n+        }\n+\n+        // validate moduleName\n+        if (!ProjectUtils.validateModuleName(moduleName)) {\n+            throw new RuntimeException(\"Invalid module name : '\" + moduleName + \"' :\\n\" +\n+                    \"Module name can only contain alphanumerics, underscores and periods \" +\n+                    \"and the maximum length is 256 characters\");\n+        }\n+        List<DocumentData> srcDocs = loadDocuments(modulePath);\n+        List<DocumentData> testSrcDocs = Collections.emptyList();\n+\n+        // TODO Read Module.md file. Do we need to? Balo creator may need to package Module.md\n+        return ModuleData.from(modulePath, srcDocs, testSrcDocs);\n+    }\n+\n+    private static List<DocumentData> loadDocuments(Path dirPath) {\n+        try (Stream<Path> pathStream = Files.walk(dirPath, 1)) {\n+            return pathStream\n+                    .filter(matcher::matches)\n+                    .map(BaloFiles::loadDocument)\n+                    .collect(Collectors.toList());\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static DocumentData loadDocument(Path documentFilePath) {\n+        Path fileNamePath = documentFilePath.getFileName();\n+        // IMO, fileNamePath cannot be null in this case.\n+        String name = fileNamePath != null ? fileNamePath.toString() : \"\";\n+        return DocumentData.from(name, String.valueOf(documentFilePath));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0af3876ebb68f36ded311fa99c165a104e2a3a25"}, "originalPosition": 181}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MzM5MDYy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26156#pullrequestreview-499339062", "createdAt": "2020-09-30T11:39:13Z", "commit": {"oid": "0af3876ebb68f36ded311fa99c165a104e2a3a25"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMTozOToxM1rOHaZayw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMTozOToxM1rOHaZayw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ0MTQ4Mw==", "bodyText": "Should we use File.separator instead of \"/\"?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26156#discussion_r497441483", "createdAt": "2020-09-30T11:39:13Z", "author": {"login": "azinneera"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/balo/BaloFiles.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package io.ballerina.projects.balo;\n+\n+import com.google.gson.Gson;\n+import io.ballerina.projects.directory.DocumentData;\n+import io.ballerina.projects.directory.ModuleData;\n+import io.ballerina.projects.directory.PackageData;\n+import io.ballerina.projects.model.BallerinaToml;\n+import io.ballerina.projects.model.Package;\n+import io.ballerina.projects.model.PackageJson;\n+import io.ballerina.projects.utils.ProjectUtils;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.ballerina.projects.utils.ProjectConstants.MODULES_ROOT;\n+\n+/**\n+ * Contains a set of utility methods that create an in-memory representation of a Ballerina project using a balo.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BaloFiles {\n+    private static final PathMatcher matcher = FileSystems.getDefault().getPathMatcher(\"glob:**.bal\");\n+    private static Gson gson = new Gson();\n+\n+    private BaloFiles() {\n+    }\n+\n+    public static PackageData loadPackageData(String baloPath) {\n+        Path absBaloPath = validateBaloPath(baloPath);\n+\n+        URI zipURI = URI.create(\"jar:\" + absBaloPath.toUri().toString());\n+        try (FileSystem zipFileSystem = FileSystems.newFileSystem(zipURI, new HashMap<>())) {\n+\n+            // Load BallerinaToml object\n+            Path packageJsonPathInBalo = zipFileSystem.getPath(\"package.json\");\n+            BallerinaToml ballerinaToml = loadBallerinaToml(packageJsonPathInBalo);\n+\n+            // Load default module\n+            Path defaultModulePathInBalo = zipFileSystem.getPath(MODULES_ROOT, ballerinaToml.getPackage().getName());\n+            ModuleData defaultModule = loadModule(defaultModulePathInBalo);\n+\n+            // load other modules\n+            Path modulesPathInBalo = zipFileSystem.getPath(MODULES_ROOT);\n+            List<ModuleData> otherModules = loadOtherModules(modulesPathInBalo, defaultModulePathInBalo);\n+\n+            return PackageData.from(absBaloPath, defaultModule, otherModules);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"cannot read balo:\" + baloPath);\n+        }\n+    }\n+\n+    private static Path validateBaloPath(String baloPath) {\n+        if (baloPath == null) {\n+            throw new IllegalArgumentException(\"baloPath cannot be null\");\n+        }\n+\n+        Path absBaloPath = Paths.get(baloPath).toAbsolutePath();\n+        if (!absBaloPath.toFile().canRead()) {\n+            throw new RuntimeException(\"insufficient privileges to balo: \" + absBaloPath);\n+        }\n+        if (!absBaloPath.toFile().exists()) {\n+            throw new RuntimeException(\"balo does not exists: \" + baloPath);\n+        }\n+\n+        if (!absBaloPath.toString().endsWith(\".balo\")) {\n+            throw new RuntimeException(\"Not a balo: \" + baloPath);\n+        }\n+        return absBaloPath;\n+    }\n+\n+    private static BallerinaToml loadBallerinaToml(Path packageJsonPath) {\n+        BallerinaToml ballerinaToml = new BallerinaToml();\n+\n+        if (!Files.exists(packageJsonPath)) {\n+            throw new RuntimeException(\"package.json does not exists:\" + packageJsonPath);\n+        }\n+        // Load `package.json`\n+        PackageJson packageJson;\n+        try {\n+            packageJson = gson.fromJson(Files.newBufferedReader(packageJsonPath), PackageJson.class);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"package.json does not exists:\" + packageJsonPath);\n+        }\n+        validatePackageJson(packageJson);\n+        // Create Package\n+        Package tomlPackage = new Package();\n+        tomlPackage.setOrg(packageJson.getOrganization());\n+        tomlPackage.setName(packageJson.getName());\n+        tomlPackage.setVersion(packageJson.getVersion());\n+        tomlPackage.setLicense(packageJson.getLicenses());\n+        tomlPackage.setAuthors(packageJson.getAuthors());\n+        tomlPackage.setRepository(packageJson.getSourceRepository());\n+        tomlPackage.setKeywords(packageJson.getKeywords());\n+\n+        ballerinaToml.setPkg(tomlPackage);\n+        return ballerinaToml;\n+    }\n+\n+    private static void validatePackageJson(PackageJson packageJson) {\n+        if (packageJson.getOrganization() == null || \"\".equals(packageJson.getOrganization())) {\n+            throw new RuntimeException(\"'organization' does not exists in 'package.json'\");\n+        }\n+        if (packageJson.getName() == null || \"\".equals(packageJson.getName())) {\n+            throw new RuntimeException(\"'name' does not exists in 'package.json'\");\n+        }\n+        if (packageJson.getVersion() == null || \"\".equals(packageJson.getVersion())) {\n+            throw new RuntimeException(\"'version' does not exists in 'package.json'\");\n+        }\n+    }\n+\n+    private static ModuleData loadModule(Path modulePath) {\n+        // check module path exists\n+        if (!Files.exists(modulePath)) {\n+            throw new RuntimeException(\"module does not exists:\" + modulePath);\n+        }\n+\n+        String moduleName = String.valueOf(modulePath.getFileName());\n+        if (moduleName.contains(\".\")) { // not default module\n+            moduleName = moduleName.split(\"\\\\.\")[1];\n+            moduleName = moduleName.replace(\"/\", \"\");\n+        }\n+\n+        // validate moduleName\n+        if (!ProjectUtils.validateModuleName(moduleName)) {\n+            throw new RuntimeException(\"Invalid module name : '\" + moduleName + \"' :\\n\" +\n+                    \"Module name can only contain alphanumerics, underscores and periods \" +\n+                    \"and the maximum length is 256 characters\");\n+        }\n+        List<DocumentData> srcDocs = loadDocuments(modulePath);\n+        List<DocumentData> testSrcDocs = Collections.emptyList();\n+\n+        // TODO Read Module.md file. Do we need to? Balo creator may need to package Module.md\n+        return ModuleData.from(modulePath, srcDocs, testSrcDocs);\n+    }\n+\n+    private static List<DocumentData> loadDocuments(Path dirPath) {\n+        try (Stream<Path> pathStream = Files.walk(dirPath, 1)) {\n+            return pathStream\n+                    .filter(matcher::matches)\n+                    .map(BaloFiles::loadDocument)\n+                    .collect(Collectors.toList());\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static DocumentData loadDocument(Path documentFilePath) {\n+        Path fileNamePath = documentFilePath.getFileName();\n+        // IMO, fileNamePath cannot be null in this case.\n+        String name = fileNamePath != null ? fileNamePath.toString() : \"\";\n+        return DocumentData.from(name, String.valueOf(documentFilePath));\n+    }\n+\n+    private static List<ModuleData> loadOtherModules(Path modulesDirPath, Path defaultModulePath) {\n+        if (!Files.isDirectory(modulesDirPath)) {\n+            throw new RuntimeException(\"'modules' directory does not exists:\" + modulesDirPath);\n+        }\n+\n+        try (Stream<Path> pathStream = Files.walk(modulesDirPath, 1)) {\n+            return pathStream\n+                    .filter(path -> !path.equals(modulesDirPath))\n+                    .filter(path -> !String.valueOf(path).equals(\"/\" + defaultModulePath + \"/\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0af3876ebb68f36ded311fa99c165a104e2a3a25"}, "originalPosition": 192}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MzQyNDI3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26156#pullrequestreview-499342427", "createdAt": "2020-09-30T11:44:00Z", "commit": {"oid": "0af3876ebb68f36ded311fa99c165a104e2a3a25"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMTo0NDowMFrOHaZk2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMTo0NDowMFrOHaZk2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ0NDA1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26156#discussion_r497444056", "createdAt": "2020-09-30T11:44:00Z", "author": {"login": "azinneera"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/model/PackageJson.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package io.ballerina.projects.model;\n+\n+import java.util.List;\n+\n+/**\n+ * {@code PackageJson} Model for Package JSON file.\n+ *\n+ * @since 2.0.0\n+ */\n+public class PackageJson {\n+    // Information extracted from Ballerina.toml\n+    private String organization;\n+    private String name;\n+    private String version;\n+    private List<String> licenses; //?\n+    private List<String> authors; //?\n+    private String source_repository; //?\n+    private List<String> keywords; //?\n+    private List<String> exported; //?\n+\n+    // Distribution details\n+    private String ballerina_version;\n+    private String platform;\n+    private String implementation_vendor;\n+    private String spec;                     // 2020R1\n+\n+    // Dependencies\n+    private List<Dependency> dependencies; //?\n+    private List<PlatformLibrary> platformLibraries; //?\n+\n+    // Templating support\n+    private boolean template; //?\n+    private String template_version; //?\n+\n+    public PackageJson(String organization, String name, String version) {\n+        this.organization = organization;\n+        this.name = name;\n+        this.version = version;\n+    }\n+\n+    public String getOrganization() {\n+        return organization;\n+    }\n+\n+    public void setOrganization(String organization) {\n+        this.organization = organization;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(String version) {\n+        this.version = version;\n+    }\n+\n+    public List<String> getLicenses() {\n+        return licenses;\n+    }\n+\n+    public void setLicenses(List<String> licenses) {\n+        this.licenses = licenses;\n+    }\n+\n+    public List<String> getAuthors() {\n+        return authors;\n+    }\n+\n+    public void setAuthors(List<String> authors) {\n+        this.authors = authors;\n+    }\n+\n+    public String getSourceRepository() {\n+        return source_repository;\n+    }\n+\n+    public void setSourceRepository(String source_repository) {\n+        this.source_repository = source_repository;\n+    }\n+\n+    public List<String> getKeywords() {\n+        return keywords;\n+    }\n+\n+    public void setKeywords(List<String> keywords) {\n+        this.keywords = keywords;\n+    }\n+\n+    public List<String> getExported() {\n+        return exported;\n+    }\n+\n+    public void setExported(List<String> exported) {\n+        this.exported = exported;\n+    }\n+\n+    public String getBallerinaVersion() {\n+        return ballerina_version;\n+    }\n+\n+    public void setBallerinaVersion(String ballerina_version) {\n+        this.ballerina_version = ballerina_version;\n+    }\n+\n+    public String getPlatform() {\n+        return platform;\n+    }\n+\n+    public void setPlatform(String platform) {\n+        this.platform = platform;\n+    }\n+\n+    public String getImplementationVendor() {\n+        return implementation_vendor;\n+    }\n+\n+    public void setImplementationVendor(String implementation_vendor) {\n+        this.implementation_vendor = implementation_vendor;\n+    }\n+\n+    public String getSpec() {\n+        return spec;\n+    }\n+\n+    public void setSpec(String spec) {\n+        this.spec = spec;\n+    }\n+\n+    public List<Dependency> getDependencies() {\n+        return dependencies;\n+    }\n+\n+    public void setDependencies(List<Dependency> dependencies) {\n+        this.dependencies = dependencies;\n+    }\n+\n+    public List<PlatformLibrary> getPlatformLibraries() {\n+        return platformLibraries;\n+    }\n+\n+    public void setPlatformLibraries(List<PlatformLibrary> platformLibraries) {\n+        this.platformLibraries = platformLibraries;\n+    }\n+\n+    public boolean isTemplate() {\n+        return template;\n+    }\n+\n+    public void setTemplate(boolean template) {\n+        this.template = template;\n+    }\n+\n+    public String getTemplateVersion() {\n+        return template_version;\n+    }\n+\n+    public void setTemplateVersion(String template_version) {\n+        this.template_version = template_version;\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0af3876ebb68f36ded311fa99c165a104e2a3a25"}, "originalPosition": 186}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "17adad34beba76d4be5b35c917983616efb3e8c8", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/17adad34beba76d4be5b35c917983616efb3e8c8", "committedDate": "2020-10-02T05:04:22Z", "message": "Resolve PR comments"}, "afterCommit": {"oid": "29a0e9bef84f179ce789709f90919edbfd96eb0f", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/29a0e9bef84f179ce789709f90919edbfd96eb0f", "committedDate": "2020-10-02T05:46:33Z", "message": "Resolve PR comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "29a0e9bef84f179ce789709f90919edbfd96eb0f", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/29a0e9bef84f179ce789709f90919edbfd96eb0f", "committedDate": "2020-10-02T05:46:33Z", "message": "Resolve PR comments"}, "afterCommit": {"oid": "33630cc34b5990ed2d20a0009ea92e0d636af85c", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/33630cc34b5990ed2d20a0009ea92e0d636af85c", "committedDate": "2020-10-02T06:18:36Z", "message": "Resolve PR comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "33630cc34b5990ed2d20a0009ea92e0d636af85c", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/33630cc34b5990ed2d20a0009ea92e0d636af85c", "committedDate": "2020-10-02T06:18:36Z", "message": "Resolve PR comments"}, "afterCommit": {"oid": "9bca50d72709ac37c199bd5e8a5c197e247ba2da", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9bca50d72709ac37c199bd5e8a5c197e247ba2da", "committedDate": "2020-10-02T09:52:37Z", "message": "Resolve PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59710dbf0cc91507ce54ac4886e700963556bec1", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/59710dbf0cc91507ce54ac4886e700963556bec1", "committedDate": "2020-10-03T10:24:59Z", "message": "Resolve PR comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9bca50d72709ac37c199bd5e8a5c197e247ba2da", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9bca50d72709ac37c199bd5e8a5c197e247ba2da", "committedDate": "2020-10-02T09:52:37Z", "message": "Resolve PR comments"}, "afterCommit": {"oid": "59710dbf0cc91507ce54ac4886e700963556bec1", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/59710dbf0cc91507ce54ac4886e700963556bec1", "committedDate": "2020-10-03T10:24:59Z", "message": "Resolve PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNTc4MzYy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26156#pullrequestreview-501578362", "createdAt": "2020-10-03T22:41:48Z", "commit": {"oid": "59710dbf0cc91507ce54ac4886e700963556bec1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QyMjo0MTo0OFrOHcD_8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QyMjo0MTo0OFrOHcD_8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE4NzY5OQ==", "bodyText": "Ideally we should do lazy loading without reading the ZIP. In a cached state what we want are the modules so we should so we should load only that. Shall we create an issue for that and merge this", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26156#discussion_r499187699", "createdAt": "2020-10-03T22:41:48Z", "author": {"login": "hevayo"}, "path": "project-api/ballerina-projects/src/main/java/io/ballerina/projects/balo/BaloProject.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package io.ballerina.projects.balo;\n+\n+import io.ballerina.projects.PackageConfig;\n+import io.ballerina.projects.Project;\n+import io.ballerina.projects.directory.PackageLoader;\n+import io.ballerina.projects.env.BuildEnvContext;\n+import io.ballerina.projects.environment.EnvironmentContext;\n+\n+import java.nio.file.Path;\n+import java.util.Optional;\n+\n+/**\n+ * {@code BaloProject} represents Ballerina project instance created from a balo.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BaloProject extends Project {\n+\n+    /**\n+     * Loads a BaloProject from the provided balo path.\n+     *\n+     * @param baloPath Balo path\n+     * @return balo project\n+     */\n+    public static BaloProject loadProject(Path baloPath) {\n+        Path absBaloPath = Optional.of(baloPath.toAbsolutePath()).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59710dbf0cc91507ce54ac4886e700963556bec1"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44d51a5eabce5e0c8189e8b3b9e3a8c6fb929e20", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/44d51a5eabce5e0c8189e8b3b9e3a8c6fb929e20", "committedDate": "2020-10-05T07:49:16Z", "message": "Fix review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a84b262d7ce0c1d769d2724271c65d95801fb89", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9a84b262d7ce0c1d769d2724271c65d95801fb89", "committedDate": "2020-10-05T12:06:59Z", "message": "Merge branch 'prj_api_module_refactor' of https://github.com/ballerina-platform/ballerina-lang into balo-project-prj_api_module_refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa6f96a7ae3c4035f6e99f355ac4962734db04ae", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aa6f96a7ae3c4035f6e99f355ac4962734db04ae", "committedDate": "2020-10-05T17:29:07Z", "message": "Refactor `createPackageConfig` for balo project"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4aa4522be41d00fd2b73018a7a4da27babe12bbb", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4aa4522be41d00fd2b73018a7a4da27babe12bbb", "committedDate": "2020-10-05T12:38:54Z", "message": "Refactor `createPackageConfig` for balo project"}, "afterCommit": {"oid": "aa6f96a7ae3c4035f6e99f355ac4962734db04ae", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aa6f96a7ae3c4035f6e99f355ac4962734db04ae", "committedDate": "2020-10-05T17:29:07Z", "message": "Refactor `createPackageConfig` for balo project"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfc4a2a5a080b2e734034ad9c458df8e4fcd0c17", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bfc4a2a5a080b2e734034ad9c458df8e4fcd0c17", "committedDate": "2020-10-05T18:03:30Z", "message": "Merge branch 'prj_api_module_refactor' into balo-project-prj_api_module_refactor"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4496, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}