{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExMzIyOTgy", "number": 26647, "title": "Fix issue in expression string value created for value with cycles", "bodyText": "Purpose\n\n$title to correct the string value generated from toBalString() and parse it using fromBalString()\n\nFixes #26490\nApproach\n\nDescribe how you are implementing the solutions along with the design details.\n\nSamples\n\nProvide high-level details about the samples related to this feature.\n\nRemarks\n\nList any other known issues, related PRs, TODO items, or any other notes related to the PR.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-10-28T06:48:07Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26647", "merged": true, "mergeCommit": {"oid": "64cb42de11a776b65b9f2426a4d3fe8e3da1d0a2"}, "closed": true, "closedAt": "2020-10-29T05:46:59Z", "author": {"login": "lasinicl"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdW3ytQAH2gAyNTExMzIyOTgyOmU4YzlhNzcxMTRkZTY2YjJlMjdmN2ZmMDY1Y2Y4NDRlMDJkNzI1Zjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmDss_AFqTU1MTI2Mjc5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e8c9a77114de66b2e27f7ff065cf844e02d725f8", "author": {"user": {"login": "lasinicl", "name": "Lasini Liyange"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e8c9a77114de66b2e27f7ff065cf844e02d725f8", "committedDate": "2020-10-28T06:43:44Z", "message": "Fix issue in expression string value created for value with cycles"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d6e72b027b89cade474735e79adb0121144e386", "author": {"user": {"login": "lasinicl", "name": "Lasini Liyange"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6d6e72b027b89cade474735e79adb0121144e386", "committedDate": "2020-10-28T06:51:08Z", "message": "Undo index change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "999821a41629f1d5d7e87cb2ed47288489cee5a6", "author": {"user": {"login": "lasinicl", "name": "Lasini Liyange"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/999821a41629f1d5d7e87cb2ed47288489cee5a6", "committedDate": "2020-10-28T06:53:49Z", "message": "Remove index from BLink"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MzgwOTcy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26647#pullrequestreview-518380972", "createdAt": "2020-10-28T07:26:57Z", "commit": {"oid": "999821a41629f1d5d7e87cb2ed47288489cee5a6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzoyNjo1N1rOHpc6zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzoyNjo1N1rOHpc6zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIyNzQ3MA==", "bodyText": "shall we put a comment what this \"2\" means?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26647#discussion_r513227470", "createdAt": "2020-10-28T07:26:57Z", "author": {"login": "gimantha"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/BalStringUtils.java", "diffHunk": "@@ -168,12 +195,12 @@ public static Object parseMapExpressionStringValue(String exprValue) {\n      * @param exprValue Ballerina expression syntax of the array\n      * @return table value\n      */\n-    public static Object parseTableExpressionStringValue(String exprValue) {\n+    public static Object parseTableExpressionStringValue(String exprValue, BLink parent) {\n         String[] keys = exprValue.substring\n                 (exprValue.indexOf('(') + 1, exprValue.indexOf(')')).split(\",\");\n         ArrayValue fieldNames = (ArrayValue) ValueCreator.createArrayValue(StringUtils.fromStringArray(keys));\n         ArrayValueImpl data = (ArrayValueImpl) StringUtils.parseExpressionStringValue(exprValue.substring\n-                (exprValue.indexOf(')') + 2));\n+                (exprValue.indexOf(')') + 2), parent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "999821a41629f1d5d7e87cb2ed47288489cee5a6"}, "originalPosition": 195}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fffb2d9abcf80ceed526cc9d3827ac78bf8d5f28", "author": {"user": {"login": "lasinicl", "name": "Lasini Liyange"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fffb2d9abcf80ceed526cc9d3827ac78bf8d5f28", "committedDate": "2020-10-28T13:43:42Z", "message": "Add suggested changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MzQ3NjA4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26647#pullrequestreview-519347608", "createdAt": "2020-10-29T05:46:38Z", "commit": {"oid": "fffb2d9abcf80ceed526cc9d3827ac78bf8d5f28"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxMjYyNzk1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26647#pullrequestreview-551262795", "createdAt": "2020-12-14T11:04:54Z", "commit": {"oid": "fffb2d9abcf80ceed526cc9d3827ac78bf8d5f28"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMTowNDo1NFrOIFLRTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMTowNDo1NFrOIFLRTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjI5ODQ0NA==", "bodyText": "Have this after the returning check. No need to initialize if you return", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26647#discussion_r542298444", "createdAt": "2020-12-14T11:04:54Z", "author": {"login": "pcnfernando"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/BalStringUtils.java", "diffHunk": "@@ -36,46 +38,60 @@\n import io.ballerina.runtime.types.BUnionType;\n import io.ballerina.runtime.values.ArrayValue;\n import io.ballerina.runtime.values.ArrayValueImpl;\n-import io.ballerina.runtime.values.MappingInitialValueEntry;\n+import io.ballerina.runtime.values.MapValueImpl;\n import io.ballerina.runtime.values.TableValueImpl;\n import io.ballerina.runtime.values.TupleValueImpl;\n import io.ballerina.runtime.values.XMLSequence;\n \n import java.util.ArrayList;\n-import java.util.HashMap;\n+import java.util.Arrays;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n+import static io.ballerina.runtime.api.PredefinedTypes.TYPE_ANYDATA;\n+import static io.ballerina.runtime.api.PredefinedTypes.TYPE_ERROR;\n+\n /**\n  * Common utility methods used for Ballerina expression syntax manipulation.\n  *\n  * @since 2.0.0\n  */\n public class BalStringUtils {\n+    private static final UnionType bUnionType = new BUnionType(Arrays.asList(TYPE_ANYDATA, TYPE_ERROR));\n+    private static boolean hasCycles = false;\n \n     /**\n      * Create an array from string literal.\n      *\n      * @param exprValue Ballerina expression syntax of the array\n      * @return array value\n      */\n-    public static Object parseArrayExpressionStringValue(String exprValue) {\n+    public static Object parseArrayExpressionStringValue(String exprValue, BLink parent) {\n         List<String> list = getElements(exprValue);\n-        Object[] arrayElements = new Object[list.size()];\n+        ArrayValueImpl arr = new ArrayValueImpl(new BArrayType(bUnionType));\n+        CycleUtils.Node node = new CycleUtils.Node(arr, parent);\n         Set<Type> typeSet = new HashSet<>();\n         for (int i = 0; i < list.size(); i++) {\n             String e = list.get(i);\n-            Object val = StringUtils.parseExpressionStringValue(e);\n+            Object val = StringUtils.parseExpressionStringValue(e, node);\n             Type type = TypeChecker.getType(val);\n             typeSet.add(type);\n-            arrayElements[i] = val;\n+            arr.add(i, val);\n+        }\n+        int size = arr.size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fffb2d9abcf80ceed526cc9d3827ac78bf8d5f28"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4301, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}