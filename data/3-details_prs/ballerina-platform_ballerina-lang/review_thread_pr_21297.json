{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNjMyNDI0", "number": 21297, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwODoyNzo0NlrODjuzeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwODoyNzo0NlrODjuzeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzkzNTkyOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/object/ObjectProject/src/init/object-initializer.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwODoyNzo0NlrOFvs7NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwOToyMToxNFrOFvuUEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2MzQ0NA==", "bodyText": "Shall we add few test cases where __init function returns error value?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21297#discussion_r385563444", "createdAt": "2020-02-28T08:27:46Z", "author": {"login": "hasithaa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/object/ObjectProject/src/init/object-initializer.bal", "diffHunk": "@@ -398,3 +398,115 @@ function testInitInvocationWithCheckAndRestParams2() returns (boolean) {\n     var [s, marksBeforeChange, marksAfterChange] = testInitInvocationWithCheckAndRestParams(10, ...modules);\n     return !(s is error) && marksBeforeChange == 90 && marksAfterChange == 95;\n }\n+\n+type Student6 object {\n+    int id;\n+\n+    public function __init(int id = 1) {\n+        self.id = id;\n+    }\n+\n+    public function getId() returns int {\n+        return self.id;\n+    }\n+};\n+\n+function testInitInvocationWithDefaultParams1() returns (boolean) {\n+    Student6 student = new;\n+    return student.getId() == 1;\n+}\n+\n+type Student7 object {\n+    int? id;\n+\n+    public function __init(int? id = 1) {\n+        self.id = id;\n+    }\n+\n+    public function getId() returns int {\n+        if !(self.id is int) {\n+            error err = error(\"ID should be an integer\");\n+            panic err;\n+        }\n+        return <int> self.id;\n+    }\n+};\n+\n+function testInitInvocationWithDefaultParams2() returns (boolean) {\n+    Student7 student = new(4);\n+    return student.getId() == 4;\n+}\n+\n+public type ID int|string;\n+\n+type Student8 object {\n+    int id;\n+\n+    public function __init(ID i=1) {\n+        self.id = <int> i;\n+    }\n+\n+    public function getId() returns int {\n+        return self.id;\n+    }\n+};\n+\n+function testInitInvocationWithFiniteType() returns (boolean) {\n+    Student8 student = new(4);\n+    return student.getId() == 4;\n+}\n+\n+type AddError object {\n+    error er;\n+    function __init(error simpleError = error(\"SimpleErrorType\", message = \"Simple error occurred\")) {\n+        self.er = simpleError;\n+    }\n+\n+    public function getError() returns error|() {\n+        return self.er;\n+    }\n+};\n+\n+function testInitInvocationWithDefaultError() returns (boolean) {\n+    AddError newError = new;\n+    var e = newError.getError();\n+    if !(e is error) {\n+        error err = error(\"Returned value should be an error\");\n+        panic err;\n+    }\n+    return e is error;\n+}\n+\n+type Student9 object {\n+    int fullMarks;\n+\n+    public function __init(int firstMark = 80, int secondMark = firstMark) {\n+        self.fullMarks = firstMark + secondMark;\n+    }\n+\n+    public function getMarks() returns int {\n+        return self.fullMarks;\n+    }\n+};\n+\n+function testInitInvocationWithReferenceToDefaultValue1() returns (boolean) {\n+    Student9 student = new;\n+    return student.getMarks() == 160;\n+}\n+\n+type Calculate object {\n+    int sum;\n+\n+    public function __init(int a, int b, int c, int d = a + b + c*c) {\n+        self.sum = d;\n+    }\n+\n+    public function getSum() returns int {\n+        return self.sum;\n+    }\n+};\n+\n+function testInitInvocationWithReferenceToDefaultValue2() returns (boolean) {\n+    Calculate cal = new(2, 3, 4);\n+    return cal.getSum() == 21;\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "988d99b42787d45ce4617f63e1bc76c2c2712aa8"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU4NjE5Mg==", "bodyText": "Added", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21297#discussion_r385586192", "createdAt": "2020-02-28T09:21:14Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/object/ObjectProject/src/init/object-initializer.bal", "diffHunk": "@@ -398,3 +398,115 @@ function testInitInvocationWithCheckAndRestParams2() returns (boolean) {\n     var [s, marksBeforeChange, marksAfterChange] = testInitInvocationWithCheckAndRestParams(10, ...modules);\n     return !(s is error) && marksBeforeChange == 90 && marksAfterChange == 95;\n }\n+\n+type Student6 object {\n+    int id;\n+\n+    public function __init(int id = 1) {\n+        self.id = id;\n+    }\n+\n+    public function getId() returns int {\n+        return self.id;\n+    }\n+};\n+\n+function testInitInvocationWithDefaultParams1() returns (boolean) {\n+    Student6 student = new;\n+    return student.getId() == 1;\n+}\n+\n+type Student7 object {\n+    int? id;\n+\n+    public function __init(int? id = 1) {\n+        self.id = id;\n+    }\n+\n+    public function getId() returns int {\n+        if !(self.id is int) {\n+            error err = error(\"ID should be an integer\");\n+            panic err;\n+        }\n+        return <int> self.id;\n+    }\n+};\n+\n+function testInitInvocationWithDefaultParams2() returns (boolean) {\n+    Student7 student = new(4);\n+    return student.getId() == 4;\n+}\n+\n+public type ID int|string;\n+\n+type Student8 object {\n+    int id;\n+\n+    public function __init(ID i=1) {\n+        self.id = <int> i;\n+    }\n+\n+    public function getId() returns int {\n+        return self.id;\n+    }\n+};\n+\n+function testInitInvocationWithFiniteType() returns (boolean) {\n+    Student8 student = new(4);\n+    return student.getId() == 4;\n+}\n+\n+type AddError object {\n+    error er;\n+    function __init(error simpleError = error(\"SimpleErrorType\", message = \"Simple error occurred\")) {\n+        self.er = simpleError;\n+    }\n+\n+    public function getError() returns error|() {\n+        return self.er;\n+    }\n+};\n+\n+function testInitInvocationWithDefaultError() returns (boolean) {\n+    AddError newError = new;\n+    var e = newError.getError();\n+    if !(e is error) {\n+        error err = error(\"Returned value should be an error\");\n+        panic err;\n+    }\n+    return e is error;\n+}\n+\n+type Student9 object {\n+    int fullMarks;\n+\n+    public function __init(int firstMark = 80, int secondMark = firstMark) {\n+        self.fullMarks = firstMark + secondMark;\n+    }\n+\n+    public function getMarks() returns int {\n+        return self.fullMarks;\n+    }\n+};\n+\n+function testInitInvocationWithReferenceToDefaultValue1() returns (boolean) {\n+    Student9 student = new;\n+    return student.getMarks() == 160;\n+}\n+\n+type Calculate object {\n+    int sum;\n+\n+    public function __init(int a, int b, int c, int d = a + b + c*c) {\n+        self.sum = d;\n+    }\n+\n+    public function getSum() returns int {\n+        return self.sum;\n+    }\n+};\n+\n+function testInitInvocationWithReferenceToDefaultValue2() returns (boolean) {\n+    Calculate cal = new(2, 3, 4);\n+    return cal.getSum() == 21;\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2MzQ0NA=="}, "originalCommit": {"oid": "988d99b42787d45ce4617f63e1bc76c2c2712aa8"}, "originalPosition": 115}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1008, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}