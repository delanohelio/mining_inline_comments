{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUyNzExMjky", "number": 24835, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDo0NDo0OFrOESVWpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwOTozMzowOVrOESu2-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjU5Njg2OnYy", "diffSide": "RIGHT", "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/SelectedFunctionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDo0NDo0OFrOG3dO2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMTo0NTo0OVrOG3e_lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwMzgwMQ==", "bodyText": "Have we considered having tests for test cases that fail as well?\nSuppose we have a test case named testFunc3 that is set to fail. If we have the command --tests testFunc2, testFunc3 , then will the result be 2 passing, 1 failing?\nAlso does the execution continue if the testFunc3 is provided at the start. Something like --tests testFunc3, testFunc2?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24835#discussion_r460803801", "createdAt": "2020-07-27T10:44:48Z", "author": {"login": "Ibaqu"}, "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/SelectedFunctionTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.testerina.test;\n+\n+import org.ballerinalang.test.context.BMainInstance;\n+import org.ballerinalang.test.context.BallerinaTestException;\n+import org.ballerinalang.test.context.LogLeecher;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.ballerinalang.test.context.LogLeecher.LeecherType.ERROR;\n+\n+/**\n+ * Test class containing tests related to selective function tests.\n+ */\n+public class SelectedFunctionTest extends BaseTestCase {\n+\n+    private BMainInstance balClient;\n+    private String projectPath;\n+\n+    @BeforeClass\n+    public void setup() throws BallerinaTestException {\n+        balClient = new BMainInstance(balServer);\n+        projectPath = singleFilesProjectPath.resolve(\"single-test-execution\").toString();\n+    }\n+\n+    @Test\n+    public void testSingleFunctionExecution() throws BallerinaTestException {\n+        String msg = \"1 passing\";\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        balClient.runMain(\"test\", new String[]{\"--tests\", \"testFunc\", \"single-test-execution.bal\"},\n+                null, new String[]{}, new LogLeecher[]{clientLeecher}, projectPath);\n+        clientLeecher.waitForText(20000);\n+    }\n+\n+    @Test\n+    public void testDependentFunctionExecution() throws BallerinaTestException {\n+        String msg = \"2 passing\";\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        balClient.runMain(\"test\", new String[]{\"--tests\", \"testFunc2\", \"single-test-execution.bal\"},\n+                null, new String[]{}, new LogLeecher[]{clientLeecher}, projectPath);\n+        clientLeecher.waitForText(20000);\n+    }\n+\n+    @Test\n+    public void testMultipleFunctionExecution() throws BallerinaTestException {\n+        String msg = \"2 passing\";\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        balClient.runMain(\"test\", new String[]{\"--tests\", \"testFunc,testFunc2\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "717774d1957589d105e06bdea3ae8c8676fbebd0"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgzMjY2MA==", "bodyText": "@Ibaqu The test failure Is similar to how failed tests are handled in our test suites.\nThe order of execution is similar to the default test execution. The tests are not run in the order we pass them to the --tests flag.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24835#discussion_r460832660", "createdAt": "2020-07-27T11:45:49Z", "author": {"login": "Dilhasha"}, "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/SelectedFunctionTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.testerina.test;\n+\n+import org.ballerinalang.test.context.BMainInstance;\n+import org.ballerinalang.test.context.BallerinaTestException;\n+import org.ballerinalang.test.context.LogLeecher;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import static org.ballerinalang.test.context.LogLeecher.LeecherType.ERROR;\n+\n+/**\n+ * Test class containing tests related to selective function tests.\n+ */\n+public class SelectedFunctionTest extends BaseTestCase {\n+\n+    private BMainInstance balClient;\n+    private String projectPath;\n+\n+    @BeforeClass\n+    public void setup() throws BallerinaTestException {\n+        balClient = new BMainInstance(balServer);\n+        projectPath = singleFilesProjectPath.resolve(\"single-test-execution\").toString();\n+    }\n+\n+    @Test\n+    public void testSingleFunctionExecution() throws BallerinaTestException {\n+        String msg = \"1 passing\";\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        balClient.runMain(\"test\", new String[]{\"--tests\", \"testFunc\", \"single-test-execution.bal\"},\n+                null, new String[]{}, new LogLeecher[]{clientLeecher}, projectPath);\n+        clientLeecher.waitForText(20000);\n+    }\n+\n+    @Test\n+    public void testDependentFunctionExecution() throws BallerinaTestException {\n+        String msg = \"2 passing\";\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        balClient.runMain(\"test\", new String[]{\"--tests\", \"testFunc2\", \"single-test-execution.bal\"},\n+                null, new String[]{}, new LogLeecher[]{clientLeecher}, projectPath);\n+        clientLeecher.waitForText(20000);\n+    }\n+\n+    @Test\n+    public void testMultipleFunctionExecution() throws BallerinaTestException {\n+        String msg = \"2 passing\";\n+        LogLeecher clientLeecher = new LogLeecher(msg);\n+        balClient.runMain(\"test\", new String[]{\"--tests\", \"testFunc,testFunc2\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwMzgwMQ=="}, "originalCommit": {"oid": "717774d1957589d105e06bdea3ae8c8676fbebd0"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MDc3NTYxOnYy", "diffSide": "RIGHT", "path": "tests/testerina-integration-test/src/test/resources/single-file-tests/single-test-execution/single-test-execution.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwOTozMzowOVrOG4EocQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwOTozMzowOVrOG4EocQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ0OTMyOQ==", "bodyText": "Shall we add the license header for this file?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24835#discussion_r461449329", "createdAt": "2020-07-28T09:33:09Z", "author": {"login": "anupama-pathirage"}, "path": "tests/testerina-integration-test/src/test/resources/single-file-tests/single-test-execution/single-test-execution.bal", "diffHunk": "@@ -0,0 +1,51 @@\n+import ballerina/test;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f934b7d09146704926875babaec3603f45791393"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 406, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}