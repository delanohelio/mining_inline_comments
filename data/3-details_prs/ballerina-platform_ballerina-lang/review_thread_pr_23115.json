{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNjYxODQ3", "number": 23115, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwOTowMzowMlrOD5uppQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwOToxMTo1OFrOD5u08Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODU5NzQ5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwOTowMzowMlrOGRKD0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwOTozMjoxMlrOGRLDTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY0Mzc5Mw==", "bodyText": "is it possible to have noType for the constraint?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23115#discussion_r420643793", "createdAt": "2020-05-06T09:03:02Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -1134,6 +1134,14 @@ public void setForeachTypedBindingPatternType(BLangForeach foreachNode) {\n             case TypeTags.XML:\n                 varType = BUnionType.create(null, symTable.xmlType, symTable.stringType);\n                 break;\n+            case TypeTags.TABLE:\n+                BTableType tableType = (BTableType) collectionType;\n+                if (tableType.constraint.tag == TypeTags.NONE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebe4a08ce4c8ba0e8d627c45ed4ba8ce564aaa2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY2MDA0Ng==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23115#discussion_r420660046", "createdAt": "2020-05-06T09:32:12Z", "author": {"login": "mohanvive"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -1134,6 +1134,14 @@ public void setForeachTypedBindingPatternType(BLangForeach foreachNode) {\n             case TypeTags.XML:\n                 varType = BUnionType.create(null, symTable.xmlType, symTable.stringType);\n                 break;\n+            case TypeTags.TABLE:\n+                BTableType tableType = (BTableType) collectionType;\n+                if (tableType.constraint.tag == TypeTags.NONE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY0Mzc5Mw=="}, "originalCommit": {"oid": "cebe4a08ce4c8ba0e8d627c45ed4ba8ce564aaa2"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODU5OTE0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwOTowMzozNlrOGRKE_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwOTozMjoxN1rOGRLDbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY0NDA5Mw==", "bodyText": "is it possible to have noType for the constraint?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23115#discussion_r420644093", "createdAt": "2020-05-06T09:03:36Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -1226,6 +1234,14 @@ public void setFromClauseTypedBindingPatternType(BLangFromClause fromClause) {\n             case TypeTags.XML:\n                 varType = BUnionType.create(null, symTable.xmlType, symTable.stringType);\n                 break;\n+            case TypeTags.TABLE:\n+                BTableType tableType = (BTableType) collectionType;\n+                if (tableType.constraint.tag == TypeTags.NONE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebe4a08ce4c8ba0e8d627c45ed4ba8ce564aaa2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY2MDA3Ng==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23115#discussion_r420660076", "createdAt": "2020-05-06T09:32:17Z", "author": {"login": "mohanvive"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -1226,6 +1234,14 @@ public void setFromClauseTypedBindingPatternType(BLangFromClause fromClause) {\n             case TypeTags.XML:\n                 varType = BUnionType.create(null, symTable.xmlType, symTable.stringType);\n                 break;\n+            case TypeTags.TABLE:\n+                BTableType tableType = (BTableType) collectionType;\n+                if (tableType.constraint.tag == TypeTags.NONE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY0NDA5Mw=="}, "originalCommit": {"oid": "cebe4a08ce4c8ba0e8d627c45ed4ba8ce564aaa2"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODYwMzU2OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachTableTypedBindingPatternsTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwOTowNDo1MFrOGRKH2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwOToyMjowOVrOGRKtBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY0NDgyNQ==", "bodyText": "I will enable this.. I have the fix", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23115#discussion_r420644825", "createdAt": "2020-05-06T09:04:50Z", "author": {"login": "gimantha"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachTableTypedBindingPatternsTests.java", "diffHunk": "@@ -31,43 +31,42 @@\n  * @since 0.985.0\n  */\n \n-//TODO Table remove - Fix\n public class ForeachTableTypedBindingPatternsTests {\n \n     private CompileResult program;\n \n-    @BeforeClass (enabled = false)\n+    @BeforeClass\n     public void setup() {\n         program = BCompileUtil.compile(\"test-src/statements/foreach/foreach-table-typed-binding-patterns.bal\");\n     }\n \n-    @Test (enabled = false)\n+    @Test\n     public void testTableWithoutType() {\n         BValue[] returns = BRunUtil.invoke(program, \"testTableWithoutType\");\n         Assert.assertEquals(returns.length, 1);\n         Assert.assertEquals(returns[0].stringValue(),\n                 \"0:id=1 name=Mary salary=300.5 1:id=2 name=John salary=200.5 2:id=3 name=Jim salary=330.5 \");\n     }\n \n-    @Test (enabled = false)\n+    @Test\n     public void testTableWithType() {\n         BValue[] returns = BRunUtil.invoke(program, \"testTableWithType\");\n         Assert.assertEquals(returns.length, 1);\n         Assert.assertEquals(returns[0].stringValue(),\n                 \"0:id=1 name=Mary salary=300.5 1:id=2 name=John salary=200.5 2:id=3 name=Jim salary=330.5 \");\n     }\n \n-    @Test (enabled = false)\n+    @Test\n     public void testRecordInTableWithoutType() {\n         BValue[] returns = BRunUtil.invoke(program, \"testRecordInTableWithoutType\");\n         Assert.assertEquals(returns.length, 1);\n         Assert.assertEquals(returns[0].stringValue(), \"0:1:Mary:300.5 1:2:John:200.5 2:3:Jim:330.5 \");\n     }\n \n-    @Test (enabled = false)\n-    public void testEmptyTableIteration() {\n-        BValue[] returns = BRunUtil.invoke(program, \"testEmptyTableIteration\");\n-        Assert.assertEquals(returns.length, 1);\n-        Assert.assertEquals(returns[0].stringValue(), \"\");\n-    }\n+//    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebe4a08ce4c8ba0e8d627c45ed4ba8ce564aaa2"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY1NDM0MQ==", "bodyText": "OK.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23115#discussion_r420654341", "createdAt": "2020-05-06T09:22:09Z", "author": {"login": "mohanvive"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/statements/foreach/ForeachTableTypedBindingPatternsTests.java", "diffHunk": "@@ -31,43 +31,42 @@\n  * @since 0.985.0\n  */\n \n-//TODO Table remove - Fix\n public class ForeachTableTypedBindingPatternsTests {\n \n     private CompileResult program;\n \n-    @BeforeClass (enabled = false)\n+    @BeforeClass\n     public void setup() {\n         program = BCompileUtil.compile(\"test-src/statements/foreach/foreach-table-typed-binding-patterns.bal\");\n     }\n \n-    @Test (enabled = false)\n+    @Test\n     public void testTableWithoutType() {\n         BValue[] returns = BRunUtil.invoke(program, \"testTableWithoutType\");\n         Assert.assertEquals(returns.length, 1);\n         Assert.assertEquals(returns[0].stringValue(),\n                 \"0:id=1 name=Mary salary=300.5 1:id=2 name=John salary=200.5 2:id=3 name=Jim salary=330.5 \");\n     }\n \n-    @Test (enabled = false)\n+    @Test\n     public void testTableWithType() {\n         BValue[] returns = BRunUtil.invoke(program, \"testTableWithType\");\n         Assert.assertEquals(returns.length, 1);\n         Assert.assertEquals(returns[0].stringValue(),\n                 \"0:id=1 name=Mary salary=300.5 1:id=2 name=John salary=200.5 2:id=3 name=Jim salary=330.5 \");\n     }\n \n-    @Test (enabled = false)\n+    @Test\n     public void testRecordInTableWithoutType() {\n         BValue[] returns = BRunUtil.invoke(program, \"testRecordInTableWithoutType\");\n         Assert.assertEquals(returns.length, 1);\n         Assert.assertEquals(returns[0].stringValue(), \"0:1:Mary:300.5 1:2:John:200.5 2:3:Jim:330.5 \");\n     }\n \n-    @Test (enabled = false)\n-    public void testEmptyTableIteration() {\n-        BValue[] returns = BRunUtil.invoke(program, \"testEmptyTableIteration\");\n-        Assert.assertEquals(returns.length, 1);\n-        Assert.assertEquals(returns[0].stringValue(), \"\");\n-    }\n+//    @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY0NDgyNQ=="}, "originalCommit": {"oid": "cebe4a08ce4c8ba0e8d627c45ed4ba8ce564aaa2"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODYyNjQxOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BTableType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwOToxMTo1OFrOGRKW7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwOTozMjozMFrOGRLD0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY0ODY4NA==", "bodyText": "we cant have string here. key type can be any anydata type for tables.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23115#discussion_r420648684", "createdAt": "2020-05-06T09:11:58Z", "author": {"login": "gimantha"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BTableType.java", "diffHunk": "@@ -56,12 +57,12 @@ public BType getKeyType() {\n \n     @Override\n     public <V> V getZeroValue() {\n-        return null;\n+        return (V) new TableValueImpl<String, V>(new BTableType(constraint));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebe4a08ce4c8ba0e8d627c45ed4ba8ce564aaa2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY2MDE3OQ==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23115#discussion_r420660179", "createdAt": "2020-05-06T09:32:30Z", "author": {"login": "mohanvive"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BTableType.java", "diffHunk": "@@ -56,12 +57,12 @@ public BType getKeyType() {\n \n     @Override\n     public <V> V getZeroValue() {\n-        return null;\n+        return (V) new TableValueImpl<String, V>(new BTableType(constraint));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY0ODY4NA=="}, "originalCommit": {"oid": "cebe4a08ce4c8ba0e8d627c45ed4ba8ce564aaa2"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3731, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}