{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxODg2NjUz", "number": 21375, "title": "Add toArray() method to map lang library", "bodyText": "Purpose\n\nThis PR adds a new method to the map lang library to get an array of values from maps/records. If it's a record, the element type will be the union of all the fields in the record type descriptor (including the rest field type).\n\nSamples\n// Getting the values as an array\nmap<int> ints = {\"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5};\nint[] intArr = ints.toArray();\n\n// Getting record field values as an array\ntype Foo record {|\n    string name;\n    int age;\n    float weight;\n    decimal height;\n    boolean isStudent;\n|};\n\nFoo foo = {\n        name: \"John Doe\",\n        age: 25,\n        weight: 65.5,\n        height: 172.3,\n        isStudent: true\n    };\n\n(string|int|float|decimal|boolean)[] arr = foo.toArray();\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-02-29T17:08:20Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21375", "merged": true, "mergeCommit": {"oid": "fc71ccd519698e55737cebcb7064dac77154d347"}, "closed": true, "closedAt": "2020-03-05T09:38:15Z", "author": {"login": "pubudu91"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJ6EXoAFqTM2NzY4NzE3MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKnEoigFqTM2OTM2NTQ2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3Njg3MTcx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21375#pullrequestreview-367687171", "createdAt": "2020-03-03T03:50:40Z", "commit": {"oid": "390692d7e0387b1b4cde798145829afbb77355f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMzo1MDo0MFrOFw3hXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMzo1MDo0MFrOFw3hXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc4NTYyOQ==", "bodyText": "Can we add a test for this method?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21375#discussion_r386785629", "createdAt": "2020-03-03T03:50:40Z", "author": {"login": "pramodya1994"}, "path": "langlib/lang.map/src/main/java/org/ballerinalang/langlib/map/ToArray.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.langlib.map;\n+\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.types.BArrayType;\n+import org.ballerinalang.jvm.types.BMapType;\n+import org.ballerinalang.jvm.types.BRecordType;\n+import org.ballerinalang.jvm.types.BType;\n+import org.ballerinalang.jvm.types.TypeTags;\n+import org.ballerinalang.jvm.values.ArrayValue;\n+import org.ballerinalang.jvm.values.ArrayValueImpl;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.langlib.map.util.MapLibUtils;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import java.util.Collection;\n+\n+import static org.ballerinalang.jvm.MapUtils.createOpNotSupportedError;\n+\n+/**\n+ * Function for returning the values of the map as an array. T[] vals = m.toArray();\n+ *\n+ * @since 1.2.0\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.map\",\n+        functionName = \"toArray\",\n+        args = {@Argument(name = \"m\", type = TypeKind.MAP)},\n+        returnType = {@ReturnType(type = TypeKind.ARRAY, elementType = TypeKind.ANY)},\n+        isPublic = true\n+)\n+public class ToArray {\n+\n+    public static ArrayValue toArray(Strand strand, MapValue<?, ?> m) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "390692d7e0387b1b4cde798145829afbb77355f3"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3Nzk2NTM1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21375#pullrequestreview-367796535", "createdAt": "2020-03-03T08:56:09Z", "commit": {"oid": "11bc310f720fce8bda15f8421f4f6ba019c33b2a"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODo1NjowOVrOFw8-5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODo1ODoxN1rOFw9DSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg3NTEwOQ==", "bodyText": "Shall we also add a test for records where the record fields are all of a single simple basic type?\ntype Bar record {|\n    byte a;\n    byte b;\n    byte...;\n|};\nThis array can also be updated right? Shall we add a test or two to cover updating a value at an index and maybe adding new elements at the end?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21375#discussion_r386875109", "createdAt": "2020-03-03T08:56:09Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/maplib_test.bal", "diffHunk": "@@ -73,3 +73,140 @@ function testReduce() returns float {\n     }, 0.0);\n     return avg;\n }\n+\n+function testBasicToArray() {\n+    map<int> ints = {\"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5};\n+    int[] intArr = ints.toArray();\n+\n+    map<float> floats = {\"one\": 1.1, \"two\": 2.2, \"three\": 3.3, \"four\": 4.4, \"five\": 5.5};\n+    float[] floatArr = floats.toArray();\n+\n+    map<decimal> decimals = {\"one\": 1.1, \"two\": 2.2, \"three\": 3.3, \"four\": 4.4, \"five\": 5.5};\n+    decimal[] decimalArr = decimals.toArray();\n+\n+    map<string> strings = {\"a\": \"A\", \"b\": \"B\", \"c\": \"C\"};\n+    string[] stringArr = strings.toArray();\n+\n+    map<boolean> booleans = {\"a\": true, \"b\": false, \"c\": true};\n+    boolean[] booleanArr = booleans.toArray();\n+\n+    map<map<int>> maps = {\"a\": {\"one\": 1, \"two\": 2}, \"b\": {\"three\": 3, \"four\": 4}};\n+    map<int>[] mapArr = maps.toArray();\n+\n+    assert(<int[]>[1, 2, 3, 4, 5], intArr);\n+    assert(<float[]>[1.1, 2.2, 3.3, 4.4, 5.5], floatArr);\n+    assert(<decimal[]>[1.1, 2.2, 3.3, 4.4, 5.5], decimalArr);\n+    assert(<string[]>[\"A\", \"B\", \"C\"], stringArr);\n+    assert(<boolean[]>[true, false, true], booleanArr);\n+    assert(<map<int>[]>[{\"one\": 1, \"two\": 2}, {\"three\": 3, \"four\": 4}], mapArr);\n+}\n+\n+function testLargeMapToArray() {\n+    var fn = function () returns int[] {\n+        int[] arr = [];\n+        foreach var i in 0...999 {\n+            arr[i] = i + 1;\n+        }\n+        return arr;\n+    };\n+\n+    assert(fn(), getLargeMap().toArray());\n+}\n+\n+function getLargeMap() returns map<int> {\n+    map<int> m = {};\n+    foreach var i in 1...1000 {\n+        m[i.toString()] = i;\n+    }\n+    return m;\n+}\n+\n+type Person object {\n+    string name;\n+\n+    function __init(string n) {\n+        self.name = n;\n+    }\n+\n+    function getName() returns string => self.name;\n+};\n+\n+function testMapOfUnionToArray() {\n+    map<int|string|Person> m = {\"i\": 10, \"s\": \"foo\", \"p\": new Person(\"Pubudu\")};\n+    (int|string|Person)[] arr = m.toArray();\n+\n+    assert(10, <anydata>arr[0]);\n+    assert(\"foo\", <anydata>arr[1]);\n+    assertSameRef(m[\"p\"], arr[2]);\n+}\n+\n+type Foo record {|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11bc310f720fce8bda15f8421f4f6ba019c33b2a"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg3NTQyMA==", "bodyText": "Shall we return here after checking == instead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21375#discussion_r386875420", "createdAt": "2020-03-03T08:56:42Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/maplib_test.bal", "diffHunk": "@@ -73,3 +73,140 @@ function testReduce() returns float {\n     }, 0.0);\n     return avg;\n }\n+\n+function testBasicToArray() {\n+    map<int> ints = {\"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5};\n+    int[] intArr = ints.toArray();\n+\n+    map<float> floats = {\"one\": 1.1, \"two\": 2.2, \"three\": 3.3, \"four\": 4.4, \"five\": 5.5};\n+    float[] floatArr = floats.toArray();\n+\n+    map<decimal> decimals = {\"one\": 1.1, \"two\": 2.2, \"three\": 3.3, \"four\": 4.4, \"five\": 5.5};\n+    decimal[] decimalArr = decimals.toArray();\n+\n+    map<string> strings = {\"a\": \"A\", \"b\": \"B\", \"c\": \"C\"};\n+    string[] stringArr = strings.toArray();\n+\n+    map<boolean> booleans = {\"a\": true, \"b\": false, \"c\": true};\n+    boolean[] booleanArr = booleans.toArray();\n+\n+    map<map<int>> maps = {\"a\": {\"one\": 1, \"two\": 2}, \"b\": {\"three\": 3, \"four\": 4}};\n+    map<int>[] mapArr = maps.toArray();\n+\n+    assert(<int[]>[1, 2, 3, 4, 5], intArr);\n+    assert(<float[]>[1.1, 2.2, 3.3, 4.4, 5.5], floatArr);\n+    assert(<decimal[]>[1.1, 2.2, 3.3, 4.4, 5.5], decimalArr);\n+    assert(<string[]>[\"A\", \"B\", \"C\"], stringArr);\n+    assert(<boolean[]>[true, false, true], booleanArr);\n+    assert(<map<int>[]>[{\"one\": 1, \"two\": 2}, {\"three\": 3, \"four\": 4}], mapArr);\n+}\n+\n+function testLargeMapToArray() {\n+    var fn = function () returns int[] {\n+        int[] arr = [];\n+        foreach var i in 0...999 {\n+            arr[i] = i + 1;\n+        }\n+        return arr;\n+    };\n+\n+    assert(fn(), getLargeMap().toArray());\n+}\n+\n+function getLargeMap() returns map<int> {\n+    map<int> m = {};\n+    foreach var i in 1...1000 {\n+        m[i.toString()] = i;\n+    }\n+    return m;\n+}\n+\n+type Person object {\n+    string name;\n+\n+    function __init(string n) {\n+        self.name = n;\n+    }\n+\n+    function getName() returns string => self.name;\n+};\n+\n+function testMapOfUnionToArray() {\n+    map<int|string|Person> m = {\"i\": 10, \"s\": \"foo\", \"p\": new Person(\"Pubudu\")};\n+    (int|string|Person)[] arr = m.toArray();\n+\n+    assert(10, <anydata>arr[0]);\n+    assert(\"foo\", <anydata>arr[1]);\n+    assertSameRef(m[\"p\"], arr[2]);\n+}\n+\n+type Foo record {|\n+    string name;\n+    int age;\n+    float weight;\n+    decimal height;\n+    boolean isStudent;\n+|};\n+\n+function testRecordToArray() {\n+    Foo foo = {\n+        name: \"John Doe\",\n+        age: 25,\n+        weight: 65.5,\n+        height: 172.3,\n+        isStudent: true\n+    };\n+\n+    var arr = foo.toArray();\n+\n+    assert(<(string|int|float|decimal|boolean)[]>[\"John Doe\", 25, 65.5, 172.3d, true], arr);\n+}\n+\n+type OpenFoo record {\n+    string name;\n+    int age;\n+    float weight;\n+    decimal height;\n+    boolean isStudent;\n+};\n+\n+function testOpenRecordToArray() {\n+    OpenFoo foo = {\n+        name: \"John Doe\",\n+        age: 25,\n+        weight: 65.5,\n+        height: 172.3,\n+        isStudent: true,\n+        \"location\": \"Sri Lanka\",\n+        \"postalCode\": 12500\n+    };\n+\n+    var arr = foo.toArray();\n+\n+    assert(<(string|int|float|decimal|boolean)[]>[\"John Doe\", 25, 65.5, 172.3d, true, \"Sri Lanka\", 12500], arr);\n+}\n+\n+\n+// Util functions\n+\n+function assert(anydata expected, anydata actual) {\n+    if (expected != actual) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11bc310f720fce8bda15f8421f4f6ba019c33b2a"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg3NjIzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    error e = error(reason);\n          \n          \n            \n                    panic e;\n          \n          \n            \n                    panic error(reason);\n          \n      \n    \n    \n  \n\nJust to be consistent with our usage of reasons, shall we use a simple string as the reason (e.g., \"AssertionError\") and then add this current reason as the message field of the detail?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21375#discussion_r386876235", "createdAt": "2020-03-03T08:58:17Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/maplib_test.bal", "diffHunk": "@@ -73,3 +73,140 @@ function testReduce() returns float {\n     }, 0.0);\n     return avg;\n }\n+\n+function testBasicToArray() {\n+    map<int> ints = {\"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5};\n+    int[] intArr = ints.toArray();\n+\n+    map<float> floats = {\"one\": 1.1, \"two\": 2.2, \"three\": 3.3, \"four\": 4.4, \"five\": 5.5};\n+    float[] floatArr = floats.toArray();\n+\n+    map<decimal> decimals = {\"one\": 1.1, \"two\": 2.2, \"three\": 3.3, \"four\": 4.4, \"five\": 5.5};\n+    decimal[] decimalArr = decimals.toArray();\n+\n+    map<string> strings = {\"a\": \"A\", \"b\": \"B\", \"c\": \"C\"};\n+    string[] stringArr = strings.toArray();\n+\n+    map<boolean> booleans = {\"a\": true, \"b\": false, \"c\": true};\n+    boolean[] booleanArr = booleans.toArray();\n+\n+    map<map<int>> maps = {\"a\": {\"one\": 1, \"two\": 2}, \"b\": {\"three\": 3, \"four\": 4}};\n+    map<int>[] mapArr = maps.toArray();\n+\n+    assert(<int[]>[1, 2, 3, 4, 5], intArr);\n+    assert(<float[]>[1.1, 2.2, 3.3, 4.4, 5.5], floatArr);\n+    assert(<decimal[]>[1.1, 2.2, 3.3, 4.4, 5.5], decimalArr);\n+    assert(<string[]>[\"A\", \"B\", \"C\"], stringArr);\n+    assert(<boolean[]>[true, false, true], booleanArr);\n+    assert(<map<int>[]>[{\"one\": 1, \"two\": 2}, {\"three\": 3, \"four\": 4}], mapArr);\n+}\n+\n+function testLargeMapToArray() {\n+    var fn = function () returns int[] {\n+        int[] arr = [];\n+        foreach var i in 0...999 {\n+            arr[i] = i + 1;\n+        }\n+        return arr;\n+    };\n+\n+    assert(fn(), getLargeMap().toArray());\n+}\n+\n+function getLargeMap() returns map<int> {\n+    map<int> m = {};\n+    foreach var i in 1...1000 {\n+        m[i.toString()] = i;\n+    }\n+    return m;\n+}\n+\n+type Person object {\n+    string name;\n+\n+    function __init(string n) {\n+        self.name = n;\n+    }\n+\n+    function getName() returns string => self.name;\n+};\n+\n+function testMapOfUnionToArray() {\n+    map<int|string|Person> m = {\"i\": 10, \"s\": \"foo\", \"p\": new Person(\"Pubudu\")};\n+    (int|string|Person)[] arr = m.toArray();\n+\n+    assert(10, <anydata>arr[0]);\n+    assert(\"foo\", <anydata>arr[1]);\n+    assertSameRef(m[\"p\"], arr[2]);\n+}\n+\n+type Foo record {|\n+    string name;\n+    int age;\n+    float weight;\n+    decimal height;\n+    boolean isStudent;\n+|};\n+\n+function testRecordToArray() {\n+    Foo foo = {\n+        name: \"John Doe\",\n+        age: 25,\n+        weight: 65.5,\n+        height: 172.3,\n+        isStudent: true\n+    };\n+\n+    var arr = foo.toArray();\n+\n+    assert(<(string|int|float|decimal|boolean)[]>[\"John Doe\", 25, 65.5, 172.3d, true], arr);\n+}\n+\n+type OpenFoo record {\n+    string name;\n+    int age;\n+    float weight;\n+    decimal height;\n+    boolean isStudent;\n+};\n+\n+function testOpenRecordToArray() {\n+    OpenFoo foo = {\n+        name: \"John Doe\",\n+        age: 25,\n+        weight: 65.5,\n+        height: 172.3,\n+        isStudent: true,\n+        \"location\": \"Sri Lanka\",\n+        \"postalCode\": 12500\n+    };\n+\n+    var arr = foo.toArray();\n+\n+    assert(<(string|int|float|decimal|boolean)[]>[\"John Doe\", 25, 65.5, 172.3d, true, \"Sri Lanka\", 12500], arr);\n+}\n+\n+\n+// Util functions\n+\n+function assert(anydata expected, anydata actual) {\n+    if (expected != actual) {\n+        typedesc<anydata> expT = typeof expected;\n+        typedesc<anydata> actT = typeof actual;\n+        string reason = \"expected [\" + expected.toString() + \"] of type [\" + expT.toString()\n+                            + \"], but found [\" + actual.toString() + \"] of type [\" + actT.toString() + \"]\";\n+        error e = error(reason);\n+        panic e;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11bc310f720fce8bda15f8421f4f6ba019c33b2a"}, "originalPosition": 127}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e378cb52e8b53025c581c16b515dd718fa275c88", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e378cb52e8b53025c581c16b515dd718fa275c88", "committedDate": "2020-03-05T05:40:41Z", "message": "Add toArray() method to map lang lib"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c3b69b73918e28a56adc66d546bd6017322b6a1", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8c3b69b73918e28a56adc66d546bd6017322b6a1", "committedDate": "2020-03-05T05:40:47Z", "message": "Add test cases for map.toArray() method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7177b437681e9d4da1bb8cbeacdb44a42b447f2d", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7177b437681e9d4da1bb8cbeacdb44a42b447f2d", "committedDate": "2020-03-05T05:40:48Z", "message": "Add test case for record with same typed fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73e361333b1ece9c0d46c49958e751d8622e9205", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/73e361333b1ece9c0d46c49958e751d8622e9205", "committedDate": "2020-03-05T05:40:48Z", "message": "Add test cases for modifying resultant of toArray()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa55ad94fdeeaacab4b6c33f4182acb93eba1e2b", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aa55ad94fdeeaacab4b6c33f4182acb93eba1e2b", "committedDate": "2020-03-05T05:40:48Z", "message": "Fix language server test cases"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ff9a17b2848474f20777ae00a1e900517a8a1dda", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ff9a17b2848474f20777ae00a1e900517a8a1dda", "committedDate": "2020-03-05T05:26:10Z", "message": "Merge branch 'fix-21340' of github.com:pubudu91/ballerina into fix-21340"}, "afterCommit": {"oid": "aa55ad94fdeeaacab4b6c33f4182acb93eba1e2b", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aa55ad94fdeeaacab4b6c33f4182acb93eba1e2b", "committedDate": "2020-03-05T05:40:48Z", "message": "Fix language server test cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MzYzMDkx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21375#pullrequestreview-369363091", "createdAt": "2020-03-05T08:11:56Z", "commit": {"oid": "aa55ad94fdeeaacab4b6c33f4182acb93eba1e2b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MzY1NDY4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21375#pullrequestreview-369365468", "createdAt": "2020-03-05T08:16:41Z", "commit": {"oid": "aa55ad94fdeeaacab4b6c33f4182acb93eba1e2b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4090, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}