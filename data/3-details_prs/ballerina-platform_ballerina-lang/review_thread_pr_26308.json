{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxMzc2MDc2", "number": 26308, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODo0ODoxMVrOEwJAyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwOToyOTo1OFrOEwKIwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTE0NzYyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODo0ODoxMVrOHlhF4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMzoxMTowMVrOHmO_yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEwMTUzNg==", "bodyText": "With this[1] change, I don't think we need this check and this flag\n[1] - https://github.com/ballerina-platform/ballerina-lang/pull/26098/files#diff-fa94fe90a875c08eaf806f89f6ceb7eec7205acaf75c88a41e3f7103abfa5a52L410", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26308#discussion_r509101536", "createdAt": "2020-10-21T08:48:11Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -611,7 +611,7 @@ public void visit(BLangClassDefinition classDefinition) {\n             objectType = isReadOnly ? new BObjectType(tSymbol, Flags.READONLY) : new BObjectType(tSymbol);\n         }\n \n-        if (flags.contains(Flag.DISTINCT)) {\n+        if (flags.contains(Flag.DISTINCT) || classDefinition.induceTypeIds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0f12195cd60ab3927a6fd2659fa3348d5953420"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY1NTI1MQ==", "bodyText": "Need to merge the changes.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26308#discussion_r509655251", "createdAt": "2020-10-21T20:15:39Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -611,7 +611,7 @@ public void visit(BLangClassDefinition classDefinition) {\n             objectType = isReadOnly ? new BObjectType(tSymbol, Flags.READONLY) : new BObjectType(tSymbol);\n         }\n \n-        if (flags.contains(Flag.DISTINCT)) {\n+        if (flags.contains(Flag.DISTINCT) || classDefinition.induceTypeIds) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEwMTUzNg=="}, "originalCommit": {"oid": "d0f12195cd60ab3927a6fd2659fa3348d5953420"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg1MzY0Mw==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26308#discussion_r509853643", "createdAt": "2020-10-22T03:11:01Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -611,7 +611,7 @@ public void visit(BLangClassDefinition classDefinition) {\n             objectType = isReadOnly ? new BObjectType(tSymbol, Flags.READONLY) : new BObjectType(tSymbol);\n         }\n \n-        if (flags.contains(Flag.DISTINCT)) {\n+        if (flags.contains(Flag.DISTINCT) || classDefinition.induceTypeIds) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEwMTUzNg=="}, "originalCommit": {"oid": "d0f12195cd60ab3927a6fd2659fa3348d5953420"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTMzMTg2OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/object/object_constructor_expression.bal", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwOToyOTo1OFrOHli28w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMzoxMjoxOFrOHmPBDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEzMDQ4Mw==", "bodyText": "class K {\n    int i = 0;\n    int j = 0;\n}\n\nclass J {\n    int i = 0;\n}\n\nDistinctFoo | DistinctFooA | K | J distinctObject = object {\n                                        int i;\n                                        function init() {\n                                            self.i = 20;\n                                        }\n                                    };\nThe above should not be allowed right, as the union is not definite.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26308#discussion_r509130483", "createdAt": "2020-10-21T09:29:58Z", "author": {"login": "rdhananjaya"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/object/object_constructor_expression.bal", "diffHunk": "@@ -125,6 +125,51 @@ function testObjectConstructorIncludedMethod() {\n     assertTrue(objWithIncludedMethod.n == 100);\n }\n \n+// test distinct id support\n+\n+distinct class DistinctFoo {\n+    int i = 0;\n+}\n+\n+distinct class DistinctFooA {\n+    int i = 0;\n+}\n+\n+distinct class DistinctFooB {\n+    int i = 0;\n+}\n+\n+function testObjectConstructorWithDistintExpectedType() {\n+    DistinctFoo distinctObject = object {\n+                                        int i;\n+                                        function init() {\n+                                            self.i = 20;\n+                                        }\n+                                    };\n+    assertValueEquality(20, distinctObject.i);\n+}\n+\n+function testObjectConstructorWithDistintTypeReference() {\n+    DistinctFooA distinctObject = object DistinctFooA {\n+                                            int i;\n+                                            function init() {\n+                                                self.i = 30;\n+                                            }\n+                                         };\n+    assertValueEquality(30, distinctObject.i);\n+}\n+\n+function testObjectConstructorWithDistintTypeReferenceVar() {\n+    var distinctObject = object DistinctFooB {\n+                                            int i;\n+                                            function init() {\n+                                                self.i = 25;\n+                                            }\n+                                         };\n+    DistinctFooB newDistinctRef = distinctObject;\n+    assertValueEquality(25, newDistinctRef.i);\n+}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c6b982da803bdb5e5da55d003ed310e32de0951"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEzMzE2OA==", "bodyText": "Yes. Need to fix it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26308#discussion_r509133168", "createdAt": "2020-10-21T09:34:03Z", "author": {"login": "KRVPerera"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/object/object_constructor_expression.bal", "diffHunk": "@@ -125,6 +125,51 @@ function testObjectConstructorIncludedMethod() {\n     assertTrue(objWithIncludedMethod.n == 100);\n }\n \n+// test distinct id support\n+\n+distinct class DistinctFoo {\n+    int i = 0;\n+}\n+\n+distinct class DistinctFooA {\n+    int i = 0;\n+}\n+\n+distinct class DistinctFooB {\n+    int i = 0;\n+}\n+\n+function testObjectConstructorWithDistintExpectedType() {\n+    DistinctFoo distinctObject = object {\n+                                        int i;\n+                                        function init() {\n+                                            self.i = 20;\n+                                        }\n+                                    };\n+    assertValueEquality(20, distinctObject.i);\n+}\n+\n+function testObjectConstructorWithDistintTypeReference() {\n+    DistinctFooA distinctObject = object DistinctFooA {\n+                                            int i;\n+                                            function init() {\n+                                                self.i = 30;\n+                                            }\n+                                         };\n+    assertValueEquality(30, distinctObject.i);\n+}\n+\n+function testObjectConstructorWithDistintTypeReferenceVar() {\n+    var distinctObject = object DistinctFooB {\n+                                            int i;\n+                                            function init() {\n+                                                self.i = 25;\n+                                            }\n+                                         };\n+    DistinctFooB newDistinctRef = distinctObject;\n+    assertValueEquality(25, newDistinctRef.i);\n+}\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEzMDQ4Mw=="}, "originalCommit": {"oid": "7c6b982da803bdb5e5da55d003ed310e32de0951"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg1Mzk2NQ==", "bodyText": "Fixed by 529f4a2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26308#discussion_r509853965", "createdAt": "2020-10-22T03:12:18Z", "author": {"login": "KRVPerera"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/object/object_constructor_expression.bal", "diffHunk": "@@ -125,6 +125,51 @@ function testObjectConstructorIncludedMethod() {\n     assertTrue(objWithIncludedMethod.n == 100);\n }\n \n+// test distinct id support\n+\n+distinct class DistinctFoo {\n+    int i = 0;\n+}\n+\n+distinct class DistinctFooA {\n+    int i = 0;\n+}\n+\n+distinct class DistinctFooB {\n+    int i = 0;\n+}\n+\n+function testObjectConstructorWithDistintExpectedType() {\n+    DistinctFoo distinctObject = object {\n+                                        int i;\n+                                        function init() {\n+                                            self.i = 20;\n+                                        }\n+                                    };\n+    assertValueEquality(20, distinctObject.i);\n+}\n+\n+function testObjectConstructorWithDistintTypeReference() {\n+    DistinctFooA distinctObject = object DistinctFooA {\n+                                            int i;\n+                                            function init() {\n+                                                self.i = 30;\n+                                            }\n+                                         };\n+    assertValueEquality(30, distinctObject.i);\n+}\n+\n+function testObjectConstructorWithDistintTypeReferenceVar() {\n+    var distinctObject = object DistinctFooB {\n+                                            int i;\n+                                            function init() {\n+                                                self.i = 25;\n+                                            }\n+                                         };\n+    DistinctFooB newDistinctRef = distinctObject;\n+    assertValueEquality(25, newDistinctRef.i);\n+}\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEzMDQ4Mw=="}, "originalCommit": {"oid": "7c6b982da803bdb5e5da55d003ed310e32de0951"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4931, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}