{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNjAyNDYx", "number": 22119, "title": "Fixes issue in handling error for streams with query expressions", "bodyText": "Purpose\n\nAt the moment, the query expression is desugared to foreach statements. Hence, limitation to handle error for streams with query expressions.\n\nFixes #21757\nApproach\n\nDesugar query expression into while statements, and handle errors within the while statement.\n\nSamples\n\nn/a\n\nRemarks\n\nn/a\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-03-23T19:43:40Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22119", "merged": true, "mergeCommit": {"oid": "96128d60dcb73ef095566b9879de2006452386dc"}, "closed": true, "closedAt": "2020-04-01T02:35:58Z", "author": {"login": "pcnfernando"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQs9yfgBqjMxNTgyNTgyOTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTGTQ_gH2gAyMzkyNjAyNDYxOjk5NjU0OWUyYTZiNjMxNWNiNzBmMTg4YmU0ZjUzYzNlNjg0NTY1OTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1275bf2c8070fcc45a8d3305a3e6086e87b07c4a", "author": {"user": {"login": "pcnfernando", "name": "Chiran Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1275bf2c8070fcc45a8d3305a3e6086e87b07c4a", "committedDate": "2020-03-23T19:37:30Z", "message": "Re-enable disabled query tests"}, "afterCommit": {"oid": "1f8934698e6e1089983e0aea983071ebc0191390", "author": {"user": {"login": "pcnfernando", "name": "Chiran Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1f8934698e6e1089983e0aea983071ebc0191390", "committedDate": "2020-03-24T06:30:51Z", "message": "Make errorType a local var"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwOTk5MDk1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22119#pullrequestreview-380999095", "createdAt": "2020-03-25T09:56:51Z", "commit": {"oid": "d82f216373af17fc2868db927c8f111d74de4391"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOTo1Njo1MVrOF7TiHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwOTo1Njo1MVrOF7TiHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczMDMzNA==", "bodyText": "Shall we replace this with push()?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22119#discussion_r397730334", "createdAt": "2020-03-25T09:56:51Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/QueryDesugar.java", "diffHunk": "@@ -96,78 +106,123 @@ public static QueryDesugar getInstance(CompilerContext context) {\n         return desugar;\n     }\n \n+    // Create While statement\n+    //\n+    // Below query expression :\n+    //    Person[]|error? outputDataArray = from var person in personList\n+    //                                        select person;\n+    //\n+    // changes as,\n+    //    Employee[]|error? outputDataArray = ();\n+    //    Employee[] $tempDataArray$ = [];\n+    //\n+    //    Person[] $data$ = personList;\n+    //    abstract object {public function next() returns record {|Person value;|}? $iterator$ = $data$.iterator();\n+    //    record {|Person value;|}|error? $result$ = $iterator$.next();\n+    //\n+    //    while (true) {\n+    //        if ($result$ is ()) {\n+    //            break;\n+    //        } else if ($result$ is error) {\n+    //            outputDataArray = $result$;\n+    //            break;\n+    //        } else {\n+    //            var $value$ = $result$.value;\n+    //        }\n+    //        $result$ = $iterator$.next();\n+    //    }\n+    //\n+    //    if (outputDataArray is ()) {\n+    //        outputDataArray = tempDataArray;\n+    //    }\n     BLangStatementExpression desugarQueryExpr(BLangQueryExpr queryExpr, SymbolEnv env) {\n+        this.env = env;\n         List<BLangFromClause> fromClauseList = queryExpr.fromClauseList;\n         BLangFromClause fromClause = fromClauseList.get(0);\n         BLangSelectClause selectClause = queryExpr.selectClause;\n         List<BLangWhereClause> whereClauseList = queryExpr.whereClauseList;\n         List<BLangLetClause> letClauseList = queryExpr.letClausesList;\n         DiagnosticPos pos = fromClause.pos;\n+        parentBlock = ASTBuilderUtil.createBlockStmt(fromClause.pos);\n \n-        // Create Foreach statement\n-        //\n-        // Below query expression :\n-        //      from var person in personList\n-        //\n-        // changes as,\n-        //      foreach var person in personList {\n-        //          ....\n-        //      }\n-        BLangForeach leafForeach = buildFromClauseBlock(fromClauseList);\n-        BLangBlockStmt foreachBody = ASTBuilderUtil.createBlockStmt(pos);\n-\n+        // Create output data array variable\n+        // Person[]|error ? $outputDataArray$ = ();\n         BArrayType outputArrayType = new BArrayType(selectClause.expression.type);\n-        BLangListConstructorExpr emptyArrayExpr = ASTBuilderUtil.createEmptyArrayLiteral(pos,\n-                outputArrayType);\n-        BVarSymbol emptyArrayVarSymbol = new BVarSymbol(0, new Name(\"$outputDataArray$\"),\n-                env.scope.owner.pkgID, outputArrayType, env.scope.owner);\n+        BType outputUnionType = BUnionType.create(null, symTable.errorType, outputArrayType);\n+        BLangLiteral nillLiteral = ASTBuilderUtil.createLiteral(fromClause.pos, symTable.nilType,\n+                null);\n+        BVarSymbol outputArrayVarSymbol = new BVarSymbol(0, new Name(\"$outputDataArray$\"),\n+                env.scope.owner.pkgID, outputUnionType, env.scope.owner);\n         BLangSimpleVariable outputArrayVariable =\n-                ASTBuilderUtil.createVariable(pos, \"$outputDataArray$\", outputArrayType,\n-                        emptyArrayExpr, emptyArrayVarSymbol);\n-\n-        // Create temp array variable\n-        //      Person[] x = [];\n-\n+                ASTBuilderUtil.createVariable(pos, \"$outputDataArray$\", outputUnionType,\n+                        nillLiteral, outputArrayVarSymbol);\n         BLangSimpleVariableDef outputVariableDef =\n                 ASTBuilderUtil.createVariableDef(pos, outputArrayVariable);\n         BLangSimpleVarRef outputVarRef = ASTBuilderUtil.createVariableRef(pos, outputArrayVariable.symbol);\n \n+        // Create temp array variable\n+        // Person[] $tempDataArray$ = [];\n+        BVarSymbol tempArrayVarSymbol = new BVarSymbol(0, new Name(\"$tempDataArray$\"),\n+                env.scope.owner.pkgID, outputArrayType, env.scope.owner);\n+        BLangListConstructorExpr emptyArrayExpr = ASTBuilderUtil.createEmptyArrayLiteral(pos,\n+                outputArrayType);\n+        BLangSimpleVariable tempArrayVariable =\n+                ASTBuilderUtil.createVariable(pos, \"$tempDataArray$\", outputArrayType,\n+                        emptyArrayExpr, tempArrayVarSymbol);\n+        BLangSimpleVariableDef tempArrayVariableDef =\n+                ASTBuilderUtil.createVariableDef(pos, tempArrayVariable);\n+        BLangSimpleVarRef tempArrayVarRef = ASTBuilderUtil.createVariableRef(pos, tempArrayVariable.symbol);\n+\n+        parentBlock.addStatement(outputVariableDef);\n+        parentBlock.addStatement(tempArrayVariableDef);\n+\n+        BLangBlockStmt leafElseBlock = buildFromClauseBlock(fromClauseList, outputVarRef);\n+\n         // Create indexed based access expression statement\n-        //      x[x.length()] = {\n+        //      $tempDataArray$[$tempDataArray$.length()] = {\n         //         firstName: person.firstName,\n         //         lastName: person.lastName\n         //      };\n-\n-        BLangInvocation lengthInvocation = createLengthInvocation(selectClause.pos, outputArrayVariable.symbol);\n-        lengthInvocation.expr = outputVarRef;\n-        BLangIndexBasedAccess indexAccessExpr = ASTBuilderUtil.createIndexAccessExpr(outputVarRef, lengthInvocation);\n+        BLangInvocation lengthInvocation = createLengthInvocation(selectClause.pos, tempArrayVariable.symbol);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d82f216373af17fc2868db927c8f111d74de4391"}, "originalPosition": 162}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMDA4OTU0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22119#pullrequestreview-381008954", "createdAt": "2020-03-25T10:10:22Z", "commit": {"oid": "d82f216373af17fc2868db927c8f111d74de4391"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDoxMDoyMlrOF7UCsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDoxMDoyMlrOF7UCsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczODY3Mg==", "bodyText": "check the tag instead of using instance of", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22119#discussion_r397738672", "createdAt": "2020-03-25T10:10:22Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2824,10 +2826,32 @@ public void visit(BLangQueryExpr queryExpr) {\n         BType expSelectType = expType;\n         if (expType.tag == TypeTags.ARRAY) {\n             expSelectType = ((BArrayType) expType).eType;\n-        }\n+        } else if (expType.tag == TypeTags.UNION) {\n+            Set<BType> memTypes = ((BUnionType) expType).getMemberTypes();\n \n+            LinkedHashSet<BType> nilRemovedSet = new LinkedHashSet<>();\n+            for (BType bType : memTypes) {\n+                if (bType.tag != symTable.nilType.tag && bType.tag != symTable.errorType.tag) {\n+                    nilRemovedSet.add(bType);\n+                }\n+            }\n+            expSelectType = nilRemovedSet.size() == 1 ? nilRemovedSet.iterator().next() :\n+                    BUnionType.create(null, nilRemovedSet);\n+            if (expSelectType.tag == TypeTags.ARRAY) {\n+                expSelectType = ((BArrayType) expSelectType).eType;\n+            }\n+        }\n         BType selectType = checkExpr(selectClause.expression, whereEnv, expSelectType);\n-        resultType = selectType == symTable.semanticError ? selectType : new BArrayType(selectType);\n+        BType actualType = new BArrayType(selectType);\n+        if ((collectionNode instanceof BLangSimpleVarRef) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d82f216373af17fc2868db927c8f111d74de4391"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMDA5NDQ1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22119#pullrequestreview-381009445", "createdAt": "2020-03-25T10:11:03Z", "commit": {"oid": "d82f216373af17fc2868db927c8f111d74de4391"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDoxMTowM1rOF7UESQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDoxMTowM1rOF7UESQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczOTA4MQ==", "bodyText": "check the type tag instead of instanceof", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22119#discussion_r397739081", "createdAt": "2020-03-25T10:11:03Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2824,10 +2826,32 @@ public void visit(BLangQueryExpr queryExpr) {\n         BType expSelectType = expType;\n         if (expType.tag == TypeTags.ARRAY) {\n             expSelectType = ((BArrayType) expType).eType;\n-        }\n+        } else if (expType.tag == TypeTags.UNION) {\n+            Set<BType> memTypes = ((BUnionType) expType).getMemberTypes();\n \n+            LinkedHashSet<BType> nilRemovedSet = new LinkedHashSet<>();\n+            for (BType bType : memTypes) {\n+                if (bType.tag != symTable.nilType.tag && bType.tag != symTable.errorType.tag) {\n+                    nilRemovedSet.add(bType);\n+                }\n+            }\n+            expSelectType = nilRemovedSet.size() == 1 ? nilRemovedSet.iterator().next() :\n+                    BUnionType.create(null, nilRemovedSet);\n+            if (expSelectType.tag == TypeTags.ARRAY) {\n+                expSelectType = ((BArrayType) expSelectType).eType;\n+            }\n+        }\n         BType selectType = checkExpr(selectClause.expression, whereEnv, expSelectType);\n-        resultType = selectType == symTable.semanticError ? selectType : new BArrayType(selectType);\n+        BType actualType = new BArrayType(selectType);\n+        if ((collectionNode instanceof BLangSimpleVarRef) &&\n+                (((BLangSimpleVarRef) collectionNode).type instanceof BStreamType)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d82f216373af17fc2868db927c8f111d74de4391"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27593539de284575d23d33c2806756d9623e56d2", "author": {"user": {"login": "pcnfernando", "name": "Chiran Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/27593539de284575d23d33c2806756d9623e56d2", "committedDate": "2020-03-31T08:16:53Z", "message": "Initial desugar from clause to while"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdbc5b127322f6b790d3f648633ec8b4796b4d3d", "author": {"user": {"login": "pcnfernando", "name": "Chiran Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cdbc5b127322f6b790d3f648633ec8b4796b4d3d", "committedDate": "2020-03-31T08:16:53Z", "message": "Support let and where clasues within desugared while"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40dcf1bb71b1939fafabeea63750c360c0bfaf31", "author": {"user": {"login": "pcnfernando", "name": "Chiran Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/40dcf1bb71b1939fafabeea63750c360c0bfaf31", "committedDate": "2020-03-31T08:16:53Z", "message": "Add multiple from clause support with while desugar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a3d12eaf0a90982f2bcbd4510f407673511de99", "author": {"user": {"login": "pcnfernando", "name": "Chiran Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8a3d12eaf0a90982f2bcbd4510f407673511de99", "committedDate": "2020-03-31T08:16:53Z", "message": "Break while loops when an error is already caught"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99ec22f42ab9daf5487c2b43aa3ad81e10ddadb1", "author": {"user": {"login": "pcnfernando", "name": "Chiran Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/99ec22f42ab9daf5487c2b43aa3ad81e10ddadb1", "committedDate": "2020-03-31T08:16:53Z", "message": "Desugar query action as while statements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0563a52a8a0b41cdda33279298322af11ecd4ef", "author": {"user": {"login": "pcnfernando", "name": "Chiran Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b0563a52a8a0b41cdda33279298322af11ecd4ef", "committedDate": "2020-03-31T08:16:53Z", "message": "Use union type for output type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66cfd1cc622614c01ea63ce6e98af0b6b7d06127", "author": {"user": {"login": "pcnfernando", "name": "Chiran Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/66cfd1cc622614c01ea63ce6e98af0b6b7d06127", "committedDate": "2020-03-31T08:16:53Z", "message": "Improve type checker to handle union types with query exp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a97a4b740a07fc97d1839bf4b271134654f93f3c", "author": {"user": {"login": "pcnfernando", "name": "Chiran Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a97a4b740a07fc97d1839bf4b271134654f93f3c", "committedDate": "2020-03-31T08:16:53Z", "message": "Use type of checked expr within union result"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce92d910565db82f5aa97545ea24344f1e202fae", "author": {"user": {"login": "pcnfernando", "name": "Chiran Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ce92d910565db82f5aa97545ea24344f1e202fae", "committedDate": "2020-03-31T08:16:53Z", "message": "Add tests for using query expressions with streams"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "524ab137813ba3febf150c4b00d176dd65de777d", "author": {"user": {"login": "pcnfernando", "name": "Chiran Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/524ab137813ba3febf150c4b00d176dd65de777d", "committedDate": "2020-03-31T08:16:53Z", "message": "Refactor from clause desugaring to while"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2f8898ba386d107decd991dc1f3ac7b2ccd1011", "author": {"user": {"login": "pcnfernando", "name": "Chiran Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f2f8898ba386d107decd991dc1f3ac7b2ccd1011", "committedDate": "2020-03-31T08:16:53Z", "message": "Re-enable disabled query tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "099e17692929c338b33080fb9de85dbc46a4816a", "author": {"user": {"login": "pcnfernando", "name": "Chiran Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/099e17692929c338b33080fb9de85dbc46a4816a", "committedDate": "2020-03-31T08:16:53Z", "message": "Make errorType a local var"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0db591d767847466039372daee5706cefb1442f", "author": {"user": {"login": "pcnfernando", "name": "Chiran Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f0db591d767847466039372daee5706cefb1442f", "committedDate": "2020-03-31T08:16:53Z", "message": "Separate XMLConstants from previous imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6325d117e62dabfab44c3d6e9c4c9268019878a4", "author": {"user": {"login": "pcnfernando", "name": "Chiran Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6325d117e62dabfab44c3d6e9c4c9268019878a4", "committedDate": "2020-03-31T08:16:53Z", "message": "Add creating statements as comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cf5d587d84293317f3af2127278d5c72f4e8d0f", "author": {"user": {"login": "pcnfernando", "name": "Chiran Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1cf5d587d84293317f3af2127278d5c72f4e8d0f", "committedDate": "2020-03-31T08:16:53Z", "message": "Improve query exp type checking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "453197d47a9c3a56f057e60ffd58c0dcb291f0d1", "author": {"user": {"login": "pcnfernando", "name": "Chiran Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/453197d47a9c3a56f057e60ffd58c0dcb291f0d1", "committedDate": "2020-03-31T08:16:53Z", "message": "Use type checked result in query exp desugar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdab9e5c14a474e8eb43848bc01b7a0d570fe7b5", "author": {"user": {"login": "pcnfernando", "name": "Chiran Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bdab9e5c14a474e8eb43848bc01b7a0d570fe7b5", "committedDate": "2020-03-31T08:16:53Z", "message": "Remove unused imports"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "83dfd94ba30d2419f1b540c5fb9f9aeb39839b8a", "author": {"user": {"login": "pcnfernando", "name": "Chiran Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/83dfd94ba30d2419f1b540c5fb9f9aeb39839b8a", "committedDate": "2020-03-30T20:26:50Z", "message": "Remove unused imports"}, "afterCommit": {"oid": "bdab9e5c14a474e8eb43848bc01b7a0d570fe7b5", "author": {"user": {"login": "pcnfernando", "name": "Chiran Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bdab9e5c14a474e8eb43848bc01b7a0d570fe7b5", "committedDate": "2020-03-31T08:16:53Z", "message": "Remove unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f61b4f2729dcb2a06f1681777d5132753080328c", "author": {"user": {"login": "pcnfernando", "name": "Chiran Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f61b4f2729dcb2a06f1681777d5132753080328c", "committedDate": "2020-03-31T09:45:13Z", "message": "Use select and collection types to infer LHS type when it's Var type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e35bf40c8a8de0d6b48fcd79ff6f7ff80269228a", "author": {"user": {"login": "pcnfernando", "name": "Chiran Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e35bf40c8a8de0d6b48fcd79ff6f7ff80269228a", "committedDate": "2020-03-31T10:08:46Z", "message": "Add query expression test with iterable object"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NjAwODE3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22119#pullrequestreview-384600817", "createdAt": "2020-03-31T10:28:16Z", "commit": {"oid": "e35bf40c8a8de0d6b48fcd79ff6f7ff80269228a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NjI3Njcw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22119#pullrequestreview-384627670", "createdAt": "2020-03-31T11:08:47Z", "commit": {"oid": "e35bf40c8a8de0d6b48fcd79ff6f7ff80269228a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NjQ3NjI2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22119#pullrequestreview-384647626", "createdAt": "2020-03-31T11:39:54Z", "commit": {"oid": "e35bf40c8a8de0d6b48fcd79ff6f7ff80269228a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTozOTo1NFrOF-RmEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTozOTo1NFrOF-RmEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg0NDMwNg==", "bodyText": "What will happen if we remove the cast  ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22119#discussion_r400844306", "createdAt": "2020-03-31T11:39:54Z", "author": {"login": "gimantha"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/query/simple-query-with-defined-type.bal", "diffHunk": "@@ -151,16 +174,16 @@ function testFilteringNullElements() returns Person[] {\n     return outputPersonList;\n }\n \n-function testMapWithArity () returns string[] {\n-    map<any> m = {a:\"1A\", b:\"2B\", c:\"3C\", d:\"4D\"};\n+function testMapWithArity() returns string[] {\n+    map<any> m = {a: \"1A\", b: \"2B\", c: \"3C\", d: \"4D\"};\n     string[] val = from var v in m\n                    where <string> v == \"1A\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e35bf40c8a8de0d6b48fcd79ff6f7ff80269228a"}, "originalPosition": 191}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NjQ5MjQ4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22119#pullrequestreview-384649248", "createdAt": "2020-03-31T11:42:23Z", "commit": {"oid": "e35bf40c8a8de0d6b48fcd79ff6f7ff80269228a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTo0MjoyM1rOF-RrZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTo0MjoyM1rOF-RrZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg0NTY2OQ==", "bodyText": "What will happen if the iterator object next method does not return an error but the stream has the errorType as the completionType?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22119#discussion_r400845669", "createdAt": "2020-03-31T11:42:23Z", "author": {"login": "gimantha"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/query/simple-query-with-var-type.bal", "diffHunk": "@@ -217,5 +228,15 @@ function testQueryExpressionWithSpreadOperatorV2() returns Teacher[]{\n                    teacherId: \"TER1200\"\n             };\n \n-    return  outputPersonList;\n+    return outputPersonList;\n+}\n+\n+public function testQueryWithStream() returns int[]|error {\n+    NumberGenerator numGen = new;\n+    var numberStream = new stream<int, error>(numGen);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e35bf40c8a8de0d6b48fcd79ff6f7ff80269228a"}, "originalPosition": 226}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NjUwNDMw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22119#pullrequestreview-384650430", "createdAt": "2020-03-31T11:44:10Z", "commit": {"oid": "e35bf40c8a8de0d6b48fcd79ff6f7ff80269228a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTo0NDoxMFrOF-RvZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTo0NDoxMFrOF-RvZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg0NjY5Mw==", "bodyText": "Shall we add another test for iterable which returns an error as well?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22119#discussion_r400846693", "createdAt": "2020-03-31T11:44:10Z", "author": {"login": "gimantha"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/query/query-exp-iterable-objects.bal", "diffHunk": "@@ -0,0 +1,61 @@\n+type Iterable object {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e35bf40c8a8de0d6b48fcd79ff6f7ff80269228a"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1224adc2df8f95cfe19d7cbfc3512d3eb3803f0", "author": {"user": {"login": "pcnfernando", "name": "Chiran Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f1224adc2df8f95cfe19d7cbfc3512d3eb3803f0", "committedDate": "2020-03-31T11:58:22Z", "message": "Update enclosed type within error nill lifted union type"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0Njc3Mzc0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22119#pullrequestreview-384677374", "createdAt": "2020-03-31T12:22:45Z", "commit": {"oid": "f1224adc2df8f95cfe19d7cbfc3512d3eb3803f0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70c68adb87317325ed5b6e8ea93dd9e3fb7b2dd1", "author": {"user": {"login": "pcnfernando", "name": "Chiran Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/70c68adb87317325ed5b6e8ea93dd9e3fb7b2dd1", "committedDate": "2020-03-31T12:56:23Z", "message": "Add test for iterable object with error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "996549e2a6b6315cb70f188be4f53c3e68456592", "author": {"user": {"login": "pcnfernando", "name": "Chiran Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/996549e2a6b6315cb70f188be4f53c3e68456592", "committedDate": "2020-03-31T17:11:07Z", "message": "Return immediately when semantic error is found"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3775, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}