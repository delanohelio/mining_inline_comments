{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5NDUyMDY4", "number": 25314, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMzoyODoxNVrOEZv_VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNzozMTowOVrOEaXe_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDM2MTE2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/TreeModifier.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMzoyODoxNVrOHCvsPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNDo1NjoxMVrOHCy9gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY0MDU3NA==", "bodyText": "Can we use separate methods for modifying NodeList and SeparatedNodeList?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25314#discussion_r472640574", "createdAt": "2020-08-19T03:28:15Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/TreeModifier.java", "diffHunk": "@@ -3070,14 +3070,23 @@ protected Node transformSyntaxNode(Node node) {\n         }\n \n         boolean nodeModified = false;\n-        STNode[] newSTNodes = new STNode[nodeList.size()];\n+        STNode[] newSTNodes = new STNode[nodeList.internalListNode.size()];\n+\n         for (int index = 0; index < nodeList.size(); index++) {\n             T oldNode = nodeList.get(index);\n             T newNode = modifyNode(oldNode);\n             if (oldNode != newNode) {\n                 nodeModified = true;\n             }\n-            newSTNodes[index] = newNode.internalNode();\n+\n+            if (nodeList instanceof SeparatedNodeList && index < nodeList.size() - 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b89de8b238fd1973cada7648103bcfef097012eb"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY5NDE0Nw==", "bodyText": "ok", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25314#discussion_r472694147", "createdAt": "2020-08-19T04:56:11Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/TreeModifier.java", "diffHunk": "@@ -3070,14 +3070,23 @@ protected Node transformSyntaxNode(Node node) {\n         }\n \n         boolean nodeModified = false;\n-        STNode[] newSTNodes = new STNode[nodeList.size()];\n+        STNode[] newSTNodes = new STNode[nodeList.internalListNode.size()];\n+\n         for (int index = 0; index < nodeList.size(); index++) {\n             T oldNode = nodeList.get(index);\n             T newNode = modifyNode(oldNode);\n             if (oldNode != newNode) {\n                 nodeModified = true;\n             }\n-            newSTNodes[index] = newNode.internalNode();\n+\n+            if (nodeList instanceof SeparatedNodeList && index < nodeList.size() - 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY0MDU3NA=="}, "originalCommit": {"oid": "b89de8b238fd1973cada7648103bcfef097012eb"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDM3MzI5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/TreeModifier.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMzozMTozMlrOHCvz-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjozNzowOFrOHC3HzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY0MjU1NQ==", "bodyText": "Looks like the separator is not modified.\nShall we add a test case to check whether the separator is also modified? e.g: remove all whitespaces", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25314#discussion_r472642555", "createdAt": "2020-08-19T03:31:32Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/TreeModifier.java", "diffHunk": "@@ -3070,14 +3070,23 @@ protected Node transformSyntaxNode(Node node) {\n         }\n \n         boolean nodeModified = false;\n-        STNode[] newSTNodes = new STNode[nodeList.size()];\n+        STNode[] newSTNodes = new STNode[nodeList.internalListNode.size()];\n+\n         for (int index = 0; index < nodeList.size(); index++) {\n             T oldNode = nodeList.get(index);\n             T newNode = modifyNode(oldNode);\n             if (oldNode != newNode) {\n                 nodeModified = true;\n             }\n-            newSTNodes[index] = newNode.internalNode();\n+\n+            if (nodeList instanceof SeparatedNodeList && index < nodeList.size() - 1) {\n+                newSTNodes[2 * index] = newNode.internalNode();\n+                newSTNodes[(2 * index) + 1] = ((SeparatedNodeList<?>) nodeList).getSeparator(index).internalNode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b89de8b238fd1973cada7648103bcfef097012eb"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY5Mzg1Mg==", "bodyText": "alright", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25314#discussion_r472693852", "createdAt": "2020-08-19T04:55:39Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/TreeModifier.java", "diffHunk": "@@ -3070,14 +3070,23 @@ protected Node transformSyntaxNode(Node node) {\n         }\n \n         boolean nodeModified = false;\n-        STNode[] newSTNodes = new STNode[nodeList.size()];\n+        STNode[] newSTNodes = new STNode[nodeList.internalListNode.size()];\n+\n         for (int index = 0; index < nodeList.size(); index++) {\n             T oldNode = nodeList.get(index);\n             T newNode = modifyNode(oldNode);\n             if (oldNode != newNode) {\n                 nodeModified = true;\n             }\n-            newSTNodes[index] = newNode.internalNode();\n+\n+            if (nodeList instanceof SeparatedNodeList && index < nodeList.size() - 1) {\n+                newSTNodes[2 * index] = newNode.internalNode();\n+                newSTNodes[(2 * index) + 1] = ((SeparatedNodeList<?>) nodeList).getSeparator(index).internalNode();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY0MjU1NQ=="}, "originalCommit": {"oid": "b89de8b238fd1973cada7648103bcfef097012eb"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc2MjMxNw==", "bodyText": "ok", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25314#discussion_r472762317", "createdAt": "2020-08-19T06:37:08Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/syntax/tree/TreeModifier.java", "diffHunk": "@@ -3070,14 +3070,23 @@ protected Node transformSyntaxNode(Node node) {\n         }\n \n         boolean nodeModified = false;\n-        STNode[] newSTNodes = new STNode[nodeList.size()];\n+        STNode[] newSTNodes = new STNode[nodeList.internalListNode.size()];\n+\n         for (int index = 0; index < nodeList.size(); index++) {\n             T oldNode = nodeList.get(index);\n             T newNode = modifyNode(oldNode);\n             if (oldNode != newNode) {\n                 nodeModified = true;\n             }\n-            newSTNodes[index] = newNode.internalNode();\n+\n+            if (nodeList instanceof SeparatedNodeList && index < nodeList.size() - 1) {\n+                newSTNodes[2 * index] = newNode.internalNode();\n+                newSTNodes[(2 * index) + 1] = ((SeparatedNodeList<?>) nodeList).getSeparator(index).internalNode();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY0MjU1NQ=="}, "originalCommit": {"oid": "b89de8b238fd1973cada7648103bcfef097012eb"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDM4OTM0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/test/resources/tree/separated_node_list_modify.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMzozNjowNVrOHCv-PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNDo1NTo0OVrOHCy8tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY0NTE4MQ==", "bodyText": "missing EOF newline", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25314#discussion_r472645181", "createdAt": "2020-08-19T03:36:05Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/resources/tree/separated_node_list_modify.bal", "diffHunk": "@@ -0,0 +1 @@\n+int a = [a,b,c];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b89de8b238fd1973cada7648103bcfef097012eb"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY5Mzk0MQ==", "bodyText": "ok", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25314#discussion_r472693941", "createdAt": "2020-08-19T04:55:49Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/test/resources/tree/separated_node_list_modify.bal", "diffHunk": "@@ -0,0 +1 @@\n+int a = [a,b,c];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY0NTE4MQ=="}, "originalCommit": {"oid": "b89de8b238fd1973cada7648103bcfef097012eb"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NjE0MTYxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-treegen/src/main/resources/external_tree_modifier_template.mustache", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMDo0MTo0NFrOHDBm0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMDo0MTo0NFrOHDBm0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzNDA5Nw==", "bodyText": "Inverting the condition would simplify the logic i think.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25314#discussion_r472934097", "createdAt": "2020-08-19T10:41:44Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-treegen/src/main/resources/external_tree_modifier_template.mustache", "diffHunk": "@@ -69,7 +69,42 @@ public abstract class {{className}} extends {{superClassName}}<Node> {\n     }\n \n     protected <T extends Node> SeparatedNodeList<T> modifySeparatedNodeList(SeparatedNodeList<T> nodeList) {\n-        return modifyGenericNodeList(nodeList, SeparatedNodeList::new);\n+        Function<NonTerminalNode, SeparatedNodeList> nodeListCreator = SeparatedNodeList::new;\n+        if (nodeList.isEmpty()) {\n+            return nodeList;\n+        }\n+\n+        boolean nodeModified = false;\n+        STNode[] newSTNodes = new STNode[nodeList.internalListNode.size()];\n+\n+        for (int index = 0; index < nodeList.size(); index++) {\n+            T oldNode = nodeList.get(index);\n+            T newNode = modifyNode(oldNode);\n+            if (oldNode != newNode) {\n+                nodeModified = true;\n+            }\n+\n+            if (index != nodeList.size() - 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ba9261e0b2a9aae7b4831aa9dafd8e3066d8f48"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NjE0NDMwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-treegen/src/main/resources/external_tree_modifier_template.mustache", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMDo0MjoyNFrOHDBoXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMDo0MjoyNFrOHDBoXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzNDQ5NA==", "bodyText": "This line is common to both conditions. can take it out.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25314#discussion_r472934494", "createdAt": "2020-08-19T10:42:24Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-treegen/src/main/resources/external_tree_modifier_template.mustache", "diffHunk": "@@ -69,7 +69,42 @@ public abstract class {{className}} extends {{superClassName}}<Node> {\n     }\n \n     protected <T extends Node> SeparatedNodeList<T> modifySeparatedNodeList(SeparatedNodeList<T> nodeList) {\n-        return modifyGenericNodeList(nodeList, SeparatedNodeList::new);\n+        Function<NonTerminalNode, SeparatedNodeList> nodeListCreator = SeparatedNodeList::new;\n+        if (nodeList.isEmpty()) {\n+            return nodeList;\n+        }\n+\n+        boolean nodeModified = false;\n+        STNode[] newSTNodes = new STNode[nodeList.internalListNode.size()];\n+\n+        for (int index = 0; index < nodeList.size(); index++) {\n+            T oldNode = nodeList.get(index);\n+            T newNode = modifyNode(oldNode);\n+            if (oldNode != newNode) {\n+                nodeModified = true;\n+            }\n+\n+            if (index != nodeList.size() - 1) {\n+                Token oldSeperator = nodeList.getSeparator(index);\n+                Token newSeperator = modifyToken(oldSeperator);\n+\n+                if (oldSeperator != newSeperator) {\n+                    nodeModified = true;\n+                }\n+\n+                newSTNodes[2 * index] = newNode.internalNode();\n+                newSTNodes[(2 * index) + 1] = newSeperator.internalNode();\n+            } else {\n+                newSTNodes[2 * index] = newNode.internalNode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ba9261e0b2a9aae7b4831aa9dafd8e3066d8f48"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NjE1Mjc0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/tree/SyntaxTreeModifierTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMDo0NDo1NVrOHDBtXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNTozNzozNVrOHDq-tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzNTc3Mg==", "bodyText": "These two asserts only checks for the counts.\nWe need to assert the content as well, to see whether they were updated correctly or not.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25314#discussion_r472935772", "createdAt": "2020-08-19T10:44:55Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/tree/SyntaxTreeModifierTest.java", "diffHunk": "@@ -109,6 +115,54 @@ public void testBinaryExprModification() {\n         Assert.assertEquals(minusOrSlashCounter.transform(newRoot), new Integer(4));\n     }\n \n+    @Test\n+    public void testSeparatedListNodeNonSeperatorModification() {\n+        SyntaxTree syntaxTree = parseFile(\"separated_node_list_modify_all_nodes.bal\");\n+        ModulePartNode oldRoot = syntaxTree.rootNode();\n+\n+        ModuleVariableDeclarationNode oldModuleVariableDeclarationNode =\n+                (ModuleVariableDeclarationNode) oldRoot.members().get(0);\n+        ListConstructorExpressionNode oldSeperatedlistNode =\n+                (ListConstructorExpressionNode) oldModuleVariableDeclarationNode.initializer();\n+\n+        IdentifierModifier identifierModifier = new IdentifierModifier();\n+        ModulePartNode newRoot = (ModulePartNode) oldRoot.apply(identifierModifier);\n+\n+        ModuleVariableDeclarationNode newModuleVariableDeclarationNode =\n+                (ModuleVariableDeclarationNode) newRoot.members().get(0);\n+        ListConstructorExpressionNode newSeperatedlistNode =\n+                (ListConstructorExpressionNode) newModuleVariableDeclarationNode.initializer();\n+\n+        Assert.assertEquals(oldSeperatedlistNode.expressions().separatorSize(),\n+                newSeperatedlistNode.expressions().separatorSize());\n+        Assert.assertEquals(oldSeperatedlistNode.expressions().size(),\n+                newSeperatedlistNode.expressions().size());\n+    }\n+\n+    @Test\n+    public void testSeparatedListNodeAllNodeModification() {\n+        SyntaxTree syntaxTree = parseFile(\"separated_node_list_modify.bal\");\n+        ModulePartNode oldRoot = syntaxTree.rootNode();\n+\n+        ModuleVariableDeclarationNode oldModuleVariableDeclarationNode =\n+                (ModuleVariableDeclarationNode) oldRoot.members().get(0);\n+        ListConstructorExpressionNode oldSeperatedlistNode =\n+                (ListConstructorExpressionNode) oldModuleVariableDeclarationNode.initializer();\n+\n+        TokenModifier tokenModifier = new TokenModifier();\n+        ModulePartNode newRoot = (ModulePartNode) oldRoot.apply(tokenModifier);\n+\n+        ModuleVariableDeclarationNode newModuleVariableDeclarationNode =\n+                (ModuleVariableDeclarationNode) newRoot.members().get(0);\n+        ListConstructorExpressionNode newSeperatedlistNode =\n+                (ListConstructorExpressionNode) newModuleVariableDeclarationNode.initializer();\n+\n+        Assert.assertEquals(oldSeperatedlistNode.expressions().separatorSize(),\n+                newSeperatedlistNode.expressions().separatorSize());\n+        Assert.assertEquals(oldSeperatedlistNode.expressions().size(),\n+                newSeperatedlistNode.expressions().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ba9261e0b2a9aae7b4831aa9dafd8e3066d8f48"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYxMTk1OA==", "bodyText": "ok", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25314#discussion_r473611958", "createdAt": "2020-08-20T05:37:35Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/tree/SyntaxTreeModifierTest.java", "diffHunk": "@@ -109,6 +115,54 @@ public void testBinaryExprModification() {\n         Assert.assertEquals(minusOrSlashCounter.transform(newRoot), new Integer(4));\n     }\n \n+    @Test\n+    public void testSeparatedListNodeNonSeperatorModification() {\n+        SyntaxTree syntaxTree = parseFile(\"separated_node_list_modify_all_nodes.bal\");\n+        ModulePartNode oldRoot = syntaxTree.rootNode();\n+\n+        ModuleVariableDeclarationNode oldModuleVariableDeclarationNode =\n+                (ModuleVariableDeclarationNode) oldRoot.members().get(0);\n+        ListConstructorExpressionNode oldSeperatedlistNode =\n+                (ListConstructorExpressionNode) oldModuleVariableDeclarationNode.initializer();\n+\n+        IdentifierModifier identifierModifier = new IdentifierModifier();\n+        ModulePartNode newRoot = (ModulePartNode) oldRoot.apply(identifierModifier);\n+\n+        ModuleVariableDeclarationNode newModuleVariableDeclarationNode =\n+                (ModuleVariableDeclarationNode) newRoot.members().get(0);\n+        ListConstructorExpressionNode newSeperatedlistNode =\n+                (ListConstructorExpressionNode) newModuleVariableDeclarationNode.initializer();\n+\n+        Assert.assertEquals(oldSeperatedlistNode.expressions().separatorSize(),\n+                newSeperatedlistNode.expressions().separatorSize());\n+        Assert.assertEquals(oldSeperatedlistNode.expressions().size(),\n+                newSeperatedlistNode.expressions().size());\n+    }\n+\n+    @Test\n+    public void testSeparatedListNodeAllNodeModification() {\n+        SyntaxTree syntaxTree = parseFile(\"separated_node_list_modify.bal\");\n+        ModulePartNode oldRoot = syntaxTree.rootNode();\n+\n+        ModuleVariableDeclarationNode oldModuleVariableDeclarationNode =\n+                (ModuleVariableDeclarationNode) oldRoot.members().get(0);\n+        ListConstructorExpressionNode oldSeperatedlistNode =\n+                (ListConstructorExpressionNode) oldModuleVariableDeclarationNode.initializer();\n+\n+        TokenModifier tokenModifier = new TokenModifier();\n+        ModulePartNode newRoot = (ModulePartNode) oldRoot.apply(tokenModifier);\n+\n+        ModuleVariableDeclarationNode newModuleVariableDeclarationNode =\n+                (ModuleVariableDeclarationNode) newRoot.members().get(0);\n+        ListConstructorExpressionNode newSeperatedlistNode =\n+                (ListConstructorExpressionNode) newModuleVariableDeclarationNode.initializer();\n+\n+        Assert.assertEquals(oldSeperatedlistNode.expressions().separatorSize(),\n+                newSeperatedlistNode.expressions().separatorSize());\n+        Assert.assertEquals(oldSeperatedlistNode.expressions().size(),\n+                newSeperatedlistNode.expressions().size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzNTc3Mg=="}, "originalCommit": {"oid": "3ba9261e0b2a9aae7b4831aa9dafd8e3066d8f48"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDgzMTk3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/test/resources/tree/separated_node_list_modify_all_nodes_assert.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNzozMTowOVrOHDwDqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNzozOToxMFrOHDwpNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY5NTE0Nw==", "bodyText": "Shouldn't the WhiteSpaceMinutiaeRemover remove all the whitespaces?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25314#discussion_r473695147", "createdAt": "2020-08-20T07:31:09Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/resources/tree/separated_node_list_modify_all_nodes_assert.bal", "diffHunk": "@@ -0,0 +1 @@\n+inta =[a  ,b  ,c];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efbae4cd5494e1fe4e54fac8f1f8bf385cae8a6e"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzcwNDc1Nw==", "bodyText": "it only removes the white space from all tokens not from nodes like SimpleNamedReferenceNode.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25314#discussion_r473704757", "createdAt": "2020-08-20T07:39:10Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/test/resources/tree/separated_node_list_modify_all_nodes_assert.bal", "diffHunk": "@@ -0,0 +1 @@\n+inta =[a  ,b  ,c];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY5NTE0Nw=="}, "originalCommit": {"oid": "efbae4cd5494e1fe4e54fac8f1f8bf385cae8a6e"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 243, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}