{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2MzMyNzU4", "number": 20717, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMTozNTozOVrODadY1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwOTo0MzoyN1rODdnn0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDcxMDYwOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/parser/listener-declaration-without-type.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMTozNTozOVrOFhbHSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNzoxNDo0NVrOFhki2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MTU2Mw==", "bodyText": "Add a new line at the end.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r370591563", "createdAt": "2020-01-24T11:35:39Z", "author": {"login": "hasithaa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/parser/listener-declaration-without-type.bal", "diffHunk": "@@ -0,0 +1,7 @@\n+import ballerina/http;\n+\n+listener lstnr = new http:MockListener(8080);\n+public listener lstnr2 = new http:MockListener(8081);\n+listener http:Listener lstnr3 = new http:MockListener(8082);\n+\n+private listener lstnr4 = new http:Listerner(8083);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "573458cb08a0561870566ce8dfbe37c319bbc0bf"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc0NjA3NQ==", "bodyText": "done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r370746075", "createdAt": "2020-01-24T17:14:45Z", "author": {"login": "KRVPerera"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/parser/listener-declaration-without-type.bal", "diffHunk": "@@ -0,0 +1,7 @@\n+import ballerina/http;\n+\n+listener lstnr = new http:MockListener(8080);\n+public listener lstnr2 = new http:MockListener(8081);\n+listener http:Listener lstnr3 = new http:MockListener(8082);\n+\n+private listener lstnr4 = new http:Listerner(8083);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MTU2Mw=="}, "originalCommit": {"oid": "573458cb08a0561870566ce8dfbe37c319bbc0bf"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDcxMzcwOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMTozNjo1N1rOFhbJFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNzoxNDozM1rOFhkigg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MjAyMg==", "bodyText": "Since this is a negative test case, add -negative part to the file name.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r370592022", "createdAt": "2020-01-24T11:36:57Z", "author": {"login": "hasithaa"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java", "diffHunk": "@@ -112,4 +112,10 @@ public void testTokenRecognition() {\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '\\\\'\", 3, 5);\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '*'\", 4, 15);\n     }\n+\n+    @Test\n+    public void testListenerDeclarationWithoutType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-without-type.bal\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "573458cb08a0561870566ce8dfbe37c319bbc0bf"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc0NTk4Ng==", "bodyText": "done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r370745986", "createdAt": "2020-01-24T17:14:33Z", "author": {"login": "KRVPerera"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java", "diffHunk": "@@ -112,4 +112,10 @@ public void testTokenRecognition() {\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '\\\\'\", 3, 5);\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '*'\", 4, 15);\n     }\n+\n+    @Test\n+    public void testListenerDeclarationWithoutType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-without-type.bal\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MjAyMg=="}, "originalCommit": {"oid": "573458cb08a0561870566ce8dfbe37c319bbc0bf"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTAzMDY5OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/parser/listener-declaration-without-type-negative.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMzozNzo1MFrOFi7wYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMzozNzo1MFrOFi7wYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3NDk0NA==", "bodyText": "Having private modifier results a syntax error. Because of that, the actual semantic error is hidden. Please update the test case.\nAlso include test cases like,\nlistener x = new T ();  // Here T is not defined.\nlistener y = new P(); // Here is P is defined, but not a subtype of listener interface.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r372174944", "createdAt": "2020-01-29T03:37:50Z", "author": {"login": "hasithaa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/parser/listener-declaration-without-type-negative.bal", "diffHunk": "@@ -0,0 +1,7 @@\n+import ballerina/http;\n+\n+listener lstnr = new http:MockListener(8080);\n+public listener lstnr2 = new http:MockListener(8081);\n+listener http:Listener lstnr3 = new http:MockListener(8082);\n+\n+private listener lstnr4 = new http:Listerner(8083)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86eb37577e7d774e2705526024320e64951a051e"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMjEwNzI5OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/parser/listener-declaration-without-type-negative.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMTo1NjoxN1rOFjF3Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMjo0ODoyOVrOFjpuQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0MDUxMA==", "bodyText": "Add the license header", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r372340510", "createdAt": "2020-01-29T11:56:17Z", "author": {"login": "kalaiyarasiganeshalingam"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/parser/listener-declaration-without-type-negative.bal", "diffHunk": "@@ -0,0 +1,7 @@\n+import ballerina/http;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86eb37577e7d774e2705526024320e64951a051e"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkyODA2NQ==", "bodyText": "done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r372928065", "createdAt": "2020-01-30T12:48:29Z", "author": {"login": "KRVPerera"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/parser/listener-declaration-without-type-negative.bal", "diffHunk": "@@ -0,0 +1,7 @@\n+import ballerina/http;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0MDUxMA=="}, "originalCommit": {"oid": "86eb37577e7d774e2705526024320e64951a051e"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTIyMTY1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwOToxMTo1NlrOFjj0wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMzozMDoyM1rOFmxZNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzMTQyNA==", "bodyText": "We can replace this with\n            var.isDeclaredWithVar = !isTypeNameProvided;\nright?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r372831424", "createdAt": "2020-01-30T09:11:56Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java", "diffHunk": "@@ -1977,6 +1978,9 @@ void addGlobalVariable(DiagnosticPos pos, Set<Whitespace> ws, String identifier,\n         }\n         if (isListenerVar) {\n             var.flagSet.add(Flag.LISTENER);\n+            if (!isTypeNameProvided) {\n+                var.isDeclaredWithVar = true;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ed2e051c29d9f90fb7eb52f7dcd0d448d0d8531"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkxMDA0Mw==", "bodyText": "If the type name is provided we don't need to set \"isDeclaredWithVar\". IMO having the way suggested won't do anything but I think it will hide the actual logic.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r372910043", "createdAt": "2020-01-30T12:01:17Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java", "diffHunk": "@@ -1977,6 +1978,9 @@ void addGlobalVariable(DiagnosticPos pos, Set<Whitespace> ws, String identifier,\n         }\n         if (isListenerVar) {\n             var.flagSet.add(Flag.LISTENER);\n+            if (!isTypeNameProvided) {\n+                var.isDeclaredWithVar = true;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzMTQyNA=="}, "originalCommit": {"oid": "3ed2e051c29d9f90fb7eb52f7dcd0d448d0d8531"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcyNjE0Mw==", "bodyText": "Was thinking if we could avoid evaluating/the if block. But it's that vs unnecessarily setting false for var.isDeclaredWithVar. Let's go with this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r375726143", "createdAt": "2020-02-06T09:34:19Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java", "diffHunk": "@@ -1977,6 +1978,9 @@ void addGlobalVariable(DiagnosticPos pos, Set<Whitespace> ws, String identifier,\n         }\n         if (isListenerVar) {\n             var.flagSet.add(Flag.LISTENER);\n+            if (!isTypeNameProvided) {\n+                var.isDeclaredWithVar = true;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzMTQyNA=="}, "originalCommit": {"oid": "3ed2e051c29d9f90fb7eb52f7dcd0d448d0d8531"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5OTQ3Ng==", "bodyText": "Sorry for dragging this conversation, but shouldn't this go into generateBasicVarNode. If type name is not provided I think we can consider it as declaredWithVar.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r376199476", "createdAt": "2020-02-07T03:30:23Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangPackageBuilder.java", "diffHunk": "@@ -1977,6 +1978,9 @@ void addGlobalVariable(DiagnosticPos pos, Set<Whitespace> ws, String identifier,\n         }\n         if (isListenerVar) {\n             var.flagSet.add(Flag.LISTENER);\n+            if (!isTypeNameProvided) {\n+                var.isDeclaredWithVar = true;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzMTQyNA=="}, "originalCommit": {"oid": "3ed2e051c29d9f90fb7eb52f7dcd0d448d0d8531"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTIyNDU2OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/parser/listener-declaration-invalid-type-negative.bal", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwOToxMzowMlrOFjj2mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMjo0ODo1MFrOFjpu3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzMTg5OA==", "bodyText": "Why is this commented out?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r372831898", "createdAt": "2020-01-30T09:13:02Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/parser/listener-declaration-invalid-type-negative.bal", "diffHunk": "@@ -0,0 +1,3 @@\n+type Person object {};\n+listener x = 5;\n+//listener y = new Person();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ed2e051c29d9f90fb7eb52f7dcd0d448d0d8531"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkxMzgxOQ==", "bodyText": "Sorry, this is still on WIP. I am hoping to add a separate test case with the commented line.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r372913819", "createdAt": "2020-01-30T12:11:09Z", "author": {"login": "KRVPerera"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/parser/listener-declaration-invalid-type-negative.bal", "diffHunk": "@@ -0,0 +1,3 @@\n+type Person object {};\n+listener x = 5;\n+//listener y = new Person();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzMTg5OA=="}, "originalCommit": {"oid": "3ed2e051c29d9f90fb7eb52f7dcd0d448d0d8531"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkyODIyMw==", "bodyText": "done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r372928223", "createdAt": "2020-01-30T12:48:50Z", "author": {"login": "KRVPerera"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/parser/listener-declaration-invalid-type-negative.bal", "diffHunk": "@@ -0,0 +1,3 @@\n+type Person object {};\n+listener x = 5;\n+//listener y = new Person();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzMTg5OA=="}, "originalCommit": {"oid": "3ed2e051c29d9f90fb7eb52f7dcd0d448d0d8531"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTI0MTM4OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/listener/ListenerBaloTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwOToxODo0NVrOFjkBGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMjo0ODoxNlrOFjpt5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzNDU4NA==", "bodyText": "Shall we also add a balo test for when the listener type is defined in a separate module?\ne.g.,\nlistener l = new abc:Listener();", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r372834584", "createdAt": "2020-01-30T09:18:45Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/listener/ListenerBaloTest.java", "diffHunk": "@@ -45,7 +45,7 @@ public void testBasicStructAsObject() {\n         final BValue[] result = BRunUtil.invoke(compileResult, \"getStartAndAttachCount\");\n         Assert.assertEquals(result.length, 1, \"expected one return type\");\n         Assert.assertNotNull(result[0]);\n-        Assert.assertEquals(result[0].stringValue(), \"1_1\");\n+        Assert.assertEquals(result[0].stringValue(), \"2_3\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ed2e051c29d9f90fb7eb52f7dcd0d448d0d8531"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkyNzk3NA==", "bodyText": "done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r372927974", "createdAt": "2020-01-30T12:48:16Z", "author": {"login": "KRVPerera"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/listener/ListenerBaloTest.java", "diffHunk": "@@ -45,7 +45,7 @@ public void testBasicStructAsObject() {\n         final BValue[] result = BRunUtil.invoke(compileResult, \"getStartAndAttachCount\");\n         Assert.assertEquals(result.length, 1, \"expected one return type\");\n         Assert.assertNotNull(result[0]);\n-        Assert.assertEquals(result[0].stringValue(), \"1_1\");\n+        Assert.assertEquals(result[0].stringValue(), \"2_3\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzNDU4NA=="}, "originalCommit": {"oid": "3ed2e051c29d9f90fb7eb52f7dcd0d448d0d8531"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDA5OTEyOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNjoxNzo1MVrOFk3MRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNjoxNzo1MVrOFk3MRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE5NzMxNw==", "bodyText": "Remove the extra line", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r374197317", "createdAt": "2020-02-03T16:17:51Z", "author": {"login": "kalaiyarasiganeshalingam"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java", "diffHunk": "@@ -112,4 +112,33 @@ public void testTokenRecognition() {\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '\\\\'\", 3, 5);\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '*'\", 4, 15);\n     }\n+\n+    @Test\n+    public void testListenerDeclarationWithoutType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-without-type-negative.bal\");\n+        BAssertUtil.validateError(result, 0, \"incompatible types: expected 'Listener', found 'other'\", 17, 14);\n+    }\n+\n+    @Test\n+    public void testListenerDeclarationWithInvalidType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-invalid-type-negative.bal\");\n+        BAssertUtil.validateError(result, 0, \"incompatible types: expected 'Listener', found 'int'\", 17, 14);\n+    }\n+\n+    @Test\n+    public void testListenerDeclarationWithObjectType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-object-type-negative.bal\");\n+        BAssertUtil.validateError(result, 0, \"incompatible types: expected 'Listener', found 'Person'\", 18, 14);\n+    }\n+\n+    @Test\n+    public void testListenerDeclarationWithDefinedDifferentType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-type-reuse-negative.bal\");\n+        BAssertUtil.validateError(result, 0, \"incompatible types: expected 'ballerina/http:MockListener', found \" +\n+                \"'int'\", 22, 9);\n+        BAssertUtil.validateError(result, 1, \"incompatible types: expected 'int', found \" +\n+                \"'ballerina/http:MockListener'\", 23, 9);\n+\n+    }\n }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4ecdb7ff2d03440c55493b5ae728b1343bb3d90"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTQ5OTE2OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/parser/listener-declaration-type-reuse-negative.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMzo1NjowMlrOFlrHqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMzo1NjowMlrOFlrHqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA0ODEwNw==", "bodyText": "Does this compile? Missing a }?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r375048107", "createdAt": "2020-02-05T03:56:02Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/parser/listener-declaration-type-reuse-negative.bal", "diffHunk": "@@ -0,0 +1,23 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+import ballerina/http;\n+\n+listener x = new http:MockListener(8080);\n+var z = 5;\n+\n+public function test() {\n+    x = 5;\n+    z = new http:MockListener(8080);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "685ac386232232c2b67720fa95b17c530ba07147"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTQ5OTk3OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/balo/test_projects/test_listener/src/ext/listener.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMzo1NjozNlrOFlrIHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMzo1NjozNlrOFlrIHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA0ODIyMg==", "bodyText": "The return ()s are not needed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r375048222", "createdAt": "2020-02-05T03:56:36Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/balo/test_projects/test_listener/src/ext/listener.bal", "diffHunk": "@@ -0,0 +1,51 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/lang.'object;\n+\n+int startCount = 0;\n+int attachCount = 0;\n+\n+public function getStartAndAttachCount() returns string {\n+    return attachCount.toString() + \"_\" + startCount.toString();\n+}\n+\n+public type ABCD object {\n+\n+    *'object:Listener;\n+\n+    public function __init() {\n+    }\n+\n+    public function __start() returns error? {\n+        startCount += 1;\n+    }\n+\n+    public function __gracefulStop() returns error? {\n+        return ();\n+    }\n+\n+    public function __immediateStop() returns error? {\n+        return ();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "685ac386232232c2b67720fa95b17c530ba07147"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTUwMDM4OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/balo/test_projects/test_listener/src/ext/listener.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMzo1Njo1OFrOFlrIYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNTowNjo0NFrOFlr6RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA0ODI5MQ==", "bodyText": "We can remove this too, since we're not doing anything in the init method.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r375048291", "createdAt": "2020-02-05T03:56:58Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/balo/test_projects/test_listener/src/ext/listener.bal", "diffHunk": "@@ -0,0 +1,51 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/lang.'object;\n+\n+int startCount = 0;\n+int attachCount = 0;\n+\n+public function getStartAndAttachCount() returns string {\n+    return attachCount.toString() + \"_\" + startCount.toString();\n+}\n+\n+public type ABCD object {\n+\n+    *'object:Listener;\n+\n+    public function __init() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "685ac386232232c2b67720fa95b17c530ba07147"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2MTA2MA==", "bodyText": "done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r375061060", "createdAt": "2020-02-05T05:06:44Z", "author": {"login": "KRVPerera"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/balo/test_projects/test_listener/src/ext/listener.bal", "diffHunk": "@@ -0,0 +1,51 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/lang.'object;\n+\n+int startCount = 0;\n+int attachCount = 0;\n+\n+public function getStartAndAttachCount() returns string {\n+    return attachCount.toString() + \"_\" + startCount.toString();\n+}\n+\n+public type ABCD object {\n+\n+    *'object:Listener;\n+\n+    public function __init() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA0ODI5MQ=="}, "originalCommit": {"oid": "685ac386232232c2b67720fa95b17c530ba07147"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTUwMjM4OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/listener/ListenerBaloTestExtPackage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMzo1ODozM1rOFlrJjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMzo1ODozM1rOFlrJjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA0ODU5MA==", "bodyText": "Can't we move the assertion logic to Ballerina?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r375048590", "createdAt": "2020-02-05T03:58:33Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/listener/ListenerBaloTestExtPackage.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+*  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package org.ballerinalang.test.balo.listener;\n+\n+import org.ballerinalang.model.values.BValue;\n+import org.ballerinalang.test.balo.BaloCreator;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test cases for access listener from another project.\n+ */\n+public class ListenerBaloTestExtPackage {\n+\n+    private CompileResult compileResult;\n+\n+    @BeforeClass\n+    public void setup() {\n+        BaloCreator.createAndSetupBalo(\"test-src/balo/test_projects/test_listener\", \"listenerProject\", \"ext\");\n+        compileResult = BCompileUtil.compile(\"test-src/balo/test_balo/listener/external_packaged_listener_access.bal\");\n+    }\n+\n+    @Test(description = \"Test access listener in different package\")\n+    public void testObjectAsListernerDefinedInDifferentPackage() {\n+        final BValue[] result = BRunUtil.invoke(compileResult, \"getStartAndAttachCount\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "685ac386232232c2b67720fa95b17c530ba07147"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTUxMDM3OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNDowNToyMFrOFlrOYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNDowNToyMFrOFlrOYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA0OTgyNA==", "bodyText": "Shouldn't the error be\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    BAssertUtil.validateError(result, 0, \"incompatible types: expected 'Listener', found 'other'\", 17, 14);\n          \n          \n            \n                    BAssertUtil.validateError(result, 0, \"incompatible types: expected 'lang.object:Listener', found 'other'\", 17, 14);\n          \n      \n    \n    \n  \n\ninstead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r375049824", "createdAt": "2020-02-05T04:05:20Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java", "diffHunk": "@@ -112,4 +112,32 @@ public void testTokenRecognition() {\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '\\\\'\", 3, 5);\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '*'\", 4, 15);\n     }\n+\n+    @Test\n+    public void testListenerDeclarationWithoutType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-without-type-negative.bal\");\n+        BAssertUtil.validateError(result, 0, \"incompatible types: expected 'Listener', found 'other'\", 17, 14);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "685ac386232232c2b67720fa95b17c530ba07147"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTUxMDg1OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNDowNTo1MVrOFlrOtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNDowNTo1MVrOFlrOtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA0OTkwOA==", "bodyText": "Can't we move all of these negative cases to a single bal file instead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r375049908", "createdAt": "2020-02-05T04:05:51Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java", "diffHunk": "@@ -112,4 +112,32 @@ public void testTokenRecognition() {\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '\\\\'\", 3, 5);\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '*'\", 4, 15);\n     }\n+\n+    @Test\n+    public void testListenerDeclarationWithoutType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-without-type-negative.bal\");\n+        BAssertUtil.validateError(result, 0, \"incompatible types: expected 'Listener', found 'other'\", 17, 14);\n+    }\n+\n+    @Test\n+    public void testListenerDeclarationWithInvalidType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-invalid-type-negative.bal\");\n+        BAssertUtil.validateError(result, 0, \"incompatible types: expected 'Listener', found 'int'\", 17, 14);\n+    }\n+\n+    @Test\n+    public void testListenerDeclarationWithObjectType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-object-type-negative.bal\");\n+        BAssertUtil.validateError(result, 0, \"incompatible types: expected 'Listener', found 'Person'\", 18, 14);\n+    }\n+\n+    @Test\n+    public void testListenerDeclarationWithDefinedDifferentType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-type-reuse-negative.bal\");\n+        BAssertUtil.validateError(result, 0, \"incompatible types: expected 'ballerina/http:MockListener', found \" +\n+                \"'int'\", 22, 9);\n+        BAssertUtil.validateError(result, 1, \"incompatible types: expected 'int', found \" +\n+                \"'ballerina/http:MockListener'\", 23, 9);\n+\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "685ac386232232c2b67720fa95b17c530ba07147"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzgzNjMyOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/listener/ListenerBaloTestExtPackage.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwOTo0MDo0OVrOFmUs5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMjowMzozNlrOFmYxQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcyOTM4MQ==", "bodyText": "How about\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testObjectAsListernerDefinedInDifferentPackage() {\n          \n          \n            \n                public void testListenerObjectDefinedInDifferentPackage() {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r375729381", "createdAt": "2020-02-06T09:40:49Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/listener/ListenerBaloTestExtPackage.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+*  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package org.ballerinalang.test.balo.listener;\n+\n+import org.ballerinalang.test.balo.BaloCreator;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test cases for access listener from another project.\n+ */\n+public class ListenerBaloTestExtPackage {\n+\n+    private CompileResult compileResult;\n+\n+    @BeforeClass\n+    public void setup() {\n+        BaloCreator.createAndSetupBalo(\"test-src/balo/test_projects/test_listener\", \"listenerProject\", \"ext\");\n+        compileResult = BCompileUtil.compile(\"test-src/balo/test_balo/listener/external_packaged_listener_access.bal\");\n+    }\n+\n+    @Test(description = \"Test access listener in different package\")\n+    public void testObjectAsListernerDefinedInDifferentPackage() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccedbeebd2e6cd74ce6253b02660efb58eea3d83"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc5NjAzNQ==", "bodyText": "done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r375796035", "createdAt": "2020-02-06T12:03:36Z", "author": {"login": "KRVPerera"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/listener/ListenerBaloTestExtPackage.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+*  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package org.ballerinalang.test.balo.listener;\n+\n+import org.ballerinalang.test.balo.BaloCreator;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test cases for access listener from another project.\n+ */\n+public class ListenerBaloTestExtPackage {\n+\n+    private CompileResult compileResult;\n+\n+    @BeforeClass\n+    public void setup() {\n+        BaloCreator.createAndSetupBalo(\"test-src/balo/test_projects/test_listener\", \"listenerProject\", \"ext\");\n+        compileResult = BCompileUtil.compile(\"test-src/balo/test_balo/listener/external_packaged_listener_access.bal\");\n+    }\n+\n+    @Test(description = \"Test access listener in different package\")\n+    public void testObjectAsListernerDefinedInDifferentPackage() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcyOTM4MQ=="}, "originalCommit": {"oid": "ccedbeebd2e6cd74ce6253b02660efb58eea3d83"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzg0NDY1OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwOTo0MzoyN1rOFmUx7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMjowMzo0NFrOFmYxeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTczMDY2OA==", "bodyText": "We usually use - in module names and _ in bal file names.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r375730668", "createdAt": "2020-02-06T09:43:27Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java", "diffHunk": "@@ -112,4 +112,19 @@ public void testTokenRecognition() {\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '\\\\'\", 3, 5);\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '*'\", 4, 15);\n     }\n+\n+    @Test\n+    public void testListenerDeclarationWithDefinedDifferentType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-type-reuse-negative.bal\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccedbeebd2e6cd74ce6253b02660efb58eea3d83"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc5NjA5MA==", "bodyText": "done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20717#discussion_r375796090", "createdAt": "2020-02-06T12:03:44Z", "author": {"login": "KRVPerera"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/parser/InvalidSyntaxParserTest.java", "diffHunk": "@@ -112,4 +112,19 @@ public void testTokenRecognition() {\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '\\\\'\", 3, 5);\n         BAssertUtil.validateError(result, 0, \"token recognition error at: '*'\", 4, 15);\n     }\n+\n+    @Test\n+    public void testListenerDeclarationWithDefinedDifferentType() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/parser/listener-declaration-type-reuse-negative.bal\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTczMDY2OA=="}, "originalCommit": {"oid": "ccedbeebd2e6cd74ce6253b02660efb58eea3d83"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 560, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}