{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNzc0MjQ4", "number": 24037, "reviewThreads": {"totalCount": 100, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozMToxNFrOEFI0Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwNTo0NTo1MlrOEFO97Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODIyNzc5OnYy", "diffSide": "RIGHT", "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozMToxNFrOGjMMbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozMToxNFrOGjMMbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1MzEzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            **Prerequisite:** Please add the JDBC driver corresponding to the database you are trying to interact with, \n          \n          \n            \n            **Prerequisite:** Add the JDBC driver corresponding to the database you are trying to interact with\n          \n      \n    \n    \n  \n\nThe best practice is to avoid using \"please\" in technical documentation.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439553132", "createdAt": "2020-06-12T17:31:14Z", "author": {"login": "praneesha"}, "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "diffHunk": "@@ -0,0 +1,93 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in any type of relational database \n+that is accessible via Java Database Connectivity (JDBC). \n+\n+**Prerequisite:** Please add the JDBC driver corresponding to the database you are trying to interact with, ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODIyOTAxOnYy", "diffSide": "RIGHT", "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozMTo0NVrOGjMNQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozMTo0NVrOGjMNQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1MzM0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            as a native library dependency in your Ballerina project. Then, once you build the project with `ballerina build`\n          \n          \n            \n            as a native library dependency in your Ballerina project. Then, once you build the project with the `ballerina build`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439553347", "createdAt": "2020-06-12T17:31:45Z", "author": {"login": "praneesha"}, "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "diffHunk": "@@ -0,0 +1,93 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in any type of relational database \n+that is accessible via Java Database Connectivity (JDBC). \n+\n+**Prerequisite:** Please add the JDBC driver corresponding to the database you are trying to interact with, \n+as a native library dependency in your Ballerina project. Then, once you build the project with `ballerina build`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODIyOTYyOnYy", "diffSide": "RIGHT", "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozMTo1N1rOGjMNpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozMTo1N1rOGjMNpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1MzQ0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            command, you should be able to run the resultant jar with, the `java -jar` command.\n          \n          \n            \n            command, you should be able to run the resultant JAR by executing the `java -jar` command.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439553444", "createdAt": "2020-06-12T17:31:57Z", "author": {"login": "praneesha"}, "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "diffHunk": "@@ -0,0 +1,93 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in any type of relational database \n+that is accessible via Java Database Connectivity (JDBC). \n+\n+**Prerequisite:** Please add the JDBC driver corresponding to the database you are trying to interact with, \n+as a native library dependency in your Ballerina project. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODIzMDk2OnYy", "diffSide": "RIGHT", "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozMjoyNlrOGjMOjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozMjoyNlrOGjMOjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1MzY3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            e.g. Ballerina.toml content.\n          \n          \n            \n            E.g., The `Ballerina.toml` content.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439553677", "createdAt": "2020-06-12T17:32:26Z", "author": {"login": "praneesha"}, "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "diffHunk": "@@ -0,0 +1,93 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in any type of relational database \n+that is accessible via Java Database Connectivity (JDBC). \n+\n+**Prerequisite:** Please add the JDBC driver corresponding to the database you are trying to interact with, \n+as a native library dependency in your Ballerina project. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.\n+\n+e.g. Ballerina.toml content.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODIzMTUwOnYy", "diffSide": "RIGHT", "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozMjozN1rOGjMO7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozMjozN1rOGjMO7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1Mzc3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Please change the path to the JDBC driver appropriately.\n          \n          \n            \n            Change the path to the JDBC driver appropriately.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439553772", "createdAt": "2020-06-12T17:32:37Z", "author": {"login": "praneesha"}, "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "diffHunk": "@@ -0,0 +1,93 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in any type of relational database \n+that is accessible via Java Database Connectivity (JDBC). \n+\n+**Prerequisite:** Please add the JDBC driver corresponding to the database you are trying to interact with, \n+as a native library dependency in your Ballerina project. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.\n+\n+e.g. Ballerina.toml content.\n+Please change the path to the JDBC driver appropriately.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODIzMjk4OnYy", "diffSide": "RIGHT", "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozMzowNFrOGjMP0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozMzowNFrOGjMP0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NDAwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Or, if you're trying to run a single bal file, you can copy the JDBC driver into `${BALLERINA_HOME}/bre/lib` and \n          \n          \n            \n            Else, if you're trying to run a single BAL file, you can copy the JDBC driver into the `${BALLERINA_HOME}/bre/lib` directory and", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439554002", "createdAt": "2020-06-12T17:33:04Z", "author": {"login": "praneesha"}, "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "diffHunk": "@@ -0,0 +1,93 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in any type of relational database \n+that is accessible via Java Database Connectivity (JDBC). \n+\n+**Prerequisite:** Please add the JDBC driver corresponding to the database you are trying to interact with, \n+as a native library dependency in your Ballerina project. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.\n+\n+e.g. Ballerina.toml content.\n+Please change the path to the JDBC driver appropriately.\n+\n+```toml\n+[project]\n+org-name= \"sample\"\n+version= \"0.1.0\"\n+\n+[platform]\n+target = \"java8\"\n+\n+    [[platform.libraries]]\n+    artafactId = \"h2\"\n+    version = \"1.4.200\"\n+    path = \"/path/to/com.h2database.h2-1.4.200.jar\"\n+    groupId = \"com.h2database\"\n+    modules = [\"samplemodule\"]\n+``` \n+\n+Or, if you're trying to run a single bal file, you can copy the JDBC driver into `${BALLERINA_HOME}/bre/lib` and ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODIzMzYyOnYy", "diffSide": "RIGHT", "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozMzoxOVrOGjMQPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozMzoxOVrOGjMQPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NDExMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            run the bal file with `ballerina run` command.\n          \n          \n            \n            run the BAL file by executing the `ballerina run` command.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439554111", "createdAt": "2020-06-12T17:33:19Z", "author": {"login": "praneesha"}, "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "diffHunk": "@@ -0,0 +1,93 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in any type of relational database \n+that is accessible via Java Database Connectivity (JDBC). \n+\n+**Prerequisite:** Please add the JDBC driver corresponding to the database you are trying to interact with, \n+as a native library dependency in your Ballerina project. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.\n+\n+e.g. Ballerina.toml content.\n+Please change the path to the JDBC driver appropriately.\n+\n+```toml\n+[project]\n+org-name= \"sample\"\n+version= \"0.1.0\"\n+\n+[platform]\n+target = \"java8\"\n+\n+    [[platform.libraries]]\n+    artafactId = \"h2\"\n+    version = \"1.4.200\"\n+    path = \"/path/to/com.h2database.h2-1.4.200.jar\"\n+    groupId = \"com.h2database\"\n+    modules = [\"samplemodule\"]\n+``` \n+\n+Or, if you're trying to run a single bal file, you can copy the JDBC driver into `${BALLERINA_HOME}/bre/lib` and \n+run the bal file with `ballerina run` command.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODIzNDQ1OnYy", "diffSide": "RIGHT", "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozMzozNlrOGjMQwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozMzozNlrOGjMQwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NDI0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This example shows different ways of creating the `jdbc:Client`. The client can be created by passing \n          \n          \n            \n            This example shows the different ways of creating the `jdbc:Client`. The client can be created by passing", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439554240", "createdAt": "2020-06-12T17:33:36Z", "author": {"login": "praneesha"}, "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "diffHunk": "@@ -0,0 +1,93 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in any type of relational database \n+that is accessible via Java Database Connectivity (JDBC). \n+\n+**Prerequisite:** Please add the JDBC driver corresponding to the database you are trying to interact with, \n+as a native library dependency in your Ballerina project. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.\n+\n+e.g. Ballerina.toml content.\n+Please change the path to the JDBC driver appropriately.\n+\n+```toml\n+[project]\n+org-name= \"sample\"\n+version= \"0.1.0\"\n+\n+[platform]\n+target = \"java8\"\n+\n+    [[platform.libraries]]\n+    artafactId = \"h2\"\n+    version = \"1.4.200\"\n+    path = \"/path/to/com.h2database.h2-1.4.200.jar\"\n+    groupId = \"com.h2database\"\n+    modules = [\"samplemodule\"]\n+``` \n+\n+Or, if you're trying to run a single bal file, you can copy the JDBC driver into `${BALLERINA_HOME}/bre/lib` and \n+run the bal file with `ballerina run` command.\n+\n+### Client\n+To access a database, you must first create a \n+[jdbc:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/clients/Client.html) object. \n+The examples for creating a JDBC client can be found below.\n+\n+#### Creating a client\n+This example shows different ways of creating the `jdbc:Client`. The client can be created by passing ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODIzNTE4OnYy", "diffSide": "RIGHT", "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozMzo1M1rOGjMRRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozMzo1M1rOGjMRRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NDM3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            JDBC URL which is an mandatory property, and all other fields are optional. \n          \n          \n            \n            the JDBC URL, which is a mandatory property and all other fields are optional.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439554375", "createdAt": "2020-06-12T17:33:53Z", "author": {"login": "praneesha"}, "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "diffHunk": "@@ -0,0 +1,93 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in any type of relational database \n+that is accessible via Java Database Connectivity (JDBC). \n+\n+**Prerequisite:** Please add the JDBC driver corresponding to the database you are trying to interact with, \n+as a native library dependency in your Ballerina project. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.\n+\n+e.g. Ballerina.toml content.\n+Please change the path to the JDBC driver appropriately.\n+\n+```toml\n+[project]\n+org-name= \"sample\"\n+version= \"0.1.0\"\n+\n+[platform]\n+target = \"java8\"\n+\n+    [[platform.libraries]]\n+    artafactId = \"h2\"\n+    version = \"1.4.200\"\n+    path = \"/path/to/com.h2database.h2-1.4.200.jar\"\n+    groupId = \"com.h2database\"\n+    modules = [\"samplemodule\"]\n+``` \n+\n+Or, if you're trying to run a single bal file, you can copy the JDBC driver into `${BALLERINA_HOME}/bre/lib` and \n+run the bal file with `ballerina run` command.\n+\n+### Client\n+To access a database, you must first create a \n+[jdbc:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/clients/Client.html) object. \n+The examples for creating a JDBC client can be found below.\n+\n+#### Creating a client\n+This example shows different ways of creating the `jdbc:Client`. The client can be created by passing \n+JDBC URL which is an mandatory property, and all other fields are optional. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODIzNjI5OnYy", "diffSide": "RIGHT", "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozNDoxNlrOGjMR-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozNDoxNlrOGjMR-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NDU1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `dbClient1` receives only database URL, and the `dbClient2` receives user and password in addition to URL. \n          \n          \n            \n            The `dbClient1` receives only the database URL and the `dbClient2` receives the username and password in addition to the URL.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439554554", "createdAt": "2020-06-12T17:34:16Z", "author": {"login": "praneesha"}, "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "diffHunk": "@@ -0,0 +1,93 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in any type of relational database \n+that is accessible via Java Database Connectivity (JDBC). \n+\n+**Prerequisite:** Please add the JDBC driver corresponding to the database you are trying to interact with, \n+as a native library dependency in your Ballerina project. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.\n+\n+e.g. Ballerina.toml content.\n+Please change the path to the JDBC driver appropriately.\n+\n+```toml\n+[project]\n+org-name= \"sample\"\n+version= \"0.1.0\"\n+\n+[platform]\n+target = \"java8\"\n+\n+    [[platform.libraries]]\n+    artafactId = \"h2\"\n+    version = \"1.4.200\"\n+    path = \"/path/to/com.h2database.h2-1.4.200.jar\"\n+    groupId = \"com.h2database\"\n+    modules = [\"samplemodule\"]\n+``` \n+\n+Or, if you're trying to run a single bal file, you can copy the JDBC driver into `${BALLERINA_HOME}/bre/lib` and \n+run the bal file with `ballerina run` command.\n+\n+### Client\n+To access a database, you must first create a \n+[jdbc:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/clients/Client.html) object. \n+The examples for creating a JDBC client can be found below.\n+\n+#### Creating a client\n+This example shows different ways of creating the `jdbc:Client`. The client can be created by passing \n+JDBC URL which is an mandatory property, and all other fields are optional. \n+\n+The `dbClient1` receives only database URL, and the `dbClient2` receives user and password in addition to URL. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODIzNjc3OnYy", "diffSide": "RIGHT", "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozNDoyNlrOGjMSUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozNDoyNlrOGjMSUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NDY0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If the properties are passed in the same order as it is defined in the `jdbc:Client` you can pass it \n          \n          \n            \n            If the properties are passed in the same order as it is defined in the `jdbc:Client`, you can pass it", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439554640", "createdAt": "2020-06-12T17:34:26Z", "author": {"login": "praneesha"}, "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "diffHunk": "@@ -0,0 +1,93 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in any type of relational database \n+that is accessible via Java Database Connectivity (JDBC). \n+\n+**Prerequisite:** Please add the JDBC driver corresponding to the database you are trying to interact with, \n+as a native library dependency in your Ballerina project. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.\n+\n+e.g. Ballerina.toml content.\n+Please change the path to the JDBC driver appropriately.\n+\n+```toml\n+[project]\n+org-name= \"sample\"\n+version= \"0.1.0\"\n+\n+[platform]\n+target = \"java8\"\n+\n+    [[platform.libraries]]\n+    artafactId = \"h2\"\n+    version = \"1.4.200\"\n+    path = \"/path/to/com.h2database.h2-1.4.200.jar\"\n+    groupId = \"com.h2database\"\n+    modules = [\"samplemodule\"]\n+``` \n+\n+Or, if you're trying to run a single bal file, you can copy the JDBC driver into `${BALLERINA_HOME}/bre/lib` and \n+run the bal file with `ballerina run` command.\n+\n+### Client\n+To access a database, you must first create a \n+[jdbc:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/clients/Client.html) object. \n+The examples for creating a JDBC client can be found below.\n+\n+#### Creating a client\n+This example shows different ways of creating the `jdbc:Client`. The client can be created by passing \n+JDBC URL which is an mandatory property, and all other fields are optional. \n+\n+The `dbClient1` receives only database URL, and the `dbClient2` receives user and password in addition to URL. \n+If the properties are passed in the same order as it is defined in the `jdbc:Client` you can pass it ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODIzNzYxOnYy", "diffSide": "RIGHT", "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozNDo0M1rOGjMSzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozNDo0M1rOGjMSzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NDc2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `dbClient3` uses the named params to pass all the attributes, and provides `options` property in the type of \n          \n          \n            \n            The `dbClient3` uses the named params to pass all the attributes and provides the `options` property in the type of", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439554764", "createdAt": "2020-06-12T17:34:43Z", "author": {"login": "praneesha"}, "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "diffHunk": "@@ -0,0 +1,93 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in any type of relational database \n+that is accessible via Java Database Connectivity (JDBC). \n+\n+**Prerequisite:** Please add the JDBC driver corresponding to the database you are trying to interact with, \n+as a native library dependency in your Ballerina project. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.\n+\n+e.g. Ballerina.toml content.\n+Please change the path to the JDBC driver appropriately.\n+\n+```toml\n+[project]\n+org-name= \"sample\"\n+version= \"0.1.0\"\n+\n+[platform]\n+target = \"java8\"\n+\n+    [[platform.libraries]]\n+    artafactId = \"h2\"\n+    version = \"1.4.200\"\n+    path = \"/path/to/com.h2database.h2-1.4.200.jar\"\n+    groupId = \"com.h2database\"\n+    modules = [\"samplemodule\"]\n+``` \n+\n+Or, if you're trying to run a single bal file, you can copy the JDBC driver into `${BALLERINA_HOME}/bre/lib` and \n+run the bal file with `ballerina run` command.\n+\n+### Client\n+To access a database, you must first create a \n+[jdbc:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/clients/Client.html) object. \n+The examples for creating a JDBC client can be found below.\n+\n+#### Creating a client\n+This example shows different ways of creating the `jdbc:Client`. The client can be created by passing \n+JDBC URL which is an mandatory property, and all other fields are optional. \n+\n+The `dbClient1` receives only database URL, and the `dbClient2` receives user and password in addition to URL. \n+If the properties are passed in the same order as it is defined in the `jdbc:Client` you can pass it \n+without named params.\n+\n+The `dbClient3` uses the named params to pass all the attributes, and provides `options` property in the type of ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI0MDA1OnYy", "diffSide": "RIGHT", "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozNTozNlrOGjMUXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozNTozNlrOGjMUXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NTE2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Please refer [SQL Module](https://ballerina.io/learn/api-docs/ballerina/sql/index.html) to get more details \n          \n          \n            \n            For more information about connection pooling, see [SQL Module](https://ballerina.io/learn/api-docs/ballerina/sql/index.html).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439555167", "createdAt": "2020-06-12T17:35:36Z", "author": {"login": "praneesha"}, "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "diffHunk": "@@ -0,0 +1,93 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in any type of relational database \n+that is accessible via Java Database Connectivity (JDBC). \n+\n+**Prerequisite:** Please add the JDBC driver corresponding to the database you are trying to interact with, \n+as a native library dependency in your Ballerina project. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.\n+\n+e.g. Ballerina.toml content.\n+Please change the path to the JDBC driver appropriately.\n+\n+```toml\n+[project]\n+org-name= \"sample\"\n+version= \"0.1.0\"\n+\n+[platform]\n+target = \"java8\"\n+\n+    [[platform.libraries]]\n+    artafactId = \"h2\"\n+    version = \"1.4.200\"\n+    path = \"/path/to/com.h2database.h2-1.4.200.jar\"\n+    groupId = \"com.h2database\"\n+    modules = [\"samplemodule\"]\n+``` \n+\n+Or, if you're trying to run a single bal file, you can copy the JDBC driver into `${BALLERINA_HOME}/bre/lib` and \n+run the bal file with `ballerina run` command.\n+\n+### Client\n+To access a database, you must first create a \n+[jdbc:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/clients/Client.html) object. \n+The examples for creating a JDBC client can be found below.\n+\n+#### Creating a client\n+This example shows different ways of creating the `jdbc:Client`. The client can be created by passing \n+JDBC URL which is an mandatory property, and all other fields are optional. \n+\n+The `dbClient1` receives only database URL, and the `dbClient2` receives user and password in addition to URL. \n+If the properties are passed in the same order as it is defined in the `jdbc:Client` you can pass it \n+without named params.\n+\n+The `dbClient3` uses the named params to pass all the attributes, and provides `options` property in the type of \n+[jdbc:Options](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/records/Options.html) \n+and also uses the unshared connection pool in the type of \n+[sql:ConnectionPool](https://ballerina.io/learn/api-docs/ballerina/api-docs/sql/records/ConnectionPool.html). \n+Please refer [SQL Module](https://ballerina.io/learn/api-docs/ballerina/sql/index.html) to get more details ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI0MDcxOnYy", "diffSide": "RIGHT", "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozNTo1MVrOGjMU3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozNTo1MVrOGjMU3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NTI5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            about connection pooling.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439555292", "createdAt": "2020-06-12T17:35:51Z", "author": {"login": "praneesha"}, "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "diffHunk": "@@ -0,0 +1,93 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in any type of relational database \n+that is accessible via Java Database Connectivity (JDBC). \n+\n+**Prerequisite:** Please add the JDBC driver corresponding to the database you are trying to interact with, \n+as a native library dependency in your Ballerina project. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.\n+\n+e.g. Ballerina.toml content.\n+Please change the path to the JDBC driver appropriately.\n+\n+```toml\n+[project]\n+org-name= \"sample\"\n+version= \"0.1.0\"\n+\n+[platform]\n+target = \"java8\"\n+\n+    [[platform.libraries]]\n+    artafactId = \"h2\"\n+    version = \"1.4.200\"\n+    path = \"/path/to/com.h2database.h2-1.4.200.jar\"\n+    groupId = \"com.h2database\"\n+    modules = [\"samplemodule\"]\n+``` \n+\n+Or, if you're trying to run a single bal file, you can copy the JDBC driver into `${BALLERINA_HOME}/bre/lib` and \n+run the bal file with `ballerina run` command.\n+\n+### Client\n+To access a database, you must first create a \n+[jdbc:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/clients/Client.html) object. \n+The examples for creating a JDBC client can be found below.\n+\n+#### Creating a client\n+This example shows different ways of creating the `jdbc:Client`. The client can be created by passing \n+JDBC URL which is an mandatory property, and all other fields are optional. \n+\n+The `dbClient1` receives only database URL, and the `dbClient2` receives user and password in addition to URL. \n+If the properties are passed in the same order as it is defined in the `jdbc:Client` you can pass it \n+without named params.\n+\n+The `dbClient3` uses the named params to pass all the attributes, and provides `options` property in the type of \n+[jdbc:Options](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/records/Options.html) \n+and also uses the unshared connection pool in the type of \n+[sql:ConnectionPool](https://ballerina.io/learn/api-docs/ballerina/api-docs/sql/records/ConnectionPool.html). \n+Please refer [SQL Module](https://ballerina.io/learn/api-docs/ballerina/sql/index.html) to get more details \n+about connection pooling.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI0MTMyOnYy", "diffSide": "RIGHT", "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozNjowMVrOGjMVPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozNjowMVrOGjMVPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NTM5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [jdbc:Options](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/records/Options.html), \n          \n          \n            \n            [jdbc:Options](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/records/Options.html)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439555391", "createdAt": "2020-06-12T17:36:01Z", "author": {"login": "praneesha"}, "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "diffHunk": "@@ -0,0 +1,93 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in any type of relational database \n+that is accessible via Java Database Connectivity (JDBC). \n+\n+**Prerequisite:** Please add the JDBC driver corresponding to the database you are trying to interact with, \n+as a native library dependency in your Ballerina project. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.\n+\n+e.g. Ballerina.toml content.\n+Please change the path to the JDBC driver appropriately.\n+\n+```toml\n+[project]\n+org-name= \"sample\"\n+version= \"0.1.0\"\n+\n+[platform]\n+target = \"java8\"\n+\n+    [[platform.libraries]]\n+    artafactId = \"h2\"\n+    version = \"1.4.200\"\n+    path = \"/path/to/com.h2database.h2-1.4.200.jar\"\n+    groupId = \"com.h2database\"\n+    modules = [\"samplemodule\"]\n+``` \n+\n+Or, if you're trying to run a single bal file, you can copy the JDBC driver into `${BALLERINA_HOME}/bre/lib` and \n+run the bal file with `ballerina run` command.\n+\n+### Client\n+To access a database, you must first create a \n+[jdbc:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/clients/Client.html) object. \n+The examples for creating a JDBC client can be found below.\n+\n+#### Creating a client\n+This example shows different ways of creating the `jdbc:Client`. The client can be created by passing \n+JDBC URL which is an mandatory property, and all other fields are optional. \n+\n+The `dbClient1` receives only database URL, and the `dbClient2` receives user and password in addition to URL. \n+If the properties are passed in the same order as it is defined in the `jdbc:Client` you can pass it \n+without named params.\n+\n+The `dbClient3` uses the named params to pass all the attributes, and provides `options` property in the type of \n+[jdbc:Options](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/records/Options.html) \n+and also uses the unshared connection pool in the type of \n+[sql:ConnectionPool](https://ballerina.io/learn/api-docs/ballerina/api-docs/sql/records/ConnectionPool.html). \n+Please refer [SQL Module](https://ballerina.io/learn/api-docs/ballerina/sql/index.html) to get more details \n+about connection pooling.\n+\n+The `dbClient4` receives some custom properties within the \n+[jdbc:Options](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/records/Options.html), ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI0MjE0OnYy", "diffSide": "RIGHT", "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozNjoxNVrOGjMVvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozNjoxNVrOGjMVvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NTUxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            and those properties will be used by the `datasourceName` defined. \n          \n          \n            \n            and those properties will be used by the defined `datasourceName`.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439555516", "createdAt": "2020-06-12T17:36:15Z", "author": {"login": "praneesha"}, "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "diffHunk": "@@ -0,0 +1,93 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in any type of relational database \n+that is accessible via Java Database Connectivity (JDBC). \n+\n+**Prerequisite:** Please add the JDBC driver corresponding to the database you are trying to interact with, \n+as a native library dependency in your Ballerina project. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.\n+\n+e.g. Ballerina.toml content.\n+Please change the path to the JDBC driver appropriately.\n+\n+```toml\n+[project]\n+org-name= \"sample\"\n+version= \"0.1.0\"\n+\n+[platform]\n+target = \"java8\"\n+\n+    [[platform.libraries]]\n+    artafactId = \"h2\"\n+    version = \"1.4.200\"\n+    path = \"/path/to/com.h2database.h2-1.4.200.jar\"\n+    groupId = \"com.h2database\"\n+    modules = [\"samplemodule\"]\n+``` \n+\n+Or, if you're trying to run a single bal file, you can copy the JDBC driver into `${BALLERINA_HOME}/bre/lib` and \n+run the bal file with `ballerina run` command.\n+\n+### Client\n+To access a database, you must first create a \n+[jdbc:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/clients/Client.html) object. \n+The examples for creating a JDBC client can be found below.\n+\n+#### Creating a client\n+This example shows different ways of creating the `jdbc:Client`. The client can be created by passing \n+JDBC URL which is an mandatory property, and all other fields are optional. \n+\n+The `dbClient1` receives only database URL, and the `dbClient2` receives user and password in addition to URL. \n+If the properties are passed in the same order as it is defined in the `jdbc:Client` you can pass it \n+without named params.\n+\n+The `dbClient3` uses the named params to pass all the attributes, and provides `options` property in the type of \n+[jdbc:Options](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/records/Options.html) \n+and also uses the unshared connection pool in the type of \n+[sql:ConnectionPool](https://ballerina.io/learn/api-docs/ballerina/api-docs/sql/records/ConnectionPool.html). \n+Please refer [SQL Module](https://ballerina.io/learn/api-docs/ballerina/sql/index.html) to get more details \n+about connection pooling.\n+\n+The `dbClient4` receives some custom properties within the \n+[jdbc:Options](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/records/Options.html), \n+and those properties will be used by the `datasourceName` defined. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI0Mjk1OnYy", "diffSide": "RIGHT", "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozNjozM1rOGjMWRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozNjozM1rOGjMWRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NTY1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            As per the provided example, the datasource `org.h2.jdbcx.JdbcDataSource` will be configured with `loginTimeout` \n          \n          \n            \n            As per the provided example, the `org.h2.jdbcx.JdbcDataSource` datasource  will be configured with a `loginTimeout`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439555652", "createdAt": "2020-06-12T17:36:33Z", "author": {"login": "praneesha"}, "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "diffHunk": "@@ -0,0 +1,93 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in any type of relational database \n+that is accessible via Java Database Connectivity (JDBC). \n+\n+**Prerequisite:** Please add the JDBC driver corresponding to the database you are trying to interact with, \n+as a native library dependency in your Ballerina project. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.\n+\n+e.g. Ballerina.toml content.\n+Please change the path to the JDBC driver appropriately.\n+\n+```toml\n+[project]\n+org-name= \"sample\"\n+version= \"0.1.0\"\n+\n+[platform]\n+target = \"java8\"\n+\n+    [[platform.libraries]]\n+    artafactId = \"h2\"\n+    version = \"1.4.200\"\n+    path = \"/path/to/com.h2database.h2-1.4.200.jar\"\n+    groupId = \"com.h2database\"\n+    modules = [\"samplemodule\"]\n+``` \n+\n+Or, if you're trying to run a single bal file, you can copy the JDBC driver into `${BALLERINA_HOME}/bre/lib` and \n+run the bal file with `ballerina run` command.\n+\n+### Client\n+To access a database, you must first create a \n+[jdbc:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/clients/Client.html) object. \n+The examples for creating a JDBC client can be found below.\n+\n+#### Creating a client\n+This example shows different ways of creating the `jdbc:Client`. The client can be created by passing \n+JDBC URL which is an mandatory property, and all other fields are optional. \n+\n+The `dbClient1` receives only database URL, and the `dbClient2` receives user and password in addition to URL. \n+If the properties are passed in the same order as it is defined in the `jdbc:Client` you can pass it \n+without named params.\n+\n+The `dbClient3` uses the named params to pass all the attributes, and provides `options` property in the type of \n+[jdbc:Options](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/records/Options.html) \n+and also uses the unshared connection pool in the type of \n+[sql:ConnectionPool](https://ballerina.io/learn/api-docs/ballerina/api-docs/sql/records/ConnectionPool.html). \n+Please refer [SQL Module](https://ballerina.io/learn/api-docs/ballerina/sql/index.html) to get more details \n+about connection pooling.\n+\n+The `dbClient4` receives some custom properties within the \n+[jdbc:Options](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/records/Options.html), \n+and those properties will be used by the `datasourceName` defined. \n+As per the provided example, the datasource `org.h2.jdbcx.JdbcDataSource` will be configured with `loginTimeout` ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI0MzUyOnYy", "diffSide": "RIGHT", "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozNjo0NFrOGjMWpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozNjo0NFrOGjMWpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NTc0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You can find more details about each property in \n          \n          \n            \n            You can find more details about each property in the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439555749", "createdAt": "2020-06-12T17:36:44Z", "author": {"login": "praneesha"}, "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "diffHunk": "@@ -0,0 +1,93 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in any type of relational database \n+that is accessible via Java Database Connectivity (JDBC). \n+\n+**Prerequisite:** Please add the JDBC driver corresponding to the database you are trying to interact with, \n+as a native library dependency in your Ballerina project. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.\n+\n+e.g. Ballerina.toml content.\n+Please change the path to the JDBC driver appropriately.\n+\n+```toml\n+[project]\n+org-name= \"sample\"\n+version= \"0.1.0\"\n+\n+[platform]\n+target = \"java8\"\n+\n+    [[platform.libraries]]\n+    artafactId = \"h2\"\n+    version = \"1.4.200\"\n+    path = \"/path/to/com.h2database.h2-1.4.200.jar\"\n+    groupId = \"com.h2database\"\n+    modules = [\"samplemodule\"]\n+``` \n+\n+Or, if you're trying to run a single bal file, you can copy the JDBC driver into `${BALLERINA_HOME}/bre/lib` and \n+run the bal file with `ballerina run` command.\n+\n+### Client\n+To access a database, you must first create a \n+[jdbc:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/clients/Client.html) object. \n+The examples for creating a JDBC client can be found below.\n+\n+#### Creating a client\n+This example shows different ways of creating the `jdbc:Client`. The client can be created by passing \n+JDBC URL which is an mandatory property, and all other fields are optional. \n+\n+The `dbClient1` receives only database URL, and the `dbClient2` receives user and password in addition to URL. \n+If the properties are passed in the same order as it is defined in the `jdbc:Client` you can pass it \n+without named params.\n+\n+The `dbClient3` uses the named params to pass all the attributes, and provides `options` property in the type of \n+[jdbc:Options](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/records/Options.html) \n+and also uses the unshared connection pool in the type of \n+[sql:ConnectionPool](https://ballerina.io/learn/api-docs/ballerina/api-docs/sql/records/ConnectionPool.html). \n+Please refer [SQL Module](https://ballerina.io/learn/api-docs/ballerina/sql/index.html) to get more details \n+about connection pooling.\n+\n+The `dbClient4` receives some custom properties within the \n+[jdbc:Options](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/records/Options.html), \n+and those properties will be used by the `datasourceName` defined. \n+As per the provided example, the datasource `org.h2.jdbcx.JdbcDataSource` will be configured with `loginTimeout` \n+of `2000` milli seconds.\n+\n+```ballerina\n+jdbc:Client dbClient1 = new (\"jdbc:h2:~/path/to/database\");\n+jdbc:Client dbClient2 = new (\"jdbc:h2:~/path/to/database\", \"root\", \"root\");\n+jdbc:Client dbClient3 = new (url =  \"jdbc:h2:~/path/to/database\",\n+                             user = \"root\", password = \"root\",\n+                             options = {\n+                                 datasourceName: \"org.h2.jdbcx.JdbcDataSource\"\n+                             },\n+                             connectionPool = {\n+                                 maxOpenConnections: 5\n+                             });\n+jdbc:Client dbClient4 = new (url =  \"jdbc:h2:~/path/to/database\", \n+                             user = \"root\", password = \"root\",\n+                             options = {\n+                                datasourceName: \"org.h2.jdbcx.JdbcDataSource\", \n+                                properties: {\"loginTimeout\": \"2000\"}\n+                             });                          \n+```\n+\n+You can find more details about each property in ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI0NDgyOnYy", "diffSide": "RIGHT", "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozNzoxOFrOGjMXfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozNzoxOFrOGjMXfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NTk2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            hence all operations defined by the `sql:Client` will be supported by `jdbc:Client` as well. \n          \n          \n            \n            all the operations defined by the `sql:Client` will be supported by the `jdbc:Client` as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439555967", "createdAt": "2020-06-12T17:37:18Z", "author": {"login": "praneesha"}, "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "diffHunk": "@@ -0,0 +1,93 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in any type of relational database \n+that is accessible via Java Database Connectivity (JDBC). \n+\n+**Prerequisite:** Please add the JDBC driver corresponding to the database you are trying to interact with, \n+as a native library dependency in your Ballerina project. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.\n+\n+e.g. Ballerina.toml content.\n+Please change the path to the JDBC driver appropriately.\n+\n+```toml\n+[project]\n+org-name= \"sample\"\n+version= \"0.1.0\"\n+\n+[platform]\n+target = \"java8\"\n+\n+    [[platform.libraries]]\n+    artafactId = \"h2\"\n+    version = \"1.4.200\"\n+    path = \"/path/to/com.h2database.h2-1.4.200.jar\"\n+    groupId = \"com.h2database\"\n+    modules = [\"samplemodule\"]\n+``` \n+\n+Or, if you're trying to run a single bal file, you can copy the JDBC driver into `${BALLERINA_HOME}/bre/lib` and \n+run the bal file with `ballerina run` command.\n+\n+### Client\n+To access a database, you must first create a \n+[jdbc:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/clients/Client.html) object. \n+The examples for creating a JDBC client can be found below.\n+\n+#### Creating a client\n+This example shows different ways of creating the `jdbc:Client`. The client can be created by passing \n+JDBC URL which is an mandatory property, and all other fields are optional. \n+\n+The `dbClient1` receives only database URL, and the `dbClient2` receives user and password in addition to URL. \n+If the properties are passed in the same order as it is defined in the `jdbc:Client` you can pass it \n+without named params.\n+\n+The `dbClient3` uses the named params to pass all the attributes, and provides `options` property in the type of \n+[jdbc:Options](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/records/Options.html) \n+and also uses the unshared connection pool in the type of \n+[sql:ConnectionPool](https://ballerina.io/learn/api-docs/ballerina/api-docs/sql/records/ConnectionPool.html). \n+Please refer [SQL Module](https://ballerina.io/learn/api-docs/ballerina/sql/index.html) to get more details \n+about connection pooling.\n+\n+The `dbClient4` receives some custom properties within the \n+[jdbc:Options](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/records/Options.html), \n+and those properties will be used by the `datasourceName` defined. \n+As per the provided example, the datasource `org.h2.jdbcx.JdbcDataSource` will be configured with `loginTimeout` \n+of `2000` milli seconds.\n+\n+```ballerina\n+jdbc:Client dbClient1 = new (\"jdbc:h2:~/path/to/database\");\n+jdbc:Client dbClient2 = new (\"jdbc:h2:~/path/to/database\", \"root\", \"root\");\n+jdbc:Client dbClient3 = new (url =  \"jdbc:h2:~/path/to/database\",\n+                             user = \"root\", password = \"root\",\n+                             options = {\n+                                 datasourceName: \"org.h2.jdbcx.JdbcDataSource\"\n+                             },\n+                             connectionPool = {\n+                                 maxOpenConnections: 5\n+                             });\n+jdbc:Client dbClient4 = new (url =  \"jdbc:h2:~/path/to/database\", \n+                             user = \"root\", password = \"root\",\n+                             options = {\n+                                datasourceName: \"org.h2.jdbcx.JdbcDataSource\", \n+                                properties: {\"loginTimeout\": \"2000\"}\n+                             });                          \n+```\n+\n+You can find more details about each property in \n+[jdbc:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/clients/Client.html) constructor. \n+\n+The [jdbc:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/clients/Client.html) references \n+[sql:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/sql/clients/Client.html) and \n+hence all operations defined by the `sql:Client` will be supported by `jdbc:Client` as well. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI0NzQ5OnYy", "diffSide": "RIGHT", "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozODoxNVrOGjMZHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozODoxNVrOGjMZHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NjM4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Please refer [SQL Module](https://ballerina.io/learn/api-docs/ballerina/sql/index.html) for more information on \n          \n          \n            \n            For more information on all the operations supported by the `jdbc:Client`, which include the below, see the\n          \n          \n            \n            [SQL Module](https://ballerina.io/learn/api-docs/ballerina/sql/index.html).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439556383", "createdAt": "2020-06-12T17:38:15Z", "author": {"login": "praneesha"}, "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "diffHunk": "@@ -0,0 +1,93 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in any type of relational database \n+that is accessible via Java Database Connectivity (JDBC). \n+\n+**Prerequisite:** Please add the JDBC driver corresponding to the database you are trying to interact with, \n+as a native library dependency in your Ballerina project. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.\n+\n+e.g. Ballerina.toml content.\n+Please change the path to the JDBC driver appropriately.\n+\n+```toml\n+[project]\n+org-name= \"sample\"\n+version= \"0.1.0\"\n+\n+[platform]\n+target = \"java8\"\n+\n+    [[platform.libraries]]\n+    artafactId = \"h2\"\n+    version = \"1.4.200\"\n+    path = \"/path/to/com.h2database.h2-1.4.200.jar\"\n+    groupId = \"com.h2database\"\n+    modules = [\"samplemodule\"]\n+``` \n+\n+Or, if you're trying to run a single bal file, you can copy the JDBC driver into `${BALLERINA_HOME}/bre/lib` and \n+run the bal file with `ballerina run` command.\n+\n+### Client\n+To access a database, you must first create a \n+[jdbc:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/clients/Client.html) object. \n+The examples for creating a JDBC client can be found below.\n+\n+#### Creating a client\n+This example shows different ways of creating the `jdbc:Client`. The client can be created by passing \n+JDBC URL which is an mandatory property, and all other fields are optional. \n+\n+The `dbClient1` receives only database URL, and the `dbClient2` receives user and password in addition to URL. \n+If the properties are passed in the same order as it is defined in the `jdbc:Client` you can pass it \n+without named params.\n+\n+The `dbClient3` uses the named params to pass all the attributes, and provides `options` property in the type of \n+[jdbc:Options](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/records/Options.html) \n+and also uses the unshared connection pool in the type of \n+[sql:ConnectionPool](https://ballerina.io/learn/api-docs/ballerina/api-docs/sql/records/ConnectionPool.html). \n+Please refer [SQL Module](https://ballerina.io/learn/api-docs/ballerina/sql/index.html) to get more details \n+about connection pooling.\n+\n+The `dbClient4` receives some custom properties within the \n+[jdbc:Options](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/records/Options.html), \n+and those properties will be used by the `datasourceName` defined. \n+As per the provided example, the datasource `org.h2.jdbcx.JdbcDataSource` will be configured with `loginTimeout` \n+of `2000` milli seconds.\n+\n+```ballerina\n+jdbc:Client dbClient1 = new (\"jdbc:h2:~/path/to/database\");\n+jdbc:Client dbClient2 = new (\"jdbc:h2:~/path/to/database\", \"root\", \"root\");\n+jdbc:Client dbClient3 = new (url =  \"jdbc:h2:~/path/to/database\",\n+                             user = \"root\", password = \"root\",\n+                             options = {\n+                                 datasourceName: \"org.h2.jdbcx.JdbcDataSource\"\n+                             },\n+                             connectionPool = {\n+                                 maxOpenConnections: 5\n+                             });\n+jdbc:Client dbClient4 = new (url =  \"jdbc:h2:~/path/to/database\", \n+                             user = \"root\", password = \"root\",\n+                             options = {\n+                                datasourceName: \"org.h2.jdbcx.JdbcDataSource\", \n+                                properties: {\"loginTimeout\": \"2000\"}\n+                             });                          \n+```\n+\n+You can find more details about each property in \n+[jdbc:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/clients/Client.html) constructor. \n+\n+The [jdbc:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/clients/Client.html) references \n+[sql:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/sql/clients/Client.html) and \n+hence all operations defined by the `sql:Client` will be supported by `jdbc:Client` as well. \n+\n+Please refer [SQL Module](https://ballerina.io/learn/api-docs/ballerina/sql/index.html) for more information on ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI0NzkwOnYy", "diffSide": "RIGHT", "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozODoyNVrOGjMZYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozODoyNVrOGjMZYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NjQ1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            all operations supported by `jdbc:Client` which includes below.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439556450", "createdAt": "2020-06-12T17:38:25Z", "author": {"login": "praneesha"}, "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "diffHunk": "@@ -0,0 +1,93 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in any type of relational database \n+that is accessible via Java Database Connectivity (JDBC). \n+\n+**Prerequisite:** Please add the JDBC driver corresponding to the database you are trying to interact with, \n+as a native library dependency in your Ballerina project. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.\n+\n+e.g. Ballerina.toml content.\n+Please change the path to the JDBC driver appropriately.\n+\n+```toml\n+[project]\n+org-name= \"sample\"\n+version= \"0.1.0\"\n+\n+[platform]\n+target = \"java8\"\n+\n+    [[platform.libraries]]\n+    artafactId = \"h2\"\n+    version = \"1.4.200\"\n+    path = \"/path/to/com.h2database.h2-1.4.200.jar\"\n+    groupId = \"com.h2database\"\n+    modules = [\"samplemodule\"]\n+``` \n+\n+Or, if you're trying to run a single bal file, you can copy the JDBC driver into `${BALLERINA_HOME}/bre/lib` and \n+run the bal file with `ballerina run` command.\n+\n+### Client\n+To access a database, you must first create a \n+[jdbc:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/clients/Client.html) object. \n+The examples for creating a JDBC client can be found below.\n+\n+#### Creating a client\n+This example shows different ways of creating the `jdbc:Client`. The client can be created by passing \n+JDBC URL which is an mandatory property, and all other fields are optional. \n+\n+The `dbClient1` receives only database URL, and the `dbClient2` receives user and password in addition to URL. \n+If the properties are passed in the same order as it is defined in the `jdbc:Client` you can pass it \n+without named params.\n+\n+The `dbClient3` uses the named params to pass all the attributes, and provides `options` property in the type of \n+[jdbc:Options](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/records/Options.html) \n+and also uses the unshared connection pool in the type of \n+[sql:ConnectionPool](https://ballerina.io/learn/api-docs/ballerina/api-docs/sql/records/ConnectionPool.html). \n+Please refer [SQL Module](https://ballerina.io/learn/api-docs/ballerina/sql/index.html) to get more details \n+about connection pooling.\n+\n+The `dbClient4` receives some custom properties within the \n+[jdbc:Options](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/records/Options.html), \n+and those properties will be used by the `datasourceName` defined. \n+As per the provided example, the datasource `org.h2.jdbcx.JdbcDataSource` will be configured with `loginTimeout` \n+of `2000` milli seconds.\n+\n+```ballerina\n+jdbc:Client dbClient1 = new (\"jdbc:h2:~/path/to/database\");\n+jdbc:Client dbClient2 = new (\"jdbc:h2:~/path/to/database\", \"root\", \"root\");\n+jdbc:Client dbClient3 = new (url =  \"jdbc:h2:~/path/to/database\",\n+                             user = \"root\", password = \"root\",\n+                             options = {\n+                                 datasourceName: \"org.h2.jdbcx.JdbcDataSource\"\n+                             },\n+                             connectionPool = {\n+                                 maxOpenConnections: 5\n+                             });\n+jdbc:Client dbClient4 = new (url =  \"jdbc:h2:~/path/to/database\", \n+                             user = \"root\", password = \"root\",\n+                             options = {\n+                                datasourceName: \"org.h2.jdbcx.JdbcDataSource\", \n+                                properties: {\"loginTimeout\": \"2000\"}\n+                             });                          \n+```\n+\n+You can find more details about each property in \n+[jdbc:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/clients/Client.html) constructor. \n+\n+The [jdbc:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/clients/Client.html) references \n+[sql:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/sql/clients/Client.html) and \n+hence all operations defined by the `sql:Client` will be supported by `jdbc:Client` as well. \n+\n+Please refer [SQL Module](https://ballerina.io/learn/api-docs/ballerina/sql/index.html) for more information on \n+all operations supported by `jdbc:Client` which includes below. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI1MDExOnYy", "diffSide": "RIGHT", "path": "stdlib/database/jdbc/src/test/resources/test-src/transaction/local-transaction-test.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozOToxMlrOGjMa3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozOToxMlrOGjMa3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NjgzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //check whether update action is performed\n          \n          \n            \n                //Check whether the update action is performed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439556830", "createdAt": "2020-06-12T17:39:12Z", "author": {"login": "praneesha"}, "path": "stdlib/database/jdbc/src/test/resources/test-src/transaction/local-transaction-test.bal", "diffHunk": "@@ -0,0 +1,360 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/transactions;\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+\n+type ResultCount record {\n+    int COUNTVAL;\n+};\n+\n+function testLocalTransaction(string jdbcURL, string user, string password) returns @tainted [int, int, boolean, boolean]|error? {\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int retryVal = -1;\n+    boolean committedBlockExecuted = false;\n+    transactions:Info transInfo;\n+    retry(1) transaction {\n+        var res = dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,creditLimit,country) \" +\n+                                \"values ('James', 'Clerk', 200, 5000.75, 'USA')\");\n+        res = dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,creditLimit,country) \" +\n+                                \"values ('James', 'Clerk', 200, 5000.75, 'USA')\");\n+        transInfo = transactions:info();\n+        var commitResult = commit;\n+        if(commitResult is ()){\n+            committedBlockExecuted = true;\n+        }\n+    }\n+    retryVal = transInfo.retryNumber;\n+    //check whether update action is performed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI1MDU5OnYy", "diffSide": "RIGHT", "path": "stdlib/database/jdbc/src/test/resources/test-src/transaction/local-transaction-test.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozOToyNlrOGjMbPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozOToyNlrOGjMbPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NjkyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //check whether update action is performed\n          \n          \n            \n                //Check whether the update action is performed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439556924", "createdAt": "2020-06-12T17:39:26Z", "author": {"login": "praneesha"}, "path": "stdlib/database/jdbc/src/test/resources/test-src/transaction/local-transaction-test.bal", "diffHunk": "@@ -0,0 +1,360 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/transactions;\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+\n+type ResultCount record {\n+    int COUNTVAL;\n+};\n+\n+function testLocalTransaction(string jdbcURL, string user, string password) returns @tainted [int, int, boolean, boolean]|error? {\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int retryVal = -1;\n+    boolean committedBlockExecuted = false;\n+    transactions:Info transInfo;\n+    retry(1) transaction {\n+        var res = dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,creditLimit,country) \" +\n+                                \"values ('James', 'Clerk', 200, 5000.75, 'USA')\");\n+        res = dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,creditLimit,country) \" +\n+                                \"values ('James', 'Clerk', 200, 5000.75, 'USA')\");\n+        transInfo = transactions:info();\n+        var commitResult = commit;\n+        if(commitResult is ()){\n+            committedBlockExecuted = true;\n+        }\n+    }\n+    retryVal = transInfo.retryNumber;\n+    //check whether update action is performed\n+    int count = check getCount(dbClient, \"200\");\n+    check dbClient.close();\n+    return [retryVal, count, committedBlockExecuted];\n+}\n+\n+function testTransactionRollbackWithCheck(string jdbcURL, string user, string password) returns @tainted [int, int, boolean]|error?{\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int retryVal = -1;\n+    boolean stmtAfterFailureExecuted = false;\n+    transactions:Info transInfo;\n+    retry(1) transaction {\n+        transInfo = transactions:info();\n+        var e1 = check dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,\" +\n+                \"creditLimit,country) values ('James', 'Clerk', 210, 5000.75, 'USA')\");\n+        var e2 = check dbClient->execute(\"Insert into Customers2 (firstName,lastName,registrationID,\" +\n+                    \"creditLimit,country) values ('James', 'Clerk', 210, 5000.75, 'USA')\");\n+        stmtAfterFailureExecuted  = true;\n+        check commit;\n+    }\n+    retryVal = transInfo.retryNumber;\n+    int count = check getCount(dbClient, \"210\");\n+    check dbClient.close();\n+    return [retryVal, count, stmtAfterFailureExecuted];\n+}\n+\n+function testTransactionRollbackWithRollback(string jdbcURL, string user, string password) returns @tainted [int, int, boolean]|error?{\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int retryVal = -1;\n+    boolean stmtAfterFailureExecuted = false;\n+    transactions:Info transInfo;\n+    retry(1) transaction {\n+        transInfo = transactions:info();\n+        var e1 = dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,\" +\n+                \"creditLimit,country) values ('James', 'Clerk', 211, 5000.75, 'USA')\");\n+        if (e1 is error){\n+            rollback;\n+        } else {\n+            var e2 = dbClient->execute(\"Insert into Customers2 (firstName,lastName,registrationID,\" +\n+                        \"creditLimit,country) values ('James', 'Clerk', 211, 5000.75, 'USA')\");\n+            if (e2 is error){\n+                rollback;\n+                stmtAfterFailureExecuted  = true;\n+            } else {\n+                check commit;\n+            }\n+        }\n+    }\n+    retryVal = transInfo.retryNumber;\n+    int count = check getCount(dbClient, \"211\");\n+    check dbClient.close();\n+    return [retryVal, count, stmtAfterFailureExecuted];\n+}\n+\n+function testLocalTransactionUpdateWithGeneratedKeys(string jdbcURL, string user, string password) returns @tainted [int, int]|error?{\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int returnVal = 0;\n+    transactions:Info transInfo;\n+    retry (1) transaction {\n+        transInfo = transactions:info();\n+        var e1 = check dbClient->execute(\"Insert into Customers \" +\n+         \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 615, 5000.75, 'USA')\");\n+        var e2 =  check dbClient->execute(\"Insert into Customers \" +\n+        \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 615, 5000.75, 'USA')\");\n+        check commit;\n+    }\n+    returnVal = transInfo.retryNumber;\n+    //check whether update action is performed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI1MTI2OnYy", "diffSide": "RIGHT", "path": "stdlib/database/jdbc/src/test/resources/test-src/transaction/local-transaction-test.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozOTo0MlrOGjMbtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozOTo0MlrOGjMbtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NzA0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //check whether update action is performed\n          \n          \n            \n                //Check whether the update action is performed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439557046", "createdAt": "2020-06-12T17:39:42Z", "author": {"login": "praneesha"}, "path": "stdlib/database/jdbc/src/test/resources/test-src/transaction/local-transaction-test.bal", "diffHunk": "@@ -0,0 +1,360 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/transactions;\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+\n+type ResultCount record {\n+    int COUNTVAL;\n+};\n+\n+function testLocalTransaction(string jdbcURL, string user, string password) returns @tainted [int, int, boolean, boolean]|error? {\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int retryVal = -1;\n+    boolean committedBlockExecuted = false;\n+    transactions:Info transInfo;\n+    retry(1) transaction {\n+        var res = dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,creditLimit,country) \" +\n+                                \"values ('James', 'Clerk', 200, 5000.75, 'USA')\");\n+        res = dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,creditLimit,country) \" +\n+                                \"values ('James', 'Clerk', 200, 5000.75, 'USA')\");\n+        transInfo = transactions:info();\n+        var commitResult = commit;\n+        if(commitResult is ()){\n+            committedBlockExecuted = true;\n+        }\n+    }\n+    retryVal = transInfo.retryNumber;\n+    //check whether update action is performed\n+    int count = check getCount(dbClient, \"200\");\n+    check dbClient.close();\n+    return [retryVal, count, committedBlockExecuted];\n+}\n+\n+function testTransactionRollbackWithCheck(string jdbcURL, string user, string password) returns @tainted [int, int, boolean]|error?{\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int retryVal = -1;\n+    boolean stmtAfterFailureExecuted = false;\n+    transactions:Info transInfo;\n+    retry(1) transaction {\n+        transInfo = transactions:info();\n+        var e1 = check dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,\" +\n+                \"creditLimit,country) values ('James', 'Clerk', 210, 5000.75, 'USA')\");\n+        var e2 = check dbClient->execute(\"Insert into Customers2 (firstName,lastName,registrationID,\" +\n+                    \"creditLimit,country) values ('James', 'Clerk', 210, 5000.75, 'USA')\");\n+        stmtAfterFailureExecuted  = true;\n+        check commit;\n+    }\n+    retryVal = transInfo.retryNumber;\n+    int count = check getCount(dbClient, \"210\");\n+    check dbClient.close();\n+    return [retryVal, count, stmtAfterFailureExecuted];\n+}\n+\n+function testTransactionRollbackWithRollback(string jdbcURL, string user, string password) returns @tainted [int, int, boolean]|error?{\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int retryVal = -1;\n+    boolean stmtAfterFailureExecuted = false;\n+    transactions:Info transInfo;\n+    retry(1) transaction {\n+        transInfo = transactions:info();\n+        var e1 = dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,\" +\n+                \"creditLimit,country) values ('James', 'Clerk', 211, 5000.75, 'USA')\");\n+        if (e1 is error){\n+            rollback;\n+        } else {\n+            var e2 = dbClient->execute(\"Insert into Customers2 (firstName,lastName,registrationID,\" +\n+                        \"creditLimit,country) values ('James', 'Clerk', 211, 5000.75, 'USA')\");\n+            if (e2 is error){\n+                rollback;\n+                stmtAfterFailureExecuted  = true;\n+            } else {\n+                check commit;\n+            }\n+        }\n+    }\n+    retryVal = transInfo.retryNumber;\n+    int count = check getCount(dbClient, \"211\");\n+    check dbClient.close();\n+    return [retryVal, count, stmtAfterFailureExecuted];\n+}\n+\n+function testLocalTransactionUpdateWithGeneratedKeys(string jdbcURL, string user, string password) returns @tainted [int, int]|error?{\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int returnVal = 0;\n+    transactions:Info transInfo;\n+    retry (1) transaction {\n+        transInfo = transactions:info();\n+        var e1 = check dbClient->execute(\"Insert into Customers \" +\n+         \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 615, 5000.75, 'USA')\");\n+        var e2 =  check dbClient->execute(\"Insert into Customers \" +\n+        \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 615, 5000.75, 'USA')\");\n+        check commit;\n+    }\n+    returnVal = transInfo.retryNumber;\n+    //check whether update action is performed\n+    int count = check getCount(dbClient, \"615\");\n+    check dbClient.close();\n+    return [returnVal, count];\n+}\n+\n+function testLocalTransactionRollbackWithGeneratedKeys(string jdbcURL, string user, string password) returns @tainted [int, int]|error?{\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int returnVal = 0;\n+    transactions:Info transInfo;\n+    retry(1) transaction {\n+        transInfo = transactions:info();\n+        var e1 = check dbClient->execute(\"Insert into Customers \" +\n+         \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 615, 5000.75, 'USA')\");\n+        var e2 =  check dbClient->execute(\"Insert into Customers2 \" +\n+        \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 615, 5000.75, 'USA')\");\n+        check commit;\n+    }\n+    returnVal = transInfo.retryNumber;\n+    //check whether update action is performed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI1MTc3OnYy", "diffSide": "RIGHT", "path": "stdlib/database/jdbc/src/test/resources/test-src/transaction/local-transaction-test.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozOTo1NVrOGjMcDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozOTo1NVrOGjMcDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NzEzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //check whether update action is performed\n          \n          \n            \n                //Check whether the update action is performed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439557133", "createdAt": "2020-06-12T17:39:55Z", "author": {"login": "praneesha"}, "path": "stdlib/database/jdbc/src/test/resources/test-src/transaction/local-transaction-test.bal", "diffHunk": "@@ -0,0 +1,360 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/transactions;\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+\n+type ResultCount record {\n+    int COUNTVAL;\n+};\n+\n+function testLocalTransaction(string jdbcURL, string user, string password) returns @tainted [int, int, boolean, boolean]|error? {\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int retryVal = -1;\n+    boolean committedBlockExecuted = false;\n+    transactions:Info transInfo;\n+    retry(1) transaction {\n+        var res = dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,creditLimit,country) \" +\n+                                \"values ('James', 'Clerk', 200, 5000.75, 'USA')\");\n+        res = dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,creditLimit,country) \" +\n+                                \"values ('James', 'Clerk', 200, 5000.75, 'USA')\");\n+        transInfo = transactions:info();\n+        var commitResult = commit;\n+        if(commitResult is ()){\n+            committedBlockExecuted = true;\n+        }\n+    }\n+    retryVal = transInfo.retryNumber;\n+    //check whether update action is performed\n+    int count = check getCount(dbClient, \"200\");\n+    check dbClient.close();\n+    return [retryVal, count, committedBlockExecuted];\n+}\n+\n+function testTransactionRollbackWithCheck(string jdbcURL, string user, string password) returns @tainted [int, int, boolean]|error?{\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int retryVal = -1;\n+    boolean stmtAfterFailureExecuted = false;\n+    transactions:Info transInfo;\n+    retry(1) transaction {\n+        transInfo = transactions:info();\n+        var e1 = check dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,\" +\n+                \"creditLimit,country) values ('James', 'Clerk', 210, 5000.75, 'USA')\");\n+        var e2 = check dbClient->execute(\"Insert into Customers2 (firstName,lastName,registrationID,\" +\n+                    \"creditLimit,country) values ('James', 'Clerk', 210, 5000.75, 'USA')\");\n+        stmtAfterFailureExecuted  = true;\n+        check commit;\n+    }\n+    retryVal = transInfo.retryNumber;\n+    int count = check getCount(dbClient, \"210\");\n+    check dbClient.close();\n+    return [retryVal, count, stmtAfterFailureExecuted];\n+}\n+\n+function testTransactionRollbackWithRollback(string jdbcURL, string user, string password) returns @tainted [int, int, boolean]|error?{\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int retryVal = -1;\n+    boolean stmtAfterFailureExecuted = false;\n+    transactions:Info transInfo;\n+    retry(1) transaction {\n+        transInfo = transactions:info();\n+        var e1 = dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,\" +\n+                \"creditLimit,country) values ('James', 'Clerk', 211, 5000.75, 'USA')\");\n+        if (e1 is error){\n+            rollback;\n+        } else {\n+            var e2 = dbClient->execute(\"Insert into Customers2 (firstName,lastName,registrationID,\" +\n+                        \"creditLimit,country) values ('James', 'Clerk', 211, 5000.75, 'USA')\");\n+            if (e2 is error){\n+                rollback;\n+                stmtAfterFailureExecuted  = true;\n+            } else {\n+                check commit;\n+            }\n+        }\n+    }\n+    retryVal = transInfo.retryNumber;\n+    int count = check getCount(dbClient, \"211\");\n+    check dbClient.close();\n+    return [retryVal, count, stmtAfterFailureExecuted];\n+}\n+\n+function testLocalTransactionUpdateWithGeneratedKeys(string jdbcURL, string user, string password) returns @tainted [int, int]|error?{\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int returnVal = 0;\n+    transactions:Info transInfo;\n+    retry (1) transaction {\n+        transInfo = transactions:info();\n+        var e1 = check dbClient->execute(\"Insert into Customers \" +\n+         \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 615, 5000.75, 'USA')\");\n+        var e2 =  check dbClient->execute(\"Insert into Customers \" +\n+        \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 615, 5000.75, 'USA')\");\n+        check commit;\n+    }\n+    returnVal = transInfo.retryNumber;\n+    //check whether update action is performed\n+    int count = check getCount(dbClient, \"615\");\n+    check dbClient.close();\n+    return [returnVal, count];\n+}\n+\n+function testLocalTransactionRollbackWithGeneratedKeys(string jdbcURL, string user, string password) returns @tainted [int, int]|error?{\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int returnVal = 0;\n+    transactions:Info transInfo;\n+    retry(1) transaction {\n+        transInfo = transactions:info();\n+        var e1 = check dbClient->execute(\"Insert into Customers \" +\n+         \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 615, 5000.75, 'USA')\");\n+        var e2 =  check dbClient->execute(\"Insert into Customers2 \" +\n+        \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 615, 5000.75, 'USA')\");\n+        check commit;\n+    }\n+    returnVal = transInfo.retryNumber;\n+    //check whether update action is performed\n+    int count = check getCount(dbClient, \"615\");\n+    check dbClient.close();\n+    return [returnVal, count];\n+}\n+\n+function testTransactionAbort(string jdbcURL, string user, string password) returns @tainted [int, int, int]|error?{\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    transactions:Info transInfo;\n+\n+    int abortVal = 0;\n+    var abortFunc = function(transactions:Info? info, error? cause, boolean willTry) {\n+        abortVal = -1;\n+    };\n+\n+    retry(1) transaction {\n+        transInfo = transactions:info();\n+        transactions:onRollback(abortFunc);\n+        var e1 = dbClient->execute(\"Insert into Customers \" +\n+         \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 220, 5000.75, 'USA')\");\n+        var e2 =  dbClient->execute(\"Insert into Customers \" +\n+        \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 220, 5000.75, 'USA')\");\n+        int i = 0;\n+        if (i == 0) {\n+            rollback;\n+        } else {\n+            check commit;\n+        }\n+    }\n+    int returnVal = transInfo.retryNumber;\n+    //check whether update action is performed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI1MjM4OnYy", "diffSide": "RIGHT", "path": "stdlib/database/jdbc/src/test/resources/test-src/transaction/local-transaction-test.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0MDowNlrOGjMcaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0MDowNlrOGjMcaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NzIyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //check whether update action is performed\n          \n          \n            \n                //Check whether the update action is performed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439557224", "createdAt": "2020-06-12T17:40:06Z", "author": {"login": "praneesha"}, "path": "stdlib/database/jdbc/src/test/resources/test-src/transaction/local-transaction-test.bal", "diffHunk": "@@ -0,0 +1,360 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/transactions;\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+\n+type ResultCount record {\n+    int COUNTVAL;\n+};\n+\n+function testLocalTransaction(string jdbcURL, string user, string password) returns @tainted [int, int, boolean, boolean]|error? {\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int retryVal = -1;\n+    boolean committedBlockExecuted = false;\n+    transactions:Info transInfo;\n+    retry(1) transaction {\n+        var res = dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,creditLimit,country) \" +\n+                                \"values ('James', 'Clerk', 200, 5000.75, 'USA')\");\n+        res = dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,creditLimit,country) \" +\n+                                \"values ('James', 'Clerk', 200, 5000.75, 'USA')\");\n+        transInfo = transactions:info();\n+        var commitResult = commit;\n+        if(commitResult is ()){\n+            committedBlockExecuted = true;\n+        }\n+    }\n+    retryVal = transInfo.retryNumber;\n+    //check whether update action is performed\n+    int count = check getCount(dbClient, \"200\");\n+    check dbClient.close();\n+    return [retryVal, count, committedBlockExecuted];\n+}\n+\n+function testTransactionRollbackWithCheck(string jdbcURL, string user, string password) returns @tainted [int, int, boolean]|error?{\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int retryVal = -1;\n+    boolean stmtAfterFailureExecuted = false;\n+    transactions:Info transInfo;\n+    retry(1) transaction {\n+        transInfo = transactions:info();\n+        var e1 = check dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,\" +\n+                \"creditLimit,country) values ('James', 'Clerk', 210, 5000.75, 'USA')\");\n+        var e2 = check dbClient->execute(\"Insert into Customers2 (firstName,lastName,registrationID,\" +\n+                    \"creditLimit,country) values ('James', 'Clerk', 210, 5000.75, 'USA')\");\n+        stmtAfterFailureExecuted  = true;\n+        check commit;\n+    }\n+    retryVal = transInfo.retryNumber;\n+    int count = check getCount(dbClient, \"210\");\n+    check dbClient.close();\n+    return [retryVal, count, stmtAfterFailureExecuted];\n+}\n+\n+function testTransactionRollbackWithRollback(string jdbcURL, string user, string password) returns @tainted [int, int, boolean]|error?{\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int retryVal = -1;\n+    boolean stmtAfterFailureExecuted = false;\n+    transactions:Info transInfo;\n+    retry(1) transaction {\n+        transInfo = transactions:info();\n+        var e1 = dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,\" +\n+                \"creditLimit,country) values ('James', 'Clerk', 211, 5000.75, 'USA')\");\n+        if (e1 is error){\n+            rollback;\n+        } else {\n+            var e2 = dbClient->execute(\"Insert into Customers2 (firstName,lastName,registrationID,\" +\n+                        \"creditLimit,country) values ('James', 'Clerk', 211, 5000.75, 'USA')\");\n+            if (e2 is error){\n+                rollback;\n+                stmtAfterFailureExecuted  = true;\n+            } else {\n+                check commit;\n+            }\n+        }\n+    }\n+    retryVal = transInfo.retryNumber;\n+    int count = check getCount(dbClient, \"211\");\n+    check dbClient.close();\n+    return [retryVal, count, stmtAfterFailureExecuted];\n+}\n+\n+function testLocalTransactionUpdateWithGeneratedKeys(string jdbcURL, string user, string password) returns @tainted [int, int]|error?{\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int returnVal = 0;\n+    transactions:Info transInfo;\n+    retry (1) transaction {\n+        transInfo = transactions:info();\n+        var e1 = check dbClient->execute(\"Insert into Customers \" +\n+         \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 615, 5000.75, 'USA')\");\n+        var e2 =  check dbClient->execute(\"Insert into Customers \" +\n+        \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 615, 5000.75, 'USA')\");\n+        check commit;\n+    }\n+    returnVal = transInfo.retryNumber;\n+    //check whether update action is performed\n+    int count = check getCount(dbClient, \"615\");\n+    check dbClient.close();\n+    return [returnVal, count];\n+}\n+\n+function testLocalTransactionRollbackWithGeneratedKeys(string jdbcURL, string user, string password) returns @tainted [int, int]|error?{\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int returnVal = 0;\n+    transactions:Info transInfo;\n+    retry(1) transaction {\n+        transInfo = transactions:info();\n+        var e1 = check dbClient->execute(\"Insert into Customers \" +\n+         \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 615, 5000.75, 'USA')\");\n+        var e2 =  check dbClient->execute(\"Insert into Customers2 \" +\n+        \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 615, 5000.75, 'USA')\");\n+        check commit;\n+    }\n+    returnVal = transInfo.retryNumber;\n+    //check whether update action is performed\n+    int count = check getCount(dbClient, \"615\");\n+    check dbClient.close();\n+    return [returnVal, count];\n+}\n+\n+function testTransactionAbort(string jdbcURL, string user, string password) returns @tainted [int, int, int]|error?{\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    transactions:Info transInfo;\n+\n+    int abortVal = 0;\n+    var abortFunc = function(transactions:Info? info, error? cause, boolean willTry) {\n+        abortVal = -1;\n+    };\n+\n+    retry(1) transaction {\n+        transInfo = transactions:info();\n+        transactions:onRollback(abortFunc);\n+        var e1 = dbClient->execute(\"Insert into Customers \" +\n+         \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 220, 5000.75, 'USA')\");\n+        var e2 =  dbClient->execute(\"Insert into Customers \" +\n+        \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 220, 5000.75, 'USA')\");\n+        int i = 0;\n+        if (i == 0) {\n+            rollback;\n+        } else {\n+            check commit;\n+        }\n+    }\n+    int returnVal = transInfo.retryNumber;\n+    //check whether update action is performed\n+    int count = check getCount(dbClient, \"220\");\n+    check dbClient.close();\n+    return [returnVal, abortVal, count];\n+}\n+\n+int testTransactionErrorPanicRetVal = 0;\n+function testTransactionErrorPanic(string jdbcURL, string user, string password) returns @tainted [int, int, int]|error? {\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int returnVal = 0;\n+    int catchValue = 0;\n+    var ret = trap testTransactionErrorPanicHelper(dbClient);\n+    io:println(ret);\n+    if (ret is error) {\n+        catchValue = -1;\n+    }\n+    //check whether update action is performed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI1MzE0OnYy", "diffSide": "RIGHT", "path": "stdlib/database/jdbc/src/test/resources/test-src/transaction/local-transaction-test.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0MDoyMlrOGjMc2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0MDoyMlrOGjMc2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NzMzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //check whether update action is performed\n          \n          \n            \n                //Check whether the update action is performed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439557339", "createdAt": "2020-06-12T17:40:22Z", "author": {"login": "praneesha"}, "path": "stdlib/database/jdbc/src/test/resources/test-src/transaction/local-transaction-test.bal", "diffHunk": "@@ -0,0 +1,360 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/transactions;\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+\n+type ResultCount record {\n+    int COUNTVAL;\n+};\n+\n+function testLocalTransaction(string jdbcURL, string user, string password) returns @tainted [int, int, boolean, boolean]|error? {\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int retryVal = -1;\n+    boolean committedBlockExecuted = false;\n+    transactions:Info transInfo;\n+    retry(1) transaction {\n+        var res = dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,creditLimit,country) \" +\n+                                \"values ('James', 'Clerk', 200, 5000.75, 'USA')\");\n+        res = dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,creditLimit,country) \" +\n+                                \"values ('James', 'Clerk', 200, 5000.75, 'USA')\");\n+        transInfo = transactions:info();\n+        var commitResult = commit;\n+        if(commitResult is ()){\n+            committedBlockExecuted = true;\n+        }\n+    }\n+    retryVal = transInfo.retryNumber;\n+    //check whether update action is performed\n+    int count = check getCount(dbClient, \"200\");\n+    check dbClient.close();\n+    return [retryVal, count, committedBlockExecuted];\n+}\n+\n+function testTransactionRollbackWithCheck(string jdbcURL, string user, string password) returns @tainted [int, int, boolean]|error?{\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int retryVal = -1;\n+    boolean stmtAfterFailureExecuted = false;\n+    transactions:Info transInfo;\n+    retry(1) transaction {\n+        transInfo = transactions:info();\n+        var e1 = check dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,\" +\n+                \"creditLimit,country) values ('James', 'Clerk', 210, 5000.75, 'USA')\");\n+        var e2 = check dbClient->execute(\"Insert into Customers2 (firstName,lastName,registrationID,\" +\n+                    \"creditLimit,country) values ('James', 'Clerk', 210, 5000.75, 'USA')\");\n+        stmtAfterFailureExecuted  = true;\n+        check commit;\n+    }\n+    retryVal = transInfo.retryNumber;\n+    int count = check getCount(dbClient, \"210\");\n+    check dbClient.close();\n+    return [retryVal, count, stmtAfterFailureExecuted];\n+}\n+\n+function testTransactionRollbackWithRollback(string jdbcURL, string user, string password) returns @tainted [int, int, boolean]|error?{\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int retryVal = -1;\n+    boolean stmtAfterFailureExecuted = false;\n+    transactions:Info transInfo;\n+    retry(1) transaction {\n+        transInfo = transactions:info();\n+        var e1 = dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,\" +\n+                \"creditLimit,country) values ('James', 'Clerk', 211, 5000.75, 'USA')\");\n+        if (e1 is error){\n+            rollback;\n+        } else {\n+            var e2 = dbClient->execute(\"Insert into Customers2 (firstName,lastName,registrationID,\" +\n+                        \"creditLimit,country) values ('James', 'Clerk', 211, 5000.75, 'USA')\");\n+            if (e2 is error){\n+                rollback;\n+                stmtAfterFailureExecuted  = true;\n+            } else {\n+                check commit;\n+            }\n+        }\n+    }\n+    retryVal = transInfo.retryNumber;\n+    int count = check getCount(dbClient, \"211\");\n+    check dbClient.close();\n+    return [retryVal, count, stmtAfterFailureExecuted];\n+}\n+\n+function testLocalTransactionUpdateWithGeneratedKeys(string jdbcURL, string user, string password) returns @tainted [int, int]|error?{\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int returnVal = 0;\n+    transactions:Info transInfo;\n+    retry (1) transaction {\n+        transInfo = transactions:info();\n+        var e1 = check dbClient->execute(\"Insert into Customers \" +\n+         \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 615, 5000.75, 'USA')\");\n+        var e2 =  check dbClient->execute(\"Insert into Customers \" +\n+        \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 615, 5000.75, 'USA')\");\n+        check commit;\n+    }\n+    returnVal = transInfo.retryNumber;\n+    //check whether update action is performed\n+    int count = check getCount(dbClient, \"615\");\n+    check dbClient.close();\n+    return [returnVal, count];\n+}\n+\n+function testLocalTransactionRollbackWithGeneratedKeys(string jdbcURL, string user, string password) returns @tainted [int, int]|error?{\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int returnVal = 0;\n+    transactions:Info transInfo;\n+    retry(1) transaction {\n+        transInfo = transactions:info();\n+        var e1 = check dbClient->execute(\"Insert into Customers \" +\n+         \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 615, 5000.75, 'USA')\");\n+        var e2 =  check dbClient->execute(\"Insert into Customers2 \" +\n+        \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 615, 5000.75, 'USA')\");\n+        check commit;\n+    }\n+    returnVal = transInfo.retryNumber;\n+    //check whether update action is performed\n+    int count = check getCount(dbClient, \"615\");\n+    check dbClient.close();\n+    return [returnVal, count];\n+}\n+\n+function testTransactionAbort(string jdbcURL, string user, string password) returns @tainted [int, int, int]|error?{\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    transactions:Info transInfo;\n+\n+    int abortVal = 0;\n+    var abortFunc = function(transactions:Info? info, error? cause, boolean willTry) {\n+        abortVal = -1;\n+    };\n+\n+    retry(1) transaction {\n+        transInfo = transactions:info();\n+        transactions:onRollback(abortFunc);\n+        var e1 = dbClient->execute(\"Insert into Customers \" +\n+         \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 220, 5000.75, 'USA')\");\n+        var e2 =  dbClient->execute(\"Insert into Customers \" +\n+        \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 220, 5000.75, 'USA')\");\n+        int i = 0;\n+        if (i == 0) {\n+            rollback;\n+        } else {\n+            check commit;\n+        }\n+    }\n+    int returnVal = transInfo.retryNumber;\n+    //check whether update action is performed\n+    int count = check getCount(dbClient, \"220\");\n+    check dbClient.close();\n+    return [returnVal, abortVal, count];\n+}\n+\n+int testTransactionErrorPanicRetVal = 0;\n+function testTransactionErrorPanic(string jdbcURL, string user, string password) returns @tainted [int, int, int]|error? {\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int returnVal = 0;\n+    int catchValue = 0;\n+    var ret = trap testTransactionErrorPanicHelper(dbClient);\n+    io:println(ret);\n+    if (ret is error) {\n+        catchValue = -1;\n+    }\n+    //check whether update action is performed\n+    int count = check getCount(dbClient, \"260\");\n+    check dbClient.close();\n+    return [testTransactionErrorPanicRetVal, catchValue, count];\n+}\n+\n+function testTransactionErrorPanicHelper(jdbc:Client dbClient) {\n+    int returnVal = 0;\n+    transactions:Info transInfo;\n+    retry(1) transaction {\n+        transInfo = transactions:info();\n+        var e1 = dbClient->execute(\"Insert into Customers (firstName,lastName,\" +\n+                              \"registrationID,creditLimit,country) values ('James', 'Clerk', 260, 5000.75, 'USA')\");\n+        int i = 0;\n+        if (i == 0) {\n+            error e = error(\"error\");\n+            panic e;\n+        } else {\n+            var r = commit;\n+        }\n+    }\n+    io:println(\"exec\");\n+    testTransactionErrorPanicRetVal = transInfo.retryNumber;\n+}\n+\n+function testTransactionErrorPanicAndTrap(string jdbcURL, string user, string password) returns @tainted [int, int, int]|error? {\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+\n+    int catchValue = 0;\n+    transactions:Info transInfo;\n+    retry (1) transaction {\n+        transInfo = transactions:info();\n+        var e1 = dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,\" +\n+                 \"creditLimit,country) values ('James', 'Clerk', 250, 5000.75, 'USA')\");\n+        var ret = trap testTransactionErrorPanicAndTrapHelper(0);\n+        if (ret is error) {\n+            catchValue = -1;\n+        }\n+        check commit;\n+    }\n+    int returnVal = transInfo.retryNumber;\n+    //check whether update action is performed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI1NDYxOnYy", "diffSide": "RIGHT", "path": "stdlib/database/jdbc/src/test/resources/test-src/transaction/local-transaction-test.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0MDo1N1rOGjMdvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0MDo1N1rOGjMdvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NzU2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 //check whether update action is performed\n          \n          \n            \n                 //Check whether the update action is performed.\n          \n      \n    \n    \n  \n\nThis is repeated so many times. Might need to check.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439557566", "createdAt": "2020-06-12T17:40:57Z", "author": {"login": "praneesha"}, "path": "stdlib/database/jdbc/src/test/resources/test-src/transaction/local-transaction-test.bal", "diffHunk": "@@ -0,0 +1,360 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/transactions;\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+\n+type ResultCount record {\n+    int COUNTVAL;\n+};\n+\n+function testLocalTransaction(string jdbcURL, string user, string password) returns @tainted [int, int, boolean, boolean]|error? {\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int retryVal = -1;\n+    boolean committedBlockExecuted = false;\n+    transactions:Info transInfo;\n+    retry(1) transaction {\n+        var res = dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,creditLimit,country) \" +\n+                                \"values ('James', 'Clerk', 200, 5000.75, 'USA')\");\n+        res = dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,creditLimit,country) \" +\n+                                \"values ('James', 'Clerk', 200, 5000.75, 'USA')\");\n+        transInfo = transactions:info();\n+        var commitResult = commit;\n+        if(commitResult is ()){\n+            committedBlockExecuted = true;\n+        }\n+    }\n+    retryVal = transInfo.retryNumber;\n+    //check whether update action is performed\n+    int count = check getCount(dbClient, \"200\");\n+    check dbClient.close();\n+    return [retryVal, count, committedBlockExecuted];\n+}\n+\n+function testTransactionRollbackWithCheck(string jdbcURL, string user, string password) returns @tainted [int, int, boolean]|error?{\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int retryVal = -1;\n+    boolean stmtAfterFailureExecuted = false;\n+    transactions:Info transInfo;\n+    retry(1) transaction {\n+        transInfo = transactions:info();\n+        var e1 = check dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,\" +\n+                \"creditLimit,country) values ('James', 'Clerk', 210, 5000.75, 'USA')\");\n+        var e2 = check dbClient->execute(\"Insert into Customers2 (firstName,lastName,registrationID,\" +\n+                    \"creditLimit,country) values ('James', 'Clerk', 210, 5000.75, 'USA')\");\n+        stmtAfterFailureExecuted  = true;\n+        check commit;\n+    }\n+    retryVal = transInfo.retryNumber;\n+    int count = check getCount(dbClient, \"210\");\n+    check dbClient.close();\n+    return [retryVal, count, stmtAfterFailureExecuted];\n+}\n+\n+function testTransactionRollbackWithRollback(string jdbcURL, string user, string password) returns @tainted [int, int, boolean]|error?{\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int retryVal = -1;\n+    boolean stmtAfterFailureExecuted = false;\n+    transactions:Info transInfo;\n+    retry(1) transaction {\n+        transInfo = transactions:info();\n+        var e1 = dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,\" +\n+                \"creditLimit,country) values ('James', 'Clerk', 211, 5000.75, 'USA')\");\n+        if (e1 is error){\n+            rollback;\n+        } else {\n+            var e2 = dbClient->execute(\"Insert into Customers2 (firstName,lastName,registrationID,\" +\n+                        \"creditLimit,country) values ('James', 'Clerk', 211, 5000.75, 'USA')\");\n+            if (e2 is error){\n+                rollback;\n+                stmtAfterFailureExecuted  = true;\n+            } else {\n+                check commit;\n+            }\n+        }\n+    }\n+    retryVal = transInfo.retryNumber;\n+    int count = check getCount(dbClient, \"211\");\n+    check dbClient.close();\n+    return [retryVal, count, stmtAfterFailureExecuted];\n+}\n+\n+function testLocalTransactionUpdateWithGeneratedKeys(string jdbcURL, string user, string password) returns @tainted [int, int]|error?{\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int returnVal = 0;\n+    transactions:Info transInfo;\n+    retry (1) transaction {\n+        transInfo = transactions:info();\n+        var e1 = check dbClient->execute(\"Insert into Customers \" +\n+         \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 615, 5000.75, 'USA')\");\n+        var e2 =  check dbClient->execute(\"Insert into Customers \" +\n+        \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 615, 5000.75, 'USA')\");\n+        check commit;\n+    }\n+    returnVal = transInfo.retryNumber;\n+    //check whether update action is performed\n+    int count = check getCount(dbClient, \"615\");\n+    check dbClient.close();\n+    return [returnVal, count];\n+}\n+\n+function testLocalTransactionRollbackWithGeneratedKeys(string jdbcURL, string user, string password) returns @tainted [int, int]|error?{\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int returnVal = 0;\n+    transactions:Info transInfo;\n+    retry(1) transaction {\n+        transInfo = transactions:info();\n+        var e1 = check dbClient->execute(\"Insert into Customers \" +\n+         \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 615, 5000.75, 'USA')\");\n+        var e2 =  check dbClient->execute(\"Insert into Customers2 \" +\n+        \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 615, 5000.75, 'USA')\");\n+        check commit;\n+    }\n+    returnVal = transInfo.retryNumber;\n+    //check whether update action is performed\n+    int count = check getCount(dbClient, \"615\");\n+    check dbClient.close();\n+    return [returnVal, count];\n+}\n+\n+function testTransactionAbort(string jdbcURL, string user, string password) returns @tainted [int, int, int]|error?{\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    transactions:Info transInfo;\n+\n+    int abortVal = 0;\n+    var abortFunc = function(transactions:Info? info, error? cause, boolean willTry) {\n+        abortVal = -1;\n+    };\n+\n+    retry(1) transaction {\n+        transInfo = transactions:info();\n+        transactions:onRollback(abortFunc);\n+        var e1 = dbClient->execute(\"Insert into Customers \" +\n+         \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 220, 5000.75, 'USA')\");\n+        var e2 =  dbClient->execute(\"Insert into Customers \" +\n+        \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 220, 5000.75, 'USA')\");\n+        int i = 0;\n+        if (i == 0) {\n+            rollback;\n+        } else {\n+            check commit;\n+        }\n+    }\n+    int returnVal = transInfo.retryNumber;\n+    //check whether update action is performed\n+    int count = check getCount(dbClient, \"220\");\n+    check dbClient.close();\n+    return [returnVal, abortVal, count];\n+}\n+\n+int testTransactionErrorPanicRetVal = 0;\n+function testTransactionErrorPanic(string jdbcURL, string user, string password) returns @tainted [int, int, int]|error? {\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int returnVal = 0;\n+    int catchValue = 0;\n+    var ret = trap testTransactionErrorPanicHelper(dbClient);\n+    io:println(ret);\n+    if (ret is error) {\n+        catchValue = -1;\n+    }\n+    //check whether update action is performed\n+    int count = check getCount(dbClient, \"260\");\n+    check dbClient.close();\n+    return [testTransactionErrorPanicRetVal, catchValue, count];\n+}\n+\n+function testTransactionErrorPanicHelper(jdbc:Client dbClient) {\n+    int returnVal = 0;\n+    transactions:Info transInfo;\n+    retry(1) transaction {\n+        transInfo = transactions:info();\n+        var e1 = dbClient->execute(\"Insert into Customers (firstName,lastName,\" +\n+                              \"registrationID,creditLimit,country) values ('James', 'Clerk', 260, 5000.75, 'USA')\");\n+        int i = 0;\n+        if (i == 0) {\n+            error e = error(\"error\");\n+            panic e;\n+        } else {\n+            var r = commit;\n+        }\n+    }\n+    io:println(\"exec\");\n+    testTransactionErrorPanicRetVal = transInfo.retryNumber;\n+}\n+\n+function testTransactionErrorPanicAndTrap(string jdbcURL, string user, string password) returns @tainted [int, int, int]|error? {\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+\n+    int catchValue = 0;\n+    transactions:Info transInfo;\n+    retry (1) transaction {\n+        transInfo = transactions:info();\n+        var e1 = dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,\" +\n+                 \"creditLimit,country) values ('James', 'Clerk', 250, 5000.75, 'USA')\");\n+        var ret = trap testTransactionErrorPanicAndTrapHelper(0);\n+        if (ret is error) {\n+            catchValue = -1;\n+        }\n+        check commit;\n+    }\n+    int returnVal = transInfo.retryNumber;\n+    //check whether update action is performed\n+    int count = check getCount(dbClient, \"250\");\n+    check dbClient.close();\n+    return [returnVal, catchValue, count];\n+}\n+\n+function testTransactionErrorPanicAndTrapHelper(int i) {\n+    if (i == 0) {\n+        error err = error(\"error\");\n+        panic err;\n+    }\n+}\n+\n+function testTwoTransactions(string jdbcURL, string user, string password) returns @tainted [int, int, int]|error? {\n+    jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+\n+     transactions:Info transInfo1;\n+     transactions:Info transInfo2;\n+     retry (1) transaction {\n+         transInfo1 = transactions:info();\n+         var e1 = check dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,creditLimit,country) \" +\n+                             \"values ('James', 'Clerk', 400, 5000.75, 'USA')\");\n+         var e2 = check dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,creditLimit,country) \" +\n+                             \"values ('James', 'Clerk', 400, 5000.75, 'USA')\");\n+         check commit;\n+     }\n+     int returnVal1 = transInfo1.retryNumber;\n+\n+     retry(1) transaction {\n+         transInfo2 = transactions:info();\n+         var e1 = dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,creditLimit,country) \" +\n+                             \"values ('James', 'Clerk', 400, 5000.75, 'USA')\");\n+         var e2 = dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,creditLimit,country) \" +\n+                             \"values ('James', 'Clerk', 400, 5000.75, 'USA')\");\n+         check commit;\n+     }\n+     int returnVal2 = transInfo2.retryNumber;\n+\n+     //check whether update action is performed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 253}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI1NTMxOnYy", "diffSide": "RIGHT", "path": "stdlib/database/jdbc/src/test/resources/test-src/transaction/local-transaction-test.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0MToxMFrOGjMeJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0MToxMFrOGjMeJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1NzY3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //check whether update action is performed\n          \n          \n            \n                //Check whether the update action is performed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439557671", "createdAt": "2020-06-12T17:41:10Z", "author": {"login": "praneesha"}, "path": "stdlib/database/jdbc/src/test/resources/test-src/transaction/local-transaction-test.bal", "diffHunk": "@@ -0,0 +1,360 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/transactions;\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+\n+type ResultCount record {\n+    int COUNTVAL;\n+};\n+\n+function testLocalTransaction(string jdbcURL, string user, string password) returns @tainted [int, int, boolean, boolean]|error? {\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int retryVal = -1;\n+    boolean committedBlockExecuted = false;\n+    transactions:Info transInfo;\n+    retry(1) transaction {\n+        var res = dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,creditLimit,country) \" +\n+                                \"values ('James', 'Clerk', 200, 5000.75, 'USA')\");\n+        res = dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,creditLimit,country) \" +\n+                                \"values ('James', 'Clerk', 200, 5000.75, 'USA')\");\n+        transInfo = transactions:info();\n+        var commitResult = commit;\n+        if(commitResult is ()){\n+            committedBlockExecuted = true;\n+        }\n+    }\n+    retryVal = transInfo.retryNumber;\n+    //check whether update action is performed\n+    int count = check getCount(dbClient, \"200\");\n+    check dbClient.close();\n+    return [retryVal, count, committedBlockExecuted];\n+}\n+\n+function testTransactionRollbackWithCheck(string jdbcURL, string user, string password) returns @tainted [int, int, boolean]|error?{\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int retryVal = -1;\n+    boolean stmtAfterFailureExecuted = false;\n+    transactions:Info transInfo;\n+    retry(1) transaction {\n+        transInfo = transactions:info();\n+        var e1 = check dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,\" +\n+                \"creditLimit,country) values ('James', 'Clerk', 210, 5000.75, 'USA')\");\n+        var e2 = check dbClient->execute(\"Insert into Customers2 (firstName,lastName,registrationID,\" +\n+                    \"creditLimit,country) values ('James', 'Clerk', 210, 5000.75, 'USA')\");\n+        stmtAfterFailureExecuted  = true;\n+        check commit;\n+    }\n+    retryVal = transInfo.retryNumber;\n+    int count = check getCount(dbClient, \"210\");\n+    check dbClient.close();\n+    return [retryVal, count, stmtAfterFailureExecuted];\n+}\n+\n+function testTransactionRollbackWithRollback(string jdbcURL, string user, string password) returns @tainted [int, int, boolean]|error?{\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int retryVal = -1;\n+    boolean stmtAfterFailureExecuted = false;\n+    transactions:Info transInfo;\n+    retry(1) transaction {\n+        transInfo = transactions:info();\n+        var e1 = dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,\" +\n+                \"creditLimit,country) values ('James', 'Clerk', 211, 5000.75, 'USA')\");\n+        if (e1 is error){\n+            rollback;\n+        } else {\n+            var e2 = dbClient->execute(\"Insert into Customers2 (firstName,lastName,registrationID,\" +\n+                        \"creditLimit,country) values ('James', 'Clerk', 211, 5000.75, 'USA')\");\n+            if (e2 is error){\n+                rollback;\n+                stmtAfterFailureExecuted  = true;\n+            } else {\n+                check commit;\n+            }\n+        }\n+    }\n+    retryVal = transInfo.retryNumber;\n+    int count = check getCount(dbClient, \"211\");\n+    check dbClient.close();\n+    return [retryVal, count, stmtAfterFailureExecuted];\n+}\n+\n+function testLocalTransactionUpdateWithGeneratedKeys(string jdbcURL, string user, string password) returns @tainted [int, int]|error?{\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int returnVal = 0;\n+    transactions:Info transInfo;\n+    retry (1) transaction {\n+        transInfo = transactions:info();\n+        var e1 = check dbClient->execute(\"Insert into Customers \" +\n+         \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 615, 5000.75, 'USA')\");\n+        var e2 =  check dbClient->execute(\"Insert into Customers \" +\n+        \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 615, 5000.75, 'USA')\");\n+        check commit;\n+    }\n+    returnVal = transInfo.retryNumber;\n+    //check whether update action is performed\n+    int count = check getCount(dbClient, \"615\");\n+    check dbClient.close();\n+    return [returnVal, count];\n+}\n+\n+function testLocalTransactionRollbackWithGeneratedKeys(string jdbcURL, string user, string password) returns @tainted [int, int]|error?{\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int returnVal = 0;\n+    transactions:Info transInfo;\n+    retry(1) transaction {\n+        transInfo = transactions:info();\n+        var e1 = check dbClient->execute(\"Insert into Customers \" +\n+         \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 615, 5000.75, 'USA')\");\n+        var e2 =  check dbClient->execute(\"Insert into Customers2 \" +\n+        \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 615, 5000.75, 'USA')\");\n+        check commit;\n+    }\n+    returnVal = transInfo.retryNumber;\n+    //check whether update action is performed\n+    int count = check getCount(dbClient, \"615\");\n+    check dbClient.close();\n+    return [returnVal, count];\n+}\n+\n+function testTransactionAbort(string jdbcURL, string user, string password) returns @tainted [int, int, int]|error?{\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    transactions:Info transInfo;\n+\n+    int abortVal = 0;\n+    var abortFunc = function(transactions:Info? info, error? cause, boolean willTry) {\n+        abortVal = -1;\n+    };\n+\n+    retry(1) transaction {\n+        transInfo = transactions:info();\n+        transactions:onRollback(abortFunc);\n+        var e1 = dbClient->execute(\"Insert into Customers \" +\n+         \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 220, 5000.75, 'USA')\");\n+        var e2 =  dbClient->execute(\"Insert into Customers \" +\n+        \"(firstName,lastName,registrationID,creditLimit,country) values ('James', 'Clerk', 220, 5000.75, 'USA')\");\n+        int i = 0;\n+        if (i == 0) {\n+            rollback;\n+        } else {\n+            check commit;\n+        }\n+    }\n+    int returnVal = transInfo.retryNumber;\n+    //check whether update action is performed\n+    int count = check getCount(dbClient, \"220\");\n+    check dbClient.close();\n+    return [returnVal, abortVal, count];\n+}\n+\n+int testTransactionErrorPanicRetVal = 0;\n+function testTransactionErrorPanic(string jdbcURL, string user, string password) returns @tainted [int, int, int]|error? {\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    int returnVal = 0;\n+    int catchValue = 0;\n+    var ret = trap testTransactionErrorPanicHelper(dbClient);\n+    io:println(ret);\n+    if (ret is error) {\n+        catchValue = -1;\n+    }\n+    //check whether update action is performed\n+    int count = check getCount(dbClient, \"260\");\n+    check dbClient.close();\n+    return [testTransactionErrorPanicRetVal, catchValue, count];\n+}\n+\n+function testTransactionErrorPanicHelper(jdbc:Client dbClient) {\n+    int returnVal = 0;\n+    transactions:Info transInfo;\n+    retry(1) transaction {\n+        transInfo = transactions:info();\n+        var e1 = dbClient->execute(\"Insert into Customers (firstName,lastName,\" +\n+                              \"registrationID,creditLimit,country) values ('James', 'Clerk', 260, 5000.75, 'USA')\");\n+        int i = 0;\n+        if (i == 0) {\n+            error e = error(\"error\");\n+            panic e;\n+        } else {\n+            var r = commit;\n+        }\n+    }\n+    io:println(\"exec\");\n+    testTransactionErrorPanicRetVal = transInfo.retryNumber;\n+}\n+\n+function testTransactionErrorPanicAndTrap(string jdbcURL, string user, string password) returns @tainted [int, int, int]|error? {\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+\n+    int catchValue = 0;\n+    transactions:Info transInfo;\n+    retry (1) transaction {\n+        transInfo = transactions:info();\n+        var e1 = dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,\" +\n+                 \"creditLimit,country) values ('James', 'Clerk', 250, 5000.75, 'USA')\");\n+        var ret = trap testTransactionErrorPanicAndTrapHelper(0);\n+        if (ret is error) {\n+            catchValue = -1;\n+        }\n+        check commit;\n+    }\n+    int returnVal = transInfo.retryNumber;\n+    //check whether update action is performed\n+    int count = check getCount(dbClient, \"250\");\n+    check dbClient.close();\n+    return [returnVal, catchValue, count];\n+}\n+\n+function testTransactionErrorPanicAndTrapHelper(int i) {\n+    if (i == 0) {\n+        error err = error(\"error\");\n+        panic err;\n+    }\n+}\n+\n+function testTwoTransactions(string jdbcURL, string user, string password) returns @tainted [int, int, int]|error? {\n+    jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+\n+     transactions:Info transInfo1;\n+     transactions:Info transInfo2;\n+     retry (1) transaction {\n+         transInfo1 = transactions:info();\n+         var e1 = check dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,creditLimit,country) \" +\n+                             \"values ('James', 'Clerk', 400, 5000.75, 'USA')\");\n+         var e2 = check dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,creditLimit,country) \" +\n+                             \"values ('James', 'Clerk', 400, 5000.75, 'USA')\");\n+         check commit;\n+     }\n+     int returnVal1 = transInfo1.retryNumber;\n+\n+     retry(1) transaction {\n+         transInfo2 = transactions:info();\n+         var e1 = dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,creditLimit,country) \" +\n+                             \"values ('James', 'Clerk', 400, 5000.75, 'USA')\");\n+         var e2 = dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,creditLimit,country) \" +\n+                             \"values ('James', 'Clerk', 400, 5000.75, 'USA')\");\n+         check commit;\n+     }\n+     int returnVal2 = transInfo2.retryNumber;\n+\n+     //check whether update action is performed\n+     int count = check getCount(dbClient, \"400\");\n+     check dbClient.close();\n+     return [returnVal1, returnVal2, count];\n+ }\n+\n+function testTransactionWithoutHandlers(string jdbcURL, string user, string password) returns @tainted [int]|error? {\n+   jdbc:Client dbClient = check new (url = jdbcURL, user = user, password = password);\n+    transaction {\n+        var e1 = check dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,creditLimit,country) \" +\n+                            \"values ('James', 'Clerk', 350, 5000.75, 'USA')\");\n+        var e2 = check dbClient->execute(\"Insert into Customers (firstName,lastName,registrationID,creditLimit,country) \" +\n+                            \"values ('James', 'Clerk', 350, 5000.75, 'USA')\");\n+        check commit;\n+    }\n+    //check whether update action is performed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 268}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI1NzA2OnYy", "diffSide": "RIGHT", "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0MTo0N1rOGjMfPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0MTo0N1rOGjMfPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1Nzk1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This module provides the functionality required to access and manipulate data stored in MySQL database.  \n          \n          \n            \n            This module provides the functionality required to access and manipulate data stored in a MySQL database.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439557951", "createdAt": "2020-06-12T17:41:47Z", "author": {"login": "praneesha"}, "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "diffHunk": "@@ -0,0 +1,87 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in MySQL database.  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI1NzcxOnYy", "diffSide": "RIGHT", "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0MTo1OVrOGjMfrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0MTo1OVrOGjMfrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1ODA2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            **Prerequisite:** Please add the MySQL driver jar as a native library dependency in your Ballerina project. \n          \n          \n            \n            **Prerequisite:** Add the MySQL driver JAR as a native library dependency in your Ballerina project.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439558061", "createdAt": "2020-06-12T17:41:59Z", "author": {"login": "praneesha"}, "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "diffHunk": "@@ -0,0 +1,87 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in MySQL database.  \n+\n+**Prerequisite:** Please add the MySQL driver jar as a native library dependency in your Ballerina project. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI1ODQxOnYy", "diffSide": "RIGHT", "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0MjoxMlrOGjMgGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0MjoxMlrOGjMgGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1ODE2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This module uses database properties from MySQL version 8.0.x onwards. Therefore, it is recommended to use a \n          \n          \n            \n            This module uses database properties from the MySQL version 8.0.x onwards. Therefore, it is recommended to use a", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439558168", "createdAt": "2020-06-12T17:42:12Z", "author": {"login": "praneesha"}, "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "diffHunk": "@@ -0,0 +1,87 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in MySQL database.  \n+\n+**Prerequisite:** Please add the MySQL driver jar as a native library dependency in your Ballerina project. \n+This module uses database properties from MySQL version 8.0.x onwards. Therefore, it is recommended to use a ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI1OTAzOnYy", "diffSide": "RIGHT", "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0MjoyNFrOGjMgeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0MjoyNFrOGjMgeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1ODI2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            MySQL driver version greater than 8.0.x. Then, once you build the project with `ballerina build`\n          \n          \n            \n            MySQL driver version greater than 8.0.x. Then, once you build the project by executing the `ballerina build`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439558265", "createdAt": "2020-06-12T17:42:24Z", "author": {"login": "praneesha"}, "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "diffHunk": "@@ -0,0 +1,87 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in MySQL database.  \n+\n+**Prerequisite:** Please add the MySQL driver jar as a native library dependency in your Ballerina project. \n+This module uses database properties from MySQL version 8.0.x onwards. Therefore, it is recommended to use a \n+MySQL driver version greater than 8.0.x. Then, once you build the project with `ballerina build`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI1OTgyOnYy", "diffSide": "RIGHT", "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0Mjo0MFrOGjMhAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0Mjo0MFrOGjMhAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1ODQwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            command, you should be able to run the resultant jar with, the `java -jar` command.\n          \n          \n            \n            command, you should be able to run the resultant JAR by executing the `java -jar` command.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439558402", "createdAt": "2020-06-12T17:42:40Z", "author": {"login": "praneesha"}, "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "diffHunk": "@@ -0,0 +1,87 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in MySQL database.  \n+\n+**Prerequisite:** Please add the MySQL driver jar as a native library dependency in your Ballerina project. \n+This module uses database properties from MySQL version 8.0.x onwards. Therefore, it is recommended to use a \n+MySQL driver version greater than 8.0.x. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI2MDM4OnYy", "diffSide": "RIGHT", "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0Mjo1M1rOGjMhZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0Mjo1M1rOGjMhZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1ODUwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            e.g. Ballerina.toml content.\n          \n          \n            \n            E.g., The `Ballerina.toml` content.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439558500", "createdAt": "2020-06-12T17:42:53Z", "author": {"login": "praneesha"}, "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "diffHunk": "@@ -0,0 +1,87 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in MySQL database.  \n+\n+**Prerequisite:** Please add the MySQL driver jar as a native library dependency in your Ballerina project. \n+This module uses database properties from MySQL version 8.0.x onwards. Therefore, it is recommended to use a \n+MySQL driver version greater than 8.0.x. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.\n+\n+e.g. Ballerina.toml content.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI2MDk4OnYy", "diffSide": "RIGHT", "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0MzowMlrOGjMhuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0MzowMlrOGjMhuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1ODU4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Please change the path to the JDBC driver appropriately.\n          \n          \n            \n            Change the path to the JDBC driver appropriately.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439558587", "createdAt": "2020-06-12T17:43:02Z", "author": {"login": "praneesha"}, "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "diffHunk": "@@ -0,0 +1,87 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in MySQL database.  \n+\n+**Prerequisite:** Please add the MySQL driver jar as a native library dependency in your Ballerina project. \n+This module uses database properties from MySQL version 8.0.x onwards. Therefore, it is recommended to use a \n+MySQL driver version greater than 8.0.x. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.\n+\n+e.g. Ballerina.toml content.\n+Please change the path to the JDBC driver appropriately.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI2MjI0OnYy", "diffSide": "RIGHT", "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0MzoyNlrOGjMifw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0MzoyNlrOGjMifw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1ODc4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Or, if you're trying to run a single bal file, you can copy the JDBC driver into `${BALLERINA_HOME}/bre/lib` and \n          \n          \n            \n            Else, if you're trying to run a single BAL file, you can copy the JDBC driver into the `${BALLERINA_HOME}/bre/lib` directory and", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439558783", "createdAt": "2020-06-12T17:43:26Z", "author": {"login": "praneesha"}, "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "diffHunk": "@@ -0,0 +1,87 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in MySQL database.  \n+\n+**Prerequisite:** Please add the MySQL driver jar as a native library dependency in your Ballerina project. \n+This module uses database properties from MySQL version 8.0.x onwards. Therefore, it is recommended to use a \n+MySQL driver version greater than 8.0.x. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.\n+\n+e.g. Ballerina.toml content.\n+Please change the path to the JDBC driver appropriately.\n+\n+```toml\n+[project]\n+org-name= \"sample\"\n+version= \"0.1.0\"\n+\n+[platform]\n+target = \"java8\"\n+\n+    [[platform.libraries]]\n+    artafactId = \"mysql-connector-java\"\n+    version = \"8.0.17\"\n+    path = \"/path/to/mysql-connector-java-8.0.17.jar\"\n+    groupId = \"mysql\"\n+    modules = [\"samplemodule\"]\n+``` \n+\n+Or, if you're trying to run a single bal file, you can copy the JDBC driver into `${BALLERINA_HOME}/bre/lib` and ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI2MzAxOnYy", "diffSide": "RIGHT", "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0Mzo0MlrOGjMi9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0Mzo0MlrOGjMi9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1ODkwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            run the bal file with `ballerina run` command.\n          \n          \n            \n            run the BAL file by executing the `ballerina run` command.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439558903", "createdAt": "2020-06-12T17:43:42Z", "author": {"login": "praneesha"}, "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "diffHunk": "@@ -0,0 +1,87 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in MySQL database.  \n+\n+**Prerequisite:** Please add the MySQL driver jar as a native library dependency in your Ballerina project. \n+This module uses database properties from MySQL version 8.0.x onwards. Therefore, it is recommended to use a \n+MySQL driver version greater than 8.0.x. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.\n+\n+e.g. Ballerina.toml content.\n+Please change the path to the JDBC driver appropriately.\n+\n+```toml\n+[project]\n+org-name= \"sample\"\n+version= \"0.1.0\"\n+\n+[platform]\n+target = \"java8\"\n+\n+    [[platform.libraries]]\n+    artafactId = \"mysql-connector-java\"\n+    version = \"8.0.17\"\n+    path = \"/path/to/mysql-connector-java-8.0.17.jar\"\n+    groupId = \"mysql\"\n+    modules = [\"samplemodule\"]\n+``` \n+\n+Or, if you're trying to run a single bal file, you can copy the JDBC driver into `${BALLERINA_HOME}/bre/lib` and \n+run the bal file with `ballerina run` command.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI2NDMxOnYy", "diffSide": "RIGHT", "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0NDoxMFrOGjMj0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0NDoxMFrOGjMj0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1OTEyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The client can be created with empty constructor, and hence the client will be initialized with default properties. \n          \n          \n            \n            The client can be created with an empty constructor and hence, the client will be initialized with the default properties.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439559123", "createdAt": "2020-06-12T17:44:10Z", "author": {"login": "praneesha"}, "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "diffHunk": "@@ -0,0 +1,87 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in MySQL database.  \n+\n+**Prerequisite:** Please add the MySQL driver jar as a native library dependency in your Ballerina project. \n+This module uses database properties from MySQL version 8.0.x onwards. Therefore, it is recommended to use a \n+MySQL driver version greater than 8.0.x. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.\n+\n+e.g. Ballerina.toml content.\n+Please change the path to the JDBC driver appropriately.\n+\n+```toml\n+[project]\n+org-name= \"sample\"\n+version= \"0.1.0\"\n+\n+[platform]\n+target = \"java8\"\n+\n+    [[platform.libraries]]\n+    artafactId = \"mysql-connector-java\"\n+    version = \"8.0.17\"\n+    path = \"/path/to/mysql-connector-java-8.0.17.jar\"\n+    groupId = \"mysql\"\n+    modules = [\"samplemodule\"]\n+``` \n+\n+Or, if you're trying to run a single bal file, you can copy the JDBC driver into `${BALLERINA_HOME}/bre/lib` and \n+run the bal file with `ballerina run` command.\n+\n+### Client\n+To access a database, you must first create a \n+[mysql:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/mysql/clients/Client.html) object. \n+The examples for creating a MySQL client can be found below.\n+\n+#### Creating a client\n+This example shows different ways of creating the `mysql:Client`. \n+\n+The client can be created with empty constructor, and hence the client will be initialized with default properties. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI2NDcxOnYy", "diffSide": "RIGHT", "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0NDoxOFrOGjMkEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0NDoxOFrOGjMkEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1OTE4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The first example with `dbClient1` demonstrates this.\n          \n          \n            \n            The first example with the `dbClient1` demonstrates this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439559186", "createdAt": "2020-06-12T17:44:18Z", "author": {"login": "praneesha"}, "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "diffHunk": "@@ -0,0 +1,87 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in MySQL database.  \n+\n+**Prerequisite:** Please add the MySQL driver jar as a native library dependency in your Ballerina project. \n+This module uses database properties from MySQL version 8.0.x onwards. Therefore, it is recommended to use a \n+MySQL driver version greater than 8.0.x. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.\n+\n+e.g. Ballerina.toml content.\n+Please change the path to the JDBC driver appropriately.\n+\n+```toml\n+[project]\n+org-name= \"sample\"\n+version= \"0.1.0\"\n+\n+[platform]\n+target = \"java8\"\n+\n+    [[platform.libraries]]\n+    artafactId = \"mysql-connector-java\"\n+    version = \"8.0.17\"\n+    path = \"/path/to/mysql-connector-java-8.0.17.jar\"\n+    groupId = \"mysql\"\n+    modules = [\"samplemodule\"]\n+``` \n+\n+Or, if you're trying to run a single bal file, you can copy the JDBC driver into `${BALLERINA_HOME}/bre/lib` and \n+run the bal file with `ballerina run` command.\n+\n+### Client\n+To access a database, you must first create a \n+[mysql:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/mysql/clients/Client.html) object. \n+The examples for creating a MySQL client can be found below.\n+\n+#### Creating a client\n+This example shows different ways of creating the `mysql:Client`. \n+\n+The client can be created with empty constructor, and hence the client will be initialized with default properties. \n+The first example with `dbClient1` demonstrates this.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI2NTQ1OnYy", "diffSide": "RIGHT", "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0NDozNFrOGjMkhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0NDozNFrOGjMkhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1OTMwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `dbClient2` receives host, user and password. Since the properties are passed in the same order as it is defined \n          \n          \n            \n            The `dbClient2` receives the host, username, and password. Since the properties are passed in the same order as it is defined", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439559300", "createdAt": "2020-06-12T17:44:34Z", "author": {"login": "praneesha"}, "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "diffHunk": "@@ -0,0 +1,87 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in MySQL database.  \n+\n+**Prerequisite:** Please add the MySQL driver jar as a native library dependency in your Ballerina project. \n+This module uses database properties from MySQL version 8.0.x onwards. Therefore, it is recommended to use a \n+MySQL driver version greater than 8.0.x. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.\n+\n+e.g. Ballerina.toml content.\n+Please change the path to the JDBC driver appropriately.\n+\n+```toml\n+[project]\n+org-name= \"sample\"\n+version= \"0.1.0\"\n+\n+[platform]\n+target = \"java8\"\n+\n+    [[platform.libraries]]\n+    artafactId = \"mysql-connector-java\"\n+    version = \"8.0.17\"\n+    path = \"/path/to/mysql-connector-java-8.0.17.jar\"\n+    groupId = \"mysql\"\n+    modules = [\"samplemodule\"]\n+``` \n+\n+Or, if you're trying to run a single bal file, you can copy the JDBC driver into `${BALLERINA_HOME}/bre/lib` and \n+run the bal file with `ballerina run` command.\n+\n+### Client\n+To access a database, you must first create a \n+[mysql:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/mysql/clients/Client.html) object. \n+The examples for creating a MySQL client can be found below.\n+\n+#### Creating a client\n+This example shows different ways of creating the `mysql:Client`. \n+\n+The client can be created with empty constructor, and hence the client will be initialized with default properties. \n+The first example with `dbClient1` demonstrates this.\n+\n+The `dbClient2` receives host, user and password. Since the properties are passed in the same order as it is defined ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI2NTkzOnYy", "diffSide": "RIGHT", "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0NDo0M1rOGjMk2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0NDo0M1rOGjMk2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1OTM4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            in the `jdbc:Client` you can pass it without named params.\n          \n          \n            \n            in the `jdbc:Client`, you can pass it without named params.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439559384", "createdAt": "2020-06-12T17:44:43Z", "author": {"login": "praneesha"}, "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "diffHunk": "@@ -0,0 +1,87 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in MySQL database.  \n+\n+**Prerequisite:** Please add the MySQL driver jar as a native library dependency in your Ballerina project. \n+This module uses database properties from MySQL version 8.0.x onwards. Therefore, it is recommended to use a \n+MySQL driver version greater than 8.0.x. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.\n+\n+e.g. Ballerina.toml content.\n+Please change the path to the JDBC driver appropriately.\n+\n+```toml\n+[project]\n+org-name= \"sample\"\n+version= \"0.1.0\"\n+\n+[platform]\n+target = \"java8\"\n+\n+    [[platform.libraries]]\n+    artafactId = \"mysql-connector-java\"\n+    version = \"8.0.17\"\n+    path = \"/path/to/mysql-connector-java-8.0.17.jar\"\n+    groupId = \"mysql\"\n+    modules = [\"samplemodule\"]\n+``` \n+\n+Or, if you're trying to run a single bal file, you can copy the JDBC driver into `${BALLERINA_HOME}/bre/lib` and \n+run the bal file with `ballerina run` command.\n+\n+### Client\n+To access a database, you must first create a \n+[mysql:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/mysql/clients/Client.html) object. \n+The examples for creating a MySQL client can be found below.\n+\n+#### Creating a client\n+This example shows different ways of creating the `mysql:Client`. \n+\n+The client can be created with empty constructor, and hence the client will be initialized with default properties. \n+The first example with `dbClient1` demonstrates this.\n+\n+The `dbClient2` receives host, user and password. Since the properties are passed in the same order as it is defined \n+in the `jdbc:Client` you can pass it without named params.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI2NzMxOnYy", "diffSide": "RIGHT", "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0NTowOVrOGjMlrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0NTowOVrOGjMlrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1OTU5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Similarly `dbClient4` uses the named params, and it provides a unshared connection pool in the type of \n          \n          \n            \n            Similarly, the `dbClient4` uses the named params and it provides an unshared connection pool in the type of", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439559597", "createdAt": "2020-06-12T17:45:09Z", "author": {"login": "praneesha"}, "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "diffHunk": "@@ -0,0 +1,87 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in MySQL database.  \n+\n+**Prerequisite:** Please add the MySQL driver jar as a native library dependency in your Ballerina project. \n+This module uses database properties from MySQL version 8.0.x onwards. Therefore, it is recommended to use a \n+MySQL driver version greater than 8.0.x. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.\n+\n+e.g. Ballerina.toml content.\n+Please change the path to the JDBC driver appropriately.\n+\n+```toml\n+[project]\n+org-name= \"sample\"\n+version= \"0.1.0\"\n+\n+[platform]\n+target = \"java8\"\n+\n+    [[platform.libraries]]\n+    artafactId = \"mysql-connector-java\"\n+    version = \"8.0.17\"\n+    path = \"/path/to/mysql-connector-java-8.0.17.jar\"\n+    groupId = \"mysql\"\n+    modules = [\"samplemodule\"]\n+``` \n+\n+Or, if you're trying to run a single bal file, you can copy the JDBC driver into `${BALLERINA_HOME}/bre/lib` and \n+run the bal file with `ballerina run` command.\n+\n+### Client\n+To access a database, you must first create a \n+[mysql:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/mysql/clients/Client.html) object. \n+The examples for creating a MySQL client can be found below.\n+\n+#### Creating a client\n+This example shows different ways of creating the `mysql:Client`. \n+\n+The client can be created with empty constructor, and hence the client will be initialized with default properties. \n+The first example with `dbClient1` demonstrates this.\n+\n+The `dbClient2` receives host, user and password. Since the properties are passed in the same order as it is defined \n+in the `jdbc:Client` you can pass it without named params.\n+\n+The `dbClient3` uses the named params to pass the attributes since it is skipping some params in the constructor. \n+Further [mysql:Options](https://ballerina.io/learn/api-docs/ballerina/api-docs/mysql/records/Options.html) \n+is passed to configure the SSL and connection timeout in the MySQL client. \n+\n+Similarly `dbClient4` uses the named params, and it provides a unshared connection pool in the type of ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI2ODYzOnYy", "diffSide": "RIGHT", "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0NTozN1rOGjMmjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0NTozN1rOGjMmjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1OTgyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            to get more details about connection pooling.\n          \n          \n            \n            For more details about connection pooling, see the [SQL Module](https://ballerina.io/learn/api-docs/ballerina/sql/index.html).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439559821", "createdAt": "2020-06-12T17:45:37Z", "author": {"login": "praneesha"}, "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "diffHunk": "@@ -0,0 +1,87 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in MySQL database.  \n+\n+**Prerequisite:** Please add the MySQL driver jar as a native library dependency in your Ballerina project. \n+This module uses database properties from MySQL version 8.0.x onwards. Therefore, it is recommended to use a \n+MySQL driver version greater than 8.0.x. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.\n+\n+e.g. Ballerina.toml content.\n+Please change the path to the JDBC driver appropriately.\n+\n+```toml\n+[project]\n+org-name= \"sample\"\n+version= \"0.1.0\"\n+\n+[platform]\n+target = \"java8\"\n+\n+    [[platform.libraries]]\n+    artafactId = \"mysql-connector-java\"\n+    version = \"8.0.17\"\n+    path = \"/path/to/mysql-connector-java-8.0.17.jar\"\n+    groupId = \"mysql\"\n+    modules = [\"samplemodule\"]\n+``` \n+\n+Or, if you're trying to run a single bal file, you can copy the JDBC driver into `${BALLERINA_HOME}/bre/lib` and \n+run the bal file with `ballerina run` command.\n+\n+### Client\n+To access a database, you must first create a \n+[mysql:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/mysql/clients/Client.html) object. \n+The examples for creating a MySQL client can be found below.\n+\n+#### Creating a client\n+This example shows different ways of creating the `mysql:Client`. \n+\n+The client can be created with empty constructor, and hence the client will be initialized with default properties. \n+The first example with `dbClient1` demonstrates this.\n+\n+The `dbClient2` receives host, user and password. Since the properties are passed in the same order as it is defined \n+in the `jdbc:Client` you can pass it without named params.\n+\n+The `dbClient3` uses the named params to pass the attributes since it is skipping some params in the constructor. \n+Further [mysql:Options](https://ballerina.io/learn/api-docs/ballerina/api-docs/mysql/records/Options.html) \n+is passed to configure the SSL and connection timeout in the MySQL client. \n+\n+Similarly `dbClient4` uses the named params, and it provides a unshared connection pool in the type of \n+[sql:ConnectionPool](https://ballerina.io/learn/api-docs/ballerina/api-docs/sql/records/ConnectionPool.html) \n+to be used within the client. Please refer [SQL Module](https://ballerina.io/learn/api-docs/ballerina/sql/index.html) \n+to get more details about connection pooling.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI2OTE5OnYy", "diffSide": "RIGHT", "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0NTo0OVrOGjMm5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0NTo0OVrOGjMm5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1OTkxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            to be used within the client. Please refer [SQL Module](https://ballerina.io/learn/api-docs/ballerina/sql/index.html) \n          \n          \n            \n            to be used within the client.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439559910", "createdAt": "2020-06-12T17:45:49Z", "author": {"login": "praneesha"}, "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "diffHunk": "@@ -0,0 +1,87 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in MySQL database.  \n+\n+**Prerequisite:** Please add the MySQL driver jar as a native library dependency in your Ballerina project. \n+This module uses database properties from MySQL version 8.0.x onwards. Therefore, it is recommended to use a \n+MySQL driver version greater than 8.0.x. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.\n+\n+e.g. Ballerina.toml content.\n+Please change the path to the JDBC driver appropriately.\n+\n+```toml\n+[project]\n+org-name= \"sample\"\n+version= \"0.1.0\"\n+\n+[platform]\n+target = \"java8\"\n+\n+    [[platform.libraries]]\n+    artafactId = \"mysql-connector-java\"\n+    version = \"8.0.17\"\n+    path = \"/path/to/mysql-connector-java-8.0.17.jar\"\n+    groupId = \"mysql\"\n+    modules = [\"samplemodule\"]\n+``` \n+\n+Or, if you're trying to run a single bal file, you can copy the JDBC driver into `${BALLERINA_HOME}/bre/lib` and \n+run the bal file with `ballerina run` command.\n+\n+### Client\n+To access a database, you must first create a \n+[mysql:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/mysql/clients/Client.html) object. \n+The examples for creating a MySQL client can be found below.\n+\n+#### Creating a client\n+This example shows different ways of creating the `mysql:Client`. \n+\n+The client can be created with empty constructor, and hence the client will be initialized with default properties. \n+The first example with `dbClient1` demonstrates this.\n+\n+The `dbClient2` receives host, user and password. Since the properties are passed in the same order as it is defined \n+in the `jdbc:Client` you can pass it without named params.\n+\n+The `dbClient3` uses the named params to pass the attributes since it is skipping some params in the constructor. \n+Further [mysql:Options](https://ballerina.io/learn/api-docs/ballerina/api-docs/mysql/records/Options.html) \n+is passed to configure the SSL and connection timeout in the MySQL client. \n+\n+Similarly `dbClient4` uses the named params, and it provides a unshared connection pool in the type of \n+[sql:ConnectionPool](https://ballerina.io/learn/api-docs/ballerina/api-docs/sql/records/ConnectionPool.html) \n+to be used within the client. Please refer [SQL Module](https://ballerina.io/learn/api-docs/ballerina/sql/index.html) ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI2OTg3OnYy", "diffSide": "RIGHT", "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0NjowMVrOGjMnVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0NjowMVrOGjMnVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2MDAyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You can find more details about each property in \n          \n          \n            \n            You can find more details about each property in the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439560021", "createdAt": "2020-06-12T17:46:01Z", "author": {"login": "praneesha"}, "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "diffHunk": "@@ -0,0 +1,87 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in MySQL database.  \n+\n+**Prerequisite:** Please add the MySQL driver jar as a native library dependency in your Ballerina project. \n+This module uses database properties from MySQL version 8.0.x onwards. Therefore, it is recommended to use a \n+MySQL driver version greater than 8.0.x. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.\n+\n+e.g. Ballerina.toml content.\n+Please change the path to the JDBC driver appropriately.\n+\n+```toml\n+[project]\n+org-name= \"sample\"\n+version= \"0.1.0\"\n+\n+[platform]\n+target = \"java8\"\n+\n+    [[platform.libraries]]\n+    artafactId = \"mysql-connector-java\"\n+    version = \"8.0.17\"\n+    path = \"/path/to/mysql-connector-java-8.0.17.jar\"\n+    groupId = \"mysql\"\n+    modules = [\"samplemodule\"]\n+``` \n+\n+Or, if you're trying to run a single bal file, you can copy the JDBC driver into `${BALLERINA_HOME}/bre/lib` and \n+run the bal file with `ballerina run` command.\n+\n+### Client\n+To access a database, you must first create a \n+[mysql:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/mysql/clients/Client.html) object. \n+The examples for creating a MySQL client can be found below.\n+\n+#### Creating a client\n+This example shows different ways of creating the `mysql:Client`. \n+\n+The client can be created with empty constructor, and hence the client will be initialized with default properties. \n+The first example with `dbClient1` demonstrates this.\n+\n+The `dbClient2` receives host, user and password. Since the properties are passed in the same order as it is defined \n+in the `jdbc:Client` you can pass it without named params.\n+\n+The `dbClient3` uses the named params to pass the attributes since it is skipping some params in the constructor. \n+Further [mysql:Options](https://ballerina.io/learn/api-docs/ballerina/api-docs/mysql/records/Options.html) \n+is passed to configure the SSL and connection timeout in the MySQL client. \n+\n+Similarly `dbClient4` uses the named params, and it provides a unshared connection pool in the type of \n+[sql:ConnectionPool](https://ballerina.io/learn/api-docs/ballerina/api-docs/sql/records/ConnectionPool.html) \n+to be used within the client. Please refer [SQL Module](https://ballerina.io/learn/api-docs/ballerina/sql/index.html) \n+to get more details about connection pooling.\n+\n+```ballerina\n+mysql:Client dbClient1 = new ();\n+mysql:Client dbClient2 = new (\"localhost\", \"rootUser\", \"rooPass\", \n+                              \"information_schema\", 3306);\n+                              \n+mysql:Options mysqlOptions = {\n+  ssl: {\n+    mode: mysql:SSL_PREFERRED\n+  },\n+  connectTimeoutInSeconds: 10\n+};\n+mysql:Client dbClient3 = new (user = \"rootUser\", password = \"rootPass\",\n+                              options = mysqlOptions);\n+mysql:Client dbClient3 = new (user = \"rootUser\", password = \"rootPass\",\n+                              connectionPool = {maxOpenConnections: 5});\n+```\n+You can find more details about each property in ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI3MDY2OnYy", "diffSide": "RIGHT", "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0NjoxOFrOGjMn3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0NjoxOFrOGjMn3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2MDE1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [sql:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/sql/clients/Client.html) and hence all operations \n          \n          \n            \n            [sql:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/sql/clients/Client.html) and all the operations", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439560157", "createdAt": "2020-06-12T17:46:18Z", "author": {"login": "praneesha"}, "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "diffHunk": "@@ -0,0 +1,87 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in MySQL database.  \n+\n+**Prerequisite:** Please add the MySQL driver jar as a native library dependency in your Ballerina project. \n+This module uses database properties from MySQL version 8.0.x onwards. Therefore, it is recommended to use a \n+MySQL driver version greater than 8.0.x. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.\n+\n+e.g. Ballerina.toml content.\n+Please change the path to the JDBC driver appropriately.\n+\n+```toml\n+[project]\n+org-name= \"sample\"\n+version= \"0.1.0\"\n+\n+[platform]\n+target = \"java8\"\n+\n+    [[platform.libraries]]\n+    artafactId = \"mysql-connector-java\"\n+    version = \"8.0.17\"\n+    path = \"/path/to/mysql-connector-java-8.0.17.jar\"\n+    groupId = \"mysql\"\n+    modules = [\"samplemodule\"]\n+``` \n+\n+Or, if you're trying to run a single bal file, you can copy the JDBC driver into `${BALLERINA_HOME}/bre/lib` and \n+run the bal file with `ballerina run` command.\n+\n+### Client\n+To access a database, you must first create a \n+[mysql:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/mysql/clients/Client.html) object. \n+The examples for creating a MySQL client can be found below.\n+\n+#### Creating a client\n+This example shows different ways of creating the `mysql:Client`. \n+\n+The client can be created with empty constructor, and hence the client will be initialized with default properties. \n+The first example with `dbClient1` demonstrates this.\n+\n+The `dbClient2` receives host, user and password. Since the properties are passed in the same order as it is defined \n+in the `jdbc:Client` you can pass it without named params.\n+\n+The `dbClient3` uses the named params to pass the attributes since it is skipping some params in the constructor. \n+Further [mysql:Options](https://ballerina.io/learn/api-docs/ballerina/api-docs/mysql/records/Options.html) \n+is passed to configure the SSL and connection timeout in the MySQL client. \n+\n+Similarly `dbClient4` uses the named params, and it provides a unshared connection pool in the type of \n+[sql:ConnectionPool](https://ballerina.io/learn/api-docs/ballerina/api-docs/sql/records/ConnectionPool.html) \n+to be used within the client. Please refer [SQL Module](https://ballerina.io/learn/api-docs/ballerina/sql/index.html) \n+to get more details about connection pooling.\n+\n+```ballerina\n+mysql:Client dbClient1 = new ();\n+mysql:Client dbClient2 = new (\"localhost\", \"rootUser\", \"rooPass\", \n+                              \"information_schema\", 3306);\n+                              \n+mysql:Options mysqlOptions = {\n+  ssl: {\n+    mode: mysql:SSL_PREFERRED\n+  },\n+  connectTimeoutInSeconds: 10\n+};\n+mysql:Client dbClient3 = new (user = \"rootUser\", password = \"rootPass\",\n+                              options = mysqlOptions);\n+mysql:Client dbClient3 = new (user = \"rootUser\", password = \"rootPass\",\n+                              connectionPool = {maxOpenConnections: 5});\n+```\n+You can find more details about each property in \n+[mysql:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/mysql/clients/Client.html) constructor. \n+\n+The [mysql:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/mysql/clients/Client.html) references \n+[sql:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/sql/clients/Client.html) and hence all operations ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI3MTA3OnYy", "diffSide": "RIGHT", "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0NjoyNlrOGjMoKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0NjoyNlrOGjMoKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2MDIzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            defined by the `sql:Client` will be supported by `mysql:Client` as well. \n          \n          \n            \n            defined by the `sql:Client` will be supported by the `mysql:Client` as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439560232", "createdAt": "2020-06-12T17:46:26Z", "author": {"login": "praneesha"}, "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "diffHunk": "@@ -0,0 +1,87 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in MySQL database.  \n+\n+**Prerequisite:** Please add the MySQL driver jar as a native library dependency in your Ballerina project. \n+This module uses database properties from MySQL version 8.0.x onwards. Therefore, it is recommended to use a \n+MySQL driver version greater than 8.0.x. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.\n+\n+e.g. Ballerina.toml content.\n+Please change the path to the JDBC driver appropriately.\n+\n+```toml\n+[project]\n+org-name= \"sample\"\n+version= \"0.1.0\"\n+\n+[platform]\n+target = \"java8\"\n+\n+    [[platform.libraries]]\n+    artafactId = \"mysql-connector-java\"\n+    version = \"8.0.17\"\n+    path = \"/path/to/mysql-connector-java-8.0.17.jar\"\n+    groupId = \"mysql\"\n+    modules = [\"samplemodule\"]\n+``` \n+\n+Or, if you're trying to run a single bal file, you can copy the JDBC driver into `${BALLERINA_HOME}/bre/lib` and \n+run the bal file with `ballerina run` command.\n+\n+### Client\n+To access a database, you must first create a \n+[mysql:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/mysql/clients/Client.html) object. \n+The examples for creating a MySQL client can be found below.\n+\n+#### Creating a client\n+This example shows different ways of creating the `mysql:Client`. \n+\n+The client can be created with empty constructor, and hence the client will be initialized with default properties. \n+The first example with `dbClient1` demonstrates this.\n+\n+The `dbClient2` receives host, user and password. Since the properties are passed in the same order as it is defined \n+in the `jdbc:Client` you can pass it without named params.\n+\n+The `dbClient3` uses the named params to pass the attributes since it is skipping some params in the constructor. \n+Further [mysql:Options](https://ballerina.io/learn/api-docs/ballerina/api-docs/mysql/records/Options.html) \n+is passed to configure the SSL and connection timeout in the MySQL client. \n+\n+Similarly `dbClient4` uses the named params, and it provides a unshared connection pool in the type of \n+[sql:ConnectionPool](https://ballerina.io/learn/api-docs/ballerina/api-docs/sql/records/ConnectionPool.html) \n+to be used within the client. Please refer [SQL Module](https://ballerina.io/learn/api-docs/ballerina/sql/index.html) \n+to get more details about connection pooling.\n+\n+```ballerina\n+mysql:Client dbClient1 = new ();\n+mysql:Client dbClient2 = new (\"localhost\", \"rootUser\", \"rooPass\", \n+                              \"information_schema\", 3306);\n+                              \n+mysql:Options mysqlOptions = {\n+  ssl: {\n+    mode: mysql:SSL_PREFERRED\n+  },\n+  connectTimeoutInSeconds: 10\n+};\n+mysql:Client dbClient3 = new (user = \"rootUser\", password = \"rootPass\",\n+                              options = mysqlOptions);\n+mysql:Client dbClient3 = new (user = \"rootUser\", password = \"rootPass\",\n+                              connectionPool = {maxOpenConnections: 5});\n+```\n+You can find more details about each property in \n+[mysql:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/mysql/clients/Client.html) constructor. \n+\n+The [mysql:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/mysql/clients/Client.html) references \n+[sql:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/sql/clients/Client.html) and hence all operations \n+defined by the `sql:Client` will be supported by `mysql:Client` as well. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI3MzAyOnYy", "diffSide": "RIGHT", "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0NzoxMFrOGjMpcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0NzoxMFrOGjMpcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2MDU2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Please refer [SQL Module](https://ballerina.io/learn/api-docs/ballerina/sql/index.html) for more information on \n          \n          \n            \n            For more information on all the operations supported by the `mysql:Client`, which include the below, see the [SQL Module](https://ballerina.io/learn/api-docs/ballerina/sql/index.html).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439560561", "createdAt": "2020-06-12T17:47:10Z", "author": {"login": "praneesha"}, "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "diffHunk": "@@ -0,0 +1,87 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in MySQL database.  \n+\n+**Prerequisite:** Please add the MySQL driver jar as a native library dependency in your Ballerina project. \n+This module uses database properties from MySQL version 8.0.x onwards. Therefore, it is recommended to use a \n+MySQL driver version greater than 8.0.x. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.\n+\n+e.g. Ballerina.toml content.\n+Please change the path to the JDBC driver appropriately.\n+\n+```toml\n+[project]\n+org-name= \"sample\"\n+version= \"0.1.0\"\n+\n+[platform]\n+target = \"java8\"\n+\n+    [[platform.libraries]]\n+    artafactId = \"mysql-connector-java\"\n+    version = \"8.0.17\"\n+    path = \"/path/to/mysql-connector-java-8.0.17.jar\"\n+    groupId = \"mysql\"\n+    modules = [\"samplemodule\"]\n+``` \n+\n+Or, if you're trying to run a single bal file, you can copy the JDBC driver into `${BALLERINA_HOME}/bre/lib` and \n+run the bal file with `ballerina run` command.\n+\n+### Client\n+To access a database, you must first create a \n+[mysql:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/mysql/clients/Client.html) object. \n+The examples for creating a MySQL client can be found below.\n+\n+#### Creating a client\n+This example shows different ways of creating the `mysql:Client`. \n+\n+The client can be created with empty constructor, and hence the client will be initialized with default properties. \n+The first example with `dbClient1` demonstrates this.\n+\n+The `dbClient2` receives host, user and password. Since the properties are passed in the same order as it is defined \n+in the `jdbc:Client` you can pass it without named params.\n+\n+The `dbClient3` uses the named params to pass the attributes since it is skipping some params in the constructor. \n+Further [mysql:Options](https://ballerina.io/learn/api-docs/ballerina/api-docs/mysql/records/Options.html) \n+is passed to configure the SSL and connection timeout in the MySQL client. \n+\n+Similarly `dbClient4` uses the named params, and it provides a unshared connection pool in the type of \n+[sql:ConnectionPool](https://ballerina.io/learn/api-docs/ballerina/api-docs/sql/records/ConnectionPool.html) \n+to be used within the client. Please refer [SQL Module](https://ballerina.io/learn/api-docs/ballerina/sql/index.html) \n+to get more details about connection pooling.\n+\n+```ballerina\n+mysql:Client dbClient1 = new ();\n+mysql:Client dbClient2 = new (\"localhost\", \"rootUser\", \"rooPass\", \n+                              \"information_schema\", 3306);\n+                              \n+mysql:Options mysqlOptions = {\n+  ssl: {\n+    mode: mysql:SSL_PREFERRED\n+  },\n+  connectTimeoutInSeconds: 10\n+};\n+mysql:Client dbClient3 = new (user = \"rootUser\", password = \"rootPass\",\n+                              options = mysqlOptions);\n+mysql:Client dbClient3 = new (user = \"rootUser\", password = \"rootPass\",\n+                              connectionPool = {maxOpenConnections: 5});\n+```\n+You can find more details about each property in \n+[mysql:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/mysql/clients/Client.html) constructor. \n+\n+The [mysql:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/mysql/clients/Client.html) references \n+[sql:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/sql/clients/Client.html) and hence all operations \n+defined by the `sql:Client` will be supported by `mysql:Client` as well. \n+\n+Please refer [SQL Module](https://ballerina.io/learn/api-docs/ballerina/sql/index.html) for more information on ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI3MzQ3OnYy", "diffSide": "RIGHT", "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0NzoxOVrOGjMpuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0NzoxOVrOGjMpuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2MDYzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            all operations supported by `mysql:Client` which includes below.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439560633", "createdAt": "2020-06-12T17:47:19Z", "author": {"login": "praneesha"}, "path": "stdlib/database/mysql/src/main/ballerina/src/mysql/Module.md", "diffHunk": "@@ -0,0 +1,87 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in MySQL database.  \n+\n+**Prerequisite:** Please add the MySQL driver jar as a native library dependency in your Ballerina project. \n+This module uses database properties from MySQL version 8.0.x onwards. Therefore, it is recommended to use a \n+MySQL driver version greater than 8.0.x. Then, once you build the project with `ballerina build`\n+command, you should be able to run the resultant jar with, the `java -jar` command.\n+\n+e.g. Ballerina.toml content.\n+Please change the path to the JDBC driver appropriately.\n+\n+```toml\n+[project]\n+org-name= \"sample\"\n+version= \"0.1.0\"\n+\n+[platform]\n+target = \"java8\"\n+\n+    [[platform.libraries]]\n+    artafactId = \"mysql-connector-java\"\n+    version = \"8.0.17\"\n+    path = \"/path/to/mysql-connector-java-8.0.17.jar\"\n+    groupId = \"mysql\"\n+    modules = [\"samplemodule\"]\n+``` \n+\n+Or, if you're trying to run a single bal file, you can copy the JDBC driver into `${BALLERINA_HOME}/bre/lib` and \n+run the bal file with `ballerina run` command.\n+\n+### Client\n+To access a database, you must first create a \n+[mysql:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/mysql/clients/Client.html) object. \n+The examples for creating a MySQL client can be found below.\n+\n+#### Creating a client\n+This example shows different ways of creating the `mysql:Client`. \n+\n+The client can be created with empty constructor, and hence the client will be initialized with default properties. \n+The first example with `dbClient1` demonstrates this.\n+\n+The `dbClient2` receives host, user and password. Since the properties are passed in the same order as it is defined \n+in the `jdbc:Client` you can pass it without named params.\n+\n+The `dbClient3` uses the named params to pass the attributes since it is skipping some params in the constructor. \n+Further [mysql:Options](https://ballerina.io/learn/api-docs/ballerina/api-docs/mysql/records/Options.html) \n+is passed to configure the SSL and connection timeout in the MySQL client. \n+\n+Similarly `dbClient4` uses the named params, and it provides a unshared connection pool in the type of \n+[sql:ConnectionPool](https://ballerina.io/learn/api-docs/ballerina/api-docs/sql/records/ConnectionPool.html) \n+to be used within the client. Please refer [SQL Module](https://ballerina.io/learn/api-docs/ballerina/sql/index.html) \n+to get more details about connection pooling.\n+\n+```ballerina\n+mysql:Client dbClient1 = new ();\n+mysql:Client dbClient2 = new (\"localhost\", \"rootUser\", \"rooPass\", \n+                              \"information_schema\", 3306);\n+                              \n+mysql:Options mysqlOptions = {\n+  ssl: {\n+    mode: mysql:SSL_PREFERRED\n+  },\n+  connectTimeoutInSeconds: 10\n+};\n+mysql:Client dbClient3 = new (user = \"rootUser\", password = \"rootPass\",\n+                              options = mysqlOptions);\n+mysql:Client dbClient3 = new (user = \"rootUser\", password = \"rootPass\",\n+                              connectionPool = {maxOpenConnections: 5});\n+```\n+You can find more details about each property in \n+[mysql:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/mysql/clients/Client.html) constructor. \n+\n+The [mysql:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/mysql/clients/Client.html) references \n+[sql:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/sql/clients/Client.html) and hence all operations \n+defined by the `sql:Client` will be supported by `mysql:Client` as well. \n+\n+Please refer [SQL Module](https://ballerina.io/learn/api-docs/ballerina/sql/index.html) for more information on \n+all operations supported by `mysql:Client` which includes below. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI3ODU1OnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0ODo1M1rOGjMs7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0ODo1M1rOGjMs7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2MTQ1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This module provides the common interface and functionality to interact with database. The corresponding database\n          \n          \n            \n            This module provides the common interface and functionality to interact with a database. The corresponding database", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439561455", "createdAt": "2020-06-12T17:48:53Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI3ODk0OnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0OTowNFrOGjMtNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0OTowNFrOGjMtNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2MTUyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n          \n          \n            \n            clients can be created by using specific database modules such as `MySQL` or using the Java Database Connectivity", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439561526", "createdAt": "2020-06-12T17:49:04Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI4MDI5OnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0OToyOFrOGjMuBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0OToyOFrOGjMuBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2MTczNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n          \n          \n            \n            This module can be used to connect with any database by simply providing the JDBC URL and the other related properties.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439561734", "createdAt": "2020-06-12T17:49:28Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI4MTQ4OnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0OTo0N1rOGjMutg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0OTo0N1rOGjMutg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2MTkxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n          \n          \n            \n            For more details, see the [JDBC module] (https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439561910", "createdAt": "2020-06-12T17:49:47Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI4MTk0OnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0OTo1NlrOGjMvAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0OTo1NlrOGjMvAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2MTk4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            more details.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439561986", "createdAt": "2020-06-12T17:49:56Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI4Mjk1OnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1MDoxOFrOGjMvpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1MDoxOFrOGjMvpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2MjE0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This module is specially designed to work with MySQL database, and allows to access the functionality \n          \n          \n            \n            This module is specially designed to work with a MySQL database and allows to access the functionality", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439562149", "createdAt": "2020-06-12T17:50:18Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI4Mzc4OnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1MDozNlrOGjMwNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1MDozNlrOGjMwNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2MjI5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n          \n          \n            \n            provided by MySQL 8.0.x onwards. For more details, see the [MySQL module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439562292", "createdAt": "2020-06-12T17:50:36Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI4NTk1OnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1MToyM1rOGjMxog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1MToyM1rOGjMxog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2MjY1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            for more details.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439562658", "createdAt": "2020-06-12T17:51:23Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI4ODEzOnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1MjoxMlrOGjMzEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1MjoxMlrOGjMzEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2MzAyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The database client should be created by any of the above listed database modules, and once it is created the \n          \n          \n            \n            The database client should be created using any of the above-listed database modules and once it is created, the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439563027", "createdAt": "2020-06-12T17:52:12Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI4OTMwOnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1Mjo0MFrOGjMz5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1Mjo0MFrOGjMz5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2MzIzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            below explained operations and functionality can be used. \n          \n          \n            \n            operations and functionality explained below can be used.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439563236", "createdAt": "2020-06-12T17:52:40Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI5MDA3OnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1Mjo1N1rOGjM0aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1Mjo1N1rOGjM0aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2MzM3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n          \n          \n            \n            All database modules share the same connection pooling concept and there are 3 possible scenarios for", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439563371", "createdAt": "2020-06-12T17:52:57Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI5MTUzOnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1MzoyOFrOGjM1aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1MzoyOFrOGjM1aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2MzYyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n          \n          \n            \n            connection pool handling.  For its properties and possible values, see the `sql:ConnectionPool`.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439563627", "createdAt": "2020-06-12T17:53:28Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI5MjI1OnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1Mzo0M1rOGjM14A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1Mzo0M1rOGjM14A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2Mzc0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. Global, shareable default connection pool\n          \n          \n            \n            1. Global shareable default connection pool", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439563744", "createdAt": "2020-06-12T17:53:43Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI5MjcyOnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1Mzo1M1rOGjM2LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1Mzo1M1rOGjM2LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2MzgyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be \n          \n          \n            \n                If you do not provide the `poolOptions` field when creating the database client, a globally-shareable pool will be", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439563820", "createdAt": "2020-06-12T17:53:53Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool\n+\n+    If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI5NDI2OnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1NDozMFrOGjM3Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1NDozMFrOGjM3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2NDA4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Below shown is the example from JDBC module to use the global connection pool. \n          \n          \n            \n                The JDBC module example below shows how the global connection pool is used.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439564087", "createdAt": "2020-06-12T17:54:30Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool\n+\n+    If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be \n+    created for your database unless a connection pool matching with the properties you provided already exists. \n+    Below shown is the example from JDBC module to use the global connection pool. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODI5NDg0OnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1NDo0NVrOGjM3ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1NDo0NVrOGjM3ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2NDE5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                If you define the `connectionPool` field inline when creating the database client with `sql:ConnectionPool` type, \n          \n          \n            \n                If you define the `connectionPool` field inline when creating the database client with the `sql:ConnectionPool` type,", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439564190", "createdAt": "2020-06-12T17:54:45Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool\n+\n+    If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be \n+    created for your database unless a connection pool matching with the properties you provided already exists. \n+    Below shown is the example from JDBC module to use the global connection pool. \n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (\"jdbc:mysql://localhost:3306/testdb\", \n+                                \"root\", \"root\");\n+    ```\n+\n+2. Client owned, unsharable connection pool\n+\n+    If you define the `connectionPool` field inline when creating the database client with `sql:ConnectionPool` type, ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODMwMDU1OnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1Njo0MlrOGjM7Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1Njo0MlrOGjM7Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2NTEzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                an unshareable connection pool will be created. Below shown is the example from JDBC module to use the global \n          \n          \n            \n                an unshareable connection pool will be created. The JDBC module example below shows how the global", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439565131", "createdAt": "2020-06-12T17:56:42Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool\n+\n+    If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be \n+    created for your database unless a connection pool matching with the properties you provided already exists. \n+    Below shown is the example from JDBC module to use the global connection pool. \n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (\"jdbc:mysql://localhost:3306/testdb\", \n+                                \"root\", \"root\");\n+    ```\n+\n+2. Client owned, unsharable connection pool\n+\n+    If you define the `connectionPool` field inline when creating the database client with `sql:ConnectionPool` type, \n+    an unshareable connection pool will be created. Below shown is the example from JDBC module to use the global ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODMwMDkyOnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1Njo1MlrOGjM7gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1Njo1MlrOGjM7gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2NTE4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                connection pool.\n          \n          \n            \n                connection pool is used.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439565187", "createdAt": "2020-06-12T17:56:52Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool\n+\n+    If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be \n+    created for your database unless a connection pool matching with the properties you provided already exists. \n+    Below shown is the example from JDBC module to use the global connection pool. \n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (\"jdbc:mysql://localhost:3306/testdb\", \n+                                \"root\", \"root\");\n+    ```\n+\n+2. Client owned, unsharable connection pool\n+\n+    If you define the `connectionPool` field inline when creating the database client with `sql:ConnectionPool` type, \n+    an unshareable connection pool will be created. Below shown is the example from JDBC module to use the global \n+    connection pool.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODMwMTI0OnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1NzowMFrOGjM7tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1NzowMFrOGjM7tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2NTIzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            3. Local shareable connection pool\n          \n          \n            \n            3. Local, shareable connection pool", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439565239", "createdAt": "2020-06-12T17:57:00Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool\n+\n+    If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be \n+    created for your database unless a connection pool matching with the properties you provided already exists. \n+    Below shown is the example from JDBC module to use the global connection pool. \n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (\"jdbc:mysql://localhost:3306/testdb\", \n+                                \"root\", \"root\");\n+    ```\n+\n+2. Client owned, unsharable connection pool\n+\n+    If you define the `connectionPool` field inline when creating the database client with `sql:ConnectionPool` type, \n+    an unshareable connection pool will be created. Below shown is the example from JDBC module to use the global \n+    connection pool.\n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (url = \"jdbc:mysql://localhost:3306/testdb\", \n+                                connectionPool = { maxOpenConnections: 5 });\n+    ```\n+\n+3. Local shareable connection pool", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODMwMzI5OnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1Nzo0NlrOGjM8-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1Nzo0NlrOGjM8-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2NTU2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                connection pool will be created. Below shown is the example from JDBC module to use the global connection pool.\n          \n          \n            \n                connection pool will be created. The JDBC module example below shows how the global connection pool is used.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439565560", "createdAt": "2020-06-12T17:57:46Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool\n+\n+    If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be \n+    created for your database unless a connection pool matching with the properties you provided already exists. \n+    Below shown is the example from JDBC module to use the global connection pool. \n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (\"jdbc:mysql://localhost:3306/testdb\", \n+                                \"root\", \"root\");\n+    ```\n+\n+2. Client owned, unsharable connection pool\n+\n+    If you define the `connectionPool` field inline when creating the database client with `sql:ConnectionPool` type, \n+    an unshareable connection pool will be created. Below shown is the example from JDBC module to use the global \n+    connection pool.\n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (url = \"jdbc:mysql://localhost:3306/testdb\", \n+                                connectionPool = { maxOpenConnections: 5 });\n+    ```\n+\n+3. Local shareable connection pool\n+\n+    If you create a record of type `sql:ConnectionPool` and reuse that in the configuration of multiple clients, \n+    for each  set of clients that connects to the same database instance with the same set of properties, a shared \n+    connection pool will be created. Below shown is the example from JDBC module to use the global connection pool.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODMwNDMyOnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1ODowOVrOGjM9oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1ODowOVrOGjM9oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2NTcyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Once all database operations are performed you can close the database client you have created by invoking `close()`\n          \n          \n            \n            Once all the database operations are performed, you can close the database client you have created by invoking the `close()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439565728", "createdAt": "2020-06-12T17:58:09Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool\n+\n+    If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be \n+    created for your database unless a connection pool matching with the properties you provided already exists. \n+    Below shown is the example from JDBC module to use the global connection pool. \n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (\"jdbc:mysql://localhost:3306/testdb\", \n+                                \"root\", \"root\");\n+    ```\n+\n+2. Client owned, unsharable connection pool\n+\n+    If you define the `connectionPool` field inline when creating the database client with `sql:ConnectionPool` type, \n+    an unshareable connection pool will be created. Below shown is the example from JDBC module to use the global \n+    connection pool.\n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (url = \"jdbc:mysql://localhost:3306/testdb\", \n+                                connectionPool = { maxOpenConnections: 5 });\n+    ```\n+\n+3. Local shareable connection pool\n+\n+    If you create a record of type `sql:ConnectionPool` and reuse that in the configuration of multiple clients, \n+    for each  set of clients that connects to the same database instance with the same set of properties, a shared \n+    connection pool will be created. Below shown is the example from JDBC module to use the global connection pool.\n+\n+    ```ballerina\n+    sql:ConnectionPool connPool = {maximumPoolSize: 5};\n+    \n+    jdbc:Client dbClient1 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient2 = new (url = \"jdbc:mysql://localhost:3306/testdb\",       \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient3 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    ```\n+    \n+#### Closing the client\n+\n+Once all database operations are performed you can close the database client you have created by invoking `close()`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODMwNTY4OnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1ODozOVrOGjM-eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1ODozOVrOGjM-eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2NTk0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This sample creates a table with two columns. One column is of type `int`, and the other is of type `varchar`.\n          \n          \n            \n            This sample creates a table with two columns. One column is of type `int`and the other is of type `varchar`.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439565944", "createdAt": "2020-06-12T17:58:39Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool\n+\n+    If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be \n+    created for your database unless a connection pool matching with the properties you provided already exists. \n+    Below shown is the example from JDBC module to use the global connection pool. \n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (\"jdbc:mysql://localhost:3306/testdb\", \n+                                \"root\", \"root\");\n+    ```\n+\n+2. Client owned, unsharable connection pool\n+\n+    If you define the `connectionPool` field inline when creating the database client with `sql:ConnectionPool` type, \n+    an unshareable connection pool will be created. Below shown is the example from JDBC module to use the global \n+    connection pool.\n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (url = \"jdbc:mysql://localhost:3306/testdb\", \n+                                connectionPool = { maxOpenConnections: 5 });\n+    ```\n+\n+3. Local shareable connection pool\n+\n+    If you create a record of type `sql:ConnectionPool` and reuse that in the configuration of multiple clients, \n+    for each  set of clients that connects to the same database instance with the same set of properties, a shared \n+    connection pool will be created. Below shown is the example from JDBC module to use the global connection pool.\n+\n+    ```ballerina\n+    sql:ConnectionPool connPool = {maximumPoolSize: 5};\n+    \n+    jdbc:Client dbClient1 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient2 = new (url = \"jdbc:mysql://localhost:3306/testdb\",       \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient3 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    ```\n+    \n+#### Closing the client\n+\n+Once all database operations are performed you can close the database client you have created by invoking `close()`\n+operation. This will close the corresponding connection pool if it is not shared by any other database clients. \n+\n+```ballerina\n+error? e = dbClient.close();\n+if (e is error){\n+    io:println(\"Error occured:\", e);\n+}\n+\n+```    \n+### Database operations\n+\n+Once the client is created, database operations can be executed through that client. This module defines the interface \n+and common properties that are shared among multiple database clients.  It also supports querying, inserting, deleting, \n+updating, and batch updating data.  \n+\n+#### Creating tables\n+\n+This sample creates a table with two columns. One column is of type `int`, and the other is of type `varchar`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODMwNjM0OnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1ODo1NVrOGjM-6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1ODo1NVrOGjM-6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2NjA1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Create the \u2018Students\u2019 table with fields \u2018id\u2019, 'name' and \u2018age\u2019.\n          \n          \n            \n            // Create the \u2018Students\u2019 table with the  \u2018id\u2019, 'name' and \u2018age\u2019 fields.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439566059", "createdAt": "2020-06-12T17:58:55Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool\n+\n+    If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be \n+    created for your database unless a connection pool matching with the properties you provided already exists. \n+    Below shown is the example from JDBC module to use the global connection pool. \n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (\"jdbc:mysql://localhost:3306/testdb\", \n+                                \"root\", \"root\");\n+    ```\n+\n+2. Client owned, unsharable connection pool\n+\n+    If you define the `connectionPool` field inline when creating the database client with `sql:ConnectionPool` type, \n+    an unshareable connection pool will be created. Below shown is the example from JDBC module to use the global \n+    connection pool.\n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (url = \"jdbc:mysql://localhost:3306/testdb\", \n+                                connectionPool = { maxOpenConnections: 5 });\n+    ```\n+\n+3. Local shareable connection pool\n+\n+    If you create a record of type `sql:ConnectionPool` and reuse that in the configuration of multiple clients, \n+    for each  set of clients that connects to the same database instance with the same set of properties, a shared \n+    connection pool will be created. Below shown is the example from JDBC module to use the global connection pool.\n+\n+    ```ballerina\n+    sql:ConnectionPool connPool = {maximumPoolSize: 5};\n+    \n+    jdbc:Client dbClient1 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient2 = new (url = \"jdbc:mysql://localhost:3306/testdb\",       \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient3 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    ```\n+    \n+#### Closing the client\n+\n+Once all database operations are performed you can close the database client you have created by invoking `close()`\n+operation. This will close the corresponding connection pool if it is not shared by any other database clients. \n+\n+```ballerina\n+error? e = dbClient.close();\n+if (e is error){\n+    io:println(\"Error occured:\", e);\n+}\n+\n+```    \n+### Database operations\n+\n+Once the client is created, database operations can be executed through that client. This module defines the interface \n+and common properties that are shared among multiple database clients.  It also supports querying, inserting, deleting, \n+updating, and batch updating data.  \n+\n+#### Creating tables\n+\n+This sample creates a table with two columns. One column is of type `int`, and the other is of type `varchar`.\n+The CREATE statement is executed via the `execute` remote function of the client.\n+\n+```ballerina\n+// Create the \u2018Students\u2019 table with fields \u2018id\u2019, 'name' and \u2018age\u2019.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODMwNjk0OnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1OToxMVrOGjM_Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1OToxMVrOGjM_Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2NjE3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In the first example, query parameter values are passed directly into the query statement of the `execute` \n          \n          \n            \n            In the first example, the query parameter values are passed directly into the query statement of the `execute`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439566170", "createdAt": "2020-06-12T17:59:11Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool\n+\n+    If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be \n+    created for your database unless a connection pool matching with the properties you provided already exists. \n+    Below shown is the example from JDBC module to use the global connection pool. \n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (\"jdbc:mysql://localhost:3306/testdb\", \n+                                \"root\", \"root\");\n+    ```\n+\n+2. Client owned, unsharable connection pool\n+\n+    If you define the `connectionPool` field inline when creating the database client with `sql:ConnectionPool` type, \n+    an unshareable connection pool will be created. Below shown is the example from JDBC module to use the global \n+    connection pool.\n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (url = \"jdbc:mysql://localhost:3306/testdb\", \n+                                connectionPool = { maxOpenConnections: 5 });\n+    ```\n+\n+3. Local shareable connection pool\n+\n+    If you create a record of type `sql:ConnectionPool` and reuse that in the configuration of multiple clients, \n+    for each  set of clients that connects to the same database instance with the same set of properties, a shared \n+    connection pool will be created. Below shown is the example from JDBC module to use the global connection pool.\n+\n+    ```ballerina\n+    sql:ConnectionPool connPool = {maximumPoolSize: 5};\n+    \n+    jdbc:Client dbClient1 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient2 = new (url = \"jdbc:mysql://localhost:3306/testdb\",       \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient3 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    ```\n+    \n+#### Closing the client\n+\n+Once all database operations are performed you can close the database client you have created by invoking `close()`\n+operation. This will close the corresponding connection pool if it is not shared by any other database clients. \n+\n+```ballerina\n+error? e = dbClient.close();\n+if (e is error){\n+    io:println(\"Error occured:\", e);\n+}\n+\n+```    \n+### Database operations\n+\n+Once the client is created, database operations can be executed through that client. This module defines the interface \n+and common properties that are shared among multiple database clients.  It also supports querying, inserting, deleting, \n+updating, and batch updating data.  \n+\n+#### Creating tables\n+\n+This sample creates a table with two columns. One column is of type `int`, and the other is of type `varchar`.\n+The CREATE statement is executed via the `execute` remote function of the client.\n+\n+```ballerina\n+// Create the \u2018Students\u2019 table with fields \u2018id\u2019, 'name' and \u2018age\u2019.\n+var ret = dbClient->execute(\"CREATE TABLE student(id INT AUTO_INCREMENT, \" +\n+                         \"age INT, name VARCHAR(255), PRIMARY KEY (id))\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Students table create status in DB: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Students table creation failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data\n+\n+This sample shows three examples of data insertion by executing an INSERT statement using the `execute` remote function \n+of the client.\n+\n+In the first example, query parameter values are passed directly into the query statement of the `execute` ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODMwNzM5OnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1OToyMlrOGjM_og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1OToyMlrOGjM_og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2NjI0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In the second example, the parameter values, which are in local variables, are used to parameterize the SQL query in \n          \n          \n            \n            In the second example, the parameter values, which are in local variables are used to parameterize the SQL query in", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439566242", "createdAt": "2020-06-12T17:59:22Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool\n+\n+    If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be \n+    created for your database unless a connection pool matching with the properties you provided already exists. \n+    Below shown is the example from JDBC module to use the global connection pool. \n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (\"jdbc:mysql://localhost:3306/testdb\", \n+                                \"root\", \"root\");\n+    ```\n+\n+2. Client owned, unsharable connection pool\n+\n+    If you define the `connectionPool` field inline when creating the database client with `sql:ConnectionPool` type, \n+    an unshareable connection pool will be created. Below shown is the example from JDBC module to use the global \n+    connection pool.\n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (url = \"jdbc:mysql://localhost:3306/testdb\", \n+                                connectionPool = { maxOpenConnections: 5 });\n+    ```\n+\n+3. Local shareable connection pool\n+\n+    If you create a record of type `sql:ConnectionPool` and reuse that in the configuration of multiple clients, \n+    for each  set of clients that connects to the same database instance with the same set of properties, a shared \n+    connection pool will be created. Below shown is the example from JDBC module to use the global connection pool.\n+\n+    ```ballerina\n+    sql:ConnectionPool connPool = {maximumPoolSize: 5};\n+    \n+    jdbc:Client dbClient1 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient2 = new (url = \"jdbc:mysql://localhost:3306/testdb\",       \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient3 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    ```\n+    \n+#### Closing the client\n+\n+Once all database operations are performed you can close the database client you have created by invoking `close()`\n+operation. This will close the corresponding connection pool if it is not shared by any other database clients. \n+\n+```ballerina\n+error? e = dbClient.close();\n+if (e is error){\n+    io:println(\"Error occured:\", e);\n+}\n+\n+```    \n+### Database operations\n+\n+Once the client is created, database operations can be executed through that client. This module defines the interface \n+and common properties that are shared among multiple database clients.  It also supports querying, inserting, deleting, \n+updating, and batch updating data.  \n+\n+#### Creating tables\n+\n+This sample creates a table with two columns. One column is of type `int`, and the other is of type `varchar`.\n+The CREATE statement is executed via the `execute` remote function of the client.\n+\n+```ballerina\n+// Create the \u2018Students\u2019 table with fields \u2018id\u2019, 'name' and \u2018age\u2019.\n+var ret = dbClient->execute(\"CREATE TABLE student(id INT AUTO_INCREMENT, \" +\n+                         \"age INT, name VARCHAR(255), PRIMARY KEY (id))\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Students table create status in DB: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Students table creation failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data\n+\n+This sample shows three examples of data insertion by executing an INSERT statement using the `execute` remote function \n+of the client.\n+\n+In the first example, query parameter values are passed directly into the query statement of the `execute` \n+remote function.\n+\n+```ballerina\n+var ret = dbClient->execute(\"INSERT INTO student(age, name) \" +\n+                         \"values (23, 'john')\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the second example, the parameter values, which are in local variables, are used to parameterize the SQL query in ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODMwNzk1OnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1OTozNlrOGjM__Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1OTozNlrOGjM__Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2NjMzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `execute` remote function. This type of parameterized SQL query can be used with any primitive Ballerina type \n          \n          \n            \n            the `execute` remote function. This type of a parameterized SQL query can be used with any primitive Ballerina type", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439566333", "createdAt": "2020-06-12T17:59:36Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool\n+\n+    If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be \n+    created for your database unless a connection pool matching with the properties you provided already exists. \n+    Below shown is the example from JDBC module to use the global connection pool. \n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (\"jdbc:mysql://localhost:3306/testdb\", \n+                                \"root\", \"root\");\n+    ```\n+\n+2. Client owned, unsharable connection pool\n+\n+    If you define the `connectionPool` field inline when creating the database client with `sql:ConnectionPool` type, \n+    an unshareable connection pool will be created. Below shown is the example from JDBC module to use the global \n+    connection pool.\n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (url = \"jdbc:mysql://localhost:3306/testdb\", \n+                                connectionPool = { maxOpenConnections: 5 });\n+    ```\n+\n+3. Local shareable connection pool\n+\n+    If you create a record of type `sql:ConnectionPool` and reuse that in the configuration of multiple clients, \n+    for each  set of clients that connects to the same database instance with the same set of properties, a shared \n+    connection pool will be created. Below shown is the example from JDBC module to use the global connection pool.\n+\n+    ```ballerina\n+    sql:ConnectionPool connPool = {maximumPoolSize: 5};\n+    \n+    jdbc:Client dbClient1 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient2 = new (url = \"jdbc:mysql://localhost:3306/testdb\",       \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient3 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    ```\n+    \n+#### Closing the client\n+\n+Once all database operations are performed you can close the database client you have created by invoking `close()`\n+operation. This will close the corresponding connection pool if it is not shared by any other database clients. \n+\n+```ballerina\n+error? e = dbClient.close();\n+if (e is error){\n+    io:println(\"Error occured:\", e);\n+}\n+\n+```    \n+### Database operations\n+\n+Once the client is created, database operations can be executed through that client. This module defines the interface \n+and common properties that are shared among multiple database clients.  It also supports querying, inserting, deleting, \n+updating, and batch updating data.  \n+\n+#### Creating tables\n+\n+This sample creates a table with two columns. One column is of type `int`, and the other is of type `varchar`.\n+The CREATE statement is executed via the `execute` remote function of the client.\n+\n+```ballerina\n+// Create the \u2018Students\u2019 table with fields \u2018id\u2019, 'name' and \u2018age\u2019.\n+var ret = dbClient->execute(\"CREATE TABLE student(id INT AUTO_INCREMENT, \" +\n+                         \"age INT, name VARCHAR(255), PRIMARY KEY (id))\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Students table create status in DB: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Students table creation failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data\n+\n+This sample shows three examples of data insertion by executing an INSERT statement using the `execute` remote function \n+of the client.\n+\n+In the first example, query parameter values are passed directly into the query statement of the `execute` \n+remote function.\n+\n+```ballerina\n+var ret = dbClient->execute(\"INSERT INTO student(age, name) \" +\n+                         \"values (23, 'john')\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the second example, the parameter values, which are in local variables, are used to parameterize the SQL query in \n+`execute` remote function. This type of parameterized SQL query can be used with any primitive Ballerina type ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODMwODMyOnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1OTo0NFrOGjNAPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo1OTo0NFrOGjNAPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2NjM5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            like `string`, `int`, `float`, or `boolean`, and in that case, the corresponding SQL type of the parameter is derived \n          \n          \n            \n            like `string`, `int`, `float`, or `boolean` and in that case, the corresponding SQL type of the parameter is derived", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439566397", "createdAt": "2020-06-12T17:59:44Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool\n+\n+    If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be \n+    created for your database unless a connection pool matching with the properties you provided already exists. \n+    Below shown is the example from JDBC module to use the global connection pool. \n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (\"jdbc:mysql://localhost:3306/testdb\", \n+                                \"root\", \"root\");\n+    ```\n+\n+2. Client owned, unsharable connection pool\n+\n+    If you define the `connectionPool` field inline when creating the database client with `sql:ConnectionPool` type, \n+    an unshareable connection pool will be created. Below shown is the example from JDBC module to use the global \n+    connection pool.\n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (url = \"jdbc:mysql://localhost:3306/testdb\", \n+                                connectionPool = { maxOpenConnections: 5 });\n+    ```\n+\n+3. Local shareable connection pool\n+\n+    If you create a record of type `sql:ConnectionPool` and reuse that in the configuration of multiple clients, \n+    for each  set of clients that connects to the same database instance with the same set of properties, a shared \n+    connection pool will be created. Below shown is the example from JDBC module to use the global connection pool.\n+\n+    ```ballerina\n+    sql:ConnectionPool connPool = {maximumPoolSize: 5};\n+    \n+    jdbc:Client dbClient1 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient2 = new (url = \"jdbc:mysql://localhost:3306/testdb\",       \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient3 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    ```\n+    \n+#### Closing the client\n+\n+Once all database operations are performed you can close the database client you have created by invoking `close()`\n+operation. This will close the corresponding connection pool if it is not shared by any other database clients. \n+\n+```ballerina\n+error? e = dbClient.close();\n+if (e is error){\n+    io:println(\"Error occured:\", e);\n+}\n+\n+```    \n+### Database operations\n+\n+Once the client is created, database operations can be executed through that client. This module defines the interface \n+and common properties that are shared among multiple database clients.  It also supports querying, inserting, deleting, \n+updating, and batch updating data.  \n+\n+#### Creating tables\n+\n+This sample creates a table with two columns. One column is of type `int`, and the other is of type `varchar`.\n+The CREATE statement is executed via the `execute` remote function of the client.\n+\n+```ballerina\n+// Create the \u2018Students\u2019 table with fields \u2018id\u2019, 'name' and \u2018age\u2019.\n+var ret = dbClient->execute(\"CREATE TABLE student(id INT AUTO_INCREMENT, \" +\n+                         \"age INT, name VARCHAR(255), PRIMARY KEY (id))\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Students table create status in DB: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Students table creation failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data\n+\n+This sample shows three examples of data insertion by executing an INSERT statement using the `execute` remote function \n+of the client.\n+\n+In the first example, query parameter values are passed directly into the query statement of the `execute` \n+remote function.\n+\n+```ballerina\n+var ret = dbClient->execute(\"INSERT INTO student(age, name) \" +\n+                         \"values (23, 'john')\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the second example, the parameter values, which are in local variables, are used to parameterize the SQL query in \n+`execute` remote function. This type of parameterized SQL query can be used with any primitive Ballerina type \n+like `string`, `int`, `float`, or `boolean`, and in that case, the corresponding SQL type of the parameter is derived ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODMwOTUxOnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowMDowN1rOGjNA-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowMDowN1rOGjNA-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2NjU4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In the third example, parameter values are passed as a `sql:TypedValue` to the `execute` remote function. Use \n          \n          \n            \n            In the third example, the parameter values are passed as a `sql:TypedValue` to the `execute` remote function. Use the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439566584", "createdAt": "2020-06-12T18:00:07Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool\n+\n+    If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be \n+    created for your database unless a connection pool matching with the properties you provided already exists. \n+    Below shown is the example from JDBC module to use the global connection pool. \n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (\"jdbc:mysql://localhost:3306/testdb\", \n+                                \"root\", \"root\");\n+    ```\n+\n+2. Client owned, unsharable connection pool\n+\n+    If you define the `connectionPool` field inline when creating the database client with `sql:ConnectionPool` type, \n+    an unshareable connection pool will be created. Below shown is the example from JDBC module to use the global \n+    connection pool.\n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (url = \"jdbc:mysql://localhost:3306/testdb\", \n+                                connectionPool = { maxOpenConnections: 5 });\n+    ```\n+\n+3. Local shareable connection pool\n+\n+    If you create a record of type `sql:ConnectionPool` and reuse that in the configuration of multiple clients, \n+    for each  set of clients that connects to the same database instance with the same set of properties, a shared \n+    connection pool will be created. Below shown is the example from JDBC module to use the global connection pool.\n+\n+    ```ballerina\n+    sql:ConnectionPool connPool = {maximumPoolSize: 5};\n+    \n+    jdbc:Client dbClient1 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient2 = new (url = \"jdbc:mysql://localhost:3306/testdb\",       \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient3 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    ```\n+    \n+#### Closing the client\n+\n+Once all database operations are performed you can close the database client you have created by invoking `close()`\n+operation. This will close the corresponding connection pool if it is not shared by any other database clients. \n+\n+```ballerina\n+error? e = dbClient.close();\n+if (e is error){\n+    io:println(\"Error occured:\", e);\n+}\n+\n+```    \n+### Database operations\n+\n+Once the client is created, database operations can be executed through that client. This module defines the interface \n+and common properties that are shared among multiple database clients.  It also supports querying, inserting, deleting, \n+updating, and batch updating data.  \n+\n+#### Creating tables\n+\n+This sample creates a table with two columns. One column is of type `int`, and the other is of type `varchar`.\n+The CREATE statement is executed via the `execute` remote function of the client.\n+\n+```ballerina\n+// Create the \u2018Students\u2019 table with fields \u2018id\u2019, 'name' and \u2018age\u2019.\n+var ret = dbClient->execute(\"CREATE TABLE student(id INT AUTO_INCREMENT, \" +\n+                         \"age INT, name VARCHAR(255), PRIMARY KEY (id))\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Students table create status in DB: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Students table creation failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data\n+\n+This sample shows three examples of data insertion by executing an INSERT statement using the `execute` remote function \n+of the client.\n+\n+In the first example, query parameter values are passed directly into the query statement of the `execute` \n+remote function.\n+\n+```ballerina\n+var ret = dbClient->execute(\"INSERT INTO student(age, name) \" +\n+                         \"values (23, 'john')\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the second example, the parameter values, which are in local variables, are used to parameterize the SQL query in \n+`execute` remote function. This type of parameterized SQL query can be used with any primitive Ballerina type \n+like `string`, `int`, `float`, or `boolean`, and in that case, the corresponding SQL type of the parameter is derived \n+from the type of the Ballerina variable that is passed in. \n+\n+```ballerina\n+string name = \"Anne\";\n+int age = 8;\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the third example, parameter values are passed as a `sql:TypedValue` to the `execute` remote function. Use ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODMxMDIyOnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowMDoyMVrOGjNBbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowMDoyMVrOGjNBbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2NjcwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            corresponding subtype of `sql:TypedValue` such as `sql:Varchar`, `sql:Char`, `sql:Integer`, etc when you need to \n          \n          \n            \n            corresponding subtype of the `sql:TypedValue` such as `sql:Varchar`, `sql:Char`, `sql:Integer`, etc, when you need to", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439566703", "createdAt": "2020-06-12T18:00:21Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool\n+\n+    If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be \n+    created for your database unless a connection pool matching with the properties you provided already exists. \n+    Below shown is the example from JDBC module to use the global connection pool. \n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (\"jdbc:mysql://localhost:3306/testdb\", \n+                                \"root\", \"root\");\n+    ```\n+\n+2. Client owned, unsharable connection pool\n+\n+    If you define the `connectionPool` field inline when creating the database client with `sql:ConnectionPool` type, \n+    an unshareable connection pool will be created. Below shown is the example from JDBC module to use the global \n+    connection pool.\n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (url = \"jdbc:mysql://localhost:3306/testdb\", \n+                                connectionPool = { maxOpenConnections: 5 });\n+    ```\n+\n+3. Local shareable connection pool\n+\n+    If you create a record of type `sql:ConnectionPool` and reuse that in the configuration of multiple clients, \n+    for each  set of clients that connects to the same database instance with the same set of properties, a shared \n+    connection pool will be created. Below shown is the example from JDBC module to use the global connection pool.\n+\n+    ```ballerina\n+    sql:ConnectionPool connPool = {maximumPoolSize: 5};\n+    \n+    jdbc:Client dbClient1 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient2 = new (url = \"jdbc:mysql://localhost:3306/testdb\",       \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient3 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    ```\n+    \n+#### Closing the client\n+\n+Once all database operations are performed you can close the database client you have created by invoking `close()`\n+operation. This will close the corresponding connection pool if it is not shared by any other database clients. \n+\n+```ballerina\n+error? e = dbClient.close();\n+if (e is error){\n+    io:println(\"Error occured:\", e);\n+}\n+\n+```    \n+### Database operations\n+\n+Once the client is created, database operations can be executed through that client. This module defines the interface \n+and common properties that are shared among multiple database clients.  It also supports querying, inserting, deleting, \n+updating, and batch updating data.  \n+\n+#### Creating tables\n+\n+This sample creates a table with two columns. One column is of type `int`, and the other is of type `varchar`.\n+The CREATE statement is executed via the `execute` remote function of the client.\n+\n+```ballerina\n+// Create the \u2018Students\u2019 table with fields \u2018id\u2019, 'name' and \u2018age\u2019.\n+var ret = dbClient->execute(\"CREATE TABLE student(id INT AUTO_INCREMENT, \" +\n+                         \"age INT, name VARCHAR(255), PRIMARY KEY (id))\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Students table create status in DB: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Students table creation failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data\n+\n+This sample shows three examples of data insertion by executing an INSERT statement using the `execute` remote function \n+of the client.\n+\n+In the first example, query parameter values are passed directly into the query statement of the `execute` \n+remote function.\n+\n+```ballerina\n+var ret = dbClient->execute(\"INSERT INTO student(age, name) \" +\n+                         \"values (23, 'john')\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the second example, the parameter values, which are in local variables, are used to parameterize the SQL query in \n+`execute` remote function. This type of parameterized SQL query can be used with any primitive Ballerina type \n+like `string`, `int`, `float`, or `boolean`, and in that case, the corresponding SQL type of the parameter is derived \n+from the type of the Ballerina variable that is passed in. \n+\n+```ballerina\n+string name = \"Anne\";\n+int age = 8;\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the third example, parameter values are passed as a `sql:TypedValue` to the `execute` remote function. Use \n+corresponding subtype of `sql:TypedValue` such as `sql:Varchar`, `sql:Char`, `sql:Integer`, etc when you need to ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODMxMTkyOnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowMDo1NVrOGjNChA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowMDo1NVrOGjNChA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2Njk4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            First, a type is created to represent the returned result set. Please note the mapping of the database column \n          \n          \n            \n            First, a type is created to represent the returned result set. Note the mapping of the database column", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439566980", "createdAt": "2020-06-12T18:00:55Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool\n+\n+    If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be \n+    created for your database unless a connection pool matching with the properties you provided already exists. \n+    Below shown is the example from JDBC module to use the global connection pool. \n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (\"jdbc:mysql://localhost:3306/testdb\", \n+                                \"root\", \"root\");\n+    ```\n+\n+2. Client owned, unsharable connection pool\n+\n+    If you define the `connectionPool` field inline when creating the database client with `sql:ConnectionPool` type, \n+    an unshareable connection pool will be created. Below shown is the example from JDBC module to use the global \n+    connection pool.\n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (url = \"jdbc:mysql://localhost:3306/testdb\", \n+                                connectionPool = { maxOpenConnections: 5 });\n+    ```\n+\n+3. Local shareable connection pool\n+\n+    If you create a record of type `sql:ConnectionPool` and reuse that in the configuration of multiple clients, \n+    for each  set of clients that connects to the same database instance with the same set of properties, a shared \n+    connection pool will be created. Below shown is the example from JDBC module to use the global connection pool.\n+\n+    ```ballerina\n+    sql:ConnectionPool connPool = {maximumPoolSize: 5};\n+    \n+    jdbc:Client dbClient1 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient2 = new (url = \"jdbc:mysql://localhost:3306/testdb\",       \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient3 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    ```\n+    \n+#### Closing the client\n+\n+Once all database operations are performed you can close the database client you have created by invoking `close()`\n+operation. This will close the corresponding connection pool if it is not shared by any other database clients. \n+\n+```ballerina\n+error? e = dbClient.close();\n+if (e is error){\n+    io:println(\"Error occured:\", e);\n+}\n+\n+```    \n+### Database operations\n+\n+Once the client is created, database operations can be executed through that client. This module defines the interface \n+and common properties that are shared among multiple database clients.  It also supports querying, inserting, deleting, \n+updating, and batch updating data.  \n+\n+#### Creating tables\n+\n+This sample creates a table with two columns. One column is of type `int`, and the other is of type `varchar`.\n+The CREATE statement is executed via the `execute` remote function of the client.\n+\n+```ballerina\n+// Create the \u2018Students\u2019 table with fields \u2018id\u2019, 'name' and \u2018age\u2019.\n+var ret = dbClient->execute(\"CREATE TABLE student(id INT AUTO_INCREMENT, \" +\n+                         \"age INT, name VARCHAR(255), PRIMARY KEY (id))\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Students table create status in DB: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Students table creation failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data\n+\n+This sample shows three examples of data insertion by executing an INSERT statement using the `execute` remote function \n+of the client.\n+\n+In the first example, query parameter values are passed directly into the query statement of the `execute` \n+remote function.\n+\n+```ballerina\n+var ret = dbClient->execute(\"INSERT INTO student(age, name) \" +\n+                         \"values (23, 'john')\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the second example, the parameter values, which are in local variables, are used to parameterize the SQL query in \n+`execute` remote function. This type of parameterized SQL query can be used with any primitive Ballerina type \n+like `string`, `int`, `float`, or `boolean`, and in that case, the corresponding SQL type of the parameter is derived \n+from the type of the Ballerina variable that is passed in. \n+\n+```ballerina\n+string name = \"Anne\";\n+int age = 8;\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the third example, parameter values are passed as a `sql:TypedValue` to the `execute` remote function. Use \n+corresponding subtype of `sql:TypedValue` such as `sql:Varchar`, `sql:Char`, `sql:Integer`, etc when you need to \n+provide more details such as the exact SQL type of the parameter.\n+\n+```ballerina\n+sql:Varchar name = new (\"James\");\n+sql:Integer age = new (10);\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data with auto-generated keys\n+\n+This example demonstrates inserting data while returning the auto-generated keys. It achieves this by using the \n+`execute` remote function to execute the INSERT statement.\n+\n+```ballerina\n+int age = 31;\n+string name = \"Kate\";\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    int? count = ret.affectedRowCount;\n+    string|int? generatedKey = ret.lastInsertId;\n+    io:println(\"Inserted row count: \", count);\n+    io:println(\"Generated key: \", generatedKey);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to table failed: \", <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Querying data\n+\n+This sample shows three examples to demonstrate the different usages of the `query` operation and query the\n+database table and obtain the results. \n+\n+This example demonstrates querying data from a table in a database. \n+First, a type is created to represent the returned result set. Please note the mapping of the database column ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODMxMzAyOnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowMToxN1rOGjNDMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowMToxN1rOGjNDMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2NzE1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            to the returned record's property is case insensitive (i.e., `ID` column in result, can be mapped to `id` \n          \n          \n            \n            to the returned record's property is case insensitive (i.e., `ID` column in the result can be mapped to the `id`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439567155", "createdAt": "2020-06-12T18:01:17Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool\n+\n+    If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be \n+    created for your database unless a connection pool matching with the properties you provided already exists. \n+    Below shown is the example from JDBC module to use the global connection pool. \n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (\"jdbc:mysql://localhost:3306/testdb\", \n+                                \"root\", \"root\");\n+    ```\n+\n+2. Client owned, unsharable connection pool\n+\n+    If you define the `connectionPool` field inline when creating the database client with `sql:ConnectionPool` type, \n+    an unshareable connection pool will be created. Below shown is the example from JDBC module to use the global \n+    connection pool.\n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (url = \"jdbc:mysql://localhost:3306/testdb\", \n+                                connectionPool = { maxOpenConnections: 5 });\n+    ```\n+\n+3. Local shareable connection pool\n+\n+    If you create a record of type `sql:ConnectionPool` and reuse that in the configuration of multiple clients, \n+    for each  set of clients that connects to the same database instance with the same set of properties, a shared \n+    connection pool will be created. Below shown is the example from JDBC module to use the global connection pool.\n+\n+    ```ballerina\n+    sql:ConnectionPool connPool = {maximumPoolSize: 5};\n+    \n+    jdbc:Client dbClient1 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient2 = new (url = \"jdbc:mysql://localhost:3306/testdb\",       \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient3 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    ```\n+    \n+#### Closing the client\n+\n+Once all database operations are performed you can close the database client you have created by invoking `close()`\n+operation. This will close the corresponding connection pool if it is not shared by any other database clients. \n+\n+```ballerina\n+error? e = dbClient.close();\n+if (e is error){\n+    io:println(\"Error occured:\", e);\n+}\n+\n+```    \n+### Database operations\n+\n+Once the client is created, database operations can be executed through that client. This module defines the interface \n+and common properties that are shared among multiple database clients.  It also supports querying, inserting, deleting, \n+updating, and batch updating data.  \n+\n+#### Creating tables\n+\n+This sample creates a table with two columns. One column is of type `int`, and the other is of type `varchar`.\n+The CREATE statement is executed via the `execute` remote function of the client.\n+\n+```ballerina\n+// Create the \u2018Students\u2019 table with fields \u2018id\u2019, 'name' and \u2018age\u2019.\n+var ret = dbClient->execute(\"CREATE TABLE student(id INT AUTO_INCREMENT, \" +\n+                         \"age INT, name VARCHAR(255), PRIMARY KEY (id))\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Students table create status in DB: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Students table creation failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data\n+\n+This sample shows three examples of data insertion by executing an INSERT statement using the `execute` remote function \n+of the client.\n+\n+In the first example, query parameter values are passed directly into the query statement of the `execute` \n+remote function.\n+\n+```ballerina\n+var ret = dbClient->execute(\"INSERT INTO student(age, name) \" +\n+                         \"values (23, 'john')\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the second example, the parameter values, which are in local variables, are used to parameterize the SQL query in \n+`execute` remote function. This type of parameterized SQL query can be used with any primitive Ballerina type \n+like `string`, `int`, `float`, or `boolean`, and in that case, the corresponding SQL type of the parameter is derived \n+from the type of the Ballerina variable that is passed in. \n+\n+```ballerina\n+string name = \"Anne\";\n+int age = 8;\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the third example, parameter values are passed as a `sql:TypedValue` to the `execute` remote function. Use \n+corresponding subtype of `sql:TypedValue` such as `sql:Varchar`, `sql:Char`, `sql:Integer`, etc when you need to \n+provide more details such as the exact SQL type of the parameter.\n+\n+```ballerina\n+sql:Varchar name = new (\"James\");\n+sql:Integer age = new (10);\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data with auto-generated keys\n+\n+This example demonstrates inserting data while returning the auto-generated keys. It achieves this by using the \n+`execute` remote function to execute the INSERT statement.\n+\n+```ballerina\n+int age = 31;\n+string name = \"Kate\";\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    int? count = ret.affectedRowCount;\n+    string|int? generatedKey = ret.lastInsertId;\n+    io:println(\"Inserted row count: \", count);\n+    io:println(\"Generated key: \", generatedKey);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to table failed: \", <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Querying data\n+\n+This sample shows three examples to demonstrate the different usages of the `query` operation and query the\n+database table and obtain the results. \n+\n+This example demonstrates querying data from a table in a database. \n+First, a type is created to represent the returned result set. Please note the mapping of the database column \n+to the returned record's property is case insensitive (i.e., `ID` column in result, can be mapped to `id` ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODMxMzQ4OnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowMToyNlrOGjNDfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowMToyNlrOGjNDfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2NzIyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            property in record). Next, the SELECT query is executed via the `query` remote function of the client by passing that \n          \n          \n            \n            property in the record). Next, the SELECT query is executed via the `query` remote function of the client by passing that", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439567229", "createdAt": "2020-06-12T18:01:26Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool\n+\n+    If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be \n+    created for your database unless a connection pool matching with the properties you provided already exists. \n+    Below shown is the example from JDBC module to use the global connection pool. \n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (\"jdbc:mysql://localhost:3306/testdb\", \n+                                \"root\", \"root\");\n+    ```\n+\n+2. Client owned, unsharable connection pool\n+\n+    If you define the `connectionPool` field inline when creating the database client with `sql:ConnectionPool` type, \n+    an unshareable connection pool will be created. Below shown is the example from JDBC module to use the global \n+    connection pool.\n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (url = \"jdbc:mysql://localhost:3306/testdb\", \n+                                connectionPool = { maxOpenConnections: 5 });\n+    ```\n+\n+3. Local shareable connection pool\n+\n+    If you create a record of type `sql:ConnectionPool` and reuse that in the configuration of multiple clients, \n+    for each  set of clients that connects to the same database instance with the same set of properties, a shared \n+    connection pool will be created. Below shown is the example from JDBC module to use the global connection pool.\n+\n+    ```ballerina\n+    sql:ConnectionPool connPool = {maximumPoolSize: 5};\n+    \n+    jdbc:Client dbClient1 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient2 = new (url = \"jdbc:mysql://localhost:3306/testdb\",       \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient3 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    ```\n+    \n+#### Closing the client\n+\n+Once all database operations are performed you can close the database client you have created by invoking `close()`\n+operation. This will close the corresponding connection pool if it is not shared by any other database clients. \n+\n+```ballerina\n+error? e = dbClient.close();\n+if (e is error){\n+    io:println(\"Error occured:\", e);\n+}\n+\n+```    \n+### Database operations\n+\n+Once the client is created, database operations can be executed through that client. This module defines the interface \n+and common properties that are shared among multiple database clients.  It also supports querying, inserting, deleting, \n+updating, and batch updating data.  \n+\n+#### Creating tables\n+\n+This sample creates a table with two columns. One column is of type `int`, and the other is of type `varchar`.\n+The CREATE statement is executed via the `execute` remote function of the client.\n+\n+```ballerina\n+// Create the \u2018Students\u2019 table with fields \u2018id\u2019, 'name' and \u2018age\u2019.\n+var ret = dbClient->execute(\"CREATE TABLE student(id INT AUTO_INCREMENT, \" +\n+                         \"age INT, name VARCHAR(255), PRIMARY KEY (id))\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Students table create status in DB: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Students table creation failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data\n+\n+This sample shows three examples of data insertion by executing an INSERT statement using the `execute` remote function \n+of the client.\n+\n+In the first example, query parameter values are passed directly into the query statement of the `execute` \n+remote function.\n+\n+```ballerina\n+var ret = dbClient->execute(\"INSERT INTO student(age, name) \" +\n+                         \"values (23, 'john')\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the second example, the parameter values, which are in local variables, are used to parameterize the SQL query in \n+`execute` remote function. This type of parameterized SQL query can be used with any primitive Ballerina type \n+like `string`, `int`, `float`, or `boolean`, and in that case, the corresponding SQL type of the parameter is derived \n+from the type of the Ballerina variable that is passed in. \n+\n+```ballerina\n+string name = \"Anne\";\n+int age = 8;\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the third example, parameter values are passed as a `sql:TypedValue` to the `execute` remote function. Use \n+corresponding subtype of `sql:TypedValue` such as `sql:Varchar`, `sql:Char`, `sql:Integer`, etc when you need to \n+provide more details such as the exact SQL type of the parameter.\n+\n+```ballerina\n+sql:Varchar name = new (\"James\");\n+sql:Integer age = new (10);\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data with auto-generated keys\n+\n+This example demonstrates inserting data while returning the auto-generated keys. It achieves this by using the \n+`execute` remote function to execute the INSERT statement.\n+\n+```ballerina\n+int age = 31;\n+string name = \"Kate\";\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    int? count = ret.affectedRowCount;\n+    string|int? generatedKey = ret.lastInsertId;\n+    io:println(\"Inserted row count: \", count);\n+    io:println(\"Generated key: \", generatedKey);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to table failed: \", <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Querying data\n+\n+This sample shows three examples to demonstrate the different usages of the `query` operation and query the\n+database table and obtain the results. \n+\n+This example demonstrates querying data from a table in a database. \n+First, a type is created to represent the returned result set. Please note the mapping of the database column \n+to the returned record's property is case insensitive (i.e., `ID` column in result, can be mapped to `id` \n+property in record). Next, the SELECT query is executed via the `query` remote function of the client by passing that ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODMxNDczOnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowMTo1M1rOGjNEPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowMTo1M1rOGjNEPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2NzQyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Select the data from the database table. Query Parameters are passed directly. \n          \n          \n            \n            // Select the data from the database table. The query parameters are passed directly.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439567420", "createdAt": "2020-06-12T18:01:53Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool\n+\n+    If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be \n+    created for your database unless a connection pool matching with the properties you provided already exists. \n+    Below shown is the example from JDBC module to use the global connection pool. \n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (\"jdbc:mysql://localhost:3306/testdb\", \n+                                \"root\", \"root\");\n+    ```\n+\n+2. Client owned, unsharable connection pool\n+\n+    If you define the `connectionPool` field inline when creating the database client with `sql:ConnectionPool` type, \n+    an unshareable connection pool will be created. Below shown is the example from JDBC module to use the global \n+    connection pool.\n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (url = \"jdbc:mysql://localhost:3306/testdb\", \n+                                connectionPool = { maxOpenConnections: 5 });\n+    ```\n+\n+3. Local shareable connection pool\n+\n+    If you create a record of type `sql:ConnectionPool` and reuse that in the configuration of multiple clients, \n+    for each  set of clients that connects to the same database instance with the same set of properties, a shared \n+    connection pool will be created. Below shown is the example from JDBC module to use the global connection pool.\n+\n+    ```ballerina\n+    sql:ConnectionPool connPool = {maximumPoolSize: 5};\n+    \n+    jdbc:Client dbClient1 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient2 = new (url = \"jdbc:mysql://localhost:3306/testdb\",       \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient3 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    ```\n+    \n+#### Closing the client\n+\n+Once all database operations are performed you can close the database client you have created by invoking `close()`\n+operation. This will close the corresponding connection pool if it is not shared by any other database clients. \n+\n+```ballerina\n+error? e = dbClient.close();\n+if (e is error){\n+    io:println(\"Error occured:\", e);\n+}\n+\n+```    \n+### Database operations\n+\n+Once the client is created, database operations can be executed through that client. This module defines the interface \n+and common properties that are shared among multiple database clients.  It also supports querying, inserting, deleting, \n+updating, and batch updating data.  \n+\n+#### Creating tables\n+\n+This sample creates a table with two columns. One column is of type `int`, and the other is of type `varchar`.\n+The CREATE statement is executed via the `execute` remote function of the client.\n+\n+```ballerina\n+// Create the \u2018Students\u2019 table with fields \u2018id\u2019, 'name' and \u2018age\u2019.\n+var ret = dbClient->execute(\"CREATE TABLE student(id INT AUTO_INCREMENT, \" +\n+                         \"age INT, name VARCHAR(255), PRIMARY KEY (id))\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Students table create status in DB: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Students table creation failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data\n+\n+This sample shows three examples of data insertion by executing an INSERT statement using the `execute` remote function \n+of the client.\n+\n+In the first example, query parameter values are passed directly into the query statement of the `execute` \n+remote function.\n+\n+```ballerina\n+var ret = dbClient->execute(\"INSERT INTO student(age, name) \" +\n+                         \"values (23, 'john')\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the second example, the parameter values, which are in local variables, are used to parameterize the SQL query in \n+`execute` remote function. This type of parameterized SQL query can be used with any primitive Ballerina type \n+like `string`, `int`, `float`, or `boolean`, and in that case, the corresponding SQL type of the parameter is derived \n+from the type of the Ballerina variable that is passed in. \n+\n+```ballerina\n+string name = \"Anne\";\n+int age = 8;\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the third example, parameter values are passed as a `sql:TypedValue` to the `execute` remote function. Use \n+corresponding subtype of `sql:TypedValue` such as `sql:Varchar`, `sql:Char`, `sql:Integer`, etc when you need to \n+provide more details such as the exact SQL type of the parameter.\n+\n+```ballerina\n+sql:Varchar name = new (\"James\");\n+sql:Integer age = new (10);\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data with auto-generated keys\n+\n+This example demonstrates inserting data while returning the auto-generated keys. It achieves this by using the \n+`execute` remote function to execute the INSERT statement.\n+\n+```ballerina\n+int age = 31;\n+string name = \"Kate\";\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    int? count = ret.affectedRowCount;\n+    string|int? generatedKey = ret.lastInsertId;\n+    io:println(\"Inserted row count: \", count);\n+    io:println(\"Generated key: \", generatedKey);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to table failed: \", <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Querying data\n+\n+This sample shows three examples to demonstrate the different usages of the `query` operation and query the\n+database table and obtain the results. \n+\n+This example demonstrates querying data from a table in a database. \n+First, a type is created to represent the returned result set. Please note the mapping of the database column \n+to the returned record's property is case insensitive (i.e., `ID` column in result, can be mapped to `id` \n+property in record). Next, the SELECT query is executed via the `query` remote function of the client by passing that \n+result set type. Once the query is executed, each data record can be retrieved by looping the result set. The `stream` \n+returned by the select operation holds a pointer to the actual data in the database and it loads data from the table \n+only when it is accessed. This stream can be iterated only once. \n+\n+```ballerina\n+// Define a type to represent the results.\n+type Student record {\n+    int id;\n+    int age;\n+    string name;\n+};\n+\n+// Select the data from the database table. Query Parameters are passed directly. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODMxNTA2OnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowMjowMlrOGjNEeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowMjowMlrOGjNEeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2NzQ4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Similar to `execute` examples, parameters can be passed as sub types of \n          \n          \n            \n            // Similar to the `execute` examples, parameters can be passed as sub types of", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439567481", "createdAt": "2020-06-12T18:02:02Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool\n+\n+    If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be \n+    created for your database unless a connection pool matching with the properties you provided already exists. \n+    Below shown is the example from JDBC module to use the global connection pool. \n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (\"jdbc:mysql://localhost:3306/testdb\", \n+                                \"root\", \"root\");\n+    ```\n+\n+2. Client owned, unsharable connection pool\n+\n+    If you define the `connectionPool` field inline when creating the database client with `sql:ConnectionPool` type, \n+    an unshareable connection pool will be created. Below shown is the example from JDBC module to use the global \n+    connection pool.\n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (url = \"jdbc:mysql://localhost:3306/testdb\", \n+                                connectionPool = { maxOpenConnections: 5 });\n+    ```\n+\n+3. Local shareable connection pool\n+\n+    If you create a record of type `sql:ConnectionPool` and reuse that in the configuration of multiple clients, \n+    for each  set of clients that connects to the same database instance with the same set of properties, a shared \n+    connection pool will be created. Below shown is the example from JDBC module to use the global connection pool.\n+\n+    ```ballerina\n+    sql:ConnectionPool connPool = {maximumPoolSize: 5};\n+    \n+    jdbc:Client dbClient1 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient2 = new (url = \"jdbc:mysql://localhost:3306/testdb\",       \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient3 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    ```\n+    \n+#### Closing the client\n+\n+Once all database operations are performed you can close the database client you have created by invoking `close()`\n+operation. This will close the corresponding connection pool if it is not shared by any other database clients. \n+\n+```ballerina\n+error? e = dbClient.close();\n+if (e is error){\n+    io:println(\"Error occured:\", e);\n+}\n+\n+```    \n+### Database operations\n+\n+Once the client is created, database operations can be executed through that client. This module defines the interface \n+and common properties that are shared among multiple database clients.  It also supports querying, inserting, deleting, \n+updating, and batch updating data.  \n+\n+#### Creating tables\n+\n+This sample creates a table with two columns. One column is of type `int`, and the other is of type `varchar`.\n+The CREATE statement is executed via the `execute` remote function of the client.\n+\n+```ballerina\n+// Create the \u2018Students\u2019 table with fields \u2018id\u2019, 'name' and \u2018age\u2019.\n+var ret = dbClient->execute(\"CREATE TABLE student(id INT AUTO_INCREMENT, \" +\n+                         \"age INT, name VARCHAR(255), PRIMARY KEY (id))\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Students table create status in DB: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Students table creation failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data\n+\n+This sample shows three examples of data insertion by executing an INSERT statement using the `execute` remote function \n+of the client.\n+\n+In the first example, query parameter values are passed directly into the query statement of the `execute` \n+remote function.\n+\n+```ballerina\n+var ret = dbClient->execute(\"INSERT INTO student(age, name) \" +\n+                         \"values (23, 'john')\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the second example, the parameter values, which are in local variables, are used to parameterize the SQL query in \n+`execute` remote function. This type of parameterized SQL query can be used with any primitive Ballerina type \n+like `string`, `int`, `float`, or `boolean`, and in that case, the corresponding SQL type of the parameter is derived \n+from the type of the Ballerina variable that is passed in. \n+\n+```ballerina\n+string name = \"Anne\";\n+int age = 8;\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the third example, parameter values are passed as a `sql:TypedValue` to the `execute` remote function. Use \n+corresponding subtype of `sql:TypedValue` such as `sql:Varchar`, `sql:Char`, `sql:Integer`, etc when you need to \n+provide more details such as the exact SQL type of the parameter.\n+\n+```ballerina\n+sql:Varchar name = new (\"James\");\n+sql:Integer age = new (10);\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data with auto-generated keys\n+\n+This example demonstrates inserting data while returning the auto-generated keys. It achieves this by using the \n+`execute` remote function to execute the INSERT statement.\n+\n+```ballerina\n+int age = 31;\n+string name = \"Kate\";\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    int? count = ret.affectedRowCount;\n+    string|int? generatedKey = ret.lastInsertId;\n+    io:println(\"Inserted row count: \", count);\n+    io:println(\"Generated key: \", generatedKey);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to table failed: \", <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Querying data\n+\n+This sample shows three examples to demonstrate the different usages of the `query` operation and query the\n+database table and obtain the results. \n+\n+This example demonstrates querying data from a table in a database. \n+First, a type is created to represent the returned result set. Please note the mapping of the database column \n+to the returned record's property is case insensitive (i.e., `ID` column in result, can be mapped to `id` \n+property in record). Next, the SELECT query is executed via the `query` remote function of the client by passing that \n+result set type. Once the query is executed, each data record can be retrieved by looping the result set. The `stream` \n+returned by the select operation holds a pointer to the actual data in the database and it loads data from the table \n+only when it is accessed. This stream can be iterated only once. \n+\n+```ballerina\n+// Define a type to represent the results.\n+type Student record {\n+    int id;\n+    int age;\n+    string name;\n+};\n+\n+// Select the data from the database table. Query Parameters are passed directly. \n+// Similar to `execute` examples, parameters can be passed as sub types of ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 206}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODMxNTYwOnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowMjoxNVrOGjNE4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowMjoxNVrOGjNE4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2NzU4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Iterating returned table.\n          \n          \n            \n            // Iterating the returned table.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439567587", "createdAt": "2020-06-12T18:02:15Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool\n+\n+    If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be \n+    created for your database unless a connection pool matching with the properties you provided already exists. \n+    Below shown is the example from JDBC module to use the global connection pool. \n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (\"jdbc:mysql://localhost:3306/testdb\", \n+                                \"root\", \"root\");\n+    ```\n+\n+2. Client owned, unsharable connection pool\n+\n+    If you define the `connectionPool` field inline when creating the database client with `sql:ConnectionPool` type, \n+    an unshareable connection pool will be created. Below shown is the example from JDBC module to use the global \n+    connection pool.\n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (url = \"jdbc:mysql://localhost:3306/testdb\", \n+                                connectionPool = { maxOpenConnections: 5 });\n+    ```\n+\n+3. Local shareable connection pool\n+\n+    If you create a record of type `sql:ConnectionPool` and reuse that in the configuration of multiple clients, \n+    for each  set of clients that connects to the same database instance with the same set of properties, a shared \n+    connection pool will be created. Below shown is the example from JDBC module to use the global connection pool.\n+\n+    ```ballerina\n+    sql:ConnectionPool connPool = {maximumPoolSize: 5};\n+    \n+    jdbc:Client dbClient1 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient2 = new (url = \"jdbc:mysql://localhost:3306/testdb\",       \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient3 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    ```\n+    \n+#### Closing the client\n+\n+Once all database operations are performed you can close the database client you have created by invoking `close()`\n+operation. This will close the corresponding connection pool if it is not shared by any other database clients. \n+\n+```ballerina\n+error? e = dbClient.close();\n+if (e is error){\n+    io:println(\"Error occured:\", e);\n+}\n+\n+```    \n+### Database operations\n+\n+Once the client is created, database operations can be executed through that client. This module defines the interface \n+and common properties that are shared among multiple database clients.  It also supports querying, inserting, deleting, \n+updating, and batch updating data.  \n+\n+#### Creating tables\n+\n+This sample creates a table with two columns. One column is of type `int`, and the other is of type `varchar`.\n+The CREATE statement is executed via the `execute` remote function of the client.\n+\n+```ballerina\n+// Create the \u2018Students\u2019 table with fields \u2018id\u2019, 'name' and \u2018age\u2019.\n+var ret = dbClient->execute(\"CREATE TABLE student(id INT AUTO_INCREMENT, \" +\n+                         \"age INT, name VARCHAR(255), PRIMARY KEY (id))\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Students table create status in DB: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Students table creation failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data\n+\n+This sample shows three examples of data insertion by executing an INSERT statement using the `execute` remote function \n+of the client.\n+\n+In the first example, query parameter values are passed directly into the query statement of the `execute` \n+remote function.\n+\n+```ballerina\n+var ret = dbClient->execute(\"INSERT INTO student(age, name) \" +\n+                         \"values (23, 'john')\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the second example, the parameter values, which are in local variables, are used to parameterize the SQL query in \n+`execute` remote function. This type of parameterized SQL query can be used with any primitive Ballerina type \n+like `string`, `int`, `float`, or `boolean`, and in that case, the corresponding SQL type of the parameter is derived \n+from the type of the Ballerina variable that is passed in. \n+\n+```ballerina\n+string name = \"Anne\";\n+int age = 8;\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the third example, parameter values are passed as a `sql:TypedValue` to the `execute` remote function. Use \n+corresponding subtype of `sql:TypedValue` such as `sql:Varchar`, `sql:Char`, `sql:Integer`, etc when you need to \n+provide more details such as the exact SQL type of the parameter.\n+\n+```ballerina\n+sql:Varchar name = new (\"James\");\n+sql:Integer age = new (10);\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data with auto-generated keys\n+\n+This example demonstrates inserting data while returning the auto-generated keys. It achieves this by using the \n+`execute` remote function to execute the INSERT statement.\n+\n+```ballerina\n+int age = 31;\n+string name = \"Kate\";\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    int? count = ret.affectedRowCount;\n+    string|int? generatedKey = ret.lastInsertId;\n+    io:println(\"Inserted row count: \", count);\n+    io:println(\"Generated key: \", generatedKey);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to table failed: \", <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Querying data\n+\n+This sample shows three examples to demonstrate the different usages of the `query` operation and query the\n+database table and obtain the results. \n+\n+This example demonstrates querying data from a table in a database. \n+First, a type is created to represent the returned result set. Please note the mapping of the database column \n+to the returned record's property is case insensitive (i.e., `ID` column in result, can be mapped to `id` \n+property in record). Next, the SELECT query is executed via the `query` remote function of the client by passing that \n+result set type. Once the query is executed, each data record can be retrieved by looping the result set. The `stream` \n+returned by the select operation holds a pointer to the actual data in the database and it loads data from the table \n+only when it is accessed. This stream can be iterated only once. \n+\n+```ballerina\n+// Define a type to represent the results.\n+type Student record {\n+    int id;\n+    int age;\n+    string name;\n+};\n+\n+// Select the data from the database table. Query Parameters are passed directly. \n+// Similar to `execute` examples, parameters can be passed as sub types of \n+// `sql:TypedValue`s as well.\n+int id = 10;\n+int age = 12;\n+stream<Student, sql:Error> resultStream = dbClient->query(`SELECT * FROM students \n+                                                          WHERE id < ${id} AND \n+                                                          age > ${age}`, Student);\n+\n+// Iterating returned table.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODMxNjM4OnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowMjozMlrOGjNFaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowMjozMlrOGjNFaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2NzcyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Defining the return type is optional, and you can query the database without providing the result type. And hence \n          \n          \n            \n            Defining the return type is optional and you can query the database without providing the result type. Hence,", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439567723", "createdAt": "2020-06-12T18:02:32Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool\n+\n+    If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be \n+    created for your database unless a connection pool matching with the properties you provided already exists. \n+    Below shown is the example from JDBC module to use the global connection pool. \n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (\"jdbc:mysql://localhost:3306/testdb\", \n+                                \"root\", \"root\");\n+    ```\n+\n+2. Client owned, unsharable connection pool\n+\n+    If you define the `connectionPool` field inline when creating the database client with `sql:ConnectionPool` type, \n+    an unshareable connection pool will be created. Below shown is the example from JDBC module to use the global \n+    connection pool.\n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (url = \"jdbc:mysql://localhost:3306/testdb\", \n+                                connectionPool = { maxOpenConnections: 5 });\n+    ```\n+\n+3. Local shareable connection pool\n+\n+    If you create a record of type `sql:ConnectionPool` and reuse that in the configuration of multiple clients, \n+    for each  set of clients that connects to the same database instance with the same set of properties, a shared \n+    connection pool will be created. Below shown is the example from JDBC module to use the global connection pool.\n+\n+    ```ballerina\n+    sql:ConnectionPool connPool = {maximumPoolSize: 5};\n+    \n+    jdbc:Client dbClient1 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient2 = new (url = \"jdbc:mysql://localhost:3306/testdb\",       \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient3 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    ```\n+    \n+#### Closing the client\n+\n+Once all database operations are performed you can close the database client you have created by invoking `close()`\n+operation. This will close the corresponding connection pool if it is not shared by any other database clients. \n+\n+```ballerina\n+error? e = dbClient.close();\n+if (e is error){\n+    io:println(\"Error occured:\", e);\n+}\n+\n+```    \n+### Database operations\n+\n+Once the client is created, database operations can be executed through that client. This module defines the interface \n+and common properties that are shared among multiple database clients.  It also supports querying, inserting, deleting, \n+updating, and batch updating data.  \n+\n+#### Creating tables\n+\n+This sample creates a table with two columns. One column is of type `int`, and the other is of type `varchar`.\n+The CREATE statement is executed via the `execute` remote function of the client.\n+\n+```ballerina\n+// Create the \u2018Students\u2019 table with fields \u2018id\u2019, 'name' and \u2018age\u2019.\n+var ret = dbClient->execute(\"CREATE TABLE student(id INT AUTO_INCREMENT, \" +\n+                         \"age INT, name VARCHAR(255), PRIMARY KEY (id))\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Students table create status in DB: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Students table creation failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data\n+\n+This sample shows three examples of data insertion by executing an INSERT statement using the `execute` remote function \n+of the client.\n+\n+In the first example, query parameter values are passed directly into the query statement of the `execute` \n+remote function.\n+\n+```ballerina\n+var ret = dbClient->execute(\"INSERT INTO student(age, name) \" +\n+                         \"values (23, 'john')\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the second example, the parameter values, which are in local variables, are used to parameterize the SQL query in \n+`execute` remote function. This type of parameterized SQL query can be used with any primitive Ballerina type \n+like `string`, `int`, `float`, or `boolean`, and in that case, the corresponding SQL type of the parameter is derived \n+from the type of the Ballerina variable that is passed in. \n+\n+```ballerina\n+string name = \"Anne\";\n+int age = 8;\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the third example, parameter values are passed as a `sql:TypedValue` to the `execute` remote function. Use \n+corresponding subtype of `sql:TypedValue` such as `sql:Varchar`, `sql:Char`, `sql:Integer`, etc when you need to \n+provide more details such as the exact SQL type of the parameter.\n+\n+```ballerina\n+sql:Varchar name = new (\"James\");\n+sql:Integer age = new (10);\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data with auto-generated keys\n+\n+This example demonstrates inserting data while returning the auto-generated keys. It achieves this by using the \n+`execute` remote function to execute the INSERT statement.\n+\n+```ballerina\n+int age = 31;\n+string name = \"Kate\";\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    int? count = ret.affectedRowCount;\n+    string|int? generatedKey = ret.lastInsertId;\n+    io:println(\"Inserted row count: \", count);\n+    io:println(\"Generated key: \", generatedKey);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to table failed: \", <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Querying data\n+\n+This sample shows three examples to demonstrate the different usages of the `query` operation and query the\n+database table and obtain the results. \n+\n+This example demonstrates querying data from a table in a database. \n+First, a type is created to represent the returned result set. Please note the mapping of the database column \n+to the returned record's property is case insensitive (i.e., `ID` column in result, can be mapped to `id` \n+property in record). Next, the SELECT query is executed via the `query` remote function of the client by passing that \n+result set type. Once the query is executed, each data record can be retrieved by looping the result set. The `stream` \n+returned by the select operation holds a pointer to the actual data in the database and it loads data from the table \n+only when it is accessed. This stream can be iterated only once. \n+\n+```ballerina\n+// Define a type to represent the results.\n+type Student record {\n+    int id;\n+    int age;\n+    string name;\n+};\n+\n+// Select the data from the database table. Query Parameters are passed directly. \n+// Similar to `execute` examples, parameters can be passed as sub types of \n+// `sql:TypedValue`s as well.\n+int id = 10;\n+int age = 12;\n+stream<Student, sql:Error> resultStream = dbClient->query(`SELECT * FROM students \n+                                                          WHERE id < ${id} AND \n+                                                          age > ${age}`, Student);\n+\n+// Iterating returned table.\n+error? e = resultStream.forEach(function(Student student) {\n+   io:println(\"Student Id: \", student.id);\n+   io:println(\"Student age: \", student.age);\n+   io:println(\"Student name: \", student.name);\n+});\n+if (e is error) {\n+   io:println(\"Query execution failed.\", e);\n+}\n+```\n+\n+Defining the return type is optional, and you can query the database without providing the result type. And hence ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 225}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODMxNzIyOnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowMjo1MVrOGjNF_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowMjo1MVrOGjNF_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2Nzg3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            the above example can be modified as below with open record type as return type. The property name in the open record \n          \n          \n            \n            the above example can be modified as follows with an open record type as the return type. The property name in the open record", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439567870", "createdAt": "2020-06-12T18:02:51Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool\n+\n+    If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be \n+    created for your database unless a connection pool matching with the properties you provided already exists. \n+    Below shown is the example from JDBC module to use the global connection pool. \n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (\"jdbc:mysql://localhost:3306/testdb\", \n+                                \"root\", \"root\");\n+    ```\n+\n+2. Client owned, unsharable connection pool\n+\n+    If you define the `connectionPool` field inline when creating the database client with `sql:ConnectionPool` type, \n+    an unshareable connection pool will be created. Below shown is the example from JDBC module to use the global \n+    connection pool.\n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (url = \"jdbc:mysql://localhost:3306/testdb\", \n+                                connectionPool = { maxOpenConnections: 5 });\n+    ```\n+\n+3. Local shareable connection pool\n+\n+    If you create a record of type `sql:ConnectionPool` and reuse that in the configuration of multiple clients, \n+    for each  set of clients that connects to the same database instance with the same set of properties, a shared \n+    connection pool will be created. Below shown is the example from JDBC module to use the global connection pool.\n+\n+    ```ballerina\n+    sql:ConnectionPool connPool = {maximumPoolSize: 5};\n+    \n+    jdbc:Client dbClient1 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient2 = new (url = \"jdbc:mysql://localhost:3306/testdb\",       \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient3 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    ```\n+    \n+#### Closing the client\n+\n+Once all database operations are performed you can close the database client you have created by invoking `close()`\n+operation. This will close the corresponding connection pool if it is not shared by any other database clients. \n+\n+```ballerina\n+error? e = dbClient.close();\n+if (e is error){\n+    io:println(\"Error occured:\", e);\n+}\n+\n+```    \n+### Database operations\n+\n+Once the client is created, database operations can be executed through that client. This module defines the interface \n+and common properties that are shared among multiple database clients.  It also supports querying, inserting, deleting, \n+updating, and batch updating data.  \n+\n+#### Creating tables\n+\n+This sample creates a table with two columns. One column is of type `int`, and the other is of type `varchar`.\n+The CREATE statement is executed via the `execute` remote function of the client.\n+\n+```ballerina\n+// Create the \u2018Students\u2019 table with fields \u2018id\u2019, 'name' and \u2018age\u2019.\n+var ret = dbClient->execute(\"CREATE TABLE student(id INT AUTO_INCREMENT, \" +\n+                         \"age INT, name VARCHAR(255), PRIMARY KEY (id))\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Students table create status in DB: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Students table creation failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data\n+\n+This sample shows three examples of data insertion by executing an INSERT statement using the `execute` remote function \n+of the client.\n+\n+In the first example, query parameter values are passed directly into the query statement of the `execute` \n+remote function.\n+\n+```ballerina\n+var ret = dbClient->execute(\"INSERT INTO student(age, name) \" +\n+                         \"values (23, 'john')\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the second example, the parameter values, which are in local variables, are used to parameterize the SQL query in \n+`execute` remote function. This type of parameterized SQL query can be used with any primitive Ballerina type \n+like `string`, `int`, `float`, or `boolean`, and in that case, the corresponding SQL type of the parameter is derived \n+from the type of the Ballerina variable that is passed in. \n+\n+```ballerina\n+string name = \"Anne\";\n+int age = 8;\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the third example, parameter values are passed as a `sql:TypedValue` to the `execute` remote function. Use \n+corresponding subtype of `sql:TypedValue` such as `sql:Varchar`, `sql:Char`, `sql:Integer`, etc when you need to \n+provide more details such as the exact SQL type of the parameter.\n+\n+```ballerina\n+sql:Varchar name = new (\"James\");\n+sql:Integer age = new (10);\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data with auto-generated keys\n+\n+This example demonstrates inserting data while returning the auto-generated keys. It achieves this by using the \n+`execute` remote function to execute the INSERT statement.\n+\n+```ballerina\n+int age = 31;\n+string name = \"Kate\";\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    int? count = ret.affectedRowCount;\n+    string|int? generatedKey = ret.lastInsertId;\n+    io:println(\"Inserted row count: \", count);\n+    io:println(\"Generated key: \", generatedKey);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to table failed: \", <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Querying data\n+\n+This sample shows three examples to demonstrate the different usages of the `query` operation and query the\n+database table and obtain the results. \n+\n+This example demonstrates querying data from a table in a database. \n+First, a type is created to represent the returned result set. Please note the mapping of the database column \n+to the returned record's property is case insensitive (i.e., `ID` column in result, can be mapped to `id` \n+property in record). Next, the SELECT query is executed via the `query` remote function of the client by passing that \n+result set type. Once the query is executed, each data record can be retrieved by looping the result set. The `stream` \n+returned by the select operation holds a pointer to the actual data in the database and it loads data from the table \n+only when it is accessed. This stream can be iterated only once. \n+\n+```ballerina\n+// Define a type to represent the results.\n+type Student record {\n+    int id;\n+    int age;\n+    string name;\n+};\n+\n+// Select the data from the database table. Query Parameters are passed directly. \n+// Similar to `execute` examples, parameters can be passed as sub types of \n+// `sql:TypedValue`s as well.\n+int id = 10;\n+int age = 12;\n+stream<Student, sql:Error> resultStream = dbClient->query(`SELECT * FROM students \n+                                                          WHERE id < ${id} AND \n+                                                          age > ${age}`, Student);\n+\n+// Iterating returned table.\n+error? e = resultStream.forEach(function(Student student) {\n+   io:println(\"Student Id: \", student.id);\n+   io:println(\"Student age: \", student.age);\n+   io:println(\"Student name: \", student.name);\n+});\n+if (e is error) {\n+   io:println(\"Query execution failed.\", e);\n+}\n+```\n+\n+Defining the return type is optional, and you can query the database without providing the result type. And hence \n+the above example can be modified as below with open record type as return type. The property name in the open record ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 226}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODMxNzU3OnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowMzowMFrOGjNGNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowMzowMFrOGjNGNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2NzkyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            type will be same as how the column is defined in the database. \n          \n          \n            \n            type will be the same as how the column is defined in the database.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439567927", "createdAt": "2020-06-12T18:03:00Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool\n+\n+    If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be \n+    created for your database unless a connection pool matching with the properties you provided already exists. \n+    Below shown is the example from JDBC module to use the global connection pool. \n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (\"jdbc:mysql://localhost:3306/testdb\", \n+                                \"root\", \"root\");\n+    ```\n+\n+2. Client owned, unsharable connection pool\n+\n+    If you define the `connectionPool` field inline when creating the database client with `sql:ConnectionPool` type, \n+    an unshareable connection pool will be created. Below shown is the example from JDBC module to use the global \n+    connection pool.\n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (url = \"jdbc:mysql://localhost:3306/testdb\", \n+                                connectionPool = { maxOpenConnections: 5 });\n+    ```\n+\n+3. Local shareable connection pool\n+\n+    If you create a record of type `sql:ConnectionPool` and reuse that in the configuration of multiple clients, \n+    for each  set of clients that connects to the same database instance with the same set of properties, a shared \n+    connection pool will be created. Below shown is the example from JDBC module to use the global connection pool.\n+\n+    ```ballerina\n+    sql:ConnectionPool connPool = {maximumPoolSize: 5};\n+    \n+    jdbc:Client dbClient1 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient2 = new (url = \"jdbc:mysql://localhost:3306/testdb\",       \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient3 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    ```\n+    \n+#### Closing the client\n+\n+Once all database operations are performed you can close the database client you have created by invoking `close()`\n+operation. This will close the corresponding connection pool if it is not shared by any other database clients. \n+\n+```ballerina\n+error? e = dbClient.close();\n+if (e is error){\n+    io:println(\"Error occured:\", e);\n+}\n+\n+```    \n+### Database operations\n+\n+Once the client is created, database operations can be executed through that client. This module defines the interface \n+and common properties that are shared among multiple database clients.  It also supports querying, inserting, deleting, \n+updating, and batch updating data.  \n+\n+#### Creating tables\n+\n+This sample creates a table with two columns. One column is of type `int`, and the other is of type `varchar`.\n+The CREATE statement is executed via the `execute` remote function of the client.\n+\n+```ballerina\n+// Create the \u2018Students\u2019 table with fields \u2018id\u2019, 'name' and \u2018age\u2019.\n+var ret = dbClient->execute(\"CREATE TABLE student(id INT AUTO_INCREMENT, \" +\n+                         \"age INT, name VARCHAR(255), PRIMARY KEY (id))\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Students table create status in DB: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Students table creation failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data\n+\n+This sample shows three examples of data insertion by executing an INSERT statement using the `execute` remote function \n+of the client.\n+\n+In the first example, query parameter values are passed directly into the query statement of the `execute` \n+remote function.\n+\n+```ballerina\n+var ret = dbClient->execute(\"INSERT INTO student(age, name) \" +\n+                         \"values (23, 'john')\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the second example, the parameter values, which are in local variables, are used to parameterize the SQL query in \n+`execute` remote function. This type of parameterized SQL query can be used with any primitive Ballerina type \n+like `string`, `int`, `float`, or `boolean`, and in that case, the corresponding SQL type of the parameter is derived \n+from the type of the Ballerina variable that is passed in. \n+\n+```ballerina\n+string name = \"Anne\";\n+int age = 8;\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the third example, parameter values are passed as a `sql:TypedValue` to the `execute` remote function. Use \n+corresponding subtype of `sql:TypedValue` such as `sql:Varchar`, `sql:Char`, `sql:Integer`, etc when you need to \n+provide more details such as the exact SQL type of the parameter.\n+\n+```ballerina\n+sql:Varchar name = new (\"James\");\n+sql:Integer age = new (10);\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data with auto-generated keys\n+\n+This example demonstrates inserting data while returning the auto-generated keys. It achieves this by using the \n+`execute` remote function to execute the INSERT statement.\n+\n+```ballerina\n+int age = 31;\n+string name = \"Kate\";\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    int? count = ret.affectedRowCount;\n+    string|int? generatedKey = ret.lastInsertId;\n+    io:println(\"Inserted row count: \", count);\n+    io:println(\"Generated key: \", generatedKey);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to table failed: \", <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Querying data\n+\n+This sample shows three examples to demonstrate the different usages of the `query` operation and query the\n+database table and obtain the results. \n+\n+This example demonstrates querying data from a table in a database. \n+First, a type is created to represent the returned result set. Please note the mapping of the database column \n+to the returned record's property is case insensitive (i.e., `ID` column in result, can be mapped to `id` \n+property in record). Next, the SELECT query is executed via the `query` remote function of the client by passing that \n+result set type. Once the query is executed, each data record can be retrieved by looping the result set. The `stream` \n+returned by the select operation holds a pointer to the actual data in the database and it loads data from the table \n+only when it is accessed. This stream can be iterated only once. \n+\n+```ballerina\n+// Define a type to represent the results.\n+type Student record {\n+    int id;\n+    int age;\n+    string name;\n+};\n+\n+// Select the data from the database table. Query Parameters are passed directly. \n+// Similar to `execute` examples, parameters can be passed as sub types of \n+// `sql:TypedValue`s as well.\n+int id = 10;\n+int age = 12;\n+stream<Student, sql:Error> resultStream = dbClient->query(`SELECT * FROM students \n+                                                          WHERE id < ${id} AND \n+                                                          age > ${age}`, Student);\n+\n+// Iterating returned table.\n+error? e = resultStream.forEach(function(Student student) {\n+   io:println(\"Student Id: \", student.id);\n+   io:println(\"Student age: \", student.age);\n+   io:println(\"Student name: \", student.name);\n+});\n+if (e is error) {\n+   io:println(\"Query execution failed.\", e);\n+}\n+```\n+\n+Defining the return type is optional, and you can query the database without providing the result type. And hence \n+the above example can be modified as below with open record type as return type. The property name in the open record \n+type will be same as how the column is defined in the database. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 227}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODMxODA2OnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowMzoxM1rOGjNGhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowMzoxM1rOGjNGhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2ODAwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Select the data from the database table. Query Parameters are passed directly. \n          \n          \n            \n            // Select the data from the database table. The query parameters are passed directly.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439568007", "createdAt": "2020-06-12T18:03:13Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool\n+\n+    If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be \n+    created for your database unless a connection pool matching with the properties you provided already exists. \n+    Below shown is the example from JDBC module to use the global connection pool. \n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (\"jdbc:mysql://localhost:3306/testdb\", \n+                                \"root\", \"root\");\n+    ```\n+\n+2. Client owned, unsharable connection pool\n+\n+    If you define the `connectionPool` field inline when creating the database client with `sql:ConnectionPool` type, \n+    an unshareable connection pool will be created. Below shown is the example from JDBC module to use the global \n+    connection pool.\n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (url = \"jdbc:mysql://localhost:3306/testdb\", \n+                                connectionPool = { maxOpenConnections: 5 });\n+    ```\n+\n+3. Local shareable connection pool\n+\n+    If you create a record of type `sql:ConnectionPool` and reuse that in the configuration of multiple clients, \n+    for each  set of clients that connects to the same database instance with the same set of properties, a shared \n+    connection pool will be created. Below shown is the example from JDBC module to use the global connection pool.\n+\n+    ```ballerina\n+    sql:ConnectionPool connPool = {maximumPoolSize: 5};\n+    \n+    jdbc:Client dbClient1 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient2 = new (url = \"jdbc:mysql://localhost:3306/testdb\",       \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient3 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    ```\n+    \n+#### Closing the client\n+\n+Once all database operations are performed you can close the database client you have created by invoking `close()`\n+operation. This will close the corresponding connection pool if it is not shared by any other database clients. \n+\n+```ballerina\n+error? e = dbClient.close();\n+if (e is error){\n+    io:println(\"Error occured:\", e);\n+}\n+\n+```    \n+### Database operations\n+\n+Once the client is created, database operations can be executed through that client. This module defines the interface \n+and common properties that are shared among multiple database clients.  It also supports querying, inserting, deleting, \n+updating, and batch updating data.  \n+\n+#### Creating tables\n+\n+This sample creates a table with two columns. One column is of type `int`, and the other is of type `varchar`.\n+The CREATE statement is executed via the `execute` remote function of the client.\n+\n+```ballerina\n+// Create the \u2018Students\u2019 table with fields \u2018id\u2019, 'name' and \u2018age\u2019.\n+var ret = dbClient->execute(\"CREATE TABLE student(id INT AUTO_INCREMENT, \" +\n+                         \"age INT, name VARCHAR(255), PRIMARY KEY (id))\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Students table create status in DB: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Students table creation failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data\n+\n+This sample shows three examples of data insertion by executing an INSERT statement using the `execute` remote function \n+of the client.\n+\n+In the first example, query parameter values are passed directly into the query statement of the `execute` \n+remote function.\n+\n+```ballerina\n+var ret = dbClient->execute(\"INSERT INTO student(age, name) \" +\n+                         \"values (23, 'john')\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the second example, the parameter values, which are in local variables, are used to parameterize the SQL query in \n+`execute` remote function. This type of parameterized SQL query can be used with any primitive Ballerina type \n+like `string`, `int`, `float`, or `boolean`, and in that case, the corresponding SQL type of the parameter is derived \n+from the type of the Ballerina variable that is passed in. \n+\n+```ballerina\n+string name = \"Anne\";\n+int age = 8;\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the third example, parameter values are passed as a `sql:TypedValue` to the `execute` remote function. Use \n+corresponding subtype of `sql:TypedValue` such as `sql:Varchar`, `sql:Char`, `sql:Integer`, etc when you need to \n+provide more details such as the exact SQL type of the parameter.\n+\n+```ballerina\n+sql:Varchar name = new (\"James\");\n+sql:Integer age = new (10);\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data with auto-generated keys\n+\n+This example demonstrates inserting data while returning the auto-generated keys. It achieves this by using the \n+`execute` remote function to execute the INSERT statement.\n+\n+```ballerina\n+int age = 31;\n+string name = \"Kate\";\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    int? count = ret.affectedRowCount;\n+    string|int? generatedKey = ret.lastInsertId;\n+    io:println(\"Inserted row count: \", count);\n+    io:println(\"Generated key: \", generatedKey);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to table failed: \", <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Querying data\n+\n+This sample shows three examples to demonstrate the different usages of the `query` operation and query the\n+database table and obtain the results. \n+\n+This example demonstrates querying data from a table in a database. \n+First, a type is created to represent the returned result set. Please note the mapping of the database column \n+to the returned record's property is case insensitive (i.e., `ID` column in result, can be mapped to `id` \n+property in record). Next, the SELECT query is executed via the `query` remote function of the client by passing that \n+result set type. Once the query is executed, each data record can be retrieved by looping the result set. The `stream` \n+returned by the select operation holds a pointer to the actual data in the database and it loads data from the table \n+only when it is accessed. This stream can be iterated only once. \n+\n+```ballerina\n+// Define a type to represent the results.\n+type Student record {\n+    int id;\n+    int age;\n+    string name;\n+};\n+\n+// Select the data from the database table. Query Parameters are passed directly. \n+// Similar to `execute` examples, parameters can be passed as sub types of \n+// `sql:TypedValue`s as well.\n+int id = 10;\n+int age = 12;\n+stream<Student, sql:Error> resultStream = dbClient->query(`SELECT * FROM students \n+                                                          WHERE id < ${id} AND \n+                                                          age > ${age}`, Student);\n+\n+// Iterating returned table.\n+error? e = resultStream.forEach(function(Student student) {\n+   io:println(\"Student Id: \", student.id);\n+   io:println(\"Student age: \", student.age);\n+   io:println(\"Student name: \", student.name);\n+});\n+if (e is error) {\n+   io:println(\"Query execution failed.\", e);\n+}\n+```\n+\n+Defining the return type is optional, and you can query the database without providing the result type. And hence \n+the above example can be modified as below with open record type as return type. The property name in the open record \n+type will be same as how the column is defined in the database. \n+\n+```ballerina\n+// Select the data from the database table. Query Parameters are passed directly. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d1f21e4feb23f9599b52fa67bfc9b54de1367f"}, "originalPosition": 230}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODMyMTkwOnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowNDo0NFrOGjNJIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowNDo0NFrOGjNJIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2ODY3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Similar to `execute` examples, parameters can be passed as sub types of \n          \n          \n            \n            // Similar to the `execute` examples, parameters can be passed as sub types of", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439568675", "createdAt": "2020-06-12T18:04:44Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool\n+\n+    If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be \n+    created for your database unless a connection pool matching with the properties you provided already exists. \n+    Below shown is the example from JDBC module to use the global connection pool. \n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (\"jdbc:mysql://localhost:3306/testdb\", \n+                                \"root\", \"root\");\n+    ```\n+\n+2. Client owned, unsharable connection pool\n+\n+    If you define the `connectionPool` field inline when creating the database client with `sql:ConnectionPool` type, \n+    an unshareable connection pool will be created. Below shown is the example from JDBC module to use the global \n+    connection pool.\n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (url = \"jdbc:mysql://localhost:3306/testdb\", \n+                                connectionPool = { maxOpenConnections: 5 });\n+    ```\n+\n+3. Local shareable connection pool\n+\n+    If you create a record of type `sql:ConnectionPool` and reuse that in the configuration of multiple clients, \n+    for each  set of clients that connects to the same database instance with the same set of properties, a shared \n+    connection pool will be created. Below shown is the example from JDBC module to use the global connection pool.\n+\n+    ```ballerina\n+    sql:ConnectionPool connPool = {maximumPoolSize: 5};\n+    \n+    jdbc:Client dbClient1 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient2 = new (url = \"jdbc:mysql://localhost:3306/testdb\",       \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient3 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    ```\n+    \n+#### Closing the client\n+\n+Once all database operations are performed you can close the database client you have created by invoking `close()`\n+operation. This will close the corresponding connection pool if it is not shared by any other database clients. \n+\n+```ballerina\n+error? e = dbClient.close();\n+if (e is error){\n+    io:println(\"Error occured:\", e);\n+}\n+\n+```    \n+### Database operations\n+\n+Once the client is created, database operations can be executed through that client. This module defines the interface \n+and common properties that are shared among multiple database clients.  It also supports querying, inserting, deleting, \n+updating, and batch updating data.  \n+\n+#### Creating tables\n+\n+This sample creates a table with two columns. One column is of type `int`, and the other is of type `varchar`.\n+The CREATE statement is executed via the `execute` remote function of the client.\n+\n+```ballerina\n+// Create the \u2018Students\u2019 table with fields \u2018id\u2019, 'name' and \u2018age\u2019.\n+var ret = dbClient->execute(\"CREATE TABLE student(id INT AUTO_INCREMENT, \" +\n+                         \"age INT, name VARCHAR(255), PRIMARY KEY (id))\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Students table create status in DB: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Students table creation failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data\n+\n+This sample shows three examples of data insertion by executing an INSERT statement using the `execute` remote function \n+of the client.\n+\n+In the first example, query parameter values are passed directly into the query statement of the `execute` \n+remote function.\n+\n+```ballerina\n+var ret = dbClient->execute(\"INSERT INTO student(age, name) \" +\n+                         \"values (23, 'john')\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the second example, the parameter values, which are in local variables, are used to parameterize the SQL query in \n+`execute` remote function. This type of parameterized SQL query can be used with any primitive Ballerina type \n+like `string`, `int`, `float`, or `boolean`, and in that case, the corresponding SQL type of the parameter is derived \n+from the type of the Ballerina variable that is passed in. \n+\n+```ballerina\n+string name = \"Anne\";\n+int age = 8;\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the third example, parameter values are passed as a `sql:TypedValue` to the `execute` remote function. Use \n+corresponding subtype of `sql:TypedValue` such as `sql:Varchar`, `sql:Char`, `sql:Integer`, etc when you need to \n+provide more details such as the exact SQL type of the parameter.\n+\n+```ballerina\n+sql:Varchar name = new (\"James\");\n+sql:Integer age = new (10);\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data with auto-generated keys\n+\n+This example demonstrates inserting data while returning the auto-generated keys. It achieves this by using the \n+`execute` remote function to execute the INSERT statement.\n+\n+```ballerina\n+int age = 31;\n+string name = \"Kate\";\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    int? count = ret.affectedRowCount;\n+    string|int? generatedKey = ret.lastInsertId;\n+    io:println(\"Inserted row count: \", count);\n+    io:println(\"Generated key: \", generatedKey);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to table failed: \", <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Querying data\n+\n+This sample shows three examples to demonstrate the different usages of the `query` operation and query the\n+database table and obtain the results. \n+\n+This example demonstrates querying data from a table in a database. \n+First, a type is created to represent the returned result set. Please note the mapping of the database column \n+to the returned record's property is case insensitive (i.e., `ID` column in result, can be mapped to `id` \n+property in record). Next, the SELECT query is executed via the `query` remote function of the client by passing that \n+result set type. Once the query is executed, each data record can be retrieved by looping the result set. The `stream` \n+returned by the select operation holds a pointer to the actual data in the database and it loads data from the table \n+only when it is accessed. This stream can be iterated only once. \n+\n+```ballerina\n+// Define a type to represent the results.\n+type Student record {\n+    int id;\n+    int age;\n+    string name;\n+};\n+\n+// Select the data from the database table. Query Parameters are passed directly. \n+// Similar to `execute` examples, parameters can be passed as sub types of \n+// `sql:TypedValue`s as well.\n+int id = 10;\n+int age = 12;\n+stream<Student, sql:Error> resultStream = dbClient->query(`SELECT * FROM students \n+                                                          WHERE id < ${id} AND \n+                                                          age > ${age}`, Student);\n+\n+// Iterating returned table.\n+error? e = resultStream.forEach(function(Student student) {\n+   io:println(\"Student Id: \", student.id);\n+   io:println(\"Student age: \", student.age);\n+   io:println(\"Student name: \", student.name);\n+});\n+if (e is error) {\n+   io:println(\"Query execution failed.\", e);\n+}\n+```\n+\n+Defining the return type is optional, and you can query the database without providing the result type. And hence \n+the above example can be modified as below with open record type as return type. The property name in the open record \n+type will be same as how the column is defined in the database. \n+\n+```ballerina\n+// Select the data from the database table. Query Parameters are passed directly. \n+// Similar to `execute` examples, parameters can be passed as sub types of ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0bb10d4debd0aa76290e8b7fbd275fee2ce4aa3"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODMyMjMxOnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowNDo1M1rOGjNJaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowNDo1M1rOGjNJaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2ODc0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Iterating returned table.\n          \n          \n            \n            // Iterating the returned table.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439568744", "createdAt": "2020-06-12T18:04:53Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool\n+\n+    If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be \n+    created for your database unless a connection pool matching with the properties you provided already exists. \n+    Below shown is the example from JDBC module to use the global connection pool. \n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (\"jdbc:mysql://localhost:3306/testdb\", \n+                                \"root\", \"root\");\n+    ```\n+\n+2. Client owned, unsharable connection pool\n+\n+    If you define the `connectionPool` field inline when creating the database client with `sql:ConnectionPool` type, \n+    an unshareable connection pool will be created. Below shown is the example from JDBC module to use the global \n+    connection pool.\n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (url = \"jdbc:mysql://localhost:3306/testdb\", \n+                                connectionPool = { maxOpenConnections: 5 });\n+    ```\n+\n+3. Local shareable connection pool\n+\n+    If you create a record of type `sql:ConnectionPool` and reuse that in the configuration of multiple clients, \n+    for each  set of clients that connects to the same database instance with the same set of properties, a shared \n+    connection pool will be created. Below shown is the example from JDBC module to use the global connection pool.\n+\n+    ```ballerina\n+    sql:ConnectionPool connPool = {maximumPoolSize: 5};\n+    \n+    jdbc:Client dbClient1 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient2 = new (url = \"jdbc:mysql://localhost:3306/testdb\",       \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient3 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    ```\n+    \n+#### Closing the client\n+\n+Once all database operations are performed you can close the database client you have created by invoking `close()`\n+operation. This will close the corresponding connection pool if it is not shared by any other database clients. \n+\n+```ballerina\n+error? e = dbClient.close();\n+if (e is error){\n+    io:println(\"Error occured:\", e);\n+}\n+\n+```    \n+### Database operations\n+\n+Once the client is created, database operations can be executed through that client. This module defines the interface \n+and common properties that are shared among multiple database clients.  It also supports querying, inserting, deleting, \n+updating, and batch updating data.  \n+\n+#### Creating tables\n+\n+This sample creates a table with two columns. One column is of type `int`, and the other is of type `varchar`.\n+The CREATE statement is executed via the `execute` remote function of the client.\n+\n+```ballerina\n+// Create the \u2018Students\u2019 table with fields \u2018id\u2019, 'name' and \u2018age\u2019.\n+var ret = dbClient->execute(\"CREATE TABLE student(id INT AUTO_INCREMENT, \" +\n+                         \"age INT, name VARCHAR(255), PRIMARY KEY (id))\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Students table create status in DB: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Students table creation failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data\n+\n+This sample shows three examples of data insertion by executing an INSERT statement using the `execute` remote function \n+of the client.\n+\n+In the first example, query parameter values are passed directly into the query statement of the `execute` \n+remote function.\n+\n+```ballerina\n+var ret = dbClient->execute(\"INSERT INTO student(age, name) \" +\n+                         \"values (23, 'john')\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the second example, the parameter values, which are in local variables, are used to parameterize the SQL query in \n+`execute` remote function. This type of parameterized SQL query can be used with any primitive Ballerina type \n+like `string`, `int`, `float`, or `boolean`, and in that case, the corresponding SQL type of the parameter is derived \n+from the type of the Ballerina variable that is passed in. \n+\n+```ballerina\n+string name = \"Anne\";\n+int age = 8;\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the third example, parameter values are passed as a `sql:TypedValue` to the `execute` remote function. Use \n+corresponding subtype of `sql:TypedValue` such as `sql:Varchar`, `sql:Char`, `sql:Integer`, etc when you need to \n+provide more details such as the exact SQL type of the parameter.\n+\n+```ballerina\n+sql:Varchar name = new (\"James\");\n+sql:Integer age = new (10);\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data with auto-generated keys\n+\n+This example demonstrates inserting data while returning the auto-generated keys. It achieves this by using the \n+`execute` remote function to execute the INSERT statement.\n+\n+```ballerina\n+int age = 31;\n+string name = \"Kate\";\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    int? count = ret.affectedRowCount;\n+    string|int? generatedKey = ret.lastInsertId;\n+    io:println(\"Inserted row count: \", count);\n+    io:println(\"Generated key: \", generatedKey);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to table failed: \", <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Querying data\n+\n+This sample shows three examples to demonstrate the different usages of the `query` operation and query the\n+database table and obtain the results. \n+\n+This example demonstrates querying data from a table in a database. \n+First, a type is created to represent the returned result set. Please note the mapping of the database column \n+to the returned record's property is case insensitive (i.e., `ID` column in result, can be mapped to `id` \n+property in record). Next, the SELECT query is executed via the `query` remote function of the client by passing that \n+result set type. Once the query is executed, each data record can be retrieved by looping the result set. The `stream` \n+returned by the select operation holds a pointer to the actual data in the database and it loads data from the table \n+only when it is accessed. This stream can be iterated only once. \n+\n+```ballerina\n+// Define a type to represent the results.\n+type Student record {\n+    int id;\n+    int age;\n+    string name;\n+};\n+\n+// Select the data from the database table. Query Parameters are passed directly. \n+// Similar to `execute` examples, parameters can be passed as sub types of \n+// `sql:TypedValue`s as well.\n+int id = 10;\n+int age = 12;\n+stream<Student, sql:Error> resultStream = dbClient->query(`SELECT * FROM students \n+                                                          WHERE id < ${id} AND \n+                                                          age > ${age}`, Student);\n+\n+// Iterating returned table.\n+error? e = resultStream.forEach(function(Student student) {\n+   io:println(\"Student Id: \", student.id);\n+   io:println(\"Student age: \", student.age);\n+   io:println(\"Student name: \", student.name);\n+});\n+if (e is error) {\n+   io:println(\"Query execution failed.\", e);\n+}\n+```\n+\n+Defining the return type is optional, and you can query the database without providing the result type. And hence \n+the above example can be modified as below with open record type as return type. The property name in the open record \n+type will be same as how the column is defined in the database. \n+\n+```ballerina\n+// Select the data from the database table. Query Parameters are passed directly. \n+// Similar to `execute` examples, parameters can be passed as sub types of \n+// `sql:TypedValue`s as well.\n+int id = 10;\n+int age = 12;\n+stream<record{}, sql:Error> resultStream = dbClient->query(`SELECT * FROM students \n+                                                            WHERE id < ${id} AND \n+                                                            age > ${age}`, Student);\n+\n+// Iterating returned table.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0bb10d4debd0aa76290e8b7fbd275fee2ce4aa3"}, "originalPosition": 239}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODMyMzE2OnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowNToxMVrOGjNJ7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowNToxMVrOGjNJ7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2ODg3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            There are situations where you may do not want to iterate through the database, and in that case you may decide\n          \n          \n            \n            There are situations in which you may not want to iterate through the database and in that case, you may decide", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439568877", "createdAt": "2020-06-12T18:05:11Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool\n+\n+    If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be \n+    created for your database unless a connection pool matching with the properties you provided already exists. \n+    Below shown is the example from JDBC module to use the global connection pool. \n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (\"jdbc:mysql://localhost:3306/testdb\", \n+                                \"root\", \"root\");\n+    ```\n+\n+2. Client owned, unsharable connection pool\n+\n+    If you define the `connectionPool` field inline when creating the database client with `sql:ConnectionPool` type, \n+    an unshareable connection pool will be created. Below shown is the example from JDBC module to use the global \n+    connection pool.\n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (url = \"jdbc:mysql://localhost:3306/testdb\", \n+                                connectionPool = { maxOpenConnections: 5 });\n+    ```\n+\n+3. Local shareable connection pool\n+\n+    If you create a record of type `sql:ConnectionPool` and reuse that in the configuration of multiple clients, \n+    for each  set of clients that connects to the same database instance with the same set of properties, a shared \n+    connection pool will be created. Below shown is the example from JDBC module to use the global connection pool.\n+\n+    ```ballerina\n+    sql:ConnectionPool connPool = {maximumPoolSize: 5};\n+    \n+    jdbc:Client dbClient1 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient2 = new (url = \"jdbc:mysql://localhost:3306/testdb\",       \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient3 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    ```\n+    \n+#### Closing the client\n+\n+Once all database operations are performed you can close the database client you have created by invoking `close()`\n+operation. This will close the corresponding connection pool if it is not shared by any other database clients. \n+\n+```ballerina\n+error? e = dbClient.close();\n+if (e is error){\n+    io:println(\"Error occured:\", e);\n+}\n+\n+```    \n+### Database operations\n+\n+Once the client is created, database operations can be executed through that client. This module defines the interface \n+and common properties that are shared among multiple database clients.  It also supports querying, inserting, deleting, \n+updating, and batch updating data.  \n+\n+#### Creating tables\n+\n+This sample creates a table with two columns. One column is of type `int`, and the other is of type `varchar`.\n+The CREATE statement is executed via the `execute` remote function of the client.\n+\n+```ballerina\n+// Create the \u2018Students\u2019 table with fields \u2018id\u2019, 'name' and \u2018age\u2019.\n+var ret = dbClient->execute(\"CREATE TABLE student(id INT AUTO_INCREMENT, \" +\n+                         \"age INT, name VARCHAR(255), PRIMARY KEY (id))\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Students table create status in DB: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Students table creation failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data\n+\n+This sample shows three examples of data insertion by executing an INSERT statement using the `execute` remote function \n+of the client.\n+\n+In the first example, query parameter values are passed directly into the query statement of the `execute` \n+remote function.\n+\n+```ballerina\n+var ret = dbClient->execute(\"INSERT INTO student(age, name) \" +\n+                         \"values (23, 'john')\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the second example, the parameter values, which are in local variables, are used to parameterize the SQL query in \n+`execute` remote function. This type of parameterized SQL query can be used with any primitive Ballerina type \n+like `string`, `int`, `float`, or `boolean`, and in that case, the corresponding SQL type of the parameter is derived \n+from the type of the Ballerina variable that is passed in. \n+\n+```ballerina\n+string name = \"Anne\";\n+int age = 8;\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the third example, parameter values are passed as a `sql:TypedValue` to the `execute` remote function. Use \n+corresponding subtype of `sql:TypedValue` such as `sql:Varchar`, `sql:Char`, `sql:Integer`, etc when you need to \n+provide more details such as the exact SQL type of the parameter.\n+\n+```ballerina\n+sql:Varchar name = new (\"James\");\n+sql:Integer age = new (10);\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data with auto-generated keys\n+\n+This example demonstrates inserting data while returning the auto-generated keys. It achieves this by using the \n+`execute` remote function to execute the INSERT statement.\n+\n+```ballerina\n+int age = 31;\n+string name = \"Kate\";\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    int? count = ret.affectedRowCount;\n+    string|int? generatedKey = ret.lastInsertId;\n+    io:println(\"Inserted row count: \", count);\n+    io:println(\"Generated key: \", generatedKey);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to table failed: \", <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Querying data\n+\n+This sample shows three examples to demonstrate the different usages of the `query` operation and query the\n+database table and obtain the results. \n+\n+This example demonstrates querying data from a table in a database. \n+First, a type is created to represent the returned result set. Please note the mapping of the database column \n+to the returned record's property is case insensitive (i.e., `ID` column in result, can be mapped to `id` \n+property in record). Next, the SELECT query is executed via the `query` remote function of the client by passing that \n+result set type. Once the query is executed, each data record can be retrieved by looping the result set. The `stream` \n+returned by the select operation holds a pointer to the actual data in the database and it loads data from the table \n+only when it is accessed. This stream can be iterated only once. \n+\n+```ballerina\n+// Define a type to represent the results.\n+type Student record {\n+    int id;\n+    int age;\n+    string name;\n+};\n+\n+// Select the data from the database table. Query Parameters are passed directly. \n+// Similar to `execute` examples, parameters can be passed as sub types of \n+// `sql:TypedValue`s as well.\n+int id = 10;\n+int age = 12;\n+stream<Student, sql:Error> resultStream = dbClient->query(`SELECT * FROM students \n+                                                          WHERE id < ${id} AND \n+                                                          age > ${age}`, Student);\n+\n+// Iterating returned table.\n+error? e = resultStream.forEach(function(Student student) {\n+   io:println(\"Student Id: \", student.id);\n+   io:println(\"Student age: \", student.age);\n+   io:println(\"Student name: \", student.name);\n+});\n+if (e is error) {\n+   io:println(\"Query execution failed.\", e);\n+}\n+```\n+\n+Defining the return type is optional, and you can query the database without providing the result type. And hence \n+the above example can be modified as below with open record type as return type. The property name in the open record \n+type will be same as how the column is defined in the database. \n+\n+```ballerina\n+// Select the data from the database table. Query Parameters are passed directly. \n+// Similar to `execute` examples, parameters can be passed as sub types of \n+// `sql:TypedValue`s as well.\n+int id = 10;\n+int age = 12;\n+stream<record{}, sql:Error> resultStream = dbClient->query(`SELECT * FROM students \n+                                                            WHERE id < ${id} AND \n+                                                            age > ${age}`, Student);\n+\n+// Iterating returned table.\n+error? e = resultStream.forEach(function(record{} student) {\n+   io:println(\"Student Id: \", student[\"id\"]);\n+   io:println(\"Student age: \", student[\"age\"]);\n+   io:println(\"Student name: \", student[\"name\"];\n+});\n+if (e is error) {\n+   io:println(\"Query execution failed.\", e);\n+}\n+```\n+\n+There are situations where you may do not want to iterate through the database, and in that case you may decide", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0bb10d4debd0aa76290e8b7fbd275fee2ce4aa3"}, "originalPosition": 250}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODMyMzg4OnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowNToyNlrOGjNKUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowNToyNlrOGjNKUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2ODk3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            result stream will not be closed, and you have to explicitly invoke `close` operation on the \n          \n          \n            \n            result stream will not be closed and you have to explicitly invoke the `close` operation on the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439568976", "createdAt": "2020-06-12T18:05:26Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool\n+\n+    If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be \n+    created for your database unless a connection pool matching with the properties you provided already exists. \n+    Below shown is the example from JDBC module to use the global connection pool. \n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (\"jdbc:mysql://localhost:3306/testdb\", \n+                                \"root\", \"root\");\n+    ```\n+\n+2. Client owned, unsharable connection pool\n+\n+    If you define the `connectionPool` field inline when creating the database client with `sql:ConnectionPool` type, \n+    an unshareable connection pool will be created. Below shown is the example from JDBC module to use the global \n+    connection pool.\n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (url = \"jdbc:mysql://localhost:3306/testdb\", \n+                                connectionPool = { maxOpenConnections: 5 });\n+    ```\n+\n+3. Local shareable connection pool\n+\n+    If you create a record of type `sql:ConnectionPool` and reuse that in the configuration of multiple clients, \n+    for each  set of clients that connects to the same database instance with the same set of properties, a shared \n+    connection pool will be created. Below shown is the example from JDBC module to use the global connection pool.\n+\n+    ```ballerina\n+    sql:ConnectionPool connPool = {maximumPoolSize: 5};\n+    \n+    jdbc:Client dbClient1 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient2 = new (url = \"jdbc:mysql://localhost:3306/testdb\",       \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient3 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    ```\n+    \n+#### Closing the client\n+\n+Once all database operations are performed you can close the database client you have created by invoking `close()`\n+operation. This will close the corresponding connection pool if it is not shared by any other database clients. \n+\n+```ballerina\n+error? e = dbClient.close();\n+if (e is error){\n+    io:println(\"Error occured:\", e);\n+}\n+\n+```    \n+### Database operations\n+\n+Once the client is created, database operations can be executed through that client. This module defines the interface \n+and common properties that are shared among multiple database clients.  It also supports querying, inserting, deleting, \n+updating, and batch updating data.  \n+\n+#### Creating tables\n+\n+This sample creates a table with two columns. One column is of type `int`, and the other is of type `varchar`.\n+The CREATE statement is executed via the `execute` remote function of the client.\n+\n+```ballerina\n+// Create the \u2018Students\u2019 table with fields \u2018id\u2019, 'name' and \u2018age\u2019.\n+var ret = dbClient->execute(\"CREATE TABLE student(id INT AUTO_INCREMENT, \" +\n+                         \"age INT, name VARCHAR(255), PRIMARY KEY (id))\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Students table create status in DB: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Students table creation failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data\n+\n+This sample shows three examples of data insertion by executing an INSERT statement using the `execute` remote function \n+of the client.\n+\n+In the first example, query parameter values are passed directly into the query statement of the `execute` \n+remote function.\n+\n+```ballerina\n+var ret = dbClient->execute(\"INSERT INTO student(age, name) \" +\n+                         \"values (23, 'john')\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the second example, the parameter values, which are in local variables, are used to parameterize the SQL query in \n+`execute` remote function. This type of parameterized SQL query can be used with any primitive Ballerina type \n+like `string`, `int`, `float`, or `boolean`, and in that case, the corresponding SQL type of the parameter is derived \n+from the type of the Ballerina variable that is passed in. \n+\n+```ballerina\n+string name = \"Anne\";\n+int age = 8;\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the third example, parameter values are passed as a `sql:TypedValue` to the `execute` remote function. Use \n+corresponding subtype of `sql:TypedValue` such as `sql:Varchar`, `sql:Char`, `sql:Integer`, etc when you need to \n+provide more details such as the exact SQL type of the parameter.\n+\n+```ballerina\n+sql:Varchar name = new (\"James\");\n+sql:Integer age = new (10);\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data with auto-generated keys\n+\n+This example demonstrates inserting data while returning the auto-generated keys. It achieves this by using the \n+`execute` remote function to execute the INSERT statement.\n+\n+```ballerina\n+int age = 31;\n+string name = \"Kate\";\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    int? count = ret.affectedRowCount;\n+    string|int? generatedKey = ret.lastInsertId;\n+    io:println(\"Inserted row count: \", count);\n+    io:println(\"Generated key: \", generatedKey);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to table failed: \", <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Querying data\n+\n+This sample shows three examples to demonstrate the different usages of the `query` operation and query the\n+database table and obtain the results. \n+\n+This example demonstrates querying data from a table in a database. \n+First, a type is created to represent the returned result set. Please note the mapping of the database column \n+to the returned record's property is case insensitive (i.e., `ID` column in result, can be mapped to `id` \n+property in record). Next, the SELECT query is executed via the `query` remote function of the client by passing that \n+result set type. Once the query is executed, each data record can be retrieved by looping the result set. The `stream` \n+returned by the select operation holds a pointer to the actual data in the database and it loads data from the table \n+only when it is accessed. This stream can be iterated only once. \n+\n+```ballerina\n+// Define a type to represent the results.\n+type Student record {\n+    int id;\n+    int age;\n+    string name;\n+};\n+\n+// Select the data from the database table. Query Parameters are passed directly. \n+// Similar to `execute` examples, parameters can be passed as sub types of \n+// `sql:TypedValue`s as well.\n+int id = 10;\n+int age = 12;\n+stream<Student, sql:Error> resultStream = dbClient->query(`SELECT * FROM students \n+                                                          WHERE id < ${id} AND \n+                                                          age > ${age}`, Student);\n+\n+// Iterating returned table.\n+error? e = resultStream.forEach(function(Student student) {\n+   io:println(\"Student Id: \", student.id);\n+   io:println(\"Student age: \", student.age);\n+   io:println(\"Student name: \", student.name);\n+});\n+if (e is error) {\n+   io:println(\"Query execution failed.\", e);\n+}\n+```\n+\n+Defining the return type is optional, and you can query the database without providing the result type. And hence \n+the above example can be modified as below with open record type as return type. The property name in the open record \n+type will be same as how the column is defined in the database. \n+\n+```ballerina\n+// Select the data from the database table. Query Parameters are passed directly. \n+// Similar to `execute` examples, parameters can be passed as sub types of \n+// `sql:TypedValue`s as well.\n+int id = 10;\n+int age = 12;\n+stream<record{}, sql:Error> resultStream = dbClient->query(`SELECT * FROM students \n+                                                            WHERE id < ${id} AND \n+                                                            age > ${age}`, Student);\n+\n+// Iterating returned table.\n+error? e = resultStream.forEach(function(record{} student) {\n+   io:println(\"Student Id: \", student[\"id\"]);\n+   io:println(\"Student age: \", student[\"age\"]);\n+   io:println(\"Student name: \", student[\"name\"];\n+});\n+if (e is error) {\n+   io:println(\"Query execution failed.\", e);\n+}\n+```\n+\n+There are situations where you may do not want to iterate through the database, and in that case you may decide\n+to only use the `next()` operation in the result `stream` and retrieve the first record. In such cases, the returned\n+result stream will not be closed, and you have to explicitly invoke `close` operation on the ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0bb10d4debd0aa76290e8b7fbd275fee2ce4aa3"}, "originalPosition": 252}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODMyNDIzOnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowNTozNFrOGjNKiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowNTozNFrOGjNKiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2OTAzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `sql:Client` to release the connection resources and avoid connection leak as shown below.\n          \n          \n            \n            `sql:Client` to release the connection resources and avoid a connection leak as shown below.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439569033", "createdAt": "2020-06-12T18:05:34Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool\n+\n+    If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be \n+    created for your database unless a connection pool matching with the properties you provided already exists. \n+    Below shown is the example from JDBC module to use the global connection pool. \n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (\"jdbc:mysql://localhost:3306/testdb\", \n+                                \"root\", \"root\");\n+    ```\n+\n+2. Client owned, unsharable connection pool\n+\n+    If you define the `connectionPool` field inline when creating the database client with `sql:ConnectionPool` type, \n+    an unshareable connection pool will be created. Below shown is the example from JDBC module to use the global \n+    connection pool.\n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (url = \"jdbc:mysql://localhost:3306/testdb\", \n+                                connectionPool = { maxOpenConnections: 5 });\n+    ```\n+\n+3. Local shareable connection pool\n+\n+    If you create a record of type `sql:ConnectionPool` and reuse that in the configuration of multiple clients, \n+    for each  set of clients that connects to the same database instance with the same set of properties, a shared \n+    connection pool will be created. Below shown is the example from JDBC module to use the global connection pool.\n+\n+    ```ballerina\n+    sql:ConnectionPool connPool = {maximumPoolSize: 5};\n+    \n+    jdbc:Client dbClient1 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient2 = new (url = \"jdbc:mysql://localhost:3306/testdb\",       \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient3 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    ```\n+    \n+#### Closing the client\n+\n+Once all database operations are performed you can close the database client you have created by invoking `close()`\n+operation. This will close the corresponding connection pool if it is not shared by any other database clients. \n+\n+```ballerina\n+error? e = dbClient.close();\n+if (e is error){\n+    io:println(\"Error occured:\", e);\n+}\n+\n+```    \n+### Database operations\n+\n+Once the client is created, database operations can be executed through that client. This module defines the interface \n+and common properties that are shared among multiple database clients.  It also supports querying, inserting, deleting, \n+updating, and batch updating data.  \n+\n+#### Creating tables\n+\n+This sample creates a table with two columns. One column is of type `int`, and the other is of type `varchar`.\n+The CREATE statement is executed via the `execute` remote function of the client.\n+\n+```ballerina\n+// Create the \u2018Students\u2019 table with fields \u2018id\u2019, 'name' and \u2018age\u2019.\n+var ret = dbClient->execute(\"CREATE TABLE student(id INT AUTO_INCREMENT, \" +\n+                         \"age INT, name VARCHAR(255), PRIMARY KEY (id))\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Students table create status in DB: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Students table creation failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data\n+\n+This sample shows three examples of data insertion by executing an INSERT statement using the `execute` remote function \n+of the client.\n+\n+In the first example, query parameter values are passed directly into the query statement of the `execute` \n+remote function.\n+\n+```ballerina\n+var ret = dbClient->execute(\"INSERT INTO student(age, name) \" +\n+                         \"values (23, 'john')\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the second example, the parameter values, which are in local variables, are used to parameterize the SQL query in \n+`execute` remote function. This type of parameterized SQL query can be used with any primitive Ballerina type \n+like `string`, `int`, `float`, or `boolean`, and in that case, the corresponding SQL type of the parameter is derived \n+from the type of the Ballerina variable that is passed in. \n+\n+```ballerina\n+string name = \"Anne\";\n+int age = 8;\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the third example, parameter values are passed as a `sql:TypedValue` to the `execute` remote function. Use \n+corresponding subtype of `sql:TypedValue` such as `sql:Varchar`, `sql:Char`, `sql:Integer`, etc when you need to \n+provide more details such as the exact SQL type of the parameter.\n+\n+```ballerina\n+sql:Varchar name = new (\"James\");\n+sql:Integer age = new (10);\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data with auto-generated keys\n+\n+This example demonstrates inserting data while returning the auto-generated keys. It achieves this by using the \n+`execute` remote function to execute the INSERT statement.\n+\n+```ballerina\n+int age = 31;\n+string name = \"Kate\";\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    int? count = ret.affectedRowCount;\n+    string|int? generatedKey = ret.lastInsertId;\n+    io:println(\"Inserted row count: \", count);\n+    io:println(\"Generated key: \", generatedKey);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to table failed: \", <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Querying data\n+\n+This sample shows three examples to demonstrate the different usages of the `query` operation and query the\n+database table and obtain the results. \n+\n+This example demonstrates querying data from a table in a database. \n+First, a type is created to represent the returned result set. Please note the mapping of the database column \n+to the returned record's property is case insensitive (i.e., `ID` column in result, can be mapped to `id` \n+property in record). Next, the SELECT query is executed via the `query` remote function of the client by passing that \n+result set type. Once the query is executed, each data record can be retrieved by looping the result set. The `stream` \n+returned by the select operation holds a pointer to the actual data in the database and it loads data from the table \n+only when it is accessed. This stream can be iterated only once. \n+\n+```ballerina\n+// Define a type to represent the results.\n+type Student record {\n+    int id;\n+    int age;\n+    string name;\n+};\n+\n+// Select the data from the database table. Query Parameters are passed directly. \n+// Similar to `execute` examples, parameters can be passed as sub types of \n+// `sql:TypedValue`s as well.\n+int id = 10;\n+int age = 12;\n+stream<Student, sql:Error> resultStream = dbClient->query(`SELECT * FROM students \n+                                                          WHERE id < ${id} AND \n+                                                          age > ${age}`, Student);\n+\n+// Iterating returned table.\n+error? e = resultStream.forEach(function(Student student) {\n+   io:println(\"Student Id: \", student.id);\n+   io:println(\"Student age: \", student.age);\n+   io:println(\"Student name: \", student.name);\n+});\n+if (e is error) {\n+   io:println(\"Query execution failed.\", e);\n+}\n+```\n+\n+Defining the return type is optional, and you can query the database without providing the result type. And hence \n+the above example can be modified as below with open record type as return type. The property name in the open record \n+type will be same as how the column is defined in the database. \n+\n+```ballerina\n+// Select the data from the database table. Query Parameters are passed directly. \n+// Similar to `execute` examples, parameters can be passed as sub types of \n+// `sql:TypedValue`s as well.\n+int id = 10;\n+int age = 12;\n+stream<record{}, sql:Error> resultStream = dbClient->query(`SELECT * FROM students \n+                                                            WHERE id < ${id} AND \n+                                                            age > ${age}`, Student);\n+\n+// Iterating returned table.\n+error? e = resultStream.forEach(function(record{} student) {\n+   io:println(\"Student Id: \", student[\"id\"]);\n+   io:println(\"Student age: \", student[\"age\"]);\n+   io:println(\"Student name: \", student[\"name\"];\n+});\n+if (e is error) {\n+   io:println(\"Query execution failed.\", e);\n+}\n+```\n+\n+There are situations where you may do not want to iterate through the database, and in that case you may decide\n+to only use the `next()` operation in the result `stream` and retrieve the first record. In such cases, the returned\n+result stream will not be closed, and you have to explicitly invoke `close` operation on the \n+`sql:Client` to release the connection resources and avoid connection leak as shown below.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0bb10d4debd0aa76290e8b7fbd275fee2ce4aa3"}, "originalPosition": 253}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODMyNTA2OnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowNTo0OVrOGjNLAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowNTo0OVrOGjNLAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2OTE1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This example demonstrates deleting data by executing an DELETE statement via the `execute` remote function of \n          \n          \n            \n            This example demonstrates deleting data by executing a DELETE statement via the `execute` remote function of", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439569154", "createdAt": "2020-06-12T18:05:49Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool\n+\n+    If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be \n+    created for your database unless a connection pool matching with the properties you provided already exists. \n+    Below shown is the example from JDBC module to use the global connection pool. \n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (\"jdbc:mysql://localhost:3306/testdb\", \n+                                \"root\", \"root\");\n+    ```\n+\n+2. Client owned, unsharable connection pool\n+\n+    If you define the `connectionPool` field inline when creating the database client with `sql:ConnectionPool` type, \n+    an unshareable connection pool will be created. Below shown is the example from JDBC module to use the global \n+    connection pool.\n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (url = \"jdbc:mysql://localhost:3306/testdb\", \n+                                connectionPool = { maxOpenConnections: 5 });\n+    ```\n+\n+3. Local shareable connection pool\n+\n+    If you create a record of type `sql:ConnectionPool` and reuse that in the configuration of multiple clients, \n+    for each  set of clients that connects to the same database instance with the same set of properties, a shared \n+    connection pool will be created. Below shown is the example from JDBC module to use the global connection pool.\n+\n+    ```ballerina\n+    sql:ConnectionPool connPool = {maximumPoolSize: 5};\n+    \n+    jdbc:Client dbClient1 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient2 = new (url = \"jdbc:mysql://localhost:3306/testdb\",       \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient3 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    ```\n+    \n+#### Closing the client\n+\n+Once all database operations are performed you can close the database client you have created by invoking `close()`\n+operation. This will close the corresponding connection pool if it is not shared by any other database clients. \n+\n+```ballerina\n+error? e = dbClient.close();\n+if (e is error){\n+    io:println(\"Error occured:\", e);\n+}\n+\n+```    \n+### Database operations\n+\n+Once the client is created, database operations can be executed through that client. This module defines the interface \n+and common properties that are shared among multiple database clients.  It also supports querying, inserting, deleting, \n+updating, and batch updating data.  \n+\n+#### Creating tables\n+\n+This sample creates a table with two columns. One column is of type `int`, and the other is of type `varchar`.\n+The CREATE statement is executed via the `execute` remote function of the client.\n+\n+```ballerina\n+// Create the \u2018Students\u2019 table with fields \u2018id\u2019, 'name' and \u2018age\u2019.\n+var ret = dbClient->execute(\"CREATE TABLE student(id INT AUTO_INCREMENT, \" +\n+                         \"age INT, name VARCHAR(255), PRIMARY KEY (id))\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Students table create status in DB: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Students table creation failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data\n+\n+This sample shows three examples of data insertion by executing an INSERT statement using the `execute` remote function \n+of the client.\n+\n+In the first example, query parameter values are passed directly into the query statement of the `execute` \n+remote function.\n+\n+```ballerina\n+var ret = dbClient->execute(\"INSERT INTO student(age, name) \" +\n+                         \"values (23, 'john')\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the second example, the parameter values, which are in local variables, are used to parameterize the SQL query in \n+`execute` remote function. This type of parameterized SQL query can be used with any primitive Ballerina type \n+like `string`, `int`, `float`, or `boolean`, and in that case, the corresponding SQL type of the parameter is derived \n+from the type of the Ballerina variable that is passed in. \n+\n+```ballerina\n+string name = \"Anne\";\n+int age = 8;\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the third example, parameter values are passed as a `sql:TypedValue` to the `execute` remote function. Use \n+corresponding subtype of `sql:TypedValue` such as `sql:Varchar`, `sql:Char`, `sql:Integer`, etc when you need to \n+provide more details such as the exact SQL type of the parameter.\n+\n+```ballerina\n+sql:Varchar name = new (\"James\");\n+sql:Integer age = new (10);\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data with auto-generated keys\n+\n+This example demonstrates inserting data while returning the auto-generated keys. It achieves this by using the \n+`execute` remote function to execute the INSERT statement.\n+\n+```ballerina\n+int age = 31;\n+string name = \"Kate\";\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    int? count = ret.affectedRowCount;\n+    string|int? generatedKey = ret.lastInsertId;\n+    io:println(\"Inserted row count: \", count);\n+    io:println(\"Generated key: \", generatedKey);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to table failed: \", <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Querying data\n+\n+This sample shows three examples to demonstrate the different usages of the `query` operation and query the\n+database table and obtain the results. \n+\n+This example demonstrates querying data from a table in a database. \n+First, a type is created to represent the returned result set. Please note the mapping of the database column \n+to the returned record's property is case insensitive (i.e., `ID` column in result, can be mapped to `id` \n+property in record). Next, the SELECT query is executed via the `query` remote function of the client by passing that \n+result set type. Once the query is executed, each data record can be retrieved by looping the result set. The `stream` \n+returned by the select operation holds a pointer to the actual data in the database and it loads data from the table \n+only when it is accessed. This stream can be iterated only once. \n+\n+```ballerina\n+// Define a type to represent the results.\n+type Student record {\n+    int id;\n+    int age;\n+    string name;\n+};\n+\n+// Select the data from the database table. Query Parameters are passed directly. \n+// Similar to `execute` examples, parameters can be passed as sub types of \n+// `sql:TypedValue`s as well.\n+int id = 10;\n+int age = 12;\n+stream<Student, sql:Error> resultStream = dbClient->query(`SELECT * FROM students \n+                                                          WHERE id < ${id} AND \n+                                                          age > ${age}`, Student);\n+\n+// Iterating returned table.\n+error? e = resultStream.forEach(function(Student student) {\n+   io:println(\"Student Id: \", student.id);\n+   io:println(\"Student age: \", student.age);\n+   io:println(\"Student name: \", student.name);\n+});\n+if (e is error) {\n+   io:println(\"Query execution failed.\", e);\n+}\n+```\n+\n+Defining the return type is optional, and you can query the database without providing the result type. And hence \n+the above example can be modified as below with open record type as return type. The property name in the open record \n+type will be same as how the column is defined in the database. \n+\n+```ballerina\n+// Select the data from the database table. Query Parameters are passed directly. \n+// Similar to `execute` examples, parameters can be passed as sub types of \n+// `sql:TypedValue`s as well.\n+int id = 10;\n+int age = 12;\n+stream<record{}, sql:Error> resultStream = dbClient->query(`SELECT * FROM students \n+                                                            WHERE id < ${id} AND \n+                                                            age > ${age}`, Student);\n+\n+// Iterating returned table.\n+error? e = resultStream.forEach(function(record{} student) {\n+   io:println(\"Student Id: \", student[\"id\"]);\n+   io:println(\"Student age: \", student[\"age\"]);\n+   io:println(\"Student name: \", student[\"name\"];\n+});\n+if (e is error) {\n+   io:println(\"Query execution failed.\", e);\n+}\n+```\n+\n+There are situations where you may do not want to iterate through the database, and in that case you may decide\n+to only use the `next()` operation in the result `stream` and retrieve the first record. In such cases, the returned\n+result stream will not be closed, and you have to explicitly invoke `close` operation on the \n+`sql:Client` to release the connection resources and avoid connection leak as shown below.\n+\n+```ballerina\n+stream<record{}, sql:Error> resultStream = dbClient->query(\"SELECT count(*) as \" + \n+                                                           \"total FROM students\");\n+\n+record {|record {} value;|}|error? result = resultStream.next();\n+\n+if (result is record {|record {} value;|}) {\n+    io:println(\"Total students : \", result.value[\"total\"]);\n+} else if (result is error) {\n+    io:println(\"Error encoutered when executing query. \", result);\n+} else {\n+    io:println(\"Student table is empty\");\n+}\n+\n+error? e = resultStream.close();\n+if(e is error){\n+    io:println(\"Error when closing the stream\", e);\n+}\n+```\n+\n+#### Updating data\n+\n+This example demonstrates modifying data by executing an UPDATE statement via the `execute` remote function of \n+the client.\n+\n+```ballerina\n+int age = 23;\n+var ret = dbClient->execute(`UPDATE students SET name = 'John' WHERE age = ${age}`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Updated row count in Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Update to students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Deleting data\n+\n+This example demonstrates deleting data by executing an DELETE statement via the `execute` remote function of ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0bb10d4debd0aa76290e8b7fbd275fee2ce4aa3"}, "originalPosition": 294}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODMyNjM2OnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowNjoxNlrOGjNL0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowNjoxNlrOGjNL0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2OTM2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            parameterizing the SQL query as same as `execute` operations above.  \n          \n          \n            \n            parameterizing the SQL query as same as the  above `execute` operations.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439569362", "createdAt": "2020-06-12T18:06:16Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool\n+\n+    If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be \n+    created for your database unless a connection pool matching with the properties you provided already exists. \n+    Below shown is the example from JDBC module to use the global connection pool. \n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (\"jdbc:mysql://localhost:3306/testdb\", \n+                                \"root\", \"root\");\n+    ```\n+\n+2. Client owned, unsharable connection pool\n+\n+    If you define the `connectionPool` field inline when creating the database client with `sql:ConnectionPool` type, \n+    an unshareable connection pool will be created. Below shown is the example from JDBC module to use the global \n+    connection pool.\n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (url = \"jdbc:mysql://localhost:3306/testdb\", \n+                                connectionPool = { maxOpenConnections: 5 });\n+    ```\n+\n+3. Local shareable connection pool\n+\n+    If you create a record of type `sql:ConnectionPool` and reuse that in the configuration of multiple clients, \n+    for each  set of clients that connects to the same database instance with the same set of properties, a shared \n+    connection pool will be created. Below shown is the example from JDBC module to use the global connection pool.\n+\n+    ```ballerina\n+    sql:ConnectionPool connPool = {maximumPoolSize: 5};\n+    \n+    jdbc:Client dbClient1 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient2 = new (url = \"jdbc:mysql://localhost:3306/testdb\",       \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient3 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    ```\n+    \n+#### Closing the client\n+\n+Once all database operations are performed you can close the database client you have created by invoking `close()`\n+operation. This will close the corresponding connection pool if it is not shared by any other database clients. \n+\n+```ballerina\n+error? e = dbClient.close();\n+if (e is error){\n+    io:println(\"Error occured:\", e);\n+}\n+\n+```    \n+### Database operations\n+\n+Once the client is created, database operations can be executed through that client. This module defines the interface \n+and common properties that are shared among multiple database clients.  It also supports querying, inserting, deleting, \n+updating, and batch updating data.  \n+\n+#### Creating tables\n+\n+This sample creates a table with two columns. One column is of type `int`, and the other is of type `varchar`.\n+The CREATE statement is executed via the `execute` remote function of the client.\n+\n+```ballerina\n+// Create the \u2018Students\u2019 table with fields \u2018id\u2019, 'name' and \u2018age\u2019.\n+var ret = dbClient->execute(\"CREATE TABLE student(id INT AUTO_INCREMENT, \" +\n+                         \"age INT, name VARCHAR(255), PRIMARY KEY (id))\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Students table create status in DB: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Students table creation failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data\n+\n+This sample shows three examples of data insertion by executing an INSERT statement using the `execute` remote function \n+of the client.\n+\n+In the first example, query parameter values are passed directly into the query statement of the `execute` \n+remote function.\n+\n+```ballerina\n+var ret = dbClient->execute(\"INSERT INTO student(age, name) \" +\n+                         \"values (23, 'john')\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the second example, the parameter values, which are in local variables, are used to parameterize the SQL query in \n+`execute` remote function. This type of parameterized SQL query can be used with any primitive Ballerina type \n+like `string`, `int`, `float`, or `boolean`, and in that case, the corresponding SQL type of the parameter is derived \n+from the type of the Ballerina variable that is passed in. \n+\n+```ballerina\n+string name = \"Anne\";\n+int age = 8;\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the third example, parameter values are passed as a `sql:TypedValue` to the `execute` remote function. Use \n+corresponding subtype of `sql:TypedValue` such as `sql:Varchar`, `sql:Char`, `sql:Integer`, etc when you need to \n+provide more details such as the exact SQL type of the parameter.\n+\n+```ballerina\n+sql:Varchar name = new (\"James\");\n+sql:Integer age = new (10);\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data with auto-generated keys\n+\n+This example demonstrates inserting data while returning the auto-generated keys. It achieves this by using the \n+`execute` remote function to execute the INSERT statement.\n+\n+```ballerina\n+int age = 31;\n+string name = \"Kate\";\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    int? count = ret.affectedRowCount;\n+    string|int? generatedKey = ret.lastInsertId;\n+    io:println(\"Inserted row count: \", count);\n+    io:println(\"Generated key: \", generatedKey);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to table failed: \", <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Querying data\n+\n+This sample shows three examples to demonstrate the different usages of the `query` operation and query the\n+database table and obtain the results. \n+\n+This example demonstrates querying data from a table in a database. \n+First, a type is created to represent the returned result set. Please note the mapping of the database column \n+to the returned record's property is case insensitive (i.e., `ID` column in result, can be mapped to `id` \n+property in record). Next, the SELECT query is executed via the `query` remote function of the client by passing that \n+result set type. Once the query is executed, each data record can be retrieved by looping the result set. The `stream` \n+returned by the select operation holds a pointer to the actual data in the database and it loads data from the table \n+only when it is accessed. This stream can be iterated only once. \n+\n+```ballerina\n+// Define a type to represent the results.\n+type Student record {\n+    int id;\n+    int age;\n+    string name;\n+};\n+\n+// Select the data from the database table. Query Parameters are passed directly. \n+// Similar to `execute` examples, parameters can be passed as sub types of \n+// `sql:TypedValue`s as well.\n+int id = 10;\n+int age = 12;\n+stream<Student, sql:Error> resultStream = dbClient->query(`SELECT * FROM students \n+                                                          WHERE id < ${id} AND \n+                                                          age > ${age}`, Student);\n+\n+// Iterating returned table.\n+error? e = resultStream.forEach(function(Student student) {\n+   io:println(\"Student Id: \", student.id);\n+   io:println(\"Student age: \", student.age);\n+   io:println(\"Student name: \", student.name);\n+});\n+if (e is error) {\n+   io:println(\"Query execution failed.\", e);\n+}\n+```\n+\n+Defining the return type is optional, and you can query the database without providing the result type. And hence \n+the above example can be modified as below with open record type as return type. The property name in the open record \n+type will be same as how the column is defined in the database. \n+\n+```ballerina\n+// Select the data from the database table. Query Parameters are passed directly. \n+// Similar to `execute` examples, parameters can be passed as sub types of \n+// `sql:TypedValue`s as well.\n+int id = 10;\n+int age = 12;\n+stream<record{}, sql:Error> resultStream = dbClient->query(`SELECT * FROM students \n+                                                            WHERE id < ${id} AND \n+                                                            age > ${age}`, Student);\n+\n+// Iterating returned table.\n+error? e = resultStream.forEach(function(record{} student) {\n+   io:println(\"Student Id: \", student[\"id\"]);\n+   io:println(\"Student age: \", student[\"age\"]);\n+   io:println(\"Student name: \", student[\"name\"];\n+});\n+if (e is error) {\n+   io:println(\"Query execution failed.\", e);\n+}\n+```\n+\n+There are situations where you may do not want to iterate through the database, and in that case you may decide\n+to only use the `next()` operation in the result `stream` and retrieve the first record. In such cases, the returned\n+result stream will not be closed, and you have to explicitly invoke `close` operation on the \n+`sql:Client` to release the connection resources and avoid connection leak as shown below.\n+\n+```ballerina\n+stream<record{}, sql:Error> resultStream = dbClient->query(\"SELECT count(*) as \" + \n+                                                           \"total FROM students\");\n+\n+record {|record {} value;|}|error? result = resultStream.next();\n+\n+if (result is record {|record {} value;|}) {\n+    io:println(\"Total students : \", result.value[\"total\"]);\n+} else if (result is error) {\n+    io:println(\"Error encoutered when executing query. \", result);\n+} else {\n+    io:println(\"Student table is empty\");\n+}\n+\n+error? e = resultStream.close();\n+if(e is error){\n+    io:println(\"Error when closing the stream\", e);\n+}\n+```\n+\n+#### Updating data\n+\n+This example demonstrates modifying data by executing an UPDATE statement via the `execute` remote function of \n+the client.\n+\n+```ballerina\n+int age = 23;\n+var ret = dbClient->execute(`UPDATE students SET name = 'John' WHERE age = ${age}`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Updated row count in Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Update to students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Deleting data\n+\n+This example demonstrates deleting data by executing an DELETE statement via the `execute` remote function of \n+the client.\n+\n+```ballerina\n+string name = \"John\";\n+var ret = dbClient->execute(`DELETE from students WHERE name = ${name}`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Deleted student count: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Delete from students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Batch updating data\n+\n+This example demonstrates how to insert multiple records with a single INSERT statement that is executed via the \n+`batchExecute` remote function of the client. This is done by creating a `table` with multiple records and \n+parameterizing the SQL query as same as `execute` operations above.  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0bb10d4debd0aa76290e8b7fbd275fee2ce4aa3"}, "originalPosition": 313}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODMyNjg3OnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowNjoyNlrOGjNMLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowNjoyNlrOGjNMLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2OTQ1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Create the table with records that needs to be inserted.\n          \n          \n            \n            // Create the table with the records that need to be inserted.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439569453", "createdAt": "2020-06-12T18:06:26Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/Module.md", "diffHunk": "@@ -0,0 +1,338 @@\n+## Module overview\n+\n+This module provides the common interface and functionality to interact with database. The corresponding database\n+clients can be created by using specific database modules such as `MySQL` or using Java Database Connectivity \n+module `JDBC`. The available database modules are listed below.\n+\n+### List of Database Modules\n+1. [JDBC (Java Database Connectivity) Module](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html)  \n+This module can be used to connect with any database by simply providing the JDBC URL, and other related properties. \n+Please refer the JDBC module [API docs](https://ballerina.io/learn/api-docs/ballerina/java.jdbc/index.html) for \n+more details.\n+\n+2. [MySQL Module](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html)   \n+This module is specially designed to work with MySQL database, and allows to access the functionality \n+provided by MySQL 8.0.x onwards. Please refer the MySQL module [API docs](https://ballerina.io/learn/api-docs/ballerina/mysql/index.html) \n+for more details.\n+\n+\n+### Client\n+\n+The database client should be created by any of the above listed database modules, and once it is created the \n+below explained operations and functionality can be used. \n+\n+#### Connection pool handling\n+\n+All database modules share the same connection pooling concept, and there are 3 possible scenarios for \n+connection pool handling. Please refer `sql:ConnectionPool` for its properties, and possible values. \n+\n+1. Global, shareable default connection pool\n+\n+    If you do not provide the `poolOptions` field when creating the database client, a globally shareable pool will be \n+    created for your database unless a connection pool matching with the properties you provided already exists. \n+    Below shown is the example from JDBC module to use the global connection pool. \n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (\"jdbc:mysql://localhost:3306/testdb\", \n+                                \"root\", \"root\");\n+    ```\n+\n+2. Client owned, unsharable connection pool\n+\n+    If you define the `connectionPool` field inline when creating the database client with `sql:ConnectionPool` type, \n+    an unshareable connection pool will be created. Below shown is the example from JDBC module to use the global \n+    connection pool.\n+\n+    ```ballerina\n+    jdbc:Client dbClient = new (url = \"jdbc:mysql://localhost:3306/testdb\", \n+                                connectionPool = { maxOpenConnections: 5 });\n+    ```\n+\n+3. Local shareable connection pool\n+\n+    If you create a record of type `sql:ConnectionPool` and reuse that in the configuration of multiple clients, \n+    for each  set of clients that connects to the same database instance with the same set of properties, a shared \n+    connection pool will be created. Below shown is the example from JDBC module to use the global connection pool.\n+\n+    ```ballerina\n+    sql:ConnectionPool connPool = {maximumPoolSize: 5};\n+    \n+    jdbc:Client dbClient1 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient2 = new (url = \"jdbc:mysql://localhost:3306/testdb\",       \n+                                 connectionPool = connPool);\n+    jdbc:Client dbClient3 = new (url = \"jdbc:mysql://localhost:3306/testdb\",    \n+                                 connectionPool = connPool);\n+    ```\n+    \n+#### Closing the client\n+\n+Once all database operations are performed you can close the database client you have created by invoking `close()`\n+operation. This will close the corresponding connection pool if it is not shared by any other database clients. \n+\n+```ballerina\n+error? e = dbClient.close();\n+if (e is error){\n+    io:println(\"Error occured:\", e);\n+}\n+\n+```    \n+### Database operations\n+\n+Once the client is created, database operations can be executed through that client. This module defines the interface \n+and common properties that are shared among multiple database clients.  It also supports querying, inserting, deleting, \n+updating, and batch updating data.  \n+\n+#### Creating tables\n+\n+This sample creates a table with two columns. One column is of type `int`, and the other is of type `varchar`.\n+The CREATE statement is executed via the `execute` remote function of the client.\n+\n+```ballerina\n+// Create the \u2018Students\u2019 table with fields \u2018id\u2019, 'name' and \u2018age\u2019.\n+var ret = dbClient->execute(\"CREATE TABLE student(id INT AUTO_INCREMENT, \" +\n+                         \"age INT, name VARCHAR(255), PRIMARY KEY (id))\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Students table create status in DB: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Students table creation failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data\n+\n+This sample shows three examples of data insertion by executing an INSERT statement using the `execute` remote function \n+of the client.\n+\n+In the first example, query parameter values are passed directly into the query statement of the `execute` \n+remote function.\n+\n+```ballerina\n+var ret = dbClient->execute(\"INSERT INTO student(age, name) \" +\n+                         \"values (23, 'john')\");\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the second example, the parameter values, which are in local variables, are used to parameterize the SQL query in \n+`execute` remote function. This type of parameterized SQL query can be used with any primitive Ballerina type \n+like `string`, `int`, `float`, or `boolean`, and in that case, the corresponding SQL type of the parameter is derived \n+from the type of the Ballerina variable that is passed in. \n+\n+```ballerina\n+string name = \"Anne\";\n+int age = 8;\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+In the third example, parameter values are passed as a `sql:TypedValue` to the `execute` remote function. Use \n+corresponding subtype of `sql:TypedValue` such as `sql:Varchar`, `sql:Char`, `sql:Integer`, etc when you need to \n+provide more details such as the exact SQL type of the parameter.\n+\n+```ballerina\n+sql:Varchar name = new (\"James\");\n+sql:Integer age = new (10);\n+\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Inserted row count to Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to Students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Inserting data with auto-generated keys\n+\n+This example demonstrates inserting data while returning the auto-generated keys. It achieves this by using the \n+`execute` remote function to execute the INSERT statement.\n+\n+```ballerina\n+int age = 31;\n+string name = \"Kate\";\n+var ret = dbClient->execute(`INSERT INTO student(age, name) \n+                             values (${age}, ${name})`);\n+if (ret is sql:ExecutionResult) {\n+    int? count = ret.affectedRowCount;\n+    string|int? generatedKey = ret.lastInsertId;\n+    io:println(\"Inserted row count: \", count);\n+    io:println(\"Generated key: \", generatedKey);\n+} else {\n+    error err = ret;\n+    io:println(\"Insert to table failed: \", <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Querying data\n+\n+This sample shows three examples to demonstrate the different usages of the `query` operation and query the\n+database table and obtain the results. \n+\n+This example demonstrates querying data from a table in a database. \n+First, a type is created to represent the returned result set. Please note the mapping of the database column \n+to the returned record's property is case insensitive (i.e., `ID` column in result, can be mapped to `id` \n+property in record). Next, the SELECT query is executed via the `query` remote function of the client by passing that \n+result set type. Once the query is executed, each data record can be retrieved by looping the result set. The `stream` \n+returned by the select operation holds a pointer to the actual data in the database and it loads data from the table \n+only when it is accessed. This stream can be iterated only once. \n+\n+```ballerina\n+// Define a type to represent the results.\n+type Student record {\n+    int id;\n+    int age;\n+    string name;\n+};\n+\n+// Select the data from the database table. Query Parameters are passed directly. \n+// Similar to `execute` examples, parameters can be passed as sub types of \n+// `sql:TypedValue`s as well.\n+int id = 10;\n+int age = 12;\n+stream<Student, sql:Error> resultStream = dbClient->query(`SELECT * FROM students \n+                                                          WHERE id < ${id} AND \n+                                                          age > ${age}`, Student);\n+\n+// Iterating returned table.\n+error? e = resultStream.forEach(function(Student student) {\n+   io:println(\"Student Id: \", student.id);\n+   io:println(\"Student age: \", student.age);\n+   io:println(\"Student name: \", student.name);\n+});\n+if (e is error) {\n+   io:println(\"Query execution failed.\", e);\n+}\n+```\n+\n+Defining the return type is optional, and you can query the database without providing the result type. And hence \n+the above example can be modified as below with open record type as return type. The property name in the open record \n+type will be same as how the column is defined in the database. \n+\n+```ballerina\n+// Select the data from the database table. Query Parameters are passed directly. \n+// Similar to `execute` examples, parameters can be passed as sub types of \n+// `sql:TypedValue`s as well.\n+int id = 10;\n+int age = 12;\n+stream<record{}, sql:Error> resultStream = dbClient->query(`SELECT * FROM students \n+                                                            WHERE id < ${id} AND \n+                                                            age > ${age}`, Student);\n+\n+// Iterating returned table.\n+error? e = resultStream.forEach(function(record{} student) {\n+   io:println(\"Student Id: \", student[\"id\"]);\n+   io:println(\"Student age: \", student[\"age\"]);\n+   io:println(\"Student name: \", student[\"name\"];\n+});\n+if (e is error) {\n+   io:println(\"Query execution failed.\", e);\n+}\n+```\n+\n+There are situations where you may do not want to iterate through the database, and in that case you may decide\n+to only use the `next()` operation in the result `stream` and retrieve the first record. In such cases, the returned\n+result stream will not be closed, and you have to explicitly invoke `close` operation on the \n+`sql:Client` to release the connection resources and avoid connection leak as shown below.\n+\n+```ballerina\n+stream<record{}, sql:Error> resultStream = dbClient->query(\"SELECT count(*) as \" + \n+                                                           \"total FROM students\");\n+\n+record {|record {} value;|}|error? result = resultStream.next();\n+\n+if (result is record {|record {} value;|}) {\n+    io:println(\"Total students : \", result.value[\"total\"]);\n+} else if (result is error) {\n+    io:println(\"Error encoutered when executing query. \", result);\n+} else {\n+    io:println(\"Student table is empty\");\n+}\n+\n+error? e = resultStream.close();\n+if(e is error){\n+    io:println(\"Error when closing the stream\", e);\n+}\n+```\n+\n+#### Updating data\n+\n+This example demonstrates modifying data by executing an UPDATE statement via the `execute` remote function of \n+the client.\n+\n+```ballerina\n+int age = 23;\n+var ret = dbClient->execute(`UPDATE students SET name = 'John' WHERE age = ${age}`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Updated row count in Students table: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Update to students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Deleting data\n+\n+This example demonstrates deleting data by executing an DELETE statement via the `execute` remote function of \n+the client.\n+\n+```ballerina\n+string name = \"John\";\n+var ret = dbClient->execute(`DELETE from students WHERE name = ${name}`);\n+if (ret is sql:ExecutionResult) {\n+    io:println(\"Deleted student count: \", ret.affectedRowCount);\n+} else {\n+    error err = ret;\n+    io:println(\"Delete from students table failed: \",\n+                <string>err.detail()[\"message\"]);\n+}\n+```\n+\n+#### Batch updating data\n+\n+This example demonstrates how to insert multiple records with a single INSERT statement that is executed via the \n+`batchExecute` remote function of the client. This is done by creating a `table` with multiple records and \n+parameterizing the SQL query as same as `execute` operations above.  \n+\n+```ballerina\n+// Create the table with records that needs to be inserted.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0bb10d4debd0aa76290e8b7fbd275fee2ce4aa3"}, "originalPosition": 316}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODMyNzg4OnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/ballerina/src/sql/client.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowNjo1MFrOGjNM3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODowNjo1MFrOGjNM3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2OTYyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Summary of the sql update query as `ExecutionResult`, or `Error`\n          \n          \n            \n                # + return - Summary of the sql update query as `ExecutionResult` or an `Error`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439569629", "createdAt": "2020-06-12T18:06:50Z", "author": {"login": "praneesha"}, "path": "stdlib/database/sql/src/main/ballerina/src/sql/client.bal", "diffHunk": "@@ -28,15 +28,15 @@ public type Client abstract client object {\n     #             column names of the query result set be used for the record attributes\n     # + return - Stream of records in the type of `rowType`\n     public remote function query(@untainted string|ParameterizedString sqlQuery, typedesc<record {}>? rowType = ())\n-    returns @tainted stream<record{}, Error>;\n+    returns @tainted stream <record {}, Error>;\n \n     # Executes the DDL or DML sql query provided by the user, and returns summary of the execution.\n     #\n     # + sqlQuery - The DDL or DML query such as INSERT, DELETE, UPDATE, etc as `string` or `ParameterizedString`\n     #              when the query has params to be passed in\n-    # + return - Summary of the sql update query as `ExecutionResult` or returns `Error`\n+    # + return - Summary of the sql update query as `ExecutionResult`, or `Error`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0bb10d4debd0aa76290e8b7fbd275fee2ce4aa3"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTIzMjEyOnYy", "diffSide": "RIGHT", "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwNTozNjowMVrOGjV3NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwNjoxMjowOVrOGjV-VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxMTU0MQ==", "bodyText": "Shall we point to the BBE? Most of the other Module.md files we have pointed to the BBE", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439711541", "createdAt": "2020-06-13T05:36:01Z", "author": {"login": "niveathika"}, "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "diffHunk": "@@ -0,0 +1,92 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in any type of relational database \n+that is accessible via Java Database Connectivity (JDBC). \n+\n+**Prerequisite:** Add the JDBC driver corresponding to the database you are trying to interact with\n+as a native library dependency in your Ballerina project. Then, once you build the project with the `ballerina build`\n+command, you should be able to run the resultant JAR by executing the `java -jar` command.\n+\n+E.g., The `Ballerina.toml` content.\n+Change the path to the JDBC driver appropriately.\n+\n+```toml\n+[project]\n+org-name= \"sample\"\n+version= \"0.1.0\"\n+\n+[platform]\n+target = \"java8\"\n+\n+    [[platform.libraries]]\n+    artafactId = \"h2\"\n+    version = \"1.4.200\"\n+    path = \"/path/to/com.h2database.h2-1.4.200.jar\"\n+    groupId = \"com.h2database\"\n+    modules = [\"samplemodule\"]\n+``` \n+\n+Else, if you're trying to run a single BAL file, you can copy the JDBC driver into the `${BALLERINA_HOME}/bre/lib` directory and \n+run the BAL file by executing the `ballerina run` command.\n+\n+### Client\n+To access a database, you must first create a \n+[jdbc:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/clients/Client.html) object. \n+The examples for creating a JDBC client can be found below.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d83edd04c02621b84629eb75d70081abb2ddd50"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxMzM2NQ==", "bodyText": "For this case, I want to provide a link for the Client object definition and also providing the example here similar to BBE. And hence for this case, linking BBE seems to be not relevant.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439713365", "createdAt": "2020-06-13T06:12:09Z", "author": {"login": "sinthuja"}, "path": "stdlib/database/jdbc/src/main/ballerina/src/java.jdbc/Module.md", "diffHunk": "@@ -0,0 +1,92 @@\n+## Module overview\n+\n+This module provides the functionality required to access and manipulate data stored in any type of relational database \n+that is accessible via Java Database Connectivity (JDBC). \n+\n+**Prerequisite:** Add the JDBC driver corresponding to the database you are trying to interact with\n+as a native library dependency in your Ballerina project. Then, once you build the project with the `ballerina build`\n+command, you should be able to run the resultant JAR by executing the `java -jar` command.\n+\n+E.g., The `Ballerina.toml` content.\n+Change the path to the JDBC driver appropriately.\n+\n+```toml\n+[project]\n+org-name= \"sample\"\n+version= \"0.1.0\"\n+\n+[platform]\n+target = \"java8\"\n+\n+    [[platform.libraries]]\n+    artafactId = \"h2\"\n+    version = \"1.4.200\"\n+    path = \"/path/to/com.h2database.h2-1.4.200.jar\"\n+    groupId = \"com.h2database\"\n+    modules = [\"samplemodule\"]\n+``` \n+\n+Else, if you're trying to run a single BAL file, you can copy the JDBC driver into the `${BALLERINA_HOME}/bre/lib` directory and \n+run the BAL file by executing the `ballerina run` command.\n+\n+### Client\n+To access a database, you must first create a \n+[jdbc:Client](https://ballerina.io/learn/api-docs/ballerina/api-docs/java.jdbc/clients/Client.html) object. \n+The examples for creating a JDBC client can be found below.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxMTU0MQ=="}, "originalCommit": {"oid": "8d83edd04c02621b84629eb75d70081abb2ddd50"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTIzNTY1OnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/main/java/org/ballerinalang/sql/datasource/SQLDatasource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwNTo0NTo1MlrOGjV5IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwNjoyNTowOVrOGjWBJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxMjAzMw==", "bodyText": "Shouldn't we set autoCommit to false here? Else we cant rollback if an error occurs", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439712033", "createdAt": "2020-06-13T05:45:52Z", "author": {"login": "niveathika"}, "path": "stdlib/database/sql/src/main/java/org/ballerinalang/sql/datasource/SQLDatasource.java", "diffHunk": "@@ -45,13 +48,30 @@\n     private AtomicInteger clientCounter = new AtomicInteger(0);\n     private Lock mutex = new ReentrantLock();\n     private boolean poolShutdown = false;\n+    private boolean xaConn;\n+    private XADataSource xaDataSource;\n \n     private SQLDatasource(SQLDatasourceParams sqlDatasourceParams) {\n         buildDataSource(sqlDatasourceParams);\n-        try (Connection con = getSQLConnection()) {\n+        Connection connection = null;\n+        try {\n+            xaConn = hikariDataSource.isWrapperFor(XADataSource.class);\n+            if (xaConn) {\n+                xaDataSource = hikariDataSource.unwrap(XADataSource.class);\n+                connection = xaDataSource.getXAConnection().getConnection();\n+            } else {\n+                connection = getConnection();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d83edd04c02621b84629eb75d70081abb2ddd50"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxMzcxOQ==", "bodyText": "Here I'm just checking whether valid connection can be obtained, not doing any other queries. But for the case of transaction, I'm setting autoCommit to false as you mentioned here - \n  \n    \n      ballerina-lang/stdlib/database/sql/src/main/java/org/ballerinalang/sql/datasource/SQLDatasourceUtils.java\n    \n    \n         Line 112\n      in\n      8d83edd\n    \n    \n    \n    \n\n        \n          \n           conn.setAutoCommit(false);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439713719", "createdAt": "2020-06-13T06:18:28Z", "author": {"login": "sinthuja"}, "path": "stdlib/database/sql/src/main/java/org/ballerinalang/sql/datasource/SQLDatasource.java", "diffHunk": "@@ -45,13 +48,30 @@\n     private AtomicInteger clientCounter = new AtomicInteger(0);\n     private Lock mutex = new ReentrantLock();\n     private boolean poolShutdown = false;\n+    private boolean xaConn;\n+    private XADataSource xaDataSource;\n \n     private SQLDatasource(SQLDatasourceParams sqlDatasourceParams) {\n         buildDataSource(sqlDatasourceParams);\n-        try (Connection con = getSQLConnection()) {\n+        Connection connection = null;\n+        try {\n+            xaConn = hikariDataSource.isWrapperFor(XADataSource.class);\n+            if (xaConn) {\n+                xaDataSource = hikariDataSource.unwrap(XADataSource.class);\n+                connection = xaDataSource.getXAConnection().getConnection();\n+            } else {\n+                connection = getConnection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxMjAzMw=="}, "originalCommit": {"oid": "8d83edd04c02621b84629eb75d70081abb2ddd50"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxNDA4NA==", "bodyText": "Noted", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24037#discussion_r439714084", "createdAt": "2020-06-13T06:25:09Z", "author": {"login": "niveathika"}, "path": "stdlib/database/sql/src/main/java/org/ballerinalang/sql/datasource/SQLDatasource.java", "diffHunk": "@@ -45,13 +48,30 @@\n     private AtomicInteger clientCounter = new AtomicInteger(0);\n     private Lock mutex = new ReentrantLock();\n     private boolean poolShutdown = false;\n+    private boolean xaConn;\n+    private XADataSource xaDataSource;\n \n     private SQLDatasource(SQLDatasourceParams sqlDatasourceParams) {\n         buildDataSource(sqlDatasourceParams);\n-        try (Connection con = getSQLConnection()) {\n+        Connection connection = null;\n+        try {\n+            xaConn = hikariDataSource.isWrapperFor(XADataSource.class);\n+            if (xaConn) {\n+                xaDataSource = hikariDataSource.unwrap(XADataSource.class);\n+                connection = xaDataSource.getXAConnection().getConnection();\n+            } else {\n+                connection = getConnection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcxMjAzMw=="}, "originalCommit": {"oid": "8d83edd04c02621b84629eb75d70081abb2ddd50"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3367, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}