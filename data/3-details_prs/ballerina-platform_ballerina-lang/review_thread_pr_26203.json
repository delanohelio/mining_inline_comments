{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3NjYyNjEy", "number": 26203, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzo0Nzo1N1rOEqU3zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDoxNDoyM1rOEqqOcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODE3NjE1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/test/resources/statements/match-stmt/match_stmt_source_16.bal", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzo0Nzo1N1rOHcd4Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwODoxNjo1NVrOHc7BAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYxMTY1MA==", "bodyText": "Missing license header.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26203#discussion_r499611650", "createdAt": "2020-10-05T13:47:57Z", "author": {"login": "anupama-pathirage"}, "path": "compiler/ballerina-parser/src/test/resources/statements/match-stmt/match_stmt_source_16.bal", "diffHunk": "@@ -0,0 +1,4 @@\n+function func(any v){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cb805acc4718f98bfc2b5318c84462d4e280a3d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk5NjY3NQ==", "bodyText": "Added thanx.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26203#discussion_r499996675", "createdAt": "2020-10-06T04:17:59Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/test/resources/statements/match-stmt/match_stmt_source_16.bal", "diffHunk": "@@ -0,0 +1,4 @@\n+function func(any v){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYxMTY1MA=="}, "originalCommit": {"oid": "8cb805acc4718f98bfc2b5318c84462d4e280a3d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAwMjg3MA==", "bodyText": "We haven't added licence headers to any of the parser-test bal-sources. The reason was, these parser tests operates at a very granular level, and tests a specific grammar rule in each test-case.\nHaving the license header means, parser has to parse additional grammar rules as well - then we no longer have that granularity in the test..\nCan we stick to the same?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26203#discussion_r500002870", "createdAt": "2020-10-06T04:44:57Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/resources/statements/match-stmt/match_stmt_source_16.bal", "diffHunk": "@@ -0,0 +1,4 @@\n+function func(any v){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYxMTY1MA=="}, "originalCommit": {"oid": "8cb805acc4718f98bfc2b5318c84462d4e280a3d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA3ODE4MA==", "bodyText": "reverted", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26203#discussion_r500078180", "createdAt": "2020-10-06T07:58:46Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/test/resources/statements/match-stmt/match_stmt_source_16.bal", "diffHunk": "@@ -0,0 +1,4 @@\n+function func(any v){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYxMTY1MA=="}, "originalCommit": {"oid": "8cb805acc4718f98bfc2b5318c84462d4e280a3d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4OTA4OA==", "bodyText": "+1. Thanks for the info @SupunS", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26203#discussion_r500089088", "createdAt": "2020-10-06T08:16:55Z", "author": {"login": "anupama-pathirage"}, "path": "compiler/ballerina-parser/src/test/resources/statements/match-stmt/match_stmt_source_16.bal", "diffHunk": "@@ -0,0 +1,4 @@\n+function func(any v){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYxMTY1MA=="}, "originalCommit": {"oid": "8cb805acc4718f98bfc2b5318c84462d4e280a3d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTY2NjQ1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/resources/syntax_diagnostic_message.properties", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDoxMjowM1rOHc_XPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDoyODoyN1rOHc_52Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2MDMxNg==", "bodyText": "shall we reword the error message?\n\"match statement should have one or more match clauses\"", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26203#discussion_r500160316", "createdAt": "2020-10-06T10:12:03Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/resources/syntax_diagnostic_message.properties", "diffHunk": "@@ -235,7 +235,8 @@ error.more.field.match.patterns.after.rest.field=more field match patterns after\n error.action.as.a.wait.expr=''wait'' cannot be used with actions\n error.invalid.usage.of.var='var' is not a valid type descriptor\n error.more.match.patterns.after.rest.match.pattern=more match patterns after rest match pattern\n-error-match-pattern-not-allowed=match pattern not allowed\n+error.match.pattern.not.allowed=match pattern not allowed\n+error.at.least.one.match.clause.required=error at least one match clause required", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cb805acc4718f98bfc2b5318c84462d4e280a3d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2OTE3Nw==", "bodyText": "updated", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26203#discussion_r500169177", "createdAt": "2020-10-06T10:28:27Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/resources/syntax_diagnostic_message.properties", "diffHunk": "@@ -235,7 +235,8 @@ error.more.field.match.patterns.after.rest.field=more field match patterns after\n error.action.as.a.wait.expr=''wait'' cannot be used with actions\n error.invalid.usage.of.var='var' is not a valid type descriptor\n error.more.match.patterns.after.rest.match.pattern=more match patterns after rest match pattern\n-error-match-pattern-not-allowed=match pattern not allowed\n+error.match.pattern.not.allowed=match pattern not allowed\n+error.at.least.one.match.clause.required=error at least one match clause required", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2MDMxNg=="}, "originalCommit": {"oid": "8cb805acc4718f98bfc2b5318c84462d4e280a3d"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTY3NDczOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDoxNDoyM1rOHc_caQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMDoyODozNVrOHc_6Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2MTY0MQ==", "bodyText": "shouldn't be returning here", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26203#discussion_r500161641", "createdAt": "2020-10-06T10:14:23Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -11802,7 +11802,19 @@ private STNode parseMatchStatement() {\n         STNode actionOrExpr = parseActionOrExpression();\n         startContext(ParserRuleContext.MATCH_BODY);\n         STNode openBrace = parseOpenBrace();\n-        STNode matchClauses = parseMatchClauses();\n+        // Parse match clauses list\n+        List<STNode> matchClausesList = new ArrayList<>();\n+        while (!isEndOfMatchClauses(peek().kind)) {\n+            STNode clause = parseMatchClause();\n+            matchClausesList.add(clause);\n+        }\n+        STNode matchClauses =  STNodeFactory.createNodeList(matchClausesList);\n+        // At least one match clause required\n+        if (isNodeListEmpty(matchClauses)) {\n+            return SyntaxErrors.addDiagnostic(openBrace,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cb805acc4718f98bfc2b5318c84462d4e280a3d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2OTIzNQ==", "bodyText": "updated thanx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26203#discussion_r500169235", "createdAt": "2020-10-06T10:28:35Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -11802,7 +11802,19 @@ private STNode parseMatchStatement() {\n         STNode actionOrExpr = parseActionOrExpression();\n         startContext(ParserRuleContext.MATCH_BODY);\n         STNode openBrace = parseOpenBrace();\n-        STNode matchClauses = parseMatchClauses();\n+        // Parse match clauses list\n+        List<STNode> matchClausesList = new ArrayList<>();\n+        while (!isEndOfMatchClauses(peek().kind)) {\n+            STNode clause = parseMatchClause();\n+            matchClausesList.add(clause);\n+        }\n+        STNode matchClauses =  STNodeFactory.createNodeList(matchClausesList);\n+        // At least one match clause required\n+        if (isNodeListEmpty(matchClauses)) {\n+            return SyntaxErrors.addDiagnostic(openBrace,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE2MTY0MQ=="}, "originalCommit": {"oid": "8cb805acc4718f98bfc2b5318c84462d4e280a3d"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4884, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}