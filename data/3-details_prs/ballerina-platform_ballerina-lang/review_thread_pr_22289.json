{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1Mjc3ODM5", "number": 22289, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODo1NzoyOVrODtPrIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOToxMjoyMVrODtQACw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzY5MzE0OnYy", "diffSide": "LEFT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODo1NzoyOVrOF-j0CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjoxNTozOFrOF-qNWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0Mjc5Mg==", "bodyText": "Why are we doing these changes? IINM some of them are as per the style guidelines.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22289#discussion_r401142792", "createdAt": "2020-03-31T18:57:29Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -1887,18 +1843,15 @@ public Boolean visit(BServiceType t, BType s) {\n \n         @Override\n         public Boolean visit(BTypedescType t, BType s) {\n-\n             if (s.tag != TypeTags.TYPEDESC) {\n                 return false;\n             }\n             BTypedescType sType = ((BTypedescType) s);\n             return isSameType(sType.constraint, t.constraint, this.unresolvedTypes);\n         }\n \n-\n         @Override\n         public Boolean visit(BFiniteType t, BType s) {\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31c43acf21d221d5b0a60df10e82b5801493ccac"}, "originalPosition": 343}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI0NzU3Ng==", "bodyText": "Leave your code better than you found it. Boy Scout Rule.\nreverted.  I will check the guidelines.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22289#discussion_r401247576", "createdAt": "2020-03-31T22:15:38Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -1887,18 +1843,15 @@ public Boolean visit(BServiceType t, BType s) {\n \n         @Override\n         public Boolean visit(BTypedescType t, BType s) {\n-\n             if (s.tag != TypeTags.TYPEDESC) {\n                 return false;\n             }\n             BTypedescType sType = ((BTypedescType) s);\n             return isSameType(sType.constraint, t.constraint, this.unresolvedTypes);\n         }\n \n-\n         @Override\n         public Boolean visit(BFiniteType t, BType s) {\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0Mjc5Mg=="}, "originalCommit": {"oid": "31c43acf21d221d5b0a60df10e82b5801493ccac"}, "originalPosition": 343}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzcxMjIxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTowMjozNFrOF-j_-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTowMjozNFrOF-j_-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0NTg0OQ==", "bodyText": "Type tags mean something else for the compiler right? Shall we use a different name?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22289#discussion_r401145849", "createdAt": "2020-03-31T19:02:34Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2893,14 +2843,27 @@ private boolean checkFillerValue(BUnionType type) {\n         if (type.isNullable()) {\n             return true;\n         }\n-        Iterator<BType> iterator = type.getMemberTypes().iterator();\n+        Set<BType> typeTags = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31c43acf21d221d5b0a60df10e82b5801493ccac"}, "originalPosition": 376}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzczMjgzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BFiniteType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTowODozNlrOF-kNUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTowODozNlrOF-kNUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0OTI2Ng==", "bodyText": "The name of the function is not accurate right?\nAlso, this is like a specific scenario so I think this shouldn't be a method in BFiniteType.java. We can maybe introduce a method in the Types.java class itself instead.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22289#discussion_r401149266", "createdAt": "2020-03-31T19:08:36Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BFiniteType.java", "diffHunk": "@@ -115,4 +116,16 @@ public void addValue(BLangExpression value) {\n             nullable = true;\n         }\n     }\n+\n+    public Set<BType> getUniqueValues() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31c43acf21d221d5b0a60df10e82b5801493ccac"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Nzc0NjY3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BFiniteType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOToxMjoyMVrOF-kV5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjoxMDoyNFrOF-qE5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1MTQ2Mg==", "bodyText": "Can you please share an example where the member in the value space of a finite type is another finite type?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22289#discussion_r401151462", "createdAt": "2020-03-31T19:12:21Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BFiniteType.java", "diffHunk": "@@ -115,4 +116,16 @@ public void addValue(BLangExpression value) {\n             nullable = true;\n         }\n     }\n+\n+    public Set<BType> getUniqueValues() {\n+        Set<BType> uniqueType = new HashSet<>();\n+        for (BLangExpression expression : this.valueSpace) {\n+            if (expression.type.tag != TypeTags.FINITE) {\n+                uniqueType.add(expression.type);\n+            } else {\n+                uniqueType.addAll(((BFiniteType) expression.type).getUniqueValues());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31c43acf21d221d5b0a60df10e82b5801493ccac"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI0NTQxMw==", "bodyText": "Think I have confused this with the union type", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22289#discussion_r401245413", "createdAt": "2020-03-31T22:10:24Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BFiniteType.java", "diffHunk": "@@ -115,4 +116,16 @@ public void addValue(BLangExpression value) {\n             nullable = true;\n         }\n     }\n+\n+    public Set<BType> getUniqueValues() {\n+        Set<BType> uniqueType = new HashSet<>();\n+        for (BLangExpression expression : this.valueSpace) {\n+            if (expression.type.tag != TypeTags.FINITE) {\n+                uniqueType.add(expression.type);\n+            } else {\n+                uniqueType.addAll(((BFiniteType) expression.type).getUniqueValues());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1MTQ2Mg=="}, "originalCommit": {"oid": "31c43acf21d221d5b0a60df10e82b5801493ccac"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4621, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}