{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNzI1MzMw", "number": 22519, "title": "Add readonly type - Phase I", "bodyText": "Purpose\n$title.\nInitial changes to fix #22430\nAdds support for readonly record fields in the typedesc, partial fix for #22600\nFixes #22601\nWorking on improvements, adding tests, etc. Sending this PR since several tasks are blocked on this.\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-04-08T09:11:12Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22519", "merged": true, "mergeCommit": {"oid": "8a3197bf595c05510b8198e1265542eefd7e7994"}, "closed": true, "closedAt": "2020-04-20T06:43:43Z", "author": {"login": "MaryamZi"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcUVPHWgH2gAyNDAwNzI1MzMwOjcxNGJiMWI1NmE0YWYyMjc3YmRiM2Q3NWUwYzgzZWI5ZTFlNGMxNWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZZT5ggFqTM5NjE3NzMxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "714bb1b56a4af2277bdb3d75e0c83eb9e1e4c15e", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/714bb1b56a4af2277bdb3d75e0c83eb9e1e4c15e", "committedDate": "2020-04-04T13:09:05Z", "message": "Add grammar change for readonly type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48936045aa70446e09201967a2f65ece035b49eb", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/48936045aa70446e09201967a2f65ece035b49eb", "committedDate": "2020-04-05T14:46:43Z", "message": "Implement compiler changes for the readonly type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9e3733cf1feaccdd516cc12b3762b0f4dc9eb50", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b9e3733cf1feaccdd516cc12b3762b0f4dc9eb50", "committedDate": "2020-04-08T10:24:01Z", "message": "Intro runtime changes for readonly and fix tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6b23921dc46b30ec7a93517fc6feed89c0128575", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6b23921dc46b30ec7a93517fc6feed89c0128575", "committedDate": "2020-04-07T12:44:00Z", "message": "Intro runtime changes for readonly and fix tests"}, "afterCommit": {"oid": "b9e3733cf1feaccdd516cc12b3762b0f4dc9eb50", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b9e3733cf1feaccdd516cc12b3762b0f4dc9eb50", "committedDate": "2020-04-08T10:24:01Z", "message": "Intro runtime changes for readonly and fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "851827a502500f52a3e6dfac1d787cd2b5e743bb", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/851827a502500f52a3e6dfac1d787cd2b5e743bb", "committedDate": "2020-04-09T13:40:17Z", "message": "Fix JvmCastGen for readonly and add basic tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca3fe798c523af279bd93d4092a9a98a9303f1a9", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ca3fe798c523af279bd93d4092a9a98a9303f1a9", "committedDate": "2020-04-10T08:12:28Z", "message": "Merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7328c77961cdcadd08dbe96dc29f51ba1689338f", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7328c77961cdcadd08dbe96dc29f51ba1689338f", "committedDate": "2020-04-10T11:20:08Z", "message": "Fix langserver tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47ac80e7f638f262d231cd7d9efb7401ae6ab252", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/47ac80e7f638f262d231cd7d9efb7401ae6ab252", "committedDate": "2020-04-14T11:10:12Z", "message": "Fix map spread field analysis and field assignmt type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "002a744d0c419da0b53d9f2d8039e07957b8e017", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/002a744d0c419da0b53d9f2d8039e07957b8e017", "committedDate": "2020-04-14T17:26:56Z", "message": "Intro grammar changes for readonly record fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "735fd62a27ef1b5409059bb5ffe08992f5bd576e", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/735fd62a27ef1b5409059bb5ffe08992f5bd576e", "committedDate": "2020-04-14T17:34:34Z", "message": "Intro initial compiler changes for readonly fields in record typedesc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d04f4ad5f9888455cafeef71425fc3f08888be03", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d04f4ad5f9888455cafeef71425fc3f08888be03", "committedDate": "2020-04-14T17:39:16Z", "message": "Intro runtime changes for readonly fields in record typedesc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58d8667a4bccbdc8018c0ff659c0181fc507c170", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/58d8667a4bccbdc8018c0ff659c0181fc507c170", "committedDate": "2020-04-15T12:06:58Z", "message": "Add compile-time validations for readonly record fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96678ee2b48ea1bc8fa36253e59a9b41ffc85e93", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/96678ee2b48ea1bc8fa36253e59a9b41ffc85e93", "committedDate": "2020-04-15T12:57:04Z", "message": "Resolve conflicts and merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44a6c62fa27bcc033766dde44499bb28c5b25c66", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/44a6c62fa27bcc033766dde44499bb28c5b25c66", "committedDate": "2020-04-15T19:34:04Z", "message": "Fix langserver tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7799af32045bbc8c32a3a708a2e704f5c37ac4d5", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7799af32045bbc8c32a3a708a2e704f5c37ac4d5", "committedDate": "2020-04-15T20:51:29Z", "message": "Fix extra separation error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e46fc06c0d716a5c6caf1b069395b53cb8eb5cfe", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e46fc06c0d716a5c6caf1b069395b53cb8eb5cfe", "committedDate": "2020-04-16T10:32:28Z", "message": "Merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65d005938b9b5885b1eb65b2fa751fca956b2b96", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/65d005938b9b5885b1eb65b2fa751fca956b2b96", "committedDate": "2020-04-16T11:26:00Z", "message": "Fix jballerina-bstring-unit tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MTMzNTQ0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22519#pullrequestreview-395133544", "createdAt": "2020-04-17T03:12:04Z", "commit": {"oid": "65d005938b9b5885b1eb65b2fa751fca956b2b96"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MjIyNDY3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22519#pullrequestreview-395222467", "createdAt": "2020-04-17T07:30:07Z", "commit": {"oid": "65d005938b9b5885b1eb65b2fa751fca956b2b96"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNzozMDowOFrOGHC_Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNzozMDowOFrOGHC_Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA0MjE2Mw==", "bodyText": "Can this be null here, if the mapping constructor contains the field?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22519#discussion_r410042163", "createdAt": "2020-04-17T07:30:08Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1054,22 +1054,107 @@ private boolean validateSpecifiedFields(BLangRecordLiteral mappingConstructor, B\n         return isFieldsValid;\n     }\n \n-    private boolean validateRequiredFields(BRecordType type, List<RecordLiteralNode.RecordField> specifiedFields,\n-                                           DiagnosticPos pos) {\n+    private boolean validateRequiredAndReadonlyFields(BRecordType type,\n+                                                      List<RecordLiteralNode.RecordField> specifiedFields,\n+                                                      DiagnosticPos pos) {\n         HashSet<String> specFieldNames = getFieldNames(specifiedFields);\n         boolean hasAllRequiredFields = true;\n+        boolean hasValidReadonlyFields = true;\n \n         for (BField field : type.fields) {\n-            // Check if `field` is explicitly assigned a value in the record literal\n-            // If a required field is missing, it's a compile error\n-            if (!specFieldNames.contains(field.name.value) && Symbols.isFlagOn(field.symbol.flags, Flags.REQUIRED)) {\n+            String fieldName = field.name.value;\n+            BType fieldType = symTable.semanticError;\n+            DiagnosticPos fieldPos;\n+\n+            if (specFieldNames.contains(fieldName)) {\n+                RecordLiteralNode.RecordField recordField = getRecordFieldByName(specifiedFields, fieldName);\n+                if (recordField == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65d005938b9b5885b1eb65b2fa751fca956b2b96"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MjI1NTI0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22519#pullrequestreview-395225524", "createdAt": "2020-04-17T07:35:22Z", "commit": {"oid": "65d005938b9b5885b1eb65b2fa751fca956b2b96"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNzozNToyMlrOGHDItQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNzozNToyMlrOGHDItQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA0NDU5Nw==", "bodyText": "Isn't this part duplicate of the logic in getRecordFieldByName()? Do we need to do the same here, after calling that method? Should be able to directly take the type of the spread field right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22519#discussion_r410044597", "createdAt": "2020-04-17T07:35:22Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1054,22 +1054,107 @@ private boolean validateSpecifiedFields(BLangRecordLiteral mappingConstructor, B\n         return isFieldsValid;\n     }\n \n-    private boolean validateRequiredFields(BRecordType type, List<RecordLiteralNode.RecordField> specifiedFields,\n-                                           DiagnosticPos pos) {\n+    private boolean validateRequiredAndReadonlyFields(BRecordType type,\n+                                                      List<RecordLiteralNode.RecordField> specifiedFields,\n+                                                      DiagnosticPos pos) {\n         HashSet<String> specFieldNames = getFieldNames(specifiedFields);\n         boolean hasAllRequiredFields = true;\n+        boolean hasValidReadonlyFields = true;\n \n         for (BField field : type.fields) {\n-            // Check if `field` is explicitly assigned a value in the record literal\n-            // If a required field is missing, it's a compile error\n-            if (!specFieldNames.contains(field.name.value) && Symbols.isFlagOn(field.symbol.flags, Flags.REQUIRED)) {\n+            String fieldName = field.name.value;\n+            BType fieldType = symTable.semanticError;\n+            DiagnosticPos fieldPos;\n+\n+            if (specFieldNames.contains(fieldName)) {\n+                RecordLiteralNode.RecordField recordField = getRecordFieldByName(specifiedFields, fieldName);\n+                if (recordField == null) {\n+                    continue;\n+                }\n+\n+                switch (recordField.getKind()) {\n+                    case RECORD_LITERAL_KEY_VALUE:\n+                        BLangRecordKeyValueField keyValueField = (BLangRecordKeyValueField) recordField;\n+                        fieldType = keyValueField.type;\n+                        fieldPos = keyValueField.valueExpr.pos;\n+                        break;\n+                    case SIMPLE_VARIABLE_REF:\n+                        BLangRecordLiteral.BLangRecordVarNameField varNameField =\n+                                (BLangRecordLiteral.BLangRecordVarNameField) recordField;\n+                        fieldType = varNameField.type;\n+                        fieldPos = varNameField.pos;\n+                        break;\n+                    default:\n+                        BLangRecordLiteral.BLangRecordSpreadOperatorField spreadOpField =\n+                                (BLangRecordLiteral.BLangRecordSpreadOperatorField) recordField;\n+                        BRecordType recordType = (BRecordType) spreadOpField.expr.type;\n+\n+                        for (BField bField : recordType.fields) {\n+                            if (fieldName.equals(bField.name.value)) {\n+                                fieldType = bField.type;\n+                                break;\n+                            }\n+                        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65d005938b9b5885b1eb65b2fa751fca956b2b96"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MjQ5NjYx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22519#pullrequestreview-395249661", "createdAt": "2020-04-17T08:13:36Z", "commit": {"oid": "65d005938b9b5885b1eb65b2fa751fca956b2b96"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwODoxMzozN1rOGHET5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwODoxMzozN1rOGHET5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA2Mzg0Nw==", "bodyText": "Shouldn't this be a colon?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22519#discussion_r410063847", "createdAt": "2020-04-17T08:13:37Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -347,6 +347,9 @@ error.invalid.record.rest.descriptor=\\\n error.missing.required.record.field=\\\n   missing non-defaultable required record field ''{0}''\n \n+error.invalid.field.for.readonly.record.field=\\\n+  invalid field; ''readonly'' field expected for ''{0}''", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65d005938b9b5885b1eb65b2fa751fca956b2b96"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e08a6a702a65012987aff793a35c88199784bf2", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8e08a6a702a65012987aff793a35c88199784bf2", "committedDate": "2020-04-17T13:43:19Z", "message": "Refactor readonly field validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3f7ee44c5da0c4ca4e6c965c417349f53c06d73", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d3f7ee44c5da0c4ca4e6c965c417349f53c06d73", "committedDate": "2020-04-17T18:20:40Z", "message": "Merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34f5a8f99bb1bfe7af4e235cba041a49d715b10a", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/34f5a8f99bb1bfe7af4e235cba041a49d715b10a", "committedDate": "2020-04-19T09:36:03Z", "message": "Resolve conflicts and merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e29cf50fd91c09818a2e7603860606def0a5a90c", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e29cf50fd91c09818a2e7603860606def0a5a90c", "committedDate": "2020-04-19T09:39:17Z", "message": "Regenerate BallerinaLexer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MTY5MDUz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22519#pullrequestreview-396169053", "createdAt": "2020-04-20T06:25:25Z", "commit": {"oid": "e29cf50fd91c09818a2e7603860606def0a5a90c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNjoyNToyNVrOGIE95Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNjoyNToyNVrOGIE95Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyMzE3Mw==", "bodyText": "Need to clarify this behavior. Student.name is a readonly field, So sd.name assignment can panic at runtime.\nWe have similar behavior on the inherent type violation. So this is OK IMO.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22519#discussion_r411123173", "createdAt": "2020-04-20T06:25:25Z", "author": {"login": "hasithaa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/readonly_record_fields.bal", "diffHunk": "@@ -0,0 +1,159 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+const INHERENT_TYPE_VIOLATION_REASON = \"{ballerina/lang.map}InherentTypeViolation\";\n+\n+function testReadonlyRecordFields() {\n+    testRecordWithSimpleReadonlyFields();\n+    testInvalidRecordSimpleReadonlyFieldUpdate();\n+    testValidUpdateOfPossiblyReadonlyFieldInUnion();\n+    testInvalidUpdateOfPossiblyReadonlyFieldInUnion();\n+}\n+\n+type Student record {\n+    readonly string name;\n+    readonly int id?;\n+};\n+\n+function testRecordWithSimpleReadonlyFields() {\n+    Student st = {\n+        name: \"Maryam\"\n+    };\n+    assertEquality(\"Maryam\", st.name);\n+    assertEquality((), st?.id);\n+\n+    st.id = 1234; // Valid since first update.\n+    assertEquality(\"Maryam\", st.name);\n+    assertEquality(1234, st?.id);\n+}\n+\n+function testInvalidRecordSimpleReadonlyFieldUpdate() {\n+    Student st1 = {\n+        name: \"Maryam\"\n+    };\n+    st1.id = 1234; // Valid since first update.\n+\n+    // Invalid updates.\n+    var fn1 = function () {\n+        record {} rec = st1;\n+        string str = \"name\";\n+        rec[str] = \"Jo\";\n+    };\n+    error? res = trap fn1();\n+    assertTrue(res is error);\n+\n+    error err = <error> res;\n+    assertEquality(INHERENT_TYPE_VIOLATION_REASON, err.reason());\n+    assertEquality(\"cannot update 'readonly' field 'name' in record of type 'Student'\", err.detail()?.message);\n+\n+    var fn2 = function () {\n+        st1.id = 4567;\n+    };\n+    res = trap fn2();\n+    assertTrue(res is error);\n+\n+    err = <error> res;\n+    assertEquality(INHERENT_TYPE_VIOLATION_REASON, err.reason());\n+    assertEquality(\"cannot update 'readonly' field 'id' in record of type 'Student'\", err.detail()?.message);\n+}\n+\n+type Employee record {\n+    readonly Details details;\n+    string department;\n+};\n+\n+type ReadonlyName record {\n+    readonly string name;\n+};\n+\n+type Details record {\n+    string name;\n+    int id;\n+};\n+\n+function testValidUpdateOfPossiblyReadonlyFieldInUnion() {\n+    Details d = {\n+        name: \"Jo\",\n+        id: 1234\n+    };\n+\n+    Student|Details sd = d;\n+    sd.name = \"May\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e29cf50fd91c09818a2e7603860606def0a5a90c"}, "originalPosition": 94}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MTc3MzEz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22519#pullrequestreview-396177313", "createdAt": "2020-04-20T06:43:33Z", "commit": {"oid": "e29cf50fd91c09818a2e7603860606def0a5a90c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3683, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}