{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0ODgxMjYz", "number": 25739, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNTozMDoyNlrOEi98JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNTozMDoyNlrOEi98JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTAxODYxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNTozMDoyNlrOHREZTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo0Njo0MVrOHRMFaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY1OTg1NQ==", "bodyText": "I'm guessing the issue here is that in F1 f1 = a => b => a + b;, a's owner is the module? If that's the case, this should ideally be fixed by properly setting the owner of a to the symbol for the arrow function.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25739#discussion_r487659855", "createdAt": "2020-09-14T05:30:26Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4773,7 +4773,7 @@ private void checkFunctionInvocationExpr(BLangInvocation iExpr) {\n \n     private void markAndRegisterClosureVariable(BSymbol symbol, DiagnosticPos pos) {\n         BLangInvokableNode encInvokable = env.enclInvokable;\n-        if (symbol.owner instanceof BPackageSymbol) {\n+        if (symbol.owner instanceof BPackageSymbol && env.node.getKind() != NodeKind.ARROW_EXPR) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad4c9b9afcdad3256415995029dfaa825403420c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY2MDM4NQ==", "bodyText": "If this is a blocker, I guess we can go with this for now and fix it properly later.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25739#discussion_r487660385", "createdAt": "2020-09-14T05:32:20Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4773,7 +4773,7 @@ private void checkFunctionInvocationExpr(BLangInvocation iExpr) {\n \n     private void markAndRegisterClosureVariable(BSymbol symbol, DiagnosticPos pos) {\n         BLangInvokableNode encInvokable = env.enclInvokable;\n-        if (symbol.owner instanceof BPackageSymbol) {\n+        if (symbol.owner instanceof BPackageSymbol && env.node.getKind() != NodeKind.ARROW_EXPR) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY1OTg1NQ=="}, "originalCommit": {"oid": "ad4c9b9afcdad3256415995029dfaa825403420c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY2MTAwOA==", "bodyText": "I think the first check in this method is, we skip if the current symbol is a top level node. Is that correct for arrow functions which has closures?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25739#discussion_r487661008", "createdAt": "2020-09-14T05:34:50Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4773,7 +4773,7 @@ private void checkFunctionInvocationExpr(BLangInvocation iExpr) {\n \n     private void markAndRegisterClosureVariable(BSymbol symbol, DiagnosticPos pos) {\n         BLangInvokableNode encInvokable = env.enclInvokable;\n-        if (symbol.owner instanceof BPackageSymbol) {\n+        if (symbol.owner instanceof BPackageSymbol && env.node.getKind() != NodeKind.ARROW_EXPR) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY1OTg1NQ=="}, "originalCommit": {"oid": "ad4c9b9afcdad3256415995029dfaa825403420c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY2MTM2MA==", "bodyText": "@pubudu91, isn't this related to the issue we discussed recently?\nIIRC, even in the following example, the owner of a is not the arrow function - it is the function foo. Which again is not quite correct IMO.\nfunction foo() {\n    function (int) returns int x = a => a + 1;    \n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25739#discussion_r487661360", "createdAt": "2020-09-14T05:36:12Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4773,7 +4773,7 @@ private void checkFunctionInvocationExpr(BLangInvocation iExpr) {\n \n     private void markAndRegisterClosureVariable(BSymbol symbol, DiagnosticPos pos) {\n         BLangInvokableNode encInvokable = env.enclInvokable;\n-        if (symbol.owner instanceof BPackageSymbol) {\n+        if (symbol.owner instanceof BPackageSymbol && env.node.getKind() != NodeKind.ARROW_EXPR) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY1OTg1NQ=="}, "originalCommit": {"oid": "ad4c9b9afcdad3256415995029dfaa825403420c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY2NTk5NQ==", "bodyText": "@Kishanthan Yes, we skip the symbol if it's a module level construct (e.g., a module level variable) because those are handled in a different manner and don't need to deal with closures when referring to those symbols.\nIn a normal function the owner of the param symbols is the function symbol. But in the arrow functions, looks like the relationship of the params aren't accurately reflected in the symbols.\n@MaryamZi Yeah, it seems to be the same issue", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25739#discussion_r487665995", "createdAt": "2020-09-14T05:52:53Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4773,7 +4773,7 @@ private void checkFunctionInvocationExpr(BLangInvocation iExpr) {\n \n     private void markAndRegisterClosureVariable(BSymbol symbol, DiagnosticPos pos) {\n         BLangInvokableNode encInvokable = env.enclInvokable;\n-        if (symbol.owner instanceof BPackageSymbol) {\n+        if (symbol.owner instanceof BPackageSymbol && env.node.getKind() != NodeKind.ARROW_EXPR) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY1OTg1NQ=="}, "originalCommit": {"oid": "ad4c9b9afcdad3256415995029dfaa825403420c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4NTgzMg==", "bodyText": "So having a lambda module level function does not have this issue. I guess the reason here is that arrowFunction is not treated like lambda function at typechecking phase, or altest at closure analysis phase, whereas lambdas are specially/properly handled.\nThen there is a bigger issue here IMO.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25739#discussion_r487785832", "createdAt": "2020-09-14T09:46:41Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -4773,7 +4773,7 @@ private void checkFunctionInvocationExpr(BLangInvocation iExpr) {\n \n     private void markAndRegisterClosureVariable(BSymbol symbol, DiagnosticPos pos) {\n         BLangInvokableNode encInvokable = env.enclInvokable;\n-        if (symbol.owner instanceof BPackageSymbol) {\n+        if (symbol.owner instanceof BPackageSymbol && env.node.getKind() != NodeKind.ARROW_EXPR) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY1OTg1NQ=="}, "originalCommit": {"oid": "ad4c9b9afcdad3256415995029dfaa825403420c"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 77, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}