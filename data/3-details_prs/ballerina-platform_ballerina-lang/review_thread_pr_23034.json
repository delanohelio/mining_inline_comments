{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExNzkzNTA1", "number": 23034, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNjoyNjoyNFrOD4TIDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMDo0OToyM1rOD4VtOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzYwMjA0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNjoyNjoyNFrOGPDKcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMDoyNToxOFrOGPGtMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzMzY0OQ==", "bodyText": "Will this have a problem if there is some additional token before key keyword:\nfor eg: table foo key() [{k1:v1}].", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23034#discussion_r418433649", "createdAt": "2020-05-01T06:26:24Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -7061,4 +7070,171 @@ private STNode parseTypeCastParam() {\n \n         return STNodeFactory.createTypeCastParamNode(annot, type);\n     }\n+\n+    /**\n+     * Parse table constructor expression.\n+     * <p>\n+     * <code>\n+     * table-constructor-expr := table [key-specifier] [ [row-list] ]\n+     * </code>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseTableConstructorExpr() {\n+        startContext(ParserRuleContext.TABLE_CONSTRUCTOR);\n+        STNode tableKeyword = parseTableKeyword();\n+        STToken nextToken = peek();\n+\n+        STNode keySpecifier;\n+        if (nextToken.kind == SyntaxKind.KEY_KEYWORD) {\n+            keySpecifier = parseKeySpecifier();\n+        } else {\n+            keySpecifier = STNodeFactory.createEmptyNode();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "057002415d68988c42abb0596e1c47148a574484"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzNDE4OQ==", "bodyText": "I think we'll have to do something like:\nswitch(nextTokenKind)\n    case KEY: \n        // parse key-specifier\n    case OPEN_BRACKET: \n        // parse row-list \n    default: \n        // if non of the above, then recover and re-parse/return", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23034#discussion_r418434189", "createdAt": "2020-05-01T06:28:57Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -7061,4 +7070,171 @@ private STNode parseTypeCastParam() {\n \n         return STNodeFactory.createTypeCastParamNode(annot, type);\n     }\n+\n+    /**\n+     * Parse table constructor expression.\n+     * <p>\n+     * <code>\n+     * table-constructor-expr := table [key-specifier] [ [row-list] ]\n+     * </code>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseTableConstructorExpr() {\n+        startContext(ParserRuleContext.TABLE_CONSTRUCTOR);\n+        STNode tableKeyword = parseTableKeyword();\n+        STToken nextToken = peek();\n+\n+        STNode keySpecifier;\n+        if (nextToken.kind == SyntaxKind.KEY_KEYWORD) {\n+            keySpecifier = parseKeySpecifier();\n+        } else {\n+            keySpecifier = STNodeFactory.createEmptyNode();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzMzY0OQ=="}, "originalCommit": {"oid": "057002415d68988c42abb0596e1c47148a574484"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5MTY5Ng==", "bodyText": "fixed and two test cases added.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23034#discussion_r418491696", "createdAt": "2020-05-01T10:25:18Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -7061,4 +7070,171 @@ private STNode parseTypeCastParam() {\n \n         return STNodeFactory.createTypeCastParamNode(annot, type);\n     }\n+\n+    /**\n+     * Parse table constructor expression.\n+     * <p>\n+     * <code>\n+     * table-constructor-expr := table [key-specifier] [ [row-list] ]\n+     * </code>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseTableConstructorExpr() {\n+        startContext(ParserRuleContext.TABLE_CONSTRUCTOR);\n+        STNode tableKeyword = parseTableKeyword();\n+        STToken nextToken = peek();\n+\n+        STNode keySpecifier;\n+        if (nextToken.kind == SyntaxKind.KEY_KEYWORD) {\n+            keySpecifier = parseKeySpecifier();\n+        } else {\n+            keySpecifier = STNodeFactory.createEmptyNode();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzMzY0OQ=="}, "originalCommit": {"oid": "057002415d68988c42abb0596e1c47148a574484"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzYwNzk3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNjozMDo1N1rOGPDN3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNjozMDo1N1rOGPDN3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzNDUyNg==", "bodyText": "Would it be better to call this as row-list-rhs?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23034#discussion_r418434526", "createdAt": "2020-05-01T06:30:57Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -272,6 +272,21 @@\n     private static final ParserRuleContext[] TYPE_CAST_PARAM_RHS =\n             { ParserRuleContext.TYPE_DESCRIPTOR, ParserRuleContext.GT };\n \n+    private static final ParserRuleContext[] TABLE_KEYWORD_RHS =\n+            { ParserRuleContext.KEY_SPECIFIER, ParserRuleContext.OPEN_BRACKET };\n+\n+    private static final ParserRuleContext[] TABLE_CONSTRUCTOR_RHS =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "057002415d68988c42abb0596e1c47148a574484"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzYxMDcyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNjozMjo1NlrOGPDPZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNjozMjo1NlrOGPDPZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzNDkxOA==", "bodyText": "how about table-row-end?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23034#discussion_r418434918", "createdAt": "2020-05-01T06:32:56Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -272,6 +272,21 @@\n     private static final ParserRuleContext[] TYPE_CAST_PARAM_RHS =\n             { ParserRuleContext.TYPE_DESCRIPTOR, ParserRuleContext.GT };\n \n+    private static final ParserRuleContext[] TABLE_KEYWORD_RHS =\n+            { ParserRuleContext.KEY_SPECIFIER, ParserRuleContext.OPEN_BRACKET };\n+\n+    private static final ParserRuleContext[] TABLE_CONSTRUCTOR_RHS =\n+            { ParserRuleContext.CLOSE_BRACKET, ParserRuleContext.MAPPING_CONSTRUCTOR };\n+\n+    private static final ParserRuleContext[] TABLE_CONSTRUCTOR_END =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "057002415d68988c42abb0596e1c47148a574484"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzYyODQyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNjo0NTo0N1rOGPDZVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNjo0NTo0N1rOGPDZVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQzNzQ2Mw==", "bodyText": "table-key-rhs?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23034#discussion_r418437463", "createdAt": "2020-05-01T06:45:47Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -272,6 +272,21 @@\n     private static final ParserRuleContext[] TYPE_CAST_PARAM_RHS =\n             { ParserRuleContext.TYPE_DESCRIPTOR, ParserRuleContext.GT };\n \n+    private static final ParserRuleContext[] TABLE_KEYWORD_RHS =\n+            { ParserRuleContext.KEY_SPECIFIER, ParserRuleContext.OPEN_BRACKET };\n+\n+    private static final ParserRuleContext[] TABLE_CONSTRUCTOR_RHS =\n+            { ParserRuleContext.CLOSE_BRACKET, ParserRuleContext.MAPPING_CONSTRUCTOR };\n+\n+    private static final ParserRuleContext[] TABLE_CONSTRUCTOR_END =\n+            { ParserRuleContext.COMMA, ParserRuleContext.CLOSE_BRACKET };\n+\n+    private static final ParserRuleContext[] KEY_SPECIFIER_RHS =\n+            { ParserRuleContext.CLOSE_PARENTHESIS, ParserRuleContext.VARIABLE_NAME };\n+\n+    private static final ParserRuleContext[] KEY_SPECIFIER_END =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "057002415d68988c42abb0596e1c47148a574484"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDAyNDkxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMDo0OToyM1rOGPHEUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzoyNzo1M1rOGPJq_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5NzYxOA==", "bodyText": "I sense an issue here :)\nTry something like: table key(a) foo key(b) []", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23034#discussion_r418497618", "createdAt": "2020-05-01T10:49:23Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -7061,4 +7072,196 @@ private STNode parseTypeCastParam() {\n \n         return STNodeFactory.createTypeCastParamNode(annot, type);\n     }\n+\n+    /**\n+     * Parse table constructor expression.\n+     * <p>\n+     * <code>\n+     * table-constructor-expr := table [key-specifier] [ [row-list] ]\n+     * </code>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseTableConstructorExpr() {\n+        startContext(ParserRuleContext.TABLE_CONSTRUCTOR);\n+        STNode tableKeyword = parseTableKeyword();\n+        STNode keySpecifier = STNodeFactory.createEmptyNode();\n+        return parseTableConstructorExpr(tableKeyword, keySpecifier);\n+    }\n+\n+    private STNode parseTableConstructorExpr(STNode tableKeyword, STNode keySpecifier) {\n+        return parseTableConstructorExpr(peek().kind, tableKeyword, keySpecifier);\n+    }\n+\n+    private STNode parseTableConstructorExpr(SyntaxKind nextTokenKind, STNode tableKeyword, STNode keySpecifier) {\n+        STNode openBracket;\n+        STNode rowList;\n+        STNode closeBracket;\n+\n+        // Parse optional key specifier\n+        if (nextTokenKind == SyntaxKind.KEY_KEYWORD) {\n+            keySpecifier = parseKeySpecifier();\n+            nextTokenKind = peek().kind;\n+        }\n+\n+        switch (nextTokenKind) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f692480e6e51b197cbd6655739a63226320ac14"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU0MDI4NQ==", "bodyText": "Fixed and a test case added.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23034#discussion_r418540285", "createdAt": "2020-05-01T13:27:53Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -7061,4 +7072,196 @@ private STNode parseTypeCastParam() {\n \n         return STNodeFactory.createTypeCastParamNode(annot, type);\n     }\n+\n+    /**\n+     * Parse table constructor expression.\n+     * <p>\n+     * <code>\n+     * table-constructor-expr := table [key-specifier] [ [row-list] ]\n+     * </code>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseTableConstructorExpr() {\n+        startContext(ParserRuleContext.TABLE_CONSTRUCTOR);\n+        STNode tableKeyword = parseTableKeyword();\n+        STNode keySpecifier = STNodeFactory.createEmptyNode();\n+        return parseTableConstructorExpr(tableKeyword, keySpecifier);\n+    }\n+\n+    private STNode parseTableConstructorExpr(STNode tableKeyword, STNode keySpecifier) {\n+        return parseTableConstructorExpr(peek().kind, tableKeyword, keySpecifier);\n+    }\n+\n+    private STNode parseTableConstructorExpr(SyntaxKind nextTokenKind, STNode tableKeyword, STNode keySpecifier) {\n+        STNode openBracket;\n+        STNode rowList;\n+        STNode closeBracket;\n+\n+        // Parse optional key specifier\n+        if (nextTokenKind == SyntaxKind.KEY_KEYWORD) {\n+            keySpecifier = parseKeySpecifier();\n+            nextTokenKind = peek().kind;\n+        }\n+\n+        switch (nextTokenKind) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5NzYxOA=="}, "originalCommit": {"oid": "4f692480e6e51b197cbd6655739a63226320ac14"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3687, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}