{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NTIwNjcw", "number": 24440, "title": "Make `strings` field of `RawTemplate` a readonly field", "bodyText": "Purpose\n\n$subject\n\nFixes #24140\nFixes #24268\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-06-23T11:55:46Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440", "merged": true, "mergeCommit": {"oid": "7a36758c402059535159de467020674fef5a0d18"}, "closed": true, "closedAt": "2020-07-15T20:13:46Z", "author": {"login": "pubudu91"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuEmUCABqjM0NzI2OTU0MDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1QNsBAFqTQ0OTI4NDc2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9cf568a2e390cd1b8f427daef5ee402433585488", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9cf568a2e390cd1b8f427daef5ee402433585488", "committedDate": "2020-06-23T11:54:01Z", "message": "Fix raw template test cases"}, "afterCommit": {"oid": "be24308a001ed4f51a75fb8fa9841163ff2c330f", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/be24308a001ed4f51a75fb8fa9841163ff2c330f", "committedDate": "2020-06-23T12:27:47Z", "message": "Fix raw template test cases"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "be24308a001ed4f51a75fb8fa9841163ff2c330f", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/be24308a001ed4f51a75fb8fa9841163ff2c330f", "committedDate": "2020-06-23T12:27:47Z", "message": "Fix raw template test cases"}, "afterCommit": {"oid": "900286a56346a3adb718ffa4466726eccc86fd29", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/900286a56346a3adb718ffa4466726eccc86fd29", "committedDate": "2020-06-23T13:19:29Z", "message": "Generate a separate name for raw template object classes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "952210f6d0e2c7c9d6855e288ba87d5651321a51", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/952210f6d0e2c7c9d6855e288ba87d5651321a51", "committedDate": "2020-06-24T09:57:24Z", "message": "Modify sql:ParamterizedQuery definition"}, "afterCommit": {"oid": "879ac77b472b12843d19dbe9c2978400e422da1d", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/879ac77b472b12843d19dbe9c2978400e422da1d", "committedDate": "2020-07-01T19:17:49Z", "message": "Modify sql:ParamterizedQuery definition"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNzY3ODIx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#pullrequestreview-442767821", "createdAt": "2020-07-06T04:30:48Z", "commit": {"oid": "879ac77b472b12843d19dbe9c2978400e422da1d"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNDozMDo0OFrOGtIfYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNToyMjoyMVrOGtJKsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3ODIwOQ==", "bodyText": "We probably wouldn't need this change once we merge b0624bb.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r449978209", "createdAt": "2020-07-06T04:30:48Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -585,14 +585,15 @@ private BType setLiteralValueAndGetType(BLangLiteral literalExpr, BType expType)\n                 types.isCharLiteralValue((String) literalValue)) {\n             return symTable.charStringType;\n         } else {\n-            if (this.expType.tag == TypeTags.FINITE) {\n-                boolean foundMember = types.isAssignableToFiniteType(this.expType, literalExpr);\n+            BType expected = getResolvedIntersectionType(this.expType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879ac77b472b12843d19dbe9c2978400e422da1d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4MzI5NQ==", "bodyText": "Shall we also update the comment?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r449983295", "createdAt": "2020-07-06T04:55:55Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3750,7 +3751,7 @@ public void visit(BLangRawTemplateLiteral rawTemplateLiteral) {\n     private BType determineRawTemplateLiteralType(BLangRawTemplateLiteral rawTemplateLiteral, BType expType) {\n         // Contextually expected type is NoType when `var` is used.\n         // Therefore consider the literal as of type RawTemplate\n-        if (expType == symTable.noType || expType == symTable.anyType) {\n+        if (expType == symTable.noType || containsAnyType(expType)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879ac77b472b12843d19dbe9c2978400e422da1d"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4NzczOA==", "bodyText": "What if the union has any and one or more compatible object types? In that case it should be an ambiguous type error right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r449987738", "createdAt": "2020-07-06T05:16:09Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3827,6 +3829,22 @@ private boolean evaluateRawTemplateExprs(List<? extends BLangExpression> exprs,\n         return errored;\n     }\n \n+    private BType getResolvedIntersectionType(BType type) {\n+        return type.tag != TypeTags.INTERSECTION ? type : ((BIntersectionType) type).effectiveType;\n+    }\n+\n+    private boolean containsAnyType(BType type) {\n+        if (type == symTable.anyType) {\n+            return true;\n+        }\n+\n+        if (type.tag == TypeTags.UNION) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879ac77b472b12843d19dbe9c2978400e422da1d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4ODIyMA==", "bodyText": "Btw, the following union as the CET should also work right?\ntype Foo abstract object {\n    public string[] strings;\n    public any[] insertions;\n};\n\npublic function main() {\n    string x = \"World\";\n    Foo|int f = `\"Hello ${x}`;\n}\nCurrently (slp1) fails\n$ ballerina run qwe.bal \nCompiling source\n        qwe.bal\nerror: .::qwe.bal:8:17: invalid literal for type '(Foo|int)': raw templates can only be assigned to abstract subtypes of 'ballerina/lang.object:1.0.0:RawTemplate'", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r449988220", "createdAt": "2020-07-06T05:17:55Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3750,7 +3751,7 @@ public void visit(BLangRawTemplateLiteral rawTemplateLiteral) {\n     private BType determineRawTemplateLiteralType(BLangRawTemplateLiteral rawTemplateLiteral, BType expType) {\n         // Contextually expected type is NoType when `var` is used.\n         // Therefore consider the literal as of type RawTemplate\n-        if (expType == symTable.noType || expType == symTable.anyType) {\n+        if (expType == symTable.noType || containsAnyType(expType)) {\n             return symTable.rawTemplateType;\n         }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879ac77b472b12843d19dbe9c2978400e422da1d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4ODU2NA==", "bodyText": "And the following union, where only one is compatible.\ntype Foo abstract object {\n    public string[] strings;\n    public int[] insertions;\n};\n\ntype Bar abstract object {\n    public string[] strings;\n    public string[] insertions;\n};\n\npublic function main() {\n    string x = \"World\";\n    Foo|Bar f = `\"Hello ${x}`;\n}\nFails with\n$ ballerina run qwe.bal \nCompiling source\n        qwe.bal\nerror: .::qwe.bal:13:17: invalid raw template assignment: '(Foo|Bar)' should be an abstract object", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r449988564", "createdAt": "2020-07-06T05:19:17Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3750,7 +3751,7 @@ public void visit(BLangRawTemplateLiteral rawTemplateLiteral) {\n     private BType determineRawTemplateLiteralType(BLangRawTemplateLiteral rawTemplateLiteral, BType expType) {\n         // Contextually expected type is NoType when `var` is used.\n         // Therefore consider the literal as of type RawTemplate\n-        if (expType == symTable.noType || expType == symTable.anyType) {\n+        if (expType == symTable.noType || containsAnyType(expType)) {\n             return symTable.rawTemplateType;\n         }\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4ODIyMA=="}, "originalCommit": {"oid": "879ac77b472b12843d19dbe9c2978400e422da1d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4OTI5Nw==", "bodyText": "Shall we test this also in Ballerina itself?\nFor example, https://github.com/ballerina-platform/ballerina-lang/blob/v2.0.0-Preview1/tests/jballerina-unit-test/src/test/resources/test-src/expressions/mappingconstructor/spread_op_field.bal#L149.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r449989297", "createdAt": "2020-07-06T05:22:21Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/rawtemplate/RawTemplateLiteralTest.java", "diffHunk": "@@ -118,6 +122,13 @@ public void testIndirectAssignmentToConcreteType() {\n         BRunUtil.invoke(result, \"testIndirectAssignmentToConcreteType\");\n     }\n \n+    @Test(expectedExceptions = BLangRuntimeException.class,\n+          expectedExceptionsMessageRegExp =\n+                  \".*InvalidUpdate message=modification not allowed on readonly value.*\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879ac77b472b12843d19dbe9c2978400e422da1d"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MTUxNjg3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#pullrequestreview-444151687", "createdAt": "2020-07-07T18:35:57Z", "commit": {"oid": "879ac77b472b12843d19dbe9c2978400e422da1d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODozNTo1N1rOGuK4Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODozNTo1N1rOGuK4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA2NTkwNg==", "bodyText": "Wonder why doesn't anyone use getOrDefault method here.\nInteger nextValue = rawTemplateTypeCount.getOrDefault(packageID, 0);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r451065906", "createdAt": "2020-07-07T18:35:57Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangAnonymousModelHelper.java", "diffHunk": "@@ -106,6 +110,12 @@ public String getNextDistinctErrorId(PackageID packageID) {\n         return ANON_TYPE_ID + String.valueOf(nextValue);\n     }\n \n+    public String getNextRawTemplateTypeKey(PackageID packageID, Name rawTemplateTypeName) {\n+        Integer nextValue = Optional.ofNullable(rawTemplateTypeCount.get(packageID)).orElse(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879ac77b472b12843d19dbe9c2978400e422da1d"}, "originalPosition": 37}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "879ac77b472b12843d19dbe9c2978400e422da1d", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/879ac77b472b12843d19dbe9c2978400e422da1d", "committedDate": "2020-07-01T19:17:49Z", "message": "Modify sql:ParamterizedQuery definition"}, "afterCommit": {"oid": "ce3ad42fa9ff3a6d5fb876f82495027704b14b85", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ce3ad42fa9ff3a6d5fb876f82495027704b14b85", "committedDate": "2020-07-13T07:01:22Z", "message": "Add support for use of raw templates with unions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ce3ad42fa9ff3a6d5fb876f82495027704b14b85", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ce3ad42fa9ff3a6d5fb876f82495027704b14b85", "committedDate": "2020-07-13T07:01:22Z", "message": "Add support for use of raw templates with unions"}, "afterCommit": {"oid": "f7bee89589eb3ba44ac1d2bb8fcd4fe517660f4b", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f7bee89589eb3ba44ac1d2bb8fcd4fe517660f4b", "committedDate": "2020-07-13T10:28:07Z", "message": "Refactor panicking tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7374552d923751d8b5821d09d88fae3b3b043bb6", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7374552d923751d8b5821d09d88fae3b3b043bb6", "committedDate": "2020-07-15T13:41:26Z", "message": "Change RawTemplate's strings field to readonly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "803ca052ae3725b85eb05d3384eecc9566223548", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/803ca052ae3725b85eb05d3384eecc9566223548", "committedDate": "2020-07-15T13:41:32Z", "message": "Fix raw template test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e99b5b3a3d9b7c3e43d232a7258f13ac9088f3b", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5e99b5b3a3d9b7c3e43d232a7258f13ac9088f3b", "committedDate": "2020-07-15T13:41:32Z", "message": "Generate a separate name for raw template object classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "459576658085ad56da860c25950d8be26b65f64c", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/459576658085ad56da860c25950d8be26b65f64c", "committedDate": "2020-07-15T13:41:32Z", "message": "Fix type checking issue in unions with any"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6508fb3b9e7cf8645f6aabca01560874eb4de438", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6508fb3b9e7cf8645f6aabca01560874eb4de438", "committedDate": "2020-07-15T13:41:33Z", "message": "Fix checkstyle issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7858d1903f140d5c335eea15f8f99c5609b93f5b", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7858d1903f140d5c335eea15f8f99c5609b93f5b", "committedDate": "2020-07-15T13:41:33Z", "message": "Modify sql:ParamterizedQuery definition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6582c5fa3be07eccb22021b1107ce04b53ff26d7", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6582c5fa3be07eccb22021b1107ce04b53ff26d7", "committedDate": "2020-07-15T13:41:33Z", "message": "Add support for use of raw templates with unions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6e6a9414efcdcb842718bdffcc77b0d915f42f8", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a6e6a9414efcdcb842718bdffcc77b0d915f42f8", "committedDate": "2020-07-15T13:41:33Z", "message": "Refactor panicking tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f7bee89589eb3ba44ac1d2bb8fcd4fe517660f4b", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f7bee89589eb3ba44ac1d2bb8fcd4fe517660f4b", "committedDate": "2020-07-13T10:28:07Z", "message": "Refactor panicking tests"}, "afterCommit": {"oid": "a6e6a9414efcdcb842718bdffcc77b0d915f42f8", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a6e6a9414efcdcb842718bdffcc77b0d915f42f8", "committedDate": "2020-07-15T13:41:33Z", "message": "Refactor panicking tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MDMzODkx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#pullrequestreview-449033891", "createdAt": "2020-07-15T14:47:34Z", "commit": {"oid": "a6e6a9414efcdcb842718bdffcc77b0d915f42f8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDo0NzozNFrOGyBssw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDo0NzozNFrOGyBssw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwOTgxMQ==", "bodyText": "Should we call getEffectiveMemberTypes here instead of getMemberTypes ?\n\n  \n    \n      ballerina-lang/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\n    \n    \n         Line 2336\n      in\n      1cbfd04\n    \n    \n    \n    \n\n        \n          \n           private Set<BType> getEffectiveMemberTypes(BUnionType unionType) { \n        \n    \n  \n\n\nThis is currently used in\n\n  \n    \n      ballerina-lang/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\n    \n    \n         Line 2297\n      in\n      1cbfd04\n    \n    \n    \n    \n\n        \n          \n           private boolean isAssignableToUnionType(BType source, BType target, Set<TypePair> unresolvedTypes) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455109811", "createdAt": "2020-07-15T14:47:34Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3827,6 +3830,48 @@ private boolean evaluateRawTemplateExprs(List<? extends BLangExpression> exprs,\n         return errored;\n     }\n \n+    private BType getResolvedIntersectionType(BType type) {\n+        return type.tag != TypeTags.INTERSECTION ? type : ((BIntersectionType) type).effectiveType;\n+    }\n+\n+    private boolean containsAnyType(BType type) {\n+        if (type == symTable.anyType) {\n+            return true;\n+        }\n+\n+        if (type.tag == TypeTags.UNION) {\n+            return ((BUnionType) type).getMemberTypes().contains(symTable.anyType);\n+        }\n+\n+        return false;\n+    }\n+\n+    private BType getCompatibleRawTemplateType(BType expType, DiagnosticPos pos) {\n+        if (expType.tag != TypeTags.UNION) {\n+            return expType;\n+        }\n+\n+        BUnionType unionType = (BUnionType) expType;\n+        List<BType> compatibleTypes = new ArrayList<>();\n+\n+        for (BType type : unionType.getMemberTypes()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e6a9414efcdcb842718bdffcc77b0d915f42f8"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MDA0NzEx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#pullrequestreview-449004711", "createdAt": "2020-07-15T14:22:36Z", "commit": {"oid": "a6e6a9414efcdcb842718bdffcc77b0d915f42f8"}, "state": "DISMISSED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDoyMjozN1rOGyAiPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDo0MToyNVrOGyBayw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA5MDc0OA==", "bodyText": "Shall we create an issue for this? You can assign it to me. \ud83d\ude04", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455090748", "createdAt": "2020-07-15T14:22:37Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -585,14 +585,15 @@ private BType setLiteralValueAndGetType(BLangLiteral literalExpr, BType expType)\n                 types.isCharLiteralValue((String) literalValue)) {\n             return symTable.charStringType;\n         } else {\n-            if (this.expType.tag == TypeTags.FINITE) {\n-                boolean foundMember = types.isAssignableToFiniteType(this.expType, literalExpr);\n+            BType expected = getResolvedIntersectionType(this.expType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk3ODIwOQ=="}, "originalCommit": {"oid": "879ac77b472b12843d19dbe9c2978400e422da1d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwNTIyNw==", "bodyText": "Do we have tests that assert the strings and insertions? Asserting the typedesc doesn't quite validate behaviour IMO.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455105227", "createdAt": "2020-07-15T14:41:25Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/rawtemplate/raw_template_literal_test.bal", "diffHunk": "@@ -203,19 +203,20 @@ function testUseWithVar() {\n     var rt = `Hello ${name}!`;\n     typedesc<any> td = typeof rt;\n \n-    assert(\"typedesc $anonType$21 {\\n\\tstrings : string[],\\n\\tinsertions : (any|error)[]\\n}\", td.toString());\n+    assert(\"typedesc $rawTemplate$RawTemplate$12\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e6a9414efcdcb842718bdffcc77b0d915f42f8"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MDU1MjA1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#pullrequestreview-449055205", "createdAt": "2020-07-15T15:08:23Z", "commit": {"oid": "a6e6a9414efcdcb842718bdffcc77b0d915f42f8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTowODoyNFrOGyCuzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTowODoyNFrOGyCuzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyNjczMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                MULTIPLE_COMPATIBLE_RAW_TEMPLATE_TYPES(\"multiple.compatiple.raw.template.types\"),\n          \n          \n            \n                MULTIPLE_COMPATIBLE_RAW_TEMPLATE_TYPES(\"multiple.compatible.raw.template.types\"),", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455126733", "createdAt": "2020-07-15T15:08:24Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java", "diffHunk": "@@ -553,6 +553,7 @@\n     INVALID_TYPEDESC_PARAM(\"invalid.typedesc.param\"),\n \n     INVALID_RAW_TEMPLATE_TYPE(\"invalid.raw.template.type\"),\n+    MULTIPLE_COMPATIBLE_RAW_TEMPLATE_TYPES(\"multiple.compatiple.raw.template.types\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e6a9414efcdcb842718bdffcc77b0d915f42f8"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3310dc89c4dbb6d4404677ba2a2ba60fdf1b4dd", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a3310dc89c4dbb6d4404677ba2a2ba60fdf1b4dd", "committedDate": "2020-07-15T15:20:51Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MDY2NjU5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#pullrequestreview-449066659", "createdAt": "2020-07-15T15:21:27Z", "commit": {"oid": "a6e6a9414efcdcb842718bdffcc77b0d915f42f8"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MDc4MTYw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#pullrequestreview-449078160", "createdAt": "2020-07-15T15:35:23Z", "commit": {"oid": "a6e6a9414efcdcb842718bdffcc77b0d915f42f8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTozNToyM1rOGyD4zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTozNToyM1rOGyD4zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE0NTY3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            error.multiple.compatiple.raw.template.types=\\\n          \n          \n            \n            error.multiple.compatible.raw.template.types=\\", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#discussion_r455145677", "createdAt": "2020-07-15T15:35:23Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -1395,6 +1395,9 @@ error.invalid.typedesc.param=\\\n error.invalid.raw.template.type=\\\n   invalid literal for type ''{1}'': raw templates can only be assigned to abstract subtypes of ''{0}''\n \n+error.multiple.compatiple.raw.template.types=\\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e6a9414efcdcb842718bdffcc77b0d915f42f8"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MjYwMTE3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#pullrequestreview-449260117", "createdAt": "2020-07-15T19:20:30Z", "commit": {"oid": "a3310dc89c4dbb6d4404677ba2a2ba60fdf1b4dd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5Mjg0NzYx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24440#pullrequestreview-449284761", "createdAt": "2020-07-15T19:57:30Z", "commit": {"oid": "a3310dc89c4dbb6d4404677ba2a2ba60fdf1b4dd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4219, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}