{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NTE5MTIw", "number": 23672, "title": "Add transformer method for annotation declaration node", "bodyText": "Purpose\n$subject\nFixes #23671\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-06-02T11:18:28Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672", "merged": true, "mergeCommit": {"oid": "ea5214cb96b9a330ad56af3426b81bdd2d87e9ae"}, "closed": true, "closedAt": "2020-06-03T13:54:45Z", "author": {"login": "rdulmina"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnSsdhgH2gAyNDI2NTE5MTIwOjYyNWJiMDVjYWRlZmNjN2ZmY2RkNzBmNzJiMDQ4MWQ1OWY4OGNlMmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnmsy7gFqTQyMzQxMTk2Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "625bb05cadefcc7ffcdd70f72b0481d59f88ce2f", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/625bb05cadefcc7ffcdd70f72b0481d59f88ce2f", "committedDate": "2020-06-02T10:55:59Z", "message": "Transform method for annotation declaration."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be63b893f6cfae9bd01d1620c59b9ca973cd4d1e", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/be63b893f6cfae9bd01d1620c59b9ca973cd4d1e", "committedDate": "2020-06-02T11:00:17Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into remote-method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac17a9d86e3a22a12521d76b933f46d9d8cbe980", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ac17a9d86e3a22a12521d76b933f46d9d8cbe980", "committedDate": "2020-06-02T11:43:50Z", "message": "Fix checkstyle violations."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNjI3NzA2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#pullrequestreview-422627706", "createdAt": "2020-06-02T12:32:30Z", "commit": {"oid": "ac17a9d86e3a22a12521d76b933f46d9d8cbe980"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjozMjozMFrOGdvbsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjozMjozMFrOGdvbsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzOTAyNA==", "bodyText": "can we use kind instead a string?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#discussion_r433839024", "createdAt": "2020-06-02T12:32:30Z", "author": {"login": "manuranga"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1109,6 +1117,63 @@ public BLangNode transform(AnnotationNode annotation) {\n         return bLAnnotationAttachment;\n     }\n \n+    @Override\n+    public BLangNode transform(AnnotationDeclarationNode annotationDeclarationNode) {\n+        BLangAnnotation annotationDecl = (BLangAnnotation) TreeBuilder.createAnnotationNode();\n+        DiagnosticPos pos = getPosition(annotationDeclarationNode);\n+        annotationDecl.pos = pos;\n+        annotationDecl.name = createIdentifier(pos, annotationDeclarationNode.annotationTag().text());\n+\n+        if (annotationDeclarationNode.visibilityQualifier() != null) {\n+            annotationDecl.addFlag(Flag.PUBLIC);\n+        }\n+\n+        if (annotationDeclarationNode.constKeyword() != null) {\n+            annotationDecl.addFlag(Flag.CONSTANT);\n+        }\n+\n+        annotationDecl.annAttachments = applyAll(annotationDeclarationNode.metadata().annotations());\n+\n+        annotationDeclarationNode.metadata().documentationString().ifPresent(docString-> {\n+            annotationDecl.markdownDocumentationAttachment = createMarkdownDocumentationAttachment(docString);\n+        });\n+\n+        Node typedesc = annotationDeclarationNode.typeDescriptor();\n+        if (typedesc != null) {\n+            annotationDecl.typeNode = createTypeNode(typedesc);\n+        }\n+\n+        SeparatedNodeList<Node> paramList = annotationDeclarationNode.attachPoints();\n+\n+        for (Node child : paramList) {\n+            AnnotationAttachPointNode attachPoint = (AnnotationAttachPointNode) child;\n+            boolean source = attachPoint.sourceKeyword() != null;\n+            AttachPoint bLAttachPoint;\n+            String firstIndent = attachPoint.firstIdent().text().toLowerCase();\n+            if (firstIndent == \"object\") {\n+                switch (attachPoint.secondIdent().text().toLowerCase()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac17a9d86e3a22a12521d76b933f46d9d8cbe980"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNjI4NDM4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#pullrequestreview-422628438", "createdAt": "2020-06-02T12:33:30Z", "commit": {"oid": "ac17a9d86e3a22a12521d76b933f46d9d8cbe980"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNjM0Njk2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#pullrequestreview-422634696", "createdAt": "2020-06-02T12:41:43Z", "commit": {"oid": "ac17a9d86e3a22a12521d76b933f46d9d8cbe980"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjo0MTo0NFrOGdvwMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjo0NTowNFrOGdv35w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0NDI3NQ==", "bodyText": "I know we earlier used to follow 4-spaces indentation for json formatting. But given our json generator tool can only support 2-spaces for indentation, shall we follow the same?\nThat way, it is easy to understand the diff went in to the file..", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#discussion_r433844275", "createdAt": "2020-06-02T12:41:44Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/resources/declarations/annot-decl/annot_decl_assert_10.json", "diffHunk": "@@ -1,68 +1,68 @@\n {\n-  \"kind\": \"MODULE_PART\",\n-  \"children\": [\n-    {\n-      \"kind\": \"LIST\",\n-      \"children\": []\n-    },\n-    {\n-      \"kind\": \"LIST\",\n-      \"children\": [\n+    \"kind\": \"MODULE_PART\",\n+    \"children\": [\n         {\n-          \"kind\": \"ANNOTATION_DECLARATION\",\n-          \"children\": [\n-            {\n-              \"kind\": \"METADATA\",\n-              \"children\": [\n-                {\n-                  \"kind\": \"LIST\",\n-                  \"children\": []\n-                }\n-              ]\n-            },\n-            {\n-              \"kind\": \"ANNOTATION_KEYWORD\"\n-            },\n-            {\n-              \"kind\": \"IDENTIFIER_TOKEN\",\n-              \"value\": \"Foo\"\n-            },\n-            {\n-              \"kind\": \"ON_KEYWORD\"\n-            },\n-            {\n-              \"kind\": \"LIST\",\n-              \"children\": [\n-                {\n-                  \"kind\": \"ANNOTATION_ATTACH_POINT\",\n-                  \"children\": [\n-                    {\n-                      \"kind\": \"SOURCE_KEYWORD\"\n-                    },\n-                    {\n-                      \"kind\": \"TYPE_KEYWORD\",\n-                      \"isMissing\": true\n-                    }\n-                  ]\n-                },\n-                {\n-                  \"kind\": \"COMMA_TOKEN\"\n-                },\n+            \"kind\": \"LIST\",\n+            \"children\": []\n+        },\n+        {\n+            \"kind\": \"LIST\",\n+            \"children\": [\n                 {\n-                  \"kind\": \"TYPE_KEYWORD\",\n-                  \"isMissing\": true\n+                    \"kind\": \"ANNOTATION_DECLARATION\",\n+                    \"children\": [\n+                        {\n+                            \"kind\": \"METADATA\",\n+                            \"children\": [\n+                                {\n+                                    \"kind\": \"LIST\",\n+                                    \"children\": []\n+                                }\n+                            ]\n+                        },\n+                        {\n+                            \"kind\": \"ANNOTATION_KEYWORD\"\n+                        },\n+                        {\n+                            \"kind\": \"IDENTIFIER_TOKEN\",\n+                            \"value\": \"Foo\"\n+                        },\n+                        {\n+                            \"kind\": \"ON_KEYWORD\"\n+                        },\n+                        {\n+                            \"kind\": \"LIST\",\n+                            \"children\": [\n+                                {\n+                                    \"kind\": \"ANNOTATION_ATTACH_POINT\",\n+                                    \"children\": [\n+                                        {\n+                                            \"kind\": \"SOURCE_KEYWORD\"\n+                                        },\n+                                        {\n+                                            \"kind\": \"TYPE_KEYWORD\",\n+                                            \"isMissing\": true\n+                                        }\n+                                    ]\n+                                },\n+                                {\n+                                    \"kind\": \"COMMA_TOKEN\"\n+                                },\n+                                {\n+                                    \"kind\": \"TYPE_KEYWORD\",\n+                                    \"isMissing\": true\n+                                }\n+                            ]\n+                        },\n+                        {\n+                            \"kind\": \"SEMICOLON_TOKEN\"\n+                        }\n+                    ]\n                 }\n-              ]\n-            },\n-            {\n-              \"kind\": \"SEMICOLON_TOKEN\"\n-            }\n-          ]\n+            ]\n+        },\n+        {\n+            \"kind\": \"EOF_TOKEN\"\n         }\n-      ]\n-    },\n-    {\n-      \"kind\": \"EOF_TOKEN\"\n-    }\n-  ]\n-}\n\\ No newline at end of file\n+    ]\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac17a9d86e3a22a12521d76b933f46d9d8cbe980"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0NjI0Nw==", "bodyText": "I have updated this method to handle missing nodes (Identifiers). PR is yet to be merged (#23669), but better to sync with it, if it got merged before this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#discussion_r433846247", "createdAt": "2020-06-02T12:45:04Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1109,6 +1117,63 @@ public BLangNode transform(AnnotationNode annotation) {\n         return bLAnnotationAttachment;\n     }\n \n+    @Override\n+    public BLangNode transform(AnnotationDeclarationNode annotationDeclarationNode) {\n+        BLangAnnotation annotationDecl = (BLangAnnotation) TreeBuilder.createAnnotationNode();\n+        DiagnosticPos pos = getPosition(annotationDeclarationNode);\n+        annotationDecl.pos = pos;\n+        annotationDecl.name = createIdentifier(pos, annotationDeclarationNode.annotationTag().text());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac17a9d86e3a22a12521d76b933f46d9d8cbe980"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNjQyNjM1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#pullrequestreview-422642635", "createdAt": "2020-06-02T12:51:52Z", "commit": {"oid": "ac17a9d86e3a22a12521d76b933f46d9d8cbe980"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjo1MTo1MlrOGdwH3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjo1MTo1MlrOGdwH3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1MDMzMg==", "bodyText": "Can use a switch case for the outer if-else as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#discussion_r433850332", "createdAt": "2020-06-02T12:51:52Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1109,6 +1117,63 @@ public BLangNode transform(AnnotationNode annotation) {\n         return bLAnnotationAttachment;\n     }\n \n+    @Override\n+    public BLangNode transform(AnnotationDeclarationNode annotationDeclarationNode) {\n+        BLangAnnotation annotationDecl = (BLangAnnotation) TreeBuilder.createAnnotationNode();\n+        DiagnosticPos pos = getPosition(annotationDeclarationNode);\n+        annotationDecl.pos = pos;\n+        annotationDecl.name = createIdentifier(pos, annotationDeclarationNode.annotationTag().text());\n+\n+        if (annotationDeclarationNode.visibilityQualifier() != null) {\n+            annotationDecl.addFlag(Flag.PUBLIC);\n+        }\n+\n+        if (annotationDeclarationNode.constKeyword() != null) {\n+            annotationDecl.addFlag(Flag.CONSTANT);\n+        }\n+\n+        annotationDecl.annAttachments = applyAll(annotationDeclarationNode.metadata().annotations());\n+\n+        annotationDeclarationNode.metadata().documentationString().ifPresent(docString-> {\n+            annotationDecl.markdownDocumentationAttachment = createMarkdownDocumentationAttachment(docString);\n+        });\n+\n+        Node typedesc = annotationDeclarationNode.typeDescriptor();\n+        if (typedesc != null) {\n+            annotationDecl.typeNode = createTypeNode(typedesc);\n+        }\n+\n+        SeparatedNodeList<Node> paramList = annotationDeclarationNode.attachPoints();\n+\n+        for (Node child : paramList) {\n+            AnnotationAttachPointNode attachPoint = (AnnotationAttachPointNode) child;\n+            boolean source = attachPoint.sourceKeyword() != null;\n+            AttachPoint bLAttachPoint;\n+            String firstIndent = attachPoint.firstIdent().text().toLowerCase();\n+            if (firstIndent == \"object\") {\n+                switch (attachPoint.secondIdent().text().toLowerCase()) {\n+                    case \"function\" :\n+                        bLAttachPoint = AttachPoint.getAttachmentPoint(\"objectfunction\", source);\n+                        break;\n+                    case \"field\" :\n+                        bLAttachPoint = AttachPoint.getAttachmentPoint(\"objectfield\", source);\n+                        break;\n+                    default:\n+                        bLAttachPoint = AttachPoint.getAttachmentPoint(\"objecttype\", source);\n+                }\n+            } else if (firstIndent == \"resource\") {\n+                bLAttachPoint = AttachPoint.getAttachmentPoint(\"resourcefunction\", source);\n+            } else if (firstIndent == \"record\") {\n+                bLAttachPoint = AttachPoint.getAttachmentPoint(\"recordfield\", source);\n+            } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac17a9d86e3a22a12521d76b933f46d9d8cbe980"}, "originalPosition": 109}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c0c29a87a7ae8bae0ae2f4349ed47fee520c860", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2c0c29a87a7ae8bae0ae2f4349ed47fee520c860", "committedDate": "2020-06-03T08:38:55Z", "message": "Use enum for switch case.\nUsed enum for switch case and reformat assert files."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "489472ebb17e7cc88b74f02ae59540836d3d2b85", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/489472ebb17e7cc88b74f02ae59540836d3d2b85", "committedDate": "2020-06-03T08:42:51Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into remote-method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMzY3MTg4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#pullrequestreview-423367188", "createdAt": "2020-06-03T09:15:18Z", "commit": {"oid": "489472ebb17e7cc88b74f02ae59540836d3d2b85"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOToxNToxOFrOGeTN6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOToxNToxOFrOGeTN6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQyNTMyMA==", "bodyText": "Can't we use the attachPoint.firstIdent().kind?\nEach ident you get here would be a keyword token, so token kind should be unique.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#discussion_r434425320", "createdAt": "2020-06-03T09:15:18Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1117,6 +1125,69 @@ public BLangNode transform(AnnotationNode annotation) {\n         return bLAnnotationAttachment;\n     }\n \n+    @Override\n+    public BLangNode transform(AnnotationDeclarationNode annotationDeclarationNode) {\n+        BLangAnnotation annotationDecl = (BLangAnnotation) TreeBuilder.createAnnotationNode();\n+        DiagnosticPos pos = getPosition(annotationDeclarationNode);\n+        annotationDecl.pos = pos;\n+        annotationDecl.name = createIdentifier(pos, annotationDeclarationNode.annotationTag().text());\n+\n+        if (annotationDeclarationNode.visibilityQualifier() != null) {\n+            annotationDecl.addFlag(Flag.PUBLIC);\n+        }\n+\n+        if (annotationDeclarationNode.constKeyword() != null) {\n+            annotationDecl.addFlag(Flag.CONSTANT);\n+        }\n+\n+        annotationDecl.annAttachments = applyAll(annotationDeclarationNode.metadata().annotations());\n+\n+        annotationDeclarationNode.metadata().documentationString().ifPresent(docString-> {\n+            annotationDecl.markdownDocumentationAttachment = createMarkdownDocumentationAttachment(docString);\n+        });\n+\n+        Node typedesc = annotationDeclarationNode.typeDescriptor();\n+        if (typedesc != null) {\n+            annotationDecl.typeNode = createTypeNode(typedesc);\n+        }\n+\n+        SeparatedNodeList<Node> paramList = annotationDeclarationNode.attachPoints();\n+\n+        for (Node child : paramList) {\n+            AnnotationAttachPointNode attachPoint = (AnnotationAttachPointNode) child;\n+            boolean source = attachPoint.sourceKeyword() != null;\n+            AttachPoint bLAttachPoint;\n+            AttachPoint.Point firstIndent = AttachPoint.fromString(attachPoint.firstIdent().text().toLowerCase());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "489472ebb17e7cc88b74f02ae59540836d3d2b85"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMzY3NTc3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#pullrequestreview-423367577", "createdAt": "2020-06-03T09:15:43Z", "commit": {"oid": "489472ebb17e7cc88b74f02ae59540836d3d2b85"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOToxNTo0M1rOGeTO8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOToxNTo0M1rOGeTO8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQyNTU4NA==", "bodyText": "can we replace the string using org.ballerinalang.model.elements.AttachPoint value ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#discussion_r434425584", "createdAt": "2020-06-03T09:15:43Z", "author": {"login": "manuranga"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1117,6 +1125,69 @@ public BLangNode transform(AnnotationNode annotation) {\n         return bLAnnotationAttachment;\n     }\n \n+    @Override\n+    public BLangNode transform(AnnotationDeclarationNode annotationDeclarationNode) {\n+        BLangAnnotation annotationDecl = (BLangAnnotation) TreeBuilder.createAnnotationNode();\n+        DiagnosticPos pos = getPosition(annotationDeclarationNode);\n+        annotationDecl.pos = pos;\n+        annotationDecl.name = createIdentifier(pos, annotationDeclarationNode.annotationTag().text());\n+\n+        if (annotationDeclarationNode.visibilityQualifier() != null) {\n+            annotationDecl.addFlag(Flag.PUBLIC);\n+        }\n+\n+        if (annotationDeclarationNode.constKeyword() != null) {\n+            annotationDecl.addFlag(Flag.CONSTANT);\n+        }\n+\n+        annotationDecl.annAttachments = applyAll(annotationDeclarationNode.metadata().annotations());\n+\n+        annotationDeclarationNode.metadata().documentationString().ifPresent(docString-> {\n+            annotationDecl.markdownDocumentationAttachment = createMarkdownDocumentationAttachment(docString);\n+        });\n+\n+        Node typedesc = annotationDeclarationNode.typeDescriptor();\n+        if (typedesc != null) {\n+            annotationDecl.typeNode = createTypeNode(typedesc);\n+        }\n+\n+        SeparatedNodeList<Node> paramList = annotationDeclarationNode.attachPoints();\n+\n+        for (Node child : paramList) {\n+            AnnotationAttachPointNode attachPoint = (AnnotationAttachPointNode) child;\n+            boolean source = attachPoint.sourceKeyword() != null;\n+            AttachPoint bLAttachPoint;\n+            AttachPoint.Point firstIndent = AttachPoint.fromString(attachPoint.firstIdent().text().toLowerCase());\n+            switch (firstIndent) {\n+                case OBJECT:\n+                    AttachPoint.Point secondIdent =\n+                            AttachPoint.fromString(attachPoint.firstIdent().text().toLowerCase());\n+                    switch (secondIdent) {\n+                        case FUNCTION:\n+                            bLAttachPoint = AttachPoint.getAttachmentPoint(\"objectfunction\", source);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "489472ebb17e7cc88b74f02ae59540836d3d2b85"}, "originalPosition": 100}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1c36bb2bf0294e641e07587ba0b8231a0e89d0f", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c1c36bb2bf0294e641e07587ba0b8231a0e89d0f", "committedDate": "2020-06-03T10:02:32Z", "message": "Used syntax kind in switch cases\nUsed syntax kind in switch cases, removed fromString method."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9b04914be89141e9a2fafe59e9793cfa58e8e4e", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e9b04914be89141e9a2fafe59e9793cfa58e8e4e", "committedDate": "2020-06-03T10:04:13Z", "message": "Removed extra new line."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNDEwMDMx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#pullrequestreview-423410031", "createdAt": "2020-06-03T10:11:32Z", "commit": {"oid": "e9b04914be89141e9a2fafe59e9793cfa58e8e4e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNDExOTY2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23672#pullrequestreview-423411966", "createdAt": "2020-06-03T10:14:27Z", "commit": {"oid": "e9b04914be89141e9a2fafe59e9793cfa58e8e4e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4498, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}