{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwODU1NzU2", "number": 26634, "reviewThreads": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODowMToxMVrOEysKrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNjowMjowOFrOE3kMyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTg3ODg0OnYy", "diffSide": "RIGHT", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PullCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODowMToxMVrOHpd4YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDoxNTo1N1rOHpi9Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0MzIzMg==", "bodyText": "Probably we should move this validation to project api", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r513243232", "createdAt": "2020-10-28T08:01:11Z", "author": {"login": "hevayo"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PullCommand.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.utils.ProjectConstants;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.compiler.util.Names;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import static io.ballerina.cli.cmd.Constants.PULL_COMMAND;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static java.nio.file.Files.createDirectory;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+\n+/**\n+ * This class represents the \"ballerina pull\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PULL_COMMAND,\n+        description = \"download the module source and binaries from a remote repository\")\n+public class PullCommand implements BLauncherCmd {\n+    //module name format : <org-name>/<package-name> | <org-name>/<package-name>:<version>\n+    //version format : 1, 1.*, 1.*.*\n+    private static final String PKG_NAME_REGEX = \"[^0-9_][_\\\\w]+/[^0-9_][_\\\\.\\\\w]+|\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c87aea90550b9d2f849d846c5a36b3c307956dc"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMyNjQwMw==", "bodyText": "added to ProjectConstants class", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r513326403", "createdAt": "2020-10-28T10:15:57Z", "author": {"login": "pramodya1994"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PullCommand.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.utils.ProjectConstants;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.compiler.util.Names;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import static io.ballerina.cli.cmd.Constants.PULL_COMMAND;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static java.nio.file.Files.createDirectory;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+\n+/**\n+ * This class represents the \"ballerina pull\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PULL_COMMAND,\n+        description = \"download the module source and binaries from a remote repository\")\n+public class PullCommand implements BLauncherCmd {\n+    //module name format : <org-name>/<package-name> | <org-name>/<package-name>:<version>\n+    //version format : 1, 1.*, 1.*.*\n+    private static final String PKG_NAME_REGEX = \"[^0-9_][_\\\\w]+/[^0-9_][_\\\\.\\\\w]+|\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0MzIzMg=="}, "originalCommit": {"oid": "9c87aea90550b9d2f849d846c5a36b3c307956dc"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTg4NjA2OnYy", "diffSide": "RIGHT", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODowMzoyMlrOHpd8cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOToyNjo0NFrOHpg8-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0NDI3Mw==", "bodyText": "Why do we need this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r513244273", "createdAt": "2020-10-28T08:03:22Z", "author": {"login": "hevayo"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/*\n+*  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.PackageDescriptor;\n+import io.ballerina.projects.balo.BaloProject;\n+import io.ballerina.projects.utils.ProjectConstants;\n+import io.ballerina.projects.utils.ProjectUtils;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.ballerina.cli.cmd.Constants.PUSH_COMMAND;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * This class represents the \"ballerina push\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PUSH_COMMAND, description = \"push modules and binaries available locally to \"\n+        + \"Ballerina Central\")\n+public class PushCommand implements BLauncherCmd {\n+    private static PrintStream outStream = System.err;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = {\"--help\", \"-h\"}, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true)\n+    private String debugPort;\n+\n+    @CommandLine.Option(names = \"--repository\", hidden = true)\n+    private String repositoryHome;\n+\n+    @CommandLine.Option(names = {\"--skip-source-check\"}, description = \"skip checking if source has changed\")\n+    private boolean skipSourceCheck;\n+\n+    @CommandLine.Option(names = \"--experimental\", description = \"enable experimental language features\")\n+    private boolean experimentalFlag;\n+\n+    private Path userDir;\n+    private PrintStream errStream;\n+    \n+    public PushCommand() {\n+        userDir = Paths.get(System.getProperty(\"user.dir\"));\n+        errStream = System.err;\n+    }\n+    \n+    public PushCommand(Path userDir, PrintStream errStream) {\n+        this.userDir = userDir;\n+        this.errStream = errStream;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(PUSH_COMMAND);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        // Get source root path.\n+        Path sourceRootPath = userDir;\n+\n+        // Push command only works inside a project\n+        if (!ProjectUtils.isBallerinaProject(sourceRootPath)) {\n+            Path findRoot = ProjectUtils.findProjectRoot(sourceRootPath);\n+            if (null == findRoot) {\n+                CommandUtil.printError(errStream,\n+                        \"Push command can be only run inside a Ballerina project\",\n+                        null,\n+                        false);\n+                return;\n+            }\n+            sourceRootPath = findRoot;\n+        }\n+\n+        // Enable remote debugging\n+        if (null != debugPort) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c87aea90550b9d2f849d846c5a36b3c307956dc"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5MzU2Mw==", "bodyText": "We set SYSTEM_PROP_BAL_DEBUG when --debug is in the cmd, and decide ballerina program should be running on debug mode using SYSTEM_PROP_BAL_DEBUG property in https://github.com/ballerina-platform/ballerina-lang/blob/master/cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/utils/DebugUtils.java#L22", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r513293563", "createdAt": "2020-10-28T09:26:44Z", "author": {"login": "pramodya1994"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/*\n+*  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.PackageDescriptor;\n+import io.ballerina.projects.balo.BaloProject;\n+import io.ballerina.projects.utils.ProjectConstants;\n+import io.ballerina.projects.utils.ProjectUtils;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.ballerina.cli.cmd.Constants.PUSH_COMMAND;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * This class represents the \"ballerina push\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PUSH_COMMAND, description = \"push modules and binaries available locally to \"\n+        + \"Ballerina Central\")\n+public class PushCommand implements BLauncherCmd {\n+    private static PrintStream outStream = System.err;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = {\"--help\", \"-h\"}, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true)\n+    private String debugPort;\n+\n+    @CommandLine.Option(names = \"--repository\", hidden = true)\n+    private String repositoryHome;\n+\n+    @CommandLine.Option(names = {\"--skip-source-check\"}, description = \"skip checking if source has changed\")\n+    private boolean skipSourceCheck;\n+\n+    @CommandLine.Option(names = \"--experimental\", description = \"enable experimental language features\")\n+    private boolean experimentalFlag;\n+\n+    private Path userDir;\n+    private PrintStream errStream;\n+    \n+    public PushCommand() {\n+        userDir = Paths.get(System.getProperty(\"user.dir\"));\n+        errStream = System.err;\n+    }\n+    \n+    public PushCommand(Path userDir, PrintStream errStream) {\n+        this.userDir = userDir;\n+        this.errStream = errStream;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(PUSH_COMMAND);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        // Get source root path.\n+        Path sourceRootPath = userDir;\n+\n+        // Push command only works inside a project\n+        if (!ProjectUtils.isBallerinaProject(sourceRootPath)) {\n+            Path findRoot = ProjectUtils.findProjectRoot(sourceRootPath);\n+            if (null == findRoot) {\n+                CommandUtil.printError(errStream,\n+                        \"Push command can be only run inside a Ballerina project\",\n+                        null,\n+                        false);\n+                return;\n+            }\n+            sourceRootPath = findRoot;\n+        }\n+\n+        // Enable remote debugging\n+        if (null != debugPort) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0NDI3Mw=="}, "originalCommit": {"oid": "9c87aea90550b9d2f849d846c5a36b3c307956dc"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTg5MzIyOnYy", "diffSide": "RIGHT", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODowNToyM1rOHpeAiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODowNToyM1rOHpeAiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0NTMyMA==", "bodyText": "The path has to be obtain from project API", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r513245320", "createdAt": "2020-10-28T08:05:23Z", "author": {"login": "hevayo"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/*\n+*  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.PackageDescriptor;\n+import io.ballerina.projects.balo.BaloProject;\n+import io.ballerina.projects.utils.ProjectConstants;\n+import io.ballerina.projects.utils.ProjectUtils;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.ballerina.cli.cmd.Constants.PUSH_COMMAND;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * This class represents the \"ballerina push\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PUSH_COMMAND, description = \"push modules and binaries available locally to \"\n+        + \"Ballerina Central\")\n+public class PushCommand implements BLauncherCmd {\n+    private static PrintStream outStream = System.err;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = {\"--help\", \"-h\"}, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true)\n+    private String debugPort;\n+\n+    @CommandLine.Option(names = \"--repository\", hidden = true)\n+    private String repositoryHome;\n+\n+    @CommandLine.Option(names = {\"--skip-source-check\"}, description = \"skip checking if source has changed\")\n+    private boolean skipSourceCheck;\n+\n+    @CommandLine.Option(names = \"--experimental\", description = \"enable experimental language features\")\n+    private boolean experimentalFlag;\n+\n+    private Path userDir;\n+    private PrintStream errStream;\n+    \n+    public PushCommand() {\n+        userDir = Paths.get(System.getProperty(\"user.dir\"));\n+        errStream = System.err;\n+    }\n+    \n+    public PushCommand(Path userDir, PrintStream errStream) {\n+        this.userDir = userDir;\n+        this.errStream = errStream;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(PUSH_COMMAND);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        // Get source root path.\n+        Path sourceRootPath = userDir;\n+\n+        // Push command only works inside a project\n+        if (!ProjectUtils.isBallerinaProject(sourceRootPath)) {\n+            Path findRoot = ProjectUtils.findProjectRoot(sourceRootPath);\n+            if (null == findRoot) {\n+                CommandUtil.printError(errStream,\n+                        \"Push command can be only run inside a Ballerina project\",\n+                        null,\n+                        false);\n+                return;\n+            }\n+            sourceRootPath = findRoot;\n+        }\n+\n+        // Enable remote debugging\n+        if (null != debugPort) {\n+            System.setProperty(SYSTEM_PROP_BAL_DEBUG, debugPort);\n+        }\n+\n+        if (argList == null || argList.isEmpty()) {\n+            String packageName = ProjectUtils.getPackageNameFromBallerinaToml(sourceRootPath);\n+            pushPackage(packageName, sourceRootPath);\n+        } else {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"too many arguments\");\n+        }\n+\n+        // Exit status, zero for OK, non-zero for error\n+        Runtime.getRuntime().exit(0);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return PUSH_COMMAND;\n+    }\n+\n+    @Override\n+    public void printLongDesc(StringBuilder out) {\n+        out.append(\"push modules to Ballerina Central\");\n+    }\n+\n+    @Override\n+    public void printUsage(StringBuilder out) {\n+        out.append(\"  ballerina push <module-name> \\n\");\n+    }\n+\n+    @Override\n+    public void setParentCmdParser(CommandLine parentCmdParser) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    private void pushPackage(String packageName, Path sourceRootPath) {\n+        try {\n+            BaloProject baloProject = validateBaloPathAndGetBaloProject(packageName, sourceRootPath);\n+\n+            Map<Path, List<PackageDescriptor.Dependency>> balosWithDependencies = new HashMap<>();\n+            balosWithDependencies.put(baloProject.sourceRoot(), baloProject.currentPackage().packageDescriptor().dependencies());\n+            recursivelyPushBalos(balosWithDependencies);\n+        } catch (IOException e) {\n+            throw createLauncherException(\n+                    \"unexpected error occurred when trying to push to remote repository: \" + getRemoteRepoURL());\n+        }\n+    }\n+\n+    private static BaloProject validateBaloPathAndGetBaloProject(String pkgName, Path sourceRootPath) throws IOException {\n+        // Get balo output path\n+        Path baloOutputDir = Paths.get(sourceRootPath.toString(), ProjectConstants.TARGET_DIR_NAME,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c87aea90550b9d2f849d846c5a36b3c307956dc"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTg5NjM3OnYy", "diffSide": "RIGHT", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODowNjoyMFrOHpeCcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDoxNTozN1rOHpi8Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0NTgwOA==", "bodyText": "I guess we dont need this now since package has all the modules", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r513245808", "createdAt": "2020-10-28T08:06:20Z", "author": {"login": "hevayo"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/*\n+*  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.PackageDescriptor;\n+import io.ballerina.projects.balo.BaloProject;\n+import io.ballerina.projects.utils.ProjectConstants;\n+import io.ballerina.projects.utils.ProjectUtils;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.ballerina.cli.cmd.Constants.PUSH_COMMAND;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * This class represents the \"ballerina push\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PUSH_COMMAND, description = \"push modules and binaries available locally to \"\n+        + \"Ballerina Central\")\n+public class PushCommand implements BLauncherCmd {\n+    private static PrintStream outStream = System.err;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = {\"--help\", \"-h\"}, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true)\n+    private String debugPort;\n+\n+    @CommandLine.Option(names = \"--repository\", hidden = true)\n+    private String repositoryHome;\n+\n+    @CommandLine.Option(names = {\"--skip-source-check\"}, description = \"skip checking if source has changed\")\n+    private boolean skipSourceCheck;\n+\n+    @CommandLine.Option(names = \"--experimental\", description = \"enable experimental language features\")\n+    private boolean experimentalFlag;\n+\n+    private Path userDir;\n+    private PrintStream errStream;\n+    \n+    public PushCommand() {\n+        userDir = Paths.get(System.getProperty(\"user.dir\"));\n+        errStream = System.err;\n+    }\n+    \n+    public PushCommand(Path userDir, PrintStream errStream) {\n+        this.userDir = userDir;\n+        this.errStream = errStream;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(PUSH_COMMAND);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        // Get source root path.\n+        Path sourceRootPath = userDir;\n+\n+        // Push command only works inside a project\n+        if (!ProjectUtils.isBallerinaProject(sourceRootPath)) {\n+            Path findRoot = ProjectUtils.findProjectRoot(sourceRootPath);\n+            if (null == findRoot) {\n+                CommandUtil.printError(errStream,\n+                        \"Push command can be only run inside a Ballerina project\",\n+                        null,\n+                        false);\n+                return;\n+            }\n+            sourceRootPath = findRoot;\n+        }\n+\n+        // Enable remote debugging\n+        if (null != debugPort) {\n+            System.setProperty(SYSTEM_PROP_BAL_DEBUG, debugPort);\n+        }\n+\n+        if (argList == null || argList.isEmpty()) {\n+            String packageName = ProjectUtils.getPackageNameFromBallerinaToml(sourceRootPath);\n+            pushPackage(packageName, sourceRootPath);\n+        } else {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"too many arguments\");\n+        }\n+\n+        // Exit status, zero for OK, non-zero for error\n+        Runtime.getRuntime().exit(0);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return PUSH_COMMAND;\n+    }\n+\n+    @Override\n+    public void printLongDesc(StringBuilder out) {\n+        out.append(\"push modules to Ballerina Central\");\n+    }\n+\n+    @Override\n+    public void printUsage(StringBuilder out) {\n+        out.append(\"  ballerina push <module-name> \\n\");\n+    }\n+\n+    @Override\n+    public void setParentCmdParser(CommandLine parentCmdParser) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    private void pushPackage(String packageName, Path sourceRootPath) {\n+        try {\n+            BaloProject baloProject = validateBaloPathAndGetBaloProject(packageName, sourceRootPath);\n+\n+            Map<Path, List<PackageDescriptor.Dependency>> balosWithDependencies = new HashMap<>();\n+            balosWithDependencies.put(baloProject.sourceRoot(), baloProject.currentPackage().packageDescriptor().dependencies());\n+            recursivelyPushBalos(balosWithDependencies);\n+        } catch (IOException e) {\n+            throw createLauncherException(\n+                    \"unexpected error occurred when trying to push to remote repository: \" + getRemoteRepoURL());\n+        }\n+    }\n+\n+    private static BaloProject validateBaloPathAndGetBaloProject(String pkgName, Path sourceRootPath) throws IOException {\n+        // Get balo output path\n+        Path baloOutputDir = Paths.get(sourceRootPath.toString(), ProjectConstants.TARGET_DIR_NAME,\n+                ProjectConstants.TARGET_BALO_DIR_NAME);\n+\n+        if (Files.notExists(baloOutputDir)) {\n+            throw createLauncherException(\"cannot find balo file for the package: \" + pkgName + \". Run \"\n+                    + \"'ballerina build' to compile and generate the balo.\");\n+        }\n+\n+        Optional<Path> packageBaloFile;\n+        try (Stream<Path> baloFilesStream = Files.list(baloOutputDir)) {\n+            packageBaloFile = baloFilesStream\n+                    .filter(baloFile -> null != baloFile.getFileName() && baloFile.getFileName().toString()\n+                            .startsWith(pkgName + \"-\" + IMPLEMENTATION_VERSION)).findFirst();\n+        }\n+\n+        if (!packageBaloFile.isPresent()) {\n+            throw createLauncherException(\"cannot find balo file for the package: \" + pkgName + \". Run \"\n+                    + \"'ballerina build' to compile and generate the balo.\");\n+        }\n+\n+        // get the manifest from balo file\n+        Path baloFilePath = packageBaloFile.get();\n+        final BaloProject baloProject = BaloProject.loadProject(baloFilePath, null);\n+        final String orgName = baloProject.currentPackage().packageOrg().toString();\n+\n+        // Validate the org-name\n+        if (!RepoUtils.validateOrg(orgName)) {\n+            throw createLauncherException(\n+                    \"invalid organization name provided \\'\" + orgName\n+                            + \"\\'. Only lowercase alphanumerics \"\n+                            + \"and underscores are allowed in an organization name and the maximum \"\n+                            + \"length is 256 characters\");\n+        }\n+\n+        // Validate the pkg-name\n+        if (!RepoUtils.validatePkg(pkgName)) {\n+            throw createLauncherException(\"invalid package name provided \\'\" + pkgName + \"\\'. Only \"\n+                    + \"alphanumerics, underscores and periods are allowed in a module name \"\n+                    + \"and the maximum length is 256 characters\");\n+        }\n+\n+        // todo: need to add after ballerina.toml changes\n+        // check if there are any dependencies with balo path\n+//        List<String> dependenciesWithBaloPath = baloProject.currentPackage().packageDescriptor().dependencies().stream()\n+//                .filter(dep -> dep.getMetadata().getPath() != null).map(Dependency::getModuleID)\n+//                .collect(Collectors.toList());\n+//\n+//        if (!dependenciesWithBaloPath.isEmpty()) {\n+//            throw createLauncherException(\"dependencies cannot be given by path when pushing module(s) to \"\n+//                    + \"remote. check dependencies in Ballerina.toml: [\" + String.join(\", \", dependenciesWithBaloPath)\n+//                    + \"]\");\n+//        }\n+\n+        // check if the package is already there in remote repository\n+        PackageDescriptor.Dependency pkgAsDependency = new PackageDescriptor.Dependency(\n+                baloProject.currentPackage().packageName(),\n+                baloProject.currentPackage().packageOrg(),\n+                baloProject.currentPackage().packageVersion());\n+\n+        if (isDependencyAvailableInRemote(pkgAsDependency)) {\n+            throw createLauncherException(\n+                    \"package '\" + pkgAsDependency.toString() + \"' already exists in \" + \"remote repository(\"\n+                            + getRemoteRepoURL() + \"). build and push after \"\n+                            + \"updating the version in the Ballerina.toml.\");\n+        }\n+\n+        return baloProject;\n+    }\n+\n+    /**\n+     * Push balos to remote repository in the order of there dependencies are resolved.\n+     *\n+     * @param balos The remaining balos to be pushed.\n+     * @throws IOException When trying to access remote repository\n+     */\n+    private static void recursivelyPushBalos(Map<Path, List<PackageDescriptor.Dependency>> balos) throws IOException {\n+        // if there are no more balos to push.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c87aea90550b9d2f849d846c5a36b3c307956dc"}, "originalPosition": 246}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMyNjE3MA==", "bodyText": "removed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r513326170", "createdAt": "2020-10-28T10:15:37Z", "author": {"login": "pramodya1994"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/*\n+*  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.PackageDescriptor;\n+import io.ballerina.projects.balo.BaloProject;\n+import io.ballerina.projects.utils.ProjectConstants;\n+import io.ballerina.projects.utils.ProjectUtils;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.ballerina.cli.cmd.Constants.PUSH_COMMAND;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * This class represents the \"ballerina push\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PUSH_COMMAND, description = \"push modules and binaries available locally to \"\n+        + \"Ballerina Central\")\n+public class PushCommand implements BLauncherCmd {\n+    private static PrintStream outStream = System.err;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = {\"--help\", \"-h\"}, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true)\n+    private String debugPort;\n+\n+    @CommandLine.Option(names = \"--repository\", hidden = true)\n+    private String repositoryHome;\n+\n+    @CommandLine.Option(names = {\"--skip-source-check\"}, description = \"skip checking if source has changed\")\n+    private boolean skipSourceCheck;\n+\n+    @CommandLine.Option(names = \"--experimental\", description = \"enable experimental language features\")\n+    private boolean experimentalFlag;\n+\n+    private Path userDir;\n+    private PrintStream errStream;\n+    \n+    public PushCommand() {\n+        userDir = Paths.get(System.getProperty(\"user.dir\"));\n+        errStream = System.err;\n+    }\n+    \n+    public PushCommand(Path userDir, PrintStream errStream) {\n+        this.userDir = userDir;\n+        this.errStream = errStream;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(PUSH_COMMAND);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        // Get source root path.\n+        Path sourceRootPath = userDir;\n+\n+        // Push command only works inside a project\n+        if (!ProjectUtils.isBallerinaProject(sourceRootPath)) {\n+            Path findRoot = ProjectUtils.findProjectRoot(sourceRootPath);\n+            if (null == findRoot) {\n+                CommandUtil.printError(errStream,\n+                        \"Push command can be only run inside a Ballerina project\",\n+                        null,\n+                        false);\n+                return;\n+            }\n+            sourceRootPath = findRoot;\n+        }\n+\n+        // Enable remote debugging\n+        if (null != debugPort) {\n+            System.setProperty(SYSTEM_PROP_BAL_DEBUG, debugPort);\n+        }\n+\n+        if (argList == null || argList.isEmpty()) {\n+            String packageName = ProjectUtils.getPackageNameFromBallerinaToml(sourceRootPath);\n+            pushPackage(packageName, sourceRootPath);\n+        } else {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"too many arguments\");\n+        }\n+\n+        // Exit status, zero for OK, non-zero for error\n+        Runtime.getRuntime().exit(0);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return PUSH_COMMAND;\n+    }\n+\n+    @Override\n+    public void printLongDesc(StringBuilder out) {\n+        out.append(\"push modules to Ballerina Central\");\n+    }\n+\n+    @Override\n+    public void printUsage(StringBuilder out) {\n+        out.append(\"  ballerina push <module-name> \\n\");\n+    }\n+\n+    @Override\n+    public void setParentCmdParser(CommandLine parentCmdParser) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    private void pushPackage(String packageName, Path sourceRootPath) {\n+        try {\n+            BaloProject baloProject = validateBaloPathAndGetBaloProject(packageName, sourceRootPath);\n+\n+            Map<Path, List<PackageDescriptor.Dependency>> balosWithDependencies = new HashMap<>();\n+            balosWithDependencies.put(baloProject.sourceRoot(), baloProject.currentPackage().packageDescriptor().dependencies());\n+            recursivelyPushBalos(balosWithDependencies);\n+        } catch (IOException e) {\n+            throw createLauncherException(\n+                    \"unexpected error occurred when trying to push to remote repository: \" + getRemoteRepoURL());\n+        }\n+    }\n+\n+    private static BaloProject validateBaloPathAndGetBaloProject(String pkgName, Path sourceRootPath) throws IOException {\n+        // Get balo output path\n+        Path baloOutputDir = Paths.get(sourceRootPath.toString(), ProjectConstants.TARGET_DIR_NAME,\n+                ProjectConstants.TARGET_BALO_DIR_NAME);\n+\n+        if (Files.notExists(baloOutputDir)) {\n+            throw createLauncherException(\"cannot find balo file for the package: \" + pkgName + \". Run \"\n+                    + \"'ballerina build' to compile and generate the balo.\");\n+        }\n+\n+        Optional<Path> packageBaloFile;\n+        try (Stream<Path> baloFilesStream = Files.list(baloOutputDir)) {\n+            packageBaloFile = baloFilesStream\n+                    .filter(baloFile -> null != baloFile.getFileName() && baloFile.getFileName().toString()\n+                            .startsWith(pkgName + \"-\" + IMPLEMENTATION_VERSION)).findFirst();\n+        }\n+\n+        if (!packageBaloFile.isPresent()) {\n+            throw createLauncherException(\"cannot find balo file for the package: \" + pkgName + \". Run \"\n+                    + \"'ballerina build' to compile and generate the balo.\");\n+        }\n+\n+        // get the manifest from balo file\n+        Path baloFilePath = packageBaloFile.get();\n+        final BaloProject baloProject = BaloProject.loadProject(baloFilePath, null);\n+        final String orgName = baloProject.currentPackage().packageOrg().toString();\n+\n+        // Validate the org-name\n+        if (!RepoUtils.validateOrg(orgName)) {\n+            throw createLauncherException(\n+                    \"invalid organization name provided \\'\" + orgName\n+                            + \"\\'. Only lowercase alphanumerics \"\n+                            + \"and underscores are allowed in an organization name and the maximum \"\n+                            + \"length is 256 characters\");\n+        }\n+\n+        // Validate the pkg-name\n+        if (!RepoUtils.validatePkg(pkgName)) {\n+            throw createLauncherException(\"invalid package name provided \\'\" + pkgName + \"\\'. Only \"\n+                    + \"alphanumerics, underscores and periods are allowed in a module name \"\n+                    + \"and the maximum length is 256 characters\");\n+        }\n+\n+        // todo: need to add after ballerina.toml changes\n+        // check if there are any dependencies with balo path\n+//        List<String> dependenciesWithBaloPath = baloProject.currentPackage().packageDescriptor().dependencies().stream()\n+//                .filter(dep -> dep.getMetadata().getPath() != null).map(Dependency::getModuleID)\n+//                .collect(Collectors.toList());\n+//\n+//        if (!dependenciesWithBaloPath.isEmpty()) {\n+//            throw createLauncherException(\"dependencies cannot be given by path when pushing module(s) to \"\n+//                    + \"remote. check dependencies in Ballerina.toml: [\" + String.join(\", \", dependenciesWithBaloPath)\n+//                    + \"]\");\n+//        }\n+\n+        // check if the package is already there in remote repository\n+        PackageDescriptor.Dependency pkgAsDependency = new PackageDescriptor.Dependency(\n+                baloProject.currentPackage().packageName(),\n+                baloProject.currentPackage().packageOrg(),\n+                baloProject.currentPackage().packageVersion());\n+\n+        if (isDependencyAvailableInRemote(pkgAsDependency)) {\n+            throw createLauncherException(\n+                    \"package '\" + pkgAsDependency.toString() + \"' already exists in \" + \"remote repository(\"\n+                            + getRemoteRepoURL() + \"). build and push after \"\n+                            + \"updating the version in the Ballerina.toml.\");\n+        }\n+\n+        return baloProject;\n+    }\n+\n+    /**\n+     * Push balos to remote repository in the order of there dependencies are resolved.\n+     *\n+     * @param balos The remaining balos to be pushed.\n+     * @throws IOException When trying to access remote repository\n+     */\n+    private static void recursivelyPushBalos(Map<Path, List<PackageDescriptor.Dependency>> balos) throws IOException {\n+        // if there are no more balos to push.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0NTgwOA=="}, "originalCommit": {"oid": "9c87aea90550b9d2f849d846c5a36b3c307956dc"}, "originalPosition": 246}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTkwMDAwOnYy", "diffSide": "RIGHT", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODowNzoyN1rOHpeEnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDoxNTozMFrOHpi8GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0NjM2NQ==", "bodyText": "Why do we need to pass the balo project? cant we create it inside the client", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r513246365", "createdAt": "2020-10-28T08:07:27Z", "author": {"login": "hevayo"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/*\n+*  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.PackageDescriptor;\n+import io.ballerina.projects.balo.BaloProject;\n+import io.ballerina.projects.utils.ProjectConstants;\n+import io.ballerina.projects.utils.ProjectUtils;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.ballerina.cli.cmd.Constants.PUSH_COMMAND;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * This class represents the \"ballerina push\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PUSH_COMMAND, description = \"push modules and binaries available locally to \"\n+        + \"Ballerina Central\")\n+public class PushCommand implements BLauncherCmd {\n+    private static PrintStream outStream = System.err;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = {\"--help\", \"-h\"}, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true)\n+    private String debugPort;\n+\n+    @CommandLine.Option(names = \"--repository\", hidden = true)\n+    private String repositoryHome;\n+\n+    @CommandLine.Option(names = {\"--skip-source-check\"}, description = \"skip checking if source has changed\")\n+    private boolean skipSourceCheck;\n+\n+    @CommandLine.Option(names = \"--experimental\", description = \"enable experimental language features\")\n+    private boolean experimentalFlag;\n+\n+    private Path userDir;\n+    private PrintStream errStream;\n+    \n+    public PushCommand() {\n+        userDir = Paths.get(System.getProperty(\"user.dir\"));\n+        errStream = System.err;\n+    }\n+    \n+    public PushCommand(Path userDir, PrintStream errStream) {\n+        this.userDir = userDir;\n+        this.errStream = errStream;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(PUSH_COMMAND);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        // Get source root path.\n+        Path sourceRootPath = userDir;\n+\n+        // Push command only works inside a project\n+        if (!ProjectUtils.isBallerinaProject(sourceRootPath)) {\n+            Path findRoot = ProjectUtils.findProjectRoot(sourceRootPath);\n+            if (null == findRoot) {\n+                CommandUtil.printError(errStream,\n+                        \"Push command can be only run inside a Ballerina project\",\n+                        null,\n+                        false);\n+                return;\n+            }\n+            sourceRootPath = findRoot;\n+        }\n+\n+        // Enable remote debugging\n+        if (null != debugPort) {\n+            System.setProperty(SYSTEM_PROP_BAL_DEBUG, debugPort);\n+        }\n+\n+        if (argList == null || argList.isEmpty()) {\n+            String packageName = ProjectUtils.getPackageNameFromBallerinaToml(sourceRootPath);\n+            pushPackage(packageName, sourceRootPath);\n+        } else {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"too many arguments\");\n+        }\n+\n+        // Exit status, zero for OK, non-zero for error\n+        Runtime.getRuntime().exit(0);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return PUSH_COMMAND;\n+    }\n+\n+    @Override\n+    public void printLongDesc(StringBuilder out) {\n+        out.append(\"push modules to Ballerina Central\");\n+    }\n+\n+    @Override\n+    public void printUsage(StringBuilder out) {\n+        out.append(\"  ballerina push <module-name> \\n\");\n+    }\n+\n+    @Override\n+    public void setParentCmdParser(CommandLine parentCmdParser) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    private void pushPackage(String packageName, Path sourceRootPath) {\n+        try {\n+            BaloProject baloProject = validateBaloPathAndGetBaloProject(packageName, sourceRootPath);\n+\n+            Map<Path, List<PackageDescriptor.Dependency>> balosWithDependencies = new HashMap<>();\n+            balosWithDependencies.put(baloProject.sourceRoot(), baloProject.currentPackage().packageDescriptor().dependencies());\n+            recursivelyPushBalos(balosWithDependencies);\n+        } catch (IOException e) {\n+            throw createLauncherException(\n+                    \"unexpected error occurred when trying to push to remote repository: \" + getRemoteRepoURL());\n+        }\n+    }\n+\n+    private static BaloProject validateBaloPathAndGetBaloProject(String pkgName, Path sourceRootPath) throws IOException {\n+        // Get balo output path\n+        Path baloOutputDir = Paths.get(sourceRootPath.toString(), ProjectConstants.TARGET_DIR_NAME,\n+                ProjectConstants.TARGET_BALO_DIR_NAME);\n+\n+        if (Files.notExists(baloOutputDir)) {\n+            throw createLauncherException(\"cannot find balo file for the package: \" + pkgName + \". Run \"\n+                    + \"'ballerina build' to compile and generate the balo.\");\n+        }\n+\n+        Optional<Path> packageBaloFile;\n+        try (Stream<Path> baloFilesStream = Files.list(baloOutputDir)) {\n+            packageBaloFile = baloFilesStream\n+                    .filter(baloFile -> null != baloFile.getFileName() && baloFile.getFileName().toString()\n+                            .startsWith(pkgName + \"-\" + IMPLEMENTATION_VERSION)).findFirst();\n+        }\n+\n+        if (!packageBaloFile.isPresent()) {\n+            throw createLauncherException(\"cannot find balo file for the package: \" + pkgName + \". Run \"\n+                    + \"'ballerina build' to compile and generate the balo.\");\n+        }\n+\n+        // get the manifest from balo file\n+        Path baloFilePath = packageBaloFile.get();\n+        final BaloProject baloProject = BaloProject.loadProject(baloFilePath, null);\n+        final String orgName = baloProject.currentPackage().packageOrg().toString();\n+\n+        // Validate the org-name\n+        if (!RepoUtils.validateOrg(orgName)) {\n+            throw createLauncherException(\n+                    \"invalid organization name provided \\'\" + orgName\n+                            + \"\\'. Only lowercase alphanumerics \"\n+                            + \"and underscores are allowed in an organization name and the maximum \"\n+                            + \"length is 256 characters\");\n+        }\n+\n+        // Validate the pkg-name\n+        if (!RepoUtils.validatePkg(pkgName)) {\n+            throw createLauncherException(\"invalid package name provided \\'\" + pkgName + \"\\'. Only \"\n+                    + \"alphanumerics, underscores and periods are allowed in a module name \"\n+                    + \"and the maximum length is 256 characters\");\n+        }\n+\n+        // todo: need to add after ballerina.toml changes\n+        // check if there are any dependencies with balo path\n+//        List<String> dependenciesWithBaloPath = baloProject.currentPackage().packageDescriptor().dependencies().stream()\n+//                .filter(dep -> dep.getMetadata().getPath() != null).map(Dependency::getModuleID)\n+//                .collect(Collectors.toList());\n+//\n+//        if (!dependenciesWithBaloPath.isEmpty()) {\n+//            throw createLauncherException(\"dependencies cannot be given by path when pushing module(s) to \"\n+//                    + \"remote. check dependencies in Ballerina.toml: [\" + String.join(\", \", dependenciesWithBaloPath)\n+//                    + \"]\");\n+//        }\n+\n+        // check if the package is already there in remote repository\n+        PackageDescriptor.Dependency pkgAsDependency = new PackageDescriptor.Dependency(\n+                baloProject.currentPackage().packageName(),\n+                baloProject.currentPackage().packageOrg(),\n+                baloProject.currentPackage().packageVersion());\n+\n+        if (isDependencyAvailableInRemote(pkgAsDependency)) {\n+            throw createLauncherException(\n+                    \"package '\" + pkgAsDependency.toString() + \"' already exists in \" + \"remote repository(\"\n+                            + getRemoteRepoURL() + \"). build and push after \"\n+                            + \"updating the version in the Ballerina.toml.\");\n+        }\n+\n+        return baloProject;\n+    }\n+\n+    /**\n+     * Push balos to remote repository in the order of there dependencies are resolved.\n+     *\n+     * @param balos The remaining balos to be pushed.\n+     * @throws IOException When trying to access remote repository\n+     */\n+    private static void recursivelyPushBalos(Map<Path, List<PackageDescriptor.Dependency>> balos) throws IOException {\n+        // if there are no more balos to push.\n+        if (balos.size() == 0) {\n+            return;\n+        }\n+\n+        // go through the dependencies of balos and see if they are available in remote repository. if they are\n+        // available remove them from the list.\n+        for (List<PackageDescriptor.Dependency> deps : balos.values()) {\n+            Iterator<PackageDescriptor.Dependency> depsIterator = deps.iterator();\n+            while (depsIterator.hasNext()) {\n+                PackageDescriptor.Dependency dep = depsIterator.next();\n+                if (isDependencyAvailableInRemote(dep)) {\n+                    depsIterator.remove();\n+                }\n+\n+                if (\"ballerina\".equals(dep.org().toString()) || \"ballerinax\".equals(dep.org().toString())) {\n+                    depsIterator.remove();\n+                }\n+            }\n+        }\n+\n+        // check if there are balos where their dependencies are already available in remote repository\n+        Optional<List<PackageDescriptor.Dependency>> baloWithAllDependenciesAvailableInCentral = balos.values().stream()\n+                .filter(List::isEmpty)\n+                .findAny();\n+\n+        // if there isn't any balos where dependencies are resolved, then throw an error.\n+        if (!baloWithAllDependenciesAvailableInCentral.isPresent()) {\n+            Set<String> unresolvedDependencies = balos.values().stream()\n+                    .flatMap(List::stream)\n+                    .map(PackageDescriptor.Dependency::toString)\n+                    .collect(Collectors.toSet());\n+            throw createLauncherException(\"unable to find dependencies in remote repository: [\" +\n+                    String.join(\", \", unresolvedDependencies) + \"]\");\n+        }\n+\n+        // push all the modules where dependencies are available in remote repository and remove them from the map.\n+        Iterator<Map.Entry<Path, List<PackageDescriptor.Dependency>>> iterator = balos.entrySet().iterator();\n+        while (iterator.hasNext()) {\n+            Map.Entry<Path, List<PackageDescriptor.Dependency>> baloDeps = iterator.next();\n+            if (baloDeps.getValue().isEmpty()) {\n+                pushBaloToRemote(baloDeps.getKey());\n+                iterator.remove();\n+            }\n+        }\n+        recursivelyPushBalos(balos);\n+    }\n+\n+    /**\n+     * Push a balo file to remote repository.\n+     *\n+     * @param baloPath Path to the balo file.\n+     */\n+    private static void pushBaloToRemote(Path baloPath) {\n+        Path baloFileName = baloPath.getFileName();\n+        if (null != baloFileName) {\n+            // Load BaloProject from balo path\n+            BaloProject baloProject = BaloProject.loadProject(baloPath, null);\n+            String name = baloProject.currentPackage().packageName().toString();\n+\n+            try {\n+                CentralAPIClient client = new CentralAPIClient();\n+                client.pushPackage(baloPath, baloProject);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c87aea90550b9d2f849d846c5a36b3c307956dc"}, "originalPosition": 308}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMyNjEwNQ==", "bodyText": "created inside client", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r513326105", "createdAt": "2020-10-28T10:15:30Z", "author": {"login": "pramodya1994"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/*\n+*  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.PackageDescriptor;\n+import io.ballerina.projects.balo.BaloProject;\n+import io.ballerina.projects.utils.ProjectConstants;\n+import io.ballerina.projects.utils.ProjectUtils;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.ballerina.cli.cmd.Constants.PUSH_COMMAND;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * This class represents the \"ballerina push\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PUSH_COMMAND, description = \"push modules and binaries available locally to \"\n+        + \"Ballerina Central\")\n+public class PushCommand implements BLauncherCmd {\n+    private static PrintStream outStream = System.err;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = {\"--help\", \"-h\"}, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true)\n+    private String debugPort;\n+\n+    @CommandLine.Option(names = \"--repository\", hidden = true)\n+    private String repositoryHome;\n+\n+    @CommandLine.Option(names = {\"--skip-source-check\"}, description = \"skip checking if source has changed\")\n+    private boolean skipSourceCheck;\n+\n+    @CommandLine.Option(names = \"--experimental\", description = \"enable experimental language features\")\n+    private boolean experimentalFlag;\n+\n+    private Path userDir;\n+    private PrintStream errStream;\n+    \n+    public PushCommand() {\n+        userDir = Paths.get(System.getProperty(\"user.dir\"));\n+        errStream = System.err;\n+    }\n+    \n+    public PushCommand(Path userDir, PrintStream errStream) {\n+        this.userDir = userDir;\n+        this.errStream = errStream;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(PUSH_COMMAND);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        // Get source root path.\n+        Path sourceRootPath = userDir;\n+\n+        // Push command only works inside a project\n+        if (!ProjectUtils.isBallerinaProject(sourceRootPath)) {\n+            Path findRoot = ProjectUtils.findProjectRoot(sourceRootPath);\n+            if (null == findRoot) {\n+                CommandUtil.printError(errStream,\n+                        \"Push command can be only run inside a Ballerina project\",\n+                        null,\n+                        false);\n+                return;\n+            }\n+            sourceRootPath = findRoot;\n+        }\n+\n+        // Enable remote debugging\n+        if (null != debugPort) {\n+            System.setProperty(SYSTEM_PROP_BAL_DEBUG, debugPort);\n+        }\n+\n+        if (argList == null || argList.isEmpty()) {\n+            String packageName = ProjectUtils.getPackageNameFromBallerinaToml(sourceRootPath);\n+            pushPackage(packageName, sourceRootPath);\n+        } else {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"too many arguments\");\n+        }\n+\n+        // Exit status, zero for OK, non-zero for error\n+        Runtime.getRuntime().exit(0);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return PUSH_COMMAND;\n+    }\n+\n+    @Override\n+    public void printLongDesc(StringBuilder out) {\n+        out.append(\"push modules to Ballerina Central\");\n+    }\n+\n+    @Override\n+    public void printUsage(StringBuilder out) {\n+        out.append(\"  ballerina push <module-name> \\n\");\n+    }\n+\n+    @Override\n+    public void setParentCmdParser(CommandLine parentCmdParser) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    private void pushPackage(String packageName, Path sourceRootPath) {\n+        try {\n+            BaloProject baloProject = validateBaloPathAndGetBaloProject(packageName, sourceRootPath);\n+\n+            Map<Path, List<PackageDescriptor.Dependency>> balosWithDependencies = new HashMap<>();\n+            balosWithDependencies.put(baloProject.sourceRoot(), baloProject.currentPackage().packageDescriptor().dependencies());\n+            recursivelyPushBalos(balosWithDependencies);\n+        } catch (IOException e) {\n+            throw createLauncherException(\n+                    \"unexpected error occurred when trying to push to remote repository: \" + getRemoteRepoURL());\n+        }\n+    }\n+\n+    private static BaloProject validateBaloPathAndGetBaloProject(String pkgName, Path sourceRootPath) throws IOException {\n+        // Get balo output path\n+        Path baloOutputDir = Paths.get(sourceRootPath.toString(), ProjectConstants.TARGET_DIR_NAME,\n+                ProjectConstants.TARGET_BALO_DIR_NAME);\n+\n+        if (Files.notExists(baloOutputDir)) {\n+            throw createLauncherException(\"cannot find balo file for the package: \" + pkgName + \". Run \"\n+                    + \"'ballerina build' to compile and generate the balo.\");\n+        }\n+\n+        Optional<Path> packageBaloFile;\n+        try (Stream<Path> baloFilesStream = Files.list(baloOutputDir)) {\n+            packageBaloFile = baloFilesStream\n+                    .filter(baloFile -> null != baloFile.getFileName() && baloFile.getFileName().toString()\n+                            .startsWith(pkgName + \"-\" + IMPLEMENTATION_VERSION)).findFirst();\n+        }\n+\n+        if (!packageBaloFile.isPresent()) {\n+            throw createLauncherException(\"cannot find balo file for the package: \" + pkgName + \". Run \"\n+                    + \"'ballerina build' to compile and generate the balo.\");\n+        }\n+\n+        // get the manifest from balo file\n+        Path baloFilePath = packageBaloFile.get();\n+        final BaloProject baloProject = BaloProject.loadProject(baloFilePath, null);\n+        final String orgName = baloProject.currentPackage().packageOrg().toString();\n+\n+        // Validate the org-name\n+        if (!RepoUtils.validateOrg(orgName)) {\n+            throw createLauncherException(\n+                    \"invalid organization name provided \\'\" + orgName\n+                            + \"\\'. Only lowercase alphanumerics \"\n+                            + \"and underscores are allowed in an organization name and the maximum \"\n+                            + \"length is 256 characters\");\n+        }\n+\n+        // Validate the pkg-name\n+        if (!RepoUtils.validatePkg(pkgName)) {\n+            throw createLauncherException(\"invalid package name provided \\'\" + pkgName + \"\\'. Only \"\n+                    + \"alphanumerics, underscores and periods are allowed in a module name \"\n+                    + \"and the maximum length is 256 characters\");\n+        }\n+\n+        // todo: need to add after ballerina.toml changes\n+        // check if there are any dependencies with balo path\n+//        List<String> dependenciesWithBaloPath = baloProject.currentPackage().packageDescriptor().dependencies().stream()\n+//                .filter(dep -> dep.getMetadata().getPath() != null).map(Dependency::getModuleID)\n+//                .collect(Collectors.toList());\n+//\n+//        if (!dependenciesWithBaloPath.isEmpty()) {\n+//            throw createLauncherException(\"dependencies cannot be given by path when pushing module(s) to \"\n+//                    + \"remote. check dependencies in Ballerina.toml: [\" + String.join(\", \", dependenciesWithBaloPath)\n+//                    + \"]\");\n+//        }\n+\n+        // check if the package is already there in remote repository\n+        PackageDescriptor.Dependency pkgAsDependency = new PackageDescriptor.Dependency(\n+                baloProject.currentPackage().packageName(),\n+                baloProject.currentPackage().packageOrg(),\n+                baloProject.currentPackage().packageVersion());\n+\n+        if (isDependencyAvailableInRemote(pkgAsDependency)) {\n+            throw createLauncherException(\n+                    \"package '\" + pkgAsDependency.toString() + \"' already exists in \" + \"remote repository(\"\n+                            + getRemoteRepoURL() + \"). build and push after \"\n+                            + \"updating the version in the Ballerina.toml.\");\n+        }\n+\n+        return baloProject;\n+    }\n+\n+    /**\n+     * Push balos to remote repository in the order of there dependencies are resolved.\n+     *\n+     * @param balos The remaining balos to be pushed.\n+     * @throws IOException When trying to access remote repository\n+     */\n+    private static void recursivelyPushBalos(Map<Path, List<PackageDescriptor.Dependency>> balos) throws IOException {\n+        // if there are no more balos to push.\n+        if (balos.size() == 0) {\n+            return;\n+        }\n+\n+        // go through the dependencies of balos and see if they are available in remote repository. if they are\n+        // available remove them from the list.\n+        for (List<PackageDescriptor.Dependency> deps : balos.values()) {\n+            Iterator<PackageDescriptor.Dependency> depsIterator = deps.iterator();\n+            while (depsIterator.hasNext()) {\n+                PackageDescriptor.Dependency dep = depsIterator.next();\n+                if (isDependencyAvailableInRemote(dep)) {\n+                    depsIterator.remove();\n+                }\n+\n+                if (\"ballerina\".equals(dep.org().toString()) || \"ballerinax\".equals(dep.org().toString())) {\n+                    depsIterator.remove();\n+                }\n+            }\n+        }\n+\n+        // check if there are balos where their dependencies are already available in remote repository\n+        Optional<List<PackageDescriptor.Dependency>> baloWithAllDependenciesAvailableInCentral = balos.values().stream()\n+                .filter(List::isEmpty)\n+                .findAny();\n+\n+        // if there isn't any balos where dependencies are resolved, then throw an error.\n+        if (!baloWithAllDependenciesAvailableInCentral.isPresent()) {\n+            Set<String> unresolvedDependencies = balos.values().stream()\n+                    .flatMap(List::stream)\n+                    .map(PackageDescriptor.Dependency::toString)\n+                    .collect(Collectors.toSet());\n+            throw createLauncherException(\"unable to find dependencies in remote repository: [\" +\n+                    String.join(\", \", unresolvedDependencies) + \"]\");\n+        }\n+\n+        // push all the modules where dependencies are available in remote repository and remove them from the map.\n+        Iterator<Map.Entry<Path, List<PackageDescriptor.Dependency>>> iterator = balos.entrySet().iterator();\n+        while (iterator.hasNext()) {\n+            Map.Entry<Path, List<PackageDescriptor.Dependency>> baloDeps = iterator.next();\n+            if (baloDeps.getValue().isEmpty()) {\n+                pushBaloToRemote(baloDeps.getKey());\n+                iterator.remove();\n+            }\n+        }\n+        recursivelyPushBalos(balos);\n+    }\n+\n+    /**\n+     * Push a balo file to remote repository.\n+     *\n+     * @param baloPath Path to the balo file.\n+     */\n+    private static void pushBaloToRemote(Path baloPath) {\n+        Path baloFileName = baloPath.getFileName();\n+        if (null != baloFileName) {\n+            // Load BaloProject from balo path\n+            BaloProject baloProject = BaloProject.loadProject(baloPath, null);\n+            String name = baloProject.currentPackage().packageName().toString();\n+\n+            try {\n+                CentralAPIClient client = new CentralAPIClient();\n+                client.pushPackage(baloPath, baloProject);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0NjM2NQ=="}, "originalCommit": {"oid": "9c87aea90550b9d2f849d846c5a36b3c307956dc"}, "originalPosition": 308}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTkwNDc0OnYy", "diffSide": "RIGHT", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODowODo1NVrOHpeHaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDowNTo0OFrOHpijYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0NzA4Mw==", "bodyText": "The dependencies has to be resolved from project API since some dependencies might not be in descriptor in some cases.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r513247083", "createdAt": "2020-10-28T08:08:55Z", "author": {"login": "hevayo"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/*\n+*  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.PackageDescriptor;\n+import io.ballerina.projects.balo.BaloProject;\n+import io.ballerina.projects.utils.ProjectConstants;\n+import io.ballerina.projects.utils.ProjectUtils;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.ballerina.cli.cmd.Constants.PUSH_COMMAND;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * This class represents the \"ballerina push\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PUSH_COMMAND, description = \"push modules and binaries available locally to \"\n+        + \"Ballerina Central\")\n+public class PushCommand implements BLauncherCmd {\n+    private static PrintStream outStream = System.err;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = {\"--help\", \"-h\"}, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true)\n+    private String debugPort;\n+\n+    @CommandLine.Option(names = \"--repository\", hidden = true)\n+    private String repositoryHome;\n+\n+    @CommandLine.Option(names = {\"--skip-source-check\"}, description = \"skip checking if source has changed\")\n+    private boolean skipSourceCheck;\n+\n+    @CommandLine.Option(names = \"--experimental\", description = \"enable experimental language features\")\n+    private boolean experimentalFlag;\n+\n+    private Path userDir;\n+    private PrintStream errStream;\n+    \n+    public PushCommand() {\n+        userDir = Paths.get(System.getProperty(\"user.dir\"));\n+        errStream = System.err;\n+    }\n+    \n+    public PushCommand(Path userDir, PrintStream errStream) {\n+        this.userDir = userDir;\n+        this.errStream = errStream;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(PUSH_COMMAND);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        // Get source root path.\n+        Path sourceRootPath = userDir;\n+\n+        // Push command only works inside a project\n+        if (!ProjectUtils.isBallerinaProject(sourceRootPath)) {\n+            Path findRoot = ProjectUtils.findProjectRoot(sourceRootPath);\n+            if (null == findRoot) {\n+                CommandUtil.printError(errStream,\n+                        \"Push command can be only run inside a Ballerina project\",\n+                        null,\n+                        false);\n+                return;\n+            }\n+            sourceRootPath = findRoot;\n+        }\n+\n+        // Enable remote debugging\n+        if (null != debugPort) {\n+            System.setProperty(SYSTEM_PROP_BAL_DEBUG, debugPort);\n+        }\n+\n+        if (argList == null || argList.isEmpty()) {\n+            String packageName = ProjectUtils.getPackageNameFromBallerinaToml(sourceRootPath);\n+            pushPackage(packageName, sourceRootPath);\n+        } else {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"too many arguments\");\n+        }\n+\n+        // Exit status, zero for OK, non-zero for error\n+        Runtime.getRuntime().exit(0);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return PUSH_COMMAND;\n+    }\n+\n+    @Override\n+    public void printLongDesc(StringBuilder out) {\n+        out.append(\"push modules to Ballerina Central\");\n+    }\n+\n+    @Override\n+    public void printUsage(StringBuilder out) {\n+        out.append(\"  ballerina push <module-name> \\n\");\n+    }\n+\n+    @Override\n+    public void setParentCmdParser(CommandLine parentCmdParser) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    private void pushPackage(String packageName, Path sourceRootPath) {\n+        try {\n+            BaloProject baloProject = validateBaloPathAndGetBaloProject(packageName, sourceRootPath);\n+\n+            Map<Path, List<PackageDescriptor.Dependency>> balosWithDependencies = new HashMap<>();\n+            balosWithDependencies.put(baloProject.sourceRoot(), baloProject.currentPackage().packageDescriptor().dependencies());\n+            recursivelyPushBalos(balosWithDependencies);\n+        } catch (IOException e) {\n+            throw createLauncherException(\n+                    \"unexpected error occurred when trying to push to remote repository: \" + getRemoteRepoURL());\n+        }\n+    }\n+\n+    private static BaloProject validateBaloPathAndGetBaloProject(String pkgName, Path sourceRootPath) throws IOException {\n+        // Get balo output path\n+        Path baloOutputDir = Paths.get(sourceRootPath.toString(), ProjectConstants.TARGET_DIR_NAME,\n+                ProjectConstants.TARGET_BALO_DIR_NAME);\n+\n+        if (Files.notExists(baloOutputDir)) {\n+            throw createLauncherException(\"cannot find balo file for the package: \" + pkgName + \". Run \"\n+                    + \"'ballerina build' to compile and generate the balo.\");\n+        }\n+\n+        Optional<Path> packageBaloFile;\n+        try (Stream<Path> baloFilesStream = Files.list(baloOutputDir)) {\n+            packageBaloFile = baloFilesStream\n+                    .filter(baloFile -> null != baloFile.getFileName() && baloFile.getFileName().toString()\n+                            .startsWith(pkgName + \"-\" + IMPLEMENTATION_VERSION)).findFirst();\n+        }\n+\n+        if (!packageBaloFile.isPresent()) {\n+            throw createLauncherException(\"cannot find balo file for the package: \" + pkgName + \". Run \"\n+                    + \"'ballerina build' to compile and generate the balo.\");\n+        }\n+\n+        // get the manifest from balo file\n+        Path baloFilePath = packageBaloFile.get();\n+        final BaloProject baloProject = BaloProject.loadProject(baloFilePath, null);\n+        final String orgName = baloProject.currentPackage().packageOrg().toString();\n+\n+        // Validate the org-name\n+        if (!RepoUtils.validateOrg(orgName)) {\n+            throw createLauncherException(\n+                    \"invalid organization name provided \\'\" + orgName\n+                            + \"\\'. Only lowercase alphanumerics \"\n+                            + \"and underscores are allowed in an organization name and the maximum \"\n+                            + \"length is 256 characters\");\n+        }\n+\n+        // Validate the pkg-name\n+        if (!RepoUtils.validatePkg(pkgName)) {\n+            throw createLauncherException(\"invalid package name provided \\'\" + pkgName + \"\\'. Only \"\n+                    + \"alphanumerics, underscores and periods are allowed in a module name \"\n+                    + \"and the maximum length is 256 characters\");\n+        }\n+\n+        // todo: need to add after ballerina.toml changes\n+        // check if there are any dependencies with balo path\n+//        List<String> dependenciesWithBaloPath = baloProject.currentPackage().packageDescriptor().dependencies().stream()\n+//                .filter(dep -> dep.getMetadata().getPath() != null).map(Dependency::getModuleID)\n+//                .collect(Collectors.toList());\n+//\n+//        if (!dependenciesWithBaloPath.isEmpty()) {\n+//            throw createLauncherException(\"dependencies cannot be given by path when pushing module(s) to \"\n+//                    + \"remote. check dependencies in Ballerina.toml: [\" + String.join(\", \", dependenciesWithBaloPath)\n+//                    + \"]\");\n+//        }\n+\n+        // check if the package is already there in remote repository\n+        PackageDescriptor.Dependency pkgAsDependency = new PackageDescriptor.Dependency(\n+                baloProject.currentPackage().packageName(),\n+                baloProject.currentPackage().packageOrg(),\n+                baloProject.currentPackage().packageVersion());\n+\n+        if (isDependencyAvailableInRemote(pkgAsDependency)) {\n+            throw createLauncherException(\n+                    \"package '\" + pkgAsDependency.toString() + \"' already exists in \" + \"remote repository(\"\n+                            + getRemoteRepoURL() + \"). build and push after \"\n+                            + \"updating the version in the Ballerina.toml.\");\n+        }\n+\n+        return baloProject;\n+    }\n+\n+    /**\n+     * Push balos to remote repository in the order of there dependencies are resolved.\n+     *\n+     * @param balos The remaining balos to be pushed.\n+     * @throws IOException When trying to access remote repository\n+     */\n+    private static void recursivelyPushBalos(Map<Path, List<PackageDescriptor.Dependency>> balos) throws IOException {\n+        // if there are no more balos to push.\n+        if (balos.size() == 0) {\n+            return;\n+        }\n+\n+        // go through the dependencies of balos and see if they are available in remote repository. if they are\n+        // available remove them from the list.\n+        for (List<PackageDescriptor.Dependency> deps : balos.values()) {\n+            Iterator<PackageDescriptor.Dependency> depsIterator = deps.iterator();\n+            while (depsIterator.hasNext()) {\n+                PackageDescriptor.Dependency dep = depsIterator.next();\n+                if (isDependencyAvailableInRemote(dep)) {\n+                    depsIterator.remove();\n+                }\n+\n+                if (\"ballerina\".equals(dep.org().toString()) || \"ballerinax\".equals(dep.org().toString())) {\n+                    depsIterator.remove();\n+                }\n+            }\n+        }\n+\n+        // check if there are balos where their dependencies are already available in remote repository\n+        Optional<List<PackageDescriptor.Dependency>> baloWithAllDependenciesAvailableInCentral = balos.values().stream()\n+                .filter(List::isEmpty)\n+                .findAny();\n+\n+        // if there isn't any balos where dependencies are resolved, then throw an error.\n+        if (!baloWithAllDependenciesAvailableInCentral.isPresent()) {\n+            Set<String> unresolvedDependencies = balos.values().stream()\n+                    .flatMap(List::stream)\n+                    .map(PackageDescriptor.Dependency::toString)\n+                    .collect(Collectors.toSet());\n+            throw createLauncherException(\"unable to find dependencies in remote repository: [\" +\n+                    String.join(\", \", unresolvedDependencies) + \"]\");\n+        }\n+\n+        // push all the modules where dependencies are available in remote repository and remove them from the map.\n+        Iterator<Map.Entry<Path, List<PackageDescriptor.Dependency>>> iterator = balos.entrySet().iterator();\n+        while (iterator.hasNext()) {\n+            Map.Entry<Path, List<PackageDescriptor.Dependency>> baloDeps = iterator.next();\n+            if (baloDeps.getValue().isEmpty()) {\n+                pushBaloToRemote(baloDeps.getKey());\n+                iterator.remove();\n+            }\n+        }\n+        recursivelyPushBalos(balos);\n+    }\n+\n+    /**\n+     * Push a balo file to remote repository.\n+     *\n+     * @param baloPath Path to the balo file.\n+     */\n+    private static void pushBaloToRemote(Path baloPath) {\n+        Path baloFileName = baloPath.getFileName();\n+        if (null != baloFileName) {\n+            // Load BaloProject from balo path\n+            BaloProject baloProject = BaloProject.loadProject(baloPath, null);\n+            String name = baloProject.currentPackage().packageName().toString();\n+\n+            try {\n+                CentralAPIClient client = new CentralAPIClient();\n+                client.pushPackage(baloPath, baloProject);\n+            } catch (CommandException e) {\n+                String errorMessage = e.getMessage();\n+                if (null != errorMessage && !\"\".equals(errorMessage.trim())) {\n+                    // removing the error stack\n+                    if (errorMessage.contains(\"\\n\\tat\")) {\n+                        errorMessage = errorMessage.substring(0, errorMessage.indexOf(\"\\n\\tat\"));\n+                    }\n+\n+                    errorMessage = errorMessage.replaceAll(\"error: \", \"\");\n+\n+                    throw createLauncherException(\n+                            \"unexpected error occurred while pushing package '\" + name + \"' to remote repository(\"\n+                                    + getRemoteRepoURL() + \"): \" + errorMessage);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static boolean isDependencyAvailableInRemote(PackageDescriptor.Dependency dep) {\n+        List<String> supportedPlatforms = Arrays.stream(SUPPORTED_PLATFORMS).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c87aea90550b9d2f849d846c5a36b3c307956dc"}, "originalPosition": 328}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMxOTc3OQ==", "bodyText": "This checks whether the package already available in the central, renamed method to isPackageAvailableInRemote", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r513319779", "createdAt": "2020-10-28T10:05:48Z", "author": {"login": "pramodya1994"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/*\n+*  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.PackageDescriptor;\n+import io.ballerina.projects.balo.BaloProject;\n+import io.ballerina.projects.utils.ProjectConstants;\n+import io.ballerina.projects.utils.ProjectUtils;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.ballerina.cli.cmd.Constants.PUSH_COMMAND;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * This class represents the \"ballerina push\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PUSH_COMMAND, description = \"push modules and binaries available locally to \"\n+        + \"Ballerina Central\")\n+public class PushCommand implements BLauncherCmd {\n+    private static PrintStream outStream = System.err;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = {\"--help\", \"-h\"}, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true)\n+    private String debugPort;\n+\n+    @CommandLine.Option(names = \"--repository\", hidden = true)\n+    private String repositoryHome;\n+\n+    @CommandLine.Option(names = {\"--skip-source-check\"}, description = \"skip checking if source has changed\")\n+    private boolean skipSourceCheck;\n+\n+    @CommandLine.Option(names = \"--experimental\", description = \"enable experimental language features\")\n+    private boolean experimentalFlag;\n+\n+    private Path userDir;\n+    private PrintStream errStream;\n+    \n+    public PushCommand() {\n+        userDir = Paths.get(System.getProperty(\"user.dir\"));\n+        errStream = System.err;\n+    }\n+    \n+    public PushCommand(Path userDir, PrintStream errStream) {\n+        this.userDir = userDir;\n+        this.errStream = errStream;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(PUSH_COMMAND);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        // Get source root path.\n+        Path sourceRootPath = userDir;\n+\n+        // Push command only works inside a project\n+        if (!ProjectUtils.isBallerinaProject(sourceRootPath)) {\n+            Path findRoot = ProjectUtils.findProjectRoot(sourceRootPath);\n+            if (null == findRoot) {\n+                CommandUtil.printError(errStream,\n+                        \"Push command can be only run inside a Ballerina project\",\n+                        null,\n+                        false);\n+                return;\n+            }\n+            sourceRootPath = findRoot;\n+        }\n+\n+        // Enable remote debugging\n+        if (null != debugPort) {\n+            System.setProperty(SYSTEM_PROP_BAL_DEBUG, debugPort);\n+        }\n+\n+        if (argList == null || argList.isEmpty()) {\n+            String packageName = ProjectUtils.getPackageNameFromBallerinaToml(sourceRootPath);\n+            pushPackage(packageName, sourceRootPath);\n+        } else {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"too many arguments\");\n+        }\n+\n+        // Exit status, zero for OK, non-zero for error\n+        Runtime.getRuntime().exit(0);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return PUSH_COMMAND;\n+    }\n+\n+    @Override\n+    public void printLongDesc(StringBuilder out) {\n+        out.append(\"push modules to Ballerina Central\");\n+    }\n+\n+    @Override\n+    public void printUsage(StringBuilder out) {\n+        out.append(\"  ballerina push <module-name> \\n\");\n+    }\n+\n+    @Override\n+    public void setParentCmdParser(CommandLine parentCmdParser) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    private void pushPackage(String packageName, Path sourceRootPath) {\n+        try {\n+            BaloProject baloProject = validateBaloPathAndGetBaloProject(packageName, sourceRootPath);\n+\n+            Map<Path, List<PackageDescriptor.Dependency>> balosWithDependencies = new HashMap<>();\n+            balosWithDependencies.put(baloProject.sourceRoot(), baloProject.currentPackage().packageDescriptor().dependencies());\n+            recursivelyPushBalos(balosWithDependencies);\n+        } catch (IOException e) {\n+            throw createLauncherException(\n+                    \"unexpected error occurred when trying to push to remote repository: \" + getRemoteRepoURL());\n+        }\n+    }\n+\n+    private static BaloProject validateBaloPathAndGetBaloProject(String pkgName, Path sourceRootPath) throws IOException {\n+        // Get balo output path\n+        Path baloOutputDir = Paths.get(sourceRootPath.toString(), ProjectConstants.TARGET_DIR_NAME,\n+                ProjectConstants.TARGET_BALO_DIR_NAME);\n+\n+        if (Files.notExists(baloOutputDir)) {\n+            throw createLauncherException(\"cannot find balo file for the package: \" + pkgName + \". Run \"\n+                    + \"'ballerina build' to compile and generate the balo.\");\n+        }\n+\n+        Optional<Path> packageBaloFile;\n+        try (Stream<Path> baloFilesStream = Files.list(baloOutputDir)) {\n+            packageBaloFile = baloFilesStream\n+                    .filter(baloFile -> null != baloFile.getFileName() && baloFile.getFileName().toString()\n+                            .startsWith(pkgName + \"-\" + IMPLEMENTATION_VERSION)).findFirst();\n+        }\n+\n+        if (!packageBaloFile.isPresent()) {\n+            throw createLauncherException(\"cannot find balo file for the package: \" + pkgName + \". Run \"\n+                    + \"'ballerina build' to compile and generate the balo.\");\n+        }\n+\n+        // get the manifest from balo file\n+        Path baloFilePath = packageBaloFile.get();\n+        final BaloProject baloProject = BaloProject.loadProject(baloFilePath, null);\n+        final String orgName = baloProject.currentPackage().packageOrg().toString();\n+\n+        // Validate the org-name\n+        if (!RepoUtils.validateOrg(orgName)) {\n+            throw createLauncherException(\n+                    \"invalid organization name provided \\'\" + orgName\n+                            + \"\\'. Only lowercase alphanumerics \"\n+                            + \"and underscores are allowed in an organization name and the maximum \"\n+                            + \"length is 256 characters\");\n+        }\n+\n+        // Validate the pkg-name\n+        if (!RepoUtils.validatePkg(pkgName)) {\n+            throw createLauncherException(\"invalid package name provided \\'\" + pkgName + \"\\'. Only \"\n+                    + \"alphanumerics, underscores and periods are allowed in a module name \"\n+                    + \"and the maximum length is 256 characters\");\n+        }\n+\n+        // todo: need to add after ballerina.toml changes\n+        // check if there are any dependencies with balo path\n+//        List<String> dependenciesWithBaloPath = baloProject.currentPackage().packageDescriptor().dependencies().stream()\n+//                .filter(dep -> dep.getMetadata().getPath() != null).map(Dependency::getModuleID)\n+//                .collect(Collectors.toList());\n+//\n+//        if (!dependenciesWithBaloPath.isEmpty()) {\n+//            throw createLauncherException(\"dependencies cannot be given by path when pushing module(s) to \"\n+//                    + \"remote. check dependencies in Ballerina.toml: [\" + String.join(\", \", dependenciesWithBaloPath)\n+//                    + \"]\");\n+//        }\n+\n+        // check if the package is already there in remote repository\n+        PackageDescriptor.Dependency pkgAsDependency = new PackageDescriptor.Dependency(\n+                baloProject.currentPackage().packageName(),\n+                baloProject.currentPackage().packageOrg(),\n+                baloProject.currentPackage().packageVersion());\n+\n+        if (isDependencyAvailableInRemote(pkgAsDependency)) {\n+            throw createLauncherException(\n+                    \"package '\" + pkgAsDependency.toString() + \"' already exists in \" + \"remote repository(\"\n+                            + getRemoteRepoURL() + \"). build and push after \"\n+                            + \"updating the version in the Ballerina.toml.\");\n+        }\n+\n+        return baloProject;\n+    }\n+\n+    /**\n+     * Push balos to remote repository in the order of there dependencies are resolved.\n+     *\n+     * @param balos The remaining balos to be pushed.\n+     * @throws IOException When trying to access remote repository\n+     */\n+    private static void recursivelyPushBalos(Map<Path, List<PackageDescriptor.Dependency>> balos) throws IOException {\n+        // if there are no more balos to push.\n+        if (balos.size() == 0) {\n+            return;\n+        }\n+\n+        // go through the dependencies of balos and see if they are available in remote repository. if they are\n+        // available remove them from the list.\n+        for (List<PackageDescriptor.Dependency> deps : balos.values()) {\n+            Iterator<PackageDescriptor.Dependency> depsIterator = deps.iterator();\n+            while (depsIterator.hasNext()) {\n+                PackageDescriptor.Dependency dep = depsIterator.next();\n+                if (isDependencyAvailableInRemote(dep)) {\n+                    depsIterator.remove();\n+                }\n+\n+                if (\"ballerina\".equals(dep.org().toString()) || \"ballerinax\".equals(dep.org().toString())) {\n+                    depsIterator.remove();\n+                }\n+            }\n+        }\n+\n+        // check if there are balos where their dependencies are already available in remote repository\n+        Optional<List<PackageDescriptor.Dependency>> baloWithAllDependenciesAvailableInCentral = balos.values().stream()\n+                .filter(List::isEmpty)\n+                .findAny();\n+\n+        // if there isn't any balos where dependencies are resolved, then throw an error.\n+        if (!baloWithAllDependenciesAvailableInCentral.isPresent()) {\n+            Set<String> unresolvedDependencies = balos.values().stream()\n+                    .flatMap(List::stream)\n+                    .map(PackageDescriptor.Dependency::toString)\n+                    .collect(Collectors.toSet());\n+            throw createLauncherException(\"unable to find dependencies in remote repository: [\" +\n+                    String.join(\", \", unresolvedDependencies) + \"]\");\n+        }\n+\n+        // push all the modules where dependencies are available in remote repository and remove them from the map.\n+        Iterator<Map.Entry<Path, List<PackageDescriptor.Dependency>>> iterator = balos.entrySet().iterator();\n+        while (iterator.hasNext()) {\n+            Map.Entry<Path, List<PackageDescriptor.Dependency>> baloDeps = iterator.next();\n+            if (baloDeps.getValue().isEmpty()) {\n+                pushBaloToRemote(baloDeps.getKey());\n+                iterator.remove();\n+            }\n+        }\n+        recursivelyPushBalos(balos);\n+    }\n+\n+    /**\n+     * Push a balo file to remote repository.\n+     *\n+     * @param baloPath Path to the balo file.\n+     */\n+    private static void pushBaloToRemote(Path baloPath) {\n+        Path baloFileName = baloPath.getFileName();\n+        if (null != baloFileName) {\n+            // Load BaloProject from balo path\n+            BaloProject baloProject = BaloProject.loadProject(baloPath, null);\n+            String name = baloProject.currentPackage().packageName().toString();\n+\n+            try {\n+                CentralAPIClient client = new CentralAPIClient();\n+                client.pushPackage(baloPath, baloProject);\n+            } catch (CommandException e) {\n+                String errorMessage = e.getMessage();\n+                if (null != errorMessage && !\"\".equals(errorMessage.trim())) {\n+                    // removing the error stack\n+                    if (errorMessage.contains(\"\\n\\tat\")) {\n+                        errorMessage = errorMessage.substring(0, errorMessage.indexOf(\"\\n\\tat\"));\n+                    }\n+\n+                    errorMessage = errorMessage.replaceAll(\"error: \", \"\");\n+\n+                    throw createLauncherException(\n+                            \"unexpected error occurred while pushing package '\" + name + \"' to remote repository(\"\n+                                    + getRemoteRepoURL() + \"): \" + errorMessage);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static boolean isDependencyAvailableInRemote(PackageDescriptor.Dependency dep) {\n+        List<String> supportedPlatforms = Arrays.stream(SUPPORTED_PLATFORMS).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0NzA4Mw=="}, "originalCommit": {"oid": "9c87aea90550b9d2f849d846c5a36b3c307956dc"}, "originalPosition": 328}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTkwOTQxOnYy", "diffSide": "RIGHT", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/SearchCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODoxMDoxMFrOHpeKCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDoxNToxNFrOHpi7iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0Nzc1NA==", "bodyText": "Why the model name has Schema, can we call it PackageSearchResult etc", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r513247754", "createdAt": "2020-10-28T08:10:10Z", "author": {"login": "hevayo"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/SearchCommand.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package io.ballerina.cli.cmd;\n+\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.central.client.model.PackageSearchJsonSchema;\n+import org.ballerinalang.cli.module.exeptions.CommandException;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.PrintStream;\n+import java.util.List;\n+\n+import static io.ballerina.cli.cmd.Constants.SEARCH_COMMAND;\n+import static io.ballerina.cli.utils.PrintUtils.printPackages;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static org.ballerinalang.tool.LauncherUtils.createUsageExceptionWithHelp;\n+\n+/**\n+ * This class represents the \"ballerina search\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = SEARCH_COMMAND, description = \"search for modules within Ballerina Central\")\n+public class SearchCommand implements BLauncherCmd {\n+    private static PrintStream outStream = System.err;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = {\"--help\", \"-h\"}, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true)\n+    private String debugPort;\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(SEARCH_COMMAND);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        if (null != debugPort) {\n+            System.setProperty(SYSTEM_PROP_BAL_DEBUG, debugPort);\n+        }\n+\n+        if (argList == null || argList.isEmpty()) {\n+            throw createUsageExceptionWithHelp(\"no keyword given\");\n+        }\n+\n+        if (argList.size() > 1) {\n+            throw createUsageExceptionWithHelp(\"too many arguments\");\n+        }\n+\n+        String searchArgs = argList.get(0);\n+        searchInCentral(searchArgs);\n+        Runtime.getRuntime().exit(0);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return SEARCH_COMMAND;\n+    }\n+\n+    @Override\n+    public void printLongDesc(StringBuilder out) {\n+        out.append(\"searches for packages within Ballerina Central \\n\");\n+    }\n+\n+    @Override\n+    public void printUsage(StringBuilder out) {\n+        out.append(\" ballerina search [<org>|<package>|<text>] \\n\");\n+    }\n+\n+    @Override\n+    public void setParentCmdParser(CommandLine parentCmdParser) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Search for packages in central.\n+     *\n+     * @param query search keyword.\n+     */\n+    private static void searchInCentral(String query) {\n+        try {\n+            CentralAPIClient client = new CentralAPIClient();\n+            PackageSearchJsonSchema packageSearchJsonSchema = client.searchPackage(query);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c87aea90550b9d2f849d846c5a36b3c307956dc"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMyNTk2MQ==", "bodyText": "renamed model classes", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r513325961", "createdAt": "2020-10-28T10:15:14Z", "author": {"login": "pramodya1994"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/SearchCommand.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package io.ballerina.cli.cmd;\n+\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.central.client.model.PackageSearchJsonSchema;\n+import org.ballerinalang.cli.module.exeptions.CommandException;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.PrintStream;\n+import java.util.List;\n+\n+import static io.ballerina.cli.cmd.Constants.SEARCH_COMMAND;\n+import static io.ballerina.cli.utils.PrintUtils.printPackages;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static org.ballerinalang.tool.LauncherUtils.createUsageExceptionWithHelp;\n+\n+/**\n+ * This class represents the \"ballerina search\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = SEARCH_COMMAND, description = \"search for modules within Ballerina Central\")\n+public class SearchCommand implements BLauncherCmd {\n+    private static PrintStream outStream = System.err;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = {\"--help\", \"-h\"}, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true)\n+    private String debugPort;\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(SEARCH_COMMAND);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        if (null != debugPort) {\n+            System.setProperty(SYSTEM_PROP_BAL_DEBUG, debugPort);\n+        }\n+\n+        if (argList == null || argList.isEmpty()) {\n+            throw createUsageExceptionWithHelp(\"no keyword given\");\n+        }\n+\n+        if (argList.size() > 1) {\n+            throw createUsageExceptionWithHelp(\"too many arguments\");\n+        }\n+\n+        String searchArgs = argList.get(0);\n+        searchInCentral(searchArgs);\n+        Runtime.getRuntime().exit(0);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return SEARCH_COMMAND;\n+    }\n+\n+    @Override\n+    public void printLongDesc(StringBuilder out) {\n+        out.append(\"searches for packages within Ballerina Central \\n\");\n+    }\n+\n+    @Override\n+    public void printUsage(StringBuilder out) {\n+        out.append(\" ballerina search [<org>|<package>|<text>] \\n\");\n+    }\n+\n+    @Override\n+    public void setParentCmdParser(CommandLine parentCmdParser) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Search for packages in central.\n+     *\n+     * @param query search keyword.\n+     */\n+    private static void searchInCentral(String query) {\n+        try {\n+            CentralAPIClient client = new CentralAPIClient();\n+            PackageSearchJsonSchema packageSearchJsonSchema = client.searchPackage(query);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI0Nzc1NA=="}, "originalCommit": {"oid": "9c87aea90550b9d2f849d846c5a36b3c307956dc"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjM2OTYyOnYy", "diffSide": "RIGHT", "path": "cli/ballerina-cli/build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMDo0MToxOVrOHt9X0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMDozMzoyMFrOHuVaNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk1MzQ5MQ==", "bodyText": "Do we need the cli module ? can we have all the code in ballerina-cli", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r517953491", "createdAt": "2020-11-05T10:41:19Z", "author": {"login": "hevayo"}, "path": "cli/ballerina-cli/build.gradle", "diffHunk": "@@ -35,12 +35,16 @@ dependencies {\n     implementation project(':ballerina-runtime')\n     implementation project(':ballerina-tool')\n     implementation project(':ballerina-tools-api')\n+    implementation project(':ballerina-projects')\n+    implementation project(':ballerina-cli-module')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM0NzMxNg==", "bodyText": "removed it", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r518347316", "createdAt": "2020-11-05T20:33:20Z", "author": {"login": "pramodya1994"}, "path": "cli/ballerina-cli/build.gradle", "diffHunk": "@@ -35,12 +35,16 @@ dependencies {\n     implementation project(':ballerina-runtime')\n     implementation project(':ballerina-tool')\n     implementation project(':ballerina-tools-api')\n+    implementation project(':ballerina-projects')\n+    implementation project(':ballerina-cli-module')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk1MzQ5MQ=="}, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjM3MTQ4OnYy", "diffSide": "RIGHT", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/Constants.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMDo0MTo1MFrOHt9Y-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxOToxMTozM1rOHuSTng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk1Mzc4Nw==", "bodyText": "Lets use pull, push without the New now", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r517953787", "createdAt": "2020-11-05T10:41:50Z", "author": {"login": "hevayo"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/Constants.java", "diffHunk": "@@ -32,9 +32,9 @@\n     static final String NEW_COMMAND = \"new\";\n     static final String ADD_COMMAND = \"add\";\n     static final String LIST_COMMAND = \"list\";\n-    static final String PULL_COMMAND = \"pull\";\n-    static final String PUSH_COMMAND = \"push\";\n-    static final String SEARCH_COMMAND = \"search\";\n+    static final String PULL_COMMAND = \"pullNew\";\n+    static final String PUSH_COMMAND = \"pushNew\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI5NjQ3OA==", "bodyText": "Added", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r518296478", "createdAt": "2020-11-05T19:11:33Z", "author": {"login": "pramodya1994"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/Constants.java", "diffHunk": "@@ -32,9 +32,9 @@\n     static final String NEW_COMMAND = \"new\";\n     static final String ADD_COMMAND = \"add\";\n     static final String LIST_COMMAND = \"list\";\n-    static final String PULL_COMMAND = \"pull\";\n-    static final String PUSH_COMMAND = \"push\";\n-    static final String SEARCH_COMMAND = \"search\";\n+    static final String PULL_COMMAND = \"pullNew\";\n+    static final String PUSH_COMMAND = \"pushNew\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk1Mzc4Nw=="}, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjM4NjM2OnYy", "diffSide": "RIGHT", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/SearchCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMDo0NTo0NlrOHt9idA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxOToxMTo0MlrOHuSUBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk1NjIxMg==", "bodyText": "The variable name should be packageSearchResult..", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r517956212", "createdAt": "2020-11-05T10:45:46Z", "author": {"login": "hevayo"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/SearchCommand.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package io.ballerina.cli.cmd;\n+\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.central.client.model.PackageSearchResult;\n+import org.ballerinalang.cli.module.exeptions.CommandException;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.PrintStream;\n+import java.util.List;\n+\n+import static io.ballerina.cli.cmd.Constants.SEARCH_COMMAND;\n+import static io.ballerina.cli.utils.PrintUtils.printPackages;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static org.ballerinalang.tool.LauncherUtils.createUsageExceptionWithHelp;\n+\n+/**\n+ * This class represents the \"ballerina search\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = SEARCH_COMMAND, description = \"search for modules within Ballerina Central\")\n+public class SearchCommand implements BLauncherCmd {\n+    private static PrintStream outStream = System.err;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = {\"--help\", \"-h\"}, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true)\n+    private String debugPort;\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(SEARCH_COMMAND);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        if (null != debugPort) {\n+            System.setProperty(SYSTEM_PROP_BAL_DEBUG, debugPort);\n+        }\n+\n+        if (argList == null || argList.isEmpty()) {\n+            throw createUsageExceptionWithHelp(\"no keyword given\");\n+        }\n+\n+        if (argList.size() > 1) {\n+            throw createUsageExceptionWithHelp(\"too many arguments\");\n+        }\n+\n+        String searchArgs = argList.get(0);\n+        searchInCentral(searchArgs);\n+        Runtime.getRuntime().exit(0);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return SEARCH_COMMAND;\n+    }\n+\n+    @Override\n+    public void printLongDesc(StringBuilder out) {\n+        out.append(\"searches for packages within Ballerina Central \\n\");\n+    }\n+\n+    @Override\n+    public void printUsage(StringBuilder out) {\n+        out.append(\" ballerina search [<org>|<package>|<text>] \\n\");\n+    }\n+\n+    @Override\n+    public void setParentCmdParser(CommandLine parentCmdParser) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Search for packages in central.\n+     *\n+     * @param query search keyword.\n+     */\n+    private static void searchInCentral(String query) {\n+        try {\n+            CentralAPIClient client = new CentralAPIClient();\n+            PackageSearchResult packageSearchJsonSchema = client.searchPackage(query);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI5NjU4Mg==", "bodyText": "Added", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r518296582", "createdAt": "2020-11-05T19:11:42Z", "author": {"login": "pramodya1994"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/SearchCommand.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package io.ballerina.cli.cmd;\n+\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.central.client.model.PackageSearchResult;\n+import org.ballerinalang.cli.module.exeptions.CommandException;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.PrintStream;\n+import java.util.List;\n+\n+import static io.ballerina.cli.cmd.Constants.SEARCH_COMMAND;\n+import static io.ballerina.cli.utils.PrintUtils.printPackages;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static org.ballerinalang.tool.LauncherUtils.createUsageExceptionWithHelp;\n+\n+/**\n+ * This class represents the \"ballerina search\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = SEARCH_COMMAND, description = \"search for modules within Ballerina Central\")\n+public class SearchCommand implements BLauncherCmd {\n+    private static PrintStream outStream = System.err;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = {\"--help\", \"-h\"}, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true)\n+    private String debugPort;\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(SEARCH_COMMAND);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        if (null != debugPort) {\n+            System.setProperty(SYSTEM_PROP_BAL_DEBUG, debugPort);\n+        }\n+\n+        if (argList == null || argList.isEmpty()) {\n+            throw createUsageExceptionWithHelp(\"no keyword given\");\n+        }\n+\n+        if (argList.size() > 1) {\n+            throw createUsageExceptionWithHelp(\"too many arguments\");\n+        }\n+\n+        String searchArgs = argList.get(0);\n+        searchInCentral(searchArgs);\n+        Runtime.getRuntime().exit(0);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return SEARCH_COMMAND;\n+    }\n+\n+    @Override\n+    public void printLongDesc(StringBuilder out) {\n+        out.append(\"searches for packages within Ballerina Central \\n\");\n+    }\n+\n+    @Override\n+    public void printUsage(StringBuilder out) {\n+        out.append(\" ballerina search [<org>|<package>|<text>] \\n\");\n+    }\n+\n+    @Override\n+    public void setParentCmdParser(CommandLine parentCmdParser) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Search for packages in central.\n+     *\n+     * @param query search keyword.\n+     */\n+    private static void searchInCentral(String query) {\n+        try {\n+            CentralAPIClient client = new CentralAPIClient();\n+            PackageSearchResult packageSearchJsonSchema = client.searchPackage(query);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk1NjIxMg=="}, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjQzOTk1OnYy", "diffSide": "RIGHT", "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/util/CommandException.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMTowMDoxNVrOHt-EDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxOToxMTo1MVrOHuSUXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk2NDgxMg==", "bodyText": "Shall we use a multi line comment", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r517964812", "createdAt": "2020-11-05T11:00:15Z", "author": {"login": "hevayo"}, "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/util/CommandException.java", "diffHunk": "@@ -0,0 +1,29 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI5NjY3MQ==", "bodyText": "Added", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r518296671", "createdAt": "2020-11-05T19:11:51Z", "author": {"login": "pramodya1994"}, "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/util/CommandException.java", "diffHunk": "@@ -0,0 +1,29 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk2NDgxMg=="}, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjQ5NTYxOnYy", "diffSide": "RIGHT", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PullCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMToxNTo0M1rOHt-l9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwMDo1OTozM1rOHvcEzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3MzQ5Mg==", "bodyText": "Should Runtime.getRuntime().exit(0); come here ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r517973492", "createdAt": "2020-11-05T11:15:43Z", "author": {"login": "hemikak"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PullCommand.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.utils.ProjectConstants;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.compiler.util.Names;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import static io.ballerina.cli.cmd.Constants.PULL_COMMAND;\n+import static io.ballerina.projects.utils.ProjectConstants.PKG_NAME_REGEX;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static java.nio.file.Files.createDirectory;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+\n+/**\n+ * This class represents the \"ballerina pull\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PULL_COMMAND,\n+        description = \"download the module source and binaries from a remote repository\")\n+public class PullCommand implements BLauncherCmd {\n+    private PrintStream errStream;\n+    private CentralAPIClient client;\n+\n+    @CommandLine.Parameters private List<String> argList;\n+\n+    @CommandLine.Option(names = { \"--help\", \"-h\" }, hidden = true) private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true) private String debugPort;\n+\n+    public PullCommand() {\n+        this.errStream = System.err;\n+        this.client = new CentralAPIClient();\n+    }\n+\n+    public PullCommand(PrintStream errStream, CentralAPIClient client) {\n+        this.errStream = errStream;\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(PULL_COMMAND);\n+            errStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        if (argList == null || argList.isEmpty()) {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"no package given\");\n+        }\n+\n+        if (argList.size() > 1) {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"too many arguments\");\n+        }\n+\n+        // Enable remote debugging\n+        if (null != debugPort) {\n+            System.setProperty(SYSTEM_PROP_BAL_DEBUG, debugPort);\n+        }\n+\n+        String resourceName = argList.get(0);\n+        String orgName;\n+        String packageName;\n+        String version;\n+\n+        if (!validPackageName(resourceName)) {\n+            CommandUtil.printError(errStream, \"invalid package name. Provide the package name with the org name \",\n+                    \"ballerina pull {<org-name>/<package-name> | <org-name>/<package-name>:<version>}\", false);\n+            Runtime.getRuntime().exit(1);\n+            return;\n+        }\n+\n+        // Get org name\n+        String[] moduleInfo = resourceName.split(\"/\");\n+        orgName = moduleInfo[0];\n+        String moduleNameAndVersion = moduleInfo[1];\n+\n+        // Get package name\n+        String[] packageInfo = moduleNameAndVersion.split(\":\");\n+        if (packageInfo.length == 2) {\n+            packageName = packageInfo[0];\n+            version = packageInfo[1];\n+        } else {\n+            packageName = moduleNameAndVersion;\n+            version = Names.EMPTY.getValue();\n+        }\n+\n+        Path packagePathInBaloCache = RepoUtils.createAndGetHomeReposPath()\n+                .resolve(ProjectConstants.BALO_CACHE_DIR_NAME).resolve(orgName).resolve(packageName);\n+        // create directory path in balo cache\n+        try {\n+            createDirectory(packagePathInBaloCache);\n+        } catch (IOException e) {\n+            throw createLauncherException(\n+                    \"unexpected error occurred while creating package repository in balo cache: \" + e.getMessage());\n+        }\n+\n+        for (String supportedPlatform : SUPPORTED_PLATFORMS) {\n+            this.client.pullPackage(orgName, packageName, version, packagePathInBaloCache, supportedPlatform, false);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTUwNTEwMA==", "bodyText": "Added", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r519505100", "createdAt": "2020-11-09T00:59:33Z", "author": {"login": "pramodya1994"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PullCommand.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.utils.ProjectConstants;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.compiler.util.Names;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import static io.ballerina.cli.cmd.Constants.PULL_COMMAND;\n+import static io.ballerina.projects.utils.ProjectConstants.PKG_NAME_REGEX;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static java.nio.file.Files.createDirectory;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+\n+/**\n+ * This class represents the \"ballerina pull\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PULL_COMMAND,\n+        description = \"download the module source and binaries from a remote repository\")\n+public class PullCommand implements BLauncherCmd {\n+    private PrintStream errStream;\n+    private CentralAPIClient client;\n+\n+    @CommandLine.Parameters private List<String> argList;\n+\n+    @CommandLine.Option(names = { \"--help\", \"-h\" }, hidden = true) private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true) private String debugPort;\n+\n+    public PullCommand() {\n+        this.errStream = System.err;\n+        this.client = new CentralAPIClient();\n+    }\n+\n+    public PullCommand(PrintStream errStream, CentralAPIClient client) {\n+        this.errStream = errStream;\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(PULL_COMMAND);\n+            errStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        if (argList == null || argList.isEmpty()) {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"no package given\");\n+        }\n+\n+        if (argList.size() > 1) {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"too many arguments\");\n+        }\n+\n+        // Enable remote debugging\n+        if (null != debugPort) {\n+            System.setProperty(SYSTEM_PROP_BAL_DEBUG, debugPort);\n+        }\n+\n+        String resourceName = argList.get(0);\n+        String orgName;\n+        String packageName;\n+        String version;\n+\n+        if (!validPackageName(resourceName)) {\n+            CommandUtil.printError(errStream, \"invalid package name. Provide the package name with the org name \",\n+                    \"ballerina pull {<org-name>/<package-name> | <org-name>/<package-name>:<version>}\", false);\n+            Runtime.getRuntime().exit(1);\n+            return;\n+        }\n+\n+        // Get org name\n+        String[] moduleInfo = resourceName.split(\"/\");\n+        orgName = moduleInfo[0];\n+        String moduleNameAndVersion = moduleInfo[1];\n+\n+        // Get package name\n+        String[] packageInfo = moduleNameAndVersion.split(\":\");\n+        if (packageInfo.length == 2) {\n+            packageName = packageInfo[0];\n+            version = packageInfo[1];\n+        } else {\n+            packageName = moduleNameAndVersion;\n+            version = Names.EMPTY.getValue();\n+        }\n+\n+        Path packagePathInBaloCache = RepoUtils.createAndGetHomeReposPath()\n+                .resolve(ProjectConstants.BALO_CACHE_DIR_NAME).resolve(orgName).resolve(packageName);\n+        // create directory path in balo cache\n+        try {\n+            createDirectory(packagePathInBaloCache);\n+        } catch (IOException e) {\n+            throw createLauncherException(\n+                    \"unexpected error occurred while creating package repository in balo cache: \" + e.getMessage());\n+        }\n+\n+        for (String supportedPlatform : SUPPORTED_PLATFORMS) {\n+            this.client.pullPackage(orgName, packageName, version, packagePathInBaloCache, supportedPlatform, false);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3MzQ5Mg=="}, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjQ5NzMwOnYy", "diffSide": "RIGHT", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PullCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMToxNjowOFrOHt-m_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxOToxMjoyMFrOHuSVYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3Mzc1OA==", "bodyText": "What will happen if an error occurs inside pullPackage function ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r517973758", "createdAt": "2020-11-05T11:16:08Z", "author": {"login": "hemikak"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PullCommand.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.utils.ProjectConstants;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.compiler.util.Names;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import static io.ballerina.cli.cmd.Constants.PULL_COMMAND;\n+import static io.ballerina.projects.utils.ProjectConstants.PKG_NAME_REGEX;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static java.nio.file.Files.createDirectory;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+\n+/**\n+ * This class represents the \"ballerina pull\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PULL_COMMAND,\n+        description = \"download the module source and binaries from a remote repository\")\n+public class PullCommand implements BLauncherCmd {\n+    private PrintStream errStream;\n+    private CentralAPIClient client;\n+\n+    @CommandLine.Parameters private List<String> argList;\n+\n+    @CommandLine.Option(names = { \"--help\", \"-h\" }, hidden = true) private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true) private String debugPort;\n+\n+    public PullCommand() {\n+        this.errStream = System.err;\n+        this.client = new CentralAPIClient();\n+    }\n+\n+    public PullCommand(PrintStream errStream, CentralAPIClient client) {\n+        this.errStream = errStream;\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(PULL_COMMAND);\n+            errStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        if (argList == null || argList.isEmpty()) {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"no package given\");\n+        }\n+\n+        if (argList.size() > 1) {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"too many arguments\");\n+        }\n+\n+        // Enable remote debugging\n+        if (null != debugPort) {\n+            System.setProperty(SYSTEM_PROP_BAL_DEBUG, debugPort);\n+        }\n+\n+        String resourceName = argList.get(0);\n+        String orgName;\n+        String packageName;\n+        String version;\n+\n+        if (!validPackageName(resourceName)) {\n+            CommandUtil.printError(errStream, \"invalid package name. Provide the package name with the org name \",\n+                    \"ballerina pull {<org-name>/<package-name> | <org-name>/<package-name>:<version>}\", false);\n+            Runtime.getRuntime().exit(1);\n+            return;\n+        }\n+\n+        // Get org name\n+        String[] moduleInfo = resourceName.split(\"/\");\n+        orgName = moduleInfo[0];\n+        String moduleNameAndVersion = moduleInfo[1];\n+\n+        // Get package name\n+        String[] packageInfo = moduleNameAndVersion.split(\":\");\n+        if (packageInfo.length == 2) {\n+            packageName = packageInfo[0];\n+            version = packageInfo[1];\n+        } else {\n+            packageName = moduleNameAndVersion;\n+            version = Names.EMPTY.getValue();\n+        }\n+\n+        Path packagePathInBaloCache = RepoUtils.createAndGetHomeReposPath()\n+                .resolve(ProjectConstants.BALO_CACHE_DIR_NAME).resolve(orgName).resolve(packageName);\n+        // create directory path in balo cache\n+        try {\n+            createDirectory(packagePathInBaloCache);\n+        } catch (IOException e) {\n+            throw createLauncherException(\n+                    \"unexpected error occurred while creating package repository in balo cache: \" + e.getMessage());\n+        }\n+\n+        for (String supportedPlatform : SUPPORTED_PLATFORMS) {\n+            this.client.pullPackage(orgName, packageName, version, packagePathInBaloCache, supportedPlatform, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI5NjkyOA==", "bodyText": "Added try block to catch errors", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r518296928", "createdAt": "2020-11-05T19:12:20Z", "author": {"login": "pramodya1994"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PullCommand.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.utils.ProjectConstants;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.compiler.util.Names;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import static io.ballerina.cli.cmd.Constants.PULL_COMMAND;\n+import static io.ballerina.projects.utils.ProjectConstants.PKG_NAME_REGEX;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static java.nio.file.Files.createDirectory;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+\n+/**\n+ * This class represents the \"ballerina pull\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PULL_COMMAND,\n+        description = \"download the module source and binaries from a remote repository\")\n+public class PullCommand implements BLauncherCmd {\n+    private PrintStream errStream;\n+    private CentralAPIClient client;\n+\n+    @CommandLine.Parameters private List<String> argList;\n+\n+    @CommandLine.Option(names = { \"--help\", \"-h\" }, hidden = true) private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true) private String debugPort;\n+\n+    public PullCommand() {\n+        this.errStream = System.err;\n+        this.client = new CentralAPIClient();\n+    }\n+\n+    public PullCommand(PrintStream errStream, CentralAPIClient client) {\n+        this.errStream = errStream;\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(PULL_COMMAND);\n+            errStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        if (argList == null || argList.isEmpty()) {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"no package given\");\n+        }\n+\n+        if (argList.size() > 1) {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"too many arguments\");\n+        }\n+\n+        // Enable remote debugging\n+        if (null != debugPort) {\n+            System.setProperty(SYSTEM_PROP_BAL_DEBUG, debugPort);\n+        }\n+\n+        String resourceName = argList.get(0);\n+        String orgName;\n+        String packageName;\n+        String version;\n+\n+        if (!validPackageName(resourceName)) {\n+            CommandUtil.printError(errStream, \"invalid package name. Provide the package name with the org name \",\n+                    \"ballerina pull {<org-name>/<package-name> | <org-name>/<package-name>:<version>}\", false);\n+            Runtime.getRuntime().exit(1);\n+            return;\n+        }\n+\n+        // Get org name\n+        String[] moduleInfo = resourceName.split(\"/\");\n+        orgName = moduleInfo[0];\n+        String moduleNameAndVersion = moduleInfo[1];\n+\n+        // Get package name\n+        String[] packageInfo = moduleNameAndVersion.split(\":\");\n+        if (packageInfo.length == 2) {\n+            packageName = packageInfo[0];\n+            version = packageInfo[1];\n+        } else {\n+            packageName = moduleNameAndVersion;\n+            version = Names.EMPTY.getValue();\n+        }\n+\n+        Path packagePathInBaloCache = RepoUtils.createAndGetHomeReposPath()\n+                .resolve(ProjectConstants.BALO_CACHE_DIR_NAME).resolve(orgName).resolve(packageName);\n+        // create directory path in balo cache\n+        try {\n+            createDirectory(packagePathInBaloCache);\n+        } catch (IOException e) {\n+            throw createLauncherException(\n+                    \"unexpected error occurred while creating package repository in balo cache: \" + e.getMessage());\n+        }\n+\n+        for (String supportedPlatform : SUPPORTED_PLATFORMS) {\n+            this.client.pullPackage(orgName, packageName, version, packagePathInBaloCache, supportedPlatform, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3Mzc1OA=="}, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjQ5OTUwOnYy", "diffSide": "RIGHT", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMToxNjo0OFrOHt-oVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxOToxMjozOVrOHuSWIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3NDEwMw==", "bodyText": "There is no argument to pass right ? Should it be just ballerina push ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r517974103", "createdAt": "2020-11-05T11:16:48Z", "author": {"login": "hemikak"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "diffHunk": "@@ -0,0 +1,281 @@\n+/*\n+*  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.PackageDescriptor;\n+import io.ballerina.projects.PackageName;\n+import io.ballerina.projects.PackageOrg;\n+import io.ballerina.projects.PackageVersion;\n+import io.ballerina.projects.directory.BuildProject;\n+import io.ballerina.projects.utils.ProjectConstants;\n+import io.ballerina.projects.utils.ProjectUtils;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.ballerina.cli.cmd.Constants.PUSH_COMMAND;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * This class represents the \"ballerina push\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PUSH_COMMAND, description = \"push modules and binaries available locally to \"\n+        + \"Ballerina Central\")\n+public class PushCommand implements BLauncherCmd {\n+    private static PrintStream outStream = System.err;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = {\"--help\", \"-h\"}, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true)\n+    private String debugPort;\n+\n+    @CommandLine.Option(names = \"--repository\", hidden = true)\n+    private String repositoryHome;\n+\n+    @CommandLine.Option(names = {\"--skip-source-check\"}, description = \"skip checking if source has changed\")\n+    private boolean skipSourceCheck;\n+\n+    @CommandLine.Option(names = \"--experimental\", description = \"enable experimental language features\")\n+    private boolean experimentalFlag;\n+\n+    private Path userDir;\n+    private PrintStream errStream;\n+    \n+    public PushCommand() {\n+        userDir = Paths.get(System.getProperty(\"user.dir\"));\n+        errStream = System.err;\n+    }\n+    \n+    public PushCommand(Path userDir, PrintStream errStream) {\n+        this.userDir = userDir;\n+        this.errStream = errStream;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(PUSH_COMMAND);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        // Get source root path.\n+        Path sourceRootPath = userDir;\n+\n+        // Push command only works inside a project\n+        if (!ProjectUtils.isBallerinaProject(sourceRootPath)) {\n+            Path findRoot = ProjectUtils.findProjectRoot(sourceRootPath);\n+            if (null == findRoot) {\n+                CommandUtil.printError(errStream,\n+                        \"Push command can be only run inside a Ballerina project\",\n+                        null,\n+                        false);\n+                return;\n+            }\n+            sourceRootPath = findRoot;\n+        }\n+\n+        // todo: load project and get src path and all other stuff\n+        // todo: get target path and balo path using project\n+        BuildProject project = BuildProject.loadProject(sourceRootPath);\n+\n+        // Enable remote debugging\n+        if (null != debugPort) {\n+            System.setProperty(SYSTEM_PROP_BAL_DEBUG, debugPort);\n+        }\n+\n+        if (argList == null || argList.isEmpty()) {\n+            pushPackage(project);\n+        } else {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"too many arguments\");\n+        }\n+\n+        // Exit status, zero for OK, non-zero for error\n+        Runtime.getRuntime().exit(0);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return PUSH_COMMAND;\n+    }\n+\n+    @Override\n+    public void printLongDesc(StringBuilder out) {\n+        out.append(\"push modules to Ballerina Central\");\n+    }\n+\n+    @Override\n+    public void printUsage(StringBuilder out) {\n+        out.append(\"  ballerina push <module-name> \\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI5NzEyMA==", "bodyText": "removed <module-name>", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r518297120", "createdAt": "2020-11-05T19:12:39Z", "author": {"login": "pramodya1994"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "diffHunk": "@@ -0,0 +1,281 @@\n+/*\n+*  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.PackageDescriptor;\n+import io.ballerina.projects.PackageName;\n+import io.ballerina.projects.PackageOrg;\n+import io.ballerina.projects.PackageVersion;\n+import io.ballerina.projects.directory.BuildProject;\n+import io.ballerina.projects.utils.ProjectConstants;\n+import io.ballerina.projects.utils.ProjectUtils;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.ballerina.cli.cmd.Constants.PUSH_COMMAND;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * This class represents the \"ballerina push\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PUSH_COMMAND, description = \"push modules and binaries available locally to \"\n+        + \"Ballerina Central\")\n+public class PushCommand implements BLauncherCmd {\n+    private static PrintStream outStream = System.err;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = {\"--help\", \"-h\"}, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true)\n+    private String debugPort;\n+\n+    @CommandLine.Option(names = \"--repository\", hidden = true)\n+    private String repositoryHome;\n+\n+    @CommandLine.Option(names = {\"--skip-source-check\"}, description = \"skip checking if source has changed\")\n+    private boolean skipSourceCheck;\n+\n+    @CommandLine.Option(names = \"--experimental\", description = \"enable experimental language features\")\n+    private boolean experimentalFlag;\n+\n+    private Path userDir;\n+    private PrintStream errStream;\n+    \n+    public PushCommand() {\n+        userDir = Paths.get(System.getProperty(\"user.dir\"));\n+        errStream = System.err;\n+    }\n+    \n+    public PushCommand(Path userDir, PrintStream errStream) {\n+        this.userDir = userDir;\n+        this.errStream = errStream;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(PUSH_COMMAND);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        // Get source root path.\n+        Path sourceRootPath = userDir;\n+\n+        // Push command only works inside a project\n+        if (!ProjectUtils.isBallerinaProject(sourceRootPath)) {\n+            Path findRoot = ProjectUtils.findProjectRoot(sourceRootPath);\n+            if (null == findRoot) {\n+                CommandUtil.printError(errStream,\n+                        \"Push command can be only run inside a Ballerina project\",\n+                        null,\n+                        false);\n+                return;\n+            }\n+            sourceRootPath = findRoot;\n+        }\n+\n+        // todo: load project and get src path and all other stuff\n+        // todo: get target path and balo path using project\n+        BuildProject project = BuildProject.loadProject(sourceRootPath);\n+\n+        // Enable remote debugging\n+        if (null != debugPort) {\n+            System.setProperty(SYSTEM_PROP_BAL_DEBUG, debugPort);\n+        }\n+\n+        if (argList == null || argList.isEmpty()) {\n+            pushPackage(project);\n+        } else {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"too many arguments\");\n+        }\n+\n+        // Exit status, zero for OK, non-zero for error\n+        Runtime.getRuntime().exit(0);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return PUSH_COMMAND;\n+    }\n+\n+    @Override\n+    public void printLongDesc(StringBuilder out) {\n+        out.append(\"push modules to Ballerina Central\");\n+    }\n+\n+    @Override\n+    public void printUsage(StringBuilder out) {\n+        out.append(\"  ballerina push <module-name> \\n\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3NDEwMw=="}, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjUwNzEyOnYy", "diffSide": "RIGHT", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMToxOTowMlrOHt-s6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxOToxMjo0OVrOHuSWfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3NTI3NQ==", "bodyText": "Push package to central ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r517975275", "createdAt": "2020-11-05T11:19:02Z", "author": {"login": "hemikak"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "diffHunk": "@@ -0,0 +1,281 @@\n+/*\n+*  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.PackageDescriptor;\n+import io.ballerina.projects.PackageName;\n+import io.ballerina.projects.PackageOrg;\n+import io.ballerina.projects.PackageVersion;\n+import io.ballerina.projects.directory.BuildProject;\n+import io.ballerina.projects.utils.ProjectConstants;\n+import io.ballerina.projects.utils.ProjectUtils;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.ballerina.cli.cmd.Constants.PUSH_COMMAND;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * This class represents the \"ballerina push\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PUSH_COMMAND, description = \"push modules and binaries available locally to \"\n+        + \"Ballerina Central\")\n+public class PushCommand implements BLauncherCmd {\n+    private static PrintStream outStream = System.err;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = {\"--help\", \"-h\"}, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true)\n+    private String debugPort;\n+\n+    @CommandLine.Option(names = \"--repository\", hidden = true)\n+    private String repositoryHome;\n+\n+    @CommandLine.Option(names = {\"--skip-source-check\"}, description = \"skip checking if source has changed\")\n+    private boolean skipSourceCheck;\n+\n+    @CommandLine.Option(names = \"--experimental\", description = \"enable experimental language features\")\n+    private boolean experimentalFlag;\n+\n+    private Path userDir;\n+    private PrintStream errStream;\n+    \n+    public PushCommand() {\n+        userDir = Paths.get(System.getProperty(\"user.dir\"));\n+        errStream = System.err;\n+    }\n+    \n+    public PushCommand(Path userDir, PrintStream errStream) {\n+        this.userDir = userDir;\n+        this.errStream = errStream;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(PUSH_COMMAND);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        // Get source root path.\n+        Path sourceRootPath = userDir;\n+\n+        // Push command only works inside a project\n+        if (!ProjectUtils.isBallerinaProject(sourceRootPath)) {\n+            Path findRoot = ProjectUtils.findProjectRoot(sourceRootPath);\n+            if (null == findRoot) {\n+                CommandUtil.printError(errStream,\n+                        \"Push command can be only run inside a Ballerina project\",\n+                        null,\n+                        false);\n+                return;\n+            }\n+            sourceRootPath = findRoot;\n+        }\n+\n+        // todo: load project and get src path and all other stuff\n+        // todo: get target path and balo path using project\n+        BuildProject project = BuildProject.loadProject(sourceRootPath);\n+\n+        // Enable remote debugging\n+        if (null != debugPort) {\n+            System.setProperty(SYSTEM_PROP_BAL_DEBUG, debugPort);\n+        }\n+\n+        if (argList == null || argList.isEmpty()) {\n+            pushPackage(project);\n+        } else {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"too many arguments\");\n+        }\n+\n+        // Exit status, zero for OK, non-zero for error\n+        Runtime.getRuntime().exit(0);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return PUSH_COMMAND;\n+    }\n+\n+    @Override\n+    public void printLongDesc(StringBuilder out) {\n+        out.append(\"push modules to Ballerina Central\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI5NzIxMg==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r518297212", "createdAt": "2020-11-05T19:12:49Z", "author": {"login": "pramodya1994"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "diffHunk": "@@ -0,0 +1,281 @@\n+/*\n+*  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.PackageDescriptor;\n+import io.ballerina.projects.PackageName;\n+import io.ballerina.projects.PackageOrg;\n+import io.ballerina.projects.PackageVersion;\n+import io.ballerina.projects.directory.BuildProject;\n+import io.ballerina.projects.utils.ProjectConstants;\n+import io.ballerina.projects.utils.ProjectUtils;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.ballerina.cli.cmd.Constants.PUSH_COMMAND;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * This class represents the \"ballerina push\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PUSH_COMMAND, description = \"push modules and binaries available locally to \"\n+        + \"Ballerina Central\")\n+public class PushCommand implements BLauncherCmd {\n+    private static PrintStream outStream = System.err;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = {\"--help\", \"-h\"}, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true)\n+    private String debugPort;\n+\n+    @CommandLine.Option(names = \"--repository\", hidden = true)\n+    private String repositoryHome;\n+\n+    @CommandLine.Option(names = {\"--skip-source-check\"}, description = \"skip checking if source has changed\")\n+    private boolean skipSourceCheck;\n+\n+    @CommandLine.Option(names = \"--experimental\", description = \"enable experimental language features\")\n+    private boolean experimentalFlag;\n+\n+    private Path userDir;\n+    private PrintStream errStream;\n+    \n+    public PushCommand() {\n+        userDir = Paths.get(System.getProperty(\"user.dir\"));\n+        errStream = System.err;\n+    }\n+    \n+    public PushCommand(Path userDir, PrintStream errStream) {\n+        this.userDir = userDir;\n+        this.errStream = errStream;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(PUSH_COMMAND);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        // Get source root path.\n+        Path sourceRootPath = userDir;\n+\n+        // Push command only works inside a project\n+        if (!ProjectUtils.isBallerinaProject(sourceRootPath)) {\n+            Path findRoot = ProjectUtils.findProjectRoot(sourceRootPath);\n+            if (null == findRoot) {\n+                CommandUtil.printError(errStream,\n+                        \"Push command can be only run inside a Ballerina project\",\n+                        null,\n+                        false);\n+                return;\n+            }\n+            sourceRootPath = findRoot;\n+        }\n+\n+        // todo: load project and get src path and all other stuff\n+        // todo: get target path and balo path using project\n+        BuildProject project = BuildProject.loadProject(sourceRootPath);\n+\n+        // Enable remote debugging\n+        if (null != debugPort) {\n+            System.setProperty(SYSTEM_PROP_BAL_DEBUG, debugPort);\n+        }\n+\n+        if (argList == null || argList.isEmpty()) {\n+            pushPackage(project);\n+        } else {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"too many arguments\");\n+        }\n+\n+        // Exit status, zero for OK, non-zero for error\n+        Runtime.getRuntime().exit(0);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return PUSH_COMMAND;\n+    }\n+\n+    @Override\n+    public void printLongDesc(StringBuilder out) {\n+        out.append(\"push modules to Ballerina Central\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3NTI3NQ=="}, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjUzNDk0OnYy", "diffSide": "RIGHT", "path": "cli/central-client/build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMToyNjo1NVrOHt--Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoyNzo0MlrOHwne9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3OTY3OQ==", "bodyText": "Should the version go to gradle.properties or some such file at the root level ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r517979679", "createdAt": "2020-11-05T11:26:55Z", "author": {"login": "hemikak"}, "path": "cli/central-client/build.gradle", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+//apply from: \"$rootDir/gradle/javaProject.gradle\"\n+apply from: \"$rootDir/gradle/ballerinaLangLibLoad.gradle\"\n+\n+configurations {\n+    birJar\n+    bir\n+    birJarCompile { transitive false }\n+    testCompile.exclude group: 'org.slf4j', module: 'slf4j-log4j12'\n+    testCompile.exclude group: 'org.slf4j', module: 'slf4j-simple'\n+    testCompile.exclude group: 'org.ops4j.pax.logging', module: 'pax-logging-api'\n+    distributionBalo\n+}\n+\n+dependencies {\n+    implementation project(':ballerina-lang')\n+    implementation project(':ballerina-runtime')\n+    implementation project(':ballerina-tool')\n+    implementation project(':ballerina-projects')\n+    implementation 'javax.ws.rs:javax.ws.rs-api'\n+    implementation 'me.tongfei:progressbar:0.7.4'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc0MDU5OQ==", "bodyText": "Removed from package-level gradle.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r520740599", "createdAt": "2020-11-10T17:27:42Z", "author": {"login": "pramodya1994"}, "path": "cli/central-client/build.gradle", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+//apply from: \"$rootDir/gradle/javaProject.gradle\"\n+apply from: \"$rootDir/gradle/ballerinaLangLibLoad.gradle\"\n+\n+configurations {\n+    birJar\n+    bir\n+    birJarCompile { transitive false }\n+    testCompile.exclude group: 'org.slf4j', module: 'slf4j-log4j12'\n+    testCompile.exclude group: 'org.slf4j', module: 'slf4j-simple'\n+    testCompile.exclude group: 'org.ops4j.pax.logging', module: 'pax-logging-api'\n+    distributionBalo\n+}\n+\n+dependencies {\n+    implementation project(':ballerina-lang')\n+    implementation project(':ballerina-runtime')\n+    implementation project(':ballerina-tool')\n+    implementation project(':ballerina-projects')\n+    implementation 'javax.ws.rs:javax.ws.rs-api'\n+    implementation 'me.tongfei:progressbar:0.7.4'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3OTY3OQ=="}, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjU0OTY5OnYy", "diffSide": "RIGHT", "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMTozMTowM1rOHt_HSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxOToxMzowMFrOHuSW3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk4MjAyNw==", "bodyText": "This header is not needed for central v2 anymore", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r517982027", "createdAt": "2020-11-05T11:31:03Z", "author": {"login": "hemikak"}, "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.central.client;\n+\n+import com.google.gson.Gson;\n+import io.ballerina.projects.balo.BaloProject;\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.central.client.model.Error;\n+import org.ballerinalang.central.client.model.Package;\n+import org.ballerinalang.central.client.model.PackageSearchResult;\n+import org.ballerinalang.central.client.util.BuildLogFormatter;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.ErrorUtil;\n+import org.ballerinalang.central.client.util.LogFormatter;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.central.client.util.Utils;\n+import org.ballerinalang.toml.model.Settings;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+\n+import java.io.BufferedReader;\n+import java.io.DataOutputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.net.Proxy;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.file.Path;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.central.client.util.Utils.authenticate;\n+import static org.ballerinalang.central.client.util.Utils.convertToUrl;\n+import static org.ballerinalang.central.client.util.Utils.createBaloInHomeRepo;\n+import static org.ballerinalang.central.client.util.Utils.getBallerinaCentralCliTokenUrl;\n+import static org.ballerinalang.central.client.util.Utils.getStatusCode;\n+import static org.ballerinalang.central.client.util.Utils.getTotalFileSizeInKB;\n+import static org.ballerinalang.central.client.util.Utils.initializeProxy;\n+import static org.ballerinalang.central.client.util.Utils.initializeSsl;\n+import static org.ballerinalang.central.client.util.Utils.readSettings;\n+import static org.ballerinalang.central.client.util.Utils.setRequestMethod;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.ACCEPT_ENCODING;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.APPLICATION_OCTET_STREAM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.AUTHORIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BALLERINA_PLATFORM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BAL_LANG_SPEC_VERSION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_DISPOSITION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_TYPE;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.IDENTITY;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.LOCATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.PUSH_ORGANIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.USER_AGENT;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.SETTINGS_FILE_NAME;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * {@code CentralAPIClient} is a client for the Central API.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CentralAPIClient {\n+\n+    private String accessToken;\n+    private Proxy proxy;\n+    private String baseUrl;\n+    protected PrintStream errStream;\n+    protected PrintStream outStream;\n+    private static final String PACKAGES = \"packages\";\n+    private static final String ERR_CANNOT_CONNECT = \"error: could not connect to remote repository to find package: \";\n+    private static final String ERR_CANNOT_PUSH = \"error: failed to push the package: \";\n+\n+    public CentralAPIClient() {\n+        String ballerinaCentralCliTokenUrl = getBallerinaCentralCliTokenUrl();\n+        Path ballerinaHomePath = RepoUtils.createAndGetHomeReposPath();\n+        Path settingsTomlFilePath = ballerinaHomePath.resolve(SETTINGS_FILE_NAME);\n+        Settings settings = readSettings();\n+\n+        this.errStream = System.err;\n+        this.outStream = System.out;\n+        this.baseUrl = getRemoteRepoURL();\n+        this.accessToken = authenticate(errStream, ballerinaCentralCliTokenUrl, settings, settingsTomlFilePath);\n+        this.proxy = initializeProxy(settings.getProxy());\n+    }\n+\n+    /**\n+     * Get package with version\n+     *\n+     * @param orgNamePath     The organization name of the package. (required)\n+     * @param packageNamePath The name of the package. (required)\n+     * @param version         The version or version range of the module. (required)\n+     * @return PackageJsonSchema\n+     */\n+    public Package getPackage(String orgNamePath, String packageNamePath, String version, String supportedPlatform) {\n+        initializeSsl();\n+        String url = PACKAGES + \"/\" + orgNamePath + \"/\" + packageNamePath;\n+        // append version to url if available\n+        if (null != version && !version.isEmpty()) {\n+            url = url + \"/\" + version;\n+        }\n+\n+        String pkg = orgNamePath + \"/\" + packageNamePath + \":\" + version;\n+        HttpURLConnection conn = createHttpUrlConnection(url);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // set implementation version\n+        conn.setRequestProperty(\"Ballerina-Platform\", supportedPlatform);\n+        conn.setRequestProperty(\"Ballerina-Language-Specification-Version\", IMPLEMENTATION_VERSION);\n+\n+        // status code and meaning\n+        //// 302 - module found\n+        //// 404 - module not found\n+        //// 400 - bad request sent\n+        //// 500 - backend is broken\n+        try {\n+            int statusCode = getStatusCode(conn);\n+            if (statusCode == HttpURLConnection.HTTP_OK) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    return new Gson().fromJson(reader, Package.class);\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else if (statusCode == HttpURLConnection.HTTP_NOT_FOUND) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(reader, Error.class);\n+                    if (errorJsonSchema.getMessage().contains(\"package not found:\")) {\n+                        throw new NoPackageException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw createLauncherException(\n+                                ERR_CANNOT_CONNECT + pkg + \". reason: \" + errorJsonSchema.getMessage());\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else if (statusCode == HttpURLConnection.HTTP_BAD_REQUEST) {\n+                try (BufferedReader errorStream = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(errorStream, Error.class);\n+\n+                    if (errorJsonSchema.getMessage() != null && !\"\".equals(errorJsonSchema.getMessage())) {\n+                        throw new CommandException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw createLauncherException(ERR_CANNOT_CONNECT + pkg + \". reason:\" + errorStream.lines()\n+                                .collect(Collectors.joining(\"\\n\")));\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else {\n+                throw createLauncherException(ERR_CANNOT_CONNECT + pkg + \".\");\n+            }\n+        } finally {\n+            conn.disconnect();\n+            Authenticator.setDefault(null);\n+        }\n+    }\n+\n+    /**\n+     * Pushing a package to registry.\n+     */\n+    public void pushPackage(Path baloPath) {\n+        final int NO_OF_BYTES = 64;\n+        final int BUFFER_SIZE = 1024 * NO_OF_BYTES;\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(PACKAGES);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.POST);\n+\n+        // Load balo project\n+        BaloProject baloProject = BaloProject.loadProject(baloPath);\n+        String org = baloProject.currentPackage().packageDescriptor().org().toString();\n+        String name = baloProject.currentPackage().packageDescriptor().name().toString();\n+        String version = baloProject.currentPackage().packageDescriptor().version().toString();\n+\n+        // Set headers\n+        conn.setRequestProperty(AUTHORIZATION, \"Bearer \" + this.accessToken);\n+        conn.setRequestProperty(PUSH_ORGANIZATION, org);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI5NzMxMQ==", "bodyText": "removed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r518297311", "createdAt": "2020-11-05T19:13:00Z", "author": {"login": "pramodya1994"}, "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.central.client;\n+\n+import com.google.gson.Gson;\n+import io.ballerina.projects.balo.BaloProject;\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.central.client.model.Error;\n+import org.ballerinalang.central.client.model.Package;\n+import org.ballerinalang.central.client.model.PackageSearchResult;\n+import org.ballerinalang.central.client.util.BuildLogFormatter;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.ErrorUtil;\n+import org.ballerinalang.central.client.util.LogFormatter;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.central.client.util.Utils;\n+import org.ballerinalang.toml.model.Settings;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+\n+import java.io.BufferedReader;\n+import java.io.DataOutputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.net.Proxy;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.file.Path;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.central.client.util.Utils.authenticate;\n+import static org.ballerinalang.central.client.util.Utils.convertToUrl;\n+import static org.ballerinalang.central.client.util.Utils.createBaloInHomeRepo;\n+import static org.ballerinalang.central.client.util.Utils.getBallerinaCentralCliTokenUrl;\n+import static org.ballerinalang.central.client.util.Utils.getStatusCode;\n+import static org.ballerinalang.central.client.util.Utils.getTotalFileSizeInKB;\n+import static org.ballerinalang.central.client.util.Utils.initializeProxy;\n+import static org.ballerinalang.central.client.util.Utils.initializeSsl;\n+import static org.ballerinalang.central.client.util.Utils.readSettings;\n+import static org.ballerinalang.central.client.util.Utils.setRequestMethod;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.ACCEPT_ENCODING;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.APPLICATION_OCTET_STREAM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.AUTHORIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BALLERINA_PLATFORM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BAL_LANG_SPEC_VERSION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_DISPOSITION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_TYPE;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.IDENTITY;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.LOCATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.PUSH_ORGANIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.USER_AGENT;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.SETTINGS_FILE_NAME;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * {@code CentralAPIClient} is a client for the Central API.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CentralAPIClient {\n+\n+    private String accessToken;\n+    private Proxy proxy;\n+    private String baseUrl;\n+    protected PrintStream errStream;\n+    protected PrintStream outStream;\n+    private static final String PACKAGES = \"packages\";\n+    private static final String ERR_CANNOT_CONNECT = \"error: could not connect to remote repository to find package: \";\n+    private static final String ERR_CANNOT_PUSH = \"error: failed to push the package: \";\n+\n+    public CentralAPIClient() {\n+        String ballerinaCentralCliTokenUrl = getBallerinaCentralCliTokenUrl();\n+        Path ballerinaHomePath = RepoUtils.createAndGetHomeReposPath();\n+        Path settingsTomlFilePath = ballerinaHomePath.resolve(SETTINGS_FILE_NAME);\n+        Settings settings = readSettings();\n+\n+        this.errStream = System.err;\n+        this.outStream = System.out;\n+        this.baseUrl = getRemoteRepoURL();\n+        this.accessToken = authenticate(errStream, ballerinaCentralCliTokenUrl, settings, settingsTomlFilePath);\n+        this.proxy = initializeProxy(settings.getProxy());\n+    }\n+\n+    /**\n+     * Get package with version\n+     *\n+     * @param orgNamePath     The organization name of the package. (required)\n+     * @param packageNamePath The name of the package. (required)\n+     * @param version         The version or version range of the module. (required)\n+     * @return PackageJsonSchema\n+     */\n+    public Package getPackage(String orgNamePath, String packageNamePath, String version, String supportedPlatform) {\n+        initializeSsl();\n+        String url = PACKAGES + \"/\" + orgNamePath + \"/\" + packageNamePath;\n+        // append version to url if available\n+        if (null != version && !version.isEmpty()) {\n+            url = url + \"/\" + version;\n+        }\n+\n+        String pkg = orgNamePath + \"/\" + packageNamePath + \":\" + version;\n+        HttpURLConnection conn = createHttpUrlConnection(url);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // set implementation version\n+        conn.setRequestProperty(\"Ballerina-Platform\", supportedPlatform);\n+        conn.setRequestProperty(\"Ballerina-Language-Specification-Version\", IMPLEMENTATION_VERSION);\n+\n+        // status code and meaning\n+        //// 302 - module found\n+        //// 404 - module not found\n+        //// 400 - bad request sent\n+        //// 500 - backend is broken\n+        try {\n+            int statusCode = getStatusCode(conn);\n+            if (statusCode == HttpURLConnection.HTTP_OK) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    return new Gson().fromJson(reader, Package.class);\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else if (statusCode == HttpURLConnection.HTTP_NOT_FOUND) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(reader, Error.class);\n+                    if (errorJsonSchema.getMessage().contains(\"package not found:\")) {\n+                        throw new NoPackageException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw createLauncherException(\n+                                ERR_CANNOT_CONNECT + pkg + \". reason: \" + errorJsonSchema.getMessage());\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else if (statusCode == HttpURLConnection.HTTP_BAD_REQUEST) {\n+                try (BufferedReader errorStream = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(errorStream, Error.class);\n+\n+                    if (errorJsonSchema.getMessage() != null && !\"\".equals(errorJsonSchema.getMessage())) {\n+                        throw new CommandException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw createLauncherException(ERR_CANNOT_CONNECT + pkg + \". reason:\" + errorStream.lines()\n+                                .collect(Collectors.joining(\"\\n\")));\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else {\n+                throw createLauncherException(ERR_CANNOT_CONNECT + pkg + \".\");\n+            }\n+        } finally {\n+            conn.disconnect();\n+            Authenticator.setDefault(null);\n+        }\n+    }\n+\n+    /**\n+     * Pushing a package to registry.\n+     */\n+    public void pushPackage(Path baloPath) {\n+        final int NO_OF_BYTES = 64;\n+        final int BUFFER_SIZE = 1024 * NO_OF_BYTES;\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(PACKAGES);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.POST);\n+\n+        // Load balo project\n+        BaloProject baloProject = BaloProject.loadProject(baloPath);\n+        String org = baloProject.currentPackage().packageDescriptor().org().toString();\n+        String name = baloProject.currentPackage().packageDescriptor().name().toString();\n+        String version = baloProject.currentPackage().packageDescriptor().version().toString();\n+\n+        // Set headers\n+        conn.setRequestProperty(AUTHORIZATION, \"Bearer \" + this.accessToken);\n+        conn.setRequestProperty(PUSH_ORGANIZATION, org);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk4MjAyNw=="}, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjU5NzI2OnYy", "diffSide": "RIGHT", "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMTo0NDo0MVrOHt_k9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo1MjozM1rOHuEOfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk4OTYyMQ==", "bodyText": "Push can also return 500 status code as well. Better to handle that once as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r517989621", "createdAt": "2020-11-05T11:44:41Z", "author": {"login": "hemikak"}, "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.central.client;\n+\n+import com.google.gson.Gson;\n+import io.ballerina.projects.balo.BaloProject;\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.central.client.model.Error;\n+import org.ballerinalang.central.client.model.Package;\n+import org.ballerinalang.central.client.model.PackageSearchResult;\n+import org.ballerinalang.central.client.util.BuildLogFormatter;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.ErrorUtil;\n+import org.ballerinalang.central.client.util.LogFormatter;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.central.client.util.Utils;\n+import org.ballerinalang.toml.model.Settings;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+\n+import java.io.BufferedReader;\n+import java.io.DataOutputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.net.Proxy;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.file.Path;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.central.client.util.Utils.authenticate;\n+import static org.ballerinalang.central.client.util.Utils.convertToUrl;\n+import static org.ballerinalang.central.client.util.Utils.createBaloInHomeRepo;\n+import static org.ballerinalang.central.client.util.Utils.getBallerinaCentralCliTokenUrl;\n+import static org.ballerinalang.central.client.util.Utils.getStatusCode;\n+import static org.ballerinalang.central.client.util.Utils.getTotalFileSizeInKB;\n+import static org.ballerinalang.central.client.util.Utils.initializeProxy;\n+import static org.ballerinalang.central.client.util.Utils.initializeSsl;\n+import static org.ballerinalang.central.client.util.Utils.readSettings;\n+import static org.ballerinalang.central.client.util.Utils.setRequestMethod;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.ACCEPT_ENCODING;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.APPLICATION_OCTET_STREAM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.AUTHORIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BALLERINA_PLATFORM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BAL_LANG_SPEC_VERSION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_DISPOSITION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_TYPE;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.IDENTITY;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.LOCATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.PUSH_ORGANIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.USER_AGENT;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.SETTINGS_FILE_NAME;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * {@code CentralAPIClient} is a client for the Central API.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CentralAPIClient {\n+\n+    private String accessToken;\n+    private Proxy proxy;\n+    private String baseUrl;\n+    protected PrintStream errStream;\n+    protected PrintStream outStream;\n+    private static final String PACKAGES = \"packages\";\n+    private static final String ERR_CANNOT_CONNECT = \"error: could not connect to remote repository to find package: \";\n+    private static final String ERR_CANNOT_PUSH = \"error: failed to push the package: \";\n+\n+    public CentralAPIClient() {\n+        String ballerinaCentralCliTokenUrl = getBallerinaCentralCliTokenUrl();\n+        Path ballerinaHomePath = RepoUtils.createAndGetHomeReposPath();\n+        Path settingsTomlFilePath = ballerinaHomePath.resolve(SETTINGS_FILE_NAME);\n+        Settings settings = readSettings();\n+\n+        this.errStream = System.err;\n+        this.outStream = System.out;\n+        this.baseUrl = getRemoteRepoURL();\n+        this.accessToken = authenticate(errStream, ballerinaCentralCliTokenUrl, settings, settingsTomlFilePath);\n+        this.proxy = initializeProxy(settings.getProxy());\n+    }\n+\n+    /**\n+     * Get package with version\n+     *\n+     * @param orgNamePath     The organization name of the package. (required)\n+     * @param packageNamePath The name of the package. (required)\n+     * @param version         The version or version range of the module. (required)\n+     * @return PackageJsonSchema\n+     */\n+    public Package getPackage(String orgNamePath, String packageNamePath, String version, String supportedPlatform) {\n+        initializeSsl();\n+        String url = PACKAGES + \"/\" + orgNamePath + \"/\" + packageNamePath;\n+        // append version to url if available\n+        if (null != version && !version.isEmpty()) {\n+            url = url + \"/\" + version;\n+        }\n+\n+        String pkg = orgNamePath + \"/\" + packageNamePath + \":\" + version;\n+        HttpURLConnection conn = createHttpUrlConnection(url);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // set implementation version\n+        conn.setRequestProperty(\"Ballerina-Platform\", supportedPlatform);\n+        conn.setRequestProperty(\"Ballerina-Language-Specification-Version\", IMPLEMENTATION_VERSION);\n+\n+        // status code and meaning\n+        //// 302 - module found\n+        //// 404 - module not found\n+        //// 400 - bad request sent\n+        //// 500 - backend is broken\n+        try {\n+            int statusCode = getStatusCode(conn);\n+            if (statusCode == HttpURLConnection.HTTP_OK) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    return new Gson().fromJson(reader, Package.class);\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else if (statusCode == HttpURLConnection.HTTP_NOT_FOUND) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(reader, Error.class);\n+                    if (errorJsonSchema.getMessage().contains(\"package not found:\")) {\n+                        throw new NoPackageException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw createLauncherException(\n+                                ERR_CANNOT_CONNECT + pkg + \". reason: \" + errorJsonSchema.getMessage());\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else if (statusCode == HttpURLConnection.HTTP_BAD_REQUEST) {\n+                try (BufferedReader errorStream = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(errorStream, Error.class);\n+\n+                    if (errorJsonSchema.getMessage() != null && !\"\".equals(errorJsonSchema.getMessage())) {\n+                        throw new CommandException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw createLauncherException(ERR_CANNOT_CONNECT + pkg + \". reason:\" + errorStream.lines()\n+                                .collect(Collectors.joining(\"\\n\")));\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else {\n+                throw createLauncherException(ERR_CANNOT_CONNECT + pkg + \".\");\n+            }\n+        } finally {\n+            conn.disconnect();\n+            Authenticator.setDefault(null);\n+        }\n+    }\n+\n+    /**\n+     * Pushing a package to registry.\n+     */\n+    public void pushPackage(Path baloPath) {\n+        final int NO_OF_BYTES = 64;\n+        final int BUFFER_SIZE = 1024 * NO_OF_BYTES;\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(PACKAGES);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.POST);\n+\n+        // Load balo project\n+        BaloProject baloProject = BaloProject.loadProject(baloPath);\n+        String org = baloProject.currentPackage().packageDescriptor().org().toString();\n+        String name = baloProject.currentPackage().packageDescriptor().name().toString();\n+        String version = baloProject.currentPackage().packageDescriptor().version().toString();\n+\n+        // Set headers\n+        conn.setRequestProperty(AUTHORIZATION, \"Bearer \" + this.accessToken);\n+        conn.setRequestProperty(PUSH_ORGANIZATION, org);\n+        conn.setRequestProperty(CONTENT_TYPE, APPLICATION_OCTET_STREAM);\n+\n+        conn.setDoOutput(true);\n+        conn.setChunkedStreamingMode(BUFFER_SIZE);\n+\n+        try (DataOutputStream outputStream = new DataOutputStream(conn.getOutputStream())) {\n+            // Send balo content by 1 kb chunks\n+            byte[] buffer = new byte[BUFFER_SIZE];\n+            int count;\n+            try (ProgressBar progressBar = new ProgressBar(\n+                    org + \"/\" + name + \":\" + version + \" [project repo -> central]\", getTotalFileSizeInKB(baloPath),\n+                    1000, outStream, ProgressBarStyle.ASCII, \" KB\", 1);\n+                    FileInputStream fis = new FileInputStream(baloPath.toFile())) {\n+                while ((count = fis.read(buffer)) > 0) {\n+                    outputStream.write(buffer, 0, count);\n+                    outputStream.flush();\n+                    progressBar.stepBy((long) NO_OF_BYTES);\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw ErrorUtil.createCommandException(\"error occurred while uploading balo to central: \" + e.getMessage());\n+        }\n+\n+        try {\n+            int statusCode = getStatusCode(conn);\n+            // 200 - Module pushed successfully\n+            // Other - Error occurred, json returned with the error message\n+            if (statusCode == HttpURLConnection.HTTP_OK) {\n+                outStream.println(org + \"/\" + name + \":\" + version + \" pushed to central successfully\");\n+            } else if (statusCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n+                errStream.println(\"unauthorized access token for organization: \" + org);\n+            } else if (statusCode == HttpURLConnection.HTTP_BAD_REQUEST) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getErrorStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(reader, Error.class);\n+\n+                    if (errorJsonSchema.getMessage() != null && !\"\".equals(errorJsonSchema.getMessage())) {\n+                        throw ErrorUtil.createCommandException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw ErrorUtil.createCommandException(\n+                                ERR_CANNOT_PUSH + \"'\" + org + \"/\" + name + \":\" + version + \"' reason:\" + reader.lines()\n+                                        .collect(Collectors.joining(\"\\n\")));\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(\n+                            ERR_CANNOT_PUSH + \"'\" + org + \"/\" + name + \":\" + version + \"' to the remote repository '\"\n+                                    + conn.getURL() + \"'\");\n+                }\n+            } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 250}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2NTc4OQ==", "bodyText": "This else part is handling all other statuses, Do we need to handle it separately? Since we are not getting any error message do we need to add another if condition?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r518065789", "createdAt": "2020-11-05T13:52:33Z", "author": {"login": "pramodya1994"}, "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.central.client;\n+\n+import com.google.gson.Gson;\n+import io.ballerina.projects.balo.BaloProject;\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.central.client.model.Error;\n+import org.ballerinalang.central.client.model.Package;\n+import org.ballerinalang.central.client.model.PackageSearchResult;\n+import org.ballerinalang.central.client.util.BuildLogFormatter;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.ErrorUtil;\n+import org.ballerinalang.central.client.util.LogFormatter;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.central.client.util.Utils;\n+import org.ballerinalang.toml.model.Settings;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+\n+import java.io.BufferedReader;\n+import java.io.DataOutputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.net.Proxy;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.file.Path;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.central.client.util.Utils.authenticate;\n+import static org.ballerinalang.central.client.util.Utils.convertToUrl;\n+import static org.ballerinalang.central.client.util.Utils.createBaloInHomeRepo;\n+import static org.ballerinalang.central.client.util.Utils.getBallerinaCentralCliTokenUrl;\n+import static org.ballerinalang.central.client.util.Utils.getStatusCode;\n+import static org.ballerinalang.central.client.util.Utils.getTotalFileSizeInKB;\n+import static org.ballerinalang.central.client.util.Utils.initializeProxy;\n+import static org.ballerinalang.central.client.util.Utils.initializeSsl;\n+import static org.ballerinalang.central.client.util.Utils.readSettings;\n+import static org.ballerinalang.central.client.util.Utils.setRequestMethod;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.ACCEPT_ENCODING;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.APPLICATION_OCTET_STREAM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.AUTHORIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BALLERINA_PLATFORM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BAL_LANG_SPEC_VERSION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_DISPOSITION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_TYPE;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.IDENTITY;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.LOCATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.PUSH_ORGANIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.USER_AGENT;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.SETTINGS_FILE_NAME;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * {@code CentralAPIClient} is a client for the Central API.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CentralAPIClient {\n+\n+    private String accessToken;\n+    private Proxy proxy;\n+    private String baseUrl;\n+    protected PrintStream errStream;\n+    protected PrintStream outStream;\n+    private static final String PACKAGES = \"packages\";\n+    private static final String ERR_CANNOT_CONNECT = \"error: could not connect to remote repository to find package: \";\n+    private static final String ERR_CANNOT_PUSH = \"error: failed to push the package: \";\n+\n+    public CentralAPIClient() {\n+        String ballerinaCentralCliTokenUrl = getBallerinaCentralCliTokenUrl();\n+        Path ballerinaHomePath = RepoUtils.createAndGetHomeReposPath();\n+        Path settingsTomlFilePath = ballerinaHomePath.resolve(SETTINGS_FILE_NAME);\n+        Settings settings = readSettings();\n+\n+        this.errStream = System.err;\n+        this.outStream = System.out;\n+        this.baseUrl = getRemoteRepoURL();\n+        this.accessToken = authenticate(errStream, ballerinaCentralCliTokenUrl, settings, settingsTomlFilePath);\n+        this.proxy = initializeProxy(settings.getProxy());\n+    }\n+\n+    /**\n+     * Get package with version\n+     *\n+     * @param orgNamePath     The organization name of the package. (required)\n+     * @param packageNamePath The name of the package. (required)\n+     * @param version         The version or version range of the module. (required)\n+     * @return PackageJsonSchema\n+     */\n+    public Package getPackage(String orgNamePath, String packageNamePath, String version, String supportedPlatform) {\n+        initializeSsl();\n+        String url = PACKAGES + \"/\" + orgNamePath + \"/\" + packageNamePath;\n+        // append version to url if available\n+        if (null != version && !version.isEmpty()) {\n+            url = url + \"/\" + version;\n+        }\n+\n+        String pkg = orgNamePath + \"/\" + packageNamePath + \":\" + version;\n+        HttpURLConnection conn = createHttpUrlConnection(url);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // set implementation version\n+        conn.setRequestProperty(\"Ballerina-Platform\", supportedPlatform);\n+        conn.setRequestProperty(\"Ballerina-Language-Specification-Version\", IMPLEMENTATION_VERSION);\n+\n+        // status code and meaning\n+        //// 302 - module found\n+        //// 404 - module not found\n+        //// 400 - bad request sent\n+        //// 500 - backend is broken\n+        try {\n+            int statusCode = getStatusCode(conn);\n+            if (statusCode == HttpURLConnection.HTTP_OK) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    return new Gson().fromJson(reader, Package.class);\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else if (statusCode == HttpURLConnection.HTTP_NOT_FOUND) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(reader, Error.class);\n+                    if (errorJsonSchema.getMessage().contains(\"package not found:\")) {\n+                        throw new NoPackageException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw createLauncherException(\n+                                ERR_CANNOT_CONNECT + pkg + \". reason: \" + errorJsonSchema.getMessage());\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else if (statusCode == HttpURLConnection.HTTP_BAD_REQUEST) {\n+                try (BufferedReader errorStream = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(errorStream, Error.class);\n+\n+                    if (errorJsonSchema.getMessage() != null && !\"\".equals(errorJsonSchema.getMessage())) {\n+                        throw new CommandException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw createLauncherException(ERR_CANNOT_CONNECT + pkg + \". reason:\" + errorStream.lines()\n+                                .collect(Collectors.joining(\"\\n\")));\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else {\n+                throw createLauncherException(ERR_CANNOT_CONNECT + pkg + \".\");\n+            }\n+        } finally {\n+            conn.disconnect();\n+            Authenticator.setDefault(null);\n+        }\n+    }\n+\n+    /**\n+     * Pushing a package to registry.\n+     */\n+    public void pushPackage(Path baloPath) {\n+        final int NO_OF_BYTES = 64;\n+        final int BUFFER_SIZE = 1024 * NO_OF_BYTES;\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(PACKAGES);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.POST);\n+\n+        // Load balo project\n+        BaloProject baloProject = BaloProject.loadProject(baloPath);\n+        String org = baloProject.currentPackage().packageDescriptor().org().toString();\n+        String name = baloProject.currentPackage().packageDescriptor().name().toString();\n+        String version = baloProject.currentPackage().packageDescriptor().version().toString();\n+\n+        // Set headers\n+        conn.setRequestProperty(AUTHORIZATION, \"Bearer \" + this.accessToken);\n+        conn.setRequestProperty(PUSH_ORGANIZATION, org);\n+        conn.setRequestProperty(CONTENT_TYPE, APPLICATION_OCTET_STREAM);\n+\n+        conn.setDoOutput(true);\n+        conn.setChunkedStreamingMode(BUFFER_SIZE);\n+\n+        try (DataOutputStream outputStream = new DataOutputStream(conn.getOutputStream())) {\n+            // Send balo content by 1 kb chunks\n+            byte[] buffer = new byte[BUFFER_SIZE];\n+            int count;\n+            try (ProgressBar progressBar = new ProgressBar(\n+                    org + \"/\" + name + \":\" + version + \" [project repo -> central]\", getTotalFileSizeInKB(baloPath),\n+                    1000, outStream, ProgressBarStyle.ASCII, \" KB\", 1);\n+                    FileInputStream fis = new FileInputStream(baloPath.toFile())) {\n+                while ((count = fis.read(buffer)) > 0) {\n+                    outputStream.write(buffer, 0, count);\n+                    outputStream.flush();\n+                    progressBar.stepBy((long) NO_OF_BYTES);\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw ErrorUtil.createCommandException(\"error occurred while uploading balo to central: \" + e.getMessage());\n+        }\n+\n+        try {\n+            int statusCode = getStatusCode(conn);\n+            // 200 - Module pushed successfully\n+            // Other - Error occurred, json returned with the error message\n+            if (statusCode == HttpURLConnection.HTTP_OK) {\n+                outStream.println(org + \"/\" + name + \":\" + version + \" pushed to central successfully\");\n+            } else if (statusCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n+                errStream.println(\"unauthorized access token for organization: \" + org);\n+            } else if (statusCode == HttpURLConnection.HTTP_BAD_REQUEST) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getErrorStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(reader, Error.class);\n+\n+                    if (errorJsonSchema.getMessage() != null && !\"\".equals(errorJsonSchema.getMessage())) {\n+                        throw ErrorUtil.createCommandException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw ErrorUtil.createCommandException(\n+                                ERR_CANNOT_PUSH + \"'\" + org + \"/\" + name + \":\" + version + \"' reason:\" + reader.lines()\n+                                        .collect(Collectors.joining(\"\\n\")));\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(\n+                            ERR_CANNOT_PUSH + \"'\" + org + \"/\" + name + \":\" + version + \"' to the remote repository '\"\n+                                    + conn.getURL() + \"'\");\n+                }\n+            } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk4OTYyMQ=="}, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 250}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjYwMjE4OnYy", "diffSide": "RIGHT", "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMTo0NjoxNVrOHt_oIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxOToxMzoxNVrOHuSXXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5MDQzMg==", "bodyText": "We need to pass in the Accept header as well.\n'Accept: application/octet-stream'", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r517990432", "createdAt": "2020-11-05T11:46:15Z", "author": {"login": "hemikak"}, "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.central.client;\n+\n+import com.google.gson.Gson;\n+import io.ballerina.projects.balo.BaloProject;\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.central.client.model.Error;\n+import org.ballerinalang.central.client.model.Package;\n+import org.ballerinalang.central.client.model.PackageSearchResult;\n+import org.ballerinalang.central.client.util.BuildLogFormatter;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.ErrorUtil;\n+import org.ballerinalang.central.client.util.LogFormatter;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.central.client.util.Utils;\n+import org.ballerinalang.toml.model.Settings;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+\n+import java.io.BufferedReader;\n+import java.io.DataOutputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.net.Proxy;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.file.Path;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.central.client.util.Utils.authenticate;\n+import static org.ballerinalang.central.client.util.Utils.convertToUrl;\n+import static org.ballerinalang.central.client.util.Utils.createBaloInHomeRepo;\n+import static org.ballerinalang.central.client.util.Utils.getBallerinaCentralCliTokenUrl;\n+import static org.ballerinalang.central.client.util.Utils.getStatusCode;\n+import static org.ballerinalang.central.client.util.Utils.getTotalFileSizeInKB;\n+import static org.ballerinalang.central.client.util.Utils.initializeProxy;\n+import static org.ballerinalang.central.client.util.Utils.initializeSsl;\n+import static org.ballerinalang.central.client.util.Utils.readSettings;\n+import static org.ballerinalang.central.client.util.Utils.setRequestMethod;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.ACCEPT_ENCODING;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.APPLICATION_OCTET_STREAM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.AUTHORIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BALLERINA_PLATFORM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BAL_LANG_SPEC_VERSION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_DISPOSITION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_TYPE;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.IDENTITY;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.LOCATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.PUSH_ORGANIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.USER_AGENT;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.SETTINGS_FILE_NAME;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * {@code CentralAPIClient} is a client for the Central API.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CentralAPIClient {\n+\n+    private String accessToken;\n+    private Proxy proxy;\n+    private String baseUrl;\n+    protected PrintStream errStream;\n+    protected PrintStream outStream;\n+    private static final String PACKAGES = \"packages\";\n+    private static final String ERR_CANNOT_CONNECT = \"error: could not connect to remote repository to find package: \";\n+    private static final String ERR_CANNOT_PUSH = \"error: failed to push the package: \";\n+\n+    public CentralAPIClient() {\n+        String ballerinaCentralCliTokenUrl = getBallerinaCentralCliTokenUrl();\n+        Path ballerinaHomePath = RepoUtils.createAndGetHomeReposPath();\n+        Path settingsTomlFilePath = ballerinaHomePath.resolve(SETTINGS_FILE_NAME);\n+        Settings settings = readSettings();\n+\n+        this.errStream = System.err;\n+        this.outStream = System.out;\n+        this.baseUrl = getRemoteRepoURL();\n+        this.accessToken = authenticate(errStream, ballerinaCentralCliTokenUrl, settings, settingsTomlFilePath);\n+        this.proxy = initializeProxy(settings.getProxy());\n+    }\n+\n+    /**\n+     * Get package with version\n+     *\n+     * @param orgNamePath     The organization name of the package. (required)\n+     * @param packageNamePath The name of the package. (required)\n+     * @param version         The version or version range of the module. (required)\n+     * @return PackageJsonSchema\n+     */\n+    public Package getPackage(String orgNamePath, String packageNamePath, String version, String supportedPlatform) {\n+        initializeSsl();\n+        String url = PACKAGES + \"/\" + orgNamePath + \"/\" + packageNamePath;\n+        // append version to url if available\n+        if (null != version && !version.isEmpty()) {\n+            url = url + \"/\" + version;\n+        }\n+\n+        String pkg = orgNamePath + \"/\" + packageNamePath + \":\" + version;\n+        HttpURLConnection conn = createHttpUrlConnection(url);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // set implementation version\n+        conn.setRequestProperty(\"Ballerina-Platform\", supportedPlatform);\n+        conn.setRequestProperty(\"Ballerina-Language-Specification-Version\", IMPLEMENTATION_VERSION);\n+\n+        // status code and meaning\n+        //// 302 - module found\n+        //// 404 - module not found\n+        //// 400 - bad request sent\n+        //// 500 - backend is broken\n+        try {\n+            int statusCode = getStatusCode(conn);\n+            if (statusCode == HttpURLConnection.HTTP_OK) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    return new Gson().fromJson(reader, Package.class);\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else if (statusCode == HttpURLConnection.HTTP_NOT_FOUND) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(reader, Error.class);\n+                    if (errorJsonSchema.getMessage().contains(\"package not found:\")) {\n+                        throw new NoPackageException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw createLauncherException(\n+                                ERR_CANNOT_CONNECT + pkg + \". reason: \" + errorJsonSchema.getMessage());\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else if (statusCode == HttpURLConnection.HTTP_BAD_REQUEST) {\n+                try (BufferedReader errorStream = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(errorStream, Error.class);\n+\n+                    if (errorJsonSchema.getMessage() != null && !\"\".equals(errorJsonSchema.getMessage())) {\n+                        throw new CommandException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw createLauncherException(ERR_CANNOT_CONNECT + pkg + \". reason:\" + errorStream.lines()\n+                                .collect(Collectors.joining(\"\\n\")));\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else {\n+                throw createLauncherException(ERR_CANNOT_CONNECT + pkg + \".\");\n+            }\n+        } finally {\n+            conn.disconnect();\n+            Authenticator.setDefault(null);\n+        }\n+    }\n+\n+    /**\n+     * Pushing a package to registry.\n+     */\n+    public void pushPackage(Path baloPath) {\n+        final int NO_OF_BYTES = 64;\n+        final int BUFFER_SIZE = 1024 * NO_OF_BYTES;\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(PACKAGES);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.POST);\n+\n+        // Load balo project\n+        BaloProject baloProject = BaloProject.loadProject(baloPath);\n+        String org = baloProject.currentPackage().packageDescriptor().org().toString();\n+        String name = baloProject.currentPackage().packageDescriptor().name().toString();\n+        String version = baloProject.currentPackage().packageDescriptor().version().toString();\n+\n+        // Set headers\n+        conn.setRequestProperty(AUTHORIZATION, \"Bearer \" + this.accessToken);\n+        conn.setRequestProperty(PUSH_ORGANIZATION, org);\n+        conn.setRequestProperty(CONTENT_TYPE, APPLICATION_OCTET_STREAM);\n+\n+        conn.setDoOutput(true);\n+        conn.setChunkedStreamingMode(BUFFER_SIZE);\n+\n+        try (DataOutputStream outputStream = new DataOutputStream(conn.getOutputStream())) {\n+            // Send balo content by 1 kb chunks\n+            byte[] buffer = new byte[BUFFER_SIZE];\n+            int count;\n+            try (ProgressBar progressBar = new ProgressBar(\n+                    org + \"/\" + name + \":\" + version + \" [project repo -> central]\", getTotalFileSizeInKB(baloPath),\n+                    1000, outStream, ProgressBarStyle.ASCII, \" KB\", 1);\n+                    FileInputStream fis = new FileInputStream(baloPath.toFile())) {\n+                while ((count = fis.read(buffer)) > 0) {\n+                    outputStream.write(buffer, 0, count);\n+                    outputStream.flush();\n+                    progressBar.stepBy((long) NO_OF_BYTES);\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw ErrorUtil.createCommandException(\"error occurred while uploading balo to central: \" + e.getMessage());\n+        }\n+\n+        try {\n+            int statusCode = getStatusCode(conn);\n+            // 200 - Module pushed successfully\n+            // Other - Error occurred, json returned with the error message\n+            if (statusCode == HttpURLConnection.HTTP_OK) {\n+                outStream.println(org + \"/\" + name + \":\" + version + \" pushed to central successfully\");\n+            } else if (statusCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n+                errStream.println(\"unauthorized access token for organization: \" + org);\n+            } else if (statusCode == HttpURLConnection.HTTP_BAD_REQUEST) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getErrorStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(reader, Error.class);\n+\n+                    if (errorJsonSchema.getMessage() != null && !\"\".equals(errorJsonSchema.getMessage())) {\n+                        throw ErrorUtil.createCommandException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw ErrorUtil.createCommandException(\n+                                ERR_CANNOT_PUSH + \"'\" + org + \"/\" + name + \":\" + version + \"' reason:\" + reader.lines()\n+                                        .collect(Collectors.joining(\"\\n\")));\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(\n+                            ERR_CANNOT_PUSH + \"'\" + org + \"/\" + name + \":\" + version + \"' to the remote repository '\"\n+                                    + conn.getURL() + \"'\");\n+                }\n+            } else {\n+                throw ErrorUtil.createCommandException(\n+                        ERR_CANNOT_PUSH + \"'\" + org + \"/\" + name + \":\" + version + \"' to the remote repository '\"\n+                                + conn.getURL() + \"'\");\n+            }\n+        } finally {\n+            conn.disconnect();\n+            Authenticator.setDefault(null);\n+        }\n+    }\n+\n+    public void pullPackage(String org, String name, String version, Path packagePathInBaloCache,\n+            String supportedPlatform, boolean isBuild) {\n+        LogFormatter logFormatter = new LogFormatter();\n+        if (isBuild) {\n+            logFormatter = new BuildLogFormatter();\n+        }\n+\n+        String url = PACKAGES + \"/\" + org + \"/\" + name;\n+        // append version to url if available\n+        if (null != version && !version.isEmpty()) {\n+            url = url + \"/\" + version;\n+        }\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(url);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // Set headers\n+        conn.setRequestProperty(BALLERINA_PLATFORM, supportedPlatform);\n+        conn.setRequestProperty(BAL_LANG_SPEC_VERSION, IMPLEMENTATION_VERSION);\n+        conn.setRequestProperty(ACCEPT_ENCODING, IDENTITY);\n+        conn.setRequestProperty(USER_AGENT, RepoUtils.getBallerinaVersion());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 283}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI5NzQzNw==", "bodyText": "Added", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r518297437", "createdAt": "2020-11-05T19:13:15Z", "author": {"login": "pramodya1994"}, "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.central.client;\n+\n+import com.google.gson.Gson;\n+import io.ballerina.projects.balo.BaloProject;\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.central.client.model.Error;\n+import org.ballerinalang.central.client.model.Package;\n+import org.ballerinalang.central.client.model.PackageSearchResult;\n+import org.ballerinalang.central.client.util.BuildLogFormatter;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.ErrorUtil;\n+import org.ballerinalang.central.client.util.LogFormatter;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.central.client.util.Utils;\n+import org.ballerinalang.toml.model.Settings;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+\n+import java.io.BufferedReader;\n+import java.io.DataOutputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.net.Proxy;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.file.Path;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.central.client.util.Utils.authenticate;\n+import static org.ballerinalang.central.client.util.Utils.convertToUrl;\n+import static org.ballerinalang.central.client.util.Utils.createBaloInHomeRepo;\n+import static org.ballerinalang.central.client.util.Utils.getBallerinaCentralCliTokenUrl;\n+import static org.ballerinalang.central.client.util.Utils.getStatusCode;\n+import static org.ballerinalang.central.client.util.Utils.getTotalFileSizeInKB;\n+import static org.ballerinalang.central.client.util.Utils.initializeProxy;\n+import static org.ballerinalang.central.client.util.Utils.initializeSsl;\n+import static org.ballerinalang.central.client.util.Utils.readSettings;\n+import static org.ballerinalang.central.client.util.Utils.setRequestMethod;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.ACCEPT_ENCODING;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.APPLICATION_OCTET_STREAM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.AUTHORIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BALLERINA_PLATFORM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BAL_LANG_SPEC_VERSION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_DISPOSITION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_TYPE;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.IDENTITY;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.LOCATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.PUSH_ORGANIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.USER_AGENT;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.SETTINGS_FILE_NAME;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * {@code CentralAPIClient} is a client for the Central API.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CentralAPIClient {\n+\n+    private String accessToken;\n+    private Proxy proxy;\n+    private String baseUrl;\n+    protected PrintStream errStream;\n+    protected PrintStream outStream;\n+    private static final String PACKAGES = \"packages\";\n+    private static final String ERR_CANNOT_CONNECT = \"error: could not connect to remote repository to find package: \";\n+    private static final String ERR_CANNOT_PUSH = \"error: failed to push the package: \";\n+\n+    public CentralAPIClient() {\n+        String ballerinaCentralCliTokenUrl = getBallerinaCentralCliTokenUrl();\n+        Path ballerinaHomePath = RepoUtils.createAndGetHomeReposPath();\n+        Path settingsTomlFilePath = ballerinaHomePath.resolve(SETTINGS_FILE_NAME);\n+        Settings settings = readSettings();\n+\n+        this.errStream = System.err;\n+        this.outStream = System.out;\n+        this.baseUrl = getRemoteRepoURL();\n+        this.accessToken = authenticate(errStream, ballerinaCentralCliTokenUrl, settings, settingsTomlFilePath);\n+        this.proxy = initializeProxy(settings.getProxy());\n+    }\n+\n+    /**\n+     * Get package with version\n+     *\n+     * @param orgNamePath     The organization name of the package. (required)\n+     * @param packageNamePath The name of the package. (required)\n+     * @param version         The version or version range of the module. (required)\n+     * @return PackageJsonSchema\n+     */\n+    public Package getPackage(String orgNamePath, String packageNamePath, String version, String supportedPlatform) {\n+        initializeSsl();\n+        String url = PACKAGES + \"/\" + orgNamePath + \"/\" + packageNamePath;\n+        // append version to url if available\n+        if (null != version && !version.isEmpty()) {\n+            url = url + \"/\" + version;\n+        }\n+\n+        String pkg = orgNamePath + \"/\" + packageNamePath + \":\" + version;\n+        HttpURLConnection conn = createHttpUrlConnection(url);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // set implementation version\n+        conn.setRequestProperty(\"Ballerina-Platform\", supportedPlatform);\n+        conn.setRequestProperty(\"Ballerina-Language-Specification-Version\", IMPLEMENTATION_VERSION);\n+\n+        // status code and meaning\n+        //// 302 - module found\n+        //// 404 - module not found\n+        //// 400 - bad request sent\n+        //// 500 - backend is broken\n+        try {\n+            int statusCode = getStatusCode(conn);\n+            if (statusCode == HttpURLConnection.HTTP_OK) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    return new Gson().fromJson(reader, Package.class);\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else if (statusCode == HttpURLConnection.HTTP_NOT_FOUND) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(reader, Error.class);\n+                    if (errorJsonSchema.getMessage().contains(\"package not found:\")) {\n+                        throw new NoPackageException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw createLauncherException(\n+                                ERR_CANNOT_CONNECT + pkg + \". reason: \" + errorJsonSchema.getMessage());\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else if (statusCode == HttpURLConnection.HTTP_BAD_REQUEST) {\n+                try (BufferedReader errorStream = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(errorStream, Error.class);\n+\n+                    if (errorJsonSchema.getMessage() != null && !\"\".equals(errorJsonSchema.getMessage())) {\n+                        throw new CommandException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw createLauncherException(ERR_CANNOT_CONNECT + pkg + \". reason:\" + errorStream.lines()\n+                                .collect(Collectors.joining(\"\\n\")));\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else {\n+                throw createLauncherException(ERR_CANNOT_CONNECT + pkg + \".\");\n+            }\n+        } finally {\n+            conn.disconnect();\n+            Authenticator.setDefault(null);\n+        }\n+    }\n+\n+    /**\n+     * Pushing a package to registry.\n+     */\n+    public void pushPackage(Path baloPath) {\n+        final int NO_OF_BYTES = 64;\n+        final int BUFFER_SIZE = 1024 * NO_OF_BYTES;\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(PACKAGES);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.POST);\n+\n+        // Load balo project\n+        BaloProject baloProject = BaloProject.loadProject(baloPath);\n+        String org = baloProject.currentPackage().packageDescriptor().org().toString();\n+        String name = baloProject.currentPackage().packageDescriptor().name().toString();\n+        String version = baloProject.currentPackage().packageDescriptor().version().toString();\n+\n+        // Set headers\n+        conn.setRequestProperty(AUTHORIZATION, \"Bearer \" + this.accessToken);\n+        conn.setRequestProperty(PUSH_ORGANIZATION, org);\n+        conn.setRequestProperty(CONTENT_TYPE, APPLICATION_OCTET_STREAM);\n+\n+        conn.setDoOutput(true);\n+        conn.setChunkedStreamingMode(BUFFER_SIZE);\n+\n+        try (DataOutputStream outputStream = new DataOutputStream(conn.getOutputStream())) {\n+            // Send balo content by 1 kb chunks\n+            byte[] buffer = new byte[BUFFER_SIZE];\n+            int count;\n+            try (ProgressBar progressBar = new ProgressBar(\n+                    org + \"/\" + name + \":\" + version + \" [project repo -> central]\", getTotalFileSizeInKB(baloPath),\n+                    1000, outStream, ProgressBarStyle.ASCII, \" KB\", 1);\n+                    FileInputStream fis = new FileInputStream(baloPath.toFile())) {\n+                while ((count = fis.read(buffer)) > 0) {\n+                    outputStream.write(buffer, 0, count);\n+                    outputStream.flush();\n+                    progressBar.stepBy((long) NO_OF_BYTES);\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw ErrorUtil.createCommandException(\"error occurred while uploading balo to central: \" + e.getMessage());\n+        }\n+\n+        try {\n+            int statusCode = getStatusCode(conn);\n+            // 200 - Module pushed successfully\n+            // Other - Error occurred, json returned with the error message\n+            if (statusCode == HttpURLConnection.HTTP_OK) {\n+                outStream.println(org + \"/\" + name + \":\" + version + \" pushed to central successfully\");\n+            } else if (statusCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n+                errStream.println(\"unauthorized access token for organization: \" + org);\n+            } else if (statusCode == HttpURLConnection.HTTP_BAD_REQUEST) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getErrorStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(reader, Error.class);\n+\n+                    if (errorJsonSchema.getMessage() != null && !\"\".equals(errorJsonSchema.getMessage())) {\n+                        throw ErrorUtil.createCommandException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw ErrorUtil.createCommandException(\n+                                ERR_CANNOT_PUSH + \"'\" + org + \"/\" + name + \":\" + version + \"' reason:\" + reader.lines()\n+                                        .collect(Collectors.joining(\"\\n\")));\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(\n+                            ERR_CANNOT_PUSH + \"'\" + org + \"/\" + name + \":\" + version + \"' to the remote repository '\"\n+                                    + conn.getURL() + \"'\");\n+                }\n+            } else {\n+                throw ErrorUtil.createCommandException(\n+                        ERR_CANNOT_PUSH + \"'\" + org + \"/\" + name + \":\" + version + \"' to the remote repository '\"\n+                                + conn.getURL() + \"'\");\n+            }\n+        } finally {\n+            conn.disconnect();\n+            Authenticator.setDefault(null);\n+        }\n+    }\n+\n+    public void pullPackage(String org, String name, String version, Path packagePathInBaloCache,\n+            String supportedPlatform, boolean isBuild) {\n+        LogFormatter logFormatter = new LogFormatter();\n+        if (isBuild) {\n+            logFormatter = new BuildLogFormatter();\n+        }\n+\n+        String url = PACKAGES + \"/\" + org + \"/\" + name;\n+        // append version to url if available\n+        if (null != version && !version.isEmpty()) {\n+            url = url + \"/\" + version;\n+        }\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(url);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // Set headers\n+        conn.setRequestProperty(BALLERINA_PLATFORM, supportedPlatform);\n+        conn.setRequestProperty(BAL_LANG_SPEC_VERSION, IMPLEMENTATION_VERSION);\n+        conn.setRequestProperty(ACCEPT_ENCODING, IDENTITY);\n+        conn.setRequestProperty(USER_AGENT, RepoUtils.getBallerinaVersion());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5MDQzMg=="}, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 283}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjYwNDQ2OnYy", "diffSide": "RIGHT", "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMTo0Njo1MlrOHt_piw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxOToxMzoyMVrOHuSXoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5MDc5NQ==", "bodyText": "\"/\" + \"?q=\" this can be a single string.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r517990795", "createdAt": "2020-11-05T11:46:52Z", "author": {"login": "hemikak"}, "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.central.client;\n+\n+import com.google.gson.Gson;\n+import io.ballerina.projects.balo.BaloProject;\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.central.client.model.Error;\n+import org.ballerinalang.central.client.model.Package;\n+import org.ballerinalang.central.client.model.PackageSearchResult;\n+import org.ballerinalang.central.client.util.BuildLogFormatter;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.ErrorUtil;\n+import org.ballerinalang.central.client.util.LogFormatter;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.central.client.util.Utils;\n+import org.ballerinalang.toml.model.Settings;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+\n+import java.io.BufferedReader;\n+import java.io.DataOutputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.net.Proxy;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.file.Path;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.central.client.util.Utils.authenticate;\n+import static org.ballerinalang.central.client.util.Utils.convertToUrl;\n+import static org.ballerinalang.central.client.util.Utils.createBaloInHomeRepo;\n+import static org.ballerinalang.central.client.util.Utils.getBallerinaCentralCliTokenUrl;\n+import static org.ballerinalang.central.client.util.Utils.getStatusCode;\n+import static org.ballerinalang.central.client.util.Utils.getTotalFileSizeInKB;\n+import static org.ballerinalang.central.client.util.Utils.initializeProxy;\n+import static org.ballerinalang.central.client.util.Utils.initializeSsl;\n+import static org.ballerinalang.central.client.util.Utils.readSettings;\n+import static org.ballerinalang.central.client.util.Utils.setRequestMethod;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.ACCEPT_ENCODING;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.APPLICATION_OCTET_STREAM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.AUTHORIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BALLERINA_PLATFORM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BAL_LANG_SPEC_VERSION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_DISPOSITION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_TYPE;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.IDENTITY;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.LOCATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.PUSH_ORGANIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.USER_AGENT;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.SETTINGS_FILE_NAME;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * {@code CentralAPIClient} is a client for the Central API.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CentralAPIClient {\n+\n+    private String accessToken;\n+    private Proxy proxy;\n+    private String baseUrl;\n+    protected PrintStream errStream;\n+    protected PrintStream outStream;\n+    private static final String PACKAGES = \"packages\";\n+    private static final String ERR_CANNOT_CONNECT = \"error: could not connect to remote repository to find package: \";\n+    private static final String ERR_CANNOT_PUSH = \"error: failed to push the package: \";\n+\n+    public CentralAPIClient() {\n+        String ballerinaCentralCliTokenUrl = getBallerinaCentralCliTokenUrl();\n+        Path ballerinaHomePath = RepoUtils.createAndGetHomeReposPath();\n+        Path settingsTomlFilePath = ballerinaHomePath.resolve(SETTINGS_FILE_NAME);\n+        Settings settings = readSettings();\n+\n+        this.errStream = System.err;\n+        this.outStream = System.out;\n+        this.baseUrl = getRemoteRepoURL();\n+        this.accessToken = authenticate(errStream, ballerinaCentralCliTokenUrl, settings, settingsTomlFilePath);\n+        this.proxy = initializeProxy(settings.getProxy());\n+    }\n+\n+    /**\n+     * Get package with version\n+     *\n+     * @param orgNamePath     The organization name of the package. (required)\n+     * @param packageNamePath The name of the package. (required)\n+     * @param version         The version or version range of the module. (required)\n+     * @return PackageJsonSchema\n+     */\n+    public Package getPackage(String orgNamePath, String packageNamePath, String version, String supportedPlatform) {\n+        initializeSsl();\n+        String url = PACKAGES + \"/\" + orgNamePath + \"/\" + packageNamePath;\n+        // append version to url if available\n+        if (null != version && !version.isEmpty()) {\n+            url = url + \"/\" + version;\n+        }\n+\n+        String pkg = orgNamePath + \"/\" + packageNamePath + \":\" + version;\n+        HttpURLConnection conn = createHttpUrlConnection(url);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // set implementation version\n+        conn.setRequestProperty(\"Ballerina-Platform\", supportedPlatform);\n+        conn.setRequestProperty(\"Ballerina-Language-Specification-Version\", IMPLEMENTATION_VERSION);\n+\n+        // status code and meaning\n+        //// 302 - module found\n+        //// 404 - module not found\n+        //// 400 - bad request sent\n+        //// 500 - backend is broken\n+        try {\n+            int statusCode = getStatusCode(conn);\n+            if (statusCode == HttpURLConnection.HTTP_OK) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    return new Gson().fromJson(reader, Package.class);\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else if (statusCode == HttpURLConnection.HTTP_NOT_FOUND) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(reader, Error.class);\n+                    if (errorJsonSchema.getMessage().contains(\"package not found:\")) {\n+                        throw new NoPackageException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw createLauncherException(\n+                                ERR_CANNOT_CONNECT + pkg + \". reason: \" + errorJsonSchema.getMessage());\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else if (statusCode == HttpURLConnection.HTTP_BAD_REQUEST) {\n+                try (BufferedReader errorStream = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(errorStream, Error.class);\n+\n+                    if (errorJsonSchema.getMessage() != null && !\"\".equals(errorJsonSchema.getMessage())) {\n+                        throw new CommandException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw createLauncherException(ERR_CANNOT_CONNECT + pkg + \". reason:\" + errorStream.lines()\n+                                .collect(Collectors.joining(\"\\n\")));\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else {\n+                throw createLauncherException(ERR_CANNOT_CONNECT + pkg + \".\");\n+            }\n+        } finally {\n+            conn.disconnect();\n+            Authenticator.setDefault(null);\n+        }\n+    }\n+\n+    /**\n+     * Pushing a package to registry.\n+     */\n+    public void pushPackage(Path baloPath) {\n+        final int NO_OF_BYTES = 64;\n+        final int BUFFER_SIZE = 1024 * NO_OF_BYTES;\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(PACKAGES);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.POST);\n+\n+        // Load balo project\n+        BaloProject baloProject = BaloProject.loadProject(baloPath);\n+        String org = baloProject.currentPackage().packageDescriptor().org().toString();\n+        String name = baloProject.currentPackage().packageDescriptor().name().toString();\n+        String version = baloProject.currentPackage().packageDescriptor().version().toString();\n+\n+        // Set headers\n+        conn.setRequestProperty(AUTHORIZATION, \"Bearer \" + this.accessToken);\n+        conn.setRequestProperty(PUSH_ORGANIZATION, org);\n+        conn.setRequestProperty(CONTENT_TYPE, APPLICATION_OCTET_STREAM);\n+\n+        conn.setDoOutput(true);\n+        conn.setChunkedStreamingMode(BUFFER_SIZE);\n+\n+        try (DataOutputStream outputStream = new DataOutputStream(conn.getOutputStream())) {\n+            // Send balo content by 1 kb chunks\n+            byte[] buffer = new byte[BUFFER_SIZE];\n+            int count;\n+            try (ProgressBar progressBar = new ProgressBar(\n+                    org + \"/\" + name + \":\" + version + \" [project repo -> central]\", getTotalFileSizeInKB(baloPath),\n+                    1000, outStream, ProgressBarStyle.ASCII, \" KB\", 1);\n+                    FileInputStream fis = new FileInputStream(baloPath.toFile())) {\n+                while ((count = fis.read(buffer)) > 0) {\n+                    outputStream.write(buffer, 0, count);\n+                    outputStream.flush();\n+                    progressBar.stepBy((long) NO_OF_BYTES);\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw ErrorUtil.createCommandException(\"error occurred while uploading balo to central: \" + e.getMessage());\n+        }\n+\n+        try {\n+            int statusCode = getStatusCode(conn);\n+            // 200 - Module pushed successfully\n+            // Other - Error occurred, json returned with the error message\n+            if (statusCode == HttpURLConnection.HTTP_OK) {\n+                outStream.println(org + \"/\" + name + \":\" + version + \" pushed to central successfully\");\n+            } else if (statusCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n+                errStream.println(\"unauthorized access token for organization: \" + org);\n+            } else if (statusCode == HttpURLConnection.HTTP_BAD_REQUEST) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getErrorStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(reader, Error.class);\n+\n+                    if (errorJsonSchema.getMessage() != null && !\"\".equals(errorJsonSchema.getMessage())) {\n+                        throw ErrorUtil.createCommandException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw ErrorUtil.createCommandException(\n+                                ERR_CANNOT_PUSH + \"'\" + org + \"/\" + name + \":\" + version + \"' reason:\" + reader.lines()\n+                                        .collect(Collectors.joining(\"\\n\")));\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(\n+                            ERR_CANNOT_PUSH + \"'\" + org + \"/\" + name + \":\" + version + \"' to the remote repository '\"\n+                                    + conn.getURL() + \"'\");\n+                }\n+            } else {\n+                throw ErrorUtil.createCommandException(\n+                        ERR_CANNOT_PUSH + \"'\" + org + \"/\" + name + \":\" + version + \"' to the remote repository '\"\n+                                + conn.getURL() + \"'\");\n+            }\n+        } finally {\n+            conn.disconnect();\n+            Authenticator.setDefault(null);\n+        }\n+    }\n+\n+    public void pullPackage(String org, String name, String version, Path packagePathInBaloCache,\n+            String supportedPlatform, boolean isBuild) {\n+        LogFormatter logFormatter = new LogFormatter();\n+        if (isBuild) {\n+            logFormatter = new BuildLogFormatter();\n+        }\n+\n+        String url = PACKAGES + \"/\" + org + \"/\" + name;\n+        // append version to url if available\n+        if (null != version && !version.isEmpty()) {\n+            url = url + \"/\" + version;\n+        }\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(url);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // Set headers\n+        conn.setRequestProperty(BALLERINA_PLATFORM, supportedPlatform);\n+        conn.setRequestProperty(BAL_LANG_SPEC_VERSION, IMPLEMENTATION_VERSION);\n+        conn.setRequestProperty(ACCEPT_ENCODING, IDENTITY);\n+        conn.setRequestProperty(USER_AGENT, RepoUtils.getBallerinaVersion());\n+\n+        try {\n+            // 302   - Package is found\n+            // Other - Error occurred, json returned with the error message\n+            if (getStatusCode(conn) == HttpURLConnection.HTTP_MOVED_TEMP) {\n+                // get redirect url from \"location\" header field\n+                String newUrl = conn.getHeaderField(LOCATION);\n+                String contentDisposition = conn.getHeaderField(CONTENT_DISPOSITION);\n+\n+                conn = createHttpUrlConnection(newUrl);\n+                conn.setRequestProperty(CONTENT_DISPOSITION, contentDisposition);\n+\n+                boolean isNightlyBuild = RepoUtils.getBallerinaVersion().contains(\"SNAPSHOT\");\n+                createBaloInHomeRepo(conn, packagePathInBaloCache, org + \"/\" + name, isNightlyBuild, newUrl,\n+                        contentDisposition, outStream, logFormatter);\n+            } else {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getErrorStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(reader, Error.class);\n+                    throw ErrorUtil\n+                            .createCommandException(logFormatter.formatLog(\"error: \" + errorJsonSchema.getMessage()));\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(logFormatter.formatLog(\n+                            \"failed to pull the package '\" + org + \"/\" + name + \"' from the remote repository '\" + url\n+                                    + \"'\"));\n+                }\n+            }\n+        } catch (Exception e) {\n+            throw ErrorUtil.createCommandException(e.getMessage());\n+        } finally {\n+            conn.disconnect();\n+            Authenticator.setDefault(null);\n+        }\n+    }\n+\n+    /**\n+     * Search packages in registry\n+     */\n+    public PackageSearchResult searchPackage(String query) {\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(PACKAGES + \"/\" + \"?q=\" + query);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 324}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI5NzUwNQ==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r518297505", "createdAt": "2020-11-05T19:13:21Z", "author": {"login": "pramodya1994"}, "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.central.client;\n+\n+import com.google.gson.Gson;\n+import io.ballerina.projects.balo.BaloProject;\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.central.client.model.Error;\n+import org.ballerinalang.central.client.model.Package;\n+import org.ballerinalang.central.client.model.PackageSearchResult;\n+import org.ballerinalang.central.client.util.BuildLogFormatter;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.ErrorUtil;\n+import org.ballerinalang.central.client.util.LogFormatter;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.central.client.util.Utils;\n+import org.ballerinalang.toml.model.Settings;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+\n+import java.io.BufferedReader;\n+import java.io.DataOutputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.net.Proxy;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.file.Path;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.central.client.util.Utils.authenticate;\n+import static org.ballerinalang.central.client.util.Utils.convertToUrl;\n+import static org.ballerinalang.central.client.util.Utils.createBaloInHomeRepo;\n+import static org.ballerinalang.central.client.util.Utils.getBallerinaCentralCliTokenUrl;\n+import static org.ballerinalang.central.client.util.Utils.getStatusCode;\n+import static org.ballerinalang.central.client.util.Utils.getTotalFileSizeInKB;\n+import static org.ballerinalang.central.client.util.Utils.initializeProxy;\n+import static org.ballerinalang.central.client.util.Utils.initializeSsl;\n+import static org.ballerinalang.central.client.util.Utils.readSettings;\n+import static org.ballerinalang.central.client.util.Utils.setRequestMethod;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.ACCEPT_ENCODING;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.APPLICATION_OCTET_STREAM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.AUTHORIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BALLERINA_PLATFORM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BAL_LANG_SPEC_VERSION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_DISPOSITION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_TYPE;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.IDENTITY;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.LOCATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.PUSH_ORGANIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.USER_AGENT;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.SETTINGS_FILE_NAME;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * {@code CentralAPIClient} is a client for the Central API.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CentralAPIClient {\n+\n+    private String accessToken;\n+    private Proxy proxy;\n+    private String baseUrl;\n+    protected PrintStream errStream;\n+    protected PrintStream outStream;\n+    private static final String PACKAGES = \"packages\";\n+    private static final String ERR_CANNOT_CONNECT = \"error: could not connect to remote repository to find package: \";\n+    private static final String ERR_CANNOT_PUSH = \"error: failed to push the package: \";\n+\n+    public CentralAPIClient() {\n+        String ballerinaCentralCliTokenUrl = getBallerinaCentralCliTokenUrl();\n+        Path ballerinaHomePath = RepoUtils.createAndGetHomeReposPath();\n+        Path settingsTomlFilePath = ballerinaHomePath.resolve(SETTINGS_FILE_NAME);\n+        Settings settings = readSettings();\n+\n+        this.errStream = System.err;\n+        this.outStream = System.out;\n+        this.baseUrl = getRemoteRepoURL();\n+        this.accessToken = authenticate(errStream, ballerinaCentralCliTokenUrl, settings, settingsTomlFilePath);\n+        this.proxy = initializeProxy(settings.getProxy());\n+    }\n+\n+    /**\n+     * Get package with version\n+     *\n+     * @param orgNamePath     The organization name of the package. (required)\n+     * @param packageNamePath The name of the package. (required)\n+     * @param version         The version or version range of the module. (required)\n+     * @return PackageJsonSchema\n+     */\n+    public Package getPackage(String orgNamePath, String packageNamePath, String version, String supportedPlatform) {\n+        initializeSsl();\n+        String url = PACKAGES + \"/\" + orgNamePath + \"/\" + packageNamePath;\n+        // append version to url if available\n+        if (null != version && !version.isEmpty()) {\n+            url = url + \"/\" + version;\n+        }\n+\n+        String pkg = orgNamePath + \"/\" + packageNamePath + \":\" + version;\n+        HttpURLConnection conn = createHttpUrlConnection(url);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // set implementation version\n+        conn.setRequestProperty(\"Ballerina-Platform\", supportedPlatform);\n+        conn.setRequestProperty(\"Ballerina-Language-Specification-Version\", IMPLEMENTATION_VERSION);\n+\n+        // status code and meaning\n+        //// 302 - module found\n+        //// 404 - module not found\n+        //// 400 - bad request sent\n+        //// 500 - backend is broken\n+        try {\n+            int statusCode = getStatusCode(conn);\n+            if (statusCode == HttpURLConnection.HTTP_OK) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    return new Gson().fromJson(reader, Package.class);\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else if (statusCode == HttpURLConnection.HTTP_NOT_FOUND) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(reader, Error.class);\n+                    if (errorJsonSchema.getMessage().contains(\"package not found:\")) {\n+                        throw new NoPackageException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw createLauncherException(\n+                                ERR_CANNOT_CONNECT + pkg + \". reason: \" + errorJsonSchema.getMessage());\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else if (statusCode == HttpURLConnection.HTTP_BAD_REQUEST) {\n+                try (BufferedReader errorStream = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(errorStream, Error.class);\n+\n+                    if (errorJsonSchema.getMessage() != null && !\"\".equals(errorJsonSchema.getMessage())) {\n+                        throw new CommandException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw createLauncherException(ERR_CANNOT_CONNECT + pkg + \". reason:\" + errorStream.lines()\n+                                .collect(Collectors.joining(\"\\n\")));\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else {\n+                throw createLauncherException(ERR_CANNOT_CONNECT + pkg + \".\");\n+            }\n+        } finally {\n+            conn.disconnect();\n+            Authenticator.setDefault(null);\n+        }\n+    }\n+\n+    /**\n+     * Pushing a package to registry.\n+     */\n+    public void pushPackage(Path baloPath) {\n+        final int NO_OF_BYTES = 64;\n+        final int BUFFER_SIZE = 1024 * NO_OF_BYTES;\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(PACKAGES);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.POST);\n+\n+        // Load balo project\n+        BaloProject baloProject = BaloProject.loadProject(baloPath);\n+        String org = baloProject.currentPackage().packageDescriptor().org().toString();\n+        String name = baloProject.currentPackage().packageDescriptor().name().toString();\n+        String version = baloProject.currentPackage().packageDescriptor().version().toString();\n+\n+        // Set headers\n+        conn.setRequestProperty(AUTHORIZATION, \"Bearer \" + this.accessToken);\n+        conn.setRequestProperty(PUSH_ORGANIZATION, org);\n+        conn.setRequestProperty(CONTENT_TYPE, APPLICATION_OCTET_STREAM);\n+\n+        conn.setDoOutput(true);\n+        conn.setChunkedStreamingMode(BUFFER_SIZE);\n+\n+        try (DataOutputStream outputStream = new DataOutputStream(conn.getOutputStream())) {\n+            // Send balo content by 1 kb chunks\n+            byte[] buffer = new byte[BUFFER_SIZE];\n+            int count;\n+            try (ProgressBar progressBar = new ProgressBar(\n+                    org + \"/\" + name + \":\" + version + \" [project repo -> central]\", getTotalFileSizeInKB(baloPath),\n+                    1000, outStream, ProgressBarStyle.ASCII, \" KB\", 1);\n+                    FileInputStream fis = new FileInputStream(baloPath.toFile())) {\n+                while ((count = fis.read(buffer)) > 0) {\n+                    outputStream.write(buffer, 0, count);\n+                    outputStream.flush();\n+                    progressBar.stepBy((long) NO_OF_BYTES);\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw ErrorUtil.createCommandException(\"error occurred while uploading balo to central: \" + e.getMessage());\n+        }\n+\n+        try {\n+            int statusCode = getStatusCode(conn);\n+            // 200 - Module pushed successfully\n+            // Other - Error occurred, json returned with the error message\n+            if (statusCode == HttpURLConnection.HTTP_OK) {\n+                outStream.println(org + \"/\" + name + \":\" + version + \" pushed to central successfully\");\n+            } else if (statusCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n+                errStream.println(\"unauthorized access token for organization: \" + org);\n+            } else if (statusCode == HttpURLConnection.HTTP_BAD_REQUEST) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getErrorStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(reader, Error.class);\n+\n+                    if (errorJsonSchema.getMessage() != null && !\"\".equals(errorJsonSchema.getMessage())) {\n+                        throw ErrorUtil.createCommandException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw ErrorUtil.createCommandException(\n+                                ERR_CANNOT_PUSH + \"'\" + org + \"/\" + name + \":\" + version + \"' reason:\" + reader.lines()\n+                                        .collect(Collectors.joining(\"\\n\")));\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(\n+                            ERR_CANNOT_PUSH + \"'\" + org + \"/\" + name + \":\" + version + \"' to the remote repository '\"\n+                                    + conn.getURL() + \"'\");\n+                }\n+            } else {\n+                throw ErrorUtil.createCommandException(\n+                        ERR_CANNOT_PUSH + \"'\" + org + \"/\" + name + \":\" + version + \"' to the remote repository '\"\n+                                + conn.getURL() + \"'\");\n+            }\n+        } finally {\n+            conn.disconnect();\n+            Authenticator.setDefault(null);\n+        }\n+    }\n+\n+    public void pullPackage(String org, String name, String version, Path packagePathInBaloCache,\n+            String supportedPlatform, boolean isBuild) {\n+        LogFormatter logFormatter = new LogFormatter();\n+        if (isBuild) {\n+            logFormatter = new BuildLogFormatter();\n+        }\n+\n+        String url = PACKAGES + \"/\" + org + \"/\" + name;\n+        // append version to url if available\n+        if (null != version && !version.isEmpty()) {\n+            url = url + \"/\" + version;\n+        }\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(url);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // Set headers\n+        conn.setRequestProperty(BALLERINA_PLATFORM, supportedPlatform);\n+        conn.setRequestProperty(BAL_LANG_SPEC_VERSION, IMPLEMENTATION_VERSION);\n+        conn.setRequestProperty(ACCEPT_ENCODING, IDENTITY);\n+        conn.setRequestProperty(USER_AGENT, RepoUtils.getBallerinaVersion());\n+\n+        try {\n+            // 302   - Package is found\n+            // Other - Error occurred, json returned with the error message\n+            if (getStatusCode(conn) == HttpURLConnection.HTTP_MOVED_TEMP) {\n+                // get redirect url from \"location\" header field\n+                String newUrl = conn.getHeaderField(LOCATION);\n+                String contentDisposition = conn.getHeaderField(CONTENT_DISPOSITION);\n+\n+                conn = createHttpUrlConnection(newUrl);\n+                conn.setRequestProperty(CONTENT_DISPOSITION, contentDisposition);\n+\n+                boolean isNightlyBuild = RepoUtils.getBallerinaVersion().contains(\"SNAPSHOT\");\n+                createBaloInHomeRepo(conn, packagePathInBaloCache, org + \"/\" + name, isNightlyBuild, newUrl,\n+                        contentDisposition, outStream, logFormatter);\n+            } else {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getErrorStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(reader, Error.class);\n+                    throw ErrorUtil\n+                            .createCommandException(logFormatter.formatLog(\"error: \" + errorJsonSchema.getMessage()));\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(logFormatter.formatLog(\n+                            \"failed to pull the package '\" + org + \"/\" + name + \"' from the remote repository '\" + url\n+                                    + \"'\"));\n+                }\n+            }\n+        } catch (Exception e) {\n+            throw ErrorUtil.createCommandException(e.getMessage());\n+        } finally {\n+            conn.disconnect();\n+            Authenticator.setDefault(null);\n+        }\n+    }\n+\n+    /**\n+     * Search packages in registry\n+     */\n+    public PackageSearchResult searchPackage(String query) {\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(PACKAGES + \"/\" + \"?q=\" + query);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5MDc5NQ=="}, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 324}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjYzNjQ0OnYy", "diffSide": "RIGHT", "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/util/Utils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMTo1NTo0MlrOHt_9AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxOToxMzoyOVrOHuSX6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5NTc3Nw==", "bodyText": "We can replace getRequestMethodAsString(method) with method.name() as I know", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r517995777", "createdAt": "2020-11-05T11:55:42Z", "author": {"login": "hemikak"}, "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/util/Utils.java", "diffHunk": "@@ -0,0 +1,471 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.central.client.util;\n+\n+import io.ballerina.projects.utils.ProjectConstants;\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.central.client.TokenUpdater;\n+import org.ballerinalang.toml.model.Settings;\n+import org.ballerinalang.toml.parser.SettingsProcessor;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.compiler.packaging.converters.URIDryConverter;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirConstants;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+\n+import javax.net.ssl.HttpsURLConnection;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.X509TrustManager;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.net.InetSocketAddress;\n+import java.net.MalformedURLException;\n+import java.net.ProtocolException;\n+import java.net.Proxy;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.security.KeyManagementException;\n+import java.security.NoSuchAlgorithmException;\n+\n+import static org.ballerinalang.central.client.util.CentralClientConstants.RESOLVED_REQUESTED_URI;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.SSL;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.VERSION_REGEX;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.util.RepoUtils.SET_BALLERINA_DEV_CENTRAL;\n+import static org.wso2.ballerinalang.util.RepoUtils.SET_BALLERINA_STAGE_CENTRAL;\n+\n+/**\n+ * Utils class for this package.\n+ */\n+public class Utils {\n+\n+    private Utils() {\n+    }\n+\n+    /**\n+     * Request method types.\n+     */\n+    public enum RequestMethod {\n+        GET, POST\n+    }\n+\n+    private static TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {\n+        public java.security.cert.X509Certificate[] getAcceptedIssuers() {\n+            return new java.security.cert.X509Certificate[] {};\n+        }\n+\n+        public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {\n+            //No need to implement.\n+        }\n+\n+        public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {\n+            //No need to implement.\n+        }\n+    } };\n+\n+    /**\n+     * Checks if the access token is available in Settings.toml or not.\n+     *\n+     * @return access token if its present\n+     */\n+    public static String authenticate(PrintStream errStream, String ballerinaCentralCliTokenUrl, Settings settings,\n+            Path settingsTomlFilePath) {\n+        String accessToken = getAccessTokenOfCLI(settings);\n+\n+        if (accessToken.isEmpty()) {\n+            try {\n+                errStream.println(\n+                        \"Opening the web browser to \" + ballerinaCentralCliTokenUrl + \" for auto token update ...\");\n+\n+                BrowserLauncher.startInDefaultBrowser(ballerinaCentralCliTokenUrl);\n+            } catch (IOException e) {\n+                throw LauncherUtils.createLauncherException(\n+                        \"Access token is missing in \" + settingsTomlFilePath.toString()\n+                                + \"\\nAuto update failed. Please visit https://central.ballerina.io\");\n+            }\n+            long modifiedTimeOfFileAtStart = getLastModifiedTimeOfFile(settingsTomlFilePath);\n+            TokenUpdater.execute(settingsTomlFilePath.toString());\n+\n+            boolean waitForToken = true;\n+            while (waitForToken) {\n+                pause();\n+                long modifiedTimeOfFileAfter = getLastModifiedTimeOfFile(settingsTomlFilePath);\n+                if (modifiedTimeOfFileAtStart != modifiedTimeOfFileAfter) {\n+                    accessToken = getAccessTokenOfCLI(settings);\n+                    if (accessToken.isEmpty()) {\n+                        throw createLauncherException(\n+                                \"Access token is missing in \" + settingsTomlFilePath.toString() + \"\\nPlease \"\n+                                        + \"visit https://central.ballerina.io\");\n+                    } else {\n+                        waitForToken = false;\n+                    }\n+                }\n+            }\n+        }\n+        return accessToken;\n+    }\n+\n+    /**\n+     * Read Settings.toml to populate the configurations.\n+     *\n+     * @return {@link Settings} settings object\n+     */\n+    public static Settings readSettings() {\n+        Path settingsFilePath = RepoUtils.createAndGetHomeReposPath().resolve(ProjectConstants.SETTINGS_FILE_NAME);\n+        try {\n+            return SettingsProcessor.parseTomlContentFromFile(settingsFilePath);\n+        } catch (IOException e) {\n+            return new Settings();\n+        }\n+    }\n+\n+    /**\n+     * initialize proxy if proxy is available in settings.toml.\n+     *\n+     * @return proxy\n+     * @param proxy\n+     */\n+    public static Proxy initializeProxy(org.ballerinalang.toml.model.Proxy proxy) {\n+        if (!\"\".equals(proxy.getHost())) {\n+            InetSocketAddress proxyInet = new InetSocketAddress(proxy.getHost(), proxy.getPort());\n+            if (!\"\".equals(proxy.getUserName()) && \"\".equals(proxy.getPassword())) {\n+                Authenticator authenticator = new URIDryConverter.RemoteAuthenticator();\n+                Authenticator.setDefault(authenticator);\n+            }\n+            return new Proxy(Proxy.Type.HTTP, proxyInet);\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Read the access token generated for the CLI.\n+     *\n+     * @return access token for generated for the CLI\n+     */\n+    static String getAccessTokenOfCLI(Settings settings) {\n+        // The access token can be specified as an environment variable or in 'Settings.toml'. First we would check if\n+        // the access token was specified as an environment variable. If not we would read it from 'Settings.toml'\n+        String tokenAsEnvVar = System.getenv(ProjectDirConstants.BALLERINA_CENTRAL_ACCESS_TOKEN);\n+        if (tokenAsEnvVar != null) {\n+            return tokenAsEnvVar;\n+        }\n+        if (settings.getCentral() != null) {\n+            return settings.getCentral().getAccessToken();\n+        }\n+        return \"\";\n+    }\n+\n+    /**\n+     * Pause for 3s to check if the access token is received.\n+     */\n+    private static void pause() {\n+        try {\n+            Thread.sleep(3000);\n+        } catch (InterruptedException ex) {\n+            throw createLauncherException(\"Error occurred while retrieving the access token\");\n+        }\n+    }\n+\n+    /**\n+     * Get last modified time of file.\n+     *\n+     * @param path file path\n+     * @return last modified time in milliseconds\n+     */\n+    static long getLastModifiedTimeOfFile(Path path) {\n+        if (!Files.isRegularFile(path)) {\n+            return -1;\n+        }\n+        try {\n+            return Files.getLastModifiedTime(path).toMillis();\n+        } catch (IOException ex) {\n+            throw createLauncherException(\"Error occurred when reading file for token \" + path.toString());\n+        }\n+    }\n+\n+    public static String getBallerinaCentralCliTokenUrl() {\n+        if (SET_BALLERINA_STAGE_CENTRAL) {\n+            return \"https://staging-central.ballerina.io/cli-token\";\n+        } else if (SET_BALLERINA_DEV_CENTRAL) {\n+            return \"https://dev-central.ballerina.io/cli-token\";\n+        } else {\n+            return \"https://central.ballerina.io/cli-token\";\n+        }\n+    }\n+\n+    /**\n+     * Create the balo in home repo.\n+     *\n+     * @param conn               http connection\n+     * @param pkgPathInBaloCache package path in balo cache, <user.home>.ballerina/balo_cache/<org-name>/<pkg-name>\n+     * @param pkgNameWithOrg     package name with org, <org-name>/<pkg-name>\n+     * @param isNightlyBuild     is nightly build\n+     * @param newUrl             new redirect url\n+     * @param contentDisposition content disposition header\n+     * @param outStream          Output print stream\n+     * @param logFormatter       log formatter\n+     */\n+    public static void createBaloInHomeRepo(HttpURLConnection conn, Path pkgPathInBaloCache, String pkgNameWithOrg,\n+            boolean isNightlyBuild, String newUrl, String contentDisposition, PrintStream outStream,\n+            LogFormatter logFormatter) {\n+        long responseContentLength = conn.getContentLengthLong();\n+        if (responseContentLength <= 0) {\n+            throw ErrorUtil.createCommandException(\n+                    logFormatter.formatLog(\"invalid response from the server, please try again\"));\n+        }\n+        String resolvedURI = conn.getHeaderField(RESOLVED_REQUESTED_URI);\n+        if (resolvedURI == null || resolvedURI.equals(\"\")) {\n+            resolvedURI = newUrl;\n+        }\n+        String[] uriParts = resolvedURI.split(\"/\");\n+        String pkgVersion = uriParts[uriParts.length - 2];\n+\n+        validatePackageVersion(pkgVersion, logFormatter);\n+        String baloFile = getBaloFileName(contentDisposition, uriParts[uriParts.length - 1]);\n+        Path baloCacheWithPkgPath = pkgPathInBaloCache.resolve(pkgVersion);\n+        //<user.home>.ballerina/balo_cache/<org-name>/<pkg-name>/<pkg-version>\n+\n+        Path baloPath = Paths.get(baloCacheWithPkgPath.toString(), baloFile);\n+        if (baloPath.toFile().exists()) {\n+            throw ErrorUtil.createCommandException(\n+                    logFormatter.formatLog(\"package already exists in the home repository: \" + baloPath.toString()));\n+        }\n+\n+        createBaloFileDirectory(baloCacheWithPkgPath, logFormatter);\n+        writeBaloFile(conn, baloPath, pkgNameWithOrg + \":\" + pkgVersion, responseContentLength, outStream,\n+                logFormatter);\n+        handleNightlyBuild(isNightlyBuild, baloCacheWithPkgPath, logFormatter);\n+    }\n+\n+    /**\n+     * Validate package version with the regex.\n+     *\n+     * @param pkgVersion   package version\n+     * @param logFormatter log formatter\n+     */\n+    static void validatePackageVersion(String pkgVersion, LogFormatter logFormatter) {\n+        if (!pkgVersion.matches(VERSION_REGEX)) {\n+            throw ErrorUtil.createCommandException(logFormatter.formatLog(\"package version could not be detected\"));\n+        }\n+    }\n+\n+    /**\n+     * Get balo file name from content disposition header if available.\n+     *\n+     * @param contentDisposition content disposition header value\n+     * @param baloFile           balo file name taken from RESOLVED_REQUESTED_URI\n+     * @return balo file name\n+     */\n+    private static String getBaloFileName(String contentDisposition, String baloFile) {\n+        if (contentDisposition != null && !contentDisposition.equals(\"\")) {\n+            return contentDisposition.substring(\"attachment; filename=\".length());\n+        } else {\n+            return baloFile;\n+        }\n+    }\n+\n+    /**\n+     * Create balo file directory.\n+     *\n+     * @param fullPathToStoreBalo full path to store the balo file\n+     *                            <user.home>.ballerina/balo_cache/<org-name>/<pkg-name>/<pkg-version>\n+     * @param logFormatter        log formatter\n+     */\n+    private static void createBaloFileDirectory(Path fullPathToStoreBalo, LogFormatter logFormatter) {\n+        try {\n+            Files.createDirectories(fullPathToStoreBalo);\n+        } catch (IOException e) {\n+            throw ErrorUtil.createCommandException(logFormatter.formatLog(\"error creating directory for balo file\"));\n+        }\n+    }\n+\n+    /**\n+     * Write balo file to the home repo.\n+     *\n+     * @param conn             http connection\n+     * @param baloPath         path of the balo file\n+     * @param fullPkgName      full package name, <org-name>/<pkg-name>:<pkg-version>\n+     * @param resContentLength response content length\n+     * @param outStream        Output print stream\n+     * @param logFormatter     log formatter\n+     */\n+    static void writeBaloFile(HttpURLConnection conn, Path baloPath, String fullPkgName, long resContentLength,\n+             PrintStream outStream, LogFormatter logFormatter) {\n+        try (InputStream inputStream = conn.getInputStream();\n+                FileOutputStream outputStream = new FileOutputStream(baloPath.toString())) {\n+            writeAndHandleProgress(inputStream, outputStream, resContentLength / 1024, fullPkgName, outStream,\n+                    logFormatter);\n+        } catch (IOException e) {\n+            throw ErrorUtil.createCommandException(\n+                    logFormatter.formatLog(\"error occurred copying the balo file: \" + e.getMessage()));\n+        }\n+    }\n+\n+    /**\n+     * Handle nightly build.\n+     *\n+     * @param isNightlyBuild       is nightly build\n+     * @param baloCacheWithPkgPath balo cache with package path\n+     * @param logFormatter         log formatter\n+     */\n+    private static void handleNightlyBuild(boolean isNightlyBuild, Path baloCacheWithPkgPath,\n+            LogFormatter logFormatter) {\n+        if (isNightlyBuild) {\n+            // If its a nightly build tag the file as a module from nightly\n+            Path nightlyBuildMetaFile = Paths.get(baloCacheWithPkgPath.toString(), \"nightly.build\");\n+            if (!nightlyBuildMetaFile.toFile().exists()) {\n+                createNightlyBuildMetaFile(nightlyBuildMetaFile, logFormatter);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Show progress of the writing the balo file.\n+     *\n+     * @param inputStream   response input stream\n+     * @param outputStream  home repo balo file output stream\n+     * @param totalSizeInKB response input stream size in kb\n+     * @param fullPkgName   full package name, <org-name>/<pkg-name>:<pkg-version>\n+     * @param outStream     Output print stream\n+     * @param logFormatter  log formatter\n+     */\n+    private static void writeAndHandleProgress(InputStream inputStream, FileOutputStream outputStream,\n+            long totalSizeInKB, String fullPkgName, PrintStream outStream, LogFormatter logFormatter) {\n+        int count;\n+        byte[] buffer = new byte[1024];\n+\n+        try (ProgressBar progressBar = new ProgressBar(fullPkgName + \" [central.ballerina.io -> home repo] \",\n+                totalSizeInKB, 1000, outStream, ProgressBarStyle.ASCII, \" KB\", 1)) {\n+            while ((count = inputStream.read(buffer)) > 0) {\n+                outputStream.write(buffer, 0, count);\n+                progressBar.step();\n+            }\n+        } catch (IOException e) {\n+            outStream.println(logFormatter.formatLog(fullPkgName + \"pulling the package from central failed\"));\n+        } finally {\n+            outStream.println(logFormatter.formatLog(fullPkgName + \" pulled from central successfully\"));\n+        }\n+    }\n+\n+    /**\n+     * Create nightly build meta file.\n+     *\n+     * @param nightlyBuildMetaFilePath nightly build meta file path\n+     * @param logFormatter             log formatter\n+     */\n+    private static void createNightlyBuildMetaFile(Path nightlyBuildMetaFilePath, LogFormatter logFormatter) {\n+        try {\n+            Files.createFile(nightlyBuildMetaFilePath);\n+        } catch (Exception e) {\n+            throw ErrorUtil.createCommandException(\n+                    logFormatter.formatLog(\"error occurred while creating nightly.build file.\"));\n+        }\n+    }\n+\n+    /**\n+     * Convert string to URL.\n+     *\n+     * @param url string URL\n+     * @return URL\n+     */\n+    public static URL convertToUrl(String url) {\n+        try {\n+            return new URL(url);\n+        } catch (MalformedURLException e) {\n+            throw ErrorUtil.createCommandException(e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Initialize SSL.\n+     */\n+    public static void initializeSsl() {\n+        try {\n+            SSLContext sc = SSLContext.getInstance(SSL);\n+            sc.init(null, trustAllCerts, new java.security.SecureRandom());\n+            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());\n+        } catch (NoSuchAlgorithmException | KeyManagementException e) {\n+            throw ErrorUtil.createCommandException(\"initializing SSL failed: \" + e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Set request method of the http connection.\n+     *\n+     * @param conn   http connection\n+     * @param method request method\n+     */\n+    public static void setRequestMethod(HttpURLConnection conn, RequestMethod method) {\n+        try {\n+            conn.setRequestMethod(getRequestMethodAsString(method));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 424}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI5NzU3Ng==", "bodyText": "Added", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r518297576", "createdAt": "2020-11-05T19:13:29Z", "author": {"login": "pramodya1994"}, "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/util/Utils.java", "diffHunk": "@@ -0,0 +1,471 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.central.client.util;\n+\n+import io.ballerina.projects.utils.ProjectConstants;\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.central.client.TokenUpdater;\n+import org.ballerinalang.toml.model.Settings;\n+import org.ballerinalang.toml.parser.SettingsProcessor;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.compiler.packaging.converters.URIDryConverter;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirConstants;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+\n+import javax.net.ssl.HttpsURLConnection;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.X509TrustManager;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.net.InetSocketAddress;\n+import java.net.MalformedURLException;\n+import java.net.ProtocolException;\n+import java.net.Proxy;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.security.KeyManagementException;\n+import java.security.NoSuchAlgorithmException;\n+\n+import static org.ballerinalang.central.client.util.CentralClientConstants.RESOLVED_REQUESTED_URI;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.SSL;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.VERSION_REGEX;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.util.RepoUtils.SET_BALLERINA_DEV_CENTRAL;\n+import static org.wso2.ballerinalang.util.RepoUtils.SET_BALLERINA_STAGE_CENTRAL;\n+\n+/**\n+ * Utils class for this package.\n+ */\n+public class Utils {\n+\n+    private Utils() {\n+    }\n+\n+    /**\n+     * Request method types.\n+     */\n+    public enum RequestMethod {\n+        GET, POST\n+    }\n+\n+    private static TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {\n+        public java.security.cert.X509Certificate[] getAcceptedIssuers() {\n+            return new java.security.cert.X509Certificate[] {};\n+        }\n+\n+        public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {\n+            //No need to implement.\n+        }\n+\n+        public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {\n+            //No need to implement.\n+        }\n+    } };\n+\n+    /**\n+     * Checks if the access token is available in Settings.toml or not.\n+     *\n+     * @return access token if its present\n+     */\n+    public static String authenticate(PrintStream errStream, String ballerinaCentralCliTokenUrl, Settings settings,\n+            Path settingsTomlFilePath) {\n+        String accessToken = getAccessTokenOfCLI(settings);\n+\n+        if (accessToken.isEmpty()) {\n+            try {\n+                errStream.println(\n+                        \"Opening the web browser to \" + ballerinaCentralCliTokenUrl + \" for auto token update ...\");\n+\n+                BrowserLauncher.startInDefaultBrowser(ballerinaCentralCliTokenUrl);\n+            } catch (IOException e) {\n+                throw LauncherUtils.createLauncherException(\n+                        \"Access token is missing in \" + settingsTomlFilePath.toString()\n+                                + \"\\nAuto update failed. Please visit https://central.ballerina.io\");\n+            }\n+            long modifiedTimeOfFileAtStart = getLastModifiedTimeOfFile(settingsTomlFilePath);\n+            TokenUpdater.execute(settingsTomlFilePath.toString());\n+\n+            boolean waitForToken = true;\n+            while (waitForToken) {\n+                pause();\n+                long modifiedTimeOfFileAfter = getLastModifiedTimeOfFile(settingsTomlFilePath);\n+                if (modifiedTimeOfFileAtStart != modifiedTimeOfFileAfter) {\n+                    accessToken = getAccessTokenOfCLI(settings);\n+                    if (accessToken.isEmpty()) {\n+                        throw createLauncherException(\n+                                \"Access token is missing in \" + settingsTomlFilePath.toString() + \"\\nPlease \"\n+                                        + \"visit https://central.ballerina.io\");\n+                    } else {\n+                        waitForToken = false;\n+                    }\n+                }\n+            }\n+        }\n+        return accessToken;\n+    }\n+\n+    /**\n+     * Read Settings.toml to populate the configurations.\n+     *\n+     * @return {@link Settings} settings object\n+     */\n+    public static Settings readSettings() {\n+        Path settingsFilePath = RepoUtils.createAndGetHomeReposPath().resolve(ProjectConstants.SETTINGS_FILE_NAME);\n+        try {\n+            return SettingsProcessor.parseTomlContentFromFile(settingsFilePath);\n+        } catch (IOException e) {\n+            return new Settings();\n+        }\n+    }\n+\n+    /**\n+     * initialize proxy if proxy is available in settings.toml.\n+     *\n+     * @return proxy\n+     * @param proxy\n+     */\n+    public static Proxy initializeProxy(org.ballerinalang.toml.model.Proxy proxy) {\n+        if (!\"\".equals(proxy.getHost())) {\n+            InetSocketAddress proxyInet = new InetSocketAddress(proxy.getHost(), proxy.getPort());\n+            if (!\"\".equals(proxy.getUserName()) && \"\".equals(proxy.getPassword())) {\n+                Authenticator authenticator = new URIDryConverter.RemoteAuthenticator();\n+                Authenticator.setDefault(authenticator);\n+            }\n+            return new Proxy(Proxy.Type.HTTP, proxyInet);\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Read the access token generated for the CLI.\n+     *\n+     * @return access token for generated for the CLI\n+     */\n+    static String getAccessTokenOfCLI(Settings settings) {\n+        // The access token can be specified as an environment variable or in 'Settings.toml'. First we would check if\n+        // the access token was specified as an environment variable. If not we would read it from 'Settings.toml'\n+        String tokenAsEnvVar = System.getenv(ProjectDirConstants.BALLERINA_CENTRAL_ACCESS_TOKEN);\n+        if (tokenAsEnvVar != null) {\n+            return tokenAsEnvVar;\n+        }\n+        if (settings.getCentral() != null) {\n+            return settings.getCentral().getAccessToken();\n+        }\n+        return \"\";\n+    }\n+\n+    /**\n+     * Pause for 3s to check if the access token is received.\n+     */\n+    private static void pause() {\n+        try {\n+            Thread.sleep(3000);\n+        } catch (InterruptedException ex) {\n+            throw createLauncherException(\"Error occurred while retrieving the access token\");\n+        }\n+    }\n+\n+    /**\n+     * Get last modified time of file.\n+     *\n+     * @param path file path\n+     * @return last modified time in milliseconds\n+     */\n+    static long getLastModifiedTimeOfFile(Path path) {\n+        if (!Files.isRegularFile(path)) {\n+            return -1;\n+        }\n+        try {\n+            return Files.getLastModifiedTime(path).toMillis();\n+        } catch (IOException ex) {\n+            throw createLauncherException(\"Error occurred when reading file for token \" + path.toString());\n+        }\n+    }\n+\n+    public static String getBallerinaCentralCliTokenUrl() {\n+        if (SET_BALLERINA_STAGE_CENTRAL) {\n+            return \"https://staging-central.ballerina.io/cli-token\";\n+        } else if (SET_BALLERINA_DEV_CENTRAL) {\n+            return \"https://dev-central.ballerina.io/cli-token\";\n+        } else {\n+            return \"https://central.ballerina.io/cli-token\";\n+        }\n+    }\n+\n+    /**\n+     * Create the balo in home repo.\n+     *\n+     * @param conn               http connection\n+     * @param pkgPathInBaloCache package path in balo cache, <user.home>.ballerina/balo_cache/<org-name>/<pkg-name>\n+     * @param pkgNameWithOrg     package name with org, <org-name>/<pkg-name>\n+     * @param isNightlyBuild     is nightly build\n+     * @param newUrl             new redirect url\n+     * @param contentDisposition content disposition header\n+     * @param outStream          Output print stream\n+     * @param logFormatter       log formatter\n+     */\n+    public static void createBaloInHomeRepo(HttpURLConnection conn, Path pkgPathInBaloCache, String pkgNameWithOrg,\n+            boolean isNightlyBuild, String newUrl, String contentDisposition, PrintStream outStream,\n+            LogFormatter logFormatter) {\n+        long responseContentLength = conn.getContentLengthLong();\n+        if (responseContentLength <= 0) {\n+            throw ErrorUtil.createCommandException(\n+                    logFormatter.formatLog(\"invalid response from the server, please try again\"));\n+        }\n+        String resolvedURI = conn.getHeaderField(RESOLVED_REQUESTED_URI);\n+        if (resolvedURI == null || resolvedURI.equals(\"\")) {\n+            resolvedURI = newUrl;\n+        }\n+        String[] uriParts = resolvedURI.split(\"/\");\n+        String pkgVersion = uriParts[uriParts.length - 2];\n+\n+        validatePackageVersion(pkgVersion, logFormatter);\n+        String baloFile = getBaloFileName(contentDisposition, uriParts[uriParts.length - 1]);\n+        Path baloCacheWithPkgPath = pkgPathInBaloCache.resolve(pkgVersion);\n+        //<user.home>.ballerina/balo_cache/<org-name>/<pkg-name>/<pkg-version>\n+\n+        Path baloPath = Paths.get(baloCacheWithPkgPath.toString(), baloFile);\n+        if (baloPath.toFile().exists()) {\n+            throw ErrorUtil.createCommandException(\n+                    logFormatter.formatLog(\"package already exists in the home repository: \" + baloPath.toString()));\n+        }\n+\n+        createBaloFileDirectory(baloCacheWithPkgPath, logFormatter);\n+        writeBaloFile(conn, baloPath, pkgNameWithOrg + \":\" + pkgVersion, responseContentLength, outStream,\n+                logFormatter);\n+        handleNightlyBuild(isNightlyBuild, baloCacheWithPkgPath, logFormatter);\n+    }\n+\n+    /**\n+     * Validate package version with the regex.\n+     *\n+     * @param pkgVersion   package version\n+     * @param logFormatter log formatter\n+     */\n+    static void validatePackageVersion(String pkgVersion, LogFormatter logFormatter) {\n+        if (!pkgVersion.matches(VERSION_REGEX)) {\n+            throw ErrorUtil.createCommandException(logFormatter.formatLog(\"package version could not be detected\"));\n+        }\n+    }\n+\n+    /**\n+     * Get balo file name from content disposition header if available.\n+     *\n+     * @param contentDisposition content disposition header value\n+     * @param baloFile           balo file name taken from RESOLVED_REQUESTED_URI\n+     * @return balo file name\n+     */\n+    private static String getBaloFileName(String contentDisposition, String baloFile) {\n+        if (contentDisposition != null && !contentDisposition.equals(\"\")) {\n+            return contentDisposition.substring(\"attachment; filename=\".length());\n+        } else {\n+            return baloFile;\n+        }\n+    }\n+\n+    /**\n+     * Create balo file directory.\n+     *\n+     * @param fullPathToStoreBalo full path to store the balo file\n+     *                            <user.home>.ballerina/balo_cache/<org-name>/<pkg-name>/<pkg-version>\n+     * @param logFormatter        log formatter\n+     */\n+    private static void createBaloFileDirectory(Path fullPathToStoreBalo, LogFormatter logFormatter) {\n+        try {\n+            Files.createDirectories(fullPathToStoreBalo);\n+        } catch (IOException e) {\n+            throw ErrorUtil.createCommandException(logFormatter.formatLog(\"error creating directory for balo file\"));\n+        }\n+    }\n+\n+    /**\n+     * Write balo file to the home repo.\n+     *\n+     * @param conn             http connection\n+     * @param baloPath         path of the balo file\n+     * @param fullPkgName      full package name, <org-name>/<pkg-name>:<pkg-version>\n+     * @param resContentLength response content length\n+     * @param outStream        Output print stream\n+     * @param logFormatter     log formatter\n+     */\n+    static void writeBaloFile(HttpURLConnection conn, Path baloPath, String fullPkgName, long resContentLength,\n+             PrintStream outStream, LogFormatter logFormatter) {\n+        try (InputStream inputStream = conn.getInputStream();\n+                FileOutputStream outputStream = new FileOutputStream(baloPath.toString())) {\n+            writeAndHandleProgress(inputStream, outputStream, resContentLength / 1024, fullPkgName, outStream,\n+                    logFormatter);\n+        } catch (IOException e) {\n+            throw ErrorUtil.createCommandException(\n+                    logFormatter.formatLog(\"error occurred copying the balo file: \" + e.getMessage()));\n+        }\n+    }\n+\n+    /**\n+     * Handle nightly build.\n+     *\n+     * @param isNightlyBuild       is nightly build\n+     * @param baloCacheWithPkgPath balo cache with package path\n+     * @param logFormatter         log formatter\n+     */\n+    private static void handleNightlyBuild(boolean isNightlyBuild, Path baloCacheWithPkgPath,\n+            LogFormatter logFormatter) {\n+        if (isNightlyBuild) {\n+            // If its a nightly build tag the file as a module from nightly\n+            Path nightlyBuildMetaFile = Paths.get(baloCacheWithPkgPath.toString(), \"nightly.build\");\n+            if (!nightlyBuildMetaFile.toFile().exists()) {\n+                createNightlyBuildMetaFile(nightlyBuildMetaFile, logFormatter);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Show progress of the writing the balo file.\n+     *\n+     * @param inputStream   response input stream\n+     * @param outputStream  home repo balo file output stream\n+     * @param totalSizeInKB response input stream size in kb\n+     * @param fullPkgName   full package name, <org-name>/<pkg-name>:<pkg-version>\n+     * @param outStream     Output print stream\n+     * @param logFormatter  log formatter\n+     */\n+    private static void writeAndHandleProgress(InputStream inputStream, FileOutputStream outputStream,\n+            long totalSizeInKB, String fullPkgName, PrintStream outStream, LogFormatter logFormatter) {\n+        int count;\n+        byte[] buffer = new byte[1024];\n+\n+        try (ProgressBar progressBar = new ProgressBar(fullPkgName + \" [central.ballerina.io -> home repo] \",\n+                totalSizeInKB, 1000, outStream, ProgressBarStyle.ASCII, \" KB\", 1)) {\n+            while ((count = inputStream.read(buffer)) > 0) {\n+                outputStream.write(buffer, 0, count);\n+                progressBar.step();\n+            }\n+        } catch (IOException e) {\n+            outStream.println(logFormatter.formatLog(fullPkgName + \"pulling the package from central failed\"));\n+        } finally {\n+            outStream.println(logFormatter.formatLog(fullPkgName + \" pulled from central successfully\"));\n+        }\n+    }\n+\n+    /**\n+     * Create nightly build meta file.\n+     *\n+     * @param nightlyBuildMetaFilePath nightly build meta file path\n+     * @param logFormatter             log formatter\n+     */\n+    private static void createNightlyBuildMetaFile(Path nightlyBuildMetaFilePath, LogFormatter logFormatter) {\n+        try {\n+            Files.createFile(nightlyBuildMetaFilePath);\n+        } catch (Exception e) {\n+            throw ErrorUtil.createCommandException(\n+                    logFormatter.formatLog(\"error occurred while creating nightly.build file.\"));\n+        }\n+    }\n+\n+    /**\n+     * Convert string to URL.\n+     *\n+     * @param url string URL\n+     * @return URL\n+     */\n+    public static URL convertToUrl(String url) {\n+        try {\n+            return new URL(url);\n+        } catch (MalformedURLException e) {\n+            throw ErrorUtil.createCommandException(e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Initialize SSL.\n+     */\n+    public static void initializeSsl() {\n+        try {\n+            SSLContext sc = SSLContext.getInstance(SSL);\n+            sc.init(null, trustAllCerts, new java.security.SecureRandom());\n+            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());\n+        } catch (NoSuchAlgorithmException | KeyManagementException e) {\n+            throw ErrorUtil.createCommandException(\"initializing SSL failed: \" + e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Set request method of the http connection.\n+     *\n+     * @param conn   http connection\n+     * @param method request method\n+     */\n+    public static void setRequestMethod(HttpURLConnection conn, RequestMethod method) {\n+        try {\n+            conn.setRequestMethod(getRequestMethodAsString(method));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5NTc3Nw=="}, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 424}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjY0NDY1OnYy", "diffSide": "RIGHT", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMTo1Nzo0N1rOHuAByw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxOToxMzozNlrOHuSYJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5NzAwMw==", "bodyText": "Push package ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r517997003", "createdAt": "2020-11-05T11:57:47Z", "author": {"login": "hemikak"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "diffHunk": "@@ -0,0 +1,281 @@\n+/*\n+*  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.PackageDescriptor;\n+import io.ballerina.projects.PackageName;\n+import io.ballerina.projects.PackageOrg;\n+import io.ballerina.projects.PackageVersion;\n+import io.ballerina.projects.directory.BuildProject;\n+import io.ballerina.projects.utils.ProjectConstants;\n+import io.ballerina.projects.utils.ProjectUtils;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.ballerina.cli.cmd.Constants.PUSH_COMMAND;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * This class represents the \"ballerina push\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PUSH_COMMAND, description = \"push modules and binaries available locally to \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI5NzYzNw==", "bodyText": "Added", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r518297637", "createdAt": "2020-11-05T19:13:36Z", "author": {"login": "pramodya1994"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "diffHunk": "@@ -0,0 +1,281 @@\n+/*\n+*  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.PackageDescriptor;\n+import io.ballerina.projects.PackageName;\n+import io.ballerina.projects.PackageOrg;\n+import io.ballerina.projects.PackageVersion;\n+import io.ballerina.projects.directory.BuildProject;\n+import io.ballerina.projects.utils.ProjectConstants;\n+import io.ballerina.projects.utils.ProjectUtils;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.ballerina.cli.cmd.Constants.PUSH_COMMAND;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * This class represents the \"ballerina push\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PUSH_COMMAND, description = \"push modules and binaries available locally to \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5NzAwMw=="}, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjY1MTM3OnYy", "diffSide": "RIGHT", "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMTo1OToyOFrOHuAF4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxOToxMzo0M1rOHuSYXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5ODA1MA==", "bodyText": "This header is not needed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r517998050", "createdAt": "2020-11-05T11:59:28Z", "author": {"login": "hemikak"}, "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.central.client;\n+\n+import com.google.gson.Gson;\n+import io.ballerina.projects.balo.BaloProject;\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.central.client.model.Error;\n+import org.ballerinalang.central.client.model.Package;\n+import org.ballerinalang.central.client.model.PackageSearchResult;\n+import org.ballerinalang.central.client.util.BuildLogFormatter;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.ErrorUtil;\n+import org.ballerinalang.central.client.util.LogFormatter;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.central.client.util.Utils;\n+import org.ballerinalang.toml.model.Settings;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+\n+import java.io.BufferedReader;\n+import java.io.DataOutputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.net.Proxy;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.file.Path;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.central.client.util.Utils.authenticate;\n+import static org.ballerinalang.central.client.util.Utils.convertToUrl;\n+import static org.ballerinalang.central.client.util.Utils.createBaloInHomeRepo;\n+import static org.ballerinalang.central.client.util.Utils.getBallerinaCentralCliTokenUrl;\n+import static org.ballerinalang.central.client.util.Utils.getStatusCode;\n+import static org.ballerinalang.central.client.util.Utils.getTotalFileSizeInKB;\n+import static org.ballerinalang.central.client.util.Utils.initializeProxy;\n+import static org.ballerinalang.central.client.util.Utils.initializeSsl;\n+import static org.ballerinalang.central.client.util.Utils.readSettings;\n+import static org.ballerinalang.central.client.util.Utils.setRequestMethod;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.ACCEPT_ENCODING;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.APPLICATION_OCTET_STREAM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.AUTHORIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BALLERINA_PLATFORM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BAL_LANG_SPEC_VERSION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_DISPOSITION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_TYPE;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.IDENTITY;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.LOCATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.PUSH_ORGANIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.USER_AGENT;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.SETTINGS_FILE_NAME;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * {@code CentralAPIClient} is a client for the Central API.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CentralAPIClient {\n+\n+    private String accessToken;\n+    private Proxy proxy;\n+    private String baseUrl;\n+    protected PrintStream errStream;\n+    protected PrintStream outStream;\n+    private static final String PACKAGES = \"packages\";\n+    private static final String ERR_CANNOT_CONNECT = \"error: could not connect to remote repository to find package: \";\n+    private static final String ERR_CANNOT_PUSH = \"error: failed to push the package: \";\n+\n+    public CentralAPIClient() {\n+        String ballerinaCentralCliTokenUrl = getBallerinaCentralCliTokenUrl();\n+        Path ballerinaHomePath = RepoUtils.createAndGetHomeReposPath();\n+        Path settingsTomlFilePath = ballerinaHomePath.resolve(SETTINGS_FILE_NAME);\n+        Settings settings = readSettings();\n+\n+        this.errStream = System.err;\n+        this.outStream = System.out;\n+        this.baseUrl = getRemoteRepoURL();\n+        this.accessToken = authenticate(errStream, ballerinaCentralCliTokenUrl, settings, settingsTomlFilePath);\n+        this.proxy = initializeProxy(settings.getProxy());\n+    }\n+\n+    /**\n+     * Get package with version\n+     *\n+     * @param orgNamePath     The organization name of the package. (required)\n+     * @param packageNamePath The name of the package. (required)\n+     * @param version         The version or version range of the module. (required)\n+     * @return PackageJsonSchema\n+     */\n+    public Package getPackage(String orgNamePath, String packageNamePath, String version, String supportedPlatform) {\n+        initializeSsl();\n+        String url = PACKAGES + \"/\" + orgNamePath + \"/\" + packageNamePath;\n+        // append version to url if available\n+        if (null != version && !version.isEmpty()) {\n+            url = url + \"/\" + version;\n+        }\n+\n+        String pkg = orgNamePath + \"/\" + packageNamePath + \":\" + version;\n+        HttpURLConnection conn = createHttpUrlConnection(url);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // set implementation version\n+        conn.setRequestProperty(\"Ballerina-Platform\", supportedPlatform);\n+        conn.setRequestProperty(\"Ballerina-Language-Specification-Version\", IMPLEMENTATION_VERSION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI5NzY5NA==", "bodyText": "removed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r518297694", "createdAt": "2020-11-05T19:13:43Z", "author": {"login": "pramodya1994"}, "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.central.client;\n+\n+import com.google.gson.Gson;\n+import io.ballerina.projects.balo.BaloProject;\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.central.client.model.Error;\n+import org.ballerinalang.central.client.model.Package;\n+import org.ballerinalang.central.client.model.PackageSearchResult;\n+import org.ballerinalang.central.client.util.BuildLogFormatter;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.ErrorUtil;\n+import org.ballerinalang.central.client.util.LogFormatter;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.central.client.util.Utils;\n+import org.ballerinalang.toml.model.Settings;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+\n+import java.io.BufferedReader;\n+import java.io.DataOutputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.net.Proxy;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.file.Path;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.central.client.util.Utils.authenticate;\n+import static org.ballerinalang.central.client.util.Utils.convertToUrl;\n+import static org.ballerinalang.central.client.util.Utils.createBaloInHomeRepo;\n+import static org.ballerinalang.central.client.util.Utils.getBallerinaCentralCliTokenUrl;\n+import static org.ballerinalang.central.client.util.Utils.getStatusCode;\n+import static org.ballerinalang.central.client.util.Utils.getTotalFileSizeInKB;\n+import static org.ballerinalang.central.client.util.Utils.initializeProxy;\n+import static org.ballerinalang.central.client.util.Utils.initializeSsl;\n+import static org.ballerinalang.central.client.util.Utils.readSettings;\n+import static org.ballerinalang.central.client.util.Utils.setRequestMethod;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.ACCEPT_ENCODING;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.APPLICATION_OCTET_STREAM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.AUTHORIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BALLERINA_PLATFORM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BAL_LANG_SPEC_VERSION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_DISPOSITION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_TYPE;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.IDENTITY;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.LOCATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.PUSH_ORGANIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.USER_AGENT;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.SETTINGS_FILE_NAME;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * {@code CentralAPIClient} is a client for the Central API.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CentralAPIClient {\n+\n+    private String accessToken;\n+    private Proxy proxy;\n+    private String baseUrl;\n+    protected PrintStream errStream;\n+    protected PrintStream outStream;\n+    private static final String PACKAGES = \"packages\";\n+    private static final String ERR_CANNOT_CONNECT = \"error: could not connect to remote repository to find package: \";\n+    private static final String ERR_CANNOT_PUSH = \"error: failed to push the package: \";\n+\n+    public CentralAPIClient() {\n+        String ballerinaCentralCliTokenUrl = getBallerinaCentralCliTokenUrl();\n+        Path ballerinaHomePath = RepoUtils.createAndGetHomeReposPath();\n+        Path settingsTomlFilePath = ballerinaHomePath.resolve(SETTINGS_FILE_NAME);\n+        Settings settings = readSettings();\n+\n+        this.errStream = System.err;\n+        this.outStream = System.out;\n+        this.baseUrl = getRemoteRepoURL();\n+        this.accessToken = authenticate(errStream, ballerinaCentralCliTokenUrl, settings, settingsTomlFilePath);\n+        this.proxy = initializeProxy(settings.getProxy());\n+    }\n+\n+    /**\n+     * Get package with version\n+     *\n+     * @param orgNamePath     The organization name of the package. (required)\n+     * @param packageNamePath The name of the package. (required)\n+     * @param version         The version or version range of the module. (required)\n+     * @return PackageJsonSchema\n+     */\n+    public Package getPackage(String orgNamePath, String packageNamePath, String version, String supportedPlatform) {\n+        initializeSsl();\n+        String url = PACKAGES + \"/\" + orgNamePath + \"/\" + packageNamePath;\n+        // append version to url if available\n+        if (null != version && !version.isEmpty()) {\n+            url = url + \"/\" + version;\n+        }\n+\n+        String pkg = orgNamePath + \"/\" + packageNamePath + \":\" + version;\n+        HttpURLConnection conn = createHttpUrlConnection(url);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // set implementation version\n+        conn.setRequestProperty(\"Ballerina-Platform\", supportedPlatform);\n+        conn.setRequestProperty(\"Ballerina-Language-Specification-Version\", IMPLEMENTATION_VERSION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5ODA1MA=="}, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjY1NDYxOnYy", "diffSide": "RIGHT", "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMjowMDoxNFrOHuAHqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxOToxMzo1NVrOHuSY0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5ODUwNQ==", "bodyText": "Use BALLERINA_PLATFORM constant.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r517998505", "createdAt": "2020-11-05T12:00:14Z", "author": {"login": "hemikak"}, "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.central.client;\n+\n+import com.google.gson.Gson;\n+import io.ballerina.projects.balo.BaloProject;\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.central.client.model.Error;\n+import org.ballerinalang.central.client.model.Package;\n+import org.ballerinalang.central.client.model.PackageSearchResult;\n+import org.ballerinalang.central.client.util.BuildLogFormatter;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.ErrorUtil;\n+import org.ballerinalang.central.client.util.LogFormatter;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.central.client.util.Utils;\n+import org.ballerinalang.toml.model.Settings;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+\n+import java.io.BufferedReader;\n+import java.io.DataOutputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.net.Proxy;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.file.Path;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.central.client.util.Utils.authenticate;\n+import static org.ballerinalang.central.client.util.Utils.convertToUrl;\n+import static org.ballerinalang.central.client.util.Utils.createBaloInHomeRepo;\n+import static org.ballerinalang.central.client.util.Utils.getBallerinaCentralCliTokenUrl;\n+import static org.ballerinalang.central.client.util.Utils.getStatusCode;\n+import static org.ballerinalang.central.client.util.Utils.getTotalFileSizeInKB;\n+import static org.ballerinalang.central.client.util.Utils.initializeProxy;\n+import static org.ballerinalang.central.client.util.Utils.initializeSsl;\n+import static org.ballerinalang.central.client.util.Utils.readSettings;\n+import static org.ballerinalang.central.client.util.Utils.setRequestMethod;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.ACCEPT_ENCODING;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.APPLICATION_OCTET_STREAM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.AUTHORIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BALLERINA_PLATFORM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BAL_LANG_SPEC_VERSION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_DISPOSITION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_TYPE;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.IDENTITY;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.LOCATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.PUSH_ORGANIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.USER_AGENT;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.SETTINGS_FILE_NAME;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * {@code CentralAPIClient} is a client for the Central API.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CentralAPIClient {\n+\n+    private String accessToken;\n+    private Proxy proxy;\n+    private String baseUrl;\n+    protected PrintStream errStream;\n+    protected PrintStream outStream;\n+    private static final String PACKAGES = \"packages\";\n+    private static final String ERR_CANNOT_CONNECT = \"error: could not connect to remote repository to find package: \";\n+    private static final String ERR_CANNOT_PUSH = \"error: failed to push the package: \";\n+\n+    public CentralAPIClient() {\n+        String ballerinaCentralCliTokenUrl = getBallerinaCentralCliTokenUrl();\n+        Path ballerinaHomePath = RepoUtils.createAndGetHomeReposPath();\n+        Path settingsTomlFilePath = ballerinaHomePath.resolve(SETTINGS_FILE_NAME);\n+        Settings settings = readSettings();\n+\n+        this.errStream = System.err;\n+        this.outStream = System.out;\n+        this.baseUrl = getRemoteRepoURL();\n+        this.accessToken = authenticate(errStream, ballerinaCentralCliTokenUrl, settings, settingsTomlFilePath);\n+        this.proxy = initializeProxy(settings.getProxy());\n+    }\n+\n+    /**\n+     * Get package with version\n+     *\n+     * @param orgNamePath     The organization name of the package. (required)\n+     * @param packageNamePath The name of the package. (required)\n+     * @param version         The version or version range of the module. (required)\n+     * @return PackageJsonSchema\n+     */\n+    public Package getPackage(String orgNamePath, String packageNamePath, String version, String supportedPlatform) {\n+        initializeSsl();\n+        String url = PACKAGES + \"/\" + orgNamePath + \"/\" + packageNamePath;\n+        // append version to url if available\n+        if (null != version && !version.isEmpty()) {\n+            url = url + \"/\" + version;\n+        }\n+\n+        String pkg = orgNamePath + \"/\" + packageNamePath + \":\" + version;\n+        HttpURLConnection conn = createHttpUrlConnection(url);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // set implementation version\n+        conn.setRequestProperty(\"Ballerina-Platform\", supportedPlatform);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI5NzgwOA==", "bodyText": "Used", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r518297808", "createdAt": "2020-11-05T19:13:55Z", "author": {"login": "pramodya1994"}, "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.central.client;\n+\n+import com.google.gson.Gson;\n+import io.ballerina.projects.balo.BaloProject;\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.central.client.model.Error;\n+import org.ballerinalang.central.client.model.Package;\n+import org.ballerinalang.central.client.model.PackageSearchResult;\n+import org.ballerinalang.central.client.util.BuildLogFormatter;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.ErrorUtil;\n+import org.ballerinalang.central.client.util.LogFormatter;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.central.client.util.Utils;\n+import org.ballerinalang.toml.model.Settings;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+\n+import java.io.BufferedReader;\n+import java.io.DataOutputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.net.Proxy;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.file.Path;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.central.client.util.Utils.authenticate;\n+import static org.ballerinalang.central.client.util.Utils.convertToUrl;\n+import static org.ballerinalang.central.client.util.Utils.createBaloInHomeRepo;\n+import static org.ballerinalang.central.client.util.Utils.getBallerinaCentralCliTokenUrl;\n+import static org.ballerinalang.central.client.util.Utils.getStatusCode;\n+import static org.ballerinalang.central.client.util.Utils.getTotalFileSizeInKB;\n+import static org.ballerinalang.central.client.util.Utils.initializeProxy;\n+import static org.ballerinalang.central.client.util.Utils.initializeSsl;\n+import static org.ballerinalang.central.client.util.Utils.readSettings;\n+import static org.ballerinalang.central.client.util.Utils.setRequestMethod;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.ACCEPT_ENCODING;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.APPLICATION_OCTET_STREAM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.AUTHORIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BALLERINA_PLATFORM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BAL_LANG_SPEC_VERSION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_DISPOSITION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_TYPE;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.IDENTITY;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.LOCATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.PUSH_ORGANIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.USER_AGENT;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.SETTINGS_FILE_NAME;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * {@code CentralAPIClient} is a client for the Central API.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CentralAPIClient {\n+\n+    private String accessToken;\n+    private Proxy proxy;\n+    private String baseUrl;\n+    protected PrintStream errStream;\n+    protected PrintStream outStream;\n+    private static final String PACKAGES = \"packages\";\n+    private static final String ERR_CANNOT_CONNECT = \"error: could not connect to remote repository to find package: \";\n+    private static final String ERR_CANNOT_PUSH = \"error: failed to push the package: \";\n+\n+    public CentralAPIClient() {\n+        String ballerinaCentralCliTokenUrl = getBallerinaCentralCliTokenUrl();\n+        Path ballerinaHomePath = RepoUtils.createAndGetHomeReposPath();\n+        Path settingsTomlFilePath = ballerinaHomePath.resolve(SETTINGS_FILE_NAME);\n+        Settings settings = readSettings();\n+\n+        this.errStream = System.err;\n+        this.outStream = System.out;\n+        this.baseUrl = getRemoteRepoURL();\n+        this.accessToken = authenticate(errStream, ballerinaCentralCliTokenUrl, settings, settingsTomlFilePath);\n+        this.proxy = initializeProxy(settings.getProxy());\n+    }\n+\n+    /**\n+     * Get package with version\n+     *\n+     * @param orgNamePath     The organization name of the package. (required)\n+     * @param packageNamePath The name of the package. (required)\n+     * @param version         The version or version range of the module. (required)\n+     * @return PackageJsonSchema\n+     */\n+    public Package getPackage(String orgNamePath, String packageNamePath, String version, String supportedPlatform) {\n+        initializeSsl();\n+        String url = PACKAGES + \"/\" + orgNamePath + \"/\" + packageNamePath;\n+        // append version to url if available\n+        if (null != version && !version.isEmpty()) {\n+            url = url + \"/\" + version;\n+        }\n+\n+        String pkg = orgNamePath + \"/\" + packageNamePath + \":\" + version;\n+        HttpURLConnection conn = createHttpUrlConnection(url);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // set implementation version\n+        conn.setRequestProperty(\"Ballerina-Platform\", supportedPlatform);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5ODUwNQ=="}, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NjY2MTIzOnYy", "diffSide": "RIGHT", "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMjowMTo1M1rOHuALlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxOToxNDowMlrOHuSZIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5OTUwOA==", "bodyText": "This header is not needed now.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r517999508", "createdAt": "2020-11-05T12:01:53Z", "author": {"login": "hemikak"}, "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.central.client;\n+\n+import com.google.gson.Gson;\n+import io.ballerina.projects.balo.BaloProject;\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.central.client.model.Error;\n+import org.ballerinalang.central.client.model.Package;\n+import org.ballerinalang.central.client.model.PackageSearchResult;\n+import org.ballerinalang.central.client.util.BuildLogFormatter;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.ErrorUtil;\n+import org.ballerinalang.central.client.util.LogFormatter;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.central.client.util.Utils;\n+import org.ballerinalang.toml.model.Settings;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+\n+import java.io.BufferedReader;\n+import java.io.DataOutputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.net.Proxy;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.file.Path;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.central.client.util.Utils.authenticate;\n+import static org.ballerinalang.central.client.util.Utils.convertToUrl;\n+import static org.ballerinalang.central.client.util.Utils.createBaloInHomeRepo;\n+import static org.ballerinalang.central.client.util.Utils.getBallerinaCentralCliTokenUrl;\n+import static org.ballerinalang.central.client.util.Utils.getStatusCode;\n+import static org.ballerinalang.central.client.util.Utils.getTotalFileSizeInKB;\n+import static org.ballerinalang.central.client.util.Utils.initializeProxy;\n+import static org.ballerinalang.central.client.util.Utils.initializeSsl;\n+import static org.ballerinalang.central.client.util.Utils.readSettings;\n+import static org.ballerinalang.central.client.util.Utils.setRequestMethod;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.ACCEPT_ENCODING;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.APPLICATION_OCTET_STREAM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.AUTHORIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BALLERINA_PLATFORM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BAL_LANG_SPEC_VERSION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_DISPOSITION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_TYPE;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.IDENTITY;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.LOCATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.PUSH_ORGANIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.USER_AGENT;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.SETTINGS_FILE_NAME;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * {@code CentralAPIClient} is a client for the Central API.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CentralAPIClient {\n+\n+    private String accessToken;\n+    private Proxy proxy;\n+    private String baseUrl;\n+    protected PrintStream errStream;\n+    protected PrintStream outStream;\n+    private static final String PACKAGES = \"packages\";\n+    private static final String ERR_CANNOT_CONNECT = \"error: could not connect to remote repository to find package: \";\n+    private static final String ERR_CANNOT_PUSH = \"error: failed to push the package: \";\n+\n+    public CentralAPIClient() {\n+        String ballerinaCentralCliTokenUrl = getBallerinaCentralCliTokenUrl();\n+        Path ballerinaHomePath = RepoUtils.createAndGetHomeReposPath();\n+        Path settingsTomlFilePath = ballerinaHomePath.resolve(SETTINGS_FILE_NAME);\n+        Settings settings = readSettings();\n+\n+        this.errStream = System.err;\n+        this.outStream = System.out;\n+        this.baseUrl = getRemoteRepoURL();\n+        this.accessToken = authenticate(errStream, ballerinaCentralCliTokenUrl, settings, settingsTomlFilePath);\n+        this.proxy = initializeProxy(settings.getProxy());\n+    }\n+\n+    /**\n+     * Get package with version\n+     *\n+     * @param orgNamePath     The organization name of the package. (required)\n+     * @param packageNamePath The name of the package. (required)\n+     * @param version         The version or version range of the module. (required)\n+     * @return PackageJsonSchema\n+     */\n+    public Package getPackage(String orgNamePath, String packageNamePath, String version, String supportedPlatform) {\n+        initializeSsl();\n+        String url = PACKAGES + \"/\" + orgNamePath + \"/\" + packageNamePath;\n+        // append version to url if available\n+        if (null != version && !version.isEmpty()) {\n+            url = url + \"/\" + version;\n+        }\n+\n+        String pkg = orgNamePath + \"/\" + packageNamePath + \":\" + version;\n+        HttpURLConnection conn = createHttpUrlConnection(url);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // set implementation version\n+        conn.setRequestProperty(\"Ballerina-Platform\", supportedPlatform);\n+        conn.setRequestProperty(\"Ballerina-Language-Specification-Version\", IMPLEMENTATION_VERSION);\n+\n+        // status code and meaning\n+        //// 302 - module found\n+        //// 404 - module not found\n+        //// 400 - bad request sent\n+        //// 500 - backend is broken\n+        try {\n+            int statusCode = getStatusCode(conn);\n+            if (statusCode == HttpURLConnection.HTTP_OK) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    return new Gson().fromJson(reader, Package.class);\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else if (statusCode == HttpURLConnection.HTTP_NOT_FOUND) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(reader, Error.class);\n+                    if (errorJsonSchema.getMessage().contains(\"package not found:\")) {\n+                        throw new NoPackageException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw createLauncherException(\n+                                ERR_CANNOT_CONNECT + pkg + \". reason: \" + errorJsonSchema.getMessage());\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else if (statusCode == HttpURLConnection.HTTP_BAD_REQUEST) {\n+                try (BufferedReader errorStream = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(errorStream, Error.class);\n+\n+                    if (errorJsonSchema.getMessage() != null && !\"\".equals(errorJsonSchema.getMessage())) {\n+                        throw new CommandException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw createLauncherException(ERR_CANNOT_CONNECT + pkg + \". reason:\" + errorStream.lines()\n+                                .collect(Collectors.joining(\"\\n\")));\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else {\n+                throw createLauncherException(ERR_CANNOT_CONNECT + pkg + \".\");\n+            }\n+        } finally {\n+            conn.disconnect();\n+            Authenticator.setDefault(null);\n+        }\n+    }\n+\n+    /**\n+     * Pushing a package to registry.\n+     */\n+    public void pushPackage(Path baloPath) {\n+        final int NO_OF_BYTES = 64;\n+        final int BUFFER_SIZE = 1024 * NO_OF_BYTES;\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(PACKAGES);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.POST);\n+\n+        // Load balo project\n+        BaloProject baloProject = BaloProject.loadProject(baloPath);\n+        String org = baloProject.currentPackage().packageDescriptor().org().toString();\n+        String name = baloProject.currentPackage().packageDescriptor().name().toString();\n+        String version = baloProject.currentPackage().packageDescriptor().version().toString();\n+\n+        // Set headers\n+        conn.setRequestProperty(AUTHORIZATION, \"Bearer \" + this.accessToken);\n+        conn.setRequestProperty(PUSH_ORGANIZATION, org);\n+        conn.setRequestProperty(CONTENT_TYPE, APPLICATION_OCTET_STREAM);\n+\n+        conn.setDoOutput(true);\n+        conn.setChunkedStreamingMode(BUFFER_SIZE);\n+\n+        try (DataOutputStream outputStream = new DataOutputStream(conn.getOutputStream())) {\n+            // Send balo content by 1 kb chunks\n+            byte[] buffer = new byte[BUFFER_SIZE];\n+            int count;\n+            try (ProgressBar progressBar = new ProgressBar(\n+                    org + \"/\" + name + \":\" + version + \" [project repo -> central]\", getTotalFileSizeInKB(baloPath),\n+                    1000, outStream, ProgressBarStyle.ASCII, \" KB\", 1);\n+                    FileInputStream fis = new FileInputStream(baloPath.toFile())) {\n+                while ((count = fis.read(buffer)) > 0) {\n+                    outputStream.write(buffer, 0, count);\n+                    outputStream.flush();\n+                    progressBar.stepBy((long) NO_OF_BYTES);\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw ErrorUtil.createCommandException(\"error occurred while uploading balo to central: \" + e.getMessage());\n+        }\n+\n+        try {\n+            int statusCode = getStatusCode(conn);\n+            // 200 - Module pushed successfully\n+            // Other - Error occurred, json returned with the error message\n+            if (statusCode == HttpURLConnection.HTTP_OK) {\n+                outStream.println(org + \"/\" + name + \":\" + version + \" pushed to central successfully\");\n+            } else if (statusCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n+                errStream.println(\"unauthorized access token for organization: \" + org);\n+            } else if (statusCode == HttpURLConnection.HTTP_BAD_REQUEST) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getErrorStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(reader, Error.class);\n+\n+                    if (errorJsonSchema.getMessage() != null && !\"\".equals(errorJsonSchema.getMessage())) {\n+                        throw ErrorUtil.createCommandException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw ErrorUtil.createCommandException(\n+                                ERR_CANNOT_PUSH + \"'\" + org + \"/\" + name + \":\" + version + \"' reason:\" + reader.lines()\n+                                        .collect(Collectors.joining(\"\\n\")));\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(\n+                            ERR_CANNOT_PUSH + \"'\" + org + \"/\" + name + \":\" + version + \"' to the remote repository '\"\n+                                    + conn.getURL() + \"'\");\n+                }\n+            } else {\n+                throw ErrorUtil.createCommandException(\n+                        ERR_CANNOT_PUSH + \"'\" + org + \"/\" + name + \":\" + version + \"' to the remote repository '\"\n+                                + conn.getURL() + \"'\");\n+            }\n+        } finally {\n+            conn.disconnect();\n+            Authenticator.setDefault(null);\n+        }\n+    }\n+\n+    public void pullPackage(String org, String name, String version, Path packagePathInBaloCache,\n+            String supportedPlatform, boolean isBuild) {\n+        LogFormatter logFormatter = new LogFormatter();\n+        if (isBuild) {\n+            logFormatter = new BuildLogFormatter();\n+        }\n+\n+        String url = PACKAGES + \"/\" + org + \"/\" + name;\n+        // append version to url if available\n+        if (null != version && !version.isEmpty()) {\n+            url = url + \"/\" + version;\n+        }\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(url);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // Set headers\n+        conn.setRequestProperty(BALLERINA_PLATFORM, supportedPlatform);\n+        conn.setRequestProperty(BAL_LANG_SPEC_VERSION, IMPLEMENTATION_VERSION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 281}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI5Nzg5MA==", "bodyText": "removed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r518297890", "createdAt": "2020-11-05T19:14:02Z", "author": {"login": "pramodya1994"}, "path": "cli/central-client/src/main/java/org/ballerinalang/central/client/CentralAPIClient.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.central.client;\n+\n+import com.google.gson.Gson;\n+import io.ballerina.projects.balo.BaloProject;\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.central.client.model.Error;\n+import org.ballerinalang.central.client.model.Package;\n+import org.ballerinalang.central.client.model.PackageSearchResult;\n+import org.ballerinalang.central.client.util.BuildLogFormatter;\n+import org.ballerinalang.central.client.util.CommandException;\n+import org.ballerinalang.central.client.util.ErrorUtil;\n+import org.ballerinalang.central.client.util.LogFormatter;\n+import org.ballerinalang.central.client.util.NoPackageException;\n+import org.ballerinalang.central.client.util.Utils;\n+import org.ballerinalang.toml.model.Settings;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+\n+import java.io.BufferedReader;\n+import java.io.DataOutputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.net.Proxy;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.file.Path;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.central.client.util.Utils.authenticate;\n+import static org.ballerinalang.central.client.util.Utils.convertToUrl;\n+import static org.ballerinalang.central.client.util.Utils.createBaloInHomeRepo;\n+import static org.ballerinalang.central.client.util.Utils.getBallerinaCentralCliTokenUrl;\n+import static org.ballerinalang.central.client.util.Utils.getStatusCode;\n+import static org.ballerinalang.central.client.util.Utils.getTotalFileSizeInKB;\n+import static org.ballerinalang.central.client.util.Utils.initializeProxy;\n+import static org.ballerinalang.central.client.util.Utils.initializeSsl;\n+import static org.ballerinalang.central.client.util.Utils.readSettings;\n+import static org.ballerinalang.central.client.util.Utils.setRequestMethod;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.ACCEPT_ENCODING;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.APPLICATION_OCTET_STREAM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.AUTHORIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BALLERINA_PLATFORM;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.BAL_LANG_SPEC_VERSION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_DISPOSITION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.CONTENT_TYPE;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.IDENTITY;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.LOCATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.PUSH_ORGANIZATION;\n+import static org.ballerinalang.central.client.util.CentralClientConstants.USER_AGENT;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.compiler.util.ProjectDirConstants.SETTINGS_FILE_NAME;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * {@code CentralAPIClient} is a client for the Central API.\n+ *\n+ * @since 2.0.0\n+ */\n+public class CentralAPIClient {\n+\n+    private String accessToken;\n+    private Proxy proxy;\n+    private String baseUrl;\n+    protected PrintStream errStream;\n+    protected PrintStream outStream;\n+    private static final String PACKAGES = \"packages\";\n+    private static final String ERR_CANNOT_CONNECT = \"error: could not connect to remote repository to find package: \";\n+    private static final String ERR_CANNOT_PUSH = \"error: failed to push the package: \";\n+\n+    public CentralAPIClient() {\n+        String ballerinaCentralCliTokenUrl = getBallerinaCentralCliTokenUrl();\n+        Path ballerinaHomePath = RepoUtils.createAndGetHomeReposPath();\n+        Path settingsTomlFilePath = ballerinaHomePath.resolve(SETTINGS_FILE_NAME);\n+        Settings settings = readSettings();\n+\n+        this.errStream = System.err;\n+        this.outStream = System.out;\n+        this.baseUrl = getRemoteRepoURL();\n+        this.accessToken = authenticate(errStream, ballerinaCentralCliTokenUrl, settings, settingsTomlFilePath);\n+        this.proxy = initializeProxy(settings.getProxy());\n+    }\n+\n+    /**\n+     * Get package with version\n+     *\n+     * @param orgNamePath     The organization name of the package. (required)\n+     * @param packageNamePath The name of the package. (required)\n+     * @param version         The version or version range of the module. (required)\n+     * @return PackageJsonSchema\n+     */\n+    public Package getPackage(String orgNamePath, String packageNamePath, String version, String supportedPlatform) {\n+        initializeSsl();\n+        String url = PACKAGES + \"/\" + orgNamePath + \"/\" + packageNamePath;\n+        // append version to url if available\n+        if (null != version && !version.isEmpty()) {\n+            url = url + \"/\" + version;\n+        }\n+\n+        String pkg = orgNamePath + \"/\" + packageNamePath + \":\" + version;\n+        HttpURLConnection conn = createHttpUrlConnection(url);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // set implementation version\n+        conn.setRequestProperty(\"Ballerina-Platform\", supportedPlatform);\n+        conn.setRequestProperty(\"Ballerina-Language-Specification-Version\", IMPLEMENTATION_VERSION);\n+\n+        // status code and meaning\n+        //// 302 - module found\n+        //// 404 - module not found\n+        //// 400 - bad request sent\n+        //// 500 - backend is broken\n+        try {\n+            int statusCode = getStatusCode(conn);\n+            if (statusCode == HttpURLConnection.HTTP_OK) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    return new Gson().fromJson(reader, Package.class);\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else if (statusCode == HttpURLConnection.HTTP_NOT_FOUND) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(reader, Error.class);\n+                    if (errorJsonSchema.getMessage().contains(\"package not found:\")) {\n+                        throw new NoPackageException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw createLauncherException(\n+                                ERR_CANNOT_CONNECT + pkg + \". reason: \" + errorJsonSchema.getMessage());\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else if (statusCode == HttpURLConnection.HTTP_BAD_REQUEST) {\n+                try (BufferedReader errorStream = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(errorStream, Error.class);\n+\n+                    if (errorJsonSchema.getMessage() != null && !\"\".equals(errorJsonSchema.getMessage())) {\n+                        throw new CommandException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw createLauncherException(ERR_CANNOT_CONNECT + pkg + \". reason:\" + errorStream.lines()\n+                                .collect(Collectors.joining(\"\\n\")));\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(e.getMessage());\n+                }\n+            } else {\n+                throw createLauncherException(ERR_CANNOT_CONNECT + pkg + \".\");\n+            }\n+        } finally {\n+            conn.disconnect();\n+            Authenticator.setDefault(null);\n+        }\n+    }\n+\n+    /**\n+     * Pushing a package to registry.\n+     */\n+    public void pushPackage(Path baloPath) {\n+        final int NO_OF_BYTES = 64;\n+        final int BUFFER_SIZE = 1024 * NO_OF_BYTES;\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(PACKAGES);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.POST);\n+\n+        // Load balo project\n+        BaloProject baloProject = BaloProject.loadProject(baloPath);\n+        String org = baloProject.currentPackage().packageDescriptor().org().toString();\n+        String name = baloProject.currentPackage().packageDescriptor().name().toString();\n+        String version = baloProject.currentPackage().packageDescriptor().version().toString();\n+\n+        // Set headers\n+        conn.setRequestProperty(AUTHORIZATION, \"Bearer \" + this.accessToken);\n+        conn.setRequestProperty(PUSH_ORGANIZATION, org);\n+        conn.setRequestProperty(CONTENT_TYPE, APPLICATION_OCTET_STREAM);\n+\n+        conn.setDoOutput(true);\n+        conn.setChunkedStreamingMode(BUFFER_SIZE);\n+\n+        try (DataOutputStream outputStream = new DataOutputStream(conn.getOutputStream())) {\n+            // Send balo content by 1 kb chunks\n+            byte[] buffer = new byte[BUFFER_SIZE];\n+            int count;\n+            try (ProgressBar progressBar = new ProgressBar(\n+                    org + \"/\" + name + \":\" + version + \" [project repo -> central]\", getTotalFileSizeInKB(baloPath),\n+                    1000, outStream, ProgressBarStyle.ASCII, \" KB\", 1);\n+                    FileInputStream fis = new FileInputStream(baloPath.toFile())) {\n+                while ((count = fis.read(buffer)) > 0) {\n+                    outputStream.write(buffer, 0, count);\n+                    outputStream.flush();\n+                    progressBar.stepBy((long) NO_OF_BYTES);\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw ErrorUtil.createCommandException(\"error occurred while uploading balo to central: \" + e.getMessage());\n+        }\n+\n+        try {\n+            int statusCode = getStatusCode(conn);\n+            // 200 - Module pushed successfully\n+            // Other - Error occurred, json returned with the error message\n+            if (statusCode == HttpURLConnection.HTTP_OK) {\n+                outStream.println(org + \"/\" + name + \":\" + version + \" pushed to central successfully\");\n+            } else if (statusCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n+                errStream.println(\"unauthorized access token for organization: \" + org);\n+            } else if (statusCode == HttpURLConnection.HTTP_BAD_REQUEST) {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getErrorStream(), Charset.defaultCharset()))) {\n+                    Error errorJsonSchema = new Gson().fromJson(reader, Error.class);\n+\n+                    if (errorJsonSchema.getMessage() != null && !\"\".equals(errorJsonSchema.getMessage())) {\n+                        throw ErrorUtil.createCommandException(errorJsonSchema.getMessage());\n+                    } else {\n+                        throw ErrorUtil.createCommandException(\n+                                ERR_CANNOT_PUSH + \"'\" + org + \"/\" + name + \":\" + version + \"' reason:\" + reader.lines()\n+                                        .collect(Collectors.joining(\"\\n\")));\n+                    }\n+                } catch (IOException e) {\n+                    throw ErrorUtil.createCommandException(\n+                            ERR_CANNOT_PUSH + \"'\" + org + \"/\" + name + \":\" + version + \"' to the remote repository '\"\n+                                    + conn.getURL() + \"'\");\n+                }\n+            } else {\n+                throw ErrorUtil.createCommandException(\n+                        ERR_CANNOT_PUSH + \"'\" + org + \"/\" + name + \":\" + version + \"' to the remote repository '\"\n+                                + conn.getURL() + \"'\");\n+            }\n+        } finally {\n+            conn.disconnect();\n+            Authenticator.setDefault(null);\n+        }\n+    }\n+\n+    public void pullPackage(String org, String name, String version, Path packagePathInBaloCache,\n+            String supportedPlatform, boolean isBuild) {\n+        LogFormatter logFormatter = new LogFormatter();\n+        if (isBuild) {\n+            logFormatter = new BuildLogFormatter();\n+        }\n+\n+        String url = PACKAGES + \"/\" + org + \"/\" + name;\n+        // append version to url if available\n+        if (null != version && !version.isEmpty()) {\n+            url = url + \"/\" + version;\n+        }\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(url);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // Set headers\n+        conn.setRequestProperty(BALLERINA_PLATFORM, supportedPlatform);\n+        conn.setRequestProperty(BAL_LANG_SPEC_VERSION, IMPLEMENTATION_VERSION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk5OTUwOA=="}, "originalCommit": {"oid": "c181c686ce911223b69ec038c5772f36c6142217"}, "originalPosition": 281}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Njk5NzI5OnYy", "diffSide": "RIGHT", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PullCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNTo1OTo0NVrOHw_QiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNzowMDoxNVrOHxAzkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEzMDEyMA==", "bodyText": "Shall we move RepoUtils.createAndGetHomeReposPath() to ProjectUtils?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r521130120", "createdAt": "2020-11-11T05:59:45Z", "author": {"login": "azinneera"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PullCommand.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.util.ProjectConstants;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.compiler.util.Names;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import static io.ballerina.cli.cmd.Constants.PULL_COMMAND;\n+import static io.ballerina.projects.util.ProjectConstants.PKG_NAME_REGEX;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static java.nio.file.Files.createDirectories;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+\n+/**\n+ * This class represents the \"ballerina pull\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PULL_COMMAND,\n+        description = \"download the module source and binaries from a remote repository\")\n+public class PullCommand implements BLauncherCmd {\n+    private PrintStream errStream;\n+    private CentralAPIClient client;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = { \"--help\", \"-h\" }, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true)\n+    private String debugPort;\n+\n+    public PullCommand() {\n+        this.errStream = System.err;\n+        this.client = new CentralAPIClient();\n+    }\n+\n+    public PullCommand(PrintStream errStream, CentralAPIClient client) {\n+        this.errStream = errStream;\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(PULL_COMMAND);\n+            errStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        if (argList == null || argList.isEmpty()) {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"no package given\");\n+        }\n+\n+        if (argList.size() > 1) {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"too many arguments\");\n+        }\n+\n+        // Enable remote debugging\n+        if (null != debugPort) {\n+            System.setProperty(SYSTEM_PROP_BAL_DEBUG, debugPort);\n+        }\n+\n+        String resourceName = argList.get(0);\n+        String orgName;\n+        String packageName;\n+        String version;\n+\n+        if (!validPackageName(resourceName)) {\n+            CommandUtil.printError(errStream, \"invalid package name. Provide the package name with the org name \",\n+                    \"ballerina pull {<org-name>/<package-name> | <org-name>/<package-name>:<version>}\", false);\n+            Runtime.getRuntime().exit(1);\n+            return;\n+        }\n+\n+        // Get org name\n+        String[] moduleInfo = resourceName.split(\"/\");\n+        orgName = moduleInfo[0];\n+        String moduleNameAndVersion = moduleInfo[1];\n+\n+        // Get package name\n+        String[] packageInfo = moduleNameAndVersion.split(\":\");\n+        if (packageInfo.length == 2) {\n+            packageName = packageInfo[0];\n+            version = packageInfo[1];\n+        } else {\n+            packageName = moduleNameAndVersion;\n+            version = Names.EMPTY.getValue();\n+        }\n+\n+        Path packagePathInBaloCache = RepoUtils.createAndGetHomeReposPath()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "265cbf9450be6d04f5a1ebd0833b4c6ebb41bdb4"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE1NTQ3Mg==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r521155472", "createdAt": "2020-11-11T07:00:15Z", "author": {"login": "pramodya1994"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PullCommand.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.util.ProjectConstants;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.compiler.util.Names;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import static io.ballerina.cli.cmd.Constants.PULL_COMMAND;\n+import static io.ballerina.projects.util.ProjectConstants.PKG_NAME_REGEX;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static java.nio.file.Files.createDirectories;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+\n+/**\n+ * This class represents the \"ballerina pull\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PULL_COMMAND,\n+        description = \"download the module source and binaries from a remote repository\")\n+public class PullCommand implements BLauncherCmd {\n+    private PrintStream errStream;\n+    private CentralAPIClient client;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = { \"--help\", \"-h\" }, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true)\n+    private String debugPort;\n+\n+    public PullCommand() {\n+        this.errStream = System.err;\n+        this.client = new CentralAPIClient();\n+    }\n+\n+    public PullCommand(PrintStream errStream, CentralAPIClient client) {\n+        this.errStream = errStream;\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(PULL_COMMAND);\n+            errStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        if (argList == null || argList.isEmpty()) {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"no package given\");\n+        }\n+\n+        if (argList.size() > 1) {\n+            throw LauncherUtils.createUsageExceptionWithHelp(\"too many arguments\");\n+        }\n+\n+        // Enable remote debugging\n+        if (null != debugPort) {\n+            System.setProperty(SYSTEM_PROP_BAL_DEBUG, debugPort);\n+        }\n+\n+        String resourceName = argList.get(0);\n+        String orgName;\n+        String packageName;\n+        String version;\n+\n+        if (!validPackageName(resourceName)) {\n+            CommandUtil.printError(errStream, \"invalid package name. Provide the package name with the org name \",\n+                    \"ballerina pull {<org-name>/<package-name> | <org-name>/<package-name>:<version>}\", false);\n+            Runtime.getRuntime().exit(1);\n+            return;\n+        }\n+\n+        // Get org name\n+        String[] moduleInfo = resourceName.split(\"/\");\n+        orgName = moduleInfo[0];\n+        String moduleNameAndVersion = moduleInfo[1];\n+\n+        // Get package name\n+        String[] packageInfo = moduleNameAndVersion.split(\":\");\n+        if (packageInfo.length == 2) {\n+            packageName = packageInfo[0];\n+            version = packageInfo[1];\n+        } else {\n+            packageName = moduleNameAndVersion;\n+            version = Names.EMPTY.getValue();\n+        }\n+\n+        Path packagePathInBaloCache = RepoUtils.createAndGetHomeReposPath()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEzMDEyMA=="}, "originalCommit": {"oid": "265cbf9450be6d04f5a1ebd0833b4c6ebb41bdb4"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NzAwMjMzOnYy", "diffSide": "RIGHT", "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNjowMjowOFrOHw_Tag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNzowMDoxOVrOHxAzzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEzMDg1OA==", "bodyText": "We have this validation inside the Buildproject.load method. We can remove this and handle the exception at L120.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r521130858", "createdAt": "2020-11-11T06:02:08Z", "author": {"login": "azinneera"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "diffHunk": "@@ -0,0 +1,277 @@\n+/*\n+*  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.PackageDescriptor;\n+import io.ballerina.projects.PackageName;\n+import io.ballerina.projects.PackageOrg;\n+import io.ballerina.projects.PackageVersion;\n+import io.ballerina.projects.directory.BuildProject;\n+import io.ballerina.projects.util.ProjectConstants;\n+import io.ballerina.projects.util.ProjectUtils;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.central.client.CentralClientException;\n+import org.ballerinalang.central.client.NoPackageException;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.ballerina.cli.cmd.Constants.PUSH_COMMAND;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * This class represents the \"ballerina push\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PUSH_COMMAND, description = \"push packages and binaries available locally to \"\n+        + \"Ballerina Central\")\n+public class PushCommand implements BLauncherCmd {\n+    private static PrintStream outStream = System.err;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = {\"--help\", \"-h\"}, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true)\n+    private String debugPort;\n+\n+    @CommandLine.Option(names = \"--repository\", hidden = true)\n+    private String repositoryHome;\n+\n+    @CommandLine.Option(names = {\"--skip-source-check\"}, description = \"skip checking if source has changed\")\n+    private boolean skipSourceCheck;\n+\n+    @CommandLine.Option(names = \"--experimental\", description = \"enable experimental language features\")\n+    private boolean experimentalFlag;\n+\n+    private Path userDir;\n+    private PrintStream errStream;\n+    \n+    public PushCommand() {\n+        userDir = Paths.get(System.getProperty(ProjectConstants.USER_DIR));\n+        errStream = System.err;\n+    }\n+    \n+    public PushCommand(Path userDir, PrintStream errStream) {\n+        this.userDir = userDir;\n+        this.errStream = errStream;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(PUSH_COMMAND);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        // Get source root path.\n+        Path sourceRootPath = userDir;\n+\n+        // Push command only works inside a project\n+        if (!ProjectUtils.isBallerinaProject(sourceRootPath)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "265cbf9450be6d04f5a1ebd0833b4c6ebb41bdb4"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE1NTUzMw==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26634#discussion_r521155533", "createdAt": "2020-11-11T07:00:19Z", "author": {"login": "pramodya1994"}, "path": "cli/ballerina-cli/src/main/java/io/ballerina/cli/cmd/PushCommand.java", "diffHunk": "@@ -0,0 +1,277 @@\n+/*\n+*  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package io.ballerina.cli.cmd;\n+\n+import io.ballerina.projects.PackageDescriptor;\n+import io.ballerina.projects.PackageName;\n+import io.ballerina.projects.PackageOrg;\n+import io.ballerina.projects.PackageVersion;\n+import io.ballerina.projects.directory.BuildProject;\n+import io.ballerina.projects.util.ProjectConstants;\n+import io.ballerina.projects.util.ProjectUtils;\n+import org.ballerinalang.central.client.CentralAPIClient;\n+import org.ballerinalang.central.client.CentralClientException;\n+import org.ballerinalang.central.client.NoPackageException;\n+import org.ballerinalang.tool.BLauncherCmd;\n+import org.ballerinalang.tool.LauncherUtils;\n+import org.wso2.ballerinalang.util.RepoUtils;\n+import picocli.CommandLine;\n+\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static io.ballerina.cli.cmd.Constants.PUSH_COMMAND;\n+import static io.ballerina.runtime.util.RuntimeConstants.SYSTEM_PROP_BAL_DEBUG;\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.IMPLEMENTATION_VERSION;\n+import static org.wso2.ballerinalang.programfile.ProgramFileConstants.SUPPORTED_PLATFORMS;\n+import static org.wso2.ballerinalang.util.RepoUtils.getRemoteRepoURL;\n+\n+/**\n+ * This class represents the \"ballerina push\" command.\n+ *\n+ * @since 2.0.0\n+ */\n+@CommandLine.Command(name = PUSH_COMMAND, description = \"push packages and binaries available locally to \"\n+        + \"Ballerina Central\")\n+public class PushCommand implements BLauncherCmd {\n+    private static PrintStream outStream = System.err;\n+\n+    @CommandLine.Parameters\n+    private List<String> argList;\n+\n+    @CommandLine.Option(names = {\"--help\", \"-h\"}, hidden = true)\n+    private boolean helpFlag;\n+\n+    @CommandLine.Option(names = \"--debug\", hidden = true)\n+    private String debugPort;\n+\n+    @CommandLine.Option(names = \"--repository\", hidden = true)\n+    private String repositoryHome;\n+\n+    @CommandLine.Option(names = {\"--skip-source-check\"}, description = \"skip checking if source has changed\")\n+    private boolean skipSourceCheck;\n+\n+    @CommandLine.Option(names = \"--experimental\", description = \"enable experimental language features\")\n+    private boolean experimentalFlag;\n+\n+    private Path userDir;\n+    private PrintStream errStream;\n+    \n+    public PushCommand() {\n+        userDir = Paths.get(System.getProperty(ProjectConstants.USER_DIR));\n+        errStream = System.err;\n+    }\n+    \n+    public PushCommand(Path userDir, PrintStream errStream) {\n+        this.userDir = userDir;\n+        this.errStream = errStream;\n+    }\n+\n+    @Override\n+    public void execute() {\n+        if (helpFlag) {\n+            String commandUsageInfo = BLauncherCmd.getCommandUsageInfo(PUSH_COMMAND);\n+            outStream.println(commandUsageInfo);\n+            return;\n+        }\n+\n+        // Get source root path.\n+        Path sourceRootPath = userDir;\n+\n+        // Push command only works inside a project\n+        if (!ProjectUtils.isBallerinaProject(sourceRootPath)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEzMDg1OA=="}, "originalCommit": {"oid": "265cbf9450be6d04f5a1ebd0833b4c6ebb41bdb4"}, "originalPosition": 106}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4665, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}