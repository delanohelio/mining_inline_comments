{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NjMxMzQ4", "number": 23628, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDozMzo1MFrOEBUVYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDozNDo1MFrOEBUWXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODE3MTg0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDozMzo1MFrOGdF-MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDo0ODoxMFrOGdGUmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1OTcyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                             * belongs to. Also these does not cover the observable calls and fp calls (they are handled using the\n          \n          \n            \n                             * belongs to. Also these do not cover the observable calls and fp calls (they are handled using the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23628#discussion_r433159728", "createdAt": "2020-06-01T10:33:50Z", "author": {"login": "tharinduwijewardane"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java", "diffHunk": "@@ -410,6 +431,16 @@ private void rewriteObservableFunctionBody(BIRFunction func, BIRPackage pkg, boo\n             } else if (currentBB.terminator.kind == InstructionKind.CALL\n                     || (currentBB.terminator.kind == InstructionKind.FP_CALL\n                     && !((FPCall) currentBB.terminator).isAsync)) {\n+                /*\n+                 * Traps for errors needs to be injected for each call and fp call separately to avoid messing up the\n+                 * line numbers in the stack trace shown when a panic is thrown.\n+                 *\n+                 * These panic traps are different from the traps added in rewriteObservableFunctionInvocations method,\n+                 * in the sense that these report the error to the Observation covering the current function this body\n+                 * belongs to. Also these does not cover the observable calls and fp calls (they are handled using the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "604bf5741b60dc703a1a28645e2ab1e1eff05fe3"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE2NTQ2Nw==", "bodyText": "Fixed in 8ee1b9f", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23628#discussion_r433165467", "createdAt": "2020-06-01T10:48:10Z", "author": {"login": "nadundesilva"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java", "diffHunk": "@@ -410,6 +431,16 @@ private void rewriteObservableFunctionBody(BIRFunction func, BIRPackage pkg, boo\n             } else if (currentBB.terminator.kind == InstructionKind.CALL\n                     || (currentBB.terminator.kind == InstructionKind.FP_CALL\n                     && !((FPCall) currentBB.terminator).isAsync)) {\n+                /*\n+                 * Traps for errors needs to be injected for each call and fp call separately to avoid messing up the\n+                 * line numbers in the stack trace shown when a panic is thrown.\n+                 *\n+                 * These panic traps are different from the traps added in rewriteObservableFunctionInvocations method,\n+                 * in the sense that these report the error to the Observation covering the current function this body\n+                 * belongs to. Also these does not cover the observable calls and fp calls (they are handled using the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1OTcyOA=="}, "originalCommit": {"oid": "604bf5741b60dc703a1a28645e2ab1e1eff05fe3"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODE3NDM4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDozNDo1MFrOGdF_ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDo0Nzo1OVrOGdGUWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE2MDEzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                 * Adding panic traps for the invocations. These reports the error to the Observation covering\n          \n          \n            \n                                 * Adding panic traps for the invocations. These report the error to the Observation covering", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23628#discussion_r433160131", "createdAt": "2020-06-01T10:34:50Z", "author": {"login": "tharinduwijewardane"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java", "diffHunk": "@@ -554,6 +582,10 @@ private void rewriteObservableFunctionInvocations(BIRFunction func, BIRPackage p\n                     fixErrorTable(func, currentBB, observeEndBB);\n                 }\n                 {\n+                    /*\n+                     * Adding panic traps for the invocations. These reports the error to the Observation covering", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "604bf5741b60dc703a1a28645e2ab1e1eff05fe3"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE2NTQwMQ==", "bodyText": "Fixed in 8ee1b9f", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23628#discussion_r433165401", "createdAt": "2020-06-01T10:47:59Z", "author": {"login": "nadundesilva"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmObservabilityGen.java", "diffHunk": "@@ -554,6 +582,10 @@ private void rewriteObservableFunctionInvocations(BIRFunction func, BIRPackage p\n                     fixErrorTable(func, currentBB, observeEndBB);\n                 }\n                 {\n+                    /*\n+                     * Adding panic traps for the invocations. These reports the error to the Observation covering", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE2MDEzMQ=="}, "originalCommit": {"oid": "604bf5741b60dc703a1a28645e2ab1e1eff05fe3"}, "originalPosition": 108}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3536, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}