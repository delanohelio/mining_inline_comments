{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5NzYwNjky", "number": 26888, "title": "Add parser support for isolated services and object constructor expressions", "bodyText": "Purpose\n$subject.\nFixes #26696\nApproach\nN/A\nSamples\nN/A\nRemarks\nN/A\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-11-12T09:52:40Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26888", "merged": true, "mergeCommit": {"oid": "8022fc2ffebd6e30e2d82298e3df5f901e718d3b"}, "closed": true, "closedAt": "2020-11-23T05:03:52Z", "author": {"login": "lochana-chathura"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbuV84AH2gAyNTE5NzYwNjkyOmIxN2UwNmI3YWM0MDUwNmM0OWI2NWU4ZmM5MjI0OTEzZTM5YjU4YmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfN6i4AFqTUzNjE3ODUyNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b17e06b7ac40506c49b65e8fc9224913e39b58bd", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b17e06b7ac40506c49b65e8fc9224913e39b58bd", "committedDate": "2020-11-12T08:32:48Z", "message": "Add parser support for isolated object constructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7355b33d43b6557f61d18990367430f67ea6299b", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7355b33d43b6557f61d18990367430f67ea6299b", "committedDate": "2020-11-12T09:12:43Z", "message": "Add parser support for isolated service declaration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a291970a3bb996382c260628b88d6bd5395d543", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3a291970a3bb996382c260628b88d6bd5395d543", "committedDate": "2020-11-13T06:49:27Z", "message": "Disable failing LS tests due to new way of qualifier parsing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "066dcb56dc0c66fe98d4d17635301d218edc3c96", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/066dcb56dc0c66fe98d4d17635301d218edc3c96", "committedDate": "2020-11-16T05:22:08Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into Isolated-qual"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0MDc3MTAw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26888#pullrequestreview-534077100", "createdAt": "2020-11-19T04:41:31Z", "commit": {"oid": "066dcb56dc0c66fe98d4d17635301d218edc3c96"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNDo0MTozMVrOH2Mgfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNToxNTo0NlrOH2NFfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU5MDA3OQ==", "bodyText": "Can we move these two lines to a separate function since it is repeated in many places", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26888#discussion_r526590079", "createdAt": "2020-11-19T04:41:31Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3874,131 +3886,141 @@ private STNode parseTerminalExpression(STNode annots, boolean isRhsExpr, boolean\n             case FALSE_KEYWORD:\n             case DECIMAL_FLOATING_POINT_LITERAL_TOKEN:\n             case HEX_FLOATING_POINT_LITERAL_TOKEN:\n+                reportInvalidExpressionAnnots(annots, qualifiers);\n+                reportInvalidQualifierList(qualifiers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "066dcb56dc0c66fe98d4d17635301d218edc3c96"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU5NDYwMQ==", "bodyText": "This is not about this PR but can we change the name of this method to something like updateANodeInListWithLeadingInvalidNode since we are adding an invalid node as leading minutia.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26888#discussion_r526594601", "createdAt": "2020-11-19T04:57:53Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -6196,22 +6165,56 @@ private STNode parseCompoundBinaryOperator() {\n      * Parse service declaration.\n      * <p>\n      * <code>\n-     * service-decl := metadata service [variable-name] on expression-list service-body-block\n+     * service-decl := metadata [isolated-qual] service [variable-name] on expression-list service-body-block\n      * <br/>\n      * expression-list := expression (, expression)*\n      * </code>\n      *\n-     * @param metadata Metadata\n+     * @param metadata   Metadata\n+     * @param qualifiers Preceding qualifiers\n      * @return Parsed node\n      */\n-    private STNode parseServiceDecl(STNode metadata) {\n+    private STNode parseServiceDecl(STNode metadata, List<STNode> qualifiers) {\n         startContext(ParserRuleContext.SERVICE_DECL);\n+        STNode qualNodeList = createServiceDeclQualNodeList(qualifiers);\n         STNode serviceKeyword = parseServiceKeyword();\n-        STNode serviceDecl = parseServiceRhs(metadata, serviceKeyword);\n+        STNode serviceDecl = parseServiceRhs(metadata, qualNodeList, serviceKeyword);\n         endContext();\n         return serviceDecl;\n     }\n \n+    private STNode createServiceDeclQualNodeList(List<STNode> qualifierList) {\n+        // Validate qualifiers and create a STNodeList\n+        List<STNode> validatedList = new ArrayList<>();\n+\n+        for (int i = 0; i < qualifierList.size(); i++) {\n+            STNode qualifier = qualifierList.get(i);\n+            int nextIndex = i + 1;\n+\n+            if (isDuplicate(validatedList, qualifier.kind)) {\n+                updateLastNodeInListWithInvalidNode(validatedList, qualifier,\n+                        DiagnosticErrorCode.ERROR_DUPLICATE_QUALIFIER, ((STToken) qualifier).text());\n+                continue;\n+            }\n+\n+            if (qualifier.kind == SyntaxKind.ISOLATED_KEYWORD) {\n+                validatedList.add(qualifier);\n+                continue;\n+            }\n+\n+            // We only reach here for invalid qualfiers\n+            if (qualifierList.size() == nextIndex) {\n+                addInvalidNodeToNextToken(qualifier, DiagnosticErrorCode.ERROR_QUALIFIER_NOT_ALLOWED,\n+                        ((STToken) qualifier).text());\n+            } else {\n+                updateANodeInListWithInvalidNode(qualifierList, nextIndex, qualifier,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "066dcb56dc0c66fe98d4d17635301d218edc3c96"}, "originalPosition": 404}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU5OTU0OA==", "bodyText": "Do we need to address isolated client object {.. case in error handler?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26888#discussion_r526599548", "createdAt": "2020-11-19T05:15:46Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -924,7 +924,8 @@ protected Result seekMatch(ParserRuleContext currentCtx, int lookahead, int curr\n                     hasMatch = nextToken.kind == SyntaxKind.CLOSE_PAREN_TOKEN;\n                     break;\n                 case OBJECT_CONSTRUCTOR_QUALIFIER:\n-                    hasMatch = nextToken.kind == SyntaxKind.CLIENT_KEYWORD;\n+                    hasMatch = nextToken.kind == SyntaxKind.CLIENT_KEYWORD ||\n+                            nextToken.kind == SyntaxKind.ISOLATED_KEYWORD;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "066dcb56dc0c66fe98d4d17635301d218edc3c96"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0MDg5MjIz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26888#pullrequestreview-534089223", "createdAt": "2020-11-19T05:20:15Z", "commit": {"oid": "066dcb56dc0c66fe98d4d17635301d218edc3c96"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNToyMDoxNVrOH2NKjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNjoyNDozM1rOH2OZPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYwMDg0Nw==", "bodyText": "This snippet is duplicated in 20+ place.\nCan't we do this in a single  place like before?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26888#discussion_r526600847", "createdAt": "2020-11-19T05:20:15Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3874,131 +3886,141 @@ private STNode parseTerminalExpression(STNode annots, boolean isRhsExpr, boolean\n             case FALSE_KEYWORD:\n             case DECIMAL_FLOATING_POINT_LITERAL_TOKEN:\n             case HEX_FLOATING_POINT_LITERAL_TOKEN:\n+                reportInvalidExpressionAnnots(annots, qualifiers);\n+                reportInvalidQualifierList(qualifiers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "066dcb56dc0c66fe98d4d17635301d218edc3c96"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYyMDk5MQ==", "bodyText": "parsing the type-def qualifiers may not be the best approach. May be we could introduce a separate method?\nFor. e.g: in an expression context, transactional is a valid expression, not a qualifier. so we should not parse it as a qualifier.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26888#discussion_r526620991", "createdAt": "2020-11-19T06:24:33Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3847,24 +3855,28 @@ private STNode parseTerminalExpression(boolean isRhsExpr, boolean allowActions,\n         return parseTerminalExpression(annots, isRhsExpr, allowActions, isInConditionalExpr);\n     }\n \n+    private STNode parseTerminalExpression(STNode annots, boolean isRhsExpr, boolean allowActions,\n+                                           boolean isInConditionalExpr) {\n+        List<STNode> qualifiers = new ArrayList<>();\n+        return parseTerminalExpression(annots, qualifiers, isRhsExpr, allowActions, isInConditionalExpr);\n+    }\n+\n     /**\n      * Parse terminal expressions. A terminal expression has the highest precedence level\n      * out of all expressions, and will be at the leaves of an expression tree.\n      *\n      * @param annots       Annotations\n+     * @param qualifiers   Initial qualifiers\n      * @param isRhsExpr    Is a rhs expression\n      * @param allowActions Allow actions\n      * @return Parsed node\n      */\n-    private STNode parseTerminalExpression(STNode annots, boolean isRhsExpr, boolean allowActions,\n-                                           boolean isInConditionalExpr) {\n+    private STNode parseTerminalExpression(STNode annots, List<STNode> qualifiers, boolean isRhsExpr,\n+                                           boolean allowActions, boolean isInConditionalExpr) {\n         // Whenever a new expression start is added, make sure to\n         // add it to all the other places as well.\n+        parseTypeDescQualifiers(qualifiers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "066dcb56dc0c66fe98d4d17635301d218edc3c96"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca37e29b56c661468fffb16811971af29d40aecd", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ca37e29b56c661468fffb16811971af29d40aecd", "committedDate": "2020-11-19T12:28:50Z", "message": "Add review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a82034322a8a29c65401fa30c3d644697dad171", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6a82034322a8a29c65401fa30c3d644697dad171", "committedDate": "2020-11-20T04:00:33Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into Isolated-qual"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MTQzMTU1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26888#pullrequestreview-535143155", "createdAt": "2020-11-20T06:24:22Z", "commit": {"oid": "6a82034322a8a29c65401fa30c3d644697dad171"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNjoyNDoyMlrOH3BtWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNjoyNDoyMlrOH3BtWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ2MTcyMA==", "bodyText": "Can we use isValidExprStart method here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26888#discussion_r527461720", "createdAt": "2020-11-20T06:24:22Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3966,38 +3996,65 @@ private STNode parseTerminalExpression(STNode annots, boolean isRhsExpr, boolean\n                 break;\n         }\n \n-        Solution solution = recover(nextToken, ParserRuleContext.TERMINAL_EXPRESSION, annots, isRhsExpr, allowActions,\n+        recover(peek(), ParserRuleContext.TERMINAL_EXPRESSION, annots, qualifiers, isRhsExpr, allowActions,\n                 isInConditionalExpr);\n-\n-        if (solution.action == Action.KEEP) {\n-            if (nextToken.kind == SyntaxKind.XML_KEYWORD) {\n-                return parseXMLTemplateExpression();\n-            }\n-\n-            return parseStringTemplateExpression();\n-        }\n-\n-        return parseTerminalExpression(annots, isRhsExpr, allowActions, isInConditionalExpr);\n+        return parseTerminalExpression(annots, qualifiers, isRhsExpr, allowActions, isInConditionalExpr);\n     }\n \n-    private void validateExpressionAnnotations(STToken nextToken, STNode annots) {\n+    private void validateExprAnnotsAndQualifiers(STToken nextToken, STNode annots, List<STNode> qualifiers) {\n         switch (nextToken.kind) {\n-            case CLIENT_KEYWORD:\n-            case OBJECT_KEYWORD:\n-            case FUNCTION_KEYWORD:\n-            case ISOLATED_KEYWORD:\n+            case DECIMAL_INTEGER_LITERAL_TOKEN:\n+            case HEX_INTEGER_LITERAL_TOKEN:\n+            case STRING_LITERAL_TOKEN:\n+            case NULL_KEYWORD:\n+            case TRUE_KEYWORD:\n+            case FALSE_KEYWORD:\n+            case DECIMAL_FLOATING_POINT_LITERAL_TOKEN:\n+            case HEX_FLOATING_POINT_LITERAL_TOKEN:\n+            case IDENTIFIER_TOKEN:\n+            case OPEN_PAREN_TOKEN:\n+            case CHECK_KEYWORD:\n+            case CHECKPANIC_KEYWORD:\n+            case OPEN_BRACE_TOKEN:\n+            case TYPEOF_KEYWORD:\n+            case PLUS_TOKEN:\n+            case MINUS_TOKEN:\n+            case NEGATION_TOKEN:\n+            case EXCLAMATION_MARK_TOKEN:\n+            case TRAP_KEYWORD:\n+            case OPEN_BRACKET_TOKEN:\n+            case LT_TOKEN:\n+            case TABLE_KEYWORD:\n+            case STREAM_KEYWORD:\n+            case FROM_KEYWORD:\n+            case ERROR_KEYWORD:\n+            case LET_KEYWORD:\n+            case BACKTICK_TOKEN:\n+            case XML_KEYWORD:\n+            case STRING_KEYWORD:\n+            case NEW_KEYWORD:\n+            case FLUSH_KEYWORD:\n+            case LEFT_ARROW_TOKEN:\n+            case WAIT_KEYWORD:\n+            case COMMIT_KEYWORD:\n+            case TRANSACTIONAL_KEYWORD:\n+            case BASE16_KEYWORD:\n+            case BASE64_KEYWORD:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a82034322a8a29c65401fa30c3d644697dad171"}, "originalPosition": 276}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a09e3748f4a01bc99dd33d354039790a03d1640", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1a09e3748f4a01bc99dd33d354039790a03d1640", "committedDate": "2020-11-20T13:54:28Z", "message": "Add second tier review suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MTc4NTI0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26888#pullrequestreview-536178524", "createdAt": "2020-11-23T05:01:36Z", "commit": {"oid": "1a09e3748f4a01bc99dd33d354039790a03d1640"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3270, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}