{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxMTU4MjA0", "number": 26930, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxMTowNzo0NFrOE5J_3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMToxMjoyMFrOE5aahA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MzY4MDkzOnYy", "diffSide": "RIGHT", "path": "langlib/lang.__internal/src/main/ballerina/src/lang.__internal/stream-utils.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxMTowNzo0NFrOHzewpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxNDowNzowNVrOHzf_cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc0MzM5OQ==", "bodyText": "Shouldn't this be a non-public function in the stream langlib instead? We don't need it elsewhere, right?\nShall we also change the return type to any|error, since () is already covered in any?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26930#discussion_r523743399", "createdAt": "2020-11-15T11:07:44Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.__internal/src/main/ballerina/src/lang.__internal/stream-utils.bal", "diffHunk": "@@ -100,13 +100,23 @@ public isolated function getReturnType(any func) returns typedesc<Type> = @java:\n #\n # + strm - The stream\n # + return - An abstract object which is iterable\n-public function getIteratorObj(stream<Type, ErrorType> strm) returns\n+public isolated function getIteratorObj(stream<Type, ErrorType> strm) returns\n     object {\n-        public function next() returns record {|Type value;|}|ErrorType?;} |\n+        public isolated function next() returns record {|Type value;|}|ErrorType?;} |\n     object {\n-        public function next() returns record {|Type value;|}|ErrorType?;\n-        public function close() returns ErrorType?;\n+        public isolated function next() returns record {|Type value;|}|ErrorType?;\n+        public isolated function close() returns ErrorType?;\n     } = @java:Method {\n         'class: \"org.ballerinalang.langlib.internal.GetIteratorObj\",\n         name: \"getIteratorObj\"\n     } external;\n+\n+# Invoke a non-isolated function as an external function (workaround for isolated invocations).\n+#\n+# + func - function to invoke\n+# + args - args for the function to invoke\n+# + return - result of the invocation\n+public isolated function invokeAsExternal(any func, any|error... args) returns any|error|() = @java:Method {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8023c4b00d23c9a3d64cecd11d85124712ef5ae3"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2MzU2OA==", "bodyText": "Shouldn't this be a non-public function in the stream langlib instead? We don't need it elsewhere, right?\n\n\nneeded in both stream and query libs.\n\n\nShall we also change the return type to any|error, since () is already covered in any?\n\n\nfixed in d97ca9c", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26930#discussion_r523763568", "createdAt": "2020-11-15T14:07:05Z", "author": {"login": "grainier"}, "path": "langlib/lang.__internal/src/main/ballerina/src/lang.__internal/stream-utils.bal", "diffHunk": "@@ -100,13 +100,23 @@ public isolated function getReturnType(any func) returns typedesc<Type> = @java:\n #\n # + strm - The stream\n # + return - An abstract object which is iterable\n-public function getIteratorObj(stream<Type, ErrorType> strm) returns\n+public isolated function getIteratorObj(stream<Type, ErrorType> strm) returns\n     object {\n-        public function next() returns record {|Type value;|}|ErrorType?;} |\n+        public isolated function next() returns record {|Type value;|}|ErrorType?;} |\n     object {\n-        public function next() returns record {|Type value;|}|ErrorType?;\n-        public function close() returns ErrorType?;\n+        public isolated function next() returns record {|Type value;|}|ErrorType?;\n+        public isolated function close() returns ErrorType?;\n     } = @java:Method {\n         'class: \"org.ballerinalang.langlib.internal.GetIteratorObj\",\n         name: \"getIteratorObj\"\n     } external;\n+\n+# Invoke a non-isolated function as an external function (workaround for isolated invocations).\n+#\n+# + func - function to invoke\n+# + args - args for the function to invoke\n+# + return - result of the invocation\n+public isolated function invokeAsExternal(any func, any|error... args) returns any|error|() = @java:Method {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc0MzM5OQ=="}, "originalCommit": {"oid": "8023c4b00d23c9a3d64cecd11d85124712ef5ae3"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MzY4NTMwOnYy", "diffSide": "RIGHT", "path": "langlib/lang.query/src/main/ballerina/src/lang.query/types.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxMToxMzowNFrOHzeyxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNVQxNDowNjo1M1rOHzf_QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc0Mzk0Mw==", "bodyText": "Can't we do\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (res is _Frame) {\n          \n          \n            \n                        return res;\n          \n          \n            \n                    } else if (res is error) {\n          \n          \n            \n                        return res;\n          \n          \n            \n                    if (res is _Frame|error) {\n          \n          \n            \n                        return res;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26930#discussion_r523743943", "createdAt": "2020-11-15T11:13:04Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.query/src/main/ballerina/src/lang.query/types.bal", "diffHunk": "@@ -66,9 +66,16 @@ class _StreamPipeline {\n         self.resType = resType;\n     }\n \n-    public function next() returns _Frame|error? {\n+    public isolated function next() returns _Frame|error? {\n         _StreamFunction sf = self.streamFunction;\n-        return sf.process();\n+        var res = internal:invokeAsExternal(sf.process);\n+        if (res is _Frame) {\n+            return res;\n+        } else if (res is error) {\n+            return res;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9469d31ff1cc350adaf8e37998c506af7eba8b67"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2MzUyMA==", "bodyText": "fixed in: d97ca9c", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26930#discussion_r523763520", "createdAt": "2020-11-15T14:06:53Z", "author": {"login": "grainier"}, "path": "langlib/lang.query/src/main/ballerina/src/lang.query/types.bal", "diffHunk": "@@ -66,9 +66,16 @@ class _StreamPipeline {\n         self.resType = resType;\n     }\n \n-    public function next() returns _Frame|error? {\n+    public isolated function next() returns _Frame|error? {\n         _StreamFunction sf = self.streamFunction;\n-        return sf.process();\n+        var res = internal:invokeAsExternal(sf.process);\n+        if (res is _Frame) {\n+            return res;\n+        } else if (res is error) {\n+            return res;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc0Mzk0Mw=="}, "originalCommit": {"oid": "9469d31ff1cc350adaf8e37998c506af7eba8b67"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NjExMjEzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDozMzoyMVrOHz0JBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjo0Mjo1NVrOHz8s3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA5MzcwMg==", "bodyText": "Should we add a Name in org.wso2.ballerinalang.compiler.util.Names instead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26930#discussion_r524093702", "createdAt": "2020-11-16T10:33:21Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3013,6 +3013,28 @@ public void visit(BLangTypeInit cIExpr) {\n                 if (!cIExpr.initInvocation.argExprs.isEmpty()) {\n                     BLangExpression iteratorExpr = cIExpr.initInvocation.argExprs.get(0);\n                     BType constructType = checkExpr(iteratorExpr, env, symTable.noType);\n+                    BType closeableIteratorType = symTable.langQueryModuleSymbol.scope\n+                            .lookup(names.fromString(BLangCompilerConstants.ABSTRACT_CLOSEABLE_ITERATOR_CLASS))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c649f4e8307870d9d330ce49cc1cd7fe8da2dccd"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIzMzk0OA==", "bodyText": "fixed in: bf7f95d", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26930#discussion_r524233948", "createdAt": "2020-11-16T12:42:55Z", "author": {"login": "grainier"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3013,6 +3013,28 @@ public void visit(BLangTypeInit cIExpr) {\n                 if (!cIExpr.initInvocation.argExprs.isEmpty()) {\n                     BLangExpression iteratorExpr = cIExpr.initInvocation.argExprs.get(0);\n                     BType constructType = checkExpr(iteratorExpr, env, symTable.noType);\n+                    BType closeableIteratorType = symTable.langQueryModuleSymbol.scope\n+                            .lookup(names.fromString(BLangCompilerConstants.ABSTRACT_CLOSEABLE_ITERATOR_CLASS))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA5MzcwMg=="}, "originalCommit": {"oid": "c649f4e8307870d9d330ce49cc1cd7fe8da2dccd"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NjE1MzUyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDozOTo0MVrOHz0kag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDozOTo0MVrOHz0kag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEwMDcxNA==", "bodyText": "Can't we look up the two functions, next and close, and if not null check if the isolated flag is on? That way we can give a more descriptive error, avoid looking up the iterators for each iteration, and also continue the rest of the analysis for the object?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26930#discussion_r524100714", "createdAt": "2020-11-16T10:39:41Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3013,6 +3013,28 @@ public void visit(BLangTypeInit cIExpr) {\n                 if (!cIExpr.initInvocation.argExprs.isEmpty()) {\n                     BLangExpression iteratorExpr = cIExpr.initInvocation.argExprs.get(0);\n                     BType constructType = checkExpr(iteratorExpr, env, symTable.noType);\n+                    BType closeableIteratorType = symTable.langQueryModuleSymbol.scope\n+                            .lookup(names.fromString(BLangCompilerConstants.ABSTRACT_CLOSEABLE_ITERATOR_CLASS))\n+                            .symbol.type;\n+                    BType iteratorType = symTable.langQueryModuleSymbol.scope\n+                            .lookup(names.fromString(BLangCompilerConstants.ABSTRACT_ITERATOR_CLASS)).symbol.type;\n+                    BAttachedFunction closeFunc = types.getAttachedFuncFromObject((BObjectType) constructType,\n+                            BLangCompilerConstants.CLOSE_FUNC);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c649f4e8307870d9d330ce49cc1cd7fe8da2dccd"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NjM2MjEyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMToxMTowMVrOHz2sFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjo0MzoyNlrOHz8u7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEzNTQ0NQ==", "bodyText": "Is this error ever logged now?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26930#discussion_r524135445", "createdAt": "2020-11-16T11:11:01Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3013,6 +3013,28 @@ public void visit(BLangTypeInit cIExpr) {\n                 if (!cIExpr.initInvocation.argExprs.isEmpty()) {\n                     BLangExpression iteratorExpr = cIExpr.initInvocation.argExprs.get(0);\n                     BType constructType = checkExpr(iteratorExpr, env, symTable.noType);\n+                    BType closeableIteratorType = symTable.langQueryModuleSymbol.scope\n+                            .lookup(names.fromString(BLangCompilerConstants.ABSTRACT_CLOSEABLE_ITERATOR_CLASS))\n+                            .symbol.type;\n+                    BType iteratorType = symTable.langQueryModuleSymbol.scope\n+                            .lookup(names.fromString(BLangCompilerConstants.ABSTRACT_ITERATOR_CLASS)).symbol.type;\n+                    BAttachedFunction closeFunc = types.getAttachedFuncFromObject((BObjectType) constructType,\n+                            BLangCompilerConstants.CLOSE_FUNC);\n+                    if (closeFunc != null) {\n+                        if (!types.isAssignable(constructType, closeableIteratorType)) {\n+                            dlog.error(iteratorExpr.pos, DiagnosticCode.INVALID_STREAM_CONSTRUCTOR_CLOSEABLE_ITERATOR,\n+                                    constructType);\n+                            resultType = symTable.semanticError;\n+                            return;\n+                        }\n+                    } else {\n+                        if (!types.isAssignable(constructType, iteratorType)) {\n+                            dlog.error(iteratorExpr.pos, DiagnosticCode.INVALID_STREAM_CONSTRUCTOR_ITERATOR,\n+                                    constructType);\n+                            resultType = symTable.semanticError;\n+                            return;\n+                        }\n+                    }\n                     BUnionType nextReturnType = types.getVarTypeFromIteratorFuncReturnType(constructType);\n                     BUnionType expectedReturnType = createNextReturnType(cIExpr.pos, (BStreamType) actualType);\n                     if (nextReturnType == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c649f4e8307870d9d330ce49cc1cd7fe8da2dccd"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIzNDQ3OA==", "bodyText": "fixed in: bf7f95d", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26930#discussion_r524234478", "createdAt": "2020-11-16T12:43:26Z", "author": {"login": "grainier"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3013,6 +3013,28 @@ public void visit(BLangTypeInit cIExpr) {\n                 if (!cIExpr.initInvocation.argExprs.isEmpty()) {\n                     BLangExpression iteratorExpr = cIExpr.initInvocation.argExprs.get(0);\n                     BType constructType = checkExpr(iteratorExpr, env, symTable.noType);\n+                    BType closeableIteratorType = symTable.langQueryModuleSymbol.scope\n+                            .lookup(names.fromString(BLangCompilerConstants.ABSTRACT_CLOSEABLE_ITERATOR_CLASS))\n+                            .symbol.type;\n+                    BType iteratorType = symTable.langQueryModuleSymbol.scope\n+                            .lookup(names.fromString(BLangCompilerConstants.ABSTRACT_ITERATOR_CLASS)).symbol.type;\n+                    BAttachedFunction closeFunc = types.getAttachedFuncFromObject((BObjectType) constructType,\n+                            BLangCompilerConstants.CLOSE_FUNC);\n+                    if (closeFunc != null) {\n+                        if (!types.isAssignable(constructType, closeableIteratorType)) {\n+                            dlog.error(iteratorExpr.pos, DiagnosticCode.INVALID_STREAM_CONSTRUCTOR_CLOSEABLE_ITERATOR,\n+                                    constructType);\n+                            resultType = symTable.semanticError;\n+                            return;\n+                        }\n+                    } else {\n+                        if (!types.isAssignable(constructType, iteratorType)) {\n+                            dlog.error(iteratorExpr.pos, DiagnosticCode.INVALID_STREAM_CONSTRUCTOR_ITERATOR,\n+                                    constructType);\n+                            resultType = symTable.semanticError;\n+                            return;\n+                        }\n+                    }\n                     BUnionType nextReturnType = types.getVarTypeFromIteratorFuncReturnType(constructType);\n                     BUnionType expectedReturnType = createNextReturnType(cIExpr.pos, (BStreamType) actualType);\n                     if (nextReturnType == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEzNTQ0NQ=="}, "originalCommit": {"oid": "c649f4e8307870d9d330ce49cc1cd7fe8da2dccd"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NjM3MDYwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMToxMjoyMFrOHz2xoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjo0Njo0NVrOHz88zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEzNjg2NQ==", "bodyText": "Can't we reuse DiagnosticCode.INCOMPATIBLE_TYPES for these?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26930#discussion_r524136865", "createdAt": "2020-11-16T11:12:20Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3013,6 +3013,28 @@ public void visit(BLangTypeInit cIExpr) {\n                 if (!cIExpr.initInvocation.argExprs.isEmpty()) {\n                     BLangExpression iteratorExpr = cIExpr.initInvocation.argExprs.get(0);\n                     BType constructType = checkExpr(iteratorExpr, env, symTable.noType);\n+                    BType closeableIteratorType = symTable.langQueryModuleSymbol.scope\n+                            .lookup(names.fromString(BLangCompilerConstants.ABSTRACT_CLOSEABLE_ITERATOR_CLASS))\n+                            .symbol.type;\n+                    BType iteratorType = symTable.langQueryModuleSymbol.scope\n+                            .lookup(names.fromString(BLangCompilerConstants.ABSTRACT_ITERATOR_CLASS)).symbol.type;\n+                    BAttachedFunction closeFunc = types.getAttachedFuncFromObject((BObjectType) constructType,\n+                            BLangCompilerConstants.CLOSE_FUNC);\n+                    if (closeFunc != null) {\n+                        if (!types.isAssignable(constructType, closeableIteratorType)) {\n+                            dlog.error(iteratorExpr.pos, DiagnosticCode.INVALID_STREAM_CONSTRUCTOR_CLOSEABLE_ITERATOR,\n+                                    constructType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c649f4e8307870d9d330ce49cc1cd7fe8da2dccd"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIzODAzMA==", "bodyText": "improved in: bf7f95d", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26930#discussion_r524238030", "createdAt": "2020-11-16T12:46:45Z", "author": {"login": "grainier"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3013,6 +3013,28 @@ public void visit(BLangTypeInit cIExpr) {\n                 if (!cIExpr.initInvocation.argExprs.isEmpty()) {\n                     BLangExpression iteratorExpr = cIExpr.initInvocation.argExprs.get(0);\n                     BType constructType = checkExpr(iteratorExpr, env, symTable.noType);\n+                    BType closeableIteratorType = symTable.langQueryModuleSymbol.scope\n+                            .lookup(names.fromString(BLangCompilerConstants.ABSTRACT_CLOSEABLE_ITERATOR_CLASS))\n+                            .symbol.type;\n+                    BType iteratorType = symTable.langQueryModuleSymbol.scope\n+                            .lookup(names.fromString(BLangCompilerConstants.ABSTRACT_ITERATOR_CLASS)).symbol.type;\n+                    BAttachedFunction closeFunc = types.getAttachedFuncFromObject((BObjectType) constructType,\n+                            BLangCompilerConstants.CLOSE_FUNC);\n+                    if (closeFunc != null) {\n+                        if (!types.isAssignable(constructType, closeableIteratorType)) {\n+                            dlog.error(iteratorExpr.pos, DiagnosticCode.INVALID_STREAM_CONSTRUCTOR_CLOSEABLE_ITERATOR,\n+                                    constructType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEzNjg2NQ=="}, "originalCommit": {"oid": "c649f4e8307870d9d330ce49cc1cd7fe8da2dccd"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3001, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}