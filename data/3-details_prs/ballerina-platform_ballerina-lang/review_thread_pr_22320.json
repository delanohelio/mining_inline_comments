{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NzM3Mzcy", "number": 22320, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDozOTozMVrODtDFPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNToyNzo0MlrODyV9AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTYzMDA2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/optimizer/BIRLockOptimizer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDozOTozMVrOF-Pp0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNTo0MDoyOVrOF-cCzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxMjQ5Nw==", "bodyText": "This formating looks weird. Can you check this?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22320#discussion_r400812497", "createdAt": "2020-03-31T10:39:31Z", "author": {"login": "hasithaa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/optimizer/BIRLockOptimizer.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ *  *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3ea633c53d30822730b04dd30c3777533e25114"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkwMTYxMw==", "bodyText": "Will check and update", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22320#discussion_r400901613", "createdAt": "2020-03-31T13:12:43Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/optimizer/BIRLockOptimizer.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ *  *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxMjQ5Nw=="}, "originalCommit": {"oid": "f3ea633c53d30822730b04dd30c3777533e25114"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAxNTUwMQ==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22320#discussion_r401015501", "createdAt": "2020-03-31T15:40:29Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/optimizer/BIRLockOptimizer.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ *  *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxMjQ5Nw=="}, "originalCommit": {"oid": "f3ea633c53d30822730b04dd30c3777533e25114"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODM3Mjk2OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BLockStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODoyMDoyNlrOGAKYwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOToyOTowMVrOGANtPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgyMzM2MA==", "bodyText": "lockName not used anymore", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22320#discussion_r402823360", "createdAt": "2020-04-03T08:20:26Z", "author": {"login": "KRVPerera"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BLockStore.java", "diffHunk": "@@ -50,12 +50,13 @@ public BLock getLockFromMap(String lockName) {\n     }\n \n     public void panicIfInLock(String lockName, Strand strand) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb70b0adf204aa560a4f79d28ce9c0f8073b3bf0"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3Nzc1OQ==", "bodyText": "+1 will fix", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22320#discussion_r402877759", "createdAt": "2020-04-03T09:29:01Z", "author": {"login": "dulvinw"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BLockStore.java", "diffHunk": "@@ -50,12 +50,13 @@ public BLock getLockFromMap(String lockName) {\n     }\n \n     public void panicIfInLock(String lockName, Strand strand) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgyMzM2MA=="}, "originalCommit": {"oid": "eb70b0adf204aa560a4f79d28ce9c0f8073b3bf0"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODc1MzIyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/optimizer/BIRLockOptimizer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOToyODoyOVrOGANr_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToyNjo0MFrOGF_MOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3NzQzOQ==", "bodyText": "should this be currentLockSetId instead of currentLockId  ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22320#discussion_r402877439", "createdAt": "2020-04-03T09:28:29Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/optimizer/BIRLockOptimizer.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.bir.optimizer;\n+\n+import org.wso2.ballerinalang.compiler.bir.model.BIRNode;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRTerminator;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRVisitor;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Optimize Locks.\n+ *\n+ * @since 1.2.1\n+ */\n+public class BIRLockOptimizer extends BIRVisitor {\n+\n+    private List<BIRTerminator.Lock> lockList = new ArrayList<>();\n+    private Map<BIRTerminator.Lock, Integer> lockToSetMap = new HashMap<>();\n+    private Map<Integer, List<BIRTerminator.Lock>> setToLockMap = new HashMap<>();\n+    private int setId = -1;\n+\n+    public void optimizeNode(BIRNode node) {\n+        // Collect lock nodes\n+        node.accept(this);\n+\n+        // Identify disjoint locks\n+        optimizeLocks();\n+    }\n+\n+    private void optimizeLocks() {\n+        analyzeLocks();\n+        propagateLocks();\n+    }\n+\n+    private void propagateLocks() {\n+        for (Map.Entry<Integer, List<BIRTerminator.Lock>> entry : setToLockMap.entrySet()) {\n+            Integer lockId = entry.getKey();\n+            for (BIRTerminator.Lock lock : entry.getValue()) {\n+                lock.lockId = lockId;\n+            }\n+        }\n+    }\n+\n+    private void analyzeLocks() {\n+        for (int lockListIndex = 0; lockListIndex < lockList.size(); lockListIndex++) {\n+            if (!lockToSetMap.containsKey(lockList.get(lockListIndex))) {\n+                analyzeUnvisitedLock(lockListIndex);\n+            } else {\n+                analyzeVisitedLock(lockListIndex);\n+            }\n+        }\n+    }\n+\n+    private void analyzeVisitedLock(int lockListIndex) {\n+        BIRTerminator.Lock currentLock = lockList.get(lockListIndex);\n+        int previousSetId = setId;\n+        Integer currentSetIdLocal = lockToSetMap.get(currentLock);\n+        List<BIRTerminator.Lock> currentSet = setToLockMap.get(currentSetIdLocal);\n+\n+        // Use the setId of the current one for the other shared locks\n+        setId = currentSetIdLocal;\n+        populateLockSet(currentSet, currentLock, lockListIndex);\n+        setId = previousSetId;\n+    }\n+\n+    private void analyzeUnvisitedLock(int lockListIndex) {\n+        BIRTerminator.Lock currentLock = lockList.get(lockListIndex);\n+        List<BIRTerminator.Lock> currentSet = new LinkedList<>();\n+\n+        // Add to the maps for the current unvisited lock.\n+        lockToSetMap.put(currentLock, ++setId);\n+\n+        // Compare with the rest of the locks.\n+        currentSet.add(currentLock);\n+\n+        populateLockSet(currentSet, currentLock, lockListIndex);\n+\n+        setToLockMap.put(setId, currentSet);\n+    }\n+\n+    private void populateLockSet(List<BIRTerminator.Lock> currentSet, BIRTerminator.Lock currentLock,\n+            int lockListIndex) {\n+        for (int i = (lockListIndex + 1); i < lockList.size(); i++) {\n+            BIRTerminator.Lock comparedLock = lockList.get(i);\n+            Set<BIRNode.BIRGlobalVariableDcl> globalVarSetOfComparedLock = comparedLock.lockVariables;\n+\n+            if (isSharedLock(currentLock, globalVarSetOfComparedLock)\n+                && isNotInSameSet(currentLock, comparedLock)) {\n+                populateLockSet(currentSet, comparedLock);\n+            }\n+        }\n+    }\n+\n+    private boolean isNotInSameSet(BIRTerminator.Lock currentLock, BIRTerminator.Lock comparedLock) {\n+        Integer currentLockId = lockToSetMap.get(currentLock);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb70b0adf204aa560a4f79d28ce9c0f8073b3bf0"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkzMTM4NA==", "bodyText": "I think its better. I'll change it", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22320#discussion_r408931384", "createdAt": "2020-04-15T15:26:40Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/optimizer/BIRLockOptimizer.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.bir.optimizer;\n+\n+import org.wso2.ballerinalang.compiler.bir.model.BIRNode;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRTerminator;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRVisitor;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Optimize Locks.\n+ *\n+ * @since 1.2.1\n+ */\n+public class BIRLockOptimizer extends BIRVisitor {\n+\n+    private List<BIRTerminator.Lock> lockList = new ArrayList<>();\n+    private Map<BIRTerminator.Lock, Integer> lockToSetMap = new HashMap<>();\n+    private Map<Integer, List<BIRTerminator.Lock>> setToLockMap = new HashMap<>();\n+    private int setId = -1;\n+\n+    public void optimizeNode(BIRNode node) {\n+        // Collect lock nodes\n+        node.accept(this);\n+\n+        // Identify disjoint locks\n+        optimizeLocks();\n+    }\n+\n+    private void optimizeLocks() {\n+        analyzeLocks();\n+        propagateLocks();\n+    }\n+\n+    private void propagateLocks() {\n+        for (Map.Entry<Integer, List<BIRTerminator.Lock>> entry : setToLockMap.entrySet()) {\n+            Integer lockId = entry.getKey();\n+            for (BIRTerminator.Lock lock : entry.getValue()) {\n+                lock.lockId = lockId;\n+            }\n+        }\n+    }\n+\n+    private void analyzeLocks() {\n+        for (int lockListIndex = 0; lockListIndex < lockList.size(); lockListIndex++) {\n+            if (!lockToSetMap.containsKey(lockList.get(lockListIndex))) {\n+                analyzeUnvisitedLock(lockListIndex);\n+            } else {\n+                analyzeVisitedLock(lockListIndex);\n+            }\n+        }\n+    }\n+\n+    private void analyzeVisitedLock(int lockListIndex) {\n+        BIRTerminator.Lock currentLock = lockList.get(lockListIndex);\n+        int previousSetId = setId;\n+        Integer currentSetIdLocal = lockToSetMap.get(currentLock);\n+        List<BIRTerminator.Lock> currentSet = setToLockMap.get(currentSetIdLocal);\n+\n+        // Use the setId of the current one for the other shared locks\n+        setId = currentSetIdLocal;\n+        populateLockSet(currentSet, currentLock, lockListIndex);\n+        setId = previousSetId;\n+    }\n+\n+    private void analyzeUnvisitedLock(int lockListIndex) {\n+        BIRTerminator.Lock currentLock = lockList.get(lockListIndex);\n+        List<BIRTerminator.Lock> currentSet = new LinkedList<>();\n+\n+        // Add to the maps for the current unvisited lock.\n+        lockToSetMap.put(currentLock, ++setId);\n+\n+        // Compare with the rest of the locks.\n+        currentSet.add(currentLock);\n+\n+        populateLockSet(currentSet, currentLock, lockListIndex);\n+\n+        setToLockMap.put(setId, currentSet);\n+    }\n+\n+    private void populateLockSet(List<BIRTerminator.Lock> currentSet, BIRTerminator.Lock currentLock,\n+            int lockListIndex) {\n+        for (int i = (lockListIndex + 1); i < lockList.size(); i++) {\n+            BIRTerminator.Lock comparedLock = lockList.get(i);\n+            Set<BIRNode.BIRGlobalVariableDcl> globalVarSetOfComparedLock = comparedLock.lockVariables;\n+\n+            if (isSharedLock(currentLock, globalVarSetOfComparedLock)\n+                && isNotInSameSet(currentLock, comparedLock)) {\n+                populateLockSet(currentSet, comparedLock);\n+            }\n+        }\n+    }\n+\n+    private boolean isNotInSameSet(BIRTerminator.Lock currentLock, BIRTerminator.Lock comparedLock) {\n+        Integer currentLockId = lockToSetMap.get(currentLock);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3NzQzOQ=="}, "originalCommit": {"oid": "eb70b0adf204aa560a4f79d28ce9c0f8073b3bf0"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTEzOTk5OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/lock/parallel-run-lock.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNToyMjowNVrOGGVAIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNToyMjowNVrOGGVAIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI4ODczNg==", "bodyText": "Add recursive calls test case.\nAdd import testcase", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22320#discussion_r409288736", "createdAt": "2020-04-16T05:22:05Z", "author": {"login": "dulvinw"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/lock/parallel-run-lock.bal", "diffHunk": "@@ -0,0 +1,101 @@\n+import ballerina/runtime;\n+\n+int a = 0;\n+int b = 0;\n+int c = 0;\n+int d = 0;\n+int e = 0;\n+int f = 0;\n+int g = 0;\n+int h = 0;\n+\n+function runParallelUsingLocks() {\n+    @strand{thread:\"any\"}\n+    worker w1 {\n+        lock {\n+            runtime:sleep(20);\n+            a = 1;\n+        }\n+    }\n+\n+    @strand{thread:\"any\"}\n+    worker w2 {\n+        lock {\n+            runtime:sleep(20);\n+            b = 1;\n+        }\n+    }\n+\n+    @strand{thread:\"any\"}\n+    worker w3 {\n+        lock {\n+            runtime:sleep(20);\n+            c = 1;\n+            d = 1;\n+        }\n+    }\n+\n+    @strand{thread:\"any\"}\n+    worker w4 {\n+        lock {\n+            runtime:sleep(20);\n+            d = 1;\n+            e = 1;\n+        }\n+    }\n+\n+    @strand{thread:\"any\"}\n+    worker w5 {\n+        lock {\n+            runtime:sleep(20);\n+            g = 1;\n+            h = 1;\n+        }\n+    }\n+\n+    @strand{thread:\"any\"}\n+    worker w6 {\n+        lock {\n+            runtime:sleep(20);\n+            b = 1;\n+            e = 1;\n+        }\n+    }\n+\n+    runtime:sleep(80);\n+\n+    if (!(a == 1 && b == 1 && c == 1 && d == 1 && e == 1 && f == 0 && g == 1 && h == 1)) {\n+        panic error(\"Error in parallel run using locks\");\n+    }\n+}\n+\n+int x = 0;\n+string y = \"\";\n+\n+function add() {\n+    x += 10;\n+    y += \"lockValueInFunction\";\n+}\n+\n+function testLockWithInvokableAccessingGlobal() {\n+    @strand{thread : \"any\"}\n+    worker w1 {\n+        lock {\n+            runtime:sleep(20);\n+            add();\n+        }\n+    }\n+\n+    @strand{thread : \"any\"}\n+    worker w2 {\n+        lock {\n+            runtime:sleep(20);\n+            add();\n+        }\n+    }\n+\n+    runtime:sleep(20);\n+    if (y == \"lockValueInFunctionlockValueInFunction\" || x == 20) {\n+        panic error(\"Invalid Value\");\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "051645da00d21c5bfcce038562e1438b4eb68fd6"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTE1MDcyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNToyNzo0MlrOGGVGZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNToyNzo0MlrOGGVGZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI5MDM0MQ==", "bodyText": "Discuss a better approach", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22320#discussion_r409290341", "createdAt": "2020-04-16T05:27:42Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -1977,10 +1992,29 @@ public void visit(BLangLockStmt lockStmt) {\n         BIRBasicBlock lockedBB = new BIRBasicBlock(this.env.nextBBId(names));\n         addToTrapStack(lockedBB);\n         this.env.enclBasicBlocks.add(lockedBB);\n-        this.env.enclBB.terminator = new BIRTerminator.Lock(null, lockedBB);\n+        BIRTerminator.Lock lock = new BIRTerminator.Lock(null, lockedBB);\n+        this.env.enclBB.terminator = lock;\n+        lockStmtMap.put(lockStmt, lock); // Populate the cache.\n+        this.env.unlockVars.peek().addLock(lock);\n+        populateBirLockWithGlobalVars(lockStmt);\n         this.env.enclBB = lockedBB;\n \n-        this.env.unlockVars.peek().numLocks++;\n+    }\n+\n+    private void populateBirLockWithGlobalVars(BLangLockStmt lockStmt) {\n+        for (BVarSymbol globalVar : lockStmt.lockVariables) {\n+            BIRGlobalVariableDcl birGlobalVar = globalVarMap.get(globalVar);\n+\n+            // If null query the dummy map for dummy variables.\n+            if (birGlobalVar == null) {\n+                birGlobalVar = dummyGlobalVarMapForLocks.computeIfAbsent(globalVar, k ->\n+                        new BIRGlobalVariableDcl(null, globalVar.flags, globalVar.type, globalVar.pkgID,\n+                                globalVar.name, VarScope.GLOBAL, VarKind.GLOBAL, globalVar.name.value)\n+                );\n+            }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "051645da00d21c5bfcce038562e1438b4eb68fd6"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4455, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}