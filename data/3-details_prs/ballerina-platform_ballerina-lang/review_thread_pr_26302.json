{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxMzAyMTE1", "number": 26302, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMToxOTowN1rOEslrrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMzo0ODozOVrOEtxALw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTkwMTg4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMToxOTowN1rOHf6b1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMToyMTo0MFrOHf6hFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzIyNTMwMA==", "bodyText": "I think parsing is correct in this scenario. byte[] is same as Person[]. Both are index-access expressions.\ni.e:\ntype Person record {|\n|}\n\npublic function main() {\n    var x = Person[]; // ----(1)\n    var y = byte[]; // ----(2)\n}\nBoth (1) and (2) are identical, in terms of syntax and semantics.\nIf we consider either of (1) 0r (2), compiler should give two errors:\n\nParser would give an error for missing index.\nSemantic analyzer would give an error saying invalid operation: type 'typedesc<int>' does not support indexing", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302#discussion_r503225300", "createdAt": "2020-10-12T11:19:07Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3828,6 +3828,30 @@ private STNode parseExpressionRhsInternal(OperatorPrecedence currentPrecedenceLe\n                     isInConditionalExpr);\n         }\n \n+        if (isSimpleTypeNode(lhsExpr.kind)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "646036af0136ca47aeb7b6c4c7024936d93a5e8e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzIyNjY0Nw==", "bodyText": "I think this needs to be fixed at semantic analyzer", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302#discussion_r503226647", "createdAt": "2020-10-12T11:21:40Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3828,6 +3828,30 @@ private STNode parseExpressionRhsInternal(OperatorPrecedence currentPrecedenceLe\n                     isInConditionalExpr);\n         }\n \n+        if (isSimpleTypeNode(lhsExpr.kind)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzIyNTMwMA=="}, "originalCommit": {"oid": "646036af0136ca47aeb7b6c4c7024936d93a5e8e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTc4NzkzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNjo1MzozOFrOHhEsPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNjo1MzozOFrOHhEsPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ0MTkxOQ==", "bodyText": "Shall we use NodeKind to check the type of the expression?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302#discussion_r504441919", "createdAt": "2020-10-14T06:53:38Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2584,6 +2584,12 @@ private boolean isXmlAccess(BLangFieldBasedAccess fieldAccessExpr) {\n \n     public void visit(BLangIndexBasedAccess indexBasedAccessExpr) {\n         // First analyze the variable reference expression.\n+        if (indexBasedAccessExpr.expr instanceof  BLangTypedescExpr) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61156777eb1ca783827bfe55d59308ed16cf4aad"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTgxNTUwOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/CustomFunctionTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzowMjo0NlrOHhE8yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMTozMjo0NFrOHhOm3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ0NjE1NQ==", "bodyText": "I'm not sure if the name/description is accurate?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302#discussion_r504446155", "createdAt": "2020-10-14T07:02:46Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/CustomFunctionTest.java", "diffHunk": "@@ -43,4 +43,12 @@ public void testDuplicateParameters() {\n         BAssertUtil.validateError(compile, 0, \"redeclared symbol 'param'\", 1, 35);\n     }\n \n+    @Test(description = \"Test defining ballerina function with extra parameters with missing comma\")\n+    public void testExtraParameters() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61156777eb1ca783827bfe55d59308ed16cf4aad"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYwMjI5NA==", "bodyText": "The issue is when an array-type-descriptor is used as an expression right? Not an issue with parameters?\nFor example, even the following fails\nfunction foo(any a) returns int {\n    return 1;\n}\n\ntypedesc t = byte[];\n\nint a = foo(t);\nShall we rename and move this test to TypedescTests maybe?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302#discussion_r504602294", "createdAt": "2020-10-14T11:28:41Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/CustomFunctionTest.java", "diffHunk": "@@ -43,4 +43,12 @@ public void testDuplicateParameters() {\n         BAssertUtil.validateError(compile, 0, \"redeclared symbol 'param'\", 1, 35);\n     }\n \n+    @Test(description = \"Test defining ballerina function with extra parameters with missing comma\")\n+    public void testExtraParameters() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ0NjE1NQ=="}, "originalCommit": {"oid": "61156777eb1ca783827bfe55d59308ed16cf4aad"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYwNDM4Mw==", "bodyText": "+1 will move", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302#discussion_r504604383", "createdAt": "2020-10-14T11:32:44Z", "author": {"login": "rdulmina"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/CustomFunctionTest.java", "diffHunk": "@@ -43,4 +43,12 @@ public void testDuplicateParameters() {\n         BAssertUtil.validateError(compile, 0, \"redeclared symbol 'param'\", 1, 35);\n     }\n \n+    @Test(description = \"Test defining ballerina function with extra parameters with missing comma\")\n+    public void testExtraParameters() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ0NjE1NQ=="}, "originalCommit": {"oid": "61156777eb1ca783827bfe55d59308ed16cf4aad"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTgxNjc0OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/functions/extra-parameters.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzowMzoxNVrOHhE9hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzowMzoxNVrOHhE9hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ0NjM0Mw==", "bodyText": "We use hyphens in module names and underscores in bal file names, shall we fix this?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302#discussion_r504446343", "createdAt": "2020-10-14T07:03:15Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/functions/extra-parameters.bal", "diffHunk": "@@ -0,0 +1,20 @@\n+//  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61156777eb1ca783827bfe55d59308ed16cf4aad"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTgyMzIzOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/CustomFunctionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzowNToyM1rOHhFBaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzowNToyM1rOHhFBaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ0NzMzNw==", "bodyText": "Shall we change this to use an index and validate the error count?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Assert.assertEquals(compile.getErrorCount(), 2);\n          \n          \n            \n                    BAssertUtil.validateError(compile, 0, \"invalid operation: type 'byte' does not support indexing\", 20, 13);\n          \n          \n            \n                    BAssertUtil.validateError(compile, 1, \"missing key expr in member access expr\", 20, 18);\n          \n          \n            \n                    int index = 0;\n          \n          \n            \n                    BAssertUtil.validateError(compile, index++, \"invalid operation: type 'byte' does not support indexing\", 20, 13);\n          \n          \n            \n                    BAssertUtil.validateError(compile, index++, \"missing key expr in member access expr\", 20, 18);\n          \n          \n            \n                    Assert.assertEquals(compile.getErrorCount(), index);\n          \n      \n    \n    \n  \n\nThat way we can validate that we only get the expected errors.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302#discussion_r504447337", "createdAt": "2020-10-14T07:05:23Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/CustomFunctionTest.java", "diffHunk": "@@ -43,4 +43,12 @@ public void testDuplicateParameters() {\n         BAssertUtil.validateError(compile, 0, \"redeclared symbol 'param'\", 1, 35);\n     }\n \n+    @Test(description = \"Test defining ballerina function with extra parameters with missing comma\")\n+    public void testExtraParameters() {\n+        CompileResult compile = BCompileUtil.compile(\"test-src/functions/extra-parameters.bal\");\n+        Assert.assertEquals(compile.getErrorCount(), 2);\n+        BAssertUtil.validateError(compile, 0, \"invalid operation: type 'byte' does not support indexing\", 20, 13);\n+        BAssertUtil.validateError(compile, 1, \"missing key expr in member access expr\", 20, 18);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61156777eb1ca783827bfe55d59308ed16cf4aad"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTgyMzYwOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/CustomFunctionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzowNTozMVrOHhFBnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzowNTozMVrOHhFBnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ0NzM5MQ==", "bodyText": "How about something like\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    CompileResult compile = BCompileUtil.compile(\"test-src/functions/extra-parameters.bal\");\n          \n          \n            \n                    CompileResult compileResult = BCompileUtil.compile(\"test-src/functions/extra-parameters.bal\");", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302#discussion_r504447391", "createdAt": "2020-10-14T07:05:31Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/CustomFunctionTest.java", "diffHunk": "@@ -43,4 +43,12 @@ public void testDuplicateParameters() {\n         BAssertUtil.validateError(compile, 0, \"redeclared symbol 'param'\", 1, 35);\n     }\n \n+    @Test(description = \"Test defining ballerina function with extra parameters with missing comma\")\n+    public void testExtraParameters() {\n+        CompileResult compile = BCompileUtil.compile(\"test-src/functions/extra-parameters.bal\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61156777eb1ca783827bfe55d59308ed16cf4aad"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTgyNTgzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzowNjoxNVrOHhFC_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzowNjoxNVrOHhFC_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ0Nzc0Mg==", "bodyText": "Shall we also extract indexBasedAccessExpr.expr out to a variable? Seems to be used over and over again.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302#discussion_r504447742", "createdAt": "2020-10-14T07:06:15Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2584,6 +2584,12 @@ private boolean isXmlAccess(BLangFieldBasedAccess fieldAccessExpr) {\n \n     public void visit(BLangIndexBasedAccess indexBasedAccessExpr) {\n         // First analyze the variable reference expression.\n+        if (indexBasedAccessExpr.expr instanceof  BLangTypedescExpr) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61156777eb1ca783827bfe55d59308ed16cf4aad"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDI0MjM5OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/bytetype/BByteArrayValueNegativeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMzo0ODozOVrOHhvxeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMzo1MDowOVrOHhvy1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0Nzc3MA==", "bodyText": "Let's move this test to org.ballerinalang.test.types.typedesc.TypedescTests as discussed. Can you also add another test similar to\npublic function main() {\n    typedesc t = int[]|string[];\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302#discussion_r505147770", "createdAt": "2020-10-15T03:48:39Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/bytetype/BByteArrayValueNegativeTest.java", "diffHunk": "@@ -67,5 +66,8 @@ public void testBlobValueNegative() {\n         BAssertUtil.validateError(result, index++, \"missing plus token\", 16, 23);\n         BAssertUtil.validateError(result, index++, \"invalid base64 content in byte array literal\", 17, 23);\n         BAssertUtil.validateError(result, index++, \"invalid base64 content in byte array literal\", 18, 23);\n+        BAssertUtil.validateError(result, index++, \"invalid operation: type 'byte' does not support indexing\", 19, 18);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b192ccaae3a51dd83f1f755640a7c4dfe66d5033"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0ODExNw==", "bodyText": "sure", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26302#discussion_r505148117", "createdAt": "2020-10-15T03:50:09Z", "author": {"login": "rdulmina"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/bytetype/BByteArrayValueNegativeTest.java", "diffHunk": "@@ -67,5 +66,8 @@ public void testBlobValueNegative() {\n         BAssertUtil.validateError(result, index++, \"missing plus token\", 16, 23);\n         BAssertUtil.validateError(result, index++, \"invalid base64 content in byte array literal\", 17, 23);\n         BAssertUtil.validateError(result, index++, \"invalid base64 content in byte array literal\", 18, 23);\n+        BAssertUtil.validateError(result, index++, \"invalid operation: type 'byte' does not support indexing\", 19, 18);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0Nzc3MA=="}, "originalCommit": {"oid": "b192ccaae3a51dd83f1f755640a7c4dfe66d5033"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4917, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}