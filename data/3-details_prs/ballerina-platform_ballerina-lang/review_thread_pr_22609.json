{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMzI1ODc3", "number": 22609, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMjoxMzo0MFrODx412Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwOToyMToyNVrODyajzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjM4MTA1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMjoxMzo0MFrOGFnVTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMjoxMzo0MFrOGFnVTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0MDQ5NQ==", "bodyText": "Why do we need to special case is keyword here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408540495", "createdAt": "2020-04-15T02:13:40Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -2699,6 +2707,8 @@ private STNode parseExpressionRhs(OperatorPrecedence currentPrecedenceLevel, Syn\n                 // that matches to the current operator precedence level, and continue.\n                 SyntaxKind binaryOpKind = getOperatorKindToInsert(currentPrecedenceLevel);\n                 return parseExpressionRhs(currentPrecedenceLevel, binaryOpKind, lhsExpr, isAssignmentLhs);\n+            } else if (solution.ctx == ParserRuleContext.IS_KEYWORD) {\n+                return parseExpressionRhs(currentPrecedenceLevel, SyntaxKind.IS_KEYWORD, lhsExpr, isAssignmentLhs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjM4MzY4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMjoxNToxMlrOGFnWxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNTozMjowMVrOGFqXJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0MDg3MA==", "bodyText": "Does these two lines needs to be switched?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408540870", "createdAt": "2020-04-15T02:15:12Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4702,5 +4716,37 @@ private boolean isUnaryOperator(SyntaxKind kind) {\n                 return false;\n         }\n     }\n+\n+    /**\n+     * Parse is expression.\n+     * <code>\n+     * is-expr := expression is type-descriptor\n+     * </code>\n+     *\n+     * @param lhsExpr Preceding expression of the is expression\n+     * @return Is expression node\n+     */\n+    private STNode parseIsExpression(STNode lhsExpr) {\n+        STNode isKeyword = parseIsKeyword();\n+        startContext(ParserRuleContext.IS_EXPRESSION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0NDI3NQ==", "bodyText": "Do we need to start a context at all?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408544275", "createdAt": "2020-04-15T02:28:02Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4702,5 +4716,37 @@ private boolean isUnaryOperator(SyntaxKind kind) {\n                 return false;\n         }\n     }\n+\n+    /**\n+     * Parse is expression.\n+     * <code>\n+     * is-expr := expression is type-descriptor\n+     * </code>\n+     *\n+     * @param lhsExpr Preceding expression of the is expression\n+     * @return Is expression node\n+     */\n+    private STNode parseIsExpression(STNode lhsExpr) {\n+        STNode isKeyword = parseIsKeyword();\n+        startContext(ParserRuleContext.IS_EXPRESSION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0MDg3MA=="}, "originalCommit": {"oid": "11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4ODUwNQ==", "bodyText": "Without starting a context,  getNextRuleForSimpleTypeDesc() looks for a VARIABLE_NAME. But for is_expression we need to have expression_rhs as the next rule right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408588505", "createdAt": "2020-04-15T05:26:12Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4702,5 +4716,37 @@ private boolean isUnaryOperator(SyntaxKind kind) {\n                 return false;\n         }\n     }\n+\n+    /**\n+     * Parse is expression.\n+     * <code>\n+     * is-expr := expression is type-descriptor\n+     * </code>\n+     *\n+     * @param lhsExpr Preceding expression of the is expression\n+     * @return Is expression node\n+     */\n+    private STNode parseIsExpression(STNode lhsExpr) {\n+        STNode isKeyword = parseIsKeyword();\n+        startContext(ParserRuleContext.IS_EXPRESSION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0MDg3MA=="}, "originalCommit": {"oid": "11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5MDExOQ==", "bodyText": "ack.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408590119", "createdAt": "2020-04-15T05:32:01Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4702,5 +4716,37 @@ private boolean isUnaryOperator(SyntaxKind kind) {\n                 return false;\n         }\n     }\n+\n+    /**\n+     * Parse is expression.\n+     * <code>\n+     * is-expr := expression is type-descriptor\n+     * </code>\n+     *\n+     * @param lhsExpr Preceding expression of the is expression\n+     * @return Is expression node\n+     */\n+    private STNode parseIsExpression(STNode lhsExpr) {\n+        STNode isKeyword = parseIsKeyword();\n+        startContext(ParserRuleContext.IS_EXPRESSION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0MDg3MA=="}, "originalCommit": {"oid": "11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjQzOTg2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMjo0NzowM1rOGFn3hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNTozMjozMFrOGFqXog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0OTI1Mg==", "bodyText": "ParserErrorHandle should handle this IMO", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408549252", "createdAt": "2020-04-15T02:47:03Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1421,7 +1423,12 @@ private STNode parseTypeDescriptor(SyntaxKind tokenKind) {\n                 return parseNilTypeDescriptor();\n             default:\n                 STToken token = peek();\n-                Solution solution = recover(token, ParserRuleContext.TYPE_DESCRIPTOR);\n+                Solution solution;\n+                if (token.kind == SyntaxKind.EOF_TOKEN) {\n+                    solution = recover(token, ParserRuleContext.SIMPLE_TYPE_DESCRIPTOR);\n+                } else {\n+                    solution = recover(token, ParserRuleContext.TYPE_DESCRIPTOR);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4Njg1NQ==", "bodyText": "Without above modification test(\"3 is\", \"is-expr/is_expr_assert_04.json\"); fails.\nIn error recovery for EOF, we directly insert current ctx. For TYPE_DESCRIPTOR ctx, getExpectedTokenKind(currentCtx); returns a NONE syntax kind.\nSo I ended up getting a java.lang.StackOverflowError as return parseTypeDescriptor(solution.tokenKind); line calls repeatedly.\ntest(\"3 is ;\", \"is-expr/is_expr_assert_04.json\"); Passes as there's a semicolon next to 'is' keyword", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408586855", "createdAt": "2020-04-15T05:20:20Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1421,7 +1423,12 @@ private STNode parseTypeDescriptor(SyntaxKind tokenKind) {\n                 return parseNilTypeDescriptor();\n             default:\n                 STToken token = peek();\n-                Solution solution = recover(token, ParserRuleContext.TYPE_DESCRIPTOR);\n+                Solution solution;\n+                if (token.kind == SyntaxKind.EOF_TOKEN) {\n+                    solution = recover(token, ParserRuleContext.SIMPLE_TYPE_DESCRIPTOR);\n+                } else {\n+                    solution = recover(token, ParserRuleContext.TYPE_DESCRIPTOR);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0OTI1Mg=="}, "originalCommit": {"oid": "11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4ODI2NQ==", "bodyText": "I see..\nWhat if we update the getExpectedTokenKind() method to return a SIMPLE_TYPE, for TYPE_DESCRIPTOR context?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408588265", "createdAt": "2020-04-15T05:25:16Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1421,7 +1423,12 @@ private STNode parseTypeDescriptor(SyntaxKind tokenKind) {\n                 return parseNilTypeDescriptor();\n             default:\n                 STToken token = peek();\n-                Solution solution = recover(token, ParserRuleContext.TYPE_DESCRIPTOR);\n+                Solution solution;\n+                if (token.kind == SyntaxKind.EOF_TOKEN) {\n+                    solution = recover(token, ParserRuleContext.SIMPLE_TYPE_DESCRIPTOR);\n+                } else {\n+                    solution = recover(token, ParserRuleContext.TYPE_DESCRIPTOR);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0OTI1Mg=="}, "originalCommit": {"oid": "11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5MDI0Mg==", "bodyText": "yeah. it works. let's do that way.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408590242", "createdAt": "2020-04-15T05:32:30Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1421,7 +1423,12 @@ private STNode parseTypeDescriptor(SyntaxKind tokenKind) {\n                 return parseNilTypeDescriptor();\n             default:\n                 STToken token = peek();\n-                Solution solution = recover(token, ParserRuleContext.TYPE_DESCRIPTOR);\n+                Solution solution;\n+                if (token.kind == SyntaxKind.EOF_TOKEN) {\n+                    solution = recover(token, ParserRuleContext.SIMPLE_TYPE_DESCRIPTOR);\n+                } else {\n+                    solution = recover(token, ParserRuleContext.TYPE_DESCRIPTOR);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0OTI1Mg=="}, "originalCommit": {"oid": "11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjQ0NTI5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMjo0OTo1NFrOGFn6kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNjowMjoyMVrOGFq7bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU1MDAzMw==", "bodyText": "Can't we handle this in a similar way to the binary expression?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408550033", "createdAt": "2020-04-15T02:49:54Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -824,6 +824,11 @@ private Result seekMatch(ParserRuleContext currentCtx, int lookahead, int curren\n                 case UNARY_OPERATOR:\n                     hasMatch = isUnaryOperator(nextToken);\n                     break;\n+                case IS_KEYWORD:\n+                    hasMatch = nextToken.kind == SyntaxKind.IS_KEYWORD;\n+                    break;\n+                case IS_EXPRESSION:\n+                    return seekInIsExpression(currentCtx, lookahead, currentDepth, matchingRulesCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4OTA3NA==", "bodyText": "that means we don't need IS_EXPRESSION in ParserRuleContext[] EXPRESSIONS array?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408589074", "createdAt": "2020-04-15T05:28:08Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -824,6 +824,11 @@ private Result seekMatch(ParserRuleContext currentCtx, int lookahead, int curren\n                 case UNARY_OPERATOR:\n                     hasMatch = isUnaryOperator(nextToken);\n                     break;\n+                case IS_KEYWORD:\n+                    hasMatch = nextToken.kind == SyntaxKind.IS_KEYWORD;\n+                    break;\n+                case IS_EXPRESSION:\n+                    return seekInIsExpression(currentCtx, lookahead, currentDepth, matchingRulesCount);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU1MDAzMw=="}, "originalCommit": {"oid": "11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5MDc1Mg==", "bodyText": "I was mimicking ACCESS_EXPRESSION there btw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408590752", "createdAt": "2020-04-15T05:34:16Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -824,6 +824,11 @@ private Result seekMatch(ParserRuleContext currentCtx, int lookahead, int curren\n                 case UNARY_OPERATOR:\n                     hasMatch = isUnaryOperator(nextToken);\n                     break;\n+                case IS_KEYWORD:\n+                    hasMatch = nextToken.kind == SyntaxKind.IS_KEYWORD;\n+                    break;\n+                case IS_EXPRESSION:\n+                    return seekInIsExpression(currentCtx, lookahead, currentDepth, matchingRulesCount);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU1MDAzMw=="}, "originalCommit": {"oid": "11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5ODczMw==", "bodyText": "I see. Ok, let's keep this for now.\nI think we will have to refactor both of these to be aligned with the binary expression. Can you please create an issue?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408598733", "createdAt": "2020-04-15T06:00:00Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -824,6 +824,11 @@ private Result seekMatch(ParserRuleContext currentCtx, int lookahead, int curren\n                 case UNARY_OPERATOR:\n                     hasMatch = isUnaryOperator(nextToken);\n                     break;\n+                case IS_KEYWORD:\n+                    hasMatch = nextToken.kind == SyntaxKind.IS_KEYWORD;\n+                    break;\n+                case IS_EXPRESSION:\n+                    return seekInIsExpression(currentCtx, lookahead, currentDepth, matchingRulesCount);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU1MDAzMw=="}, "originalCommit": {"oid": "11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5OTQwNw==", "bodyText": "sure.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408599407", "createdAt": "2020-04-15T06:02:21Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -824,6 +824,11 @@ private Result seekMatch(ParserRuleContext currentCtx, int lookahead, int curren\n                 case UNARY_OPERATOR:\n                     hasMatch = isUnaryOperator(nextToken);\n                     break;\n+                case IS_KEYWORD:\n+                    hasMatch = nextToken.kind == SyntaxKind.IS_KEYWORD;\n+                    break;\n+                case IS_EXPRESSION:\n+                    return seekInIsExpression(currentCtx, lookahead, currentDepth, matchingRulesCount);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU1MDAzMw=="}, "originalCommit": {"oid": "11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjQ0ODM0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMjo1MTo1NFrOGFn8cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMjo1MTo1NFrOGFn8cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU1MDUxNA==", "bodyText": "startContext() is only called at one place currently. Can we stick to that?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r408550514", "createdAt": "2020-04-15T02:51:54Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -1520,6 +1527,9 @@ private ParserRuleContext getNextRule(ParserRuleContext currentCtx, int nextLook\n                 return ParserRuleContext.UNARY_OPERATOR;\n             case UNARY_OPERATOR:\n                 return ParserRuleContext.EXPRESSION;\n+            case IS_KEYWORD:\n+                startContext(ParserRuleContext.IS_EXPRESSION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11e48ad3a2ae6cebf3c927ebfe9547ececb9ea61"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTkwNTQyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwOToyMToyNVrOGGcYEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwOTo1MTo0NVrOGGditg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwOTU1Mg==", "bodyText": "Incorrect indentation.\nI'l merge this PR anyway. Please fix it in the next PR.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r409409552", "createdAt": "2020-04-16T09:21:25Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -1353,10 +1359,10 @@ private ParserRuleContext getNextRule(ParserRuleContext currentCtx, int nextLook\n                     endContext(); // end parameter-list\n                 }\n                 if (parentCtx == ParserRuleContext.NIL_TYPE_DESCRIPTOR) {\n-                    endContext();\n-                    // After parsing nil type descriptor all the other parsing is same as next rule of simple type\n-                    return getNextRuleForTypeDescriptor();\n-                }\n+                endContext();\n+                // After parsing nil type descriptor all the other parsing is same as next rule of simple type\n+                return getNextRuleForTypeDescriptor();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fa67aeb80eff705a5e7df4f132289d8c6dd1e0d"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQyODY2Mg==", "bodyText": "sure", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22609#discussion_r409428662", "createdAt": "2020-04-16T09:51:45Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -1353,10 +1359,10 @@ private ParserRuleContext getNextRule(ParserRuleContext currentCtx, int nextLook\n                     endContext(); // end parameter-list\n                 }\n                 if (parentCtx == ParserRuleContext.NIL_TYPE_DESCRIPTOR) {\n-                    endContext();\n-                    // After parsing nil type descriptor all the other parsing is same as next rule of simple type\n-                    return getNextRuleForTypeDescriptor();\n-                }\n+                endContext();\n+                // After parsing nil type descriptor all the other parsing is same as next rule of simple type\n+                return getNextRuleForTypeDescriptor();\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwOTU1Mg=="}, "originalCommit": {"oid": "6fa67aeb80eff705a5e7df4f132289d8c6dd1e0d"}, "originalPosition": 103}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4416, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}