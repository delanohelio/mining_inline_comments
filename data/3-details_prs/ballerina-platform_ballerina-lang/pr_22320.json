{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NzM3Mzcy", "number": 22320, "title": "Enable parallel run of strands where global locks arent shared inside locks", "bodyText": "Purpose\n\nIn the 1.2.0 release the concurrent design was supported but the parallelism was reduced when locks were used. This has been fixed in this PR.\n\n\nNow as long as two locks does not share the same global variables within them, then can run parallely.\n\nFixes #21075\nApproach\n\nCollect global variables accessed within lock statement.\nAnalyse the lock statements and put them in to sets by the locks they use.\nThis will give us a set of disjoint sets.\nCreate JVM locks for each set.\n\nSamples\n\nProvide high-level details about the samples related to this feature.\n\nRemarks\n\nList any other known issues, related PRs, TODO items, or any other notes related to the PR.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-03-30T15:46:44Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22320", "merged": true, "mergeCommit": {"oid": "d409f3a12721a34be841fab1ade394cfafcde791"}, "closed": true, "closedAt": "2020-04-22T13:51:07Z", "author": {"login": "dulvinw"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTAsvrgFqTM4NDYwODQzNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaInvvAFqTM5ODIxMTkxNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NjA4NDM1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22320#pullrequestreview-384608435", "createdAt": "2020-03-31T10:39:30Z", "commit": {"oid": "f3ea633c53d30822730b04dd30c3777533e25114"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDozOTozMVrOF-Pp0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDozOTozMVrOF-Pp0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxMjQ5Nw==", "bodyText": "This formating looks weird. Can you check this?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22320#discussion_r400812497", "createdAt": "2020-03-31T10:39:31Z", "author": {"login": "hasithaa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/optimizer/BIRLockOptimizer.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ *  *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3ea633c53d30822730b04dd30c3777533e25114"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MDUwOTE2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22320#pullrequestreview-387050916", "createdAt": "2020-04-03T08:20:26Z", "commit": {"oid": "eb70b0adf204aa560a4f79d28ce9c0f8073b3bf0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODoyMDoyNlrOGAKYwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODoyMDoyNlrOGAKYwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgyMzM2MA==", "bodyText": "lockName not used anymore", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22320#discussion_r402823360", "createdAt": "2020-04-03T08:20:26Z", "author": {"login": "KRVPerera"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BLockStore.java", "diffHunk": "@@ -50,12 +50,13 @@ public BLock getLockFromMap(String lockName) {\n     }\n \n     public void panicIfInLock(String lockName, Strand strand) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb70b0adf204aa560a4f79d28ce9c0f8073b3bf0"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MDk3NDkx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22320#pullrequestreview-387097491", "createdAt": "2020-04-03T09:28:29Z", "commit": {"oid": "eb70b0adf204aa560a4f79d28ce9c0f8073b3bf0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOToyODoyOVrOGANr_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOToyODoyOVrOGANr_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3NzQzOQ==", "bodyText": "should this be currentLockSetId instead of currentLockId  ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22320#discussion_r402877439", "createdAt": "2020-04-03T09:28:29Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/optimizer/BIRLockOptimizer.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.bir.optimizer;\n+\n+import org.wso2.ballerinalang.compiler.bir.model.BIRNode;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRTerminator;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRVisitor;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Optimize Locks.\n+ *\n+ * @since 1.2.1\n+ */\n+public class BIRLockOptimizer extends BIRVisitor {\n+\n+    private List<BIRTerminator.Lock> lockList = new ArrayList<>();\n+    private Map<BIRTerminator.Lock, Integer> lockToSetMap = new HashMap<>();\n+    private Map<Integer, List<BIRTerminator.Lock>> setToLockMap = new HashMap<>();\n+    private int setId = -1;\n+\n+    public void optimizeNode(BIRNode node) {\n+        // Collect lock nodes\n+        node.accept(this);\n+\n+        // Identify disjoint locks\n+        optimizeLocks();\n+    }\n+\n+    private void optimizeLocks() {\n+        analyzeLocks();\n+        propagateLocks();\n+    }\n+\n+    private void propagateLocks() {\n+        for (Map.Entry<Integer, List<BIRTerminator.Lock>> entry : setToLockMap.entrySet()) {\n+            Integer lockId = entry.getKey();\n+            for (BIRTerminator.Lock lock : entry.getValue()) {\n+                lock.lockId = lockId;\n+            }\n+        }\n+    }\n+\n+    private void analyzeLocks() {\n+        for (int lockListIndex = 0; lockListIndex < lockList.size(); lockListIndex++) {\n+            if (!lockToSetMap.containsKey(lockList.get(lockListIndex))) {\n+                analyzeUnvisitedLock(lockListIndex);\n+            } else {\n+                analyzeVisitedLock(lockListIndex);\n+            }\n+        }\n+    }\n+\n+    private void analyzeVisitedLock(int lockListIndex) {\n+        BIRTerminator.Lock currentLock = lockList.get(lockListIndex);\n+        int previousSetId = setId;\n+        Integer currentSetIdLocal = lockToSetMap.get(currentLock);\n+        List<BIRTerminator.Lock> currentSet = setToLockMap.get(currentSetIdLocal);\n+\n+        // Use the setId of the current one for the other shared locks\n+        setId = currentSetIdLocal;\n+        populateLockSet(currentSet, currentLock, lockListIndex);\n+        setId = previousSetId;\n+    }\n+\n+    private void analyzeUnvisitedLock(int lockListIndex) {\n+        BIRTerminator.Lock currentLock = lockList.get(lockListIndex);\n+        List<BIRTerminator.Lock> currentSet = new LinkedList<>();\n+\n+        // Add to the maps for the current unvisited lock.\n+        lockToSetMap.put(currentLock, ++setId);\n+\n+        // Compare with the rest of the locks.\n+        currentSet.add(currentLock);\n+\n+        populateLockSet(currentSet, currentLock, lockListIndex);\n+\n+        setToLockMap.put(setId, currentSet);\n+    }\n+\n+    private void populateLockSet(List<BIRTerminator.Lock> currentSet, BIRTerminator.Lock currentLock,\n+            int lockListIndex) {\n+        for (int i = (lockListIndex + 1); i < lockList.size(); i++) {\n+            BIRTerminator.Lock comparedLock = lockList.get(i);\n+            Set<BIRNode.BIRGlobalVariableDcl> globalVarSetOfComparedLock = comparedLock.lockVariables;\n+\n+            if (isSharedLock(currentLock, globalVarSetOfComparedLock)\n+                && isNotInSameSet(currentLock, comparedLock)) {\n+                populateLockSet(currentSet, comparedLock);\n+            }\n+        }\n+    }\n+\n+    private boolean isNotInSameSet(BIRTerminator.Lock currentLock, BIRTerminator.Lock comparedLock) {\n+        Integer currentLockId = lockToSetMap.get(currentLock);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb70b0adf204aa560a4f79d28ce9c0f8073b3bf0"}, "originalPosition": 116}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b8048c84084ae5e19a08ee95e8993199dbdbe0cc", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b8048c84084ae5e19a08ee95e8993199dbdbe0cc", "committedDate": "2020-04-06T10:35:00Z", "message": "Collect global variables depended in invokableSymbol"}, "afterCommit": {"oid": "53e468132883a58fb15b8154434486778bd48054", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/53e468132883a58fb15b8154434486778bd48054", "committedDate": "2020-04-06T10:35:39Z", "message": "Collect global variables depended in invokableSymbol"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b48e4c8d77e2e7724ab273506169819225dc0e19", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b48e4c8d77e2e7724ab273506169819225dc0e19", "committedDate": "2020-04-15T08:58:04Z", "message": "Fix checkstyle and spotbugs"}, "afterCommit": {"oid": "9149a4eb20ed49edb6e089b911b23bd3f5d52c33", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9149a4eb20ed49edb6e089b911b23bd3f5d52c33", "committedDate": "2020-04-15T15:23:44Z", "message": "Fix checkstyle and spotbugs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MzA1OTg0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22320#pullrequestreview-394305984", "createdAt": "2020-04-16T05:22:05Z", "commit": {"oid": "051645da00d21c5bfcce038562e1438b4eb68fd6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNToyMjowNVrOGGVAIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNToyMjowNVrOGGVAIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI4ODczNg==", "bodyText": "Add recursive calls test case.\nAdd import testcase", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22320#discussion_r409288736", "createdAt": "2020-04-16T05:22:05Z", "author": {"login": "dulvinw"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/lock/parallel-run-lock.bal", "diffHunk": "@@ -0,0 +1,101 @@\n+import ballerina/runtime;\n+\n+int a = 0;\n+int b = 0;\n+int c = 0;\n+int d = 0;\n+int e = 0;\n+int f = 0;\n+int g = 0;\n+int h = 0;\n+\n+function runParallelUsingLocks() {\n+    @strand{thread:\"any\"}\n+    worker w1 {\n+        lock {\n+            runtime:sleep(20);\n+            a = 1;\n+        }\n+    }\n+\n+    @strand{thread:\"any\"}\n+    worker w2 {\n+        lock {\n+            runtime:sleep(20);\n+            b = 1;\n+        }\n+    }\n+\n+    @strand{thread:\"any\"}\n+    worker w3 {\n+        lock {\n+            runtime:sleep(20);\n+            c = 1;\n+            d = 1;\n+        }\n+    }\n+\n+    @strand{thread:\"any\"}\n+    worker w4 {\n+        lock {\n+            runtime:sleep(20);\n+            d = 1;\n+            e = 1;\n+        }\n+    }\n+\n+    @strand{thread:\"any\"}\n+    worker w5 {\n+        lock {\n+            runtime:sleep(20);\n+            g = 1;\n+            h = 1;\n+        }\n+    }\n+\n+    @strand{thread:\"any\"}\n+    worker w6 {\n+        lock {\n+            runtime:sleep(20);\n+            b = 1;\n+            e = 1;\n+        }\n+    }\n+\n+    runtime:sleep(80);\n+\n+    if (!(a == 1 && b == 1 && c == 1 && d == 1 && e == 1 && f == 0 && g == 1 && h == 1)) {\n+        panic error(\"Error in parallel run using locks\");\n+    }\n+}\n+\n+int x = 0;\n+string y = \"\";\n+\n+function add() {\n+    x += 10;\n+    y += \"lockValueInFunction\";\n+}\n+\n+function testLockWithInvokableAccessingGlobal() {\n+    @strand{thread : \"any\"}\n+    worker w1 {\n+        lock {\n+            runtime:sleep(20);\n+            add();\n+        }\n+    }\n+\n+    @strand{thread : \"any\"}\n+    worker w2 {\n+        lock {\n+            runtime:sleep(20);\n+            add();\n+        }\n+    }\n+\n+    runtime:sleep(20);\n+    if (y == \"lockValueInFunctionlockValueInFunction\" || x == 20) {\n+        panic error(\"Invalid Value\");\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "051645da00d21c5bfcce038562e1438b4eb68fd6"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MzA3ODYx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22320#pullrequestreview-394307861", "createdAt": "2020-04-16T05:27:42Z", "commit": {"oid": "051645da00d21c5bfcce038562e1438b4eb68fd6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNToyNzo0MlrOGGVGZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNToyNzo0MlrOGGVGZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI5MDM0MQ==", "bodyText": "Discuss a better approach", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22320#discussion_r409290341", "createdAt": "2020-04-16T05:27:42Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java", "diffHunk": "@@ -1977,10 +1992,29 @@ public void visit(BLangLockStmt lockStmt) {\n         BIRBasicBlock lockedBB = new BIRBasicBlock(this.env.nextBBId(names));\n         addToTrapStack(lockedBB);\n         this.env.enclBasicBlocks.add(lockedBB);\n-        this.env.enclBB.terminator = new BIRTerminator.Lock(null, lockedBB);\n+        BIRTerminator.Lock lock = new BIRTerminator.Lock(null, lockedBB);\n+        this.env.enclBB.terminator = lock;\n+        lockStmtMap.put(lockStmt, lock); // Populate the cache.\n+        this.env.unlockVars.peek().addLock(lock);\n+        populateBirLockWithGlobalVars(lockStmt);\n         this.env.enclBB = lockedBB;\n \n-        this.env.unlockVars.peek().numLocks++;\n+    }\n+\n+    private void populateBirLockWithGlobalVars(BLangLockStmt lockStmt) {\n+        for (BVarSymbol globalVar : lockStmt.lockVariables) {\n+            BIRGlobalVariableDcl birGlobalVar = globalVarMap.get(globalVar);\n+\n+            // If null query the dummy map for dummy variables.\n+            if (birGlobalVar == null) {\n+                birGlobalVar = dummyGlobalVarMapForLocks.computeIfAbsent(globalVar, k ->\n+                        new BIRGlobalVariableDcl(null, globalVar.flags, globalVar.type, globalVar.pkgID,\n+                                globalVar.name, VarScope.GLOBAL, VarKind.GLOBAL, globalVar.name.value)\n+                );\n+            }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "051645da00d21c5bfcce038562e1438b4eb68fd6"}, "originalPosition": 90}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "687beb3231ab302b589b4beb7adba2907dd36787", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/687beb3231ab302b589b4beb7adba2907dd36787", "committedDate": "2020-04-16T10:47:05Z", "message": "Add import testcase"}, "afterCommit": {"oid": "846d1cfe90372855d571cf5e8776c7bd452fc634", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/846d1cfe90372855d571cf5e8776c7bd452fc634", "committedDate": "2020-04-17T09:13:29Z", "message": "Remove unwanted code form RefAnalyzer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86848716d825916328701083195a1a4db7356738", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/86848716d825916328701083195a1a4db7356738", "committedDate": "2020-04-20T07:08:38Z", "message": "Catch global variables in lockstatment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ad2cfe9096f28fc7857c14797ab40c87035e7d3", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3ad2cfe9096f28fc7857c14797ab40c87035e7d3", "committedDate": "2020-04-20T07:08:38Z", "message": "Add global vars to BIR Locks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6d085bab2f39650dd0f99797b9617cef9f456f8", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c6d085bab2f39650dd0f99797b9617cef9f456f8", "committedDate": "2020-04-20T07:08:38Z", "message": "Add todo to fix the runtime exception"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41ff64c96f4b5de0e72815d779e1633f5b43ebe9", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/41ff64c96f4b5de0e72815d779e1633f5b43ebe9", "committedDate": "2020-04-20T07:08:38Z", "message": "Analyze Locks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "169458ea33d4a4a30f68b57ef2ac846b8868c77f", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/169458ea33d4a4a30f68b57ef2ac846b8868c77f", "committedDate": "2020-04-20T07:08:39Z", "message": "Fix analyzing logic for LockOptimizer where incorrectly left an old set\nstay and adding the same lock twice to a group."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "114c2d2f435143ee275f994b0b21753f962c6874", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/114c2d2f435143ee275f994b0b21753f962c6874", "committedDate": "2020-04-20T07:08:39Z", "message": "Propagate the set Id to the BIR Locknode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8229783505adae450d9b8c238b3b8f9e891cbd82", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8229783505adae450d9b8c238b3b8f9e891cbd82", "committedDate": "2020-04-20T07:08:39Z", "message": "Add backend changes to reflect lock improvmnet"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95daf6ea9882f7ea0987787c31f37fdc0055a981", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/95daf6ea9882f7ea0987787c31f37fdc0055a981", "committedDate": "2020-04-20T07:08:39Z", "message": "Improve lock optimizer to not populate if the shared sets are in same\nset Id.\nChanged the Lock store to panic scanning all locks."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f5b06cb410ab615c2b06afd9a4343d58fe20aed", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7f5b06cb410ab615c2b06afd9a4343d58fe20aed", "committedDate": "2020-04-20T07:08:39Z", "message": "Add test case to check running in parallel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb352fe2d131fecc6f82c2c561e23e6f7e3ec628", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bb352fe2d131fecc6f82c2c561e23e6f7e3ec628", "committedDate": "2020-04-20T07:08:39Z", "message": "Fix spotbugs and checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0eee017522c2cef755580b4e0d6d1b4777f8c98e", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0eee017522c2cef755580b4e0d6d1b4777f8c98e", "committedDate": "2020-04-20T07:08:39Z", "message": "Fix Copyright formatting issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13902b44d23214abcad9cb8b81beb0552a39b617", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/13902b44d23214abcad9cb8b81beb0552a39b617", "committedDate": "2020-04-20T07:08:39Z", "message": "Collect global variables depended in invokableSymbol"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a6d74aab713b2471ad179b03afa845bf19e9a9d", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4a6d74aab713b2471ad179b03afa845bf19e9a9d", "committedDate": "2020-04-20T07:08:39Z", "message": "Improve global variable collection.\nTODO : Need to change DFS logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ff518f0471e8c8f446048f190e1e9066587e0d2", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3ff518f0471e8c8f446048f190e1e9066587e0d2", "committedDate": "2020-04-20T07:08:39Z", "message": "DFS to capture dependencies.\nCycle handling, if hit a cycle, capture the global variables from the\ncycle lead and add it as dependencies and assume the previous node as a\nleaf node."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08b5853632fe905ca7de21341a4af22ca8476500", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/08b5853632fe905ca7de21341a4af22ca8476500", "committedDate": "2020-04-20T07:08:39Z", "message": "Add dependency calculation in BLangLocks in DataFlowAnalyzer.\nPopulate dependencies for locks in BInvokableNodes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b57296b014297e54f806a18d87f903143c8bdad7", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b57296b014297e54f806a18d87f903143c8bdad7", "committedDate": "2020-04-20T07:08:39Z", "message": "Add Testcases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7933e43dfdcb9856933c0b6f394f58f981df7700", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7933e43dfdcb9856933c0b6f394f58f981df7700", "committedDate": "2020-04-20T07:08:39Z", "message": "Fix checkstyle and spotbugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37155338a9755580f013540ac2c445914fa333f8", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/37155338a9755580f013540ac2c445914fa333f8", "committedDate": "2020-04-20T07:08:39Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fea02fee9b7db63f7107fc42e71f91a31c55c660", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fea02fee9b7db63f7107fc42e71f91a31c55c660", "committedDate": "2020-04-20T07:08:39Z", "message": "Add imported module global var support. Need to add a testcase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b3a381d0e9772fa5da2fba4d9049fb98df7d655", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2b3a381d0e9772fa5da2fba4d9049fb98df7d655", "committedDate": "2020-04-20T07:08:39Z", "message": "Add recursive tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c6a3307b051adb3179187c33821fa7d2950a1b1", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0c6a3307b051adb3179187c33821fa7d2950a1b1", "committedDate": "2020-04-20T07:08:39Z", "message": "Add import testcase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c185d17a497f21a00d67f24cef628c005e1452c0", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c185d17a497f21a00d67f24cef628c005e1452c0", "committedDate": "2020-04-20T07:08:40Z", "message": "Remove unwanted code form RefAnalyzer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4079f41a5a3315bda2f9e3d5b049e58e309bdf59", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4079f41a5a3315bda2f9e3d5b049e58e309bdf59", "committedDate": "2020-04-20T11:33:34Z", "message": "Add the test files for the import testcase"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "846d1cfe90372855d571cf5e8776c7bd452fc634", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/846d1cfe90372855d571cf5e8776c7bd452fc634", "committedDate": "2020-04-17T09:13:29Z", "message": "Remove unwanted code form RefAnalyzer"}, "afterCommit": {"oid": "4079f41a5a3315bda2f9e3d5b049e58e309bdf59", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4079f41a5a3315bda2f9e3d5b049e58e309bdf59", "committedDate": "2020-04-20T11:33:34Z", "message": "Add the test files for the import testcase"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MjExOTE1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22320#pullrequestreview-398211915", "createdAt": "2020-04-22T13:50:46Z", "commit": {"oid": "4079f41a5a3315bda2f9e3d5b049e58e309bdf59"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4098, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}