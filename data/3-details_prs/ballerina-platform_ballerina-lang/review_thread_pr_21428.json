{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNzcyMTc2", "number": 21428, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNDo1NzowMFrODk6XkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNDo1NzowMFrODk6XkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDMxNjMyOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/open_record.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNDo1NzowMVrOFxgAtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNjozOTo1NFrOFyH5pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0OTAxMg==", "bodyText": "Shall we use a simple string as the reason and move the current reason you've used as the message field of the detail?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if(!(e is typedesc<FooError>)) {\n          \n          \n            \n                    error panicError = error(\"expected typedesc<FooError> but found: \" + e.toString());\n          \n          \n            \n                    panic panicError;\n          \n          \n            \n                }\n          \n          \n            \n                if !(e is typedesc<FooError>) {\n          \n          \n            \n                    panic error(\"AssertionError\", message = \"expected typedesc<FooError> but found: \" + e.toString());\n          \n          \n            \n                }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21428#discussion_r387449012", "createdAt": "2020-03-04T04:57:01Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/open_record.bal", "diffHunk": "@@ -473,3 +473,29 @@ function addStringToMapValue(string s) returns string {\n     mapValue = mapValue + s;\n     return mapValue;\n }\n+\n+public type CustomDetail record {\n+    string message;\n+    error cause?;\n+};\n+\n+public const FOO_REASON = \"FooError\";\n+public type FooError error<FOO_REASON, CustomDetail>;\n+\n+public const BAR_REASON = \"BarError\";\n+public type BarError error<BAR_REASON, CustomDetail>;\n+\n+public type Error FooError|BarError;\n+\n+public type MyRecord record {\n+    typedesc<Error>[] myErrorTypes = [FooError];\n+};\n+\n+function testCustomErrorTypeDescFieldOnRecord() {\n+    MyRecord m = {};\n+    typedesc<Error> e = m.myErrorTypes[0];\n+    if(!(e is typedesc<FooError>)) {\n+        error panicError = error(\"expected typedesc<FooError> but found: \" + e.toString());\n+        panic panicError;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cef0fc652cd1c5c906fad90f2c1e1a47e20fc1e8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEwMjU2Nw==", "bodyText": "+1, fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21428#discussion_r388102567", "createdAt": "2020-03-05T06:39:54Z", "author": {"login": "irshadnilam"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/open_record.bal", "diffHunk": "@@ -473,3 +473,29 @@ function addStringToMapValue(string s) returns string {\n     mapValue = mapValue + s;\n     return mapValue;\n }\n+\n+public type CustomDetail record {\n+    string message;\n+    error cause?;\n+};\n+\n+public const FOO_REASON = \"FooError\";\n+public type FooError error<FOO_REASON, CustomDetail>;\n+\n+public const BAR_REASON = \"BarError\";\n+public type BarError error<BAR_REASON, CustomDetail>;\n+\n+public type Error FooError|BarError;\n+\n+public type MyRecord record {\n+    typedesc<Error>[] myErrorTypes = [FooError];\n+};\n+\n+function testCustomErrorTypeDescFieldOnRecord() {\n+    MyRecord m = {};\n+    typedesc<Error> e = m.myErrorTypes[0];\n+    if(!(e is typedesc<FooError>)) {\n+        error panicError = error(\"expected typedesc<FooError> but found: \" + e.toString());\n+        panic panicError;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0OTAxMg=="}, "originalCommit": {"oid": "cef0fc652cd1c5c906fad90f2c1e1a47e20fc1e8"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1084, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}