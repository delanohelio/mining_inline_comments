{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5NjUwMDEz", "number": 26882, "title": "Add support for included record parameters", "bodyText": "Purpose\n\n$title.\n\ntype Options record {\n   boolean a = false;\n   boolean b;\n   boolean c? ;\n};\nfunction foo(string s, *Options options) {}\nThe last parameter in the definition of foo is an included record parameter. With the use of include record parameter, we can pass field of an included record parameter as named argument to the function as below example, in addition to using it for named parameters.\ntype Person record {\n    string firstName;\n    string secondName;\n};\n\n//function definition\nfunction bar(*Person person) returns string {\n    return person.firstName + \" \" + person.secondName;\n}\n\n//function call\npublic function main() {\n    string fullName = bar(firstName = \"chiran\", secondName = \"sachintha\");\n}\nIf these two rules are allowed, It can pass additional arguments to a function call as below example. (Mentioned additional arguments can be added as fields in  the inclusive included record parameter)\ntype Foo record {\n    never a?;\n    never b?;\n    never c?;\n    never d?;\n};\n\ntype Bar record {|\n    int a;\n    int b;\n|};\n\nfunction value(int c, int d, *Bar bar, *Foo foo) {\n}\n\npublic function main() {\n    value(10, 10, a = 20, b = 20, id = 5, value = \u201cfoo\u201d, path = \u201c/var/log\u201d);\n}\nFixes #26047\nFixes #26123\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-11-12T06:20:11Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882", "merged": true, "mergeCommit": {"oid": "ab5030928606e3f1fd884e300bb992b498c9364f"}, "closed": true, "closedAt": "2020-12-10T09:51:08Z", "author": {"login": "chiranSachintha"}, "timelineItems": {"totalCount": 59, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbeo-hAH2gAyNTE5NjUwMDEzOjQyNGIzOTI4YjMxNjc1YzhiNGQ5OTRiMDcxNzI0OTFmMTViNDQyZGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkwPiBgFqTU0OTAyMDQ2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "424b3928b31675c8b4d994b07172491f15b442db", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/424b3928b31675c8b4d994b07172491f15b442db", "committedDate": "2020-11-11T14:15:06Z", "message": "Add initial parser changes for included record param"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be26f481f321c5ef06cfaaedd8ae7c7d522e5785", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/be26f481f321c5ef06cfaaedd8ae7c7d522e5785", "committedDate": "2020-11-11T14:16:58Z", "message": "Disallow default values for include record parameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b318635414e27b52ab65d126e1135aa71c0fc56e", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b318635414e27b52ab65d126e1135aa71c0fc56e", "committedDate": "2020-11-11T14:21:41Z", "message": "Introduce flag `included` for included record parameters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72b5f5d94ae1d3e85c76f519aa39e770781c1703", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/72b5f5d94ae1d3e85c76f519aa39e770781c1703", "committedDate": "2020-11-11T15:52:18Z", "message": "Allow pass field within included record param as argument to function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78109aa34810beea5563960b5e769f3710d6ba7c", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/78109aa34810beea5563960b5e769f3710d6ba7c", "committedDate": "2020-11-11T15:54:28Z", "message": "Check for inclusive included record param which allow additional fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30935ed324b8f0ba957bb84d11ca8ccbd2b9ac7d", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/30935ed324b8f0ba957bb84d11ca8ccbd2b9ac7d", "committedDate": "2020-11-11T17:14:39Z", "message": "Introduce semantic analysis changes for included record parameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c5f20474344e95f57c0c29c6a0b2ada2ff6b70c", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1c5f20474344e95f57c0c29c6a0b2ada2ff6b70c", "committedDate": "2020-11-11T17:16:16Z", "message": "Add validation for non-defaultable required record fields of included record parameters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8125b73676670eec463093c43d6f1d15f12a9a8d", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8125b73676670eec463093c43d6f1d15f12a9a8d", "committedDate": "2020-11-11T20:54:22Z", "message": "Introduce desugar changes for included record parameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3550e6d715cebb02acbf87b9dc3b23d7b3d6d386", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3550e6d715cebb02acbf87b9dc3b23d7b3d6d386", "committedDate": "2020-11-12T03:25:42Z", "message": "Add unit tests for included record param"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c499006b48a12792ffc5183ec0e95a70d1acb2c", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6c499006b48a12792ffc5183ec0e95a70d1acb2c", "committedDate": "2020-11-12T04:01:47Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into fix-26047\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/util/Flags.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/diagnostics/DiagnosticErrorCode.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b954eae4505850dea189f83d531aba13a752e013", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b954eae4505850dea189f83d531aba13a752e013", "committedDate": "2020-11-12T04:33:14Z", "message": "Resolve conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf1caab51c7acb432ce4dc32dd13dc7374d97ef3", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bf1caab51c7acb432ce4dc32dd13dc7374d97ef3", "committedDate": "2020-11-12T05:20:23Z", "message": "Add parser tests for included record parameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74423b7ee7b913ce10d021d899c008b271c06760", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/74423b7ee7b913ce10d021d899c008b271c06760", "committedDate": "2020-11-12T08:59:18Z", "message": "Add parser changes for included record parameter and update tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f48367fbcf6c092010d856c9f106f28b369c1726", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f48367fbcf6c092010d856c9f106f28b369c1726", "committedDate": "2020-11-12T08:54:01Z", "message": "Add parser changes for included record parameter"}, "afterCommit": {"oid": "74423b7ee7b913ce10d021d899c008b271c06760", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/74423b7ee7b913ce10d021d899c008b271c06760", "committedDate": "2020-11-12T08:59:18Z", "message": "Add parser changes for included record parameter and update tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d506aeed5ecf875f4aab99395227bafeb0115d0", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7d506aeed5ecf875f4aab99395227bafeb0115d0", "committedDate": "2020-11-12T09:59:22Z", "message": "Disable formatter test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47dbcb2181e571d7655bd641aba1cff2e16a19a0", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/47dbcb2181e571d7655bd641aba1cff2e16a19a0", "committedDate": "2020-11-12T10:57:43Z", "message": "Add unit tests for included record parameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fbcf427d4a86efbc40219f72cd1a2917bb7ca44", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0fbcf427d4a86efbc40219f72cd1a2917bb7ca44", "committedDate": "2020-11-12T12:10:28Z", "message": "Validate kind of included record parameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da762b3396e602421d259350a4281d1e2cc18235", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/da762b3396e602421d259350a4281d1e2cc18235", "committedDate": "2020-11-20T05:50:41Z", "message": "Check for closed included record param which allow additional fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b66c7af7956b46fb974e6ecec9bc4a6e7ca2587a", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b66c7af7956b46fb974e6ecec9bc4a6e7ca2587a", "committedDate": "2020-11-20T05:51:22Z", "message": "Add unit tests for included record parameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8a3ade8c2c8a0867644cdf82d93da47279ff5ef", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b8a3ade8c2c8a0867644cdf82d93da47279ff5ef", "committedDate": "2020-11-20T05:53:15Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into fix-26047\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/util/Flags.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d4b77713af123d553e30dc68f3438518cefe689", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3d4b77713af123d553e30dc68f3438518cefe689", "committedDate": "2020-11-20T06:15:44Z", "message": "Resolve conflicts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3cc659725da8236c732923f493202f0a20bf4691", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3cc659725da8236c732923f493202f0a20bf4691", "committedDate": "2020-11-20T05:58:15Z", "message": "Resolve conflicts"}, "afterCommit": {"oid": "3d4b77713af123d553e30dc68f3438518cefe689", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3d4b77713af123d553e30dc68f3438518cefe689", "committedDate": "2020-11-20T06:15:44Z", "message": "Resolve conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "891df78316241f685b283f3de51f5b87e2e523a9", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/891df78316241f685b283f3de51f5b87e2e523a9", "committedDate": "2020-11-21T13:15:20Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into fix-26047\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-lang/src/main/java/org/ballerinalang/util/diagnostic/DiagnosticCode.java\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ca32143b05791fd845cee16187a13cbe7b22462", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6ca32143b05791fd845cee16187a13cbe7b22462", "committedDate": "2020-11-21T13:59:57Z", "message": "Resolved conflicts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6e1c5a33858e8feedf8c0ba5110f6994936d1886", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6e1c5a33858e8feedf8c0ba5110f6994936d1886", "committedDate": "2020-11-21T13:46:58Z", "message": "Resolved conflicts"}, "afterCommit": {"oid": "6ca32143b05791fd845cee16187a13cbe7b22462", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6ca32143b05791fd845cee16187a13cbe7b22462", "committedDate": "2020-11-21T13:59:57Z", "message": "Resolved conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/92e92bd3a5e6e93f158be13765dbb9aaf67765f7", "committedDate": "2020-11-21T14:34:02Z", "message": "Change diagnostic id for `MISSING_REQUIRED_INCLUDED_RECORD_PARAMETER_FIELD` error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MDI5NjI4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#pullrequestreview-536029628", "createdAt": "2020-11-22T05:01:56Z", "commit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwNTowMTo1NlrOH3z2EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNTozMzozNlrOH3_zMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI4MzE1Mg==", "bodyText": "Shouldn't we reuse the method above?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528283152", "createdAt": "2020-11-22T05:01:56Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/TreeBuilder.java", "diffHunk": "@@ -450,6 +450,10 @@ public static RecordLiteralNode createRecordLiteralNode() {\n         return new BLangRecordLiteral();\n     }\n \n+    public static BLangRecordLiteral createBLangRecordLiteralNode() {\n+        return new BLangRecordLiteral();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI4Mzg4MQ==", "bodyText": "Shall we format this so that Map<String, BLangExpression> namedArgs is on a single line?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528283881", "createdAt": "2020-11-22T05:11:40Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -6390,6 +6392,39 @@ private void reorderNamedArgs(BLangInvocation iExpr, BInvokableSymbol invokableS\n         iExpr.requiredArgs = args;\n     }\n \n+    private void createIncludedRecordLiteral(BLangInvocation iExpr, BVarSymbol param, Map<String,\n+            BLangExpression> namedArgs, List<BLangExpression> args) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI4NDQ5NQ==", "bodyText": "Shall we extract param.type out to a variable outside the for loops?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528284495", "createdAt": "2020-11-22T05:20:03Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -6390,6 +6392,39 @@ private void reorderNamedArgs(BLangInvocation iExpr, BInvokableSymbol invokableS\n         iExpr.requiredArgs = args;\n     }\n \n+    private void createIncludedRecordLiteral(BLangInvocation iExpr, BVarSymbol param, Map<String,\n+            BLangExpression> namedArgs, List<BLangExpression> args) {\n+        BLangRecordLiteral recordLiteral = TreeBuilder.createBLangRecordLiteralNode();\n+        recordLiteral.type = param.type;\n+        if (param == ((BInvokableSymbol) iExpr.symbol).incRecordParamAllowAdditionalFields) {\n+            for (String name : namedArgs.keySet()) {\n+                BLangNamedArgsExpression expr = (BLangNamedArgsExpression) namedArgs.get(name);\n+                if (!((BRecordType) param.type).fields.containsKey(name)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI5MDc3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            error.defaultable.parameter.cannot.be.included.record.parameter = defaultable parameter cannot be included \\\n          \n          \n            \n            error.defaultable.parameter.cannot.be.included.record.parameter=defaultable parameter cannot be included \\\n          \n      \n    \n    \n  \n\nShall we also change the error to something like\nan included record parameter cannot be a defaultable parameter", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528290775", "createdAt": "2020-11-22T06:38:51Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-parser/src/main/resources/syntax_diagnostic_message.properties", "diffHunk": "@@ -242,6 +242,8 @@ error.required.parameter.after.the.defaultable.parameter=required parameter afte\n error.named.arg.followed.by.positional.arg=named arg followed by positional arg\n error.arg.followed.by.rest.arg=arg followed by rest arg\n error.binding.pattern.not.allowed=binding pattern not allowed\n+error.defaultable.parameter.cannot.be.included.record.parameter = defaultable parameter cannot be included \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMxMTcwNg==", "bodyText": "Can't we reuse the normal error here, instead of introducing a new error? There's nothing about a record field when it comes to an argument itself right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528311706", "createdAt": "2020-11-22T10:03:59Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -918,6 +918,9 @@ error.rest.arg.defined.after.named.arg=\\\n error.missing.required.parameter=\\\n   missing required parameter ''{0}'' in call to ''{1}''()\n \n+error.missing.required.included.record.parameter.field=\\\n+  missing non-defaultable required record field ''{0}'' in call to ''{1}''()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1NjI0Mw==", "bodyText": "Instead of doing this, can't we rely on the REQUIRED flag of a record field?\nA record may or may not be used as an included record parameter, and unless we don't already have the necessary info in the record, IMO we should try and use whatever info already available in the record definition/type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528456243", "createdAt": "2020-11-23T03:28:28Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1543,6 +1544,9 @@ public void visit(BLangSimpleVariable varNode) {\n \n         BVarSymbol varSymbol = defineVarSymbol(varNode.name.pos, varNode.flagSet, varNode.type, varName, env,\n                                                varNode.internal);\n+        if (varNode.expr != null) {\n+            varSymbol.defaultableParam = true;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1Njc2MQ==", "bodyText": "I don't think the current approach will work with optional fields anyway.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528456761", "createdAt": "2020-11-23T03:31:11Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1543,6 +1544,9 @@ public void visit(BLangSimpleVariable varNode) {\n \n         BVarSymbol varSymbol = defineVarSymbol(varNode.name.pos, varNode.flagSet, varNode.type, varName, env,\n                                                varNode.internal);\n+        if (varNode.expr != null) {\n+            varSymbol.defaultableParam = true;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1NjI0Mw=="}, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ1ODA4MQ==", "bodyText": "Why are we skipping the optional fields?\nThe following doesn't work atm.\ntype Options record {|\n    string name?;\n|};\n\nfunction foo(int id, *Options options) {\n    string? name = options?.name; \n}\n\npublic function main() {\n    foo(1, name = \"bar\"); // error: undefined defaultable parameter 'name'\n}\nShouldn't this work?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528458081", "createdAt": "2020-11-23T03:38:05Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -2378,13 +2385,34 @@ private void defineInvokableSymbolParams(BLangInvokableNode invokableNode, BInvo\n                 symbol.flags |= Flags.OPTIONAL;\n                 symbol.defaultableParam = true;\n             }\n+            if (varNode.flagSet.contains(Flag.INCLUDED) && varNode.type.getKind() == TypeKind.RECORD) {\n+                symbol.flags |= Flags.INCLUDED;\n+                if (((BRecordType) varNode.type).restFieldType != symTable.noType) {\n+                    openIncludedRecordParams.add(symbol);\n+                }\n+                LinkedHashMap<String, BField> fields = ((BRecordType) varNode.type).fields;\n+                for (String field : fields.keySet()) {\n+                    if (!Symbols.isFlagOn(Flags.asMask(fields.get(field).symbol.getFlags()), Flags.OPTIONAL)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ2NDc0MA==", "bodyText": "Isn't this count misleading? While parameterCount contains the individual params including the included record params, invokableSymbol.includedRecordParams contains all the fields from the individual included record params, the sum is therefore more than the actual param count.\nThe following doesn't fail atm\ntype Options record {|\n    string name;\n|};\n\nfunction foo(int id, *Options options) {\n    string? name = options?.name; // \"baz\" is set\n}\n\npublic function main() {\n    foo(1, name = \"bar\", options = {name: \"baz\"}); // `name` is passed as an individual named arg as well as via `options`\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528464740", "createdAt": "2020-11-23T04:16:38Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -5302,7 +5303,8 @@ private BType checkInvocationParam(BLangInvocation iExpr) {\n             switch (expr.getKind()) {\n                 case NAMED_ARGS_EXPR:\n                     foundNamedArg = true;\n-                    if (i < parameterCount) {\n+                    if (i < parameterCount + invokableSymbol.includedRecordParams.size() ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ2NDg1MA==", "bodyText": "Please recheck formatting for the new methods.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528464850", "createdAt": "2020-11-23T04:17:14Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -5571,6 +5593,28 @@ private void checkArrayLibSortFuncArgs(BLangInvocation iExpr) {\n         }\n     }\n \n+    private BVarSymbol checkParameterNameForDefaultArgument(BLangIdentifier argName,\n+                       BLangExpression expr, List<BVarSymbol> nonRestParams, List<BVarSymbol> includedRecordParams,\n+                                                            BVarSymbol incRecordParamAllowAdditionalFields) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ2NDkxNA==", "bodyText": "Missing the @since annotation", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528464914", "createdAt": "2020-11-23T04:17:44Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/FunctionWithIncludedRecordParam.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.test.functions;\n+\n+import org.ballerinalang.test.BAssertUtil;\n+import org.ballerinalang.test.BCompileUtil;\n+import org.ballerinalang.test.BRunUtil;\n+import org.ballerinalang.test.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test function signatures and calling with included record params.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ2NTg2Mg==", "bodyText": "Do we need these fields in BInvokableSymbol.java? Can't we compute this info where needed from the param list?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528465862", "createdAt": "2020-11-23T04:23:19Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/symbols/BInvokableSymbol.java", "diffHunk": "@@ -40,6 +40,8 @@\n public class BInvokableSymbol extends BVarSymbol implements InvokableSymbol {\n \n     public List<BVarSymbol> params;\n+    public List<BVarSymbol> includedRecordParams;\n+    public BVarSymbol incRecordParamAllowAdditionalFields;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ3MTQxOA==", "bodyText": "Shouldn't we check if the fields in the open record are optional and a subtype of never?\nShouldn't the following fail at compile-time?\ntype Options record {|\n    string name;\n|};\n\ntype OthRecord record {|\n    float id?;\n    boolean name?;\n    int...;    \n|};\n\nfunction foo(int id, *OthRecord othRec, *Options options) {\n    string? name = options?.name;\n}\n\npublic function main() {\n    foo(1, name = \"bar\", options = {name: \"baz\"});\n}\nCurrently panics at runtime.\n$ ballerina run test.bal \n\nCompiling source\n        test.bal\n\nRunning executable\n\nerror: {ballerina/lang.map}InherentTypeViolation {\"message\":\"invalid value for record field 'options': expected value of type 'int', found 'Options'\"}\n        at test:main(test.bal:16)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528471418", "createdAt": "2020-11-23T04:53:22Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -2412,6 +2440,26 @@ private void defineInvokableSymbolParams(BLangInvokableNode invokableNode, BInvo\n         invokableSymbol.type.tsymbol = functionTypeSymbol;\n     }\n \n+    private boolean isIncRecordParamAllowAdditionalFields(List<BVarSymbol> inclusiveIncludedRecordParams,\n+                                                          Set<String> requiredParamNames) {\n+        if (inclusiveIncludedRecordParams.size() != 1) {\n+            return false;\n+        }\n+\n+        LinkedHashMap<String, BField> fields = ((BRecordType) inclusiveIncludedRecordParams.get(0).type).fields;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ3OTAyNg==", "bodyText": "Wouldn't it be better to\n\niterate through the param list and identify\n\n\nall included record params of a closed record type\nthe single included record param of an open record type, if present\n\n\nthen iterate through the named args and add to the relevant records based on the expected names?\n\n\nif the name is present in a particular included record param, and the type is not a subtype of never, the field belongs to that record\nif the name is present in a particular included record param, and the type is a subtype of never, the field does not belongs to that record\nif the name is not present in a particular included record param, and it is an open record, the field belongs to that record", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r528479026", "createdAt": "2020-11-23T05:33:36Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -6390,6 +6392,39 @@ private void reorderNamedArgs(BLangInvocation iExpr, BInvokableSymbol invokableS\n         iExpr.requiredArgs = args;\n     }\n \n+    private void createIncludedRecordLiteral(BLangInvocation iExpr, BVarSymbol param, Map<String,\n+            BLangExpression> namedArgs, List<BLangExpression> args) {\n+        BLangRecordLiteral recordLiteral = TreeBuilder.createBLangRecordLiteralNode();\n+        recordLiteral.type = param.type;\n+        if (param == ((BInvokableSymbol) iExpr.symbol).incRecordParamAllowAdditionalFields) {\n+            for (String name : namedArgs.keySet()) {\n+                BLangNamedArgsExpression expr = (BLangNamedArgsExpression) namedArgs.get(name);\n+                if (!((BRecordType) param.type).fields.containsKey(name)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92e92bd3a5e6e93f158be13765dbb9aaf67765f7"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c06f5420e86bd1c571f5a2561673f5b7dd290de3", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c06f5420e86bd1c571f5a2561673f5b7dd290de3", "committedDate": "2020-11-24T14:22:05Z", "message": "Change desugar and typechecker logic for included record parameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dacec59841da0ab53f4e9f6ca55fa0629338d56f", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dacec59841da0ab53f4e9f6ca55fa0629338d56f", "committedDate": "2020-11-24T14:22:52Z", "message": "Add unit tests for included record parameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7218698e12c524f5953ac7ca46c025a3635ca3f", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a7218698e12c524f5953ac7ca46c025a3635ca3f", "committedDate": "2020-11-24T14:23:24Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b00cc87aa54404fd9aea58d856b9cea7c8c5c94c", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b00cc87aa54404fd9aea58d856b9cea7c8c5c94c", "committedDate": "2020-11-24T14:27:09Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into fix-26047\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-lang/src/main/java/org/ballerinalang/model/elements/Flag.java\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/util/Flags.java\n\u0001\tmisc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/ParserTestFormatter.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d152bc1b3ad02995aded685852016efe93f49519", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d152bc1b3ad02995aded685852016efe93f49519", "committedDate": "2020-11-24T15:19:54Z", "message": "Resolve conflicts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MjEwNzE0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#pullrequestreview-538210714", "createdAt": "2020-11-25T07:17:35Z", "commit": {"oid": "e57bbe2670c76c5f939790b2b9c788b474f131f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzoxNzozNlrOH5l6Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzoxNzozNlrOH5l6Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE1MjAxNQ==", "bodyText": "Shall we rearrange the login inside for loop like this, it will be more readable,\nfor (BVarSymbol symbol : invokableSymbol.params) {\n   if (!Symbols.isFlagOn(Flags.asMask(symbol.getFlags()), Flags.INCLUDED)) {\n       continue;\n   }\n   .......\n   if (fields.isEmpty()) {\n       continue;\n   }\n   for (String field : fields.keySet()) {\n   }\n}\n\nPlease check the other places if possible.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r530152015", "createdAt": "2020-11-25T07:17:36Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -5303,10 +5303,25 @@ private BType checkInvocationParam(BLangInvocation iExpr) {\n             return symTable.noType;\n         }\n \n-        List<BType> paramTypes = ((BInvokableType) iExpr.symbol.type).getParameterTypes();\n+        BInvokableSymbol invokableSymbol = ((BInvokableSymbol) iExpr.symbol);\n+        List<BType> paramTypes = ((BInvokableType) invokableSymbol.type).getParameterTypes();\n \n-        int parameterCount = paramTypes.size();\n+        int parameterCountForPositionalArgs = paramTypes.size();\n+        int parameterCountForNamedArgs = parameterCountForPositionalArgs + invokableSymbol.includedRecordParams.size();\n         iExpr.requiredArgs = new ArrayList<>();\n+        for (BVarSymbol symbol : invokableSymbol.params) {\n+            if (Symbols.isFlagOn(Flags.asMask(symbol.getFlags()), Flags.INCLUDED)) {\n+                LinkedHashMap<String, BField> fields = ((BRecordType) symbol.type).fields;\n+                if (!fields.isEmpty()) {\n+                    for (String field : fields.keySet()) {\n+                        if (fields.get(field).type.tag != TypeTags.NEVER) {\n+                            parameterCountForNamedArgs = parameterCountForNamedArgs - 1;\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e57bbe2670c76c5f939790b2b9c788b474f131f5"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f612e01fbe5c20fc46d1da6190f128e9163d7a3d", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f612e01fbe5c20fc46d1da6190f128e9163d7a3d", "committedDate": "2020-11-27T06:03:55Z", "message": "Set type of mask as long"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e57bbe2670c76c5f939790b2b9c788b474f131f5", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e57bbe2670c76c5f939790b2b9c788b474f131f5", "committedDate": "2020-11-24T15:20:26Z", "message": "Set mask as long type"}, "afterCommit": {"oid": "1f0d4cabadb9f52a870c48f5ec27cc50f9336970", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1f0d4cabadb9f52a870c48f5ec27cc50f9336970", "committedDate": "2020-11-27T06:06:28Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4d3b21058bb46e5d3a73e3ef3d909897ebf4e6f", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e4d3b21058bb46e5d3a73e3ef3d909897ebf4e6f", "committedDate": "2020-11-27T06:36:16Z", "message": "Fix review suggestions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1f0d4cabadb9f52a870c48f5ec27cc50f9336970", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1f0d4cabadb9f52a870c48f5ec27cc50f9336970", "committedDate": "2020-11-27T06:06:28Z", "message": "Fix review suggestions"}, "afterCommit": {"oid": "e4d3b21058bb46e5d3a73e3ef3d909897ebf4e6f", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e4d3b21058bb46e5d3a73e3ef3d909897ebf4e6f", "committedDate": "2020-11-27T06:36:16Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b8c2c9e61acc9623d8e28ea307600d42e03847b", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5b8c2c9e61acc9623d8e28ea307600d42e03847b", "committedDate": "2020-11-27T07:12:32Z", "message": "Fixed failing tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3b4c5beeee620457aaa5fa7150e39b4fcfe3b808", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3b4c5beeee620457aaa5fa7150e39b4fcfe3b808", "committedDate": "2020-11-27T07:10:02Z", "message": "Fix failing tests"}, "afterCommit": {"oid": "5b8c2c9e61acc9623d8e28ea307600d42e03847b", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5b8c2c9e61acc9623d8e28ea307600d42e03847b", "committedDate": "2020-11-27T07:12:32Z", "message": "Fixed failing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a01b442d2e6b7f14b21858f53d38884d556a12ce", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a01b442d2e6b7f14b21858f53d38884d556a12ce", "committedDate": "2020-11-30T11:27:05Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d09618553348a731dcb1b6b49ebca99de2508e9", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9d09618553348a731dcb1b6b49ebca99de2508e9", "committedDate": "2020-11-30T12:14:40Z", "message": "Fix review suggestions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9ec4c7a23ee31644d5c6e230444d600099bb39e6", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9ec4c7a23ee31644d5c6e230444d600099bb39e6", "committedDate": "2020-11-30T11:41:31Z", "message": "Fix review suggestions"}, "afterCommit": {"oid": "9d09618553348a731dcb1b6b49ebca99de2508e9", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9d09618553348a731dcb1b6b49ebca99de2508e9", "committedDate": "2020-11-30T12:14:40Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "961921fa251513364f6b496028b4d8ce6e4161ef", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/961921fa251513364f6b496028b4d8ce6e4161ef", "committedDate": "2020-12-08T11:24:03Z", "message": "Validate type of included record parameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ea12819c82e9ea75598858ba28cc4ffd165b239", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1ea12819c82e9ea75598858ba28cc4ffd165b239", "committedDate": "2020-12-08T11:29:45Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into fix-26047\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/diagnostics/DiagnosticErrorCode.java\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerina/compiler/syntax/tree/SyntaxKind.java\n\u0001\tmisc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/ParserTestFormatter.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "679291dbfb6687927979c4db199f38f26f3a2e03", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/679291dbfb6687927979c4db199f38f26f3a2e03", "committedDate": "2020-12-08T12:10:03Z", "message": "Fixed failing tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3ODAyNjM5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#pullrequestreview-547802639", "createdAt": "2020-12-09T03:09:02Z", "commit": {"oid": "679291dbfb6687927979c4db199f38f26f3a2e03"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMzowOTowMlrOICANMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMzoyNDo1NlrOICAiqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk3MTQ0MQ==", "bodyText": "Do we need to remove the node kind?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r538971441", "createdAt": "2020-12-09T03:09:02Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "diffHunk": "@@ -945,13 +945,17 @@\n         {\n             \"name\": \"RequiredParameterNode\",\n             \"base\": \"ParameterNode\",\n-            \"kind\": \"REQUIRED_PARAM\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "679291dbfb6687927979c4db199f38f26f3a2e03"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk3MjE0NA==", "bodyText": "Can we use STNodeFactory.createEmptyNode() instead of null?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r538972144", "createdAt": "2020-12-09T03:11:02Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1669,9 +1669,8 @@ private STNode getUpdatedParamList(STNode parameters, int index) {\n                 case REQUIRED_PARAM:\n                     STRequiredParameterNode requiredParam = (STRequiredParameterNode) param;\n                     if (isEmpty(requiredParam.paramName)) {\n-                        param = STNodeFactory\n-                                .createRequiredParameterNode(requiredParam.annotations, requiredParam.typeName,\n-                                        paramName);\n+                        param = STNodeFactory.createRequiredParameterNode(SyntaxKind.REQUIRED_PARAM,\n+                                requiredParam.annotations, null, requiredParam.typeName, paramName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "679291dbfb6687927979c4db199f38f26f3a2e03"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk3Mjk4MQ==", "bodyText": "Will this support function foo(@someAnnot *Bar b)?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r538972981", "createdAt": "2020-12-09T03:13:29Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1949,15 +1948,23 @@ private STNode parseParameterRhs(SyntaxKind tokenKind) {\n      */\n     private STNode parseParameter(SyntaxKind prevParamKind, boolean isParamNameOptional) {\n         STNode annots;\n+        STNode inclusionSymbol;\n         STToken nextToken = peek();\n         switch (nextToken.kind) {\n             case AT_TOKEN:\n+                inclusionSymbol = STNodeFactory.createEmptyNode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "679291dbfb6687927979c4db199f38f26f3a2e03"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk3NDQ0Nw==", "bodyText": "Looks like we are using two different kinds for the same node.\nBut that allows someone to have the asterisk-token in the node, but use the REQUIRED_PARAM as the node kind, which is not correct. We can avoid that if we introduce a separate node for INCLUDED_RECORD_PARAM.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r538974447", "createdAt": "2020-12-09T03:17:52Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "diffHunk": "@@ -945,13 +945,17 @@\n         {\n             \"name\": \"RequiredParameterNode\",\n             \"base\": \"ParameterNode\",\n-            \"kind\": \"REQUIRED_PARAM\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk3MTQ0MQ=="}, "originalCommit": {"oid": "679291dbfb6687927979c4db199f38f26f3a2e03"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk3NDY1MA==", "bodyText": "Do we need this second check inclusionSymbol.kind == SyntaxKind.ASTERISK_TOKEN?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r538974650", "createdAt": "2020-12-09T03:18:35Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -2047,12 +2053,18 @@ private STNode parseEllipsis() {\n      * @param paramName     Name of the parameter\n      * @return Parsed parameter node\n      */\n-    private STNode parseParameterRhs(SyntaxKind prevParamKind, STNode annots, STNode type,\n+    private STNode parseParameterRhs(SyntaxKind prevParamKind, STNode annots, STNode inclusionSymbol, STNode type,\n                                      STNode paramName) {\n         STToken nextToken = peek();\n         // Required parameters\n         if (isEndOfParameter(nextToken.kind)) {\n-            return STNodeFactory.createRequiredParameterNode(annots, type, paramName);\n+            if (inclusionSymbol != null && inclusionSymbol.kind == SyntaxKind.ASTERISK_TOKEN) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "679291dbfb6687927979c4db199f38f26f3a2e03"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk3NjkzOQ==", "bodyText": "Shall we add some negative syntax tests as well?\ne.g: additional tokens before and after asterisk, missing tokens before and after asterisk, etc", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r538976939", "createdAt": "2020-12-09T03:24:56Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/declarations/FunctionParamsTest.java", "diffHunk": "@@ -66,4 +66,14 @@ public void testIncompleteBinarExprInDefaultableParams() {\n     public void testMoreParamsAfterRestParam() {\n         test(\"func-definition/func_params_source_07.bal\", \"func-definition/func_params_assert_07.json\");\n     }\n+\n+    @Test\n+    public void testIncludedRecordParam() {\n+        test(\"func-definition/func_params_source_09.bal\", \"func-definition/func_params_assert_09.json\");\n+    }\n+\n+    @Test\n+    public void testIncludedRecordParamWithDefaultValues() {\n+        test(\"func-definition/func_params_source_10.bal\", \"func-definition/func_params_assert_10.json\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "679291dbfb6687927979c4db199f38f26f3a2e03"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76bc2730180d3afc58c64988a92708656fc2c144", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/76bc2730180d3afc58c64988a92708656fc2c144", "committedDate": "2020-12-09T05:37:53Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ae757d98cd294e359a3d4b20aea1f664e4cb513", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6ae757d98cd294e359a3d4b20aea1f664e4cb513", "committedDate": "2020-12-09T05:43:48Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into fix-26047\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-lang/src/main/java/org/ballerinalang/model/elements/Flag.java\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/util/Flags.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a93e2c6f2f30cc51531070eaff9accaf897aa0e", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0a93e2c6f2f30cc51531070eaff9accaf897aa0e", "committedDate": "2020-12-09T07:50:34Z", "message": "Add parser tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b4adebf28f301632d511789977886e0ac92ddcc8", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b4adebf28f301632d511789977886e0ac92ddcc8", "committedDate": "2020-12-09T06:46:20Z", "message": "Add parser tests"}, "afterCommit": {"oid": "0a93e2c6f2f30cc51531070eaff9accaf897aa0e", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0a93e2c6f2f30cc51531070eaff9accaf897aa0e", "committedDate": "2020-12-09T07:50:34Z", "message": "Add parser tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b3832f96dfdcafc3cd5630c950a12cccc6c92fa", "author": {"user": {"login": "hasithaa", "name": "Hasitha Aravinda"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3b3832f96dfdcafc3cd5630c950a12cccc6c92fa", "committedDate": "2020-12-09T16:05:53Z", "message": "Merge branch 'master' into fix-26047"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4ODEwNDI2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#pullrequestreview-548810426", "createdAt": "2020-12-10T04:29:24Z", "commit": {"oid": "3b3832f96dfdcafc3cd5630c950a12cccc6c92fa"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDoyOToyNFrOIC1A5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDozMjo1M1rOIC1FIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgzNjY0NA==", "bodyText": "Parsing the inclusionSymbol in a single place like this is cleaner to me\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    STNode type = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_BEFORE_IDENTIFIER);\n          \n          \n            \n                    STNode inclusionSymbol = parseInclusionSymbol();\n          \n          \n            \n                    STNode type = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_BEFORE_IDENTIFIER);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r539836644", "createdAt": "2020-12-10T04:29:24Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1978,11 +1989,10 @@ private STNode parseParameter(SyntaxKind prevParamKind, boolean isParamNameOptio\n         }\n \n         STNode type = parseTypeDescriptor(ParserRuleContext.TYPE_DESC_BEFORE_IDENTIFIER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3832f96dfdcafc3cd5630c950a12cccc6c92fa"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgzNzcyOQ==", "bodyText": "Related to above comment.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private STNode parseAsteriskToken() {\n          \n          \n            \n                    STToken nextToken = peek();\n          \n          \n            \n                    if (nextToken.kind == SyntaxKind.ASTERISK_TOKEN) {\n          \n          \n            \n                        return consume();\n          \n          \n            \n                    } else {\n          \n          \n            \n                        recover(nextToken, ParserRuleContext.ASTERISK);\n          \n          \n            \n                        return parseAsteriskToken();\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n          \n            \n                private STNode parseInclusionSymbol() {  \n          \n          \n            \n                    STToken nextToken = peek();\n          \n          \n            \n                    if (nextToken.kind == SyntaxKind.ASTERISK_TOKEN) {\n          \n          \n            \n                        return consume();\n          \n          \n            \n                    } else {\n          \n          \n            \n                        return STNodeFactory.createEmptyNode();\n          \n          \n            \n                    }\n          \n          \n            \n                }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r539837729", "createdAt": "2020-12-10T04:32:53Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -7606,6 +7626,21 @@ private STNode parseAtToken() {\n         }\n     }\n \n+    /**\n+     * Parse '*' token.\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseAsteriskToken() {\n+        STToken nextToken = peek();\n+        if (nextToken.kind == SyntaxKind.ASTERISK_TOKEN) {\n+            return consume();\n+        } else {\n+            recover(nextToken, ParserRuleContext.ASTERISK);\n+            return parseAsteriskToken();\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3832f96dfdcafc3cd5630c950a12cccc6c92fa"}, "originalPosition": 139}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4ODIxMjIx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#pullrequestreview-548821221", "createdAt": "2020-12-10T05:05:23Z", "commit": {"oid": "3b3832f96dfdcafc3cd5630c950a12cccc6c92fa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNTowNToyM1rOIC1tgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNTowNToyM1rOIC1tgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0ODA2NA==", "bodyText": "Why do we have to skip these tests?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r539848064", "createdAt": "2020-12-10T05:05:23Z", "author": {"login": "SupunS"}, "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/ParserTestFormatter.java", "diffHunk": "@@ -173,7 +173,8 @@ public void test(String fileName, String path) throws IOException {\n                 \"annot_decl_source_02.bal\", \"class_def_source_11.bal\", \"object_type_def_source_26.bal\",\n                 \"ambiguity_source_32.bal\", \"service_object_constructor_source_01.bal\",\n                 \"service_object_constructor_source_02.bal\", \"object_constructor_source_08.bal\",\n-                \"annotations_source_01.bal\", \"do_stmt_source_08.bal\");\n+                \"annotations_source_01.bal\", \"do_stmt_source_08.bal\", \"func_params_source_10.bal\",\n+                \"func_params_source_11.bal\", \"func_params_source_13.bal\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3832f96dfdcafc3cd5630c950a12cccc6c92fa"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4ODIwOTc0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#pullrequestreview-548820974", "createdAt": "2020-12-10T05:04:33Z", "commit": {"oid": "3b3832f96dfdcafc3cd5630c950a12cccc6c92fa"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNTowNDozM1rOIC1sZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNTowNToyMFrOIC1tXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0Nzc4MA==", "bodyText": "We can directly use consume() here", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r539847780", "createdAt": "2020-12-10T05:04:33Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1949,15 +1948,27 @@ private STNode parseParameterRhs(SyntaxKind tokenKind) {\n      */\n     private STNode parseParameter(SyntaxKind prevParamKind, boolean isParamNameOptional) {\n         STNode annots;\n+        STNode inclusionSymbol;\n         STToken nextToken = peek();\n         switch (nextToken.kind) {\n             case AT_TOKEN:\n                 annots = parseOptionalAnnotations();\n+                if (peek().kind == SyntaxKind.ASTERISK_TOKEN) {\n+                    inclusionSymbol = parseAsteriskToken();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3832f96dfdcafc3cd5630c950a12cccc6c92fa"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0ODAzMQ==", "bodyText": "can use consume() and remove parseAsteriskToken() method", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r539848031", "createdAt": "2020-12-10T05:05:20Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1949,15 +1948,27 @@ private STNode parseParameterRhs(SyntaxKind tokenKind) {\n      */\n     private STNode parseParameter(SyntaxKind prevParamKind, boolean isParamNameOptional) {\n         STNode annots;\n+        STNode inclusionSymbol;\n         STToken nextToken = peek();\n         switch (nextToken.kind) {\n             case AT_TOKEN:\n                 annots = parseOptionalAnnotations();\n+                if (peek().kind == SyntaxKind.ASTERISK_TOKEN) {\n+                    inclusionSymbol = parseAsteriskToken();\n+                } else {\n+                    inclusionSymbol = STNodeFactory.createEmptyNode();\n+                }\n+                break;\n+            case ASTERISK_TOKEN:\n+                inclusionSymbol = parseAsteriskToken();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3832f96dfdcafc3cd5630c950a12cccc6c92fa"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4ODIyNzM4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#pullrequestreview-548822738", "createdAt": "2020-12-10T05:10:13Z", "commit": {"oid": "3b3832f96dfdcafc3cd5630c950a12cccc6c92fa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNToxMDoxNFrOIC1zmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNToxMDoxNFrOIC1zmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0OTYyNA==", "bodyText": "This will not handle syntax errors that could come after annotations. We need to introduce another level to parse and recover the content after the annots.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#discussion_r539849624", "createdAt": "2020-12-10T05:10:14Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1949,15 +1948,27 @@ private STNode parseParameterRhs(SyntaxKind tokenKind) {\n      */\n     private STNode parseParameter(SyntaxKind prevParamKind, boolean isParamNameOptional) {\n         STNode annots;\n+        STNode inclusionSymbol;\n         STToken nextToken = peek();\n         switch (nextToken.kind) {\n             case AT_TOKEN:\n                 annots = parseOptionalAnnotations();\n+                if (peek().kind == SyntaxKind.ASTERISK_TOKEN) {\n+                    inclusionSymbol = parseAsteriskToken();\n+                } else {\n+                    inclusionSymbol = STNodeFactory.createEmptyNode();\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3832f96dfdcafc3cd5630c950a12cccc6c92fa"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b9ea94b6bca379343bf4717758141d99947f026", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4b9ea94b6bca379343bf4717758141d99947f026", "committedDate": "2020-12-10T07:14:36Z", "message": "Allow only record type to included parameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf1539f80f5449110e99b655d695e3d483e1fbd5", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bf1539f80f5449110e99b655d695e3d483e1fbd5", "committedDate": "2020-12-10T07:15:12Z", "message": "Merge remote-tracking branch 'origin/fix-26047' into fix-26047"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4OTQzNDE2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#pullrequestreview-548943416", "createdAt": "2020-12-10T08:15:39Z", "commit": {"oid": "bf1539f80f5449110e99b655d695e3d483e1fbd5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MDIwNDY3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26882#pullrequestreview-549020467", "createdAt": "2020-12-10T09:50:55Z", "commit": {"oid": "bf1539f80f5449110e99b655d695e3d483e1fbd5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3267, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}