{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNjMzMTU3", "number": 26319, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNTowMToxNVrOEs3Z_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNTowMToxNVrOEs3Z_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDgwNTc0OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/nativeimpl/jvm/tests/MockListener.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNTowMToxNVrOHgVc-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzo1NDozNFrOHgZ8Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY2Nzk2MQ==", "bodyText": "Can you use the BRuntime api's to do this invocation? BExecutor will be removed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26319#discussion_r503667961", "createdAt": "2020-10-13T05:01:15Z", "author": {"login": "Kishanthan"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/nativeimpl/jvm/tests/MockListener.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.nativeimpl.jvm.tests;\n+\n+import org.ballerinalang.jvm.api.BExecutor;\n+import org.ballerinalang.jvm.api.connector.CallableUnitCallback;\n+import org.ballerinalang.jvm.api.values.BError;\n+import org.ballerinalang.jvm.api.values.BObject;\n+import org.ballerinalang.jvm.api.values.BString;\n+import org.ballerinalang.jvm.scheduling.Scheduler;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CountDownLatch;\n+\n+/**\n+ * A mock listener for testing services. It can be used to invoke a resource in the service.\n+ */\n+public class MockListener {\n+\n+    private static BObject service;\n+    private static BError err;\n+\n+    public static Object attach(BObject servObj) {\n+        service = servObj;\n+        return null;\n+    }\n+\n+    public static Object invokeResource(BString name) throws InterruptedException {\n+        if (service != null) {\n+            CountDownLatch latch = new CountDownLatch(1);\n+            BExecutor.submit(Scheduler.getStrand().scheduler, service, name.getValue(), null, null,\n+                             new CallableUnitCallback() {\n+                                 @Override\n+                                 public void notifySuccess() {\n+                                     latch.countDown();\n+                                 }\n+\n+                                 @Override\n+                                 public void notifyFailure(BError error) {\n+                                     err = error;\n+                                     latch.countDown();\n+                                 }\n+                             }, new HashMap<>(), null);\n+            latch.await();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e19c7e9b0d10365c1b365f3dcbb65d57e4b0d4b0"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY2ODYyMQ==", "bodyText": "The BRuntime apis allow executing functions. Can they also be used for executing resources? I found the http code uses the above function", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26319#discussion_r503668621", "createdAt": "2020-10-13T05:03:59Z", "author": {"login": "riyafa"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/nativeimpl/jvm/tests/MockListener.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.nativeimpl.jvm.tests;\n+\n+import org.ballerinalang.jvm.api.BExecutor;\n+import org.ballerinalang.jvm.api.connector.CallableUnitCallback;\n+import org.ballerinalang.jvm.api.values.BError;\n+import org.ballerinalang.jvm.api.values.BObject;\n+import org.ballerinalang.jvm.api.values.BString;\n+import org.ballerinalang.jvm.scheduling.Scheduler;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CountDownLatch;\n+\n+/**\n+ * A mock listener for testing services. It can be used to invoke a resource in the service.\n+ */\n+public class MockListener {\n+\n+    private static BObject service;\n+    private static BError err;\n+\n+    public static Object attach(BObject servObj) {\n+        service = servObj;\n+        return null;\n+    }\n+\n+    public static Object invokeResource(BString name) throws InterruptedException {\n+        if (service != null) {\n+            CountDownLatch latch = new CountDownLatch(1);\n+            BExecutor.submit(Scheduler.getStrand().scheduler, service, name.getValue(), null, null,\n+                             new CallableUnitCallback() {\n+                                 @Override\n+                                 public void notifySuccess() {\n+                                     latch.countDown();\n+                                 }\n+\n+                                 @Override\n+                                 public void notifyFailure(BError error) {\n+                                     err = error;\n+                                     latch.countDown();\n+                                 }\n+                             }, new HashMap<>(), null);\n+            latch.await();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY2Nzk2MQ=="}, "originalCommit": {"oid": "e19c7e9b0d10365c1b365f3dcbb65d57e4b0d4b0"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY2OTcwMA==", "bodyText": "Yes can be done. Thats what @manuranga is changing and http/stdlib will not be using this BExecutor api's anymore and they will be migrated to use BRuntime api's.\nCheck the invokeMethodAsync method in BRuntime. It should do the above.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26319#discussion_r503669700", "createdAt": "2020-10-13T05:08:04Z", "author": {"login": "Kishanthan"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/nativeimpl/jvm/tests/MockListener.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.nativeimpl.jvm.tests;\n+\n+import org.ballerinalang.jvm.api.BExecutor;\n+import org.ballerinalang.jvm.api.connector.CallableUnitCallback;\n+import org.ballerinalang.jvm.api.values.BError;\n+import org.ballerinalang.jvm.api.values.BObject;\n+import org.ballerinalang.jvm.api.values.BString;\n+import org.ballerinalang.jvm.scheduling.Scheduler;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CountDownLatch;\n+\n+/**\n+ * A mock listener for testing services. It can be used to invoke a resource in the service.\n+ */\n+public class MockListener {\n+\n+    private static BObject service;\n+    private static BError err;\n+\n+    public static Object attach(BObject servObj) {\n+        service = servObj;\n+        return null;\n+    }\n+\n+    public static Object invokeResource(BString name) throws InterruptedException {\n+        if (service != null) {\n+            CountDownLatch latch = new CountDownLatch(1);\n+            BExecutor.submit(Scheduler.getStrand().scheduler, service, name.getValue(), null, null,\n+                             new CallableUnitCallback() {\n+                                 @Override\n+                                 public void notifySuccess() {\n+                                     latch.countDown();\n+                                 }\n+\n+                                 @Override\n+                                 public void notifyFailure(BError error) {\n+                                     err = error;\n+                                     latch.countDown();\n+                                 }\n+                             }, new HashMap<>(), null);\n+            latch.await();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY2Nzk2MQ=="}, "originalCommit": {"oid": "e19c7e9b0d10365c1b365f3dcbb65d57e4b0d4b0"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3MjE2OQ==", "bodyText": "And this class BExecutor is no longer there as it has been just removed :)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26319#discussion_r503672169", "createdAt": "2020-10-13T05:17:14Z", "author": {"login": "Kishanthan"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/nativeimpl/jvm/tests/MockListener.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.nativeimpl.jvm.tests;\n+\n+import org.ballerinalang.jvm.api.BExecutor;\n+import org.ballerinalang.jvm.api.connector.CallableUnitCallback;\n+import org.ballerinalang.jvm.api.values.BError;\n+import org.ballerinalang.jvm.api.values.BObject;\n+import org.ballerinalang.jvm.api.values.BString;\n+import org.ballerinalang.jvm.scheduling.Scheduler;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CountDownLatch;\n+\n+/**\n+ * A mock listener for testing services. It can be used to invoke a resource in the service.\n+ */\n+public class MockListener {\n+\n+    private static BObject service;\n+    private static BError err;\n+\n+    public static Object attach(BObject servObj) {\n+        service = servObj;\n+        return null;\n+    }\n+\n+    public static Object invokeResource(BString name) throws InterruptedException {\n+        if (service != null) {\n+            CountDownLatch latch = new CountDownLatch(1);\n+            BExecutor.submit(Scheduler.getStrand().scheduler, service, name.getValue(), null, null,\n+                             new CallableUnitCallback() {\n+                                 @Override\n+                                 public void notifySuccess() {\n+                                     latch.countDown();\n+                                 }\n+\n+                                 @Override\n+                                 public void notifyFailure(BError error) {\n+                                     err = error;\n+                                     latch.countDown();\n+                                 }\n+                             }, new HashMap<>(), null);\n+            latch.await();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY2Nzk2MQ=="}, "originalCommit": {"oid": "e19c7e9b0d10365c1b365f3dcbb65d57e4b0d4b0"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc0MTQ5MQ==", "bodyText": "I have fixed this", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26319#discussion_r503741491", "createdAt": "2020-10-13T07:54:34Z", "author": {"login": "riyafa"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/nativeimpl/jvm/tests/MockListener.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.nativeimpl.jvm.tests;\n+\n+import org.ballerinalang.jvm.api.BExecutor;\n+import org.ballerinalang.jvm.api.connector.CallableUnitCallback;\n+import org.ballerinalang.jvm.api.values.BError;\n+import org.ballerinalang.jvm.api.values.BObject;\n+import org.ballerinalang.jvm.api.values.BString;\n+import org.ballerinalang.jvm.scheduling.Scheduler;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.CountDownLatch;\n+\n+/**\n+ * A mock listener for testing services. It can be used to invoke a resource in the service.\n+ */\n+public class MockListener {\n+\n+    private static BObject service;\n+    private static BError err;\n+\n+    public static Object attach(BObject servObj) {\n+        service = servObj;\n+        return null;\n+    }\n+\n+    public static Object invokeResource(BString name) throws InterruptedException {\n+        if (service != null) {\n+            CountDownLatch latch = new CountDownLatch(1);\n+            BExecutor.submit(Scheduler.getStrand().scheduler, service, name.getValue(), null, null,\n+                             new CallableUnitCallback() {\n+                                 @Override\n+                                 public void notifySuccess() {\n+                                     latch.countDown();\n+                                 }\n+\n+                                 @Override\n+                                 public void notifyFailure(BError error) {\n+                                     err = error;\n+                                     latch.countDown();\n+                                 }\n+                             }, new HashMap<>(), null);\n+            latch.await();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY2Nzk2MQ=="}, "originalCommit": {"oid": "e19c7e9b0d10365c1b365f3dcbb65d57e4b0d4b0"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4946, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}