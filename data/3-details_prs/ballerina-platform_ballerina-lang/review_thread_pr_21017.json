{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MTU3NzQ5", "number": 21017, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDoxNTo1NVrODfaX8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNTo0Nzo1OFrODgkS6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjY0NTYyOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BRuntime.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDoxNTo1NVrOFpGjdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDoxNTo1NVrOFpGjdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0MzMxOA==", "bodyText": "Shall we acquire the semaphore with the finite timeout?\nIf the subsequent process failed or crashed, the ballerina thread blocks infinitely.\nUse tryAcquire(xx, TimeUnit.SECONDS) with a sufficient timeout period.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r378643318", "createdAt": "2020-02-13T04:15:55Z", "author": {"login": "chamil321"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/BRuntime.java", "diffHunk": "@@ -110,6 +111,35 @@ public void notifyFailure(ErrorValue error) {\n         }\n     }\n \n+    public Object getSyncMethodInvokeResult(ObjectValue object, String methodName, Object... args) {\n+        Function<?, ?> func = o -> object.call((Strand) (((Object[]) o)[0]), methodName, args);\n+        Semaphore semaphore = new Semaphore(0);\n+        final ErrorValue[] errorValue = new ErrorValue[1];\n+        // Add 1 more element to keep null for add the strand later.\n+        Object[] params = new Object[]{null, args};\n+        FutureValue futureValue = scheduler.schedule(params, func, null, new CallableUnitCallback() {\n+            @Override\n+            public void notifySuccess() {\n+                semaphore.release();\n+            }\n+\n+            @Override\n+            public void notifyFailure(ErrorValue error) {\n+                errorValue[0] = error;\n+                semaphore.release();\n+            }\n+        });\n+        try {\n+            semaphore.acquire();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22b271904d15943fc5c8ac6db6425508357147fb"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjcxNDA1OnYy", "diffSide": "RIGHT", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNTowOTowMVrOFpHLaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNTowOTowMVrOFpHLaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY1MzU0NQ==", "bodyText": "Shall we use checkpanic whenever you panic the error?\ncheckpanic self->connect();", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r378653545", "createdAt": "2020-02-13T05:09:01Z", "author": {"login": "chamil321"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -185,11 +220,9 @@ public type Consumer client object {\n     }\n \n     function init(ConsumerConfig config) returns ConsumerError? {\n-        if (config.bootstrapServers is string) {\n-            var result = self->connect();\n-            if (result is error) {\n-                panic result;\n-            }\n+        var connectResult = self->connect();\n+        if (connectResult is error) {\n+            panic connectResult;\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22b271904d15943fc5c8ac6db6425508357147fb"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjczMjE4OnYy", "diffSide": "RIGHT", "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/producer/SendAnyKeys.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNToyMzowM1rOFpHWYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNToyMzowM1rOFpHWYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY1NjM1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Logger logger = LoggerFactory.getLogger(SendAnyValues.class);\n          \n          \n            \n                private static final Logger logger = LoggerFactory.getLogger(SendAnyKeys.class);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r378656353", "createdAt": "2020-02-13T05:23:03Z", "author": {"login": "chamil321"}, "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/producer/SendAnyKeys.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.messaging.kafka.nativeimpl.producer;\n+\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.jvm.values.api.BArray;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.ballerinalang.messaging.kafka.nativeimpl.producer.Send.sendKafkaRecord;\n+import static org.ballerinalang.messaging.kafka.utils.KafkaConstants.ALIAS_PARTITION;\n+import static org.ballerinalang.messaging.kafka.utils.KafkaUtils.getIntValue;\n+import static org.ballerinalang.messaging.kafka.utils.KafkaUtils.getLongValue;\n+\n+/**\n+ * Native methods to send {@code any} keys and with different types of values to Kafka broker from ballerina kafka\n+ * producer.\n+ */\n+public class SendAnyKeys {\n+    // TODO: This class should be merged with \"Send\" when #20918 is fixed.\n+    private static final Logger logger = LoggerFactory.getLogger(SendAnyValues.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22b271904d15943fc5c8ac6db6425508357147fb"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjE5MjE0OnYy", "diffSide": "RIGHT", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOTozNjo0MFrOFqdvWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMToxMzozMVrOFqg0Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA3MTc2OA==", "bodyText": "This initialisation is unnecessary. Shall we remove it?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380071768", "createdAt": "2020-02-17T09:36:40Z", "author": {"login": "kalaiyarasiganeshalingam"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "diffHunk": "@@ -126,28 +136,49 @@ public type SerializerType SER_BYTE_ARRAY|SER_STRING|SER_INT|SER_FLOAT;\n public type Producer client object {\n \n     public ProducerConfig? producerConfig = ();\n-    private string keySerializer;\n-    private string valueSerializer;\n+    private string keySerializerType;\n+    private string valueSerializerType;\n+    private Serializer? keySerializer = ();\n+    private Serializer? valueSerializer = ();\n \n     # Creates a new Kafka `Producer`.\n     #\n     # + config - Configurations related to initializing a Kafka `Producer`.\n     public function __init(ProducerConfig config) {\n         self.producerConfig = config;\n-        self.keySerializer = config.keySerializer;\n-        self.valueSerializer = config.valueSerializer;\n-        var result = self.init(config);\n-        if (result is error) {\n-            panic result;\n+        self.keySerializerType = config.keySerializerType;\n+        self.valueSerializerType = config.valueSerializerType;\n+\n+        if (self.keySerializerType == SER_CUSTOM) {\n+            var keySerializerObject = config.keySerializer;\n+            if (keySerializerObject is ()) {\n+                ProducerError e = error(PRODUCER_ERROR, message = \"Invalid keySerializer config: Please Provide a \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1b93bd0cd36faa055a7ace5eadb8a9699e38e26"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEyMjE1NA==", "bodyText": "Done.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380122154", "createdAt": "2020-02-17T11:13:31Z", "author": {"login": "ThisaruGuruge"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "diffHunk": "@@ -126,28 +136,49 @@ public type SerializerType SER_BYTE_ARRAY|SER_STRING|SER_INT|SER_FLOAT;\n public type Producer client object {\n \n     public ProducerConfig? producerConfig = ();\n-    private string keySerializer;\n-    private string valueSerializer;\n+    private string keySerializerType;\n+    private string valueSerializerType;\n+    private Serializer? keySerializer = ();\n+    private Serializer? valueSerializer = ();\n \n     # Creates a new Kafka `Producer`.\n     #\n     # + config - Configurations related to initializing a Kafka `Producer`.\n     public function __init(ProducerConfig config) {\n         self.producerConfig = config;\n-        self.keySerializer = config.keySerializer;\n-        self.valueSerializer = config.valueSerializer;\n-        var result = self.init(config);\n-        if (result is error) {\n-            panic result;\n+        self.keySerializerType = config.keySerializerType;\n+        self.valueSerializerType = config.valueSerializerType;\n+\n+        if (self.keySerializerType == SER_CUSTOM) {\n+            var keySerializerObject = config.keySerializer;\n+            if (keySerializerObject is ()) {\n+                ProducerError e = error(PRODUCER_ERROR, message = \"Invalid keySerializer config: Please Provide a \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA3MTc2OA=="}, "originalCommit": {"oid": "d1b93bd0cd36faa055a7ace5eadb8a9699e38e26"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Mjc4MzUzOnYy", "diffSide": "RIGHT", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjo1MToxNVrOFqjXAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMzoxNDoxMFrOFqj_zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2Mzg0MQ==", "bodyText": "Should this be anydata instead of any?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380163841", "createdAt": "2020-02-17T12:51:15Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -119,8 +126,8 @@ public type ConsumerConfig record {|\n # + timestamp - Timestamp of the record, in milliseconds since epoch.\n # + topic - Topic to which the record belongs to.\n public type ConsumerRecord record {|\n-    Data key;\n-    Data value;\n+    any key;\n+    any value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3NDI4NA==", "bodyText": "It should be any since we are supporting custom serializers. Users can define their own record types (or object types), and define their own serializing, deserializing methods.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380174284", "createdAt": "2020-02-17T13:14:10Z", "author": {"login": "ThisaruGuruge"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -119,8 +126,8 @@ public type ConsumerConfig record {|\n # + timestamp - Timestamp of the record, in milliseconds since epoch.\n # + topic - Topic to which the record belongs to.\n public type ConsumerRecord record {|\n-    Data key;\n-    Data value;\n+    any key;\n+    any value;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2Mzg0MQ=="}, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzM4OTU5OnYy", "diffSide": "RIGHT", "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/observability/KafkaMetricsUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNTo1MjowNFrOFqpGXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNTo1MjowNFrOFqpGXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI1Nzg4NA==", "bodyText": "Seems this method can be private?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380257884", "createdAt": "2020-02-17T15:52:04Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/observability/KafkaMetricsUtil.java", "diffHunk": "@@ -118,30 +118,35 @@ public static void reportPublish(ObjectValue producerObject, String topic, Objec\n         if (!ObserveUtils.isMetricsEnabled()) {\n             return;\n         }\n+        KafkaObserverContext observerContext = new KafkaObserverContext(KafkaObservabilityConstants.CONTEXT_PRODUCER,\n+                                                                        KafkaUtils.getClientId(producerObject),\n+                                                                        KafkaUtils.getBootstrapServers(producerObject),\n+                                                                        topic);\n+        int size = getMessageSize(value);\n+        reportPublish(observerContext, size);\n+    }\n+\n+    public static int getMessageSize(Object message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzM5NTE2OnYy", "diffSide": "RIGHT", "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/serdes/BallerinaKafkaSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNTo1MzozN1rOFqpJlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNTo1MzozN1rOFqpJlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI1ODcxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                int timeout = 10000;\n          \n          \n            \n                private int timeout = 10000;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380258711", "createdAt": "2020-02-17T15:53:37Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/serdes/BallerinaKafkaSerializer.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.messaging.kafka.serdes;\n+\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.common.serialization.Serializer;\n+import org.ballerinalang.jvm.BRuntime;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.jvm.values.api.BArray;\n+import org.ballerinalang.messaging.kafka.utils.KafkaConstants;\n+\n+import java.util.Map;\n+\n+/**\n+ * Represents a serializer class for ballerina kafka module.\n+ */\n+public class BallerinaKafkaSerializer implements Serializer {\n+\n+    private ObjectValue serializerObject = null;\n+    int timeout = 10000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzQwMTYzOnYy", "diffSide": "RIGHT", "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/utils/KafkaConstants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNTo1NTozM1rOFqpNiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNTo1NTozM1rOFqpNiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI1OTcyMQ==", "bodyText": "This can be private?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380259721", "createdAt": "2020-02-17T15:55:33Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/utils/KafkaConstants.java", "diffHunk": "@@ -36,8 +36,7 @@ private KafkaConstants() {\n     public static final String BLOCK_SEPARATOR = \":\";\n     public static final String ARRAY_INDICATOR = \"[]\";\n     public static final String KAFKA_PACKAGE_NAME = \"kafka\";\n-    public static final String ORG_NAME = \"ballerina\";\n-    public static final String VERSION = \"0.0.0\";\n+    public static final String VERSION = \"1.1.0\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzQxOTA5OnYy", "diffSide": "RIGHT", "path": "stdlib/messaging/kafka/src/test/resources/test-src/serdes/kafka_serializer.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjowMDo1NlrOFqpYYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjowMDo1NlrOFqpYYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI2MjQ5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Person person = <Person> data;\n          \n          \n            \n                    Person person = <Person>data;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380262497", "createdAt": "2020-02-17T16:00:56Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/messaging/kafka/src/test/resources/test-src/serdes/kafka_serializer.bal", "diffHunk": "@@ -0,0 +1,116 @@\n+// Copyright (c) 2019 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/kafka;\n+import ballerina/lang.'array;\n+import ballerina/lang.'string;\n+import ballerina/lang.'int;\n+\n+public const TOPIC = \"add-person\";\n+\n+public type Person record {|\n+    string name;\n+    int age;\n+|};\n+\n+public type PersonSerializer object {\n+    *kafka:Serializer;\n+\n+    public function serialize(any data) returns byte[] {\n+        Person person = <Person> data;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzQyMDA0OnYy", "diffSide": "RIGHT", "path": "stdlib/messaging/kafka/src/test/resources/test-src/serdes/kafka_serializer.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjowMToxMVrOFqpY6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjowMToxMVrOFqpY6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI2MjYzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Person result = { name: name, age: age };\n          \n          \n            \n                    Person result = {name: name, age: age};", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380262632", "createdAt": "2020-02-17T16:01:11Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/messaging/kafka/src/test/resources/test-src/serdes/kafka_serializer.bal", "diffHunk": "@@ -0,0 +1,116 @@\n+// Copyright (c) 2019 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/kafka;\n+import ballerina/lang.'array;\n+import ballerina/lang.'string;\n+import ballerina/lang.'int;\n+\n+public const TOPIC = \"add-person\";\n+\n+public type Person record {|\n+    string name;\n+    int age;\n+|};\n+\n+public type PersonSerializer object {\n+    *kafka:Serializer;\n+\n+    public function serialize(any data) returns byte[] {\n+        Person person = <Person> data;\n+        byte[] result = person.age.toString().toBytes();\n+        byte[] nameBytes = person.name.toBytes();\n+        result.push(...nameBytes);\n+\n+        return result;\n+    }\n+\n+    public function close() {\n+        io:println(\"closing\");\n+    }\n+};\n+\n+public type PersonDeserializer object {\n+    *kafka:Deserializer;\n+\n+    public function deserialize(byte[] data) returns any {\n+        int age = checkpanic 'int:fromString(checkpanic 'string:fromBytes('array:slice(data, 0, 2)));\n+        string name = checkpanic 'string:fromBytes('array:slice(data, 2));\n+\n+        Person result = { name: name, age: age };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzQyMDY3OnYy", "diffSide": "RIGHT", "path": "stdlib/messaging/kafka/src/test/resources/test-src/serdes/kafka_serializer.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjowMToyM1rOFqpZSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjowMjoxM1rOFqpbHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI2MjcyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            kafka:Producer producer = new(producerConfigs);\n          \n          \n            \n            kafka:Producer producer = new (producerConfigs);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380262729", "createdAt": "2020-02-17T16:01:23Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/messaging/kafka/src/test/resources/test-src/serdes/kafka_serializer.bal", "diffHunk": "@@ -0,0 +1,116 @@\n+// Copyright (c) 2019 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/kafka;\n+import ballerina/lang.'array;\n+import ballerina/lang.'string;\n+import ballerina/lang.'int;\n+\n+public const TOPIC = \"add-person\";\n+\n+public type Person record {|\n+    string name;\n+    int age;\n+|};\n+\n+public type PersonSerializer object {\n+    *kafka:Serializer;\n+\n+    public function serialize(any data) returns byte[] {\n+        Person person = <Person> data;\n+        byte[] result = person.age.toString().toBytes();\n+        byte[] nameBytes = person.name.toBytes();\n+        result.push(...nameBytes);\n+\n+        return result;\n+    }\n+\n+    public function close() {\n+        io:println(\"closing\");\n+    }\n+};\n+\n+public type PersonDeserializer object {\n+    *kafka:Deserializer;\n+\n+    public function deserialize(byte[] data) returns any {\n+        int age = checkpanic 'int:fromString(checkpanic 'string:fromBytes('array:slice(data, 0, 2)));\n+        string name = checkpanic 'string:fromBytes('array:slice(data, 2));\n+\n+        Person result = { name: name, age: age };\n+        return result;\n+    }\n+\n+    public function close() {\n+        io:println(\"closing\");\n+    }\n+};\n+\n+PersonSerializer personSerializer = new;\n+PersonDeserializer personDeserializer = new;\n+\n+kafka:ProducerConfig producerConfigs = {\n+    bootstrapServers: \"localhost:14113\",\n+    clientId: \"basic-producer\",\n+    acks: kafka:ACKS_ALL,\n+    requestTimeoutInMillis: 1000,\n+    retryCount: 0,\n+    valueSerializerType: kafka:SER_CUSTOM,\n+    valueSerializer: personSerializer\n+};\n+kafka:Producer producer = new(producerConfigs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI2MzE5Ng==", "bodyText": "Please check and reformat all .bal files including test files.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380263196", "createdAt": "2020-02-17T16:02:13Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/messaging/kafka/src/test/resources/test-src/serdes/kafka_serializer.bal", "diffHunk": "@@ -0,0 +1,116 @@\n+// Copyright (c) 2019 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/kafka;\n+import ballerina/lang.'array;\n+import ballerina/lang.'string;\n+import ballerina/lang.'int;\n+\n+public const TOPIC = \"add-person\";\n+\n+public type Person record {|\n+    string name;\n+    int age;\n+|};\n+\n+public type PersonSerializer object {\n+    *kafka:Serializer;\n+\n+    public function serialize(any data) returns byte[] {\n+        Person person = <Person> data;\n+        byte[] result = person.age.toString().toBytes();\n+        byte[] nameBytes = person.name.toBytes();\n+        result.push(...nameBytes);\n+\n+        return result;\n+    }\n+\n+    public function close() {\n+        io:println(\"closing\");\n+    }\n+};\n+\n+public type PersonDeserializer object {\n+    *kafka:Deserializer;\n+\n+    public function deserialize(byte[] data) returns any {\n+        int age = checkpanic 'int:fromString(checkpanic 'string:fromBytes('array:slice(data, 0, 2)));\n+        string name = checkpanic 'string:fromBytes('array:slice(data, 2));\n+\n+        Person result = { name: name, age: age };\n+        return result;\n+    }\n+\n+    public function close() {\n+        io:println(\"closing\");\n+    }\n+};\n+\n+PersonSerializer personSerializer = new;\n+PersonDeserializer personDeserializer = new;\n+\n+kafka:ProducerConfig producerConfigs = {\n+    bootstrapServers: \"localhost:14113\",\n+    clientId: \"basic-producer\",\n+    acks: kafka:ACKS_ALL,\n+    requestTimeoutInMillis: 1000,\n+    retryCount: 0,\n+    valueSerializerType: kafka:SER_CUSTOM,\n+    valueSerializer: personSerializer\n+};\n+kafka:Producer producer = new(producerConfigs);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI2MjcyOQ=="}, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDQ5NDI2OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/connector/NonBlockingCallback.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMjoxNTowN1rOFqzSlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNjoxMToxOFrOFq2ENw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQyNDg1NA==", "bodyText": "Why do we need to set null here? Can we set necessary return value in Kafka actions level?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380424854", "createdAt": "2020-02-18T02:15:07Z", "author": {"login": "wggihan"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/connector/NonBlockingCallback.java", "diffHunk": "@@ -38,6 +38,7 @@ public NonBlockingCallback(Strand strand) {\n         strand.setState(State.BLOCK_AND_YIELD);\n         this.strand = strand;\n         this.scheduler = strand.scheduler;\n+        this.strand.setReturnValues(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ1ODAxMw==", "bodyText": "Callback should set the return values to null, when instantiating. Otherwise this may lead to errors.\nInstead of setting this in every place where we create a callback, it's better to have it here, right?\n@vinok88", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380458013", "createdAt": "2020-02-18T05:11:55Z", "author": {"login": "ThisaruGuruge"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/connector/NonBlockingCallback.java", "diffHunk": "@@ -38,6 +38,7 @@ public NonBlockingCallback(Strand strand) {\n         strand.setState(State.BLOCK_AND_YIELD);\n         this.strand = strand;\n         this.scheduler = strand.scheduler;\n+        this.strand.setReturnValues(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQyNDg1NA=="}, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ1ODc5NA==", "bodyText": "Yeah, this is not a Kafka specific thing. If you do not set return value properly, return values of previous nonblocking external calls within the same Strand will exist. This is a kind of a cleanup to avoid unintended results.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380458794", "createdAt": "2020-02-18T05:16:12Z", "author": {"login": "vinok88"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/connector/NonBlockingCallback.java", "diffHunk": "@@ -38,6 +38,7 @@ public NonBlockingCallback(Strand strand) {\n         strand.setState(State.BLOCK_AND_YIELD);\n         this.strand = strand;\n         this.scheduler = strand.scheduler;\n+        this.strand.setReturnValues(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQyNDg1NA=="}, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ2NjQ3MQ==", "bodyText": "Then why we faced this issue now. All these days we didn't face this issue without this?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380466471", "createdAt": "2020-02-18T05:54:21Z", "author": {"login": "wggihan"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/connector/NonBlockingCallback.java", "diffHunk": "@@ -38,6 +38,7 @@ public NonBlockingCallback(Strand strand) {\n         strand.setState(State.BLOCK_AND_YIELD);\n         this.strand = strand;\n         this.scheduler = strand.scheduler;\n+        this.strand.setReturnValues(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQyNDg1NA=="}, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ3MDMyNw==", "bodyText": "You won't get this if you set return values in each and every return points from java side (even if you are returning null). We enforce it here by setting it in the constructor itself.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380470327", "createdAt": "2020-02-18T06:11:18Z", "author": {"login": "vinok88"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/connector/NonBlockingCallback.java", "diffHunk": "@@ -38,6 +38,7 @@ public NonBlockingCallback(Strand strand) {\n         strand.setState(State.BLOCK_AND_YIELD);\n         this.strand = strand;\n         this.scheduler = strand.scheduler;\n+        this.strand.setReturnValues(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQyNDg1NA=="}, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDUyOTkwOnYy", "diffSide": "RIGHT", "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/serdes/BallerinaKafkaDeserializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMjo0Mzo0NlrOFqzoAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNToxMzowNVrOFq1U6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQzMDMzOQ==", "bodyText": "Is it ok to get runtime from the config field? or we should get it from  BRuntime.getCurrentRuntime()", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380430339", "createdAt": "2020-02-18T02:43:46Z", "author": {"login": "daneshk"}, "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/serdes/BallerinaKafkaDeserializer.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.messaging.kafka.serdes;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.common.serialization.Deserializer;\n+import org.ballerinalang.jvm.BRuntime;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.jvm.values.api.BArray;\n+import org.ballerinalang.jvm.values.api.BValueCreator;\n+import org.ballerinalang.messaging.kafka.utils.KafkaConstants;\n+\n+import java.util.Map;\n+\n+import static org.ballerinalang.messaging.kafka.utils.KafkaConstants.BALLERINA_STRAND;\n+\n+/**\n+ * Represents a deserializer class for ballerina kafka module.\n+ */\n+public class BallerinaKafkaDeserializer implements Deserializer {\n+\n+    private ObjectValue deserializerObject = null;\n+    private BRuntime runtime = null;\n+    private int timeout = 10000;\n+\n+    @Override\n+    public void configure(Map configs, boolean isKey) {\n+        this.runtime = (BRuntime) configs.get(BALLERINA_STRAND);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ1ODIxOA==", "bodyText": "We do not have any Runtime here, since this method is called from Kafka APIs. Therefore we have to store the runtime, when we have the access, and use it this way.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380458218", "createdAt": "2020-02-18T05:13:05Z", "author": {"login": "ThisaruGuruge"}, "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/serdes/BallerinaKafkaDeserializer.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.messaging.kafka.serdes;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.common.serialization.Deserializer;\n+import org.ballerinalang.jvm.BRuntime;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.jvm.values.api.BArray;\n+import org.ballerinalang.jvm.values.api.BValueCreator;\n+import org.ballerinalang.messaging.kafka.utils.KafkaConstants;\n+\n+import java.util.Map;\n+\n+import static org.ballerinalang.messaging.kafka.utils.KafkaConstants.BALLERINA_STRAND;\n+\n+/**\n+ * Represents a deserializer class for ballerina kafka module.\n+ */\n+public class BallerinaKafkaDeserializer implements Deserializer {\n+\n+    private ObjectValue deserializerObject = null;\n+    private BRuntime runtime = null;\n+    private int timeout = 10000;\n+\n+    @Override\n+    public void configure(Map configs, boolean isKey) {\n+        this.runtime = (BRuntime) configs.get(BALLERINA_STRAND);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQzMDMzOQ=="}, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDU1MTYxOnYy", "diffSide": "RIGHT", "path": "stdlib/messaging/kafka/src/test/resources/test-src/serdes/kafka_serializer.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMzowMDo0NVrOFqz1Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMzowMDo0NVrOFqz1Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQzMzY5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Copyright (c) 2019 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n            // Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380433690", "createdAt": "2020-02-18T03:00:45Z", "author": {"login": "daneshk"}, "path": "stdlib/messaging/kafka/src/test/resources/test-src/serdes/kafka_serializer.bal", "diffHunk": "@@ -0,0 +1,116 @@\n+// Copyright (c) 2019 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDU1NzAzOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-integration-test/src/test/resources/messaging/kafka/kafka_custom_serdes_test.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMzowNDo1NVrOFqz4VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMzowNDo1NVrOFqz4VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQzNDUxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380434517", "createdAt": "2020-02-18T03:04:55Z", "author": {"login": "daneshk"}, "path": "tests/jballerina-integration-test/src/test/resources/messaging/kafka/kafka_custom_serdes_test.bal", "diffHunk": "@@ -0,0 +1,171 @@\n+// Copyright (c) 2019 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/http;\n+import ballerina/kafka;\n+import ballerina/lang.'array;\n+import ballerina/lang.'string;\n+import ballerina/lang.'int;\n+import ballerina/runtime;\n+\n+public const TOPIC = \"add-person\";\n+\n+public type Person record {|\n+    string name;\n+    int age;\n+|};\n+\n+public type PersonSerializer object {\n+    *kafka:Serializer;\n+\n+    public function serialize(any data) returns byte[] {\n+        Person person = <Person> data;\n+        byte[] result = person.age.toString().toBytes();\n+        byte[] nameBytes = person.name.toBytes();\n+        result.push(...nameBytes);\n+\n+        return result;\n+    }\n+\n+    public function close() {\n+        // Do nothing\n+    }\n+};\n+\n+public type PersonDeserializer object {\n+    *kafka:Deserializer;\n+\n+    public function deserialize(byte[] data) returns any {\n+        int age = checkpanic getIntFromString(checkpanic 'string:fromBytes('array:slice(data, 0, 2)));\n+        string name = checkpanic 'string:fromBytes('array:slice(data, 2));\n+\n+        Person result = { name: name, age: age };\n+        return result;\n+    }\n+\n+    public function close() {\n+        // Do nothing\n+    }\n+};\n+\n+Person resultPerson = {\n+    name: \"John Doe\",\n+    age: 0\n+};\n+\n+PersonSerializer personSerializer = new;\n+PersonDeserializer personDeserializer = new;\n+\n+kafka:ProducerConfig producerConfigs = {\n+    bootstrapServers: \"localhost:9092\",\n+    clientId: \"basic-producer\",\n+    acks: kafka:ACKS_ALL,\n+    requestTimeoutInMillis: 1000,\n+    retryCount: 3,\n+    valueSerializerType: kafka:SER_CUSTOM,\n+    valueSerializer: personSerializer\n+};\n+kafka:Producer producer = new(producerConfigs);\n+\n+kafka:ConsumerConfig consumerConfigs = {\n+    bootstrapServers: \"localhost:9092\",\n+    groupId: \"test-group\",\n+    clientId: \"person-consumer\",\n+    offsetReset: \"earliest\",\n+    autoCommit: true,\n+    topics: [TOPIC],\n+    valueDeserializerType: kafka:DES_CUSTOM,\n+    valueDeserializer: personDeserializer\n+};\n+listener kafka:Consumer consumer = new(consumerConfigs);\n+\n+public function sendData(string name, int age) returns error? {\n+    Person person = {\n+        name: name,\n+        age: age\n+    };\n+    var result =  producer->send(person, TOPIC);\n+    return result;\n+}\n+\n+service ListenerService on consumer {\n+    resource function onMessage(kafka:Consumer consumer, kafka:ConsumerRecord[] records) {\n+        foreach var kafkaRecord in records {\n+            var value = <@untainted> kafkaRecord.value;\n+            if (value is Person) {\n+                resultPerson = value;\n+            }\n+        }\n+    }\n+}\n+\n+listener http:Listener httpListener = new(14001);\n+\n+@http:ServiceConfig {\n+    basePath: \"/\"\n+}\n+service SendData on httpListener {\n+    resource function sendData(http:Caller caller, http:Request request) {\n+        http:Response response = new;\n+        var payload = request.getJsonPayload();\n+        int age = 0;\n+        string name = \"\";\n+        boolean failed = false;\n+        if (payload is json) {\n+            var nameValue = payload.name.toString();\n+            var ageValue = getIntFromString(payload.age.toString());\n+            if (ageValue is int) {\n+                age = ageValue;\n+                name = nameValue;\n+                var result = sendData(name, age);\n+                if (result is error) {\n+                    failed = true;\n+                    response.statusCode = 501;\n+                    response.setPayload(\"Sending data to Kafka server failed: \" + result.toString());\n+                }\n+            } else {\n+                failed = true;\n+                response.statusCode = 400;\n+                response.setPayload(\"Invalid request: Data conversion failed.\");\n+            }\n+        } else {\n+            response.statusCode = 400;\n+            failed = true;\n+            response.setPayload(\"Invalid request: Payload is not JSON.\");\n+        }\n+        int i = 0;\n+\n+        while (i < 10) {\n+            i += 1;\n+            runtime:sleep(1000);\n+            if (resultPerson.name == name && resultPerson.age == age) {\n+                response.setPayload(\"Successfully received\");\n+                failed = false;\n+                break;\n+            }\n+        }\n+        if (failed && response.statusCode == 200) {\n+            response.statusCode = 501;\n+            response.setPayload(\"Not received the data\");\n+        }\n+        var responseResult = caller->respond(response);\n+    }\n+}\n+\n+function getIntFromString(string value) returns int|error {\n+    int result = check 'int:fromString(value);\n+    return result;\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDU1OTc3OnYy", "diffSide": "RIGHT", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/deserializer.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMzowNjo1NlrOFqz59A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMzowNjo1NlrOFqz59A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQzNDkzMg==", "bodyText": "Shall we add doc comments for these two functions", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380434932", "createdAt": "2020-02-18T03:06:56Z", "author": {"login": "daneshk"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/deserializer.bal", "diffHunk": "@@ -0,0 +1,21 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+public type Deserializer abstract object {\n+    public function close();\n+\n+    public function deserialize(byte[] data) returns any;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDU5MTMyOnYy", "diffSide": "RIGHT", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/deserializer.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMzozMjoxN1rOFq0Myg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMzozMjoxN1rOFq0Myg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQzOTc1NA==", "bodyText": "Shall we add documentation here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380439754", "createdAt": "2020-02-18T03:32:17Z", "author": {"login": "wggihan"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/deserializer.bal", "diffHunk": "@@ -0,0 +1,21 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDYzMzQxOnYy", "diffSide": "RIGHT", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/serializer.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNDowNzoxOFrOFq0l2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNDowNzoxOFrOFq0l2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ0NjE2OQ==", "bodyText": "Let's add documentation here as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380446169", "createdAt": "2020-02-18T04:07:18Z", "author": {"login": "wggihan"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/serializer.bal", "diffHunk": "@@ -0,0 +1,21 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+public type Serializer abstract object {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDc1NjkxOnYy", "diffSide": "RIGHT", "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/serdes/BallerinaKafkaDeserializer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNTo0Nzo1OFrOFq1vsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNjozNDoyM1rOFq2e9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ2NTA3NA==", "bodyText": "Normally 'isKey' kind word use for a method name.  Shall we use something else like keyPresent  etc.?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380465074", "createdAt": "2020-02-18T05:47:58Z", "author": {"login": "wggihan"}, "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/serdes/BallerinaKafkaDeserializer.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.messaging.kafka.serdes;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.common.serialization.Deserializer;\n+import org.ballerinalang.jvm.BRuntime;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.jvm.values.api.BArray;\n+import org.ballerinalang.jvm.values.api.BValueCreator;\n+import org.ballerinalang.messaging.kafka.utils.KafkaConstants;\n+\n+import java.util.Map;\n+\n+import static org.ballerinalang.messaging.kafka.utils.KafkaConstants.BALLERINA_STRAND;\n+\n+/**\n+ * Represents a deserializer class for ballerina kafka module.\n+ */\n+public class BallerinaKafkaDeserializer implements Deserializer {\n+\n+    private ObjectValue deserializerObject = null;\n+    private BRuntime runtime = null;\n+    private int timeout = 10000;\n+\n+    @Override\n+    public void configure(Map configs, boolean isKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ3NzE3Mw==", "bodyText": "This is the convention used in Kafka Serializers / Deserializers. Shall we keep it this way ?\nAdding to that, in this case, isKey makes more sense, since this is used to determine whether we are configuring the keySerializer or valueSerializer. This value is sent by Kafka Client APIs, when initializing the Serializer / Deserializer. Since they use the same interface for KeySerializer and ValueSerializer, they use this variable to differentiate the two.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21017#discussion_r380477173", "createdAt": "2020-02-18T06:34:23Z", "author": {"login": "ThisaruGuruge"}, "path": "stdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/serdes/BallerinaKafkaDeserializer.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.messaging.kafka.serdes;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.common.serialization.Deserializer;\n+import org.ballerinalang.jvm.BRuntime;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.jvm.values.api.BArray;\n+import org.ballerinalang.jvm.values.api.BValueCreator;\n+import org.ballerinalang.messaging.kafka.utils.KafkaConstants;\n+\n+import java.util.Map;\n+\n+import static org.ballerinalang.messaging.kafka.utils.KafkaConstants.BALLERINA_STRAND;\n+\n+/**\n+ * Represents a deserializer class for ballerina kafka module.\n+ */\n+public class BallerinaKafkaDeserializer implements Deserializer {\n+\n+    private ObjectValue deserializerObject = null;\n+    private BRuntime runtime = null;\n+    private int timeout = 10000;\n+\n+    @Override\n+    public void configure(Map configs, boolean isKey) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ2NTA3NA=="}, "originalCommit": {"oid": "0e81b4e7d8b82b84fd22345d6c8dc5d5ee88edfb"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1234, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}