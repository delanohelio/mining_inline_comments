{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxNDc3OTA5", "number": 26948, "title": "Add runtime support for `configurable` variables", "bodyText": "Purpose\nAdd runtime support for configurable module level variables as proposed in the Configurable proposal.\nResolves #26623\nResolves #27096\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-11-16T07:45:23Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26948", "merged": true, "mergeCommit": {"oid": "46aa451e944c0bf5c935f275ff9f24aeb07d3040"}, "closed": true, "closedAt": "2020-11-23T17:34:27Z", "author": {"login": "HindujaB"}, "timelineItems": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdduO_pgBqjQwMTA2ODQ1MDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfYE91AFqTUzNjY2NDE4OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ba4a474c739454d436552668fb5365c1884ae427", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ba4a474c739454d436552668fb5365c1884ae427", "committedDate": "2020-11-16T07:59:56Z", "message": "Fix checkstyle errors"}, "afterCommit": {"oid": "0a0a0fa4bd8c42a24547b63ba5e6d3d6a9ee5e2e", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0a0a0fa4bd8c42a24547b63ba5e6d3d6a9ee5e2e", "committedDate": "2020-11-18T13:31:02Z", "message": "Add validation methods to support single module"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0MTA0MTky", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26948#pullrequestreview-534104192", "createdAt": "2020-11-19T06:03:24Z", "commit": {"oid": "0a0a0fa4bd8c42a24547b63ba5e6d3d6a9ee5e2e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNjowMzoyNFrOH2N8-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNjowMzoyNFrOH2N8-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYxMzc1Mg==", "bodyText": "let's run this into early return to avoid too many nesting", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26948#discussion_r526613752", "createdAt": "2020-11-19T06:03:24Z", "author": {"login": "manuranga"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/TomlParser.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.runtime.internal.configurable;\n+\n+import com.moandjiezana.toml.Toml;\n+import io.ballerina.runtime.api.Module;\n+import io.ballerina.runtime.api.TypeTags;\n+import io.ballerina.runtime.internal.configurable.exceptions.TomlException;\n+import io.ballerina.runtime.internal.util.RuntimeUtils;\n+import io.ballerina.runtime.internal.values.BmpStringValue;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.CONFIG_FILE_NAME;\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.INVALID_TOML_FILE;\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.INVALID_VARIABLE_TYPE;\n+\n+/**\n+ * Toml parser for configurable implementation.\n+ *\n+ * @since 2.0.0\n+ */\n+public class TomlParser {\n+\n+    static final Path CONFIG_FILE_PATH = Paths.get(RuntimeUtils.USER_DIR).resolve(CONFIG_FILE_NAME);\n+\n+    private static Toml getConfigurationData() throws TomlException {\n+        if (!Files.exists(CONFIG_FILE_PATH)) {\n+            throw new TomlException(\"Configuration toml file `\" + CONFIG_FILE_NAME + \"` is not found\");\n+        }\n+        return new Toml().read(CONFIG_FILE_PATH.toFile());\n+    }\n+\n+    public static void populateConfigMap(String module, VariableKey[] configurationData) throws TomlException {\n+        Map<VariableKey, Object> configurableMap = ConfigurableMapHolder.getConfigurationMap();\n+        if (isConfigurationDataEmpty(configurationData)) {\n+            return;\n+        }\n+        Toml toml = getConfigurationData();\n+        if (toml != null && !toml.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0a0fa4bd8c42a24547b63ba5e6d3d6a9ee5e2e"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0MTA0OTI5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26948#pullrequestreview-534104929", "createdAt": "2020-11-19T06:05:20Z", "commit": {"oid": "0a0a0fa4bd8c42a24547b63ba5e6d3d6a9ee5e2e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNjowNToyMVrOH2N_ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNjowNToyMVrOH2N_ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjYxNDQxMA==", "bodyText": "lets combine the ifs, use boolean variables if needed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26948#discussion_r526614410", "createdAt": "2020-11-19T06:05:21Z", "author": {"login": "manuranga"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -726,8 +726,23 @@ public void visit(BLangPackage pkgNode) {\n         }\n \n         pkgNode.globalVars.forEach(globalVar -> {\n-            BLangAssignment assignment = createAssignmentStmt(globalVar);\n-            if (assignment.expr != null) {\n+            long globalVarFlags = globalVar.symbol.flags;\n+            if (globalVar.expr != null || Symbols.isFlagOn(globalVarFlags, Flags.CONFIGURABLE)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0a0fa4bd8c42a24547b63ba5e6d3d6a9ee5e2e"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0MTk2NjIy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26948#pullrequestreview-534196622", "createdAt": "2020-11-19T08:51:15Z", "commit": {"oid": "0a0a0fa4bd8c42a24547b63ba5e6d3d6a9ee5e2e"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwODo1MToxNVrOH2Simg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwOToyMDoyN1rOH2TqxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY4ODkyMg==", "bodyText": "Shall we remove addtional empty lines.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26948#discussion_r526688922", "createdAt": "2020-11-19T08:51:15Z", "author": {"login": "warunalakshitha"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/ConfigurableConstants.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.runtime.internal.configurable;\n+\n+/**\n+ * Constants used by toml parser.\n+ *\n+ * @since 2.0.0\n+ */\n+public class ConfigurableConstants {\n+    public static final String CONFIG_FILE_NAME = \"config-variables.toml\";\n+    public static final String INVALID_TOML_FILE = \"Invalid configuration toml file `\" + CONFIG_FILE_NAME + \"` : \";\n+    public static final String INVALID_VARIABLE_TYPE =\n+            \"Invalid value type found for variable '%s' in toml file `\" + CONFIG_FILE_NAME + \"` \";\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0a0fa4bd8c42a24547b63ba5e6d3d6a9ee5e2e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY5MDgwMg==", "bodyText": "We can directly return false here.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26948#discussion_r526690802", "createdAt": "2020-11-19T08:54:14Z", "author": {"login": "warunalakshitha"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/TomlParser.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.runtime.internal.configurable;\n+\n+import com.moandjiezana.toml.Toml;\n+import io.ballerina.runtime.api.Module;\n+import io.ballerina.runtime.api.TypeTags;\n+import io.ballerina.runtime.internal.configurable.exceptions.TomlException;\n+import io.ballerina.runtime.internal.util.RuntimeUtils;\n+import io.ballerina.runtime.internal.values.BmpStringValue;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.CONFIG_FILE_NAME;\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.INVALID_TOML_FILE;\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.INVALID_VARIABLE_TYPE;\n+\n+/**\n+ * Toml parser for configurable implementation.\n+ *\n+ * @since 2.0.0\n+ */\n+public class TomlParser {\n+\n+    static final Path CONFIG_FILE_PATH = Paths.get(RuntimeUtils.USER_DIR).resolve(CONFIG_FILE_NAME);\n+\n+    private static Toml getConfigurationData() throws TomlException {\n+        if (!Files.exists(CONFIG_FILE_PATH)) {\n+            throw new TomlException(\"Configuration toml file `\" + CONFIG_FILE_NAME + \"` is not found\");\n+        }\n+        return new Toml().read(CONFIG_FILE_PATH.toFile());\n+    }\n+\n+    public static void populateConfigMap(String module, VariableKey[] configurationData) throws TomlException {\n+        Map<VariableKey, Object> configurableMap = ConfigurableMapHolder.getConfigurationMap();\n+        if (isConfigurationDataEmpty(configurationData)) {\n+            return;\n+        }\n+        Toml toml = getConfigurationData();\n+        if (toml != null && !toml.isEmpty()) {\n+            String orgName = configurationData[0].module.getOrg();\n+            validateOrganizationName(toml, orgName);\n+            for (Map.Entry<String, Object> organizaion : toml.entrySet()) {\n+                Toml moduleToml = extractModuleTable((Toml) organizaion.getValue(), module);\n+                for (VariableKey key : configurationData) {\n+                    Object value = validateAndExtractValue(key, moduleToml);\n+                    if (value == null) {\n+                        //This indicates the value not provided at toml file\n+                        break;\n+                    }\n+                    configurableMap.put(key, value);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static Object validateAndExtractValue(VariableKey key, Toml moduleToml) throws TomlException {\n+        String variableName = key.variable;\n+        if (!moduleToml.contains(variableName)) {\n+            return null;\n+        }\n+        Object value;\n+        try {\n+            switch (key.type.getTag()) {\n+                case TypeTags.INT_TAG:\n+                    value = moduleToml.getLong(variableName);\n+                    break;\n+                case TypeTags.BOOLEAN_TAG:\n+                    value = moduleToml.getBoolean(variableName);\n+                    break;\n+                case TypeTags.FLOAT_TAG:\n+                    value = moduleToml.getDouble(variableName);\n+                    break;\n+                case TypeTags.STRING_TAG:\n+                    value = new BmpStringValue(moduleToml.getString(variableName));\n+                    break;\n+                default:\n+                    throw new TomlException(String.format(\"Configurable feature is yet to be supported for type '%s'\",\n+                            key.type.toString()));\n+            }\n+        } catch (ClassCastException e) {\n+            throw new TomlException(String.format(INVALID_VARIABLE_TYPE, key.variable));\n+        }\n+        return value;\n+    }\n+\n+    private static Toml extractModuleTable(Toml modules, String module) {\n+\n+        Toml moduleToml = modules;\n+        if (!module.contains(\".\")) {\n+            moduleToml = modules.getTable(module);\n+        } else {\n+            String parent = module.substring(0, module.indexOf('.'));\n+            String submodule = module.substring(module.indexOf('.') + 1);\n+            moduleToml = extractModuleTable(moduleToml.getTable(parent), submodule);\n+        }\n+        return moduleToml;\n+    }\n+\n+    private static void validateVariableType(VariableKey tomlKey, VariableKey[] configurationData)\n+            throws TomlException {\n+\n+        List<VariableKey> dataList = Arrays.asList(configurationData);\n+        boolean moduleFound = false;\n+        for (VariableKey variableKey : configurationData) {\n+            Module confModule = variableKey.module;\n+            moduleFound = confModule.equals(tomlKey.module);\n+        }\n+\n+        if (!moduleFound) {\n+            throw new TomlException(INVALID_TOML_FILE + \"Module name not found.\");\n+\n+        }\n+\n+    }\n+\n+    private static void validateOrganizationName(Toml toml, String orgName) throws TomlException {\n+        if (toml.entrySet().size() != 1) {\n+            throw new TomlException(INVALID_TOML_FILE + \"Multiple organization names found.\");\n+        }\n+        if (!toml.contains(orgName)) {\n+            throw new TomlException(INVALID_TOML_FILE + \"Organization name '\" + orgName + \"' not found.\");\n+        }\n+    }\n+\n+    private static boolean isConfigurationDataEmpty(VariableKey[] configurationData) {\n+        boolean empty = true;\n+        for (VariableKey variableKey : configurationData) {\n+            if (variableKey != null) {\n+                empty = false;\n+                break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0a0fa4bd8c42a24547b63ba5e6d3d6a9ee5e2e"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY5MTE1Mw==", "bodyText": "Why can't we check configurableData size", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26948#discussion_r526691153", "createdAt": "2020-11-19T08:54:44Z", "author": {"login": "warunalakshitha"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/TomlParser.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.runtime.internal.configurable;\n+\n+import com.moandjiezana.toml.Toml;\n+import io.ballerina.runtime.api.Module;\n+import io.ballerina.runtime.api.TypeTags;\n+import io.ballerina.runtime.internal.configurable.exceptions.TomlException;\n+import io.ballerina.runtime.internal.util.RuntimeUtils;\n+import io.ballerina.runtime.internal.values.BmpStringValue;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.CONFIG_FILE_NAME;\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.INVALID_TOML_FILE;\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.INVALID_VARIABLE_TYPE;\n+\n+/**\n+ * Toml parser for configurable implementation.\n+ *\n+ * @since 2.0.0\n+ */\n+public class TomlParser {\n+\n+    static final Path CONFIG_FILE_PATH = Paths.get(RuntimeUtils.USER_DIR).resolve(CONFIG_FILE_NAME);\n+\n+    private static Toml getConfigurationData() throws TomlException {\n+        if (!Files.exists(CONFIG_FILE_PATH)) {\n+            throw new TomlException(\"Configuration toml file `\" + CONFIG_FILE_NAME + \"` is not found\");\n+        }\n+        return new Toml().read(CONFIG_FILE_PATH.toFile());\n+    }\n+\n+    public static void populateConfigMap(String module, VariableKey[] configurationData) throws TomlException {\n+        Map<VariableKey, Object> configurableMap = ConfigurableMapHolder.getConfigurationMap();\n+        if (isConfigurationDataEmpty(configurationData)) {\n+            return;\n+        }\n+        Toml toml = getConfigurationData();\n+        if (toml != null && !toml.isEmpty()) {\n+            String orgName = configurationData[0].module.getOrg();\n+            validateOrganizationName(toml, orgName);\n+            for (Map.Entry<String, Object> organizaion : toml.entrySet()) {\n+                Toml moduleToml = extractModuleTable((Toml) organizaion.getValue(), module);\n+                for (VariableKey key : configurationData) {\n+                    Object value = validateAndExtractValue(key, moduleToml);\n+                    if (value == null) {\n+                        //This indicates the value not provided at toml file\n+                        break;\n+                    }\n+                    configurableMap.put(key, value);\n+                }\n+            }\n+        }\n+    }\n+\n+    private static Object validateAndExtractValue(VariableKey key, Toml moduleToml) throws TomlException {\n+        String variableName = key.variable;\n+        if (!moduleToml.contains(variableName)) {\n+            return null;\n+        }\n+        Object value;\n+        try {\n+            switch (key.type.getTag()) {\n+                case TypeTags.INT_TAG:\n+                    value = moduleToml.getLong(variableName);\n+                    break;\n+                case TypeTags.BOOLEAN_TAG:\n+                    value = moduleToml.getBoolean(variableName);\n+                    break;\n+                case TypeTags.FLOAT_TAG:\n+                    value = moduleToml.getDouble(variableName);\n+                    break;\n+                case TypeTags.STRING_TAG:\n+                    value = new BmpStringValue(moduleToml.getString(variableName));\n+                    break;\n+                default:\n+                    throw new TomlException(String.format(\"Configurable feature is yet to be supported for type '%s'\",\n+                            key.type.toString()));\n+            }\n+        } catch (ClassCastException e) {\n+            throw new TomlException(String.format(INVALID_VARIABLE_TYPE, key.variable));\n+        }\n+        return value;\n+    }\n+\n+    private static Toml extractModuleTable(Toml modules, String module) {\n+\n+        Toml moduleToml = modules;\n+        if (!module.contains(\".\")) {\n+            moduleToml = modules.getTable(module);\n+        } else {\n+            String parent = module.substring(0, module.indexOf('.'));\n+            String submodule = module.substring(module.indexOf('.') + 1);\n+            moduleToml = extractModuleTable(moduleToml.getTable(parent), submodule);\n+        }\n+        return moduleToml;\n+    }\n+\n+    private static void validateVariableType(VariableKey tomlKey, VariableKey[] configurationData)\n+            throws TomlException {\n+\n+        List<VariableKey> dataList = Arrays.asList(configurationData);\n+        boolean moduleFound = false;\n+        for (VariableKey variableKey : configurationData) {\n+            Module confModule = variableKey.module;\n+            moduleFound = confModule.equals(tomlKey.module);\n+        }\n+\n+        if (!moduleFound) {\n+            throw new TomlException(INVALID_TOML_FILE + \"Module name not found.\");\n+\n+        }\n+\n+    }\n+\n+    private static void validateOrganizationName(Toml toml, String orgName) throws TomlException {\n+        if (toml.entrySet().size() != 1) {\n+            throw new TomlException(INVALID_TOML_FILE + \"Multiple organization names found.\");\n+        }\n+        if (!toml.contains(orgName)) {\n+            throw new TomlException(INVALID_TOML_FILE + \"Organization name '\" + orgName + \"' not found.\");\n+        }\n+    }\n+\n+    private static boolean isConfigurationDataEmpty(VariableKey[] configurationData) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0a0fa4bd8c42a24547b63ba5e6d3d6a9ee5e2e"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY5MjIzOQ==", "bodyText": "Shall we add specific modules to export here than exporting to all modules outside.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26948#discussion_r526692239", "createdAt": "2020-11-19T08:56:24Z", "author": {"login": "warunalakshitha"}, "path": "bvm/ballerina-runtime/src/main/java/module-info.java", "diffHunk": "@@ -55,4 +56,5 @@\n             io.ballerina.lang.floatingpoint, io.ballerina.lang.map, io.ballerina.lang.string, io.ballerina.lang.table,\n             io.ballerina.lang.xml, io.ballerina.testerina.core, io.ballerina.cli.utils;\n     exports io.ballerina.runtime.internal.values to io.ballerina.testerina.core, io.ballerina.testerina.runtime;\n+    exports io.ballerina.runtime.internal.configurable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0a0fa4bd8c42a24547b63ba5e6d3d6a9ee5e2e"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcwNzM5Ng==", "bodyText": "Better to create a git issue for Todos for future reference", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26948#discussion_r526707396", "createdAt": "2020-11-19T09:20:27Z", "author": {"login": "warunalakshitha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -586,14 +586,19 @@ public BLangNode transform(ModuleVariableDeclarationNode modVarDeclrNode) {\n         }\n \n         boolean isFinal = false;\n+        boolean isConfigurable = false;\n+        // TODO handle this inside createSimpleVar", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a0a0fa4bd8c42a24547b63ba5e6d3d6a9ee5e2e"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0a0a0fa4bd8c42a24547b63ba5e6d3d6a9ee5e2e", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0a0a0fa4bd8c42a24547b63ba5e6d3d6a9ee5e2e", "committedDate": "2020-11-18T13:31:02Z", "message": "Add validation methods to support single module"}, "afterCommit": {"oid": "7e9e638494ae13f1452accb3c83916a785a8528d", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7e9e638494ae13f1452accb3c83916a785a8528d", "committedDate": "2020-11-23T07:10:33Z", "message": "Fix integration tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7e9e638494ae13f1452accb3c83916a785a8528d", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7e9e638494ae13f1452accb3c83916a785a8528d", "committedDate": "2020-11-23T07:10:33Z", "message": "Fix integration tests"}, "afterCommit": {"oid": "6ca3b66e338b2e2b2239e54aa090da1f0e870092", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6ca3b66e338b2e2b2239e54aa090da1f0e870092", "committedDate": "2020-11-23T07:15:01Z", "message": "Fix integration tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2Mjk4MDcy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26948#pullrequestreview-536298072", "createdAt": "2020-11-23T09:33:50Z", "commit": {"oid": "b254d94e0d33fc01fef7849ad716510ab251b951"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOTozMzo1MVrOH4FS5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOTozMzo1MVrOH4FS5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU2OTA2MA==", "bodyText": "is there any reason why this is not Objects.hash(module, variable, type)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26948#discussion_r528569060", "createdAt": "2020-11-23T09:33:51Z", "author": {"login": "manuranga"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/VariableKey.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.runtime.internal.configurable;\n+\n+import io.ballerina.runtime.api.Module;\n+import io.ballerina.runtime.api.types.Type;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Class that represents the key for configurable variables.\n+ *\n+ * @since 2.0.0\n+ */\n+public class VariableKey {\n+    Module module;\n+    String variable;\n+    Type type;\n+\n+    public VariableKey(String org, String module, String version, String variable) {\n+        this.module = new Module(org, module, version);\n+        this.variable = variable;\n+        this.type = null;\n+    }\n+\n+    public VariableKey(Module module, String variable) {\n+        this.module = module;\n+        this.variable = variable;\n+        this.type = null;\n+    }\n+\n+    public VariableKey(String org, String module, String version, String variable, Type type) {\n+        this.module = new Module(org, module, version);\n+        this.variable = variable;\n+        this.type = type;\n+    }\n+\n+    public VariableKey(Module module, String variable, Type type) {\n+        this.module = module;\n+        this.variable = variable;\n+        this.type = type;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        VariableKey variableKey = (VariableKey) o;\n+        boolean isEqual = Objects.equals(module, variableKey.module) &&\n+                Objects.equals(variable, variableKey.variable);\n+        if (type == null || variableKey.type == null) {\n+            return isEqual;\n+        }\n+        return isEqual && Objects.equals(type, variableKey.type);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(module, variable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b254d94e0d33fc01fef7849ad716510ab251b951"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MzMxMzgy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26948#pullrequestreview-536331382", "createdAt": "2020-11-23T10:16:08Z", "commit": {"oid": "8ceee96b8df4f67eb8520aa0229778e257b668bf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDoxNjowOVrOH4G43Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDoxNjowOVrOH4G43Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU5NTE2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26948#discussion_r528595165", "createdAt": "2020-11-23T10:16:09Z", "author": {"login": "riyafa"}, "path": "bvm/ballerina-config/src/main/java/module-info.java", "diffHunk": "@@ -1,5 +1,6 @@\n module io.ballerina.config {\n     requires org.apache.commons.lang3;\n+    requires toml4j;\n     exports org.ballerinalang.config;\n     exports org.ballerinalang.config.cipher;\n }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ceee96b8df4f67eb8520aa0229778e257b668bf"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8ceee96b8df4f67eb8520aa0229778e257b668bf", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8ceee96b8df4f67eb8520aa0229778e257b668bf", "committedDate": "2020-11-23T09:58:29Z", "message": "Remove reduntant tests"}, "afterCommit": {"oid": "f8defaae5d5305cdb2f618ebc198b49e4dd0c637", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f8defaae5d5305cdb2f618ebc198b49e4dd0c637", "committedDate": "2020-11-23T12:22:41Z", "message": "Add new lines"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2NTU1ODgx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26948#pullrequestreview-536555881", "createdAt": "2020-11-23T15:01:56Z", "commit": {"oid": "f8defaae5d5305cdb2f618ebc198b49e4dd0c637"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTowMTo1NlrOH4RVeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTowMTo1NlrOH4RVeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc2NjMyOQ==", "bodyText": "lets add expected type\n#27096", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26948#discussion_r528766329", "createdAt": "2020-11-23T15:01:56Z", "author": {"login": "manuranga"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/TomlParser.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.runtime.internal.configurable;\n+\n+import com.moandjiezana.toml.Toml;\n+import io.ballerina.runtime.api.Module;\n+import io.ballerina.runtime.api.TypeTags;\n+import io.ballerina.runtime.api.utils.StringUtils;\n+import io.ballerina.runtime.internal.configurable.exceptions.TomlException;\n+import io.ballerina.runtime.internal.util.RuntimeUtils;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+\n+import static io.ballerina.runtime.api.constants.RuntimeConstants.ANON_ORG;\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.CONFIG_FILE_NAME;\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.DEFAULT_MODULE;\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.INVALID_TOML_FILE;\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.INVALID_VARIABLE_TYPE;\n+import static io.ballerina.runtime.internal.configurable.ConfigurableConstants.SUBMODULE_DELIMITER;\n+\n+/**\n+ * Toml parser for configurable implementation.\n+ *\n+ * @since 2.0.0\n+ */\n+public class TomlParser {\n+\n+    static final Path CONFIG_FILE_PATH = Paths.get(RuntimeUtils.USER_DIR).resolve(CONFIG_FILE_NAME);\n+\n+    private static Toml getConfigurationData() throws TomlException {\n+        if (!Files.exists(CONFIG_FILE_PATH)) {\n+            throw new TomlException(\"Configuration toml file `\" + CONFIG_FILE_NAME + \"` is not found\");\n+        }\n+        try {\n+            return new Toml().read(CONFIG_FILE_PATH.toFile());\n+        } catch (RuntimeException exception) {\n+            throw new TomlException(INVALID_TOML_FILE + exception.getCause().getMessage());\n+        }\n+    }\n+\n+    public static void populateConfigMap(Map<Module, VariableKey[]> configurationData) throws TomlException {\n+        if (configurationData.isEmpty()) {\n+            return;\n+        }\n+        Toml toml = getConfigurationData();\n+        if (toml.isEmpty()) {\n+            //No values provided at toml file\n+            return;\n+        }\n+        for (Map.Entry<Module, VariableKey[]> moduleEntry : configurationData.entrySet()) {\n+            String orgName = moduleEntry.getKey().getOrg();\n+            String moduleName = moduleEntry.getKey().getName();\n+            Toml orgToml = orgName.equals(ANON_ORG) ? toml : extractOrganizationTable(toml, orgName);\n+            Toml moduleToml = moduleName.equals(DEFAULT_MODULE) ? orgToml : extractModuleTable(orgToml, moduleName);\n+            for (VariableKey key : moduleEntry.getValue()) {\n+                if (!moduleToml.contains(key.variable)) {\n+                    //It is an optional configurable variable\n+                    break;\n+                }\n+                Object value = validateAndExtractValue(key, moduleToml);\n+                ConfigurableMap.put(key, value);\n+            }\n+        }\n+    }\n+\n+    private static Object validateAndExtractValue(VariableKey key, Toml moduleToml) throws TomlException {\n+        String variableName = key.variable;\n+        Object value;\n+        try {\n+            switch (key.type.getTag()) {\n+                case TypeTags.INT_TAG:\n+                    value = moduleToml.getLong(variableName);\n+                    break;\n+                case TypeTags.BOOLEAN_TAG:\n+                    value = moduleToml.getBoolean(variableName);\n+                    break;\n+                case TypeTags.FLOAT_TAG:\n+                    value = moduleToml.getDouble(variableName);\n+                    break;\n+                case TypeTags.STRING_TAG:\n+                    value = StringUtils.fromString(moduleToml.getString(variableName));\n+                    break;\n+                default:\n+                    throw new TomlException(String.format(\"Configurable feature is yet to be supported for type '%s'\",\n+                            key.type.toString()));\n+            }\n+        } catch (ClassCastException e) {\n+            throw new TomlException(INVALID_TOML_FILE + String.format(INVALID_VARIABLE_TYPE, variableName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8defaae5d5305cdb2f618ebc198b49e4dd0c637"}, "originalPosition": 107}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2NTYwODEy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26948#pullrequestreview-536560812", "createdAt": "2020-11-23T15:07:00Z", "commit": {"oid": "f8defaae5d5305cdb2f618ebc198b49e4dd0c637"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTowNzowMFrOH4RkTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTowNzowMFrOH4RkTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc3MDEyNQ==", "bodyText": "Created issue for this. #27096", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26948#discussion_r528770125", "createdAt": "2020-11-23T15:07:00Z", "author": {"login": "hasithaa"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/configurable/ConfigurableConstants.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.ballerina.runtime.internal.configurable;\n+\n+/**\n+ * Constants used by toml parser.\n+ *\n+ * @since 2.0.0\n+ */\n+public class ConfigurableConstants {\n+    public static final String CONFIG_FILE_NAME = \"configuration.toml\";\n+    public static final String INVALID_TOML_FILE = \"Invalid `\" + CONFIG_FILE_NAME + \"` file : \";\n+    public static final String INVALID_VARIABLE_TYPE = \"invalid type found for variable '%s'.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8defaae5d5305cdb2f618ebc198b49e4dd0c637"}, "originalPosition": 29}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f8defaae5d5305cdb2f618ebc198b49e4dd0c637", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f8defaae5d5305cdb2f618ebc198b49e4dd0c637", "committedDate": "2020-11-23T12:22:41Z", "message": "Add new lines"}, "afterCommit": {"oid": "4b0ea2f4f4eea1fa24ceecff6dd9563cca113408", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4b0ea2f4f4eea1fa24ceecff6dd9563cca113408", "committedDate": "2020-11-23T16:17:15Z", "message": "Modify error message with details"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4618299e8201f2df95468d220bcf2f90c85b3cca", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4618299e8201f2df95468d220bcf2f90c85b3cca", "committedDate": "2020-11-23T16:38:53Z", "message": "Initial desugar changes for configurable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "401e46629b1658188745a2a118f6ff53f6af3d81", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/401e46629b1658188745a2a118f6ff53f6af3d81", "committedDate": "2020-11-23T16:38:53Z", "message": "Complete parser changes without required expression"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a5c3fea035ac95af9ac53d66410a00716959921", "author": {"user": {"login": "rdulmina", "name": "Dulmina Renuke"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3a5c3fea035ac95af9ac53d66410a00716959921", "committedDate": "2020-11-23T16:38:53Z", "message": "remove unused createTernaryExpr method from ASTBuilderUtil"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "970be350734389031b0d5008e0aa7e298a7bd7e9", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/970be350734389031b0d5008e0aa7e298a7bd7e9", "committedDate": "2020-11-23T16:38:53Z", "message": "Add toml parsing for primitives"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ef3d20e53eef1b2b74c6510e08c205daf835fbd", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5ef3d20e53eef1b2b74c6510e08c205daf835fbd", "committedDate": "2020-11-23T16:38:53Z", "message": "Fix NPE in tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "326b477dd1733479c4e957e64519bb2e4e79cf73", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/326b477dd1733479c4e957e64519bb2e4e79cf73", "committedDate": "2020-11-23T16:38:53Z", "message": "Fix checkstyle errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b154130f9b2006f86d4a28d18808b91290b104b", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9b154130f9b2006f86d4a28d18808b91290b104b", "committedDate": "2020-11-23T16:38:53Z", "message": "Add validation methods to support single module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed2ea91b68a1f57bcbffb9f8321c6515b9bf98ee", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ed2ea91b68a1f57bcbffb9f8321c6515b9bf98ee", "committedDate": "2020-11-23T16:38:53Z", "message": "Add support for imported modules"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50666966706dd057ff273c97f4db7aea5297cd44", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/50666966706dd057ff273c97f4db7aea5297cd44", "committedDate": "2020-11-23T16:38:53Z", "message": "Add tests for primitives"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f7e729c42c8855652aa32339f2a92f6df7b2b8d", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5f7e729c42c8855652aa32339f2a92f6df7b2b8d", "committedDate": "2020-11-23T16:38:53Z", "message": "Modify configMap class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c149fb32fd2c5ee21e5cd28e8bc9a9365cbf8db", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0c149fb32fd2c5ee21e5cd28e8bc9a9365cbf8db", "committedDate": "2020-11-23T16:38:53Z", "message": "Handle invalid file exception"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "104e6156a05f9ed72ed281e266719008e5ea123d", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/104e6156a05f9ed72ed281e266719008e5ea123d", "committedDate": "2020-11-23T16:38:53Z", "message": "Fix integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e183a00569a5136a5accbc8f176922096c569cd9", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e183a00569a5136a5accbc8f176922096c569cd9", "committedDate": "2020-11-23T16:38:53Z", "message": "Remove unnecessary orgName validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4c0835c85268ad171f87a2975f7c9ae8ceab565", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d4c0835c85268ad171f87a2975f7c9ae8ceab565", "committedDate": "2020-11-23T16:38:53Z", "message": "Remove reduntant tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1340865b5aabb6c6dfeae9b00ef35bd7518775f3", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1340865b5aabb6c6dfeae9b00ef35bd7518775f3", "committedDate": "2020-11-23T16:38:53Z", "message": "Add new lines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c33964d25ecddc8d241563fcdb3c44d4d0eb5555", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c33964d25ecddc8d241563fcdb3c44d4d0eb5555", "committedDate": "2020-11-23T16:38:53Z", "message": "Modify error message with details"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "444df6e360467551b3bc1c4628233f03b561070a", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/444df6e360467551b3bc1c4628233f03b561070a", "committedDate": "2020-11-23T16:38:53Z", "message": "Resolve conflicts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b0ea2f4f4eea1fa24ceecff6dd9563cca113408", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4b0ea2f4f4eea1fa24ceecff6dd9563cca113408", "committedDate": "2020-11-23T16:17:15Z", "message": "Modify error message with details"}, "afterCommit": {"oid": "444df6e360467551b3bc1c4628233f03b561070a", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/444df6e360467551b3bc1c4628233f03b561070a", "committedDate": "2020-11-23T16:38:53Z", "message": "Resolve conflicts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2NjY0MTg4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26948#pullrequestreview-536664188", "createdAt": "2020-11-23T16:52:02Z", "commit": {"oid": "444df6e360467551b3bc1c4628233f03b561070a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4890, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}