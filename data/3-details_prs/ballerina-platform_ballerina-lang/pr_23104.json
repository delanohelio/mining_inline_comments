{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNDU2NDgz", "number": 23104, "title": "Add search functionality to API Docs", "bodyText": "Purpose\n\nAdds a search bar to API Docs.\n\nFixes #22722\nApproach\n\nFrontend Search functionality is implemented using React.\nJSON files are generated that holds the data required by the search functionality.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-05-05T11:25:23Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23104", "merged": true, "mergeCommit": {"oid": "cbe66dfb7e37cc0dd3ecd9503518e495c0d3dfb7"}, "closed": true, "closedAt": "2020-05-27T07:01:00Z", "author": {"login": "shehan360"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABceZTsigBqjMzMDU3MDMzODk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclTu0ggFqTQxODkwNjkwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "501e9a97a24c69c09088b11f0642e0882edc465a", "author": {"user": {"login": "shehan360", "name": "Shehan Panditharatne"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/501e9a97a24c69c09088b11f0642e0882edc465a", "committedDate": "2020-05-05T11:06:21Z", "message": "Add doc search"}, "afterCommit": {"oid": "d791e9f4ade18456aed231704e24bdd2d01dd63d", "author": {"user": {"login": "shehan360", "name": "Shehan Panditharatne"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d791e9f4ade18456aed231704e24bdd2d01dd63d", "committedDate": "2020-05-05T19:31:12Z", "message": "Add doc search"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8475148310a5ce9f6bd8921dac291ab141b37991", "author": {"user": {"login": "shehan360", "name": "Shehan Panditharatne"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8475148310a5ce9f6bd8921dac291ab141b37991", "committedDate": "2020-05-11T05:29:24Z", "message": "Add doc search"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d791e9f4ade18456aed231704e24bdd2d01dd63d", "author": {"user": {"login": "shehan360", "name": "Shehan Panditharatne"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d791e9f4ade18456aed231704e24bdd2d01dd63d", "committedDate": "2020-05-05T19:31:12Z", "message": "Add doc search"}, "afterCommit": {"oid": "8475148310a5ce9f6bd8921dac291ab141b37991", "author": {"user": {"login": "shehan360", "name": "Shehan Panditharatne"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8475148310a5ce9f6bd8921dac291ab141b37991", "committedDate": "2020-05-11T05:29:24Z", "message": "Add doc search"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMzk4MzMw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23104#pullrequestreview-413398330", "createdAt": "2020-05-18T08:57:01Z", "commit": {"oid": "8475148310a5ce9f6bd8921dac291ab141b37991"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwODo1NzowMVrOGWtwGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwODo1NzowMVrOGWtwGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ3MTQ1MA==", "bodyText": "We should add a new line here", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23104#discussion_r426471450", "createdAt": "2020-05-18T08:57:01Z", "author": {"login": "azinneera"}, "path": "composer/packages/doc-search/package.json", "diffHunk": "@@ -0,0 +1,25 @@\n+{\n+  \"name\": \"@ballerina/doc-search\",\n+  \"version\": \"1.3.0-SNAPSHOT\",\n+  \"description\": \"Search implementation in API Docs\",\n+  \"main\": \"lib/search.js\",\n+  \"scripts\": {\n+    \"test\": \"echo 'No tests specified'\",\n+    \"start\": \"webpack-dev-server --open --mode development\",\n+    \"build\": \"webpack --mode production\"\n+  },\n+  \"license\": \"Apache-2.0\",\n+  \"dependencies\": {\n+    \"@types/react\": \"^16.9.17\",\n+    \"@types/react-dom\": \"^16.9.4\",\n+    \"react\": \"^15.4.2\",\n+    \"react-dom\": \"^15.4.2\"\n+  },\n+  \"devDependencies\": {\n+    \"source-map-loader\": \"^0.2.4\",\n+    \"ts-loader\": \"^6.2.1\",\n+    \"typescript\": \"^3.7.4\",\n+    \"webpack\": \"^4.41.5\",\n+    \"webpack-cli\": \"^3.3.10\"\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8475148310a5ce9f6bd8921dac291ab141b37991"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMzk5NjE5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23104#pullrequestreview-413399619", "createdAt": "2020-05-18T08:58:39Z", "commit": {"oid": "8475148310a5ce9f6bd8921dac291ab141b37991"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwODo1ODozOVrOGWt0Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwODo1ODozOVrOGWt0Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ3MjQ4Mw==", "bodyText": "Wrong year", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23104#discussion_r426472483", "createdAt": "2020-05-18T08:58:39Z", "author": {"login": "azinneera"}, "path": "misc/docerina/src/main/java/org/ballerinalang/docgen/model/search/ConstructSearchJson.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8475148310a5ce9f6bd8921dac291ab141b37991"}, "originalPosition": 2}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0bfcd1790e073b0b69d19ae5909e2434398d456", "author": {"user": {"login": "shehan360", "name": "Shehan Panditharatne"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a0bfcd1790e073b0b69d19ae5909e2434398d456", "committedDate": "2020-05-18T13:56:08Z", "message": "Add doc search"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ef5da95e4a050cc3308421f1d1c5351753e2bae7", "author": {"user": {"login": "shehan360", "name": "Shehan Panditharatne"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ef5da95e4a050cc3308421f1d1c5351753e2bae7", "committedDate": "2020-05-18T09:11:29Z", "message": "Add doc search"}, "afterCommit": {"oid": "a0bfcd1790e073b0b69d19ae5909e2434398d456", "author": {"user": {"login": "shehan360", "name": "Shehan Panditharatne"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a0bfcd1790e073b0b69d19ae5909e2434398d456", "committedDate": "2020-05-18T13:56:08Z", "message": "Add doc search"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MTkxODQ3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23104#pullrequestreview-415191847", "createdAt": "2020-05-20T10:17:54Z", "commit": {"oid": "a0bfcd1790e073b0b69d19ae5909e2434398d456"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMDoxNzo1NVrOGYE5WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMDoxNzo1NVrOGYE5WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg5OTIyNQ==", "bodyText": "Shall we remove these commented code lines?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23104#discussion_r427899225", "createdAt": "2020-05-20T10:17:55Z", "author": {"login": "pramodya1994"}, "path": "composer/packages/doc-search/src/components/list.tsx", "diffHunk": "@@ -0,0 +1,332 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+import * as React from \"react\";\n+\n+declare var rootPath: any;\n+\n+interface ListProps extends React.Props<any> {\n+    searchJson: any;\n+    searchTxt: string;\n+}\n+\n+interface ListState {\n+    filteredModules: any[];\n+    filteredFunctions: any[];\n+    filteredObjects: any[];\n+    filteredRecords: any[];\n+    filteredConstants: any[];\n+    filteredErrors: any[];\n+    filteredTypes: any[];\n+    searchText: string;\n+}\n+\n+export class List extends React.Component<ListProps, ListState> {\n+    constructor(props: ListProps) {\n+        super(props);\n+        this.state = {\n+            filteredModules: [],\n+            filteredFunctions: [],\n+            filteredObjects: [],\n+            filteredRecords: [],\n+            filteredConstants: [],\n+            filteredErrors: [],\n+            filteredTypes: [],\n+            searchText: this.props.searchTxt\n+        };\n+        this.handleChange = this.handleChange.bind(this);\n+    }\n+\n+    componentDidMount() {\n+        document.addEventListener('keypress', e => {\n+            if (e.key === \"s\") {\n+                const searchBox = document.getElementById(\"searchBox\");\n+                var isFocused = (document.activeElement === searchBox);\n+                if (!isFocused && searchBox != null) {\n+                    searchBox.focus();\n+                    e.preventDefault();\n+                }\n+\n+            }\n+        });\n+\n+        this.setState({\n+            filteredModules: this.props.searchJson.modules,\n+            filteredFunctions: this.props.searchJson.functions,\n+            filteredObjects: this.props.searchJson.objects,\n+            filteredRecords: this.props.searchJson.records,\n+            filteredConstants: this.props.searchJson.constants,\n+            filteredErrors: this.props.searchJson.errors,\n+            filteredTypes: this.props.searchJson.types,\n+        });\n+        this.handleChange();\n+    }\n+\n+    componentWillReceiveProps(nextProps: ListProps) {\n+        this.setState({\n+            filteredModules: nextProps.searchJson.modules,\n+            filteredFunctions: nextProps.searchJson.functions,\n+            filteredObjects: nextProps.searchJson.objects,\n+            filteredRecords: nextProps.searchJson.records,\n+            filteredConstants: nextProps.searchJson.constants,\n+            filteredErrors: nextProps.searchJson.errors,\n+            filteredTypes: nextProps.searchJson.types\n+        });\n+        this.handleChange();\n+    }\n+\n+    handleChange() {\n+        const mainDiv = document.getElementById(\"main\");\n+        if (mainDiv != null) {\n+            mainDiv.classList.add('hidden');\n+        }\n+        const searchTxt = (document.getElementById(\"searchBox\") as HTMLInputElement).value;\n+        this.setState({\n+            searchText: searchTxt\n+        });\n+        // Variable to hold the original version of the list\n+        let currentModuleList = [];\n+        let currentFunctionsList = [];\n+        let currentObjectsList = [];\n+        let currentRecordsList = [];\n+        let currentConstantsList = [];\n+        let currentErrorsList = [];\n+        let currentTypesList = [];\n+        // Variable to hold the filtered list before putting into state\n+        let newModuleList = [];\n+        let newFunctionsList = [];\n+        let newObjectsList = [];\n+        let newRecordsList = [];\n+        let newConstantsList = [];\n+        let newErrorsList = [];\n+        let newTypesList = [];\n+\n+        // If the search bar isn't empty\n+        if (searchTxt !== \"\") {\n+            // Assign the original list to currentList\n+            currentModuleList = this.props.searchJson.modules;\n+            currentFunctionsList = this.props.searchJson.functions;\n+            currentObjectsList = this.props.searchJson.objects;\n+            currentRecordsList = this.props.searchJson.records;\n+            currentConstantsList = this.props.searchJson.constants;\n+            currentErrorsList = this.props.searchJson.errors;\n+            currentTypesList = this.props.searchJson.types;\n+            // Use .filter() to determine which items should be displayed\n+            // based on the search terms\n+            newModuleList = currentModuleList.filter((item: any) => {\n+                // change current item to lowercase\n+                const lc = item.id.toLowerCase();\n+                // change search term to lowercase\n+                const filter = searchTxt.toLowerCase();\n+                // check to see if the current list item includes the search term\n+                // If it does, it will be added to newList. Using lowercase eliminates\n+                // issues with capitalization in search terms and search content\n+                return lc.includes(filter);\n+            });\n+\n+            newFunctionsList = currentFunctionsList.filter((item: any) => {\n+                const lc = item.id.toLowerCase();\n+                const filter = searchTxt.toLowerCase();\n+                return lc.includes(filter);\n+            });\n+\n+            newObjectsList = currentObjectsList.filter((item: any) => {\n+                const lc = item.id.toLowerCase();\n+                const filter = searchTxt.toLowerCase();\n+                return lc.includes(filter);\n+            });\n+\n+            newRecordsList = currentRecordsList.filter((item: any) => {\n+                const lc = item.id.toLowerCase();\n+                const filter = searchTxt.toLowerCase();\n+                return lc.includes(filter);\n+            });\n+\n+            newConstantsList = currentConstantsList.filter((item: any) => {\n+                const lc = item.id.toLowerCase();\n+                const filter = searchTxt.toLowerCase();\n+                return lc.includes(filter);\n+            });\n+\n+            newErrorsList = currentErrorsList.filter((item: any) => {\n+                const lc = item.id.toLowerCase();\n+                const filter = searchTxt.toLowerCase();\n+                return lc.includes(filter);\n+            });\n+\n+            newTypesList = currentTypesList.filter((item: any) => {\n+                const lc = item.id.toLowerCase();\n+                const filter = searchTxt.toLowerCase();\n+                return lc.includes(filter);\n+            });\n+\n+        } else {\n+            if (mainDiv != null) {\n+                mainDiv.classList.remove('hidden');\n+            }\n+        }\n+        // Set the filtered state based on what our rules added to newList\n+        this.setState({\n+            filteredModules: newModuleList,\n+            filteredFunctions: newFunctionsList,\n+            filteredObjects: newObjectsList,\n+            filteredRecords: newRecordsList,\n+            filteredConstants: newConstantsList,\n+            filteredErrors: newErrorsList,\n+            filteredTypes: newTypesList\n+        });\n+    }\n+\n+    render() {\n+        return (\n+            <div>\n+                <div className=\"ui fluid icon input search-bar\">\n+                    <input type=\"text\" id=\"searchBox\" onKeyUp={this.handleChange} placeholder=\"Search...\" />\n+                    <i className=\"search icon\"></i>\n+                </div>\n+\n+                {/* <input type=\"text\" id=\"searchBox\" className=\"input\" onKeyUp={this.handleChange} placeholder=\"Search...\" defaultValue={this.state.searchText} /> */}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0bfcd1790e073b0b69d19ae5909e2434398d456"}, "originalPosition": 203}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MTkyODMz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23104#pullrequestreview-415192833", "createdAt": "2020-05-20T10:19:20Z", "commit": {"oid": "a0bfcd1790e073b0b69d19ae5909e2434398d456"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMDoxOToyMFrOGYE8Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMDoxOToyMFrOGYE8Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg5OTk2Nw==", "bodyText": "This line has more than 120 characters. Shall we find all such lines and break those into not more than 120 character lines?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23104#discussion_r427899967", "createdAt": "2020-05-20T10:19:20Z", "author": {"login": "pramodya1994"}, "path": "composer/packages/doc-search/src/components/list.tsx", "diffHunk": "@@ -0,0 +1,332 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+import * as React from \"react\";\n+\n+declare var rootPath: any;\n+\n+interface ListProps extends React.Props<any> {\n+    searchJson: any;\n+    searchTxt: string;\n+}\n+\n+interface ListState {\n+    filteredModules: any[];\n+    filteredFunctions: any[];\n+    filteredObjects: any[];\n+    filteredRecords: any[];\n+    filteredConstants: any[];\n+    filteredErrors: any[];\n+    filteredTypes: any[];\n+    searchText: string;\n+}\n+\n+export class List extends React.Component<ListProps, ListState> {\n+    constructor(props: ListProps) {\n+        super(props);\n+        this.state = {\n+            filteredModules: [],\n+            filteredFunctions: [],\n+            filteredObjects: [],\n+            filteredRecords: [],\n+            filteredConstants: [],\n+            filteredErrors: [],\n+            filteredTypes: [],\n+            searchText: this.props.searchTxt\n+        };\n+        this.handleChange = this.handleChange.bind(this);\n+    }\n+\n+    componentDidMount() {\n+        document.addEventListener('keypress', e => {\n+            if (e.key === \"s\") {\n+                const searchBox = document.getElementById(\"searchBox\");\n+                var isFocused = (document.activeElement === searchBox);\n+                if (!isFocused && searchBox != null) {\n+                    searchBox.focus();\n+                    e.preventDefault();\n+                }\n+\n+            }\n+        });\n+\n+        this.setState({\n+            filteredModules: this.props.searchJson.modules,\n+            filteredFunctions: this.props.searchJson.functions,\n+            filteredObjects: this.props.searchJson.objects,\n+            filteredRecords: this.props.searchJson.records,\n+            filteredConstants: this.props.searchJson.constants,\n+            filteredErrors: this.props.searchJson.errors,\n+            filteredTypes: this.props.searchJson.types,\n+        });\n+        this.handleChange();\n+    }\n+\n+    componentWillReceiveProps(nextProps: ListProps) {\n+        this.setState({\n+            filteredModules: nextProps.searchJson.modules,\n+            filteredFunctions: nextProps.searchJson.functions,\n+            filteredObjects: nextProps.searchJson.objects,\n+            filteredRecords: nextProps.searchJson.records,\n+            filteredConstants: nextProps.searchJson.constants,\n+            filteredErrors: nextProps.searchJson.errors,\n+            filteredTypes: nextProps.searchJson.types\n+        });\n+        this.handleChange();\n+    }\n+\n+    handleChange() {\n+        const mainDiv = document.getElementById(\"main\");\n+        if (mainDiv != null) {\n+            mainDiv.classList.add('hidden');\n+        }\n+        const searchTxt = (document.getElementById(\"searchBox\") as HTMLInputElement).value;\n+        this.setState({\n+            searchText: searchTxt\n+        });\n+        // Variable to hold the original version of the list\n+        let currentModuleList = [];\n+        let currentFunctionsList = [];\n+        let currentObjectsList = [];\n+        let currentRecordsList = [];\n+        let currentConstantsList = [];\n+        let currentErrorsList = [];\n+        let currentTypesList = [];\n+        // Variable to hold the filtered list before putting into state\n+        let newModuleList = [];\n+        let newFunctionsList = [];\n+        let newObjectsList = [];\n+        let newRecordsList = [];\n+        let newConstantsList = [];\n+        let newErrorsList = [];\n+        let newTypesList = [];\n+\n+        // If the search bar isn't empty\n+        if (searchTxt !== \"\") {\n+            // Assign the original list to currentList\n+            currentModuleList = this.props.searchJson.modules;\n+            currentFunctionsList = this.props.searchJson.functions;\n+            currentObjectsList = this.props.searchJson.objects;\n+            currentRecordsList = this.props.searchJson.records;\n+            currentConstantsList = this.props.searchJson.constants;\n+            currentErrorsList = this.props.searchJson.errors;\n+            currentTypesList = this.props.searchJson.types;\n+            // Use .filter() to determine which items should be displayed\n+            // based on the search terms\n+            newModuleList = currentModuleList.filter((item: any) => {\n+                // change current item to lowercase\n+                const lc = item.id.toLowerCase();\n+                // change search term to lowercase\n+                const filter = searchTxt.toLowerCase();\n+                // check to see if the current list item includes the search term\n+                // If it does, it will be added to newList. Using lowercase eliminates\n+                // issues with capitalization in search terms and search content\n+                return lc.includes(filter);\n+            });\n+\n+            newFunctionsList = currentFunctionsList.filter((item: any) => {\n+                const lc = item.id.toLowerCase();\n+                const filter = searchTxt.toLowerCase();\n+                return lc.includes(filter);\n+            });\n+\n+            newObjectsList = currentObjectsList.filter((item: any) => {\n+                const lc = item.id.toLowerCase();\n+                const filter = searchTxt.toLowerCase();\n+                return lc.includes(filter);\n+            });\n+\n+            newRecordsList = currentRecordsList.filter((item: any) => {\n+                const lc = item.id.toLowerCase();\n+                const filter = searchTxt.toLowerCase();\n+                return lc.includes(filter);\n+            });\n+\n+            newConstantsList = currentConstantsList.filter((item: any) => {\n+                const lc = item.id.toLowerCase();\n+                const filter = searchTxt.toLowerCase();\n+                return lc.includes(filter);\n+            });\n+\n+            newErrorsList = currentErrorsList.filter((item: any) => {\n+                const lc = item.id.toLowerCase();\n+                const filter = searchTxt.toLowerCase();\n+                return lc.includes(filter);\n+            });\n+\n+            newTypesList = currentTypesList.filter((item: any) => {\n+                const lc = item.id.toLowerCase();\n+                const filter = searchTxt.toLowerCase();\n+                return lc.includes(filter);\n+            });\n+\n+        } else {\n+            if (mainDiv != null) {\n+                mainDiv.classList.remove('hidden');\n+            }\n+        }\n+        // Set the filtered state based on what our rules added to newList\n+        this.setState({\n+            filteredModules: newModuleList,\n+            filteredFunctions: newFunctionsList,\n+            filteredObjects: newObjectsList,\n+            filteredRecords: newRecordsList,\n+            filteredConstants: newConstantsList,\n+            filteredErrors: newErrorsList,\n+            filteredTypes: newTypesList\n+        });\n+    }\n+\n+    render() {\n+        return (\n+            <div>\n+                <div className=\"ui fluid icon input search-bar\">\n+                    <input type=\"text\" id=\"searchBox\" onKeyUp={this.handleChange} placeholder=\"Search...\" />\n+                    <i className=\"search icon\"></i>\n+                </div>\n+\n+                {/* <input type=\"text\" id=\"searchBox\" className=\"input\" onKeyUp={this.handleChange} placeholder=\"Search...\" defaultValue={this.state.searchText} /> */}\n+                {/* <button className=\"button is-info\" onClick={this.handleChange}>Search</button> */}\n+\n+                {this.state.searchText &&\n+                    <div className=\"search-list\">\n+                        <h1>Search results for '{this.state.searchText}'</h1>\n+                        {this.state.filteredModules.length > 0 &&\n+                            <div>\n+                                <h3>Modules: {this.state.filteredModules.length}</h3>\n+                                <table>\n+                                    <tbody>\n+                                        {this.state.filteredModules.map(item => (\n+                                            <tr>\n+                                                <td className=\"search-title\" id={item.id} title={item.id}>\n+                                                    <a href={rootPath + item.id + \"/index.html\"} className=\"objects\">{item.id}</a></td>\n+                                                <td className=\"search-desc\"><span dangerouslySetInnerHTML={{ __html: item.searchString }} /></td>\n+                                            </tr>\n+                                        ))}\n+                                    </tbody>\n+                                </table>\n+                            </div>\n+                        }\n+\n+                        {this.state.filteredObjects.length > 0 &&\n+                            <div>\n+                                <h3>Objects: {this.state.filteredObjects.length}</h3>\n+                                <table>\n+                                    <tbody>\n+                                        {this.state.filteredObjects.map(item => (\n+                                            <tr>\n+                                                <td className=\"search-title\" id={item.id} title={item.id}>\n+                                                    <a href={rootPath + item.moduleId + \"/objects/\" + item.id + \".html\"} className=\"objects\">{item.moduleId + \": \" + item.id}</a></td>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0bfcd1790e073b0b69d19ae5909e2434398d456"}, "originalPosition": 234}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecb5b6e10734d1c6c2f04a986d030c522d169af7", "author": {"user": {"login": "shehan360", "name": "Shehan Panditharatne"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ecb5b6e10734d1c6c2f04a986d030c522d169af7", "committedDate": "2020-05-20T14:12:18Z", "message": "Add doc search"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4OTA2OTAw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23104#pullrequestreview-418906900", "createdAt": "2020-05-27T07:00:37Z", "commit": {"oid": "ecb5b6e10734d1c6c2f04a986d030c522d169af7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3381, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}