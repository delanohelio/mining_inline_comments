{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1ODgxOTcw", "number": 22323, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDozMjozOVrODtC7rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxMzoyODozNlrODusNXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTYwNTU3OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDozMjozOVrOF-Payg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNjoxNTozMFrOF-yLRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgwODY1MA==", "bodyText": "Doesn't the chained constraints (like in the above case) apply for subtypes?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400808650", "createdAt": "2020-03-31T10:32:39Z", "author": {"login": "pubudu91"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -584,7 +586,20 @@ public static boolean checkIsType(BType sourceType, BType targetType, List<TypeP\n                 if (sourceType.getTag() == TypeTags.FINITE_TYPE_TAG) {\n                     return isFiniteTypeMatch((BFiniteType) sourceType, targetType);\n                 }\n-                return TypeTags.isXMLTypeTag(sourceType.getTag());\n+                if (sourceType.getTag() == TypeTags.XML_TAG) {\n+                    BXMLType target = ((BXMLType) targetType);\n+                    BType targetConstraint = target.constraint;\n+                    // TODO: Revisit and check why xml<xml<constraint>>> on chained iteration\n+                    while (target.constraint.getTag() == TypeTags.XML_TAG) {\n+                        target = (BXMLType) target.constraint;\n+                        targetConstraint = target.constraint;\n+                    }\n+                    return checkIsType(((BXMLType) sourceType).constraint, targetConstraint,\n+                            unresolvedTypes);\n+                } else if (TypeTags.isXMLTypeTag(sourceType.getTag())) {\n+                    return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9961216f2ddccb0bdfc535c382ee3ce9b03e9b95"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM3ODExOA==", "bodyText": "The constraints only apply for XML types.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r401378118", "createdAt": "2020-04-01T06:15:30Z", "author": {"login": "irshadnilam"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -584,7 +586,20 @@ public static boolean checkIsType(BType sourceType, BType targetType, List<TypeP\n                 if (sourceType.getTag() == TypeTags.FINITE_TYPE_TAG) {\n                     return isFiniteTypeMatch((BFiniteType) sourceType, targetType);\n                 }\n-                return TypeTags.isXMLTypeTag(sourceType.getTag());\n+                if (sourceType.getTag() == TypeTags.XML_TAG) {\n+                    BXMLType target = ((BXMLType) targetType);\n+                    BType targetConstraint = target.constraint;\n+                    // TODO: Revisit and check why xml<xml<constraint>>> on chained iteration\n+                    while (target.constraint.getTag() == TypeTags.XML_TAG) {\n+                        target = (BXMLType) target.constraint;\n+                        targetConstraint = target.constraint;\n+                    }\n+                    return checkIsType(((BXMLType) sourceType).constraint, targetConstraint,\n+                            unresolvedTypes);\n+                } else if (TypeTags.isXMLTypeTag(sourceType.getTag())) {\n+                    return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgwODY1MA=="}, "originalCommit": {"oid": "9961216f2ddccb0bdfc535c382ee3ce9b03e9b95"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTc3NTYzOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BXMLType.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMToyMjo1OFrOF-RC_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMToyOToxM1rOF-RQGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzNTMyNw==", "bodyText": "What's the use of this instanceof check? The xml type is not a mapping type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400835327", "createdAt": "2020-03-31T11:22:58Z", "author": {"login": "pubudu91"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BXMLType.java", "diffHunk": "@@ -64,4 +73,26 @@ public int getTag() {\n     public boolean isAnydata() {\n         return true;\n     }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (!super.equals(obj) || !(obj instanceof BMapType)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9961216f2ddccb0bdfc535c382ee3ce9b03e9b95"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzNTk1OQ==", "bodyText": "Also, why check for the negation of equals()?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400835959", "createdAt": "2020-03-31T11:24:09Z", "author": {"login": "pubudu91"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BXMLType.java", "diffHunk": "@@ -64,4 +73,26 @@ public int getTag() {\n     public boolean isAnydata() {\n         return true;\n     }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (!super.equals(obj) || !(obj instanceof BMapType)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzNTMyNw=="}, "originalCommit": {"oid": "9961216f2ddccb0bdfc535c382ee3ce9b03e9b95"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzODY4Mg==", "bodyText": "What's the use of this instanceof check? The xml type is not a mapping type.\n\nThis is a typo. Fixed that.\nI have followed the implementation BMapType instance coz it already has support for constraint. (Hence the typo)\n\nAlso, why check for the negation of equals()?\n\nThe check returns false", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400838682", "createdAt": "2020-03-31T11:29:13Z", "author": {"login": "irshadnilam"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BXMLType.java", "diffHunk": "@@ -64,4 +73,26 @@ public int getTag() {\n     public boolean isAnydata() {\n         return true;\n     }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (!super.equals(obj) || !(obj instanceof BMapType)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzNTMyNw=="}, "originalCommit": {"oid": "9961216f2ddccb0bdfc535c382ee3ce9b03e9b95"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTc4NDE3OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BXMLType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMToyNToyNlrOF-RICg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTozMjowNFrOF-RVuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzNjYxOA==", "bodyText": "Is it guaranteed that the types used as constraints have only 1 copy of that type?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400836618", "createdAt": "2020-03-31T11:25:26Z", "author": {"login": "pubudu91"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BXMLType.java", "diffHunk": "@@ -64,4 +73,26 @@ public int getTag() {\n     public boolean isAnydata() {\n         return true;\n     }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (!super.equals(obj) || !(obj instanceof BMapType)) {\n+            return false;\n+        }\n+\n+        BXMLType other = (BXMLType) obj;\n+        if (constraint == other.constraint) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9961216f2ddccb0bdfc535c382ee3ce9b03e9b95"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg0MDEyMA==", "bodyText": "It is not. This equals is mostly for the completion purpose. (Similar BMAPType where it is also NOT guaranteed that the types used as constraints have only 1 copy)\nThese constraints are checked in jvm TypeChecker.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400840120", "createdAt": "2020-03-31T11:32:04Z", "author": {"login": "irshadnilam"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BXMLType.java", "diffHunk": "@@ -64,4 +73,26 @@ public int getTag() {\n     public boolean isAnydata() {\n         return true;\n     }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (!super.equals(obj) || !(obj instanceof BMapType)) {\n+            return false;\n+        }\n+\n+        BXMLType other = (BXMLType) obj;\n+        if (constraint == other.constraint) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzNjYxOA=="}, "originalCommit": {"oid": "9961216f2ddccb0bdfc535c382ee3ce9b03e9b95"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTk0NjQ3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjoxMjoxMVrOF-SsEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNTo1MDo1OFrOF_cJ0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2MjIyNQ==", "bodyText": "What about if the constraint type happens to be a finite type, which contains a set of XML values?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400862225", "createdAt": "2020-03-31T12:12:11Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1000,6 +1001,33 @@ public void visit(BLangConstrainedType constrainedTypeNode) {\n         resultType = constrainedType;\n     }\n \n+    private BType getXMLConstrainedType(BType constraintType, DiagnosticPos pos) {\n+        BType constrainedType;\n+        if (constraintType.tag != TypeTags.UNION) {\n+            if (!TypeTags.isXMLTypeTag(constraintType.tag)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4a6828cc7300c08785f4c6ca7d29ef3380cbee"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM3ODUzOQ==", "bodyText": "Can we pass xml values in a  finite type?  @rdhananjaya", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r401378539", "createdAt": "2020-04-01T06:16:47Z", "author": {"login": "irshadnilam"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1000,6 +1001,33 @@ public void visit(BLangConstrainedType constrainedTypeNode) {\n         resultType = constrainedType;\n     }\n \n+    private BType getXMLConstrainedType(BType constraintType, DiagnosticPos pos) {\n+        BType constrainedType;\n+        if (constraintType.tag != TypeTags.UNION) {\n+            if (!TypeTags.isXMLTypeTag(constraintType.tag)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2MjIyNQ=="}, "originalCommit": {"oid": "7e4a6828cc7300c08785f4c6ca7d29ef3380cbee"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5MzY1NA==", "bodyText": "@pubudu91 could you provide an example for this?\nconstraints here should be only union (1 member or up) of xml subtypes.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r401393654", "createdAt": "2020-04-01T06:56:20Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1000,6 +1001,33 @@ public void visit(BLangConstrainedType constrainedTypeNode) {\n         resultType = constrainedType;\n     }\n \n+    private BType getXMLConstrainedType(BType constraintType, DiagnosticPos pos) {\n+        BType constrainedType;\n+        if (constraintType.tag != TypeTags.UNION) {\n+            if (!TypeTags.isXMLTypeTag(constraintType.tag)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2MjIyNQ=="}, "originalCommit": {"oid": "7e4a6828cc7300c08785f4c6ca7d29ef3380cbee"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM5NDk3Nw==", "bodyText": "I think what @pubudu91  meant is something like this.\ntype Foo \"bar\"|\"car\";\nbut for xml-values", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r401394977", "createdAt": "2020-04-01T06:59:23Z", "author": {"login": "irshadnilam"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1000,6 +1001,33 @@ public void visit(BLangConstrainedType constrainedTypeNode) {\n         resultType = constrainedType;\n     }\n \n+    private BType getXMLConstrainedType(BType constraintType, DiagnosticPos pos) {\n+        BType constrainedType;\n+        if (constraintType.tag != TypeTags.UNION) {\n+            if (!TypeTags.isXMLTypeTag(constraintType.tag)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2MjIyNQ=="}, "originalCommit": {"oid": "7e4a6828cc7300c08785f4c6ca7d29ef3380cbee"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2NTg3NQ==", "bodyText": "I don't see how it's possible in the current language, that's why I asked for an example.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402065875", "createdAt": "2020-04-02T05:50:58Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1000,6 +1001,33 @@ public void visit(BLangConstrainedType constrainedTypeNode) {\n         resultType = constrainedType;\n     }\n \n+    private BType getXMLConstrainedType(BType constraintType, DiagnosticPos pos) {\n+        BType constrainedType;\n+        if (constraintType.tag != TypeTags.UNION) {\n+            if (!TypeTags.isXMLTypeTag(constraintType.tag)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2MjIyNQ=="}, "originalCommit": {"oid": "7e4a6828cc7300c08785f4c6ca7d29ef3380cbee"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NjA1MjMzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjozNzo0MFrOF-TraQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMTo0MzozMFrOF_nVfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg3ODQ0MQ==", "bodyText": "Why is the XML type special cased? Also, shall we add these second conditions as nested if conditions? i.e., check if it's an ADD op once", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400878441", "createdAt": "2020-03-31T12:37:40Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2366,8 +2372,22 @@ public void visit(BLangBinaryExpr binaryExpr) {\n         // Set error type as the actual type.\n         BType actualType = symTable.semanticError;\n \n-        // Look up operator symbol if both rhs and lhs types are error types\n-        if (lhsType != symTable.semanticError && rhsType != symTable.semanticError) {\n+        // Do not lookup operator symbol for xml sequence additions\n+        if (binaryExpr.opKind == OperatorKind.ADD &&\n+                (lhsType.tag == TypeTags.XML && TypeTags.isXMLNonSequenceType(rhsType.tag))) {\n+            actualType = new BXMLType(TypeTags.XML, BUnionType.create(null, ((BXMLType) lhsType).constraint, rhsType),\n+                    false,\n+                    null);\n+        } else if (binaryExpr.opKind == OperatorKind.ADD &&\n+                (rhsType.tag == TypeTags.XML && TypeTags.isXMLNonSequenceType(lhsType.tag))) {\n+            actualType = new BXMLType(TypeTags.XML, BUnionType.create(null, ((BXMLType) rhsType).constraint, lhsType),\n+                    false, null);\n+        } else if (binaryExpr.opKind == OperatorKind.ADD &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4a6828cc7300c08785f4c6ca7d29ef3380cbee"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg5NjI2OQ==", "bodyText": "This was done to overcome an issue which was discussed in https://ballerina-platform.slack.com/archives/CAXS256RX/p1585205684025700", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400896269", "createdAt": "2020-03-31T13:04:57Z", "author": {"login": "irshadnilam"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2366,8 +2372,22 @@ public void visit(BLangBinaryExpr binaryExpr) {\n         // Set error type as the actual type.\n         BType actualType = symTable.semanticError;\n \n-        // Look up operator symbol if both rhs and lhs types are error types\n-        if (lhsType != symTable.semanticError && rhsType != symTable.semanticError) {\n+        // Do not lookup operator symbol for xml sequence additions\n+        if (binaryExpr.opKind == OperatorKind.ADD &&\n+                (lhsType.tag == TypeTags.XML && TypeTags.isXMLNonSequenceType(rhsType.tag))) {\n+            actualType = new BXMLType(TypeTags.XML, BUnionType.create(null, ((BXMLType) lhsType).constraint, rhsType),\n+                    false,\n+                    null);\n+        } else if (binaryExpr.opKind == OperatorKind.ADD &&\n+                (rhsType.tag == TypeTags.XML && TypeTags.isXMLNonSequenceType(lhsType.tag))) {\n+            actualType = new BXMLType(TypeTags.XML, BUnionType.create(null, ((BXMLType) rhsType).constraint, lhsType),\n+                    false, null);\n+        } else if (binaryExpr.opKind == OperatorKind.ADD &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg3ODQ0MQ=="}, "originalCommit": {"oid": "7e4a6828cc7300c08785f4c6ca7d29ef3380cbee"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyNjEyMQ==", "bodyText": "About nesting the ADD operation.\nWe still want to visit the else if section\nelse if (lhsType != symTable.semanticError && rhsType != symTable.semanticError)\nfollowing even for add operations witch are non-xml.\nIf we nest like u suggested, we will have to keep a separate boolean (xml special case is visited - setting its value under each condition) and then check the negation of that boolean on following section.\nI think it would make the code bit unclear. WDYT?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r401126121", "createdAt": "2020-03-31T18:30:25Z", "author": {"login": "irshadnilam"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2366,8 +2372,22 @@ public void visit(BLangBinaryExpr binaryExpr) {\n         // Set error type as the actual type.\n         BType actualType = symTable.semanticError;\n \n-        // Look up operator symbol if both rhs and lhs types are error types\n-        if (lhsType != symTable.semanticError && rhsType != symTable.semanticError) {\n+        // Do not lookup operator symbol for xml sequence additions\n+        if (binaryExpr.opKind == OperatorKind.ADD &&\n+                (lhsType.tag == TypeTags.XML && TypeTags.isXMLNonSequenceType(rhsType.tag))) {\n+            actualType = new BXMLType(TypeTags.XML, BUnionType.create(null, ((BXMLType) lhsType).constraint, rhsType),\n+                    false,\n+                    null);\n+        } else if (binaryExpr.opKind == OperatorKind.ADD &&\n+                (rhsType.tag == TypeTags.XML && TypeTags.isXMLNonSequenceType(lhsType.tag))) {\n+            actualType = new BXMLType(TypeTags.XML, BUnionType.create(null, ((BXMLType) rhsType).constraint, lhsType),\n+                    false, null);\n+        } else if (binaryExpr.opKind == OperatorKind.ADD &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg3ODQ0MQ=="}, "originalCommit": {"oid": "7e4a6828cc7300c08785f4c6ca7d29ef3380cbee"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4OTQ5OA==", "bodyText": "Don't we have to handle something like lhs=comment, rhs=procInstruction.\nAlso, shall we not change the order of lhsType and rhsType in if condition.\nWe can use a switch statement with fall through like:\n        //noinspection SwitchStatementWithTooFewBranches\n        switch (binaryExpr.opKind) {\n            // Do not lookup operator symbol for xml sequence additions\n            case ADD:\n                BType l = getXMLConstituents(lhsType);\n                BType r = getXMLConstituents(rhsType);\n\n                if (l != null && r != null) {\n                    actualType = new BXMLType(TypeTags.XML, BUnionType.create(null, l, r), false, null);\n                    break;\n                }\n                // Fall through\n            default:\n                if (lhsType != symTable.semanticError && rhsType != symTable.semanticError) {\n                    // Look up operator symbol if both rhs and lhs types aren't error or xml types\n                    BSymbol opSymbol = symResolver.resolveBinaryOperator(binaryExpr.opKind, lhsType, rhsType);\n\n                    if (opSymbol == symTable.notFoundSymbol) {\n                        opSymbol = symResolver.getBinaryEqualityForTypeSets(binaryExpr.opKind, lhsType, rhsType, binaryExpr);\n                    }\n\n                    if (opSymbol == symTable.notFoundSymbol) {\n                        dlog.error(binaryExpr.pos, DiagnosticCode.BINARY_OP_INCOMPATIBLE_TYPES, binaryExpr.opKind,\n                                lhsType, rhsType);\n                    } else {\n                        if ((binaryExpr.opKind == OperatorKind.EQUAL || binaryExpr.opKind == OperatorKind.NOT_EQUAL) &&\n                                (couldHoldTableValues(lhsType, new ArrayList<>()) &&\n                                        couldHoldTableValues(rhsType, new ArrayList<>()))) {\n                            dlog.error(binaryExpr.pos, DiagnosticCode.EQUALITY_NOT_YET_SUPPORTED, TABLE_TNAME);\n                        }\n\n                        binaryExpr.opSymbol = (BOperatorSymbol) opSymbol;\n                        actualType = opSymbol.type.getReturnType();\n                    }\n                }\n        }\n    private BType getXMLConstituents(BType type) {\n        BType c = null;\n        if (type.tag == TypeTags.XML) {\n            c = ((BXMLType) type).constraint;\n        } else if (TypeTags.isXMLNonSequenceType(type.tag)) {\n            c = type;\n        }\n        return c;\n    }\nBut there is a catch to this kind of solutions, this may confuse someone who is not familiar with fallthrough.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402089498", "createdAt": "2020-04-02T06:55:15Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2366,8 +2372,22 @@ public void visit(BLangBinaryExpr binaryExpr) {\n         // Set error type as the actual type.\n         BType actualType = symTable.semanticError;\n \n-        // Look up operator symbol if both rhs and lhs types are error types\n-        if (lhsType != symTable.semanticError && rhsType != symTable.semanticError) {\n+        // Do not lookup operator symbol for xml sequence additions\n+        if (binaryExpr.opKind == OperatorKind.ADD &&\n+                (lhsType.tag == TypeTags.XML && TypeTags.isXMLNonSequenceType(rhsType.tag))) {\n+            actualType = new BXMLType(TypeTags.XML, BUnionType.create(null, ((BXMLType) lhsType).constraint, rhsType),\n+                    false,\n+                    null);\n+        } else if (binaryExpr.opKind == OperatorKind.ADD &&\n+                (rhsType.tag == TypeTags.XML && TypeTags.isXMLNonSequenceType(lhsType.tag))) {\n+            actualType = new BXMLType(TypeTags.XML, BUnionType.create(null, ((BXMLType) rhsType).constraint, lhsType),\n+                    false, null);\n+        } else if (binaryExpr.opKind == OperatorKind.ADD &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg3ODQ0MQ=="}, "originalCommit": {"oid": "7e4a6828cc7300c08785f4c6ca7d29ef3380cbee"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI0OTA4Ng==", "bodyText": "+1 added your suggestion.\nI have also removed redundant xml operations from SymbolTable (for element + comment like scenarios) since this covers everything.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402249086", "createdAt": "2020-04-02T11:43:30Z", "author": {"login": "irshadnilam"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2366,8 +2372,22 @@ public void visit(BLangBinaryExpr binaryExpr) {\n         // Set error type as the actual type.\n         BType actualType = symTable.semanticError;\n \n-        // Look up operator symbol if both rhs and lhs types are error types\n-        if (lhsType != symTable.semanticError && rhsType != symTable.semanticError) {\n+        // Do not lookup operator symbol for xml sequence additions\n+        if (binaryExpr.opKind == OperatorKind.ADD &&\n+                (lhsType.tag == TypeTags.XML && TypeTags.isXMLNonSequenceType(rhsType.tag))) {\n+            actualType = new BXMLType(TypeTags.XML, BUnionType.create(null, ((BXMLType) lhsType).constraint, rhsType),\n+                    false,\n+                    null);\n+        } else if (binaryExpr.opKind == OperatorKind.ADD &&\n+                (rhsType.tag == TypeTags.XML && TypeTags.isXMLNonSequenceType(lhsType.tag))) {\n+            actualType = new BXMLType(TypeTags.XML, BUnionType.create(null, ((BXMLType) rhsType).constraint, lhsType),\n+                    false, null);\n+        } else if (binaryExpr.opKind == OperatorKind.ADD &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg3ODQ0MQ=="}, "originalCommit": {"oid": "7e4a6828cc7300c08785f4c6ca7d29ef3380cbee"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NjA4MjUyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjo0NToyNFrOF-T95g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODozNToxMlrOF-i-iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4MzE3NA==", "bodyText": "Since this method is called only after verifying that the source and target tags are XML, can't we change the method signature to accept XML types? This would get rid of redundant type tag checks such as this one", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400883174", "createdAt": "2020-03-31T12:45:24Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -644,6 +655,25 @@ private boolean isErrorTypeAssignable(BErrorType source, BErrorType target, Set<\n                 isAssignable(source.detailType, target.detailType, unresolvedTypes);\n     }\n \n+    //TODO: recheck this.\n+    private boolean isXMLTypeAssignable(BType sourceType, BType targetType, Set<TypePair> unresolvedTypes) {\n+        int sourceTag = sourceType.tag;\n+        int targetTag = targetType.tag;\n+\n+        if (targetTag == TypeTags.XML) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4a6828cc7300c08785f4c6ca7d29ef3380cbee"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyOTA5Nw==", "bodyText": "The sourceType and targetType can be either BXMLType or BXMLSubtype. The way we have implemented. BXMLSubtype does not extend BXMLType. Hence, there isn't a common class we can use as parameter.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r401129097", "createdAt": "2020-03-31T18:35:12Z", "author": {"login": "irshadnilam"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -644,6 +655,25 @@ private boolean isErrorTypeAssignable(BErrorType source, BErrorType target, Set<\n                 isAssignable(source.detailType, target.detailType, unresolvedTypes);\n     }\n \n+    //TODO: recheck this.\n+    private boolean isXMLTypeAssignable(BType sourceType, BType targetType, Set<TypePair> unresolvedTypes) {\n+        int sourceTag = sourceType.tag;\n+        int targetTag = targetType.tag;\n+\n+        if (targetTag == TypeTags.XML) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4MzE3NA=="}, "originalCommit": {"oid": "7e4a6828cc7300c08785f4c6ca7d29ef3380cbee"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NjEwNzk2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjo1MTozMVrOF-UNtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODozMjoxMFrOF-i3Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4NzIyMg==", "bodyText": "Do we need this new list? Can simply use 2 nested loops to achieve this right? The basic idea would be to use\ndefineBinaryOperator(OperatorKind.ADD, subType, subType, subType);\nfor when i == j and use\ndefineBinaryOperator(OperatorKind.ADD, subType, otherType, xmlType);\ndefineBinaryOperator(OperatorKind.ADD, otherType, subType, xmlType);\nwhen i != j", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400887222", "createdAt": "2020-03-31T12:51:31Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "diffHunk": "@@ -517,6 +519,35 @@ public void defineOperators() {\n \n     }\n \n+    private void defineXmlArithmaticOperations() {\n+        defineBinaryOperator(OperatorKind.ADD, xmlType, xmlType, xmlType);\n+        List<BType> xmlSubTypes = Arrays.asList(xmlElementType, xmlCommentType, xmlPIType, xmlTextType);\n+        for (int i = 0; i < xmlSubTypes.size(); i++) {\n+            BType subType = xmlSubTypes.get(i);\n+            defineBinaryOperator(OperatorKind.ADD, subType, subType, subType);\n+\n+            List<BType> others = new ArrayList<>(xmlSubTypes);\n+            others.remove(i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4a6828cc7300c08785f4c6ca7d29ef3380cbee"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyNzE4Mg==", "bodyText": "+1 removed the list.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r401127182", "createdAt": "2020-03-31T18:32:10Z", "author": {"login": "irshadnilam"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "diffHunk": "@@ -517,6 +519,35 @@ public void defineOperators() {\n \n     }\n \n+    private void defineXmlArithmaticOperations() {\n+        defineBinaryOperator(OperatorKind.ADD, xmlType, xmlType, xmlType);\n+        List<BType> xmlSubTypes = Arrays.asList(xmlElementType, xmlCommentType, xmlPIType, xmlTextType);\n+        for (int i = 0; i < xmlSubTypes.size(); i++) {\n+            BType subType = xmlSubTypes.get(i);\n+            defineBinaryOperator(OperatorKind.ADD, subType, subType, subType);\n+\n+            List<BType> others = new ArrayList<>(xmlSubTypes);\n+            others.remove(i);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4NzIyMg=="}, "originalCommit": {"oid": "7e4a6828cc7300c08785f4c6ca7d29ef3380cbee"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NjExMDQxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BXMLType.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjo1MjowNVrOF-UPOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDo0NTo0N1rOF_llAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4NzYxMA==", "bodyText": "What's the purpose of the default constraint?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400887610", "createdAt": "2020-03-31T12:52:05Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BXMLType.java", "diffHunk": "@@ -26,8 +27,26 @@\n  */\n public class BXMLType extends BBuiltInRefType {\n \n+    public BType constraint;\n+    public boolean defaultConstraint;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4a6828cc7300c08785f4c6ca7d29ef3380cbee"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg5NzQ5OA==", "bodyText": "The purpose of this to minimize the verbose xml error message for default xml type without any constraint.\nPlease check toString() method of BXMLType.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400897498", "createdAt": "2020-03-31T13:06:46Z", "author": {"login": "irshadnilam"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BXMLType.java", "diffHunk": "@@ -26,8 +27,26 @@\n  */\n public class BXMLType extends BBuiltInRefType {\n \n+    public BType constraint;\n+    public boolean defaultConstraint;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4NzYxMA=="}, "originalCommit": {"oid": "7e4a6828cc7300c08785f4c6ca7d29ef3380cbee"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ4ODIyNw==", "bodyText": "Can we remove defaultConstraint param from constructor (it's almost false) and check size == 4 in toString method.\nIf I'm not mistaken .toString will only be called when emitting diagnostics, slowness in .toString methods wouldn't affect much.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r401488227", "createdAt": "2020-04-01T09:44:58Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BXMLType.java", "diffHunk": "@@ -26,8 +27,26 @@\n  */\n public class BXMLType extends BBuiltInRefType {\n \n+    public BType constraint;\n+    public boolean defaultConstraint;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4NzYxMA=="}, "originalCommit": {"oid": "7e4a6828cc7300c08785f4c6ca7d29ef3380cbee"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyMDI5MQ==", "bodyText": "+1 changed it to look for size.\nI am checking if constraint instance of BUnionType to avoid spotbugs warning eventhough we don't need it since we check typetags.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402220291", "createdAt": "2020-04-02T10:45:47Z", "author": {"login": "irshadnilam"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BXMLType.java", "diffHunk": "@@ -26,8 +27,26 @@\n  */\n public class BXMLType extends BBuiltInRefType {\n \n+    public BType constraint;\n+    public boolean defaultConstraint;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4NzYxMA=="}, "originalCommit": {"oid": "7e4a6828cc7300c08785f4c6ca7d29ef3380cbee"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NjEzMTY3OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/binaryoperations/equal_and_not_equal_operation.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjo1Njo1NVrOF-UcOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODozMzowNFrOF-i5aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg5MDkzNg==", "bodyText": "Are there more basic test cases? My concern here is whether a complex condition can be used to isolate a malfunctioning operator. But if there are basic ones (e.g., x1 == x2), then this is fine.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r400890936", "createdAt": "2020-03-31T12:56:55Z", "author": {"login": "pubudu91"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/binaryoperations/equal_and_not_equal_operation.bal", "diffHunk": "@@ -970,18 +970,18 @@ public function testXmlWithNamespacesNegative() returns boolean {\n     return x1 == x2 || !(x1 != x2) || x2 == x3 && !(x2 != x3);\n }\n \n-//public function testXmlSequenceAndXmlItemEqualityPositive() returns boolean {\n-//    xml x1 = xml `<name>Book One</name>`;\n-//    xml x2 = x1.select(\"name\");\n-//    return x1 == x2 && !(x1 != x2) && x2 == x1 && !(x2 != x1);\n-//}\n-\n-//public function testXmlSequenceAndXmlItemEqualityNegative() returns boolean {\n-//    xml x1 = xml `<name>Book One</name>`;\n-//    xml x2 = xml `<name>Book Two</name>`;\n-//    xml x3 = x2.select(\"name\");\n-//    return x1 == x3 || !(x1 != x3) || x3 == x1 || !(x3 != x1);\n-//}\n+public function testXmlSequenceAndXmlItemEqualityPositive() returns boolean {\n+    xml x1 = xml `<name>Book One</name>`;\n+    xml x2 = x1.get(0);\n+    return x1 == x2 && !(x1 != x2) && x2 == x1 && !(x2 != x1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4a6828cc7300c08785f4c6ca7d29ef3380cbee"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyNzc4NQ==", "bodyText": "There are several basic to complex test cases on equal_and_not_equal_operation.bal test file.\nPlease check.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r401127785", "createdAt": "2020-03-31T18:33:04Z", "author": {"login": "irshadnilam"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/expressions/binaryoperations/equal_and_not_equal_operation.bal", "diffHunk": "@@ -970,18 +970,18 @@ public function testXmlWithNamespacesNegative() returns boolean {\n     return x1 == x2 || !(x1 != x2) || x2 == x3 && !(x2 != x3);\n }\n \n-//public function testXmlSequenceAndXmlItemEqualityPositive() returns boolean {\n-//    xml x1 = xml `<name>Book One</name>`;\n-//    xml x2 = x1.select(\"name\");\n-//    return x1 == x2 && !(x1 != x2) && x2 == x1 && !(x2 != x1);\n-//}\n-\n-//public function testXmlSequenceAndXmlItemEqualityNegative() returns boolean {\n-//    xml x1 = xml `<name>Book One</name>`;\n-//    xml x2 = xml `<name>Book Two</name>`;\n-//    xml x3 = x2.select(\"name\");\n-//    return x1 == x3 || !(x1 != x3) || x3 == x1 || !(x3 != x1);\n-//}\n+public function testXmlSequenceAndXmlItemEqualityPositive() returns boolean {\n+    xml x1 = xml `<name>Book One</name>`;\n+    xml x2 = x1.get(0);\n+    return x1 == x2 && !(x1 != x2) && x2 == x1 && !(x2 != x1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg5MDkzNg=="}, "originalCommit": {"oid": "7e4a6828cc7300c08785f4c6ca7d29ef3380cbee"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTc3NDk5OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwOTowOTo1NlrOF-3kEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwOTozMToyOVrOF-4Y0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2NjM4NA==", "bodyText": "Shall we rename this to something like checkIsLikeNonElementSingleton", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r401466384", "createdAt": "2020-04-01T09:09:56Z", "author": {"login": "rdhananjaya"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1188,7 +1203,12 @@ private static boolean checkIsLikeOnValue(Object sourceValue, BType sourceType,\n             case TypeTags.XML_PI_TAG:\n             case TypeTags.XML_TEXT_TAG:\n                 if (sourceType.getTag() == TypeTags.XML_TAG) {\n-                    return matchXMLType((XMLValue) sourceValue, targetType);\n+                    return matchXMLTypeNonSequence((XMLValue) sourceValue, targetType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "436b934430df197dd8fef90dd9558dcb1a52a807"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ3OTg5MA==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r401479890", "createdAt": "2020-04-01T09:31:29Z", "author": {"login": "irshadnilam"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1188,7 +1203,12 @@ private static boolean checkIsLikeOnValue(Object sourceValue, BType sourceType,\n             case TypeTags.XML_PI_TAG:\n             case TypeTags.XML_TEXT_TAG:\n                 if (sourceType.getTag() == TypeTags.XML_TAG) {\n-                    return matchXMLType((XMLValue) sourceValue, targetType);\n+                    return matchXMLTypeNonSequence((XMLValue) sourceValue, targetType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2NjM4NA=="}, "originalCommit": {"oid": "436b934430df197dd8fef90dd9558dcb1a52a807"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTc4MTUwOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwOToxMTo0NFrOF-3oMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwOTozMToyMVrOF-4YbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2NzQ0MQ==", "bodyText": "Shall we rename this to something like checkIsLikeXMLSequenceType", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r401467441", "createdAt": "2020-04-01T09:11:44Z", "author": {"login": "rdhananjaya"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1188,7 +1203,12 @@ private static boolean checkIsLikeOnValue(Object sourceValue, BType sourceType,\n             case TypeTags.XML_PI_TAG:\n             case TypeTags.XML_TEXT_TAG:\n                 if (sourceType.getTag() == TypeTags.XML_TAG) {\n-                    return matchXMLType((XMLValue) sourceValue, targetType);\n+                    return matchXMLTypeNonSequence((XMLValue) sourceValue, targetType);\n+                }\n+                return false;\n+            case TypeTags.XML_TAG:\n+                if (sourceType.getTag() == TypeTags.XML_TAG) {\n+                    return matchXMLTypeSequence((XMLValue) sourceValue, targetType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "436b934430df197dd8fef90dd9558dcb1a52a807"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ3OTc4OQ==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r401479789", "createdAt": "2020-04-01T09:31:21Z", "author": {"login": "irshadnilam"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1188,7 +1203,12 @@ private static boolean checkIsLikeOnValue(Object sourceValue, BType sourceType,\n             case TypeTags.XML_PI_TAG:\n             case TypeTags.XML_TEXT_TAG:\n                 if (sourceType.getTag() == TypeTags.XML_TAG) {\n-                    return matchXMLType((XMLValue) sourceValue, targetType);\n+                    return matchXMLTypeNonSequence((XMLValue) sourceValue, targetType);\n+                }\n+                return false;\n+            case TypeTags.XML_TAG:\n+                if (sourceType.getTag() == TypeTags.XML_TAG) {\n+                    return matchXMLTypeSequence((XMLValue) sourceValue, targetType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ2NzQ0MQ=="}, "originalCommit": {"oid": "436b934430df197dd8fef90dd9558dcb1a52a807"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTgwMTI5OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BXMLType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwOToxNzoxMlrOF-31Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwOTo0MjoxNlrOF-4y2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ3MDczNA==", "bodyText": "Type equals methods are usually performance-critical in Ballerina due to runtime typechecks.\nShall we inline the object reference test (obj == this) and instanceof test (and remove super call)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r401470734", "createdAt": "2020-04-01T09:17:12Z", "author": {"login": "rdhananjaya"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BXMLType.java", "diffHunk": "@@ -64,4 +73,26 @@ public int getTag() {\n     public boolean isAnydata() {\n         return true;\n     }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (!super.equals(obj) || !(obj instanceof BXMLType)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "436b934430df197dd8fef90dd9558dcb1a52a807"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ4NjU1Mw==", "bodyText": "+1. This is refactored.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r401486553", "createdAt": "2020-04-01T09:42:16Z", "author": {"login": "irshadnilam"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/types/BXMLType.java", "diffHunk": "@@ -64,4 +73,26 @@ public int getTag() {\n     public boolean isAnydata() {\n         return true;\n     }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (!super.equals(obj) || !(obj instanceof BXMLType)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ3MDczNA=="}, "originalCommit": {"oid": "436b934430df197dd8fef90dd9558dcb1a52a807"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzU0MDAxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmTypeGen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNTo0MDo1MVrOF_b-sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDo0NjowNlrOF_llnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2MzAyNg==", "bodyText": "Fix comment to xml", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402063026", "createdAt": "2020-04-02T05:40:51Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmTypeGen.java", "diffHunk": "@@ -1142,6 +1145,25 @@ private static void loadMapType(MethodVisitor mv, BMapType bType) {\n         mv.visitMethodInsn(INVOKESPECIAL, MAP_TYPE, \"<init>\", String.format(\"(L%s;)V\", BTYPE), false);\n     }\n \n+    /**\n+     * Generate code to load an instance of the given xml sequence type\n+     * to the top of the stack.\n+     *\n+     * @param mv    method visitor\n+     * @param bType xml type to load\n+     */\n+    private static void loadXmlType(MethodVisitor mv, BXMLType bType) {\n+        // Create an new map type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a9064a5d844ad64ed6ab7a6d610c61c3e0ab23a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyMDQ0Nw==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402220447", "createdAt": "2020-04-02T10:46:06Z", "author": {"login": "irshadnilam"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmTypeGen.java", "diffHunk": "@@ -1142,6 +1145,25 @@ private static void loadMapType(MethodVisitor mv, BMapType bType) {\n         mv.visitMethodInsn(INVOKESPECIAL, MAP_TYPE, \"<init>\", String.format(\"(L%s;)V\", BTYPE), false);\n     }\n \n+    /**\n+     * Generate code to load an instance of the given xml sequence type\n+     * to the top of the stack.\n+     *\n+     * @param mv    method visitor\n+     * @param bType xml type to load\n+     */\n+    private static void loadXmlType(MethodVisitor mv, BXMLType bType) {\n+        // Create an new map type", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2MzAyNg=="}, "originalCommit": {"oid": "3a9064a5d844ad64ed6ab7a6d610c61c3e0ab23a"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzU1NzE2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNTo0OTo1OVrOF_cIzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDo0NjoyMlrOF_lmKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2NTYxNQ==", "bodyText": "Shall we remove this and return the result then and there.\nDifficult to differentiate constrainedType and constraintType.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402065615", "createdAt": "2020-04-02T05:49:59Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1030,6 +1031,33 @@ public void visit(BLangConstrainedType constrainedTypeNode) {\n         resultType = constrainedType;\n     }\n \n+    private BType getXMLConstrainedType(BType constraintType, DiagnosticPos pos) {\n+        BType constrainedType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a9064a5d844ad64ed6ab7a6d610c61c3e0ab23a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyMDU4NQ==", "bodyText": "Removed the method.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402220585", "createdAt": "2020-04-02T10:46:22Z", "author": {"login": "irshadnilam"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1030,6 +1031,33 @@ public void visit(BLangConstrainedType constrainedTypeNode) {\n         resultType = constrainedType;\n     }\n \n+    private BType getXMLConstrainedType(BType constraintType, DiagnosticPos pos) {\n+        BType constrainedType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2NTYxNQ=="}, "originalCommit": {"oid": "3a9064a5d844ad64ed6ab7a6d610c61c3e0ab23a"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzU1OTQ2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNTo1MToyNlrOF_cKQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDo0NjozN1rOF_lmpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2NTk4NQ==", "bodyText": "This could go on a single line.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402065985", "createdAt": "2020-04-02T05:51:26Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1030,6 +1031,33 @@ public void visit(BLangConstrainedType constrainedTypeNode) {\n         resultType = constrainedType;\n     }\n \n+    private BType getXMLConstrainedType(BType constraintType, DiagnosticPos pos) {\n+        BType constrainedType;\n+        if (constraintType.tag != TypeTags.UNION) {\n+            if (!TypeTags.isXMLTypeTag(constraintType.tag)) {\n+                dlog.error(pos, DiagnosticCode.INCOMPATIBLE_TYPE_CONSTRAINT,\n+                        symTable.xmlType, constraintType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a9064a5d844ad64ed6ab7a6d610c61c3e0ab23a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyMDcwOA==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402220708", "createdAt": "2020-04-02T10:46:37Z", "author": {"login": "irshadnilam"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1030,6 +1031,33 @@ public void visit(BLangConstrainedType constrainedTypeNode) {\n         resultType = constrainedType;\n     }\n \n+    private BType getXMLConstrainedType(BType constraintType, DiagnosticPos pos) {\n+        BType constrainedType;\n+        if (constraintType.tag != TypeTags.UNION) {\n+            if (!TypeTags.isXMLTypeTag(constraintType.tag)) {\n+                dlog.error(pos, DiagnosticCode.INCOMPATIBLE_TYPE_CONSTRAINT,\n+                        symTable.xmlType, constraintType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2NTk4NQ=="}, "originalCommit": {"oid": "3a9064a5d844ad64ed6ab7a6d610c61c3e0ab23a"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzU1OTc1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNTo1MTozNVrOF_cKag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDo0NjozMVrOF_lmcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2NjAyNg==", "bodyText": "This could go on a single line.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402066026", "createdAt": "2020-04-02T05:51:35Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1030,6 +1031,33 @@ public void visit(BLangConstrainedType constrainedTypeNode) {\n         resultType = constrainedType;\n     }\n \n+    private BType getXMLConstrainedType(BType constraintType, DiagnosticPos pos) {\n+        BType constrainedType;\n+        if (constraintType.tag != TypeTags.UNION) {\n+            if (!TypeTags.isXMLTypeTag(constraintType.tag)) {\n+                dlog.error(pos, DiagnosticCode.INCOMPATIBLE_TYPE_CONSTRAINT,\n+                        symTable.xmlType, constraintType);\n+            }\n+            constrainedType = new BXMLType(TypeTags.XML, constraintType, false, null);\n+        } else {\n+            checkUnionTypeForXMLSubTypes((BUnionType) constraintType, pos);\n+            constrainedType = new BXMLType(TypeTags.XML, constraintType, false, null);\n+        }\n+        return constrainedType;\n+    }\n+\n+    private void checkUnionTypeForXMLSubTypes(BUnionType constraintUnionType, DiagnosticPos pos) {\n+        for (BType memberType : constraintUnionType.getMemberTypes()) {\n+            if (memberType.tag == TypeTags.UNION) {\n+                checkUnionTypeForXMLSubTypes((BUnionType) memberType, pos);\n+            }\n+            if (!TypeTags.isXMLTypeTag(memberType.tag)) {\n+                dlog.error(pos, DiagnosticCode.INCOMPATIBLE_TYPE_CONSTRAINT,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a9064a5d844ad64ed6ab7a6d610c61c3e0ab23a"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyMDY1OQ==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402220659", "createdAt": "2020-04-02T10:46:31Z", "author": {"login": "irshadnilam"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1030,6 +1031,33 @@ public void visit(BLangConstrainedType constrainedTypeNode) {\n         resultType = constrainedType;\n     }\n \n+    private BType getXMLConstrainedType(BType constraintType, DiagnosticPos pos) {\n+        BType constrainedType;\n+        if (constraintType.tag != TypeTags.UNION) {\n+            if (!TypeTags.isXMLTypeTag(constraintType.tag)) {\n+                dlog.error(pos, DiagnosticCode.INCOMPATIBLE_TYPE_CONSTRAINT,\n+                        symTable.xmlType, constraintType);\n+            }\n+            constrainedType = new BXMLType(TypeTags.XML, constraintType, false, null);\n+        } else {\n+            checkUnionTypeForXMLSubTypes((BUnionType) constraintType, pos);\n+            constrainedType = new BXMLType(TypeTags.XML, constraintType, false, null);\n+        }\n+        return constrainedType;\n+    }\n+\n+    private void checkUnionTypeForXMLSubTypes(BUnionType constraintUnionType, DiagnosticPos pos) {\n+        for (BType memberType : constraintUnionType.getMemberTypes()) {\n+            if (memberType.tag == TypeTags.UNION) {\n+                checkUnionTypeForXMLSubTypes((BUnionType) memberType, pos);\n+            }\n+            if (!TypeTags.isXMLTypeTag(memberType.tag)) {\n+                dlog.error(pos, DiagnosticCode.INCOMPATIBLE_TYPE_CONSTRAINT,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2NjAyNg=="}, "originalCommit": {"oid": "3a9064a5d844ad64ed6ab7a6d610c61c3e0ab23a"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzYzNTc0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BXMLType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjoyNDozMlrOF_c14g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDo0Njo1MFrOF_lnHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NzE1NA==", "bodyText": "First arg is alway XML tag, we don't need this, shall we remove it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402077154", "createdAt": "2020-04-02T06:24:32Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BXMLType.java", "diffHunk": "@@ -26,8 +27,26 @@\n  */\n public class BXMLType extends BBuiltInRefType {\n \n+    public BType constraint;\n+    public boolean defaultConstraint;\n+\n     public BXMLType(int tag, BTypeSymbol tsymbol) {\n         super(tag, tsymbol);\n+        this.defaultConstraint = true;\n+    }\n+\n+    public BXMLType(int tag, BType constraint, boolean defaultConstraint, BTypeSymbol tsymbol) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a9064a5d844ad64ed6ab7a6d610c61c3e0ab23a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyMDgyOQ==", "bodyText": "Removed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402220829", "createdAt": "2020-04-02T10:46:50Z", "author": {"login": "irshadnilam"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BXMLType.java", "diffHunk": "@@ -26,8 +27,26 @@\n  */\n public class BXMLType extends BBuiltInRefType {\n \n+    public BType constraint;\n+    public boolean defaultConstraint;\n+\n     public BXMLType(int tag, BTypeSymbol tsymbol) {\n         super(tag, tsymbol);\n+        this.defaultConstraint = true;\n+    }\n+\n+    public BXMLType(int tag, BType constraint, boolean defaultConstraint, BTypeSymbol tsymbol) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NzE1NA=="}, "originalCommit": {"oid": "3a9064a5d844ad64ed6ab7a6d610c61c3e0ab23a"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Mzk0MjEyOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODowNDowNlrOF_fv2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDo0NzowOFrOF_lnrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEyNDc2Mw==", "bodyText": "I think we should move the XML logic to checkIsRecursiveType now and handle this similar to other constrained types.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402124763", "createdAt": "2020-04-02T08:04:06Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -578,7 +580,20 @@ public static boolean checkIsType(BType sourceType, BType targetType, List<TypeP\n                 if (sourceType.getTag() == TypeTags.FINITE_TYPE_TAG) {\n                     return isFiniteTypeMatch((BFiniteType) sourceType, targetType);\n                 }\n-                return TypeTags.isXMLTypeTag(sourceType.getTag());\n+                BXMLType target = ((BXMLType) targetType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a9064a5d844ad64ed6ab7a6d610c61c3e0ab23a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyMDk3NA==", "bodyText": "Moved the logic to checkIsRecursiveType method.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402220974", "createdAt": "2020-04-02T10:47:08Z", "author": {"login": "irshadnilam"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -578,7 +580,20 @@ public static boolean checkIsType(BType sourceType, BType targetType, List<TypeP\n                 if (sourceType.getTag() == TypeTags.FINITE_TYPE_TAG) {\n                     return isFiniteTypeMatch((BFiniteType) sourceType, targetType);\n                 }\n-                return TypeTags.isXMLTypeTag(sourceType.getTag());\n+                BXMLType target = ((BXMLType) targetType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEyNDc2Mw=="}, "originalCommit": {"oid": "3a9064a5d844ad64ed6ab7a6d610c61c3e0ab23a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDk4Mjg5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjo1NzowNlrOF_p6nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzowNToxM1rOF_qOvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI5MTM1Ng==", "bodyText": "Merge conflict?\nL491  is the same", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402291356", "createdAt": "2020-04-02T12:57:06Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -480,22 +480,33 @@ private boolean isAssignable(BType source, BType target, Set<TypePair> unresolve\n             return true;\n         }\n \n-        if (TypeTags.isXMLTypeTag(sourceTag) && targetTag == TypeTags.XML) {\n+        if (TypeTags.isXMLTypeTag(sourceTag) && TypeTags.isXMLTypeTag(targetTag)) {\n+            return isXMLTypeAssignable(source, target, unresolvedTypes);\n+        }\n+\n+        if (sourceTag == TypeTags.CHAR_STRING && targetTag == TypeTags.STRING) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "194bc1353d6e32eb248281c340c0dda9117f9a9a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI5NjUwOA==", "bodyText": "Yep, probably due to merge conflicts. Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402296508", "createdAt": "2020-04-02T13:05:13Z", "author": {"login": "irshadnilam"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -480,22 +480,33 @@ private boolean isAssignable(BType source, BType target, Set<TypePair> unresolve\n             return true;\n         }\n \n-        if (TypeTags.isXMLTypeTag(sourceTag) && targetTag == TypeTags.XML) {\n+        if (TypeTags.isXMLTypeTag(sourceTag) && TypeTags.isXMLTypeTag(targetTag)) {\n+            return isXMLTypeAssignable(source, target, unresolvedTypes);\n+        }\n+\n+        if (sourceTag == TypeTags.CHAR_STRING && targetTag == TypeTags.STRING) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI5MTM1Ng=="}, "originalCommit": {"oid": "194bc1353d6e32eb248281c340c0dda9117f9a9a"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTAwMDA2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzowMToyN1rOF_qFag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzowNToxOVrOF_qO_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI5NDEyMg==", "bodyText": "Shall we rename to defineXmlStringConcatanationOperations", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402294122", "createdAt": "2020-04-02T13:01:27Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "diffHunk": "@@ -348,15 +351,13 @@ private void defineType(BType type, BTypeSymbol tSymbol) {\n     public void defineOperators() {\n         // Binary arithmetic operators\n         defineIntegerArithmeticOperations();\n-        defineBinaryOperator(OperatorKind.ADD, xmlType, xmlType, xmlType);\n-        defineBinaryOperator(OperatorKind.ADD, xmlType, stringType, xmlType);\n-        defineBinaryOperator(OperatorKind.ADD, xmlType, charStringType, xmlType);\n+\n+        // XML arithmetic operators\n+        defineXmlArithmaticOperations();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "194bc1353d6e32eb248281c340c0dda9117f9a9a"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI5NjU3NQ==", "bodyText": "Renamed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402296575", "createdAt": "2020-04-02T13:05:19Z", "author": {"login": "irshadnilam"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "diffHunk": "@@ -348,15 +351,13 @@ private void defineType(BType type, BTypeSymbol tSymbol) {\n     public void defineOperators() {\n         // Binary arithmetic operators\n         defineIntegerArithmeticOperations();\n-        defineBinaryOperator(OperatorKind.ADD, xmlType, xmlType, xmlType);\n-        defineBinaryOperator(OperatorKind.ADD, xmlType, stringType, xmlType);\n-        defineBinaryOperator(OperatorKind.ADD, xmlType, charStringType, xmlType);\n+\n+        // XML arithmetic operators\n+        defineXmlArithmaticOperations();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI5NDEyMg=="}, "originalCommit": {"oid": "194bc1353d6e32eb248281c340c0dda9117f9a9a"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTAwODQzOnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibXMLTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzowMzozNVrOF_qKqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzowNzo1MVrOF_qU-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI5NTQ2NQ==", "bodyText": "Extra line?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402295465", "createdAt": "2020-04-02T13:03:35Z", "author": {"login": "rdhananjaya"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibXMLTest.java", "diffHunk": "@@ -43,16 +44,19 @@\n  */\n public class LangLibXMLTest {\n \n-    private CompileResult compileResult, negativeResult;\n+    private CompileResult compileResult, negativeResult, constrainedTest, constraintNegative;\n \n     @BeforeClass\n     public void setup() {\n         compileResult = BCompileUtil.compile(\"test-src/xmllib_test.bal\");\n+        constrainedTest = BCompileUtil.compile(\"test-src/xmllib_constrained_test.bal\");\n         negativeResult = BCompileUtil.compile(\"test-src/xmllib_test_negative.bal\");\n+        constraintNegative = BCompileUtil.compile(\"test-src/xmllib_constrained_negative_test.bal\");\n     }\n \n     @Test(dataProvider = \"XMLDataProvider\")\n     public void testLength(BValue val, long expectedLength) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "194bc1353d6e32eb248281c340c0dda9117f9a9a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI5ODEwNA==", "bodyText": "Removed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402298104", "createdAt": "2020-04-02T13:07:51Z", "author": {"login": "irshadnilam"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibXMLTest.java", "diffHunk": "@@ -43,16 +44,19 @@\n  */\n public class LangLibXMLTest {\n \n-    private CompileResult compileResult, negativeResult;\n+    private CompileResult compileResult, negativeResult, constrainedTest, constraintNegative;\n \n     @BeforeClass\n     public void setup() {\n         compileResult = BCompileUtil.compile(\"test-src/xmllib_test.bal\");\n+        constrainedTest = BCompileUtil.compile(\"test-src/xmllib_constrained_test.bal\");\n         negativeResult = BCompileUtil.compile(\"test-src/xmllib_test_negative.bal\");\n+        constraintNegative = BCompileUtil.compile(\"test-src/xmllib_constrained_negative_test.bal\");\n     }\n \n     @Test(dataProvider = \"XMLDataProvider\")\n     public void testLength(BValue val, long expectedLength) {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI5NTQ2NQ=="}, "originalCommit": {"oid": "194bc1353d6e32eb248281c340c0dda9117f9a9a"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTM3NTA0OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/xmllib_constrained_negative_test.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDoyNDo0M1rOF_tvtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxMTo0MToyN1rOGAxRWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1NDEwMw==", "bodyText": "Shall we add few negative test cases for invalid assignment to an array of xml subtype and invalid assignment to map of xml subtype tests?\nxml[] ar = [xml <elem></elem>];\nar.push(xml <!-- cmnt -->);\nar.push(xml <?Hello DATA ?>);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402354103", "createdAt": "2020-04-02T14:24:43Z", "author": {"login": "rdhananjaya"}, "path": "langlib/langlib-test/src/test/resources/test-src/xmllib_constrained_negative_test.bal", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/lang.'xml;\n+\n+public function invalidSubtype() {\n+    'xml:Comment c1 = xml `<hello>xml content</hello>`;\n+    'xml:ProcessingInstruction p1 = xml `<hello>another xml content</hello>`;\n+}\n+\n+public function invalidConstraint() {\n+    xml<'xml:Comment> c1 = xml `<hello>xml content</hello>`;\n+    xml<'xml:ProcessingInstruction> p1 = xml `<hello>another xml content</hello>`;\n+\n+    xml<'xml:Element> elementSequence = xml `<hello>xml content</hello>`;\n+    'xml:Comment refer = elementSequence[0];\n+\n+    'xml:Comment comment = xml `<!-- this is a comment text -->`;\n+    xml<'xml:Element> commentSequence = comment;\n+}\n+\n+public function xmlConstraintMultipleElement() {\n+    'xml:Element elem1 = xml `<hello>xml element 1</hello>`;\n+    'xml:Element elem2 = xml `<hello>xml element 2</hello>`;\n+    xml<'xml:Comment> elementSequence = elem1 + elem2;\n+\n+    'xml:Comment comment = xml `<!-- this is a comment text -->`;\n+    xml<'xml:Element> seq = elem1 + comment;\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d53996cec9ef50d3b929bfc4a411162384fe1898"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ2MDQ0MQ==", "bodyText": "Added via fdec835", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r403460441", "createdAt": "2020-04-04T11:41:27Z", "author": {"login": "irshadnilam"}, "path": "langlib/langlib-test/src/test/resources/test-src/xmllib_constrained_negative_test.bal", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/lang.'xml;\n+\n+public function invalidSubtype() {\n+    'xml:Comment c1 = xml `<hello>xml content</hello>`;\n+    'xml:ProcessingInstruction p1 = xml `<hello>another xml content</hello>`;\n+}\n+\n+public function invalidConstraint() {\n+    xml<'xml:Comment> c1 = xml `<hello>xml content</hello>`;\n+    xml<'xml:ProcessingInstruction> p1 = xml `<hello>another xml content</hello>`;\n+\n+    xml<'xml:Element> elementSequence = xml `<hello>xml content</hello>`;\n+    'xml:Comment refer = elementSequence[0];\n+\n+    'xml:Comment comment = xml `<!-- this is a comment text -->`;\n+    xml<'xml:Element> commentSequence = comment;\n+}\n+\n+public function xmlConstraintMultipleElement() {\n+    'xml:Element elem1 = xml `<hello>xml element 1</hello>`;\n+    'xml:Element elem2 = xml `<hello>xml element 2</hello>`;\n+    xml<'xml:Comment> elementSequence = elem1 + elem2;\n+\n+    'xml:Comment comment = xml `<!-- this is a comment text -->`;\n+    xml<'xml:Element> seq = elem1 + comment;\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1NDEwMw=="}, "originalCommit": {"oid": "d53996cec9ef50d3b929bfc4a411162384fe1898"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTkxOTk2OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/xmllib_constrained_test.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjoyMjo0NlrOF_zLLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxMTo0MzowM1rOGAxR6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MzA1Mw==", "bodyText": "Consider this:\npublic function main() {\n    'xml:Element elem1 = xml `<hello>xml content</hello>`;\n    xml<'xml:Element> elementSequence = xml `<hello>xml content</hello>`;\n    'xml:Element refer = elementSequence[0];\n    'xml:Element two = elementSequence[1]; // returns empty xml sequence. https://ballerina.io/ballerina-spec/spec.html#section_6.15\n    io:println(two);\n    anydata k = two;\n    io:println(k is 'xml:Element);\n    io:println(k is xml);\n}\nI think we made a mistake type checking xml member access expressions. In the line with a comment, out of range member acess returns empty xml value (different from list). So the lhs type should be xml or 'xml` (to allow empty sequence).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402443053", "createdAt": "2020-04-02T16:22:46Z", "author": {"login": "rdhananjaya"}, "path": "langlib/langlib-test/src/test/resources/test-src/xmllib_constrained_test.bal", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/lang.'xml;\n+\n+public function basicXMLConstrainedType() {\n+    'xml:Element elem1 = xml `<hello>xml content</hello>`;\n+    xml<'xml:Element> elementSequence = xml `<hello>xml content</hello>`;\n+    'xml:Element refer = elementSequence[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d53996cec9ef50d3b929bfc4a411162384fe1898"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ2MDU4Ng==", "bodyText": "This is fixed via\n408178a\nIt also fixes the ability to cast empty sequence for text type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r403460586", "createdAt": "2020-04-04T11:43:03Z", "author": {"login": "irshadnilam"}, "path": "langlib/langlib-test/src/test/resources/test-src/xmllib_constrained_test.bal", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/lang.'xml;\n+\n+public function basicXMLConstrainedType() {\n+    'xml:Element elem1 = xml `<hello>xml content</hello>`;\n+    xml<'xml:Element> elementSequence = xml `<hello>xml content</hello>`;\n+    'xml:Element refer = elementSequence[0];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MzA1Mw=="}, "originalCommit": {"oid": "d53996cec9ef50d3b929bfc4a411162384fe1898"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTk3MjY2OnYy", "diffSide": "RIGHT", "path": "composer/package-lock.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjozNTo0OFrOF_zspw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxMTo0MzoxN1rOGAxR_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1MTYyMw==", "bodyText": "We need to remove this right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r402451623", "createdAt": "2020-04-02T16:35:48Z", "author": {"login": "rdhananjaya"}, "path": "composer/package-lock.json", "diffHunk": "@@ -18354,7 +18354,7 @@\n     },\n     \"minimist\": {\n       \"version\": \"1.2.0\",\n-      \"resolved\": \"https://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz\",\n+      \"resolved\": \"http://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d53996cec9ef50d3b929bfc4a411162384fe1898"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ2MDYwNQ==", "bodyText": "yep, removed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r403460605", "createdAt": "2020-04-04T11:43:17Z", "author": {"login": "irshadnilam"}, "path": "composer/package-lock.json", "diffHunk": "@@ -18354,7 +18354,7 @@\n     },\n     \"minimist\": {\n       \"version\": \"1.2.0\",\n-      \"resolved\": \"https://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz\",\n+      \"resolved\": \"http://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1MTYyMw=="}, "originalCommit": {"oid": "d53996cec9ef50d3b929bfc4a411162384fe1898"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjg1NDA2OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/xmllib_constrained_negative_test.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxMzoyODozNlrOGAx3cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQxMzoyODozNlrOGAx3cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQ3MDE5Mg==", "bodyText": "newline", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22323#discussion_r403470192", "createdAt": "2020-04-04T13:28:36Z", "author": {"login": "rdhananjaya"}, "path": "langlib/langlib-test/src/test/resources/test-src/xmllib_constrained_negative_test.bal", "diffHunk": "@@ -0,0 +1,66 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/lang.'xml;\n+\n+public function invalidSubtype() {\n+    'xml:Comment c1 = xml `<hello>xml content</hello>`;\n+    'xml:ProcessingInstruction p1 = xml `<hello>another xml content</hello>`;\n+}\n+\n+public function invalidConstraint() {\n+    xml<'xml:Comment> c1 = xml `<hello>xml content</hello>`;\n+    xml<'xml:ProcessingInstruction> p1 = xml `<hello>another xml content</hello>`;\n+\n+    xml<'xml:Element> elementSequence = xml `<hello>xml content</hello>`;\n+    'xml:Comment refer = elementSequence[0];\n+\n+    'xml:Comment comment = xml `<!-- this is a comment text -->`;\n+    xml<'xml:Element> commentSequence = comment;\n+}\n+\n+public function xmlConstraintMultipleElement() {\n+    'xml:Element elem1 = xml `<hello>xml element 1</hello>`;\n+    'xml:Element elem2 = xml `<hello>xml element 2</hello>`;\n+    xml<'xml:Comment> elementSequence = elem1 + elem2;\n+\n+    'xml:Comment comment = xml `<!-- this is a comment text -->`;\n+    xml<'xml:Element> seq = elem1 + comment;\n+}\n+\n+public function xmlSubtypeArrayNegative() {\n+    'xml:Element[] ar = [xml `<!-- cmnt -->`];\n+    ar.push(xml `<?Hello DATA ?>`);\n+    ar.push(xml `abc`);\n+\n+    xml<'xml:Comment> commentSequence = xml `<!-- cmnt -->`;\n+    ar.push(commentSequence);\n+\n+    xml<'xml:Comment>[] arrayOfCommentSeq = [xml `<hello>xml element 1</hello>`];\n+\n+    xml<'xml:Element> elementSequence = xml `<hello>xml content</hello>`;\n+    arrayOfCommentSeq.push(elementSequence);\n+}\n+\n+public function xmlSubtypeMapNegative() {\n+    map<'xml:Element> eMap = {\n+       \"elementA\" : xml `<!-- cmnt -->`\n+    };\n+    'xml:Element CommentA = xml `<!-- cmnt -->`;\n+    xml<'xml:Comment> CommentSeq = xml `<!-- cmntseq -->`;\n+    eMap[\"CommentA\"] = CommentA;\n+    eMap[\"seq\"] = CommentSeq;\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b036cb03428ab61f65d08de5a05e36e0f40458b"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4460, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}