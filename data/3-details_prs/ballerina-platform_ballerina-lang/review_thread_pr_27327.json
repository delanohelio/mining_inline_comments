{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxNzI5OTgz", "number": 27327, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODowNzoyMFrOFArQTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwNzowNjo0N1rOFNjB3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjUzMDA0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaLexer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwODowNzoyMFrOH_FRSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNjo1MDo1NFrOIF7hpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkwODY4MQ==", "bodyText": "Shall keep the lexer unchanged and only change the parser?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r535908681", "createdAt": "2020-12-04T08:07:20Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaLexer.java", "diffHunk": "@@ -791,6 +791,10 @@ private STToken processIdentifierOrKeyword() {\n         }\n \n         String tokenText = getLexeme();\n+        if (isPredeclaredPrefix(tokenText) && peek() == ':') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd6f11d2f6703e26380c6fbd426c5f7db9789118"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA4OTA2Mw==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r543089063", "createdAt": "2020-12-15T06:50:54Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaLexer.java", "diffHunk": "@@ -791,6 +791,10 @@ private STToken processIdentifierOrKeyword() {\n         }\n \n         String tokenText = getLexeme();\n+        if (isPredeclaredPrefix(tokenText) && peek() == ':') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkwODY4MQ=="}, "originalCommit": {"oid": "fd6f11d2f6703e26380c6fbd426c5f7db9789118"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTQwMDUyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMzoxMzozMFrOIJs4Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNTo0NzoyM1rOIJvK-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0MzMzMA==", "bodyText": "since we are returning from if, we don't need the else block", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r547043330", "createdAt": "2020-12-22T03:13:30Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -2354,6 +2362,84 @@ private STNode parseTypeDescriptorInternal(List<STNode> qualifiers, ParserRuleCo\n         }\n     }\n \n+    private STNode parseQualifiedTypeRefOrTypeDesc(List<STNode> qualifiers, boolean isInConditionalExpr) {\n+        STToken preDeclaredPrefix = consume();\n+        STToken nextNextToken = getNextNextToken();\n+        if (nextNextToken.kind == SyntaxKind.IDENTIFIER_TOKEN) {\n+            reportInvalidQualifierList(qualifiers);\n+            return parseQualIdentifierWithPredeclPrefix(preDeclaredPrefix, isInConditionalExpr);\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39c44f4b4bef0c99128882cc621a1ff9e285ec76"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA4MDk1NQ==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r547080955", "createdAt": "2020-12-22T05:47:23Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -2354,6 +2362,84 @@ private STNode parseTypeDescriptorInternal(List<STNode> qualifiers, ParserRuleCo\n         }\n     }\n \n+    private STNode parseQualifiedTypeRefOrTypeDesc(List<STNode> qualifiers, boolean isInConditionalExpr) {\n+        STToken preDeclaredPrefix = consume();\n+        STToken nextNextToken = getNextNextToken();\n+        if (nextNextToken.kind == SyntaxKind.IDENTIFIER_TOKEN) {\n+            reportInvalidQualifierList(qualifiers);\n+            return parseQualIdentifierWithPredeclPrefix(preDeclaredPrefix, isInConditionalExpr);\n+        } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0MzMzMA=="}, "originalCommit": {"oid": "39c44f4b4bef0c99128882cc621a1ff9e285ec76"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTQwNzUyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMzoxNzoyMlrOIJs7yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNTo0NzozNFrOIJvLJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0NDI5OQ==", "bodyText": "shall we invert the condition?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r547044299", "createdAt": "2020-12-22T03:17:22Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4437,6 +4530,47 @@ private STNode parseTerminalExpression(STNode annots, List<STNode> qualifiers, b\n         return parseTerminalExpression(annots, qualifiers, isRhsExpr, allowActions, isInConditionalExpr);\n     }\n \n+    private STNode parseQualifiedIdentifierOrExpression(boolean isInConditionalExpr, boolean isRhsExpr) {\n+        STToken preDeclaredPrefix = consume();\n+        STToken nextNextToken = getNextNextToken();\n+        if (nextNextToken.kind != SyntaxKind.IDENTIFIER_TOKEN || isKeyKeyword(nextNextToken)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39c44f4b4bef0c99128882cc621a1ff9e285ec76"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA4MDk5Ng==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r547080996", "createdAt": "2020-12-22T05:47:34Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4437,6 +4530,47 @@ private STNode parseTerminalExpression(STNode annots, List<STNode> qualifiers, b\n         return parseTerminalExpression(annots, qualifiers, isRhsExpr, allowActions, isInConditionalExpr);\n     }\n \n+    private STNode parseQualifiedIdentifierOrExpression(boolean isInConditionalExpr, boolean isRhsExpr) {\n+        STToken preDeclaredPrefix = consume();\n+        STToken nextNextToken = getNextNextToken();\n+        if (nextNextToken.kind != SyntaxKind.IDENTIFIER_TOKEN || isKeyKeyword(nextNextToken)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0NDI5OQ=="}, "originalCommit": {"oid": "39c44f4b4bef0c99128882cc621a1ff9e285ec76"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTQyOTUzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/test/resources/misc/predeclared-module-prefix/predeclared-module-prefix_01.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMzozMDoxN1rOIJtIKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNTo0ODoxOVrOIJvL-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0NzQ2NA==", "bodyText": "shall we add some tests to cover:\n\nglobal/local var-defs starts with a pre-declared prefix? (eg: xml:Element x = ...)\nRecord fields stats with a pre-declared prefix\nCalling a function from langlibs that is not an attached function (e.g: pre-declared-prefix:func-name();)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r547047464", "createdAt": "2020-12-22T03:30:17Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/resources/misc/predeclared-module-prefix/predeclared-module-prefix_01.bal", "diffHunk": "@@ -0,0 +1,34 @@\n+// Override lang.int with custom import\n+import ballerina/foo.bar.baz as int;\n+\n+// Predeclared prefix in annotation and listener decl\n+@int:annot\n+listener stream:Element myListner = getListner();\n+\n+type myRecord record {\n+    int a;\n+    *table:tableRecod;\n+};\n+\n+type myObject object {\n+    function foo(int a, any b);\n+    *object:customObj;\n+};\n+\n+public function foo() returns int:c {\n+    // Using module prefix with predeclared prefix\n+    int a = int:sum(1, 2, 3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39c44f4b4bef0c99128882cc621a1ff9e285ec76"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA4MTIwOQ==", "bodyText": "Done. 3rd test case was already there. int:sum(1, 2, 3);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r547081209", "createdAt": "2020-12-22T05:48:19Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/test/resources/misc/predeclared-module-prefix/predeclared-module-prefix_01.bal", "diffHunk": "@@ -0,0 +1,34 @@\n+// Override lang.int with custom import\n+import ballerina/foo.bar.baz as int;\n+\n+// Predeclared prefix in annotation and listener decl\n+@int:annot\n+listener stream:Element myListner = getListner();\n+\n+type myRecord record {\n+    int a;\n+    *table:tableRecod;\n+};\n+\n+type myObject object {\n+    function foo(int a, any b);\n+    *object:customObj;\n+};\n+\n+public function foo() returns int:c {\n+    // Using module prefix with predeclared prefix\n+    int a = int:sum(1, 2, 3);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0NzQ2NA=="}, "originalCommit": {"oid": "39c44f4b4bef0c99128882cc621a1ff9e285ec76"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NDkzNTg0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxODo0MjowM1rOIOi07w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwNzowNzo1M1rOIR0S4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEyMTU4Mw==", "bodyText": "predeclared-prefix should always be followed by colon and identifier right?\nwhy don't we simply check colon and identifier in isQualifiedIdentifierPredeclaredPrefix and call parseQualifiedIdentifier here?\nThen we can keep the rest of the method intact?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r552121583", "createdAt": "2021-01-05T18:42:03Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -2291,6 +2295,9 @@ private STNode parseTypeDescriptorInternal(List<STNode> qualifiers, ParserRuleCo\n                                                boolean isInConditionalExpr) {\n         parseTypeDescQualifiers(qualifiers);\n         STToken nextToken = peek();\n+        if (isQualifiedIdentifierPredeclaredPrefix(nextToken.kind)) {\n+            return parseQualifiedTypeRefOrTypeDesc(qualifiers, isInConditionalExpr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01429e924204d2b0acdbba74837cef1413f8bf8c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM3NDM1Mg==", "bodyText": "We provide recovery for the last identifier of the qualified identifier", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r552374352", "createdAt": "2021-01-06T05:18:12Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -2291,6 +2295,9 @@ private STNode parseTypeDescriptorInternal(List<STNode> qualifiers, ParserRuleCo\n                                                boolean isInConditionalExpr) {\n         parseTypeDescQualifiers(qualifiers);\n         STToken nextToken = peek();\n+        if (isQualifiedIdentifierPredeclaredPrefix(nextToken.kind)) {\n+            return parseQualifiedTypeRefOrTypeDesc(qualifiers, isInConditionalExpr);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEyMTU4Mw=="}, "originalCommit": {"oid": "01429e924204d2b0acdbba74837cef1413f8bf8c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM4MTMyOA==", "bodyText": "I see. if there's a predeclared-qualified identifier we simply parse it otherwise we stick to the normal way of parsing.\nwouldn't that make things simple in all places?\nMy concern is, whether it is worth doing recovery for missing identifier in  \"predeclared-qualified identifier\" at the cost of making the code base bit more complex.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r552381328", "createdAt": "2021-01-06T05:44:25Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -2291,6 +2295,9 @@ private STNode parseTypeDescriptorInternal(List<STNode> qualifiers, ParserRuleCo\n                                                boolean isInConditionalExpr) {\n         parseTypeDescQualifiers(qualifiers);\n         STToken nextToken = peek();\n+        if (isQualifiedIdentifierPredeclaredPrefix(nextToken.kind)) {\n+            return parseQualifiedTypeRefOrTypeDesc(qualifiers, isInConditionalExpr);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEyMTU4Mw=="}, "originalCommit": {"oid": "01429e924204d2b0acdbba74837cef1413f8bf8c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU1MzUwNw==", "bodyText": "We agreed upon doing recovery for last identifier.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r555553507", "createdAt": "2021-01-12T07:07:53Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -2291,6 +2295,9 @@ private STNode parseTypeDescriptorInternal(List<STNode> qualifiers, ParserRuleCo\n                                                boolean isInConditionalExpr) {\n         parseTypeDescQualifiers(qualifiers);\n         STToken nextToken = peek();\n+        if (isQualifiedIdentifierPredeclaredPrefix(nextToken.kind)) {\n+            return parseQualifiedTypeRefOrTypeDesc(qualifiers, isInConditionalExpr);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEyMTU4Mw=="}, "originalCommit": {"oid": "01429e924204d2b0acdbba74837cef1413f8bf8c"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NDk4OTE4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxODo1NzozOVrOIOjVGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwNTozMzozNlrOIOygyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEyOTgxOQ==", "bodyText": "Whenever we need to call parseTypeReference() we have to call it twice for identifier and isQualifiedIdentifierPredeclaredPrefix.\nShall we use a isTypeReferenceToken call so the current method has only one level of abstraction? i.e. whoever call parseTypeReference() does not need to worry about its internal composition.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r552129819", "createdAt": "2021-01-05T18:57:39Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -5610,19 +5750,19 @@ private STNode parseObjectConstructorExpression(STNode annots, List<STNode> qual\n      * @return Parsed type reference or empty node\n      */\n     private STNode parseObjectConstructorTypeReference() {\n-        STNode typeReference;\n         STToken nextToken = peek();\n         switch (nextToken.kind) {\n             case IDENTIFIER_TOKEN:\n-                typeReference = parseTypeReference();\n-                break;\n+                return parseTypeReference();\n             case OPEN_BRACE_TOKEN:\n                 return STNodeFactory.createEmptyNode();\n             default:\n+                if (isQualifiedIdentifierPredeclaredPrefix(nextToken.kind)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01429e924204d2b0acdbba74837cef1413f8bf8c"}, "originalPosition": 291}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM3ODU3MQ==", "bodyText": "+1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r552378571", "createdAt": "2021-01-06T05:33:36Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -5610,19 +5750,19 @@ private STNode parseObjectConstructorExpression(STNode annots, List<STNode> qual\n      * @return Parsed type reference or empty node\n      */\n     private STNode parseObjectConstructorTypeReference() {\n-        STNode typeReference;\n         STToken nextToken = peek();\n         switch (nextToken.kind) {\n             case IDENTIFIER_TOKEN:\n-                typeReference = parseTypeReference();\n-                break;\n+                return parseTypeReference();\n             case OPEN_BRACE_TOKEN:\n                 return STNodeFactory.createEmptyNode();\n             default:\n+                if (isQualifiedIdentifierPredeclaredPrefix(nextToken.kind)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEyOTgxOQ=="}, "originalCommit": {"oid": "01429e924204d2b0acdbba74837cef1413f8bf8c"}, "originalPosition": 291}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NTA1MTYwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxOToxNzowM1rOIOj7lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwNTo0NjowMVrOIOytVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEzOTY3MQ==", "bodyText": "similarly can use isClassDescriptorToken", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r552139671", "createdAt": "2021-01-05T19:17:03Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4567,6 +4699,9 @@ private STNode parseNewKeywordRhs(SyntaxKind kind, STNode newKeyword) {\n             case STREAM_KEYWORD:\n                 return parseTypeDescriptorInNewExpr(newKeyword);\n             default:\n+                if (isQualifiedIdentifierPredeclaredPrefix(kind)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01429e924204d2b0acdbba74837cef1413f8bf8c"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM4MTc4Mw==", "bodyText": "+1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r552381783", "createdAt": "2021-01-06T05:46:01Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4567,6 +4699,9 @@ private STNode parseNewKeywordRhs(SyntaxKind kind, STNode newKeyword) {\n             case STREAM_KEYWORD:\n                 return parseTypeDescriptorInNewExpr(newKeyword);\n             default:\n+                if (isQualifiedIdentifierPredeclaredPrefix(kind)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEzOTY3MQ=="}, "originalCommit": {"oid": "01429e924204d2b0acdbba74837cef1413f8bf8c"}, "originalPosition": 223}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NTA2MTc4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxOToyMDoxOFrOIOkB9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwNjowNToyNFrOIOzBwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE0MTMwMA==", "bodyText": "!IsAnnotTagReferenceToken(nextTokenKind)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r552141300", "createdAt": "2021-01-05T19:20:18Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -7596,7 +7736,8 @@ private STNode parseAnnotations() {\n     private STNode parseAnnotation() {\n         STNode atToken = parseAtToken();\n         STNode annotReference;\n-        if (peek().kind != SyntaxKind.IDENTIFIER_TOKEN) {\n+        SyntaxKind nextTokenKind = peek().kind;\n+        if (nextTokenKind != SyntaxKind.IDENTIFIER_TOKEN && !isQualifiedIdentifierPredeclaredPrefix(nextTokenKind)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01429e924204d2b0acdbba74837cef1413f8bf8c"}, "originalPosition": 307}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM4NzAxMA==", "bodyText": "+1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r552387010", "createdAt": "2021-01-06T06:05:24Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -7596,7 +7736,8 @@ private STNode parseAnnotations() {\n     private STNode parseAnnotation() {\n         STNode atToken = parseAtToken();\n         STNode annotReference;\n-        if (peek().kind != SyntaxKind.IDENTIFIER_TOKEN) {\n+        SyntaxKind nextTokenKind = peek().kind;\n+        if (nextTokenKind != SyntaxKind.IDENTIFIER_TOKEN && !isQualifiedIdentifierPredeclaredPrefix(nextTokenKind)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE0MTMwMA=="}, "originalCommit": {"oid": "01429e924204d2b0acdbba74837cef1413f8bf8c"}, "originalPosition": 307}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NzQ3Mzg5OnYy", "diffSide": "RIGHT", "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/ParserTestFormatter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwNjo1NjozMlrOIR0D4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwNjo1NjozMlrOIR0D4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU0OTY2NQ==", "bodyText": "extra new line", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r555549665", "createdAt": "2021-01-12T06:56:32Z", "author": {"login": "lochana-chathura"}, "path": "misc/formatter/modules/formatter-core/src/test/java/org/ballerinalang/formatter/core/ParserTestFormatter.java", "diffHunk": "@@ -161,7 +161,9 @@ public void test(String fileName, String path) throws IOException {\n                 \"annot_decl_source_02.bal\", \"class_def_source_11.bal\", \"object_type_def_source_26.bal\",\n                 \"ambiguity_source_32.bal\", \"service_object_constructor_source_01.bal\",\n                 \"service_object_constructor_source_02.bal\", \"object_constructor_source_08.bal\",\n-                \"annotations_source_01.bal\", \"do_stmt_source_08.bal\", \"func_params_source_11.bal\");\n+                \"annotations_source_01.bal\", \"do_stmt_source_08.bal\", \"func_params_source_11.bal\",\n+                \"predeclared-module-prefix_02.bal\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4160d2615f6df033ab9b83c3c3b0c3b264ef297"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NzQ4OTU5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwNzowMzo0M1rOIR0NHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwNzo1NDo1OVrOIR1gHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU1MjAzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                return identifier;\n          \n          \n            \n                                return createBuiltinSimpleNameReference(identifier);\n          \n      \n    \n    \n  \n\nWill this solve the problem we discussed offline?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r555552030", "createdAt": "2021-01-12T07:03:43Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3636,7 +3737,9 @@ private STNode parseQualifiedIdentifier(STNode identifier, boolean isInCondition\n                 addInvalidTokenToNextToken(errorHandler.consumeInvalidToken());\n                 return parseQualifiedIdentifier(identifier, isInConditionalExpr);\n             default:\n-                if (isInConditionalExpr) {\n+                if (isInConditionalExpr && isPredeclaredPrefix) {\n+                    return identifier;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4160d2615f6df033ab9b83c3c3b0c3b264ef297"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU2OTAxMg==", "bodyText": "No, if isPredeclaredPrefix is true then identifier is already a BuiltinSimpleNameReference", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r555569012", "createdAt": "2021-01-12T07:45:55Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3636,7 +3737,9 @@ private STNode parseQualifiedIdentifier(STNode identifier, boolean isInCondition\n                 addInvalidTokenToNextToken(errorHandler.consumeInvalidToken());\n                 return parseQualifiedIdentifier(identifier, isInConditionalExpr);\n             default:\n-                if (isInConditionalExpr) {\n+                if (isInConditionalExpr && isPredeclaredPrefix) {\n+                    return identifier;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU1MjAzMA=="}, "originalCommit": {"oid": "f4160d2615f6df033ab9b83c3c3b0c3b264ef297"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU3MzI3Nw==", "bodyText": "I mean we don't create the wrapper before calling this method. Instead we create the wrapper here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r555573277", "createdAt": "2021-01-12T07:54:59Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3636,7 +3737,9 @@ private STNode parseQualifiedIdentifier(STNode identifier, boolean isInCondition\n                 addInvalidTokenToNextToken(errorHandler.consumeInvalidToken());\n                 return parseQualifiedIdentifier(identifier, isInConditionalExpr);\n             default:\n-                if (isInConditionalExpr) {\n+                if (isInConditionalExpr && isPredeclaredPrefix) {\n+                    return identifier;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU1MjAzMA=="}, "originalCommit": {"oid": "f4160d2615f6df033ab9b83c3c3b0c3b264ef297"}, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NzQ5NzI2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/ParserRuleContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwNzowNjo0N1rOIR0RbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwNzowNjo0N1rOIR0RbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTU1MzEzMw==", "bodyText": "extra new line", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27327#discussion_r555553133", "createdAt": "2021-01-12T07:06:47Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/ParserRuleContext.java", "diffHunk": "@@ -310,6 +310,9 @@\n     INTERMEDIATE_CLAUSE_START(\"intermediate-clause-start\"),\n     ON_FAIL_CLAUSE(\"on_fail_clause\"),\n     ON_FA(\"on_fail_clause\"),\n+    TYPEDESC_TYPE_DESCRIPTOR(\"typedesc-type-descriptor\"),\n+    TYPEDESC_TYPE_DESCRIPTOR_RHS(\"typedesc-type-descriptor-rhs\"),\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4160d2615f6df033ab9b83c3c3b0c3b264ef297"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2848, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}