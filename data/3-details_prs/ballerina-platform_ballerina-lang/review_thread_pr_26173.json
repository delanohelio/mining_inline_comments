{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2NDI4ODYw", "number": 26173, "reviewThreads": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTowMjo1NFrOEqrN6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjozNDo1NFrOEv4O4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTgzNzIzOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTowMjo1NFrOHdBBDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTowMjo1NFrOHdBBDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE4NzQwNA==", "bodyText": "additional parenthesis", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26173#discussion_r500187404", "createdAt": "2020-10-06T11:02:54Z", "author": {"login": "SupunS"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1242,32 +1247,45 @@ private static boolean checkIsArrayType(BType sourceType, BArrayType targetType,\n                 tupleTypes.add(sourceTupleType.getRestType());\n             }\n             if (tupleTypes.isEmpty()) {\n-                return targetType.getState() == ArrayState.UNSEALED || targetType.getSize() == 0;\n+                return targetType.getState() == ArrayState.OPEN || targetType.getSize() == 0;\n+            }\n+\n+            if (sourceTupleType.getRestType() != null && targetType.getState() == ArrayState.OPEN) {\n+                boolean memberTypesMatch = true;\n+                if (!(tupleTypes.isEmpty())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4a5d761508c0140ad1274a32ade6b284fa0ad63"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTgzOTYzOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTowMzozOVrOHdBCiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTowMzozOVrOHdBCiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE4Nzc4NQ==", "bodyText": "seems theres a formatting issue here", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26173#discussion_r500187785", "createdAt": "2020-10-06T11:03:39Z", "author": {"login": "SupunS"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1242,32 +1247,45 @@ private static boolean checkIsArrayType(BType sourceType, BArrayType targetType,\n                 tupleTypes.add(sourceTupleType.getRestType());\n             }\n             if (tupleTypes.isEmpty()) {\n-                return targetType.getState() == ArrayState.UNSEALED || targetType.getSize() == 0;\n+                return targetType.getState() == ArrayState.OPEN || targetType.getSize() == 0;\n+            }\n+\n+            if (sourceTupleType.getRestType() != null && targetType.getState() == ArrayState.OPEN) {\n+                boolean memberTypesMatch = true;\n+                if (!(tupleTypes.isEmpty())) {\n+                    for (BType sourceElementType : tupleTypes) {\n+                        if (!checkIsType(sourceElementType, targetElementType, unresolvedTypes)) {\n+                            memberTypesMatch = false;\n+                        }\n+                    }\n+                }\n+                if (memberTypesMatch) {\n+                    BType sourceRestType = sourceTupleType.getRestType();\n+                    return checkIsType (sourceRestType, targetElementType, unresolvedTypes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4a5d761508c0140ad1274a32ade6b284fa0ad63"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTg1MTMxOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTowNzoyM1rOHdBJ2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTowNzoyM1rOHdBJ2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE4OTY1Nw==", "bodyText": "We can remove this if-condition, if you bring the condition in the else-if, before this one\ni.e:\nif (sourceArrayType.getSize() < targetTypes.size()) {\n    return false;\n}\n\n// rest of the code goes here...", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26173#discussion_r500189657", "createdAt": "2020-10-06T11:07:23Z", "author": {"login": "SupunS"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1279,32 +1297,118 @@ private static boolean checkIsArrayType(BType sourceType, BArrayType targetType,\n     }\n \n     private static boolean checkIsTupleType(BType sourceType, BTupleType targetType, List<TypePair> unresolvedTypes) {\n-        if (sourceType.getTag() != TypeTags.TUPLE_TAG) {\n-            return false;\n+        int sourceTypeTag = sourceType.getTag();\n+\n+        if (sourceTypeTag == TypeTags.UNION_TAG) {\n+            for (BType memberType : ((BUnionType) sourceType).getMemberTypes()) {\n+                if (!checkIsTupleType(memberType, targetType, unresolvedTypes)) {\n+                    return false;\n+                }\n+            }\n+            return true;\n         }\n \n-        List<BType> sourceTypes = new ArrayList<>(((BTupleType) sourceType).getTupleTypes());\n-        BType sourceRestType = ((BTupleType) sourceType).getRestType();\n-        if (sourceRestType != null) {\n-            sourceTypes.add(sourceRestType);\n+        if (sourceTypeTag != TypeTags.ARRAY_TAG && sourceTypeTag != TypeTags.TUPLE_TAG) {\n+            return false;\n         }\n \n         List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n         BType targetRestType = targetType.getRestType();\n-        if (targetRestType != null) {\n-            targetTypes.add(targetRestType);\n+\n+        BTupleType sourceTupleType = null;\n+        if (sourceTypeTag == TypeTags.TUPLE_TAG) {\n+            sourceTupleType = (BTupleType) sourceType;\n+        } else {\n+            BArrayType sourceArrayType = (BArrayType) sourceType;\n+            BType sourceElementType = sourceArrayType.getElementType();\n+\n+            switch (sourceArrayType.getState()) {\n+                case OPEN:\n+                    if (targetRestType == null) {\n+                        return false;\n+                    }\n+                    if (targetTypes.isEmpty()) {\n+                        return checkIsType(sourceElementType, targetRestType, unresolvedTypes);\n+                    }\n+                    return false;\n+                case CLOSED:\n+                    if (sourceArrayType.getSize() >= targetTypes.size()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4a5d761508c0140ad1274a32ade6b284fa0ad63"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTg1Mzg4OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTowODowOVrOHdBLVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTowODowOVrOHdBLVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE5MDAzOA==", "bodyText": "better to do the memberTypesMatch check first. Then we can fail-fast", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26173#discussion_r500190038", "createdAt": "2020-10-06T11:08:09Z", "author": {"login": "SupunS"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1279,32 +1297,118 @@ private static boolean checkIsArrayType(BType sourceType, BArrayType targetType,\n     }\n \n     private static boolean checkIsTupleType(BType sourceType, BTupleType targetType, List<TypePair> unresolvedTypes) {\n-        if (sourceType.getTag() != TypeTags.TUPLE_TAG) {\n-            return false;\n+        int sourceTypeTag = sourceType.getTag();\n+\n+        if (sourceTypeTag == TypeTags.UNION_TAG) {\n+            for (BType memberType : ((BUnionType) sourceType).getMemberTypes()) {\n+                if (!checkIsTupleType(memberType, targetType, unresolvedTypes)) {\n+                    return false;\n+                }\n+            }\n+            return true;\n         }\n \n-        List<BType> sourceTypes = new ArrayList<>(((BTupleType) sourceType).getTupleTypes());\n-        BType sourceRestType = ((BTupleType) sourceType).getRestType();\n-        if (sourceRestType != null) {\n-            sourceTypes.add(sourceRestType);\n+        if (sourceTypeTag != TypeTags.ARRAY_TAG && sourceTypeTag != TypeTags.TUPLE_TAG) {\n+            return false;\n         }\n \n         List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n         BType targetRestType = targetType.getRestType();\n-        if (targetRestType != null) {\n-            targetTypes.add(targetRestType);\n+\n+        BTupleType sourceTupleType = null;\n+        if (sourceTypeTag == TypeTags.TUPLE_TAG) {\n+            sourceTupleType = (BTupleType) sourceType;\n+        } else {\n+            BArrayType sourceArrayType = (BArrayType) sourceType;\n+            BType sourceElementType = sourceArrayType.getElementType();\n+\n+            switch (sourceArrayType.getState()) {\n+                case OPEN:\n+                    if (targetRestType == null) {\n+                        return false;\n+                    }\n+                    if (targetTypes.isEmpty()) {\n+                        return checkIsType(sourceElementType, targetRestType, unresolvedTypes);\n+                    }\n+                    return false;\n+                case CLOSED:\n+                    if (sourceArrayType.getSize() >= targetTypes.size()) {\n+                        if (targetTypes.isEmpty()) {\n+                            if (targetRestType != null) {\n+                                return checkIsType(sourceElementType, targetRestType, unresolvedTypes);\n+                            }\n+                            if (sourceArrayType.getSize() == 0) {\n+                                return true;\n+                            }\n+                            return false;\n+                        }\n+\n+                        boolean memberTypesMatch = true;\n+\n+                        for (BType targetElementType : targetTypes) {\n+                            if (!(checkIsType(sourceElementType, targetElementType, unresolvedTypes))) {\n+                                memberTypesMatch = false;\n+                            }\n+                        }\n+                        if (sourceArrayType.getSize() == targetTypes.size()) {\n+                            return memberTypesMatch;\n+                        }\n+                        if (targetRestType != null) {\n+                            return (checkIsType(sourceElementType, targetRestType, unresolvedTypes)\n+                                    && memberTypesMatch);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4a5d761508c0140ad1274a32ade6b284fa0ad63"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTg1Nzc3OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTowOToyMFrOHdBNsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTowOToyMFrOHdBNsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE5MDY0Mw==", "bodyText": "same as above", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26173#discussion_r500190643", "createdAt": "2020-10-06T11:09:20Z", "author": {"login": "SupunS"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1279,32 +1297,118 @@ private static boolean checkIsArrayType(BType sourceType, BArrayType targetType,\n     }\n \n     private static boolean checkIsTupleType(BType sourceType, BTupleType targetType, List<TypePair> unresolvedTypes) {\n-        if (sourceType.getTag() != TypeTags.TUPLE_TAG) {\n-            return false;\n+        int sourceTypeTag = sourceType.getTag();\n+\n+        if (sourceTypeTag == TypeTags.UNION_TAG) {\n+            for (BType memberType : ((BUnionType) sourceType).getMemberTypes()) {\n+                if (!checkIsTupleType(memberType, targetType, unresolvedTypes)) {\n+                    return false;\n+                }\n+            }\n+            return true;\n         }\n \n-        List<BType> sourceTypes = new ArrayList<>(((BTupleType) sourceType).getTupleTypes());\n-        BType sourceRestType = ((BTupleType) sourceType).getRestType();\n-        if (sourceRestType != null) {\n-            sourceTypes.add(sourceRestType);\n+        if (sourceTypeTag != TypeTags.ARRAY_TAG && sourceTypeTag != TypeTags.TUPLE_TAG) {\n+            return false;\n         }\n \n         List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n         BType targetRestType = targetType.getRestType();\n-        if (targetRestType != null) {\n-            targetTypes.add(targetRestType);\n+\n+        BTupleType sourceTupleType = null;\n+        if (sourceTypeTag == TypeTags.TUPLE_TAG) {\n+            sourceTupleType = (BTupleType) sourceType;\n+        } else {\n+            BArrayType sourceArrayType = (BArrayType) sourceType;\n+            BType sourceElementType = sourceArrayType.getElementType();\n+\n+            switch (sourceArrayType.getState()) {\n+                case OPEN:\n+                    if (targetRestType == null) {\n+                        return false;\n+                    }\n+                    if (targetTypes.isEmpty()) {\n+                        return checkIsType(sourceElementType, targetRestType, unresolvedTypes);\n+                    }\n+                    return false;\n+                case CLOSED:\n+                    if (sourceArrayType.getSize() >= targetTypes.size()) {\n+                        if (targetTypes.isEmpty()) {\n+                            if (targetRestType != null) {\n+                                return checkIsType(sourceElementType, targetRestType, unresolvedTypes);\n+                            }\n+                            if (sourceArrayType.getSize() == 0) {\n+                                return true;\n+                            }\n+                            return false;\n+                        }\n+\n+                        boolean memberTypesMatch = true;\n+\n+                        for (BType targetElementType : targetTypes) {\n+                            if (!(checkIsType(sourceElementType, targetElementType, unresolvedTypes))) {\n+                                memberTypesMatch = false;\n+                            }\n+                        }\n+                        if (sourceArrayType.getSize() == targetTypes.size()) {\n+                            return memberTypesMatch;\n+                        }\n+                        if (targetRestType != null) {\n+                            return (checkIsType(sourceElementType, targetRestType, unresolvedTypes)\n+                                    && memberTypesMatch);\n+                        }\n+                        return false;\n+                    } else if (sourceArrayType.getSize() < targetTypes.size()) {\n+                        return false;\n+                    }\n+                    break;\n+            }\n+        }\n+\n+        List<BType> sourceTypes = new ArrayList<>(sourceTupleType.getTupleTypes());\n+        BType sourceRestType = sourceTupleType.getRestType();\n+\n+        if (sourceRestType != null && targetRestType == null) {\n+            return false;\n         }\n+        int sourceTypeSize = sourceTypes.size();\n+        int targetTypeSize = targetTypes.size();\n \n-        if (sourceTypes.size() != targetTypes.size()) {\n+        if ((sourceRestType == null && targetRestType == null) && sourceTypeSize != targetTypeSize) {\n             return false;\n         }\n \n-        for (int i = 0; i < sourceTypes.size(); i++) {\n-            if (!checkIsType(sourceTypes.get(i), targetTypes.get(i), unresolvedTypes)) {\n-                return false;\n+        boolean memberTypesMatch = true;\n+\n+        if (sourceTypeSize >= targetTypeSize) {\n+            for (int i = 0; i < targetTypeSize; i++) {\n+                if (!checkIsType(sourceTypes.get(i), targetTypes.get(i), unresolvedTypes)) {\n+                    memberTypesMatch = false;\n+                }\n+            }\n+            if (sourceTypeSize == targetTypeSize) {\n+                if (sourceRestType != null) {\n+                    return (checkIsType (sourceRestType, targetRestType, unresolvedTypes)\n+                            && memberTypesMatch);\n+                }\n+                return memberTypesMatch;\n             }\n+\n+            boolean remainingMemberTypesMatch = true;\n+\n+            for (int i = targetTypeSize; i < sourceTypeSize; i++) {\n+                if (!checkIsType(sourceTypes.get(i), targetRestType, unresolvedTypes)) {\n+                    remainingMemberTypesMatch = false;\n+                }\n+            }\n+            if (sourceRestType != null) {\n+                return (checkIsType (sourceRestType, targetRestType, unresolvedTypes)\n+                        && memberTypesMatch && remainingMemberTypesMatch);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4a5d761508c0140ad1274a32ade6b284fa0ad63"}, "originalPosition": 208}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTg1OTMxOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTowOTo0NlrOHdBOpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMTowOTo0NlrOHdBOpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE5MDg4Nw==", "bodyText": "additional parenthesis", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26173#discussion_r500190887", "createdAt": "2020-10-06T11:09:46Z", "author": {"login": "SupunS"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1279,32 +1297,118 @@ private static boolean checkIsArrayType(BType sourceType, BArrayType targetType,\n     }\n \n     private static boolean checkIsTupleType(BType sourceType, BTupleType targetType, List<TypePair> unresolvedTypes) {\n-        if (sourceType.getTag() != TypeTags.TUPLE_TAG) {\n-            return false;\n+        int sourceTypeTag = sourceType.getTag();\n+\n+        if (sourceTypeTag == TypeTags.UNION_TAG) {\n+            for (BType memberType : ((BUnionType) sourceType).getMemberTypes()) {\n+                if (!checkIsTupleType(memberType, targetType, unresolvedTypes)) {\n+                    return false;\n+                }\n+            }\n+            return true;\n         }\n \n-        List<BType> sourceTypes = new ArrayList<>(((BTupleType) sourceType).getTupleTypes());\n-        BType sourceRestType = ((BTupleType) sourceType).getRestType();\n-        if (sourceRestType != null) {\n-            sourceTypes.add(sourceRestType);\n+        if (sourceTypeTag != TypeTags.ARRAY_TAG && sourceTypeTag != TypeTags.TUPLE_TAG) {\n+            return false;\n         }\n \n         List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n         BType targetRestType = targetType.getRestType();\n-        if (targetRestType != null) {\n-            targetTypes.add(targetRestType);\n+\n+        BTupleType sourceTupleType = null;\n+        if (sourceTypeTag == TypeTags.TUPLE_TAG) {\n+            sourceTupleType = (BTupleType) sourceType;\n+        } else {\n+            BArrayType sourceArrayType = (BArrayType) sourceType;\n+            BType sourceElementType = sourceArrayType.getElementType();\n+\n+            switch (sourceArrayType.getState()) {\n+                case OPEN:\n+                    if (targetRestType == null) {\n+                        return false;\n+                    }\n+                    if (targetTypes.isEmpty()) {\n+                        return checkIsType(sourceElementType, targetRestType, unresolvedTypes);\n+                    }\n+                    return false;\n+                case CLOSED:\n+                    if (sourceArrayType.getSize() >= targetTypes.size()) {\n+                        if (targetTypes.isEmpty()) {\n+                            if (targetRestType != null) {\n+                                return checkIsType(sourceElementType, targetRestType, unresolvedTypes);\n+                            }\n+                            if (sourceArrayType.getSize() == 0) {\n+                                return true;\n+                            }\n+                            return false;\n+                        }\n+\n+                        boolean memberTypesMatch = true;\n+\n+                        for (BType targetElementType : targetTypes) {\n+                            if (!(checkIsType(sourceElementType, targetElementType, unresolvedTypes))) {\n+                                memberTypesMatch = false;\n+                            }\n+                        }\n+                        if (sourceArrayType.getSize() == targetTypes.size()) {\n+                            return memberTypesMatch;\n+                        }\n+                        if (targetRestType != null) {\n+                            return (checkIsType(sourceElementType, targetRestType, unresolvedTypes)\n+                                    && memberTypesMatch);\n+                        }\n+                        return false;\n+                    } else if (sourceArrayType.getSize() < targetTypes.size()) {\n+                        return false;\n+                    }\n+                    break;\n+            }\n+        }\n+\n+        List<BType> sourceTypes = new ArrayList<>(sourceTupleType.getTupleTypes());\n+        BType sourceRestType = sourceTupleType.getRestType();\n+\n+        if (sourceRestType != null && targetRestType == null) {\n+            return false;\n         }\n+        int sourceTypeSize = sourceTypes.size();\n+        int targetTypeSize = targetTypes.size();\n \n-        if (sourceTypes.size() != targetTypes.size()) {\n+        if ((sourceRestType == null && targetRestType == null) && sourceTypeSize != targetTypeSize) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4a5d761508c0140ad1274a32ade6b284fa0ad63"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzYyODk4OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzoyNjowNVrOHdSWcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzoyNjowNVrOHdSWcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3MTQwOQ==", "bodyText": "Shall we extract sourceTupleType.getRestType() out to a variable since it is used multiple times?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26173#discussion_r500471409", "createdAt": "2020-10-06T17:26:05Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1242,32 +1247,45 @@ private static boolean checkIsArrayType(BType sourceType, BArrayType targetType,\n                 tupleTypes.add(sourceTupleType.getRestType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60589a1f98d261191694dbb369e8fc86a47e3810"}, "originalPosition": 233}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzcyNDM5OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzo1MToyNVrOHdTSVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzo1MToyNVrOHdTSVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ4Njc0MA==", "bodyText": "Not a change introduced by this PR, but reusing the flags from sourceTupleType when creating the union type could lead to issues. We also need to pass whether or not it is readonly.\nFor example, where the tuple is of type [int, ()] the union type would be int?. Thus even though the source tuple is not nilable, the union type is, and the flags should reflect that. Shall we switch to use the constructor that accepts readonly instead?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                new BArrayType(new BUnionType(new ArrayList<>(tupleTypes), sourceTupleType.getTypeFlags()));\n          \n          \n            \n                                new BArrayType(new BUnionType(new ArrayList<>(tupleTypes), sourceTupleType.isReadOnly()));\n          \n      \n    \n    \n  \n\nPlease check other array creations in this method too.\nShall we also add simple runtime tests for these?\ne.g.,\n    [int, ()] x = [1, ()];\n    assertTrue(<any> x is (int|string?)[]);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26173#discussion_r500486740", "createdAt": "2020-10-06T17:51:25Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1242,32 +1247,45 @@ private static boolean checkIsArrayType(BType sourceType, BArrayType targetType,\n                 tupleTypes.add(sourceTupleType.getRestType());\n             }\n             if (tupleTypes.isEmpty()) {\n-                return targetType.getState() == ArrayState.UNSEALED || targetType.getSize() == 0;\n+                return targetType.getState() == ArrayState.OPEN || targetType.getSize() == 0;\n             }\n+\n+            if (sourceTupleType.getRestType() != null && targetType.getState() == ArrayState.OPEN) {\n+                boolean memberTypesMatch = true;\n+                if (!tupleTypes.isEmpty()) {\n+                    for (BType sourceElementType : tupleTypes) {\n+                        if (!checkIsType(sourceElementType, targetElementType, unresolvedTypes)) {\n+                            memberTypesMatch = false;\n+                        }\n+                    }\n+                }\n+                if (memberTypesMatch) {\n+                    BType sourceRestType = sourceTupleType.getRestType();\n+                    return checkIsType(sourceRestType, targetElementType, unresolvedTypes);\n+                }\n+                return false;\n+            }\n+\n             sourceArrayType =\n                     new BArrayType(new BUnionType(new ArrayList<>(tupleTypes), sourceTupleType.getTypeFlags()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60589a1f98d261191694dbb369e8fc86a47e3810"}, "originalPosition": 257}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzkxNTY2OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODozNzo1OVrOHdVEkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODozNzo1OVrOHdVEkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUxNTk4NA==", "bodyText": "Isn't this always true because we return at L1250?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26173#discussion_r500515984", "createdAt": "2020-10-06T18:37:59Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1242,32 +1247,45 @@ private static boolean checkIsArrayType(BType sourceType, BArrayType targetType,\n                 tupleTypes.add(sourceTupleType.getRestType());\n             }\n             if (tupleTypes.isEmpty()) {\n-                return targetType.getState() == ArrayState.UNSEALED || targetType.getSize() == 0;\n+                return targetType.getState() == ArrayState.OPEN || targetType.getSize() == 0;\n             }\n+\n+            if (sourceTupleType.getRestType() != null && targetType.getState() == ArrayState.OPEN) {\n+                boolean memberTypesMatch = true;\n+                if (!tupleTypes.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60589a1f98d261191694dbb369e8fc86a47e3810"}, "originalPosition": 242}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzk1NjI4OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo0OTowNFrOHdVdjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMDoxNDoxNVrOHgRO4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyMjM4MA==", "bodyText": "Since the rest type is added to tupleTypes in L1247, isn't this checked already?\nWhy do we need to special case the sourceTupleType.getRestType() != null && targetType.getState() == ArrayState.OPEN scenario anyway?\nShouldn't we special case the scenario where the target type is a closed array instead? The following should pass, but doesn't atm.\n    [int, ()] x = [1, ()];\n    assertTrue(<any> x is (string|int?)[2]);\nWhen the target array is open, can't we let the flow to continue by setting the proper state to sourceArrayType?\ni.e.,\n\ntuple type with no rest type - CLOSED\ntuple type with rest type - OPEN", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26173#discussion_r500522380", "createdAt": "2020-10-06T18:49:04Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1242,32 +1247,45 @@ private static boolean checkIsArrayType(BType sourceType, BArrayType targetType,\n                 tupleTypes.add(sourceTupleType.getRestType());\n             }\n             if (tupleTypes.isEmpty()) {\n-                return targetType.getState() == ArrayState.UNSEALED || targetType.getSize() == 0;\n+                return targetType.getState() == ArrayState.OPEN || targetType.getSize() == 0;\n             }\n+\n+            if (sourceTupleType.getRestType() != null && targetType.getState() == ArrayState.OPEN) {\n+                boolean memberTypesMatch = true;\n+                if (!tupleTypes.isEmpty()) {\n+                    for (BType sourceElementType : tupleTypes) {\n+                        if (!checkIsType(sourceElementType, targetElementType, unresolvedTypes)) {\n+                            memberTypesMatch = false;\n+                        }\n+                    }\n+                }\n+                if (memberTypesMatch) {\n+                    BType sourceRestType = sourceTupleType.getRestType();\n+                    return checkIsType(sourceRestType, targetElementType, unresolvedTypes);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60589a1f98d261191694dbb369e8fc86a47e3810"}, "originalPosition": 252}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU5ODgxNw==", "bodyText": "Ya actually the logic here is a bit wrong. I re-did the whole tuple evaluation in the checkIsArrayType().", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26173#discussion_r503598817", "createdAt": "2020-10-13T00:14:15Z", "author": {"login": "suleka96"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1242,32 +1247,45 @@ private static boolean checkIsArrayType(BType sourceType, BArrayType targetType,\n                 tupleTypes.add(sourceTupleType.getRestType());\n             }\n             if (tupleTypes.isEmpty()) {\n-                return targetType.getState() == ArrayState.UNSEALED || targetType.getSize() == 0;\n+                return targetType.getState() == ArrayState.OPEN || targetType.getSize() == 0;\n             }\n+\n+            if (sourceTupleType.getRestType() != null && targetType.getState() == ArrayState.OPEN) {\n+                boolean memberTypesMatch = true;\n+                if (!tupleTypes.isEmpty()) {\n+                    for (BType sourceElementType : tupleTypes) {\n+                        if (!checkIsType(sourceElementType, targetElementType, unresolvedTypes)) {\n+                            memberTypesMatch = false;\n+                        }\n+                    }\n+                }\n+                if (memberTypesMatch) {\n+                    BType sourceRestType = sourceTupleType.getRestType();\n+                    return checkIsType(sourceRestType, targetElementType, unresolvedTypes);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyMjM4MA=="}, "originalCommit": {"oid": "60589a1f98d261191694dbb369e8fc86a47e3810"}, "originalPosition": 252}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzk4MjI3OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo1NjoxMFrOHdVtlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo1NjoxMFrOHdVtlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyNjQ4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    if (sourceArrayType.getSize() == 0) {\n          \n          \n            \n                                        return true;\n          \n          \n            \n                                    }\n          \n          \n            \n                                    return false;\n          \n          \n            \n                                    return sourceArrayType.getSize() == 0;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26173#discussion_r500526486", "createdAt": "2020-10-06T18:56:10Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1279,32 +1297,115 @@ private static boolean checkIsArrayType(BType sourceType, BArrayType targetType,\n     }\n \n     private static boolean checkIsTupleType(BType sourceType, BTupleType targetType, List<TypePair> unresolvedTypes) {\n-        if (sourceType.getTag() != TypeTags.TUPLE_TAG) {\n-            return false;\n+        int sourceTypeTag = sourceType.getTag();\n+\n+        if (sourceTypeTag == TypeTags.UNION_TAG) {\n+            for (BType memberType : ((BUnionType) sourceType).getMemberTypes()) {\n+                if (!checkIsTupleType(memberType, targetType, unresolvedTypes)) {\n+                    return false;\n+                }\n+            }\n+            return true;\n         }\n \n-        List<BType> sourceTypes = new ArrayList<>(((BTupleType) sourceType).getTupleTypes());\n-        BType sourceRestType = ((BTupleType) sourceType).getRestType();\n-        if (sourceRestType != null) {\n-            sourceTypes.add(sourceRestType);\n+        if (sourceTypeTag != TypeTags.ARRAY_TAG && sourceTypeTag != TypeTags.TUPLE_TAG) {\n+            return false;\n         }\n \n         List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n         BType targetRestType = targetType.getRestType();\n-        if (targetRestType != null) {\n-            targetTypes.add(targetRestType);\n+\n+        BTupleType sourceTupleType = null;\n+        if (sourceTypeTag == TypeTags.TUPLE_TAG) {\n+            sourceTupleType = (BTupleType) sourceType;\n+        } else {\n+            BArrayType sourceArrayType = (BArrayType) sourceType;\n+            BType sourceElementType = sourceArrayType.getElementType();\n+\n+            switch (sourceArrayType.getState()) {\n+                case OPEN:\n+                    if (targetRestType == null) {\n+                        return false;\n+                    }\n+                    if (targetTypes.isEmpty()) {\n+                        return checkIsType(sourceElementType, targetRestType, unresolvedTypes);\n+                    }\n+                    return false;\n+                case CLOSED:\n+                    if (sourceArrayType.getSize() < targetTypes.size()) {\n+                        return false;\n+                    }\n+                    if (targetTypes.isEmpty()) {\n+                        if (targetRestType != null) {\n+                            return checkIsType(sourceElementType, targetRestType, unresolvedTypes);\n+                        }\n+                        if (sourceArrayType.getSize() == 0) {\n+                            return true;\n+                        }\n+                        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60589a1f98d261191694dbb369e8fc86a47e3810"}, "originalPosition": 346}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzk4ODQzOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo1Nzo0OFrOHdVxUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo1Nzo0OFrOHdVxUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyNzQ0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    return (memberTypesMatch &&\n          \n          \n            \n                                            checkIsType(sourceElementType, targetRestType, unresolvedTypes));\n          \n          \n            \n                                    return memberTypesMatch &&\n          \n          \n            \n                                            checkIsType(sourceElementType, targetRestType, unresolvedTypes);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26173#discussion_r500527443", "createdAt": "2020-10-06T18:57:48Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1279,32 +1297,115 @@ private static boolean checkIsArrayType(BType sourceType, BArrayType targetType,\n     }\n \n     private static boolean checkIsTupleType(BType sourceType, BTupleType targetType, List<TypePair> unresolvedTypes) {\n-        if (sourceType.getTag() != TypeTags.TUPLE_TAG) {\n-            return false;\n+        int sourceTypeTag = sourceType.getTag();\n+\n+        if (sourceTypeTag == TypeTags.UNION_TAG) {\n+            for (BType memberType : ((BUnionType) sourceType).getMemberTypes()) {\n+                if (!checkIsTupleType(memberType, targetType, unresolvedTypes)) {\n+                    return false;\n+                }\n+            }\n+            return true;\n         }\n \n-        List<BType> sourceTypes = new ArrayList<>(((BTupleType) sourceType).getTupleTypes());\n-        BType sourceRestType = ((BTupleType) sourceType).getRestType();\n-        if (sourceRestType != null) {\n-            sourceTypes.add(sourceRestType);\n+        if (sourceTypeTag != TypeTags.ARRAY_TAG && sourceTypeTag != TypeTags.TUPLE_TAG) {\n+            return false;\n         }\n \n         List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n         BType targetRestType = targetType.getRestType();\n-        if (targetRestType != null) {\n-            targetTypes.add(targetRestType);\n+\n+        BTupleType sourceTupleType = null;\n+        if (sourceTypeTag == TypeTags.TUPLE_TAG) {\n+            sourceTupleType = (BTupleType) sourceType;\n+        } else {\n+            BArrayType sourceArrayType = (BArrayType) sourceType;\n+            BType sourceElementType = sourceArrayType.getElementType();\n+\n+            switch (sourceArrayType.getState()) {\n+                case OPEN:\n+                    if (targetRestType == null) {\n+                        return false;\n+                    }\n+                    if (targetTypes.isEmpty()) {\n+                        return checkIsType(sourceElementType, targetRestType, unresolvedTypes);\n+                    }\n+                    return false;\n+                case CLOSED:\n+                    if (sourceArrayType.getSize() < targetTypes.size()) {\n+                        return false;\n+                    }\n+                    if (targetTypes.isEmpty()) {\n+                        if (targetRestType != null) {\n+                            return checkIsType(sourceElementType, targetRestType, unresolvedTypes);\n+                        }\n+                        if (sourceArrayType.getSize() == 0) {\n+                            return true;\n+                        }\n+                        return false;\n+                    }\n+                    boolean memberTypesMatch = true;\n+\n+                    for (BType targetElementType : targetTypes) {\n+                        if (!(checkIsType(sourceElementType, targetElementType, unresolvedTypes))) {\n+                            memberTypesMatch = false;\n+                        }\n+                    }\n+                    if (sourceArrayType.getSize() == targetTypes.size()) {\n+                        return memberTypesMatch;\n+                    }\n+                    if (targetRestType != null) {\n+                        return (memberTypesMatch &&\n+                                checkIsType(sourceElementType, targetRestType, unresolvedTypes));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60589a1f98d261191694dbb369e8fc86a47e3810"}, "originalPosition": 360}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzk5ODAzOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTowMDoyNFrOHdV3UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTowMDoyNFrOHdV3UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyODk3Nw==", "bodyText": "Since we seem to be returning within the else block shall we refactor the code to do something like\nif (sourceTypeTag == TypeTags.ARRAY_TAG) { \n    // move logic in else\n}\n\nBTupleType sourceTupleType = (BTupleType) sourceType;\nReduces the indentation and the variable will be defined closer to where it is used.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26173#discussion_r500528977", "createdAt": "2020-10-06T19:00:24Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1279,32 +1297,115 @@ private static boolean checkIsArrayType(BType sourceType, BArrayType targetType,\n     }\n \n     private static boolean checkIsTupleType(BType sourceType, BTupleType targetType, List<TypePair> unresolvedTypes) {\n-        if (sourceType.getTag() != TypeTags.TUPLE_TAG) {\n-            return false;\n+        int sourceTypeTag = sourceType.getTag();\n+\n+        if (sourceTypeTag == TypeTags.UNION_TAG) {\n+            for (BType memberType : ((BUnionType) sourceType).getMemberTypes()) {\n+                if (!checkIsTupleType(memberType, targetType, unresolvedTypes)) {\n+                    return false;\n+                }\n+            }\n+            return true;\n         }\n \n-        List<BType> sourceTypes = new ArrayList<>(((BTupleType) sourceType).getTupleTypes());\n-        BType sourceRestType = ((BTupleType) sourceType).getRestType();\n-        if (sourceRestType != null) {\n-            sourceTypes.add(sourceRestType);\n+        if (sourceTypeTag != TypeTags.ARRAY_TAG && sourceTypeTag != TypeTags.TUPLE_TAG) {\n+            return false;\n         }\n \n         List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n         BType targetRestType = targetType.getRestType();\n-        if (targetRestType != null) {\n-            targetTypes.add(targetRestType);\n+\n+        BTupleType sourceTupleType = null;\n+        if (sourceTypeTag == TypeTags.TUPLE_TAG) {\n+            sourceTupleType = (BTupleType) sourceType;\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60589a1f98d261191694dbb369e8fc86a47e3810"}, "originalPosition": 322}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDAwMzIxOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTowMjowMFrOHdV6rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTowMjowMFrOHdV6rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyOTgzNw==", "bodyText": "We can switch the check here also, and remove the else block.\n        if (sourceTypeSize < targetTypeSize) {\n            return false;\n        }\n\n        for (int i = 0; i < targetTypeSize; i++) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26173#discussion_r500529837", "createdAt": "2020-10-06T19:02:00Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1279,32 +1297,115 @@ private static boolean checkIsArrayType(BType sourceType, BArrayType targetType,\n     }\n \n     private static boolean checkIsTupleType(BType sourceType, BTupleType targetType, List<TypePair> unresolvedTypes) {\n-        if (sourceType.getTag() != TypeTags.TUPLE_TAG) {\n-            return false;\n+        int sourceTypeTag = sourceType.getTag();\n+\n+        if (sourceTypeTag == TypeTags.UNION_TAG) {\n+            for (BType memberType : ((BUnionType) sourceType).getMemberTypes()) {\n+                if (!checkIsTupleType(memberType, targetType, unresolvedTypes)) {\n+                    return false;\n+                }\n+            }\n+            return true;\n         }\n \n-        List<BType> sourceTypes = new ArrayList<>(((BTupleType) sourceType).getTupleTypes());\n-        BType sourceRestType = ((BTupleType) sourceType).getRestType();\n-        if (sourceRestType != null) {\n-            sourceTypes.add(sourceRestType);\n+        if (sourceTypeTag != TypeTags.ARRAY_TAG && sourceTypeTag != TypeTags.TUPLE_TAG) {\n+            return false;\n         }\n \n         List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n         BType targetRestType = targetType.getRestType();\n-        if (targetRestType != null) {\n-            targetTypes.add(targetRestType);\n+\n+        BTupleType sourceTupleType = null;\n+        if (sourceTypeTag == TypeTags.TUPLE_TAG) {\n+            sourceTupleType = (BTupleType) sourceType;\n+        } else {\n+            BArrayType sourceArrayType = (BArrayType) sourceType;\n+            BType sourceElementType = sourceArrayType.getElementType();\n+\n+            switch (sourceArrayType.getState()) {\n+                case OPEN:\n+                    if (targetRestType == null) {\n+                        return false;\n+                    }\n+                    if (targetTypes.isEmpty()) {\n+                        return checkIsType(sourceElementType, targetRestType, unresolvedTypes);\n+                    }\n+                    return false;\n+                case CLOSED:\n+                    if (sourceArrayType.getSize() < targetTypes.size()) {\n+                        return false;\n+                    }\n+                    if (targetTypes.isEmpty()) {\n+                        if (targetRestType != null) {\n+                            return checkIsType(sourceElementType, targetRestType, unresolvedTypes);\n+                        }\n+                        if (sourceArrayType.getSize() == 0) {\n+                            return true;\n+                        }\n+                        return false;\n+                    }\n+                    boolean memberTypesMatch = true;\n+\n+                    for (BType targetElementType : targetTypes) {\n+                        if (!(checkIsType(sourceElementType, targetElementType, unresolvedTypes))) {\n+                            memberTypesMatch = false;\n+                        }\n+                    }\n+                    if (sourceArrayType.getSize() == targetTypes.size()) {\n+                        return memberTypesMatch;\n+                    }\n+                    if (targetRestType != null) {\n+                        return (memberTypesMatch &&\n+                                checkIsType(sourceElementType, targetRestType, unresolvedTypes));\n+                    }\n+                    return false;\n+            }\n         }\n \n-        if (sourceTypes.size() != targetTypes.size()) {\n+        List<BType> sourceTypes = new ArrayList<>(sourceTupleType.getTupleTypes());\n+        BType sourceRestType = sourceTupleType.getRestType();\n+\n+        if (sourceRestType != null && targetRestType == null) {\n             return false;\n         }\n+        int sourceTypeSize = sourceTypes.size();\n+        int targetTypeSize = targetTypes.size();\n \n-        for (int i = 0; i < sourceTypes.size(); i++) {\n-            if (!checkIsType(sourceTypes.get(i), targetTypes.get(i), unresolvedTypes)) {\n-                return false;\n+        if (sourceRestType == null && targetRestType == null && sourceTypeSize != targetTypeSize) {\n+            return false;\n+        }\n+\n+        boolean memberTypesMatch = true;\n+\n+        if (sourceTypeSize >= targetTypeSize) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60589a1f98d261191694dbb369e8fc86a47e3810"}, "originalPosition": 385}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDAwNjQyOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTowMzowNFrOHdV8tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTowMzo1M1rOHdV-fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUzMDM1OQ==", "bodyText": "Can't we directly return false here instead of setting it to memberTypesMatch?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26173#discussion_r500530359", "createdAt": "2020-10-06T19:03:04Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1279,32 +1297,115 @@ private static boolean checkIsArrayType(BType sourceType, BArrayType targetType,\n     }\n \n     private static boolean checkIsTupleType(BType sourceType, BTupleType targetType, List<TypePair> unresolvedTypes) {\n-        if (sourceType.getTag() != TypeTags.TUPLE_TAG) {\n-            return false;\n+        int sourceTypeTag = sourceType.getTag();\n+\n+        if (sourceTypeTag == TypeTags.UNION_TAG) {\n+            for (BType memberType : ((BUnionType) sourceType).getMemberTypes()) {\n+                if (!checkIsTupleType(memberType, targetType, unresolvedTypes)) {\n+                    return false;\n+                }\n+            }\n+            return true;\n         }\n \n-        List<BType> sourceTypes = new ArrayList<>(((BTupleType) sourceType).getTupleTypes());\n-        BType sourceRestType = ((BTupleType) sourceType).getRestType();\n-        if (sourceRestType != null) {\n-            sourceTypes.add(sourceRestType);\n+        if (sourceTypeTag != TypeTags.ARRAY_TAG && sourceTypeTag != TypeTags.TUPLE_TAG) {\n+            return false;\n         }\n \n         List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n         BType targetRestType = targetType.getRestType();\n-        if (targetRestType != null) {\n-            targetTypes.add(targetRestType);\n+\n+        BTupleType sourceTupleType = null;\n+        if (sourceTypeTag == TypeTags.TUPLE_TAG) {\n+            sourceTupleType = (BTupleType) sourceType;\n+        } else {\n+            BArrayType sourceArrayType = (BArrayType) sourceType;\n+            BType sourceElementType = sourceArrayType.getElementType();\n+\n+            switch (sourceArrayType.getState()) {\n+                case OPEN:\n+                    if (targetRestType == null) {\n+                        return false;\n+                    }\n+                    if (targetTypes.isEmpty()) {\n+                        return checkIsType(sourceElementType, targetRestType, unresolvedTypes);\n+                    }\n+                    return false;\n+                case CLOSED:\n+                    if (sourceArrayType.getSize() < targetTypes.size()) {\n+                        return false;\n+                    }\n+                    if (targetTypes.isEmpty()) {\n+                        if (targetRestType != null) {\n+                            return checkIsType(sourceElementType, targetRestType, unresolvedTypes);\n+                        }\n+                        if (sourceArrayType.getSize() == 0) {\n+                            return true;\n+                        }\n+                        return false;\n+                    }\n+                    boolean memberTypesMatch = true;\n+\n+                    for (BType targetElementType : targetTypes) {\n+                        if (!(checkIsType(sourceElementType, targetElementType, unresolvedTypes))) {\n+                            memberTypesMatch = false;\n+                        }\n+                    }\n+                    if (sourceArrayType.getSize() == targetTypes.size()) {\n+                        return memberTypesMatch;\n+                    }\n+                    if (targetRestType != null) {\n+                        return (memberTypesMatch &&\n+                                checkIsType(sourceElementType, targetRestType, unresolvedTypes));\n+                    }\n+                    return false;\n+            }\n         }\n \n-        if (sourceTypes.size() != targetTypes.size()) {\n+        List<BType> sourceTypes = new ArrayList<>(sourceTupleType.getTupleTypes());\n+        BType sourceRestType = sourceTupleType.getRestType();\n+\n+        if (sourceRestType != null && targetRestType == null) {\n             return false;\n         }\n+        int sourceTypeSize = sourceTypes.size();\n+        int targetTypeSize = targetTypes.size();\n \n-        for (int i = 0; i < sourceTypes.size(); i++) {\n-            if (!checkIsType(sourceTypes.get(i), targetTypes.get(i), unresolvedTypes)) {\n-                return false;\n+        if (sourceRestType == null && targetRestType == null && sourceTypeSize != targetTypeSize) {\n+            return false;\n+        }\n+\n+        boolean memberTypesMatch = true;\n+\n+        if (sourceTypeSize >= targetTypeSize) {\n+            for (int i = 0; i < targetTypeSize; i++) {\n+                if (!checkIsType(sourceTypes.get(i), targetTypes.get(i), unresolvedTypes)) {\n+                    memberTypesMatch = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60589a1f98d261191694dbb369e8fc86a47e3810"}, "originalPosition": 388}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUzMDgxMg==", "bodyText": "Check remainingMemberTypesMatch too.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26173#discussion_r500530812", "createdAt": "2020-10-06T19:03:53Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1279,32 +1297,115 @@ private static boolean checkIsArrayType(BType sourceType, BArrayType targetType,\n     }\n \n     private static boolean checkIsTupleType(BType sourceType, BTupleType targetType, List<TypePair> unresolvedTypes) {\n-        if (sourceType.getTag() != TypeTags.TUPLE_TAG) {\n-            return false;\n+        int sourceTypeTag = sourceType.getTag();\n+\n+        if (sourceTypeTag == TypeTags.UNION_TAG) {\n+            for (BType memberType : ((BUnionType) sourceType).getMemberTypes()) {\n+                if (!checkIsTupleType(memberType, targetType, unresolvedTypes)) {\n+                    return false;\n+                }\n+            }\n+            return true;\n         }\n \n-        List<BType> sourceTypes = new ArrayList<>(((BTupleType) sourceType).getTupleTypes());\n-        BType sourceRestType = ((BTupleType) sourceType).getRestType();\n-        if (sourceRestType != null) {\n-            sourceTypes.add(sourceRestType);\n+        if (sourceTypeTag != TypeTags.ARRAY_TAG && sourceTypeTag != TypeTags.TUPLE_TAG) {\n+            return false;\n         }\n \n         List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n         BType targetRestType = targetType.getRestType();\n-        if (targetRestType != null) {\n-            targetTypes.add(targetRestType);\n+\n+        BTupleType sourceTupleType = null;\n+        if (sourceTypeTag == TypeTags.TUPLE_TAG) {\n+            sourceTupleType = (BTupleType) sourceType;\n+        } else {\n+            BArrayType sourceArrayType = (BArrayType) sourceType;\n+            BType sourceElementType = sourceArrayType.getElementType();\n+\n+            switch (sourceArrayType.getState()) {\n+                case OPEN:\n+                    if (targetRestType == null) {\n+                        return false;\n+                    }\n+                    if (targetTypes.isEmpty()) {\n+                        return checkIsType(sourceElementType, targetRestType, unresolvedTypes);\n+                    }\n+                    return false;\n+                case CLOSED:\n+                    if (sourceArrayType.getSize() < targetTypes.size()) {\n+                        return false;\n+                    }\n+                    if (targetTypes.isEmpty()) {\n+                        if (targetRestType != null) {\n+                            return checkIsType(sourceElementType, targetRestType, unresolvedTypes);\n+                        }\n+                        if (sourceArrayType.getSize() == 0) {\n+                            return true;\n+                        }\n+                        return false;\n+                    }\n+                    boolean memberTypesMatch = true;\n+\n+                    for (BType targetElementType : targetTypes) {\n+                        if (!(checkIsType(sourceElementType, targetElementType, unresolvedTypes))) {\n+                            memberTypesMatch = false;\n+                        }\n+                    }\n+                    if (sourceArrayType.getSize() == targetTypes.size()) {\n+                        return memberTypesMatch;\n+                    }\n+                    if (targetRestType != null) {\n+                        return (memberTypesMatch &&\n+                                checkIsType(sourceElementType, targetRestType, unresolvedTypes));\n+                    }\n+                    return false;\n+            }\n         }\n \n-        if (sourceTypes.size() != targetTypes.size()) {\n+        List<BType> sourceTypes = new ArrayList<>(sourceTupleType.getTupleTypes());\n+        BType sourceRestType = sourceTupleType.getRestType();\n+\n+        if (sourceRestType != null && targetRestType == null) {\n             return false;\n         }\n+        int sourceTypeSize = sourceTypes.size();\n+        int targetTypeSize = targetTypes.size();\n \n-        for (int i = 0; i < sourceTypes.size(); i++) {\n-            if (!checkIsType(sourceTypes.get(i), targetTypes.get(i), unresolvedTypes)) {\n-                return false;\n+        if (sourceRestType == null && targetRestType == null && sourceTypeSize != targetTypeSize) {\n+            return false;\n+        }\n+\n+        boolean memberTypesMatch = true;\n+\n+        if (sourceTypeSize >= targetTypeSize) {\n+            for (int i = 0; i < targetTypeSize; i++) {\n+                if (!checkIsType(sourceTypes.get(i), targetTypes.get(i), unresolvedTypes)) {\n+                    memberTypesMatch = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUzMDM1OQ=="}, "originalCommit": {"oid": "60589a1f98d261191694dbb369e8fc86a47e3810"}, "originalPosition": 388}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTg1NzUxOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/jvm/types.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzoxNTo0OVrOHhFWIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzoxNTo0OVrOHhFWIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ1MjY0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                int[] b=[1,2];\n          \n          \n            \n                int[] b = [1, 2];", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26173#discussion_r504452640", "createdAt": "2020-10-14T07:15:49Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/jvm/types.bal", "diffHunk": "@@ -178,6 +230,11 @@ public function testEmptyArrayType() {\n     any iarr = ia;\n     assertEquality(iarr is int[0], true);\n     assertEquality(iarr is int[], true);\n+\n+    int[] b=[1,2];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57f54c19ccde8e987aff4a61a368958712224680"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTg1OTg2OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/jvm/types.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzoxNjozNFrOHhFXig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzoxNjozNFrOHhFXig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ1MzAwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                int[*] b=[1,2];\n          \n          \n            \n                int[*] b= [1, 2];", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26173#discussion_r504453002", "createdAt": "2020-10-14T07:16:34Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/jvm/types.bal", "diffHunk": "@@ -157,17 +157,69 @@ function tupleTest() returns int {\n    return 10;\n }\n \n+public function testUnionType() {\n+    [int, ()] x = [1, ()];\n+    any y = x;\n+    assertEquality(y is (string|int?)[2], true);\n+    assertEquality(y is (string|int?)[], true);\n+    assertEquality(y is (int|string?)[], true);\n+    assertEquality(y is (int|string?)[3], false);\n+    assertEquality(y is (int|string)[], false);\n+    assertEquality(y is int?[], true);\n+    assertEquality(y is int?[2], true);\n+\n+    [int, string?] a = [1, \"union\"];\n+    any b = a;\n+    assertEquality(b is (int|string?)[], true);\n+    assertEquality(b is (int|string?)[2], true);\n+    assertEquality(b is (int?|string)[2], true);\n+    assertEquality(b is (int|string?)[1], false);\n+    assertEquality(b is int?[2], false);\n+}\n+\n public function testRestType() {\n     [int...] x = [1, 2];\n     any y = x;\n     assertEquality(y is string[], false);\n+    assertEquality(y is [int...], true);\n+    assertEquality(y is int[0], false);\n+    assertEquality(y is int[], true);\n+    assertEquality(y is [int], false);\n+    assertEquality(y is int[2], false);\n+\n+    [int, int, int...] a = [1, 2];\n+    any b = a;\n+    assertEquality(b is int[2], false);\n+}\n+\n+public function testClosedArrayType(){\n+      int[2] b=[1,2];\n+      any y = b;\n+      assertEquality(y is [int, int], true);\n+      assertEquality(y is [int...], true);\n+      assertEquality(y is [int, int, int...], true);\n+      assertEquality(y is [string, string, int...], false);\n+      assertEquality(y is [int, int, int], false);\n+      assertEquality(y is [int, int, int, int...], false);\n+}\n+\n+public function testInferredArrayType() {\n+    int[*] b=[1,2];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57f54c19ccde8e987aff4a61a368958712224680"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTg2MzE1OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/jvm/types.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzoxNzozMlrOHhFZeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzoxOTowOFrOHhFc1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ1MzQ5Nw==", "bodyText": "Can you also add one like\n    assertEquality(y is [int, int, string...], true);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26173#discussion_r504453497", "createdAt": "2020-10-14T07:17:32Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/jvm/types.bal", "diffHunk": "@@ -157,17 +157,69 @@ function tupleTest() returns int {\n    return 10;\n }\n \n+public function testUnionType() {\n+    [int, ()] x = [1, ()];\n+    any y = x;\n+    assertEquality(y is (string|int?)[2], true);\n+    assertEquality(y is (string|int?)[], true);\n+    assertEquality(y is (int|string?)[], true);\n+    assertEquality(y is (int|string?)[3], false);\n+    assertEquality(y is (int|string)[], false);\n+    assertEquality(y is int?[], true);\n+    assertEquality(y is int?[2], true);\n+\n+    [int, string?] a = [1, \"union\"];\n+    any b = a;\n+    assertEquality(b is (int|string?)[], true);\n+    assertEquality(b is (int|string?)[2], true);\n+    assertEquality(b is (int?|string)[2], true);\n+    assertEquality(b is (int|string?)[1], false);\n+    assertEquality(b is int?[2], false);\n+}\n+\n public function testRestType() {\n     [int...] x = [1, 2];\n     any y = x;\n     assertEquality(y is string[], false);\n+    assertEquality(y is [int...], true);\n+    assertEquality(y is int[0], false);\n+    assertEquality(y is int[], true);\n+    assertEquality(y is [int], false);\n+    assertEquality(y is int[2], false);\n+\n+    [int, int, int...] a = [1, 2];\n+    any b = a;\n+    assertEquality(b is int[2], false);\n+}\n+\n+public function testClosedArrayType(){\n+      int[2] b=[1,2];\n+      any y = b;\n+      assertEquality(y is [int, int], true);\n+      assertEquality(y is [int...], true);\n+      assertEquality(y is [int, int, int...], true);\n+      assertEquality(y is [string, string, int...], false);\n+      assertEquality(y is [int, int, int], false);\n+      assertEquality(y is [int, int, int, int...], false);\n+}\n+\n+public function testInferredArrayType() {\n+    int[*] b=[1,2];\n+    any y = b;\n+    assertEquality(y is [int, int], true);\n+    assertEquality(y is [int...], true);\n+    assertEquality(y is [int, int, int...], true);\n+    assertEquality(y is [string, string, int...], false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57f54c19ccde8e987aff4a61a368958712224680"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ1NDM1OA==", "bodyText": "Let's add similar checks for others too. e.g., testClosedArrayType", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26173#discussion_r504454358", "createdAt": "2020-10-14T07:19:08Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/jvm/types.bal", "diffHunk": "@@ -157,17 +157,69 @@ function tupleTest() returns int {\n    return 10;\n }\n \n+public function testUnionType() {\n+    [int, ()] x = [1, ()];\n+    any y = x;\n+    assertEquality(y is (string|int?)[2], true);\n+    assertEquality(y is (string|int?)[], true);\n+    assertEquality(y is (int|string?)[], true);\n+    assertEquality(y is (int|string?)[3], false);\n+    assertEquality(y is (int|string)[], false);\n+    assertEquality(y is int?[], true);\n+    assertEquality(y is int?[2], true);\n+\n+    [int, string?] a = [1, \"union\"];\n+    any b = a;\n+    assertEquality(b is (int|string?)[], true);\n+    assertEquality(b is (int|string?)[2], true);\n+    assertEquality(b is (int?|string)[2], true);\n+    assertEquality(b is (int|string?)[1], false);\n+    assertEquality(b is int?[2], false);\n+}\n+\n public function testRestType() {\n     [int...] x = [1, 2];\n     any y = x;\n     assertEquality(y is string[], false);\n+    assertEquality(y is [int...], true);\n+    assertEquality(y is int[0], false);\n+    assertEquality(y is int[], true);\n+    assertEquality(y is [int], false);\n+    assertEquality(y is int[2], false);\n+\n+    [int, int, int...] a = [1, 2];\n+    any b = a;\n+    assertEquality(b is int[2], false);\n+}\n+\n+public function testClosedArrayType(){\n+      int[2] b=[1,2];\n+      any y = b;\n+      assertEquality(y is [int, int], true);\n+      assertEquality(y is [int...], true);\n+      assertEquality(y is [int, int, int...], true);\n+      assertEquality(y is [string, string, int...], false);\n+      assertEquality(y is [int, int, int], false);\n+      assertEquality(y is [int, int, int, int...], false);\n+}\n+\n+public function testInferredArrayType() {\n+    int[*] b=[1,2];\n+    any y = b;\n+    assertEquality(y is [int, int], true);\n+    assertEquality(y is [int...], true);\n+    assertEquality(y is [int, int, int...], true);\n+    assertEquality(y is [string, string, int...], false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ1MzQ5Nw=="}, "originalCommit": {"oid": "57f54c19ccde8e987aff4a61a368958712224680"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTg2NTM3OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/jvm/types.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzoxODowNVrOHhFawg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzoxODowNVrOHhFawg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ1MzgyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  int[2] b=[1,2];\n          \n          \n            \n                  int[2] b = [1, 2];", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26173#discussion_r504453826", "createdAt": "2020-10-14T07:18:05Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/jvm/types.bal", "diffHunk": "@@ -157,17 +157,69 @@ function tupleTest() returns int {\n    return 10;\n }\n \n+public function testUnionType() {\n+    [int, ()] x = [1, ()];\n+    any y = x;\n+    assertEquality(y is (string|int?)[2], true);\n+    assertEquality(y is (string|int?)[], true);\n+    assertEquality(y is (int|string?)[], true);\n+    assertEquality(y is (int|string?)[3], false);\n+    assertEquality(y is (int|string)[], false);\n+    assertEquality(y is int?[], true);\n+    assertEquality(y is int?[2], true);\n+\n+    [int, string?] a = [1, \"union\"];\n+    any b = a;\n+    assertEquality(b is (int|string?)[], true);\n+    assertEquality(b is (int|string?)[2], true);\n+    assertEquality(b is (int?|string)[2], true);\n+    assertEquality(b is (int|string?)[1], false);\n+    assertEquality(b is int?[2], false);\n+}\n+\n public function testRestType() {\n     [int...] x = [1, 2];\n     any y = x;\n     assertEquality(y is string[], false);\n+    assertEquality(y is [int...], true);\n+    assertEquality(y is int[0], false);\n+    assertEquality(y is int[], true);\n+    assertEquality(y is [int], false);\n+    assertEquality(y is int[2], false);\n+\n+    [int, int, int...] a = [1, 2];\n+    any b = a;\n+    assertEquality(b is int[2], false);\n+}\n+\n+public function testClosedArrayType(){\n+      int[2] b=[1,2];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57f54c19ccde8e987aff4a61a368958712224680"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTkxMTc2OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/jvm/types.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzozMTozMVrOHhF2qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzozMTozMVrOHhF2qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ2MDk2OA==", "bodyText": "IMO, even though there seem to be some other tests related to array/tuple type tests here, these tests don't quite belong here. Shall we move them and the new tests to a type test expression test. e.g., org.ballerinalang.test.expressions.binaryoperations.TypeTestExprTest", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26173#discussion_r504460968", "createdAt": "2020-10-14T07:31:31Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/jvm/types.bal", "diffHunk": "@@ -157,17 +157,69 @@ function tupleTest() returns int {\n    return 10;\n }\n \n+public function testUnionType() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57f54c19ccde8e987aff4a61a368958712224680"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTkzOTAxOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzozODo1MlrOHhGG5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzozODo1MlrOHhGG5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ2NTEyNA==", "bodyText": "With the new changes we only seem to be using this sourceArrayType when the source itself is an array, and it is always (BArrayType) sourceType.\nI think we can clean this up a bit, and define two methods for when the source is an array vs when the source is a tuple and call them from here.\nprivate static boolean checkIsArrayType(BArrayType sourceType, BArrayType targetType, List<TypePair> unresolvedTypes)\nand\nprivate static boolean checkIsArrayType(BTupleType sourceType, BArrayType targetType, List<TypePair> unresolvedTypes)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26173#discussion_r504465124", "createdAt": "2020-10-14T07:38:52Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1228,82 +1230,174 @@ private static boolean checkIsArrayType(BType sourceType, BArrayType targetType,\n             return true;\n         }\n \n-        if (sourceType.getTag() != TypeTags.ARRAY_TAG && sourceType.getTag() != TypeTags.TUPLE_TAG) {\n+        if (sourceTypeTag != TypeTags.ARRAY_TAG && sourceTypeTag != TypeTags.TUPLE_TAG) {\n             return false;\n         }\n \n+        BType targetElementType = targetType.getElementType();\n+        int targetElementTypeTag = targetElementType.getTag();\n+\n         BArrayType sourceArrayType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57f54c19ccde8e987aff4a61a368958712224680"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTk1MTE2OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzo0MjoyNFrOHhGOsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzo0MjoyNFrOHhGOsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ2NzEyMw==", "bodyText": "IMO we can remove this special-casing, since checkIsType does pretty much the same.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26173#discussion_r504467123", "createdAt": "2020-10-14T07:42:24Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1228,82 +1230,174 @@ private static boolean checkIsArrayType(BType sourceType, BArrayType targetType,\n             return true;\n         }\n \n-        if (sourceType.getTag() != TypeTags.ARRAY_TAG && sourceType.getTag() != TypeTags.TUPLE_TAG) {\n+        if (sourceTypeTag != TypeTags.ARRAY_TAG && sourceTypeTag != TypeTags.TUPLE_TAG) {\n             return false;\n         }\n \n+        BType targetElementType = targetType.getElementType();\n+        int targetElementTypeTag = targetElementType.getTag();\n+\n         BArrayType sourceArrayType;\n-        if (sourceType.getTag() == TypeTags.ARRAY_TAG) {\n+        if (sourceTypeTag == TypeTags.ARRAY_TAG) {\n             sourceArrayType = (BArrayType) sourceType;\n         } else {\n             BTupleType sourceTupleType = (BTupleType) sourceType;\n             Set<BType> tupleTypes = new HashSet<>(sourceTupleType.getTupleTypes());\n-            if (sourceTupleType.getRestType() != null) {\n-                tupleTypes.add(sourceTupleType.getRestType());\n+            BType sourceRestType = sourceTupleType.getRestType();\n+\n+            if (sourceRestType != null) {\n+                tupleTypes.add(sourceRestType);\n             }\n+\n             if (tupleTypes.isEmpty()) {\n-                return targetType.getState() == ArrayState.UNSEALED || targetType.getSize() == 0;\n+                return targetType.getState() == ArrayState.OPEN || targetType.getSize() == 0;\n             }\n-            sourceArrayType =\n-                    new BArrayType(new BUnionType(new ArrayList<>(tupleTypes), sourceTupleType.getTypeFlags()));\n+\n+            if (targetType.getState() == ArrayState.CLOSED) {\n+                if (sourceRestType != null) {\n+                    return false;\n+                }\n+                if (tupleTypes.size() != targetType.getSize()) {\n+                    return false;\n+                }\n+                for (BType sourceElementType : tupleTypes) {\n+                    if (!checkIsType(sourceElementType, targetElementType, unresolvedTypes)) {\n+                        return false;\n+                    }\n+                }\n+            } else {\n+                for (BType sourceElementType : tupleTypes) {\n+                    if (!checkIsType(sourceElementType, targetElementType, unresolvedTypes)) {\n+                        return false;\n+                    }\n+                }\n+            }\n+            return true;\n         }\n \n+        BType sourceElementType = sourceArrayType.getElementType();\n+\n         switch (sourceArrayType.getState()) {\n-            case UNSEALED:\n-                if (targetType.getState() != ArrayState.UNSEALED) {\n+            case OPEN:\n+                if (targetType.getState() != ArrayState.OPEN) {\n                     return false;\n                 }\n                 break;\n-            case CLOSED_SEALED:\n-                if (targetType.getState() == ArrayState.CLOSED_SEALED &&\n+            case CLOSED:\n+                if (targetType.getState() == ArrayState.CLOSED &&\n                         sourceArrayType.getSize() != targetType.getSize()) {\n                     return false;\n                 }\n                 break;\n         }\n \n-        //If element type is a value type, then check same type\n-        BType targetElementType = targetType.getElementType();\n-        int targetElementTypeTag = targetElementType.getTag();\n-\n-        BType sourceElementType = sourceArrayType.getElementType();\n-\n         if (targetElementTypeTag <= TypeTags.BOOLEAN_TAG) {\n             if (targetElementTypeTag == TypeTags.INT_TAG && sourceElementType.getTag() == TypeTags.BYTE_TAG) {\n                 return true;\n             }\n \n             return sourceElementType.getTag() == targetElementTypeTag;\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57f54c19ccde8e987aff4a61a368958712224680"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDAxMjEwOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzo1ODoxN1rOHhGzgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNzo1ODoxN1rOHhGzgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ3NjU0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        } else {\n          \n          \n            \n                            for (BType sourceElementType : tupleTypes) {\n          \n          \n            \n                                if (!checkIsType(sourceElementType, targetElementType, unresolvedTypes)) {\n          \n          \n            \n                                    return false;\n          \n          \n            \n                                }\n          \n          \n            \n                            }\n          \n          \n            \n                        }\n          \n          \n            \n                        return true;\n          \n          \n            \n                            return true;\n          \n          \n            \n                        }\n          \n          \n            \n                        for (BType sourceElementType : tupleTypes) {\n          \n          \n            \n                            if (!checkIsType(sourceElementType, targetElementType, unresolvedTypes)) {\n          \n          \n            \n                                return false;\n          \n          \n            \n                            }\n          \n          \n            \n                        }\n          \n          \n            \n                        return true;\n          \n      \n    \n    \n  \n\nWe can also switch the first check to be targetType.getState() == ArrayState.OPEN and reduce the number of lines of code that is indented.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26173#discussion_r504476547", "createdAt": "2020-10-14T07:58:17Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1228,82 +1230,174 @@ private static boolean checkIsArrayType(BType sourceType, BArrayType targetType,\n             return true;\n         }\n \n-        if (sourceType.getTag() != TypeTags.ARRAY_TAG && sourceType.getTag() != TypeTags.TUPLE_TAG) {\n+        if (sourceTypeTag != TypeTags.ARRAY_TAG && sourceTypeTag != TypeTags.TUPLE_TAG) {\n             return false;\n         }\n \n+        BType targetElementType = targetType.getElementType();\n+        int targetElementTypeTag = targetElementType.getTag();\n+\n         BArrayType sourceArrayType;\n-        if (sourceType.getTag() == TypeTags.ARRAY_TAG) {\n+        if (sourceTypeTag == TypeTags.ARRAY_TAG) {\n             sourceArrayType = (BArrayType) sourceType;\n         } else {\n             BTupleType sourceTupleType = (BTupleType) sourceType;\n             Set<BType> tupleTypes = new HashSet<>(sourceTupleType.getTupleTypes());\n-            if (sourceTupleType.getRestType() != null) {\n-                tupleTypes.add(sourceTupleType.getRestType());\n+            BType sourceRestType = sourceTupleType.getRestType();\n+\n+            if (sourceRestType != null) {\n+                tupleTypes.add(sourceRestType);\n             }\n+\n             if (tupleTypes.isEmpty()) {\n-                return targetType.getState() == ArrayState.UNSEALED || targetType.getSize() == 0;\n+                return targetType.getState() == ArrayState.OPEN || targetType.getSize() == 0;\n             }\n-            sourceArrayType =\n-                    new BArrayType(new BUnionType(new ArrayList<>(tupleTypes), sourceTupleType.getTypeFlags()));\n+\n+            if (targetType.getState() == ArrayState.CLOSED) {\n+                if (sourceRestType != null) {\n+                    return false;\n+                }\n+                if (tupleTypes.size() != targetType.getSize()) {\n+                    return false;\n+                }\n+                for (BType sourceElementType : tupleTypes) {\n+                    if (!checkIsType(sourceElementType, targetElementType, unresolvedTypes)) {\n+                        return false;\n+                    }\n+                }\n+            } else {\n+                for (BType sourceElementType : tupleTypes) {\n+                    if (!checkIsType(sourceElementType, targetElementType, unresolvedTypes)) {\n+                        return false;\n+                    }\n+                }\n+            }\n+            return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57f54c19ccde8e987aff4a61a368958712224680"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDAxOTAyOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwODowMDowMVrOHhG31g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwODowMDowMVrOHhG31g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ3NzY1NA==", "bodyText": "Have we added tests for this? Where the source type is a union of lists?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26173#discussion_r504477654", "createdAt": "2020-10-14T08:00:01Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1228,82 +1230,174 @@ private static boolean checkIsArrayType(BType sourceType, BArrayType targetType,\n             return true;\n         }\n \n-        if (sourceType.getTag() != TypeTags.ARRAY_TAG && sourceType.getTag() != TypeTags.TUPLE_TAG) {\n+        if (sourceTypeTag != TypeTags.ARRAY_TAG && sourceTypeTag != TypeTags.TUPLE_TAG) {\n             return false;\n         }\n \n+        BType targetElementType = targetType.getElementType();\n+        int targetElementTypeTag = targetElementType.getTag();\n+\n         BArrayType sourceArrayType;\n-        if (sourceType.getTag() == TypeTags.ARRAY_TAG) {\n+        if (sourceTypeTag == TypeTags.ARRAY_TAG) {\n             sourceArrayType = (BArrayType) sourceType;\n         } else {\n             BTupleType sourceTupleType = (BTupleType) sourceType;\n             Set<BType> tupleTypes = new HashSet<>(sourceTupleType.getTupleTypes());\n-            if (sourceTupleType.getRestType() != null) {\n-                tupleTypes.add(sourceTupleType.getRestType());\n+            BType sourceRestType = sourceTupleType.getRestType();\n+\n+            if (sourceRestType != null) {\n+                tupleTypes.add(sourceRestType);\n             }\n+\n             if (tupleTypes.isEmpty()) {\n-                return targetType.getState() == ArrayState.UNSEALED || targetType.getSize() == 0;\n+                return targetType.getState() == ArrayState.OPEN || targetType.getSize() == 0;\n             }\n-            sourceArrayType =\n-                    new BArrayType(new BUnionType(new ArrayList<>(tupleTypes), sourceTupleType.getTypeFlags()));\n+\n+            if (targetType.getState() == ArrayState.CLOSED) {\n+                if (sourceRestType != null) {\n+                    return false;\n+                }\n+                if (tupleTypes.size() != targetType.getSize()) {\n+                    return false;\n+                }\n+                for (BType sourceElementType : tupleTypes) {\n+                    if (!checkIsType(sourceElementType, targetElementType, unresolvedTypes)) {\n+                        return false;\n+                    }\n+                }\n+            } else {\n+                for (BType sourceElementType : tupleTypes) {\n+                    if (!checkIsType(sourceElementType, targetElementType, unresolvedTypes)) {\n+                        return false;\n+                    }\n+                }\n+            }\n+            return true;\n         }\n \n+        BType sourceElementType = sourceArrayType.getElementType();\n+\n         switch (sourceArrayType.getState()) {\n-            case UNSEALED:\n-                if (targetType.getState() != ArrayState.UNSEALED) {\n+            case OPEN:\n+                if (targetType.getState() != ArrayState.OPEN) {\n                     return false;\n                 }\n                 break;\n-            case CLOSED_SEALED:\n-                if (targetType.getState() == ArrayState.CLOSED_SEALED &&\n+            case CLOSED:\n+                if (targetType.getState() == ArrayState.CLOSED &&\n                         sourceArrayType.getSize() != targetType.getSize()) {\n                     return false;\n                 }\n                 break;\n         }\n \n-        //If element type is a value type, then check same type\n-        BType targetElementType = targetType.getElementType();\n-        int targetElementTypeTag = targetElementType.getTag();\n-\n-        BType sourceElementType = sourceArrayType.getElementType();\n-\n         if (targetElementTypeTag <= TypeTags.BOOLEAN_TAG) {\n             if (targetElementTypeTag == TypeTags.INT_TAG && sourceElementType.getTag() == TypeTags.BYTE_TAG) {\n                 return true;\n             }\n \n             return sourceElementType.getTag() == targetElementTypeTag;\n         }\n+\n         return checkIsType(sourceElementType, targetElementType, unresolvedTypes);\n     }\n \n     private static boolean checkIsTupleType(BType sourceType, BTupleType targetType, List<TypePair> unresolvedTypes) {\n-        if (sourceType.getTag() != TypeTags.TUPLE_TAG) {\n-            return false;\n+        int sourceTypeTag = sourceType.getTag();\n+\n+        if (sourceTypeTag == TypeTags.UNION_TAG) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57f54c19ccde8e987aff4a61a368958712224680"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDAyMTg4OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwODowMDozNFrOHhG5bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwODowMDozNFrOHhG5bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ3ODA2MA==", "bodyText": "Let's extract these two scenarios also to two methods.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26173#discussion_r504478060", "createdAt": "2020-10-14T08:00:34Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1228,82 +1230,174 @@ private static boolean checkIsArrayType(BType sourceType, BArrayType targetType,\n             return true;\n         }\n \n-        if (sourceType.getTag() != TypeTags.ARRAY_TAG && sourceType.getTag() != TypeTags.TUPLE_TAG) {\n+        if (sourceTypeTag != TypeTags.ARRAY_TAG && sourceTypeTag != TypeTags.TUPLE_TAG) {\n             return false;\n         }\n \n+        BType targetElementType = targetType.getElementType();\n+        int targetElementTypeTag = targetElementType.getTag();\n+\n         BArrayType sourceArrayType;\n-        if (sourceType.getTag() == TypeTags.ARRAY_TAG) {\n+        if (sourceTypeTag == TypeTags.ARRAY_TAG) {\n             sourceArrayType = (BArrayType) sourceType;\n         } else {\n             BTupleType sourceTupleType = (BTupleType) sourceType;\n             Set<BType> tupleTypes = new HashSet<>(sourceTupleType.getTupleTypes());\n-            if (sourceTupleType.getRestType() != null) {\n-                tupleTypes.add(sourceTupleType.getRestType());\n+            BType sourceRestType = sourceTupleType.getRestType();\n+\n+            if (sourceRestType != null) {\n+                tupleTypes.add(sourceRestType);\n             }\n+\n             if (tupleTypes.isEmpty()) {\n-                return targetType.getState() == ArrayState.UNSEALED || targetType.getSize() == 0;\n+                return targetType.getState() == ArrayState.OPEN || targetType.getSize() == 0;\n             }\n-            sourceArrayType =\n-                    new BArrayType(new BUnionType(new ArrayList<>(tupleTypes), sourceTupleType.getTypeFlags()));\n+\n+            if (targetType.getState() == ArrayState.CLOSED) {\n+                if (sourceRestType != null) {\n+                    return false;\n+                }\n+                if (tupleTypes.size() != targetType.getSize()) {\n+                    return false;\n+                }\n+                for (BType sourceElementType : tupleTypes) {\n+                    if (!checkIsType(sourceElementType, targetElementType, unresolvedTypes)) {\n+                        return false;\n+                    }\n+                }\n+            } else {\n+                for (BType sourceElementType : tupleTypes) {\n+                    if (!checkIsType(sourceElementType, targetElementType, unresolvedTypes)) {\n+                        return false;\n+                    }\n+                }\n+            }\n+            return true;\n         }\n \n+        BType sourceElementType = sourceArrayType.getElementType();\n+\n         switch (sourceArrayType.getState()) {\n-            case UNSEALED:\n-                if (targetType.getState() != ArrayState.UNSEALED) {\n+            case OPEN:\n+                if (targetType.getState() != ArrayState.OPEN) {\n                     return false;\n                 }\n                 break;\n-            case CLOSED_SEALED:\n-                if (targetType.getState() == ArrayState.CLOSED_SEALED &&\n+            case CLOSED:\n+                if (targetType.getState() == ArrayState.CLOSED &&\n                         sourceArrayType.getSize() != targetType.getSize()) {\n                     return false;\n                 }\n                 break;\n         }\n \n-        //If element type is a value type, then check same type\n-        BType targetElementType = targetType.getElementType();\n-        int targetElementTypeTag = targetElementType.getTag();\n-\n-        BType sourceElementType = sourceArrayType.getElementType();\n-\n         if (targetElementTypeTag <= TypeTags.BOOLEAN_TAG) {\n             if (targetElementTypeTag == TypeTags.INT_TAG && sourceElementType.getTag() == TypeTags.BYTE_TAG) {\n                 return true;\n             }\n \n             return sourceElementType.getTag() == targetElementTypeTag;\n         }\n+\n         return checkIsType(sourceElementType, targetElementType, unresolvedTypes);\n     }\n \n     private static boolean checkIsTupleType(BType sourceType, BTupleType targetType, List<TypePair> unresolvedTypes) {\n-        if (sourceType.getTag() != TypeTags.TUPLE_TAG) {\n-            return false;\n+        int sourceTypeTag = sourceType.getTag();\n+\n+        if (sourceTypeTag == TypeTags.UNION_TAG) {\n+            for (BType memberType : ((BUnionType) sourceType).getMemberTypes()) {\n+                if (!checkIsTupleType(memberType, targetType, unresolvedTypes)) {\n+                    return false;\n+                }\n+            }\n+            return true;\n         }\n \n-        List<BType> sourceTypes = new ArrayList<>(((BTupleType) sourceType).getTupleTypes());\n-        BType sourceRestType = ((BTupleType) sourceType).getRestType();\n-        if (sourceRestType != null) {\n-            sourceTypes.add(sourceRestType);\n+        if (sourceTypeTag != TypeTags.ARRAY_TAG && sourceTypeTag != TypeTags.TUPLE_TAG) {\n+            return false;\n         }\n \n         List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n         BType targetRestType = targetType.getRestType();\n-        if (targetRestType != null) {\n-            targetTypes.add(targetRestType);\n+\n+        if (sourceTypeTag == TypeTags.ARRAY_TAG) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57f54c19ccde8e987aff4a61a368958712224680"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDA0ODI2OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwODowNzozNVrOHhHJrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwODowNzozNVrOHhHJrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ4MjIyMw==", "bodyText": "Instead of adding the rest-descriptor to tupleTypes can we handle it separately?\nFor example,\n\nif the target array is closed, the source cannot have a rest-descriptor (return false directly). If there is no rest-descriptor it may be valid, so check each member against the target array's element type - we seem to be doing this already\nif the target array is open, check member types against element type, and then check the rest-descriptor against the target element type separately - add another check to the else block below", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26173#discussion_r504482223", "createdAt": "2020-10-14T08:07:35Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1228,82 +1230,174 @@ private static boolean checkIsArrayType(BType sourceType, BArrayType targetType,\n             return true;\n         }\n \n-        if (sourceType.getTag() != TypeTags.ARRAY_TAG && sourceType.getTag() != TypeTags.TUPLE_TAG) {\n+        if (sourceTypeTag != TypeTags.ARRAY_TAG && sourceTypeTag != TypeTags.TUPLE_TAG) {\n             return false;\n         }\n \n+        BType targetElementType = targetType.getElementType();\n+        int targetElementTypeTag = targetElementType.getTag();\n+\n         BArrayType sourceArrayType;\n-        if (sourceType.getTag() == TypeTags.ARRAY_TAG) {\n+        if (sourceTypeTag == TypeTags.ARRAY_TAG) {\n             sourceArrayType = (BArrayType) sourceType;\n         } else {\n             BTupleType sourceTupleType = (BTupleType) sourceType;\n             Set<BType> tupleTypes = new HashSet<>(sourceTupleType.getTupleTypes());\n-            if (sourceTupleType.getRestType() != null) {\n-                tupleTypes.add(sourceTupleType.getRestType());\n+            BType sourceRestType = sourceTupleType.getRestType();\n+\n+            if (sourceRestType != null) {\n+                tupleTypes.add(sourceRestType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57f54c19ccde8e987aff4a61a368958712224680"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDEyMjk5OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/jvm/types.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwODoyNjoyNFrOHhH3-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwODoyNjoyNFrOHhH3-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ5NDA3Mg==", "bodyText": "Shall we also add tests like\n    assertEquality(b is [int, int...], true);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26173#discussion_r504494072", "createdAt": "2020-10-14T08:26:24Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/jvm/types.bal", "diffHunk": "@@ -157,17 +157,69 @@ function tupleTest() returns int {\n    return 10;\n }\n \n+public function testUnionType() {\n+    [int, ()] x = [1, ()];\n+    any y = x;\n+    assertEquality(y is (string|int?)[2], true);\n+    assertEquality(y is (string|int?)[], true);\n+    assertEquality(y is (int|string?)[], true);\n+    assertEquality(y is (int|string?)[3], false);\n+    assertEquality(y is (int|string)[], false);\n+    assertEquality(y is int?[], true);\n+    assertEquality(y is int?[2], true);\n+\n+    [int, string?] a = [1, \"union\"];\n+    any b = a;\n+    assertEquality(b is (int|string?)[], true);\n+    assertEquality(b is (int|string?)[2], true);\n+    assertEquality(b is (int?|string)[2], true);\n+    assertEquality(b is (int|string?)[1], false);\n+    assertEquality(b is int?[2], false);\n+}\n+\n public function testRestType() {\n     [int...] x = [1, 2];\n     any y = x;\n     assertEquality(y is string[], false);\n+    assertEquality(y is [int...], true);\n+    assertEquality(y is int[0], false);\n+    assertEquality(y is int[], true);\n+    assertEquality(y is [int], false);\n+    assertEquality(y is int[2], false);\n+\n+    [int, int, int...] a = [1, 2];\n+    any b = a;\n+    assertEquality(b is int[2], false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57f54c19ccde8e987aff4a61a368958712224680"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTgyODI5OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDo1NzoxOFrOHlBZrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDo1NzoxOFrOHlBZrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU4MjMxOA==", "bodyText": "Since these are only used in L1267 we can move these to immediately before L1267 or just remove these and change that to\nreturn checkIsType(sourceType.getElementType(), targetType.getElementType(), unresolvedTypes);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26173#discussion_r508582318", "createdAt": "2020-10-20T14:57:18Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/TypeChecker.java", "diffHunk": "@@ -1246,8 +1246,62 @@ private static boolean hasIncompatibleReadOnlyFlags(Field targetField, Field sou\n                                                                                          Flags.READONLY);\n     }\n \n+    private static boolean checkIsArrayType(BArrayType sourceType, BArrayType targetType,\n+                                            List<TypePair> unresolvedTypes) {\n+        Type sourceElementType = sourceType.getElementType();\n+        Type targetElementType = targetType.getElementType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c788e911da0f0c7bfb3def5e5d2291041b5e819e"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTg3MDIxOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTowNTozOVrOHlB0Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTowNTozOVrOHlB0Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU4OTEwNw==", "bodyText": "Do we need a new set here? Can't we just work with the list returned by sourceType.getTupleTypes()?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26173#discussion_r508589107", "createdAt": "2020-10-20T15:05:39Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/TypeChecker.java", "diffHunk": "@@ -1246,8 +1246,62 @@ private static boolean hasIncompatibleReadOnlyFlags(Field targetField, Field sou\n                                                                                          Flags.READONLY);\n     }\n \n+    private static boolean checkIsArrayType(BArrayType sourceType, BArrayType targetType,\n+                                            List<TypePair> unresolvedTypes) {\n+        Type sourceElementType = sourceType.getElementType();\n+        Type targetElementType = targetType.getElementType();\n+\n+        switch (sourceType.getState()) {\n+            case OPEN:\n+                if (targetType.getState() != ArrayState.OPEN) {\n+                    return false;\n+                }\n+                break;\n+            case CLOSED:\n+                if (targetType.getState() == ArrayState.CLOSED &&\n+                        sourceType.getSize() != targetType.getSize()) {\n+                    return false;\n+                }\n+                break;\n+        }\n+        return checkIsType(sourceElementType, targetElementType, unresolvedTypes);\n+    }\n+\n+    private static boolean checkIsArrayType(BTupleType sourceType, BArrayType targetType,\n+                                            List<TypePair> unresolvedTypes) {\n+        Set<Type> tupleTypes = new HashSet<>(sourceType.getTupleTypes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c788e911da0f0c7bfb3def5e5d2291041b5e819e"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTg5MDU2OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTowOTo1MFrOHlCBTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTowOTo1MFrOHlCBTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU5MjQ2MA==", "bodyText": "Here again, for both sourceTypes and targetTypes, since we are no longer adding the rest types to these lists we can directly use the lists returned by getTupleTypes() instead of creating new lists.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26173#discussion_r508592460", "createdAt": "2020-10-20T15:09:50Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/TypeChecker.java", "diffHunk": "@@ -1256,83 +1310,123 @@ private static boolean checkIsArrayType(Type sourceType, BArrayType targetType,\n             return true;\n         }\n \n-        if (sourceType.getTag() != TypeTags.ARRAY_TAG && sourceType.getTag() != TypeTags.TUPLE_TAG) {\n+        if (sourceTypeTag != TypeTags.ARRAY_TAG && sourceTypeTag != TypeTags.TUPLE_TAG) {\n             return false;\n         }\n \n-        BArrayType sourceArrayType;\n-        if (sourceType.getTag() == TypeTags.ARRAY_TAG) {\n-            sourceArrayType = (BArrayType) sourceType;\n-        } else {\n-            BTupleType sourceTupleType = (BTupleType) sourceType;\n-            Set<Type> tupleTypes = new HashSet<>(sourceTupleType.getTupleTypes());\n-            if (sourceTupleType.getRestType() != null) {\n-                tupleTypes.add(sourceTupleType.getRestType());\n-            }\n-            if (tupleTypes.isEmpty()) {\n-                return targetType.getState() == ArrayType.ArrayState.UNSEALED || targetType.getSize() == 0;\n-            }\n-            sourceArrayType =\n-                    new BArrayType(new BUnionType(new ArrayList<>(tupleTypes), sourceTupleType.getTypeFlags()));\n+        if (sourceTypeTag == TypeTags.ARRAY_TAG) {\n+            return checkIsArrayType((BArrayType) sourceType, targetType, unresolvedTypes);\n         }\n+        return checkIsArrayType((BTupleType) sourceType, targetType, unresolvedTypes);\n+    }\n \n-        switch (sourceArrayType.getState()) {\n-            case UNSEALED:\n-                if (targetType.getState() != ArrayType.ArrayState.UNSEALED) {\n+    private static boolean checkIsTupleType(BArrayType sourceType, BTupleType targetType,\n+                                            List<TypePair> unresolvedTypes) {\n+        Type sourceElementType = sourceType.getElementType();\n+        List<Type> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n+        Type targetRestType = targetType.getRestType();\n+\n+        switch (sourceType.getState()) {\n+            case OPEN:\n+                if (targetRestType == null) {\n                     return false;\n                 }\n-                break;\n-            case CLOSED_SEALED:\n-                if (targetType.getState() == ArrayType.ArrayState.CLOSED_SEALED &&\n-                        sourceArrayType.getSize() != targetType.getSize()) {\n+                if (targetTypes.isEmpty()) {\n+                    return checkIsType(sourceElementType, targetRestType, unresolvedTypes);\n+                }\n+                return false;\n+            case CLOSED:\n+                if (sourceType.getSize() < targetTypes.size()) {\n                     return false;\n                 }\n-                break;\n-        }\n+                if (targetTypes.isEmpty()) {\n+                    if (targetRestType != null) {\n+                        return checkIsType(sourceElementType, targetRestType, unresolvedTypes);\n+                    }\n+                    return sourceType.getSize() == 0;\n+                }\n \n-        //If element type is a value type, then check same type\n-        Type targetElementType = targetType.getElementType();\n-        int targetElementTypeTag = targetElementType.getTag();\n+                for (Type targetElementType : targetTypes) {\n+                    if (!(checkIsType(sourceElementType, targetElementType, unresolvedTypes))) {\n+                        return false;\n+                    }\n+                }\n+                if (sourceType.getSize() == targetTypes.size()) {\n+                    return true;\n+                }\n+                if (targetRestType != null) {\n+                    return checkIsType(sourceElementType, targetRestType, unresolvedTypes);\n+                }\n+                return false;\n+            default:\n+                return false;\n+        }\n+    }\n \n-        Type sourceElementType = sourceArrayType.getElementType();\n+    private static boolean checkIsTupleType(BTupleType sourceType, BTupleType targetType,\n+                                            List<TypePair> unresolvedTypes) {\n+        List<Type> sourceTypes = new ArrayList<>(sourceType.getTupleTypes());\n+        Type sourceRestType = sourceType.getRestType();\n+        List<Type> targetTypes = new ArrayList<>(targetType.getTupleTypes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c788e911da0f0c7bfb3def5e5d2291041b5e819e"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjM5ODQxOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjozNDo1NFrOHlHIXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjozNDo1NFrOHlHIXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY3NjE4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<Type> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n          \n          \n            \n                    List<Type> targetTypes = targetType.getTupleTypes();", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26173#discussion_r508676189", "createdAt": "2020-10-20T16:34:54Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/TypeChecker.java", "diffHunk": "@@ -1256,83 +1307,123 @@ private static boolean checkIsArrayType(Type sourceType, BArrayType targetType,\n             return true;\n         }\n \n-        if (sourceType.getTag() != TypeTags.ARRAY_TAG && sourceType.getTag() != TypeTags.TUPLE_TAG) {\n+        if (sourceTypeTag != TypeTags.ARRAY_TAG && sourceTypeTag != TypeTags.TUPLE_TAG) {\n             return false;\n         }\n \n-        BArrayType sourceArrayType;\n-        if (sourceType.getTag() == TypeTags.ARRAY_TAG) {\n-            sourceArrayType = (BArrayType) sourceType;\n-        } else {\n-            BTupleType sourceTupleType = (BTupleType) sourceType;\n-            Set<Type> tupleTypes = new HashSet<>(sourceTupleType.getTupleTypes());\n-            if (sourceTupleType.getRestType() != null) {\n-                tupleTypes.add(sourceTupleType.getRestType());\n-            }\n-            if (tupleTypes.isEmpty()) {\n-                return targetType.getState() == ArrayType.ArrayState.UNSEALED || targetType.getSize() == 0;\n-            }\n-            sourceArrayType =\n-                    new BArrayType(new BUnionType(new ArrayList<>(tupleTypes), sourceTupleType.getTypeFlags()));\n+        if (sourceTypeTag == TypeTags.ARRAY_TAG) {\n+            return checkIsArrayType((BArrayType) sourceType, targetType, unresolvedTypes);\n         }\n+        return checkIsArrayType((BTupleType) sourceType, targetType, unresolvedTypes);\n+    }\n \n-        switch (sourceArrayType.getState()) {\n-            case UNSEALED:\n-                if (targetType.getState() != ArrayType.ArrayState.UNSEALED) {\n+    private static boolean checkIsTupleType(BArrayType sourceType, BTupleType targetType,\n+                                            List<TypePair> unresolvedTypes) {\n+        Type sourceElementType = sourceType.getElementType();\n+        List<Type> targetTypes = new ArrayList<>(targetType.getTupleTypes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c7529d04e8a8b8aaa767e4ab50dd51566beb250"}, "originalPosition": 105}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4872, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}