{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMjM3MDIx", "number": 22593, "title": "Improve API Docs in gRPC module", "bodyText": "Purpose\nImprove API Docs in gRPC module\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-04-11T19:36:25Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593", "merged": true, "mergeCommit": {"oid": "13778142c2a45869cabe0933a402c6f8503a71cc"}, "closed": true, "closedAt": "2020-04-15T14:38:26Z", "author": {"login": "daneshk"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcWq9FcgH2gAyNDAyMjM3MDIxOmRmNjdkOTIwMzdmZjAzNzZjYTdhZWJhY2RiMzFjYzUwNGY3OGEzM2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcX2413AFqTM5MzcwNzk1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c", "author": {"user": {"login": "daneshk", "name": "Danesh Kuruppu"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/df67d92037ff0376ca7aebacdb31cc504f78a33c", "committedDate": "2020-04-11T19:35:09Z", "message": "Improve API Docs in gRPC module"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNTQ1NTEz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#pullrequestreview-393545513", "createdAt": "2020-04-15T08:06:46Z", "commit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODoxMDoxNFrOGFujUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODoyMTozMFrOGFu88g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1ODc2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + requestType - Request message type of the resource. This is an optional field. If it is not specified, request\n          \n          \n            \n            # + requestType - Request message type of the resource. This is an optional field. If it is not specified, the request", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408658768", "createdAt": "2020-04-15T08:10:14Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/annotation.bal", "diffHunk": "@@ -14,19 +14,17 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Service configuration. Sets only for client and bidirectional streaming service.\n+# Service configuration.\n #\n-# + name - Resource name. This applies only for client streaming and bidirectional streaming\n-#          where we can define only one resource. In order to generate proto file, service resource name need to\n-#          pass as annotation parameter.\n+# + name - Service name. This applies only for dynamic service registration.\n # + requestType - Request message type of the resource. This is an optional field. If it is not specified, request", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1ODg1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #                   type is derived from input argument of the resource\n          \n          \n            \n            #                   type is derived from the input argument of the resource", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408658854", "createdAt": "2020-04-15T08:10:23Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/annotation.bal", "diffHunk": "@@ -14,19 +14,17 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Service configuration. Sets only for client and bidirectional streaming service.\n+# Service configuration.\n #\n-# + name - Resource name. This applies only for client streaming and bidirectional streaming\n-#          where we can define only one resource. In order to generate proto file, service resource name need to\n-#          pass as annotation parameter.\n+# + name - Service name. This applies only for dynamic service registration.\n # + requestType - Request message type of the resource. This is an optional field. If it is not specified, request\n-#                   type is derived from input argument of the resource.\n+#                   type is derived from input argument of the resource", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1OTA4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + responseType - Response message type of the resource. This is an optional field. If it is not specified, response\n          \n          \n            \n            # + responseType - Response message type of the resource. This is an optional field. If it is not specified, the response", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408659088", "createdAt": "2020-04-15T08:10:51Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/annotation.bal", "diffHunk": "@@ -14,19 +14,17 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Service configuration. Sets only for client and bidirectional streaming service.\n+# Service configuration.\n #\n-# + name - Resource name. This applies only for client streaming and bidirectional streaming\n-#          where we can define only one resource. In order to generate proto file, service resource name need to\n-#          pass as annotation parameter.\n+# + name - Service name. This applies only for dynamic service registration.\n # + requestType - Request message type of the resource. This is an optional field. If it is not specified, request\n-#                   type is derived from input argument of the resource.\n+#                   type is derived from input argument of the resource\n # + responseType - Response message type of the resource. This is an optional field. If it is not specified, response", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1OTE1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #                   type is derived from the he value passed to the send() expression\n          \n          \n            \n            #                   type is derived from the value passed to the send() expression", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408659157", "createdAt": "2020-04-15T08:10:58Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/annotation.bal", "diffHunk": "@@ -14,19 +14,17 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Service configuration. Sets only for client and bidirectional streaming service.\n+# Service configuration.\n #\n-# + name - Resource name. This applies only for client streaming and bidirectional streaming\n-#          where we can define only one resource. In order to generate proto file, service resource name need to\n-#          pass as annotation parameter.\n+# + name - Service name. This applies only for dynamic service registration.\n # + requestType - Request message type of the resource. This is an optional field. If it is not specified, request\n-#                   type is derived from input argument of the resource.\n+#                   type is derived from input argument of the resource\n # + responseType - Response message type of the resource. This is an optional field. If it is not specified, response\n-#                   type is derived from the he value passed to the send() expression.\n+#                   type is derived from the he value passed to the send() expression", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1OTU5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #                     bidirectional streaming. Flag sets to true, if the service defines as client/bidirectional streaming\n          \n          \n            \n            #                     bidirectional streaming. The flag should be set to true if the service is defined as client/bidirectional streaming", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408659598", "createdAt": "2020-04-15T08:11:52Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/annotation.bal", "diffHunk": "@@ -14,19 +14,17 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Service configuration. Sets only for client and bidirectional streaming service.\n+# Service configuration.\n #\n-# + name - Resource name. This applies only for client streaming and bidirectional streaming\n-#          where we can define only one resource. In order to generate proto file, service resource name need to\n-#          pass as annotation parameter.\n+# + name - Service name. This applies only for dynamic service registration.\n # + requestType - Request message type of the resource. This is an optional field. If it is not specified, request\n-#                   type is derived from input argument of the resource.\n+#                   type is derived from input argument of the resource\n # + responseType - Response message type of the resource. This is an optional field. If it is not specified, response\n-#                   type is derived from the he value passed to the send() expression.\n+#                   type is derived from the he value passed to the send() expression\n # + clientStreaming - Client streaming flag. This applies only for client streaming and\n-#                     bidirectional streaming. Flag sets to true, if the service defines as client/bidirectional streaming.\n+#                     bidirectional streaming. Flag sets to true, if the service defines as client/bidirectional streaming", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1OTc4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + serverStreaming - Server streaming flag. This applies only for bidirectional streaming. Flag\n          \n          \n            \n            # + serverStreaming - Server streaming flag. This applies only for bidirectional streaming. The flag", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408659782", "createdAt": "2020-04-15T08:12:12Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/annotation.bal", "diffHunk": "@@ -14,19 +14,17 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Service configuration. Sets only for client and bidirectional streaming service.\n+# Service configuration.\n #\n-# + name - Resource name. This applies only for client streaming and bidirectional streaming\n-#          where we can define only one resource. In order to generate proto file, service resource name need to\n-#          pass as annotation parameter.\n+# + name - Service name. This applies only for dynamic service registration.\n # + requestType - Request message type of the resource. This is an optional field. If it is not specified, request\n-#                   type is derived from input argument of the resource.\n+#                   type is derived from input argument of the resource\n # + responseType - Response message type of the resource. This is an optional field. If it is not specified, response\n-#                   type is derived from the he value passed to the send() expression.\n+#                   type is derived from the he value passed to the send() expression\n # + clientStreaming - Client streaming flag. This applies only for client streaming and\n-#                     bidirectional streaming. Flag sets to true, if the service defines as client/bidirectional streaming.\n+#                     bidirectional streaming. Flag sets to true, if the service defines as client/bidirectional streaming\n # + serverStreaming - Server streaming flag. This applies only for bidirectional streaming. Flag", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1OTg4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #                     sets to true, if the service defines as bidirectional streaming\n          \n          \n            \n            #                     should be set to true if the service is defined as bidirectional streaming", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408659889", "createdAt": "2020-04-15T08:12:25Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/annotation.bal", "diffHunk": "@@ -14,19 +14,17 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Service configuration. Sets only for client and bidirectional streaming service.\n+# Service configuration.\n #\n-# + name - Resource name. This applies only for client streaming and bidirectional streaming\n-#          where we can define only one resource. In order to generate proto file, service resource name need to\n-#          pass as annotation parameter.\n+# + name - Service name. This applies only for dynamic service registration.\n # + requestType - Request message type of the resource. This is an optional field. If it is not specified, request\n-#                   type is derived from input argument of the resource.\n+#                   type is derived from input argument of the resource\n # + responseType - Response message type of the resource. This is an optional field. If it is not specified, response\n-#                   type is derived from the he value passed to the send() expression.\n+#                   type is derived from the he value passed to the send() expression\n # + clientStreaming - Client streaming flag. This applies only for client streaming and\n-#                     bidirectional streaming. Flag sets to true, if the service defines as client/bidirectional streaming.\n+#                     bidirectional streaming. Flag sets to true, if the service defines as client/bidirectional streaming\n # + serverStreaming - Server streaming flag. This applies only for bidirectional streaming. Flag\n-#                     sets to true, if the service defines as bidirectional streaming.\n+#                     sets to true, if the service defines as bidirectional streaming", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2MDI3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Service resource configuration. Sets only for server streaming service.\n          \n          \n            \n            # Service resource configuration. This should be set only for server streaming services.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408660273", "createdAt": "2020-04-15T08:13:01Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/annotation.bal", "diffHunk": "@@ -35,7 +33,7 @@ public type GrpcServiceConfig record {|\n     boolean serverStreaming = false;\n |};\n \n-# Service configuration. Sets only for client and bidirectional streaming service.\n+# Service configuration annotation.\n public annotation GrpcServiceConfig ServiceConfig on service;\n \n # Service resource configuration. Sets only for server streaming service.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2MTI1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Service resource configuration annotation. Sets only for server streaming service.\n          \n          \n            \n            # Service resource configuration annotation. This should be set only for server streaming services.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408661257", "createdAt": "2020-04-15T08:14:39Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/annotation.bal", "diffHunk": "@@ -52,17 +50,17 @@ public type GrpcResourceConfig record {|\n     typedesc<anydata> responseType?;\n |};\n \n-# Service resource configuration. Sets only for server streaming service.\n+# Service resource configuration annotation. Sets only for server streaming service.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2MTM2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Service descriptor data generated at compile time. This is for internal use.\n          \n          \n            \n            # Service descriptor data generated at the compile time. This is for internal use.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408661364", "createdAt": "2020-04-15T08:14:49Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/annotation.bal", "diffHunk": "@@ -52,17 +50,17 @@ public type GrpcResourceConfig record {|\n     typedesc<anydata> responseType?;\n |};\n \n-# Service resource configuration. Sets only for server streaming service.\n+# Service resource configuration annotation. Sets only for server streaming service.\n public annotation GrpcResourceConfig ResourceConfig on resource function;\n \n-# Service descriptor data. This is for internal use.\n+# Service descriptor data generated at compile time. This is for internal use.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2MTUwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + descriptor - Service descriptor sets at compile time\n          \n          \n            \n            # + descriptor - Service descriptor, which should be set at the compile time", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408661504", "createdAt": "2020-04-15T08:15:04Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/annotation.bal", "diffHunk": "@@ -52,17 +50,17 @@ public type GrpcResourceConfig record {|\n     typedesc<anydata> responseType?;\n |};\n \n-# Service resource configuration. Sets only for server streaming service.\n+# Service resource configuration annotation. Sets only for server streaming service.\n public annotation GrpcResourceConfig ResourceConfig on resource function;\n \n-# Service descriptor data. This is for internal use.\n+# Service descriptor data generated at compile time. This is for internal use.\n #\n-# + descriptor - Service descriptor sets at compile time.\n-# + descMap - Service dependent descriptor map sets at compile time.\n+# + descriptor - Service descriptor sets at compile time", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2MTY2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + descMap - Service dependent descriptor map sets at compile time\n          \n          \n            \n            # + descMap - Service dependent descriptor map, which should be set at the compile time", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408661665", "createdAt": "2020-04-15T08:15:22Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/annotation.bal", "diffHunk": "@@ -52,17 +50,17 @@ public type GrpcResourceConfig record {|\n     typedesc<anydata> responseType?;\n |};\n \n-# Service resource configuration. Sets only for server streaming service.\n+# Service resource configuration annotation. Sets only for server streaming service.\n public annotation GrpcResourceConfig ResourceConfig on resource function;\n \n-# Service descriptor data. This is for internal use.\n+# Service descriptor data generated at compile time. This is for internal use.\n #\n-# + descriptor - Service descriptor sets at compile time.\n-# + descMap - Service dependent descriptor map sets at compile time.\n+# + descriptor - Service descriptor sets at compile time\n+# + descMap - Service dependent descriptor map sets at compile time", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2MTc5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Sends outbound response to the caller.\n          \n          \n            \n            # Sends the outbound response to the caller.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408661794", "createdAt": "2020-04-15T08:15:35Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/caller.bal", "diffHunk": "@@ -28,42 +28,57 @@ public type Caller client object {\n \n     private int instanceId = -1;\n \n-    # Returns the unique identification of the caller.\n-    #\n-    # + return - caller ID\n+# Returns the unique identification of the caller.\n+# ```ballerina\n+# int result = caller.getId();\n+# ```\n+#\n+# + return - caller ID\n     public function getId() returns int {\n         return self.instanceId;\n     }\n \n-    # Sends outbound response to the caller.\n-    #\n-    # + res - - The outbound response message.\n-    # + headers - - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - - Returns an error if encounters an error while sending the response, returns nil otherwise.\n+# Sends outbound response to the caller.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2MjE0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + headers - - Optional headers parameter. Passes header value if needed. Default sets to ()\n          \n          \n            \n            # + headers - - Optional headers parameter. Header values are passed only if needed. The default value is `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408662142", "createdAt": "2020-04-15T08:16:15Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/caller.bal", "diffHunk": "@@ -28,42 +28,57 @@ public type Caller client object {\n \n     private int instanceId = -1;\n \n-    # Returns the unique identification of the caller.\n-    #\n-    # + return - caller ID\n+# Returns the unique identification of the caller.\n+# ```ballerina\n+# int result = caller.getId();\n+# ```\n+#\n+# + return - caller ID\n     public function getId() returns int {\n         return self.instanceId;\n     }\n \n-    # Sends outbound response to the caller.\n-    #\n-    # + res - - The outbound response message.\n-    # + headers - - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - - Returns an error if encounters an error while sending the response, returns nil otherwise.\n+# Sends outbound response to the caller.\n+# ```ballerina\n+# grpc:Error? err = caller->send(message, headers);\n+# ```\n+#\n+# + res - - The outbound response message\n+# + headers - - Optional headers parameter. Passes header value if needed. Default sets to ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2MjQxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - - An `grpc:Error` if encounters an error while sending the response or else ()\n          \n          \n            \n            # + return - - A `grpc:Error` if an error occurs while sending the response or else ()", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408662413", "createdAt": "2020-04-15T08:16:41Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/caller.bal", "diffHunk": "@@ -28,42 +28,57 @@ public type Caller client object {\n \n     private int instanceId = -1;\n \n-    # Returns the unique identification of the caller.\n-    #\n-    # + return - caller ID\n+# Returns the unique identification of the caller.\n+# ```ballerina\n+# int result = caller.getId();\n+# ```\n+#\n+# + return - caller ID\n     public function getId() returns int {\n         return self.instanceId;\n     }\n \n-    # Sends outbound response to the caller.\n-    #\n-    # + res - - The outbound response message.\n-    # + headers - - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - - Returns an error if encounters an error while sending the response, returns nil otherwise.\n+# Sends outbound response to the caller.\n+# ```ballerina\n+# grpc:Error? err = caller->send(message, headers);\n+# ```\n+#\n+# + res - - The outbound response message\n+# + headers - - Optional headers parameter. Passes header value if needed. Default sets to ()\n+# + return - - An `grpc:Error` if encounters an error while sending the response or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2MjY2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Informs the caller, server finished sending messages.\n          \n          \n            \n            # Informs the caller, when the server has sent all the messages.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408662661", "createdAt": "2020-04-15T08:17:06Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/caller.bal", "diffHunk": "@@ -28,42 +28,57 @@ public type Caller client object {\n \n     private int instanceId = -1;\n \n-    # Returns the unique identification of the caller.\n-    #\n-    # + return - caller ID\n+# Returns the unique identification of the caller.\n+# ```ballerina\n+# int result = caller.getId();\n+# ```\n+#\n+# + return - caller ID\n     public function getId() returns int {\n         return self.instanceId;\n     }\n \n-    # Sends outbound response to the caller.\n-    #\n-    # + res - - The outbound response message.\n-    # + headers - - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - - Returns an error if encounters an error while sending the response, returns nil otherwise.\n+# Sends outbound response to the caller.\n+# ```ballerina\n+# grpc:Error? err = caller->send(message, headers);\n+# ```\n+#\n+# + res - - The outbound response message\n+# + headers - - Optional headers parameter. Passes header value if needed. Default sets to ()\n+# + return - - An `grpc:Error` if encounters an error while sending the response or else ()\n     public remote function send(anydata res, Headers? headers = ()) returns Error? {\n         return externSend(self, res, headers);\n     }\n \n-    # Informs the caller, server finished sending messages.\n-    #\n-    # + return - Returns an error if encounters an error while sending the response, returns nil otherwise.\n+# Informs the caller, server finished sending messages.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2Mjg1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An `grpc:Error` if encounters an error while sending the response or else ()\n          \n          \n            \n            # + return - A `grpc:Error` if an error occurs while sending the response or else `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408662854", "createdAt": "2020-04-15T08:17:25Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/caller.bal", "diffHunk": "@@ -28,42 +28,57 @@ public type Caller client object {\n \n     private int instanceId = -1;\n \n-    # Returns the unique identification of the caller.\n-    #\n-    # + return - caller ID\n+# Returns the unique identification of the caller.\n+# ```ballerina\n+# int result = caller.getId();\n+# ```\n+#\n+# + return - caller ID\n     public function getId() returns int {\n         return self.instanceId;\n     }\n \n-    # Sends outbound response to the caller.\n-    #\n-    # + res - - The outbound response message.\n-    # + headers - - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - - Returns an error if encounters an error while sending the response, returns nil otherwise.\n+# Sends outbound response to the caller.\n+# ```ballerina\n+# grpc:Error? err = caller->send(message, headers);\n+# ```\n+#\n+# + res - - The outbound response message\n+# + headers - - Optional headers parameter. Passes header value if needed. Default sets to ()\n+# + return - - An `grpc:Error` if encounters an error while sending the response or else ()\n     public remote function send(anydata res, Headers? headers = ()) returns Error? {\n         return externSend(self, res, headers);\n     }\n \n-    # Informs the caller, server finished sending messages.\n-    #\n-    # + return - Returns an error if encounters an error while sending the response, returns nil otherwise.\n+# Informs the caller, server finished sending messages.\n+# ```ballerina\n+# grpc:Error? result = caller->complete();\n+# ```\n+#\n+# + return - An `grpc:Error` if encounters an error while sending the response or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2MzAxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - True, if caller already closed the connection or else false\n          \n          \n            \n            # + return - True if the caller has already closed the connection or else false", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408663011", "createdAt": "2020-04-15T08:17:43Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/caller.bal", "diffHunk": "@@ -28,42 +28,57 @@ public type Caller client object {\n \n     private int instanceId = -1;\n \n-    # Returns the unique identification of the caller.\n-    #\n-    # + return - caller ID\n+# Returns the unique identification of the caller.\n+# ```ballerina\n+# int result = caller.getId();\n+# ```\n+#\n+# + return - caller ID\n     public function getId() returns int {\n         return self.instanceId;\n     }\n \n-    # Sends outbound response to the caller.\n-    #\n-    # + res - - The outbound response message.\n-    # + headers - - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - - Returns an error if encounters an error while sending the response, returns nil otherwise.\n+# Sends outbound response to the caller.\n+# ```ballerina\n+# grpc:Error? err = caller->send(message, headers);\n+# ```\n+#\n+# + res - - The outbound response message\n+# + headers - - Optional headers parameter. Passes header value if needed. Default sets to ()\n+# + return - - An `grpc:Error` if encounters an error while sending the response or else ()\n     public remote function send(anydata res, Headers? headers = ()) returns Error? {\n         return externSend(self, res, headers);\n     }\n \n-    # Informs the caller, server finished sending messages.\n-    #\n-    # + return - Returns an error if encounters an error while sending the response, returns nil otherwise.\n+# Informs the caller, server finished sending messages.\n+# ```ballerina\n+# grpc:Error? result = caller->complete();\n+# ```\n+#\n+# + return - An `grpc:Error` if encounters an error while sending the response or else ()\n     public remote function complete() returns Error? {\n         return externComplete(self);\n     }\n \n-    # Checks whether the connection is closed by the caller.\n-    #\n-    # + return - Returns true, if caller already closed the connection. false otherwise.\n+# Checks whether the connection is closed by the caller.\n+# ```ballerina\n+# boolean result = caller.isCancelled();\n+# ```\n+#\n+# + return - True, if caller already closed the connection or else false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2MzEzMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Sends server error to the caller.\n          \n          \n            \n            # Sends a server error to the caller.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408663133", "createdAt": "2020-04-15T08:17:54Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/caller.bal", "diffHunk": "@@ -28,42 +28,57 @@ public type Caller client object {\n \n     private int instanceId = -1;\n \n-    # Returns the unique identification of the caller.\n-    #\n-    # + return - caller ID\n+# Returns the unique identification of the caller.\n+# ```ballerina\n+# int result = caller.getId();\n+# ```\n+#\n+# + return - caller ID\n     public function getId() returns int {\n         return self.instanceId;\n     }\n \n-    # Sends outbound response to the caller.\n-    #\n-    # + res - - The outbound response message.\n-    # + headers - - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - - Returns an error if encounters an error while sending the response, returns nil otherwise.\n+# Sends outbound response to the caller.\n+# ```ballerina\n+# grpc:Error? err = caller->send(message, headers);\n+# ```\n+#\n+# + res - - The outbound response message\n+# + headers - - Optional headers parameter. Passes header value if needed. Default sets to ()\n+# + return - - An `grpc:Error` if encounters an error while sending the response or else ()\n     public remote function send(anydata res, Headers? headers = ()) returns Error? {\n         return externSend(self, res, headers);\n     }\n \n-    # Informs the caller, server finished sending messages.\n-    #\n-    # + return - Returns an error if encounters an error while sending the response, returns nil otherwise.\n+# Informs the caller, server finished sending messages.\n+# ```ballerina\n+# grpc:Error? result = caller->complete();\n+# ```\n+#\n+# + return - An `grpc:Error` if encounters an error while sending the response or else ()\n     public remote function complete() returns Error? {\n         return externComplete(self);\n     }\n \n-    # Checks whether the connection is closed by the caller.\n-    #\n-    # + return - Returns true, if caller already closed the connection. false otherwise.\n+# Checks whether the connection is closed by the caller.\n+# ```ballerina\n+# boolean result = caller.isCancelled();\n+# ```\n+#\n+# + return - True, if caller already closed the connection or else false\n     public function isCancelled() returns boolean {\n         return externIsCancelled(self);\n     }\n \n-    # Sends server error to the caller.\n-    #\n-    # + statusCode - Error status code.\n-    # + message - Error message.\n-    # + headers - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - Returns an error if encounters an error while sending the response, returns nil otherwise.\n+# Sends server error to the caller.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2MzQ2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + headers - Optional headers parameter. Passes header value if needed. Default sets to ()\n          \n          \n            \n            # + headers - Optional headers parameter. The header values are passed only if needed. The default value is `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408663462", "createdAt": "2020-04-15T08:18:27Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/caller.bal", "diffHunk": "@@ -28,42 +28,57 @@ public type Caller client object {\n \n     private int instanceId = -1;\n \n-    # Returns the unique identification of the caller.\n-    #\n-    # + return - caller ID\n+# Returns the unique identification of the caller.\n+# ```ballerina\n+# int result = caller.getId();\n+# ```\n+#\n+# + return - caller ID\n     public function getId() returns int {\n         return self.instanceId;\n     }\n \n-    # Sends outbound response to the caller.\n-    #\n-    # + res - - The outbound response message.\n-    # + headers - - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - - Returns an error if encounters an error while sending the response, returns nil otherwise.\n+# Sends outbound response to the caller.\n+# ```ballerina\n+# grpc:Error? err = caller->send(message, headers);\n+# ```\n+#\n+# + res - - The outbound response message\n+# + headers - - Optional headers parameter. Passes header value if needed. Default sets to ()\n+# + return - - An `grpc:Error` if encounters an error while sending the response or else ()\n     public remote function send(anydata res, Headers? headers = ()) returns Error? {\n         return externSend(self, res, headers);\n     }\n \n-    # Informs the caller, server finished sending messages.\n-    #\n-    # + return - Returns an error if encounters an error while sending the response, returns nil otherwise.\n+# Informs the caller, server finished sending messages.\n+# ```ballerina\n+# grpc:Error? result = caller->complete();\n+# ```\n+#\n+# + return - An `grpc:Error` if encounters an error while sending the response or else ()\n     public remote function complete() returns Error? {\n         return externComplete(self);\n     }\n \n-    # Checks whether the connection is closed by the caller.\n-    #\n-    # + return - Returns true, if caller already closed the connection. false otherwise.\n+# Checks whether the connection is closed by the caller.\n+# ```ballerina\n+# boolean result = caller.isCancelled();\n+# ```\n+#\n+# + return - True, if caller already closed the connection or else false\n     public function isCancelled() returns boolean {\n         return externIsCancelled(self);\n     }\n \n-    # Sends server error to the caller.\n-    #\n-    # + statusCode - Error status code.\n-    # + message - Error message.\n-    # + headers - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - Returns an error if encounters an error while sending the response, returns nil otherwise.\n+# Sends server error to the caller.\n+# ```ballerina\n+# grpc:Error? result = caller->sendError(grpc:ABORTED, \"Operation aborted\", headers);\n+# ```\n+#\n+# + statusCode - Error status code\n+# + message - Error message\n+# + headers - Optional headers parameter. Passes header value if needed. Default sets to ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2MzYxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An `grpc:Error` if encounters an error while sending the response or else ()\n          \n          \n            \n            # + return - A `grpc:Error` if an error occurs while sending the response or else `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408663618", "createdAt": "2020-04-15T08:18:43Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/caller.bal", "diffHunk": "@@ -28,42 +28,57 @@ public type Caller client object {\n \n     private int instanceId = -1;\n \n-    # Returns the unique identification of the caller.\n-    #\n-    # + return - caller ID\n+# Returns the unique identification of the caller.\n+# ```ballerina\n+# int result = caller.getId();\n+# ```\n+#\n+# + return - caller ID\n     public function getId() returns int {\n         return self.instanceId;\n     }\n \n-    # Sends outbound response to the caller.\n-    #\n-    # + res - - The outbound response message.\n-    # + headers - - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - - Returns an error if encounters an error while sending the response, returns nil otherwise.\n+# Sends outbound response to the caller.\n+# ```ballerina\n+# grpc:Error? err = caller->send(message, headers);\n+# ```\n+#\n+# + res - - The outbound response message\n+# + headers - - Optional headers parameter. Passes header value if needed. Default sets to ()\n+# + return - - An `grpc:Error` if encounters an error while sending the response or else ()\n     public remote function send(anydata res, Headers? headers = ()) returns Error? {\n         return externSend(self, res, headers);\n     }\n \n-    # Informs the caller, server finished sending messages.\n-    #\n-    # + return - Returns an error if encounters an error while sending the response, returns nil otherwise.\n+# Informs the caller, server finished sending messages.\n+# ```ballerina\n+# grpc:Error? result = caller->complete();\n+# ```\n+#\n+# + return - An `grpc:Error` if encounters an error while sending the response or else ()\n     public remote function complete() returns Error? {\n         return externComplete(self);\n     }\n \n-    # Checks whether the connection is closed by the caller.\n-    #\n-    # + return - Returns true, if caller already closed the connection. false otherwise.\n+# Checks whether the connection is closed by the caller.\n+# ```ballerina\n+# boolean result = caller.isCancelled();\n+# ```\n+#\n+# + return - True, if caller already closed the connection or else false\n     public function isCancelled() returns boolean {\n         return externIsCancelled(self);\n     }\n \n-    # Sends server error to the caller.\n-    #\n-    # + statusCode - Error status code.\n-    # + message - Error message.\n-    # + headers - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - Returns an error if encounters an error while sending the response, returns nil otherwise.\n+# Sends server error to the caller.\n+# ```ballerina\n+# grpc:Error? result = caller->sendError(grpc:ABORTED, \"Operation aborted\", headers);\n+# ```\n+#\n+# + statusCode - Error status code\n+# + message - Error message\n+# + headers - Optional headers parameter. Passes header value if needed. Default sets to ()\n+# + return - An `grpc:Error` if encounters an error while sending the response or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2MzcwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Configurations for managing gRPC client connection pool.\n          \n          \n            \n            # Configurations for managing the gRPC client connection pool.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408663701", "createdAt": "2020-04-15T08:18:52Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/client_connection_pool.bal", "diffHunk": "@@ -19,10 +19,10 @@ import ballerina/java;\n \n # Configurations for managing gRPC client connection pool.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2MzkyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + maxActiveConnections - Max active connections per route(host:port). Default value is -1 which indicates unlimited\n          \n          \n            \n            # + maxActiveConnections - Max active connections per route(host:port). The default value is -1, which indicates unlimited", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408663925", "createdAt": "2020-04-15T08:19:10Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/client_connection_pool.bal", "diffHunk": "@@ -19,10 +19,10 @@ import ballerina/java;\n \n # Configurations for managing gRPC client connection pool.\n #\n-# + maxActiveConnections - Max active connections per route(host:port). Default value is -1 which indicates unlimited.\n-# + maxIdleConnections - Maximum number of idle connections allowed per pool.\n+# + maxActiveConnections - Max active connections per route(host:port). Default value is -1 which indicates unlimited", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2NDA0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + waitTimeInMillis - Maximum amount of time, the client should wait for an idle connection before it sends an error when the pool is exhausted\n          \n          \n            \n            # + waitTimeInMillis - Maximum amount of time the client should wait for an idle connection before it sends an error when the pool is exhausted", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408664047", "createdAt": "2020-04-15T08:19:22Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/client_connection_pool.bal", "diffHunk": "@@ -19,10 +19,10 @@ import ballerina/java;\n \n # Configurations for managing gRPC client connection pool.\n #\n-# + maxActiveConnections - Max active connections per route(host:port). Default value is -1 which indicates unlimited.\n-# + maxIdleConnections - Maximum number of idle connections allowed per pool.\n+# + maxActiveConnections - Max active connections per route(host:port). Default value is -1 which indicates unlimited\n+# + maxIdleConnections - Maximum number of idle connections allowed per pool\n # + waitTimeInMillis - Maximum amount of time, the client should wait for an idle connection before it sends an error when the pool is exhausted", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2NDI0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Gets invoked to initialize the endpoint. During initialization, configurations provided through the `config`\n          \n          \n            \n                # Gets invoked to initialize the endpoint. During initialization, the configurations provided through the `config`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408664243", "createdAt": "2020-04-15T08:19:39Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/client_endpoint.bal", "diffHunk": "@@ -28,8 +28,8 @@ public type Client client object {\n     # Gets invoked to initialize the endpoint. During initialization, configurations provided through the `config`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2NDM0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # record is used for endpoint initialization.\n          \n          \n            \n                # record are used for the endpoint initialization.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408664344", "createdAt": "2020-04-15T08:19:48Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/client_endpoint.bal", "diffHunk": "@@ -28,8 +28,8 @@ public type Client client object {\n     # Gets invoked to initialize the endpoint. During initialization, configurations provided through the `config`\n     # record is used for endpoint initialization.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2NDQ1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + url - The server url\n          \n          \n            \n                # + url - The server URL", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408664456", "createdAt": "2020-04-15T08:20:00Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/client_endpoint.bal", "diffHunk": "@@ -28,8 +28,8 @@ public type Client client object {\n     # Gets invoked to initialize the endpoint. During initialization, configurations provided through the `config`\n     # record is used for endpoint initialization.\n     #\n-    # + url - The server url.\n-    # + config - - The ClientConfiguration of the endpoint.\n+    # + url - The server url", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2NDYxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Calls when initializing client endpoint with service descriptor data extracted from proto file.\n          \n          \n            \n            # Calls when initializing the client endpoint with the service descriptor data extracted from the proto file.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408664615", "createdAt": "2020-04-15T08:20:15Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/client_endpoint.bal", "diffHunk": "@@ -39,23 +39,29 @@ public type Client client object {\n         }\n     }\n \n-    # Calls when initializing client endpoint with service descriptor data extracted from proto file.\n-    #\n-    # + clientEndpoint -  Client endpoint\n-    # + stubType - Service Stub type. possible values: blocking, nonblocking.\n-    # + descriptorKey - Proto descriptor key. Key of proto descriptor.\n-    # + descriptorMap - Proto descriptor map. descriptor map with all dependent descriptors.\n-    # + return - Returns an error if encounters an error while initializing the stub, returns nill otherwise.\n+# Calls when initializing client endpoint with service descriptor data extracted from proto file.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2NDczNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + stubType - Service Stub type. possible values: blocking, nonblocking\n          \n          \n            \n            # + stubType - Service Stub type. Possible values: blocking, nonblocking", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408664735", "createdAt": "2020-04-15T08:20:27Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/client_endpoint.bal", "diffHunk": "@@ -39,23 +39,29 @@ public type Client client object {\n         }\n     }\n \n-    # Calls when initializing client endpoint with service descriptor data extracted from proto file.\n-    #\n-    # + clientEndpoint -  Client endpoint\n-    # + stubType - Service Stub type. possible values: blocking, nonblocking.\n-    # + descriptorKey - Proto descriptor key. Key of proto descriptor.\n-    # + descriptorMap - Proto descriptor map. descriptor map with all dependent descriptors.\n-    # + return - Returns an error if encounters an error while initializing the stub, returns nill otherwise.\n+# Calls when initializing client endpoint with service descriptor data extracted from proto file.\n+# ```ballerina\n+# grpc:Error? result = grpcClient.initStub(self, \"blocking\", ROOT_DESCRIPTOR, getDescriptorMap());\n+# ```\n+#\n+# + clientEndpoint -  Client endpoint\n+# + stubType - Service Stub type. possible values: blocking, nonblocking", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2NDg5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + descriptorKey - Proto descriptor key. Key of proto descriptor\n          \n          \n            \n            # + descriptorKey - Key of the proto descriptor", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408664896", "createdAt": "2020-04-15T08:20:45Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/client_endpoint.bal", "diffHunk": "@@ -39,23 +39,29 @@ public type Client client object {\n         }\n     }\n \n-    # Calls when initializing client endpoint with service descriptor data extracted from proto file.\n-    #\n-    # + clientEndpoint -  Client endpoint\n-    # + stubType - Service Stub type. possible values: blocking, nonblocking.\n-    # + descriptorKey - Proto descriptor key. Key of proto descriptor.\n-    # + descriptorMap - Proto descriptor map. descriptor map with all dependent descriptors.\n-    # + return - Returns an error if encounters an error while initializing the stub, returns nill otherwise.\n+# Calls when initializing client endpoint with service descriptor data extracted from proto file.\n+# ```ballerina\n+# grpc:Error? result = grpcClient.initStub(self, \"blocking\", ROOT_DESCRIPTOR, getDescriptorMap());\n+# ```\n+#\n+# + clientEndpoint -  Client endpoint\n+# + stubType - Service Stub type. possible values: blocking, nonblocking\n+# + descriptorKey - Proto descriptor key. Key of proto descriptor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2NTAzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + descriptorMap - Proto descriptor map. descriptor map with all dependent descriptors\n          \n          \n            \n            # + descriptorMap - Proto descriptor map with all the dependent descriptors", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408665038", "createdAt": "2020-04-15T08:20:58Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/client_endpoint.bal", "diffHunk": "@@ -39,23 +39,29 @@ public type Client client object {\n         }\n     }\n \n-    # Calls when initializing client endpoint with service descriptor data extracted from proto file.\n-    #\n-    # + clientEndpoint -  Client endpoint\n-    # + stubType - Service Stub type. possible values: blocking, nonblocking.\n-    # + descriptorKey - Proto descriptor key. Key of proto descriptor.\n-    # + descriptorMap - Proto descriptor map. descriptor map with all dependent descriptors.\n-    # + return - Returns an error if encounters an error while initializing the stub, returns nill otherwise.\n+# Calls when initializing client endpoint with service descriptor data extracted from proto file.\n+# ```ballerina\n+# grpc:Error? result = grpcClient.initStub(self, \"blocking\", ROOT_DESCRIPTOR, getDescriptorMap());\n+# ```\n+#\n+# + clientEndpoint -  Client endpoint\n+# + stubType - Service Stub type. possible values: blocking, nonblocking\n+# + descriptorKey - Proto descriptor key. Key of proto descriptor\n+# + descriptorMap - Proto descriptor map. descriptor map with all dependent descriptors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2NTE5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An `grpc:Error` if encounters an error while initializing the stub or else ()\n          \n          \n            \n            # + return - A `grpc:Error` if an error occurs while initializing the stub or else `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408665198", "createdAt": "2020-04-15T08:21:15Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/client_endpoint.bal", "diffHunk": "@@ -39,23 +39,29 @@ public type Client client object {\n         }\n     }\n \n-    # Calls when initializing client endpoint with service descriptor data extracted from proto file.\n-    #\n-    # + clientEndpoint -  Client endpoint\n-    # + stubType - Service Stub type. possible values: blocking, nonblocking.\n-    # + descriptorKey - Proto descriptor key. Key of proto descriptor.\n-    # + descriptorMap - Proto descriptor map. descriptor map with all dependent descriptors.\n-    # + return - Returns an error if encounters an error while initializing the stub, returns nill otherwise.\n+# Calls when initializing client endpoint with service descriptor data extracted from proto file.\n+# ```ballerina\n+# grpc:Error? result = grpcClient.initStub(self, \"blocking\", ROOT_DESCRIPTOR, getDescriptorMap());\n+# ```\n+#\n+# + clientEndpoint -  Client endpoint\n+# + stubType - Service Stub type. possible values: blocking, nonblocking\n+# + descriptorKey - Proto descriptor key. Key of proto descriptor\n+# + descriptorMap - Proto descriptor map. descriptor map with all dependent descriptors\n+# + return - An `grpc:Error` if encounters an error while initializing the stub or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2NTI3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Calls when executing blocking call with gRPC service.\n          \n          \n            \n            # Calls when executing a blocking call with a gRPC service.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408665270", "createdAt": "2020-04-15T08:21:24Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/client_endpoint.bal", "diffHunk": "@@ -39,23 +39,29 @@ public type Client client object {\n         }\n     }\n \n-    # Calls when initializing client endpoint with service descriptor data extracted from proto file.\n-    #\n-    # + clientEndpoint -  Client endpoint\n-    # + stubType - Service Stub type. possible values: blocking, nonblocking.\n-    # + descriptorKey - Proto descriptor key. Key of proto descriptor.\n-    # + descriptorMap - Proto descriptor map. descriptor map with all dependent descriptors.\n-    # + return - Returns an error if encounters an error while initializing the stub, returns nill otherwise.\n+# Calls when initializing client endpoint with service descriptor data extracted from proto file.\n+# ```ballerina\n+# grpc:Error? result = grpcClient.initStub(self, \"blocking\", ROOT_DESCRIPTOR, getDescriptorMap());\n+# ```\n+#\n+# + clientEndpoint -  Client endpoint\n+# + stubType - Service Stub type. possible values: blocking, nonblocking\n+# + descriptorKey - Proto descriptor key. Key of proto descriptor\n+# + descriptorMap - Proto descriptor map. descriptor map with all dependent descriptors\n+# + return - An `grpc:Error` if encounters an error while initializing the stub or else ()\n     public function initStub(AbstractClientEndpoint clientEndpoint, string stubType, string descriptorKey, map<any> descriptorMap) returns Error? {\n         return externInitStub(self, clientEndpoint, java:fromString(stubType), java:fromString(descriptorKey), descriptorMap);\n     }\n \n-    # Calls when executing blocking call with gRPC service.\n-    #\n-    # + methodID - Remote service method id.\n-    # + payload - Request message. Message type varies with remote service method parameter.\n-    # + headers - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - Returns response message and headers if executes successfully, error otherwise.\n+# Calls when executing blocking call with gRPC service.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2NTMzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + methodID - Remote service method id\n          \n          \n            \n            # + methodID - Remote service method ID", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408665330", "createdAt": "2020-04-15T08:21:30Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/client_endpoint.bal", "diffHunk": "@@ -39,23 +39,29 @@ public type Client client object {\n         }\n     }\n \n-    # Calls when initializing client endpoint with service descriptor data extracted from proto file.\n-    #\n-    # + clientEndpoint -  Client endpoint\n-    # + stubType - Service Stub type. possible values: blocking, nonblocking.\n-    # + descriptorKey - Proto descriptor key. Key of proto descriptor.\n-    # + descriptorMap - Proto descriptor map. descriptor map with all dependent descriptors.\n-    # + return - Returns an error if encounters an error while initializing the stub, returns nill otherwise.\n+# Calls when initializing client endpoint with service descriptor data extracted from proto file.\n+# ```ballerina\n+# grpc:Error? result = grpcClient.initStub(self, \"blocking\", ROOT_DESCRIPTOR, getDescriptorMap());\n+# ```\n+#\n+# + clientEndpoint -  Client endpoint\n+# + stubType - Service Stub type. possible values: blocking, nonblocking\n+# + descriptorKey - Proto descriptor key. Key of proto descriptor\n+# + descriptorMap - Proto descriptor map. descriptor map with all dependent descriptors\n+# + return - An `grpc:Error` if encounters an error while initializing the stub or else ()\n     public function initStub(AbstractClientEndpoint clientEndpoint, string stubType, string descriptorKey, map<any> descriptorMap) returns Error? {\n         return externInitStub(self, clientEndpoint, java:fromString(stubType), java:fromString(descriptorKey), descriptorMap);\n     }\n \n-    # Calls when executing blocking call with gRPC service.\n-    #\n-    # + methodID - Remote service method id.\n-    # + payload - Request message. Message type varies with remote service method parameter.\n-    # + headers - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - Returns response message and headers if executes successfully, error otherwise.\n+# Calls when executing blocking call with gRPC service.\n+# ```ballerina\n+# [anydata, grpc:Headers]|grpc:Error result = grpcClient->blockingExecute(\"HelloWorld/hello\", req, headers);\n+# ```\n+#\n+# + methodID - Remote service method id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNTU2Nzk2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#pullrequestreview-393556796", "createdAt": "2020-04-15T08:22:23Z", "commit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "state": "COMMENTED", "comments": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODoyMjoyM1rOGFu-4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODozMzoyMVrOGFvZBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2NTgyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + payload - Request message. Message type varies with remote service method parameter\n          \n          \n            \n            # + payload - Request message. The message type varies with the remote service method parameter", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408665825", "createdAt": "2020-04-15T08:22:23Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/client_endpoint.bal", "diffHunk": "@@ -39,23 +39,29 @@ public type Client client object {\n         }\n     }\n \n-    # Calls when initializing client endpoint with service descriptor data extracted from proto file.\n-    #\n-    # + clientEndpoint -  Client endpoint\n-    # + stubType - Service Stub type. possible values: blocking, nonblocking.\n-    # + descriptorKey - Proto descriptor key. Key of proto descriptor.\n-    # + descriptorMap - Proto descriptor map. descriptor map with all dependent descriptors.\n-    # + return - Returns an error if encounters an error while initializing the stub, returns nill otherwise.\n+# Calls when initializing client endpoint with service descriptor data extracted from proto file.\n+# ```ballerina\n+# grpc:Error? result = grpcClient.initStub(self, \"blocking\", ROOT_DESCRIPTOR, getDescriptorMap());\n+# ```\n+#\n+# + clientEndpoint -  Client endpoint\n+# + stubType - Service Stub type. possible values: blocking, nonblocking\n+# + descriptorKey - Proto descriptor key. Key of proto descriptor\n+# + descriptorMap - Proto descriptor map. descriptor map with all dependent descriptors\n+# + return - An `grpc:Error` if encounters an error while initializing the stub or else ()\n     public function initStub(AbstractClientEndpoint clientEndpoint, string stubType, string descriptorKey, map<any> descriptorMap) returns Error? {\n         return externInitStub(self, clientEndpoint, java:fromString(stubType), java:fromString(descriptorKey), descriptorMap);\n     }\n \n-    # Calls when executing blocking call with gRPC service.\n-    #\n-    # + methodID - Remote service method id.\n-    # + payload - Request message. Message type varies with remote service method parameter.\n-    # + headers - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - Returns response message and headers if executes successfully, error otherwise.\n+# Calls when executing blocking call with gRPC service.\n+# ```ballerina\n+# [anydata, grpc:Headers]|grpc:Error result = grpcClient->blockingExecute(\"HelloWorld/hello\", req, headers);\n+# ```\n+#\n+# + methodID - Remote service method id\n+# + payload - Request message. Message type varies with remote service method parameter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2NjExNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + headers - Optional headers parameter. Passes header value if needed. Default sets to ()\n          \n          \n            \n            # + headers - Optional headers parameter. The header value are passed only if needed. The default value is `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408666117", "createdAt": "2020-04-15T08:22:53Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/client_endpoint.bal", "diffHunk": "@@ -39,23 +39,29 @@ public type Client client object {\n         }\n     }\n \n-    # Calls when initializing client endpoint with service descriptor data extracted from proto file.\n-    #\n-    # + clientEndpoint -  Client endpoint\n-    # + stubType - Service Stub type. possible values: blocking, nonblocking.\n-    # + descriptorKey - Proto descriptor key. Key of proto descriptor.\n-    # + descriptorMap - Proto descriptor map. descriptor map with all dependent descriptors.\n-    # + return - Returns an error if encounters an error while initializing the stub, returns nill otherwise.\n+# Calls when initializing client endpoint with service descriptor data extracted from proto file.\n+# ```ballerina\n+# grpc:Error? result = grpcClient.initStub(self, \"blocking\", ROOT_DESCRIPTOR, getDescriptorMap());\n+# ```\n+#\n+# + clientEndpoint -  Client endpoint\n+# + stubType - Service Stub type. possible values: blocking, nonblocking\n+# + descriptorKey - Proto descriptor key. Key of proto descriptor\n+# + descriptorMap - Proto descriptor map. descriptor map with all dependent descriptors\n+# + return - An `grpc:Error` if encounters an error while initializing the stub or else ()\n     public function initStub(AbstractClientEndpoint clientEndpoint, string stubType, string descriptorKey, map<any> descriptorMap) returns Error? {\n         return externInitStub(self, clientEndpoint, java:fromString(stubType), java:fromString(descriptorKey), descriptorMap);\n     }\n \n-    # Calls when executing blocking call with gRPC service.\n-    #\n-    # + methodID - Remote service method id.\n-    # + payload - Request message. Message type varies with remote service method parameter.\n-    # + headers - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - Returns response message and headers if executes successfully, error otherwise.\n+# Calls when executing blocking call with gRPC service.\n+# ```ballerina\n+# [anydata, grpc:Headers]|grpc:Error result = grpcClient->blockingExecute(\"HelloWorld/hello\", req, headers);\n+# ```\n+#\n+# + methodID - Remote service method id\n+# + payload - Request message. Message type varies with remote service method parameter\n+# + headers - Optional headers parameter. Passes header value if needed. Default sets to ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2NjI0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The response message and headers if executes successfully or else an `grpc:Error`\n          \n          \n            \n            # + return - The response message and headers if executed successfully or else a `grpc:Error`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408666242", "createdAt": "2020-04-15T08:23:06Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/client_endpoint.bal", "diffHunk": "@@ -39,23 +39,29 @@ public type Client client object {\n         }\n     }\n \n-    # Calls when initializing client endpoint with service descriptor data extracted from proto file.\n-    #\n-    # + clientEndpoint -  Client endpoint\n-    # + stubType - Service Stub type. possible values: blocking, nonblocking.\n-    # + descriptorKey - Proto descriptor key. Key of proto descriptor.\n-    # + descriptorMap - Proto descriptor map. descriptor map with all dependent descriptors.\n-    # + return - Returns an error if encounters an error while initializing the stub, returns nill otherwise.\n+# Calls when initializing client endpoint with service descriptor data extracted from proto file.\n+# ```ballerina\n+# grpc:Error? result = grpcClient.initStub(self, \"blocking\", ROOT_DESCRIPTOR, getDescriptorMap());\n+# ```\n+#\n+# + clientEndpoint -  Client endpoint\n+# + stubType - Service Stub type. possible values: blocking, nonblocking\n+# + descriptorKey - Proto descriptor key. Key of proto descriptor\n+# + descriptorMap - Proto descriptor map. descriptor map with all dependent descriptors\n+# + return - An `grpc:Error` if encounters an error while initializing the stub or else ()\n     public function initStub(AbstractClientEndpoint clientEndpoint, string stubType, string descriptorKey, map<any> descriptorMap) returns Error? {\n         return externInitStub(self, clientEndpoint, java:fromString(stubType), java:fromString(descriptorKey), descriptorMap);\n     }\n \n-    # Calls when executing blocking call with gRPC service.\n-    #\n-    # + methodID - Remote service method id.\n-    # + payload - Request message. Message type varies with remote service method parameter.\n-    # + headers - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - Returns response message and headers if executes successfully, error otherwise.\n+# Calls when executing blocking call with gRPC service.\n+# ```ballerina\n+# [anydata, grpc:Headers]|grpc:Error result = grpcClient->blockingExecute(\"HelloWorld/hello\", req, headers);\n+# ```\n+#\n+# + methodID - Remote service method id\n+# + payload - Request message. Message type varies with remote service method parameter\n+# + headers - Optional headers parameter. Passes header value if needed. Default sets to ()\n+# + return - The response message and headers if executes successfully or else an `grpc:Error`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2NjMyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Calls when executing non-blocking call with gRPC service.\n          \n          \n            \n            # Calls when executing a non-blocking call with a gRPC service.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408666325", "createdAt": "2020-04-15T08:23:15Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/client_endpoint.bal", "diffHunk": "@@ -65,24 +71,29 @@ public type Client client object {\n         return externBlockingExecute(self, methodIdHandle, payload, headers);\n     }\n \n-    # Calls when executing non-blocking call with gRPC service.\n-    #\n-    # + methodID - Remote service method id.\n-    # + payload - Request message. Message type varies with remote service method parameter..\n-    # + listenerService - Call back listener service. This service listens the response message from service.\n-    # + headers - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - Returns an error if encounters an error while sending the request, returns nil otherwise.\n+# Calls when executing non-blocking call with gRPC service.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2NjM3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + methodID - Remote service method id\n          \n          \n            \n            # + methodID - Remote service method ID", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408666377", "createdAt": "2020-04-15T08:23:22Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/client_endpoint.bal", "diffHunk": "@@ -65,24 +71,29 @@ public type Client client object {\n         return externBlockingExecute(self, methodIdHandle, payload, headers);\n     }\n \n-    # Calls when executing non-blocking call with gRPC service.\n-    #\n-    # + methodID - Remote service method id.\n-    # + payload - Request message. Message type varies with remote service method parameter..\n-    # + listenerService - Call back listener service. This service listens the response message from service.\n-    # + headers - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - Returns an error if encounters an error while sending the request, returns nil otherwise.\n+# Calls when executing non-blocking call with gRPC service.\n+# ```ballerina\n+# grpc:Error? result = grpcClient->nonBlockingExecute(\"HelloWorld/hello\", req, msgListener, headers);\n+# ```\n+#\n+# + methodID - Remote service method id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2NjQ5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + payload - Request message. Message type varies with remote service method parameter\n          \n          \n            \n            # + payload - Request message. The message type varies with the remote service method parameter", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408666497", "createdAt": "2020-04-15T08:23:32Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/client_endpoint.bal", "diffHunk": "@@ -65,24 +71,29 @@ public type Client client object {\n         return externBlockingExecute(self, methodIdHandle, payload, headers);\n     }\n \n-    # Calls when executing non-blocking call with gRPC service.\n-    #\n-    # + methodID - Remote service method id.\n-    # + payload - Request message. Message type varies with remote service method parameter..\n-    # + listenerService - Call back listener service. This service listens the response message from service.\n-    # + headers - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - Returns an error if encounters an error while sending the request, returns nil otherwise.\n+# Calls when executing non-blocking call with gRPC service.\n+# ```ballerina\n+# grpc:Error? result = grpcClient->nonBlockingExecute(\"HelloWorld/hello\", req, msgListener, headers);\n+# ```\n+#\n+# + methodID - Remote service method id\n+# + payload - Request message. Message type varies with remote service method parameter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2NjYyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + listenerService - Call back listener service. This service listens the response message from service\n          \n          \n            \n            # + listenerService - Call back listener service. This service listens to the response message from the service", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408666627", "createdAt": "2020-04-15T08:23:43Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/client_endpoint.bal", "diffHunk": "@@ -65,24 +71,29 @@ public type Client client object {\n         return externBlockingExecute(self, methodIdHandle, payload, headers);\n     }\n \n-    # Calls when executing non-blocking call with gRPC service.\n-    #\n-    # + methodID - Remote service method id.\n-    # + payload - Request message. Message type varies with remote service method parameter..\n-    # + listenerService - Call back listener service. This service listens the response message from service.\n-    # + headers - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - Returns an error if encounters an error while sending the request, returns nil otherwise.\n+# Calls when executing non-blocking call with gRPC service.\n+# ```ballerina\n+# grpc:Error? result = grpcClient->nonBlockingExecute(\"HelloWorld/hello\", req, msgListener, headers);\n+# ```\n+#\n+# + methodID - Remote service method id\n+# + payload - Request message. Message type varies with remote service method parameter\n+# + listenerService - Call back listener service. This service listens the response message from service", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2Njk2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + headers - Optional headers parameter. Passes header value if needed. Default sets to ()\n          \n          \n            \n            # + headers - Optional headers parameter. The header values are passed only if needed. The default value is `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408666969", "createdAt": "2020-04-15T08:24:16Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/client_endpoint.bal", "diffHunk": "@@ -65,24 +71,29 @@ public type Client client object {\n         return externBlockingExecute(self, methodIdHandle, payload, headers);\n     }\n \n-    # Calls when executing non-blocking call with gRPC service.\n-    #\n-    # + methodID - Remote service method id.\n-    # + payload - Request message. Message type varies with remote service method parameter..\n-    # + listenerService - Call back listener service. This service listens the response message from service.\n-    # + headers - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - Returns an error if encounters an error while sending the request, returns nil otherwise.\n+# Calls when executing non-blocking call with gRPC service.\n+# ```ballerina\n+# grpc:Error? result = grpcClient->nonBlockingExecute(\"HelloWorld/hello\", req, msgListener, headers);\n+# ```\n+#\n+# + methodID - Remote service method id\n+# + payload - Request message. Message type varies with remote service method parameter\n+# + listenerService - Call back listener service. This service listens the response message from service\n+# + headers - Optional headers parameter. Passes header value if needed. Default sets to ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2NzEyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An `grpc:Error` if encounters an error while sending the request or else ()\n          \n          \n            \n            # + return - A `grpc:Error` if an error occurs while sending the request or else `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408667128", "createdAt": "2020-04-15T08:24:35Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/client_endpoint.bal", "diffHunk": "@@ -65,24 +71,29 @@ public type Client client object {\n         return externBlockingExecute(self, methodIdHandle, payload, headers);\n     }\n \n-    # Calls when executing non-blocking call with gRPC service.\n-    #\n-    # + methodID - Remote service method id.\n-    # + payload - Request message. Message type varies with remote service method parameter..\n-    # + listenerService - Call back listener service. This service listens the response message from service.\n-    # + headers - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - Returns an error if encounters an error while sending the request, returns nil otherwise.\n+# Calls when executing non-blocking call with gRPC service.\n+# ```ballerina\n+# grpc:Error? result = grpcClient->nonBlockingExecute(\"HelloWorld/hello\", req, msgListener, headers);\n+# ```\n+#\n+# + methodID - Remote service method id\n+# + payload - Request message. Message type varies with remote service method parameter\n+# + listenerService - Call back listener service. This service listens the response message from service\n+# + headers - Optional headers parameter. Passes header value if needed. Default sets to ()\n+# + return - An `grpc:Error` if encounters an error while sending the request or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2NzI1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Calls when executing streaming call with gRPC service.\n          \n          \n            \n            # Calls when executing  a streaming call with a gRPC service.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408667253", "createdAt": "2020-04-15T08:24:46Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/client_endpoint.bal", "diffHunk": "@@ -65,24 +71,29 @@ public type Client client object {\n         return externBlockingExecute(self, methodIdHandle, payload, headers);\n     }\n \n-    # Calls when executing non-blocking call with gRPC service.\n-    #\n-    # + methodID - Remote service method id.\n-    # + payload - Request message. Message type varies with remote service method parameter..\n-    # + listenerService - Call back listener service. This service listens the response message from service.\n-    # + headers - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - Returns an error if encounters an error while sending the request, returns nil otherwise.\n+# Calls when executing non-blocking call with gRPC service.\n+# ```ballerina\n+# grpc:Error? result = grpcClient->nonBlockingExecute(\"HelloWorld/hello\", req, msgListener, headers);\n+# ```\n+#\n+# + methodID - Remote service method id\n+# + payload - Request message. Message type varies with remote service method parameter\n+# + listenerService - Call back listener service. This service listens the response message from service\n+# + headers - Optional headers parameter. Passes header value if needed. Default sets to ()\n+# + return - An `grpc:Error` if encounters an error while sending the request or else ()\n     public remote function nonBlockingExecute(string methodID, anydata payload, service listenerService, Headers? headers = ()) returns Error? {\n          return externNonBlockingExecute(self, java:fromString(methodID), payload, listenerService, headers);\n     }\n \n \n-    # Calls when executing streaming call with gRPC service.\n-    #\n-    # + methodID - Remote service method id.\n-    # + listenerService - Call back listener service. This service listens the response message from service.\n-    # + headers - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - Returns client connection if executes successfully, error otherwise.\n+# Calls when executing streaming call with gRPC service.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2NzM5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + methodID - Remote service method id\n          \n          \n            \n            # + methodID - Remote service method ID", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408667395", "createdAt": "2020-04-15T08:24:54Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/client_endpoint.bal", "diffHunk": "@@ -65,24 +71,29 @@ public type Client client object {\n         return externBlockingExecute(self, methodIdHandle, payload, headers);\n     }\n \n-    # Calls when executing non-blocking call with gRPC service.\n-    #\n-    # + methodID - Remote service method id.\n-    # + payload - Request message. Message type varies with remote service method parameter..\n-    # + listenerService - Call back listener service. This service listens the response message from service.\n-    # + headers - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - Returns an error if encounters an error while sending the request, returns nil otherwise.\n+# Calls when executing non-blocking call with gRPC service.\n+# ```ballerina\n+# grpc:Error? result = grpcClient->nonBlockingExecute(\"HelloWorld/hello\", req, msgListener, headers);\n+# ```\n+#\n+# + methodID - Remote service method id\n+# + payload - Request message. Message type varies with remote service method parameter\n+# + listenerService - Call back listener service. This service listens the response message from service\n+# + headers - Optional headers parameter. Passes header value if needed. Default sets to ()\n+# + return - An `grpc:Error` if encounters an error while sending the request or else ()\n     public remote function nonBlockingExecute(string methodID, anydata payload, service listenerService, Headers? headers = ()) returns Error? {\n          return externNonBlockingExecute(self, java:fromString(methodID), payload, listenerService, headers);\n     }\n \n \n-    # Calls when executing streaming call with gRPC service.\n-    #\n-    # + methodID - Remote service method id.\n-    # + listenerService - Call back listener service. This service listens the response message from service.\n-    # + headers - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - Returns client connection if executes successfully, error otherwise.\n+# Calls when executing streaming call with gRPC service.\n+# ```ballerina\n+# grpc:StreamingClient|grpc:Error result = grpcClient->streamingExecute(\"HelloWorld/lotsOfGreetings\", msgListener, headers);\n+# ```\n+# + methodID - Remote service method id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2NzQ5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + listenerService - Call back listener service. This service listens the response message from service\n          \n          \n            \n            # + listenerService - Call back listener service. This service listens to the response message from the service", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408667493", "createdAt": "2020-04-15T08:25:05Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/client_endpoint.bal", "diffHunk": "@@ -65,24 +71,29 @@ public type Client client object {\n         return externBlockingExecute(self, methodIdHandle, payload, headers);\n     }\n \n-    # Calls when executing non-blocking call with gRPC service.\n-    #\n-    # + methodID - Remote service method id.\n-    # + payload - Request message. Message type varies with remote service method parameter..\n-    # + listenerService - Call back listener service. This service listens the response message from service.\n-    # + headers - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - Returns an error if encounters an error while sending the request, returns nil otherwise.\n+# Calls when executing non-blocking call with gRPC service.\n+# ```ballerina\n+# grpc:Error? result = grpcClient->nonBlockingExecute(\"HelloWorld/hello\", req, msgListener, headers);\n+# ```\n+#\n+# + methodID - Remote service method id\n+# + payload - Request message. Message type varies with remote service method parameter\n+# + listenerService - Call back listener service. This service listens the response message from service\n+# + headers - Optional headers parameter. Passes header value if needed. Default sets to ()\n+# + return - An `grpc:Error` if encounters an error while sending the request or else ()\n     public remote function nonBlockingExecute(string methodID, anydata payload, service listenerService, Headers? headers = ()) returns Error? {\n          return externNonBlockingExecute(self, java:fromString(methodID), payload, listenerService, headers);\n     }\n \n \n-    # Calls when executing streaming call with gRPC service.\n-    #\n-    # + methodID - Remote service method id.\n-    # + listenerService - Call back listener service. This service listens the response message from service.\n-    # + headers - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - Returns client connection if executes successfully, error otherwise.\n+# Calls when executing streaming call with gRPC service.\n+# ```ballerina\n+# grpc:StreamingClient|grpc:Error result = grpcClient->streamingExecute(\"HelloWorld/lotsOfGreetings\", msgListener, headers);\n+# ```\n+# + methodID - Remote service method id\n+# + listenerService - Call back listener service. This service listens the response message from service", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2Nzc2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + headers - Optional headers parameter. Passes header value if needed. Default sets to ()\n          \n          \n            \n            # + headers - Optional headers parameter. The header values are passed only if needed. The default value is `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408667766", "createdAt": "2020-04-15T08:25:36Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/client_endpoint.bal", "diffHunk": "@@ -65,24 +71,29 @@ public type Client client object {\n         return externBlockingExecute(self, methodIdHandle, payload, headers);\n     }\n \n-    # Calls when executing non-blocking call with gRPC service.\n-    #\n-    # + methodID - Remote service method id.\n-    # + payload - Request message. Message type varies with remote service method parameter..\n-    # + listenerService - Call back listener service. This service listens the response message from service.\n-    # + headers - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - Returns an error if encounters an error while sending the request, returns nil otherwise.\n+# Calls when executing non-blocking call with gRPC service.\n+# ```ballerina\n+# grpc:Error? result = grpcClient->nonBlockingExecute(\"HelloWorld/hello\", req, msgListener, headers);\n+# ```\n+#\n+# + methodID - Remote service method id\n+# + payload - Request message. Message type varies with remote service method parameter\n+# + listenerService - Call back listener service. This service listens the response message from service\n+# + headers - Optional headers parameter. Passes header value if needed. Default sets to ()\n+# + return - An `grpc:Error` if encounters an error while sending the request or else ()\n     public remote function nonBlockingExecute(string methodID, anydata payload, service listenerService, Headers? headers = ()) returns Error? {\n          return externNonBlockingExecute(self, java:fromString(methodID), payload, listenerService, headers);\n     }\n \n \n-    # Calls when executing streaming call with gRPC service.\n-    #\n-    # + methodID - Remote service method id.\n-    # + listenerService - Call back listener service. This service listens the response message from service.\n-    # + headers - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - Returns client connection if executes successfully, error otherwise.\n+# Calls when executing streaming call with gRPC service.\n+# ```ballerina\n+# grpc:StreamingClient|grpc:Error result = grpcClient->streamingExecute(\"HelloWorld/lotsOfGreetings\", msgListener, headers);\n+# ```\n+# + methodID - Remote service method id\n+# + listenerService - Call back listener service. This service listens the response message from service\n+# + headers - Optional headers parameter. Passes header value if needed. Default sets to ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2NzkwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - A `grpc:StreamingClient` object if executes successfully or else ()\n          \n          \n            \n            # + return - A `grpc:StreamingClient` object if executed successfully or else `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408667900", "createdAt": "2020-04-15T08:25:47Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/client_endpoint.bal", "diffHunk": "@@ -65,24 +71,29 @@ public type Client client object {\n         return externBlockingExecute(self, methodIdHandle, payload, headers);\n     }\n \n-    # Calls when executing non-blocking call with gRPC service.\n-    #\n-    # + methodID - Remote service method id.\n-    # + payload - Request message. Message type varies with remote service method parameter..\n-    # + listenerService - Call back listener service. This service listens the response message from service.\n-    # + headers - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - Returns an error if encounters an error while sending the request, returns nil otherwise.\n+# Calls when executing non-blocking call with gRPC service.\n+# ```ballerina\n+# grpc:Error? result = grpcClient->nonBlockingExecute(\"HelloWorld/hello\", req, msgListener, headers);\n+# ```\n+#\n+# + methodID - Remote service method id\n+# + payload - Request message. Message type varies with remote service method parameter\n+# + listenerService - Call back listener service. This service listens the response message from service\n+# + headers - Optional headers parameter. Passes header value if needed. Default sets to ()\n+# + return - An `grpc:Error` if encounters an error while sending the request or else ()\n     public remote function nonBlockingExecute(string methodID, anydata payload, service listenerService, Headers? headers = ()) returns Error? {\n          return externNonBlockingExecute(self, java:fromString(methodID), payload, listenerService, headers);\n     }\n \n \n-    # Calls when executing streaming call with gRPC service.\n-    #\n-    # + methodID - Remote service method id.\n-    # + listenerService - Call back listener service. This service listens the response message from service.\n-    # + headers - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - Returns client connection if executes successfully, error otherwise.\n+# Calls when executing streaming call with gRPC service.\n+# ```ballerina\n+# grpc:StreamingClient|grpc:Error result = grpcClient->streamingExecute(\"HelloWorld/lotsOfGreetings\", msgListener, headers);\n+# ```\n+# + methodID - Remote service method id\n+# + listenerService - Call back listener service. This service listens the response message from service\n+# + headers - Optional headers parameter. Passes header value if needed. Default sets to ()\n+# + return - A `grpc:StreamingClient` object if executes successfully or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2ODAxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Provides configurations for facilitating secure communication with a remote HTTP endpoint.\n          \n          \n            \n            # Provides the configurations for facilitating secure communication with a remote HTTP endpoint.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408668010", "createdAt": "2020-04-15T08:25:58Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/client_endpoint.bal", "diffHunk": "@@ -179,7 +190,7 @@ public type ClientConfiguration record {|\n \n # Provides configurations for facilitating secure communication with a remote HTTP endpoint.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2ODEwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + disable - Disable ssl validation\n          \n          \n            \n            # + disable - Disable the SSL validation", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408668108", "createdAt": "2020-04-15T08:26:09Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/client_endpoint.bal", "diffHunk": "@@ -179,7 +190,7 @@ public type ClientConfiguration record {|\n \n # Provides configurations for facilitating secure communication with a remote HTTP endpoint.\n #\n-# + disable - Disable ssl validation.\n+# + disable - Disable ssl validation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2ODE5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + trustStore - Configurations associated with TrustStore\n          \n          \n            \n            # + trustStore - Configurations associated with the TrustStore", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408668190", "createdAt": "2020-04-15T08:26:18Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/client_endpoint.bal", "diffHunk": "@@ -179,7 +190,7 @@ public type ClientConfiguration record {|\n \n # Provides configurations for facilitating secure communication with a remote HTTP endpoint.\n #\n-# + disable - Disable ssl validation.\n+# + disable - Disable ssl validation\n # + trustStore - Configurations associated with TrustStore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2ODI3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + keyStore - Configurations associated with KeyStore\n          \n          \n            \n            # + keyStore - Configurations associated with the KeyStore", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408668271", "createdAt": "2020-04-15T08:26:26Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/client_endpoint.bal", "diffHunk": "@@ -179,7 +190,7 @@ public type ClientConfiguration record {|\n \n # Provides configurations for facilitating secure communication with a remote HTTP endpoint.\n #\n-# + disable - Disable ssl validation.\n+# + disable - Disable ssl validation\n # + trustStore - Configurations associated with TrustStore\n # + keyStore - Configurations associated with KeyStore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2ODM3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # The details of an gRPC error.\n          \n          \n            \n            # The details of a gRPC error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408668379", "createdAt": "2020-04-15T08:26:37Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/grpc_errors.bal", "diffHunk": "@@ -14,7 +14,7 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Holds the details of an gRPC error\n+# The details of an gRPC error.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2ODU1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + cause - Cause of the error; If this error occurred due to another error (Probably from another module)\n          \n          \n            \n            # + cause - Cause of the error if this error occurred due to another error (probably from another module)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408668558", "createdAt": "2020-04-15T08:26:54Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/grpc_errors.bal", "diffHunk": "@@ -14,7 +14,7 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Holds the details of an gRPC error\n+# The details of an gRPC error.\n #\n # + message - Specific error message for the error\n # + cause - Cause of the error; If this error occurred due to another error (Probably from another module)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2OTE4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Prepared `grpc:Error` instance\n          \n          \n            \n            # + return - The prepared `grpc:Error` instance", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408669182", "createdAt": "2020-04-15T08:27:59Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/grpc_errors.bal", "diffHunk": "@@ -128,10 +128,10 @@ public type Error CancelledError | UnKnownError | InvalidArgumentError | Deadlin\n \n # Prepare the `error` as gRPC specific `Error`.\n #\n-# + errorType - the error type.\n-# + message - the error message.\n-# + cause - the `error` instance.\n-# + return - prepared `grpc:Error` instance.\n+# + errorType - The error type\n+# + message - The error message\n+# + cause - The `error` instance\n+# + return - Prepared `grpc:Error` instance", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2OTMzNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Provides actions to read/write header values in gRPC request/response message.\n          \n          \n            \n            # Provides the actions to read/write header values in a gRPC request/response message.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408669337", "createdAt": "2020-04-15T08:28:14Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/headers.bal", "diffHunk": "@@ -19,19 +19,25 @@ import ballerina/java;\n # Provides actions to read/write header values in gRPC request/response message.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2OTQxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Check whether the requested header exists.\n          \n          \n            \n            # Checks whether the requested header exists.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408669419", "createdAt": "2020-04-15T08:28:20Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/headers.bal", "diffHunk": "@@ -19,19 +19,25 @@ import ballerina/java;\n # Provides actions to read/write header values in gRPC request/response message.\n public type Headers object {\n \n-    # Check whether the requested header exists.\n-    #\n-    # + headerName - The header name.\n-    # + return - Returns true if header exists, false otherwise.\n+# Check whether the requested header exists.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2OTU1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns the header value with the specified header name. If there are more than one header value for the\n          \n          \n            \n            # Returns the header value with the specified header name. If there are more than one header values for the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408669555", "createdAt": "2020-04-15T08:28:33Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/headers.bal", "diffHunk": "@@ -19,19 +19,25 @@ import ballerina/java;\n # Provides actions to read/write header values in gRPC request/response message.\n public type Headers object {\n \n-    # Check whether the requested header exists.\n-    #\n-    # + headerName - The header name.\n-    # + return - Returns true if header exists, false otherwise.\n+# Check whether the requested header exists.\n+# ```ballerina\n+# boolean result = headers.exists(\"content-type\");\n+# ```\n+#\n+# + headerName - The header name\n+# + return - True if header exists or else false\n     public function exists(string headerName) returns boolean {\n         return externExists(self, java:fromString(headerName));\n     }\n \n-    # Returns the header value with the specified header name. If there are more than one header value for the\n-    # specified header name, the first value is returned.\n-    #\n-    # + headerName - The header name.\n-    # + return - Returns first header value if exists, nil otherwise.\n+# Returns the header value with the specified header name. If there are more than one header value for the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2OTczNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - First header value if exists or else ()\n          \n          \n            \n            # + return - First header value if exists or else `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408669734", "createdAt": "2020-04-15T08:28:50Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/headers.bal", "diffHunk": "@@ -19,19 +19,25 @@ import ballerina/java;\n # Provides actions to read/write header values in gRPC request/response message.\n public type Headers object {\n \n-    # Check whether the requested header exists.\n-    #\n-    # + headerName - The header name.\n-    # + return - Returns true if header exists, false otherwise.\n+# Check whether the requested header exists.\n+# ```ballerina\n+# boolean result = headers.exists(\"content-type\");\n+# ```\n+#\n+# + headerName - The header name\n+# + return - True if header exists or else false\n     public function exists(string headerName) returns boolean {\n         return externExists(self, java:fromString(headerName));\n     }\n \n-    # Returns the header value with the specified header name. If there are more than one header value for the\n-    # specified header name, the first value is returned.\n-    #\n-    # + headerName - The header name.\n-    # + return - Returns first header value if exists, nil otherwise.\n+# Returns the header value with the specified header name. If there are more than one header value for the\n+# specified header name, the first value is returned.\n+# ```ballerina\n+# string? result = headers.get(\"content-type\");\n+# ```\n+#\n+# + headerName - The header name\n+# + return - First header value if exists or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2OTgwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Gets all transport headers with the specified header name.\n          \n          \n            \n            # Gets all the transport headers with the specified header name.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408669805", "createdAt": "2020-04-15T08:28:58Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/headers.bal", "diffHunk": "@@ -41,38 +47,54 @@ public type Headers object {\n         }\n     }\n \n-    # Gets all transport headers with the specified header name.\n-    #\n-    # + headerName - The header name.\n-    # + return - Returns header value array.\n+# Gets all transport headers with the specified header name.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3MDAzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Removes all transport headers from the message.\n          \n          \n            \n            # Removes all the transport headers from the message.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408670030", "createdAt": "2020-04-15T08:29:18Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/headers.bal", "diffHunk": "@@ -41,38 +47,54 @@ public type Headers object {\n         }\n     }\n \n-    # Gets all transport headers with the specified header name.\n-    #\n-    # + headerName - The header name.\n-    # + return - Returns header value array.\n+# Gets all transport headers with the specified header name.\n+# ```ballerina\n+# string[] result = headers.getAll(\"content-type\");\n+# ```\n+#\n+# + headerName - The header name\n+# + return - Header value array\n     public function getAll(string headerName) returns string[] {\n         return externGetAll(self, java:fromString(headerName));\n     }\n \n-    # Sets the value of a transport header.\n-    #\n-    # + headerName - The header name.\n-    # + headerValue - The header value.\n+# Sets the value of a transport header.\n+# ```ballerina\n+# headers.setEntry(\"content-type\", \"application/grpc\")\n+# ```\n+#\n+# + headerName - The header name\n+# + headerValue - The header value\n     public function setEntry(string headerName, string headerValue) {\n         return externSetEntry(self, java:fromString(headerName), java:fromString(headerValue));\n     }\n \n-    # Adds the specified key/value pair as an HTTP header to the request.\n-    #\n-    # + headerName - The header name.\n-    # + headerValue - The header value.\n+# Adds the specified key/value pair as an HTTP header to the request.\n+# ```ballerina\n+# headers.addEntry(\"content-type\", \"application/grpc\")\n+# ```\n+#\n+# + headerName - The header name\n+# + headerValue - The header value\n     public function addEntry(string headerName, string headerValue) {\n         return externAddEntry(self, java:fromString(headerName), java:fromString(headerValue));\n     }\n \n-    # Removes a transport header from the request.\n-    #\n-    # + headerName - The header name.\n+# Removes a transport header from the request.\n+# ```ballerina\n+# headers.remove(\"content-type\")\n+# ```\n+#\n+# + headerName - The header name\n     public function remove(string headerName) {\n         return externRemove(self, java:fromString(headerName));\n     }\n \n-    # Removes all transport headers from the message.\n+# Removes all transport headers from the message.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3MDE5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An `error` if encounters an error while starting the server or else ()\n          \n          \n            \n            # + return - An `error` if an error occurs while starting the server or else `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408670193", "createdAt": "2020-04-15T08:29:35Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/service_endpoint.bal", "diffHunk": "@@ -27,40 +27,63 @@ public type Listener object {\n     private int port = 0;\n     private ListenerConfiguration config = {};\n \n-    # Starts the registered service.\n-    #\n-    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n+# Starts the registered service.\n+# ```ballerina\n+# error? result = listenerEp.__start();\n+# ```\n+#\n+# + return - An `error` if encounters an error while starting the server or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3MDMyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Stops the service listener gracefully. Already-accepted requests will be served before connection closure.\n          \n          \n            \n            # Stops the service listener gracefully. Already-accepted requests will be served before the connection closure.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408670328", "createdAt": "2020-04-15T08:29:45Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/service_endpoint.bal", "diffHunk": "@@ -27,40 +27,63 @@ public type Listener object {\n     private int port = 0;\n     private ListenerConfiguration config = {};\n \n-    # Starts the registered service.\n-    #\n-    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n+# Starts the registered service.\n+# ```ballerina\n+# error? result = listenerEp.__start();\n+# ```\n+#\n+# + return - An `error` if encounters an error while starting the server or else ()\n     public function __start() returns error? {\n         return externStart(self);\n     }\n \n+# Stops the service listener gracefully. Already-accepted requests will be served before connection closure.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3MDU1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An `error` if an error occurred during the listener stopping process or else ()\n          \n          \n            \n            # + return - An `error` if an error occurred during the listener stopping process or else `()`\n          \n      \n    \n    \n  \n\nNeed to specify the error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408670559", "createdAt": "2020-04-15T08:30:07Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/service_endpoint.bal", "diffHunk": "@@ -27,40 +27,63 @@ public type Listener object {\n     private int port = 0;\n     private ListenerConfiguration config = {};\n \n-    # Starts the registered service.\n-    #\n-    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n+# Starts the registered service.\n+# ```ballerina\n+# error? result = listenerEp.__start();\n+# ```\n+#\n+# + return - An `error` if encounters an error while starting the server or else ()\n     public function __start() returns error? {\n         return externStart(self);\n     }\n \n+# Stops the service listener gracefully. Already-accepted requests will be served before connection closure.\n+# ```ballerina\n+# error? result = listenerEp.__gracefulStop();\n+# ```\n+#\n+# + return - An `error` if an error occurred during the listener stopping process or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3MDc3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An `error` if encounters an error while stopping the server or else ()\n          \n          \n            \n            # + return - An `error` if an error occurs while stopping the server or else `()`\n          \n      \n    \n    \n  \n\nNeed to specify the error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408670775", "createdAt": "2020-04-15T08:30:31Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/service_endpoint.bal", "diffHunk": "@@ -27,40 +27,63 @@ public type Listener object {\n     private int port = 0;\n     private ListenerConfiguration config = {};\n \n-    # Starts the registered service.\n-    #\n-    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n+# Starts the registered service.\n+# ```ballerina\n+# error? result = listenerEp.__start();\n+# ```\n+#\n+# + return - An `error` if encounters an error while starting the server or else ()\n     public function __start() returns error? {\n         return externStart(self);\n     }\n \n+# Stops the service listener gracefully. Already-accepted requests will be served before connection closure.\n+# ```ballerina\n+# error? result = listenerEp.__gracefulStop();\n+# ```\n+#\n+# + return - An `error` if an error occurred during the listener stopping process or else ()\n     public function __gracefulStop() returns error? {\n         return ();\n     }\n \n-    # Stops the registered service.\n-    #\n-    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise.\n+# Stops the registered service.\n+# ```ballerina\n+# error? result = listenerEp.__immediateStop();\n+# ```\n+#\n+# + return - An `error` if encounters an error while stopping the server or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3MDkyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An `error` if encounters an error while attaching the service or else ()\n          \n          \n            \n            # + return - An `error` if encounters an error while attaching the service or else `()`\n          \n      \n    \n    \n  \n\nNeed to specify the error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408670921", "createdAt": "2020-04-15T08:30:47Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/service_endpoint.bal", "diffHunk": "@@ -27,40 +27,63 @@ public type Listener object {\n     private int port = 0;\n     private ListenerConfiguration config = {};\n \n-    # Starts the registered service.\n-    #\n-    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n+# Starts the registered service.\n+# ```ballerina\n+# error? result = listenerEp.__start();\n+# ```\n+#\n+# + return - An `error` if encounters an error while starting the server or else ()\n     public function __start() returns error? {\n         return externStart(self);\n     }\n \n+# Stops the service listener gracefully. Already-accepted requests will be served before connection closure.\n+# ```ballerina\n+# error? result = listenerEp.__gracefulStop();\n+# ```\n+#\n+# + return - An `error` if an error occurred during the listener stopping process or else ()\n     public function __gracefulStop() returns error? {\n         return ();\n     }\n \n-    # Stops the registered service.\n-    #\n-    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise.\n+# Stops the registered service.\n+# ```ballerina\n+# error? result = listenerEp.__immediateStop();\n+# ```\n+#\n+# + return - An `error` if encounters an error while stopping the server or else ()\n     public function __immediateStop() returns error? {\n         return externStop(self);\n     }\n \n-    # Gets called every time a service attaches itself to this endpoint - also happens at module init time.\n-    #\n-    # + s - The type of the service to be registered.\n-    # + name - Name of the service.\n-    # + return - Returns an error if encounters an error while attaching the service, returns nil otherwise.\n+# Gets called every time a service attaches itself to this endpoint - also happens at module init time.\n+# ```ballerina\n+# error? result = listenerEp.__attach(helloService);\n+# ```\n+#\n+# + s - The type of the service to be registered\n+# + name - Name of the service\n+# + return - An `error` if encounters an error while attaching the service or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3MTExMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Detaches a Http or WebSocket service from the listener. Note that detaching a WebSocket service would not affect\n          \n          \n            \n            # Detaches an HTTP or WebSocket service from the listener. Note that detaching a WebSocket service would not affect", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408671112", "createdAt": "2020-04-15T08:31:05Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/service_endpoint.bal", "diffHunk": "@@ -27,40 +27,63 @@ public type Listener object {\n     private int port = 0;\n     private ListenerConfiguration config = {};\n \n-    # Starts the registered service.\n-    #\n-    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n+# Starts the registered service.\n+# ```ballerina\n+# error? result = listenerEp.__start();\n+# ```\n+#\n+# + return - An `error` if encounters an error while starting the server or else ()\n     public function __start() returns error? {\n         return externStart(self);\n     }\n \n+# Stops the service listener gracefully. Already-accepted requests will be served before connection closure.\n+# ```ballerina\n+# error? result = listenerEp.__gracefulStop();\n+# ```\n+#\n+# + return - An `error` if an error occurred during the listener stopping process or else ()\n     public function __gracefulStop() returns error? {\n         return ();\n     }\n \n-    # Stops the registered service.\n-    #\n-    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise.\n+# Stops the registered service.\n+# ```ballerina\n+# error? result = listenerEp.__immediateStop();\n+# ```\n+#\n+# + return - An `error` if encounters an error while stopping the server or else ()\n     public function __immediateStop() returns error? {\n         return externStop(self);\n     }\n \n-    # Gets called every time a service attaches itself to this endpoint - also happens at module init time.\n-    #\n-    # + s - The type of the service to be registered.\n-    # + name - Name of the service.\n-    # + return - Returns an error if encounters an error while attaching the service, returns nil otherwise.\n+# Gets called every time a service attaches itself to this endpoint - also happens at module init time.\n+# ```ballerina\n+# error? result = listenerEp.__attach(helloService);\n+# ```\n+#\n+# + s - The type of the service to be registered\n+# + name - Name of the service\n+# + return - An `error` if encounters an error while attaching the service or else ()\n     public function __attach(service s, string? name = ()) returns error? {\n         return externRegister(self, s, name);\n     }\n \n+# Detaches a Http or WebSocket service from the listener. Note that detaching a WebSocket service would not affect", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3MTIyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An `error` if occurred during detaching of a service or else ()\n          \n          \n            \n            # + return - An `error` if occurred during detaching of a service or else `()`\n          \n      \n    \n    \n  \n\nNeed to specify the error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408671228", "createdAt": "2020-04-15T08:31:17Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/service_endpoint.bal", "diffHunk": "@@ -27,40 +27,63 @@ public type Listener object {\n     private int port = 0;\n     private ListenerConfiguration config = {};\n \n-    # Starts the registered service.\n-    #\n-    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n+# Starts the registered service.\n+# ```ballerina\n+# error? result = listenerEp.__start();\n+# ```\n+#\n+# + return - An `error` if encounters an error while starting the server or else ()\n     public function __start() returns error? {\n         return externStart(self);\n     }\n \n+# Stops the service listener gracefully. Already-accepted requests will be served before connection closure.\n+# ```ballerina\n+# error? result = listenerEp.__gracefulStop();\n+# ```\n+#\n+# + return - An `error` if an error occurred during the listener stopping process or else ()\n     public function __gracefulStop() returns error? {\n         return ();\n     }\n \n-    # Stops the registered service.\n-    #\n-    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise.\n+# Stops the registered service.\n+# ```ballerina\n+# error? result = listenerEp.__immediateStop();\n+# ```\n+#\n+# + return - An `error` if encounters an error while stopping the server or else ()\n     public function __immediateStop() returns error? {\n         return externStop(self);\n     }\n \n-    # Gets called every time a service attaches itself to this endpoint - also happens at module init time.\n-    #\n-    # + s - The type of the service to be registered.\n-    # + name - Name of the service.\n-    # + return - Returns an error if encounters an error while attaching the service, returns nil otherwise.\n+# Gets called every time a service attaches itself to this endpoint - also happens at module init time.\n+# ```ballerina\n+# error? result = listenerEp.__attach(helloService);\n+# ```\n+#\n+# + s - The type of the service to be registered\n+# + name - Name of the service\n+# + return - An `error` if encounters an error while attaching the service or else ()\n     public function __attach(service s, string? name = ()) returns error? {\n         return externRegister(self, s, name);\n     }\n \n+# Detaches a Http or WebSocket service from the listener. Note that detaching a WebSocket service would not affect\n+# the functionality of the existing connections.\n+# ```ballerina\n+# error? result = listenerEp.__detach(helloService);\n+# ```\n+#\n+# + s - The service to be detached\n+# + return - An `error` if occurred during detaching of a service or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3MTMyMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Gets called when the endpoint is being initialize during module init time.\n          \n          \n            \n                # Gets called when the endpoint is being initialized during the module init time.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408671322", "createdAt": "2020-04-15T08:31:27Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/service_endpoint.bal", "diffHunk": "@@ -27,40 +27,63 @@ public type Listener object {\n     private int port = 0;\n     private ListenerConfiguration config = {};\n \n-    # Starts the registered service.\n-    #\n-    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n+# Starts the registered service.\n+# ```ballerina\n+# error? result = listenerEp.__start();\n+# ```\n+#\n+# + return - An `error` if encounters an error while starting the server or else ()\n     public function __start() returns error? {\n         return externStart(self);\n     }\n \n+# Stops the service listener gracefully. Already-accepted requests will be served before connection closure.\n+# ```ballerina\n+# error? result = listenerEp.__gracefulStop();\n+# ```\n+#\n+# + return - An `error` if an error occurred during the listener stopping process or else ()\n     public function __gracefulStop() returns error? {\n         return ();\n     }\n \n-    # Stops the registered service.\n-    #\n-    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise.\n+# Stops the registered service.\n+# ```ballerina\n+# error? result = listenerEp.__immediateStop();\n+# ```\n+#\n+# + return - An `error` if encounters an error while stopping the server or else ()\n     public function __immediateStop() returns error? {\n         return externStop(self);\n     }\n \n-    # Gets called every time a service attaches itself to this endpoint - also happens at module init time.\n-    #\n-    # + s - The type of the service to be registered.\n-    # + name - Name of the service.\n-    # + return - Returns an error if encounters an error while attaching the service, returns nil otherwise.\n+# Gets called every time a service attaches itself to this endpoint - also happens at module init time.\n+# ```ballerina\n+# error? result = listenerEp.__attach(helloService);\n+# ```\n+#\n+# + s - The type of the service to be registered\n+# + name - Name of the service\n+# + return - An `error` if encounters an error while attaching the service or else ()\n     public function __attach(service s, string? name = ()) returns error? {\n         return externRegister(self, s, name);\n     }\n \n+# Detaches a Http or WebSocket service from the listener. Note that detaching a WebSocket service would not affect\n+# the functionality of the existing connections.\n+# ```ballerina\n+# error? result = listenerEp.__detach(helloService);\n+# ```\n+#\n+# + s - The service to be detached\n+# + return - An `error` if occurred during detaching of a service or else ()\n     public function __detach(service s) returns error? {\n     }\n \n     # Gets called when the endpoint is being initialize during module init time.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3MTQ3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #                   disable timeout\n          \n          \n            \n            #                   disable the timeout", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408671474", "createdAt": "2020-04-15T08:31:45Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/service_endpoint.bal", "diffHunk": "@@ -99,10 +122,10 @@ const int DEFAULT_LISTENER_TIMEOUT = 120000; //2 mins\n \n # Represents the gRPC server endpoint configuration.\n #\n-# + host - The server hostname.\n-# + secureSocket - The SSL configurations for the client endpoint.\n+# + host - The server hostname\n+# + secureSocket - The SSL configurations for the client endpoint\n # + timeoutInMillis - Period of time in milliseconds that a connection waits for a read/write operation. Use value 0 to\n-#                   disable timeout.\n+#                   disable timeout", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3MTU4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Provides the gRPC streaming client actions for interacting with gRPC server.\n          \n          \n            \n            # Provides the gRPC streaming client actions for interacting with the gRPC server.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408671589", "createdAt": "2020-04-15T08:31:56Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/streaming_client.bal", "diffHunk": "@@ -19,26 +19,35 @@ import ballerina/java;\n # Provides the gRPC streaming client actions for interacting with gRPC server.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3MTY4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Sends request message to the server.\n          \n          \n            \n            # Sends the request message to the server.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408671683", "createdAt": "2020-04-15T08:32:03Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/streaming_client.bal", "diffHunk": "@@ -19,26 +19,35 @@ import ballerina/java;\n # Provides the gRPC streaming client actions for interacting with gRPC server.\n public type StreamingClient client object {\n \n-    # Sends request message to the server.\n-    #\n-    # + res - The inbound request message.\n-    # + return - Returns an error if encounters an error while sending the response, returns nil otherwise.\n+# Sends request message to the server.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3MTg0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An `grpc:Error` if encounters an error while sending the response or else ()\n          \n          \n            \n            # + return - A `grpc:Error` if an error occurs while sending the response or else `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408671840", "createdAt": "2020-04-15T08:32:18Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/streaming_client.bal", "diffHunk": "@@ -19,26 +19,35 @@ import ballerina/java;\n # Provides the gRPC streaming client actions for interacting with gRPC server.\n public type StreamingClient client object {\n \n-    # Sends request message to the server.\n-    #\n-    # + res - The inbound request message.\n-    # + return - Returns an error if encounters an error while sending the response, returns nil otherwise.\n+# Sends request message to the server.\n+# ```ballerina\n+# grpc:Error? err = caller->send(message);\n+# ```\n+#\n+# + res - The inbound request message\n+# + return - An `grpc:Error` if encounters an error while sending the response or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3MjAyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Informs the server, caller finished sending messages.\n          \n          \n            \n            # Informs the server when the caller has sent all the messages.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408672024", "createdAt": "2020-04-15T08:32:37Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/streaming_client.bal", "diffHunk": "@@ -19,26 +19,35 @@ import ballerina/java;\n # Provides the gRPC streaming client actions for interacting with gRPC server.\n public type StreamingClient client object {\n \n-    # Sends request message to the server.\n-    #\n-    # + res - The inbound request message.\n-    # + return - Returns an error if encounters an error while sending the response, returns nil otherwise.\n+# Sends request message to the server.\n+# ```ballerina\n+# grpc:Error? err = caller->send(message);\n+# ```\n+#\n+# + res - The inbound request message\n+# + return - An `grpc:Error` if encounters an error while sending the response or else ()\n     public remote function send(anydata res) returns Error? {\n         return streamSend(self, res);\n     }\n \n-    # Informs the server, caller finished sending messages.\n-    #\n-    # + return - Returns an error if encounters an error while sending the response, returns nil otherwise.\n+# Informs the server, caller finished sending messages.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3MjI2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An `grpc:Error` if encounters an error while sending the response or else ()\n          \n          \n            \n            # + return - A `grpc:Error` if an error occurs while sending the response or else `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408672263", "createdAt": "2020-04-15T08:32:56Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/streaming_client.bal", "diffHunk": "@@ -19,26 +19,35 @@ import ballerina/java;\n # Provides the gRPC streaming client actions for interacting with gRPC server.\n public type StreamingClient client object {\n \n-    # Sends request message to the server.\n-    #\n-    # + res - The inbound request message.\n-    # + return - Returns an error if encounters an error while sending the response, returns nil otherwise.\n+# Sends request message to the server.\n+# ```ballerina\n+# grpc:Error? err = caller->send(message);\n+# ```\n+#\n+# + res - The inbound request message\n+# + return - An `grpc:Error` if encounters an error while sending the response or else ()\n     public remote function send(anydata res) returns Error? {\n         return streamSend(self, res);\n     }\n \n-    # Informs the server, caller finished sending messages.\n-    #\n-    # + return - Returns an error if encounters an error while sending the response, returns nil otherwise.\n+# Informs the server, caller finished sending messages.\n+# ```ballerina\n+# grpc:Error? result = caller->complete();\n+# ```\n+#\n+# + return - An `grpc:Error` if encounters an error while sending the response or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3MjMzNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Sends error message to the server.\n          \n          \n            \n            # Sends an error message to the server.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408672337", "createdAt": "2020-04-15T08:33:04Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/streaming_client.bal", "diffHunk": "@@ -19,26 +19,35 @@ import ballerina/java;\n # Provides the gRPC streaming client actions for interacting with gRPC server.\n public type StreamingClient client object {\n \n-    # Sends request message to the server.\n-    #\n-    # + res - The inbound request message.\n-    # + return - Returns an error if encounters an error while sending the response, returns nil otherwise.\n+# Sends request message to the server.\n+# ```ballerina\n+# grpc:Error? err = caller->send(message);\n+# ```\n+#\n+# + res - The inbound request message\n+# + return - An `grpc:Error` if encounters an error while sending the response or else ()\n     public remote function send(anydata res) returns Error? {\n         return streamSend(self, res);\n     }\n \n-    # Informs the server, caller finished sending messages.\n-    #\n-    # + return - Returns an error if encounters an error while sending the response, returns nil otherwise.\n+# Informs the server, caller finished sending messages.\n+# ```ballerina\n+# grpc:Error? result = caller->complete();\n+# ```\n+#\n+# + return - An `grpc:Error` if encounters an error while sending the response or else ()\n     public remote function complete() returns Error? {\n         return streamComplete(self);\n     }\n \n-    # Sends error message to the server.\n-    #\n-    # + statusCode - Error status code.\n-    # + message - Error message.\n-    # + return - Returns an error if encounters an error while sending the response, returns nil otherwise.\n+# Sends error message to the server.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3MjUxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An `grpc:Error` if encounters an error while sending the response or else ()\n          \n          \n            \n            # + return - A `grpc:Error` if an error occurs while sending the response or else `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408672516", "createdAt": "2020-04-15T08:33:21Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/streaming_client.bal", "diffHunk": "@@ -19,26 +19,35 @@ import ballerina/java;\n # Provides the gRPC streaming client actions for interacting with gRPC server.\n public type StreamingClient client object {\n \n-    # Sends request message to the server.\n-    #\n-    # + res - The inbound request message.\n-    # + return - Returns an error if encounters an error while sending the response, returns nil otherwise.\n+# Sends request message to the server.\n+# ```ballerina\n+# grpc:Error? err = caller->send(message);\n+# ```\n+#\n+# + res - The inbound request message\n+# + return - An `grpc:Error` if encounters an error while sending the response or else ()\n     public remote function send(anydata res) returns Error? {\n         return streamSend(self, res);\n     }\n \n-    # Informs the server, caller finished sending messages.\n-    #\n-    # + return - Returns an error if encounters an error while sending the response, returns nil otherwise.\n+# Informs the server, caller finished sending messages.\n+# ```ballerina\n+# grpc:Error? result = caller->complete();\n+# ```\n+#\n+# + return - An `grpc:Error` if encounters an error while sending the response or else ()\n     public remote function complete() returns Error? {\n         return streamComplete(self);\n     }\n \n-    # Sends error message to the server.\n-    #\n-    # + statusCode - Error status code.\n-    # + message - Error message.\n-    # + return - Returns an error if encounters an error while sending the response, returns nil otherwise.\n+# Sends error message to the server.\n+# ```ballerina\n+# grpc:Error? result = streamingClient->sendError(grpc:ABORTED, \"Operation aborted\");\n+# ```\n+#\n+# + statusCode - Error status code\n+# + message - Error message\n+# + return - An `grpc:Error` if encounters an error while sending the response or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df67d92037ff0376ca7aebacdb31cc504f78a33c"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ebfff22211c25321ae07dd3e37036bec28dbc31", "author": {"user": {"login": "daneshk", "name": "Danesh Kuruppu"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2ebfff22211c25321ae07dd3e37036bec28dbc31", "committedDate": "2020-04-15T11:35:47Z", "message": "Apply suggestions from code review\r\n\r\nAdd review suggestions\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNjk0MzIz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#pullrequestreview-393694323", "createdAt": "2020-04-15T11:41:27Z", "commit": {"oid": "2ebfff22211c25321ae07dd3e37036bec28dbc31"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMTo0MToyN1rOGF10yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMTo0Nzo1MVrOGF2CFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3NzkzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + name - Service name. This applies only for dynamic service registration.\n          \n          \n            \n            # + name - Service name. This applies only for the dynamic service registration.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408777930", "createdAt": "2020-04-15T11:41:27Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/annotation.bal", "diffHunk": "@@ -14,19 +14,17 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Service configuration. Sets only for client and bidirectional streaming service.\n+# Service configuration.\n #\n-# + name - Resource name. This applies only for client streaming and bidirectional streaming\n-#          where we can define only one resource. In order to generate proto file, service resource name need to\n-#          pass as annotation parameter.\n-# + requestType - Request message type of the resource. This is an optional field. If it is not specified, request\n-#                   type is derived from input argument of the resource.\n-# + responseType - Response message type of the resource. This is an optional field. If it is not specified, response\n-#                   type is derived from the he value passed to the send() expression.\n+# + name - Service name. This applies only for dynamic service registration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ebfff22211c25321ae07dd3e37036bec28dbc31"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3ODQxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + streaming - Server streaming flag. This flag sets to true to specify that the resource is capable of sending\n          \n          \n            \n            # + streaming - Server streaming flag. This flag should be set to true to specify that the resource is capable of sending", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408778414", "createdAt": "2020-04-15T11:42:19Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/annotation.bal", "diffHunk": "@@ -35,10 +33,10 @@ public type GrpcServiceConfig record {|\n     boolean serverStreaming = false;\n |};\n \n-# Service configuration. Sets only for client and bidirectional streaming service.\n+# Service configuration annotation.\n public annotation GrpcServiceConfig ServiceConfig on service;\n \n-# Service resource configuration. Sets only for server streaming service.\n+# Service resource configuration. This should be set only for server streaming services.\n #\n # + streaming - Server streaming flag. This flag sets to true to specify that the resource is capable of sending", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ebfff22211c25321ae07dd3e37036bec28dbc31"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3OTA4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + headers - - Optional headers parameter. Header values are passed only if needed. The default value is `()`\n          \n          \n            \n            # + headers - - Optional headers parameter. The header values are passed only if needed. The default value is `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408779082", "createdAt": "2020-04-15T11:43:37Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/caller.bal", "diffHunk": "@@ -28,42 +28,57 @@ public type Caller client object {\n \n     private int instanceId = -1;\n \n-    # Returns the unique identification of the caller.\n-    #\n-    # + return - caller ID\n+# Returns the unique identification of the caller.\n+# ```ballerina\n+# int result = caller.getId();\n+# ```\n+#\n+# + return - caller ID\n     public function getId() returns int {\n         return self.instanceId;\n     }\n \n-    # Sends outbound response to the caller.\n-    #\n-    # + res - - The outbound response message.\n-    # + headers - - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - - Returns an error if encounters an error while sending the response, returns nil otherwise.\n+# Sends the outbound response to the caller.\n+# ```ballerina\n+# grpc:Error? err = caller->send(message, headers);\n+# ```\n+#\n+# + res - - The outbound response message\n+# + headers - - Optional headers parameter. Header values are passed only if needed. The default value is `()`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ebfff22211c25321ae07dd3e37036bec28dbc31"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3OTE4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - - A `grpc:Error` if an error occurs while sending the response or else ()\n          \n          \n            \n            # + return - - A `grpc:Error` if an error occurs while sending the response or else `()`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408779187", "createdAt": "2020-04-15T11:43:50Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/caller.bal", "diffHunk": "@@ -28,42 +28,57 @@ public type Caller client object {\n \n     private int instanceId = -1;\n \n-    # Returns the unique identification of the caller.\n-    #\n-    # + return - caller ID\n+# Returns the unique identification of the caller.\n+# ```ballerina\n+# int result = caller.getId();\n+# ```\n+#\n+# + return - caller ID\n     public function getId() returns int {\n         return self.instanceId;\n     }\n \n-    # Sends outbound response to the caller.\n-    #\n-    # + res - - The outbound response message.\n-    # + headers - - Optional headers parameter. Passes header value if needed. Default sets to nil.\n-    # + return - - Returns an error if encounters an error while sending the response, returns nil otherwise.\n+# Sends the outbound response to the caller.\n+# ```ballerina\n+# grpc:Error? err = caller->send(message, headers);\n+# ```\n+#\n+# + res - - The outbound response message\n+# + headers - - Optional headers parameter. Header values are passed only if needed. The default value is `()`\n+# + return - - A `grpc:Error` if an error occurs while sending the response or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ebfff22211c25321ae07dd3e37036bec28dbc31"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc4MDM3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents the reason of the unauthenticated error\n          \n          \n            \n            # Represents the reason of the unauthenticated error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408780373", "createdAt": "2020-04-15T11:46:01Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/grpc_errors.bal", "diffHunk": "@@ -14,101 +14,101 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-# Holds the details of an gRPC error\n+# The details of a gRPC error.\n #\n # + message - Specific error message for the error\n-# + cause - Cause of the error; If this error occurred due to another error (Probably from another module)\n+# + cause - Cause of the error if this error occurred due to another error (probably from another module)\n public type Detail record {\n     string message;\n     error cause?;\n };\n \n-# Identifies cancelled error.\n+# Represents the reason of the cancelled error.\n public const CANCELLED_ERROR = \"{ballerina/grpc}CancelledError\";\n # Represents the operation canceled(typically by the caller) error.\n public type CancelledError error<CANCELLED_ERROR, Detail>;\n \n-# Identifies unknown error.\n+# Represents the reason of the unknown error.\n public const UNKNOWN_ERROR = \"{ballerina/grpc}UnKnownError\";\n # Represents unknown error.(e.g. Status value received is unknown)\n public type UnKnownError error<UNKNOWN_ERROR, Detail>;\n \n-# Identifies invalid argument error.\n+# Represents the reason of the invalid argument error.\n public const INVALID_ARGUMENT_ERROR = \"{ballerina/grpc}InvalidArgumentError\";\n # Represents client specified an invalid argument error.\n public type InvalidArgumentError error<INVALID_ARGUMENT_ERROR, Detail>;\n \n-# Identifies deadline exceeded error.\n+# Represents the reason of the deadline exceeded error.\n public const DEADLINE_EXCEEDED_ERROR = \"{ballerina/grpc}DeadlineExceededError\";\n # Represents operation expired before completion error.\n public type DeadlineExceededError error<DEADLINE_EXCEEDED_ERROR, Detail>;\n \n-# Identifies not found error.\n+# Represents the reason of the not found error.\n public const NOT_FOUND_ERROR = \"{ballerina/grpc}NotFoundError\";\n # Represents requested entity (e.g., file or directory) not found error.\n public type NotFoundError error<NOT_FOUND_ERROR, Detail>;\n \n-# Identifies already exists error.\n+# Represents the reason of the already exists error.\n public const ALREADY_EXISTS_ERROR = \"{ballerina/grpc}AleadyExistsError\";\n # Represents error occur when attempt to create an entity which already exists.\n public type AleadyExistsError error<ALREADY_EXISTS_ERROR, Detail>;\n \n-# Identifies permission denied error.\n+# Represents the reason of the permission denied error.\n public const PERMISSION_DENIED_ERROR = \"{ballerina/grpc}PermissionDeniedError\";\n # Represents error occur when the caller does not have permission to execute the specified operation.\n public type PermissionDeniedError error<PERMISSION_DENIED_ERROR, Detail>;\n \n-# Identifies unauthenticated error\n+# Represents the reason of the unauthenticated error", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ebfff22211c25321ae07dd3e37036bec28dbc31"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc4MDU1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Prepare the `error` as gRPC specific `Error`.\n          \n          \n            \n            # Prepare the `error` as a gRPC-specific `Error`.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408780555", "createdAt": "2020-04-15T11:46:22Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/grpc_errors.bal", "diffHunk": "@@ -128,10 +128,10 @@ public type Error CancelledError | UnKnownError | InvalidArgumentError | Deadlin\n \n # Prepare the `error` as gRPC specific `Error`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ebfff22211c25321ae07dd3e37036bec28dbc31"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc4MDkxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An `error` if an error occurs while starting the server or else `()`\n          \n          \n            \n            # + return - An `error` if an error occurs while starting the server or else `()`\n          \n      \n    \n    \n  \n\nNeed to specify the error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408780910", "createdAt": "2020-04-15T11:47:05Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/service_endpoint.bal", "diffHunk": "@@ -27,40 +27,63 @@ public type Listener object {\n     private int port = 0;\n     private ListenerConfiguration config = {};\n \n-    # Starts the registered service.\n-    #\n-    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n+# Starts the registered service.\n+# ```ballerina\n+# error? result = listenerEp.__start();\n+# ```\n+#\n+# + return - An `error` if an error occurs while starting the server or else `()`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ebfff22211c25321ae07dd3e37036bec28dbc31"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc4MTA4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An `error` if an error occurred during the listener stopping process or else `()`\n          \n          \n            \n            # + return - An `error` if an error occurred during the listener stopping process or else `()`\n          \n      \n    \n    \n  \n\nNeed to specify the error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408781080", "createdAt": "2020-04-15T11:47:23Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/service_endpoint.bal", "diffHunk": "@@ -27,40 +27,63 @@ public type Listener object {\n     private int port = 0;\n     private ListenerConfiguration config = {};\n \n-    # Starts the registered service.\n-    #\n-    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n+# Starts the registered service.\n+# ```ballerina\n+# error? result = listenerEp.__start();\n+# ```\n+#\n+# + return - An `error` if an error occurs while starting the server or else `()`\n     public function __start() returns error? {\n         return externStart(self);\n     }\n \n+# Stops the service listener gracefully. Already-accepted requests will be served before the connection closure.\n+# ```ballerina\n+# error? result = listenerEp.__gracefulStop();\n+# ```\n+#\n+# + return - An `error` if an error occurred during the listener stopping process or else `()`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ebfff22211c25321ae07dd3e37036bec28dbc31"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc4MTE5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An `error` if encounters an error while attaching the service or else `()`\n          \n          \n            \n            # + return - An `error` if encounters an error while attaching the service or else `()`\n          \n      \n    \n    \n  \n\nNeed to specify the error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408781194", "createdAt": "2020-04-15T11:47:38Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/service_endpoint.bal", "diffHunk": "@@ -27,40 +27,63 @@ public type Listener object {\n     private int port = 0;\n     private ListenerConfiguration config = {};\n \n-    # Starts the registered service.\n-    #\n-    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n+# Starts the registered service.\n+# ```ballerina\n+# error? result = listenerEp.__start();\n+# ```\n+#\n+# + return - An `error` if an error occurs while starting the server or else `()`\n     public function __start() returns error? {\n         return externStart(self);\n     }\n \n+# Stops the service listener gracefully. Already-accepted requests will be served before the connection closure.\n+# ```ballerina\n+# error? result = listenerEp.__gracefulStop();\n+# ```\n+#\n+# + return - An `error` if an error occurred during the listener stopping process or else `()`\n     public function __gracefulStop() returns error? {\n         return ();\n     }\n \n-    # Stops the registered service.\n-    #\n-    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise.\n+# Stops the registered service.\n+# ```ballerina\n+# error? result = listenerEp.__immediateStop();\n+# ```\n+#\n+# + return - An `error` if an error occurs while stopping the server or else `()`\n     public function __immediateStop() returns error? {\n         return externStop(self);\n     }\n \n-    # Gets called every time a service attaches itself to this endpoint - also happens at module init time.\n-    #\n-    # + s - The type of the service to be registered.\n-    # + name - Name of the service.\n-    # + return - Returns an error if encounters an error while attaching the service, returns nil otherwise.\n+# Gets called every time a service attaches itself to this endpoint - also happens at module init time.\n+# ```ballerina\n+# error? result = listenerEp.__attach(helloService);\n+# ```\n+#\n+# + s - The type of the service to be registered\n+# + name - Name of the service\n+# + return - An `error` if encounters an error while attaching the service or else `()`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ebfff22211c25321ae07dd3e37036bec28dbc31"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc4MTMzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An `error` if occurred during detaching of a service or else `()`\n          \n          \n            \n            # + return - An `error` if occurred during detaching of a service or else `()`\n          \n      \n    \n    \n  \n\nNeed to specify the error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#discussion_r408781332", "createdAt": "2020-04-15T11:47:51Z", "author": {"login": "praneesha"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/service_endpoint.bal", "diffHunk": "@@ -27,40 +27,63 @@ public type Listener object {\n     private int port = 0;\n     private ListenerConfiguration config = {};\n \n-    # Starts the registered service.\n-    #\n-    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n+# Starts the registered service.\n+# ```ballerina\n+# error? result = listenerEp.__start();\n+# ```\n+#\n+# + return - An `error` if an error occurs while starting the server or else `()`\n     public function __start() returns error? {\n         return externStart(self);\n     }\n \n+# Stops the service listener gracefully. Already-accepted requests will be served before the connection closure.\n+# ```ballerina\n+# error? result = listenerEp.__gracefulStop();\n+# ```\n+#\n+# + return - An `error` if an error occurred during the listener stopping process or else `()`\n     public function __gracefulStop() returns error? {\n         return ();\n     }\n \n-    # Stops the registered service.\n-    #\n-    # + return - Returns an error if encounters an error while stopping the server, returns nil otherwise.\n+# Stops the registered service.\n+# ```ballerina\n+# error? result = listenerEp.__immediateStop();\n+# ```\n+#\n+# + return - An `error` if an error occurs while stopping the server or else `()`\n     public function __immediateStop() returns error? {\n         return externStop(self);\n     }\n \n-    # Gets called every time a service attaches itself to this endpoint - also happens at module init time.\n-    #\n-    # + s - The type of the service to be registered.\n-    # + name - Name of the service.\n-    # + return - Returns an error if encounters an error while attaching the service, returns nil otherwise.\n+# Gets called every time a service attaches itself to this endpoint - also happens at module init time.\n+# ```ballerina\n+# error? result = listenerEp.__attach(helloService);\n+# ```\n+#\n+# + s - The type of the service to be registered\n+# + name - Name of the service\n+# + return - An `error` if encounters an error while attaching the service or else `()`\n     public function __attach(service s, string? name = ()) returns error? {\n         return externRegister(self, s, name);\n     }\n \n+# Detaches an HTTP or WebSocket service from the listener. Note that detaching a WebSocket service would not affect\n+# the functionality of the existing connections.\n+# ```ballerina\n+# error? result = listenerEp.__detach(helloService);\n+# ```\n+#\n+# + s - The service to be detached\n+# + return - An `error` if occurred during detaching of a service or else `()`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ebfff22211c25321ae07dd3e37036bec28dbc31"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7cb266795e8d936c0d0195672e461e7ba0531d4", "author": {"user": {"login": "daneshk", "name": "Danesh Kuruppu"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e7cb266795e8d936c0d0195672e461e7ba0531d4", "committedDate": "2020-04-15T11:53:21Z", "message": "Apply suggestions from code review\r\n\r\nAdd review suggestions\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNzA3OTU2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22593#pullrequestreview-393707956", "createdAt": "2020-04-15T12:03:18Z", "commit": {"oid": "e7cb266795e8d936c0d0195672e461e7ba0531d4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4003, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}