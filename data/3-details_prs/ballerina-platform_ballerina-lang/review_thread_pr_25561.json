{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3Njg2MDc3", "number": 25561, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTozMTozN1rOEfX0EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNTo0MDowNlrOEf1E6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzMxNDcyOnYy", "diffSide": "RIGHT", "path": "docs/bir-spec/src/test/java/org/ballerinalang/birspec/BIRTestUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTozMTozN1rOHLm8WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTozNjozOVrOHLnH_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkzNDQyNA==", "bodyText": "Better to break this into two methods and use  @DataProvider to link them. that way you can run one file by file if there is a failed one.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25561#discussion_r481934424", "createdAt": "2020-09-02T09:31:37Z", "author": {"login": "manuranga"}, "path": "docs/bir-spec/src/test/java/org/ballerinalang/birspec/BIRTestUtils.java", "diffHunk": "@@ -42,9 +53,44 @@\n \n     private static final String TEST_RESOURCE_ROOT = \"test-src/\";\n \n+    private static final String LANG_LIB_TEST_SRC_ROOT = \"../../langlib/langlib-test/src/test/resources/test-src\";\n+\n+    private static final Path TEST_ROOT_PATH = Paths.get(LANG_LIB_TEST_SRC_ROOT);\n+\n+    static void validateBIRSpec() throws IOException {\n+\n+        assert TEST_ROOT_PATH.toFile().exists();\n+        List<String> testSources = Files.walk(TEST_ROOT_PATH)\n+                .filter(file -> Files.isRegularFile(file))\n+                .map(file -> file.toAbsolutePath().normalize().toString())\n+                .filter(file -> file.endsWith(\".bal\") && !file.contains(\"negative\") && !file.contains(\"subtype\"))\n+                .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1032ece5b318a07bc0b41c0a63e01a5860479631"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkzNzQwNQ==", "bodyText": "ack, will check on it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25561#discussion_r481937405", "createdAt": "2020-09-02T09:36:39Z", "author": {"login": "Kishanthan"}, "path": "docs/bir-spec/src/test/java/org/ballerinalang/birspec/BIRTestUtils.java", "diffHunk": "@@ -42,9 +53,44 @@\n \n     private static final String TEST_RESOURCE_ROOT = \"test-src/\";\n \n+    private static final String LANG_LIB_TEST_SRC_ROOT = \"../../langlib/langlib-test/src/test/resources/test-src\";\n+\n+    private static final Path TEST_ROOT_PATH = Paths.get(LANG_LIB_TEST_SRC_ROOT);\n+\n+    static void validateBIRSpec() throws IOException {\n+\n+        assert TEST_ROOT_PATH.toFile().exists();\n+        List<String> testSources = Files.walk(TEST_ROOT_PATH)\n+                .filter(file -> Files.isRegularFile(file))\n+                .map(file -> file.toAbsolutePath().normalize().toString())\n+                .filter(file -> file.endsWith(\".bal\") && !file.contains(\"negative\") && !file.contains(\"subtype\"))\n+                .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkzNDQyNA=="}, "originalCommit": {"oid": "1032ece5b318a07bc0b41c0a63e01a5860479631"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODEwOTIxOnYy", "diffSide": "RIGHT", "path": "docs/bir-spec/src/test/java/org/ballerinalang/birspec/BIRTestUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNTo0MDowNlrOHMWpCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMTozMjo0N1rOHMiaSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcxNTkxMg==", "bodyText": "@Kishanthan I checked the code space and I think only you have used a blank line at the beginning of methods. I think it would be nice to follow the same practice everywhere and have no blank lines at the beginning of methods. WDYT?\nhttps://www.oracle.com/java/technologies/javase/codeconventions-whitespace.html", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25561#discussion_r482715912", "createdAt": "2020-09-03T05:40:06Z", "author": {"login": "riyafa"}, "path": "docs/bir-spec/src/test/java/org/ballerinalang/birspec/BIRTestUtils.java", "diffHunk": "@@ -21,30 +21,93 @@\n import io.kaitai.struct.KaitaiStruct;\n import org.ballerinalang.build.kaitai.Bir;\n import org.ballerinalang.model.elements.AttachPoint;\n+import org.ballerinalang.model.elements.PackageID;\n import org.ballerinalang.test.util.BCompileUtil;\n import org.ballerinalang.test.util.CompileResult;\n import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRInstruction;\n import org.wso2.ballerinalang.compiler.bir.model.BIRNode;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRNonTerminator;\n+import org.wso2.ballerinalang.compiler.bir.model.BIROperand;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRTerminator;\n import org.wso2.ballerinalang.compiler.semantics.model.symbols.BPackageSymbol;\n import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n import org.wso2.ballerinalang.programfile.CompiledBinaryFile.BIRPackageFile;\n \n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n+import java.util.stream.Collectors;\n \n /**\n  * Utility methods to help with testing BIR model.\n  */\n class BIRTestUtils {\n \n-    private static final String TEST_RESOURCE_ROOT = \"test-src/\";\n+    private static final String TEST_RESOURCES_ROOT = \"src/test/resources/test-src\";\n+    private static final Path TEST_RESOURCES_ROOT_PATH = Paths.get(TEST_RESOURCES_ROOT);\n+\n+    private static final String LANG_LIB_TEST_SRC_ROOT = \"../../langlib/langlib-test/src/test/resources/test-src\";\n+    private static final Path LANG_LIB_TEST_ROOT_PATH = Paths.get(LANG_LIB_TEST_SRC_ROOT);\n+\n+    @DataProvider(name = \"createTestSources\")\n+    public static Object[][] createTestDataProvider() throws IOException {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d860a805dc7535fb2d46ffdbf26f261961251e44"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkwODc0NQ==", "bodyText": "ack, removed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25561#discussion_r482908745", "createdAt": "2020-09-03T11:32:47Z", "author": {"login": "Kishanthan"}, "path": "docs/bir-spec/src/test/java/org/ballerinalang/birspec/BIRTestUtils.java", "diffHunk": "@@ -21,30 +21,93 @@\n import io.kaitai.struct.KaitaiStruct;\n import org.ballerinalang.build.kaitai.Bir;\n import org.ballerinalang.model.elements.AttachPoint;\n+import org.ballerinalang.model.elements.PackageID;\n import org.ballerinalang.test.util.BCompileUtil;\n import org.ballerinalang.test.util.CompileResult;\n import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRInstruction;\n import org.wso2.ballerinalang.compiler.bir.model.BIRNode;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRNonTerminator;\n+import org.wso2.ballerinalang.compiler.bir.model.BIROperand;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRTerminator;\n import org.wso2.ballerinalang.compiler.semantics.model.symbols.BPackageSymbol;\n import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n import org.wso2.ballerinalang.programfile.CompiledBinaryFile.BIRPackageFile;\n \n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n+import java.util.stream.Collectors;\n \n /**\n  * Utility methods to help with testing BIR model.\n  */\n class BIRTestUtils {\n \n-    private static final String TEST_RESOURCE_ROOT = \"test-src/\";\n+    private static final String TEST_RESOURCES_ROOT = \"src/test/resources/test-src\";\n+    private static final Path TEST_RESOURCES_ROOT_PATH = Paths.get(TEST_RESOURCES_ROOT);\n+\n+    private static final String LANG_LIB_TEST_SRC_ROOT = \"../../langlib/langlib-test/src/test/resources/test-src\";\n+    private static final Path LANG_LIB_TEST_ROOT_PATH = Paths.get(LANG_LIB_TEST_SRC_ROOT);\n+\n+    @DataProvider(name = \"createTestSources\")\n+    public static Object[][] createTestDataProvider() throws IOException {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcxNTkxMg=="}, "originalCommit": {"oid": "d860a805dc7535fb2d46ffdbf26f261961251e44"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 162, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}