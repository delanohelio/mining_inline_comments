{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4Mzk0MTM4", "number": 25021, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNToyMTozNlrOET7tnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMzo0MToyNVrOEWETUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzM2NzMzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNToyMTozNlrOG58VZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMTo0NDowMlrOG6FnVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQxMDUzNA==", "bodyText": "parseCompoundAssignmentStmt() is only called within resumeParsing()\nNo other usage. Do we need that method?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r463410534", "createdAt": "2020-07-31T05:21:36Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -594,41 +510,169 @@ public STNode resumeParsing(ParserRuleContext context, Object... args) {\n                 return parseEnumKeyword();\n             case MATCH_KEYWORD:\n                 return parseMatchKeyword();\n+            case PARAMETERIZED_TYPE:\n+                return parseParameterizedTypeKeyword();\n+            case LOCK_KEYWORD:\n+                return parseLockKeyword();\n+            case STRING_KEYWORD:\n+                return parseStringKeyword();\n+            case TRANSACTIONAL_KEYWORD:\n+                return parseTransactionalKeyword();\n+            default:\n+                return resumeOtherNodesParsing(context, args);\n+        }\n+    }\n+\n+    public STNode resumeActionOrExpressionNodesParsing(ParserRuleContext context, Object... args) {\n+        switch (context) {\n+            case TERMINAL_EXPRESSION:\n+                return parseTerminalExpression((STNode) args[0], (boolean) args[1], (boolean) args[2],\n+                        (boolean) args[3]);\n+            case EXPRESSION_RHS:\n+                return parseExpressionRhs((OperatorPrecedence) args[0], (STNode) args[1], (boolean) args[2],\n+                        (boolean) args[3], (boolean) args[4], (boolean) args[5]);\n+            case CONSTANT_EXPRESSION_START:\n+                return parseSimpleConstExprInternal();\n+            case BINDING_PATTERN_OR_EXPR_RHS:// 2 resume-points : parseTypeDescOrExprRhs()\n+                return parseTypedBindingPatternOrExprRhs((STNode) args[0], (boolean) args[1]);\n+            case TYPE_DESC_OR_EXPR_RHS:\n+                return parseTypeDescOrExprRhs((STNode) args[0]);\n+            case WAIT_FUTURE_EXPR_END:\n+                return parseWaitFutureExprEnd((int) args[0]);\n+            case MEMBER_ACCESS_KEY_EXPR_END:\n+                return parseMemberAccessKeyExprEnd();\n+            case BRACED_EXPR_OR_ANON_FUNC_PARAM_RHS:\n+                return parseBracedExprOrAnonFuncParamRhs((STNode) args[0], (STNode) args[1], (boolean) args[2]);\n+            case EXPR_FUNC_BODY_START:\n+                return parseDoubleRightArrow();\n+            case REMOTE_CALL_OR_ASYNC_SEND_RHS:\n+                return parseRemoteCallOrAsyncSendActionRhs((STNode) args[0], (boolean) args[1], (STNode) args[2]);\n+            default:\n+                return resumeKeywordParsing(context, args);\n+        }\n+    }\n+\n+    public STNode resumeStatementNodeParsing(ParserRuleContext context, Object... args) {\n+        switch (context) {\n+            case STATEMENT:\n+                return parseStatement();\n+            case STATEMENT_WITHOUT_ANNOTS:\n+                return parseStatement((STNode) args[0]);\n+            case STMT_START_WITH_EXPR_RHS:\n+                return parseStatementStartWithExprRhs((STNode) args[0]);\n+            case STMT_START_BRACKETED_LIST_MEMBER:\n+                return parseStatementStartBracketedListMember();\n+            case VAR_DECL_STMT_RHS:\n+                return parseVarDeclRhs((STNode) args[0], (STNode) args[1], (STNode) args[2], (boolean) args[3]);\n+            case COMPOUND_ASSIGNMENT_STMT:// following method is only referred in resume parsing\n+                return parseCompoundAssignmentStmt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db846af90d113c7dab22ac997ef520fb273dc240"}, "originalPosition": 647}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQxODI3NA==", "bodyText": "I don't think we do. I ll remove it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r463418274", "createdAt": "2020-07-31T05:52:57Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -594,41 +510,169 @@ public STNode resumeParsing(ParserRuleContext context, Object... args) {\n                 return parseEnumKeyword();\n             case MATCH_KEYWORD:\n                 return parseMatchKeyword();\n+            case PARAMETERIZED_TYPE:\n+                return parseParameterizedTypeKeyword();\n+            case LOCK_KEYWORD:\n+                return parseLockKeyword();\n+            case STRING_KEYWORD:\n+                return parseStringKeyword();\n+            case TRANSACTIONAL_KEYWORD:\n+                return parseTransactionalKeyword();\n+            default:\n+                return resumeOtherNodesParsing(context, args);\n+        }\n+    }\n+\n+    public STNode resumeActionOrExpressionNodesParsing(ParserRuleContext context, Object... args) {\n+        switch (context) {\n+            case TERMINAL_EXPRESSION:\n+                return parseTerminalExpression((STNode) args[0], (boolean) args[1], (boolean) args[2],\n+                        (boolean) args[3]);\n+            case EXPRESSION_RHS:\n+                return parseExpressionRhs((OperatorPrecedence) args[0], (STNode) args[1], (boolean) args[2],\n+                        (boolean) args[3], (boolean) args[4], (boolean) args[5]);\n+            case CONSTANT_EXPRESSION_START:\n+                return parseSimpleConstExprInternal();\n+            case BINDING_PATTERN_OR_EXPR_RHS:// 2 resume-points : parseTypeDescOrExprRhs()\n+                return parseTypedBindingPatternOrExprRhs((STNode) args[0], (boolean) args[1]);\n+            case TYPE_DESC_OR_EXPR_RHS:\n+                return parseTypeDescOrExprRhs((STNode) args[0]);\n+            case WAIT_FUTURE_EXPR_END:\n+                return parseWaitFutureExprEnd((int) args[0]);\n+            case MEMBER_ACCESS_KEY_EXPR_END:\n+                return parseMemberAccessKeyExprEnd();\n+            case BRACED_EXPR_OR_ANON_FUNC_PARAM_RHS:\n+                return parseBracedExprOrAnonFuncParamRhs((STNode) args[0], (STNode) args[1], (boolean) args[2]);\n+            case EXPR_FUNC_BODY_START:\n+                return parseDoubleRightArrow();\n+            case REMOTE_CALL_OR_ASYNC_SEND_RHS:\n+                return parseRemoteCallOrAsyncSendActionRhs((STNode) args[0], (boolean) args[1], (STNode) args[2]);\n+            default:\n+                return resumeKeywordParsing(context, args);\n+        }\n+    }\n+\n+    public STNode resumeStatementNodeParsing(ParserRuleContext context, Object... args) {\n+        switch (context) {\n+            case STATEMENT:\n+                return parseStatement();\n+            case STATEMENT_WITHOUT_ANNOTS:\n+                return parseStatement((STNode) args[0]);\n+            case STMT_START_WITH_EXPR_RHS:\n+                return parseStatementStartWithExprRhs((STNode) args[0]);\n+            case STMT_START_BRACKETED_LIST_MEMBER:\n+                return parseStatementStartBracketedListMember();\n+            case VAR_DECL_STMT_RHS:\n+                return parseVarDeclRhs((STNode) args[0], (STNode) args[1], (STNode) args[2], (boolean) args[3]);\n+            case COMPOUND_ASSIGNMENT_STMT:// following method is only referred in resume parsing\n+                return parseCompoundAssignmentStmt();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQxMDUzNA=="}, "originalCommit": {"oid": "db846af90d113c7dab22ac997ef520fb273dc240"}, "originalPosition": 647}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQyMDU0OA==", "bodyText": "when removing can remove those enclosing COMPOUND_ASSIGNMENT_STMT ctx as well. Seems it is referred in error handler also.\nSame case with parseNilTypeDescriptor() and its NIL_TYPE_DESCRIPTOR ctx.\nI think we may have to recheck the usage of those ctxs in error handler as well @SupunS WDYT?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r463420548", "createdAt": "2020-07-31T06:01:15Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -594,41 +510,169 @@ public STNode resumeParsing(ParserRuleContext context, Object... args) {\n                 return parseEnumKeyword();\n             case MATCH_KEYWORD:\n                 return parseMatchKeyword();\n+            case PARAMETERIZED_TYPE:\n+                return parseParameterizedTypeKeyword();\n+            case LOCK_KEYWORD:\n+                return parseLockKeyword();\n+            case STRING_KEYWORD:\n+                return parseStringKeyword();\n+            case TRANSACTIONAL_KEYWORD:\n+                return parseTransactionalKeyword();\n+            default:\n+                return resumeOtherNodesParsing(context, args);\n+        }\n+    }\n+\n+    public STNode resumeActionOrExpressionNodesParsing(ParserRuleContext context, Object... args) {\n+        switch (context) {\n+            case TERMINAL_EXPRESSION:\n+                return parseTerminalExpression((STNode) args[0], (boolean) args[1], (boolean) args[2],\n+                        (boolean) args[3]);\n+            case EXPRESSION_RHS:\n+                return parseExpressionRhs((OperatorPrecedence) args[0], (STNode) args[1], (boolean) args[2],\n+                        (boolean) args[3], (boolean) args[4], (boolean) args[5]);\n+            case CONSTANT_EXPRESSION_START:\n+                return parseSimpleConstExprInternal();\n+            case BINDING_PATTERN_OR_EXPR_RHS:// 2 resume-points : parseTypeDescOrExprRhs()\n+                return parseTypedBindingPatternOrExprRhs((STNode) args[0], (boolean) args[1]);\n+            case TYPE_DESC_OR_EXPR_RHS:\n+                return parseTypeDescOrExprRhs((STNode) args[0]);\n+            case WAIT_FUTURE_EXPR_END:\n+                return parseWaitFutureExprEnd((int) args[0]);\n+            case MEMBER_ACCESS_KEY_EXPR_END:\n+                return parseMemberAccessKeyExprEnd();\n+            case BRACED_EXPR_OR_ANON_FUNC_PARAM_RHS:\n+                return parseBracedExprOrAnonFuncParamRhs((STNode) args[0], (STNode) args[1], (boolean) args[2]);\n+            case EXPR_FUNC_BODY_START:\n+                return parseDoubleRightArrow();\n+            case REMOTE_CALL_OR_ASYNC_SEND_RHS:\n+                return parseRemoteCallOrAsyncSendActionRhs((STNode) args[0], (boolean) args[1], (STNode) args[2]);\n+            default:\n+                return resumeKeywordParsing(context, args);\n+        }\n+    }\n+\n+    public STNode resumeStatementNodeParsing(ParserRuleContext context, Object... args) {\n+        switch (context) {\n+            case STATEMENT:\n+                return parseStatement();\n+            case STATEMENT_WITHOUT_ANNOTS:\n+                return parseStatement((STNode) args[0]);\n+            case STMT_START_WITH_EXPR_RHS:\n+                return parseStatementStartWithExprRhs((STNode) args[0]);\n+            case STMT_START_BRACKETED_LIST_MEMBER:\n+                return parseStatementStartBracketedListMember();\n+            case VAR_DECL_STMT_RHS:\n+                return parseVarDeclRhs((STNode) args[0], (STNode) args[1], (STNode) args[2], (boolean) args[3]);\n+            case COMPOUND_ASSIGNMENT_STMT:// following method is only referred in resume parsing\n+                return parseCompoundAssignmentStmt();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQxMDUzNA=="}, "originalCommit": {"oid": "db846af90d113c7dab22ac997ef520fb273dc240"}, "originalPosition": 647}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1MTM1MA==", "bodyText": "Yeah if the method doesn't go to error recovery (eg: parseNilTypeDescriptor method), then we don't need them in the resume method also", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r463551350", "createdAt": "2020-07-31T11:14:17Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -594,41 +510,169 @@ public STNode resumeParsing(ParserRuleContext context, Object... args) {\n                 return parseEnumKeyword();\n             case MATCH_KEYWORD:\n                 return parseMatchKeyword();\n+            case PARAMETERIZED_TYPE:\n+                return parseParameterizedTypeKeyword();\n+            case LOCK_KEYWORD:\n+                return parseLockKeyword();\n+            case STRING_KEYWORD:\n+                return parseStringKeyword();\n+            case TRANSACTIONAL_KEYWORD:\n+                return parseTransactionalKeyword();\n+            default:\n+                return resumeOtherNodesParsing(context, args);\n+        }\n+    }\n+\n+    public STNode resumeActionOrExpressionNodesParsing(ParserRuleContext context, Object... args) {\n+        switch (context) {\n+            case TERMINAL_EXPRESSION:\n+                return parseTerminalExpression((STNode) args[0], (boolean) args[1], (boolean) args[2],\n+                        (boolean) args[3]);\n+            case EXPRESSION_RHS:\n+                return parseExpressionRhs((OperatorPrecedence) args[0], (STNode) args[1], (boolean) args[2],\n+                        (boolean) args[3], (boolean) args[4], (boolean) args[5]);\n+            case CONSTANT_EXPRESSION_START:\n+                return parseSimpleConstExprInternal();\n+            case BINDING_PATTERN_OR_EXPR_RHS:// 2 resume-points : parseTypeDescOrExprRhs()\n+                return parseTypedBindingPatternOrExprRhs((STNode) args[0], (boolean) args[1]);\n+            case TYPE_DESC_OR_EXPR_RHS:\n+                return parseTypeDescOrExprRhs((STNode) args[0]);\n+            case WAIT_FUTURE_EXPR_END:\n+                return parseWaitFutureExprEnd((int) args[0]);\n+            case MEMBER_ACCESS_KEY_EXPR_END:\n+                return parseMemberAccessKeyExprEnd();\n+            case BRACED_EXPR_OR_ANON_FUNC_PARAM_RHS:\n+                return parseBracedExprOrAnonFuncParamRhs((STNode) args[0], (STNode) args[1], (boolean) args[2]);\n+            case EXPR_FUNC_BODY_START:\n+                return parseDoubleRightArrow();\n+            case REMOTE_CALL_OR_ASYNC_SEND_RHS:\n+                return parseRemoteCallOrAsyncSendActionRhs((STNode) args[0], (boolean) args[1], (STNode) args[2]);\n+            default:\n+                return resumeKeywordParsing(context, args);\n+        }\n+    }\n+\n+    public STNode resumeStatementNodeParsing(ParserRuleContext context, Object... args) {\n+        switch (context) {\n+            case STATEMENT:\n+                return parseStatement();\n+            case STATEMENT_WITHOUT_ANNOTS:\n+                return parseStatement((STNode) args[0]);\n+            case STMT_START_WITH_EXPR_RHS:\n+                return parseStatementStartWithExprRhs((STNode) args[0]);\n+            case STMT_START_BRACKETED_LIST_MEMBER:\n+                return parseStatementStartBracketedListMember();\n+            case VAR_DECL_STMT_RHS:\n+                return parseVarDeclRhs((STNode) args[0], (STNode) args[1], (STNode) args[2], (boolean) args[3]);\n+            case COMPOUND_ASSIGNMENT_STMT:// following method is only referred in resume parsing\n+                return parseCompoundAssignmentStmt();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQxMDUzNA=="}, "originalCommit": {"oid": "db846af90d113c7dab22ac997ef520fb273dc240"}, "originalPosition": 647}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU2MjU4MQ==", "bodyText": "@SupunS yea. In my second comment what I meant was , if we are removing those two methods we are eliminating\nstartContext(ParserRuleContext.COMPOUND_ASSIGNMENT_STMT); and startContext(ParserRuleContext.NIL_TYPE_DESCRIPTOR); calls from BallerinaParser.\nBut in the error handler still we are starting new ctxs for those ctxs. So I see some kind of inconsistency IINM.\nMay be we can create an issue to check on that and remove those unnecessary ctx starts from error handler?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r463562581", "createdAt": "2020-07-31T11:44:02Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -594,41 +510,169 @@ public STNode resumeParsing(ParserRuleContext context, Object... args) {\n                 return parseEnumKeyword();\n             case MATCH_KEYWORD:\n                 return parseMatchKeyword();\n+            case PARAMETERIZED_TYPE:\n+                return parseParameterizedTypeKeyword();\n+            case LOCK_KEYWORD:\n+                return parseLockKeyword();\n+            case STRING_KEYWORD:\n+                return parseStringKeyword();\n+            case TRANSACTIONAL_KEYWORD:\n+                return parseTransactionalKeyword();\n+            default:\n+                return resumeOtherNodesParsing(context, args);\n+        }\n+    }\n+\n+    public STNode resumeActionOrExpressionNodesParsing(ParserRuleContext context, Object... args) {\n+        switch (context) {\n+            case TERMINAL_EXPRESSION:\n+                return parseTerminalExpression((STNode) args[0], (boolean) args[1], (boolean) args[2],\n+                        (boolean) args[3]);\n+            case EXPRESSION_RHS:\n+                return parseExpressionRhs((OperatorPrecedence) args[0], (STNode) args[1], (boolean) args[2],\n+                        (boolean) args[3], (boolean) args[4], (boolean) args[5]);\n+            case CONSTANT_EXPRESSION_START:\n+                return parseSimpleConstExprInternal();\n+            case BINDING_PATTERN_OR_EXPR_RHS:// 2 resume-points : parseTypeDescOrExprRhs()\n+                return parseTypedBindingPatternOrExprRhs((STNode) args[0], (boolean) args[1]);\n+            case TYPE_DESC_OR_EXPR_RHS:\n+                return parseTypeDescOrExprRhs((STNode) args[0]);\n+            case WAIT_FUTURE_EXPR_END:\n+                return parseWaitFutureExprEnd((int) args[0]);\n+            case MEMBER_ACCESS_KEY_EXPR_END:\n+                return parseMemberAccessKeyExprEnd();\n+            case BRACED_EXPR_OR_ANON_FUNC_PARAM_RHS:\n+                return parseBracedExprOrAnonFuncParamRhs((STNode) args[0], (STNode) args[1], (boolean) args[2]);\n+            case EXPR_FUNC_BODY_START:\n+                return parseDoubleRightArrow();\n+            case REMOTE_CALL_OR_ASYNC_SEND_RHS:\n+                return parseRemoteCallOrAsyncSendActionRhs((STNode) args[0], (boolean) args[1], (STNode) args[2]);\n+            default:\n+                return resumeKeywordParsing(context, args);\n+        }\n+    }\n+\n+    public STNode resumeStatementNodeParsing(ParserRuleContext context, Object... args) {\n+        switch (context) {\n+            case STATEMENT:\n+                return parseStatement();\n+            case STATEMENT_WITHOUT_ANNOTS:\n+                return parseStatement((STNode) args[0]);\n+            case STMT_START_WITH_EXPR_RHS:\n+                return parseStatementStartWithExprRhs((STNode) args[0]);\n+            case STMT_START_BRACKETED_LIST_MEMBER:\n+                return parseStatementStartBracketedListMember();\n+            case VAR_DECL_STMT_RHS:\n+                return parseVarDeclRhs((STNode) args[0], (STNode) args[1], (STNode) args[2], (boolean) args[3]);\n+            case COMPOUND_ASSIGNMENT_STMT:// following method is only referred in resume parsing\n+                return parseCompoundAssignmentStmt();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQxMDUzNA=="}, "originalCommit": {"oid": "db846af90d113c7dab22ac997ef520fb273dc240"}, "originalPosition": 647}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzM2OTc4OnYy", "diffSide": "LEFT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNToyMzowM1rOG58WvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNTo1NjoyNFrOG583Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQxMDg3Ng==", "bodyText": "parseNilTypeDescriptor() above this line also has no usage in other places.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r463410876", "createdAt": "2020-07-31T05:23:03Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -283,121 +213,35 @@ public STNode resumeParsing(ParserRuleContext context, Object... args) {\n                 return parseOpenBracket();\n             case RESOURCE_DEF:\n                 return parseResource();\n-            case OPTIONAL_SERVICE_NAME:\n-                return parseServiceName();\n-            case SERVICE_KEYWORD:\n-                return parseServiceKeyword();\n-            case ON_KEYWORD:\n-                return parseOnKeyword();\n-            case RESOURCE_KEYWORD:\n-                return parseResourceKeyword();\n-            case LISTENER_KEYWORD:\n-                return parseListenerKeyword();\n             case NIL_TYPE_DESCRIPTOR:// following method is only referred in resume parsing\n                 return parseNilTypeDescriptor();\n-            case COMPOUND_ASSIGNMENT_STMT:// following method is only referred in resume parsing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db846af90d113c7dab22ac997ef520fb273dc240"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQxOTIwNg==", "bodyText": "yea, will remove that as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r463419206", "createdAt": "2020-07-31T05:56:24Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -283,121 +213,35 @@ public STNode resumeParsing(ParserRuleContext context, Object... args) {\n                 return parseOpenBracket();\n             case RESOURCE_DEF:\n                 return parseResource();\n-            case OPTIONAL_SERVICE_NAME:\n-                return parseServiceName();\n-            case SERVICE_KEYWORD:\n-                return parseServiceKeyword();\n-            case ON_KEYWORD:\n-                return parseOnKeyword();\n-            case RESOURCE_KEYWORD:\n-                return parseResourceKeyword();\n-            case LISTENER_KEYWORD:\n-                return parseListenerKeyword();\n             case NIL_TYPE_DESCRIPTOR:// following method is only referred in resume parsing\n                 return parseNilTypeDescriptor();\n-            case COMPOUND_ASSIGNMENT_STMT:// following method is only referred in resume parsing", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQxMDg3Ng=="}, "originalCommit": {"oid": "db846af90d113c7dab22ac997ef520fb273dc240"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzM3NDI5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNToyNTo0MFrOG58ZNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNToyNTo0MFrOG58ZNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQxMTUxMQ==", "bodyText": "we can check if this context is required in resumeParsing and remove // revisit comment", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r463411511", "createdAt": "2020-07-31T05:25:40Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -448,42 +288,20 @@ public STNode resumeParsing(ParserRuleContext context, Object... args) {\n                 return parseLeftArrowToken();\n             case RECEIVE_WORKERS:\n                 return parseReceiveWorkers();\n-            case WAIT_KEYWORD:\n-                return parseWaitKeyword();\n-            case WAIT_FUTURE_EXPR_END:\n-                return parseWaitFutureExprEnd((int) args[0]);\n             case WAIT_FIELD_NAME:// revisit\n                 return parseWaitField();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db846af90d113c7dab22ac997ef520fb273dc240"}, "originalPosition": 297}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzM3Njk5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNToyNzoyNVrOG58atQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNTo1Njo0N1rOG583qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQxMTg5Mw==", "bodyText": "if the conflict is resolved, we can remove the comment", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r463411893", "createdAt": "2020-07-31T05:27:25Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -594,41 +510,169 @@ public STNode resumeParsing(ParserRuleContext context, Object... args) {\n                 return parseEnumKeyword();\n             case MATCH_KEYWORD:\n                 return parseMatchKeyword();\n+            case PARAMETERIZED_TYPE:\n+                return parseParameterizedTypeKeyword();\n+            case LOCK_KEYWORD:\n+                return parseLockKeyword();\n+            case STRING_KEYWORD:\n+                return parseStringKeyword();\n+            case TRANSACTIONAL_KEYWORD:\n+                return parseTransactionalKeyword();\n+            default:\n+                return resumeOtherNodesParsing(context, args);\n+        }\n+    }\n+\n+    public STNode resumeActionOrExpressionNodesParsing(ParserRuleContext context, Object... args) {\n+        switch (context) {\n+            case TERMINAL_EXPRESSION:\n+                return parseTerminalExpression((STNode) args[0], (boolean) args[1], (boolean) args[2],\n+                        (boolean) args[3]);\n+            case EXPRESSION_RHS:\n+                return parseExpressionRhs((OperatorPrecedence) args[0], (STNode) args[1], (boolean) args[2],\n+                        (boolean) args[3], (boolean) args[4], (boolean) args[5]);\n+            case CONSTANT_EXPRESSION_START:\n+                return parseSimpleConstExprInternal();\n+            case BINDING_PATTERN_OR_EXPR_RHS:// 2 resume-points : parseTypeDescOrExprRhs()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db846af90d113c7dab22ac997ef520fb273dc240"}, "originalPosition": 615}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQxOTMwNA==", "bodyText": "forgot to remove the comment", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r463419304", "createdAt": "2020-07-31T05:56:47Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -594,41 +510,169 @@ public STNode resumeParsing(ParserRuleContext context, Object... args) {\n                 return parseEnumKeyword();\n             case MATCH_KEYWORD:\n                 return parseMatchKeyword();\n+            case PARAMETERIZED_TYPE:\n+                return parseParameterizedTypeKeyword();\n+            case LOCK_KEYWORD:\n+                return parseLockKeyword();\n+            case STRING_KEYWORD:\n+                return parseStringKeyword();\n+            case TRANSACTIONAL_KEYWORD:\n+                return parseTransactionalKeyword();\n+            default:\n+                return resumeOtherNodesParsing(context, args);\n+        }\n+    }\n+\n+    public STNode resumeActionOrExpressionNodesParsing(ParserRuleContext context, Object... args) {\n+        switch (context) {\n+            case TERMINAL_EXPRESSION:\n+                return parseTerminalExpression((STNode) args[0], (boolean) args[1], (boolean) args[2],\n+                        (boolean) args[3]);\n+            case EXPRESSION_RHS:\n+                return parseExpressionRhs((OperatorPrecedence) args[0], (STNode) args[1], (boolean) args[2],\n+                        (boolean) args[3], (boolean) args[4], (boolean) args[5]);\n+            case CONSTANT_EXPRESSION_START:\n+                return parseSimpleConstExprInternal();\n+            case BINDING_PATTERN_OR_EXPR_RHS:// 2 resume-points : parseTypeDescOrExprRhs()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQxMTg5Mw=="}, "originalCommit": {"oid": "db846af90d113c7dab22ac997ef520fb273dc240"}, "originalPosition": 615}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDI1NTc5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMTowMTozMlrOG6EpHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToxOTo0OVrOG6FDnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0NjY1NA==", "bodyText": "Can't we have the logic inside this function iteself?\nThere's no value addition of delegating the logic to another function, if this is the only place it is used..", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r463546654", "createdAt": "2020-07-31T11:01:32Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -138,41 +138,28 @@ public STNode parse(ParserRuleContext context) {\n      */\n     @Override\n     public STNode resumeParsing(ParserRuleContext context, Object... args) {\n-        // TODO: revisit the commented resume-points\n+        return resumeTopLevelNodeParsing(context, args);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e47de2a07887eec88bad4be07682b5b702e95d7d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1MzQzOQ==", "bodyText": "yea sounds good to me", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r463553439", "createdAt": "2020-07-31T11:19:49Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -138,41 +138,28 @@ public STNode parse(ParserRuleContext context) {\n      */\n     @Override\n     public STNode resumeParsing(ParserRuleContext context, Object... args) {\n-        // TODO: revisit the commented resume-points\n+        return resumeTopLevelNodeParsing(context, args);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0NjY1NA=="}, "originalCommit": {"oid": "e47de2a07887eec88bad4be07682b5b702e95d7d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDI1OTMxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMTowMjo1OVrOG6ErRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNjoyMzozNlrOG7SsnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0NzIwNg==", "bodyText": "Shall we re-order the functions in the same order they are chained?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r463547206", "createdAt": "2020-07-31T11:02:59Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -594,41 +506,167 @@ public STNode resumeParsing(ParserRuleContext context, Object... args) {\n                 return parseEnumKeyword();\n             case MATCH_KEYWORD:\n                 return parseMatchKeyword();\n+            case PARAMETERIZED_TYPE:\n+                return parseParameterizedTypeKeyword();\n+            case LOCK_KEYWORD:\n+                return parseLockKeyword();\n+            case STRING_KEYWORD:\n+                return parseStringKeyword();\n+            case TRANSACTIONAL_KEYWORD:\n+                return parseTransactionalKeyword();\n+            default:\n+                return resumeOtherNodesParsing(context, args);\n+        }\n+    }\n+\n+    public STNode resumeActionOrExpressionNodesParsing(ParserRuleContext context, Object... args) {\n+        switch (context) {\n+            case TERMINAL_EXPRESSION:\n+                return parseTerminalExpression((STNode) args[0], (boolean) args[1], (boolean) args[2],\n+                        (boolean) args[3]);\n+            case EXPRESSION_RHS:\n+                return parseExpressionRhs((OperatorPrecedence) args[0], (STNode) args[1], (boolean) args[2],\n+                        (boolean) args[3], (boolean) args[4], (boolean) args[5]);\n+            case CONSTANT_EXPRESSION_START:\n+                return parseSimpleConstExprInternal();\n+            case BINDING_PATTERN_OR_EXPR_RHS:\n+                return parseTypedBindingPatternOrExprRhs((STNode) args[0], (boolean) args[1]);\n+            case TYPE_DESC_OR_EXPR_RHS:\n+                return parseTypeDescOrExprRhs((STNode) args[0]);\n+            case WAIT_FUTURE_EXPR_END:\n+                return parseWaitFutureExprEnd((int) args[0]);\n+            case MEMBER_ACCESS_KEY_EXPR_END:\n+                return parseMemberAccessKeyExprEnd();\n+            case BRACED_EXPR_OR_ANON_FUNC_PARAM_RHS:\n+                return parseBracedExprOrAnonFuncParamRhs((STNode) args[0], (STNode) args[1], (boolean) args[2]);\n+            case EXPR_FUNC_BODY_START:\n+                return parseDoubleRightArrow();\n+            case REMOTE_CALL_OR_ASYNC_SEND_RHS:\n+                return parseRemoteCallOrAsyncSendActionRhs((STNode) args[0], (boolean) args[1], (STNode) args[2]);\n+            default:\n+                return resumeKeywordParsing(context, args);\n+        }\n+    }\n+\n+    public STNode resumeStatementNodeParsing(ParserRuleContext context, Object... args) {\n+        switch (context) {\n+            case STATEMENT:\n+                return parseStatement();\n+            case STATEMENT_WITHOUT_ANNOTS:\n+                return parseStatement((STNode) args[0]);\n+            case STMT_START_WITH_EXPR_RHS:\n+                return parseStatementStartWithExprRhs((STNode) args[0]);\n+            case STMT_START_BRACKETED_LIST_MEMBER:\n+                return parseStatementStartBracketedListMember();\n+            case VAR_DECL_STMT_RHS:\n+                return parseVarDeclRhs((STNode) args[0], (STNode) args[1], (STNode) args[2], (boolean) args[3]);\n+            default:\n+                return resumeActionOrExpressionNodesParsing(context, args);\n+        }\n+    }\n+\n+    public STNode resumeTopLevelNodeParsing(ParserRuleContext context, Object... args) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e47de2a07887eec88bad4be07682b5b702e95d7d"}, "originalPosition": 645}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgyNTUwMA==", "bodyText": "sure", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r464825500", "createdAt": "2020-08-04T06:23:36Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -594,41 +506,167 @@ public STNode resumeParsing(ParserRuleContext context, Object... args) {\n                 return parseEnumKeyword();\n             case MATCH_KEYWORD:\n                 return parseMatchKeyword();\n+            case PARAMETERIZED_TYPE:\n+                return parseParameterizedTypeKeyword();\n+            case LOCK_KEYWORD:\n+                return parseLockKeyword();\n+            case STRING_KEYWORD:\n+                return parseStringKeyword();\n+            case TRANSACTIONAL_KEYWORD:\n+                return parseTransactionalKeyword();\n+            default:\n+                return resumeOtherNodesParsing(context, args);\n+        }\n+    }\n+\n+    public STNode resumeActionOrExpressionNodesParsing(ParserRuleContext context, Object... args) {\n+        switch (context) {\n+            case TERMINAL_EXPRESSION:\n+                return parseTerminalExpression((STNode) args[0], (boolean) args[1], (boolean) args[2],\n+                        (boolean) args[3]);\n+            case EXPRESSION_RHS:\n+                return parseExpressionRhs((OperatorPrecedence) args[0], (STNode) args[1], (boolean) args[2],\n+                        (boolean) args[3], (boolean) args[4], (boolean) args[5]);\n+            case CONSTANT_EXPRESSION_START:\n+                return parseSimpleConstExprInternal();\n+            case BINDING_PATTERN_OR_EXPR_RHS:\n+                return parseTypedBindingPatternOrExprRhs((STNode) args[0], (boolean) args[1]);\n+            case TYPE_DESC_OR_EXPR_RHS:\n+                return parseTypeDescOrExprRhs((STNode) args[0]);\n+            case WAIT_FUTURE_EXPR_END:\n+                return parseWaitFutureExprEnd((int) args[0]);\n+            case MEMBER_ACCESS_KEY_EXPR_END:\n+                return parseMemberAccessKeyExprEnd();\n+            case BRACED_EXPR_OR_ANON_FUNC_PARAM_RHS:\n+                return parseBracedExprOrAnonFuncParamRhs((STNode) args[0], (STNode) args[1], (boolean) args[2]);\n+            case EXPR_FUNC_BODY_START:\n+                return parseDoubleRightArrow();\n+            case REMOTE_CALL_OR_ASYNC_SEND_RHS:\n+                return parseRemoteCallOrAsyncSendActionRhs((STNode) args[0], (boolean) args[1], (STNode) args[2]);\n+            default:\n+                return resumeKeywordParsing(context, args);\n+        }\n+    }\n+\n+    public STNode resumeStatementNodeParsing(ParserRuleContext context, Object... args) {\n+        switch (context) {\n+            case STATEMENT:\n+                return parseStatement();\n+            case STATEMENT_WITHOUT_ANNOTS:\n+                return parseStatement((STNode) args[0]);\n+            case STMT_START_WITH_EXPR_RHS:\n+                return parseStatementStartWithExprRhs((STNode) args[0]);\n+            case STMT_START_BRACKETED_LIST_MEMBER:\n+                return parseStatementStartBracketedListMember();\n+            case VAR_DECL_STMT_RHS:\n+                return parseVarDeclRhs((STNode) args[0], (STNode) args[1], (STNode) args[2], (boolean) args[3]);\n+            default:\n+                return resumeActionOrExpressionNodesParsing(context, args);\n+        }\n+    }\n+\n+    public STNode resumeTopLevelNodeParsing(ParserRuleContext context, Object... args) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0NzIwNg=="}, "originalCommit": {"oid": "e47de2a07887eec88bad4be07682b5b702e95d7d"}, "originalPosition": 645}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDI2MjcxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMTowNDozMlrOG6EtfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMTowNDozMlrOG6EtfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0Nzc3Mw==", "bodyText": "Since theres a separate method for resuming keywords, shall we move all keywords in to that method?\nFix in all places", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r463547773", "createdAt": "2020-07-31T11:04:32Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -594,41 +506,167 @@ public STNode resumeParsing(ParserRuleContext context, Object... args) {\n                 return parseEnumKeyword();\n             case MATCH_KEYWORD:\n                 return parseMatchKeyword();\n+            case PARAMETERIZED_TYPE:\n+                return parseParameterizedTypeKeyword();\n+            case LOCK_KEYWORD:\n+                return parseLockKeyword();\n+            case STRING_KEYWORD:\n+                return parseStringKeyword();\n+            case TRANSACTIONAL_KEYWORD:\n+                return parseTransactionalKeyword();\n+            default:\n+                return resumeOtherNodesParsing(context, args);\n+        }\n+    }\n+\n+    public STNode resumeActionOrExpressionNodesParsing(ParserRuleContext context, Object... args) {\n+        switch (context) {\n+            case TERMINAL_EXPRESSION:\n+                return parseTerminalExpression((STNode) args[0], (boolean) args[1], (boolean) args[2],\n+                        (boolean) args[3]);\n+            case EXPRESSION_RHS:\n+                return parseExpressionRhs((OperatorPrecedence) args[0], (STNode) args[1], (boolean) args[2],\n+                        (boolean) args[3], (boolean) args[4], (boolean) args[5]);\n+            case CONSTANT_EXPRESSION_START:\n+                return parseSimpleConstExprInternal();\n+            case BINDING_PATTERN_OR_EXPR_RHS:\n+                return parseTypedBindingPatternOrExprRhs((STNode) args[0], (boolean) args[1]);\n+            case TYPE_DESC_OR_EXPR_RHS:\n+                return parseTypeDescOrExprRhs((STNode) args[0]);\n+            case WAIT_FUTURE_EXPR_END:\n+                return parseWaitFutureExprEnd((int) args[0]);\n+            case MEMBER_ACCESS_KEY_EXPR_END:\n+                return parseMemberAccessKeyExprEnd();\n+            case BRACED_EXPR_OR_ANON_FUNC_PARAM_RHS:\n+                return parseBracedExprOrAnonFuncParamRhs((STNode) args[0], (STNode) args[1], (boolean) args[2]);\n+            case EXPR_FUNC_BODY_START:\n+                return parseDoubleRightArrow();\n+            case REMOTE_CALL_OR_ASYNC_SEND_RHS:\n+                return parseRemoteCallOrAsyncSendActionRhs((STNode) args[0], (boolean) args[1], (STNode) args[2]);\n+            default:\n+                return resumeKeywordParsing(context, args);\n+        }\n+    }\n+\n+    public STNode resumeStatementNodeParsing(ParserRuleContext context, Object... args) {\n+        switch (context) {\n+            case STATEMENT:\n+                return parseStatement();\n+            case STATEMENT_WITHOUT_ANNOTS:\n+                return parseStatement((STNode) args[0]);\n+            case STMT_START_WITH_EXPR_RHS:\n+                return parseStatementStartWithExprRhs((STNode) args[0]);\n+            case STMT_START_BRACKETED_LIST_MEMBER:\n+                return parseStatementStartBracketedListMember();\n+            case VAR_DECL_STMT_RHS:\n+                return parseVarDeclRhs((STNode) args[0], (STNode) args[1], (STNode) args[2], (boolean) args[3]);\n+            default:\n+                return resumeActionOrExpressionNodesParsing(context, args);\n+        }\n+    }\n+\n+    public STNode resumeTopLevelNodeParsing(ParserRuleContext context, Object... args) {\n+        switch (context) {\n+            case TOP_LEVEL_NODE:\n+                return parseTopLevelNode();\n+            case TOP_LEVEL_NODE_WITHOUT_METADATA:\n+                return parseTopLevelNode((STNode) args[0]);\n+            case TOP_LEVEL_NODE_WITHOUT_MODIFIER:\n+                return parseTopLevelNode((STNode) args[0], (STNode) args[1]);\n+            case IMPORT_DECL_RHS:\n+                return parseImportDecl((STNode) args[0], (STNode) args[1]);\n+            case IMPORT_PREFIX:\n+                return parseImportPrefix();\n+            case IMPORT_MODULE_NAME:\n+            case IMPORT_ORG_OR_MODULE_NAME:\n+            case SERVICE_NAME:\n+            case MODULE_ENUM_NAME:\n+                return parseIdentifier(context);\n+            case IMPORT_KEYWORD:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e47de2a07887eec88bad4be07682b5b702e95d7d"}, "originalPosition": 662}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDI2Mzk4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMTowNDo1OVrOG6EuSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMTowNDo1OVrOG6EuSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0Nzk3Nw==", "bodyText": "This is not a keyword", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r463547977", "createdAt": "2020-07-31T11:04:59Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -523,22 +327,163 @@ public STNode resumeParsing(ParserRuleContext context, Object... args) {\n                 return parseEnumMemberRhs((STNode) args[0], (STNode) args[1]);\n             case RECEIVE_FIELD:\n                 return parseReceiveField();\n-            case PUBLIC_KEYWORD:// 2 resume-points : parseObjectMemberVisibility()\n+            case PARAM_END:\n+                return parseParameterRhs();\n+            case ELLIPSIS:\n+                return parseEllipsis();\n+            case BINARY_OPERATOR:\n+                return parseBinaryOperator();\n+            case QUESTION_MARK:\n+                return parseQuestionMark();\n+            case COMPOUND_BINARY_OPERATOR:\n+                return parseCompoundBinaryOperator();\n+            case UNARY_OPERATOR:\n+                return parseUnaryOperator();\n+            case AT:\n+                return parseAtToken();\n+            case RIGHT_ARROW:\n+                return parseRightArrow();\n+            case ATTACH_POINT:\n+                return parseAnnotationAttachPoint();\n+            case PIPE:\n+                return parsePipeToken();\n+            case INTERPOLATION_START_TOKEN:\n+                return parseInterpolationStart();\n+            case LIST_MATCH_PATTERN_MEMBER_RHS:\n+                return parseListMatchPatternMemberRhs();\n+            case LIST_BINDING_PATTERN_MEMBER:\n+                return parseListBindingPatternMember();\n+            case FIELD_MATCH_PATTERN_MEMBER:\n+                return parseFieldMatchPatternMember();\n+            case FIELD_MATCH_PATTERN_MEMBER_RHS:\n+                return parseFieldMatchPatternRhs();\n+            case FUNC_MATCH_PATTERN_OR_CONST_PATTERN:\n+                return parseFunctionalMatchPatternOrConsPattern((STNode) args[0]);\n+            case ARG_MATCH_PATTERN:\n+                return parseArgMatchPattern();\n+            case ARG_MATCH_PATTERN_RHS:\n+                return parseArgMatchPatternRhs();\n+            case ARG_BINDING_PATTERN:\n+                return parseArgBindingPattern();\n+            case ARG_BINDING_PATTERN_END:\n+                return parseArgsBindingPatternEnd();\n+            case TABLE_ROW_END:\n+                return parseTableRowEnd();\n+            case LIST_BP_OR_LIST_CONSTRUCTOR_MEMBER:\n+                return parseListBindingPatternOrListConstructorMember();\n+            case TUPLE_TYPE_DESC_OR_LIST_CONST_MEMBER:\n+                return parseTupleTypeDescOrListConstructorMember((STNode) args[0]);\n+            case REMOTE_CALL_OR_ASYNC_SEND_END:\n+                return parseRemoteCallOrAsyncSendEnd((STNode) args[0], (STNode) args[1], (STNode) args[2]);\n+            case RECEIVE_FIELD_END:\n+                return parseReceiveFieldEnd();\n+            case MAPPING_BP_OR_MAPPING_CONSTRUCTOR_MEMBER:\n+                return parseMappingBindingPatterOrMappingConstructorMember();\n+            default:\n+                throw new IllegalStateException(\"cannot resume parsing the rule: \" + context);\n+        }\n+    }\n+\n+    public STNode resumeKeywordParsing(ParserRuleContext context, Object... args) {\n+        switch (context) {\n+            case EXTERNAL_KEYWORD:\n+                return parseExternalKeyword();\n+            case IF_KEYWORD:\n+                return parseIfKeyword();\n+            case ELSE_KEYWORD:\n+                return parseElseKeyword();\n+            case ELSE_BODY:\n+                return parseElseBody();\n+            case WHILE_KEYWORD:\n+                return parseWhileKeyword();\n+            case PANIC_KEYWORD:\n+                return parsePanicKeyword();\n+            case VERSION_KEYWORD:\n+                return parseVersionKeyword();\n+            case AS_KEYWORD:\n+                return parseAsKeyword();\n+            case CONTINUE_KEYWORD:\n+                return parseContinueKeyword();\n+            case BREAK_KEYWORD:\n+                return parseBreakKeyword();\n+            case RETURN_KEYWORD:\n+                return parseReturnKeyword();\n+            case ON_KEYWORD:\n+                return parseOnKeyword();\n+            case RESOURCE_KEYWORD:\n+                return parseResourceKeyword();\n+            case TYPEOF_KEYWORD:\n+                return parseTypeofKeyword();\n+            case IS_KEYWORD:\n+                return parseIsKeyword();\n+            case SOURCE_KEYWORD:\n+                return parseSourceKeyword();\n+            case XMLNS_KEYWORD:\n+                return parseXMLNSKeyword();\n+            case WORKER_KEYWORD:\n+                return parseWorkerKeyword();\n+            case FORK_KEYWORD:\n+                return parseForkKeyword();\n+            case TRAP_KEYWORD:\n+                return parseTrapKeyword();\n+            case IN_KEYWORD:\n+                return parseInKeyword();\n+            case FOREACH_KEYWORD:\n+                return parseForEachKeyword();\n+            case TABLE_KEYWORD:\n+                return parseTableKeyword();\n+            case KEY_KEYWORD:\n+                return parseKeyKeyword();\n+            case TABLE_KEYWORD_RHS:\n+                return parseTableConstructorOrQuery((STNode) args[0], (boolean) args[1]);\n+            case ERROR_KEYWORD:\n+                return parseErrorKeyword();\n+            case LET_KEYWORD:\n+                return parseLetKeyword();\n+            case STREAM_KEYWORD:\n+                return parseStreamKeyword();\n+            case RETURNS_KEYWORD:\n+                return parseReturnsKeyword();\n+            case NEW_KEYWORD:\n+                return parseNewKeyword();\n+            case FROM_KEYWORD:\n+                return parseFromKeyword();\n+            case WHERE_KEYWORD:\n+                return parseWhereKeyword();\n+            case SELECT_KEYWORD:\n+                return parseSelectKeyword();\n+            case ORDER_KEYWORD:\n+                return parseOrderKeyword();\n+            case BY_KEYWORD:\n+                return parseByKeyword();\n+            case ASCENDING_KEYWORD:\n+                return parseAscendingKeyword();\n+            case DESCENDING_KEYWORD:\n+                return parseDescendingKeyword();\n+            case TRANSACTION_KEYWORD:\n+                return parseTransactionKeyword();\n+            case COMMIT_KEYWORD:\n+                return parseCommitKeyword();\n+            case RETRY_KEYWORD:\n+                return parseRetryKeyword();\n+            case ROLLBACK_KEYWORD:\n+                return parseRollbackKeyword();\n+            case WAIT_KEYWORD:\n+                return parseWaitKeyword();\n+            case DO_KEYWORD:\n+                return parseDoKeyword();\n+            case RETRY_KEYWORD_RHS:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e47de2a07887eec88bad4be07682b5b702e95d7d"}, "originalPosition": 513}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDI2NDU4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMTowNToxNVrOG6EurQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMTowNToxNVrOG6EurQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0ODA3Nw==", "bodyText": "Not a keyword", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r463548077", "createdAt": "2020-07-31T11:05:15Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -594,41 +506,167 @@ public STNode resumeParsing(ParserRuleContext context, Object... args) {\n                 return parseEnumKeyword();\n             case MATCH_KEYWORD:\n                 return parseMatchKeyword();\n+            case PARAMETERIZED_TYPE:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e47de2a07887eec88bad4be07682b5b702e95d7d"}, "originalPosition": 586}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDI2ODk1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMTowNzowOVrOG6ExbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToxODo0MlrOG6FB-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0ODc4MQ==", "bodyText": "Whats the size of this method after refactoring?\nShould we separate out syntax tokens (semicolons, commas, etc) as well?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r463548781", "createdAt": "2020-07-31T11:07:09Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -138,41 +138,28 @@ public STNode parse(ParserRuleContext context) {\n      */\n     @Override\n     public STNode resumeParsing(ParserRuleContext context, Object... args) {\n-        // TODO: revisit the commented resume-points\n+        return resumeTopLevelNodeParsing(context, args);\n+    }\n+\n+    public STNode resumeOtherNodesParsing(ParserRuleContext context, Object... args) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e47de2a07887eec88bad4be07682b5b702e95d7d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1MzAxOA==", "bodyText": "I think that ll be a good idea, resumeothernodes is about 300 lines long.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r463553018", "createdAt": "2020-07-31T11:18:42Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -138,41 +138,28 @@ public STNode parse(ParserRuleContext context) {\n      */\n     @Override\n     public STNode resumeParsing(ParserRuleContext context, Object... args) {\n-        // TODO: revisit the commented resume-points\n+        return resumeTopLevelNodeParsing(context, args);\n+    }\n+\n+    public STNode resumeOtherNodesParsing(ParserRuleContext context, Object... args) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0ODc4MQ=="}, "originalCommit": {"oid": "e47de2a07887eec88bad4be07682b5b702e95d7d"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDI3Mjg4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMTowODo1MFrOG6Ezzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMzoyNTo1OFrOG74x7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0OTM5MQ==", "bodyText": "These mapping field related stuff are part of mapping constructor.Think these should go under resume expressions method ?\nThere are few other such cases.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r463549391", "createdAt": "2020-07-31T11:08:50Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -184,97 +171,40 @@ public STNode resumeParsing(ParserRuleContext context, Object... args) {\n             case PARAMETER_NAME_RHS:\n                 return parseParameterRhs((SyntaxKind) args[0], (STNode) args[1], (STNode) args[2], (STNode) args[3],\n                         (STNode) args[4], (STNode) args[5]);\n-            case TOP_LEVEL_NODE:\n-                return parseTopLevelNode();\n-            case TOP_LEVEL_NODE_WITHOUT_METADATA:\n-                return parseTopLevelNode((STNode) args[0]);\n-            case TOP_LEVEL_NODE_WITHOUT_MODIFIER:\n-                return parseTopLevelNode((STNode) args[0], (STNode) args[1]);\n             case TYPE_NAME_OR_VAR_NAME:\n-            case RECORD_FIELD_NAME_OR_TYPE_NAME:\n             case TYPE_REFERENCE:\n-            case ANNOT_REFERENCE:\n             case FIELD_ACCESS_IDENTIFIER:\n                 return parseQualifiedIdentifier(context, (boolean) args[0]);\n-            case VAR_DECL_STMT_RHS:\n-                return parseVarDeclRhs((STNode) args[0], (STNode) args[1], (STNode) args[2], (boolean) args[3]);\n             case FIELD_DESCRIPTOR_RHS:\n                 return parseFieldDescriptorRhs((STNode) args[0], (STNode) args[1], (STNode) args[2], (STNode) args[3]);\n-            case RECORD_BODY_START:\n-                return parseRecordBodyStartDelimiter();\n             case TYPE_DESCRIPTOR:\n                 return parseTypeDescriptorInternal((ParserRuleContext) args[0], (boolean) args[1]);\n-            case OBJECT_MEMBER_START:\n-                return parseObjectMember();\n-            case OBJECT_FUNC_OR_FIELD_WITHOUT_VISIBILITY:\n-                return parseObjectMethodOrField((STNode) args[0], (STNode) args[1]);\n-            case OBJECT_FIELD_RHS:\n-                return parseObjectFieldRhs((STNode) args[0], (STNode) args[1], (STNode) args[2], (STNode) args[3],\n-                        (STNode) args[4]);\n-            case OBJECT_TYPE_QUALIFIER:\n-                return parseObjectTypeQualifiers();\n-            case OBJECT_KEYWORD:\n-                return parseObjectKeyword();\n             case TYPE_NAME:\n                 return parseTypeName();\n-            case IF_KEYWORD:\n-                return parseIfKeyword();\n-            case ELSE_KEYWORD:\n-                return parseElseKeyword();\n-            case ELSE_BODY:\n-                return parseElseBody();\n-            case WHILE_KEYWORD:\n-                return parseWhileKeyword();\n-            case PANIC_KEYWORD:\n-                return parsePanicKeyword();\n-            case IMPORT_DECL_RHS:\n-                return parseImportDecl((STNode) args[0], (STNode) args[1]);\n-            case IMPORT_PREFIX:\n-                return parseImportPrefix();\n-            case IMPORT_MODULE_NAME:\n-            case IMPORT_ORG_OR_MODULE_NAME:\n-            case VARIABLE_REF:// 2 resume-points : parseQualifiedIdentifier(context)\n-            case SERVICE_NAME:\n+            case VARIABLE_REF:\n             case IMPLICIT_ANON_FUNC_PARAM:\n             case MAPPING_FIELD_NAME:\n             case RECEIVE_FIELD_NAME:\n-            case MODULE_ENUM_NAME:\n             case ENUM_MEMBER_NAME:\n                 return parseIdentifier(context);\n-            case IMPORT_KEYWORD:\n-                return parseImportKeyword();\n             case SLASH:\n                 return parseSlashToken();\n             case DOT:\n                 return parseDotToken();\n-            case IMPORT_VERSION_DECL:\n-                return parseVersion();\n-            case VERSION_KEYWORD:\n-                return parseVersionKeyword();\n             case VERSION_NUMBER:\n                 return parseVersionNumber();\n             case DECIMAL_INTEGER_LITERAL:\n             case MAJOR_VERSION:\n             case MINOR_VERSION:\n             case PATCH_VERSION:\n                 return parseDecimalIntLiteral(context);\n-            case IMPORT_SUB_VERSION:\n-                return parseSubVersion(context);\n-            case IMPORT_PREFIX_DECL:\n-                return parseImportPrefixDecl();\n-            case AS_KEYWORD:\n-                return parseAsKeyword();\n-            case CONTINUE_KEYWORD:\n-                return parseContinueKeyword();\n-            case BREAK_KEYWORD:\n-                return parseBreakKeyword();\n-            case RETURN_KEYWORD:\n-                return parseReturnKeyword();\n             case MAPPING_FIELD:\n             case FIRST_MAPPING_FIELD:\n                 return parseMappingField((ParserRuleContext) args[0]);\n-            case SPECIFIC_FIELD_RHS:// 2 resume-points : parseMappingFieldRhs(key)\n+            case SPECIFIC_FIELD_RHS:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e47de2a07887eec88bad4be07682b5b702e95d7d"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1NTI1NA==", "bodyText": "I ll look into it", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r463555254", "createdAt": "2020-07-31T11:24:48Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -184,97 +171,40 @@ public STNode resumeParsing(ParserRuleContext context, Object... args) {\n             case PARAMETER_NAME_RHS:\n                 return parseParameterRhs((SyntaxKind) args[0], (STNode) args[1], (STNode) args[2], (STNode) args[3],\n                         (STNode) args[4], (STNode) args[5]);\n-            case TOP_LEVEL_NODE:\n-                return parseTopLevelNode();\n-            case TOP_LEVEL_NODE_WITHOUT_METADATA:\n-                return parseTopLevelNode((STNode) args[0]);\n-            case TOP_LEVEL_NODE_WITHOUT_MODIFIER:\n-                return parseTopLevelNode((STNode) args[0], (STNode) args[1]);\n             case TYPE_NAME_OR_VAR_NAME:\n-            case RECORD_FIELD_NAME_OR_TYPE_NAME:\n             case TYPE_REFERENCE:\n-            case ANNOT_REFERENCE:\n             case FIELD_ACCESS_IDENTIFIER:\n                 return parseQualifiedIdentifier(context, (boolean) args[0]);\n-            case VAR_DECL_STMT_RHS:\n-                return parseVarDeclRhs((STNode) args[0], (STNode) args[1], (STNode) args[2], (boolean) args[3]);\n             case FIELD_DESCRIPTOR_RHS:\n                 return parseFieldDescriptorRhs((STNode) args[0], (STNode) args[1], (STNode) args[2], (STNode) args[3]);\n-            case RECORD_BODY_START:\n-                return parseRecordBodyStartDelimiter();\n             case TYPE_DESCRIPTOR:\n                 return parseTypeDescriptorInternal((ParserRuleContext) args[0], (boolean) args[1]);\n-            case OBJECT_MEMBER_START:\n-                return parseObjectMember();\n-            case OBJECT_FUNC_OR_FIELD_WITHOUT_VISIBILITY:\n-                return parseObjectMethodOrField((STNode) args[0], (STNode) args[1]);\n-            case OBJECT_FIELD_RHS:\n-                return parseObjectFieldRhs((STNode) args[0], (STNode) args[1], (STNode) args[2], (STNode) args[3],\n-                        (STNode) args[4]);\n-            case OBJECT_TYPE_QUALIFIER:\n-                return parseObjectTypeQualifiers();\n-            case OBJECT_KEYWORD:\n-                return parseObjectKeyword();\n             case TYPE_NAME:\n                 return parseTypeName();\n-            case IF_KEYWORD:\n-                return parseIfKeyword();\n-            case ELSE_KEYWORD:\n-                return parseElseKeyword();\n-            case ELSE_BODY:\n-                return parseElseBody();\n-            case WHILE_KEYWORD:\n-                return parseWhileKeyword();\n-            case PANIC_KEYWORD:\n-                return parsePanicKeyword();\n-            case IMPORT_DECL_RHS:\n-                return parseImportDecl((STNode) args[0], (STNode) args[1]);\n-            case IMPORT_PREFIX:\n-                return parseImportPrefix();\n-            case IMPORT_MODULE_NAME:\n-            case IMPORT_ORG_OR_MODULE_NAME:\n-            case VARIABLE_REF:// 2 resume-points : parseQualifiedIdentifier(context)\n-            case SERVICE_NAME:\n+            case VARIABLE_REF:\n             case IMPLICIT_ANON_FUNC_PARAM:\n             case MAPPING_FIELD_NAME:\n             case RECEIVE_FIELD_NAME:\n-            case MODULE_ENUM_NAME:\n             case ENUM_MEMBER_NAME:\n                 return parseIdentifier(context);\n-            case IMPORT_KEYWORD:\n-                return parseImportKeyword();\n             case SLASH:\n                 return parseSlashToken();\n             case DOT:\n                 return parseDotToken();\n-            case IMPORT_VERSION_DECL:\n-                return parseVersion();\n-            case VERSION_KEYWORD:\n-                return parseVersionKeyword();\n             case VERSION_NUMBER:\n                 return parseVersionNumber();\n             case DECIMAL_INTEGER_LITERAL:\n             case MAJOR_VERSION:\n             case MINOR_VERSION:\n             case PATCH_VERSION:\n                 return parseDecimalIntLiteral(context);\n-            case IMPORT_SUB_VERSION:\n-                return parseSubVersion(context);\n-            case IMPORT_PREFIX_DECL:\n-                return parseImportPrefixDecl();\n-            case AS_KEYWORD:\n-                return parseAsKeyword();\n-            case CONTINUE_KEYWORD:\n-                return parseContinueKeyword();\n-            case BREAK_KEYWORD:\n-                return parseBreakKeyword();\n-            case RETURN_KEYWORD:\n-                return parseReturnKeyword();\n             case MAPPING_FIELD:\n             case FIRST_MAPPING_FIELD:\n                 return parseMappingField((ParserRuleContext) args[0]);\n-            case SPECIFIC_FIELD_RHS:// 2 resume-points : parseMappingFieldRhs(key)\n+            case SPECIFIC_FIELD_RHS:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0OTM5MQ=="}, "originalCommit": {"oid": "e47de2a07887eec88bad4be07682b5b702e95d7d"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAzMzg0Nw==", "bodyText": "@m36dot There are still some more places that we can merge. eg: statements/module-level nodes related stuff that are added under \"resumeOtherNodesParsing\".\nIs it possible to completely remove \"resumeOtherNodesParsing\" method?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r465033847", "createdAt": "2020-08-04T13:03:58Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -184,97 +171,40 @@ public STNode resumeParsing(ParserRuleContext context, Object... args) {\n             case PARAMETER_NAME_RHS:\n                 return parseParameterRhs((SyntaxKind) args[0], (STNode) args[1], (STNode) args[2], (STNode) args[3],\n                         (STNode) args[4], (STNode) args[5]);\n-            case TOP_LEVEL_NODE:\n-                return parseTopLevelNode();\n-            case TOP_LEVEL_NODE_WITHOUT_METADATA:\n-                return parseTopLevelNode((STNode) args[0]);\n-            case TOP_LEVEL_NODE_WITHOUT_MODIFIER:\n-                return parseTopLevelNode((STNode) args[0], (STNode) args[1]);\n             case TYPE_NAME_OR_VAR_NAME:\n-            case RECORD_FIELD_NAME_OR_TYPE_NAME:\n             case TYPE_REFERENCE:\n-            case ANNOT_REFERENCE:\n             case FIELD_ACCESS_IDENTIFIER:\n                 return parseQualifiedIdentifier(context, (boolean) args[0]);\n-            case VAR_DECL_STMT_RHS:\n-                return parseVarDeclRhs((STNode) args[0], (STNode) args[1], (STNode) args[2], (boolean) args[3]);\n             case FIELD_DESCRIPTOR_RHS:\n                 return parseFieldDescriptorRhs((STNode) args[0], (STNode) args[1], (STNode) args[2], (STNode) args[3]);\n-            case RECORD_BODY_START:\n-                return parseRecordBodyStartDelimiter();\n             case TYPE_DESCRIPTOR:\n                 return parseTypeDescriptorInternal((ParserRuleContext) args[0], (boolean) args[1]);\n-            case OBJECT_MEMBER_START:\n-                return parseObjectMember();\n-            case OBJECT_FUNC_OR_FIELD_WITHOUT_VISIBILITY:\n-                return parseObjectMethodOrField((STNode) args[0], (STNode) args[1]);\n-            case OBJECT_FIELD_RHS:\n-                return parseObjectFieldRhs((STNode) args[0], (STNode) args[1], (STNode) args[2], (STNode) args[3],\n-                        (STNode) args[4]);\n-            case OBJECT_TYPE_QUALIFIER:\n-                return parseObjectTypeQualifiers();\n-            case OBJECT_KEYWORD:\n-                return parseObjectKeyword();\n             case TYPE_NAME:\n                 return parseTypeName();\n-            case IF_KEYWORD:\n-                return parseIfKeyword();\n-            case ELSE_KEYWORD:\n-                return parseElseKeyword();\n-            case ELSE_BODY:\n-                return parseElseBody();\n-            case WHILE_KEYWORD:\n-                return parseWhileKeyword();\n-            case PANIC_KEYWORD:\n-                return parsePanicKeyword();\n-            case IMPORT_DECL_RHS:\n-                return parseImportDecl((STNode) args[0], (STNode) args[1]);\n-            case IMPORT_PREFIX:\n-                return parseImportPrefix();\n-            case IMPORT_MODULE_NAME:\n-            case IMPORT_ORG_OR_MODULE_NAME:\n-            case VARIABLE_REF:// 2 resume-points : parseQualifiedIdentifier(context)\n-            case SERVICE_NAME:\n+            case VARIABLE_REF:\n             case IMPLICIT_ANON_FUNC_PARAM:\n             case MAPPING_FIELD_NAME:\n             case RECEIVE_FIELD_NAME:\n-            case MODULE_ENUM_NAME:\n             case ENUM_MEMBER_NAME:\n                 return parseIdentifier(context);\n-            case IMPORT_KEYWORD:\n-                return parseImportKeyword();\n             case SLASH:\n                 return parseSlashToken();\n             case DOT:\n                 return parseDotToken();\n-            case IMPORT_VERSION_DECL:\n-                return parseVersion();\n-            case VERSION_KEYWORD:\n-                return parseVersionKeyword();\n             case VERSION_NUMBER:\n                 return parseVersionNumber();\n             case DECIMAL_INTEGER_LITERAL:\n             case MAJOR_VERSION:\n             case MINOR_VERSION:\n             case PATCH_VERSION:\n                 return parseDecimalIntLiteral(context);\n-            case IMPORT_SUB_VERSION:\n-                return parseSubVersion(context);\n-            case IMPORT_PREFIX_DECL:\n-                return parseImportPrefixDecl();\n-            case AS_KEYWORD:\n-                return parseAsKeyword();\n-            case CONTINUE_KEYWORD:\n-                return parseContinueKeyword();\n-            case BREAK_KEYWORD:\n-                return parseBreakKeyword();\n-            case RETURN_KEYWORD:\n-                return parseReturnKeyword();\n             case MAPPING_FIELD:\n             case FIRST_MAPPING_FIELD:\n                 return parseMappingField((ParserRuleContext) args[0]);\n-            case SPECIFIC_FIELD_RHS:// 2 resume-points : parseMappingFieldRhs(key)\n+            case SPECIFIC_FIELD_RHS:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0OTM5MQ=="}, "originalCommit": {"oid": "e47de2a07887eec88bad4be07682b5b702e95d7d"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMxMDY1OA==", "bodyText": "I am not sure if we can entirely remove resumeothernodesparsing method. Where should types and binding patterns be moved to?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r465310658", "createdAt": "2020-08-04T20:27:36Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -184,97 +171,40 @@ public STNode resumeParsing(ParserRuleContext context, Object... args) {\n             case PARAMETER_NAME_RHS:\n                 return parseParameterRhs((SyntaxKind) args[0], (STNode) args[1], (STNode) args[2], (STNode) args[3],\n                         (STNode) args[4], (STNode) args[5]);\n-            case TOP_LEVEL_NODE:\n-                return parseTopLevelNode();\n-            case TOP_LEVEL_NODE_WITHOUT_METADATA:\n-                return parseTopLevelNode((STNode) args[0]);\n-            case TOP_LEVEL_NODE_WITHOUT_MODIFIER:\n-                return parseTopLevelNode((STNode) args[0], (STNode) args[1]);\n             case TYPE_NAME_OR_VAR_NAME:\n-            case RECORD_FIELD_NAME_OR_TYPE_NAME:\n             case TYPE_REFERENCE:\n-            case ANNOT_REFERENCE:\n             case FIELD_ACCESS_IDENTIFIER:\n                 return parseQualifiedIdentifier(context, (boolean) args[0]);\n-            case VAR_DECL_STMT_RHS:\n-                return parseVarDeclRhs((STNode) args[0], (STNode) args[1], (STNode) args[2], (boolean) args[3]);\n             case FIELD_DESCRIPTOR_RHS:\n                 return parseFieldDescriptorRhs((STNode) args[0], (STNode) args[1], (STNode) args[2], (STNode) args[3]);\n-            case RECORD_BODY_START:\n-                return parseRecordBodyStartDelimiter();\n             case TYPE_DESCRIPTOR:\n                 return parseTypeDescriptorInternal((ParserRuleContext) args[0], (boolean) args[1]);\n-            case OBJECT_MEMBER_START:\n-                return parseObjectMember();\n-            case OBJECT_FUNC_OR_FIELD_WITHOUT_VISIBILITY:\n-                return parseObjectMethodOrField((STNode) args[0], (STNode) args[1]);\n-            case OBJECT_FIELD_RHS:\n-                return parseObjectFieldRhs((STNode) args[0], (STNode) args[1], (STNode) args[2], (STNode) args[3],\n-                        (STNode) args[4]);\n-            case OBJECT_TYPE_QUALIFIER:\n-                return parseObjectTypeQualifiers();\n-            case OBJECT_KEYWORD:\n-                return parseObjectKeyword();\n             case TYPE_NAME:\n                 return parseTypeName();\n-            case IF_KEYWORD:\n-                return parseIfKeyword();\n-            case ELSE_KEYWORD:\n-                return parseElseKeyword();\n-            case ELSE_BODY:\n-                return parseElseBody();\n-            case WHILE_KEYWORD:\n-                return parseWhileKeyword();\n-            case PANIC_KEYWORD:\n-                return parsePanicKeyword();\n-            case IMPORT_DECL_RHS:\n-                return parseImportDecl((STNode) args[0], (STNode) args[1]);\n-            case IMPORT_PREFIX:\n-                return parseImportPrefix();\n-            case IMPORT_MODULE_NAME:\n-            case IMPORT_ORG_OR_MODULE_NAME:\n-            case VARIABLE_REF:// 2 resume-points : parseQualifiedIdentifier(context)\n-            case SERVICE_NAME:\n+            case VARIABLE_REF:\n             case IMPLICIT_ANON_FUNC_PARAM:\n             case MAPPING_FIELD_NAME:\n             case RECEIVE_FIELD_NAME:\n-            case MODULE_ENUM_NAME:\n             case ENUM_MEMBER_NAME:\n                 return parseIdentifier(context);\n-            case IMPORT_KEYWORD:\n-                return parseImportKeyword();\n             case SLASH:\n                 return parseSlashToken();\n             case DOT:\n                 return parseDotToken();\n-            case IMPORT_VERSION_DECL:\n-                return parseVersion();\n-            case VERSION_KEYWORD:\n-                return parseVersionKeyword();\n             case VERSION_NUMBER:\n                 return parseVersionNumber();\n             case DECIMAL_INTEGER_LITERAL:\n             case MAJOR_VERSION:\n             case MINOR_VERSION:\n             case PATCH_VERSION:\n                 return parseDecimalIntLiteral(context);\n-            case IMPORT_SUB_VERSION:\n-                return parseSubVersion(context);\n-            case IMPORT_PREFIX_DECL:\n-                return parseImportPrefixDecl();\n-            case AS_KEYWORD:\n-                return parseAsKeyword();\n-            case CONTINUE_KEYWORD:\n-                return parseContinueKeyword();\n-            case BREAK_KEYWORD:\n-                return parseBreakKeyword();\n-            case RETURN_KEYWORD:\n-                return parseReturnKeyword();\n             case MAPPING_FIELD:\n             case FIRST_MAPPING_FIELD:\n                 return parseMappingField((ParserRuleContext) args[0]);\n-            case SPECIFIC_FIELD_RHS:// 2 resume-points : parseMappingFieldRhs(key)\n+            case SPECIFIC_FIELD_RHS:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0OTM5MQ=="}, "originalCommit": {"oid": "e47de2a07887eec88bad4be07682b5b702e95d7d"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0OTQ1Mg==", "bodyText": "Can introduce a resume method for types?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r465449452", "createdAt": "2020-08-05T03:25:58Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -184,97 +171,40 @@ public STNode resumeParsing(ParserRuleContext context, Object... args) {\n             case PARAMETER_NAME_RHS:\n                 return parseParameterRhs((SyntaxKind) args[0], (STNode) args[1], (STNode) args[2], (STNode) args[3],\n                         (STNode) args[4], (STNode) args[5]);\n-            case TOP_LEVEL_NODE:\n-                return parseTopLevelNode();\n-            case TOP_LEVEL_NODE_WITHOUT_METADATA:\n-                return parseTopLevelNode((STNode) args[0]);\n-            case TOP_LEVEL_NODE_WITHOUT_MODIFIER:\n-                return parseTopLevelNode((STNode) args[0], (STNode) args[1]);\n             case TYPE_NAME_OR_VAR_NAME:\n-            case RECORD_FIELD_NAME_OR_TYPE_NAME:\n             case TYPE_REFERENCE:\n-            case ANNOT_REFERENCE:\n             case FIELD_ACCESS_IDENTIFIER:\n                 return parseQualifiedIdentifier(context, (boolean) args[0]);\n-            case VAR_DECL_STMT_RHS:\n-                return parseVarDeclRhs((STNode) args[0], (STNode) args[1], (STNode) args[2], (boolean) args[3]);\n             case FIELD_DESCRIPTOR_RHS:\n                 return parseFieldDescriptorRhs((STNode) args[0], (STNode) args[1], (STNode) args[2], (STNode) args[3]);\n-            case RECORD_BODY_START:\n-                return parseRecordBodyStartDelimiter();\n             case TYPE_DESCRIPTOR:\n                 return parseTypeDescriptorInternal((ParserRuleContext) args[0], (boolean) args[1]);\n-            case OBJECT_MEMBER_START:\n-                return parseObjectMember();\n-            case OBJECT_FUNC_OR_FIELD_WITHOUT_VISIBILITY:\n-                return parseObjectMethodOrField((STNode) args[0], (STNode) args[1]);\n-            case OBJECT_FIELD_RHS:\n-                return parseObjectFieldRhs((STNode) args[0], (STNode) args[1], (STNode) args[2], (STNode) args[3],\n-                        (STNode) args[4]);\n-            case OBJECT_TYPE_QUALIFIER:\n-                return parseObjectTypeQualifiers();\n-            case OBJECT_KEYWORD:\n-                return parseObjectKeyword();\n             case TYPE_NAME:\n                 return parseTypeName();\n-            case IF_KEYWORD:\n-                return parseIfKeyword();\n-            case ELSE_KEYWORD:\n-                return parseElseKeyword();\n-            case ELSE_BODY:\n-                return parseElseBody();\n-            case WHILE_KEYWORD:\n-                return parseWhileKeyword();\n-            case PANIC_KEYWORD:\n-                return parsePanicKeyword();\n-            case IMPORT_DECL_RHS:\n-                return parseImportDecl((STNode) args[0], (STNode) args[1]);\n-            case IMPORT_PREFIX:\n-                return parseImportPrefix();\n-            case IMPORT_MODULE_NAME:\n-            case IMPORT_ORG_OR_MODULE_NAME:\n-            case VARIABLE_REF:// 2 resume-points : parseQualifiedIdentifier(context)\n-            case SERVICE_NAME:\n+            case VARIABLE_REF:\n             case IMPLICIT_ANON_FUNC_PARAM:\n             case MAPPING_FIELD_NAME:\n             case RECEIVE_FIELD_NAME:\n-            case MODULE_ENUM_NAME:\n             case ENUM_MEMBER_NAME:\n                 return parseIdentifier(context);\n-            case IMPORT_KEYWORD:\n-                return parseImportKeyword();\n             case SLASH:\n                 return parseSlashToken();\n             case DOT:\n                 return parseDotToken();\n-            case IMPORT_VERSION_DECL:\n-                return parseVersion();\n-            case VERSION_KEYWORD:\n-                return parseVersionKeyword();\n             case VERSION_NUMBER:\n                 return parseVersionNumber();\n             case DECIMAL_INTEGER_LITERAL:\n             case MAJOR_VERSION:\n             case MINOR_VERSION:\n             case PATCH_VERSION:\n                 return parseDecimalIntLiteral(context);\n-            case IMPORT_SUB_VERSION:\n-                return parseSubVersion(context);\n-            case IMPORT_PREFIX_DECL:\n-                return parseImportPrefixDecl();\n-            case AS_KEYWORD:\n-                return parseAsKeyword();\n-            case CONTINUE_KEYWORD:\n-                return parseContinueKeyword();\n-            case BREAK_KEYWORD:\n-                return parseBreakKeyword();\n-            case RETURN_KEYWORD:\n-                return parseReturnKeyword();\n             case MAPPING_FIELD:\n             case FIRST_MAPPING_FIELD:\n                 return parseMappingField((ParserRuleContext) args[0]);\n-            case SPECIFIC_FIELD_RHS:// 2 resume-points : parseMappingFieldRhs(key)\n+            case SPECIFIC_FIELD_RHS:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0OTM5MQ=="}, "originalCommit": {"oid": "e47de2a07887eec88bad4be07682b5b702e95d7d"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDM4MTQ2OnYy", "diffSide": "LEFT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMjo0NzozMlrOG7ezQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNTo0MzowMFrOG77APg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAyMzgwOA==", "bodyText": "Don't we need this method? What if we reach here after recovering?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r465023808", "createdAt": "2020-08-04T12:47:32Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -5546,7 +5590,7 @@ private STNode parseObjectMember(SyntaxKind nextTokenKind, STNode metadata) {\n                 break;\n             case PUBLIC_KEYWORD:\n             case PRIVATE_KEYWORD:\n-                STNode visibilityQualifier = parseObjectMemberVisibility();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "942a12e88d2f68b598e11c7949f531249f4c191a"}, "originalPosition": 844}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMxMDE2Mw==", "bodyText": "no we don't. if we reach there all we have to do is just consume that token. Since we reach there we know for sure the token we want is the one we have.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r465310163", "createdAt": "2020-08-04T20:26:32Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -5546,7 +5590,7 @@ private STNode parseObjectMember(SyntaxKind nextTokenKind, STNode metadata) {\n                 break;\n             case PUBLIC_KEYWORD:\n             case PRIVATE_KEYWORD:\n-                STNode visibilityQualifier = parseObjectMemberVisibility();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAyMzgwOA=="}, "originalCommit": {"oid": "942a12e88d2f68b598e11c7949f531249f4c191a"}, "originalPosition": 844}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0ODY2NQ==", "bodyText": "What if we reach here by inserting a token as the recovery solution? Then consume() will pick the next token from the stream, not the inserted one..", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r465448665", "createdAt": "2020-08-05T03:22:44Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -5546,7 +5590,7 @@ private STNode parseObjectMember(SyntaxKind nextTokenKind, STNode metadata) {\n                 break;\n             case PUBLIC_KEYWORD:\n             case PRIVATE_KEYWORD:\n-                STNode visibilityQualifier = parseObjectMemberVisibility();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAyMzgwOA=="}, "originalCommit": {"oid": "942a12e88d2f68b598e11c7949f531249f4c191a"}, "originalPosition": 844}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ4NTQ0NA==", "bodyText": "yes that is correct, but the method currently doesn't solve this issue. e.g if we get an asterisk token then we still just consume it.\nshall I make the method take in next token instead of nextTokenKind, that way we can still use the recovered node.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r465485444", "createdAt": "2020-08-05T05:41:48Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -5546,7 +5590,7 @@ private STNode parseObjectMember(SyntaxKind nextTokenKind, STNode metadata) {\n                 break;\n             case PUBLIC_KEYWORD:\n             case PRIVATE_KEYWORD:\n-                STNode visibilityQualifier = parseObjectMemberVisibility();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAyMzgwOA=="}, "originalCommit": {"oid": "942a12e88d2f68b598e11c7949f531249f4c191a"}, "originalPosition": 844}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ4NTg4Ng==", "bodyText": "also there is the point that the visibility qualifiers are optional hence recovery won't be inserting them.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r465485886", "createdAt": "2020-08-05T05:43:00Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -5546,7 +5590,7 @@ private STNode parseObjectMember(SyntaxKind nextTokenKind, STNode metadata) {\n                 break;\n             case PUBLIC_KEYWORD:\n             case PRIVATE_KEYWORD:\n-                STNode visibilityQualifier = parseObjectMemberVisibility();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAyMzgwOA=="}, "originalCommit": {"oid": "942a12e88d2f68b598e11c7949f531249f4c191a"}, "originalPosition": 844}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTkxOTQ0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/test/resources/misc/ambiguity/ambiguity_source_30.bal", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNzozMDo0MVrOG8msmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwOToyNzo0NVrOG-HXQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIwMTc1Mg==", "bodyText": "Extra newlines?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r466201752", "createdAt": "2020-08-06T07:30:41Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/resources/misc/ambiguity/ambiguity_source_30.bal", "diffHunk": "@@ -0,0 +1,7 @@\n+import ballerina/http;\n+\n+public function hello() re\n+\n+\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1d1031dabf638a85db7bcdd1212306a29a4fc8f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1NTAxOQ==", "bodyText": "@m36dot Is this intentional?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r466855019", "createdAt": "2020-08-07T06:52:18Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/resources/misc/ambiguity/ambiguity_source_30.bal", "diffHunk": "@@ -0,0 +1,7 @@\n+import ballerina/http;\n+\n+public function hello() re\n+\n+\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIwMTc1Mg=="}, "originalCommit": {"oid": "a1d1031dabf638a85db7bcdd1212306a29a4fc8f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc4NTUzOQ==", "bodyText": "yes, thats exactly the way the source was in the issue", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r467785539", "createdAt": "2020-08-10T09:27:45Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/test/resources/misc/ambiguity/ambiguity_source_30.bal", "diffHunk": "@@ -0,0 +1,7 @@\n+import ballerina/http;\n+\n+public function hello() re\n+\n+\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIwMTc1Mg=="}, "originalCommit": {"oid": "a1d1031dabf638a85db7bcdd1212306a29a4fc8f"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTY3MzA4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMjo1NjowMlrOG9Kx2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjoxODoyOVrOG9N1xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc5MjkyMQ==", "bodyText": "@m36dot Do we need this?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r466792921", "createdAt": "2020-08-07T02:56:02Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -184,8 +184,11 @@\n     private static final ParserRuleContext[] OBJECT_MEMBER_WITHOUT_METADATA =\n             { ParserRuleContext.ASTERISK, ParserRuleContext.OBJECT_FUNC_OR_FIELD, ParserRuleContext.CLOSE_BRACE };\n \n-    private static final ParserRuleContext[] OBJECT_FUNC_OR_FIELD = { ParserRuleContext.PUBLIC_KEYWORD,\n-            ParserRuleContext.PRIVATE_KEYWORD, ParserRuleContext.OBJECT_FUNC_OR_FIELD_WITHOUT_VISIBILITY };\n+    private static final ParserRuleContext[] OBJECT_FUNC_OR_FIELD = { ParserRuleContext.PUBLIC_OR_PRIVATE_KEYWORD,\n+            ParserRuleContext.OBJECT_FUNC_OR_FIELD_WITHOUT_VISIBILITY };\n+\n+    private static final ParserRuleContext[] PUBLIC_OR_PRIVATE_KEYWORD = {ParserRuleContext.PUBLIC_KEYWORD,\n+            ParserRuleContext.PRIVATE_KEYWORD};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1d1031dabf638a85db7bcdd1212306a29a4fc8f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg0MzA3OA==", "bodyText": "forgot to remove it, will remove it", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r466843078", "createdAt": "2020-08-07T06:18:29Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -184,8 +184,11 @@\n     private static final ParserRuleContext[] OBJECT_MEMBER_WITHOUT_METADATA =\n             { ParserRuleContext.ASTERISK, ParserRuleContext.OBJECT_FUNC_OR_FIELD, ParserRuleContext.CLOSE_BRACE };\n \n-    private static final ParserRuleContext[] OBJECT_FUNC_OR_FIELD = { ParserRuleContext.PUBLIC_KEYWORD,\n-            ParserRuleContext.PRIVATE_KEYWORD, ParserRuleContext.OBJECT_FUNC_OR_FIELD_WITHOUT_VISIBILITY };\n+    private static final ParserRuleContext[] OBJECT_FUNC_OR_FIELD = { ParserRuleContext.PUBLIC_OR_PRIVATE_KEYWORD,\n+            ParserRuleContext.OBJECT_FUNC_OR_FIELD_WITHOUT_VISIBILITY };\n+\n+    private static final ParserRuleContext[] PUBLIC_OR_PRIVATE_KEYWORD = {ParserRuleContext.PUBLIC_KEYWORD,\n+            ParserRuleContext.PRIVATE_KEYWORD};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc5MjkyMQ=="}, "originalCommit": {"oid": "a1d1031dabf638a85db7bcdd1212306a29a4fc8f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTczOTk1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMzozNzoyMFrOG9LXmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjoxODoxMFrOG9N1OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgwMjU4Ng==", "bodyText": "formatting is incorrect", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r466802586", "createdAt": "2020-08-07T03:37:20Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -574,6 +577,9 @@\n     private static final ParserRuleContext[] JOIN_CLAUSE_START =\n             { ParserRuleContext.JOIN_KEYWORD, ParserRuleContext.OUTER_KEYWORD };\n \n+    private static final ParserRuleContext[] MAPPING_BP_OR_MAPPING_CONSTRUCTOR_MEMBER =\n+            { ParserRuleContext.MAPPING_BINDING_PATTERN_MEMBER, ParserRuleContext.MAPPING_FIELD};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1d1031dabf638a85db7bcdd1212306a29a4fc8f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg0MjkzNg==", "bodyText": "will fix it", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r466842936", "createdAt": "2020-08-07T06:18:10Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -574,6 +577,9 @@\n     private static final ParserRuleContext[] JOIN_CLAUSE_START =\n             { ParserRuleContext.JOIN_KEYWORD, ParserRuleContext.OUTER_KEYWORD };\n \n+    private static final ParserRuleContext[] MAPPING_BP_OR_MAPPING_CONSTRUCTOR_MEMBER =\n+            { ParserRuleContext.MAPPING_BINDING_PATTERN_MEMBER, ParserRuleContext.MAPPING_FIELD};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgwMjU4Ng=="}, "originalCommit": {"oid": "a1d1031dabf638a85db7bcdd1212306a29a4fc8f"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTc0MDU0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMzozNzo0M1rOG9LX5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjoxNzo1OVrOG9N08Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgwMjY2Mg==", "bodyText": "Would \"object member qualifier\" be a better name?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r466802662", "createdAt": "2020-08-07T03:37:43Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -974,7 +982,10 @@ protected Result seekMatch(ParserRuleContext currentCtx, int lookahead, int curr\n                     hasMatch = nextToken.kind == SyntaxKind.ASCENDING_KEYWORD ||\n                             nextToken.kind == SyntaxKind.DESCENDING_KEYWORD;\n                     break;\n-\n+                case PUBLIC_OR_PRIVATE_KEYWORD:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1d1031dabf638a85db7bcdd1212306a29a4fc8f"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg0Mjg2NQ==", "bodyText": "will change it", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r466842865", "createdAt": "2020-08-07T06:17:59Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -974,7 +982,10 @@ protected Result seekMatch(ParserRuleContext currentCtx, int lookahead, int curr\n                     hasMatch = nextToken.kind == SyntaxKind.ASCENDING_KEYWORD ||\n                             nextToken.kind == SyntaxKind.DESCENDING_KEYWORD;\n                     break;\n-\n+                case PUBLIC_OR_PRIVATE_KEYWORD:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgwMjY2Mg=="}, "originalCommit": {"oid": "a1d1031dabf638a85db7bcdd1212306a29a4fc8f"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTc0MTg4OnYy", "diffSide": "LEFT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMzozODo0OFrOG9LYtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjoxNzo0OVrOG9N0tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgwMjg3MQ==", "bodyText": "Better to keep the override annotation", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r466802871", "createdAt": "2020-08-07T03:38:48Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -136,220 +136,288 @@ public STNode parse(ParserRuleContext context) {\n      * @param args Arguments that requires to continue parsing from the given parser context\n      * @return Parsed node\n      */\n-    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1d1031dabf638a85db7bcdd1212306a29a4fc8f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg0MjgwNg==", "bodyText": "alright", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r466842806", "createdAt": "2020-08-07T06:17:49Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -136,220 +136,288 @@ public STNode parse(ParserRuleContext context) {\n      * @param args Arguments that requires to continue parsing from the given parser context\n      * @return Parsed node\n      */\n-    @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgwMjg3MQ=="}, "originalCommit": {"oid": "a1d1031dabf638a85db7bcdd1212306a29a4fc8f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTc0NjExOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMzo0MToyNVrOG9LbGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjo1MDo0M1rOG9Oh_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgwMzQ4Mw==", "bodyText": "Can you explain why do we need to check SyntaxKind.NONE here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r466803483", "createdAt": "2020-08-07T03:41:25Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -13807,6 +13826,12 @@ private STNode parseTypedBindingPatternOrExprRhs(SyntaxKind nextTokenKind, STNod\n                     return solution.recoveredNode;\n                 }\n \n+                // If the recovered token is not something that can be re-parsed,\n+                // then don't try to re-parse the same rule.\n+                if (solution.tokenKind == SyntaxKind.NONE) {\n+                    return typeOrExpr;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1d1031dabf638a85db7bcdd1212306a29a4fc8f"}, "originalPosition": 1093}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg0MjczNA==", "bodyText": "because recovery returns it when we try to parse source 2 from #24651", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r466842734", "createdAt": "2020-08-07T06:17:36Z", "author": {"login": "m36dot"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -13807,6 +13826,12 @@ private STNode parseTypedBindingPatternOrExprRhs(SyntaxKind nextTokenKind, STNod\n                     return solution.recoveredNode;\n                 }\n \n+                // If the recovered token is not something that can be re-parsed,\n+                // then don't try to re-parse the same rule.\n+                if (solution.tokenKind == SyntaxKind.NONE) {\n+                    return typeOrExpr;\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgwMzQ4Mw=="}, "originalCommit": {"oid": "a1d1031dabf638a85db7bcdd1212306a29a4fc8f"}, "originalPosition": 1093}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1NDM5OQ==", "bodyText": "Why is it returning NONE? Shouldn't we fix that?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25021#discussion_r466854399", "createdAt": "2020-08-07T06:50:43Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -13807,6 +13826,12 @@ private STNode parseTypedBindingPatternOrExprRhs(SyntaxKind nextTokenKind, STNod\n                     return solution.recoveredNode;\n                 }\n \n+                // If the recovered token is not something that can be re-parsed,\n+                // then don't try to re-parse the same rule.\n+                if (solution.tokenKind == SyntaxKind.NONE) {\n+                    return typeOrExpr;\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgwMzQ4Mw=="}, "originalCommit": {"oid": "a1d1031dabf638a85db7bcdd1212306a29a4fc8f"}, "originalPosition": 1093}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 306, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}