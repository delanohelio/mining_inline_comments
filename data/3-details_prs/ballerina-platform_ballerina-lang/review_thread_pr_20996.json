{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczODAyNDA5", "number": 20996, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMzo0OToyMVrODfCkqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMzo1MDoxMlrODfClBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODc0NjAyOnYy", "diffSide": "RIGHT", "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/CopyResourcesTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMzo0OToyMVrOFog_hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNTozNzoyMVrOFoiQMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAyNzkxMQ==", "bodyText": "What about transitive dependencies ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20996#discussion_r378027911", "createdAt": "2020-02-12T03:49:21Z", "author": {"login": "hevayo"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/CopyResourcesTask.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.packerina.task;\n+\n+import org.ballerinalang.packerina.buildcontext.BuildContext;\n+import org.ballerinalang.packerina.buildcontext.BuildContextField;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirConstants;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+\n+/**\n+ * Copy resources to module jar.\n+ *\n+ * @since 1.1.2\n+ */\n+public class CopyResourcesTask implements Task {\n+\n+    @Override\n+    public void execute(BuildContext buildContext) {\n+        Path sourceRoot = buildContext.get(BuildContextField.SOURCE_ROOT);\n+        List<BLangPackage> moduleBirMap = buildContext.getModules();\n+        for (BLangPackage module : moduleBirMap) {\n+            copyResourcesToJar(buildContext, sourceRoot, module);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8793c7b2854dde6d7f257323a40e56fa7f36f642"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA0ODU2Mg==", "bodyText": "We are copying to module jar hence those should be automatically added in executable.\nWe can't add resources in executable jar since for 'ballerina run' we are using thin jars for class path instead of creating executable.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20996#discussion_r378048562", "createdAt": "2020-02-12T05:37:21Z", "author": {"login": "warunalakshitha"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/CopyResourcesTask.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.packerina.task;\n+\n+import org.ballerinalang.packerina.buildcontext.BuildContext;\n+import org.ballerinalang.packerina.buildcontext.BuildContextField;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirConstants;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+\n+/**\n+ * Copy resources to module jar.\n+ *\n+ * @since 1.1.2\n+ */\n+public class CopyResourcesTask implements Task {\n+\n+    @Override\n+    public void execute(BuildContext buildContext) {\n+        Path sourceRoot = buildContext.get(BuildContextField.SOURCE_ROOT);\n+        List<BLangPackage> moduleBirMap = buildContext.getModules();\n+        for (BLangPackage module : moduleBirMap) {\n+            copyResourcesToJar(buildContext, sourceRoot, module);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAyNzkxMQ=="}, "originalCommit": {"oid": "8793c7b2854dde6d7f257323a40e56fa7f36f642"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODc0NjkzOnYy", "diffSide": "RIGHT", "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/CopyResourcesTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMzo1MDoxM1rOFohAJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNTozNzozMFrOFoiQUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAyODA2OA==", "bodyText": "Can we use Apache commons for this as well ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20996#discussion_r378028068", "createdAt": "2020-02-12T03:50:13Z", "author": {"login": "hevayo"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/CopyResourcesTask.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.packerina.task;\n+\n+import org.ballerinalang.packerina.buildcontext.BuildContext;\n+import org.ballerinalang.packerina.buildcontext.BuildContextField;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirConstants;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+\n+/**\n+ * Copy resources to module jar.\n+ *\n+ * @since 1.1.2\n+ */\n+public class CopyResourcesTask implements Task {\n+\n+    @Override\n+    public void execute(BuildContext buildContext) {\n+        Path sourceRoot = buildContext.get(BuildContextField.SOURCE_ROOT);\n+        List<BLangPackage> moduleBirMap = buildContext.getModules();\n+        for (BLangPackage module : moduleBirMap) {\n+            copyResourcesToJar(buildContext, sourceRoot, module);\n+        }\n+    }\n+\n+    private void copyResourcesToJar(BuildContext buildContext, Path sourceRootPath, BLangPackage module) {\n+        // Get resources directory\n+        Path resourceDir = sourceRootPath.resolve(ProjectDirConstants.SOURCE_DIR_NAME)\n+                .resolve(module.packageID.name.value)\n+                .resolve(ProjectDirConstants.RESOURCE_DIR_NAME);\n+        if (!resourceDir.toFile().exists()) {\n+            return;\n+        }\n+        // Get the module jar\n+        Path moduleJarPath = buildContext.getJarPathFromTargetCache(module.packageID);\n+        URI moduleJarUri = URI.create(\"jar:\" + moduleJarPath.toUri().toString());\n+        try (FileSystem toFs = FileSystems.newFileSystem(moduleJarUri, Collections.emptyMap())) {\n+            Path to = toFs.getRootDirectories().iterator().next().resolve(\"resources\")\n+                    .resolve(module.packageID.orgName.value)\n+                    .resolve(module.packageID.name.value)\n+                    .resolve(module.packageID.version.value);\n+            Files.walkFileTree(resourceDir, new Copy(resourceDir, to));\n+        } catch (IOException e) {\n+            throw createLauncherException(\"error while adding resources to module jar :\" + e.getMessage());\n+        }\n+    }\n+\n+    static class Copy extends SimpleFileVisitor<Path> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8793c7b2854dde6d7f257323a40e56fa7f36f642"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA0ODU5Mg==", "bodyText": "Will check", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20996#discussion_r378048592", "createdAt": "2020-02-12T05:37:30Z", "author": {"login": "warunalakshitha"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/CopyResourcesTask.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.packerina.task;\n+\n+import org.ballerinalang.packerina.buildcontext.BuildContext;\n+import org.ballerinalang.packerina.buildcontext.BuildContextField;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.util.ProjectDirConstants;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.StandardCopyOption;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.ballerinalang.tool.LauncherUtils.createLauncherException;\n+\n+/**\n+ * Copy resources to module jar.\n+ *\n+ * @since 1.1.2\n+ */\n+public class CopyResourcesTask implements Task {\n+\n+    @Override\n+    public void execute(BuildContext buildContext) {\n+        Path sourceRoot = buildContext.get(BuildContextField.SOURCE_ROOT);\n+        List<BLangPackage> moduleBirMap = buildContext.getModules();\n+        for (BLangPackage module : moduleBirMap) {\n+            copyResourcesToJar(buildContext, sourceRoot, module);\n+        }\n+    }\n+\n+    private void copyResourcesToJar(BuildContext buildContext, Path sourceRootPath, BLangPackage module) {\n+        // Get resources directory\n+        Path resourceDir = sourceRootPath.resolve(ProjectDirConstants.SOURCE_DIR_NAME)\n+                .resolve(module.packageID.name.value)\n+                .resolve(ProjectDirConstants.RESOURCE_DIR_NAME);\n+        if (!resourceDir.toFile().exists()) {\n+            return;\n+        }\n+        // Get the module jar\n+        Path moduleJarPath = buildContext.getJarPathFromTargetCache(module.packageID);\n+        URI moduleJarUri = URI.create(\"jar:\" + moduleJarPath.toUri().toString());\n+        try (FileSystem toFs = FileSystems.newFileSystem(moduleJarUri, Collections.emptyMap())) {\n+            Path to = toFs.getRootDirectories().iterator().next().resolve(\"resources\")\n+                    .resolve(module.packageID.orgName.value)\n+                    .resolve(module.packageID.name.value)\n+                    .resolve(module.packageID.version.value);\n+            Files.walkFileTree(resourceDir, new Copy(resourceDir, to));\n+        } catch (IOException e) {\n+            throw createLauncherException(\"error while adding resources to module jar :\" + e.getMessage());\n+        }\n+    }\n+\n+    static class Copy extends SimpleFileVisitor<Path> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAyODA2OA=="}, "originalCommit": {"oid": "8793c7b2854dde6d7f257323a40e56fa7f36f642"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1223, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}