{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5MjUxMTgx", "number": 21831, "title": "Add updated BBEs", "bodyText": "Purpose\n\n$title.", "createdAt": "2020-03-16T13:54:07Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831", "merged": true, "mergeCommit": {"oid": "ccac6cb3df40cdb7d1c64d836c33d8fd9cc60010"}, "closed": true, "closedAt": "2020-03-17T13:12:04Z", "author": {"login": "wggihan"}, "timelineItems": {"totalCount": 130, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOSSe1AH2gAyMzg5MjUxMTgxOmI0YmM5Nzk2MjY1Zjc3MWJmYzZjNmI2MWRmN2YzYThkYTVkNTEzY2Y=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOf5aFgH2gAyMzg5MjUxMTgxOjRlMjUyY2E4MjE0YzBkNDhkNTIwMmRhN2I1MWIzOWI5NTY2YTczZmI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b4bc9796265f771bfc6c6b61df7f3a8da5d513cf", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b4bc9796265f771bfc6c6b61df7f3a8da5d513cf", "committedDate": "2020-03-16T18:19:30Z", "message": "Merge pull request #21710 from KavinduZoysa/bbe-deprecation\n\nAdd BBE for deprecation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NDgwMjIx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#pullrequestreview-375480221", "createdAt": "2020-03-16T18:27:03Z", "commit": {"oid": "b4bc9796265f771bfc6c6b61df7f3a8da5d513cf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad71a5c52280a8ff3ec09d4bc3c05c7166b4d8dc", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ad71a5c52280a8ff3ec09d4bc3c05c7166b4d8dc", "committedDate": "2020-03-16T18:56:51Z", "message": "Fix taint checking BBE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d76c0adb2c5163571ac5c0527cdddbd53db154c", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8d76c0adb2c5163571ac5c0527cdddbd53db154c", "committedDate": "2020-03-16T18:58:40Z", "message": "Merge pull request #21837 from pubudu91/fix-bbe\n\nFix taint checking BBE"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NTA5ODI4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#pullrequestreview-375509828", "createdAt": "2020-03-16T19:08:02Z", "commit": {"oid": "b4bc9796265f771bfc6c6b61df7f3a8da5d513cf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxOTowODowMlrOF3CQcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxOTowODowMlrOF3CQcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI1Mjk3OQ==", "bodyText": "You can do the following to get an array of string values of the values in the map:\nstring[] fields = m.'map((val) => val.toString()).toArray();", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393252979", "createdAt": "2020-03-16T19:08:02Z", "author": {"login": "pubudu91"}, "path": "examples/json-csv/json_csv.bal", "diffHunk": "@@ -5,8 +5,8 @@ import ballerina/log;\n // Return the result as a tuple, which contains the headers and fields.\n function getFields(map<json> rec) returns [string[], string[]] {\n     string[] fields = [];\n-    foreach var field in rec {\n-        fields[fields.length()] = field.toString();\n+    foreach var recordField in rec {\n+        fields[fields.length()] = recordField.toString();\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4bc9796265f771bfc6c6b61df7f3a8da5d513cf"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "262050cd521e31999645339ed03639dae61549c9", "author": {"user": {"login": "wggihan", "name": "Gihan Anuruddha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/262050cd521e31999645339ed03639dae61549c9", "committedDate": "2020-03-16T19:08:12Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NTEyNjUy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#pullrequestreview-375512652", "createdAt": "2020-03-16T19:12:24Z", "commit": {"oid": "b4bc9796265f771bfc6c6b61df7f3a8da5d513cf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxOToxMjoyNFrOF3CYuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxOToxMjoyNFrOF3CYuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI1NTA5OQ==", "bodyText": "We don't generally use a mix of logs and println. See 4 in https://github.com/ballerina-platform/ballerina-lang/blob/master/docs/bbe-guidelines/bbe-guidelines.md#general-best-practices", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393255099", "createdAt": "2020-03-16T19:12:24Z", "author": {"login": "pubudu91"}, "path": "examples/kafka_message_consumer_group_service/kafka_message_consumer_group_service.bal", "diffHunk": "@@ -25,13 +25,17 @@ service kafkaService on consumer {\n }\n \n function processKafkaRecord(kafka:ConsumerRecord kafkaRecord) {\n-    byte[] serializedMsg = kafkaRecord.value;\n-    string|error msg = strings:fromBytes(serializedMsg);\n-    if (msg is string) {\n-        // Print the retrieved Kafka record.\n-        io:println(\"Topic: \", kafkaRecord.topic, \" Partition: \",\n-            kafkaRecord.partition.toString(), \" Received Message: \", msg);\n+    anydata serializedMsg = kafkaRecord.value;\n+    if (serializedMsg is byte[]) {\n+        string|error msg = strings:fromBytes(serializedMsg);\n+        if (msg is string) {\n+            // Print the retrieved Kafka record.\n+            io:println(\"Topic: \", kafkaRecord.topic, \" Partition: \",\n+                kafkaRecord.partition.toString(), \" Received Message: \", msg);\n+        } else {\n+            log:printError(\"Error occurred while converting message data\", msg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4bc9796265f771bfc6c6b61df7f3a8da5d513cf"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d647c30f0ac03894aa75b64f576431a3c5c336e", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2d647c30f0ac03894aa75b64f576431a3c5c336e", "committedDate": "2020-03-16T19:20:04Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1Njk1Mzg2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#pullrequestreview-375695386", "createdAt": "2020-03-17T02:15:01Z", "commit": {"oid": "2d647c30f0ac03894aa75b64f576431a3c5c336e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMjoxNTowMVrOF3LsQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMjoxNTowMVrOF3LsQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQwNzU1NQ==", "bodyText": "Adding @pubudu91 's suggestion.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Run the service using the following command and passing Ballerina home path as system property.\n          \n          \n            \n            # suggestion: To run the service, execute the below command by passing the path to the Ballerina home directory using the `--b7a.home` parameter.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393407555", "createdAt": "2020-03-17T02:15:01Z", "author": {"login": "ldclakmal"}, "path": "examples/grpc-secured-unary/grpc_secured_unary_service.out", "diffHunk": "@@ -7,5 +7,5 @@\n # Execute the following command to build the 'service' module.\n $ ballerina build service\n \n-# Run the service using the following command.\n-$ ballerina run target/bin/service.jar\n+# Run the service using the following command and passing Ballerina home path as system property.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d647c30f0ac03894aa75b64f576431a3c5c336e"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1Njk1NjM4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#pullrequestreview-375695638", "createdAt": "2020-03-17T02:15:54Z", "commit": {"oid": "2d647c30f0ac03894aa75b64f576431a3c5c336e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMjoxNTo1NVrOF3LtNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMjoxNTo1NVrOF3LtNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQwNzc5Ng==", "bodyText": "Adding @pubudu91 's suggestion.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Run the client using the following command and passing Ballerina home path as system property.\n          \n          \n            \n            # To run the client, execute the below command by passing the path to the Ballerina home directory using the --`b7a.home` parameter.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393407796", "createdAt": "2020-03-17T02:15:55Z", "author": {"login": "ldclakmal"}, "path": "examples/grpc-secured-unary/grpc_secured_unary_service_client.out", "diffHunk": "@@ -7,5 +7,5 @@\n # Execute the following command to build the 'client' module.\n $ ballerina build client\n \n-# Run the client using the following command.\n-$ ballerina run target/bin/client.jar\n+# Run the client using the following command and passing Ballerina home path as system property.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d647c30f0ac03894aa75b64f576431a3c5c336e"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1Njk2Njcy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#pullrequestreview-375696672", "createdAt": "2020-03-17T02:19:52Z", "commit": {"oid": "2d647c30f0ac03894aa75b64f576431a3c5c336e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMjoxOTo1MlrOF3LwrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMjoxOTo1MlrOF3LwrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQwODY4NQ==", "bodyText": "Adding @pubudu91 's suggestion.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // A let expression binds variables and then evaluates an expression with those variables in scope.\n          \n          \n            \n            // A let expression binds variables and then evaluates an expression with those variables in-scope.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393408685", "createdAt": "2020-03-17T02:19:52Z", "author": {"login": "ldclakmal"}, "path": "examples/let-expression/let_expression.description", "diffHunk": "@@ -0,0 +1 @@\n+// A let expression binds variables and then evaluates an expression with those variables in scope.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d647c30f0ac03894aa75b64f576431a3c5c336e"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b5ea32e13eec3c87aa1353ca9d79b7b6cf98df3", "author": {"user": {"login": "daneshk", "name": "Danesh Kuruppu"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3b5ea32e13eec3c87aa1353ca9d79b7b6cf98df3", "committedDate": "2020-03-17T02:30:33Z", "message": "Update examples/grpc-secured-unary/grpc_secured_unary_service_client.out\n\nCo-Authored-By: Chanaka Lakmal <ldclakmal@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d8986c10932705814041af0fdf38edb1cbdc9e2", "author": {"user": {"login": "daneshk", "name": "Danesh Kuruppu"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5d8986c10932705814041af0fdf38edb1cbdc9e2", "committedDate": "2020-03-17T02:31:52Z", "message": "Update examples/proto-to-ballerina/proto_to_ballerina.out\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93568c98855416d30b24ddeee84afe9caa606fa4", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/93568c98855416d30b24ddeee84afe9caa606fa4", "committedDate": "2020-03-17T02:31:53Z", "message": "Use error detail instead of reason"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7edc492de8fabcf9bbcbd8b89062b73b125b481", "author": {"user": {"login": "daneshk", "name": "Danesh Kuruppu"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d7edc492de8fabcf9bbcbd8b89062b73b125b481", "committedDate": "2020-03-17T02:38:47Z", "message": "Apply suggestions from code review\r\n\r\nFix grpc related doc changes\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64121a52f561b6844093b8441f3c50778c6fc2ba", "author": {"user": {"login": "chamil321", "name": "Chamil Elladeniya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/64121a52f561b6844093b8441f3c50778c6fc2ba", "committedDate": "2020-03-17T02:43:53Z", "message": "Merge pull request #21847 from chamil321/bbe-up\n\nUse error detail instead of reason"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae5ec475c7f3243572a6187eee0fdeacc589e7d5", "author": {"user": {"login": "daneshk", "name": "Danesh Kuruppu"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ae5ec475c7f3243572a6187eee0fdeacc589e7d5", "committedDate": "2020-03-17T02:53:08Z", "message": "Fix proto to ballerina description"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2722dce7ea7cd74155f47e6f64b30f09881624cc", "author": {"user": {"login": "daneshk", "name": "Danesh Kuruppu"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2722dce7ea7cd74155f47e6f64b30f09881624cc", "committedDate": "2020-03-17T03:01:36Z", "message": "Merge pull request #21848 from daneshk/bbe-1.2.0\n\nFix proto to ballerina description"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "343f6fee9d55b0b4b11d9d99694de6fb470142a7", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/343f6fee9d55b0b4b11d9d99694de6fb470142a7", "committedDate": "2020-03-17T03:12:45Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6ba7dca9821542b8abcaa561675c272a10df000", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a6ba7dca9821542b8abcaa561675c272a10df000", "committedDate": "2020-03-17T03:43:50Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94fddae642d111000dfe10880653f3c0e95729e0", "author": {"user": {"login": "shafreenAnfar", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/94fddae642d111000dfe10880653f3c0e95729e0", "committedDate": "2020-03-17T05:02:35Z", "message": "Merge pull request #21826 from rdhananjaya/xml-bbe\n\nXML BBE fix: continuing #21796"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NzUzNzM5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#pullrequestreview-375753739", "createdAt": "2020-03-17T05:45:19Z", "commit": {"oid": "94fddae642d111000dfe10880653f3c0e95729e0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "773a24a2c41c4a2b81a634807726121e9da7d698", "author": {"user": {"login": "sameerajayasoma", "name": "Sameera Jayasoma"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/773a24a2c41c4a2b81a634807726121e9da7d698", "committedDate": "2020-03-17T05:46:09Z", "message": "Add a BBE that explains the new @strand annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4701b2c444230f890958eaab01db66cc5c036e77", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4701b2c444230f890958eaab01db66cc5c036e77", "committedDate": "2020-03-17T06:37:35Z", "message": "Fix testerina_function_mocks.out"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "54ef66077a891ff973a32811d051a2d27e9abb6a", "author": {"user": {"login": "shafreenAnfar", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/54ef66077a891ff973a32811d051a2d27e9abb6a", "committedDate": "2020-03-17T06:16:35Z", "message": "Merge pull request #21857 from sameerajayasoma/hello_world_parallel_bbe\n\nUpdate hello world parallel BBE with @strand annotation"}, "afterCommit": {"oid": "4701b2c444230f890958eaab01db66cc5c036e77", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4701b2c444230f890958eaab01db66cc5c036e77", "committedDate": "2020-03-17T06:37:35Z", "message": "Fix testerina_function_mocks.out"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e03b18786785523219ded60f587eb9f915f5c81b", "author": {"user": {"login": "praneesha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e03b18786785523219ded60f587eb9f915f5c81b", "committedDate": "2020-03-17T09:58:01Z", "message": "Update examples/threads-and-strands/threads-and-strands.description"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdd0de96b1f8c59ea7d38cb8b8c6d513759ffa6e", "author": {"user": {"login": "praneesha", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cdd0de96b1f8c59ea7d38cb8b8c6d513759ffa6e", "committedDate": "2020-03-17T09:58:28Z", "message": "Merge pull request #21856 from sameerajayasoma/bbe-1.2.0\n\nBBE for the new @strand annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc423775b5a0dcdf1c2e0b8289eef4e0be9736e9", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bc423775b5a0dcdf1c2e0b8289eef4e0be9736e9", "committedDate": "2020-03-17T10:07:49Z", "message": "Merge branch 'stage' into bbe-1.2.0"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1ODk1NDQx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#pullrequestreview-375895441", "createdAt": "2020-03-17T10:10:40Z", "commit": {"oid": "bc423775b5a0dcdf1c2e0b8289eef4e0be9736e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDoxMDo0MFrOF3VkAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDoxMDo0MFrOF3VkAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU2OTI4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        }\n          \n          \n            \n                        },\n          \n          \n            \n                        {\n          \n          \n            \n                            \"name\": \"Threads and Strands\",\n          \n          \n            \n                            \"url\": \"threads-and-strands\"\n          \n          \n            \n                        }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393569283", "createdAt": "2020-03-17T10:10:40Z", "author": {"login": "ldclakmal"}, "path": "examples/index.json", "diffHunk": "@@ -443,6 +458,16 @@\n             }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc423775b5a0dcdf1c2e0b8289eef4e0be9736e9"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e252ca8214c0d48d5202da7b51b39b9566a73fb", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4e252ca8214c0d48d5202da7b51b39b9566a73fb", "committedDate": "2020-03-17T10:10:47Z", "message": "Update examples/index.json"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dbf798bbcd1189ee954697821546309ae327dca", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0dbf798bbcd1189ee954697821546309ae327dca", "committedDate": "2020-03-10T18:45:12Z", "message": "Add jdbc samples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8adcc774ce1bcc7ff17108b44aa2bd75d666f40", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a8adcc774ce1bcc7ff17108b44aa2bd75d666f40", "committedDate": "2020-03-11T12:36:13Z", "message": "Add jdbc examples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e350e8a31d57dafe6fd17a3bb33038042fe9e0c", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5e350e8a31d57dafe6fd17a3bb33038042fe9e0c", "committedDate": "2020-03-11T13:57:12Z", "message": "Add mysql init sample"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9cf5d5cee6cc25a294966d03a2cbbdf988875ea", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f9cf5d5cee6cc25a294966d03a2cbbdf988875ea", "committedDate": "2020-03-11T13:57:45Z", "message": "Merge branch 'sql-connector' into sql-samples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "194c972db3d5f8ccb622ebff4e09e1ca5a24bbb0", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/194c972db3d5f8ccb622ebff4e09e1ca5a24bbb0", "committedDate": "2020-03-11T18:19:02Z", "message": "Add mysql samples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "534591f2fb3f317f5dac6b61976711c69798d5c9", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/534591f2fb3f317f5dac6b61976711c69798d5c9", "committedDate": "2020-03-11T18:20:56Z", "message": "Merge branch 'upstream-master' into sql-samples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8987081d49db135f73ae3ddb9865d1477495327f", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8987081d49db135f73ae3ddb9865d1477495327f", "committedDate": "2020-03-11T18:30:44Z", "message": "Fix formatting issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bd5261ced7a0bd5376d5abc6b6b0c61b1f1c501", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1bd5261ced7a0bd5376d5abc6b6b0c61b1f1c501", "committedDate": "2020-03-12T07:23:34Z", "message": "Use stream query operations in the typed query sample"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4df2d6ce0da45941261021ed5804ca33ffe2b98e", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4df2d6ce0da45941261021ed5804ca33ffe2b98e", "committedDate": "2020-03-12T10:48:05Z", "message": "Remove extra spaces in BBE output\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15b9c99a02104eb407a0ef4a31bcfc25b7843908", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/15b9c99a02104eb407a0ef4a31bcfc25b7843908", "committedDate": "2020-03-12T12:13:53Z", "message": "Add complex data type sample for jdbc and mysql connectors."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ed3658a2ced035a2f0ad158e1d233a25d3e39dc", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7ed3658a2ced035a2f0ad158e1d233a25d3e39dc", "committedDate": "2020-03-12T12:17:09Z", "message": "Update the BBE order"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "957ae2ec8d127233a668ed2b53efb5423b12da2a", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/957ae2ec8d127233a668ed2b53efb5423b12da2a", "committedDate": "2020-03-12T12:24:01Z", "message": "Add missing space between // and beginning of sentence"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f1b6f832a80115ef0930913b34974699a695c20", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7f1b6f832a80115ef0930913b34974699a695c20", "committedDate": "2020-03-15T13:12:49Z", "message": "Update examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c579cd5e5a02dfe479acecc5a0ae7327ce2001d6", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c579cd5e5a02dfe479acecc5a0ae7327ce2001d6", "committedDate": "2020-03-15T13:13:28Z", "message": "Update examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a717a95b3f715b6c723fb631a69e71dd8db7e35c", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a717a95b3f715b6c723fb631a69e71dd8db7e35c", "committedDate": "2020-03-15T13:13:57Z", "message": "Update examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4dcda57398895c6f40feddb557accc03cad3bf45", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4dcda57398895c6f40feddb557accc03cad3bf45", "committedDate": "2020-03-15T13:14:24Z", "message": "Update examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8136929963b4969f936b4cc865bcd23a5d0a8fb8", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8136929963b4969f936b4cc865bcd23a5d0a8fb8", "committedDate": "2020-03-15T13:14:51Z", "message": "Update examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2959e56f4d86d70a6a6b9e4afb9d000d73fe68e", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e2959e56f4d86d70a6a6b9e4afb9d000d73fe68e", "committedDate": "2020-03-15T13:15:37Z", "message": "Update examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.description\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97e3a7e5031ad1850d5d7efb2297c3d74df0839a", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/97e3a7e5031ad1850d5d7efb2297c3d74df0839a", "committedDate": "2020-03-15T13:16:04Z", "message": "Update examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.description\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c308ecd834be923cb9dad621f6a24c6b06432689", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c308ecd834be923cb9dad621f6a24c6b06432689", "committedDate": "2020-03-15T13:16:28Z", "message": "Update examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.out\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "351226166c1494a886e0210cc687792dd357d888", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/351226166c1494a886e0210cc687792dd357d888", "committedDate": "2020-03-15T13:16:53Z", "message": "Update examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.out\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e366b04a4c0a04d5cb51c04d945974b2ae3f08b4", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e366b04a4c0a04d5cb51c04d945974b2ae3f08b4", "committedDate": "2020-03-15T13:17:16Z", "message": "Update examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.out\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03558a6f4b025e96c1acb0f75f66ba943c73c918", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/03558a6f4b025e96c1acb0f75f66ba943c73c918", "committedDate": "2020-03-15T13:17:47Z", "message": "Update examples/jdbc2-execute-operation/jdbc2_execute_operation.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4621f34e90c940dff07be58d9a0e4671dcad2e79", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4621f34e90c940dff07be58d9a0e4671dcad2e79", "committedDate": "2020-03-15T13:18:10Z", "message": "Update examples/jdbc2-execute-operation/jdbc2_execute_operation.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13675e16af4f4a7776e7bb979b5f72bf28b98ea0", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/13675e16af4f4a7776e7bb979b5f72bf28b98ea0", "committedDate": "2020-03-15T13:18:36Z", "message": "Update examples/jdbc2-execute-operation/jdbc2_execute_operation.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ade9c0f2a5dfa6ee2501d5963539930cc47a394", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5ade9c0f2a5dfa6ee2501d5963539930cc47a394", "committedDate": "2020-03-15T13:19:21Z", "message": "Update examples/jdbc2-execute-operation/jdbc2_execute_operation.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "486d3031f9f0053f2c069c229f75ef354954777e", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/486d3031f9f0053f2c069c229f75ef354954777e", "committedDate": "2020-03-15T13:20:47Z", "message": "Update examples/jdbc2-execute-operation/jdbc2_execute_operation.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b82ae937360ee450143eb4f3351d6fde0065c19a", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b82ae937360ee450143eb4f3351d6fde0065c19a", "committedDate": "2020-03-15T13:21:17Z", "message": "Update examples/jdbc2-execute-operation/jdbc2_execute_operation.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "308bf4a4042e9fe4d4048a1b27256add6444cc83", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/308bf4a4042e9fe4d4048a1b27256add6444cc83", "committedDate": "2020-03-15T13:21:39Z", "message": "Update examples/jdbc2-execute-operation/jdbc2_execute_operation.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e9cee603fec9c79d9706e4510d912ccda67d649", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0e9cee603fec9c79d9706e4510d912ccda67d649", "committedDate": "2020-03-15T13:21:59Z", "message": "Update examples/jdbc2-execute-operation/jdbc2_execute_operation.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39bc01600bc009c772b569bc0b532e1a1434d8d9", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/39bc01600bc009c772b569bc0b532e1a1434d8d9", "committedDate": "2020-03-15T13:23:17Z", "message": "Update examples/jdbc2-execute-operation/jdbc2_execute_operation.out\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ca46f8a160bcadda75b5eb1a94f4a09af3a661d", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1ca46f8a160bcadda75b5eb1a94f4a09af3a661d", "committedDate": "2020-03-15T13:23:39Z", "message": "Update examples/jdbc2-execute-operation/jdbc2_execute_operation.out\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1c9bed71baf225794a15e1bd1e77598cd8e896c", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d1c9bed71baf225794a15e1bd1e77598cd8e896c", "committedDate": "2020-03-15T13:23:59Z", "message": "Update examples/jdbc2-execute-operation/jdbc2_execute_operation.bal\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ed924ecb94ff794b60908f972995ba7ca436e3e", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2ed924ecb94ff794b60908f972995ba7ca436e3e", "committedDate": "2020-03-15T13:35:48Z", "message": "Apply suggestions from code review\r\n\r\nAdd suggested changes from review.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>\nCo-Authored-By: Pubudu Fernando <pubudu.fernando@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b6d6399613ad8b400a0ef83a8c5bc184b63bd1a", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4b6d6399613ad8b400a0ef83a8c5bc184b63bd1a", "committedDate": "2020-03-15T17:54:43Z", "message": "Add var ref field examples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aeb013d78c2ae7c7ca36dcf4cbceafa063928da5", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aeb013d78c2ae7c7ca36dcf4cbceafa063928da5", "committedDate": "2020-03-16T03:34:59Z", "message": "Add depreaction and create new title for doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3647abbe235d0c0b00a0a5a7a82caf9595391803", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3647abbe235d0c0b00a0a5a7a82caf9595391803", "committedDate": "2020-03-16T03:34:59Z", "message": "Change the results"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97ad3629cc48f4e4fb8b382003411cde6450e43b", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/97ad3629cc48f4e4fb8b382003411cde6450e43b", "committedDate": "2020-03-16T03:34:59Z", "message": "Fix the suggested changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c40d80d15611af041064252a9c1b6239bab0b7f6", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c40d80d15611af041064252a9c1b6239bab0b7f6", "committedDate": "2020-03-16T03:34:59Z", "message": "Change the name of object"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65b43d271caff3fe1b7fc5a4937744d77abe9314", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/65b43d271caff3fe1b7fc5a4937744d77abe9314", "committedDate": "2020-03-16T03:34:59Z", "message": "Add new lines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc87c8f461f60732f21f253f0ea9cfb5b38fc686", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fc87c8f461f60732f21f253f0ea9cfb5b38fc686", "committedDate": "2020-03-16T03:52:30Z", "message": "Add spread field examples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89c38832e3032d6b4ebd0bdf8cab3653842cacf8", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/89c38832e3032d6b4ebd0bdf8cab3653842cacf8", "committedDate": "2020-03-16T03:57:45Z", "message": "Update BBE for consistency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "188126e2d903a577a58bea2a38905d05df5fa358", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/188126e2d903a577a58bea2a38905d05df5fa358", "committedDate": "2020-03-16T04:32:47Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14cfb0eb11e18da430cc375abb72abb86f639a96", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/14cfb0eb11e18da430cc375abb72abb86f639a96", "committedDate": "2020-03-16T05:06:04Z", "message": "Fix review comments for JDBC BBEs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "815813efea12ea052ee6f645040172a6ef009757", "author": {"user": {"login": "aashikam", "name": "Arshika Mohottige"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/815813efea12ea052ee6f645040172a6ef009757", "committedDate": "2020-03-16T05:23:35Z", "message": "Fix kafka BBEs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdcd2df345a38b2062f1fcdc1bdb82040f86c9f9", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fdcd2df345a38b2062f1fcdc1bdb82040f86c9f9", "committedDate": "2020-03-16T05:38:58Z", "message": "Fix review comments for MySQL BBEs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0299c9a60357896b922edf074b27679fbc0cdb3d", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0299c9a60357896b922edf074b27679fbc0cdb3d", "committedDate": "2020-03-16T05:47:34Z", "message": "Fix messages in BBEs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "037ed74c0d531e74693ecd7c0564f92de2854d5c", "author": {"user": {"login": "kalaiyarasiganeshalingam", "name": "Kalaiyarasi Ganeshalingam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/037ed74c0d531e74693ecd7c0564f92de2854d5c", "committedDate": "2020-03-16T05:48:18Z", "message": "Update webSocket BBEs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a9a6be9b3154677286d6a38330d87069d720218", "author": {"user": {"login": "kalaiyarasiganeshalingam", "name": "Kalaiyarasi Ganeshalingam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2a9a6be9b3154677286d6a38330d87069d720218", "committedDate": "2020-03-16T05:52:09Z", "message": "Changes in the out file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf9e0bcaa56e8ec8fc95e8940064028627693c72", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bf9e0bcaa56e8ec8fc95e8940064028627693c72", "committedDate": "2020-03-16T06:04:23Z", "message": "Update basic auth service BBE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8c24c42de06f61c5f788e4225a248ee9f8be151", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b8c24c42de06f61c5f788e4225a248ee9f8be151", "committedDate": "2020-03-16T06:05:12Z", "message": "Update new lines at EOF"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4328f30f88c1df49eaabdcc3134b7f18f9a34ea", "author": {"user": {"login": "aashikam", "name": "Arshika Mohottige"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f4328f30f88c1df49eaabdcc3134b7f18f9a34ea", "committedDate": "2020-03-16T06:06:50Z", "message": "Update examples/kafka_message_consumer_service/kafka_message_consumer_service.bal\n\nCo-Authored-By: Chamil Elladeniya <chamilmadawa8@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca98c3e6da2a0f955c85553c5e0e317cca8210c3", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ca98c3e6da2a0f955c85553c5e0e317cca8210c3", "committedDate": "2020-03-16T06:30:29Z", "message": "Fix messages in BBEs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1e19c8598061dbf646bf5e0c3eb42a1afd508dc", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b1e19c8598061dbf646bf5e0c3eb42a1afd508dc", "committedDate": "2020-03-16T06:33:58Z", "message": "Fix formating in BBEs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06ce6d1f8f1fcbc56c5285c12347db951247e6c0", "author": {"user": {"login": "dulajdilshan", "name": "Dulaj Dilshan"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/06ce6d1f8f1fcbc56c5285c12347db951247e6c0", "committedDate": "2020-03-16T06:34:02Z", "message": "Change BBE out files to match with the current correct outs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc65ffb66df3f355b01d0f605d70b51fe6b88d28", "author": {"user": {"login": "kalaiyarasiganeshalingam", "name": "Kalaiyarasi Ganeshalingam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fc65ffb66df3f355b01d0f605d70b51fe6b88d28", "committedDate": "2020-03-16T08:28:17Z", "message": "Update JDBC BBES"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7e2186a72bd312bb914a808480f83f76a41e56d", "author": {"user": {"login": "daneshk", "name": "Danesh Kuruppu"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f7e2186a72bd312bb914a808480f83f76a41e56d", "committedDate": "2020-03-16T08:44:37Z", "message": "Fix gRPC examples with Ballerina 1.2.0 release"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6153a79f09e98294827bb3334cb0a55de008d252", "author": {"user": {"login": "aashikam", "name": "Arshika Mohottige"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6153a79f09e98294827bb3334cb0a55de008d252", "committedDate": "2020-03-16T08:52:09Z", "message": "Merge branch 'stage' of https://github.com/ballerina-platform/ballerina-lang into bbe"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df8533386b5cf2ebe3269d54cc1af25bbfab2657", "author": {"user": {"login": "aashikam", "name": "Arshika Mohottige"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/df8533386b5cf2ebe3269d54cc1af25bbfab2657", "committedDate": "2020-03-16T08:52:36Z", "message": "Merge branch 'bbe' of https://github.com/aashikam/ballerina-lang into bbe"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e3e12482ff37eccf400c6390f164b48f9aa3606", "author": {"user": {"login": "daneshk", "name": "Danesh Kuruppu"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4e3e12482ff37eccf400c6390f164b48f9aa3606", "committedDate": "2020-03-16T09:08:27Z", "message": "Fix proto to ballerina description"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7b7ac5ad94b30f756a452e4d7d4e51db62d6bdc", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d7b7ac5ad94b30f756a452e4d7d4e51db62d6bdc", "committedDate": "2020-03-16T09:40:41Z", "message": "Address review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "449a1f43d068328d3588c3d48e418d654e9a199e", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/449a1f43d068328d3588c3d48e418d654e9a199e", "committedDate": "2020-03-16T09:45:22Z", "message": "Add BBEs to broken list"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88d0aec0bef8147fe81cc7060536ba0bf6b92a12", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/88d0aec0bef8147fe81cc7060536ba0bf6b92a12", "committedDate": "2020-03-16T09:57:02Z", "message": "Remove use of module aliases for lang libs in BBEs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43e771affba4f63ce641ecfdd2ea60ea263798ed", "author": {"user": {"login": "aashikam", "name": "Arshika Mohottige"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/43e771affba4f63ce641ecfdd2ea60ea263798ed", "committedDate": "2020-03-16T10:01:13Z", "message": "Merge branch 'stage' of https://github.com/ballerina-platform/ballerina-lang into bbe"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4841f24b727b05a37066475493e35a99daa973b5", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4841f24b727b05a37066475493e35a99daa973b5", "committedDate": "2020-03-16T10:41:58Z", "message": "Merge branch 'stage' of https://github.com/ballerina-platform/ballerina-lang into fix-bbe-master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "889da09b7196d364ff51da41fff3e18e4788a585", "author": {"user": {"login": "praveennadarajah", "name": "Praveen Nadarajah"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/889da09b7196d364ff51da41fff3e18e4788a585", "committedDate": "2020-03-16T10:48:09Z", "message": "Fix JSON to CSV Transform example with Ballerina 1.2.0 release"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cad5bcfc5a970e617af5b9a12df1d8ed8af2646e", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cad5bcfc5a970e617af5b9a12df1d8ed8af2646e", "committedDate": "2020-03-16T11:17:12Z", "message": "Merge branch 'upstream-stage' into sql-samples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2296de7943314bd56f24d61bb3db9bd128e956f0", "author": {"user": {"login": "Maninda", "name": "Maninda Edirisooriya"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2296de7943314bd56f24d61bb3db9bd128e956f0", "committedDate": "2020-03-16T11:48:44Z", "message": "Rename file names as directory names."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5909b775e9980df45cef5f52767667bd6f02e28c", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5909b775e9980df45cef5f52767667bd6f02e28c", "committedDate": "2020-03-16T12:06:10Z", "message": "Merge branch 'stage' of github.com:ballerina-platform/ballerina-lang into xml-bbe\n\n\u0001 Conflicts:\n\u0001\texamples/xml-attributes/xml_attributes.out"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f97e58598d08e158a88a8d99c067f403bfbe8f6c", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f97e58598d08e158a88a8d99c067f403bfbe8f6c", "committedDate": "2020-03-16T12:07:41Z", "message": "Fix and align xml functions BBEs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a7fbeb2cf970c211707f604b2e7bdc14e3d2322", "author": {"user": {"login": "dulajdilshan", "name": "Dulaj Dilshan"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0a7fbeb2cf970c211707f604b2e7bdc14e3d2322", "committedDate": "2020-03-16T12:10:19Z", "message": "Fix compilation error in the Tuple Match BBE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec4a4a34a31d3defc752cfee26de10b684b549ba", "author": {"user": {"login": "wggihan", "name": "Gihan Anuruddha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ec4a4a34a31d3defc752cfee26de10b684b549ba", "committedDate": "2020-03-16T13:33:30Z", "message": "Merge pull request #21783 from aashikam/bbe\n\nFix Kafka BBEs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48c53cdcd035858d5d2ef59c55c2cd408692ed51", "author": {"user": {"login": "wggihan", "name": "Gihan Anuruddha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/48c53cdcd035858d5d2ef59c55c2cd408692ed51", "committedDate": "2020-03-16T13:35:57Z", "message": "Merge pull request #21827 from Maninda/stage3\n\nRename file names as directory names."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a1297164894553beaa1bcc2dcbb9077fc173e4a", "author": {"user": {"login": "daneshk", "name": "Danesh Kuruppu"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9a1297164894553beaa1bcc2dcbb9077fc173e4a", "committedDate": "2020-03-16T13:36:12Z", "message": "Merge pull request #21807 from daneshk/stage\n\nFix gRPC examples with Ballerina 1.2.0 release"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "416cbfc2bb586754f94a21c9bc9bd9508cef76d2", "author": {"user": {"login": "wggihan", "name": "Gihan Anuruddha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/416cbfc2bb586754f94a21c9bc9bd9508cef76d2", "committedDate": "2020-03-16T13:36:57Z", "message": "Merge pull request #21816 from praveennadarajah/stage\n\nFix JSON to CSV Transform example with Ballerina 1.2.0 release"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcfe641f2ab2912c85651aa678242dc39273a7df", "author": {"user": {"login": "wggihan", "name": "Gihan Anuruddha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bcfe641f2ab2912c85651aa678242dc39273a7df", "committedDate": "2020-03-16T13:37:51Z", "message": "Merge pull request #21775 from ldclakmal/fix-bbe-master\n\nUpdate Access Control BBEs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e42cd8d0fba88682034806aa34bebea96703e1c4", "author": {"user": {"login": "daneshk", "name": "Danesh Kuruppu"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e42cd8d0fba88682034806aa34bebea96703e1c4", "committedDate": "2020-03-16T13:41:01Z", "message": "Merge pull request #21804 from kalaiyarasiganeshalingam/bbe\n\nUpdate JDBC BBES"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "103a4082f7b3a387ff84a7b33af37914db97cdb3", "author": {"user": {"login": "pubudu91", "name": "Pubudu Fernando"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/103a4082f7b3a387ff84a7b33af37914db97cdb3", "committedDate": "2020-03-16T13:43:51Z", "message": "Merge pull request #21814 from pubudu91/fix-bbe\n\nRemove module alias usage in BBEs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0eca0af809734ec2cf21694052fcb6ed82a2ce4a", "author": {"user": {"login": "wggihan", "name": "Gihan Anuruddha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0eca0af809734ec2cf21694052fcb6ed82a2ce4a", "committedDate": "2020-03-16T13:46:34Z", "message": "Merge pull request #21788 from dulajdilshan/dulaj-BBE-outs\n\nCorrect BBE out files to match with the current outs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00bdf2869c450b42b68d06fbc3043524f398b6e4", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/00bdf2869c450b42b68d06fbc3043524f398b6e4", "committedDate": "2020-03-16T13:48:47Z", "message": "Merge pull request #21723 from KRVPerera/bbe_fixes\n\nRemove extra spaces in BBE output"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4164e501d58933e5d5a1e5a2c4807c0b92956fc4", "author": {"user": {"login": "wggihan", "name": "Gihan Anuruddha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4164e501d58933e5d5a1e5a2c4807c0b92956fc4", "committedDate": "2020-03-16T13:48:56Z", "message": "Merge pull request #21787 from kalaiyarasiganeshalingam/bbes\n\nUpdate webSocket BBEs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "feffb55d63d90459b1e34e668d79c8bc8e5bf44b", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/feffb55d63d90459b1e34e668d79c8bc8e5bf44b", "committedDate": "2020-03-16T13:53:22Z", "message": "Merge pull request #21810 from dulajdilshan/BBE-fixes\n\nFix error in the 'Tuple Match' BBE src file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a53bd83fcba7629de1495f7b4499d051bb6f179", "author": {"user": {"login": "irshadnilam", "name": "Irshad Nilam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4a53bd83fcba7629de1495f7b4499d051bb6f179", "committedDate": "2020-03-16T14:06:32Z", "message": "Add let expression BBE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "872a834407b2ecea828e2ed5413c7ec199048a51", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/872a834407b2ecea828e2ed5413c7ec199048a51", "committedDate": "2020-03-16T14:08:30Z", "message": "Merge pull request #21440 from irshadnilam/let-expression-bbe\n\nAdd Let Expression BBE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce26dc49282c4d8f59aa324b27b98143e1c581f6", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ce26dc49282c4d8f59aa324b27b98143e1c581f6", "committedDate": "2020-03-16T14:09:28Z", "message": "remove --experimental tag from run command"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0b4e2bedcb54bf27fbdf3a691813329804bfa3d", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b0b4e2bedcb54bf27fbdf3a691813329804bfa3d", "committedDate": "2020-03-16T14:09:28Z", "message": "Move BBE out of experimental"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59491d07ee2d7b175beca53eb082262ee31e0c91", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/59491d07ee2d7b175beca53eb082262ee31e0c91", "committedDate": "2020-03-16T14:09:28Z", "message": "Update examples/locks/locks.out\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb2893240607f34e4e29b1db3549282cc17bfce2", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cb2893240607f34e4e29b1db3549282cc17bfce2", "committedDate": "2020-03-16T14:19:26Z", "message": "Apply review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54f9663fab21f74186ef2101e817ae4596a8a7a4", "author": {"user": {"login": "dulvinw", "name": "Dulvin Witharane"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/54f9663fab21f74186ef2101e817ae4596a8a7a4", "committedDate": "2020-03-16T14:21:14Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ffeff1d6fb2a18c8dbbf5935f32168036505fcd", "author": {"user": {"login": "sinthuja", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2ffeff1d6fb2a18c8dbbf5935f32168036505fcd", "committedDate": "2020-03-16T14:24:13Z", "message": "Merge pull request #21819 from sinthuja/sql-samples\n\nAdd BBE to JDBC and MySQL Connectors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b08eca5b03ea886235fa2a9e73ceab4f350435d4", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b08eca5b03ea886235fa2a9e73ceab4f350435d4", "committedDate": "2020-03-16T14:25:42Z", "message": "Merge pull request #21745 from dulvinw/patch-7\n\nFix BBE related to Lock statement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0aa86892784d83af43737d62a30b5cfdeae29f3d", "committedDate": "2020-03-16T14:31:39Z", "message": "Merge pull request #21776 from MaryamZi/add-examples-120\n\nUpdate examples for mapping constructor changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36882070bad4d683204540601371d7efa7ed99e8", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/36882070bad4d683204540601371d7efa7ed99e8", "committedDate": "2020-03-16T15:48:11Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91b1b7609ba3044fa708f970f284e04705fe9b5d", "author": {"user": {"login": "rdhananjaya", "name": "Dhananjaya [Danje]"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/91b1b7609ba3044fa708f970f284e04705fe9b5d", "committedDate": "2020-03-16T15:58:45Z", "message": "Fix typo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NDI0NTM3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#pullrequestreview-375424537", "createdAt": "2020-03-16T17:15:48Z", "commit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "state": "COMMENTED", "comments": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzoxNTo0OVrOF2-K8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzozNTo1NFrOF2-5XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4NjAzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 // Encrypt and decrypt input value using AES CBC no padding.\n          \n          \n            \n                 // Encrypt and decrypt an input value using AES CBC without padding.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393186035", "createdAt": "2020-03-16T17:15:49Z", "author": {"login": "praneesha"}, "path": "examples/crypto/crypto.bal", "diffHunk": "@@ -106,32 +106,32 @@ public function main() returns error? {\n      // Encrypt and decrypt input value using AES CBC PKCS5 padding.\n      output = check crypto:encryptAesCbc(inputArr, rsaKeyArr, ivArr);\n      output = check crypto:decryptAesCbc(output, rsaKeyArr, ivArr);\n-     io:println(\"AES CBC PKCS5 decrypted value: \" + check strings:fromBytes(output));\n+     io:println(\"AES CBC PKCS5 decrypted value: \" + check 'string:fromBytes(output));\n \n      // Encrypt and decrypt input value using AES CBC no padding.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4NjE4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 // Encrypt and decrypt input value using AES GCM no padding.\n          \n          \n            \n                 // Encrypt and decrypt an input value using AES GCM without padding.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393186180", "createdAt": "2020-03-16T17:16:03Z", "author": {"login": "praneesha"}, "path": "examples/crypto/crypto.bal", "diffHunk": "@@ -106,32 +106,32 @@ public function main() returns error? {\n      // Encrypt and decrypt input value using AES CBC PKCS5 padding.\n      output = check crypto:encryptAesCbc(inputArr, rsaKeyArr, ivArr);\n      output = check crypto:decryptAesCbc(output, rsaKeyArr, ivArr);\n-     io:println(\"AES CBC PKCS5 decrypted value: \" + check strings:fromBytes(output));\n+     io:println(\"AES CBC PKCS5 decrypted value: \" + check 'string:fromBytes(output));\n \n      // Encrypt and decrypt input value using AES CBC no padding.\n      output = check crypto:encryptAesCbc(inputArr, rsaKeyArr, ivArr, crypto:NONE);\n      output = check crypto:decryptAesCbc(output, rsaKeyArr, ivArr, crypto:NONE);\n-     io:println(\"AES CBC no padding decrypted value: \" + check strings:fromBytes(output));\n+     io:println(\"AES CBC no padding decrypted value: \" + check 'string:fromBytes(output));\n \n      // Encrypt and decrypt input value using AES GCM PKCS5 padding.\n      output = check crypto:encryptAesGcm(inputArr, rsaKeyArr, ivArr);\n      output = check crypto:decryptAesGcm(output, rsaKeyArr, ivArr);\n-     io:println(\"AES GCM PKCS5 decrypted value: \" + check strings:fromBytes(output));\n+     io:println(\"AES GCM PKCS5 decrypted value: \" + check 'string:fromBytes(output));\n \n      // Encrypt and decrypt input value using AES GCM no padding.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4NjM0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 // Encrypt and decrypt input value using AES CBC PKCS5 padding.\n          \n          \n            \n                 // Encrypt and decrypt an input value using AES CBC PKCS5 padding.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393186349", "createdAt": "2020-03-16T17:16:21Z", "author": {"login": "praneesha"}, "path": "examples/crypto/crypto.bal", "diffHunk": "@@ -106,32 +106,32 @@ public function main() returns error? {\n      // Encrypt and decrypt input value using AES CBC PKCS5 padding.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4NjY3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 // Encrypt and decrypt input value using AES GCM PKCS5 padding.\n          \n          \n            \n                 // Encrypt and decrypt an input value using AES GCM PKCS5 padding.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393186670", "createdAt": "2020-03-16T17:16:53Z", "author": {"login": "praneesha"}, "path": "examples/crypto/crypto.bal", "diffHunk": "@@ -106,32 +106,32 @@ public function main() returns error? {\n      // Encrypt and decrypt input value using AES CBC PKCS5 padding.\n      output = check crypto:encryptAesCbc(inputArr, rsaKeyArr, ivArr);\n      output = check crypto:decryptAesCbc(output, rsaKeyArr, ivArr);\n-     io:println(\"AES CBC PKCS5 decrypted value: \" + check strings:fromBytes(output));\n+     io:println(\"AES CBC PKCS5 decrypted value: \" + check 'string:fromBytes(output));\n \n      // Encrypt and decrypt input value using AES CBC no padding.\n      output = check crypto:encryptAesCbc(inputArr, rsaKeyArr, ivArr, crypto:NONE);\n      output = check crypto:decryptAesCbc(output, rsaKeyArr, ivArr, crypto:NONE);\n-     io:println(\"AES CBC no padding decrypted value: \" + check strings:fromBytes(output));\n+     io:println(\"AES CBC no padding decrypted value: \" + check 'string:fromBytes(output));\n \n      // Encrypt and decrypt input value using AES GCM PKCS5 padding.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4NjkwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 // Encrypt and decrypt input value using AES ECB PKCS5 padding.\n          \n          \n            \n                 // Encrypt and decrypt an input value using AES ECB PKCS5 padding.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393186908", "createdAt": "2020-03-16T17:17:16Z", "author": {"login": "praneesha"}, "path": "examples/crypto/crypto.bal", "diffHunk": "@@ -106,32 +106,32 @@ public function main() returns error? {\n      // Encrypt and decrypt input value using AES CBC PKCS5 padding.\n      output = check crypto:encryptAesCbc(inputArr, rsaKeyArr, ivArr);\n      output = check crypto:decryptAesCbc(output, rsaKeyArr, ivArr);\n-     io:println(\"AES CBC PKCS5 decrypted value: \" + check strings:fromBytes(output));\n+     io:println(\"AES CBC PKCS5 decrypted value: \" + check 'string:fromBytes(output));\n \n      // Encrypt and decrypt input value using AES CBC no padding.\n      output = check crypto:encryptAesCbc(inputArr, rsaKeyArr, ivArr, crypto:NONE);\n      output = check crypto:decryptAesCbc(output, rsaKeyArr, ivArr, crypto:NONE);\n-     io:println(\"AES CBC no padding decrypted value: \" + check strings:fromBytes(output));\n+     io:println(\"AES CBC no padding decrypted value: \" + check 'string:fromBytes(output));\n \n      // Encrypt and decrypt input value using AES GCM PKCS5 padding.\n      output = check crypto:encryptAesGcm(inputArr, rsaKeyArr, ivArr);\n      output = check crypto:decryptAesGcm(output, rsaKeyArr, ivArr);\n-     io:println(\"AES GCM PKCS5 decrypted value: \" + check strings:fromBytes(output));\n+     io:println(\"AES GCM PKCS5 decrypted value: \" + check 'string:fromBytes(output));\n \n      // Encrypt and decrypt input value using AES GCM no padding.\n      output = check crypto:encryptAesGcm(inputArr, rsaKeyArr, ivArr, crypto:NONE);\n      output = check crypto:decryptAesGcm(output, rsaKeyArr, ivArr, crypto:NONE);\n-     io:println(\"AES GCM no padding decrypted value: \" + check strings:fromBytes(output));\n+     io:println(\"AES GCM no padding decrypted value: \" + check 'string:fromBytes(output));\n \n      // Encrypt and decrypt input value using AES ECB PKCS5 padding.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4NzAwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 // Encrypt and decrypt input value using AES ECB no padding.\n          \n          \n            \n                 // Encrypt and decrypt input value using AES ECB without padding.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393187004", "createdAt": "2020-03-16T17:17:26Z", "author": {"login": "praneesha"}, "path": "examples/crypto/crypto.bal", "diffHunk": "@@ -106,32 +106,32 @@ public function main() returns error? {\n      // Encrypt and decrypt input value using AES CBC PKCS5 padding.\n      output = check crypto:encryptAesCbc(inputArr, rsaKeyArr, ivArr);\n      output = check crypto:decryptAesCbc(output, rsaKeyArr, ivArr);\n-     io:println(\"AES CBC PKCS5 decrypted value: \" + check strings:fromBytes(output));\n+     io:println(\"AES CBC PKCS5 decrypted value: \" + check 'string:fromBytes(output));\n \n      // Encrypt and decrypt input value using AES CBC no padding.\n      output = check crypto:encryptAesCbc(inputArr, rsaKeyArr, ivArr, crypto:NONE);\n      output = check crypto:decryptAesCbc(output, rsaKeyArr, ivArr, crypto:NONE);\n-     io:println(\"AES CBC no padding decrypted value: \" + check strings:fromBytes(output));\n+     io:println(\"AES CBC no padding decrypted value: \" + check 'string:fromBytes(output));\n \n      // Encrypt and decrypt input value using AES GCM PKCS5 padding.\n      output = check crypto:encryptAesGcm(inputArr, rsaKeyArr, ivArr);\n      output = check crypto:decryptAesGcm(output, rsaKeyArr, ivArr);\n-     io:println(\"AES GCM PKCS5 decrypted value: \" + check strings:fromBytes(output));\n+     io:println(\"AES GCM PKCS5 decrypted value: \" + check 'string:fromBytes(output));\n \n      // Encrypt and decrypt input value using AES GCM no padding.\n      output = check crypto:encryptAesGcm(inputArr, rsaKeyArr, ivArr, crypto:NONE);\n      output = check crypto:decryptAesGcm(output, rsaKeyArr, ivArr, crypto:NONE);\n-     io:println(\"AES GCM no padding decrypted value: \" + check strings:fromBytes(output));\n+     io:println(\"AES GCM no padding decrypted value: \" + check 'string:fromBytes(output));\n \n      // Encrypt and decrypt input value using AES ECB PKCS5 padding.\n      output = check crypto:encryptAesEcb(inputArr, rsaKeyArr);\n      output = check crypto:decryptAesEcb(output, rsaKeyArr);\n-     io:println(\"AES ECB PKCS5 decrypted value: \" + check strings:fromBytes(output));\n+     io:println(\"AES ECB PKCS5 decrypted value: \" + check 'string:fromBytes(output));\n \n      // Encrypt and decrypt input value using AES ECB no padding.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4NzcyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 // Encrypt and decrypt input value using RSA ECB PKCS1 padding.\n          \n          \n            \n                 // Encrypt and decrypt an input value using RSA ECB PKCS1 padding.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393187724", "createdAt": "2020-03-16T17:18:38Z", "author": {"login": "praneesha"}, "path": "examples/crypto/crypto.bal", "diffHunk": "@@ -142,10 +142,10 @@ public function main() returns error? {\n      // Encrypt and decrypt input value using RSA ECB PKCS1 padding.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4NzkzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 // Encrypt and decrypt input value using RSA ECB OAEPwithSHA512andMGF1 padding.\n          \n          \n            \n                 // Encrypt and decrypt an input value using RSA ECB OAEP with SHA512 and MGF1 padding.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393187939", "createdAt": "2020-03-16T17:19:00Z", "author": {"login": "praneesha"}, "path": "examples/crypto/crypto.bal", "diffHunk": "@@ -142,10 +142,10 @@ public function main() returns error? {\n      // Encrypt and decrypt input value using RSA ECB PKCS1 padding.\n      output = check crypto:encryptRsaEcb(inputArr, rsaPublicKey);\n      output = check crypto:decryptRsaEcb(output, rsaPrivateKey);\n-     io:println(\"RSA ECB PKCS1 decrypted value: \" + check strings:fromBytes(output));\n+     io:println(\"RSA ECB PKCS1 decrypted value: \" + check 'string:fromBytes(output));\n \n      // Encrypt and decrypt input value using RSA ECB OAEPwithSHA512andMGF1 padding.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4ODUwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Run the service using the following command and passing Ballerina home path as system property.\n          \n          \n            \n            # To run the service, execute the below command by passing Ballerina home path as a system property.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393188503", "createdAt": "2020-03-16T17:20:03Z", "author": {"login": "praneesha"}, "path": "examples/grpc-secured-unary/grpc_secured_unary_service.out", "diffHunk": "@@ -7,5 +7,5 @@\n # Execute the following command to build the 'service' module.\n $ ballerina build service\n \n-# Run the service using the following command.\n-$ ballerina run target/bin/service.jar\n+# Run the service using the following command and passing Ballerina home path as system property.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4ODYxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // This is the client implementation for the secured connection (HTTPS) scenario.\n          \n          \n            \n            // This is the client implementation of the secured connection (HTTPS) scenario.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393188613", "createdAt": "2020-03-16T17:20:14Z", "author": {"login": "praneesha"}, "path": "examples/grpc-secured-unary/grpc_secured_unary_service_client.bal", "diffHunk": "@@ -1,4 +1,5 @@\n // This is the client implementation for the secured connection (HTTPS) scenario.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4OTE2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Run the client using the following command and passing Ballerina home path as system property.\n          \n          \n            \n            # To run the client, execute the below command by passing Ballerina home path as a system property.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393189160", "createdAt": "2020-03-16T17:21:06Z", "author": {"login": "praneesha"}, "path": "examples/grpc-secured-unary/grpc_secured_unary_service_client.out", "diffHunk": "@@ -7,5 +7,5 @@\n # Execute the following command to build the 'client' module.\n $ ballerina build client\n \n-# Run the client using the following command.\n-$ ballerina run target/bin/client.jar\n+# Run the client using the following command and passing Ballerina home path as system property.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MDAzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n          \n          \n            \n                // Since the `rowType` is provided as a `BinaryType`, the `resultStream` will", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393190030", "createdAt": "2020-03-16T17:22:40Z", "author": {"login": "praneesha"}, "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,196 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    string clob_type;\n+    byte[] binary_type;\n+|};\n+\n+type ArrayType record {|\n+    int row_id;\n+    int[] int_array;\n+    int[] long_array;\n+    decimal[] float_array;\n+    float[] double_array;\n+    boolean[] boolean_array;\n+    string[] string_array;\n+|};\n+\n+type DateTimeType record {|\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+|};\n+\n+function queryBinaryType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within the record from the\n+    // `resultStream` will be automatically identified based on the column\n+    // name and type of the query result.\n+    stream<record{}, error> resultStream =\n+        jdbcClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MDQxNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Since the `rowType` is provided as `ArrayType`, the `resultStream` will\n          \n          \n            \n                // Since the `rowType` is provided as an `ArrayType`, the `resultStream` will", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393190417", "createdAt": "2020-03-16T17:23:20Z", "author": {"login": "praneesha"}, "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,196 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    string clob_type;\n+    byte[] binary_type;\n+|};\n+\n+type ArrayType record {|\n+    int row_id;\n+    int[] int_array;\n+    int[] long_array;\n+    decimal[] float_array;\n+    float[] double_array;\n+    boolean[] boolean_array;\n+    string[] string_array;\n+|};\n+\n+type DateTimeType record {|\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+|};\n+\n+function queryBinaryType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within the record from the\n+    // `resultStream` will be automatically identified based on the column\n+    // name and type of the query result.\n+    stream<record{}, error> resultStream =\n+        jdbcClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // have `BinaryType` records.\n+    resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\", BinaryType);\n+    stream<BinaryType, sql:Error> binaryResultStream\n+    = <stream<BinaryType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate the `binaryResultStream`.\n+    e = binaryResultStream.forEach(function(BinaryType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+\n+function queryArrayType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Array Type -------\");\n+    // Select the rows with array data types.\n+    // The name and type of the attributes within the record from the `\n+    // resultStream` will be automatically identified based on the column\n+    // name and type of the query result.\n+    stream<record{}, error> resultStream =\n+        jdbcClient->query(\"Select * from ARRAY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `ArrayType`, the `resultStream` will", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MDY4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Since the `rowType` is provided as `DateTimeType`, the `resultStream`\n          \n          \n            \n                // Since the `rowType` is provided as a `DateTimeType`, the `resultStream`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393190681", "createdAt": "2020-03-16T17:23:46Z", "author": {"login": "praneesha"}, "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,196 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    string clob_type;\n+    byte[] binary_type;\n+|};\n+\n+type ArrayType record {|\n+    int row_id;\n+    int[] int_array;\n+    int[] long_array;\n+    decimal[] float_array;\n+    float[] double_array;\n+    boolean[] boolean_array;\n+    string[] string_array;\n+|};\n+\n+type DateTimeType record {|\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+|};\n+\n+function queryBinaryType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within the record from the\n+    // `resultStream` will be automatically identified based on the column\n+    // name and type of the query result.\n+    stream<record{}, error> resultStream =\n+        jdbcClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // have `BinaryType` records.\n+    resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\", BinaryType);\n+    stream<BinaryType, sql:Error> binaryResultStream\n+    = <stream<BinaryType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate the `binaryResultStream`.\n+    e = binaryResultStream.forEach(function(BinaryType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+\n+function queryArrayType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Array Type -------\");\n+    // Select the rows with array data types.\n+    // The name and type of the attributes within the record from the `\n+    // resultStream` will be automatically identified based on the column\n+    // name and type of the query result.\n+    stream<record{}, error> resultStream =\n+        jdbcClient->query(\"Select * from ARRAY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `ArrayType`, the `resultStream` will\n+    // have `ArrayType` records.\n+    resultStream = jdbcClient->query(\"Select * from ARRAY_TYPES\", ArrayType);\n+    stream<ArrayType, sql:Error> arrayResultStream =\n+        <stream<ArrayType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate the `arrayResultStream`.\n+    e = arrayResultStream.forEach(function(ArrayType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+function queryDateTimeType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Date Time Type -------\");\n+    // Select the rows with date/time data types.\n+    // The name and type of the attributes within the record from\n+    // the `resultStream` will be automatically identified based on the\n+    // column name and type of the query result.\n+    stream<record{}, error> resultStream =\n+        jdbcClient->query(\"Select * from DATE_TIME_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `DateTimeType`, the `resultStream`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MDc4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Timestamp fields of the database tabl can be mapped to time:Time,\n          \n          \n            \n                // Timestamp fields of the database table can be mapped to time:Time,", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393190783", "createdAt": "2020-03-16T17:23:56Z", "author": {"login": "praneesha"}, "path": "examples/jdbc2-complex-type-queries/jdbc2_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,196 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    string clob_type;\n+    byte[] binary_type;\n+|};\n+\n+type ArrayType record {|\n+    int row_id;\n+    int[] int_array;\n+    int[] long_array;\n+    decimal[] float_array;\n+    float[] double_array;\n+    boolean[] boolean_array;\n+    string[] string_array;\n+|};\n+\n+type DateTimeType record {|\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+|};\n+\n+function queryBinaryType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within the record from the\n+    // `resultStream` will be automatically identified based on the column\n+    // name and type of the query result.\n+    stream<record{}, error> resultStream =\n+        jdbcClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // have `BinaryType` records.\n+    resultStream = jdbcClient->query(\"Select * from BINARY_TYPES\", BinaryType);\n+    stream<BinaryType, sql:Error> binaryResultStream\n+    = <stream<BinaryType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate the `binaryResultStream`.\n+    e = binaryResultStream.forEach(function(BinaryType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+\n+function queryArrayType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Array Type -------\");\n+    // Select the rows with array data types.\n+    // The name and type of the attributes within the record from the `\n+    // resultStream` will be automatically identified based on the column\n+    // name and type of the query result.\n+    stream<record{}, error> resultStream =\n+        jdbcClient->query(\"Select * from ARRAY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `ArrayType`, the `resultStream` will\n+    // have `ArrayType` records.\n+    resultStream = jdbcClient->query(\"Select * from ARRAY_TYPES\", ArrayType);\n+    stream<ArrayType, sql:Error> arrayResultStream =\n+        <stream<ArrayType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate the `arrayResultStream`.\n+    e = arrayResultStream.forEach(function(ArrayType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+function queryDateTimeType(jdbc:Client jdbcClient) {\n+    io:println(\"------ Query Date Time Type -------\");\n+    // Select the rows with date/time data types.\n+    // The name and type of the attributes within the record from\n+    // the `resultStream` will be automatically identified based on the\n+    // column name and type of the query result.\n+    stream<record{}, error> resultStream =\n+        jdbcClient->query(\"Select * from DATE_TIME_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `DateTimeType`, the `resultStream`\n+    // will have `DateTimeType` records. The Date, Time, DateTime, and\n+    // Timestamp fields of the database tabl can be mapped to time:Time,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MTg4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // among all database clients since the `connectionPool` property\n          \n          \n            \n                // among all the database clients since the `connectionPool` property", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393191882", "createdAt": "2020-03-16T17:25:48Z", "author": {"login": "praneesha"}, "path": "examples/jdbc2-init-options/jdbc2_init_options.bal", "diffHunk": "@@ -0,0 +1,79 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeClients() returns sql:Error? {\n+    // This is a simple JDBC Client for an H2 database with the mandatory\n+    // field - JDBC URL. This client can be used with any database\n+    // by providing the corresponding JDBC URL and placing the relevant database\n+    // driver JAR.\n+    jdbc:Client jdbcClient1 = check new (\"jdbc:h2:file:./target/sample1\");\n+    io:println(\"Simple JDBC client created.\");\n+\n+    // Initialize the JDBC client along by providing the username and password.\n+    jdbc:Client jdbcClient2 = check new (\"jdbc:h2:file:./target/sample2\",\n+        \"rootUser\", \"rootPass\");\n+    io:println(\"JDBC client with user/password created.\");\n+\n+    // Initialize the JDBC client by providing additional\n+    // database properties. The database properties can differ based\n+    // on the specific JDBC datasource implementation of the database.\n+    jdbc:Options h2Options = {\n+        datasourceName: \"org.h2.jdbcx.JdbcDataSource\",\n+        properties: {\"loginTimeout\": \"2000\"}\n+    };\n+    jdbc:Client jdbcClient3 = check new (\"jdbc:h2:file:./target/sample3\",\n+        \"rootUser\", \"rootPass\", h2Options);\n+    io:println(\"JDBC client with database options created.\");\n+\n+    // Connection pool is used to share and use the connections\n+    // to the database efficiently. In the above samples, the global\n+    // connection pool is created and shared\n+    // among all database clients since the `connectionPool` property", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MjEzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //Initializes JDBC clients with different options.\n          \n          \n            \n            //Initialize JDBC clients with different options.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393192130", "createdAt": "2020-03-16T17:26:11Z", "author": {"login": "praneesha"}, "path": "examples/jdbc2-init-options/jdbc2_init_options.bal", "diffHunk": "@@ -0,0 +1,79 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function initializeClients() returns sql:Error? {\n+    // This is a simple JDBC Client for an H2 database with the mandatory\n+    // field - JDBC URL. This client can be used with any database\n+    // by providing the corresponding JDBC URL and placing the relevant database\n+    // driver JAR.\n+    jdbc:Client jdbcClient1 = check new (\"jdbc:h2:file:./target/sample1\");\n+    io:println(\"Simple JDBC client created.\");\n+\n+    // Initialize the JDBC client along by providing the username and password.\n+    jdbc:Client jdbcClient2 = check new (\"jdbc:h2:file:./target/sample2\",\n+        \"rootUser\", \"rootPass\");\n+    io:println(\"JDBC client with user/password created.\");\n+\n+    // Initialize the JDBC client by providing additional\n+    // database properties. The database properties can differ based\n+    // on the specific JDBC datasource implementation of the database.\n+    jdbc:Options h2Options = {\n+        datasourceName: \"org.h2.jdbcx.JdbcDataSource\",\n+        properties: {\"loginTimeout\": \"2000\"}\n+    };\n+    jdbc:Client jdbcClient3 = check new (\"jdbc:h2:file:./target/sample3\",\n+        \"rootUser\", \"rootPass\", h2Options);\n+    io:println(\"JDBC client with database options created.\");\n+\n+    // Connection pool is used to share and use the connections\n+    // to the database efficiently. In the above samples, the global\n+    // connection pool is created and shared\n+    // among all database clients since the `connectionPool` property\n+    // is not set.\n+    sql:ConnectionPool connPool = {\n+        // Default max number of open connections in the connection pool is 15.\n+        maxOpenConnections: 5,\n+        // Default max life time of a connection in the connection pool is\n+        // 1800 seconds (30 minutes).\n+        maxConnectionLifeTimeInSeconds: 2000.0,\n+        // Default minimum number of idle connections is 15.\n+        minIdleConnections: 5\n+    };\n+\n+    // Initialize the JDBC client with the specific connection pool.\n+    jdbc:Client jdbcClient4 = check new (\"jdbc:h2:file:./target/sample4\",\n+        \"rootUser\", \"rootPass\", h2Options, connPool);\n+    io:println(\"JDBC client with connection pool created.\");\n+\n+    // Other than the JDBC URL, all other properties are optional.\n+    // Hence, named attributes can be used specifically to assign\n+    // the attributes.\n+    jdbc:Client jdbcClient5 = check new (url = \"jdbc:h2:file:./target/sample5\",\n+        user = \"rootUser\", password = \"rootPass\", options = h2Options,\n+        connectionPool = connPool);\n+\n+    // Initialize JDBC Client only with the URL and connection pool.\n+    jdbc:Client jdbcClient6 = check new (url = \"jdbc:h2:file:./target/sample6\",\n+        connectionPool = connPool);\n+    io:println(\"JDBC client with optional params created.\");\n+\n+    // Close the clients to release the resource\n+    // and destroy the connection pool.\n+    check jdbcClient1.close();\n+    check jdbcClient2.close();\n+    check jdbcClient3.close();\n+    check jdbcClient4.close();\n+    check jdbcClient5.close();\n+    check jdbcClient6.close();\n+}\n+\n+//Initializes JDBC clients with different options.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MjY1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // the next() operation is sufficient to retrieve the data.\n          \n          \n            \n                // the `next()` operation is sufficient to retrieve the data.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393192651", "createdAt": "2020-03-16T17:27:06Z", "author": {"login": "praneesha"}, "path": "examples/jdbc2-query-operation/jdbc2_query_operation.bal", "diffHunk": "@@ -0,0 +1,134 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function simpleQuery(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via the query remote operation.\n+    // The result is returned as a stream and the elements of the stream can\n+    // be either a record or an error.\n+    stream<record{}, error> resultStream =\n+        jdbcClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(\"Full Customer details: \", result);\n+        io:println(\"Customer first name: \", result[\"FIRSTNAME\"]);\n+        io:println(\"Customer last name: \", result[\"LASTNAME\"]);\n+    });\n+    // Check and handle the error during the SQL query\n+    // or iteration of the result stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\");\n+        io:println(e);\n+    }\n+\n+    // In general cases, the stream will be closed automatically\n+    // when the stream is fully consumed or any error is encountered.\n+    // However, in case if the stream is not fully consumed, the stream\n+    // should be closed specifically.\n+    e = resultStream.close();\n+    io:println(\"------ End Simple Query -------\");\n+}\n+\n+function countRows(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Count Total Rows -------\");\n+    // The result of the count operation is provided as a record stream.\n+    stream<record{}, error> resultStream =\n+        jdbcClient->query(\"Select count(*) as total from Customers\");\n+\n+    // Since the above count query will return only a single row,\n+    // the next() operation is sufficient to retrieve the data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MzA1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // Executes the select queries in different options.\n          \n          \n            \n                        // Execute the select queries in different options.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393193056", "createdAt": "2020-03-16T17:27:49Z", "author": {"login": "praneesha"}, "path": "examples/jdbc2-query-operation/jdbc2_query_operation.bal", "diffHunk": "@@ -0,0 +1,134 @@\n+import ballerina/io;\n+import ballerina/java.jdbc;\n+import ballerina/sql;\n+\n+function simpleQuery(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via the query remote operation.\n+    // The result is returned as a stream and the elements of the stream can\n+    // be either a record or an error.\n+    stream<record{}, error> resultStream =\n+        jdbcClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(\"Full Customer details: \", result);\n+        io:println(\"Customer first name: \", result[\"FIRSTNAME\"]);\n+        io:println(\"Customer last name: \", result[\"LASTNAME\"]);\n+    });\n+    // Check and handle the error during the SQL query\n+    // or iteration of the result stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\");\n+        io:println(e);\n+    }\n+\n+    // In general cases, the stream will be closed automatically\n+    // when the stream is fully consumed or any error is encountered.\n+    // However, in case if the stream is not fully consumed, the stream\n+    // should be closed specifically.\n+    e = resultStream.close();\n+    io:println(\"------ End Simple Query -------\");\n+}\n+\n+function countRows(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Count Total Rows -------\");\n+    // The result of the count operation is provided as a record stream.\n+    stream<record{}, error> resultStream =\n+        jdbcClient->query(\"Select count(*) as total from Customers\");\n+\n+    // Since the above count query will return only a single row,\n+    // the next() operation is sufficient to retrieve the data.\n+    record {|record {} value;|}|error? result = resultStream.next();\n+\n+    // Check the result and retrieve the value for total.\n+    if (result is record {|record {} value;|}) {\n+        io:println(\"Total rows in customer table : \", result.value[\"TOTAL\"]);\n+    } else if (result is error) {\n+        io:println(\"Next operation on the stream failed. \", result);\n+    } else {\n+        io:println(\"Customer table is empty\");\n+    }\n+    // Close the stream.\n+    error? e = resultStream.close();\n+    io:println(\"------ End Count Total Rows -------\");\n+}\n+\n+// Define a record to load the query result schema as shown below in the\n+// 'typedQuery' function. In this example, all columns of the customer table\n+// will be loaded. Therefore, the `Customer` record will be created with all\n+// the columns. The column name of the result and the defined field name of\n+// the record will be matched case insensitively.\n+type Customer record {|\n+    int customerId;\n+    string lastName;\n+    string firstName;\n+    int registrationId;\n+    float creditLimit;\n+    string country;\n+|};\n+\n+function typedQuery(jdbc:Client jdbcClient) {\n+    io:println(\"------ Start Query With Type Description -------\");\n+    // The result is returned as a Customer record stream and the elements\n+    // of the stream can be either a Customer record or an error.\n+    stream<record{}, error> resultStream =\n+        jdbcClient->query(\"Select * from Customers\", Customer);\n+\n+    // Cast the generic record type to the Customer stream type.\n+    stream<Customer, sql:Error> customerStream =\n+        <stream<Customer, sql:Error>>resultStream;\n+\n+    // Iterate the customer stream.\n+    error? e = customerStream.forEach(function(Customer customer) {\n+        io:println(customer);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+\n+    // Close the stream.\n+    e = resultStream.close();\n+    io:println(\"------ End Query With Type Description -------\");\n+}\n+\n+//Initialize the database table with sample data.\n+function initializeTable(jdbc:Client jdbcClient) returns sql:Error? {\n+    sql:ExecuteResult? result =\n+        check jdbcClient->execute(\"DROP TABLE IF EXISTS Customers\");\n+    result = check jdbcClient->execute(\"CREATE TABLE IF NOT EXISTS Customers(\" +\n+        \"customerId INTEGER NOT NULL IDENTITY, firstName  VARCHAR(300),\" +\n+        \"lastName  VARCHAR(300), registrationID INTEGER, creditLimit DOUBLE,\" +\n+        \"country  VARCHAR(300), PRIMARY KEY (customerId))\");\n+    result = check jdbcClient->execute(\"INSERT INTO Customers (firstName,\" +\n+        \"lastName,registrationID,creditLimit,country) VALUES ('Peter', \" +\n+        \"'Stuart', 1, 5000.75, 'USA')\");\n+    result = check jdbcClient->execute(\"INSERT INTO Customers (firstName, \" +\n+        \"lastName,registrationID,creditLimit,country) VALUES ('Dan', 'Brown',\" +\n+        \"2, 10000, 'UK')\");\n+}\n+\n+public function main() {\n+    // Initialize the JDBC client.\n+    jdbc:Client|sql:Error jdbcClient = new (\"jdbc:h2:file:./target/customers\",\n+        \"rootUser\", \"rootPass\");\n+    if (jdbcClient is jdbc:Client) {\n+        sql:Error? err = initializeTable(jdbcClient);\n+        if (err is sql:Error) {\n+            io:println(\"Customer table initialization failed!\", err);\n+        } else {\n+            // Executes the select queries in different options.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MzU5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // A let expression binds variables and then evaluates an expression with those variables in scope.\n          \n          \n            \n            // A let expression binds variables and then evaluates an expression with those variables in its scope.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393193592", "createdAt": "2020-03-16T17:28:46Z", "author": {"login": "praneesha"}, "path": "examples/let-expression/let_expression.description", "diffHunk": "@@ -0,0 +1 @@\n+// A let expression binds variables and then evaluates an expression with those variables in scope.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5NTA2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n          \n          \n            \n                // Since the `rowType` is provided as a `BinaryType`, the `resultStream` will", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393195067", "createdAt": "2020-03-16T17:31:10Z", "author": {"login": "praneesha"}, "path": "examples/mysql-complex-type-queries/mysql_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,153 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+// Username and password of the MySQL database. This is used in below examples\n+// when initializing the MySQL connector. You need to change these based on\n+// your setup if you are trying locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+// Define the record types to be used in the below examples.\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    byte[] binary_type;\n+|};\n+\n+type DateTimeType record {|\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+|};\n+\n+function queryBinaryType(mysql:Client mysqlClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within the record from the\n+    // `resultStream` will be automatically identified based on the column\n+    // name and type of the query result.\n+    stream<record{}, error> resultStream =\n+        mysqlClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5NTI1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Since the `rowType` is provided as `DateTimeType`, the `resultStream`\n          \n          \n            \n                // Since the `rowType` is provided as a `DateTimeType`, the `resultStream`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393195257", "createdAt": "2020-03-16T17:31:29Z", "author": {"login": "praneesha"}, "path": "examples/mysql-complex-type-queries/mysql_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,153 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+// Username and password of the MySQL database. This is used in below examples\n+// when initializing the MySQL connector. You need to change these based on\n+// your setup if you are trying locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+// Define the record types to be used in the below examples.\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    byte[] binary_type;\n+|};\n+\n+type DateTimeType record {|\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+|};\n+\n+function queryBinaryType(mysql:Client mysqlClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within the record from the\n+    // `resultStream` will be automatically identified based on the column\n+    // name and type of the query result.\n+    stream<record{}, error> resultStream =\n+        mysqlClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // have `BinaryType` records.\n+    resultStream = mysqlClient->query(\"Select * from BINARY_TYPES\", BinaryType);\n+    stream<BinaryType, sql:Error> binaryResultStream =\n+        <stream<BinaryType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate the `binaryResultStream`.\n+    e = binaryResultStream.forEach(function(BinaryType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+function queryDateTimeType(mysql:Client mysqlClient) {\n+    io:println(\"------ Query Date Time Type -------\");\n+    // Select the rows with date/time data types.\n+    // The name and type of the attributes within the record from the\n+    // `resultStream` will be automatically identified based on the column\n+    // name and type of the query result.\n+    stream<record{}, error> resultStream =\n+        mysqlClient->query(\"Select * from DATE_TIME_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `DateTimeType`, the `resultStream`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5NTQ1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // Executes the complex data type queries.\n          \n          \n            \n                        // Execute the complex data type queries.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393195457", "createdAt": "2020-03-16T17:31:51Z", "author": {"login": "praneesha"}, "path": "examples/mysql-complex-type-queries/mysql_complex_type_queries.bal", "diffHunk": "@@ -0,0 +1,153 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+import ballerina/time;\n+\n+// Username and password of the MySQL database. This is used in below examples\n+// when initializing the MySQL connector. You need to change these based on\n+// your setup if you are trying locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+// Define the record types to be used in the below examples.\n+type BinaryType record {|\n+    int row_id;\n+    byte[] blob_type;\n+    byte[] binary_type;\n+|};\n+\n+type DateTimeType record {|\n+    int row_id;\n+    string date_type;\n+    int time_type;\n+    time:Time timestamp_type;\n+    string datetime_type;\n+|};\n+\n+function queryBinaryType(mysql:Client mysqlClient) {\n+    io:println(\"------ Query Binary Type -------\");\n+    // Select the rows with binary data types.\n+    // The name and type of the attributes within the record from the\n+    // `resultStream` will be automatically identified based on the column\n+    // name and type of the query result.\n+    stream<record{}, error> resultStream =\n+        mysqlClient->query(\"Select * from BINARY_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `BinaryType`, the `resultStream` will\n+    // have `BinaryType` records.\n+    resultStream = mysqlClient->query(\"Select * from BINARY_TYPES\", BinaryType);\n+    stream<BinaryType, sql:Error> binaryResultStream =\n+        <stream<BinaryType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate the `binaryResultStream`.\n+    e = binaryResultStream.forEach(function(BinaryType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+function queryDateTimeType(mysql:Client mysqlClient) {\n+    io:println(\"------ Query Date Time Type -------\");\n+    // Select the rows with date/time data types.\n+    // The name and type of the attributes within the record from the\n+    // `resultStream` will be automatically identified based on the column\n+    // name and type of the query result.\n+    stream<record{}, error> resultStream =\n+        mysqlClient->query(\"Select * from DATE_TIME_TYPES\");\n+\n+    io:println(\"Result 1:\");\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    // Since the `rowType` is provided as `DateTimeType`, the `resultStream`\n+    // will have `DateTimeType` records. The Date, Time, DateTime, and\n+    // Timestamp fields of the database table can be mapped to time:Time,\n+    // string and int types in Ballerina.\n+    resultStream = mysqlClient->query(\"Select * from DATE_TIME_TYPES\",\n+        DateTimeType);\n+    stream<DateTimeType, sql:Error> dateResultStream =\n+        <stream<DateTimeType, sql:Error>>resultStream;\n+\n+    io:println(\"Result 2:\");\n+    // Iterate the `dateResultStream`.\n+    e = dateResultStream.forEach(function(DateTimeType result) {\n+        io:println(result);\n+    });\n+    if (e is error) {\n+        io:println(e);\n+    }\n+    io:println(\"------ ********* -------\");\n+}\n+\n+// Initialize the database table with sample data.\n+function initializeTable() returns sql:Error? {\n+    mysql:Client mysqlClient = check new (user = dbUser, password = dbPassword);\n+    sql:ExecuteResult? result = check\n+        mysqlClient->execute(\"CREATE DATABASE IF NOT EXISTS MYSQL_BBE\");\n+\n+    result = check mysqlClient->execute(\"DROP TABLE IF EXISTS \" +\n+        \"MYSQL_BBE.BINARY_TYPES\");\n+    result = check mysqlClient->execute(\"CREATE TABLE MYSQL_BBE.BINARY_TYPES\"+\n+        \"(row_id INTEGER NOT NULL, blob_type BLOB(1024), binary_type \"+\n+        \"BINARY (27), PRIMARY KEY (row_id))\");\n+    result = check mysqlClient->execute(\"INSERT INTO MYSQL_BBE.BINARY_TYPES \"+\n+        \"(row_id, blob_type, binary_type) VALUES (1, \"+\n+        \"X'77736F322062616C6C6572696E6120626C6F6220746573742E',\" +\n+        \"X'77736F322062616C6C6572696E612062696E61727920746573742E')\");\n+\n+    result = check mysqlClient->execute(\"DROP TABLE IF EXISTS \" +\n+        \"MYSQL_BBE.DATE_TIME_TYPES\");\n+    result = check mysqlClient->execute(\"CREATE TABLE \"+\n+        \"MYSQL_BBE.DATE_TIME_TYPES(row_id INTEGER NOT NULL,\" +\n+        \"date_type DATE, time_type TIME, timestamp_type timestamp, \"+\n+        \"datetime_type  datetime, PRIMARY KEY (row_id))\");\n+    result = check mysqlClient->execute(\"Insert into \" +\n+        \"MYSQL_BBE.DATE_TIME_TYPES (row_id, date_type, time_type, \"+\n+        \"timestamp_type, datetime_type) values (1,'2017-05-23','14:15:23',\"+\n+        \"'2017-01-25 16:33:55','2017-01-25 16:33:55')\");\n+\n+    check mysqlClient.close();\n+}\n+\n+public function main() {\n+    // Initialize the MySQL client.\n+    sql:Error? err = initializeTable();\n+    if (err is sql:Error) {\n+        io:println(\"Sample data initialization failed!\", err);\n+    } else {\n+        mysql:Client|sql:Error mysqlClient = new (user = dbUser,\n+            password = dbPassword, database = \"MYSQL_BBE\");\n+        if (mysqlClient is mysql:Client) {\n+            // Executes the complex data type queries.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5NjU5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //Initializes MySQL clients with different options.\n          \n          \n            \n            //Initialize MySQL clients with different options.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393196597", "createdAt": "2020-03-16T17:33:51Z", "author": {"login": "praneesha"}, "path": "examples/mysql-init-options/mysql_init_options.bal", "diffHunk": "@@ -0,0 +1,112 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+// Username and password of the MySQL database. This is used in the below\n+// examples when initializing the MySQL connector. You need to change these\n+// based on your setup to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function initializeClients() returns sql:Error? {\n+    // Initialize the MySQL Client without any parameters. In that case,\n+    // all parameters will be using the default values:`localhost` for host,\n+    // `3306` for port, and `()` for user, password, and database.\n+    mysql:Client|sql:Error mysqlClient1 = new ();\n+    if (mysqlClient1 is sql:Error) {\n+        io:println(\"Error when initializing the MySQL client without any \" +\n+            \"params. \", mysqlClient1);\n+    } else {\n+        io:println(\"Simple MySQL client created successfully\");\n+        check mysqlClient1.close();\n+    }\n+\n+    // Initialize the MySQL client by providing the username and password.\n+    mysql:Client mysqlClient2 = check new (\"localhost\", dbUser, dbPassword);\n+    io:println(\"MySQL client with user and password created.\");\n+\n+    // Initialize the MySQL client by providing the username, password,\n+    // and default host.\n+    mysql:Client mysqlClient3 = check new (user = dbUser,\n+        password = dbPassword);\n+    io:println(\"MySQL client with user and password created \" +\n+        \"with default host.\");\n+\n+    // Initialize the MySQL client by providing the host, username,\n+    // password, database, and port.\n+    mysql:Client mysqlClient4 = check new (\"localhost\", dbUser, dbPassword,\n+        \"information_schema\", 3306);\n+    io:println(\"MySQL client with host, user, password, database and \" +\n+        \"port created.\");\n+\n+    // Initialize the MySQL client by providing additional\n+    // MySQL database properties.\n+    mysql:Options mysqlOptions = {\n+        // SSL is enabled by default and the default mode is\n+        // `sql:SSL_PREFERRED`. SSL will be disabled, if `ssl` is assigned to\n+        // `()`.\n+        ssl: {\n+            // Possible options for mode are `sql:SSL_PREFERRED`,\n+            // `sql:SSL_REQUIRED`, `sql:SSL_VERIFY_CERT`, and\n+            // `sql:SSL_VERIFY_IDENTITY`. For details on each mode, go to\n+            // the MySQL reference (https://dev.mysql.com/doc/refman/8.0/en/using-encrypted-connections.html).\n+            mode: mysql:SSL_PREFERRED\n+        },\n+        connectTimeoutInSeconds: 10\n+    };\n+    // Initialize the MySQL client with MySQL database options.\n+    mysql:Client mysqlClient5 = check new (user = dbUser, password = dbPassword,\n+        options = mysqlOptions);\n+    io:println(\"MySQL client with database options created.\");\n+\n+    // Connection pool is used to share and use the database connections\n+    // efficiently. In the above samples, the global connection pool is\n+    // created and shared among all the database clients since the\n+    // `connectionPool` property is not set.\n+    sql:ConnectionPool connPool = {\n+        // Default max number of open connections in the connection pool is 15.\n+        maxOpenConnections: 5,\n+        // Default max life time of a connection in the connection pool is\n+        // 1800 seconds (30 minutes).\n+        maxConnectionLifeTimeInSeconds: 2000.0,\n+        // Default minimum number of idle connections is 15.\n+        minIdleConnections: 5\n+    };\n+\n+    // Initialize the MySQL client with the specific connection pool.\n+    mysql:Client mysqlClient6 = check new (user = dbUser, password = dbPassword,\n+        options = mysqlOptions, connectionPool = connPool);\n+    io:println(\"MySQL client with connection pool created.\");\n+\n+    // Initialize the MySQL client with all the parameters.\n+    mysql:Client mysqlClient7 = check new (\"localhost\", dbUser, dbPassword,\n+        \"information_schema\", 3306, mysqlOptions, connPool);\n+\n+    // All properties are optional.\n+    // Hence, named attributes can be used specifically to assign\n+    // the attributes.\n+    mysql:Client mysqlClient8 = check new (host = \"localhost\",\n+        user = dbUser, password = dbPassword, database =\n+        \"information_schema\", port = 3306, options = mysqlOptions,\n+        connectionPool = connPool);\n+\n+    // Close the clients to release the resource\n+    // and destroy the connection pool.\n+    check mysqlClient2.close();\n+    check mysqlClient3.close();\n+    check mysqlClient4.close();\n+    check mysqlClient5.close();\n+    check mysqlClient6.close();\n+    check mysqlClient7.close();\n+    check mysqlClient8.close();\n+}\n+\n+//Initializes MySQL clients with different options.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5NzA1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // However, in case if the stream is not fully consumed, stream should be\n          \n          \n            \n                // However, in case if the stream is not fully consumed, the stream should be", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393197054", "createdAt": "2020-03-16T17:34:33Z", "author": {"login": "praneesha"}, "path": "examples/mysql-query-operation/mysql_query_operation.bal", "diffHunk": "@@ -0,0 +1,147 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+// Username and password of the MySQL database. This is used in the below\n+// examples when initializing the MySQL connector. You need to change these\n+// based on your setup to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function simpleQuery(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via the query remote operation.\n+    // The result is returned as a stream and the elements of the stream can\n+    // be either a record or an error.\n+    stream<record{}, error> resultStream =\n+        mysqlClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(\"Customer full details: \", result);\n+        io:println(\"Customer first name: \", result[\"FirstName\"]);\n+        io:println(\"Customer last name: \", result[\"LastName\"]);\n+    });\n+\n+    // Check and handle the error during the SQL query\n+    // or iteration of the result stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\", e);\n+    }\n+\n+    // In general cases, the stream will be closed automatically\n+    // when the stream is fully consumed or any error is encountered.\n+    // However, in case if the stream is not fully consumed, stream should be", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5NzM4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //Define a record to load the query result schema as shown in the below 'typedQuery' function.\n          \n          \n            \n            //Define a record to load the query result schema as shown in the 'typedQuery' function.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393197383", "createdAt": "2020-03-16T17:35:04Z", "author": {"login": "praneesha"}, "path": "examples/mysql-query-operation/mysql_query_operation.bal", "diffHunk": "@@ -0,0 +1,147 @@\n+import ballerina/io;\n+import ballerina/mysql;\n+import ballerina/sql;\n+\n+// Username and password of the MySQL database. This is used in the below\n+// examples when initializing the MySQL connector. You need to change these\n+// based on your setup to try locally.\n+string dbUser = \"root\";\n+string dbPassword = \"Test@123\";\n+\n+function simpleQuery(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Simple Query -------\");\n+    // Select the rows in the database table via the query remote operation.\n+    // The result is returned as a stream and the elements of the stream can\n+    // be either a record or an error.\n+    stream<record{}, error> resultStream =\n+        mysqlClient->query(\"Select * from Customers\");\n+\n+    // If there is any error during the execution of the SQL query or\n+    // iteration of the result stream, the result stream will terminate and\n+    // return the error.\n+    error? e = resultStream.forEach(function(record {} result) {\n+        io:println(\"Customer full details: \", result);\n+        io:println(\"Customer first name: \", result[\"FirstName\"]);\n+        io:println(\"Customer last name: \", result[\"LastName\"]);\n+    });\n+\n+    // Check and handle the error during the SQL query\n+    // or iteration of the result stream.\n+    if (e is error) {\n+        io:println(\"ForEach operation on the stream failed!\", e);\n+    }\n+\n+    // In general cases, the stream will be closed automatically\n+    // when the stream is fully consumed or any error is encountered.\n+    // However, in case if the stream is not fully consumed, stream should be\n+    // closed specifically.\n+    e = resultStream.close();\n+    io:println(\"------ End Simple Query -------\");\n+}\n+\n+function countRows(mysql:Client mysqlClient) {\n+    io:println(\"------ Start Count Total Rows -------\");\n+    // The result of the count operation is provided as a record stream.\n+    stream<record{}, error> resultStream =\n+        mysqlClient->query(\"Select count(*) as Total from Customers\");\n+\n+    // Since the above count query will return only a single row, the\n+    // `next()` operation is sufficient to retrieve the data.\n+    record {|record {} value;|}|error? result = resultStream.next();\n+\n+    // Check the result and retrieve the value for total.\n+    if (result is record {|record {} value;|}) {\n+        io:println(\"Total rows in customer table : \", result.value[\"Total\"]);\n+    } else if (result is error) {\n+        io:println(\"Next operation on the stream failed!\", result);\n+    } else {\n+        io:println(\"Customer table is empty\");\n+    }\n+    // Close the stream.\n+    error? e = resultStream.close();\n+    io:println(\"------ End Count Total Rows -------\");\n+}\n+\n+//Define a record to load the query result schema as shown in the below 'typedQuery' function.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5NzkxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Run the following command in Ballerina tools distribution for mock service.\n          \n          \n            \n            # Execute the below command in the Ballerina tools distribution to run the mock service.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393197916", "createdAt": "2020-03-16T17:35:54Z", "author": {"login": "praneesha"}, "path": "examples/proto-to-ballerina/proto_to_ballerina.out", "diffHunk": "@@ -1,4 +1,4 @@\n-# Run the following command in Ballerina tools distribution for mock service and stub generation.\n+# Run the following command in Ballerina tools distribution for mock service.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NDYyNTIy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#pullrequestreview-375462522", "createdAt": "2020-03-16T18:01:30Z", "commit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODowMTozMFrOF2_08A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODowMTozMFrOF2_08A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxMzE2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Run the service using the following command and passing Ballerina home path as system property.\n          \n          \n            \n            # Run the service using the following command and passing the path to the Ballerina home directory using the `--b7a.home` parameter.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393213168", "createdAt": "2020-03-16T18:01:30Z", "author": {"login": "pubudu91"}, "path": "examples/grpc-secured-unary/grpc_secured_unary_service.out", "diffHunk": "@@ -7,5 +7,5 @@\n # Execute the following command to build the 'service' module.\n $ ballerina build service\n \n-# Run the service using the following command.\n-$ ballerina run target/bin/service.jar\n+# Run the service using the following command and passing Ballerina home path as system property.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NDYyMzQw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#pullrequestreview-375462340", "createdAt": "2020-03-16T18:01:13Z", "commit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "state": "COMMENTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODowMToxM1rOF2_0Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODowNjowNVrOF3AC-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxMjkzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Run the following command in Ballerina tools distribution for client endpoint and stub generation.\n          \n          \n            \n            # Run the following command in the Ballerina tools distribution for client endpoint and stub generation.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393212935", "createdAt": "2020-03-16T18:01:13Z", "author": {"login": "praneesha"}, "path": "examples/proto-to-ballerina/proto_to_ballerina.out", "diffHunk": "@@ -1,4 +1,4 @@\n-# Run the following command in Ballerina tools distribution for mock service and stub generation.\n+# Run the following command in Ballerina tools distribution for mock service.\n $ ballerina grpc --input proto_to_ballerina.proto --mode service --output service\n \n # Run the following command in Ballerina tools distribution for client endpoint and stub generation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxMzU0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // A spread field is used with `address` to include the individual address\n          \n          \n            \n                // A spread field is used with the `address` to include the individual address", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393213546", "createdAt": "2020-03-16T18:01:57Z", "author": {"login": "praneesha"}, "path": "examples/records/records.bal", "diffHunk": "@@ -89,4 +99,33 @@ public function main() {\n     // record, else `()` is returned.\n     int? english = grades[\"english\"];\n     io:println(english);\n+\n+    // A mapping constructor expression used when creating a record value\n+    // can also include a spread field referring to another mapping value.\n+    // When a spread field is specified, all the fields of the relevant\n+    // mapping value are added to the new record value being created.\n+    // A spread field is used with `address` to include the individual address", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxMzc2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // type) results in a mapping value, where the inferred type is a record type based\n          \n          \n            \n                // type) results in a mapping value where the inferred type is a record type based", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393213763", "createdAt": "2020-03-16T18:02:15Z", "author": {"login": "praneesha"}, "path": "examples/records/records.bal", "diffHunk": "@@ -89,4 +99,33 @@ public function main() {\n     // record, else `()` is returned.\n     int? english = grades[\"english\"];\n     io:println(english);\n+\n+    // A mapping constructor expression used when creating a record value\n+    // can also include a spread field referring to another mapping value.\n+    // When a spread field is specified, all the fields of the relevant\n+    // mapping value are added to the new record value being created.\n+    // A spread field is used with `address` to include the individual address\n+    // entries in `address` when creating `anne`.\n+    Student anne = {\n+        name: \"Anne\",\n+        age: 18,\n+        grades: {\n+            maths: 70,\n+            physics: 80,\n+            chemistry: 55\n+        },\n+        ...address\n+    };\n+    io:println(anne);\n+\n+    // Using a mapping constructor expression with `var` (i.e., no contextually-expected\n+    // type) results in a mapping value, where the inferred type is a record type based", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNDAyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # This should log the json output returned by the REST endpoint.\n          \n          \n            \n            # This should log the JSON output returned by the REST endpoint.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393214023", "createdAt": "2020-03-16T18:02:36Z", "author": {"login": "praneesha"}, "path": "examples/secured-client-with-oauth2/secured_client_with_oauth2.out", "diffHunk": "@@ -1,4 +1,4 @@\n # To start the service, navigate to the directory that contains the\n # `.bal` file and execute the `ballerina run` command.\n $ ballerina run secured_client_with_oauth2.bal\n-# This should log the json output returned by the REST endpoint.\n\\ No newline at end of file\n+# This should log the json output returned by the REST endpoint.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNDE2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Since resource configuration has overridden the required scopes to denote that\n          \n          \n            \n            # Since the resource configuration has overridden the required scopes to denote that", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393214161", "createdAt": "2020-03-16T18:02:47Z", "author": {"login": "praneesha"}, "path": "examples/secured-service-with-basic-auth/secured_service_with_basic_auth.client.out", "diffHunk": "@@ -1,9 +1,9 @@\n # Since resource configuration has overridden the required scopes to denote that", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNDQ4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # authorization.\n          \n          \n            \n            # during authorization.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393214489", "createdAt": "2020-03-16T18:03:10Z", "author": {"login": "praneesha"}, "path": "examples/secured-service-with-basic-auth/secured_service_with_basic_auth.client.out", "diffHunk": "@@ -1,9 +1,9 @@\n # Since resource configuration has overridden the required scopes to denote that\n # `scope2` is required to invoke `sayHello` resource, the invocation will fail\n # authorization.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNDY1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Since `bob` has `scope2` the invocation will succeeded.\n          \n          \n            \n            # Since `bob` has `scope2`, the invocation will succeed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393214655", "createdAt": "2020-03-16T18:03:24Z", "author": {"login": "praneesha"}, "path": "examples/secured-service-with-basic-auth/secured_service_with_basic_auth.client.out", "diffHunk": "@@ -1,9 +1,9 @@\n # Since resource configuration has overridden the required scopes to denote that\n # `scope2` is required to invoke `sayHello` resource, the invocation will fail\n # authorization.\n-$ curl -k -u generalUser1:password https://localhost:9090/hello/sayHello\n+$ curl -k -u alice:password1 https://localhost:9090/hello/sayHello\n Authorization failure\n \n-# Since `generalUser2` has `scope2` the invocation will succeeded.\n-$ curl -k -u generalUser2:password https://localhost:9090/hello/sayHello\n+# Since `bob` has `scope2` the invocation will succeeded.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNTE2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # using `ballerina run` command.\n          \n          \n            \n            # using the `ballerina run` command.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393215161", "createdAt": "2020-03-16T18:04:03Z", "author": {"login": "praneesha"}, "path": "examples/secured-service-with-basic-auth/secured_service_with_basic_auth.server.out", "diffHunk": "@@ -1,17 +1,17 @@\n-# At the command line, navigate to the directory that contains the\n-# `.bal` file. Ensure that the `sample-users.toml` file is populated correctly\n-# with the user information. If required, user passwords can be encrypted using\n-# the `ballerina encrypt` configuration encryption command.\n+# At the command line, navigate to the directory that contains the `.bal` file.\n+# Ensure that the `sample-users.toml` file is populated correctly with the user\n+# information. If required, user passwords can be encrypted using the\n+# `ballerina encrypt` configuration encryption command.\n $ echo '[\"b7a.users\"]\n-[\"b7a.users.generalUser1\"]\n-password=\"password\"\n+[\"b7a.users.alice\"]\n+password=\"password1\"\n scopes=\"scope1\"\n-[\"b7a.users.generalUser2\"]\n-password=\"password\"\n-scopes=\"scope2\"\n-' > sample-users.toml\n+[\"b7a.users.bob\"]\n+password=\"password2\"\n+scopes=\"scope2,scope3\"' > sample-users.toml\n \n-# Specify the configuration file name using the `--b7a.config.file=<path to configuration file>` property and run the\n-# program using `ballerina run` command.\n+# Specify the configuration file name using the\n+# `--b7a.config.file=<path to configuration file>` property and run the program\n+# using `ballerina run` command.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNTQ0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // The `fromString()` method in the ballerina/lang.int module returns the integer value represented by a\n          \n          \n            \n                // The `fromString()` method in the `ballerina/lang.int` module returns the integer value represented by a", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393215444", "createdAt": "2020-03-16T18:04:22Z", "author": {"login": "praneesha"}, "path": "examples/type-conversion/type_conversion.bal", "diffHunk": "@@ -50,14 +50,14 @@ function createNumericValues() {\n \n     // The `fromString()` method in the ballerina/lang.int module returns the integer value represented by a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNTYzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // The `fromString()` method in the ballerina/lang.float module returns the float value represented by a given\n          \n          \n            \n                // The `fromString()` method in the `ballerina/lang.float` module returns the float value represented by a given", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393215636", "createdAt": "2020-03-16T18:04:35Z", "author": {"login": "praneesha"}, "path": "examples/type-conversion/type_conversion.bal", "diffHunk": "@@ -66,7 +66,7 @@ function createNumericValues() {\n \n     // The `fromString()` method in the ballerina/lang.float module returns the float value represented by a given", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNTc5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // The `fromString()` method in the ballerina/lang.decimal module returns the decimal value represented by a given\n          \n          \n            \n                // The `fromString()` method in the `ballerina/lang.decimal` module returns the decimal value represented by a given", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393215792", "createdAt": "2020-03-16T18:04:48Z", "author": {"login": "praneesha"}, "path": "examples/type-conversion/type_conversion.bal", "diffHunk": "@@ -75,7 +75,7 @@ function createNumericValues() {\n \n     // The `fromString()` method in the ballerina/lang.decimal module returns the decimal value represented by a given", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNjA4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `.bal` file and use the `ballerina run` command.\n          \n          \n            \n            # `.bal` file and execute the `ballerina run` command.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393216089", "createdAt": "2020-03-16T18:05:13Z", "author": {"login": "praneesha"}, "path": "examples/websocket-basic-sample/websocket_basic_sample.out", "diffHunk": "@@ -1,9 +1,6 @@\n # To start the service, navigate to the directory that contains the\n-# `.bal` file and use the `ballerina build` command.\n-$ ballerina build websocket_basic_sample.bal\n-\n-# Run the sample using the `run` command on the jar file generated:\n-$ ballerina run  websocket_basic_sample-executable.jar\n+# `.bal` file and use the `ballerina run` command.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNjM0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `.bal` file and use the `ballerina run` command.\n          \n          \n            \n            # `.bal` file and execute the `ballerina run` command.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393216349", "createdAt": "2020-03-16T18:05:33Z", "author": {"login": "praneesha"}, "path": "examples/websocket-chat-application/websocket_chat_application.out", "diffHunk": "@@ -1,9 +1,6 @@\n # To start the service, navigate to the directory that contains the\n-# `.bal` file and use the `ballerina build` command.\n-$ ballerina build websocket_chat_application.bal\n-\n-# Run the sample using the `run` command on the jar file generated:\n-$ ballerina run websocket_chat_application-executable.jar\n+# `.bal` file and use the `ballerina run` command.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNjUyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `.bal` file and use the `ballerina run` command.\n          \n          \n            \n            # `.bal` file and execute the `ballerina run` command.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393216529", "createdAt": "2020-03-16T18:05:45Z", "author": {"login": "praneesha"}, "path": "examples/websocket-client/websocket_client.out", "diffHunk": "@@ -1,7 +1,5 @@\n # To start the service, navigate to the directory that contains the\n-# `.bal` file and execute the `ballerina build` command.\n-$ ballerina build websocket_client.bal\n+# `.bal` file and use the `ballerina run` command.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNjY0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `.bal` file and use the `ballerina run` command.\n          \n          \n            \n            # `.bal` file and execute the `ballerina run` command.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393216644", "createdAt": "2020-03-16T18:05:55Z", "author": {"login": "praneesha"}, "path": "examples/websocket-proxy-server/websocket_proxy_server.out", "diffHunk": "@@ -1,9 +1,6 @@\n # To start the service, navigate to the directory that contains the\n-# `.bal` file and use the `ballerina build` command.\n-$ ballerina build websocket_proxy_server.bal\n-\n-# Run the sample using the `run` command on the jar file generated:\n-$ ballerina run websocket_proxy_server-executable.jar\n+# `.bal` file and use the `ballerina run` command.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNjc2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # `.bal` file and use the `ballerina run` command.\n          \n          \n            \n            # `.bal` file and execute the `ballerina run` command.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393216760", "createdAt": "2020-03-16T18:06:05Z", "author": {"login": "praneesha"}, "path": "examples/websocket-retry/websocket_retry.out", "diffHunk": "@@ -1,5 +1,5 @@\n-# To start the services, navigate to the directory that contains the\n-# `.bal` files and use the `ballerina run` command.\n+# To start the service, navigate to the directory that contains the\n+# `.bal` file and use the `ballerina run` command.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea5a9af8cde05ca836376663baea470b27297e19", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ea5a9af8cde05ca836376663baea470b27297e19", "committedDate": "2020-03-16T18:06:22Z", "message": "Refactor the BBE"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NDY4OTc1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#pullrequestreview-375468975", "createdAt": "2020-03-16T18:10:54Z", "commit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODoxMDo1NFrOF3ASbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODoxMDo1NFrOF3ASbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyMDcxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Run the client using the following command and passing Ballerina home path as system property.\n          \n          \n            \n            # Run the client using the following command and passing the path to the Ballerina home directory using the `--b7a.home` parameter.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21831#discussion_r393220719", "createdAt": "2020-03-16T18:10:54Z", "author": {"login": "pubudu91"}, "path": "examples/grpc-secured-unary/grpc_secured_unary_service_client.out", "diffHunk": "@@ -7,5 +7,5 @@\n # Execute the following command to build the 'client' module.\n $ ballerina build client\n \n-# Run the client using the following command.\n-$ ballerina run target/bin/client.jar\n+# Run the client using the following command and passing Ballerina home path as system property.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d41acf70cde1ac70b7a0aee7bece1136a67350c", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4d41acf70cde1ac70b7a0aee7bece1136a67350c", "committedDate": "2020-03-16T18:11:44Z", "message": "Apply suggestions for security related BBEs\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3806, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}