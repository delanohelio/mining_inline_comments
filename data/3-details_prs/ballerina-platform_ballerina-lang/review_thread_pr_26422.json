{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2NTUwMDMx", "number": 26422, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzoxMjo1M1rOEwGp6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMjozOToxNlrOExAtAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODc2MTM5OnYy", "diffSide": "LEFT", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/declarations/FunctionDefinitionTest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzoxMjo1M1rOHldWow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjoxNzowMlrOHnAFIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA0MDI5MQ==", "bodyText": "Any reason for removing these test cases?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26422#discussion_r509040291", "createdAt": "2020-10-21T07:12:53Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/declarations/FunctionDefinitionTest.java", "diffHunk": "@@ -157,11 +157,6 @@ public void testFunctionWithInvalidExpressionStatement() {\n         testFile(\"func-definition/func_def_source_24.bal\", \"func-definition/func_def_assert_24.json\");\n     }\n \n-    @Test\n-    public void testMissingFunctionKeywordWithQualifiers() {\n-        testFile(\"func-definition/func_def_source_25.bal\", \"func-definition/func_def_assert_25.json\");\n-    }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08f454d29c1915434bd00293fffc6514644af9c2"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA3NDk3MA==", "bodyText": "Now that parsing is independent of qualifiers\npublic isolated transcational foo(int i) returns boolean { }\nis equivalent to\npublic foo(int i) returns boolean { }\nRemoved the test cases(5 tests) which were previously recovered based on the preceding qualifiers with 5a1c5a8", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26422#discussion_r509074970", "createdAt": "2020-10-21T08:10:08Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/declarations/FunctionDefinitionTest.java", "diffHunk": "@@ -157,11 +157,6 @@ public void testFunctionWithInvalidExpressionStatement() {\n         testFile(\"func-definition/func_def_source_24.bal\", \"func-definition/func_def_assert_24.json\");\n     }\n \n-    @Test\n-    public void testMissingFunctionKeywordWithQualifiers() {\n-        testFile(\"func-definition/func_def_source_25.bal\", \"func-definition/func_def_assert_25.json\");\n-    }\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA0MDI5MQ=="}, "originalCommit": {"oid": "08f454d29c1915434bd00293fffc6514644af9c2"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA3ODUyOQ==", "bodyText": "Anyway consider following code snippet.\npublic foo() returns boolean { }\n\npublic foo(int i) returns boolean { }\nRecovery is\npublic  MISSING[function]foo() returns boolean { }\n\n INVALID[public] foo MISSING[error] MISSING[]( INVALID[int] i)  MISSING[;] MISSING[object] INVALID[returns]  INVALID[boolean] { } MISSING[] MISSING[;]\nin the current master.\nIt seems something is wrong with the recovery of functions with parameters\nAn issue created. #26460", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26422#discussion_r509078529", "createdAt": "2020-10-21T08:15:32Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/declarations/FunctionDefinitionTest.java", "diffHunk": "@@ -157,11 +157,6 @@ public void testFunctionWithInvalidExpressionStatement() {\n         testFile(\"func-definition/func_def_source_24.bal\", \"func-definition/func_def_assert_24.json\");\n     }\n \n-    @Test\n-    public void testMissingFunctionKeywordWithQualifiers() {\n-        testFile(\"func-definition/func_def_source_25.bal\", \"func-definition/func_def_assert_25.json\");\n-    }\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA0MDI5MQ=="}, "originalCommit": {"oid": "08f454d29c1915434bd00293fffc6514644af9c2"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE0MDUzOA==", "bodyText": "But I think it's better to keep them since they are valid test cases @SupunS WDYT?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26422#discussion_r509140538", "createdAt": "2020-10-21T09:45:13Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/declarations/FunctionDefinitionTest.java", "diffHunk": "@@ -157,11 +157,6 @@ public void testFunctionWithInvalidExpressionStatement() {\n         testFile(\"func-definition/func_def_source_24.bal\", \"func-definition/func_def_assert_24.json\");\n     }\n \n-    @Test\n-    public void testMissingFunctionKeywordWithQualifiers() {\n-        testFile(\"func-definition/func_def_source_25.bal\", \"func-definition/func_def_assert_25.json\");\n-    }\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA0MDI5MQ=="}, "originalCommit": {"oid": "08f454d29c1915434bd00293fffc6514644af9c2"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY1NzgyNA==", "bodyText": "https://github.com/ballerina-platform/ballerina-lang/blob/70c5342829156da8525211726b1548d2ad018271/compiler/ballerina-parser/src/test/resources/types/func-type/func_type_source_10.bal\nhttps://github.com/ballerina-platform/ballerina-lang/blob/70c5342829156da8525211726b1548d2ad018271/compiler/ballerina-parser/src/test/resources/types/func-type/func_type_source_12.bal\n\nConsider above two test cases. They both same only different is qualifiers.  Also there are invalid tokens in between qualifiers in lot of places and now some of them match with the switch cases in the parsing methods and parser going haywire. Since those test cases no longer test any granular level recovery we don't need to keep them right?\n\nhttps://github.com/ballerina-platform/ballerina-lang/blob/70c5342829156da8525211726b1548d2ad018271/compiler/ballerina-parser/src/test/resources/declarations/isolated-object-methods/isolated_object_method_source_02.bal\nhttps://github.com/ballerina-platform/ballerina-lang/blob/master/compiler/ballerina-parser/src/test/resources/declarations/func-definition/func_def_source_25.bal\n\nAbove two test cases the same and they are broken due to #26460. I think adding one test case when fixing that issue would be sufficient.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26422#discussion_r510657824", "createdAt": "2020-10-23T06:17:02Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/declarations/FunctionDefinitionTest.java", "diffHunk": "@@ -157,11 +157,6 @@ public void testFunctionWithInvalidExpressionStatement() {\n         testFile(\"func-definition/func_def_source_24.bal\", \"func-definition/func_def_assert_24.json\");\n     }\n \n-    @Test\n-    public void testMissingFunctionKeywordWithQualifiers() {\n-        testFile(\"func-definition/func_def_source_25.bal\", \"func-definition/func_def_assert_25.json\");\n-    }\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA0MDI5MQ=="}, "originalCommit": {"oid": "08f454d29c1915434bd00293fffc6514644af9c2"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODIyMzkwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMjowODozMFrOHm5zYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMjowODozMFrOHm5zYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1NDk3Nw==", "bodyText": "Its fine to call this parseModuleVarDecl. The overloaded parameters will indicate this takes qualifiers from outside..", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26422#discussion_r510554977", "createdAt": "2020-10-23T02:08:30Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -739,111 +739,117 @@ private STNode parseImportPrefix() {\n     /**\n      * Parse top level node, given the modifier that precedes it.\n      *\n-     * @param qualifier Qualifier that precedes the top level node\n+     * @param metadata  Metadata that precedes the top level node\n+     * @param publicQualifier Public qualifier that precedes the top level node\n      * @return Parsed node\n      */\n-    private STNode parseTopLevelNode(STNode metadata, STNode qualifier) {\n+    private STNode parseTopLevelNode(STNode metadata, STNode publicQualifier) {\n+        List<STNode> topLevelQualifiers = new ArrayList<>();\n+        return parseTopLevelNode(metadata, publicQualifier, topLevelQualifiers);\n+    }\n+\n+    private STNode parseTopLevelNode(STNode metadata, STNode publicQualifier, List<STNode> qualifiers) {\n         STToken nextToken = peek();\n         switch (nextToken.kind) {\n             case EOF_TOKEN:\n-                reportInvalidQualifier(qualifier);\n                 reportInvalidMetaData(metadata);\n+                reportInvalidQualifier(publicQualifier);\n+                reportInvalidQualifierList(qualifiers);\n                 return null;\n-            case ISOLATED_KEYWORD:\n-            case CLIENT_KEYWORD:\n-                // Note that following top level nodes can have the isolated qualifier.\n-                // funcDef, funcType, classDef, objectType\n-                if (!isFuncDefOrFuncTypeStart()) {\n-                    if (isObjectTypeStart()) {\n-                        return parseModuleVarDecl(metadata, qualifier);\n-                    } else {\n-                        return parseClassDefinition(metadata, qualifier);\n-                    }\n-                }\n-                // Else fall through\n             case FUNCTION_KEYWORD:\n-            case TRANSACTIONAL_KEYWORD:\n                 // Anything starts with a function keyword could be a function definition\n                 // or a module-var-decl with function type desc.\n-                List<STNode> qualifiers = new ArrayList<>();\n-                if (qualifier != null) {\n-                    qualifiers.add(qualifier);\n+                if (publicQualifier != null) {\n+                    qualifiers.add(0, publicQualifier);\n                 }\n                 return parseFuncDefOrFuncTypeDesc(ParserRuleContext.TOP_LEVEL_FUNC_DEF_OR_FUNC_TYPE_DESC, metadata,\n                         qualifiers, false, false);\n             case TYPE_KEYWORD:\n-                return parseModuleTypeDefinition(metadata, getQualifier(qualifier));\n+                reportInvalidQualifierList(qualifiers);\n+                return parseModuleTypeDefinition(metadata, publicQualifier);\n             case CLASS_KEYWORD:\n-            case DISTINCT_KEYWORD:\n-            case READONLY_KEYWORD:\n-                return parseClassDefinition(metadata, getQualifier(qualifier));\n+                return parseClassDefinition(metadata, publicQualifier, qualifiers);\n             case LISTENER_KEYWORD:\n-                return parseListenerDeclaration(metadata, getQualifier(qualifier));\n+                reportInvalidQualifierList(qualifiers);\n+                return parseListenerDeclaration(metadata, publicQualifier);\n             case CONST_KEYWORD:\n-                return parseConstantDeclaration(metadata, getQualifier(qualifier));\n+                reportInvalidQualifierList(qualifiers);\n+                return parseConstantDeclaration(metadata, publicQualifier);\n             case ANNOTATION_KEYWORD:\n+                reportInvalidQualifierList(qualifiers);\n                 STNode constKeyword = STNodeFactory.createEmptyNode();\n-                return parseAnnotationDeclaration(metadata, getQualifier(qualifier), constKeyword);\n+                return parseAnnotationDeclaration(metadata, publicQualifier, constKeyword);\n             case IMPORT_KEYWORD:\n-                reportInvalidQualifier(qualifier);\n                 reportInvalidMetaData(metadata);\n+                reportInvalidQualifier(publicQualifier);\n+                reportInvalidQualifierList(qualifiers);\n                 return parseImportDecl();\n             case XMLNS_KEYWORD:\n-                reportInvalidQualifier(qualifier);\n                 reportInvalidMetaData(metadata);\n+                reportInvalidQualifier(publicQualifier);\n+                reportInvalidQualifierList(qualifiers);\n                 return parseXMLNamespaceDeclaration(true);\n             case FINAL_KEYWORD:\n-                reportInvalidQualifier(qualifier);\n+                reportInvalidQualifier(publicQualifier);\n+                reportInvalidQualifierList(qualifiers);\n                 STNode finalKeyword = parseFinalKeyword();\n                 return parseVariableDecl(metadata, finalKeyword, true);\n             case SERVICE_KEYWORD:\n                 if (isServiceDeclStart(ParserRuleContext.TOP_LEVEL_NODE, 1)) {\n-                    reportInvalidQualifier(qualifier);\n+                    reportInvalidQualifier(publicQualifier);\n+                    reportInvalidQualifierList(qualifiers);\n                     return parseServiceDecl(metadata);\n+                } else {\n+                    reportInvalidQualifierList(qualifiers);\n+                    return parseModuleVarDecl(metadata, publicQualifier);\n                 }\n-                return parseModuleVarDecl(metadata, qualifier);\n             case ENUM_KEYWORD:\n-                return parseEnumDeclaration(metadata, getQualifier(qualifier));\n+                reportInvalidQualifierList(qualifiers);\n+                return parseEnumDeclaration(metadata, publicQualifier);\n             case IDENTIFIER_TOKEN:\n                 // Here we assume that after recovering, we'll never reach here.\n                 // Otherwise the tokenOffset will not be 1.\n                 if (isModuleVarDeclStart(1)) {\n-                    return parseModuleVarDecl(metadata, qualifier);\n+                    reportInvalidQualifierList(qualifiers);\n+                    return parseModuleVarDecl(metadata, publicQualifier);\n                 }\n                 // fall through\n             default:\n+                if (isTopLevelQualifier(nextToken.kind)) {\n+                    // Top level qualifiers are present. Parse them first and then try to re-parse the method.\n+                    parseTopLevelQualifiers(qualifiers);\n+                    return parseTopLevelNode(metadata, publicQualifier, qualifiers);\n+                }\n+\n                 if (isTypeStartingToken(nextToken.kind) && nextToken.kind != SyntaxKind.IDENTIFIER_TOKEN) {\n-                    return parseModuleVarDecl(metadata, qualifier);\n+                    return parseModuleVarDeclWithoutQuals(metadata, publicQualifier, qualifiers);\n                 }\n \n                 STToken token = peek();\n-                Solution solution =\n-                        recover(token, ParserRuleContext.TOP_LEVEL_NODE_WITHOUT_MODIFIER, metadata, qualifier);\n+                Solution solution = recover(token, ParserRuleContext.TOP_LEVEL_NODE_WITHOUT_MODIFIER, metadata,\n+                        publicQualifier, qualifiers);\n \n                 if (solution.action == Action.KEEP) {\n                     // If the solution is {@link Action#KEEP}, that means next immediate token is\n                     // at the correct place, but some token after that is not. There only one such\n                     // cases here, which is the `case IDENTIFIER_TOKEN`. So accept it, and continue.\n-                    return parseModuleVarDecl(metadata, qualifier);\n+                    reportInvalidQualifierList(qualifiers);\n+                    return parseModuleVarDecl(metadata, publicQualifier);\n                 }\n \n-                return parseTopLevelNode(metadata, qualifier);\n+                return parseTopLevelNode(metadata, publicQualifier, qualifiers);\n         }\n-\n     }\n \n-    private boolean isObjectTypeStart() {\n-        return peek(2).kind == SyntaxKind.OBJECT_KEYWORD || peek(3).kind == SyntaxKind.OBJECT_KEYWORD;\n+    private STNode parseModuleVarDecl(STNode metadata, STNode qualifier) {\n+        List<STNode> topLevelQualifiers = new ArrayList<>();\n+        return parseModuleVarDeclWithoutQuals(metadata, qualifier, topLevelQualifiers);\n     }\n \n-    private STNode parseModuleVarDecl(STNode metadata, STNode qualifier) {\n+    private STNode parseModuleVarDeclWithoutQuals(STNode metadata, STNode qualifier, List<STNode> qualifiers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a1c5a8fbc8a489e6aea9c4e4f2a0dc5ac26d14b"}, "originalPosition": 229}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODIyNzM0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMjoxMDozN1rOHm51UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMjoxMDozN1rOHm51UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1NTQ3Mg==", "bodyText": "Inverting the condition can avoid the nesting if's:\nif (isNodeListEmpty(annots)) {\n    return;\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26422#discussion_r510555472", "createdAt": "2020-10-23T02:10:37Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -859,21 +865,122 @@ private void reportInvalidMetaData(STNode metadata) {\n         }\n     }\n \n-    /**\n-     * Parse access modifiers.\n-     *\n-     * @return Parsed node\n-     */\n-    private STNode parseQualifier() {\n-        STToken token = peek();\n-        if (token.kind == SyntaxKind.PUBLIC_KEYWORD) {\n-            return consume();\n-        } else {\n-            recover(token, ParserRuleContext.PUBLIC_KEYWORD);\n-            return parseQualifier();\n+    private void reportInvalidQualifierList(List<STNode> qualifiers) {\n+        for (STNode qual : qualifiers) {\n+            addInvalidNodeToNextToken(qual, DiagnosticErrorCode.ERROR_QUALIFIER_NOT_ALLOWED, ((STToken) qual).text());\n+        }\n+    }\n+\n+    private void reportInvalidStatementAnnots(STNode annots, List<STNode> qualifiers) {\n+        if (!isNodeListEmpty(annots)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a1c5a8fbc8a489e6aea9c4e4f2a0dc5ac26d14b"}, "originalPosition": 264}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODIzNjgyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMjoxNjozN1rOHm56lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMjoxNjozN1rOHm56lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1NjgyMQ==", "bodyText": "Inverting the condition would be better", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26422#discussion_r510556821", "createdAt": "2020-10-23T02:16:37Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -899,10 +1006,70 @@ private STNode parseFuncDefinition(STNode metadata, boolean isObjectMember, STNo\n      */\n     private STNode parseFuncDefOrFuncTypeDesc(ParserRuleContext context, STNode metadata, List<STNode> qualifiers,\n                                               boolean isObjectMember, boolean isObjectTypeDesc) {\n-        STNode qualifierList = parseFunctionQualifiers(context, qualifiers);\n+        STNode qualifierList;\n+        // TODO: remove validation at this level when syncing to service-typing branch\n+        if (context == ParserRuleContext.TOP_LEVEL_FUNC_DEF_OR_FUNC_TYPE_DESC) {\n+            qualifierList = createFuncDefNodeList(qualifiers);\n+        } else {\n+            qualifierList = createMethodQualNodeList(qualifiers);\n+        }\n         return parseFuncDefOrFuncTypeDesc(metadata, qualifierList, isObjectMember, isObjectTypeDesc);\n     }\n \n+    private STNode createFuncDefNodeList(List<STNode> qualifierList) {\n+        // This method is temporary. Will be removed when syncing to service-typing branch\n+        // Validate qualifiers and create a STNodeList\n+        for (int i = 0; i < qualifierList.size();) {\n+            STNode qualifier = qualifierList.get(i);\n+            if (qualifier.kind != SyntaxKind.ISOLATED_KEYWORD &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a1c5a8fbc8a489e6aea9c4e4f2a0dc5ac26d14b"}, "originalPosition": 396}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODI0OTE0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMjoyNDoyN1rOHm6BsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMjoyNjozMFrOHm6DtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1ODY0MA==", "bodyText": "What if we move this, entirely before the switch-case, and only call parseTypeDescQualifiers(qualifiers);, (without the if-check and without the re-parse)?\ninside parseTypeDescQualifiers(qualifiers) we can have a while loop, rather than the do-while.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26422#discussion_r510558640", "createdAt": "2020-10-23T02:24:27Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1690,93 +1863,85 @@ private STNode validateForUsageOfVar(STNode typeDesc) {\n     /**\n      * <p>\n      * Parse a type descriptor, given the next token kind.\n+     * <br/>\n+     * Note that this method itself is capable of parsing type descriptor qualifiers\n+     * if they are not already parsed before coming here.\n      * </p>\n-     * If the preceding token is <code>?</code> then it is an optional type descriptor\n      *\n+     * @param qualifiers          Preceding type descriptor qualifiers\n      * @param context             Current context\n-     * @param isInConditionalExpr\n+     * @param isInConditionalExpr Whether in the conditional expression or not\n      * @return Parsed node\n      */\n-    private STNode parseTypeDescriptorInternal(ParserRuleContext context, boolean isInConditionalExpr) {\n+    private STNode parseTypeDescriptorInternal(List<STNode> qualifiers, ParserRuleContext context,\n+                                               boolean isInConditionalExpr) {\n         STToken nextToken = peek();\n         switch (nextToken.kind) {\n             case IDENTIFIER_TOKEN:\n+                reportInvalidQualifierList(qualifiers);\n                 return parseTypeReference(isInConditionalExpr);\n             case RECORD_KEYWORD:\n-                // Record type descriptor\n+                reportInvalidQualifierList(qualifiers);\n                 return parseRecordTypeDescriptor();\n-            case READONLY_KEYWORD:\n-                STToken nextNextToken = getNextNextToken(nextToken.kind);\n-                SyntaxKind nextNextTokenKind = nextNextToken.kind;\n-                if (nextNextTokenKind != SyntaxKind.OBJECT_KEYWORD &&\n-                        nextNextTokenKind != SyntaxKind.ABSTRACT_KEYWORD &&\n-                        nextNextTokenKind != SyntaxKind.CLIENT_KEYWORD) {\n-                    return parseSimpleTypeDescriptor();\n-                }\n-                // Allow `readonly` to be parsed as a object type qualifier and then log an error\n-                // Fall through\n             case OBJECT_KEYWORD:\n-            case ABSTRACT_KEYWORD: // Allow `abstract` to be parsed as an object type qualifier and then log an error\n-            case CLIENT_KEYWORD:\n-                return parseObjectTypeDescriptor();\n+                return parseObjectTypeDescriptor(qualifiers);\n             case OPEN_PAREN_TOKEN:\n+                reportInvalidQualifierList(qualifiers);\n                 return parseNilOrParenthesisedTypeDesc();\n             case MAP_KEYWORD: // map type desc\n             case FUTURE_KEYWORD: // future type desc\n+                reportInvalidQualifierList(qualifiers);\n                 return parseParameterizedTypeDescriptor();\n-            case TYPEDESC_KEYWORD: // typedesc type desc\n+            case TYPEDESC_KEYWORD:\n+                reportInvalidQualifierList(qualifiers);\n                 return parseTypedescTypeDescriptor();\n-            case ERROR_KEYWORD: // error type descriptor\n+            case ERROR_KEYWORD:\n+                reportInvalidQualifierList(qualifiers);\n                 return parseErrorTypeDescriptor();\n-            case XML_KEYWORD: // typedesc type desc\n+            case XML_KEYWORD:\n+                reportInvalidQualifierList(qualifiers);\n                 return parseXmlTypeDescriptor();\n-            case STREAM_KEYWORD: // stream type desc\n+            case STREAM_KEYWORD:\n+                reportInvalidQualifierList(qualifiers);\n                 return parseStreamTypeDescriptor();\n-            case TABLE_KEYWORD: // table type desc\n+            case TABLE_KEYWORD:\n+                reportInvalidQualifierList(qualifiers);\n                 return parseTableTypeDescriptor();\n             case FUNCTION_KEYWORD:\n-            case TRANSACTIONAL_KEYWORD:\n-                return parseFunctionTypeDesc();\n+                return parseFunctionTypeDesc(qualifiers);\n             case OPEN_BRACKET_TOKEN:\n+                reportInvalidQualifierList(qualifiers);\n                 return parseTupleTypeDesc();\n             case DISTINCT_KEYWORD:\n-                return parseDistinctTypeDesc(context);\n-            case ISOLATED_KEYWORD:\n-                if (isFuncDefOrFuncTypeStart()) {\n-                    return parseFunctionTypeDesc();\n-                } else {\n-                    return parseObjectTypeDescriptor();\n-                }\n+                reportInvalidQualifierList(qualifiers);\n+                STNode distinctKeyword = consume();\n+                return parseDistinctTypeDesc(distinctKeyword, context);\n             default:\n+                if (isTypeDescQualifier(nextToken.kind)) {\n+                    // Type desc qualifiers are present. Parse them first and then try to re-parse the method.\n+                    parseTypeDescQualifiers(qualifiers);\n+                    return parseTypeDescriptorInternal(qualifiers, context, isInConditionalExpr);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a1c5a8fbc8a489e6aea9c4e4f2a0dc5ac26d14b"}, "originalPosition": 603}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1OTE1Ng==", "bodyText": "Can do the same for top-level nodes as well", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26422#discussion_r510559156", "createdAt": "2020-10-23T02:26:30Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1690,93 +1863,85 @@ private STNode validateForUsageOfVar(STNode typeDesc) {\n     /**\n      * <p>\n      * Parse a type descriptor, given the next token kind.\n+     * <br/>\n+     * Note that this method itself is capable of parsing type descriptor qualifiers\n+     * if they are not already parsed before coming here.\n      * </p>\n-     * If the preceding token is <code>?</code> then it is an optional type descriptor\n      *\n+     * @param qualifiers          Preceding type descriptor qualifiers\n      * @param context             Current context\n-     * @param isInConditionalExpr\n+     * @param isInConditionalExpr Whether in the conditional expression or not\n      * @return Parsed node\n      */\n-    private STNode parseTypeDescriptorInternal(ParserRuleContext context, boolean isInConditionalExpr) {\n+    private STNode parseTypeDescriptorInternal(List<STNode> qualifiers, ParserRuleContext context,\n+                                               boolean isInConditionalExpr) {\n         STToken nextToken = peek();\n         switch (nextToken.kind) {\n             case IDENTIFIER_TOKEN:\n+                reportInvalidQualifierList(qualifiers);\n                 return parseTypeReference(isInConditionalExpr);\n             case RECORD_KEYWORD:\n-                // Record type descriptor\n+                reportInvalidQualifierList(qualifiers);\n                 return parseRecordTypeDescriptor();\n-            case READONLY_KEYWORD:\n-                STToken nextNextToken = getNextNextToken(nextToken.kind);\n-                SyntaxKind nextNextTokenKind = nextNextToken.kind;\n-                if (nextNextTokenKind != SyntaxKind.OBJECT_KEYWORD &&\n-                        nextNextTokenKind != SyntaxKind.ABSTRACT_KEYWORD &&\n-                        nextNextTokenKind != SyntaxKind.CLIENT_KEYWORD) {\n-                    return parseSimpleTypeDescriptor();\n-                }\n-                // Allow `readonly` to be parsed as a object type qualifier and then log an error\n-                // Fall through\n             case OBJECT_KEYWORD:\n-            case ABSTRACT_KEYWORD: // Allow `abstract` to be parsed as an object type qualifier and then log an error\n-            case CLIENT_KEYWORD:\n-                return parseObjectTypeDescriptor();\n+                return parseObjectTypeDescriptor(qualifiers);\n             case OPEN_PAREN_TOKEN:\n+                reportInvalidQualifierList(qualifiers);\n                 return parseNilOrParenthesisedTypeDesc();\n             case MAP_KEYWORD: // map type desc\n             case FUTURE_KEYWORD: // future type desc\n+                reportInvalidQualifierList(qualifiers);\n                 return parseParameterizedTypeDescriptor();\n-            case TYPEDESC_KEYWORD: // typedesc type desc\n+            case TYPEDESC_KEYWORD:\n+                reportInvalidQualifierList(qualifiers);\n                 return parseTypedescTypeDescriptor();\n-            case ERROR_KEYWORD: // error type descriptor\n+            case ERROR_KEYWORD:\n+                reportInvalidQualifierList(qualifiers);\n                 return parseErrorTypeDescriptor();\n-            case XML_KEYWORD: // typedesc type desc\n+            case XML_KEYWORD:\n+                reportInvalidQualifierList(qualifiers);\n                 return parseXmlTypeDescriptor();\n-            case STREAM_KEYWORD: // stream type desc\n+            case STREAM_KEYWORD:\n+                reportInvalidQualifierList(qualifiers);\n                 return parseStreamTypeDescriptor();\n-            case TABLE_KEYWORD: // table type desc\n+            case TABLE_KEYWORD:\n+                reportInvalidQualifierList(qualifiers);\n                 return parseTableTypeDescriptor();\n             case FUNCTION_KEYWORD:\n-            case TRANSACTIONAL_KEYWORD:\n-                return parseFunctionTypeDesc();\n+                return parseFunctionTypeDesc(qualifiers);\n             case OPEN_BRACKET_TOKEN:\n+                reportInvalidQualifierList(qualifiers);\n                 return parseTupleTypeDesc();\n             case DISTINCT_KEYWORD:\n-                return parseDistinctTypeDesc(context);\n-            case ISOLATED_KEYWORD:\n-                if (isFuncDefOrFuncTypeStart()) {\n-                    return parseFunctionTypeDesc();\n-                } else {\n-                    return parseObjectTypeDescriptor();\n-                }\n+                reportInvalidQualifierList(qualifiers);\n+                STNode distinctKeyword = consume();\n+                return parseDistinctTypeDesc(distinctKeyword, context);\n             default:\n+                if (isTypeDescQualifier(nextToken.kind)) {\n+                    // Type desc qualifiers are present. Parse them first and then try to re-parse the method.\n+                    parseTypeDescQualifiers(qualifiers);\n+                    return parseTypeDescriptorInternal(qualifiers, context, isInConditionalExpr);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1ODY0MA=="}, "originalCommit": {"oid": "5a1c5a8fbc8a489e6aea9c4e4f2a0dc5ac26d14b"}, "originalPosition": 603}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODI1NTk3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMjoyODo1MFrOHm6FrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMjoyODo1MFrOHm6FrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1OTY2MA==", "bodyText": "Invert the condition. Let's do the early exit in all places", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26422#discussion_r510559660", "createdAt": "2020-10-23T02:28:50Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -2490,50 +2646,90 @@ private STNode parseClassDefinition(STNode metadata, STNode qualifier) {\n                 className, openBrace, classMembers, closeBrace);\n     }\n \n+    private boolean isClassTypeQual(SyntaxKind tokenKind) {\n+        switch (tokenKind) {\n+            case CLIENT_KEYWORD:\n+            case READONLY_KEYWORD:\n+            case DISTINCT_KEYWORD:\n+            case ISOLATED_KEYWORD:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private boolean isObjectTypeQual(SyntaxKind tokenKind) {\n+        switch (tokenKind) {\n+            case ISOLATED_KEYWORD:\n+            case CLIENT_KEYWORD:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n     /**\n-     * Parse class type qualifiers.\n+     * <p>\n+     * Validate and create class type qualifier node list.\n+     * </p>\n+     * <code> class-type-quals := (distinct | client | readonly | isolated)*</code>\n      *\n+     * @param qualifierList Qualifier list to be validated\n      * @return Parsed node\n      */\n-    private STNode parseClassTypeQualifiers() {\n-        List<STNode> qualifiers = new ArrayList<>();\n-        STNode qualifier;\n-        for (int i = 0; i < 4; i++) {\n-            STNode nextToken = peek();\n-            if (isNodeWithSyntaxKindInList(qualifiers, nextToken.kind)) {\n-                qualifier = consume();\n-                updateLastNodeInListOrAddInvalidNodeToNextToken(qualifiers, nextToken,\n-                        DiagnosticErrorCode.ERROR_DUPLICATE_QUALIFIER, ((STToken) qualifier).text());\n+    private STNode createClassTypeQualNodeList(List<STNode> qualifierList) {\n+        // Validate qualifiers and create a STNodeList\n+        for (int i = 0; i < qualifierList.size();) {\n+            STNode qualifier = qualifierList.get(i);\n+            if (!isClassTypeQual(qualifier.kind)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a1c5a8fbc8a489e6aea9c4e4f2a0dc5ac26d14b"}, "originalPosition": 736}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODI1OTg5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMjozMDo1NlrOHm6Hyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMjozMDo1NlrOHm6Hyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU2MDIwMw==", "bodyText": "same here", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26422#discussion_r510560203", "createdAt": "2020-10-23T02:30:56Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -2490,50 +2646,90 @@ private STNode parseClassDefinition(STNode metadata, STNode qualifier) {\n                 className, openBrace, classMembers, closeBrace);\n     }\n \n+    private boolean isClassTypeQual(SyntaxKind tokenKind) {\n+        switch (tokenKind) {\n+            case CLIENT_KEYWORD:\n+            case READONLY_KEYWORD:\n+            case DISTINCT_KEYWORD:\n+            case ISOLATED_KEYWORD:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n+    private boolean isObjectTypeQual(SyntaxKind tokenKind) {\n+        switch (tokenKind) {\n+            case ISOLATED_KEYWORD:\n+            case CLIENT_KEYWORD:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }\n+\n     /**\n-     * Parse class type qualifiers.\n+     * <p>\n+     * Validate and create class type qualifier node list.\n+     * </p>\n+     * <code> class-type-quals := (distinct | client | readonly | isolated)*</code>\n      *\n+     * @param qualifierList Qualifier list to be validated\n      * @return Parsed node\n      */\n-    private STNode parseClassTypeQualifiers() {\n-        List<STNode> qualifiers = new ArrayList<>();\n-        STNode qualifier;\n-        for (int i = 0; i < 4; i++) {\n-            STNode nextToken = peek();\n-            if (isNodeWithSyntaxKindInList(qualifiers, nextToken.kind)) {\n-                qualifier = consume();\n-                updateLastNodeInListOrAddInvalidNodeToNextToken(qualifiers, nextToken,\n-                        DiagnosticErrorCode.ERROR_DUPLICATE_QUALIFIER, ((STToken) qualifier).text());\n+    private STNode createClassTypeQualNodeList(List<STNode> qualifierList) {\n+        // Validate qualifiers and create a STNodeList\n+        for (int i = 0; i < qualifierList.size();) {\n+            STNode qualifier = qualifierList.get(i);\n+            if (!isClassTypeQual(qualifier.kind)) {\n+                qualifierList.remove(i);\n+                if (qualifierList.size() == i) {\n+                    addInvalidNodeToNextToken(qualifier, DiagnosticErrorCode.ERROR_QUALIFIER_NOT_ALLOWED,\n+                            ((STToken) qualifier).text());\n+                } else {\n+                    STNode nextQual = qualifierList.remove(i);\n+                    nextQual = SyntaxErrors.cloneWithLeadingInvalidNodeMinutiae(nextQual, qualifier,\n+                            DiagnosticErrorCode.ERROR_QUALIFIER_NOT_ALLOWED, ((STToken) qualifier).text());\n+                    qualifierList.add(nextQual);\n+                }\n                 continue;\n             }\n-\n-            qualifier = parseSingleClassTypeQualifier();\n-            if (qualifier == null) {\n-                return STNodeFactory.createNodeList(qualifiers);\n-            }\n-\n-            qualifiers.add(qualifier);\n+            i++;\n         }\n \n-        return STNodeFactory.createNodeList(qualifiers);\n+        return STNodeFactory.createNodeList(qualifierList);\n     }\n \n-    private STNode parseSingleClassTypeQualifier() {\n-        STToken nextToken = peek();\n-        switch (nextToken.kind) {\n-            case CLIENT_KEYWORD:\n-            case READONLY_KEYWORD:\n-            case DISTINCT_KEYWORD:\n-            case ISOLATED_KEYWORD:\n-                return consume();\n-            case CLASS_KEYWORD:\n-            case EOF_TOKEN:\n-                // null indicates the end of qualifiers\n-                return null;\n-            default:\n-                recover(nextToken, ParserRuleContext.MODULE_CLASS_DEFINITION_START);\n-                return parseSingleClassTypeQualifier();\n+    /**\n+     * <p>\n+     * Validate and create object type qualifier node list.\n+     * </p>\n+     * <code> object-type-quals := (client | isolated)*</code>\n+     *\n+     * @param qualifierList Qualifier list to be validated\n+     * @return Parsed node\n+     */\n+    private STNode createObjectTypeQualNodeList(List<STNode> qualifierList) {\n+        // Validate qualifiers and create a STNodeList\n+        for (int i = 0; i < qualifierList.size();) {\n+            STNode qualifier = qualifierList.get(i);\n+            if (!isObjectTypeQual(qualifier.kind)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a1c5a8fbc8a489e6aea9c4e4f2a0dc5ac26d14b"}, "originalPosition": 791}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODI3MjAzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMjozOToxNlrOHm6O5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMjozOToxNlrOHm6O5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU2MjAyMw==", "bodyText": "Better to extract this logic inside the 'if-condition' to a separate method, something like isValidMethodQualifier", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26422#discussion_r510562023", "createdAt": "2020-10-23T02:39:16Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -899,10 +1006,70 @@ private STNode parseFuncDefinition(STNode metadata, boolean isObjectMember, STNo\n      */\n     private STNode parseFuncDefOrFuncTypeDesc(ParserRuleContext context, STNode metadata, List<STNode> qualifiers,\n                                               boolean isObjectMember, boolean isObjectTypeDesc) {\n-        STNode qualifierList = parseFunctionQualifiers(context, qualifiers);\n+        STNode qualifierList;\n+        // TODO: remove validation at this level when syncing to service-typing branch\n+        if (context == ParserRuleContext.TOP_LEVEL_FUNC_DEF_OR_FUNC_TYPE_DESC) {\n+            qualifierList = createFuncDefNodeList(qualifiers);\n+        } else {\n+            qualifierList = createMethodQualNodeList(qualifiers);\n+        }\n         return parseFuncDefOrFuncTypeDesc(metadata, qualifierList, isObjectMember, isObjectTypeDesc);\n     }\n \n+    private STNode createFuncDefNodeList(List<STNode> qualifierList) {\n+        // This method is temporary. Will be removed when syncing to service-typing branch\n+        // Validate qualifiers and create a STNodeList\n+        for (int i = 0; i < qualifierList.size();) {\n+            STNode qualifier = qualifierList.get(i);\n+            if (qualifier.kind != SyntaxKind.ISOLATED_KEYWORD &&\n+                    qualifier.kind != SyntaxKind.TRANSACTIONAL_KEYWORD &&\n+                    qualifier.kind != SyntaxKind.PUBLIC_KEYWORD) {\n+                qualifierList.remove(i);\n+                if (qualifierList.size() == i) {\n+                    addInvalidNodeToNextToken(qualifier, DiagnosticErrorCode.ERROR_QUALIFIER_NOT_ALLOWED,\n+                            ((STToken) qualifier).text());\n+                } else {\n+                    STNode nextQual = qualifierList.remove(i);\n+                    nextQual = SyntaxErrors.cloneWithLeadingInvalidNodeMinutiae(nextQual, qualifier,\n+                            DiagnosticErrorCode.ERROR_QUALIFIER_NOT_ALLOWED, ((STToken) qualifier).text());\n+                    qualifierList.add(nextQual);\n+                }\n+                continue;\n+            }\n+            i++;\n+        }\n+\n+        return STNodeFactory.createNodeList(qualifierList);\n+    }\n+\n+    private STNode createMethodQualNodeList(List<STNode> qualifierList) {\n+        // This method is temporary. Will be removed when syncing to service-typing branch\n+        // Validate qualifiers and create a STNodeList\n+        for (int i = 0; i < qualifierList.size();) {\n+            STNode qualifier = qualifierList.get(i);\n+            if (qualifier.kind != SyntaxKind.ISOLATED_KEYWORD &&\n+                    qualifier.kind != SyntaxKind.TRANSACTIONAL_KEYWORD &&\n+                    qualifier.kind != SyntaxKind.REMOTE_KEYWORD &&\n+                    qualifier.kind != SyntaxKind.PUBLIC_KEYWORD &&\n+                    qualifier.kind != SyntaxKind.PRIVATE_KEYWORD) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a1c5a8fbc8a489e6aea9c4e4f2a0dc5ac26d14b"}, "originalPosition": 426}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4785, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}