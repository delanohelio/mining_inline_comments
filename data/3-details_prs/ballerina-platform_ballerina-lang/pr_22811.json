{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NTQxNzUz", "number": 22811, "title": "Add lock statement suport and block statement support for incremental parser", "bodyText": "Add block statement and lock statement support for incremental parser.\nlock-stmt := lock block-stmt\nsequence-stmt := statement*\nblock-stmt := { sequence-stmt }\nhttps://ballerina.io/spec/lang/2020R1/#lock-stmt\ncloses: #22486\ncloses: #22780\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-04-21T09:06:37Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22811", "merged": true, "mergeCommit": {"oid": "b11d0db58a3fe54a1c6f0828be452f9c56651d0b"}, "closed": true, "closedAt": "2020-04-21T14:04:10Z", "author": {"login": "m36dot"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZZvk_gH2gAyNDA2NTQxNzUzOmM4ZGJhYTRmNzBjN2EwYzk1NDU5YTYzOTUyZjNiNzUyMDUyNmEyMzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZ0NiFAFqTM5NzM2MjgyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c8dbaa4f70c7a0c95459a63952f3b7520526a234", "author": {"user": {"login": "m36dot", "name": "Saif Abdul Cassim"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c8dbaa4f70c7a0c95459a63952f3b7520526a234", "committedDate": "2020-04-20T07:13:47Z", "message": "Add LockStatement Node"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "387c076947095ed8b1e830a5b7de53345b449a5b", "author": {"user": {"login": "m36dot", "name": "Saif Abdul Cassim"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/387c076947095ed8b1e830a5b7de53345b449a5b", "committedDate": "2020-04-20T08:58:45Z", "message": "Add block statement and lock statement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5d0cc3c24d4b69b12dfbbd0e258b323199a41ac", "author": {"user": {"login": "m36dot", "name": "Saif Abdul Cassim"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b5d0cc3c24d4b69b12dfbbd0e258b323199a41ac", "committedDate": "2020-04-21T08:40:36Z", "message": "Add test for lock and block statements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf40726a89f043392836a6af6c2afdf6facbabdc", "author": {"user": {"login": "m36dot", "name": "Saif Abdul Cassim"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cf40726a89f043392836a6af6c2afdf6facbabdc", "committedDate": "2020-04-21T09:00:39Z", "message": "Fix merge conflict"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3Mjc0NTkz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22811#pullrequestreview-397274593", "createdAt": "2020-04-21T12:22:09Z", "commit": {"oid": "cf40726a89f043392836a6af6c2afdf6facbabdc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjoyMjoxMFrOGJCyIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjozMzoxNFrOGJDPhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzNTk2OQ==", "bodyText": "what about block stmt?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22811#discussion_r412135969", "createdAt": "2020-04-21T12:22:10Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -72,7 +72,7 @@\n             ParserRuleContext.WHILE_BLOCK, ParserRuleContext.CALL_STMT, ParserRuleContext.PANIC_STMT,\n             ParserRuleContext.CONTINUE_STATEMENT, ParserRuleContext.BREAK_STATEMENT, ParserRuleContext.RETURN_STMT,\n             ParserRuleContext.COMPOUND_ASSIGNMENT_STMT, ParserRuleContext.LOCAL_TYPE_DEFINITION_STMT,\n-            ParserRuleContext.EXPRESSION_STATEMENT };\n+            ParserRuleContext.EXPRESSION_STATEMENT, ParserRuleContext.LOCK_STMT };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf40726a89f043392836a6af6c2afdf6facbabdc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzOTI2MA==", "bodyText": "This looks like a negative test case, but in the positive tests section?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22811#discussion_r412139260", "createdAt": "2020-04-21T12:26:53Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/BlockStatement.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.parser.test.syntax.statements;\n+\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test parsing object type definitions.\n+ */\n+public class BlockStatement extends AbstractStatementTest {\n+\n+    // Valid syntax tests\n+\n+    @Test\n+    public void testComplexBlockStmt() {\n+        testFile(\"block-stmt/block_stmt_source_01.bal\",\n+        \"block-stmt/block_stmt_assert_01.json\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf40726a89f043392836a6af6c2afdf6facbabdc"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE0MTA0Ng==", "bodyText": "This is a positive test case under recovery test section?\nPlease check others as well, and lets re-arrange the stuff", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22811#discussion_r412141046", "createdAt": "2020-04-21T12:29:35Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/BlockStatement.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.parser.test.syntax.statements;\n+\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test parsing object type definitions.\n+ */\n+public class BlockStatement extends AbstractStatementTest {\n+\n+    // Valid syntax tests\n+\n+    @Test\n+    public void testComplexBlockStmt() {\n+        testFile(\"block-stmt/block_stmt_source_01.bal\",\n+        \"block-stmt/block_stmt_assert_01.json\");\n+    }\n+\n+    @Test\n+    public void testEmptyBlockStmt() {\n+        testFile(\"block-stmt/block_stmt_source_02.bal\",\n+        \"block-stmt/block_stmt_assert_02.json\");\n+    }\n+\n+    @Test\n+    public void testBlockStmtWithFieldsOnly() {\n+        testFile(\"block-stmt/block_stmt_source_03.bal\",\n+        \"block-stmt/block_stmt_assert_03.json\");\n+    }\n+\n+    // Recovery tests\n+\n+    @Test\n+    public void testBlockStmtWithExtraTokens() {\n+        testFile(\"block-stmt/block_stmt_source_04.bal\",\n+        \"block-stmt/block_stmt_assert_04.json\");\n+    }\n+\n+    @Test\n+    public void testBlockStmtWithMissingEqual() {\n+        testFile(\"block-stmt/block_stmt_source_05.bal\",\n+        \"block-stmt/block_stmt_assert_05.json\");\n+    }\n+\n+    @Test\n+    public void testNestedObjectRecovery() {\n+        testFile(\"block-stmt/block_stmt_source_06.bal\",\n+        \"block-stmt/block_stmt_assert_06.json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf40726a89f043392836a6af6c2afdf6facbabdc"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE0MTc3OQ==", "bodyText": "Any test for missing-closing parenthesis, etc?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22811#discussion_r412141779", "createdAt": "2020-04-21T12:30:44Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/BlockStatement.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.parser.test.syntax.statements;\n+\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test parsing object type definitions.\n+ */\n+public class BlockStatement extends AbstractStatementTest {\n+\n+    // Valid syntax tests\n+\n+    @Test\n+    public void testComplexBlockStmt() {\n+        testFile(\"block-stmt/block_stmt_source_01.bal\",\n+        \"block-stmt/block_stmt_assert_01.json\");\n+    }\n+\n+    @Test\n+    public void testEmptyBlockStmt() {\n+        testFile(\"block-stmt/block_stmt_source_02.bal\",\n+        \"block-stmt/block_stmt_assert_02.json\");\n+    }\n+\n+    @Test\n+    public void testBlockStmtWithFieldsOnly() {\n+        testFile(\"block-stmt/block_stmt_source_03.bal\",\n+        \"block-stmt/block_stmt_assert_03.json\");\n+    }\n+\n+    // Recovery tests\n+\n+    @Test\n+    public void testBlockStmtWithExtraTokens() {\n+        testFile(\"block-stmt/block_stmt_source_04.bal\",\n+        \"block-stmt/block_stmt_assert_04.json\");\n+    }\n+\n+    @Test\n+    public void testBlockStmtWithMissingEqual() {\n+        testFile(\"block-stmt/block_stmt_source_05.bal\",\n+        \"block-stmt/block_stmt_assert_05.json\");\n+    }\n+\n+    @Test\n+    public void testNestedObjectRecovery() {\n+        testFile(\"block-stmt/block_stmt_source_06.bal\",\n+        \"block-stmt/block_stmt_assert_06.json\");\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf40726a89f043392836a6af6c2afdf6facbabdc"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE0MzQ5NA==", "bodyText": "Same comments I added to the block-stmt tests, applies to here as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22811#discussion_r412143494", "createdAt": "2020-04-21T12:33:14Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/statements/LockStatement.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.parser.test.syntax.statements;\n+\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test parsing object type definitions.\n+ */\n+public class LockStatement extends AbstractStatementTest {\n+\n+    // Valid syntax tests\n+\n+   @Test\n+    public void testComplexLockStmt() {\n+        testFile(\"lock-stmt/lock_stmt_source_01.bal\",\n+        \"lock-stmt/lock_stmt_assert_01.json\");\n+    }\n+\n+    @Test\n+    public void testEmptyLockStmt() {\n+        testFile(\"lock-stmt/lock_stmt_source_02.bal\",\n+        \"lock-stmt/lock_stmt_assert_02.json\");\n+    }\n+\n+    @Test\n+    public void testLockStmtWithFieldsOnly() {\n+        testFile(\"lock-stmt/lock_stmt_source_03.bal\",\n+        \"lock-stmt/lock_stmt_assert_03.json\");\n+    }\n+\n+    // Recovery tests\n+\n+    @Test\n+    public void testLockStmtWithExtraTokens() {\n+        testFile(\"lock-stmt/lock_stmt_source_04.bal\",\n+        \"lock-stmt/lock_stmt_assert_04.json\");\n+    }\n+\n+    @Test\n+    public void testLockStmtWithMissingEqual() {\n+        testFile(\"lock-stmt/lock_stmt_source_05.bal\",\n+        \"lock-stmt/lock_stmt_assert_05.json\");\n+    }\n+\n+    @Test\n+    public void testNestedObjectRecovery() {\n+        testFile(\"lock-stmt/lock_stmt_source_06.bal\",\n+        \"lock-stmt/lock_stmt_assert_06.json\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf40726a89f043392836a6af6c2afdf6facbabdc"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11c357f07d15e259434300f39dfa29323c1f8e2f", "author": {"user": {"login": "m36dot", "name": "Saif Abdul Cassim"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/11c357f07d15e259434300f39dfa29323c1f8e2f", "committedDate": "2020-04-21T12:54:09Z", "message": "Fix test cases and statement context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "165074459f99ec5279d1d48ed2edee2af1e6fddb", "author": {"user": {"login": "m36dot", "name": "Saif Abdul Cassim"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/165074459f99ec5279d1d48ed2edee2af1e6fddb", "committedDate": "2020-04-21T13:02:22Z", "message": "Add misisng Brace test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MzYyODI3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22811#pullrequestreview-397362827", "createdAt": "2020-04-21T14:04:02Z", "commit": {"oid": "165074459f99ec5279d1d48ed2edee2af1e6fddb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3598, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}