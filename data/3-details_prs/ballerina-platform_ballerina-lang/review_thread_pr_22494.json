{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5NzYwNzg2", "number": 22494, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMzoyNDowMFrODv0YxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNDoxMzo1NlrOD34f3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDY3OTczOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMzoyNDowMFrOGCdrPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNTo1MDo1OFrOGJkgsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzNjU0Mw==", "bodyText": "I think we can refactor this method a bit.\nIn L779 and L782 IMO we can call isAssignable instead of isArrayTypesAssignable.\nAFAICT we can then change the first parameter of this method to a BArrayType (we'll probably have to deprecate this and introduce a new method). This'll reduce the number of specific checks and reuse the isAssignable logic, which has been tested quite a lot, more.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r405236543", "createdAt": "2020-04-08T03:24:00Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -784,18 +784,19 @@ public boolean isArrayTypesAssignable(BType source, BType target, Set<TypePair>\n         } else if (source.tag == TypeTags.ARRAY) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8585dc433b22363195edb73af11770c8963a40f6"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQzODgyNw==", "bodyText": "Sorry, I think I don't get this clearly?\nThe isArrayTypesAssignable is getting called by isAssignable logic anyway link.\nIs there a point going for all the checks in isAssignable when we know eventually it will call isArrayTypesAssignable function anyway?\nAnd changing the first parameter to BArrayType makes this specific right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r405438827", "createdAt": "2020-04-08T10:59:21Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -784,18 +784,19 @@ public boolean isArrayTypesAssignable(BType source, BType target, Set<TypePair>\n         } else if (source.tag == TypeTags.ARRAY) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzNjU0Mw=="}, "originalCommit": {"oid": "8585dc433b22363195edb73af11770c8963a40f6"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ0OTk0Ng==", "bodyText": "Is there a point going for all the checks in isAssignable when we know eventually it will call isArrayTypesAssignable function anyway?\n\nL779 and L782 check assignability for the element types of the first level of arrays. And the element types may or may not be array types, so we can't say for sure it'll be calling isArrayTypesAssignable.\nConsider\nstring[] s = [];\n(string|int)[] t = s;\nFor (string|int)[] t = s;, isArrayTypesAssignable gets invoked first, which then at L779 calls isArrayTypesAssignable again with source string and target (string|int) which eventually ends up calling isAssignable like in L807. Instead, we can directly call  isAssignable to check assignability of element types.\n\nAnd changing the first parameter to BArrayType makes this specific right?\n\nIMO, the name isArrayTypesAssignable itself has already made it specific. :) This IS a specific check right?\nBasically we call this method only when the source type is an array, to check if it is assignable to a specific type.\nSo rhsType is always an array.\n\nif lhsType is also an array - return isAssignable(rhsElemType, lhsElemType)\nif lhsType is a union - return true if for at least one member isArrayTypesAssignable is true\nif lhsType is json - return isAssignable(rhsElemType, lhsType)\nif lhsType is anydata - return rhsType.isAnydata()\nif lhsType is any - return rhsElemType.tag != TypeTags.ERROR", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r405449946", "createdAt": "2020-04-08T11:21:54Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -784,18 +784,19 @@ public boolean isArrayTypesAssignable(BType source, BType target, Set<TypePair>\n         } else if (source.tag == TypeTags.ARRAY) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzNjU0Mw=="}, "originalCommit": {"oid": "8585dc433b22363195edb73af11770c8963a40f6"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY4ODU2Mg==", "bodyText": "The last check is incorrect, sorry, my bad.\nSee #22494 (comment)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r412688562", "createdAt": "2020-04-22T05:50:58Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -784,18 +784,19 @@ public boolean isArrayTypesAssignable(BType source, BType target, Set<TypePair>\n         } else if (source.tag == TypeTags.ARRAY) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIzNjU0Mw=="}, "originalCommit": {"oid": "8585dc433b22363195edb73af11770c8963a40f6"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDQxNzUzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNTowOToxNVrOGJjmZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNjozNTowNVrOGLf30g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3MzYzNg==", "bodyText": "For unions, consider something like,\n   int[] x = [1, 2];\n   int|string[] y = x;\nThe current check will cause this assignment to pass right?\nI think for unions we have to check isArrayTypesAssignable individually for each member and return true if at least one returns true.\n        if (target.tag == TypeTags.UNION) {\n            for (BType memberType : ((BUnionType) target).getMemberTypes()) {\n                if (isArrayTypesAssignable(source, memberType, unresolvedTypes) {\n                    return true;\n                }\n            }\n            return false;\n        }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r412673636", "createdAt": "2020-04-22T05:09:15Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -775,49 +776,26 @@ private boolean isArrayTypeAssignableToTupleType(BArrayType source, BTupleType t\n                 .allMatch(tupleElemType -> isAssignable(source.eType, tupleElemType, unresolvedTypes));\n     }\n \n-    public boolean isArrayTypesAssignable(BType source, BType target, Set<TypePair> unresolvedTypes) {\n-        if (target.tag == TypeTags.ARRAY && source.tag == TypeTags.ARRAY) {\n-            // Both types are array types\n-            BArrayType lhsArrayType = (BArrayType) target;\n-            BArrayType rhsArrayType = (BArrayType) source;\n-            if (lhsArrayType.state == BArrayState.UNSEALED) {\n-                return isArrayTypesAssignable(rhsArrayType.eType, lhsArrayType.eType, unresolvedTypes);\n-            }\n-            return checkSealedArraySizeEquality(rhsArrayType, lhsArrayType)\n-                    && isArrayTypesAssignable(rhsArrayType.eType, lhsArrayType.eType, unresolvedTypes);\n-\n-        } else if (source.tag == TypeTags.ARRAY) {\n-            // Only the right-hand side is an array type\n-\n-            // If the target type is a JSON, then element type of the rhs array\n-            // should only be a JSON supported type.\n-            if (target.tag == TypeTags.JSON) {\n-                return isAssignable(((BArrayType) source).getElementType(), target, unresolvedTypes);\n+    public boolean isArrayTypesAssignable(BArrayType source, BType target, Set<TypePair> unresolvedTypes) {\n+        BType sourceElementType = source.getElementType();\n+        if (target.tag == TypeTags.ARRAY) {\n+            BArrayType targetArrayType = (BArrayType) target;\n+            BType targetElementType = targetArrayType.getElementType();\n+            if (targetArrayType.state == BArrayState.UNSEALED) {\n+                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n             }\n \n-            if (target.tag == TypeTags.UNION) {\n-                return isAssignable(source, target);\n+            if (targetArrayType.size == source.size) {\n+                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n             }\n-\n-            // Then lhs type should 'any' type\n-            return target.tag == TypeTags.ANY;\n-\n-        } else if (target.tag == TypeTags.ARRAY) {\n-            // Only the left-hand side is an array type\n             return false;\n         }\n \n-        // Now both types are not array types and they have to be assignable\n-        if (isAssignable(source, target, unresolvedTypes)) {\n-            return true;\n-        }\n-\n-        if (target.tag == TypeTags.UNION) {\n-            return isAssignable(source, target, unresolvedTypes);\n+        if ((target.tag == TypeTags.UNION) || (target.tag == TypeTags.JSON)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1d6cc8adc77572100cc6532a6fed54e8e9797f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3MzY4Ng==", "bodyText": "Please add a couple of tests too?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r412673686", "createdAt": "2020-04-22T05:09:26Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -775,49 +776,26 @@ private boolean isArrayTypeAssignableToTupleType(BArrayType source, BTupleType t\n                 .allMatch(tupleElemType -> isAssignable(source.eType, tupleElemType, unresolvedTypes));\n     }\n \n-    public boolean isArrayTypesAssignable(BType source, BType target, Set<TypePair> unresolvedTypes) {\n-        if (target.tag == TypeTags.ARRAY && source.tag == TypeTags.ARRAY) {\n-            // Both types are array types\n-            BArrayType lhsArrayType = (BArrayType) target;\n-            BArrayType rhsArrayType = (BArrayType) source;\n-            if (lhsArrayType.state == BArrayState.UNSEALED) {\n-                return isArrayTypesAssignable(rhsArrayType.eType, lhsArrayType.eType, unresolvedTypes);\n-            }\n-            return checkSealedArraySizeEquality(rhsArrayType, lhsArrayType)\n-                    && isArrayTypesAssignable(rhsArrayType.eType, lhsArrayType.eType, unresolvedTypes);\n-\n-        } else if (source.tag == TypeTags.ARRAY) {\n-            // Only the right-hand side is an array type\n-\n-            // If the target type is a JSON, then element type of the rhs array\n-            // should only be a JSON supported type.\n-            if (target.tag == TypeTags.JSON) {\n-                return isAssignable(((BArrayType) source).getElementType(), target, unresolvedTypes);\n+    public boolean isArrayTypesAssignable(BArrayType source, BType target, Set<TypePair> unresolvedTypes) {\n+        BType sourceElementType = source.getElementType();\n+        if (target.tag == TypeTags.ARRAY) {\n+            BArrayType targetArrayType = (BArrayType) target;\n+            BType targetElementType = targetArrayType.getElementType();\n+            if (targetArrayType.state == BArrayState.UNSEALED) {\n+                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n             }\n \n-            if (target.tag == TypeTags.UNION) {\n-                return isAssignable(source, target);\n+            if (targetArrayType.size == source.size) {\n+                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n             }\n-\n-            // Then lhs type should 'any' type\n-            return target.tag == TypeTags.ANY;\n-\n-        } else if (target.tag == TypeTags.ARRAY) {\n-            // Only the left-hand side is an array type\n             return false;\n         }\n \n-        // Now both types are not array types and they have to be assignable\n-        if (isAssignable(source, target, unresolvedTypes)) {\n-            return true;\n-        }\n-\n-        if (target.tag == TypeTags.UNION) {\n-            return isAssignable(source, target, unresolvedTypes);\n+        if ((target.tag == TypeTags.UNION) || (target.tag == TypeTags.JSON)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3MzYzNg=="}, "originalCommit": {"oid": "0c1d6cc8adc77572100cc6532a6fed54e8e9797f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcwOTcxNA==", "bodyText": "Looks like unions are handled here.\nhttps://github.com/ballerina-platform/ballerina-lang/pull/22494/files#diff-782094a79e6831ac57a34ad157af49c1L562", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r414709714", "createdAt": "2020-04-24T16:35:05Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -775,49 +776,26 @@ private boolean isArrayTypeAssignableToTupleType(BArrayType source, BTupleType t\n                 .allMatch(tupleElemType -> isAssignable(source.eType, tupleElemType, unresolvedTypes));\n     }\n \n-    public boolean isArrayTypesAssignable(BType source, BType target, Set<TypePair> unresolvedTypes) {\n-        if (target.tag == TypeTags.ARRAY && source.tag == TypeTags.ARRAY) {\n-            // Both types are array types\n-            BArrayType lhsArrayType = (BArrayType) target;\n-            BArrayType rhsArrayType = (BArrayType) source;\n-            if (lhsArrayType.state == BArrayState.UNSEALED) {\n-                return isArrayTypesAssignable(rhsArrayType.eType, lhsArrayType.eType, unresolvedTypes);\n-            }\n-            return checkSealedArraySizeEquality(rhsArrayType, lhsArrayType)\n-                    && isArrayTypesAssignable(rhsArrayType.eType, lhsArrayType.eType, unresolvedTypes);\n-\n-        } else if (source.tag == TypeTags.ARRAY) {\n-            // Only the right-hand side is an array type\n-\n-            // If the target type is a JSON, then element type of the rhs array\n-            // should only be a JSON supported type.\n-            if (target.tag == TypeTags.JSON) {\n-                return isAssignable(((BArrayType) source).getElementType(), target, unresolvedTypes);\n+    public boolean isArrayTypesAssignable(BArrayType source, BType target, Set<TypePair> unresolvedTypes) {\n+        BType sourceElementType = source.getElementType();\n+        if (target.tag == TypeTags.ARRAY) {\n+            BArrayType targetArrayType = (BArrayType) target;\n+            BType targetElementType = targetArrayType.getElementType();\n+            if (targetArrayType.state == BArrayState.UNSEALED) {\n+                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n             }\n \n-            if (target.tag == TypeTags.UNION) {\n-                return isAssignable(source, target);\n+            if (targetArrayType.size == source.size) {\n+                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n             }\n-\n-            // Then lhs type should 'any' type\n-            return target.tag == TypeTags.ANY;\n-\n-        } else if (target.tag == TypeTags.ARRAY) {\n-            // Only the left-hand side is an array type\n             return false;\n         }\n \n-        // Now both types are not array types and they have to be assignable\n-        if (isAssignable(source, target, unresolvedTypes)) {\n-            return true;\n-        }\n-\n-        if (target.tag == TypeTags.UNION) {\n-            return isAssignable(source, target, unresolvedTypes);\n+        if ((target.tag == TypeTags.UNION) || (target.tag == TypeTags.JSON)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3MzYzNg=="}, "originalCommit": {"oid": "0c1d6cc8adc77572100cc6532a6fed54e8e9797f"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDQyODY5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToxMzo0MlrOGJjsaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToxMzo0MlrOGJjsaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3NTE3Ng==", "bodyText": "error[] x = [e1, e2];\nany y = x;\nThis is valid. So we don't need this check.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r412675176", "createdAt": "2020-04-22T05:13:42Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -775,49 +776,26 @@ private boolean isArrayTypeAssignableToTupleType(BArrayType source, BTupleType t\n                 .allMatch(tupleElemType -> isAssignable(source.eType, tupleElemType, unresolvedTypes));\n     }\n \n-    public boolean isArrayTypesAssignable(BType source, BType target, Set<TypePair> unresolvedTypes) {\n-        if (target.tag == TypeTags.ARRAY && source.tag == TypeTags.ARRAY) {\n-            // Both types are array types\n-            BArrayType lhsArrayType = (BArrayType) target;\n-            BArrayType rhsArrayType = (BArrayType) source;\n-            if (lhsArrayType.state == BArrayState.UNSEALED) {\n-                return isArrayTypesAssignable(rhsArrayType.eType, lhsArrayType.eType, unresolvedTypes);\n-            }\n-            return checkSealedArraySizeEquality(rhsArrayType, lhsArrayType)\n-                    && isArrayTypesAssignable(rhsArrayType.eType, lhsArrayType.eType, unresolvedTypes);\n-\n-        } else if (source.tag == TypeTags.ARRAY) {\n-            // Only the right-hand side is an array type\n-\n-            // If the target type is a JSON, then element type of the rhs array\n-            // should only be a JSON supported type.\n-            if (target.tag == TypeTags.JSON) {\n-                return isAssignable(((BArrayType) source).getElementType(), target, unresolvedTypes);\n+    public boolean isArrayTypesAssignable(BArrayType source, BType target, Set<TypePair> unresolvedTypes) {\n+        BType sourceElementType = source.getElementType();\n+        if (target.tag == TypeTags.ARRAY) {\n+            BArrayType targetArrayType = (BArrayType) target;\n+            BType targetElementType = targetArrayType.getElementType();\n+            if (targetArrayType.state == BArrayState.UNSEALED) {\n+                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n             }\n \n-            if (target.tag == TypeTags.UNION) {\n-                return isAssignable(source, target);\n+            if (targetArrayType.size == source.size) {\n+                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n             }\n-\n-            // Then lhs type should 'any' type\n-            return target.tag == TypeTags.ANY;\n-\n-        } else if (target.tag == TypeTags.ARRAY) {\n-            // Only the left-hand side is an array type\n             return false;\n         }\n \n-        // Now both types are not array types and they have to be assignable\n-        if (isAssignable(source, target, unresolvedTypes)) {\n-            return true;\n-        }\n-\n-        if (target.tag == TypeTags.UNION) {\n-            return isAssignable(source, target, unresolvedTypes);\n+        if ((target.tag == TypeTags.UNION) || (target.tag == TypeTags.JSON)) {\n+            return isAssignable(sourceElementType, target, unresolvedTypes);\n         }\n \n-        // In this case, lhs type should be of type 'any' and the rhs type cannot be a value type\n-        return target.tag == TypeTags.ANY && !isValueType(source);\n+        return (target.tag == TypeTags.ANY) && (sourceElementType.tag != TypeTags.ERROR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1d6cc8adc77572100cc6532a6fed54e8e9797f"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDQzOTgyOnYy", "diffSide": "LEFT", "path": "stdlib/http/src/main/ballerina/src/http/resiliency/failover_client_endpoint.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToxODoxM1rOGJjyTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMDo0NToyM1rOGKi54w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3NjY4Nw==", "bodyText": "@ThisaruGuruge can you verify these changes please? The previous behaviour (passing an error?[] where a ClientError?[] is expected in populateFailoverErrorHttpStatusCodes) was allowed due to a bug.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r412676687", "createdAt": "2020-04-22T05:18:13Z", "author": {"login": "MaryamZi"}, "path": "stdlib/http/src/main/ballerina/src/http/resiliency/failover_client_endpoint.bal", "diffHunk": "@@ -308,7 +308,7 @@ function performFailoverAction (string path, Request request, HttpOperation requ\n     Response inResponse = new;\n     HttpFuture inFuture = new;\n     Request failoverRequest = request;\n-    error?[] failoverActionErrData = [];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c1d6cc8adc77572100cc6532a6fed54e8e9797f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzcxMDgxOQ==", "bodyText": "This should be fine.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r413710819", "createdAt": "2020-04-23T10:45:23Z", "author": {"login": "ThisaruGuruge"}, "path": "stdlib/http/src/main/ballerina/src/http/resiliency/failover_client_endpoint.bal", "diffHunk": "@@ -308,7 +308,7 @@ function performFailoverAction (string path, Request request, HttpOperation requ\n     Response inResponse = new;\n     HttpFuture inFuture = new;\n     Request failoverRequest = request;\n-    error?[] failoverActionErrData = [];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3NjY4Nw=="}, "originalCommit": {"oid": "0c1d6cc8adc77572100cc6532a6fed54e8e9797f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDEzODk1OnYy", "diffSide": "LEFT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMTozNDoyMFrOGMNRYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNTo0MDo0NFrOGMRnZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ1MzUzNg==", "bodyText": "Why is this removed?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r415453536", "createdAt": "2020-04-27T01:34:20Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -564,12 +565,8 @@ private boolean isAssignable(BType source, BType target, Set<TypePair> unresolve\n         }\n \n         if (targetTag == TypeTags.JSON) {\n-            if (sourceTag == TypeTags.JSON) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba99d6bf7cf3860b98b291a7e4a2d9f2827138f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUyNDcwOQ==", "bodyText": "Already checked here right? [Link Edited]\n\n  \n    \n      ballerina-lang/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\n    \n    \n         Line 473\n      in\n      ce35a32\n    \n    \n    \n    \n\n        \n          \n           if (isSameType(source, target)) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r415524709", "createdAt": "2020-04-27T05:40:44Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -564,12 +565,8 @@ private boolean isAssignable(BType source, BType target, Set<TypePair> unresolve\n         }\n \n         if (targetTag == TypeTags.JSON) {\n-            if (sourceTag == TypeTags.JSON) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ1MzUzNg=="}, "originalCommit": {"oid": "9ba99d6bf7cf3860b98b291a7e4a2d9f2827138f"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDI0NDAwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMjoyNDoxOVrOGMOFkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMTo1NDo1NlrOGNQV2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2Njg5OA==", "bodyText": "Shall we do\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (targetArrayType.size == source.size) {\n          \n          \n            \n                            return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n          \n          \n            \n                        }\n          \n          \n            \n                        if (targetArrayType.size != source.size) {\n          \n          \n            \n                            return false;\n          \n          \n            \n                        }\n          \n          \n            \n                        \n          \n          \n            \n                        return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n          \n      \n    \n    \n  \n\ninstead?\nImproves readabilty IMO.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r415466898", "createdAt": "2020-04-27T02:24:19Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -775,49 +772,28 @@ private boolean isArrayTypeAssignableToTupleType(BArrayType source, BTupleType t\n                 .allMatch(tupleElemType -> isAssignable(source.eType, tupleElemType, unresolvedTypes));\n     }\n \n-    public boolean isArrayTypesAssignable(BType source, BType target, Set<TypePair> unresolvedTypes) {\n-        if (target.tag == TypeTags.ARRAY && source.tag == TypeTags.ARRAY) {\n-            // Both types are array types\n-            BArrayType lhsArrayType = (BArrayType) target;\n-            BArrayType rhsArrayType = (BArrayType) source;\n-            if (lhsArrayType.state == BArrayState.UNSEALED) {\n-                return isArrayTypesAssignable(rhsArrayType.eType, lhsArrayType.eType, unresolvedTypes);\n+    private boolean isArrayTypesAssignable(BArrayType source, BType target, Set<TypePair> unresolvedTypes) {\n+        BType sourceElementType = source.getElementType();\n+        if (target.tag == TypeTags.ARRAY) {\n+            BArrayType targetArrayType = (BArrayType) target;\n+            BType targetElementType = targetArrayType.getElementType();\n+            if (targetArrayType.state == BArrayState.UNSEALED) {\n+                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n             }\n-            return checkSealedArraySizeEquality(rhsArrayType, lhsArrayType)\n-                    && isArrayTypesAssignable(rhsArrayType.eType, lhsArrayType.eType, unresolvedTypes);\n-\n-        } else if (source.tag == TypeTags.ARRAY) {\n-            // Only the right-hand side is an array type\n \n-            // If the target type is a JSON, then element type of the rhs array\n-            // should only be a JSON supported type.\n-            if (target.tag == TypeTags.JSON) {\n-                return isAssignable(((BArrayType) source).getElementType(), target, unresolvedTypes);\n+            if (targetArrayType.size == source.size) {\n+                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n             }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba99d6bf7cf3860b98b291a7e4a2d9f2827138f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUyNTkzOQ==", "bodyText": "I think this is subjective. Also, I will be adding more false statements to the method for this change. Think code is obvious anyway. I prefer to keep the code as it is if there is no objection.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r415525939", "createdAt": "2020-04-27T05:44:15Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -775,49 +772,28 @@ private boolean isArrayTypeAssignableToTupleType(BArrayType source, BTupleType t\n                 .allMatch(tupleElemType -> isAssignable(source.eType, tupleElemType, unresolvedTypes));\n     }\n \n-    public boolean isArrayTypesAssignable(BType source, BType target, Set<TypePair> unresolvedTypes) {\n-        if (target.tag == TypeTags.ARRAY && source.tag == TypeTags.ARRAY) {\n-            // Both types are array types\n-            BArrayType lhsArrayType = (BArrayType) target;\n-            BArrayType rhsArrayType = (BArrayType) source;\n-            if (lhsArrayType.state == BArrayState.UNSEALED) {\n-                return isArrayTypesAssignable(rhsArrayType.eType, lhsArrayType.eType, unresolvedTypes);\n+    private boolean isArrayTypesAssignable(BArrayType source, BType target, Set<TypePair> unresolvedTypes) {\n+        BType sourceElementType = source.getElementType();\n+        if (target.tag == TypeTags.ARRAY) {\n+            BArrayType targetArrayType = (BArrayType) target;\n+            BType targetElementType = targetArrayType.getElementType();\n+            if (targetArrayType.state == BArrayState.UNSEALED) {\n+                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n             }\n-            return checkSealedArraySizeEquality(rhsArrayType, lhsArrayType)\n-                    && isArrayTypesAssignable(rhsArrayType.eType, lhsArrayType.eType, unresolvedTypes);\n-\n-        } else if (source.tag == TypeTags.ARRAY) {\n-            // Only the right-hand side is an array type\n \n-            // If the target type is a JSON, then element type of the rhs array\n-            // should only be a JSON supported type.\n-            if (target.tag == TypeTags.JSON) {\n-                return isAssignable(((BArrayType) source).getElementType(), target, unresolvedTypes);\n+            if (targetArrayType.size == source.size) {\n+                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n             }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2Njg5OA=="}, "originalCommit": {"oid": "9ba99d6bf7cf3860b98b291a7e4a2d9f2827138f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU1MTE2OQ==", "bodyText": "As a practice, we usually try to return early as and when possible, and minimize else/else-if blocks.\nWith this change we can update the method itself to something like\n    private boolean isArrayTypesAssignable(BArrayType source, BType target, Set<TypePair> unresolvedTypes) {\n        BType sourceElementType = source.getElementType();\n        if (target.tag == TypeTags.ARRAY) {\n            BArrayType targetArrayType = (BArrayType) target;\n            BType targetElementType = targetArrayType.getElementType();\n            if (targetArrayType.state == BArrayState.UNSEALED) {\n                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n            }\n\n            if (targetArrayType.size != source.size) {\n                return false;\n            }\n            \n            return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n        }\n        \n        if (target.tag == TypeTags.JSON) {\n            return isAssignable(sourceElementType, target, unresolvedTypes);\n        }\n        \n        return false;\n    }\nAnd it's just one additional return false anyway right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r416551169", "createdAt": "2020-04-28T11:52:42Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -775,49 +772,28 @@ private boolean isArrayTypeAssignableToTupleType(BArrayType source, BTupleType t\n                 .allMatch(tupleElemType -> isAssignable(source.eType, tupleElemType, unresolvedTypes));\n     }\n \n-    public boolean isArrayTypesAssignable(BType source, BType target, Set<TypePair> unresolvedTypes) {\n-        if (target.tag == TypeTags.ARRAY && source.tag == TypeTags.ARRAY) {\n-            // Both types are array types\n-            BArrayType lhsArrayType = (BArrayType) target;\n-            BArrayType rhsArrayType = (BArrayType) source;\n-            if (lhsArrayType.state == BArrayState.UNSEALED) {\n-                return isArrayTypesAssignable(rhsArrayType.eType, lhsArrayType.eType, unresolvedTypes);\n+    private boolean isArrayTypesAssignable(BArrayType source, BType target, Set<TypePair> unresolvedTypes) {\n+        BType sourceElementType = source.getElementType();\n+        if (target.tag == TypeTags.ARRAY) {\n+            BArrayType targetArrayType = (BArrayType) target;\n+            BType targetElementType = targetArrayType.getElementType();\n+            if (targetArrayType.state == BArrayState.UNSEALED) {\n+                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n             }\n-            return checkSealedArraySizeEquality(rhsArrayType, lhsArrayType)\n-                    && isArrayTypesAssignable(rhsArrayType.eType, lhsArrayType.eType, unresolvedTypes);\n-\n-        } else if (source.tag == TypeTags.ARRAY) {\n-            // Only the right-hand side is an array type\n \n-            // If the target type is a JSON, then element type of the rhs array\n-            // should only be a JSON supported type.\n-            if (target.tag == TypeTags.JSON) {\n-                return isAssignable(((BArrayType) source).getElementType(), target, unresolvedTypes);\n+            if (targetArrayType.size == source.size) {\n+                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n             }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2Njg5OA=="}, "originalCommit": {"oid": "9ba99d6bf7cf3860b98b291a7e4a2d9f2827138f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU1MjQwOA==", "bodyText": "This blog was shared sometime back.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r416552408", "createdAt": "2020-04-28T11:54:56Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -775,49 +772,28 @@ private boolean isArrayTypeAssignableToTupleType(BArrayType source, BTupleType t\n                 .allMatch(tupleElemType -> isAssignable(source.eType, tupleElemType, unresolvedTypes));\n     }\n \n-    public boolean isArrayTypesAssignable(BType source, BType target, Set<TypePair> unresolvedTypes) {\n-        if (target.tag == TypeTags.ARRAY && source.tag == TypeTags.ARRAY) {\n-            // Both types are array types\n-            BArrayType lhsArrayType = (BArrayType) target;\n-            BArrayType rhsArrayType = (BArrayType) source;\n-            if (lhsArrayType.state == BArrayState.UNSEALED) {\n-                return isArrayTypesAssignable(rhsArrayType.eType, lhsArrayType.eType, unresolvedTypes);\n+    private boolean isArrayTypesAssignable(BArrayType source, BType target, Set<TypePair> unresolvedTypes) {\n+        BType sourceElementType = source.getElementType();\n+        if (target.tag == TypeTags.ARRAY) {\n+            BArrayType targetArrayType = (BArrayType) target;\n+            BType targetElementType = targetArrayType.getElementType();\n+            if (targetArrayType.state == BArrayState.UNSEALED) {\n+                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n             }\n-            return checkSealedArraySizeEquality(rhsArrayType, lhsArrayType)\n-                    && isArrayTypesAssignable(rhsArrayType.eType, lhsArrayType.eType, unresolvedTypes);\n-\n-        } else if (source.tag == TypeTags.ARRAY) {\n-            // Only the right-hand side is an array type\n \n-            // If the target type is a JSON, then element type of the rhs array\n-            // should only be a JSON supported type.\n-            if (target.tag == TypeTags.JSON) {\n-                return isAssignable(((BArrayType) source).getElementType(), target, unresolvedTypes);\n+            if (targetArrayType.size == source.size) {\n+                return isAssignable(sourceElementType, targetElementType, unresolvedTypes);\n             }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2Njg5OA=="}, "originalCommit": {"oid": "9ba99d6bf7cf3860b98b291a7e4a2d9f2827138f"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDI0NjMzOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/assign/AssignStmtTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMjoyNTozOFrOGMOG1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNTo0ODoyOVrOGMRyEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2NzIyMQ==", "bodyText": "This can be removed?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r415467221", "createdAt": "2020-04-27T02:25:38Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/assign/AssignStmtTest.java", "diffHunk": "@@ -207,6 +207,20 @@ public void testAssignmentNegativeCases() {\n                 \"invalid record binding pattern with type 'error'\", 92, 9);\n         BAssertUtil.validateError(resultNegative, i++,\n                 \"invalid record variable; expecting a record type but found 'error' in type definition\", 92, 20);\n+        BAssertUtil.validateError(resultNegative, i++,\n+                                  \"incompatible types: expected 'any[]', found 'error[]'\", 98, 15);\n+        BAssertUtil.validateError(resultNegative, i++,\n+                                  \"incompatible types: expected 'error[]', found 'any[]'\", 100, 26);\n+        BAssertUtil.validateError(resultNegative, i++,\n+                                  \"incompatible types: expected '(CError|LError)?[]', found 'error?[]'\", 118, 19);\n+        BAssertUtil.validateError(resultNegative, i++,\n+                                  \"incompatible types: expected '(CError|LError)?[]', found 'error?[]'\", 119, 11);\n+        BAssertUtil.validateError(resultNegative, i++,\n+                                  \"incompatible types: expected '(error|int[])', found 'error[]'\", 127, 21);\n+        BAssertUtil.validateError(resultNegative, i++,\n+                                  \"incompatible types: expected '(int|error[])', found 'error'\", 132, 21);\n+//        BAssertUtil.validateError(resultNegative, i++,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba99d6bf7cf3860b98b291a7e4a2d9f2827138f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUyNzQ0MA==", "bodyText": "yes, duplicate", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r415527440", "createdAt": "2020-04-27T05:48:29Z", "author": {"login": "KRVPerera"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/assign/AssignStmtTest.java", "diffHunk": "@@ -207,6 +207,20 @@ public void testAssignmentNegativeCases() {\n                 \"invalid record binding pattern with type 'error'\", 92, 9);\n         BAssertUtil.validateError(resultNegative, i++,\n                 \"invalid record variable; expecting a record type but found 'error' in type definition\", 92, 20);\n+        BAssertUtil.validateError(resultNegative, i++,\n+                                  \"incompatible types: expected 'any[]', found 'error[]'\", 98, 15);\n+        BAssertUtil.validateError(resultNegative, i++,\n+                                  \"incompatible types: expected 'error[]', found 'any[]'\", 100, 26);\n+        BAssertUtil.validateError(resultNegative, i++,\n+                                  \"incompatible types: expected '(CError|LError)?[]', found 'error?[]'\", 118, 19);\n+        BAssertUtil.validateError(resultNegative, i++,\n+                                  \"incompatible types: expected '(CError|LError)?[]', found 'error?[]'\", 119, 11);\n+        BAssertUtil.validateError(resultNegative, i++,\n+                                  \"incompatible types: expected '(error|int[])', found 'error[]'\", 127, 21);\n+        BAssertUtil.validateError(resultNegative, i++,\n+                                  \"incompatible types: expected '(int|error[])', found 'error'\", 132, 21);\n+//        BAssertUtil.validateError(resultNegative, i++,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ2NzIyMQ=="}, "originalCommit": {"oid": "9ba99d6bf7cf3860b98b291a7e4a2d9f2827138f"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTIwNDk0OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-bstring-unit-test/src/test/java/org/ballerinalang/test/error/ErrorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMzo0OTo1N1rOGOYtIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODo0MjozOFrOGOflvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzczODAxNg==", "bodyText": "Why are we doing this change?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r417738016", "createdAt": "2020-04-30T03:49:57Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-bstring-unit-test/src/test/java/org/ballerinalang/test/error/ErrorTest.java", "diffHunk": "@@ -270,10 +270,11 @@ public void testErrorNegative() {\n                 \"error reason is mandatory for direct error constructor\", 112, 28);\n         BAssertUtil.validateError(negativeCompileResult, i++,\n                 \"incompatible types: expected 'error', found '(error|int)'\", 118, 11);\n-        BAssertUtil.validateError(negativeCompileResult, i,\n+        BAssertUtil.validateError(negativeCompileResult, i++,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10686385d640752e073956669b2d6027c18f7f82"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg1MDgxNQ==", "bodyText": "removed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r417850815", "createdAt": "2020-04-30T08:42:38Z", "author": {"login": "KRVPerera"}, "path": "tests/jballerina-bstring-unit-test/src/test/java/org/ballerinalang/test/error/ErrorTest.java", "diffHunk": "@@ -270,10 +270,11 @@ public void testErrorNegative() {\n                 \"error reason is mandatory for direct error constructor\", 112, 28);\n         BAssertUtil.validateError(negativeCompileResult, i++,\n                 \"incompatible types: expected 'error', found '(error|int)'\", 118, 11);\n-        BAssertUtil.validateError(negativeCompileResult, i,\n+        BAssertUtil.validateError(negativeCompileResult, i++,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzczODAxNg=="}, "originalCommit": {"oid": "10686385d640752e073956669b2d6027c18f7f82"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTIwNjYwOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/assign/assign-stmt-negative.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMzo1MToxNFrOGOYuMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMzo1MToxNFrOGOYuMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzczODI5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                CLError? [] err = [];\n          \n          \n            \n                error? [] errs = err;\n          \n          \n            \n                CLError?[] err = [];\n          \n          \n            \n                error?[] errs = err;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r417738291", "createdAt": "2020-04-30T03:51:14Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/assign/assign-stmt-negative.bal", "diffHunk": "@@ -91,3 +91,43 @@ public function restActionResultAssignment() {\n     map<string> sm = c->foo1();\n     var { a: d } = c->foo2();\n }\n+\n+\n+function assignErrorArrayToAnyTypeArrayViseVersa() {\n+    error[] ea = [];\n+    any[] j = ea;\n+    any[] anyArray = [];\n+    error[] errorArray = anyArray;\n+}\n+\n+public const C_ERROR = \"CError\";\n+public const L_ERROR = \"LError\";\n+\n+public type Detail record {\n+    string message;\n+    error cause?;\n+};\n+\n+type CError error<C_ERROR, Detail>;\n+type LError error<L_ERROR, Detail>;\n+type CLError CError|LError;\n+\n+function nonAssingableErrorTypeArrayAssign() {\n+    CLError? [] err = [];\n+    error? [] errs = err;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10686385d640752e073956669b2d6027c18f7f82"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTIxMjUxOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/assign/assign-stmt.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMzo1NTo0MFrOGOYxrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMzo1NTo0MFrOGOYxrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzczOTE4Mg==", "bodyText": "Shouldn't this be\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            function testAssignErrorArrayToAnyArray() {\n          \n          \n            \n            function testAssignErrorArrayToAny() {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r417739182", "createdAt": "2020-04-30T03:55:40Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/assign/assign-stmt.bal", "diffHunk": "@@ -86,3 +86,41 @@ public function restActionResultAssignment() returns [int, int, string, string,\n     var error(r2, failedAttempts = failedAttempts) = c->foo3();\n     return [a, b, d, r, r2, <int>failedAttempts];\n }\n+\n+function testAssignErrorArrayToAnyArray() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10686385d640752e073956669b2d6027c18f7f82"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTIxNTE2OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/assign/assign-stmt.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMzo1NzoyN1rOGOYzLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMzo1NzoyN1rOGOYzLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzczOTU2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                string errorMessage = \"Test Error\";\n          \n          \n            \n                error testError = error(\"Test Error\");\n          \n          \n            \n                error[] errorArray = [testError];\n          \n          \n            \n                any anyArray = errorArray;\n          \n          \n            \n                error[] errorArrayBack = <error[]>anyArray;\n          \n          \n            \n                assertEquality(errorMessage, errorArrayBack[0].reason());\n          \n          \n            \n                string errorReason = \"TestError\";\n          \n          \n            \n                error testError = error(errorReason);\n          \n          \n            \n                error[] errorArray = [testError];\n          \n          \n            \n                any anyVal = errorArray;\n          \n          \n            \n                error[] errorArrayBack = <error[]>anyVal;\n          \n          \n            \n                assertEquality(errorReason, errorArrayBack[0].reason());", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r417739565", "createdAt": "2020-04-30T03:57:27Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/assign/assign-stmt.bal", "diffHunk": "@@ -86,3 +86,41 @@ public function restActionResultAssignment() returns [int, int, string, string,\n     var error(r2, failedAttempts = failedAttempts) = c->foo3();\n     return [a, b, d, r, r2, <int>failedAttempts];\n }\n+\n+function testAssignErrorArrayToAnyArray() {\n+    string errorMessage = \"Test Error\";\n+    error testError = error(\"Test Error\");\n+    error[] errorArray = [testError];\n+    any anyArray = errorArray;\n+    error[] errorArrayBack = <error[]>anyArray;\n+    assertEquality(errorMessage, errorArrayBack[0].reason());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10686385d640752e073956669b2d6027c18f7f82"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTIzMjkzOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/assign/assign-stmt.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNDowOTozNlrOGOY94Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNDowOTozNlrOGOY94Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc0MjMwNQ==", "bodyText": "This variable name does not make sense IMO.\nShall we rename it to jsonVar or jsonArray?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r417742305", "createdAt": "2020-04-30T04:09:36Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/assign/assign-stmt.bal", "diffHunk": "@@ -86,3 +86,41 @@ public function restActionResultAssignment() returns [int, int, string, string,\n     var error(r2, failedAttempts = failedAttempts) = c->foo3();\n     return [a, b, d, r, r2, <int>failedAttempts];\n }\n+\n+function testAssignErrorArrayToAnyArray() {\n+    string errorMessage = \"Test Error\";\n+    error testError = error(\"Test Error\");\n+    error[] errorArray = [testError];\n+    any anyArray = errorArray;\n+    error[] errorArrayBack = <error[]>anyArray;\n+    assertEquality(errorMessage, errorArrayBack[0].reason());\n+}\n+\n+function testAssignIntArrayToJson() {\n+    int[*] intArray = [1, 2];\n+    json jsonObjectOfIntArray = intArray;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10686385d640752e073956669b2d6027c18f7f82"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTIzMzc3OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/assign/assign-stmt.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNDoxMDowN1rOGOY-VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwODo0MTozNFrOGOfjMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc0MjQyMA==", "bodyText": "Why do we need another assignment to a variable of the same type? What are we trying to test here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r417742420", "createdAt": "2020-04-30T04:10:07Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/assign/assign-stmt.bal", "diffHunk": "@@ -86,3 +86,41 @@ public function restActionResultAssignment() returns [int, int, string, string,\n     var error(r2, failedAttempts = failedAttempts) = c->foo3();\n     return [a, b, d, r, r2, <int>failedAttempts];\n }\n+\n+function testAssignErrorArrayToAnyArray() {\n+    string errorMessage = \"Test Error\";\n+    error testError = error(\"Test Error\");\n+    error[] errorArray = [testError];\n+    any anyArray = errorArray;\n+    error[] errorArrayBack = <error[]>anyArray;\n+    assertEquality(errorMessage, errorArrayBack[0].reason());\n+}\n+\n+function testAssignIntArrayToJson() {\n+    int[*] intArray = [1, 2];\n+    json jsonObjectOfIntArray = intArray;\n+    json jsonToJson = jsonObjectOfIntArray;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10686385d640752e073956669b2d6027c18f7f82"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg1MDE2Mw==", "bodyText": "extra line removed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r417850163", "createdAt": "2020-04-30T08:41:34Z", "author": {"login": "KRVPerera"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/assign/assign-stmt.bal", "diffHunk": "@@ -86,3 +86,41 @@ public function restActionResultAssignment() returns [int, int, string, string,\n     var error(r2, failedAttempts = failedAttempts) = c->foo3();\n     return [a, b, d, r, r2, <int>failedAttempts];\n }\n+\n+function testAssignErrorArrayToAnyArray() {\n+    string errorMessage = \"Test Error\";\n+    error testError = error(\"Test Error\");\n+    error[] errorArray = [testError];\n+    any anyArray = errorArray;\n+    error[] errorArrayBack = <error[]>anyArray;\n+    assertEquality(errorMessage, errorArrayBack[0].reason());\n+}\n+\n+function testAssignIntArrayToJson() {\n+    int[*] intArray = [1, 2];\n+    json jsonObjectOfIntArray = intArray;\n+    json jsonToJson = jsonObjectOfIntArray;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc0MjQyMA=="}, "originalCommit": {"oid": "10686385d640752e073956669b2d6027c18f7f82"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTIzNzUxOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/assign/assign-stmt.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNDoxMjo1MVrOGOZAhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNDoxMjo1MVrOGOZAhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc0Mjk4Mg==", "bodyText": "Shall we assert the actual values instead of using .toString()?\nHow about\nassertTrue(jsonVar is int[2]);\n\nint[2] arr = <int[2]> jsonVar;\nassertEquality(1, arr[0]);\nassertEquality(2, arr[1]);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r417742982", "createdAt": "2020-04-30T04:12:51Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/assign/assign-stmt.bal", "diffHunk": "@@ -86,3 +86,41 @@ public function restActionResultAssignment() returns [int, int, string, string,\n     var error(r2, failedAttempts = failedAttempts) = c->foo3();\n     return [a, b, d, r, r2, <int>failedAttempts];\n }\n+\n+function testAssignErrorArrayToAnyArray() {\n+    string errorMessage = \"Test Error\";\n+    error testError = error(\"Test Error\");\n+    error[] errorArray = [testError];\n+    any anyArray = errorArray;\n+    error[] errorArrayBack = <error[]>anyArray;\n+    assertEquality(errorMessage, errorArrayBack[0].reason());\n+}\n+\n+function testAssignIntArrayToJson() {\n+    int[*] intArray = [1, 2];\n+    json jsonObjectOfIntArray = intArray;\n+    json jsonToJson = jsonObjectOfIntArray;\n+    assertEquality(\"1 2\", jsonToJson.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10686385d640752e073956669b2d6027c18f7f82"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTIzOTM0OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/assign/assign-stmt.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNDoxMzo1NlrOGOZBmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNDoxMzo1NlrOGOZBmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc0MzI1OQ==", "bodyText": "Again variable name doesn't reflect the actual type does it.\nGiven that these are small tests I'd rather go with simple names, a and b, arr1 and arr2, etc.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22494#discussion_r417743259", "createdAt": "2020-04-30T04:13:56Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/assign/assign-stmt.bal", "diffHunk": "@@ -86,3 +86,41 @@ public function restActionResultAssignment() returns [int, int, string, string,\n     var error(r2, failedAttempts = failedAttempts) = c->foo3();\n     return [a, b, d, r, r2, <int>failedAttempts];\n }\n+\n+function testAssignErrorArrayToAnyArray() {\n+    string errorMessage = \"Test Error\";\n+    error testError = error(\"Test Error\");\n+    error[] errorArray = [testError];\n+    any anyArray = errorArray;\n+    error[] errorArrayBack = <error[]>anyArray;\n+    assertEquality(errorMessage, errorArrayBack[0].reason());\n+}\n+\n+function testAssignIntArrayToJson() {\n+    int[*] intArray = [1, 2];\n+    json jsonObjectOfIntArray = intArray;\n+    json jsonToJson = jsonObjectOfIntArray;\n+    assertEquality(\"1 2\", jsonToJson.toString());\n+}\n+\n+function testAssignIntOrStringArrayIntOrFloatOrStringUnionArray() {\n+    int[]|string[] intOrStringArray = <int[]>[1, 2];\n+    (int|float)[]|string[] intOrFloatArray = intOrStringArray;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10686385d640752e073956669b2d6027c18f7f82"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3942, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}