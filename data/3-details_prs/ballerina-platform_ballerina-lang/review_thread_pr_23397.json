{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwOTg3OTky", "number": 23397, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOTozMDo1M1rOEAbnXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1Mjo0OVrOEB7sBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODg3OTAxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOTozMDo1M1rOGbtJrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxOTo1ODozMFrOGcElIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwNDQ5NQ==", "bodyText": "Recheck this. Might have to return from here.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23397#discussion_r431704495", "createdAt": "2020-05-28T09:30:53Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1210,6 +1278,32 @@ public void visit(BLangUserDefinedType userDefinedTypeNode) {\n         resultType = symbol.type;\n     }\n \n+    private BType getTypedescParamValueType(List<BLangSimpleVariable> params, BSymbol varSym,\n+                                            DiagnosticPos retTypePos) {\n+        for (BLangSimpleVariable param : params) {\n+            if (param.name.value.equals(varSym.name.value)) {\n+                if (param.expr == null) {\n+                    return ((BTypedescType) varSym.type).constraint;\n+                }\n+\n+                if (param.expr.getKind() == NodeKind.TYPEDESC_EXPRESSION) {\n+                    return resolveTypeNode(((BLangTypedescExpr) param.expr).typeNode, this.env);\n+                }\n+\n+                if (param.expr.getKind() == NodeKind.SIMPLE_VARIABLE_REF) {\n+                    Name varName = names.fromIdNode(((BLangSimpleVarRef) param.expr).variableName);\n+                    BSymbol typeRefSym = lookupSymbolInMainSpace(this.env, varName);\n+                    return typeRefSym != symTable.notFoundSymbol ? typeRefSym.type : symTable.semanticError;\n+                }\n+\n+                dlog.error(param.pos, DiagnosticCode.INVALID_TYPEDESC_PARAM);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28ac1e0d6ff7aa8e058abc48638b499e17518827"}, "originalPosition": 269}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA4ODM1Mg==", "bodyText": "@KRVPerera good catch. It turned out that a return was required here.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23397#discussion_r432088352", "createdAt": "2020-05-28T19:58:30Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1210,6 +1278,32 @@ public void visit(BLangUserDefinedType userDefinedTypeNode) {\n         resultType = symbol.type;\n     }\n \n+    private BType getTypedescParamValueType(List<BLangSimpleVariable> params, BSymbol varSym,\n+                                            DiagnosticPos retTypePos) {\n+        for (BLangSimpleVariable param : params) {\n+            if (param.name.value.equals(varSym.name.value)) {\n+                if (param.expr == null) {\n+                    return ((BTypedescType) varSym.type).constraint;\n+                }\n+\n+                if (param.expr.getKind() == NodeKind.TYPEDESC_EXPRESSION) {\n+                    return resolveTypeNode(((BLangTypedescExpr) param.expr).typeNode, this.env);\n+                }\n+\n+                if (param.expr.getKind() == NodeKind.SIMPLE_VARIABLE_REF) {\n+                    Name varName = names.fromIdNode(((BLangSimpleVarRef) param.expr).variableName);\n+                    BSymbol typeRefSym = lookupSymbolInMainSpace(this.env, varName);\n+                    return typeRefSym != symTable.notFoundSymbol ? typeRefSym.type : symTable.semanticError;\n+                }\n+\n+                dlog.error(param.pos, DiagnosticCode.INVALID_TYPEDESC_PARAM);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwNDQ5NQ=="}, "originalCommit": {"oid": "28ac1e0d6ff7aa8e058abc48638b499e17518827"}, "originalPosition": 269}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODk5NzkwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMDowNToxMFrOGbuV7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMDowMjo1NFrOGcEyWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcyNDAxMw==", "bodyText": "If the enclosingType already has PARAMETERIZED flag we don't need to set again. Can skip loop.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23397#discussion_r431724013", "createdAt": "2020-05-28T10:05:10Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1358,6 +1456,28 @@ public BSymbol getBinaryEqualityForTypeSets(OperatorKind opKind, BType lhsType,\n         return symTable.notFoundSymbol;\n     }\n \n+    public boolean markParameterizedType(BType type, BType constituentType) {\n+        if (Symbols.isFlagOn(constituentType.flags, Flags.PARAMETERIZED)) {\n+            type.tsymbol.flags |= Flags.PARAMETERIZED;\n+            type.flags |= Flags.PARAMETERIZED;\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public void markParameterizedType(BType enclosingType, Collection<BType> constituentTypes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28ac1e0d6ff7aa8e058abc48638b499e17518827"}, "originalPosition": 333}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA5MTczNg==", "bodyText": "The enclosing type would not contain the flag since this method gets called right after the enclosing type gets created.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23397#discussion_r432091736", "createdAt": "2020-05-28T20:02:54Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1358,6 +1456,28 @@ public BSymbol getBinaryEqualityForTypeSets(OperatorKind opKind, BType lhsType,\n         return symTable.notFoundSymbol;\n     }\n \n+    public boolean markParameterizedType(BType type, BType constituentType) {\n+        if (Symbols.isFlagOn(constituentType.flags, Flags.PARAMETERIZED)) {\n+            type.tsymbol.flags |= Flags.PARAMETERIZED;\n+            type.flags |= Flags.PARAMETERIZED;\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public void markParameterizedType(BType enclosingType, Collection<BType> constituentTypes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcyNDAxMw=="}, "originalCommit": {"oid": "28ac1e0d6ff7aa8e058abc48638b499e17518827"}, "originalPosition": 333}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTAxMDE4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMDowODo1NFrOGbudnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMDowNzoyOFrOGcE7Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcyNTk4Mw==", "bodyText": "we can just make this markParameterizedType(tupleType, memberTypes) and call markParameterizedType again when tupleTypeNode.restParamType != null with restParamType\nmarkParameterizedType(tupleType, tupleTypeNode.restParamType).\nWith caching on markParameterizedType we can avoid creating a new ArrayList completely.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23397#discussion_r431725983", "createdAt": "2020-05-28T10:08:54Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1079,14 +1103,19 @@ public void visit(BLangTupleTypeNode tupleTypeNode) {\n         }\n \n         BTypeSymbol tupleTypeSymbol = Symbols.createTypeSymbol(SymTag.TUPLE_TYPE, Flags.asMask(EnumSet.of(Flag.PUBLIC)),\n-                Names.EMPTY, env.enclPkg.symbol.pkgID, null, env.scope.owner);\n+                                                               Names.EMPTY, env.enclPkg.symbol.pkgID, null,\n+                                                               env.scope.owner);\n \n+        List<BType> allMemTypes = new ArrayList<>(memberTypes);\n         BTupleType tupleType = new BTupleType(tupleTypeSymbol, memberTypes);\n         tupleTypeSymbol.type = tupleType;\n-        if (tupleTypeNode.restParamType !=  null) {\n+        if (tupleTypeNode.restParamType != null) {\n             tupleType.restType = resolveTypeNode(tupleTypeNode.restParamType, env);\n+            allMemTypes.add(tupleType.restType);\n         }\n \n+        markParameterizedType(tupleType, allMemTypes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28ac1e0d6ff7aa8e058abc48638b499e17518827"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA5NDAzMA==", "bodyText": "Ah if changing it like this, your previous suggestions to check if it's a parameterized type before looping makes sense. Will change", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23397#discussion_r432094030", "createdAt": "2020-05-28T20:07:28Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1079,14 +1103,19 @@ public void visit(BLangTupleTypeNode tupleTypeNode) {\n         }\n \n         BTypeSymbol tupleTypeSymbol = Symbols.createTypeSymbol(SymTag.TUPLE_TYPE, Flags.asMask(EnumSet.of(Flag.PUBLIC)),\n-                Names.EMPTY, env.enclPkg.symbol.pkgID, null, env.scope.owner);\n+                                                               Names.EMPTY, env.enclPkg.symbol.pkgID, null,\n+                                                               env.scope.owner);\n \n+        List<BType> allMemTypes = new ArrayList<>(memberTypes);\n         BTupleType tupleType = new BTupleType(tupleTypeSymbol, memberTypes);\n         tupleTypeSymbol.type = tupleType;\n-        if (tupleTypeNode.restParamType !=  null) {\n+        if (tupleTypeNode.restParamType != null) {\n             tupleType.restType = resolveTypeNode(tupleTypeNode.restParamType, env);\n+            allMemTypes.add(tupleType.restType);\n         }\n \n+        markParameterizedType(tupleType, allMemTypes);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcyNTk4Mw=="}, "originalCommit": {"oid": "28ac1e0d6ff7aa8e058abc48638b499e17518827"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTAzMzY4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMDoxNTo0MVrOGbusaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMDoxNTo0MVrOGbusaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcyOTc2OQ==", "bodyText": "we can call markParameterizedType(streamType, constraintType) always and only call for error conditionally.\nif (error != null) {\n\tmarkParameterizedType(streamType, error);\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23397#discussion_r431729769", "createdAt": "2020-05-28T10:15:41Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1023,7 +1038,14 @@ public void visit(BLangStreamType streamTypeNode) {\n         BType streamType = new BStreamType(TypeTags.STREAM, constraintType, error, null);\n         BTypeSymbol typeSymbol = type.tsymbol;\n         streamType.tsymbol = Symbols.createTypeSymbol(typeSymbol.tag, typeSymbol.flags, typeSymbol.name,\n-                typeSymbol.pkgID, streamType, typeSymbol.owner);\n+                                                      typeSymbol.pkgID, streamType, typeSymbol.owner);\n+\n+        if (error != null) {\n+            markParameterizedType(streamType, Arrays.asList(constraintType, error));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28ac1e0d6ff7aa8e058abc48638b499e17518827"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTA0NjU2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BParameterizedType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMDoyMDowMVrOGbu03w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMDoyMDowMVrOGbu03w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTczMTkzNQ==", "bodyText": "Change to the name of the param", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23397#discussion_r431731935", "createdAt": "2020-05-28T10:20:01Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BParameterizedType.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.semantics.model.types;\n+\n+import org.wso2.ballerinalang.compiler.semantics.model.TypeVisitor;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BTypeSymbol;\n+import org.wso2.ballerinalang.compiler.semantics.model.symbols.BVarSymbol;\n+import org.wso2.ballerinalang.compiler.util.Name;\n+import org.wso2.ballerinalang.compiler.util.TypeTags;\n+\n+/**\n+ * Represents a parameterized type.\n+ */\n+public class BParameterizedType extends BType {\n+\n+    public BVarSymbol paramSymbol;\n+    public BType paramValueType;\n+\n+    public BParameterizedType(BType valueType, BVarSymbol paramSymbol, BTypeSymbol tSymbol, Name name) {\n+        super(TypeTags.PARAMETERIZED_TYPE, tSymbol);\n+        this.paramSymbol = paramSymbol;\n+        this.paramValueType = valueType;\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public boolean isNullable() {\n+        // TODO: Check what the correct behaviour is for this\n+//        return this.paramSymbol.type.isNullable();\n+        return false;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"<T>\" + this.paramValueType.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28ac1e0d6ff7aa8e058abc48638b499e17518827"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTA2NzE5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMDoyNjoyNlrOGbvB_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMDoxNzoyNlrOGcFPHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTczNTI5NA==", "bodyText": "we can call symResolver.markParameterizedType(recordType, recordType.fields.values()); always and call again for\nsymResolver.markParameterizedType(recordType, recordType.restFieldType); that way we don't need a new array list.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23397#discussion_r431735294", "createdAt": "2020-05-28T10:26:26Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1138,7 +1139,14 @@ private void defineRecordTypeNode(BLangRecordTypeNode recordTypeNode, SymbolEnv\n             return;\n         }\n \n+        List<BType> fieldTypes = new ArrayList<>();\n+        for (BField field : recordType.fields.values()) {\n+            BType type = field.type;\n+            fieldTypes.add(type);\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28ac1e0d6ff7aa8e058abc48638b499e17518827"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA5OTEwMQ==", "bodyText": "recordType.fields.values()\nreturns a collection of BField objects. What I need are the types of those BField objects.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23397#discussion_r432099101", "createdAt": "2020-05-28T20:17:26Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1138,7 +1139,14 @@ private void defineRecordTypeNode(BLangRecordTypeNode recordTypeNode, SymbolEnv\n             return;\n         }\n \n+        List<BType> fieldTypes = new ArrayList<>();\n+        for (BField field : recordType.fields.values()) {\n+            BType type = field.type;\n+            fieldTypes.add(type);\n+        }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTczNTI5NA=="}, "originalCommit": {"oid": "28ac1e0d6ff7aa8e058abc48638b499e17518827"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTA3NzEzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMDoyOTozN1rOGbvIlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMDoyOTozN1rOGbvIlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTczNjk4Mw==", "bodyText": "We can pre-allocate ArrayList with an initialCapacity if neeed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23397#discussion_r431736983", "createdAt": "2020-05-28T10:29:37Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1138,7 +1139,14 @@ private void defineRecordTypeNode(BLangRecordTypeNode recordTypeNode, SymbolEnv\n             return;\n         }\n \n+        List<BType> fieldTypes = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28ac1e0d6ff7aa8e058abc48638b499e17518827"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjY5Nzk1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwODowNjoxN1rOGcS2lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwODowNjoxN1rOGcS2lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMyMjE5OQ==", "bodyText": "@MaryamZi Should I do the same check done a few lines below this (L1272) here as well when logging errors for user defined types?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23397#discussion_r432322199", "createdAt": "2020-05-29T08:06:17Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -1190,8 +1231,35 @@ public void visit(BLangUserDefinedType userDefinedTypeNode) {\n         //    If the package alias is not empty or null, then find the package scope,\n         if (symbol == symTable.notFoundSymbol) {\n             BSymbol tempSymbol = lookupMainSpaceSymbolInPackage(userDefinedTypeNode.pos, env, pkgAlias, typeName);\n+\n             if ((tempSymbol.tag & SymTag.TYPE) == SymTag.TYPE) {\n                 symbol = tempSymbol;\n+            } else if (Symbols.isSymTagOn(tempSymbol, SymTag.VARIABLE) && env.node.getKind() == NodeKind.FUNCTION) {\n+                BLangFunction func = (BLangFunction) env.node;\n+\n+                if (func.returnTypeNode != null && func.hasBody() &&\n+                        func.body.getKind() == NodeKind.EXTERN_FUNCTION_BODY) {\n+                    BType paramValType = getTypedescParamValueType(func.requiredParams, tempSymbol,\n+                                                                   func.returnTypeNode.pos);\n+\n+                    if (paramValType == symTable.semanticError) {\n+                        this.resultType = symTable.semanticError;\n+                        return;\n+                    }\n+\n+                    BTypeSymbol tSymbol = new BTypeSymbol(SymTag.TYPE, Flags.PARAMETERIZED | tempSymbol.flags,\n+                                                          tempSymbol.name, tempSymbol.pkgID, null, func.symbol);\n+                    tSymbol.type = new BParameterizedType(paramValType, (BVarSymbol) tempSymbol,\n+                                                          tSymbol, tempSymbol.name);\n+\n+                    this.resultType = tSymbol.type;\n+                    this.resultType.flags |= Flags.PARAMETERIZED;\n+                    return;\n+                } else {\n+                    dlog.error(userDefinedTypeNode.pos, DiagnosticCode.INVALID_USE_OF_TYPEDESC_PARAM);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28ac1e0d6ff7aa8e058abc48638b499e17518827"}, "originalPosition": 240}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYxOTU3OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/functions/VariableReturnTypesBaloTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1Mjo0OVrOGeFPig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1Mjo0OVrOGeFPig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NjM2Mg==", "bodyText": "Copyright year\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *   Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *   Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23397#discussion_r434196362", "createdAt": "2020-06-02T21:52:49Z", "author": {"login": "dulajdilshan"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/balo/functions/VariableReturnTypesBaloTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ *   Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61fa7ee13f433b13ce564d6728d4b277e6516bd0"}, "originalPosition": 2}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3577, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}