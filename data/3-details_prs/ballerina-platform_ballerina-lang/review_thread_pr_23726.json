{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3Njk2NDUx", "number": 23726, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNDoxMzozNFrOEDS5hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODoxMDo1MlrOEEMCxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODkwODIyOnYy", "diffSide": "RIGHT", "path": "langlib/lang.annotations/src/main/ballerina/src/lang.annotations/annotations.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNDoxMzozNFrOGgOu5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNDoxMzozNFrOGgOu5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ0ODk5Nw==", "bodyText": "Extra new line.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23726#discussion_r436448997", "createdAt": "2020-06-08T04:13:34Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.annotations/src/main/ballerina/src/lang.annotations/annotations.bal", "diffHunk": "@@ -68,3 +68,13 @@ public type StrandData record {|\n # Denotes new Strand execution semantics.\n public const annotation StrandData strand on source worker;\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00ec9bbec685d275ffd505fe8cb6b9d5627bc5da"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODkxMjA4OnYy", "diffSide": "RIGHT", "path": "langlib/lang.annotations/src/main/ballerina/src/lang.annotations/annotations.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNDoxNjoxNlrOGgOxDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNDoxNjoxNlrOGgOxDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ0OTU0OQ==", "bodyText": "Given that this is a public construct, shouldn't we have proper documentation?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23726#discussion_r436449549", "createdAt": "2020-06-08T04:16:16Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.annotations/src/main/ballerina/src/lang.annotations/annotations.bal", "diffHunk": "@@ -68,3 +68,13 @@ public type StrandData record {|\n # Denotes new Strand execution semantics.\n public const annotation StrandData strand on source worker;\n \n+\n+# Icon meta-data for types and functions.\n+#\n+# + path - relative filepath to module resource directory or url path to read the image.\n+public type IconData record {|\n+    string path;\n+|};\n+\n+# icon annotation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00ec9bbec685d275ffd505fe8cb6b9d5627bc5da"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODk1NDAyOnYy", "diffSide": "RIGHT", "path": "langlib/lang.annotations/src/main/ballerina/src/lang.annotations/annotations.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNDo1Mjo0M1rOGgPKNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNDo1Mjo0M1rOGgPKNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1NTk5MA==", "bodyText": "Can we define IconData inline with the annotation?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23726#discussion_r436455990", "createdAt": "2020-06-08T04:52:43Z", "author": {"login": "hasithaa"}, "path": "langlib/lang.annotations/src/main/ballerina/src/lang.annotations/annotations.bal", "diffHunk": "@@ -68,3 +68,13 @@ public type StrandData record {|\n # Denotes new Strand execution semantics.\n public const annotation StrandData strand on source worker;\n \n+\n+# Icon meta-data for types and functions.\n+#\n+# + path - relative filepath to module resource directory or url path to read the image.\n+public type IconData record {|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00ec9bbec685d275ffd505fe8cb6b9d5627bc5da"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDI1NzQ4OnYy", "diffSide": "RIGHT", "path": "langlib/lang.annotations/src/main/ballerina/src/lang.annotations/annotations.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMjo0MToxNVrOGgbv5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzo0MDozNlrOGgel4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY2MjI0NQ==", "bodyText": "For consistency should we say something like\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # This annotation specify icon meta-data about types and functions.\n          \n          \n            \n            # Denotes icon metadata related to types and functions.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23726#discussion_r436662245", "createdAt": "2020-06-08T12:41:15Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.annotations/src/main/ballerina/src/lang.annotations/annotations.bal", "diffHunk": "@@ -68,3 +68,5 @@ public type StrandData record {|\n # Denotes new Strand execution semantics.\n public const annotation StrandData strand on source worker;\n \n+# This annotation specify icon meta-data about types and functions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45b2fb9b64ff83d5fae4c07c3f1dbc7f940927e1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwODgzMg==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23726#discussion_r436708832", "createdAt": "2020-06-08T13:40:36Z", "author": {"login": "rdhananjaya"}, "path": "langlib/lang.annotations/src/main/ballerina/src/lang.annotations/annotations.bal", "diffHunk": "@@ -68,3 +68,5 @@ public type StrandData record {|\n # Denotes new Strand execution semantics.\n public const annotation StrandData strand on source worker;\n \n+# This annotation specify icon meta-data about types and functions.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY2MjI0NQ=="}, "originalCommit": {"oid": "45b2fb9b64ff83d5fae4c07c3f1dbc7f940927e1"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDI2NjA2OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/annotations/icon_annot.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMjo0MzoyOFrOGgb05w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzo0MDoyOVrOGgelqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY2MzUyNw==", "bodyText": "Missing licence headers.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23726#discussion_r436663527", "createdAt": "2020-06-08T12:43:28Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/annotations/icon_annot.bal", "diffHunk": "@@ -0,0 +1,12 @@\n+@icon { path: \"/fooIconPath.icon\" }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45b2fb9b64ff83d5fae4c07c3f1dbc7f940927e1"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwODc3OA==", "bodyText": "Added", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23726#discussion_r436708778", "createdAt": "2020-06-08T13:40:29Z", "author": {"login": "rdhananjaya"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/annotations/icon_annot.bal", "diffHunk": "@@ -0,0 +1,12 @@\n+@icon { path: \"/fooIconPath.icon\" }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY2MzUyNw=="}, "originalCommit": {"oid": "45b2fb9b64ff83d5fae4c07c3f1dbc7f940927e1"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODI3MDc3OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/annotations/IconAnnotationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODoxMDo1MlrOGhpwHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMzozNTozMFrOGh1Heg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk0MDI1NA==", "bodyText": "Should we assert the method attachment too?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23726#discussion_r437940254", "createdAt": "2020-06-10T08:10:52Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/annotations/IconAnnotationTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.test.annotations;\n+\n+import org.ballerinalang.model.tree.AnnotationAttachmentNode;\n+import org.ballerinalang.model.tree.TypeDefinition;\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.ballerinalang.compiler.tree.BLangAnnotationAttachment;\n+import org.wso2.ballerinalang.compiler.tree.BLangFunction;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+\n+import java.util.List;\n+\n+/**\n+ * Class to test icon annotation.\n+ *\n+ * @since 2.0\n+ */\n+public class IconAnnotationTest {\n+\n+    private CompileResult result;\n+    private CompileResult negative;\n+\n+    @BeforeClass\n+    public void setup() {\n+        negative = BCompileUtil.compile(\"test-src/annotations/icon_annot_negative.bal\");\n+        result = BCompileUtil.compile(\"test-src/annotations/icon_annot.bal\");\n+    }\n+\n+    @Test\n+    public void testIconOnFunction() {\n+        BLangFunction fooFunction = (BLangFunction) ((List) ((BLangPackage) result.getAST()).functions).get(0);\n+        BLangAnnotationAttachment annot = (BLangAnnotationAttachment) ((List) fooFunction.annAttachments).get(0);\n+        Assert.assertEquals(annot.expr.toString(), \" {path: /fooIconPath.icon}\");\n+    }\n+\n+    @Test\n+    public void testIconOnObjectAndMemberFunction() {\n+        TypeDefinition objType = result.getAST().getTypeDefinitions().get(0);\n+        List<? extends AnnotationAttachmentNode> objAnnot = objType.getAnnotationAttachments();\n+        Assert.assertEquals(objAnnot.size(), 1);\n+        Assert.assertEquals(objAnnot.get(0).getExpression().toString(), \" {path: /barIconPath.icon}\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a57a147b2d63289c03be3f1c43a74f4e45597f2"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEyNjQ1OA==", "bodyText": "Oh thank you, I was meaning to add that and then forgot, will add asap.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23726#discussion_r438126458", "createdAt": "2020-06-10T13:35:30Z", "author": {"login": "rdhananjaya"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/annotations/IconAnnotationTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.test.annotations;\n+\n+import org.ballerinalang.model.tree.AnnotationAttachmentNode;\n+import org.ballerinalang.model.tree.TypeDefinition;\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2.ballerinalang.compiler.tree.BLangAnnotationAttachment;\n+import org.wso2.ballerinalang.compiler.tree.BLangFunction;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+\n+import java.util.List;\n+\n+/**\n+ * Class to test icon annotation.\n+ *\n+ * @since 2.0\n+ */\n+public class IconAnnotationTest {\n+\n+    private CompileResult result;\n+    private CompileResult negative;\n+\n+    @BeforeClass\n+    public void setup() {\n+        negative = BCompileUtil.compile(\"test-src/annotations/icon_annot_negative.bal\");\n+        result = BCompileUtil.compile(\"test-src/annotations/icon_annot.bal\");\n+    }\n+\n+    @Test\n+    public void testIconOnFunction() {\n+        BLangFunction fooFunction = (BLangFunction) ((List) ((BLangPackage) result.getAST()).functions).get(0);\n+        BLangAnnotationAttachment annot = (BLangAnnotationAttachment) ((List) fooFunction.annAttachments).get(0);\n+        Assert.assertEquals(annot.expr.toString(), \" {path: /fooIconPath.icon}\");\n+    }\n+\n+    @Test\n+    public void testIconOnObjectAndMemberFunction() {\n+        TypeDefinition objType = result.getAST().getTypeDefinitions().get(0);\n+        List<? extends AnnotationAttachmentNode> objAnnot = objType.getAnnotationAttachments();\n+        Assert.assertEquals(objAnnot.size(), 1);\n+        Assert.assertEquals(objAnnot.get(0).getExpression().toString(), \" {path: /barIconPath.icon}\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk0MDI1NA=="}, "originalCommit": {"oid": "7a57a147b2d63289c03be3f1c43a74f4e45597f2"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3443, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}