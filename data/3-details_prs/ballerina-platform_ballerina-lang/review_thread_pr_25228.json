{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2NTQyMDY3", "number": 25228, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNDoyMTo0NVrOEb41Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNDozMjoyM1rOEf0Uow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Njc4MTY3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNDoyMTo0NVrOHGF_KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMTo0OToyM1rOHHIZQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE1MTU5Mw==", "bodyText": "With this change we don't have alternative paths here ryt. Can remove PARAMETER_WITHOUT_ANNOTS as an alternative path and give TYPE_DESC_IN_PARAM as the next rule directly.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25228#discussion_r476151593", "createdAt": "2020-08-25T04:21:45Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -283,10 +283,10 @@\n             { ParserRuleContext.CLOSE_PARENTHESIS, ParserRuleContext.REQUIRED_PARAM };\n \n     private static final ParserRuleContext[] PARAMETER_START =\n-            { ParserRuleContext.ANNOTATIONS, ParserRuleContext.PUBLIC_KEYWORD, ParserRuleContext.TYPE_DESC_IN_PARAM };\n+            { ParserRuleContext.ANNOTATIONS, ParserRuleContext.TYPE_DESC_IN_PARAM };\n \n     private static final ParserRuleContext[] PARAMETER_WITHOUT_ANNOTS =\n-            { ParserRuleContext.PUBLIC_KEYWORD, ParserRuleContext.TYPE_DESC_IN_PARAM };\n+            { ParserRuleContext.TYPE_DESC_IN_PARAM };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d05f1d69f3db38d164ceeebf6623f23e88a1f50a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE4MDQ4Mg==", "bodyText": "+1 will do that", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25228#discussion_r476180482", "createdAt": "2020-08-25T05:08:09Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -283,10 +283,10 @@\n             { ParserRuleContext.CLOSE_PARENTHESIS, ParserRuleContext.REQUIRED_PARAM };\n \n     private static final ParserRuleContext[] PARAMETER_START =\n-            { ParserRuleContext.ANNOTATIONS, ParserRuleContext.PUBLIC_KEYWORD, ParserRuleContext.TYPE_DESC_IN_PARAM };\n+            { ParserRuleContext.ANNOTATIONS, ParserRuleContext.TYPE_DESC_IN_PARAM };\n \n     private static final ParserRuleContext[] PARAMETER_WITHOUT_ANNOTS =\n-            { ParserRuleContext.PUBLIC_KEYWORD, ParserRuleContext.TYPE_DESC_IN_PARAM };\n+            { ParserRuleContext.TYPE_DESC_IN_PARAM };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE1MTU5Mw=="}, "originalCommit": {"oid": "d05f1d69f3db38d164ceeebf6623f23e88a1f50a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIzOTYxOQ==", "bodyText": "Fixdd in 785c34a", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25228#discussion_r477239619", "createdAt": "2020-08-26T11:49:23Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -283,10 +283,10 @@\n             { ParserRuleContext.CLOSE_PARENTHESIS, ParserRuleContext.REQUIRED_PARAM };\n \n     private static final ParserRuleContext[] PARAMETER_START =\n-            { ParserRuleContext.ANNOTATIONS, ParserRuleContext.PUBLIC_KEYWORD, ParserRuleContext.TYPE_DESC_IN_PARAM };\n+            { ParserRuleContext.ANNOTATIONS, ParserRuleContext.TYPE_DESC_IN_PARAM };\n \n     private static final ParserRuleContext[] PARAMETER_WITHOUT_ANNOTS =\n-            { ParserRuleContext.PUBLIC_KEYWORD, ParserRuleContext.TYPE_DESC_IN_PARAM };\n+            { ParserRuleContext.TYPE_DESC_IN_PARAM };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE1MTU5Mw=="}, "originalCommit": {"oid": "d05f1d69f3db38d164ceeebf6623f23e88a1f50a"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzMxNjY4OnYy", "diffSide": "RIGHT", "path": "stdlib/database/sql/src/test/resources/test-module/mock-sql/src/mockclient/resources/Client_functions.json", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNzozMDozMVrOHGLItA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMTo0OToxMVrOHHIYzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIzNTk1Ng==", "bodyText": "Is this file required?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25228#discussion_r476235956", "createdAt": "2020-08-25T07:30:31Z", "author": {"login": "MaryamZi"}, "path": "stdlib/database/sql/src/test/resources/test-module/mock-sql/src/mockclient/resources/Client_functions.json", "diffHunk": "@@ -0,0 +1 @@\n+{\"testorg/mockclient:1.0.0:Client\" : [{\"function\":{\"name\":\"query\",\"requiredParams\":[{\"sqlQuery\":\"(string|ballerina/sql:0.5.0:ParameterizedQuery)\"},{\"rowType\":\"typedesc<record {| anydata...; |}>?\"}],\"returnType\":\"stream\"}},{\"function\":{\"name\":\"execute\",\"requiredParams\":[{\"sqlQuery\":\"(string|ballerina/sql:0.5.0:ParameterizedQuery)\"}],\"returnType\":\"ballerina/sql:0.5.0:ExecutionResult\"}},{\"function\":{\"name\":\"batchExecute\",\"requiredParams\":[{\"sqlQueries\":\"ballerina/sql:0.5.0:ParameterizedQuery[]\"}],\"returnType\":\"ballerina/sql:0.5.0:ExecutionResult[]\"}}]}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d05f1d69f3db38d164ceeebf6623f23e88a1f50a"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE3NDE5Mg==", "bodyText": "This was autogenerated. I'll check if I can remove this", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25228#discussion_r477174192", "createdAt": "2020-08-26T09:43:10Z", "author": {"login": "dulvinw"}, "path": "stdlib/database/sql/src/test/resources/test-module/mock-sql/src/mockclient/resources/Client_functions.json", "diffHunk": "@@ -0,0 +1 @@\n+{\"testorg/mockclient:1.0.0:Client\" : [{\"function\":{\"name\":\"query\",\"requiredParams\":[{\"sqlQuery\":\"(string|ballerina/sql:0.5.0:ParameterizedQuery)\"},{\"rowType\":\"typedesc<record {| anydata...; |}>?\"}],\"returnType\":\"stream\"}},{\"function\":{\"name\":\"execute\",\"requiredParams\":[{\"sqlQuery\":\"(string|ballerina/sql:0.5.0:ParameterizedQuery)\"}],\"returnType\":\"ballerina/sql:0.5.0:ExecutionResult\"}},{\"function\":{\"name\":\"batchExecute\",\"requiredParams\":[{\"sqlQueries\":\"ballerina/sql:0.5.0:ParameterizedQuery[]\"}],\"returnType\":\"ballerina/sql:0.5.0:ExecutionResult[]\"}}]}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIzNTk1Ng=="}, "originalCommit": {"oid": "d05f1d69f3db38d164ceeebf6623f23e88a1f50a"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIzOTUwMg==", "bodyText": "Fixed in 785c34a", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25228#discussion_r477239502", "createdAt": "2020-08-26T11:49:11Z", "author": {"login": "dulvinw"}, "path": "stdlib/database/sql/src/test/resources/test-module/mock-sql/src/mockclient/resources/Client_functions.json", "diffHunk": "@@ -0,0 +1 @@\n+{\"testorg/mockclient:1.0.0:Client\" : [{\"function\":{\"name\":\"query\",\"requiredParams\":[{\"sqlQuery\":\"(string|ballerina/sql:0.5.0:ParameterizedQuery)\"},{\"rowType\":\"typedesc<record {| anydata...; |}>?\"}],\"returnType\":\"stream\"}},{\"function\":{\"name\":\"execute\",\"requiredParams\":[{\"sqlQuery\":\"(string|ballerina/sql:0.5.0:ParameterizedQuery)\"}],\"returnType\":\"ballerina/sql:0.5.0:ExecutionResult\"}},{\"function\":{\"name\":\"batchExecute\",\"requiredParams\":[{\"sqlQueries\":\"ballerina/sql:0.5.0:ParameterizedQuery[]\"}],\"returnType\":\"ballerina/sql:0.5.0:ExecutionResult[]\"}}]}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIzNTk1Ng=="}, "originalCommit": {"oid": "d05f1d69f3db38d164ceeebf6623f23e88a1f50a"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzM0NDExOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNzozODozNlrOHGLZfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjoxNzozNlrOHLdEHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0MDI1Mg==", "bodyText": "Was there something specific that failed, requiring this change?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25228#discussion_r476240252", "createdAt": "2020-08-25T07:38:36Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -1466,6 +1467,10 @@ private void checkForExportableType(BTypeSymbol symbol, DiagnosticPos pos) {\n                 }\n                 checkForExportableType(invokableType.retType.tsymbol, pos);\n                 return;\n+            case TypeTags.PARAMETERIZED_TYPE:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d05f1d69f3db38d164ceeebf6623f23e88a1f50a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE3MzczNg==", "bodyText": "Yes actually. I was getting an error for trying to export a non public symbol for something like\nfunction test(typedesc<object {}> T) returns T {}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25228#discussion_r477173736", "createdAt": "2020-08-26T09:42:24Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -1466,6 +1467,10 @@ private void checkForExportableType(BTypeSymbol symbol, DiagnosticPos pos) {\n                 }\n                 checkForExportableType(invokableType.retType.tsymbol, pos);\n                 return;\n+            case TypeTags.PARAMETERIZED_TYPE:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0MDI1Mg=="}, "originalCommit": {"oid": "d05f1d69f3db38d164ceeebf6623f23e88a1f50a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc3MjU3NA==", "bodyText": "Had an offline discussion with @dulvinw regarding this too, previously typedesc<object {}> T in this same example was marked as a public param, which is why we didn't get the error.\nWe will go ahead with this change.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25228#discussion_r481772574", "createdAt": "2020-09-02T06:17:36Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -1466,6 +1467,10 @@ private void checkForExportableType(BTypeSymbol symbol, DiagnosticPos pos) {\n                 }\n                 checkForExportableType(invokableType.retType.tsymbol, pos);\n                 return;\n+            case TypeTags.PARAMETERIZED_TYPE:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI0MDI1Mg=="}, "originalCommit": {"oid": "d05f1d69f3db38d164ceeebf6623f23e88a1f50a"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjM3NjA3OnYy", "diffSide": "LEFT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjoyNDoxNlrOHLdgJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNzozMDoxMFrOHLgsJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc3OTc1MQ==", "bodyText": "sorry I didn't see this earlier.  Have to remove parsing of public keyword in\nparseParamGivenAnnots(SyntaxKind prevParamKind, STNode annots, boolean isParamNameOptional) method", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25228#discussion_r481779751", "createdAt": "2020-09-02T06:24:16Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1302,7 +1302,6 @@ private STNode parseParameter(SyntaxKind prevParamKind, boolean isParamNameOptio\n             case AT_TOKEN:\n                 annots = parseOptionalAnnotations();\n                 break;\n-            case PUBLIC_KEYWORD:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "711d427a802932711360291d3b6818e7579ed83c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTgzMTk3Mw==", "bodyText": "Will fix this!", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25228#discussion_r481831973", "createdAt": "2020-09-02T07:30:10Z", "author": {"login": "dulvinw"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1302,7 +1302,6 @@ private STNode parseParameter(SyntaxKind prevParamKind, boolean isParamNameOptio\n             case AT_TOKEN:\n                 annots = parseOptionalAnnotations();\n                 break;\n-            case PUBLIC_KEYWORD:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc3OTc1MQ=="}, "originalCommit": {"oid": "711d427a802932711360291d3b6818e7579ed83c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTM0MjkxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzo1MDowMFrOHL6liQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzo1MDowMFrOHL6liQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI1NjI2NQ==", "bodyText": "Since we don't parse any qualifiers here, this method simply does nothing.\n\nCan remove this entire method and direct call parseParamGivenAnnotsAndQualifier() beneath.\nrename: parseParamGivenAnnotsAndQualifier -> parseParamGivenAnnots", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25228#discussion_r482256265", "createdAt": "2020-09-02T17:50:00Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1333,16 +1333,11 @@ private STNode parseParamGivenAnnots(SyntaxKind prevParamKind, STNode annots, bo\n         STNode qualifier;\n         STToken nextToken = peek();\n         switch (nextToken.kind) {\n-            case PUBLIC_KEYWORD:\n-                qualifier = parseQualifier();\n-                break;\n             case IDENTIFIER_TOKEN:\n-                qualifier = STNodeFactory.createEmptyNode();\n                 break;\n             case AT_TOKEN: // Annotations can't reach here\n             default:\n                 if (isTypeStartingToken(nextToken.kind) && nextToken.kind != SyntaxKind.IDENTIFIER_TOKEN) {\n-                    qualifier = STNodeFactory.createEmptyNode();\n                     break;\n                 }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eba9e6d2e3d141e103e640fa406f08549d806a24"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTM1MTQxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzo1MjoyNVrOHL6rOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzo1MjoyNVrOHL6rOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI1NzcyMw==", "bodyText": "Once we remove above mentioned method. We don't need this recovery rule at all.\nCan remove all usages of PARAMETER_WITHOUT_ANNOTS in error handler and remove it from the ParserRuleContex.java as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25228#discussion_r482257723", "createdAt": "2020-09-02T17:52:25Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -2422,6 +2415,8 @@ protected ParserRuleContext getNextRule(ParserRuleContext currentCtx, int nextLo\n             case DOUBLE_SLASH_DOUBLE_ASTERISK_LT_TOKEN:\n             case SLASH_LT_TOKEN:\n                 return ParserRuleContext.XML_NAME_PATTERN;\n+            case PARAMETER_WITHOUT_ANNOTS:\n+                return ParserRuleContext.TYPE_DESC_IN_PARAM;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eba9e6d2e3d141e103e640fa406f08549d806a24"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTM1NTgyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzo1Mzo1MFrOHL6uPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzo1Mzo1MFrOHL6uPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI1ODQ5NQ==", "bodyText": "Update the above doc params for this chage as well", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25228#discussion_r482258495", "createdAt": "2020-09-02T17:53:50Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1436,12 +1430,12 @@ private STNode parseEllipsis() {\n      * @param paramName Name of the parameter\n      * @return Parsed parameter node\n      */\n-    private STNode parseParameterRhs(SyntaxKind prevParamKind, STNode annots, STNode qualifier, STNode type,\n+    private STNode parseParameterRhs(SyntaxKind prevParamKind, STNode annots, STNode type,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eba9e6d2e3d141e103e640fa406f08549d806a24"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNzk4NTYzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNDozMjoyM1rOHMVg9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNDozMjoyM1rOHMVg9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY5NzQ2Mw==", "bodyText": "I think we no longer need this method. We can inline the content.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25228#discussion_r482697463", "createdAt": "2020-09-03T04:32:23Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -1329,54 +1329,21 @@ private STNode parseParameter(SyntaxKind prevParamKind, boolean isParamNameOptio\n         return parseParamGivenAnnots(prevParamKind, annots, isParamNameOptional);\n     }\n \n-    private STNode parseParamGivenAnnots(SyntaxKind prevParamKind, STNode annots, boolean isParamNameOptional) {\n-        STNode qualifier;\n-        STToken nextToken = peek();\n-        switch (nextToken.kind) {\n-            case PUBLIC_KEYWORD:\n-                qualifier = parseQualifier();\n-                break;\n-            case IDENTIFIER_TOKEN:\n-                qualifier = STNodeFactory.createEmptyNode();\n-                break;\n-            case AT_TOKEN: // Annotations can't reach here\n-            default:\n-                if (isTypeStartingToken(nextToken.kind) && nextToken.kind != SyntaxKind.IDENTIFIER_TOKEN) {\n-                    qualifier = STNodeFactory.createEmptyNode();\n-                    break;\n-                }\n-\n-                Solution solution = recover(nextToken, ParserRuleContext.PARAMETER_WITHOUT_ANNOTS, prevParamKind,\n-                        annots, isParamNameOptional);\n+    private STNode parseParamGivenAnnots(SyntaxKind prevParamKind, STNode annots,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "882eb9c1c5f8644befa2b77eb5a7bedb9a8aa1eb"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 377, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}