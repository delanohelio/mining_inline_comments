{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwODQ1NzMy", "number": 25357, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzo0Njo0NVrOEbDcHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwODoyMjoxMlrOEbdOBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODAzMzU3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenCommons.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzo0Njo0NVrOHE18vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzo0Njo0NVrOHE18vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg0MDI1Mg==", "bodyText": "Can we change the class name to something like JvmCodegenUtil ? I think it's more understandable.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25357#discussion_r474840252", "createdAt": "2020-08-21T17:46:45Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCodeGenCommons.java", "diffHunk": "@@ -0,0 +1,546 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.bir.codegen;\n+\n+import org.ballerinalang.compiler.BLangCompilerException;\n+import org.ballerinalang.model.elements.PackageID;\n+import org.objectweb.asm.ClassWriter;\n+import org.objectweb.asm.FieldVisitor;\n+import org.objectweb.asm.Handle;\n+import org.objectweb.asm.Label;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+import org.objectweb.asm.Type;\n+import org.wso2.ballerinalang.compiler.bir.codegen.internal.AsyncDataCollector;\n+import org.wso2.ballerinalang.compiler.bir.codegen.internal.LabelGenerator;\n+import org.wso2.ballerinalang.compiler.bir.codegen.internal.ScheduleFunctionInfo;\n+import org.wso2.ballerinalang.compiler.bir.codegen.interop.InteropMethodGen;\n+import org.wso2.ballerinalang.compiler.bir.codegen.interop.JType;\n+import org.wso2.ballerinalang.compiler.bir.codegen.interop.JTypeTags;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRInstruction;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRNode;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.compiler.util.Name;\n+import org.wso2.ballerinalang.compiler.util.ResolvedTypeBuilder;\n+import org.wso2.ballerinalang.compiler.util.TypeTags;\n+import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n+import org.wso2.ballerinalang.util.Flags;\n+\n+import java.util.List;\n+\n+import static org.objectweb.asm.Opcodes.AASTORE;\n+import static org.objectweb.asm.Opcodes.ALOAD;\n+import static org.objectweb.asm.Opcodes.ANEWARRAY;\n+import static org.objectweb.asm.Opcodes.BIPUSH;\n+import static org.objectweb.asm.Opcodes.DUP;\n+import static org.objectweb.asm.Opcodes.GOTO;\n+import static org.objectweb.asm.Opcodes.ICONST_0;\n+import static org.objectweb.asm.Opcodes.ICONST_1;\n+import static org.objectweb.asm.Opcodes.IFNE;\n+import static org.objectweb.asm.Opcodes.INVOKESPECIAL;\n+import static org.objectweb.asm.Opcodes.INVOKEVIRTUAL;\n+import static org.objectweb.asm.Opcodes.NEW;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.ARRAY_VALUE;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.BAL_EXTENSION;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.BTYPE;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.B_STRING_VALUE;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.CHANNEL_DETAILS;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.CONSTRUCTOR_INIT_METHOD;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.DECIMAL_VALUE;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.ERROR_VALUE;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.FILE_NAME_PERIOD_SEPERATOR;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.FUNCTION;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.FUNCTION_POINTER;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.FUTURE_VALUE;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.HANDLE_VALUE;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.JAVA_PACKAGE_SEPERATOR;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.JVM_INIT_METHOD;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.MAP_VALUE;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.OBJECT;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.OBJECT_VALUE;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.STRAND_CLASS;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.STRAND_METADATA;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.STRAND_METADATA_VAR_PREFIX;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.STREAM_VALUE;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.STRING_VALUE;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.TABLE_VALUE_IMPL;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.TYPEDESC_VALUE;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.WINDOWS_PATH_SEPERATOR;\n+import static org.wso2.ballerinalang.compiler.bir.codegen.JvmConstants.XML_VALUE;\n+\n+/**\n+ * The common functions used in CodeGen.\n+ */\n+public class JvmCodeGenCommons {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4f1c6591e04f89e8a6586c9bdac15d068a223c"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODA1OTA3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmErrorGen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzo1NTowMVrOHE2MiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjowODowNFrOHFsD4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg0NDI5Ng==", "bodyText": "Is this indentation correct? I checked with WSO2 checkstyle it was like this.\n                this.mv.visitMethodInsn(INVOKESTATIC, BAL_ERRORS, \"createInteropError\",\n                        String.format(\"(L%s;)L%s;\", THROWABLE, ERROR_VALUE), false);\nSame happens in many other places.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25357#discussion_r474844296", "createdAt": "2020-08-21T17:55:01Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmErrorGen.java", "diffHunk": "@@ -104,10 +101,11 @@ void generateTryCatch(BIRNode.BIRFunction func, String funcName, BIRNode.BIRBasi\n                 this.mv.visitTryCatchBlock(startLabel, endLabel, errorValueLabel, catchIns.errorClass);\n                 this.mv.visitLabel(errorValueLabel);\n                 this.mv.visitMethodInsn(INVOKESTATIC, BAL_ERRORS, \"createInteropError\", String.format(\"(L%s;)L%s;\",\n-                        THROWABLE, ERROR_VALUE), false);\n-                jvmInstructionGen.generateVarStore(this.mv, retVarDcl, this.currentPackageName, retIndex);\n-                BIRTerminator.Return term = catchIns.term;\n-                termGen.genReturnTerm(term, retIndex, func);\n+                                                                                                      THROWABLE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4f1c6591e04f89e8a6586c9bdac15d068a223c"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcyNjgxNg==", "bodyText": "It is about where we put the new line and then formatter does the rest \ud83d\ude42", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25357#discussion_r475726816", "createdAt": "2020-08-24T16:08:04Z", "author": {"login": "riyafa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmErrorGen.java", "diffHunk": "@@ -104,10 +101,11 @@ void generateTryCatch(BIRNode.BIRFunction func, String funcName, BIRNode.BIRBasi\n                 this.mv.visitTryCatchBlock(startLabel, endLabel, errorValueLabel, catchIns.errorClass);\n                 this.mv.visitLabel(errorValueLabel);\n                 this.mv.visitMethodInsn(INVOKESTATIC, BAL_ERRORS, \"createInteropError\", String.format(\"(L%s;)L%s;\",\n-                        THROWABLE, ERROR_VALUE), false);\n-                jvmInstructionGen.generateVarStore(this.mv, retVarDcl, this.currentPackageName, retIndex);\n-                BIRTerminator.Return term = catchIns.term;\n-                termGen.genReturnTerm(term, retIndex, func);\n+                                                                                                      THROWABLE,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg0NDI5Ng=="}, "originalCommit": {"oid": "3d4f1c6591e04f89e8a6586c9bdac15d068a223c"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjI1NzMzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCheckNotNull.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwODoyMjoxMlrOHFZbVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwODoyMjoxMlrOHFZbVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQyMTUyNQ==", "bodyText": "This class in not needed as discussed during the review. We can directly access all these variables without null checks now.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25357#discussion_r475421525", "createdAt": "2020-08-24T08:22:12Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmCheckNotNull.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.bir.codegen;\n+\n+import org.ballerinalang.compiler.BLangCompilerException;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRNode;\n+import org.wso2.ballerinalang.compiler.bir.model.BIROperand;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BField;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+\n+import java.util.List;\n+\n+/**\n+ * The common functions used in CodeGen.\n+ */\n+public class JvmCheckNotNull {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4f1c6591e04f89e8a6586c9bdac15d068a223c"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 258, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}