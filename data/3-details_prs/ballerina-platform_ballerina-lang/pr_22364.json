{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2Nzk1NDE2", "number": 22364, "title": "[1.2.2] Fix hasfiller value for BFiniteType created for const literals", "bodyText": "Purpose\nBFiniteType were compared using == operator in BSameTypeVisitor. This fails to identify that two BFiniteTypes belong to the same type (eg: int). Due to this reason sample code fails to compile. Failing condition is that a union must have a single basic type for all of its members to have a filler value.\nFixes #21251\nApproach\nBFiniteTypes value space is flattened recursively and passed to BSameTypeVisitor.\nSamples\nconst FOO = 0;\ntype Bar FOO|1;\npublic function main() {\n    Bar[2] x = [];\n}\nList expression now supports this syntax..\nRemarks\n\nList any other known issues, related PRs, TODO items, or any other notes related to the PR.\n#22403\n\nconst FOO_ZERO = 0;\ntype FOO_FOUR_THREE  4 | 3;\ntype BarMultiple FOO_ZERO | 1 | FOO_FOUR_THREE;\nfunction createMultipleConstLiteralAutoFilledSealedArray() {\n    BarMultiple a = 1;\n    BarMultiple[5] sealedArray = [a, a];\n    sealedArray[3] = a;\n    //assertEqualPanic(0, sealedArray[2]); \n}\nThe compiler still fails to fill arrays with valid values for complex unions. In above code array index 2 is not filled with any value.\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-04-01T06:51:54Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364", "merged": true, "mergeCommit": {"oid": "fc81631405e3030eb43cf72519761ebcfba0ccc5"}, "closed": true, "closedAt": "2020-04-16T04:48:11Z", "author": {"login": "KRVPerera"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTWGPJAFqTM4NTQ5OTg0Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYFQs9AFqTM5NDI5NTY0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NDk5ODQ2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#pullrequestreview-385499846", "createdAt": "2020-04-01T11:35:21Z", "commit": {"oid": "bb1490a02551cc272f92c2020674c1d4931eec49"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTozNToyMVrOF-8kxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTozNToyMVrOF-8kxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0ODQ4Nw==", "bodyText": "Do we have an issue to track this?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r401548487", "createdAt": "2020-04-01T11:35:21Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/arrays/array_fill_runtime_test.bal", "diffHunk": "@@ -106,13 +106,28 @@ function testTwoDimensionalSealedArrayFill() {\n     }\n }\n \n+const FOO_ZERO = 0;\n+type FOO_FOUR_THREE  4 | 3;\n+type BarMultiple FOO_ZERO | 1 | FOO_FOUR_THREE;\n+function createMultipleConstLiteralAutoFilledSealedArray() {\n+    BarMultiple a = 1;\n+    BarMultiple[5] sealedArray = [a, a];\n+    sealedArray[3] = a;\n+    assertEqualPanic(1, sealedArray[0]);\n+    assertEqualPanic(1, sealedArray[1]);\n+    // TODO : enable this after fixing - does not get filled", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb1490a02551cc272f92c2020674c1d4931eec49"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NTEzODU0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#pullrequestreview-385513854", "createdAt": "2020-04-01T11:57:25Z", "commit": {"oid": "bb1490a02551cc272f92c2020674c1d4931eec49"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo1NzoyNlrOF-9P8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo1NzoyNlrOF-9P8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1OTUzNg==", "bodyText": "Where do we do the check too see if the filler value is part of this type?\ne.g.,\nconst FOO = 1;\ntype Bar FOO | 2;\n\npublic function main() {\n    Bar[2] b = [];\n}\nDoes this result in an error?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r401559536", "createdAt": "2020-04-01T11:57:26Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2904,14 +2904,35 @@ private boolean checkFillerValue(BUnionType type) {\n         if (type.isNullable()) {\n             return true;\n         }\n-        Iterator<BType> iterator = type.getMemberTypes().iterator();\n+        Set<BType> memberTypes = new HashSet<>();\n+        boolean hasFillerValue = false;\n+        for (BType member : type.getMemberTypes()) {\n+            if (member.tag == TypeTags.FINITE) {\n+                Set<BType> uniqueValues = getUniqueValues((BFiniteType) member);\n+                memberTypes.addAll(uniqueValues);\n+            } else {\n+                memberTypes.add(member);\n+            }\n+            if (!hasFillerValue && hasFillerValue(member)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb1490a02551cc272f92c2020674c1d4931eec49"}, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "41ae36005fc63e09d9c63bcf6f14af7634f495f9", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/41ae36005fc63e09d9c63bcf6f14af7634f495f9", "committedDate": "2020-04-01T15:38:22Z", "message": "Add default filler value check for const unions\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}, "afterCommit": {"oid": "7d1af4f2e99bddf15bf84616c1a81a4eabcbb7e7", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7d1af4f2e99bddf15bf84616c1a81a4eabcbb7e7", "committedDate": "2020-04-01T17:51:16Z", "message": "Add default filler value check for const unions\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bbf9fca29f982086723cf66a2749d9c32b1a088", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1bbf9fca29f982086723cf66a2749d9c32b1a088", "committedDate": "2020-04-01T17:56:06Z", "message": "Add test cases for union filling\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0b9db3c67d0ff20085f0cbed83217316c383cf5", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e0b9db3c67d0ff20085f0cbed83217316c383cf5", "committedDate": "2020-04-01T17:56:06Z", "message": "Fix list-expr filler value check for Union\n\nConst Types or singleton values were comparison does not check the type\nbut does a `==` check for BFiniteType.\n\nNow filler value check will specially handle Unions with BFiniteType.\nIts Types will be flattened and collected together and check for is same\ntype on the collected list. Default filler value check still process\nBFiniteType without flattening it.\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec98cb9412edb39d4798a8a8c53907d1c56cd262", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ec98cb9412edb39d4798a8a8c53907d1c56cd262", "committedDate": "2020-04-01T17:56:06Z", "message": "Fix code formatting suggestions in code review\n\nRemoved recursive finite flattening as bad logic. Refactor variable\nnames for clarity. Revert unwanted code changes.\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc01f3cb3897fb7872c2f5936ae277c6c0eaafa9", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cc01f3cb3897fb7872c2f5936ae277c6c0eaafa9", "committedDate": "2020-04-01T17:56:06Z", "message": "Add default filler value check for const unions\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7d1af4f2e99bddf15bf84616c1a81a4eabcbb7e7", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7d1af4f2e99bddf15bf84616c1a81a4eabcbb7e7", "committedDate": "2020-04-01T17:51:16Z", "message": "Add default filler value check for const unions\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}, "afterCommit": {"oid": "cc01f3cb3897fb7872c2f5936ae277c6c0eaafa9", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cc01f3cb3897fb7872c2f5936ae277c6c0eaafa9", "committedDate": "2020-04-01T17:56:06Z", "message": "Add default filler value check for const unions\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16ce65fbbdb0b13aa2c987d523eeca42cdf89aeb", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/16ce65fbbdb0b13aa2c987d523eeca42cdf89aeb", "committedDate": "2020-04-01T18:20:45Z", "message": "Fix code style\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NzcwNDcx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#pullrequestreview-385770471", "createdAt": "2020-04-01T16:51:42Z", "commit": {"oid": "41ae36005fc63e09d9c63bcf6f14af7634f495f9"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjo1MTo0MlrOF_Jpmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTozNDozN1rOF_PmLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc2MjcxNA==", "bodyText": "I think we should rename this to hasFillerValue and isImplicitDefaultValue to isFillerValue.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r401762714", "createdAt": "2020-04-01T16:51:42Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2900,18 +2900,59 @@ private boolean checkFillerValue(BFiniteType type) {\n         return defaultFillValuePresent;\n     }\n \n+    private boolean hasImplicitDefaultValue(BFiniteType finiteType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41ae36005fc63e09d9c63bcf6f14af7634f495f9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgxOTE2Mg==", "bodyText": "We could change the parameter to Set<BLangExpression> instead to avoid ambiguity.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r401819162", "createdAt": "2020-04-01T18:23:27Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2900,18 +2900,59 @@ private boolean checkFillerValue(BFiniteType type) {\n         return defaultFillValuePresent;\n     }\n \n+    private boolean hasImplicitDefaultValue(BFiniteType finiteType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc2MjcxNA=="}, "originalCommit": {"oid": "41ae36005fc63e09d9c63bcf6f14af7634f495f9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg1MDQxNA==", "bodyText": "Shouldn't this be\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    boolean valueTypePresent = false;\n          \n          \n            \n                    boolean finiteTypePresent = false;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r401850414", "createdAt": "2020-04-01T19:16:52Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2900,18 +2900,63 @@ private boolean checkFillerValue(BFiniteType type) {\n         return defaultFillValuePresent;\n     }\n \n+    private boolean hasImplicitDefaultValue(BFiniteType finiteType) {\n+        for (BLangExpression expression : finiteType.getValueSpace()) {\n+            if (isImplicitDefaultValue(expression)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n     private boolean checkFillerValue(BUnionType type) {\n         if (type.isNullable()) {\n             return true;\n         }\n-        Iterator<BType> iterator = type.getMemberTypes().iterator();\n+\n+        Set<BType> memberTypes = new HashSet<>();\n+        boolean hasFillerValue = false;\n+        boolean defaultValuePresent = false;\n+        boolean valueTypePresent = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ce65fbbdb0b13aa2c987d523eeca42cdf89aeb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg1MTk4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Set<BType> getUniqueValues(BFiniteType member) {\n          \n          \n            \n                private Set<BType> getValueTypes(Set<BLangExpression> valueSpace) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r401851983", "createdAt": "2020-04-01T19:19:47Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2900,18 +2900,63 @@ private boolean checkFillerValue(BFiniteType type) {\n         return defaultFillValuePresent;\n     }\n \n+    private boolean hasImplicitDefaultValue(BFiniteType finiteType) {\n+        for (BLangExpression expression : finiteType.getValueSpace()) {\n+            if (isImplicitDefaultValue(expression)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n     private boolean checkFillerValue(BUnionType type) {\n         if (type.isNullable()) {\n             return true;\n         }\n-        Iterator<BType> iterator = type.getMemberTypes().iterator();\n+\n+        Set<BType> memberTypes = new HashSet<>();\n+        boolean hasFillerValue = false;\n+        boolean defaultValuePresent = false;\n+        boolean valueTypePresent = false;\n+        for (BType member : type.getMemberTypes()) {\n+            if (member.tag == TypeTags.FINITE) {\n+                Set<BType> uniqueValues = getUniqueValues((BFiniteType) member);\n+                memberTypes.addAll(uniqueValues);\n+                if (!defaultValuePresent && hasImplicitDefaultValue((BFiniteType) member)) {\n+                    defaultValuePresent = true;\n+                }\n+                valueTypePresent = true;\n+            } else {\n+                memberTypes.add(member);\n+            }\n+            if (!hasFillerValue && hasFillerValue(member)) {\n+                hasFillerValue = true;\n+            }\n+        }\n+        if (!hasFillerValue) {\n+            return false;\n+        }\n+\n+        Iterator<BType> iterator = memberTypes.iterator();\n         BType firstMember = iterator.next();\n         while (iterator.hasNext()) {\n             if (!isSameType(firstMember, iterator.next())) {\n                 return false;\n             }\n         }\n-        return isValueType(firstMember) && hasFillerValue(firstMember);\n+\n+        if (valueTypePresent) {\n+            return defaultValuePresent;\n+        }\n+        return false;\n+    }\n+\n+    private Set<BType> getUniqueValues(BFiniteType member) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ce65fbbdb0b13aa2c987d523eeca42cdf89aeb"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg1OTk2OA==", "bodyText": "Not sure if this is correct.\nConsider something like\nconst FOO = 1;\n\ntype Bar int|FOO; // We currently allow this\n\npublic function main() {\n    Bar[2] x = [];\n}\nDoes this work with the current logic?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r401859968", "createdAt": "2020-04-01T19:34:16Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2900,18 +2900,63 @@ private boolean checkFillerValue(BFiniteType type) {\n         return defaultFillValuePresent;\n     }\n \n+    private boolean hasImplicitDefaultValue(BFiniteType finiteType) {\n+        for (BLangExpression expression : finiteType.getValueSpace()) {\n+            if (isImplicitDefaultValue(expression)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n     private boolean checkFillerValue(BUnionType type) {\n         if (type.isNullable()) {\n             return true;\n         }\n-        Iterator<BType> iterator = type.getMemberTypes().iterator();\n+\n+        Set<BType> memberTypes = new HashSet<>();\n+        boolean hasFillerValue = false;\n+        boolean defaultValuePresent = false;\n+        boolean valueTypePresent = false;\n+        for (BType member : type.getMemberTypes()) {\n+            if (member.tag == TypeTags.FINITE) {\n+                Set<BType> uniqueValues = getUniqueValues((BFiniteType) member);\n+                memberTypes.addAll(uniqueValues);\n+                if (!defaultValuePresent && hasImplicitDefaultValue((BFiniteType) member)) {\n+                    defaultValuePresent = true;\n+                }\n+                valueTypePresent = true;\n+            } else {\n+                memberTypes.add(member);\n+            }\n+            if (!hasFillerValue && hasFillerValue(member)) {\n+                hasFillerValue = true;\n+            }\n+        }\n+        if (!hasFillerValue) {\n+            return false;\n+        }\n+\n+        Iterator<BType> iterator = memberTypes.iterator();\n         BType firstMember = iterator.next();\n         while (iterator.hasNext()) {\n             if (!isSameType(firstMember, iterator.next())) {\n                 return false;\n             }\n         }\n-        return isValueType(firstMember) && hasFillerValue(firstMember);\n+\n+        if (valueTypePresent) {\n+            return defaultValuePresent;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ce65fbbdb0b13aa2c987d523eeca42cdf89aeb"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg2MDE0Mg==", "bodyText": "Since it's not really unique and we get the types.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r401860142", "createdAt": "2020-04-01T19:34:37Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2900,18 +2900,63 @@ private boolean checkFillerValue(BFiniteType type) {\n         return defaultFillValuePresent;\n     }\n \n+    private boolean hasImplicitDefaultValue(BFiniteType finiteType) {\n+        for (BLangExpression expression : finiteType.getValueSpace()) {\n+            if (isImplicitDefaultValue(expression)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n     private boolean checkFillerValue(BUnionType type) {\n         if (type.isNullable()) {\n             return true;\n         }\n-        Iterator<BType> iterator = type.getMemberTypes().iterator();\n+\n+        Set<BType> memberTypes = new HashSet<>();\n+        boolean hasFillerValue = false;\n+        boolean defaultValuePresent = false;\n+        boolean valueTypePresent = false;\n+        for (BType member : type.getMemberTypes()) {\n+            if (member.tag == TypeTags.FINITE) {\n+                Set<BType> uniqueValues = getUniqueValues((BFiniteType) member);\n+                memberTypes.addAll(uniqueValues);\n+                if (!defaultValuePresent && hasImplicitDefaultValue((BFiniteType) member)) {\n+                    defaultValuePresent = true;\n+                }\n+                valueTypePresent = true;\n+            } else {\n+                memberTypes.add(member);\n+            }\n+            if (!hasFillerValue && hasFillerValue(member)) {\n+                hasFillerValue = true;\n+            }\n+        }\n+        if (!hasFillerValue) {\n+            return false;\n+        }\n+\n+        Iterator<BType> iterator = memberTypes.iterator();\n         BType firstMember = iterator.next();\n         while (iterator.hasNext()) {\n             if (!isSameType(firstMember, iterator.next())) {\n                 return false;\n             }\n         }\n-        return isValueType(firstMember) && hasFillerValue(firstMember);\n+\n+        if (valueTypePresent) {\n+            return defaultValuePresent;\n+        }\n+        return false;\n+    }\n+\n+    private Set<BType> getUniqueValues(BFiniteType member) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg1MTk4Mw=="}, "originalCommit": {"oid": "16ce65fbbdb0b13aa2c987d523eeca42cdf89aeb"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1ODkwNjQ5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#pullrequestreview-385890649", "createdAt": "2020-04-01T19:36:52Z", "commit": {"oid": "16ce65fbbdb0b13aa2c987d523eeca42cdf89aeb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTozNjo1M1rOF_PqxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTozNjo1M1rOF_PqxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg2MTMxNw==", "bodyText": "Is it correct to return false here?\nI don't think the following will work.\nimport ballerina/lang.'int;\n\npublic function main() {\n    ('int:Unsigned16|'int:Signed32)[2] x = [];\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r401861317", "createdAt": "2020-04-01T19:36:53Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2900,18 +2900,63 @@ private boolean checkFillerValue(BFiniteType type) {\n         return defaultFillValuePresent;\n     }\n \n+    private boolean hasImplicitDefaultValue(BFiniteType finiteType) {\n+        for (BLangExpression expression : finiteType.getValueSpace()) {\n+            if (isImplicitDefaultValue(expression)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n     private boolean checkFillerValue(BUnionType type) {\n         if (type.isNullable()) {\n             return true;\n         }\n-        Iterator<BType> iterator = type.getMemberTypes().iterator();\n+\n+        Set<BType> memberTypes = new HashSet<>();\n+        boolean hasFillerValue = false;\n+        boolean defaultValuePresent = false;\n+        boolean valueTypePresent = false;\n+        for (BType member : type.getMemberTypes()) {\n+            if (member.tag == TypeTags.FINITE) {\n+                Set<BType> uniqueValues = getUniqueValues((BFiniteType) member);\n+                memberTypes.addAll(uniqueValues);\n+                if (!defaultValuePresent && hasImplicitDefaultValue((BFiniteType) member)) {\n+                    defaultValuePresent = true;\n+                }\n+                valueTypePresent = true;\n+            } else {\n+                memberTypes.add(member);\n+            }\n+            if (!hasFillerValue && hasFillerValue(member)) {\n+                hasFillerValue = true;\n+            }\n+        }\n+        if (!hasFillerValue) {\n+            return false;\n+        }\n+\n+        Iterator<BType> iterator = memberTypes.iterator();\n         BType firstMember = iterator.next();\n         while (iterator.hasNext()) {\n             if (!isSameType(firstMember, iterator.next())) {\n                 return false;\n             }\n         }\n-        return isValueType(firstMember) && hasFillerValue(firstMember);\n+\n+        if (valueTypePresent) {\n+            return defaultValuePresent;\n+        }\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ce65fbbdb0b13aa2c987d523eeca42cdf89aeb"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc5dece215314c10c8dd1d50a36e13b30b82f0be", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fc5dece215314c10c8dd1d50a36e13b30b82f0be", "committedDate": "2020-04-02T02:57:17Z", "message": "Update compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2d8c6eda4c5bf9299809dc1346674e7f544f16a", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e2d8c6eda4c5bf9299809dc1346674e7f544f16a", "committedDate": "2020-04-02T03:03:57Z", "message": "Add test int literal int - filler value check\n[no ci]\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e204e37f0cb39e534375782185c0cc2d62c7ccb", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0e204e37f0cb39e534375782185c0cc2d62c7ccb", "committedDate": "2020-04-02T03:17:29Z", "message": "Code refactor hasFillerValue area\n[no ci]\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4851bef73673493edc99bbdb2d055a9d5ef9d2dc", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4851bef73673493edc99bbdb2d055a9d5ef9d2dc", "committedDate": "2020-04-02T03:37:09Z", "message": "Add int subtype union\n[ci skip]\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ed2d038973eeb64c16376c3da227cd3cf092afa", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3ed2d038973eeb64c16376c3da227cd3cf092afa", "committedDate": "2020-04-02T03:42:30Z", "message": "Fix int subtype union filler value check issue\n[ci skip]\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d66676aaba73007e195149341758209710f41acb", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d66676aaba73007e195149341758209710f41acb", "committedDate": "2020-04-02T07:06:52Z", "message": "Add mistakenly removed test cases\n[ci skip]\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a88df61403faefa21fcc66a2ff65ebb348e4f63a", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a88df61403faefa21fcc66a2ff65ebb348e4f63a", "committedDate": "2020-04-02T08:28:21Z", "message": "Add integer,string,xml subtypes filler value check\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a223fbf7b069f39067a1de97f9c8eba06212d7c", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2a223fbf7b069f39067a1de97f9c8eba06212d7c", "committedDate": "2020-04-02T08:56:58Z", "message": "Remove xml subtypes and byte string\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53973e25277791c9fa76fff5ce907a7b6ea6e8c5", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/53973e25277791c9fa76fff5ce907a7b6ea6e8c5", "committedDate": "2020-04-02T09:29:22Z", "message": "Code style fix\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff1ac4aa180aa3bfb06a84b9311f2d3968398f77", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ff1ac4aa180aa3bfb06a84b9311f2d3968398f77", "committedDate": "2020-04-02T10:58:52Z", "message": "Enable createSealedArraysOfIntSubtypes test case\n\nSigned-off-by: KRVPerera <rukshan.viduranga@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMTk1ODAz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#pullrequestreview-390195803", "createdAt": "2020-04-08T17:46:10Z", "commit": {"oid": "ff1ac4aa180aa3bfb06a84b9311f2d3968398f77"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzo0NjoxMFrOGC6JjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzo0NjoxMFrOGC6JjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwMzA1Mw==", "bodyText": "@KRVPerera, @rdhananjaya did we clarify/follow up on the concerns we had regarding filler values for XML?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#discussion_r405703053", "createdAt": "2020-04-08T17:46:10Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2842,6 +2842,14 @@ public boolean hasFillerValue(BType type) {\n                 BTupleType tupleType = (BTupleType) type;\n                 return tupleType.getTupleTypes().stream().allMatch(eleType -> hasFillerValue(eleType));\n             default:\n+                // filler value is 0\n+                if (TypeTags.isIntegerTypeTag(type.tag)) {\n+                    return true;\n+                }\n+                // TODO : clarify", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff1ac4aa180aa3bfb06a84b9311f2d3968398f77"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "892dc142e3a2f3308f0ef9cddd3bfb4d982e2c25", "author": {"user": {"login": "KRVPerera", "name": "Rukshan Perera"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/892dc142e3a2f3308f0ef9cddd3bfb4d982e2c25", "committedDate": "2020-04-15T06:30:38Z", "message": "Remove xml subtype commented filler value code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0Mjk1NjQx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22364#pullrequestreview-394295641", "createdAt": "2020-04-16T04:48:02Z", "commit": {"oid": "892dc142e3a2f3308f0ef9cddd3bfb4d982e2c25"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4123, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}