{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0OTI2Njkw", "number": 27401, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMzoxMjoyN1rOFDP5Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMzozMjozMVrOFDQNPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTUwNDMxOnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/BallerinaTextDocumentService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMzoxMjoyN1rOICzg2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzo1MjozNFrOIDKRUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgxMjA1OQ==", "bodyText": "Let's remove this variable and when we need to return an empty list, use Collections.emptyList() API", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27401#discussion_r539812059", "createdAt": "2020-12-10T03:12:27Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/BallerinaTextDocumentService.java", "diffHunk": "@@ -510,4 +514,30 @@ public void didClose(DidCloseTextDocumentParams params) {\n     @Override\n     public void didSave(DidSaveTextDocumentParams params) {\n     }\n+\n+    @JsonRequest\n+    public CompletableFuture<List<FoldingRange>> foldingRange(FoldingRangeRequestParams params) {\n+        return CompletableFuture.supplyAsync(() -> {\n+            List<FoldingRange> emptyFoldingRangeList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cdcf6054974d4b87c15e8e1754e559a311cdcd3"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE4NDkxNA==", "bodyText": "Updated.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27401#discussion_r540184914", "createdAt": "2020-12-10T13:52:34Z", "author": {"login": "prabushi"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/BallerinaTextDocumentService.java", "diffHunk": "@@ -510,4 +514,30 @@ public void didClose(DidCloseTextDocumentParams params) {\n     @Override\n     public void didSave(DidSaveTextDocumentParams params) {\n     }\n+\n+    @JsonRequest\n+    public CompletableFuture<List<FoldingRange>> foldingRange(FoldingRangeRequestParams params) {\n+        return CompletableFuture.supplyAsync(() -> {\n+            List<FoldingRange> emptyFoldingRangeList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgxMjA1OQ=="}, "originalCommit": {"oid": "6cdcf6054974d4b87c15e8e1754e559a311cdcd3"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTUwNjU3OnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/BallerinaTextDocumentService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMzoxMzoyNFrOICziIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzo1Mjo0MFrOIDKRoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgxMjM4Ng==", "bodyText": "With the new project API based implementation changes we don't need isCachedExternalSource check", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27401#discussion_r539812386", "createdAt": "2020-12-10T03:13:24Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/BallerinaTextDocumentService.java", "diffHunk": "@@ -510,4 +514,30 @@ public void didClose(DidCloseTextDocumentParams params) {\n     @Override\n     public void didSave(DidSaveTextDocumentParams params) {\n     }\n+\n+    @JsonRequest\n+    public CompletableFuture<List<FoldingRange>> foldingRange(FoldingRangeRequestParams params) {\n+        return CompletableFuture.supplyAsync(() -> {\n+            List<FoldingRange> emptyFoldingRangeList = new ArrayList<>();\n+            String fileUri = params.getTextDocument().getUri();\n+            Optional<Path> filePath = CommonUtil.getPathFromURI(fileUri);\n+            if (filePath.isEmpty() || CommonUtil.isCachedExternalSource(fileUri)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cdcf6054974d4b87c15e8e1754e559a311cdcd3"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE4NDk5Mw==", "bodyText": "Updated.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27401#discussion_r540184993", "createdAt": "2020-12-10T13:52:40Z", "author": {"login": "prabushi"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/BallerinaTextDocumentService.java", "diffHunk": "@@ -510,4 +514,30 @@ public void didClose(DidCloseTextDocumentParams params) {\n     @Override\n     public void didSave(DidSaveTextDocumentParams params) {\n     }\n+\n+    @JsonRequest\n+    public CompletableFuture<List<FoldingRange>> foldingRange(FoldingRangeRequestParams params) {\n+        return CompletableFuture.supplyAsync(() -> {\n+            List<FoldingRange> emptyFoldingRangeList = new ArrayList<>();\n+            String fileUri = params.getTextDocument().getUri();\n+            Optional<Path> filePath = CommonUtil.getPathFromURI(fileUri);\n+            if (filePath.isEmpty() || CommonUtil.isCachedExternalSource(fileUri)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgxMjM4Ng=="}, "originalCommit": {"oid": "6cdcf6054974d4b87c15e8e1754e559a311cdcd3"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTUxMjY4OnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/BallerinaTextDocumentService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMzoxNTo1MVrOICzlXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzo1Mjo0NlrOIDKR4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgxMzIxNQ==", "bodyText": "Without accessing the document at this point, let's create a context and pass the context to FoldingRangeProvider.getFoldingRange API. then all the calculations can be carry out within the API", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27401#discussion_r539813215", "createdAt": "2020-12-10T03:15:51Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/BallerinaTextDocumentService.java", "diffHunk": "@@ -510,4 +514,30 @@ public void didClose(DidCloseTextDocumentParams params) {\n     @Override\n     public void didSave(DidSaveTextDocumentParams params) {\n     }\n+\n+    @JsonRequest\n+    public CompletableFuture<List<FoldingRange>> foldingRange(FoldingRangeRequestParams params) {\n+        return CompletableFuture.supplyAsync(() -> {\n+            List<FoldingRange> emptyFoldingRangeList = new ArrayList<>();\n+            String fileUri = params.getTextDocument().getUri();\n+            Optional<Path> filePath = CommonUtil.getPathFromURI(fileUri);\n+            if (filePath.isEmpty() || CommonUtil.isCachedExternalSource(fileUri)) {\n+                return emptyFoldingRangeList;\n+            }\n+            try {\n+                Optional<Document> document = workspaceManager.document(filePath.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cdcf6054974d4b87c15e8e1754e559a311cdcd3"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE4NTA1OA==", "bodyText": "Updated.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27401#discussion_r540185058", "createdAt": "2020-12-10T13:52:46Z", "author": {"login": "prabushi"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/BallerinaTextDocumentService.java", "diffHunk": "@@ -510,4 +514,30 @@ public void didClose(DidCloseTextDocumentParams params) {\n     @Override\n     public void didSave(DidSaveTextDocumentParams params) {\n     }\n+\n+    @JsonRequest\n+    public CompletableFuture<List<FoldingRange>> foldingRange(FoldingRangeRequestParams params) {\n+        return CompletableFuture.supplyAsync(() -> {\n+            List<FoldingRange> emptyFoldingRangeList = new ArrayList<>();\n+            String fileUri = params.getTextDocument().getUri();\n+            Optional<Path> filePath = CommonUtil.getPathFromURI(fileUri);\n+            if (filePath.isEmpty() || CommonUtil.isCachedExternalSource(fileUri)) {\n+                return emptyFoldingRangeList;\n+            }\n+            try {\n+                Optional<Document> document = workspaceManager.document(filePath.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgxMzIxNQ=="}, "originalCommit": {"oid": "6cdcf6054974d4b87c15e8e1754e559a311cdcd3"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTU1NDE4OnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/foldingrange/FoldingRangeProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMzozMjowMFrOICz7Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzo1Mjo1NVrOIDKSUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgxODc3MQ==", "bodyText": "shall we try to handle the imports within the FoldingRangeFinder? Otherwise we have to expose the createFoldingRange utility method as well as a part of the syntax tree visiting is disconnected", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27401#discussion_r539818771", "createdAt": "2020-12-10T03:32:00Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/foldingrange/FoldingRangeProvider.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.foldingrange;\n+\n+import io.ballerina.compiler.syntax.tree.ImportDeclarationNode;\n+import io.ballerina.compiler.syntax.tree.ModulePartNode;\n+import io.ballerina.compiler.syntax.tree.SyntaxTree;\n+import org.eclipse.lsp4j.FoldingRange;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Provider class of folding ranges.\n+ */\n+public class FoldingRangeProvider {\n+\n+    /**\n+     * Returns the list of folding ranges for the given syntax tree.\n+     *\n+     * @param syntaxTree Syntax tree representation\n+     * @return The list of folding ranges\n+     */\n+    public static List<FoldingRange> getFoldingRange(SyntaxTree syntaxTree) {\n+\n+        ModulePartNode modulePartNode = syntaxTree.rootNode();\n+        FoldingRangeFinder foldingRangeFinder = new FoldingRangeFinder();\n+        List<FoldingRange> foldingRangeList = new ArrayList<>(foldingRangeFinder.getFoldingRange(modulePartNode));\n+\n+        List<ImportDeclarationNode> imports = modulePartNode.imports().stream().collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cdcf6054974d4b87c15e8e1754e559a311cdcd3"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE4NTE3MA==", "bodyText": "Updated.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27401#discussion_r540185170", "createdAt": "2020-12-10T13:52:55Z", "author": {"login": "prabushi"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/foldingrange/FoldingRangeProvider.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.foldingrange;\n+\n+import io.ballerina.compiler.syntax.tree.ImportDeclarationNode;\n+import io.ballerina.compiler.syntax.tree.ModulePartNode;\n+import io.ballerina.compiler.syntax.tree.SyntaxTree;\n+import org.eclipse.lsp4j.FoldingRange;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Provider class of folding ranges.\n+ */\n+public class FoldingRangeProvider {\n+\n+    /**\n+     * Returns the list of folding ranges for the given syntax tree.\n+     *\n+     * @param syntaxTree Syntax tree representation\n+     * @return The list of folding ranges\n+     */\n+    public static List<FoldingRange> getFoldingRange(SyntaxTree syntaxTree) {\n+\n+        ModulePartNode modulePartNode = syntaxTree.rootNode();\n+        FoldingRangeFinder foldingRangeFinder = new FoldingRangeFinder();\n+        List<FoldingRange> foldingRangeList = new ArrayList<>(foldingRangeFinder.getFoldingRange(modulePartNode));\n+\n+        List<ImportDeclarationNode> imports = modulePartNode.imports().stream().collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgxODc3MQ=="}, "originalCommit": {"oid": "6cdcf6054974d4b87c15e8e1754e559a311cdcd3"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTU1NTgwOnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/foldingrange/FoldingRangeProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMzozMjozMVrOICz75g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzo1MzowMlrOIDKSng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgxODk4Mg==", "bodyText": "Shall we add @since annotation as well?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27401#discussion_r539818982", "createdAt": "2020-12-10T03:32:31Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/foldingrange/FoldingRangeProvider.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.foldingrange;\n+\n+import io.ballerina.compiler.syntax.tree.ImportDeclarationNode;\n+import io.ballerina.compiler.syntax.tree.ModulePartNode;\n+import io.ballerina.compiler.syntax.tree.SyntaxTree;\n+import org.eclipse.lsp4j.FoldingRange;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Provider class of folding ranges.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cdcf6054974d4b87c15e8e1754e559a311cdcd3"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE4NTI0Ng==", "bodyText": "Updated.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27401#discussion_r540185246", "createdAt": "2020-12-10T13:53:02Z", "author": {"login": "prabushi"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/foldingrange/FoldingRangeProvider.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.ballerinalang.langserver.foldingrange;\n+\n+import io.ballerina.compiler.syntax.tree.ImportDeclarationNode;\n+import io.ballerina.compiler.syntax.tree.ModulePartNode;\n+import io.ballerina.compiler.syntax.tree.SyntaxTree;\n+import org.eclipse.lsp4j.FoldingRange;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Provider class of folding ranges.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgxODk4Mg=="}, "originalCommit": {"oid": "6cdcf6054974d4b87c15e8e1754e559a311cdcd3"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2896, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}