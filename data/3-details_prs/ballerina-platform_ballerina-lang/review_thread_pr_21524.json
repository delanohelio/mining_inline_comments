{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MTI3NTY1", "number": 21524, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTozMDozMVrODmWLuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNjo1MDo1NlrODmj_Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTM1OTMxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTozMDozMVrOFztk_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTozMDozMVrOFztk_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc2ODQ0Nw==", "bodyText": "Remove the commented line", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21524#discussion_r389768447", "createdAt": "2020-03-09T15:30:31Z", "author": {"login": "mohanvive"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -531,9 +538,11 @@ private BType getMatchingBoundType(BType expType, SymbolEnv env, HashSet<BType>\n                 return new BMapType(TypeTags.MAP, getMatchingBoundType(constraint, env, resolvedTypes),\n                         symTable.mapType.tsymbol);\n             case TypeTags.STREAM:\n-                BType streamConstraint = ((BStreamType) expType).constraint;\n-                return new BStreamType(TypeTags.STREAM, getMatchingBoundType(streamConstraint, env, resolvedTypes),\n-                                       symTable.streamType.tsymbol);\n+                BType streamConstraint = getMatchingBoundType(((BStreamType) expType).constraint, env, resolvedTypes);\n+//                BType streamErrorType = getMatchingBoundType(((BStreamType) expType).error, env, resolvedTypes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a71233a0d21e17916303c9b6919b7d2c96c966e8"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTM2MjcyOnYy", "diffSide": "LEFT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTozMToxNFrOFztm7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNToxNjowMlrOF0Bwyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc2ODk0Mw==", "bodyText": "Does this change required?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21524#discussion_r389768943", "createdAt": "2020-03-09T15:31:14Z", "author": {"login": "mohanvive"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -641,10 +650,6 @@ private BType getMatchingObjectBoundType(BObjectType expType, SymbolEnv env, Has\n     }\n \n     private BType getMatchingOptionalBoundType(BUnionType expType, SymbolEnv env, HashSet<BType> resolvedTypes) {\n-\n-        if (!expType.isNullable() || expType.getMemberTypes().size() != 2) {\n-            return expType;\n-        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a71233a0d21e17916303c9b6919b7d2c96c966e8"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5OTE0Ng==", "bodyText": "Yes. This change allows compare all the member types when two union types are compared", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21524#discussion_r390099146", "createdAt": "2020-03-10T05:16:02Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -641,10 +650,6 @@ private BType getMatchingObjectBoundType(BObjectType expType, SymbolEnv env, Has\n     }\n \n     private BType getMatchingOptionalBoundType(BUnionType expType, SymbolEnv env, HashSet<BType> resolvedTypes) {\n-\n-        if (!expType.isNullable() || expType.getMemberTypes().size() != 2) {\n-            return expType;\n-        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc2ODk0Mw=="}, "originalCommit": {"oid": "a71233a0d21e17916303c9b6919b7d2c96c966e8"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTM3MDcwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTozMzowN1rOFztr5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODozNDo1NFrOF0FVpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc3MDIxNA==", "bodyText": "Remove the commented code blog.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21524#discussion_r389770214", "createdAt": "2020-03-09T15:33:07Z", "author": {"login": "mohanvive"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -1230,10 +1230,14 @@ private boolean checkNextFuncReturnType(BType returnType) {\n             return false;\n         }\n \n-        if (types.size() != 1) {\n-            return false;\n+        if (!types.removeIf(type -> type.tag == TypeTags.ERROR)) {\n+            // return false;\n         }\n \n+//        if (types.size() != 1) {\n+//            return false;\n+//        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a71233a0d21e17916303c9b6919b7d2c96c966e8"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE1NzczMw==", "bodyText": "This is required.. Uncommented", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21524#discussion_r390157733", "createdAt": "2020-03-10T08:34:54Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -1230,10 +1230,14 @@ private boolean checkNextFuncReturnType(BType returnType) {\n             return false;\n         }\n \n-        if (types.size() != 1) {\n-            return false;\n+        if (!types.removeIf(type -> type.tag == TypeTags.ERROR)) {\n+            // return false;\n         }\n \n+//        if (types.size() != 1) {\n+//            return false;\n+//        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc3MDIxNA=="}, "originalCommit": {"oid": "a71233a0d21e17916303c9b6919b7d2c96c966e8"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzUzMjE1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNTo1MjozN1rOF0CQjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODozNjo1M1rOF0FZig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwNzI3Nw==", "bodyText": "Check how dependencies work for stream init", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21524#discussion_r390107277", "createdAt": "2020-03-10T05:52:37Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -788,7 +789,8 @@ private void addDependency(BSymbol dependent, BSymbol provider) {\n     @Override\n     public void visit(BLangTypeInit typeInitExpr) {\n         typeInitExpr.argsExpr.forEach(argExpr -> analyzeNode(argExpr, env));\n-        if (this.currDependentSymbol.peek() != null) {\n+        if (this.currDependentSymbol.peek() != null\n+                && (typeInitExpr.type.tag != TypeTags.STREAM)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd9dc0b7ed9f5c8db432700bbc00d8caff3c040"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE1ODczMA==", "bodyText": "fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21524#discussion_r390158730", "createdAt": "2020-03-10T08:36:53Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/DataflowAnalyzer.java", "diffHunk": "@@ -788,7 +789,8 @@ private void addDependency(BSymbol dependent, BSymbol provider) {\n     @Override\n     public void visit(BLangTypeInit typeInitExpr) {\n         typeInitExpr.argsExpr.forEach(argExpr -> analyzeNode(argExpr, env));\n-        if (this.currDependentSymbol.peek() != null) {\n+        if (this.currDependentSymbol.peek() != null\n+                && (typeInitExpr.type.tag != TypeTags.STREAM)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwNzI3Nw=="}, "originalCommit": {"oid": "1fd9dc0b7ed9f5c8db432700bbc00d8caff3c040"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzU1MDAzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNjowNDozN1rOF0CbAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNjowNDozN1rOF0CbAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwOTk1NA==", "bodyText": "add test cases to cover negative cases", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21524#discussion_r390109954", "createdAt": "2020-03-10T06:04:37Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1724,9 +1721,36 @@ public void visit(BLangTypeInit cIExpr) {\n                 }\n                 break;\n             case TypeTags.STREAM:\n-                dlog.error(cIExpr.pos, DiagnosticCode.INVALID_STREAM_CONSTRUCTOR,\n-                           cIExpr.initInvocation.name);\n-                resultType = symTable.semanticError;\n+                if (cIExpr.initInvocation.argExprs.size() != 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd9dc0b7ed9f5c8db432700bbc00d8caff3c040"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzU1NzM1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNjowOTowNVrOF0CfJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzoxODo0NVrOF0OWQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMTAxMw==", "bodyText": "double check - what if user sets ()  for errorType? in stream<constraintType, ErrorType?>", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21524#discussion_r390111013", "createdAt": "2020-03-10T06:09:05Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1724,9 +1721,36 @@ public void visit(BLangTypeInit cIExpr) {\n                 }\n                 break;\n             case TypeTags.STREAM:\n-                dlog.error(cIExpr.pos, DiagnosticCode.INVALID_STREAM_CONSTRUCTOR,\n-                           cIExpr.initInvocation.name);\n-                resultType = symTable.semanticError;\n+                if (cIExpr.initInvocation.argExprs.size() != 1) {\n+                    dlog.error(cIExpr.pos, DiagnosticCode.INVALID_STREAM_CONSTRUCTOR, cIExpr.initInvocation.name);\n+                    resultType = symTable.semanticError;\n+                    return;\n+                }\n+\n+                BStreamType actualStreamType = (BStreamType) actualType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd9dc0b7ed9f5c8db432700bbc00d8caff3c040"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwNTM0NA==", "bodyText": "created an issue for this.\n#21596", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21524#discussion_r390305344", "createdAt": "2020-03-10T13:18:45Z", "author": {"login": "gimantha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1724,9 +1721,36 @@ public void visit(BLangTypeInit cIExpr) {\n                 }\n                 break;\n             case TypeTags.STREAM:\n-                dlog.error(cIExpr.pos, DiagnosticCode.INVALID_STREAM_CONSTRUCTOR,\n-                           cIExpr.initInvocation.name);\n-                resultType = symTable.semanticError;\n+                if (cIExpr.initInvocation.argExprs.size() != 1) {\n+                    dlog.error(cIExpr.pos, DiagnosticCode.INVALID_STREAM_CONSTRUCTOR, cIExpr.initInvocation.name);\n+                    resultType = symTable.semanticError;\n+                    return;\n+                }\n+\n+                BStreamType actualStreamType = (BStreamType) actualType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMTAxMw=="}, "originalCommit": {"oid": "1fd9dc0b7ed9f5c8db432700bbc00d8caff3c040"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzYyMTM4OnYy", "diffSide": "RIGHT", "path": "langlib/lang.stream/src/main/ballerina/src/lang.stream/stream.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNjo1MDo1NlrOF0DHCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNjo1MDo1NlrOF0DHCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEyMTIyNA==", "bodyText": "return error not the reduced value", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21524#discussion_r390121224", "createdAt": "2020-03-10T06:50:56Z", "author": {"login": "gimantha"}, "path": "langlib/lang.stream/src/main/ballerina/src/lang.stream/stream.bal", "diffHunk": "@@ -13,127 +13,189 @@\n // KIND, either express or implied.  See the License for the\n // specific language governing permissions and limitations\n // under the License.\n+\n import ballerina/lang.__internal as internal;\n \n-//TODO: stream<Type, E>, supporting E is not implemented yet.\n-# A type parameter that is a subtype of `anydata|error`.\n+# A type parameter that is a subtype of `any|error`.\n # Has the special semantic that when used in a declaration\n # all uses in the declaration must refer to same type.\n @typeParam\n-type PureType1 anydata | error;\n+type Type any|error;\n \n+# A type parameter that is a subtype of `error`.\n+# Has the special semantic that when used in a declaration\n+# all uses in the declaration must refer to same type.\n @typeParam\n-type PureType2 anydata | error;\n+type ErrorType error?;\n \n+# A type parameter that is a subtype of `any|error`.\n+# Has the special semantic that when used in a declaration\n+# all uses in the declaration must refer to same type.\n @typeParam\n-type Type any | error;\n-\n+type Type1 any|error;\n \n-# Selects the members from an array for which the `func` function returns true.\n+# Selects the members from a stream for which a function returns true.\n #\n-# + strm - The stream\n+# + stm - the stream\n # + func - a predicate to apply to each member to test whether it should be selected\n-# + return - new stream only containing members of `strm` for which `func` evaluates to true\n-public function filter(stream<PureType1> strm, function(PureType1 val) returns boolean func) returns stream<PureType1> {\n-    return stream {\n+# + return - new stream only containing members of `stm` for which `func` evaluates to true\n+public function filter(stream<Type,ErrorType> stm, function(Type val) returns boolean func)\n+   returns stream<Type,ErrorType>  {\n+    object {\n+        public stream<Type, ErrorType> strm;\n+        public any func;\n+\n+        public function __init(stream<Type, ErrorType> strm, function(Type val) returns boolean func) {\n+            self.strm = strm;\n+            self.func = func;\n+        }\n+\n+        public function next() returns record {|Type value;|}|ErrorType? {\n             // while loop is required to continue filtering until we find a value which matches the filter or ().\n             while(true) {\n-                var nextVal = next(strm);\n+                var nextVal = next(self.strm);\n                 if (nextVal is ()) {\n                     return ();\n+                } else if (nextVal is error) {\n+                    return nextVal;\n                 } else {\n                     var value = nextVal?.value;\n+                    function(any|error) returns boolean func = internal:getFilterFunc(self.func);\n                     if (func(value)) {\n                         return nextVal;\n                     }\n                 }\n             }\n             return ();\n-        };\n+        }\n+    } itrObj = new(stm, func);\n+    return internal:construct(internal:getElementType(typeof stm), itrObj);\n }\n \n # Returns the next element in the stream wrapped in a record or () if the stream ends.\n #\n # + strm - The stream\n # + return - If the stream has elements, return the element wrapped in a record with single field called `value`,\n #            otherwise returns ()\n-public function next(stream<PureType1> strm) returns record {| PureType1 value; |}? {\n-    var fp = getGenFunc(strm);\n-    return internal:createClone(fp());\n+public function next(stream<Type, ErrorType> strm) returns record {| Type value; |}|ErrorType? {\n+    abstract object {\n+        public function next() returns record {|Type value;|}|ErrorType?;\n+    } iteratorObj = <abstract object {\n+                            public function next() returns record {|Type value;|}|ErrorType?;\n+                     }>internal:getIteratorObj(strm);\n+    var next1 = iteratorObj.next();\n+    if (next1 is ()) {\n+        return ();\n+    } else if (next1 is error) {\n+        return next1;\n+    } else {\n+        return internal:setNarrowType(internal:getElementType(typeof strm), {value : next1.value});\n+    }\n }\n \n-# Applies a function to each member of a stream and returns a new stream of the results.\n+# Applies a function to each member of a stream and returns a stream of the results.\n #\n-# + strm - The stream\n-# + func - A function to apply to each member\n-# + return - New stream containing result of applying `func` to each member of `strm` in order\n-public function 'map(stream<PureType1> strm, function(PureType1 val) returns PureType2 func) returns stream<PureType2> {\n-    return stream {\n-        var nextVal = next(strm);\n-        if (nextVal is ()) {\n-            return ();\n-        } else {\n-            function(anydata | error) returns anydata | error mappingFunc = func;\n-            var value = mappingFunc(nextVal.value);\n-            return internal:setNarrowType(typeof value, {value : value});\n-        }\n-    };\n+# + stm - the stream\n+# + func - a function to apply to each member\n+# + return - new stream containing result of applying `func` to each member of `stm` in order\n+public function 'map(stream<Type,ErrorType> stm, function(Type val) returns Type1 func)\n+   returns stream<Type1,ErrorType> {\n+    object {\n+       public stream<Type, ErrorType> strm;\n+       public any func;\n+\n+       public function __init(stream<Type, ErrorType> strm, function(Type val) returns Type1 func) {\n+           self.strm = strm;\n+           self.func = func;\n+       }\n+\n+       public function next() returns record {|Type value;|}|ErrorType? {\n+           var nextVal = next(self.strm);\n+           if (nextVal is ()) {\n+               return ();\n+           } else {\n+               function(any | error) returns any | error mappingFunc = internal:getMapFunc(self.func);\n+               if (nextVal is error) {\n+                    return nextVal;\n+               } else {\n+                    var value = mappingFunc(nextVal.value);\n+                    return internal:setNarrowType(typeof value, {value : value});\n+               }\n+           }\n+       }\n+    } iteratorObj = new(stm, func);\n+    return internal:construct(internal:getReturnType(func), iteratorObj);\n }\n \n-# Combines the members of an stream using a combining function.\n+// Refer to issue https://github.com/ballerina-platform/ballerina-lang/issues/21527\n+# Combines the members of a stream using a combining function.\n # The combining function takes the combined value so far and a member of the stream,\n # and returns a new combined value.\n #\n-# + strm - the stream\n+# + stm - the stream\n # + func - combining function\n-# + initial - initial value for the first argument of combining parameter `func`\n-# + return - result of combining the members of `strm` using `func`\n-#\n-# For example\n-# ```\n-# reduce([1, 2, 3].toStream(), function (int total, int n) returns int { return total + n; }, 0)\n-# ```\n-# is the same as `sum(1, 2, 3)`.\n-public function reduce(stream<PureType1> strm, function(Type accum, PureType1 val) returns Type func, Type initial) returns Type {\n+# + initial - initial value for the first argument of combining function\n+# + return - result of combining the members of `stm` using the combining function\n+public function reduce(stream<Type,ErrorType> stm, function(Type1 accum, Type val) returns Type1 func, Type1 initial)\n+   returns Type1|ErrorType {\n     any | error reducedValue = initial;\n     while (true) {\n-        var nextVal = next(strm);\n+        var nextVal = next(stm);\n         if (nextVal is ()) {\n             return reducedValue;\n+        } else if (nextVal is error) {\n+            return reducedValue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd9dc0b7ed9f5c8db432700bbc00d8caff3c040"}, "originalPosition": 178}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 963, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}