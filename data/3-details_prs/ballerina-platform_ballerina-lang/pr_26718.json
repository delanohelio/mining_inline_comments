{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0NjY3Mzk0", "number": 26718, "title": "Update signature help parameter detection by range", "bodyText": "Purpose\n\nIn the old implementation of signature help, we had set the sub-string to identify and underline the parameters in the signature label. This lead us to a point where we cannot specifically identify the parameters without the names (for the function type descriptors). With this change, instead of relying on the sub-strings in the signature label to identify the parameter range to underline, we moved to the start and end positions.\n\nFixes #25971\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-11-03T11:25:02Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26718", "merged": true, "mergeCommit": {"oid": "ca2dce313f61b05ab27fc11ad399792f3e13b3e2"}, "closed": true, "closedAt": "2020-11-04T10:55:20Z", "author": {"login": "nadeeshaan"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdY3WKMAH2gAyNTE0NjY3Mzk0OmRmYTZiODE1ZTAwY2M1YzYwZWE2ZWZlNWJlNjJlM2NiYzM0NzYyODc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZKkZigFqTUyMzE5MjczNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dfa6b815e00cc5c60ea6efe5be62e3cbc3476287", "author": {"user": {"login": "nadeeshaan", "name": "Nadeeshaan Gunasinghe"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dfa6b815e00cc5c60ea6efe5be62e3cbc3476287", "committedDate": "2020-11-03T11:20:24Z", "message": "update signature help parameter detection by range"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1d0926e5c5f363ad3eb50e20345b55dff4e2a26", "author": {"user": {"login": "nadeeshaan", "name": "Nadeeshaan Gunasinghe"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c1d0926e5c5f363ad3eb50e20345b55dff4e2a26", "committedDate": "2020-11-03T16:47:55Z", "message": "update test config"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMDIxMDIw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26718#pullrequestreview-523021020", "createdAt": "2020-11-04T03:27:57Z", "commit": {"oid": "c1d0926e5c5f363ad3eb50e20345b55dff4e2a26"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMzoyNzo1OFrOHtH83g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMzozNToxOFrOHtIC5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA3ODIzOA==", "bodyText": ".isBlank() will capture cases such as \"      \"(empty spaces) as well. Do we really need this or just would isEmpty() is suffcient?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26718#discussion_r517078238", "createdAt": "2020-11-04T03:27:58Z", "author": {"login": "rasika"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/SymbolFactory.java", "diffHunk": "@@ -213,7 +213,7 @@ public static ParameterSymbol createBallerinaParameter(BVarSymbol symbol, Parame\n         if (symbol == null) {\n             return null;\n         }\n-        String name = symbol.getName().getValue();\n+        String name = symbol.getName().getValue().isBlank() ? null : symbol.getName().getValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1d0926e5c5f363ad3eb50e20345b55dff4e2a26"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA3OTAwNg==", "bodyText": "we can move adding documentation into getSignatureInfoModel() method", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26718#discussion_r517079006", "createdAt": "2020-11-04T03:31:30Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/signature/SignatureHelpUtil.java", "diffHunk": "@@ -92,21 +92,35 @@ private SignatureHelpUtil() {\n         SignatureInfoModel signatureInfoModel = getSignatureInfoModel(functionSymbol.get(), context);\n \n         // Override label for 'new' constructor\n-        String label = functionSymbol.get().name();\n-        int initIndex = label.indexOf(INIT_SYMBOL);\n-        if (initIndex > -1) {\n-            label = \"new \" + label.substring(0, initIndex);\n-        }\n+        int initIndex = functionSymbol.get().name().indexOf(INIT_SYMBOL);\n+        StringBuilder labelBuilder = initIndex > -1\n+                ? new StringBuilder(\"new \" + functionSymbol.get().name().substring(0, initIndex))\n+                : new StringBuilder(functionSymbol.get().name());\n \n+        labelBuilder.append(\"(\");\n         // Join the function parameters to generate the function's signature\n-        String paramsJoined = signatureInfoModel.getParameterInfoModels().stream().map(parameterInfoModel -> {\n-            // For each of the parameters, create a parameter info instance\n-            parameterInformationList.add(getParameterInformation(parameterInfoModel));\n-\n-            return parameterInfoModel.toString();\n-        }).collect(Collectors.joining(\", \"));\n+        List<ParameterInfoModel> parameterInfoModels = signatureInfoModel.getParameterInfoModels();\n+        for (ParameterInfoModel paramModel : parameterInfoModels) {\n+            int labelOffset = labelBuilder.toString().length();\n+            labelBuilder.append(paramModel.parameter.getType());\n+            ParameterInformation paramInfo = new ParameterInformation();\n+            paramInfo.setDocumentation(getParameterDocumentation(paramModel));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1d0926e5c5f363ad3eb50e20345b55dff4e2a26"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA3OTc4Mw==", "bodyText": "can we move this logic related to setting Tuple.two(paramStart, paramEnd) into getSignatureInfoModel()", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26718#discussion_r517079783", "createdAt": "2020-11-04T03:35:18Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/signature/SignatureHelpUtil.java", "diffHunk": "@@ -92,21 +92,35 @@ private SignatureHelpUtil() {\n         SignatureInfoModel signatureInfoModel = getSignatureInfoModel(functionSymbol.get(), context);\n \n         // Override label for 'new' constructor\n-        String label = functionSymbol.get().name();\n-        int initIndex = label.indexOf(INIT_SYMBOL);\n-        if (initIndex > -1) {\n-            label = \"new \" + label.substring(0, initIndex);\n-        }\n+        int initIndex = functionSymbol.get().name().indexOf(INIT_SYMBOL);\n+        StringBuilder labelBuilder = initIndex > -1\n+                ? new StringBuilder(\"new \" + functionSymbol.get().name().substring(0, initIndex))\n+                : new StringBuilder(functionSymbol.get().name());\n \n+        labelBuilder.append(\"(\");\n         // Join the function parameters to generate the function's signature\n-        String paramsJoined = signatureInfoModel.getParameterInfoModels().stream().map(parameterInfoModel -> {\n-            // For each of the parameters, create a parameter info instance\n-            parameterInformationList.add(getParameterInformation(parameterInfoModel));\n-\n-            return parameterInfoModel.toString();\n-        }).collect(Collectors.joining(\", \"));\n+        List<ParameterInfoModel> parameterInfoModels = signatureInfoModel.getParameterInfoModels();\n+        for (ParameterInfoModel paramModel : parameterInfoModels) {\n+            int labelOffset = labelBuilder.toString().length();\n+            labelBuilder.append(paramModel.parameter.getType());\n+            ParameterInformation paramInfo = new ParameterInformation();\n+            paramInfo.setDocumentation(getParameterDocumentation(paramModel));\n+            int paramStart = labelOffset;\n+            int paramEnd = labelOffset + paramModel.parameter.getType().length();\n+            if (paramModel.parameter.getName().isPresent()) {\n+                paramStart = paramEnd + 1;\n+                paramEnd += (paramModel.parameter.getName().get() + \" \").length();\n+                labelBuilder.append(\" \").append(paramModel.parameter.getName().get());\n+            }\n+            if (parameterInfoModels.indexOf(paramModel) < parameterInfoModels.size() - 1) {\n+                labelBuilder.append(\", \");\n+            }\n+            paramInfo.setLabel(Tuple.two(paramStart, paramEnd));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1d0926e5c5f363ad3eb50e20345b55dff4e2a26"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMTI3MjUz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26718#pullrequestreview-523127253", "createdAt": "2020-11-04T08:19:25Z", "commit": {"oid": "c1d0926e5c5f363ad3eb50e20345b55dff4e2a26"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODoxOToyNVrOHtNPTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODoxOToyNVrOHtNPTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2NDg3Ng==", "bodyText": "we can get rid of indexOf call for each element if we move the parent loop into an indexed for loop. Or will be more readable if we can move parameters generation into a new StringJoiner(\", \").", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26718#discussion_r517164876", "createdAt": "2020-11-04T08:19:25Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/signature/SignatureHelpUtil.java", "diffHunk": "@@ -92,21 +92,35 @@ private SignatureHelpUtil() {\n         SignatureInfoModel signatureInfoModel = getSignatureInfoModel(functionSymbol.get(), context);\n \n         // Override label for 'new' constructor\n-        String label = functionSymbol.get().name();\n-        int initIndex = label.indexOf(INIT_SYMBOL);\n-        if (initIndex > -1) {\n-            label = \"new \" + label.substring(0, initIndex);\n-        }\n+        int initIndex = functionSymbol.get().name().indexOf(INIT_SYMBOL);\n+        StringBuilder labelBuilder = initIndex > -1\n+                ? new StringBuilder(\"new \" + functionSymbol.get().name().substring(0, initIndex))\n+                : new StringBuilder(functionSymbol.get().name());\n \n+        labelBuilder.append(\"(\");\n         // Join the function parameters to generate the function's signature\n-        String paramsJoined = signatureInfoModel.getParameterInfoModels().stream().map(parameterInfoModel -> {\n-            // For each of the parameters, create a parameter info instance\n-            parameterInformationList.add(getParameterInformation(parameterInfoModel));\n-\n-            return parameterInfoModel.toString();\n-        }).collect(Collectors.joining(\", \"));\n+        List<ParameterInfoModel> parameterInfoModels = signatureInfoModel.getParameterInfoModels();\n+        for (ParameterInfoModel paramModel : parameterInfoModels) {\n+            int labelOffset = labelBuilder.toString().length();\n+            labelBuilder.append(paramModel.parameter.getType());\n+            ParameterInformation paramInfo = new ParameterInformation();\n+            paramInfo.setDocumentation(getParameterDocumentation(paramModel));\n+            int paramStart = labelOffset;\n+            int paramEnd = labelOffset + paramModel.parameter.getType().length();\n+            if (paramModel.parameter.getName().isPresent()) {\n+                paramStart = paramEnd + 1;\n+                paramEnd += (paramModel.parameter.getName().get() + \" \").length();\n+                labelBuilder.append(\" \").append(paramModel.parameter.getName().get());\n+            }\n+            if (parameterInfoModels.indexOf(paramModel) < parameterInfoModels.size() - 1) {\n+                labelBuilder.append(\", \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1d0926e5c5f363ad3eb50e20345b55dff4e2a26"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2ad4e361982552317e13ff199d2f7a6d83731e2", "author": {"user": {"login": "nadeeshaan", "name": "Nadeeshaan Gunasinghe"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b2ad4e361982552317e13ff199d2f7a6d83731e2", "committedDate": "2020-11-04T09:30:32Z", "message": "add context aware completion support for on fail clause"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMTg5Nzgw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26718#pullrequestreview-523189780", "createdAt": "2020-11-04T09:40:26Z", "commit": {"oid": "c1d0926e5c5f363ad3eb50e20345b55dff4e2a26"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMTkyNzM3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26718#pullrequestreview-523192737", "createdAt": "2020-11-04T09:44:09Z", "commit": {"oid": "b2ad4e361982552317e13ff199d2f7a6d83731e2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwOTo0NDowOVrOHtQVCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwOTo0NDowOVrOHtQVCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIxNTQ5OQ==", "bodyText": "You can just call labelBuilder.length() otherwise whole purpose of StringBuilder is lost since we convert toString per each cycle.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26718#discussion_r517215499", "createdAt": "2020-11-04T09:44:09Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/signature/SignatureHelpUtil.java", "diffHunk": "@@ -100,7 +100,8 @@ private SignatureHelpUtil() {\n         labelBuilder.append(\"(\");\n         // Join the function parameters to generate the function's signature\n         List<ParameterInfoModel> parameterInfoModels = signatureInfoModel.getParameterInfoModels();\n-        for (ParameterInfoModel paramModel : parameterInfoModels) {\n+        for (int i = 0; i < parameterInfoModels.size(); i++) {\n+            ParameterInfoModel paramModel = parameterInfoModels.get(i);\n             int labelOffset = labelBuilder.toString().length();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2ad4e361982552317e13ff199d2f7a6d83731e2"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3293, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}