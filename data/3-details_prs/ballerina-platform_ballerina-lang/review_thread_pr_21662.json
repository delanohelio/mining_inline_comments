{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2NjIxMzcw", "number": 21662, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1Nzo0N1rODnED2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzowMTo1N1rODnEJHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjg3NTc5OnYy", "diffSide": "RIGHT", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1Nzo0N1rOF01v3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1Nzo0N1rOF01v3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MDg3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n          \n          \n            \n                # + return - An `error` if encounters an error while starting the server, returns nil otherwise.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21662#discussion_r390950876", "createdAt": "2020-03-11T12:57:47Z", "author": {"login": "daneshk"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -167,57 +160,90 @@ public type Consumer client object {\n     # Creates a new Kafka `Consumer`.\n     #\n     # + config - Configurations related to consumer endpoint.\n-    public function __init (ConsumerConfig config) {\n+    public function __init (ConsumerConfiguration config) {\n         self.consumerConfig = config;\n         self.keyDeserializerType = config.keyDeserializerType;\n         self.valueDeserializerType = config.valueDeserializerType;\n \n         if (self.keyDeserializerType == DES_CUSTOM) {\n-            var keyDeserializerObject = config.keyDeserializer;\n+            var keyDeserializerObject = config?.keyDeserializer;\n             if (keyDeserializerObject is ()) {\n                 panic error(CONSUMER_ERROR, message = \"Invalid keyDeserializer config: Please Provide a \" +\n                                         \"valid custom deserializer for the keyDeserializer\");\n             } else {\n                 self.keyDeserializer = keyDeserializerObject;\n             }\n         }\n+        if (self.keyDeserializerType == DES_AVRO) {\n+            panic error(CONSUMER_ERROR, message = \"Key deserialization using Avro is not yet supported.\");\n+            //var schemaRegistryUrl = config.schemaRegistryUrl;\n+            //if (schemaRegistryUrl is ()) {\n+            //    panic error(PRODUCER_ERROR, message = \"Missing schema registry URL for the Avro serializer. Please \" +\n+            //                \"provide 'schemaRegistryUrl' configuration in 'kafka:ProducerConfiguration'.\");\n+            //}\n+        }\n \n         if (self.valueDeserializerType == DES_CUSTOM) {\n-            var valueDeserializerObject = config.valueDeserializer;\n+            var valueDeserializerObject = config?.valueDeserializer;\n             if (valueDeserializerObject is ()) {\n                 panic error(CONSUMER_ERROR, message = \"Invalid valueDeserializer config: Please Provide a\" +\n                                         \" valid custom deserializer for the valueDeserializer\");\n             } else {\n                 self.valueDeserializer = valueDeserializerObject;\n             }\n         }\n+        if (self.valueDeserializerType == DES_AVRO) {\n+            var schemaRegistryUrl = config?.schemaRegistryUrl;\n+            if (schemaRegistryUrl is ()) {\n+                panic error(CONSUMER_ERROR, message = \"Missing schema registry URL for the Avro deserializer. Please \" +\n+                            \"provide 'schemaRegistryUrl' configuration in 'kafka:ConsumerConfiguration'.\");\n+            }\n+        }\n \n         checkpanic self.init(config);\n     }\n \n+    # Starts the registered service.\n+    #\n+    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d01f987e73cc4f12e1cbd350dab919ef0b2f06d1"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjg3ODcwOnYy", "diffSide": "RIGHT", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1ODo0NFrOF01xyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1ODo0NFrOF01xyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MTM2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Returns an error if encounters an error while attaching the service, returns nil otherwise.\n          \n          \n            \n                # + return - An `error` if encounters an error while attaching the service, returns nil otherwise.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21662#discussion_r390951368", "createdAt": "2020-03-11T12:58:44Z", "author": {"login": "daneshk"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -167,57 +160,90 @@ public type Consumer client object {\n     # Creates a new Kafka `Consumer`.\n     #\n     # + config - Configurations related to consumer endpoint.\n-    public function __init (ConsumerConfig config) {\n+    public function __init (ConsumerConfiguration config) {\n         self.consumerConfig = config;\n         self.keyDeserializerType = config.keyDeserializerType;\n         self.valueDeserializerType = config.valueDeserializerType;\n \n         if (self.keyDeserializerType == DES_CUSTOM) {\n-            var keyDeserializerObject = config.keyDeserializer;\n+            var keyDeserializerObject = config?.keyDeserializer;\n             if (keyDeserializerObject is ()) {\n                 panic error(CONSUMER_ERROR, message = \"Invalid keyDeserializer config: Please Provide a \" +\n                                         \"valid custom deserializer for the keyDeserializer\");\n             } else {\n                 self.keyDeserializer = keyDeserializerObject;\n             }\n         }\n+        if (self.keyDeserializerType == DES_AVRO) {\n+            panic error(CONSUMER_ERROR, message = \"Key deserialization using Avro is not yet supported.\");\n+            //var schemaRegistryUrl = config.schemaRegistryUrl;\n+            //if (schemaRegistryUrl is ()) {\n+            //    panic error(PRODUCER_ERROR, message = \"Missing schema registry URL for the Avro serializer. Please \" +\n+            //                \"provide 'schemaRegistryUrl' configuration in 'kafka:ProducerConfiguration'.\");\n+            //}\n+        }\n \n         if (self.valueDeserializerType == DES_CUSTOM) {\n-            var valueDeserializerObject = config.valueDeserializer;\n+            var valueDeserializerObject = config?.valueDeserializer;\n             if (valueDeserializerObject is ()) {\n                 panic error(CONSUMER_ERROR, message = \"Invalid valueDeserializer config: Please Provide a\" +\n                                         \" valid custom deserializer for the valueDeserializer\");\n             } else {\n                 self.valueDeserializer = valueDeserializerObject;\n             }\n         }\n+        if (self.valueDeserializerType == DES_AVRO) {\n+            var schemaRegistryUrl = config?.schemaRegistryUrl;\n+            if (schemaRegistryUrl is ()) {\n+                panic error(CONSUMER_ERROR, message = \"Missing schema registry URL for the Avro deserializer. Please \" +\n+                            \"provide 'schemaRegistryUrl' configuration in 'kafka:ConsumerConfiguration'.\");\n+            }\n+        }\n \n         checkpanic self.init(config);\n     }\n \n+    # Starts the registered service.\n+    #\n+    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n     public function __start() returns error? {\n         return start(self);\n     }\n \n+    # Stops the kafka listener.\n+    #\n+    # + return - An `error` if an error occurred during the listener stopping process\n     public function __gracefulStop() returns error? {\n-        return ();\n+        return stop(self);\n     }\n \n+    # Stops the kafka listener.\n+    #\n+    # + return - An `error` if an error occurred during the listener stopping process\n     public function __immediateStop() returns error? {\n         return stop(self);\n     }\n \n+    # Gets called every time a service attaches itself to this listener.\n+    #\n+    # + s - The type of the service to be registered.\n+    # + name - Name of the service.\n+    # + return - Returns an error if encounters an error while attaching the service, returns nil otherwise.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d01f987e73cc4f12e1cbd350dab919ef0b2f06d1"}, "originalPosition": 227}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjg4MDA1OnYy", "diffSide": "RIGHT", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1OTowN1rOF01ypQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1OTowN1rOF01ypQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MTU4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - error if occurred during detaching of a service or `nil`\n          \n          \n            \n                # + return - An `error` if an error occurred during detaching a service or `nil`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21662#discussion_r390951589", "createdAt": "2020-03-11T12:59:07Z", "author": {"login": "daneshk"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -167,57 +160,90 @@ public type Consumer client object {\n     # Creates a new Kafka `Consumer`.\n     #\n     # + config - Configurations related to consumer endpoint.\n-    public function __init (ConsumerConfig config) {\n+    public function __init (ConsumerConfiguration config) {\n         self.consumerConfig = config;\n         self.keyDeserializerType = config.keyDeserializerType;\n         self.valueDeserializerType = config.valueDeserializerType;\n \n         if (self.keyDeserializerType == DES_CUSTOM) {\n-            var keyDeserializerObject = config.keyDeserializer;\n+            var keyDeserializerObject = config?.keyDeserializer;\n             if (keyDeserializerObject is ()) {\n                 panic error(CONSUMER_ERROR, message = \"Invalid keyDeserializer config: Please Provide a \" +\n                                         \"valid custom deserializer for the keyDeserializer\");\n             } else {\n                 self.keyDeserializer = keyDeserializerObject;\n             }\n         }\n+        if (self.keyDeserializerType == DES_AVRO) {\n+            panic error(CONSUMER_ERROR, message = \"Key deserialization using Avro is not yet supported.\");\n+            //var schemaRegistryUrl = config.schemaRegistryUrl;\n+            //if (schemaRegistryUrl is ()) {\n+            //    panic error(PRODUCER_ERROR, message = \"Missing schema registry URL for the Avro serializer. Please \" +\n+            //                \"provide 'schemaRegistryUrl' configuration in 'kafka:ProducerConfiguration'.\");\n+            //}\n+        }\n \n         if (self.valueDeserializerType == DES_CUSTOM) {\n-            var valueDeserializerObject = config.valueDeserializer;\n+            var valueDeserializerObject = config?.valueDeserializer;\n             if (valueDeserializerObject is ()) {\n                 panic error(CONSUMER_ERROR, message = \"Invalid valueDeserializer config: Please Provide a\" +\n                                         \" valid custom deserializer for the valueDeserializer\");\n             } else {\n                 self.valueDeserializer = valueDeserializerObject;\n             }\n         }\n+        if (self.valueDeserializerType == DES_AVRO) {\n+            var schemaRegistryUrl = config?.schemaRegistryUrl;\n+            if (schemaRegistryUrl is ()) {\n+                panic error(CONSUMER_ERROR, message = \"Missing schema registry URL for the Avro deserializer. Please \" +\n+                            \"provide 'schemaRegistryUrl' configuration in 'kafka:ConsumerConfiguration'.\");\n+            }\n+        }\n \n         checkpanic self.init(config);\n     }\n \n+    # Starts the registered service.\n+    #\n+    # + return - Returns an error if encounters an error while starting the server, returns nil otherwise.\n     public function __start() returns error? {\n         return start(self);\n     }\n \n+    # Stops the kafka listener.\n+    #\n+    # + return - An `error` if an error occurred during the listener stopping process\n     public function __gracefulStop() returns error? {\n-        return ();\n+        return stop(self);\n     }\n \n+    # Stops the kafka listener.\n+    #\n+    # + return - An `error` if an error occurred during the listener stopping process\n     public function __immediateStop() returns error? {\n         return stop(self);\n     }\n \n+    # Gets called every time a service attaches itself to this listener.\n+    #\n+    # + s - The type of the service to be registered.\n+    # + name - Name of the service.\n+    # + return - Returns an error if encounters an error while attaching the service, returns nil otherwise.\n     public function __attach(service s, string? name = ()) returns error? {\n         return register(self, s, name);\n     }\n \n+    # Detaches a consumer service from the listener.\n+    #\n+    # + s - The service to be detached\n+    # + return - error if occurred during detaching of a service or `nil`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d01f987e73cc4f12e1cbd350dab919ef0b2f06d1"}, "originalPosition": 235}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjg4OTI1OnYy", "diffSide": "RIGHT", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMzowMTo1N1rOF014cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNTozNTo1NFrOF08htQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MzA3Mg==", "bodyText": "Is bootstrapServers field required now?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21662#discussion_r390953072", "createdAt": "2020-03-11T13:01:57Z", "author": {"login": "daneshk"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "diffHunk": "@@ -56,86 +58,63 @@ import ballerinax/java;\n # + transactionTimeoutInMillis - Timeout for transaction status update from the producer.\n # + enableIdempotence - Exactly one copy of each message is written in the stream when enabled.\n # + secureSocket - Configurations related to SSL/TLS.\n-public type ProducerConfig record {|\n-    string? bootstrapServers = ();\n-    Producer_Acks acks = ACKS_SINGLE;\n-    string? compressionType = ();\n-    string? clientId = ();\n-    string? metricsRecordingLevel = ();\n-    string? metricReporterClasses = ();\n-    string? partitionerClass = ();\n-    string? interceptorClasses = ();\n-    string? transactionalId = ();\n+public type ProducerConfiguration record {|\n+    string bootstrapServers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d01f987e73cc4f12e1cbd350dab919ef0b2f06d1"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA2MTk0MQ==", "bodyText": "Yes. Without that, user cannot create a producer.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21662#discussion_r391061941", "createdAt": "2020-03-11T15:35:54Z", "author": {"login": "ThisaruGuruge"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "diffHunk": "@@ -56,86 +58,63 @@ import ballerinax/java;\n # + transactionTimeoutInMillis - Timeout for transaction status update from the producer.\n # + enableIdempotence - Exactly one copy of each message is written in the stream when enabled.\n # + secureSocket - Configurations related to SSL/TLS.\n-public type ProducerConfig record {|\n-    string? bootstrapServers = ();\n-    Producer_Acks acks = ACKS_SINGLE;\n-    string? compressionType = ();\n-    string? clientId = ();\n-    string? metricsRecordingLevel = ();\n-    string? metricReporterClasses = ();\n-    string? partitionerClass = ();\n-    string? interceptorClasses = ();\n-    string? transactionalId = ();\n+public type ProducerConfiguration record {|\n+    string bootstrapServers;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk1MzA3Mg=="}, "originalCommit": {"oid": "d01f987e73cc4f12e1cbd350dab919ef0b2f06d1"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 777, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}