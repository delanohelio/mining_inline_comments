{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0NzIyOTA4", "number": 26384, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDowMDo0OVrOEuaTuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDowMjozMVrOEuaX_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTAwOTg1OnYy", "diffSide": "RIGHT", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDowMDo0OVrOHiy1vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDozNzoyOVrOHi0reg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI0NjU5MQ==", "bodyText": "Reduce the two return statements (Within try and the catch blocks) to a single one.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26384#discussion_r506246591", "createdAt": "2020-10-16T10:00:49Z", "author": {"login": "nadeeshaan"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -3630,33 +3635,39 @@ public Token transform(Token token) {\n      */\n     @SuppressWarnings(\"unchecked\")\n     private <T extends Node> T formatNode(T node, int trailingWS, int trailingNL) {\n-        if (node == null || node.isMissing()) {\n-            return node;\n-        }\n+        try {\n+            if (node == null || node.isMissing()) {\n+                return node;\n+            }\n \n-        if (!isInLineRange(node, lineRange)) {\n-            checkForNewline(node);\n-            return node;\n-        }\n+            if (!isInLineRange(node, lineRange)) {\n+                checkForNewline(node);\n+                return node;\n+            }\n \n-        int prevTrailingNL = env.trailingNL;\n-        int prevTrailingWS = env.trailingWS;\n-        env.trailingNL = trailingNL;\n-        env.trailingWS = trailingWS;\n+            int prevTrailingNL = env.trailingNL;\n+            int prevTrailingWS = env.trailingWS;\n+            env.trailingNL = trailingNL;\n+            env.trailingWS = trailingWS;\n \n-        // Cache the current node and parent before format.\n-        // Because reference to the nodes will change after modifying.\n-        T oldNode = node;\n-        Node parent = node.parent();\n+            // Cache the current node and parent before format.\n+            // Because reference to the nodes will change after modifying.\n+            T oldNode = node;\n+            Node parent = node.parent();\n \n-        node = (T) node.apply(this);\n-        if (shouldWrapLine(oldNode, parent)) {\n-            node = wrapLine(oldNode, parent);\n-        }\n+            node = (T) node.apply(this);\n+            if (shouldWrapLine(oldNode, parent)) {\n+                node = wrapLine(oldNode, parent);\n+            }\n \n-        env.trailingNL = prevTrailingNL;\n-        env.trailingWS = prevTrailingWS;\n-        return node;\n+            env.trailingNL = prevTrailingNL;\n+            env.trailingWS = prevTrailingWS;\n+            return node;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5c49d3e442bdefbfcac89bedd9a0998ca769f51"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI3NjczMA==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26384#discussion_r506276730", "createdAt": "2020-10-16T10:37:29Z", "author": {"login": "IrushiL"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -3630,33 +3635,39 @@ public Token transform(Token token) {\n      */\n     @SuppressWarnings(\"unchecked\")\n     private <T extends Node> T formatNode(T node, int trailingWS, int trailingNL) {\n-        if (node == null || node.isMissing()) {\n-            return node;\n-        }\n+        try {\n+            if (node == null || node.isMissing()) {\n+                return node;\n+            }\n \n-        if (!isInLineRange(node, lineRange)) {\n-            checkForNewline(node);\n-            return node;\n-        }\n+            if (!isInLineRange(node, lineRange)) {\n+                checkForNewline(node);\n+                return node;\n+            }\n \n-        int prevTrailingNL = env.trailingNL;\n-        int prevTrailingWS = env.trailingWS;\n-        env.trailingNL = trailingNL;\n-        env.trailingWS = trailingWS;\n+            int prevTrailingNL = env.trailingNL;\n+            int prevTrailingWS = env.trailingWS;\n+            env.trailingNL = trailingNL;\n+            env.trailingWS = trailingWS;\n \n-        // Cache the current node and parent before format.\n-        // Because reference to the nodes will change after modifying.\n-        T oldNode = node;\n-        Node parent = node.parent();\n+            // Cache the current node and parent before format.\n+            // Because reference to the nodes will change after modifying.\n+            T oldNode = node;\n+            Node parent = node.parent();\n \n-        node = (T) node.apply(this);\n-        if (shouldWrapLine(oldNode, parent)) {\n-            node = wrapLine(oldNode, parent);\n-        }\n+            node = (T) node.apply(this);\n+            if (shouldWrapLine(oldNode, parent)) {\n+                node = wrapLine(oldNode, parent);\n+            }\n \n-        env.trailingNL = prevTrailingNL;\n-        env.trailingWS = prevTrailingWS;\n-        return node;\n+            env.trailingNL = prevTrailingNL;\n+            env.trailingWS = prevTrailingWS;\n+            return node;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI0NjU5MQ=="}, "originalCommit": {"oid": "b5c49d3e442bdefbfcac89bedd9a0998ca769f51"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTAyMDc5OnYy", "diffSide": "RIGHT", "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDowMjozMVrOHiy9YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDozNzozN1rOHi0r9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI0ODU0NA==", "bodyText": "Only the starting line number will not be helpful when there are multiple nodes in a single line, shall we add at least the starting column as well?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26384#discussion_r506248544", "createdAt": "2020-10-16T10:02:31Z", "author": {"login": "nadeeshaan"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -3630,33 +3635,39 @@ public Token transform(Token token) {\n      */\n     @SuppressWarnings(\"unchecked\")\n     private <T extends Node> T formatNode(T node, int trailingWS, int trailingNL) {\n-        if (node == null || node.isMissing()) {\n-            return node;\n-        }\n+        try {\n+            if (node == null || node.isMissing()) {\n+                return node;\n+            }\n \n-        if (!isInLineRange(node, lineRange)) {\n-            checkForNewline(node);\n-            return node;\n-        }\n+            if (!isInLineRange(node, lineRange)) {\n+                checkForNewline(node);\n+                return node;\n+            }\n \n-        int prevTrailingNL = env.trailingNL;\n-        int prevTrailingWS = env.trailingWS;\n-        env.trailingNL = trailingNL;\n-        env.trailingWS = trailingWS;\n+            int prevTrailingNL = env.trailingNL;\n+            int prevTrailingWS = env.trailingWS;\n+            env.trailingNL = trailingNL;\n+            env.trailingWS = trailingWS;\n \n-        // Cache the current node and parent before format.\n-        // Because reference to the nodes will change after modifying.\n-        T oldNode = node;\n-        Node parent = node.parent();\n+            // Cache the current node and parent before format.\n+            // Because reference to the nodes will change after modifying.\n+            T oldNode = node;\n+            Node parent = node.parent();\n \n-        node = (T) node.apply(this);\n-        if (shouldWrapLine(oldNode, parent)) {\n-            node = wrapLine(oldNode, parent);\n-        }\n+            node = (T) node.apply(this);\n+            if (shouldWrapLine(oldNode, parent)) {\n+                node = wrapLine(oldNode, parent);\n+            }\n \n-        env.trailingNL = prevTrailingNL;\n-        env.trailingWS = prevTrailingWS;\n-        return node;\n+            env.trailingNL = prevTrailingNL;\n+            env.trailingWS = prevTrailingWS;\n+            return node;\n+        } catch (Exception e) {\n+            LOGGER.error(String.format(\"Error while formatting [node: %s] [line: %s]: %s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5c49d3e442bdefbfcac89bedd9a0998ca769f51"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI3Njg1NQ==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26384#discussion_r506276855", "createdAt": "2020-10-16T10:37:37Z", "author": {"login": "IrushiL"}, "path": "misc/formatter/modules/formatter-core/src/main/java/org/ballerinalang/formatter/core/NewFormattingTreeModifier.java", "diffHunk": "@@ -3630,33 +3635,39 @@ public Token transform(Token token) {\n      */\n     @SuppressWarnings(\"unchecked\")\n     private <T extends Node> T formatNode(T node, int trailingWS, int trailingNL) {\n-        if (node == null || node.isMissing()) {\n-            return node;\n-        }\n+        try {\n+            if (node == null || node.isMissing()) {\n+                return node;\n+            }\n \n-        if (!isInLineRange(node, lineRange)) {\n-            checkForNewline(node);\n-            return node;\n-        }\n+            if (!isInLineRange(node, lineRange)) {\n+                checkForNewline(node);\n+                return node;\n+            }\n \n-        int prevTrailingNL = env.trailingNL;\n-        int prevTrailingWS = env.trailingWS;\n-        env.trailingNL = trailingNL;\n-        env.trailingWS = trailingWS;\n+            int prevTrailingNL = env.trailingNL;\n+            int prevTrailingWS = env.trailingWS;\n+            env.trailingNL = trailingNL;\n+            env.trailingWS = trailingWS;\n \n-        // Cache the current node and parent before format.\n-        // Because reference to the nodes will change after modifying.\n-        T oldNode = node;\n-        Node parent = node.parent();\n+            // Cache the current node and parent before format.\n+            // Because reference to the nodes will change after modifying.\n+            T oldNode = node;\n+            Node parent = node.parent();\n \n-        node = (T) node.apply(this);\n-        if (shouldWrapLine(oldNode, parent)) {\n-            node = wrapLine(oldNode, parent);\n-        }\n+            node = (T) node.apply(this);\n+            if (shouldWrapLine(oldNode, parent)) {\n+                node = wrapLine(oldNode, parent);\n+            }\n \n-        env.trailingNL = prevTrailingNL;\n-        env.trailingWS = prevTrailingWS;\n-        return node;\n+            env.trailingNL = prevTrailingNL;\n+            env.trailingWS = prevTrailingWS;\n+            return node;\n+        } catch (Exception e) {\n+            LOGGER.error(String.format(\"Error while formatting [node: %s] [line: %s]: %s\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI0ODU0NA=="}, "originalCommit": {"oid": "b5c49d3e442bdefbfcac89bedd9a0998ca769f51"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4756, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}