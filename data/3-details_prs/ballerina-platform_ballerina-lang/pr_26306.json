{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxMzUwODc4", "number": 26306, "title": "Fix issue in BLangIsLikeExpr", "bodyText": "Purpose\nFixes #25346\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-10-12T06:46:24Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306", "merged": true, "mergeCommit": {"oid": "c5643d9383ccdfd77474b02518f17098b5c8929b"}, "closed": true, "closedAt": "2020-10-15T09:18:46Z", "author": {"login": "KavinduZoysa"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdRuZ2cgBqjM4NjUwMzU1MTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSuNIhgFqTUwOTE3OTg5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "24a3583dd08649ab1bda14ded067283cae48102b", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/24a3583dd08649ab1bda14ded067283cae48102b", "committedDate": "2020-10-12T06:45:33Z", "message": "Add tests"}, "afterCommit": {"oid": "8a2574f02b6ffd943813a987235f3439d0d9fe7c", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8a2574f02b6ffd943813a987235f3439d0d9fe7c", "committedDate": "2020-10-12T06:57:12Z", "message": "Add tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NDUxMzY2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#pullrequestreview-506451366", "createdAt": "2020-10-12T09:30:30Z", "commit": {"oid": "8a2574f02b6ffd943813a987235f3439d0d9fe7c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwOTozMDozMFrOHf2rCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwOTozMDozMFrOHf2rCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE2MzY1OQ==", "bodyText": "Instead of doing this, how about just setting the bound size to the target type and then later, check the remainder of the source type members against the rest type?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r503163659", "createdAt": "2020-10-12T09:30:30Z", "author": {"login": "pubudu91"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1982,26 +1982,41 @@ private static boolean checkIsLikeTupleType(Object sourceValue, BTupleType targe\n         }\n \n         ArrayValue source = (ArrayValue) sourceValue;\n-        if (source.size() != targetType.getTupleTypes().size()) {\n+        if (targetType.getRestType() == null && source.size() != targetType.getTupleTypes().size()) {\n             return false;\n         }\n \n+        List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n+        if (targetType.getRestType() != null) {\n+            if (source.size() <= targetTypes.size()) {\n+                return false;\n+            } else {\n+                int targetTypeSize = source.size() - targetTypes.size();\n+                for (int i = 0; i < targetTypeSize; i++) {\n+                    targetTypes.add(targetType.getRestType());\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a2574f02b6ffd943813a987235f3439d0d9fe7c"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NDU2MTcx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#pullrequestreview-506456171", "createdAt": "2020-10-12T09:36:34Z", "commit": {"oid": "8a2574f02b6ffd943813a987235f3439d0d9fe7c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwOTozNjozNFrOHf25zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwOTo0MDowNFrOHf3CrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE2NzQzOQ==", "bodyText": "We can remove the else block and move this out?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        } else {\n          \n          \n            \n                            int targetTypeSize = source.size() - targetTypes.size();\n          \n          \n            \n                        }\n          \n          \n            \n                        \n          \n          \n            \n                        int targetTypeSize = source.size() - targetTypes.size();", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r503167439", "createdAt": "2020-10-12T09:36:34Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1982,26 +1982,41 @@ private static boolean checkIsLikeTupleType(Object sourceValue, BTupleType targe\n         }\n \n         ArrayValue source = (ArrayValue) sourceValue;\n-        if (source.size() != targetType.getTupleTypes().size()) {\n+        if (targetType.getRestType() == null && source.size() != targetType.getTupleTypes().size()) {\n             return false;\n         }\n \n+        List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n+        if (targetType.getRestType() != null) {\n+            if (source.size() <= targetTypes.size()) {\n+                return false;\n+            } else {\n+                int targetTypeSize = source.size() - targetTypes.size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a2574f02b6ffd943813a987235f3439d0d9fe7c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE2ODQ5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else {\n          \n          \n            \n                        if (source.size() != targetType.getTupleTypes().size()) {\n          \n          \n            \n                            return false;\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    } else if (source.size() != targetType.getTupleTypes().size()) {\n          \n          \n            \n                        return false;            \n          \n          \n            \n                    }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r503168498", "createdAt": "2020-10-12T09:38:13Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1982,26 +1982,41 @@ private static boolean checkIsLikeTupleType(Object sourceValue, BTupleType targe\n         }\n \n         ArrayValue source = (ArrayValue) sourceValue;\n-        if (source.size() != targetType.getTupleTypes().size()) {\n+        if (targetType.getRestType() == null && source.size() != targetType.getTupleTypes().size()) {\n             return false;\n         }\n \n+        List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n+        if (targetType.getRestType() != null) {\n+            if (source.size() <= targetTypes.size()) {\n+                return false;\n+            } else {\n+                int targetTypeSize = source.size() - targetTypes.size();\n+                for (int i = 0; i < targetTypeSize; i++) {\n+                    targetTypes.add(targetType.getRestType());\n+                }\n+            }\n+        } else {\n+            if (source.size() != targetType.getTupleTypes().size()) {\n+                return false;\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a2574f02b6ffd943813a987235f3439d0d9fe7c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE2OTcwOA==", "bodyText": "Can we rename this to reflect what's being tested?\ne.g.,\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            function testIsLike1() {\n          \n          \n            \n            function testIsLikeForTupleWithRestDescriptor() {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r503169708", "createdAt": "2020-10-12T09:40:04Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/jvm/type-test-expr.bal", "diffHunk": "@@ -131,3 +131,29 @@ function testAnyJsonTypes() returns [boolean, boolean, boolean, boolean] {\n \n     return [aa is json, bb is json, dd is json, ff is json];\n }\n+\n+function testIsLike1() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a2574f02b6ffd943813a987235f3439d0d9fe7c"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4MTc1NTMy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#pullrequestreview-508175532", "createdAt": "2020-10-14T09:45:35Z", "commit": {"oid": "b50e2f36e32aff989d8973fc38c13af160f2a8c2"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTo0NTozNlrOHhK_yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDozNToyOFrOHhMw_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0NTIyNg==", "bodyText": "We don't need a new list now, right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r504545226", "createdAt": "2020-10-14T09:45:36Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1982,26 +1982,43 @@ private static boolean checkIsLikeTupleType(Object sourceValue, BTupleType targe\n         }\n \n         ArrayValue source = (ArrayValue) sourceValue;\n-        if (source.size() != targetType.getTupleTypes().size()) {\n+        List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b50e2f36e32aff989d8973fc38c13af160f2a8c2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1ODAwNA==", "bodyText": "Why do we return false when sourceTypeSize == targetTypeSize ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r504558004", "createdAt": "2020-10-14T10:06:32Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1982,26 +1982,43 @@ private static boolean checkIsLikeTupleType(Object sourceValue, BTupleType targe\n         }\n \n         ArrayValue source = (ArrayValue) sourceValue;\n-        if (source.size() != targetType.getTupleTypes().size()) {\n+        List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n+        int sourceTypeSize = source.size();\n+        int targetTypeSize = targetTypes.size();\n+        BType targetRestType = targetType.getRestType();\n+\n+        if (targetRestType == null && sourceTypeSize != targetTypeSize) {\n+            return false;\n+        }\n+        if (targetRestType != null && sourceTypeSize <= targetTypeSize) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b50e2f36e32aff989d8973fc38c13af160f2a8c2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2ODE1MA==", "bodyText": "The following shouldn't panic.\npublic function main() {\n    [anydata, anydata] x = [1, 2];\n    any a = x.cloneReadOnly();\n\n    if !(a is [int, int, int...]) {\n        panic error(\"didn't match\");\n    }\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r504568150", "createdAt": "2020-10-14T10:24:34Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1982,26 +1982,43 @@ private static boolean checkIsLikeTupleType(Object sourceValue, BTupleType targe\n         }\n \n         ArrayValue source = (ArrayValue) sourceValue;\n-        if (source.size() != targetType.getTupleTypes().size()) {\n+        List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n+        int sourceTypeSize = source.size();\n+        int targetTypeSize = targetTypes.size();\n+        BType targetRestType = targetType.getRestType();\n+\n+        if (targetRestType == null && sourceTypeSize != targetTypeSize) {\n+            return false;\n+        }\n+        if (targetRestType != null && sourceTypeSize <= targetTypeSize) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1ODAwNA=="}, "originalCommit": {"oid": "b50e2f36e32aff989d8973fc38c13af160f2a8c2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU3MjU2OA==", "bodyText": "Why do we have to use special methods checkTupleElementType and getArrayElementType here and in the next for loop?\nCan't (shouldn't) we directly call\ncheckIsLikeType(source.getRefValue(i), targetTypes.get(i), unresolvedValues, allowNumericConversion)?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r504572568", "createdAt": "2020-10-14T10:32:34Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1982,26 +1982,43 @@ private static boolean checkIsLikeTupleType(Object sourceValue, BTupleType targe\n         }\n \n         ArrayValue source = (ArrayValue) sourceValue;\n-        if (source.size() != targetType.getTupleTypes().size()) {\n+        List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n+        int sourceTypeSize = source.size();\n+        int targetTypeSize = targetTypes.size();\n+        BType targetRestType = targetType.getRestType();\n+\n+        if (targetRestType == null && sourceTypeSize != targetTypeSize) {\n+            return false;\n+        }\n+        if (targetRestType != null && sourceTypeSize <= targetTypeSize) {\n             return false;\n         }\n \n-        int bound = source.size();\n-        for (int i = 0; i < bound; i++) {\n-            BType elementType = getArrayElementType(source, i);\n-            if (BTypes.isValueType(elementType)) {\n-                if (!checkIsType(elementType, targetType.getTupleTypes().get(i), new ArrayList<>())) {\n-                    return false;\n-                }\n-            } else {\n-                if (!checkIsLikeType(source.getRefValue(i), targetType.getTupleTypes().get(i), unresolvedValues,\n-                        allowNumericConversion)) {\n-                    return false;\n-                }\n+        for (int i = 0; i < targetTypeSize; i++) {\n+            if (!checkTupleElementType(getArrayElementType(source, i), targetTypes.get(i), source.getRefValue(i),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b50e2f36e32aff989d8973fc38c13af160f2a8c2"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU3NDIwNw==", "bodyText": "There's also an issue with this check that results in calling checkIsType.\nThe following panics even though it shouldn't because the immutable list [1, 2] belongs to [byte, byte].\npublic function main() {\n    [int, int] x = [1, 2];\n    any a = x.cloneReadOnly();\n\n    if !(a is [byte, byte]) {\n        panic error(\"didn't match\");\n    }\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r504574207", "createdAt": "2020-10-14T10:35:28Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1982,26 +1982,43 @@ private static boolean checkIsLikeTupleType(Object sourceValue, BTupleType targe\n         }\n \n         ArrayValue source = (ArrayValue) sourceValue;\n-        if (source.size() != targetType.getTupleTypes().size()) {\n+        List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n+        int sourceTypeSize = source.size();\n+        int targetTypeSize = targetTypes.size();\n+        BType targetRestType = targetType.getRestType();\n+\n+        if (targetRestType == null && sourceTypeSize != targetTypeSize) {\n+            return false;\n+        }\n+        if (targetRestType != null && sourceTypeSize <= targetTypeSize) {\n             return false;\n         }\n \n-        int bound = source.size();\n-        for (int i = 0; i < bound; i++) {\n-            BType elementType = getArrayElementType(source, i);\n-            if (BTypes.isValueType(elementType)) {\n-                if (!checkIsType(elementType, targetType.getTupleTypes().get(i), new ArrayList<>())) {\n-                    return false;\n-                }\n-            } else {\n-                if (!checkIsLikeType(source.getRefValue(i), targetType.getTupleTypes().get(i), unresolvedValues,\n-                        allowNumericConversion)) {\n-                    return false;\n-                }\n+        for (int i = 0; i < targetTypeSize; i++) {\n+            if (!checkTupleElementType(getArrayElementType(source, i), targetTypes.get(i), source.getRefValue(i),\n+                    unresolvedValues, allowNumericConversion)) {\n+                return false;\n+            }\n+        }\n+\n+        for (int i = targetTypeSize; i < sourceTypeSize; i++) {\n+            if (!checkTupleElementType(getArrayElementType(source, i), targetRestType, source.getRefValue(i),\n+                    unresolvedValues, allowNumericConversion)) {\n+                return false;\n             }\n         }\n         return true;\n+    }\n \n+    private static boolean checkTupleElementType(BType sourceElementType, BType targetElementType,\n+                                                 Object sourceRefValue, List<TypeValuePair> unresolvedValues,\n+                                                 boolean allowNumericConversion) {\n+        if (BTypes.isValueType(sourceElementType)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b50e2f36e32aff989d8973fc38c13af160f2a8c2"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfe4273b091f8f4cf709fc2e6aa9afa5a663f612", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dfe4273b091f8f4cf709fc2e6aa9afa5a663f612", "committedDate": "2020-10-14T20:06:43Z", "message": "Check the tuple type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9449ef2b5218f536374b02c885025a16b4b13be4", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9449ef2b5218f536374b02c885025a16b4b13be4", "committedDate": "2020-10-14T20:06:43Z", "message": "Add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b302f89eb391cd7369354e71bf1cd375aa0bfaf7", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b302f89eb391cd7369354e71bf1cd375aa0bfaf7", "committedDate": "2020-10-14T20:06:43Z", "message": "Fix Suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52a13c4b0179a3a3205f84964f6d71d85ef8c5e2", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/52a13c4b0179a3a3205f84964f6d71d85ef8c5e2", "committedDate": "2020-10-14T20:06:43Z", "message": "Fix suggestions and added more tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b50e2f36e32aff989d8973fc38c13af160f2a8c2", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b50e2f36e32aff989d8973fc38c13af160f2a8c2", "committedDate": "2020-10-13T04:05:50Z", "message": "Fix Suggestions"}, "afterCommit": {"oid": "52a13c4b0179a3a3205f84964f6d71d85ef8c5e2", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/52a13c4b0179a3a3205f84964f6d71d85ef8c5e2", "committedDate": "2020-10-14T20:06:43Z", "message": "Fix suggestions and added more tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4OTE3OTU2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#pullrequestreview-508917956", "createdAt": "2020-10-15T03:50:11Z", "commit": {"oid": "52a13c4b0179a3a3205f84964f6d71d85ef8c5e2"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMzo1MDoxMlrOHhvy3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNDoxMjo1OFrOHhwGjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0ODEyNQ==", "bodyText": "Yeah, but since we are not updating it now we can just do\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n          \n          \n            \n                    List<BType> targetTypes = targetType.getTupleTypes();\n          \n      \n    \n    \n  \n\nright?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r505148125", "createdAt": "2020-10-15T03:50:12Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1982,26 +1982,43 @@ private static boolean checkIsLikeTupleType(Object sourceValue, BTupleType targe\n         }\n \n         ArrayValue source = (ArrayValue) sourceValue;\n-        if (source.size() != targetType.getTupleTypes().size()) {\n+        List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0NTIyNg=="}, "originalCommit": {"oid": "b50e2f36e32aff989d8973fc38c13af160f2a8c2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1MTY5OQ==", "bodyText": "Isn't it definitely an error if sourceTypeSize < targetTypeSize irrespective of whether or not there is a rest descriptor? Shouldn't we check that and return false as the first check?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r505151699", "createdAt": "2020-10-15T04:06:03Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1982,41 +1982,29 @@ private static boolean checkIsLikeTupleType(Object sourceValue, BTupleType targe\n         }\n \n         ArrayValue source = (ArrayValue) sourceValue;\n-        if (source.size() != targetType.getTupleTypes().size()) {\n+        List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n+        int sourceTypeSize = source.size();\n+        int targetTypeSize = targetTypes.size();\n+        BType targetRestType = targetType.getRestType();\n+\n+        if (targetRestType == null && sourceTypeSize != targetTypeSize) {\n+            return false;\n+        }\n+        if (targetRestType != null && sourceTypeSize < targetTypeSize) {\n             return false;\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a13c4b0179a3a3205f84964f6d71d85ef8c5e2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1MjA3NA==", "bodyText": "I guess we can then do\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (targetRestType == null && sourceTypeSize != targetTypeSize) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n                    if (targetRestType != null && sourceTypeSize < targetTypeSize) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n                    if (sourceTypeSize < targetTypeSize) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n                    \n          \n          \n            \n                    if (targetRestType == null && sourceTypeSize > targetTypeSize) {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r505152074", "createdAt": "2020-10-15T04:07:55Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1982,41 +1982,29 @@ private static boolean checkIsLikeTupleType(Object sourceValue, BTupleType targe\n         }\n \n         ArrayValue source = (ArrayValue) sourceValue;\n-        if (source.size() != targetType.getTupleTypes().size()) {\n+        List<BType> targetTypes = new ArrayList<>(targetType.getTupleTypes());\n+        int sourceTypeSize = source.size();\n+        int targetTypeSize = targetTypes.size();\n+        BType targetRestType = targetType.getRestType();\n+\n+        if (targetRestType == null && sourceTypeSize != targetTypeSize) {\n+            return false;\n+        }\n+        if (targetRestType != null && sourceTypeSize < targetTypeSize) {\n             return false;\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1MTY5OQ=="}, "originalCommit": {"oid": "52a13c4b0179a3a3205f84964f6d71d85ef8c5e2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1Mjg2NQ==", "bodyText": "Shouldn't this be in a different test since there's no rest descriptor here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r505152865", "createdAt": "2020-10-15T04:11:38Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/jvm/type-test-expr.bal", "diffHunk": "@@ -131,3 +131,37 @@ function testAnyJsonTypes() returns [boolean, boolean, boolean, boolean] {\n \n     return [aa is json, bb is json, dd is json, ff is json];\n }\n+\n+function testIsLikeForTupleWithRestDescriptor() {\n+    anydata k1 = [1, 2, 3, 4];\n+    anydata k2 = k1.cloneReadOnly();\n+    assertEquals(k2 is [int, int, anydata...], true);\n+\n+    anydata k3 = [1, 2, true, \"str\"];\n+    anydata k4 = k3.cloneReadOnly();\n+    assertEquals(k4 is [int, int, anydata...], true);\n+\n+    anydata k5 = [1, \"str\", true, \"str\"];\n+    anydata k6 = k5.cloneReadOnly();\n+    assertEquals(k6 is [int, string, anydata...], true);\n+\n+    anydata k7 = [1, \"str\", true, \"str\"];\n+    anydata k8 = k7.cloneReadOnly();\n+    assertEquals(k8 is [int, int, anydata...], false);\n+\n+    [anydata, anydata] k9 = [1, 2];\n+    anydata k10 = k9.cloneReadOnly();\n+    assertEquals(k10 is [int, int, int...], true);\n+\n+    [int, int] k11 = [1, 2];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a13c4b0179a3a3205f84964f6d71d85ef8c5e2"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1MzE2NQ==", "bodyText": "Shall we also add tests for where the source size is less than the target tuple member size?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#discussion_r505153165", "createdAt": "2020-10-15T04:12:58Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/jvm/type-test-expr.bal", "diffHunk": "@@ -131,3 +131,37 @@ function testAnyJsonTypes() returns [boolean, boolean, boolean, boolean] {\n \n     return [aa is json, bb is json, dd is json, ff is json];\n }\n+\n+function testIsLikeForTupleWithRestDescriptor() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a13c4b0179a3a3205f84964f6d71d85ef8c5e2"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "650a114671e8d0fbb99dd6327e12461b60f9326d", "author": {"user": {"login": "KavinduZoysa", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/650a114671e8d0fbb99dd6327e12461b60f9326d", "committedDate": "2020-10-15T08:40:35Z", "message": "Add more tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MTc5ODkw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26306#pullrequestreview-509179890", "createdAt": "2020-10-15T09:17:51Z", "commit": {"oid": "650a114671e8d0fbb99dd6327e12461b60f9326d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4563, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}