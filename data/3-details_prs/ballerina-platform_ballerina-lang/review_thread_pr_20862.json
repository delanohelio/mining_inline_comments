{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMjM4NzE3", "number": 20862, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwOTo1MDoyOFrODdRRrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNjo0MzozNVrODfD_pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDE4MzQ4OnYy", "diffSide": "RIGHT", "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/RunExecutableTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwOTo1MDoyOFrOFlxmGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMToyOTo1OVrOFl0jGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE1NDIwMQ==", "bodyText": "You can use StringJoiner with File.pathSeparator here.\nStringJoiner joiner = new StringJoiner(File.pathSeparator);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20862#discussion_r375154201", "createdAt": "2020-02-05T09:50:28Z", "author": {"login": "rasika"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/RunExecutableTask.java", "diffHunk": "@@ -207,15 +195,16 @@ private void runGeneratedExecutableWithSameClassLoader(BLangPackage executableMo\n         }\n     }\n \n-    private static String getClassPath(ExecutableJar jar) {\n-        String seperator = \":\";\n-        if (OsUtils.isWindows()) {\n-            seperator = \";\";\n-        }\n-        StringBuilder classPath = new StringBuilder(jar.moduleJar.toString());\n-        for (Path path : jar.platformLibs) {\n-            classPath.append(seperator).append(path);\n-        }\n-        return classPath.toString();\n+    private String getAllClassPaths(BLangPackage executableModule, BuildContext buildContext) {\n+        // Since classpath separator depends on the OS type\n+        String separator = OsUtils.isWindows() ? \";\" : \":\";\n+        StringBuilder cp = new StringBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "317146dcc2380f456c4ae6b0e508c4cb2128083e"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIwMjU4Ng==", "bodyText": "@rasika That's a good suggestion! I did a rough timing analysis for both approaches and StringJoiner is slighly faster than StringBuilder in here. Thanks for pointing that out :)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20862#discussion_r375202586", "createdAt": "2020-02-05T11:29:59Z", "author": {"login": "NipunaRanasinghe"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/RunExecutableTask.java", "diffHunk": "@@ -207,15 +195,16 @@ private void runGeneratedExecutableWithSameClassLoader(BLangPackage executableMo\n         }\n     }\n \n-    private static String getClassPath(ExecutableJar jar) {\n-        String seperator = \":\";\n-        if (OsUtils.isWindows()) {\n-            seperator = \";\";\n-        }\n-        StringBuilder classPath = new StringBuilder(jar.moduleJar.toString());\n-        for (Path path : jar.platformLibs) {\n-            classPath.append(seperator).append(path);\n-        }\n-        return classPath.toString();\n+    private String getAllClassPaths(BLangPackage executableModule, BuildContext buildContext) {\n+        // Since classpath separator depends on the OS type\n+        String separator = OsUtils.isWindows() ? \";\" : \":\";\n+        StringBuilder cp = new StringBuilder();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE1NDIwMQ=="}, "originalCommit": {"oid": "317146dcc2380f456c4ae6b0e508c4cb2128083e"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODk2OTY1OnYy", "diffSide": "RIGHT", "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/RunExecutableTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNjozODoxNFrOFojH1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNjozODoxNFrOFojH1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA2MjgwNw==", "bodyText": "not found?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20862#discussion_r378062807", "createdAt": "2020-02-12T06:38:14Z", "author": {"login": "warunalakshitha"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/RunExecutableTask.java", "diffHunk": "@@ -64,71 +65,59 @@\n      * @param isInDebugMode Flag to notify whether the executable jar should be run in the debug mode.\n      */\n     public RunExecutableTask(String[] args, boolean isInDebugMode) {\n-        this(null, args);\n+        this(args);\n         this.isInDebugMode = isInDebugMode;\n     }\n \n     /**\n      * Create a task to run an executable from a given path.\n      *\n-     * @param executablePath The path to the executable.\n-     * @param args           Arguments for the executable.\n+     * @param args Arguments for the executable.\n      */\n-    public RunExecutableTask(Path executablePath, String[] args) {\n-        this.executablePath = executablePath;\n+    public RunExecutableTask(String[] args) {\n         this.args = args;\n     }\n \n     @Override\n     public void execute(BuildContext buildContext) {\n         Path sourceRootPath = buildContext.get(BuildContextField.SOURCE_ROOT);\n+\n         BLangPackage executableModule = null;\n-        // set executable path from an executable built on the go\n-        if (null == this.executablePath) {\n-            for (BLangPackage module : buildContext.getModules()) {\n-                if (module.symbol.entryPointExists) {\n-                    this.executablePath = buildContext.getExecutablePathFromTarget(module.packageID);\n-                    executableModule = module;\n-                    break;\n-                }\n+        for (BLangPackage module : buildContext.getModules()) {\n+            if (module.symbol.entryPointExists) {\n+                executableModule = module;\n+                this.executableJarPath = buildContext.getJarPathFromTargetCache(executableModule.packageID);\n+                break;\n             }\n+        }\n \n-            // check if executable found with entry points.\n-            if (null == this.executablePath) {\n-                switch (buildContext.getSourceType()) {\n-                    case SINGLE_BAL_FILE:\n-                        SingleFileContext singleFileContext = buildContext.get(BuildContextField.SOURCE_CONTEXT);\n-                        throw createLauncherException(\"no entry points found in '\" + singleFileContext.getBalFile() +\n-                                \"'.\");\n-                    case SINGLE_MODULE:\n-                        SingleModuleContext singleModuleContext = buildContext.get(BuildContextField.SOURCE_CONTEXT);\n-                        throw createLauncherException(\"no entry points found in '\" +\n-                                singleModuleContext.getModuleName() + \"'.\");\n-                    default:\n-                        throw createLauncherException(\"unknown source type found when running executable.\");\n-                }\n+        // check if any entry points are found.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "211ca425afe0c515a5a7edb77c62e5b483943ac0"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODk3MTg4OnYy", "diffSide": "RIGHT", "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/RunExecutableTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNjozOTozNlrOFojJQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwOToxNTowMlrOFomxIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA2MzE3MQ==", "bodyText": "Do we need this check. module jar always jar file", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20862#discussion_r378063171", "createdAt": "2020-02-12T06:39:36Z", "author": {"login": "warunalakshitha"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/RunExecutableTask.java", "diffHunk": "@@ -64,71 +65,59 @@\n      * @param isInDebugMode Flag to notify whether the executable jar should be run in the debug mode.\n      */\n     public RunExecutableTask(String[] args, boolean isInDebugMode) {\n-        this(null, args);\n+        this(args);\n         this.isInDebugMode = isInDebugMode;\n     }\n \n     /**\n      * Create a task to run an executable from a given path.\n      *\n-     * @param executablePath The path to the executable.\n-     * @param args           Arguments for the executable.\n+     * @param args Arguments for the executable.\n      */\n-    public RunExecutableTask(Path executablePath, String[] args) {\n-        this.executablePath = executablePath;\n+    public RunExecutableTask(String[] args) {\n         this.args = args;\n     }\n \n     @Override\n     public void execute(BuildContext buildContext) {\n         Path sourceRootPath = buildContext.get(BuildContextField.SOURCE_ROOT);\n+\n         BLangPackage executableModule = null;\n-        // set executable path from an executable built on the go\n-        if (null == this.executablePath) {\n-            for (BLangPackage module : buildContext.getModules()) {\n-                if (module.symbol.entryPointExists) {\n-                    this.executablePath = buildContext.getExecutablePathFromTarget(module.packageID);\n-                    executableModule = module;\n-                    break;\n-                }\n+        for (BLangPackage module : buildContext.getModules()) {\n+            if (module.symbol.entryPointExists) {\n+                executableModule = module;\n+                this.executableJarPath = buildContext.getJarPathFromTargetCache(executableModule.packageID);\n+                break;\n             }\n+        }\n \n-            // check if executable found with entry points.\n-            if (null == this.executablePath) {\n-                switch (buildContext.getSourceType()) {\n-                    case SINGLE_BAL_FILE:\n-                        SingleFileContext singleFileContext = buildContext.get(BuildContextField.SOURCE_CONTEXT);\n-                        throw createLauncherException(\"no entry points found in '\" + singleFileContext.getBalFile() +\n-                                \"'.\");\n-                    case SINGLE_MODULE:\n-                        SingleModuleContext singleModuleContext = buildContext.get(BuildContextField.SOURCE_CONTEXT);\n-                        throw createLauncherException(\"no entry points found in '\" +\n-                                singleModuleContext.getModuleName() + \"'.\");\n-                    default:\n-                        throw createLauncherException(\"unknown source type found when running executable.\");\n-                }\n+        // check if any entry points are found.\n+        if (executableModule == null) {\n+            switch (buildContext.getSourceType()) {\n+                case SINGLE_BAL_FILE:\n+                    SingleFileContext singleFileContext = buildContext.get(BuildContextField.SOURCE_CONTEXT);\n+                    throw createLauncherException(String.format(\"no entry points found in '%s'.\",\n+                            singleFileContext.getBalFile()));\n+                case SINGLE_MODULE:\n+                    SingleModuleContext singleModuleContext = buildContext.get(BuildContextField.SOURCE_CONTEXT);\n+                    throw createLauncherException(String.format(\"no entry points found in '%s'.\",\n+                            singleModuleContext.getModuleName()));\n+                default:\n+                    throw createLauncherException(\"unknown source type found when running executable.\");\n             }\n         }\n \n-        if (!this.executablePath.isAbsolute()) {\n-            this.executablePath = sourceRootPath.resolve(executablePath);\n+        // if the executable does not exist.\n+        if (Files.notExists(this.executableJarPath)) {\n+            throw createLauncherException(String.format(\"cannot run '%s' as it does not exist.\",\n+                    executableJarPath.toAbsolutePath().toString()));\n         }\n \n-        // clean up the path and get absolute path\n-        this.executablePath = this.executablePath.toAbsolutePath().normalize();\n-\n-        // if the executable does not exist\n-        if (Files.notExists(this.executablePath)) {\n-            throw createLauncherException(\"cannot run '\" + this.executablePath.toAbsolutePath().toString() +\n-                    \"' as it does not exist.\");\n-        }\n-\n-        // if the executable is not a file and not an extension with .jar\n-        if (!(Files.isRegularFile(this.executablePath) &&\n-                this.executablePath.toString().endsWith(BLANG_COMPILED_JAR_EXT))) {\n-\n-            throw createLauncherException(\"cannot run '\" + this.executablePath.toAbsolutePath().toString() +\n-                    \"' as it is not an executable with .jar extension.\");\n+        // if the executable is not a file and not an extension with .jar.\n+        if (!(Files.isRegularFile(this.executableJarPath) &&\n+                this.executableJarPath.toString().endsWith(BLANG_COMPILED_JAR_EXT))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "211ca425afe0c515a5a7edb77c62e5b483943ac0"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEyMjUzMQ==", "bodyText": "I added the same check we had for the final uber jar(I wasn't sure why we had this at the first place). Anyway if this is redundant for the module jar, we can remove. @Kishanthan WDYT?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20862#discussion_r378122531", "createdAt": "2020-02-12T09:15:02Z", "author": {"login": "NipunaRanasinghe"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/RunExecutableTask.java", "diffHunk": "@@ -64,71 +65,59 @@\n      * @param isInDebugMode Flag to notify whether the executable jar should be run in the debug mode.\n      */\n     public RunExecutableTask(String[] args, boolean isInDebugMode) {\n-        this(null, args);\n+        this(args);\n         this.isInDebugMode = isInDebugMode;\n     }\n \n     /**\n      * Create a task to run an executable from a given path.\n      *\n-     * @param executablePath The path to the executable.\n-     * @param args           Arguments for the executable.\n+     * @param args Arguments for the executable.\n      */\n-    public RunExecutableTask(Path executablePath, String[] args) {\n-        this.executablePath = executablePath;\n+    public RunExecutableTask(String[] args) {\n         this.args = args;\n     }\n \n     @Override\n     public void execute(BuildContext buildContext) {\n         Path sourceRootPath = buildContext.get(BuildContextField.SOURCE_ROOT);\n+\n         BLangPackage executableModule = null;\n-        // set executable path from an executable built on the go\n-        if (null == this.executablePath) {\n-            for (BLangPackage module : buildContext.getModules()) {\n-                if (module.symbol.entryPointExists) {\n-                    this.executablePath = buildContext.getExecutablePathFromTarget(module.packageID);\n-                    executableModule = module;\n-                    break;\n-                }\n+        for (BLangPackage module : buildContext.getModules()) {\n+            if (module.symbol.entryPointExists) {\n+                executableModule = module;\n+                this.executableJarPath = buildContext.getJarPathFromTargetCache(executableModule.packageID);\n+                break;\n             }\n+        }\n \n-            // check if executable found with entry points.\n-            if (null == this.executablePath) {\n-                switch (buildContext.getSourceType()) {\n-                    case SINGLE_BAL_FILE:\n-                        SingleFileContext singleFileContext = buildContext.get(BuildContextField.SOURCE_CONTEXT);\n-                        throw createLauncherException(\"no entry points found in '\" + singleFileContext.getBalFile() +\n-                                \"'.\");\n-                    case SINGLE_MODULE:\n-                        SingleModuleContext singleModuleContext = buildContext.get(BuildContextField.SOURCE_CONTEXT);\n-                        throw createLauncherException(\"no entry points found in '\" +\n-                                singleModuleContext.getModuleName() + \"'.\");\n-                    default:\n-                        throw createLauncherException(\"unknown source type found when running executable.\");\n-                }\n+        // check if any entry points are found.\n+        if (executableModule == null) {\n+            switch (buildContext.getSourceType()) {\n+                case SINGLE_BAL_FILE:\n+                    SingleFileContext singleFileContext = buildContext.get(BuildContextField.SOURCE_CONTEXT);\n+                    throw createLauncherException(String.format(\"no entry points found in '%s'.\",\n+                            singleFileContext.getBalFile()));\n+                case SINGLE_MODULE:\n+                    SingleModuleContext singleModuleContext = buildContext.get(BuildContextField.SOURCE_CONTEXT);\n+                    throw createLauncherException(String.format(\"no entry points found in '%s'.\",\n+                            singleModuleContext.getModuleName()));\n+                default:\n+                    throw createLauncherException(\"unknown source type found when running executable.\");\n             }\n         }\n \n-        if (!this.executablePath.isAbsolute()) {\n-            this.executablePath = sourceRootPath.resolve(executablePath);\n+        // if the executable does not exist.\n+        if (Files.notExists(this.executableJarPath)) {\n+            throw createLauncherException(String.format(\"cannot run '%s' as it does not exist.\",\n+                    executableJarPath.toAbsolutePath().toString()));\n         }\n \n-        // clean up the path and get absolute path\n-        this.executablePath = this.executablePath.toAbsolutePath().normalize();\n-\n-        // if the executable does not exist\n-        if (Files.notExists(this.executablePath)) {\n-            throw createLauncherException(\"cannot run '\" + this.executablePath.toAbsolutePath().toString() +\n-                    \"' as it does not exist.\");\n-        }\n-\n-        // if the executable is not a file and not an extension with .jar\n-        if (!(Files.isRegularFile(this.executablePath) &&\n-                this.executablePath.toString().endsWith(BLANG_COMPILED_JAR_EXT))) {\n-\n-            throw createLauncherException(\"cannot run '\" + this.executablePath.toAbsolutePath().toString() +\n-                    \"' as it is not an executable with .jar extension.\");\n+        // if the executable is not a file and not an extension with .jar.\n+        if (!(Files.isRegularFile(this.executableJarPath) &&\n+                this.executableJarPath.toString().endsWith(BLANG_COMPILED_JAR_EXT))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA2MzE3MQ=="}, "originalCommit": {"oid": "211ca425afe0c515a5a7edb77c62e5b483943ac0"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODk3ODkyOnYy", "diffSide": "RIGHT", "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/RunExecutableTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNjo0MzozNVrOFojNew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwOToxNjo0MVrOFom0Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA2NDI1MQ==", "bodyText": "this is module jar i think?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20862#discussion_r378064251", "createdAt": "2020-02-12T06:43:35Z", "author": {"login": "warunalakshitha"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/RunExecutableTask.java", "diffHunk": "@@ -53,7 +54,7 @@\n public class RunExecutableTask implements Task {\n \n     private final String[] args;\n-    private Path executablePath;\n+    private Path executableJarPath;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "211ca425afe0c515a5a7edb77c62e5b483943ac0"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEyMzMzOQ==", "bodyText": "Yeah this is the module executable jar file path. Do you have any alternative suggestions for the var name?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20862#discussion_r378123339", "createdAt": "2020-02-12T09:16:41Z", "author": {"login": "NipunaRanasinghe"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/RunExecutableTask.java", "diffHunk": "@@ -53,7 +54,7 @@\n public class RunExecutableTask implements Task {\n \n     private final String[] args;\n-    private Path executablePath;\n+    private Path executableJarPath;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA2NDI1MQ=="}, "originalCommit": {"oid": "211ca425afe0c515a5a7edb77c62e5b483943ac0"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1268, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}