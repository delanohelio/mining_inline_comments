{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNjAzMjg5", "number": 23110, "title": "[Master] Add SASL / PLAIN authentication support for Ballerina Kafka", "bodyText": "Purpose\n\nBallerina Kafka module does not support any authentication mechanism currently. With this PR, the SASL/PLAIN authentication support is added.\n\nFixes #22480\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-05-05T15:53:56Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110", "merged": true, "mergeCommit": {"oid": "838d8137919d9221c5f1ecabef1941865ed99dbb"}, "closed": true, "closedAt": "2020-05-11T10:08:49Z", "author": {"login": "ThisaruGuruge"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABceWIKLAH2gAyNDEzNjAzMjg5OmVmZTVlOWFlN2NkYzhiNmJkMzFiYmJmNDJmMjBkYmIxN2E1YzhhMzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgMMR-AFqTQwOTAwNDc1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "efe5e9ae7cdc8b6bd31bbbf42f20dbb17a5c8a38", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/efe5e9ae7cdc8b6bd31bbbf42f20dbb17a5c8a38", "committedDate": "2020-05-05T15:50:38Z", "message": "Indent API documentations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b510d007053c9d8aa5859a9fef31be103faaaee", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6b510d007053c9d8aa5859a9fef31be103faaaee", "committedDate": "2020-05-05T15:50:51Z", "message": "Reorganize kafka tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc0c02e449e566ea5c1754a7c05ec7d5c9d60eae", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cc0c02e449e566ea5c1754a7c05ec7d5c9d60eae", "committedDate": "2020-05-05T15:50:59Z", "message": "Add SASL/PLAIN authentication to kafka producer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a34ac2981779dc4318b58e61d08e205ff06a3d5a", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a34ac2981779dc4318b58e61d08e205ff06a3d5a", "committedDate": "2020-05-05T15:51:07Z", "message": "Add invalid username test for SASL plain"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c85c7805ae17cb08695a0a8de90f284042d3495b", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c85c7805ae17cb08695a0a8de90f284042d3495b", "committedDate": "2020-05-05T15:51:14Z", "message": "Bump debezium version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adc068a6babd004cb4f7c52d12244d11cd873b47", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/adc068a6babd004cb4f7c52d12244d11cd873b47", "committedDate": "2020-05-05T15:51:21Z", "message": "Add SASL PLAIN authentication support for Consumer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d60c40ca49aaf109d453cbe2d346cb52b835839b", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d60c40ca49aaf109d453cbe2d346cb52b835839b", "committedDate": "2020-05-05T15:51:29Z", "message": "Add BBEs for Kafka SASL/PLAIN authentication"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/334fe469d5cf328d83d09a1a1123f6a6d42e48ce", "committedDate": "2020-05-05T15:51:37Z", "message": "Add tests for SASL PLAIN authentication for Kafka consumers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1OTM3NzUz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#pullrequestreview-405937753", "createdAt": "2020-05-05T16:07:10Z", "commit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "state": "COMMENTED", "comments": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjowNzoxMFrOGQwrAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjoyMToyNlrOGQxQ4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyNzg0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // The `kafka:AuthenticationConfiguration` is used to provide authentication related details.\n          \n          \n            \n            // The `kafka:AuthenticationConfiguration` is used to provide authentication-related details.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420227841", "createdAt": "2020-05-05T16:07:10Z", "author": {"login": "praneesha"}, "path": "examples/kafka-authentication-sasl-plain-consumer/kafka_authentication_sasl_plain_consumer.bal", "diffHunk": "@@ -0,0 +1,34 @@\n+import ballerina/kafka;\n+import ballerina/log;\n+\n+// The `kafka:AuthenticationConfiguration` is used to provide authentication related details.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyODcxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Here, is an example of a kafka consumer using SASL/PLAIN authentication.\n          \n          \n            \n            // Here, is an example of a Kafka consumer using SASL/PLAIN authentication.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420228715", "createdAt": "2020-05-05T16:08:29Z", "author": {"login": "praneesha"}, "path": "examples/kafka-authentication-sasl-plain-consumer/kafka_authentication_sasl_plain_consumer.description", "diffHunk": "@@ -0,0 +1,3 @@\n+// Here, is an example of a kafka consumer using SASL/PLAIN authentication.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyOTAzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // The `kafka:AuthenticationConfiguration` is used to provide authentication related details.\n          \n          \n            \n            // The `kafka:AuthenticationConfiguration` is used to provide authentication-related details.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420229035", "createdAt": "2020-05-05T16:08:58Z", "author": {"login": "praneesha"}, "path": "examples/kafka-authentication-sasl-plain-producer/kafka_authentication_sasl_plain_producer.bal", "diffHunk": "@@ -0,0 +1,31 @@\n+import ballerina/io;\n+import ballerina/kafka;\n+\n+// The `kafka:AuthenticationConfiguration` is used to provide authentication related details.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyOTI2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Here, is an example of a kafka producer using SASL/PLAIN authentication.\n          \n          \n            \n            // Here, is an example of a Kafka producer using SASL/PLAIN authentication.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420229268", "createdAt": "2020-05-05T16:09:18Z", "author": {"login": "praneesha"}, "path": "examples/kafka-authentication-sasl-plain-producer/kafka_authentication_sasl_plain_producer.description", "diffHunk": "@@ -0,0 +1,3 @@\n+// Here, is an example of a kafka producer using SASL/PLAIN authentication.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyOTY0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + authenticationMechanism - Type of authentication mechanism. Currently SASL_PLAIN and SCRAM is supported. See\n          \n          \n            \n            # + authenticationMechanism - Type of the authentication mechanism. Currently, SASL_PLAIN and SCRAM are supported. See", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420229644", "createdAt": "2020-05-05T16:09:52Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/commons.bal", "diffHunk": "@@ -96,7 +96,27 @@ public type TrustStore record {|\n #                 supported in older JVMs but their usage is discouraged due to known security vulnerabilities\n # + sslProtocolVersions - The list of protocols enabled for SSL connections\n public type Protocols record {|\n-    string securityProtocol = \"\"; // SECURITY_PROTOCOL_CONFIG 1\n-    string sslProtocol = \"\"; // SSL_PROTOCOL_CONFIG 2\n-    string sslProtocolVersions = \"\"; // SSL_ENABLED_PROTOCOLS_CONFIG 3\n+    string securityProtocol;\n+    string sslProtocol;\n+    string sslProtocolVersions;\n |};\n+\n+# Configurations related to Kafka authentication mechanisms.\n+#\n+# + authenticationMechanism - Type of authentication mechanism. Currently SASL_PLAIN and SCRAM is supported. See", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyOTg0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + securityProtocol - Type of the security protocol to use in broker connection\n          \n          \n            \n            # + securityProtocol - Type of the security protocol to use in the broker connection", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420229843", "createdAt": "2020-05-05T16:10:12Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/commons.bal", "diffHunk": "@@ -96,7 +96,27 @@ public type TrustStore record {|\n #                 supported in older JVMs but their usage is discouraged due to known security vulnerabilities\n # + sslProtocolVersions - The list of protocols enabled for SSL connections\n public type Protocols record {|\n-    string securityProtocol = \"\"; // SECURITY_PROTOCOL_CONFIG 1\n-    string sslProtocol = \"\"; // SSL_PROTOCOL_CONFIG 2\n-    string sslProtocolVersions = \"\"; // SSL_ENABLED_PROTOCOLS_CONFIG 3\n+    string securityProtocol;\n+    string sslProtocol;\n+    string sslProtocolVersions;\n |};\n+\n+# Configurations related to Kafka authentication mechanisms.\n+#\n+# + authenticationMechanism - Type of authentication mechanism. Currently SASL_PLAIN and SCRAM is supported. See\n+#                             `kafka:AuthennticationType` for more information\n+# + securityProtocol - Type of the security protocol to use in broker connection", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIyOTk2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + username - The username to use to authenticate the Kafka producer / consumer\n          \n          \n            \n            # + username - The username to use to authenticate the Kafka producer/consumer", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420229960", "createdAt": "2020-05-05T16:10:22Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/commons.bal", "diffHunk": "@@ -96,7 +96,27 @@ public type TrustStore record {|\n #                 supported in older JVMs but their usage is discouraged due to known security vulnerabilities\n # + sslProtocolVersions - The list of protocols enabled for SSL connections\n public type Protocols record {|\n-    string securityProtocol = \"\"; // SECURITY_PROTOCOL_CONFIG 1\n-    string sslProtocol = \"\"; // SSL_PROTOCOL_CONFIG 2\n-    string sslProtocolVersions = \"\"; // SSL_ENABLED_PROTOCOLS_CONFIG 3\n+    string securityProtocol;\n+    string sslProtocol;\n+    string sslProtocolVersions;\n |};\n+\n+# Configurations related to Kafka authentication mechanisms.\n+#\n+# + authenticationMechanism - Type of authentication mechanism. Currently SASL_PLAIN and SCRAM is supported. See\n+#                             `kafka:AuthennticationType` for more information\n+# + securityProtocol - Type of the security protocol to use in broker connection\n+# + username - The username to use to authenticate the Kafka producer / consumer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMDA2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + password - The password to use to authenticate the Kafka producer / consumer\n          \n          \n            \n            # + password - The password to use to authenticate the Kafka producer/consumer", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420230069", "createdAt": "2020-05-05T16:10:31Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/commons.bal", "diffHunk": "@@ -96,7 +96,27 @@ public type TrustStore record {|\n #                 supported in older JVMs but their usage is discouraged due to known security vulnerabilities\n # + sslProtocolVersions - The list of protocols enabled for SSL connections\n public type Protocols record {|\n-    string securityProtocol = \"\"; // SECURITY_PROTOCOL_CONFIG 1\n-    string sslProtocol = \"\"; // SSL_PROTOCOL_CONFIG 2\n-    string sslProtocolVersions = \"\"; // SSL_ENABLED_PROTOCOLS_CONFIG 3\n+    string securityProtocol;\n+    string sslProtocol;\n+    string sslProtocolVersions;\n |};\n+\n+# Configurations related to Kafka authentication mechanisms.\n+#\n+# + authenticationMechanism - Type of authentication mechanism. Currently SASL_PLAIN and SCRAM is supported. See\n+#                             `kafka:AuthennticationType` for more information\n+# + securityProtocol - Type of the security protocol to use in broker connection\n+# + username - The username to use to authenticate the Kafka producer / consumer\n+# + password - The password to use to authenticate the Kafka producer / consumer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMDI1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents supported security protocols for kafka clients.\n          \n          \n            \n            # Represents the supported security protocols for Kafka clients.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420230257", "createdAt": "2020-05-05T16:10:48Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/commons.bal", "diffHunk": "@@ -96,7 +96,27 @@ public type TrustStore record {|\n #                 supported in older JVMs but their usage is discouraged due to known security vulnerabilities\n # + sslProtocolVersions - The list of protocols enabled for SSL connections\n public type Protocols record {|\n-    string securityProtocol = \"\"; // SECURITY_PROTOCOL_CONFIG 1\n-    string sslProtocol = \"\"; // SSL_PROTOCOL_CONFIG 2\n-    string sslProtocolVersions = \"\"; // SSL_ENABLED_PROTOCOLS_CONFIG 3\n+    string securityProtocol;\n+    string sslProtocol;\n+    string sslProtocolVersions;\n |};\n+\n+# Configurations related to Kafka authentication mechanisms.\n+#\n+# + authenticationMechanism - Type of authentication mechanism. Currently SASL_PLAIN and SCRAM is supported. See\n+#                             `kafka:AuthennticationType` for more information\n+# + securityProtocol - Type of the security protocol to use in broker connection\n+# + username - The username to use to authenticate the Kafka producer / consumer\n+# + password - The password to use to authenticate the Kafka producer / consumer\n+public type AuthenticationConfiguration record {|\n+    AuthenticationMechanism authenticationMechanism = AUTH_SASL_PLAIN;\n+    string securityProtocol = PROTOCOL_SASL_PLAINTEXT;\n+    string username;\n+    string password;\n+|};\n+\n+# Represents the supported Kafka SASL authentication mechanisms.\n+public type AuthenticationMechanism AUTH_SASL_PLAIN;\n+\n+# Represents supported security protocols for kafka clients.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMDM5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + authenticationConfiguration - Authentication related configurations for the Kafka consumer\n          \n          \n            \n            # + authenticationConfiguration - Authentication-related configurations for the Kafka consumer", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420230399", "createdAt": "2020-05-05T16:11:00Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -67,7 +67,8 @@ import ballerina/java;\n #               performance is required\n # + excludeInternalTopics - Whether records from internal topics should be exposed to the consumer\n # + decoupleProcessing - Decouples processing\n-# + secureSocket - Configurations related to SSL/TLS\n+# + secureSocket - Configurations related to SSL/TLS encryption\n+# + authenticationConfiguration - Authentication related configurations for the Kafka consumer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMDU4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Closes consumer connection to the external Kafka broker.\n          \n          \n            \n                # Closes the consumer connection of the external Kafka broker.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420230581", "createdAt": "2020-05-05T16:11:15Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -260,23 +262,23 @@ public type Consumer client object {\n         return consumerAssign(self, partitions);\n     }\n \n-# Closes consumer connection to the external Kafka broker.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->close();\n-# ```\n-#\n-# + duration - Timeout duration for the close operation execution\n-# + return - `kafka:ConsumerError` if an error is encountered or else nil\n+    # Closes consumer connection to the external Kafka broker.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMTAzMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `kafka:ConsumerError` if an error is encountered or else nil\n          \n          \n            \n                # + return - A `kafka:ConsumerError` if an error is encountered or else '()'", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420231033", "createdAt": "2020-05-05T16:11:55Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -260,23 +262,23 @@ public type Consumer client object {\n         return consumerAssign(self, partitions);\n     }\n \n-# Closes consumer connection to the external Kafka broker.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->close();\n-# ```\n-#\n-# + duration - Timeout duration for the close operation execution\n-# + return - `kafka:ConsumerError` if an error is encountered or else nil\n+    # Closes consumer connection to the external Kafka broker.\n+    # ```ballerina\n+    # kafka:ConsumerError? result = consumer->close();\n+    # ```\n+    #\n+    # + duration - Timeout duration for the close operation execution\n+    # + return - `kafka:ConsumerError` if an error is encountered or else nil", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMTE3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Commits current consumed offsets for consumer.\n          \n          \n            \n                # Commits the current consumed offsets for the consumer.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420231174", "createdAt": "2020-05-05T16:12:07Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -260,23 +262,23 @@ public type Consumer client object {\n         return consumerAssign(self, partitions);\n     }\n \n-# Closes consumer connection to the external Kafka broker.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->close();\n-# ```\n-#\n-# + duration - Timeout duration for the close operation execution\n-# + return - `kafka:ConsumerError` if an error is encountered or else nil\n+    # Closes consumer connection to the external Kafka broker.\n+    # ```ballerina\n+    # kafka:ConsumerError? result = consumer->close();\n+    # ```\n+    #\n+    # + duration - Timeout duration for the close operation execution\n+    # + return - `kafka:ConsumerError` if an error is encountered or else nil\n     public remote function close(public int duration = -1) returns ConsumerError? {\n         return consumerClose(self, duration);\n     }\n \n-# Commits current consumed offsets for consumer.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->commit();\n-# ```\n-#\n-# + return - `kafka:ConsumerError` if an error is encountered or else nil\n+    # Commits current consumed offsets for consumer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMTMxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `kafka:ConsumerError` if an error is encountered or else nil\n          \n          \n            \n                # + return - A `kafka:ConsumerError` if an error is encountered or else '()'", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420231312", "createdAt": "2020-05-05T16:12:20Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -260,23 +262,23 @@ public type Consumer client object {\n         return consumerAssign(self, partitions);\n     }\n \n-# Closes consumer connection to the external Kafka broker.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->close();\n-# ```\n-#\n-# + duration - Timeout duration for the close operation execution\n-# + return - `kafka:ConsumerError` if an error is encountered or else nil\n+    # Closes consumer connection to the external Kafka broker.\n+    # ```ballerina\n+    # kafka:ConsumerError? result = consumer->close();\n+    # ```\n+    #\n+    # + duration - Timeout duration for the close operation execution\n+    # + return - `kafka:ConsumerError` if an error is encountered or else nil\n     public remote function close(public int duration = -1) returns ConsumerError? {\n         return consumerClose(self, duration);\n     }\n \n-# Commits current consumed offsets for consumer.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->commit();\n-# ```\n-#\n-# + return - `kafka:ConsumerError` if an error is encountered or else nil\n+    # Commits current consumed offsets for consumer.\n+    # ```ballerina\n+    # kafka:ConsumerError? result = consumer->commit();\n+    # ```\n+    #\n+    # + return - `kafka:ConsumerError` if an error is encountered or else nil", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMTYwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Connects consumer to the provided host in the consumer configs.\n          \n          \n            \n                # Connects the consumer to the provided host in the consumer configs.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420231608", "createdAt": "2020-05-05T16:12:46Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -290,34 +292,34 @@ public type Consumer client object {\n         return consumerCommitOffset(self, offsets, duration);\n     }\n \n-# Connects consumer to the provided host in the consumer configs.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->connect();\n-# ```\n-#\n-# + return - `kafka:ConsumerError` if an error is encountered or else nil\n+    # Connects consumer to the provided host in the consumer configs.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMTcyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `kafka:ConsumerError` if an error is encountered or else nil\n          \n          \n            \n                # + return - A `kafka:ConsumerError` if an error is encountered or else '()'", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420231721", "createdAt": "2020-05-05T16:12:58Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -290,34 +292,34 @@ public type Consumer client object {\n         return consumerCommitOffset(self, offsets, duration);\n     }\n \n-# Connects consumer to the provided host in the consumer configs.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->connect();\n-# ```\n-#\n-# + return - `kafka:ConsumerError` if an error is encountered or else nil\n+    # Connects consumer to the provided host in the consumer configs.\n+    # ```ballerina\n+    # kafka:ConsumerError? result = consumer->connect();\n+    # ```\n+    #\n+    # + return - `kafka:ConsumerError` if an error is encountered or else nil", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMjk0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Retrieves the currently assigned partitions for the consumer.\n          \n          \n            \n                # Retrieves the currently-assigned partitions for the consumer.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420232940", "createdAt": "2020-05-05T16:14:39Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -290,34 +292,34 @@ public type Consumer client object {\n         return consumerCommitOffset(self, offsets, duration);\n     }\n \n-# Connects consumer to the provided host in the consumer configs.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->connect();\n-# ```\n-#\n-# + return - `kafka:ConsumerError` if an error is encountered or else nil\n+    # Connects consumer to the provided host in the consumer configs.\n+    # ```ballerina\n+    # kafka:ConsumerError? result = consumer->connect();\n+    # ```\n+    #\n+    # + return - `kafka:ConsumerError` if an error is encountered or else nil\n     public remote function connect() returns ConsumerError? {\n         return consumerConnect(self);\n     }\n \n-# Retrieves the currently assigned partitions for the consumer.\n-# ```ballerina\n-# kafka:TopicPartition[]|kafka:ConsumerError result = consumer->getAssignment();\n-# ```\n-#\n-# + return - Array of assigned partitions for the consumer if executes successfully or else `kafka:ConsumerError`\n+    # Retrieves the currently assigned partitions for the consumer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMzEwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Array of assigned partitions for the consumer if executes successfully or else `kafka:ConsumerError`\n          \n          \n            \n                # + return - Array of assigned partitions for the consumer if executes successfully or else a `kafka:ConsumerError`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420233100", "createdAt": "2020-05-05T16:14:54Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -290,34 +292,34 @@ public type Consumer client object {\n         return consumerCommitOffset(self, offsets, duration);\n     }\n \n-# Connects consumer to the provided host in the consumer configs.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->connect();\n-# ```\n-#\n-# + return - `kafka:ConsumerError` if an error is encountered or else nil\n+    # Connects consumer to the provided host in the consumer configs.\n+    # ```ballerina\n+    # kafka:ConsumerError? result = consumer->connect();\n+    # ```\n+    #\n+    # + return - `kafka:ConsumerError` if an error is encountered or else nil\n     public remote function connect() returns ConsumerError? {\n         return consumerConnect(self);\n     }\n \n-# Retrieves the currently assigned partitions for the consumer.\n-# ```ballerina\n-# kafka:TopicPartition[]|kafka:ConsumerError result = consumer->getAssignment();\n-# ```\n-#\n-# + return - Array of assigned partitions for the consumer if executes successfully or else `kafka:ConsumerError`\n+    # Retrieves the currently assigned partitions for the consumer.\n+    # ```ballerina\n+    # kafka:TopicPartition[]|kafka:ConsumerError result = consumer->getAssignment();\n+    # ```\n+    #\n+    # + return - Array of assigned partitions for the consumer if executes successfully or else `kafka:ConsumerError`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMzMyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + duration - Timeout duration for the get available topics execution\n          \n          \n            \n                # + duration - Timeout duration for the execution of the `get available topics` operation", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420233324", "createdAt": "2020-05-05T16:15:13Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -290,34 +292,34 @@ public type Consumer client object {\n         return consumerCommitOffset(self, offsets, duration);\n     }\n \n-# Connects consumer to the provided host in the consumer configs.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->connect();\n-# ```\n-#\n-# + return - `kafka:ConsumerError` if an error is encountered or else nil\n+    # Connects consumer to the provided host in the consumer configs.\n+    # ```ballerina\n+    # kafka:ConsumerError? result = consumer->connect();\n+    # ```\n+    #\n+    # + return - `kafka:ConsumerError` if an error is encountered or else nil\n     public remote function connect() returns ConsumerError? {\n         return consumerConnect(self);\n     }\n \n-# Retrieves the currently assigned partitions for the consumer.\n-# ```ballerina\n-# kafka:TopicPartition[]|kafka:ConsumerError result = consumer->getAssignment();\n-# ```\n-#\n-# + return - Array of assigned partitions for the consumer if executes successfully or else `kafka:ConsumerError`\n+    # Retrieves the currently assigned partitions for the consumer.\n+    # ```ballerina\n+    # kafka:TopicPartition[]|kafka:ConsumerError result = consumer->getAssignment();\n+    # ```\n+    #\n+    # + return - Array of assigned partitions for the consumer if executes successfully or else `kafka:ConsumerError`\n     public remote function getAssignment() returns TopicPartition[]|ConsumerError {\n         return consumerGetAssignment(self);\n     }\n \n-# Retrieves the available list of topics for a particular consumer.\n-# ```ballerina\n-# string[]|kafka:ConsumerError result = consumer->getAvailableTopics();\n-# ```\n-#\n-# + duration - Timeout duration for the get available topics execution\n-# + return - Array of topics currently available (authorized) for the consumer to subscribe or else\n-#           `kafka:ConsumerError`\n+    # Retrieves the available list of topics for a particular consumer.\n+    # ```ballerina\n+    # string[]|kafka:ConsumerError result = consumer->getAvailableTopics();\n+    # ```\n+    #\n+    # + duration - Timeout duration for the get available topics execution", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMzQzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #           `kafka:ConsumerError`\n          \n          \n            \n                #           a `kafka:ConsumerError`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420233430", "createdAt": "2020-05-05T16:15:23Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -290,34 +292,34 @@ public type Consumer client object {\n         return consumerCommitOffset(self, offsets, duration);\n     }\n \n-# Connects consumer to the provided host in the consumer configs.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->connect();\n-# ```\n-#\n-# + return - `kafka:ConsumerError` if an error is encountered or else nil\n+    # Connects consumer to the provided host in the consumer configs.\n+    # ```ballerina\n+    # kafka:ConsumerError? result = consumer->connect();\n+    # ```\n+    #\n+    # + return - `kafka:ConsumerError` if an error is encountered or else nil\n     public remote function connect() returns ConsumerError? {\n         return consumerConnect(self);\n     }\n \n-# Retrieves the currently assigned partitions for the consumer.\n-# ```ballerina\n-# kafka:TopicPartition[]|kafka:ConsumerError result = consumer->getAssignment();\n-# ```\n-#\n-# + return - Array of assigned partitions for the consumer if executes successfully or else `kafka:ConsumerError`\n+    # Retrieves the currently assigned partitions for the consumer.\n+    # ```ballerina\n+    # kafka:TopicPartition[]|kafka:ConsumerError result = consumer->getAssignment();\n+    # ```\n+    #\n+    # + return - Array of assigned partitions for the consumer if executes successfully or else `kafka:ConsumerError`\n     public remote function getAssignment() returns TopicPartition[]|ConsumerError {\n         return consumerGetAssignment(self);\n     }\n \n-# Retrieves the available list of topics for a particular consumer.\n-# ```ballerina\n-# string[]|kafka:ConsumerError result = consumer->getAvailableTopics();\n-# ```\n-#\n-# + duration - Timeout duration for the get available topics execution\n-# + return - Array of topics currently available (authorized) for the consumer to subscribe or else\n-#           `kafka:ConsumerError`\n+    # Retrieves the available list of topics for a particular consumer.\n+    # ```ballerina\n+    # string[]|kafka:ConsumerError result = consumer->getAvailableTopics();\n+    # ```\n+    #\n+    # + duration - Timeout duration for the get available topics execution\n+    # + return - Array of topics currently available (authorized) for the consumer to subscribe or else\n+    #           `kafka:ConsumerError`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMzYzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            `kafka:ConsumerError`\n          \n          \n            \n                #            a `kafka:ConsumerError`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420233639", "createdAt": "2020-05-05T16:15:38Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -353,13 +355,13 @@ public type Consumer client object {\n         return consumerGetEndOffsets(self, partitions, duration);\n     }\n \n-# Retrieves the partitions, which are currently paused.\n-# ```ballerina\n-# kafka:TopicPartition[]|kafka:ConsumerError result = consumer->getPausedPartitions();\n-# ```\n-#\n-# + return - Set of partitions paused from message retrieval if executes successfully or else\n-#            `kafka:ConsumerError`\n+    # Retrieves the partitions, which are currently paused.\n+    # ```ballerina\n+    # kafka:TopicPartition[]|kafka:ConsumerError result = consumer->getPausedPartitions();\n+    # ```\n+    #\n+    # + return - Set of partitions paused from message retrieval if executes successfully or else\n+    #            `kafka:ConsumerError`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMzcyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Retrieves the set of topics which are currently subscribed by the consumer.\n          \n          \n            \n                # Retrieves the set of topics, which are currently subscribed by the consumer.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420233723", "createdAt": "2020-05-05T16:15:46Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -375,24 +377,24 @@ public type Consumer client object {\n         return consumerGetPositionOffset(self, partition, duration);\n     }\n \n-# Retrieves the set of topics which are currently subscribed by the consumer.\n-# ```ballerina\n-# string[]|kafka:ConsumerError result = consumer->getSubscription();\n-# ```\n-#\n-# + return - Array of subscribed topics for the consumer if executes successfully or else `kafka:ConsumerError`\n+    # Retrieves the set of topics which are currently subscribed by the consumer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMzgyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Array of subscribed topics for the consumer if executes successfully or else `kafka:ConsumerError`\n          \n          \n            \n                # + return - Array of subscribed topics for the consumer if executes successfully or else a `kafka:ConsumerError`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420233825", "createdAt": "2020-05-05T16:15:54Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -375,24 +377,24 @@ public type Consumer client object {\n         return consumerGetPositionOffset(self, partition, duration);\n     }\n \n-# Retrieves the set of topics which are currently subscribed by the consumer.\n-# ```ballerina\n-# string[]|kafka:ConsumerError result = consumer->getSubscription();\n-# ```\n-#\n-# + return - Array of subscribed topics for the consumer if executes successfully or else `kafka:ConsumerError`\n+    # Retrieves the set of topics which are currently subscribed by the consumer.\n+    # ```ballerina\n+    # string[]|kafka:ConsumerError result = consumer->getSubscription();\n+    # ```\n+    #\n+    # + return - Array of subscribed topics for the consumer if executes successfully or else `kafka:ConsumerError`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMzk2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Retrieves the set of partitions in which the topic belongs to.\n          \n          \n            \n                # Retrieves the set of partitions to which the topic belongs.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420233961", "createdAt": "2020-05-05T16:16:06Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -375,24 +377,24 @@ public type Consumer client object {\n         return consumerGetPositionOffset(self, partition, duration);\n     }\n \n-# Retrieves the set of topics which are currently subscribed by the consumer.\n-# ```ballerina\n-# string[]|kafka:ConsumerError result = consumer->getSubscription();\n-# ```\n-#\n-# + return - Array of subscribed topics for the consumer if executes successfully or else `kafka:ConsumerError`\n+    # Retrieves the set of topics which are currently subscribed by the consumer.\n+    # ```ballerina\n+    # string[]|kafka:ConsumerError result = consumer->getSubscription();\n+    # ```\n+    #\n+    # + return - Array of subscribed topics for the consumer if executes successfully or else `kafka:ConsumerError`\n     public remote function getSubscription() returns string[]|ConsumerError {\n         return consumerGetSubscription(self);\n     }\n \n-# Retrieves the set of partitions in which the topic belongs to.\n-# ```ballerina\n-# kafka:TopicPartition[]|kafka:ConsumerError result = consumer->getTopicPartitions(\"kafka-topic\");\n-# ```\n-#\n-# + topic - The topic for which the partition information is needed\n-# + duration - Timeout duration for the get topic partitions operation to execute\n-# + return - Array of partitions for the given topic if executes successfully or else `kafka:ConsumerError`\n+    # Retrieves the set of partitions in which the topic belongs to.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNDE0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + duration - Timeout duration for the get topic partitions operation to execute\n          \n          \n            \n                # + duration - Timeout duration for the `get topic partitions` operation to execute", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420234143", "createdAt": "2020-05-05T16:16:23Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -375,24 +377,24 @@ public type Consumer client object {\n         return consumerGetPositionOffset(self, partition, duration);\n     }\n \n-# Retrieves the set of topics which are currently subscribed by the consumer.\n-# ```ballerina\n-# string[]|kafka:ConsumerError result = consumer->getSubscription();\n-# ```\n-#\n-# + return - Array of subscribed topics for the consumer if executes successfully or else `kafka:ConsumerError`\n+    # Retrieves the set of topics which are currently subscribed by the consumer.\n+    # ```ballerina\n+    # string[]|kafka:ConsumerError result = consumer->getSubscription();\n+    # ```\n+    #\n+    # + return - Array of subscribed topics for the consumer if executes successfully or else `kafka:ConsumerError`\n     public remote function getSubscription() returns string[]|ConsumerError {\n         return consumerGetSubscription(self);\n     }\n \n-# Retrieves the set of partitions in which the topic belongs to.\n-# ```ballerina\n-# kafka:TopicPartition[]|kafka:ConsumerError result = consumer->getTopicPartitions(\"kafka-topic\");\n-# ```\n-#\n-# + topic - The topic for which the partition information is needed\n-# + duration - Timeout duration for the get topic partitions operation to execute\n-# + return - Array of partitions for the given topic if executes successfully or else `kafka:ConsumerError`\n+    # Retrieves the set of partitions in which the topic belongs to.\n+    # ```ballerina\n+    # kafka:TopicPartition[]|kafka:ConsumerError result = consumer->getTopicPartitions(\"kafka-topic\");\n+    # ```\n+    #\n+    # + topic - The topic for which the partition information is needed\n+    # + duration - Timeout duration for the get topic partitions operation to execute", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNDgxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Array of partitions for the given topic if executes successfully or else `kafka:ConsumerError`\n          \n          \n            \n                # + return - Array of partitions for the given topic if executes successfully or else a `kafka:ConsumerError`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420234811", "createdAt": "2020-05-05T16:17:23Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -375,24 +377,24 @@ public type Consumer client object {\n         return consumerGetPositionOffset(self, partition, duration);\n     }\n \n-# Retrieves the set of topics which are currently subscribed by the consumer.\n-# ```ballerina\n-# string[]|kafka:ConsumerError result = consumer->getSubscription();\n-# ```\n-#\n-# + return - Array of subscribed topics for the consumer if executes successfully or else `kafka:ConsumerError`\n+    # Retrieves the set of topics which are currently subscribed by the consumer.\n+    # ```ballerina\n+    # string[]|kafka:ConsumerError result = consumer->getSubscription();\n+    # ```\n+    #\n+    # + return - Array of subscribed topics for the consumer if executes successfully or else `kafka:ConsumerError`\n     public remote function getSubscription() returns string[]|ConsumerError {\n         return consumerGetSubscription(self);\n     }\n \n-# Retrieves the set of partitions in which the topic belongs to.\n-# ```ballerina\n-# kafka:TopicPartition[]|kafka:ConsumerError result = consumer->getTopicPartitions(\"kafka-topic\");\n-# ```\n-#\n-# + topic - The topic for which the partition information is needed\n-# + duration - Timeout duration for the get topic partitions operation to execute\n-# + return - Array of partitions for the given topic if executes successfully or else `kafka:ConsumerError`\n+    # Retrieves the set of partitions in which the topic belongs to.\n+    # ```ballerina\n+    # kafka:TopicPartition[]|kafka:ConsumerError result = consumer->getTopicPartitions(\"kafka-topic\");\n+    # ```\n+    #\n+    # + topic - The topic for which the partition information is needed\n+    # + duration - Timeout duration for the get topic partitions operation to execute\n+    # + return - Array of partitions for the given topic if executes successfully or else `kafka:ConsumerError`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNTAwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Polls the consumer for external broker for records.\n          \n          \n            \n                # Polls the consumer for the records of an external broker.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420235003", "createdAt": "2020-05-05T16:17:40Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -406,13 +408,13 @@ public type Consumer client object {\n         return consumerPause(self, partitions);\n     }\n \n-# Polls the consumer for external broker for records.\n-# ```ballerina\n-# kafka:ConsumerRecord[]|kafka:ConsumerError result = consumer->poll(1000);\n-# ```\n-#\n-# + timeoutValue - Polling time in milliseconds\n-# + return - Array of consumer records if executed successfully or else `kafka:ConsumerError`\n+    # Polls the consumer for external broker for records.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNTA5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Array of consumer records if executed successfully or else `kafka:ConsumerError`\n          \n          \n            \n                # + return - Array of consumer records if executed successfully or else a `kafka:ConsumerError`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420235099", "createdAt": "2020-05-05T16:17:49Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -406,13 +408,13 @@ public type Consumer client object {\n         return consumerPause(self, partitions);\n     }\n \n-# Polls the consumer for external broker for records.\n-# ```ballerina\n-# kafka:ConsumerRecord[]|kafka:ConsumerError result = consumer->poll(1000);\n-# ```\n-#\n-# + timeoutValue - Polling time in milliseconds\n-# + return - Array of consumer records if executed successfully or else `kafka:ConsumerError`\n+    # Polls the consumer for external broker for records.\n+    # ```ballerina\n+    # kafka:ConsumerRecord[]|kafka:ConsumerError result = consumer->poll(1000);\n+    # ```\n+    #\n+    # + timeoutValue - Polling time in milliseconds\n+    # + return - Array of consumer records if executed successfully or else `kafka:ConsumerError`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNjYwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `kafka:ConsumerError` if an error is encountered or else ()\n          \n          \n            \n                # + return - A `kafka:ConsumerError` if an error is encountered or else '()'", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420236605", "createdAt": "2020-05-05T16:20:04Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -449,24 +451,24 @@ public type Consumer client object {\n         return consumerSeekToEnd(self, partitions);\n     }\n \n-# Subscribes the consumer to the provided set of topics.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->subscribe([\"kafka-topic-1\", \"kafka-topic-2\"]);\n-# ```\n-#\n-# + topics - Array of topics to be subscribed to\n-# + return - `kafka:ConsumerError` if an error is encountered or else ()\n+    # Subscribes the consumer to the provided set of topics.\n+    # ```ballerina\n+    # kafka:ConsumerError? result = consumer->subscribe([\"kafka-topic-1\", \"kafka-topic-2\"]);\n+    # ```\n+    #\n+    # + topics - Array of topics to be subscribed to\n+    # + return - `kafka:ConsumerError` if an error is encountered or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNjc0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Subscribes the consumer to the topics which matches to the provided pattern.\n          \n          \n            \n                # Subscribes the consumer to the topics, which match the provided pattern.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420236741", "createdAt": "2020-05-05T16:20:15Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -449,24 +451,24 @@ public type Consumer client object {\n         return consumerSeekToEnd(self, partitions);\n     }\n \n-# Subscribes the consumer to the provided set of topics.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->subscribe([\"kafka-topic-1\", \"kafka-topic-2\"]);\n-# ```\n-#\n-# + topics - Array of topics to be subscribed to\n-# + return - `kafka:ConsumerError` if an error is encountered or else ()\n+    # Subscribes the consumer to the provided set of topics.\n+    # ```ballerina\n+    # kafka:ConsumerError? result = consumer->subscribe([\"kafka-topic-1\", \"kafka-topic-2\"]);\n+    # ```\n+    #\n+    # + topics - Array of topics to be subscribed to\n+    # + return - `kafka:ConsumerError` if an error is encountered or else ()\n     public remote function subscribe(string[] topics) returns ConsumerError? {\n         return consumerSubscribe(self, topics);\n     }\n \n-# Subscribes the consumer to the topics which matches to the provided pattern.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->subscribeToPattern(\"kafka.*\");\n-# ```\n-#\n-# + regex - Pattern which should be matched with the topics to be subscribed to\n-# + return - `kafka:ConsumerError` if an error is encountered or else ()\n+    # Subscribes the consumer to the topics which matches to the provided pattern.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNjg0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + regex - Pattern which should be matched with the topics to be subscribed to\n          \n          \n            \n                # + regex - Pattern, which should be matched with the topics to be subscribed to", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420236844", "createdAt": "2020-05-05T16:20:24Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -449,24 +451,24 @@ public type Consumer client object {\n         return consumerSeekToEnd(self, partitions);\n     }\n \n-# Subscribes the consumer to the provided set of topics.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->subscribe([\"kafka-topic-1\", \"kafka-topic-2\"]);\n-# ```\n-#\n-# + topics - Array of topics to be subscribed to\n-# + return - `kafka:ConsumerError` if an error is encountered or else ()\n+    # Subscribes the consumer to the provided set of topics.\n+    # ```ballerina\n+    # kafka:ConsumerError? result = consumer->subscribe([\"kafka-topic-1\", \"kafka-topic-2\"]);\n+    # ```\n+    #\n+    # + topics - Array of topics to be subscribed to\n+    # + return - `kafka:ConsumerError` if an error is encountered or else ()\n     public remote function subscribe(string[] topics) returns ConsumerError? {\n         return consumerSubscribe(self, topics);\n     }\n \n-# Subscribes the consumer to the topics which matches to the provided pattern.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->subscribeToPattern(\"kafka.*\");\n-# ```\n-#\n-# + regex - Pattern which should be matched with the topics to be subscribed to\n-# + return - `kafka:ConsumerError` if an error is encountered or else ()\n+    # Subscribes the consumer to the topics which matches to the provided pattern.\n+    # ```ballerina\n+    # kafka:ConsumerError? result = consumer->subscribeToPattern(\"kafka.*\");\n+    # ```\n+    #\n+    # + regex - Pattern which should be matched with the topics to be subscribed to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 225}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNjk1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `kafka:ConsumerError` if an error is encountered or else ()\n          \n          \n            \n                # + return - A `kafka:ConsumerError` if an error is encountered or else '()'", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420236956", "createdAt": "2020-05-05T16:20:36Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -449,24 +451,24 @@ public type Consumer client object {\n         return consumerSeekToEnd(self, partitions);\n     }\n \n-# Subscribes the consumer to the provided set of topics.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->subscribe([\"kafka-topic-1\", \"kafka-topic-2\"]);\n-# ```\n-#\n-# + topics - Array of topics to be subscribed to\n-# + return - `kafka:ConsumerError` if an error is encountered or else ()\n+    # Subscribes the consumer to the provided set of topics.\n+    # ```ballerina\n+    # kafka:ConsumerError? result = consumer->subscribe([\"kafka-topic-1\", \"kafka-topic-2\"]);\n+    # ```\n+    #\n+    # + topics - Array of topics to be subscribed to\n+    # + return - `kafka:ConsumerError` if an error is encountered or else ()\n     public remote function subscribe(string[] topics) returns ConsumerError? {\n         return consumerSubscribe(self, topics);\n     }\n \n-# Subscribes the consumer to the topics which matches to the provided pattern.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->subscribeToPattern(\"kafka.*\");\n-# ```\n-#\n-# + regex - Pattern which should be matched with the topics to be subscribed to\n-# + return - `kafka:ConsumerError` if an error is encountered or else ()\n+    # Subscribes the consumer to the topics which matches to the provided pattern.\n+    # ```ballerina\n+    # kafka:ConsumerError? result = consumer->subscribeToPattern(\"kafka.*\");\n+    # ```\n+    #\n+    # + regex - Pattern which should be matched with the topics to be subscribed to\n+    # + return - `kafka:ConsumerError` if an error is encountered or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNzEyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `kafka:ConsumerError` if an error is encountered or else ()\n          \n          \n            \n                # + return - A `kafka:ConsumerError` if an error is encountered or else '()'", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420237125", "createdAt": "2020-05-05T16:20:49Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -486,12 +488,12 @@ public type Consumer client object {\n         return consumerSubscribeWithPartitionRebalance(self, topics, onPartitionsRevoked, onPartitionsAssigned);\n     }\n \n-# Unsubscribes from all the topic subscriptions.\n-# ```ballerina\n-# kafka:ConsumerError? result = consumer->unsubscribe();\n-# ```\n-#\n-# + return - `kafka:ConsumerError` if an error is encountered or else ()\n+    # Unsubscribes from all the topic subscriptions.\n+    # ```ballerina\n+    # kafka:ConsumerError? result = consumer->unsubscribe();\n+    # ```\n+    #\n+    # + return - `kafka:ConsumerError` if an error is encountered or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 245}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNzM1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + authenticationConfiguration - Authentication related configurations for the Kafka producer\n          \n          \n            \n            # + authenticationConfiguration - Authentication-related configurations for the Kafka producer", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420237353", "createdAt": "2020-05-05T16:21:08Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "diffHunk": "@@ -57,7 +57,8 @@ import ballerina/java;\n # + connectionsMaxIdleTimeInMillis - Close the idle connections after this number of milliseconds\n # + transactionTimeoutInMillis - Timeout for transaction status update from the producer\n # + enableIdempotence - Exactly one copy of each message is written in the stream when enabled\n-# + secureSocket - Configurations related to SSL/TLS\n+# + secureSocket - Configurations related to SSL/TLS encryption\n+# + authenticationConfiguration - Authentication related configurations for the Kafka producer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNzUzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A `kafka:ProducerError` if closing the producer is failed or else ()\n          \n          \n            \n                # + return - A `kafka:ProducerError` if closing the producer failed or else '()'", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420237539", "createdAt": "2020-05-05T16:21:26Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "diffHunk": "@@ -174,12 +176,12 @@ public type Producer client object {\n \n     public string connectorId = system:uuid();\n \n-# Closes the producer connection to the external Kafka broker.\n-# ```ballerina\n-# kafka:ProducerError? result = producer->close();\n-# ```\n-#\n-# + return - A `kafka:ProducerError` if closing the producer is failed or else ()\n+    # Closes the producer connection to the external Kafka broker.\n+    # ```ballerina\n+    # kafka:ProducerError? result = producer->close();\n+    # ```\n+    #\n+    # + return - A `kafka:ProducerError` if closing the producer is failed or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1OTUyODgw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#pullrequestreview-405952880", "createdAt": "2020-05-05T16:25:00Z", "commit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjoyNTowMFrOGQxaKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjoyNjo1NlrOGQxfHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzOTkxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Configures the consumer to read all the messages even the aborted ones.\n          \n          \n            \n            # Configures the consumer to read all the messages including the aborted ones.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420239915", "createdAt": "2020-05-05T16:25:00Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/kafka_constants.bal", "diffHunk": "@@ -52,7 +53,9 @@ public const ISOLATION_COMMITTED = \"read_committed\";\n # Configures the consumer to read all the messages even the aborted ones.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0MDE1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Security Protocols\n          \n          \n            \n            // Security Protocols.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420240154", "createdAt": "2020-05-05T16:25:23Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/kafka_constants.bal", "diffHunk": "@@ -100,3 +103,15 @@ public const COMPRESSION_LZ4 = \"lz4\";\n \n # Kafka ZSTD compression type.\n public const COMPRESSION_ZSTD = \"zstd\";\n+\n+// ********************************************\n+//              Common constants              *\n+// ********************************************\n+// SASL Authentication mechanisms\n+# Kafka SASL_PLAIN authentication mechanism\n+public const AUTH_SASL_PLAIN = \"PLAIN\";\n+\n+\n+// Security Protocols", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0MDM4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + enableIdempotence - Exactly one copy of each message is written in the stream when enabled\n          \n          \n            \n            # + enableIdempotence - Exactly one copy of each message is written to the stream when enabled", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420240380", "createdAt": "2020-05-05T16:25:41Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "diffHunk": "@@ -57,7 +57,8 @@ import ballerina/java;\n # + connectionsMaxIdleTimeInMillis - Close the idle connections after this number of milliseconds\n # + transactionTimeoutInMillis - Timeout for transaction status update from the producer\n # + enableIdempotence - Exactly one copy of each message is written in the stream when enabled", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0MDU1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Defines a records to send data using Avro serialization.\n          \n          \n            \n            # Defines a record to send data using Avro serialization.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420240554", "createdAt": "2020-05-05T16:25:58Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "diffHunk": "@@ -97,6 +98,7 @@ public type ProducerConfiguration record {|\n     boolean enableIdempotence = false;\n \n     SecureSocket secureSocket?;\n+    AuthenticationConfiguration authenticationConfiguration?;\n |};\n \n # Defines a records to send data using Avro serialization.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0MDcyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - A `kafka:ProducerError` if records couldn't be flushed or else ()\n          \n          \n            \n                # + return - A `kafka:ProducerError` if records couldn't be flushed or else '()'", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420240725", "createdAt": "2020-05-05T16:26:15Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "diffHunk": "@@ -201,38 +203,38 @@ public type Producer client object {\n         return producerCommitConsumerOffsets(self, offsets, java:fromString(groupID));\n     }\n \n-# Flushes the batch of records already sent to the broker by the producer.\n-# ```ballerina\n-# kafka:ProducerError? result = producer->flushRecords();\n-# ```\n-#\n-# + return - A `kafka:ProducerError` if records couldn't be flushed or else ()\n+    # Flushes the batch of records already sent to the broker by the producer.\n+    # ```ballerina\n+    # kafka:ProducerError? result = producer->flushRecords();\n+    # ```\n+    #\n+    # + return - A `kafka:ProducerError` if records couldn't be flushed or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0MTAyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + key - Key that will be included in the record\n          \n          \n            \n                # + key - Key, which will be included in the record", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420241028", "createdAt": "2020-05-05T16:26:42Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "diffHunk": "@@ -201,38 +203,38 @@ public type Producer client object {\n         return producerCommitConsumerOffsets(self, offsets, java:fromString(groupID));\n     }\n \n-# Flushes the batch of records already sent to the broker by the producer.\n-# ```ballerina\n-# kafka:ProducerError? result = producer->flushRecords();\n-# ```\n-#\n-# + return - A `kafka:ProducerError` if records couldn't be flushed or else ()\n+    # Flushes the batch of records already sent to the broker by the producer.\n+    # ```ballerina\n+    # kafka:ProducerError? result = producer->flushRecords();\n+    # ```\n+    #\n+    # + return - A `kafka:ProducerError` if records couldn't be flushed or else ()\n     public remote function flushRecords() returns ProducerError? {\n         return producerFlushRecords(self);\n     }\n \n-# Retrieves the topic partition information for the provided topic.\n-# ```ballerina\n-# kafka:TopicPartition[]|kafka:ProducerError result = producer->getTopicPartitions(\"kafka-topic\");\n-# ```\n-#\n-# + topic - Topic of which the partition information is given\n-# + return - A `kafka:TopicPartition` array for the given topic or else a `kafka:ProducerError` if the operation fails\n+    # Retrieves the topic partition information for the provided topic.\n+    # ```ballerina\n+    # kafka:TopicPartition[]|kafka:ProducerError result = producer->getTopicPartitions(\"kafka-topic\");\n+    # ```\n+    #\n+    # + topic - Topic of which the partition information is given\n+    # + return - A `kafka:TopicPartition` array for the given topic or else a `kafka:ProducerError` if the operation fails\n     public remote function getTopicPartitions(string topic) returns TopicPartition[]|ProducerError {\n         return producerGetTopicPartitions(self, java:fromString(topic));\n     }\n \n-# Produces records to the Kafka server.\n-# ```ballerina\n-# kafka:ProducerError? result = producer->send(\"Hello World, Ballerina\", \"kafka-topic\");\n-# ```\n-#\n-# + value - Record contents\n-# + topic - Topic to which the record will be appended\n-# + key - Key that will be included in the record\n-# + partition - Partition to which the record should be sent\n-# + timestamp - Timestamp of the record in milliseconds since epoch\n-# + return -  A `kafka:ProducerError` if send action fails to send data or else ()\n+    # Produces records to the Kafka server.\n+    # ```ballerina\n+    # kafka:ProducerError? result = producer->send(\"Hello World, Ballerina\", \"kafka-topic\");\n+    # ```\n+    #\n+    # + value - Record contents\n+    # + topic - Topic to which the record will be appended\n+    # + key - Key that will be included in the record", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0MTE4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return -  A `kafka:ProducerError` if send action fails to send data or else ()\n          \n          \n            \n                # + return -  A `kafka:ProducerError` if send action fails to send data or else '()'", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r420241182", "createdAt": "2020-05-05T16:26:56Z", "author": {"login": "praneesha"}, "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "diffHunk": "@@ -201,38 +203,38 @@ public type Producer client object {\n         return producerCommitConsumerOffsets(self, offsets, java:fromString(groupID));\n     }\n \n-# Flushes the batch of records already sent to the broker by the producer.\n-# ```ballerina\n-# kafka:ProducerError? result = producer->flushRecords();\n-# ```\n-#\n-# + return - A `kafka:ProducerError` if records couldn't be flushed or else ()\n+    # Flushes the batch of records already sent to the broker by the producer.\n+    # ```ballerina\n+    # kafka:ProducerError? result = producer->flushRecords();\n+    # ```\n+    #\n+    # + return - A `kafka:ProducerError` if records couldn't be flushed or else ()\n     public remote function flushRecords() returns ProducerError? {\n         return producerFlushRecords(self);\n     }\n \n-# Retrieves the topic partition information for the provided topic.\n-# ```ballerina\n-# kafka:TopicPartition[]|kafka:ProducerError result = producer->getTopicPartitions(\"kafka-topic\");\n-# ```\n-#\n-# + topic - Topic of which the partition information is given\n-# + return - A `kafka:TopicPartition` array for the given topic or else a `kafka:ProducerError` if the operation fails\n+    # Retrieves the topic partition information for the provided topic.\n+    # ```ballerina\n+    # kafka:TopicPartition[]|kafka:ProducerError result = producer->getTopicPartitions(\"kafka-topic\");\n+    # ```\n+    #\n+    # + topic - Topic of which the partition information is given\n+    # + return - A `kafka:TopicPartition` array for the given topic or else a `kafka:ProducerError` if the operation fails\n     public remote function getTopicPartitions(string topic) returns TopicPartition[]|ProducerError {\n         return producerGetTopicPartitions(self, java:fromString(topic));\n     }\n \n-# Produces records to the Kafka server.\n-# ```ballerina\n-# kafka:ProducerError? result = producer->send(\"Hello World, Ballerina\", \"kafka-topic\");\n-# ```\n-#\n-# + value - Record contents\n-# + topic - Topic to which the record will be appended\n-# + key - Key that will be included in the record\n-# + partition - Partition to which the record should be sent\n-# + timestamp - Timestamp of the record in milliseconds since epoch\n-# + return -  A `kafka:ProducerError` if send action fails to send data or else ()\n+    # Produces records to the Kafka server.\n+    # ```ballerina\n+    # kafka:ProducerError? result = producer->send(\"Hello World, Ballerina\", \"kafka-topic\");\n+    # ```\n+    #\n+    # + value - Record contents\n+    # + topic - Topic to which the record will be appended\n+    # + key - Key that will be included in the record\n+    # + partition - Partition to which the record should be sent\n+    # + timestamp - Timestamp of the record in milliseconds since epoch\n+    # + return -  A `kafka:ProducerError` if send action fails to send data or else ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "334fe469d5cf328d83d09a1a1123f6a6d42e48ce"}, "originalPosition": 96}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8be3192beb89469c75b16d33a5ef0c862af0118", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f8be3192beb89469c75b16d33a5ef0c862af0118", "committedDate": "2020-05-05T16:28:08Z", "message": "Update Kafka BBEs with API doc links"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43f75dccd97bd5c227f2d9b2e457008fa7e61bb4", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/43f75dccd97bd5c227f2d9b2e457008fa7e61bb4", "committedDate": "2020-05-05T16:48:10Z", "message": "Apply suggestions from code review\n\nCo-authored-by: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e387c5535f276d9ff8343e0ae2da02d9e2097580", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e387c5535f276d9ff8343e0ae2da02d9e2097580", "committedDate": "2020-05-05T19:44:17Z", "message": "Disable intermittent test failures in integratoin test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02ccd45ad2dddb706fac9676e3cfd4dfd797dbad", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/02ccd45ad2dddb706fac9676e3cfd4dfd797dbad", "committedDate": "2020-05-06T03:47:22Z", "message": "Revert \"Disable intermittent test failures in integratoin test\"\n\nThis reverts commit e387c5535f276d9ff8343e0ae2da02d9e2097580."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a4890be11e0c81b6fe44b316e51a5b79c94eaa6", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1a4890be11e0c81b6fe44b316e51a5b79c94eaa6", "committedDate": "2020-05-06T04:07:02Z", "message": "Disable failing intgration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3539f3b8df18038ecf066df1ccc3782e057ec0c9", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3539f3b8df18038ecf066df1ccc3782e057ec0c9", "committedDate": "2020-05-06T05:12:23Z", "message": "Update Kafka BBE URLs and names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bc45eea1c4bbce8d508dc378c1c5acd736d84be", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8bc45eea1c4bbce8d508dc378c1c5acd736d84be", "committedDate": "2020-05-06T05:12:46Z", "message": "Revert Disableing tests commit since it is disabled by another commit\n\nThis reverts commit 1a4890be11e0c81b6fe44b316e51a5b79c94eaa6."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4fcd2cdcd6525a1ca067856d0b0c7059accf055", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f4fcd2cdcd6525a1ca067856d0b0c7059accf055", "committedDate": "2020-05-06T06:52:40Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into kafka-sasl-support-master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4ODI4NDUy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#pullrequestreview-408828452", "createdAt": "2020-05-11T02:45:52Z", "commit": {"oid": "f4fcd2cdcd6525a1ca067856d0b0c7059accf055"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMjo0NTo1MlrOGTKrlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMjo0NTo1MlrOGTKrlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1MTEyNA==", "bodyText": "Shall we name it mechanism? The word authentication is redundant I guess since this is AuthenticationConfiguration", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r422751124", "createdAt": "2020-05-11T02:45:52Z", "author": {"login": "daneshk"}, "path": "examples/kafka-authentication-sasl-plain-consumer/kafka_authentication_sasl_plain_consumer.bal", "diffHunk": "@@ -0,0 +1,34 @@\n+import ballerina/kafka;\n+import ballerina/log;\n+\n+// The `kafka:AuthenticationConfiguration` is used to provide authentication-related details.\n+kafka:AuthenticationConfiguration authConfig = {\n+    // Provide the authentication mechanism used by the Kafka server.\n+    authenticationMechanism: kafka:AUTH_SASL_PLAIN,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4fcd2cdcd6525a1ca067856d0b0c7059accf055"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4ODMxMzUz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#pullrequestreview-408831353", "createdAt": "2020-05-11T02:59:23Z", "commit": {"oid": "f4fcd2cdcd6525a1ca067856d0b0c7059accf055"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMjo1OToyM1rOGTK2TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMjo1OToyM1rOGTK2TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1Mzg2OA==", "bodyText": "Are we support any other mechanism?\nDo we have the same username, password config for the other authentication mechanisms", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#discussion_r422753868", "createdAt": "2020-05-11T02:59:23Z", "author": {"login": "daneshk"}, "path": "stdlib/messaging/kafka/src/test/resources/test-src/security/sasl_plain_consumer.bal", "diffHunk": "@@ -0,0 +1,52 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/kafka;\n+\n+kafka:AuthenticationConfiguration authConfigValid = {\n+    authenticationMechanism: kafka:AUTH_SASL_PLAIN,\n+    username: \"ballerina\",\n+    password: \"ballerina-secret\"\n+};\n+\n+kafka:AuthenticationConfiguration authConfigInvalidPassword = {\n+    authenticationMechanism: kafka:AUTH_SASL_PLAIN,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4fcd2cdcd6525a1ca067856d0b0c7059accf055"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd9345814fbe6be686520eb12c6c92d9243b8618", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bd9345814fbe6be686520eb12c6c92d9243b8618", "committedDate": "2020-05-11T07:21:44Z", "message": "Change the field name of authentocationMechanism to mechanism"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31b17de52ee6465ca66d1505d7f17d739af0064a", "author": {"user": {"login": "ThisaruGuruge", "name": "Thisaru Guruge"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/31b17de52ee6465ca66d1505d7f17d739af0064a", "committedDate": "2020-05-11T07:22:06Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into kafka-sasl-support-master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MDA0NzU2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23110#pullrequestreview-409004756", "createdAt": "2020-05-11T09:23:56Z", "commit": {"oid": "31b17de52ee6465ca66d1505d7f17d739af0064a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3390, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}