{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2NjYxMDY4", "number": 25234, "title": "Add Function mocking and Object mocking BBE", "bodyText": "Purpose\nAdd Function mocking and Object mocking BBE\nApproach\n\nDescribe how you are implementing the solutions along with the design details.\n\nSamples\n\nProvide high-level details about the samples related to this feature.\n\nRemarks\n\nList any other known issues, related PRs, TODO items, or any other notes related to the PR.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-08-12T10:03:12Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234", "merged": true, "mergeCommit": {"oid": "f145d848f2d000af7819fb9548dd6204181c6e2e"}, "closed": true, "closedAt": "2020-08-12T13:09:02Z", "author": {"login": "Ibaqu"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-JAz0gFqTQ2NTc4ODcxNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-Ji9XgFqTQ2NTgxNTkzOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1Nzg4NzE1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#pullrequestreview-465788715", "createdAt": "2020-08-12T10:31:27Z", "commit": {"oid": "005c17a50c7f3571a0b99cae1e418ce0fc95068c"}, "state": "COMMENTED", "comments": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDozMToyN1rOG_bdsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDozOToxNFrOG_br6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2MzQ0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // The function prints the value of PI using `io:println` function\n          \n          \n            \n            // This function prints the value of PI using the `io:println` function.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469163441", "createdAt": "2020-08-12T10:31:27Z", "author": {"login": "praneesha"}, "path": "examples/testerina-function-mocks/testerina_function_mocks.bal", "diffHunk": "@@ -1,29 +1,68 @@\n import ballerina/io;\n+import ballerina/math;\n+\n+// This function calls the `intAdd` function and returns the result.\n+public function addValues(int a, int b) returns int {\n+    return intAdd(a, b);\n+}\n+\n+// This function adds two integers and returns the result.\n+public function intAdd(int a, int b) returns int {\n+    return (a + b);\n+}\n+\n+// The function prints the value of PI using `io:println` function", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "005c17a50c7f3571a0b99cae1e418ce0fc95068c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2MzY5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               // This function call to `io:println` will be replaced with `mockIoPrintLn`\n          \n          \n            \n               // This function call to the `io:println` will be replaced with the `mockIoPrintLn` function.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469163698", "createdAt": "2020-08-12T10:31:59Z", "author": {"login": "praneesha"}, "path": "examples/testerina-function-mocks/testerina_function_mocks.bal", "diffHunk": "@@ -1,29 +1,68 @@\n import ballerina/io;\n+import ballerina/math;\n+\n+// This function calls the `intAdd` function and returns the result.\n+public function addValues(int a, int b) returns int {\n+    return intAdd(a, b);\n+}\n+\n+// This function adds two integers and returns the result.\n+public function intAdd(int a, int b) returns int {\n+    return (a + b);\n+}\n+\n+// The function prints the value of PI using `io:println` function\n+public function printMathConsts() {\n+   io:println(\"Value of PI : \", math:PI);\n+}\n+\n+// This demonstrates different ways to mock functions.\n import ballerina/test;\n \n-// This is the mock function, which will replace the real function.\n+(any|error)[] outputs = [];\n+\n @test:Mock {\n-    // Since there is no module declaration, `.` is the current module.\n-    // You can include any module (e.g., : `ballerina/io`).\n-    moduleName: \".\",\n-    functionName: \"intAdd\"\n+    // This specifies a mock function that should replace the\n+    // imported function `io:println`.\n+    moduleName: \"ballerina/io\",\n+    functionName: \"println\"\n }\n-// The mock function's signature should match with the actual function's signature.\n-public function mockIntAdd(int a, int b) returns int {\n-    io:println(\"I'm the mock function!\");\n-    return (a - b);\n+function mockIoPrintLn((any|error)... text) {\n+    outputs.push(text);\n }\n \n-// This is the test function.\n+@test:Config {}\n+function testMathConsts() {\n+   // This function call to `io:println` will be replaced with `mockIoPrintLn`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "005c17a50c7f3571a0b99cae1e418ce0fc95068c"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2MzgxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // This creates an object for stubbing calls to `intAdd` which is written in the same module.\n          \n          \n            \n            // This creates an object for stubbing calls to the `intAdd` function, which is written in the same module.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469163812", "createdAt": "2020-08-12T10:32:14Z", "author": {"login": "praneesha"}, "path": "examples/testerina-function-mocks/testerina_function_mocks.bal", "diffHunk": "@@ -1,29 +1,68 @@\n import ballerina/io;\n+import ballerina/math;\n+\n+// This function calls the `intAdd` function and returns the result.\n+public function addValues(int a, int b) returns int {\n+    return intAdd(a, b);\n+}\n+\n+// This function adds two integers and returns the result.\n+public function intAdd(int a, int b) returns int {\n+    return (a + b);\n+}\n+\n+// The function prints the value of PI using `io:println` function\n+public function printMathConsts() {\n+   io:println(\"Value of PI : \", math:PI);\n+}\n+\n+// This demonstrates different ways to mock functions.\n import ballerina/test;\n \n-// This is the mock function, which will replace the real function.\n+(any|error)[] outputs = [];\n+\n @test:Mock {\n-    // Since there is no module declaration, `.` is the current module.\n-    // You can include any module (e.g., : `ballerina/io`).\n-    moduleName: \".\",\n-    functionName: \"intAdd\"\n+    // This specifies a mock function that should replace the\n+    // imported function `io:println`.\n+    moduleName: \"ballerina/io\",\n+    functionName: \"println\"\n }\n-// The mock function's signature should match with the actual function's signature.\n-public function mockIntAdd(int a, int b) returns int {\n-    io:println(\"I'm the mock function!\");\n-    return (a - b);\n+function mockIoPrintLn((any|error)... text) {\n+    outputs.push(text);\n }\n \n-// This is the test function.\n+@test:Config {}\n+function testMathConsts() {\n+   // This function call to `io:println` will be replaced with `mockIoPrintLn`\n+   printMathConsts();\n+   test:assertEquals(outputs[0].toString(), \"Value of PI :  3.141592653589793\");\n+}\n+\n+// This creates an object for stubbing calls to `intAdd` which is written in the same module.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "005c17a50c7f3571a0b99cae1e418ce0fc95068c"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2MzkzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // This stubs the calls to `intAdd` function to return the specified value.\n          \n          \n            \n                // This stubs the calls to the `intAdd` function to return the specified value.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469163938", "createdAt": "2020-08-12T10:32:34Z", "author": {"login": "praneesha"}, "path": "examples/testerina-function-mocks/testerina_function_mocks.bal", "diffHunk": "@@ -1,29 +1,68 @@\n import ballerina/io;\n+import ballerina/math;\n+\n+// This function calls the `intAdd` function and returns the result.\n+public function addValues(int a, int b) returns int {\n+    return intAdd(a, b);\n+}\n+\n+// This function adds two integers and returns the result.\n+public function intAdd(int a, int b) returns int {\n+    return (a + b);\n+}\n+\n+// The function prints the value of PI using `io:println` function\n+public function printMathConsts() {\n+   io:println(\"Value of PI : \", math:PI);\n+}\n+\n+// This demonstrates different ways to mock functions.\n import ballerina/test;\n \n-// This is the mock function, which will replace the real function.\n+(any|error)[] outputs = [];\n+\n @test:Mock {\n-    // Since there is no module declaration, `.` is the current module.\n-    // You can include any module (e.g., : `ballerina/io`).\n-    moduleName: \".\",\n-    functionName: \"intAdd\"\n+    // This specifies a mock function that should replace the\n+    // imported function `io:println`.\n+    moduleName: \"ballerina/io\",\n+    functionName: \"println\"\n }\n-// The mock function's signature should match with the actual function's signature.\n-public function mockIntAdd(int a, int b) returns int {\n-    io:println(\"I'm the mock function!\");\n-    return (a - b);\n+function mockIoPrintLn((any|error)... text) {\n+    outputs.push(text);\n }\n \n-// This is the test function.\n+@test:Config {}\n+function testMathConsts() {\n+   // This function call to `io:println` will be replaced with `mockIoPrintLn`\n+   printMathConsts();\n+   test:assertEquals(outputs[0].toString(), \"Value of PI :  3.141592653589793\");\n+}\n+\n+// This creates an object for stubbing calls to `intAdd` which is written in the same module.\n+@test:MockFn { functionName: \"intAdd\" }\n+test:MockFunction intAddMockFn = new();\n+\n @test:Config {}\n function testAssertIntEquals() {\n-    int answer = 0;\n-    answer = intAdd(5, 3);\n-    io:println(\"Function mocking test\");\n-    test:assertEquals(answer, 2, msg = \"function mocking failed\");\n+    // This stubs the calls to `intAdd` function to return the specified value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "005c17a50c7f3571a0b99cae1e418ce0fc95068c"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NDA0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // This stubs the calls to `intAdd` function to return the specified value\n          \n          \n            \n                // This stubs the calls to the `intAdd` function to return the specified value", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469164048", "createdAt": "2020-08-12T10:32:46Z", "author": {"login": "praneesha"}, "path": "examples/testerina-function-mocks/testerina_function_mocks.bal", "diffHunk": "@@ -1,29 +1,68 @@\n import ballerina/io;\n+import ballerina/math;\n+\n+// This function calls the `intAdd` function and returns the result.\n+public function addValues(int a, int b) returns int {\n+    return intAdd(a, b);\n+}\n+\n+// This function adds two integers and returns the result.\n+public function intAdd(int a, int b) returns int {\n+    return (a + b);\n+}\n+\n+// The function prints the value of PI using `io:println` function\n+public function printMathConsts() {\n+   io:println(\"Value of PI : \", math:PI);\n+}\n+\n+// This demonstrates different ways to mock functions.\n import ballerina/test;\n \n-// This is the mock function, which will replace the real function.\n+(any|error)[] outputs = [];\n+\n @test:Mock {\n-    // Since there is no module declaration, `.` is the current module.\n-    // You can include any module (e.g., : `ballerina/io`).\n-    moduleName: \".\",\n-    functionName: \"intAdd\"\n+    // This specifies a mock function that should replace the\n+    // imported function `io:println`.\n+    moduleName: \"ballerina/io\",\n+    functionName: \"println\"\n }\n-// The mock function's signature should match with the actual function's signature.\n-public function mockIntAdd(int a, int b) returns int {\n-    io:println(\"I'm the mock function!\");\n-    return (a - b);\n+function mockIoPrintLn((any|error)... text) {\n+    outputs.push(text);\n }\n \n-// This is the test function.\n+@test:Config {}\n+function testMathConsts() {\n+   // This function call to `io:println` will be replaced with `mockIoPrintLn`\n+   printMathConsts();\n+   test:assertEquals(outputs[0].toString(), \"Value of PI :  3.141592653589793\");\n+}\n+\n+// This creates an object for stubbing calls to `intAdd` which is written in the same module.\n+@test:MockFn { functionName: \"intAdd\" }\n+test:MockFunction intAddMockFn = new();\n+\n @test:Config {}\n function testAssertIntEquals() {\n-    int answer = 0;\n-    answer = intAdd(5, 3);\n-    io:println(\"Function mocking test\");\n-    test:assertEquals(answer, 2, msg = \"function mocking failed\");\n+    // This stubs the calls to `intAdd` function to return the specified value.\n+    test:when(intAddMockFn).thenReturn(20);\n+\n+    // This stubs the calls to `intAdd` function to return the specified value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "005c17a50c7f3571a0b99cae1e418ce0fc95068c"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NDE1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // This stubs the calls to `intAdd` function to invoke the specifed function.\n          \n          \n            \n                // This stubs the calls to the `intAdd` function to invoke the specified function.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469164152", "createdAt": "2020-08-12T10:32:57Z", "author": {"login": "praneesha"}, "path": "examples/testerina-function-mocks/testerina_function_mocks.bal", "diffHunk": "@@ -1,29 +1,68 @@\n import ballerina/io;\n+import ballerina/math;\n+\n+// This function calls the `intAdd` function and returns the result.\n+public function addValues(int a, int b) returns int {\n+    return intAdd(a, b);\n+}\n+\n+// This function adds two integers and returns the result.\n+public function intAdd(int a, int b) returns int {\n+    return (a + b);\n+}\n+\n+// The function prints the value of PI using `io:println` function\n+public function printMathConsts() {\n+   io:println(\"Value of PI : \", math:PI);\n+}\n+\n+// This demonstrates different ways to mock functions.\n import ballerina/test;\n \n-// This is the mock function, which will replace the real function.\n+(any|error)[] outputs = [];\n+\n @test:Mock {\n-    // Since there is no module declaration, `.` is the current module.\n-    // You can include any module (e.g., : `ballerina/io`).\n-    moduleName: \".\",\n-    functionName: \"intAdd\"\n+    // This specifies a mock function that should replace the\n+    // imported function `io:println`.\n+    moduleName: \"ballerina/io\",\n+    functionName: \"println\"\n }\n-// The mock function's signature should match with the actual function's signature.\n-public function mockIntAdd(int a, int b) returns int {\n-    io:println(\"I'm the mock function!\");\n-    return (a - b);\n+function mockIoPrintLn((any|error)... text) {\n+    outputs.push(text);\n }\n \n-// This is the test function.\n+@test:Config {}\n+function testMathConsts() {\n+   // This function call to `io:println` will be replaced with `mockIoPrintLn`\n+   printMathConsts();\n+   test:assertEquals(outputs[0].toString(), \"Value of PI :  3.141592653589793\");\n+}\n+\n+// This creates an object for stubbing calls to `intAdd` which is written in the same module.\n+@test:MockFn { functionName: \"intAdd\" }\n+test:MockFunction intAddMockFn = new();\n+\n @test:Config {}\n function testAssertIntEquals() {\n-    int answer = 0;\n-    answer = intAdd(5, 3);\n-    io:println(\"Function mocking test\");\n-    test:assertEquals(answer, 2, msg = \"function mocking failed\");\n+    // This stubs the calls to `intAdd` function to return the specified value.\n+    test:when(intAddMockFn).thenReturn(20);\n+\n+    // This stubs the calls to `intAdd` function to return the specified value\n+    // when the specified arguments are provided.\n+    test:when(intAddMockFn).withArguments(0, 0).thenReturn(-1);\n+\n+    test:assertEquals(intAdd(10, 6), 20, msg = \"function mocking failed\");\n+    test:assertEquals(intAdd(0, 0), -1,\n+        msg = \"function mocking with arguments failed\");\n+\n+    // This stubs the calls to `intAdd` function to invoke the specifed function.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "005c17a50c7f3571a0b99cae1e418ce0fc95068c"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NDIyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // in place of `intAdd` function.\n          \n          \n            \n            // in place of the `intAdd` function.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469164227", "createdAt": "2020-08-12T10:33:07Z", "author": {"login": "praneesha"}, "path": "examples/testerina-function-mocks/testerina_function_mocks.bal", "diffHunk": "@@ -1,29 +1,68 @@\n import ballerina/io;\n+import ballerina/math;\n+\n+// This function calls the `intAdd` function and returns the result.\n+public function addValues(int a, int b) returns int {\n+    return intAdd(a, b);\n+}\n+\n+// This function adds two integers and returns the result.\n+public function intAdd(int a, int b) returns int {\n+    return (a + b);\n+}\n+\n+// The function prints the value of PI using `io:println` function\n+public function printMathConsts() {\n+   io:println(\"Value of PI : \", math:PI);\n+}\n+\n+// This demonstrates different ways to mock functions.\n import ballerina/test;\n \n-// This is the mock function, which will replace the real function.\n+(any|error)[] outputs = [];\n+\n @test:Mock {\n-    // Since there is no module declaration, `.` is the current module.\n-    // You can include any module (e.g., : `ballerina/io`).\n-    moduleName: \".\",\n-    functionName: \"intAdd\"\n+    // This specifies a mock function that should replace the\n+    // imported function `io:println`.\n+    moduleName: \"ballerina/io\",\n+    functionName: \"println\"\n }\n-// The mock function's signature should match with the actual function's signature.\n-public function mockIntAdd(int a, int b) returns int {\n-    io:println(\"I'm the mock function!\");\n-    return (a - b);\n+function mockIoPrintLn((any|error)... text) {\n+    outputs.push(text);\n }\n \n-// This is the test function.\n+@test:Config {}\n+function testMathConsts() {\n+   // This function call to `io:println` will be replaced with `mockIoPrintLn`\n+   printMathConsts();\n+   test:assertEquals(outputs[0].toString(), \"Value of PI :  3.141592653589793\");\n+}\n+\n+// This creates an object for stubbing calls to `intAdd` which is written in the same module.\n+@test:MockFn { functionName: \"intAdd\" }\n+test:MockFunction intAddMockFn = new();\n+\n @test:Config {}\n function testAssertIntEquals() {\n-    int answer = 0;\n-    answer = intAdd(5, 3);\n-    io:println(\"Function mocking test\");\n-    test:assertEquals(answer, 2, msg = \"function mocking failed\");\n+    // This stubs the calls to `intAdd` function to return the specified value.\n+    test:when(intAddMockFn).thenReturn(20);\n+\n+    // This stubs the calls to `intAdd` function to return the specified value\n+    // when the specified arguments are provided.\n+    test:when(intAddMockFn).withArguments(0, 0).thenReturn(-1);\n+\n+    test:assertEquals(intAdd(10, 6), 20, msg = \"function mocking failed\");\n+    test:assertEquals(intAdd(0, 0), -1,\n+        msg = \"function mocking with arguments failed\");\n+\n+    // This stubs the calls to `intAdd` function to invoke the specifed function.\n+    test:when(intAddMockFn).call(\"mockIntAdd\");\n+\n+    test:assertEquals(addValues(11, 6), 5, msg = \"function mocking failed\");\n }\n \n-// The real function, which is mocked above.\n-public function intAdd(int a, int b) returns int {\n-    return (a + b);\n+// This is a mock function that can be called\n+// in place of `intAdd` function.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "005c17a50c7f3571a0b99cae1e418ce0fc95068c"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NDM4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Mock functions allow you to hide the real functions and engage your own functions when running tests.\n          \n          \n            \n            // Mock functions allow you to hide the real functions and engage your own functions when running the tests.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469164381", "createdAt": "2020-08-12T10:33:26Z", "author": {"login": "praneesha"}, "path": "examples/testerina-function-mocks/testerina_function_mocks.description", "diffHunk": "@@ -1,2 +1,6 @@\n-// Mock functions allow you to hide the real function and engage your own functions when running tests.\n-// This allows you to isolate your test functions from the rest.\n+// Mock functions allow you to hide the real functions and engage your own functions when running tests.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "005c17a50c7f3571a0b99cae1e418ce0fc95068c"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NDQ5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // function declared in the module under test can be mocked with dedicated annotations.<br/><br/>\n          \n          \n            \n            // function declared in the module under a test can be mocked with dedicated annotations.<br/><br/>", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469164497", "createdAt": "2020-08-12T10:33:41Z", "author": {"login": "praneesha"}, "path": "examples/testerina-function-mocks/testerina_function_mocks.description", "diffHunk": "@@ -1,2 +1,6 @@\n-// Mock functions allow you to hide the real function and engage your own functions when running tests.\n-// This allows you to isolate your test functions from the rest.\n+// Mock functions allow you to hide the real functions and engage your own functions when running tests.\n+// This allows you to isolate your test functions from the rest. Both mocking an imported function and a\n+// function declared in the module under test can be mocked with dedicated annotations.<br/><br/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "005c17a50c7f3571a0b99cae1e418ce0fc95068c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NDY3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // It is not limited to the test file where it is being mocked. Mocking a function from the module under test\n          \n          \n            \n            // It is not limited to the test file in which it is being mocked. Mocking a function from the module under the test", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469164679", "createdAt": "2020-08-12T10:34:05Z", "author": {"login": "praneesha"}, "path": "examples/testerina-function-mocks/testerina_function_mocks.description", "diffHunk": "@@ -1,2 +1,6 @@\n-// Mock functions allow you to hide the real function and engage your own functions when running tests.\n-// This allows you to isolate your test functions from the rest.\n+// Mock functions allow you to hide the real functions and engage your own functions when running tests.\n+// This allows you to isolate your test functions from the rest. Both mocking an imported function and a\n+// function declared in the module under test can be mocked with dedicated annotations.<br/><br/>\n+// Mocking an imported function will apply the mocked function to every instance of the original function call.\n+// It is not limited to the test file where it is being mocked. Mocking a function from the module under test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "005c17a50c7f3571a0b99cae1e418ce0fc95068c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NDgwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // This is the test file that demonstrates ways to mock functions.\n          \n          \n            \n            // This is the test file, which demonstrates ways to mock functions.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469164804", "createdAt": "2020-08-12T10:34:19Z", "author": {"login": "praneesha"}, "path": "examples/testerina-function-mocks/testerina_function_mocks_test.bal", "diffHunk": "@@ -0,0 +1,69 @@\n+// This is the test file that demonstrates ways to mock functions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "005c17a50c7f3571a0b99cae1e418ce0fc95068c"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NDkwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // The function prints the value of PI using `io:println` function\n          \n          \n            \n            // This function prints the value of PI using `io:println` function.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469164909", "createdAt": "2020-08-12T10:34:36Z", "author": {"login": "praneesha"}, "path": "examples/testerina-function-mocks/testerina_function_mocks_test.bal", "diffHunk": "@@ -0,0 +1,69 @@\n+// This is the test file that demonstrates ways to mock functions.\n+import ballerina/io;\n+import ballerina/math;\n+\n+// This function calls the `intAdd` function and returns the result.\n+public function addValues(int a, int b) returns int {\n+    return intAdd(a, b);\n+}\n+\n+// This function adds two integers and returns the result.\n+public function intAdd(int a, int b) returns int {\n+    return (a + b);\n+}\n+\n+// The function prints the value of PI using `io:println` function", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "005c17a50c7f3571a0b99cae1e418ce0fc95068c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NTE4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // imported function `io:println`.\n          \n          \n            \n                // imported `io:println` function.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469165182", "createdAt": "2020-08-12T10:35:02Z", "author": {"login": "praneesha"}, "path": "examples/testerina-function-mocks/testerina_function_mocks_test.bal", "diffHunk": "@@ -0,0 +1,69 @@\n+// This is the test file that demonstrates ways to mock functions.\n+import ballerina/io;\n+import ballerina/math;\n+\n+// This function calls the `intAdd` function and returns the result.\n+public function addValues(int a, int b) returns int {\n+    return intAdd(a, b);\n+}\n+\n+// This function adds two integers and returns the result.\n+public function intAdd(int a, int b) returns int {\n+    return (a + b);\n+}\n+\n+// The function prints the value of PI using `io:println` function\n+public function printMathConsts() {\n+   io:println(\"Value of PI : \", math:PI);\n+}\n+\n+// This demonstrates different ways to mock functions.\n+import ballerina/test;\n+\n+(any|error)[] outputs = [];\n+\n+@test:Mock {\n+    // This specifies a mock function that should replace the\n+    // imported function `io:println`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "005c17a50c7f3571a0b99cae1e418ce0fc95068c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NTMxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               // This function call to `io:println` will be replaced with `mockIoPrintLn`\n          \n          \n            \n               // This function call to the `io:println` function will be replaced with the `mockIoPrintLn` function.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469165312", "createdAt": "2020-08-12T10:35:22Z", "author": {"login": "praneesha"}, "path": "examples/testerina-function-mocks/testerina_function_mocks_test.bal", "diffHunk": "@@ -0,0 +1,69 @@\n+// This is the test file that demonstrates ways to mock functions.\n+import ballerina/io;\n+import ballerina/math;\n+\n+// This function calls the `intAdd` function and returns the result.\n+public function addValues(int a, int b) returns int {\n+    return intAdd(a, b);\n+}\n+\n+// This function adds two integers and returns the result.\n+public function intAdd(int a, int b) returns int {\n+    return (a + b);\n+}\n+\n+// The function prints the value of PI using `io:println` function\n+public function printMathConsts() {\n+   io:println(\"Value of PI : \", math:PI);\n+}\n+\n+// This demonstrates different ways to mock functions.\n+import ballerina/test;\n+\n+(any|error)[] outputs = [];\n+\n+@test:Mock {\n+    // This specifies a mock function that should replace the\n+    // imported function `io:println`.\n+    moduleName: \"ballerina/io\",\n+    functionName: \"println\"\n+}\n+function mockIoPrintLn((any|error)... text) {\n+    outputs.push(text);\n+}\n+\n+@test:Config {}\n+function testMathConsts() {\n+   // This function call to `io:println` will be replaced with `mockIoPrintLn`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "005c17a50c7f3571a0b99cae1e418ce0fc95068c"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NTQwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // This creates an object for stubbing calls to `intAdd` which is written in the same module.\n          \n          \n            \n            // This creates an object for stubbing calls to `intAdd`, which is written in the same module.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469165403", "createdAt": "2020-08-12T10:35:32Z", "author": {"login": "praneesha"}, "path": "examples/testerina-function-mocks/testerina_function_mocks_test.bal", "diffHunk": "@@ -0,0 +1,69 @@\n+// This is the test file that demonstrates ways to mock functions.\n+import ballerina/io;\n+import ballerina/math;\n+\n+// This function calls the `intAdd` function and returns the result.\n+public function addValues(int a, int b) returns int {\n+    return intAdd(a, b);\n+}\n+\n+// This function adds two integers and returns the result.\n+public function intAdd(int a, int b) returns int {\n+    return (a + b);\n+}\n+\n+// The function prints the value of PI using `io:println` function\n+public function printMathConsts() {\n+   io:println(\"Value of PI : \", math:PI);\n+}\n+\n+// This demonstrates different ways to mock functions.\n+import ballerina/test;\n+\n+(any|error)[] outputs = [];\n+\n+@test:Mock {\n+    // This specifies a mock function that should replace the\n+    // imported function `io:println`.\n+    moduleName: \"ballerina/io\",\n+    functionName: \"println\"\n+}\n+function mockIoPrintLn((any|error)... text) {\n+    outputs.push(text);\n+}\n+\n+@test:Config {}\n+function testMathConsts() {\n+   // This function call to `io:println` will be replaced with `mockIoPrintLn`\n+   printMathConsts();\n+   test:assertEquals(outputs[0].toString(), \"Value of PI :  3.141592653589793\");\n+}\n+\n+// This creates an object for stubbing calls to `intAdd` which is written in the same module.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "005c17a50c7f3571a0b99cae1e418ce0fc95068c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NTQ2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // This stubs the calls to `intAdd` function to return the specified value.\n          \n          \n            \n                // This stubs the calls to the `intAdd` function to return the specified value.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469165467", "createdAt": "2020-08-12T10:35:40Z", "author": {"login": "praneesha"}, "path": "examples/testerina-function-mocks/testerina_function_mocks_test.bal", "diffHunk": "@@ -0,0 +1,69 @@\n+// This is the test file that demonstrates ways to mock functions.\n+import ballerina/io;\n+import ballerina/math;\n+\n+// This function calls the `intAdd` function and returns the result.\n+public function addValues(int a, int b) returns int {\n+    return intAdd(a, b);\n+}\n+\n+// This function adds two integers and returns the result.\n+public function intAdd(int a, int b) returns int {\n+    return (a + b);\n+}\n+\n+// The function prints the value of PI using `io:println` function\n+public function printMathConsts() {\n+   io:println(\"Value of PI : \", math:PI);\n+}\n+\n+// This demonstrates different ways to mock functions.\n+import ballerina/test;\n+\n+(any|error)[] outputs = [];\n+\n+@test:Mock {\n+    // This specifies a mock function that should replace the\n+    // imported function `io:println`.\n+    moduleName: \"ballerina/io\",\n+    functionName: \"println\"\n+}\n+function mockIoPrintLn((any|error)... text) {\n+    outputs.push(text);\n+}\n+\n+@test:Config {}\n+function testMathConsts() {\n+   // This function call to `io:println` will be replaced with `mockIoPrintLn`\n+   printMathConsts();\n+   test:assertEquals(outputs[0].toString(), \"Value of PI :  3.141592653589793\");\n+}\n+\n+// This creates an object for stubbing calls to `intAdd` which is written in the same module.\n+@test:MockFn { functionName: \"intAdd\" }\n+test:MockFunction intAddMockFn = new();\n+\n+@test:Config {}\n+function testAssertIntEquals() {\n+    // This stubs the calls to `intAdd` function to return the specified value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "005c17a50c7f3571a0b99cae1e418ce0fc95068c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NTUyMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // This stubs the calls to `intAdd` function to return the specified value\n          \n          \n            \n                // This stubs the calls to the `intAdd` function to return the specified value", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469165522", "createdAt": "2020-08-12T10:35:48Z", "author": {"login": "praneesha"}, "path": "examples/testerina-function-mocks/testerina_function_mocks_test.bal", "diffHunk": "@@ -0,0 +1,69 @@\n+// This is the test file that demonstrates ways to mock functions.\n+import ballerina/io;\n+import ballerina/math;\n+\n+// This function calls the `intAdd` function and returns the result.\n+public function addValues(int a, int b) returns int {\n+    return intAdd(a, b);\n+}\n+\n+// This function adds two integers and returns the result.\n+public function intAdd(int a, int b) returns int {\n+    return (a + b);\n+}\n+\n+// The function prints the value of PI using `io:println` function\n+public function printMathConsts() {\n+   io:println(\"Value of PI : \", math:PI);\n+}\n+\n+// This demonstrates different ways to mock functions.\n+import ballerina/test;\n+\n+(any|error)[] outputs = [];\n+\n+@test:Mock {\n+    // This specifies a mock function that should replace the\n+    // imported function `io:println`.\n+    moduleName: \"ballerina/io\",\n+    functionName: \"println\"\n+}\n+function mockIoPrintLn((any|error)... text) {\n+    outputs.push(text);\n+}\n+\n+@test:Config {}\n+function testMathConsts() {\n+   // This function call to `io:println` will be replaced with `mockIoPrintLn`\n+   printMathConsts();\n+   test:assertEquals(outputs[0].toString(), \"Value of PI :  3.141592653589793\");\n+}\n+\n+// This creates an object for stubbing calls to `intAdd` which is written in the same module.\n+@test:MockFn { functionName: \"intAdd\" }\n+test:MockFunction intAddMockFn = new();\n+\n+@test:Config {}\n+function testAssertIntEquals() {\n+    // This stubs the calls to `intAdd` function to return the specified value.\n+    test:when(intAddMockFn).thenReturn(20);\n+\n+    // This stubs the calls to `intAdd` function to return the specified value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "005c17a50c7f3571a0b99cae1e418ce0fc95068c"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NTU5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // This stubs the calls to `intAdd` function to invoke the specifed function.\n          \n          \n            \n                // This stubs the calls to the `intAdd` function to invoke the specified function.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469165599", "createdAt": "2020-08-12T10:35:59Z", "author": {"login": "praneesha"}, "path": "examples/testerina-function-mocks/testerina_function_mocks_test.bal", "diffHunk": "@@ -0,0 +1,69 @@\n+// This is the test file that demonstrates ways to mock functions.\n+import ballerina/io;\n+import ballerina/math;\n+\n+// This function calls the `intAdd` function and returns the result.\n+public function addValues(int a, int b) returns int {\n+    return intAdd(a, b);\n+}\n+\n+// This function adds two integers and returns the result.\n+public function intAdd(int a, int b) returns int {\n+    return (a + b);\n+}\n+\n+// The function prints the value of PI using `io:println` function\n+public function printMathConsts() {\n+   io:println(\"Value of PI : \", math:PI);\n+}\n+\n+// This demonstrates different ways to mock functions.\n+import ballerina/test;\n+\n+(any|error)[] outputs = [];\n+\n+@test:Mock {\n+    // This specifies a mock function that should replace the\n+    // imported function `io:println`.\n+    moduleName: \"ballerina/io\",\n+    functionName: \"println\"\n+}\n+function mockIoPrintLn((any|error)... text) {\n+    outputs.push(text);\n+}\n+\n+@test:Config {}\n+function testMathConsts() {\n+   // This function call to `io:println` will be replaced with `mockIoPrintLn`\n+   printMathConsts();\n+   test:assertEquals(outputs[0].toString(), \"Value of PI :  3.141592653589793\");\n+}\n+\n+// This creates an object for stubbing calls to `intAdd` which is written in the same module.\n+@test:MockFn { functionName: \"intAdd\" }\n+test:MockFunction intAddMockFn = new();\n+\n+@test:Config {}\n+function testAssertIntEquals() {\n+    // This stubs the calls to `intAdd` function to return the specified value.\n+    test:when(intAddMockFn).thenReturn(20);\n+\n+    // This stubs the calls to `intAdd` function to return the specified value\n+    // when the specified arguments are provided.\n+    test:when(intAddMockFn).withArguments(0, 0).thenReturn(-1);\n+\n+    test:assertEquals(intAdd(10, 6), 20, msg = \"function mocking failed\");\n+    test:assertEquals(intAdd(0, 0), -1,\n+        msg = \"function mocking with arguments failed\");\n+\n+    // This stubs the calls to `intAdd` function to invoke the specifed function.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "005c17a50c7f3571a0b99cae1e418ce0fc95068c"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NTY2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // in place of `intAdd` function.\n          \n          \n            \n            // in place of the `intAdd` function.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469165669", "createdAt": "2020-08-12T10:36:07Z", "author": {"login": "praneesha"}, "path": "examples/testerina-function-mocks/testerina_function_mocks_test.bal", "diffHunk": "@@ -0,0 +1,69 @@\n+// This is the test file that demonstrates ways to mock functions.\n+import ballerina/io;\n+import ballerina/math;\n+\n+// This function calls the `intAdd` function and returns the result.\n+public function addValues(int a, int b) returns int {\n+    return intAdd(a, b);\n+}\n+\n+// This function adds two integers and returns the result.\n+public function intAdd(int a, int b) returns int {\n+    return (a + b);\n+}\n+\n+// The function prints the value of PI using `io:println` function\n+public function printMathConsts() {\n+   io:println(\"Value of PI : \", math:PI);\n+}\n+\n+// This demonstrates different ways to mock functions.\n+import ballerina/test;\n+\n+(any|error)[] outputs = [];\n+\n+@test:Mock {\n+    // This specifies a mock function that should replace the\n+    // imported function `io:println`.\n+    moduleName: \"ballerina/io\",\n+    functionName: \"println\"\n+}\n+function mockIoPrintLn((any|error)... text) {\n+    outputs.push(text);\n+}\n+\n+@test:Config {}\n+function testMathConsts() {\n+   // This function call to `io:println` will be replaced with `mockIoPrintLn`\n+   printMathConsts();\n+   test:assertEquals(outputs[0].toString(), \"Value of PI :  3.141592653589793\");\n+}\n+\n+// This creates an object for stubbing calls to `intAdd` which is written in the same module.\n+@test:MockFn { functionName: \"intAdd\" }\n+test:MockFunction intAddMockFn = new();\n+\n+@test:Config {}\n+function testAssertIntEquals() {\n+    // This stubs the calls to `intAdd` function to return the specified value.\n+    test:when(intAddMockFn).thenReturn(20);\n+\n+    // This stubs the calls to `intAdd` function to return the specified value\n+    // when the specified arguments are provided.\n+    test:when(intAddMockFn).withArguments(0, 0).thenReturn(-1);\n+\n+    test:assertEquals(intAdd(10, 6), 20, msg = \"function mocking failed\");\n+    test:assertEquals(intAdd(0, 0), -1,\n+        msg = \"function mocking with arguments failed\");\n+\n+    // This stubs the calls to `intAdd` function to invoke the specifed function.\n+    test:when(intAddMockFn).call(\"mockIntAdd\");\n+\n+    test:assertEquals(addValues(11, 6), 5, msg = \"function mocking failed\");\n+}\n+\n+// This is a mock function that can be called\n+// in place of `intAdd` function.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "005c17a50c7f3571a0b99cae1e418ce0fc95068c"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NTc4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Replace the content of the `main.bal` and ``main_test.bal` files with the above code\n          \n          \n            \n            # Replace the content of the `main.bal` and ``main_test.bal` files with the above code,", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469165786", "createdAt": "2020-08-12T10:36:21Z", "author": {"login": "praneesha"}, "path": "examples/testerina-function-mocks/testerina_function_mocks_test.out", "diffHunk": "@@ -0,0 +1,20 @@\n+# To run this sample, create a Ballerina project and a module inside it.\n+# Replace the content of the `main.bal` and ``main_test.bal` files with the above code", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "005c17a50c7f3571a0b99cae1e418ce0fc95068c"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NjAxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // and values of variables<br/><br/>\n          \n          \n            \n            // and values of the variables<br/><br/>", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469166018", "createdAt": "2020-08-12T10:36:48Z", "author": {"login": "praneesha"}, "path": "examples/testerina-object-mocks/testerina_object_mocks.description", "diffHunk": "@@ -0,0 +1,8 @@\n+// Object mocking enables controlling the values of member variables and the behavior of\n+// the member functions of an object. Mocking of objects can be done in two ways. <br/><br/>\n+// 1. Creating a test double - providing an equivalent mock object in place of the real<br/>\n+// 2. Stubbing the member function or member variable - stubbing the behavior of functions\n+// and values of variables<br/><br/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "005c17a50c7f3571a0b99cae1e418ce0fc95068c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NjI0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // This function sends out email to specified email addresses\n          \n          \n            \n            // This function sends out emails to the specified email addresses", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469166240", "createdAt": "2020-08-12T10:37:18Z", "author": {"login": "praneesha"}, "path": "examples/testerina-object-mocks/testerina_object_mocks_main.bal", "diffHunk": "@@ -0,0 +1,43 @@\n+// This demonstrates different ways to mock a client object.\n+import ballerina/http;\n+import ballerina/io;\n+import ballerina/email;\n+\n+// Clients objects are defined globally to be able to replace in test files.\n+http:Client clientEndpoint = new(\"http://postman-echo.com\");\n+email:SmtpClient smtpClient = new (\"localhost\", \"admin\",\"admin\");\n+\n+// This function performs two `GET` requests to the specified\n+// endpoint and returns the response.\n+function performGet() returns http:Response {\n+    io:println(\"Executing the 1st GET request\");\n+    http:Response|error result = clientEndpoint->get(\"/headers\");\n+    http:Response response = <http:Response>result;\n+    io:println(\"Status code: \" + response.statusCode.toString());\n+\n+    if(response.statusCode == 200) {\n+        io:println(\"Executing the 2nd GET request\");\n+        http:Request req = new;\n+        req.addHeader(\"Sample-Name\", \"http-client-connector\");\n+        result = clientEndpoint->get(\"/get?test=123\", req);\n+        response = <http:Response>result;\n+        io:println(\"Status code: \" + response.statusCode.toString());\n+    }\n+    return response;\n+}\n+\n+// This function sends out email to specified email addresses", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "005c17a50c7f3571a0b99cae1e418ce0fc95068c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NjMyMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // and returns an error if found.\n          \n          \n            \n            // and returns an error if they are not found.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469166322", "createdAt": "2020-08-12T10:37:29Z", "author": {"login": "praneesha"}, "path": "examples/testerina-object-mocks/testerina_object_mocks_main.bal", "diffHunk": "@@ -0,0 +1,43 @@\n+// This demonstrates different ways to mock a client object.\n+import ballerina/http;\n+import ballerina/io;\n+import ballerina/email;\n+\n+// Clients objects are defined globally to be able to replace in test files.\n+http:Client clientEndpoint = new(\"http://postman-echo.com\");\n+email:SmtpClient smtpClient = new (\"localhost\", \"admin\",\"admin\");\n+\n+// This function performs two `GET` requests to the specified\n+// endpoint and returns the response.\n+function performGet() returns http:Response {\n+    io:println(\"Executing the 1st GET request\");\n+    http:Response|error result = clientEndpoint->get(\"/headers\");\n+    http:Response response = <http:Response>result;\n+    io:println(\"Status code: \" + response.statusCode.toString());\n+\n+    if(response.statusCode == 200) {\n+        io:println(\"Executing the 2nd GET request\");\n+        http:Request req = new;\n+        req.addHeader(\"Sample-Name\", \"http-client-connector\");\n+        result = clientEndpoint->get(\"/get?test=123\", req);\n+        response = <http:Response>result;\n+        io:println(\"Status code: \" + response.statusCode.toString());\n+    }\n+    return response;\n+}\n+\n+// This function sends out email to specified email addresses\n+// and returns an error if found.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "005c17a50c7f3571a0b99cae1e418ce0fc95068c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NjQxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // This is the test double of `http:Client` object with the\n          \n          \n            \n            // This is the test double of the `http:Client` object with the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469166418", "createdAt": "2020-08-12T10:37:39Z", "author": {"login": "praneesha"}, "path": "examples/testerina-object-mocks/testerina_object_mocks_test.bal", "diffHunk": "@@ -0,0 +1,89 @@\n+// This demonstrates different ways to mock a client object.\n+import ballerina/test;\n+import ballerina/http;\n+import ballerina/email;\n+\n+// This is the test double of `http:Client` object with the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "005c17a50c7f3571a0b99cae1e418ce0fc95068c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NjQ2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // implementation of required functions.\n          \n          \n            \n            // implementation of the required functions.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469166469", "createdAt": "2020-08-12T10:37:46Z", "author": {"login": "praneesha"}, "path": "examples/testerina-object-mocks/testerina_object_mocks_test.bal", "diffHunk": "@@ -0,0 +1,89 @@\n+// This demonstrates different ways to mock a client object.\n+import ballerina/test;\n+import ballerina/http;\n+import ballerina/email;\n+\n+// This is the test double of `http:Client` object with the\n+// implementation of required functions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "005c17a50c7f3571a0b99cae1e418ce0fc95068c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NjU1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // This creates and assigns a default mock object which subsequently needs to stubbed.\n          \n          \n            \n                // This creates and assigns a default mock object, which needs to be stubbed  subsequently.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469166551", "createdAt": "2020-08-12T10:37:59Z", "author": {"login": "praneesha"}, "path": "examples/testerina-object-mocks/testerina_object_mocks_test.bal", "diffHunk": "@@ -0,0 +1,89 @@\n+// This demonstrates different ways to mock a client object.\n+import ballerina/test;\n+import ballerina/http;\n+import ballerina/email;\n+\n+// This is the test double of `http:Client` object with the\n+// implementation of required functions.\n+public type MockHttpClient client object {\n+    public remote function get(@untainted string path,\n+        public http:RequestMessage message = ()) returns\n+            http:Response|http:ClientError {\n+\n+        http:Response res = new;\n+        res.statusCode = 500;\n+        return res;\n+    }\n+};\n+\n+@test:Config {}\n+function testTestDouble() {\n+    // This creates and assigns the defined test-double.\n+    clientEndpoint = test:mock(http:Client, new MockHttpClient());\n+    http:Response res = performGet();\n+    test:assertEquals(res.statusCode, 500);\n+}\n+\n+@test:Config {}\n+function testReturn() {\n+    // This creates and assigns a default mock object which subsequently needs to stubbed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "005c17a50c7f3571a0b99cae1e418ce0fc95068c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NjkyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // for each call. i.e., The first call will return the status code `200`\n          \n          \n            \n                // for each call (i.e., the first call will return the status code `200`", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469166920", "createdAt": "2020-08-12T10:38:52Z", "author": {"login": "praneesha"}, "path": "examples/testerina-object-mocks/testerina_object_mocks_test.bal", "diffHunk": "@@ -0,0 +1,89 @@\n+// This demonstrates different ways to mock a client object.\n+import ballerina/test;\n+import ballerina/http;\n+import ballerina/email;\n+\n+// This is the test double of `http:Client` object with the\n+// implementation of required functions.\n+public type MockHttpClient client object {\n+    public remote function get(@untainted string path,\n+        public http:RequestMessage message = ()) returns\n+            http:Response|http:ClientError {\n+\n+        http:Response res = new;\n+        res.statusCode = 500;\n+        return res;\n+    }\n+};\n+\n+@test:Config {}\n+function testTestDouble() {\n+    // This creates and assigns the defined test-double.\n+    clientEndpoint = test:mock(http:Client, new MockHttpClient());\n+    http:Response res = performGet();\n+    test:assertEquals(res.statusCode, 500);\n+}\n+\n+@test:Config {}\n+function testReturn() {\n+    // This creates and assigns a default mock object which subsequently needs to stubbed.\n+    clientEndpoint = test:mock(http:Client);\n+    // This stubs the `get` function to return the specified HTTP response.\n+    test:prepare(clientEndpoint).when(\"get\").thenReturn(new http:Response());\n+    http:Response res = performGet();\n+    test:assertEquals(res.statusCode, 200);\n+}\n+\n+@test:Config {}\n+function testReturnWithArgs() {\n+    http:Response mockResponse = new;\n+    mockResponse.statusCode = 404;\n+\n+    clientEndpoint = test:mock(http:Client);\n+    // This stubs the `get` function to return the specified HTTP response\n+    // when the specified argument is passed.\n+    test:prepare(clientEndpoint).when(\"get\").withArguments(\"/headers\")\n+        .thenReturn(mockResponse);\n+    // The object and record types should be denoted by the `test:ANY` constant\n+    test:prepare(clientEndpoint).when(\"get\")\n+        .withArguments(\"/get?test=123\", test:ANY).thenReturn(mockResponse);\n+    http:Response res = performGet();\n+    test:assertEquals(res.statusCode, 404);\n+}\n+\n+@test:Config {}\n+function testReturnSequence() {\n+    http:Response mockResponse = new;\n+    mockResponse.statusCode = 404;\n+\n+    clientEndpoint = test:mock(http:Client);\n+    // This stubs the `get` function to return the specified HTTP response\n+    // for each call. i.e., The first call will return the status code `200`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "005c17a50c7f3571a0b99cae1e418ce0fc95068c"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2Njk5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // and the second call will return the status code `404`.\n          \n          \n            \n                // and the second call will return the status code `404`).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469166990", "createdAt": "2020-08-12T10:39:00Z", "author": {"login": "praneesha"}, "path": "examples/testerina-object-mocks/testerina_object_mocks_test.bal", "diffHunk": "@@ -0,0 +1,89 @@\n+// This demonstrates different ways to mock a client object.\n+import ballerina/test;\n+import ballerina/http;\n+import ballerina/email;\n+\n+// This is the test double of `http:Client` object with the\n+// implementation of required functions.\n+public type MockHttpClient client object {\n+    public remote function get(@untainted string path,\n+        public http:RequestMessage message = ()) returns\n+            http:Response|http:ClientError {\n+\n+        http:Response res = new;\n+        res.statusCode = 500;\n+        return res;\n+    }\n+};\n+\n+@test:Config {}\n+function testTestDouble() {\n+    // This creates and assigns the defined test-double.\n+    clientEndpoint = test:mock(http:Client, new MockHttpClient());\n+    http:Response res = performGet();\n+    test:assertEquals(res.statusCode, 500);\n+}\n+\n+@test:Config {}\n+function testReturn() {\n+    // This creates and assigns a default mock object which subsequently needs to stubbed.\n+    clientEndpoint = test:mock(http:Client);\n+    // This stubs the `get` function to return the specified HTTP response.\n+    test:prepare(clientEndpoint).when(\"get\").thenReturn(new http:Response());\n+    http:Response res = performGet();\n+    test:assertEquals(res.statusCode, 200);\n+}\n+\n+@test:Config {}\n+function testReturnWithArgs() {\n+    http:Response mockResponse = new;\n+    mockResponse.statusCode = 404;\n+\n+    clientEndpoint = test:mock(http:Client);\n+    // This stubs the `get` function to return the specified HTTP response\n+    // when the specified argument is passed.\n+    test:prepare(clientEndpoint).when(\"get\").withArguments(\"/headers\")\n+        .thenReturn(mockResponse);\n+    // The object and record types should be denoted by the `test:ANY` constant\n+    test:prepare(clientEndpoint).when(\"get\")\n+        .withArguments(\"/get?test=123\", test:ANY).thenReturn(mockResponse);\n+    http:Response res = performGet();\n+    test:assertEquals(res.statusCode, 404);\n+}\n+\n+@test:Config {}\n+function testReturnSequence() {\n+    http:Response mockResponse = new;\n+    mockResponse.statusCode = 404;\n+\n+    clientEndpoint = test:mock(http:Client);\n+    // This stubs the `get` function to return the specified HTTP response\n+    // for each call. i.e., The first call will return the status code `200`\n+    // and the second call will return the status code `404`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "005c17a50c7f3571a0b99cae1e418ce0fc95068c"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NzA4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // This stubs the value of `url` to return the specified string.\n          \n          \n            \n                // This stubs the value of the `url` to return the specified string.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469167083", "createdAt": "2020-08-12T10:39:14Z", "author": {"login": "praneesha"}, "path": "examples/testerina-object-mocks/testerina_object_mocks_test.bal", "diffHunk": "@@ -0,0 +1,89 @@\n+// This demonstrates different ways to mock a client object.\n+import ballerina/test;\n+import ballerina/http;\n+import ballerina/email;\n+\n+// This is the test double of `http:Client` object with the\n+// implementation of required functions.\n+public type MockHttpClient client object {\n+    public remote function get(@untainted string path,\n+        public http:RequestMessage message = ()) returns\n+            http:Response|http:ClientError {\n+\n+        http:Response res = new;\n+        res.statusCode = 500;\n+        return res;\n+    }\n+};\n+\n+@test:Config {}\n+function testTestDouble() {\n+    // This creates and assigns the defined test-double.\n+    clientEndpoint = test:mock(http:Client, new MockHttpClient());\n+    http:Response res = performGet();\n+    test:assertEquals(res.statusCode, 500);\n+}\n+\n+@test:Config {}\n+function testReturn() {\n+    // This creates and assigns a default mock object which subsequently needs to stubbed.\n+    clientEndpoint = test:mock(http:Client);\n+    // This stubs the `get` function to return the specified HTTP response.\n+    test:prepare(clientEndpoint).when(\"get\").thenReturn(new http:Response());\n+    http:Response res = performGet();\n+    test:assertEquals(res.statusCode, 200);\n+}\n+\n+@test:Config {}\n+function testReturnWithArgs() {\n+    http:Response mockResponse = new;\n+    mockResponse.statusCode = 404;\n+\n+    clientEndpoint = test:mock(http:Client);\n+    // This stubs the `get` function to return the specified HTTP response\n+    // when the specified argument is passed.\n+    test:prepare(clientEndpoint).when(\"get\").withArguments(\"/headers\")\n+        .thenReturn(mockResponse);\n+    // The object and record types should be denoted by the `test:ANY` constant\n+    test:prepare(clientEndpoint).when(\"get\")\n+        .withArguments(\"/get?test=123\", test:ANY).thenReturn(mockResponse);\n+    http:Response res = performGet();\n+    test:assertEquals(res.statusCode, 404);\n+}\n+\n+@test:Config {}\n+function testReturnSequence() {\n+    http:Response mockResponse = new;\n+    mockResponse.statusCode = 404;\n+\n+    clientEndpoint = test:mock(http:Client);\n+    // This stubs the `get` function to return the specified HTTP response\n+    // for each call. i.e., The first call will return the status code `200`\n+    // and the second call will return the status code `404`.\n+    test:prepare(clientEndpoint).when(\"get\")\n+        .thenReturnSequence(new http:Response(), mockResponse);\n+    http:Response res = performGet();\n+    test:assertEquals(res.statusCode, 404);\n+}\n+\n+@test:Config {}\n+function testSendNotification() {\n+    smtpClient = test:mock(email:SmtpClient);\n+    // This stubs the `send` method of the `mockSmtpClient` to do nothing.\n+    // This is used for functions with an optional or no return type\n+    test:prepare(smtpClient).when(\"send\").doNothing();\n+    string[] emailIds = [\"user1@test.com\", \"user2@test.com\"];\n+    error? err = sendNotification(emailIds);\n+    test:assertEquals(err, ());\n+\n+}\n+\n+@test:Config {}\n+function testMemberVariable() {\n+    string mockClientUrl = \"http://foo\";\n+    clientEndpoint = test:mock(http:Client);\n+    // This stubs the value of `url` to return the specified string.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "005c17a50c7f3571a0b99cae1e418ce0fc95068c"}, "originalPosition": 85}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "005c17a50c7f3571a0b99cae1e418ce0fc95068c", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/005c17a50c7f3571a0b99cae1e418ce0fc95068c", "committedDate": "2020-08-12T09:59:22Z", "message": "Add Function mocking and Object mocking BBE"}, "afterCommit": {"oid": "8eb28c81396a0f3d1426c614167d10038751edef", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8eb28c81396a0f3d1426c614167d10038751edef", "committedDate": "2020-08-12T11:00:43Z", "message": "Add Function mocking and Object mocking BBE"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8eb28c81396a0f3d1426c614167d10038751edef", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8eb28c81396a0f3d1426c614167d10038751edef", "committedDate": "2020-08-12T11:00:43Z", "message": "Add Function mocking and Object mocking BBE"}, "afterCommit": {"oid": "645a80287bcb1abb5896a0f77043dc888abe0755", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/645a80287bcb1abb5896a0f77043dc888abe0755", "committedDate": "2020-08-12T11:10:42Z", "message": "Add Function mocking and Object mocking BBE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2bf4cdb9b6298185b5cd8c67fdf1c800b6192dc", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a2bf4cdb9b6298185b5cd8c67fdf1c800b6192dc", "committedDate": "2020-08-12T11:12:27Z", "message": "Add Function mocking and Object mocking BBE"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "645a80287bcb1abb5896a0f77043dc888abe0755", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/645a80287bcb1abb5896a0f77043dc888abe0755", "committedDate": "2020-08-12T11:10:42Z", "message": "Add Function mocking and Object mocking BBE"}, "afterCommit": {"oid": "a2bf4cdb9b6298185b5cd8c67fdf1c800b6192dc", "author": {"user": {"login": "Ibaqu", "name": "Aquib Zulfikar"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a2bf4cdb9b6298185b5cd8c67fdf1c800b6192dc", "committedDate": "2020-08-12T11:12:27Z", "message": "Add Function mocking and Object mocking BBE"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1ODE1OTM5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#pullrequestreview-465815939", "createdAt": "2020-08-12T11:16:43Z", "commit": {"oid": "a2bf4cdb9b6298185b5cd8c67fdf1c800b6192dc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3653, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}