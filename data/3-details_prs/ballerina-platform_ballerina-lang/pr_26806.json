{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2OTA4Njgx", "number": 26806, "title": "Fix langlib functions to support readonly", "bodyText": "Purpose\nFixes #26114\nApproach\n\nModify the filter function to clone the element type instead of original readonly type\n\nSamples\nRemarks\nThe API can be used to return the expected type regarding to this spec-issue #646\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-11-06T18:23:23Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806", "merged": true, "mergeCommit": {"oid": "25eb10b662e13e6554de32b0b46c94ac7825fda0"}, "closed": true, "closedAt": "2020-12-08T05:31:33Z", "author": {"login": "HindujaB"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdaE-a8AFqTUyNTYyOTcyOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkDU1jgFqTU0Njc1Njk2Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1NjI5NzI4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#pullrequestreview-525629728", "createdAt": "2020-11-07T05:47:03Z", "commit": {"oid": "51458cd6c18d62e03839416d8cc1c522dd3a3f85"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwNTo0NzowNFrOHvEQFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwNTo0NzowNFrOHvEQFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTExNDc3Mg==", "bodyText": "Is this change needed? The inherent type of a value cannot change once the value is created, so IMO, we shouldn't have such a method (which allows changing the type) in the public API.\nIf your requirement is to create an immutable value, IMO it should be done by allowing the user to pass both the type and the values and internally calling the relevant constructors that accept the same;\n\nio.ballerina.runtime.values.ArrayValueImpl#ArrayValueImpl(io.ballerina.runtime.api.types.ArrayType, long, io.ballerina.runtime.values.ListInitialValueEntry[])\nio.ballerina.runtime.values.MapValueImpl#MapValueImpl(io.ballerina.runtime.api.types.Type, io.ballerina.runtime.api.values.BMapInitialValueEntry[])", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r519114772", "createdAt": "2020-11-07T05:47:04Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/values/BArray.java", "diffHunk": "@@ -208,4 +209,10 @@\n     BArray slice(long startIndex, long endIndex);\n \n     void setLength(long i);\n+\n+    /**\n+     * Check and and set the array type as readonly.\n+     * @param type original Array type\n+     */\n+    BArray checkAndSetReadonly(ArrayType type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51458cd6c18d62e03839416d8cc1c522dd3a3f85"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2OTk0MDUz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#pullrequestreview-526994053", "createdAt": "2020-11-10T09:10:58Z", "commit": {"oid": "aad703e099705b8560969f7f74b058649344fe25"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOToxMDo1OVrOHwSx6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOToxMDo1OVrOHwSx6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwMTM4Nw==", "bodyText": "Do we have set of methods we need to support read only?. I can see array reverse also we create array value with given array type without using element type. @MaryamZi @HindujaB", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r520401387", "createdAt": "2020-11-10T09:10:59Z", "author": {"login": "warunalakshitha"}, "path": "langlib/lang.array/src/main/java/org/ballerinalang/langlib/array/Filter.java", "diffHunk": "@@ -44,7 +44,7 @@\n                                                                       ARRAY_VERSION, \"filter\");\n \n     public static BArray filter(BArray arr, BFunctionPointer<Object, Boolean> func) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aad703e099705b8560969f7f74b058649344fe25"}, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aad703e099705b8560969f7f74b058649344fe25", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aad703e099705b8560969f7f74b058649344fe25", "committedDate": "2020-11-07T15:27:02Z", "message": "Remove unnecessary API implementation"}, "afterCommit": {"oid": "0cf6c0aa53fcadf3140cb70d5d59aeb825c4914f", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0cf6c0aa53fcadf3140cb70d5d59aeb825c4914f", "committedDate": "2020-11-10T10:49:49Z", "message": "Fix merging errors"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0cf6c0aa53fcadf3140cb70d5d59aeb825c4914f", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0cf6c0aa53fcadf3140cb70d5d59aeb825c4914f", "committedDate": "2020-11-10T10:49:49Z", "message": "Fix merging errors"}, "afterCommit": {"oid": "4e06deec785023db1716320a7cd99e92a5708d4e", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4e06deec785023db1716320a7cd99e92a5708d4e", "committedDate": "2020-11-10T17:47:29Z", "message": "Fix merging errors"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3ODY0MjA2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#pullrequestreview-527864206", "createdAt": "2020-11-11T05:03:01Z", "commit": {"oid": "4e06deec785023db1716320a7cd99e92a5708d4e"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNTowMzowMVrOHw-U3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNTowNzowMlrOHw-Y2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTExNDg0NQ==", "bodyText": "Since we are ding the same thing in all the methods, maybe we can use a DataProvider to simplify the code", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r521114845", "createdAt": "2020-11-11T05:03:01Z", "author": {"login": "riyafa"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibArrayTest.java", "diffHunk": "@@ -551,4 +551,9 @@ public void testSort9() {\n     public void testSort10() {\n         BRunUtil.invoke(compileResult, \"testSort10\");\n     }\n+\n+    @Test\n+    public void testReadOnlyArrayFilter() {\n+        BRunUtil.invoke(compileResult, \"testReadOnlyArrayFilter\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e06deec785023db1716320a7cd99e92a5708d4e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTExNTM5MA==", "bodyText": "can we use test:assertEquals?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r521115390", "createdAt": "2020-11-11T05:05:11Z", "author": {"login": "riyafa"}, "path": "langlib/langlib-test/src/test/resources/test-src/arraylib_test.bal", "diffHunk": "@@ -1114,6 +1114,16 @@ function testAsyncFpArgsWithArrays() returns [int, int[]] {\n     return [reduce, filter];\n }\n \n+function testReadOnlyArrayFilter() {\n+    int[] & readonly numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n+    int[] evenNumbers = numbers.filter(val => val % 2 == 0);\n+    int count = 0;\n+    foreach int number in evenNumbers {\n+        assertValueEquality(count * 2, number);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e06deec785023db1716320a7cd99e92a5708d4e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTExNTUyNA==", "bodyText": "can we use test:assertTrue?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r521115524", "createdAt": "2020-11-11T05:05:41Z", "author": {"login": "riyafa"}, "path": "langlib/langlib-test/src/test/resources/test-src/maplib_test.bal", "diffHunk": "@@ -298,3 +302,16 @@ function testAsyncFpArgsWithMaps() returns [int, map<int>] {\n function getRandomNumber(int i) returns int {\n     return i + 2;\n }\n+\n+function testReadOnlyMapFilter() {\n+    map<int> & readonly marks = {\n+        science: 75,\n+        maths: 45,\n+        english: 85\n+    };\n+    map<int> passed = marks.filter(val => val > 50);\n+    assert(passed.length(), 2);\n+    passed.forEach(function(int value) {\n+        assertTrue(value > 50);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e06deec785023db1716320a7cd99e92a5708d4e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTExNTg2NQ==", "bodyText": "I think we can use function in ballerina/test package instead of defining our own functions in all places", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r521115865", "createdAt": "2020-11-11T05:07:02Z", "author": {"login": "riyafa"}, "path": "langlib/langlib-test/src/test/resources/test-src/tablelib_test.bal", "diffHunk": "@@ -683,3 +683,37 @@ function testPutValidDataToKeylessTbl() returns boolean {\n     testPassed = testPassed && tableToList[2] == intern1;\n     return testPassed;\n }\n+\n+function testReadOnlyTableFilter() {\n+    PersonalTable & readonly personTable = table [\n+      { name: \"Harry\", age: 14 },\n+      { name: \"Hermione\", age: 28 },\n+      { name: \"Ron\", age: 11 },\n+      { name: \"Draco\", age: 23 }\n+    ];\n+    table<Person> children = personTable.filter(function (Person person) returns boolean {\n+                                                      return person.age < 18;\n+                                                  });\n+    assertEquals(children.length(), 2);\n+    children.forEach(function(Person person) {\n+        assertTrue(person.age < 18);\n+    });\n+}\n+\n+const ASSERTION_ERROR_REASON = \"AssertionError\";\n+\n+function assertTrue(boolean actual) {\n+    assertEquals(true, actual);\n+}\n+\n+function assertEquals(anydata expected, anydata actual) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e06deec785023db1716320a7cd99e92a5708d4e"}, "originalPosition": 27}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4e06deec785023db1716320a7cd99e92a5708d4e", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4e06deec785023db1716320a7cd99e92a5708d4e", "committedDate": "2020-11-10T17:47:29Z", "message": "Fix merging errors"}, "afterCommit": {"oid": "788d55af172de845483b7a48bb3fa2f72d827c2b", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/788d55af172de845483b7a48bb3fa2f72d827c2b", "committedDate": "2020-11-11T12:51:25Z", "message": "Add data provider to tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "788d55af172de845483b7a48bb3fa2f72d827c2b", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/788d55af172de845483b7a48bb3fa2f72d827c2b", "committedDate": "2020-11-11T12:51:25Z", "message": "Add data provider to tests"}, "afterCommit": {"oid": "87d15ba60deec388972a954bb7d7278747ec132c", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/87d15ba60deec388972a954bb7d7278747ec132c", "committedDate": "2020-11-12T03:53:15Z", "message": "Add data provider to tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5ODEwMDU3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#pullrequestreview-529810057", "createdAt": "2020-11-13T06:49:56Z", "commit": {"oid": "87d15ba60deec388972a954bb7d7278747ec132c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNjo0OTo1NlrOHyerTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNjo0OTo1NlrOHyerTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY5MzQ1Mw==", "bodyText": "use Object[]", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r522693453", "createdAt": "2020-11-13T06:49:56Z", "author": {"login": "HindujaB"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/LangLibArrayTest.java", "diffHunk": "@@ -517,38 +493,23 @@ public void testSort3() {\n         }\n     }\n \n-    @Test\n-    public void testSort4() {\n-        BRunUtil.invoke(compileResult, \"testSort4\");\n-    }\n-\n-    @Test\n-    public void testSort5() {\n-        BRunUtil.invoke(compileResult, \"testSort5\");\n-    }\n-\n-    @Test\n-    public void testSort6() {\n-        BRunUtil.invoke(compileResult, \"testSort6\");\n-    }\n-\n-    @Test\n-    public void testSort7() {\n-        BRunUtil.invoke(compileResult, \"testSort7\");\n-    }\n-\n-    @Test\n-    public void testSort8() {\n-        BRunUtil.invoke(compileResult, \"testSort8\");\n-    }\n-\n-    @Test\n-    public void testSort9() {\n-        BRunUtil.invoke(compileResult, \"testSort9\");\n-    }\n-\n-    @Test\n-    public void testSort10() {\n-        BRunUtil.invoke(compileResult, \"testSort10\");\n+    @DataProvider(name = \"FunctionList\")\n+    public Object[][] testFunctions() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87d15ba60deec388972a954bb7d7278747ec132c"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5ODExNDY2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#pullrequestreview-529811466", "createdAt": "2020-11-13T06:53:55Z", "commit": {"oid": "87d15ba60deec388972a954bb7d7278747ec132c"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "87d15ba60deec388972a954bb7d7278747ec132c", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/87d15ba60deec388972a954bb7d7278747ec132c", "committedDate": "2020-11-12T03:53:15Z", "message": "Add data provider to tests"}, "afterCommit": {"oid": "4a3604bf8931e28d907fb97d3bf3b2ba041cae59", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4a3604bf8931e28d907fb97d3bf3b2ba041cae59", "committedDate": "2020-11-13T12:21:34Z", "message": "Modify data provider tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5NzU2NTY2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#pullrequestreview-539756566", "createdAt": "2020-11-27T07:31:57Z", "commit": {"oid": "4a3604bf8931e28d907fb97d3bf3b2ba041cae59"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzozMTo1N1rOH6zkGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzozNzoxNVrOH6zriQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyNDI4Mw==", "bodyText": "Can't we directly create newMapType for the map and record cases instead of introducing a separate variable for the constraint?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r531424283", "createdAt": "2020-11-27T07:31:57Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.map/src/main/java/org/ballerinalang/langlib/map/Filter.java", "diffHunk": "@@ -52,17 +53,19 @@\n     public static BMap filter(BMap<?, ?> m, BFunctionPointer<Object, Boolean> func) {\n         Type mapType = m.getType();\n         Type newMapType;\n+        Type newConstraint;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a3604bf8931e28d907fb97d3bf3b2ba041cae59"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyNDY3OA==", "bodyText": "The variable name isn't quite correct here, right? It's not the new type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r531424678", "createdAt": "2020-11-27T07:32:56Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.table/src/main/java/org/ballerinalang/langlib/table/Filter.java", "diffHunk": "@@ -51,8 +51,10 @@\n                                                                       TABLE_VERSION, \"filter\");\n \n     public static BTable filter(BTable tbl, BFunctionPointer<Object, Boolean> func) {\n-        Type newTableType = tbl.getType();\n-        BTable newTable = ValueCreator.createTableValue((TableType) newTableType);\n+        TableType newTableType = (TableType) tbl.getType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a3604bf8931e28d907fb97d3bf3b2ba041cae59"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyNTc4OQ==", "bodyText": "Shall we also assert that the new value is not immutable? Please add for the map, table, and record tests too.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }\n          \n          \n            \n                }\n          \n          \n            \n                assertFalse(evenNumbers.isReadOnly());", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r531425789", "createdAt": "2020-11-27T07:36:09Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/arraylib_test.bal", "diffHunk": "@@ -1114,6 +1114,16 @@ function testAsyncFpArgsWithArrays() returns [int, int[]] {\n     return [reduce, filter];\n }\n \n+function testReadOnlyArrayFilter() {\n+    int[] & readonly numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n+    int[] evenNumbers = numbers.filter(val => val % 2 == 0);\n+    int count = 0;\n+    foreach int number in evenNumbers {\n+        assertValueEquality(count * 2, number);\n+        count += 1;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a3604bf8931e28d907fb97d3bf3b2ba041cae59"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyNjE4NQ==", "bodyText": "Shall we also assert that each person value is immutable?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#discussion_r531426185", "createdAt": "2020-11-27T07:37:15Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/tablelib_test.bal", "diffHunk": "@@ -683,3 +683,37 @@ function testPutValidDataToKeylessTbl() returns boolean {\n     testPassed = testPassed && tableToList[2] == intern1;\n     return testPassed;\n }\n+\n+function testReadOnlyTableFilter() {\n+    PersonalTable & readonly personTable = table [\n+      { name: \"Harry\", age: 14 },\n+      { name: \"Hermione\", age: 28 },\n+      { name: \"Ron\", age: 11 },\n+      { name: \"Draco\", age: 23 }\n+    ];\n+    table<Person> children = personTable.filter(function (Person person) returns boolean {\n+                                                      return person.age < 18;\n+                                                  });\n+    assertEquals(children.length(), 2);\n+    children.forEach(function(Person person) {\n+        assertTrue(person.age < 18);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a3604bf8931e28d907fb97d3bf3b2ba041cae59"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "facb5271f9118e40dd919686bc31e9162f2492ba", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/facb5271f9118e40dd919686bc31e9162f2492ba", "committedDate": "2020-11-29T04:34:49Z", "message": "Fix langlib filter function to support readonly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a67a160247d3be04160eb594087a419cb24e8cd", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9a67a160247d3be04160eb594087a419cb24e8cd", "committedDate": "2020-11-29T04:34:49Z", "message": "Remove unnecessary API implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "653af0bb5bbe68a6c57492929a49286394755dbd", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/653af0bb5bbe68a6c57492929a49286394755dbd", "committedDate": "2020-11-29T04:34:49Z", "message": "Fix merging errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7a66ca0f1e1d5c33d3e22401fcf02ebbcc27180", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a7a66ca0f1e1d5c33d3e22401fcf02ebbcc27180", "committedDate": "2020-11-29T04:34:49Z", "message": "Add data provider to tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7da0436952bff6a9500504ab87a8869262414095", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7da0436952bff6a9500504ab87a8869262414095", "committedDate": "2020-11-29T04:34:49Z", "message": "Modify data provider tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23832ed19f596162306595baf0d169d2c7c1fd63", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/23832ed19f596162306595baf0d169d2c7c1fd63", "committedDate": "2020-11-29T07:32:41Z", "message": "Improve filter tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4a3604bf8931e28d907fb97d3bf3b2ba041cae59", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4a3604bf8931e28d907fb97d3bf3b2ba041cae59", "committedDate": "2020-11-13T12:21:34Z", "message": "Modify data provider tests"}, "afterCommit": {"oid": "23832ed19f596162306595baf0d169d2c7c1fd63", "author": {"user": {"login": "HindujaB", "name": "Hinduja Balasubramaniyam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/23832ed19f596162306595baf0d169d2c7c1fd63", "committedDate": "2020-11-29T07:32:41Z", "message": "Improve filter tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NzU2OTYz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26806#pullrequestreview-546756963", "createdAt": "2020-12-08T05:30:59Z", "commit": {"oid": "23832ed19f596162306595baf0d169d2c7c1fd63"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4996, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}