{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0Njg5Mzk2", "number": 27391, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwODowODozOVrOFHsxjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMToxMzozN1rOFIHrzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjE3OTMzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwODowODozOVrOIJPi_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjo0ODoyMVrOIJ6CpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU2MjgxNA==", "bodyText": "Why don't we move last boolean argument logic inside the function handleObjectConstrExprForReadOnly", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27391#discussion_r546562814", "createdAt": "2020-12-21T08:08:39Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2978,11 +2979,16 @@ public void visit(BLangTypeInit cIExpr) {\n                 if (isObjectConstructorExpr(cIExpr, actualObjectType)) {\n                     BLangClassDefinition classDefForConstructor = getClassDefinitionForObjectConstructorExpr(cIExpr,\n                                                                                                              env);\n+                    List<BLangType> typeRefs = classDefForConstructor.typeRefs;\n \n                     SymbolEnv pkgEnv = symTable.pkgEnvMap.get(env.enclPkg.symbol);\n \n                     if (Symbols.isFlagOn(expType.flags, Flags.READONLY)) {\n-                        handleObjectConstrExprForReadOnlyCET(cIExpr, actualObjectType, classDefForConstructor, pkgEnv);\n+                        handleObjectConstrExprForReadOnly(cIExpr, actualObjectType, classDefForConstructor, pkgEnv,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a386b01edf1ad47154744a4f46b45b5a77003d3f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYzMTk2Mg==", "bodyText": "But then we'll have to repeat at least one check, right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27391#discussion_r546631962", "createdAt": "2020-12-21T10:38:01Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2978,11 +2979,16 @@ public void visit(BLangTypeInit cIExpr) {\n                 if (isObjectConstructorExpr(cIExpr, actualObjectType)) {\n                     BLangClassDefinition classDefForConstructor = getClassDefinitionForObjectConstructorExpr(cIExpr,\n                                                                                                              env);\n+                    List<BLangType> typeRefs = classDefForConstructor.typeRefs;\n \n                     SymbolEnv pkgEnv = symTable.pkgEnvMap.get(env.enclPkg.symbol);\n \n                     if (Symbols.isFlagOn(expType.flags, Flags.READONLY)) {\n-                        handleObjectConstrExprForReadOnlyCET(cIExpr, actualObjectType, classDefForConstructor, pkgEnv);\n+                        handleObjectConstrExprForReadOnly(cIExpr, actualObjectType, classDefForConstructor, pkgEnv,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU2MjgxNA=="}, "originalCommit": {"oid": "a386b01edf1ad47154744a4f46b45b5a77003d3f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI1OTA0NQ==", "bodyText": "yes. Lets not change.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27391#discussion_r547259045", "createdAt": "2020-12-22T12:48:21Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2978,11 +2979,16 @@ public void visit(BLangTypeInit cIExpr) {\n                 if (isObjectConstructorExpr(cIExpr, actualObjectType)) {\n                     BLangClassDefinition classDefForConstructor = getClassDefinitionForObjectConstructorExpr(cIExpr,\n                                                                                                              env);\n+                    List<BLangType> typeRefs = classDefForConstructor.typeRefs;\n \n                     SymbolEnv pkgEnv = symTable.pkgEnvMap.get(env.enclPkg.symbol);\n \n                     if (Symbols.isFlagOn(expType.flags, Flags.READONLY)) {\n-                        handleObjectConstrExprForReadOnlyCET(cIExpr, actualObjectType, classDefForConstructor, pkgEnv);\n+                        handleObjectConstrExprForReadOnly(cIExpr, actualObjectType, classDefForConstructor, pkgEnv,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU2MjgxNA=="}, "originalCommit": {"oid": "a386b01edf1ad47154744a4f46b45b5a77003d3f"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDU4ODMxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMToxMzozN1rOIJ3ioA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDoyNjowOVrOIJ88zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIxODA4MA==", "bodyText": "In object constructor type-reference is implemented as a type inclusion. This may be confusing in some scenarios if the error refers to it as \"type inclusion\".", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27391#discussion_r547218080", "createdAt": "2020-12-22T11:13:37Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -1628,3 +1628,15 @@ error.invalid.isolated.qualifier.on.module.no.init.var.decl=\\\n \n error.binding.pattern.not.yet.supported.in.module.var.decl=\\\n   ''{0}'' binding pattern not yet supported in module variable declaration\n+\n+error.invalid.read.only.class.inclusion.in.object.type.descriptor=\\\n+  object type inclusion cannot be used with a ''readonly class'' in an object type descriptor\n+\n+error.invalid.inclusion.with.mismatched.qualifiers=\\\n+  invalid object type inclusion: missing ''{0}'' qualifier(s) in the referencing object\n+\n+error.invalid.read.only.class.inclusion.in.non.read.only.class=\\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a386b01edf1ad47154744a4f46b45b5a77003d3f"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIzNTEwOQ==", "bodyText": "This error will only be logged for user-defined classes, not for object constructor expressions.\nIn an object constructor expression, if the type reference is a readonly class, the rules that apply are somewhat the same as those within a readonly class.\ne.g.,\nThe fields become final and the types becomes the types with their read-only bit set.\nreadonly class Foo {\n    int i;\n\n    function init(int i) {\n        self.i = i;\n    }\n}\n\npublic function main() {\n    object { } x =  object Foo { \n        int i = 1;\n        map<string> m = mp; // `mp` should be a subtype of `map<string> & readonly`\n    }; \n}\nIf the type reference is a read-only class, the object constructor's fields have to be readonly compatible.\nreadonly class Foo {\n    int i;\n\n    function init(int i) {\n        self.i = i;\n    }\n}\n\npublic function main() {\n    object { } x =  object Foo { \n        int i = 1;\n        stream<int> str; // can never be a subtype of `readonly`\n\n        function init() {\n            int[] arr = [1, 2, 3, 4];\n            self.str = arr.toStream();\n        }\n    }; \n}\nThe error logged here will be \"invalid field in an object constructor expression with a 'readonly' reference: 'stream' can never be 'readonly'\"\nSpec discussion - ballerina-platform/ballerina-spec#649", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27391#discussion_r547235109", "createdAt": "2020-12-22T11:53:12Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -1628,3 +1628,15 @@ error.invalid.isolated.qualifier.on.module.no.init.var.decl=\\\n \n error.binding.pattern.not.yet.supported.in.module.var.decl=\\\n   ''{0}'' binding pattern not yet supported in module variable declaration\n+\n+error.invalid.read.only.class.inclusion.in.object.type.descriptor=\\\n+  object type inclusion cannot be used with a ''readonly class'' in an object type descriptor\n+\n+error.invalid.inclusion.with.mismatched.qualifiers=\\\n+  invalid object type inclusion: missing ''{0}'' qualifier(s) in the referencing object\n+\n+error.invalid.read.only.class.inclusion.in.non.read.only.class=\\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIxODA4MA=="}, "originalCommit": {"oid": "a386b01edf1ad47154744a4f46b45b5a77003d3f"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI2MTI3OA==", "bodyText": "Sorry for not being clear. Check this example.\nisolated class Foo {\n    int i;\n\n    function init(int i) {\n        self.i = i;\n    }\n}\n\npublic function main() {\n    object { } x =  object Foo { \n        int i = 1;\n    }; \n}\nERROR [t14.bal:(10:28,10:31)] invalid object type inclusion: missing 'isolated' qualifier(s) in the referencing object", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27391#discussion_r547261278", "createdAt": "2020-12-22T12:53:33Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -1628,3 +1628,15 @@ error.invalid.isolated.qualifier.on.module.no.init.var.decl=\\\n \n error.binding.pattern.not.yet.supported.in.module.var.decl=\\\n   ''{0}'' binding pattern not yet supported in module variable declaration\n+\n+error.invalid.read.only.class.inclusion.in.object.type.descriptor=\\\n+  object type inclusion cannot be used with a ''readonly class'' in an object type descriptor\n+\n+error.invalid.inclusion.with.mismatched.qualifiers=\\\n+  invalid object type inclusion: missing ''{0}'' qualifier(s) in the referencing object\n+\n+error.invalid.read.only.class.inclusion.in.non.read.only.class=\\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIxODA4MA=="}, "originalCommit": {"oid": "a386b01edf1ad47154744a4f46b45b5a77003d3f"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMwNjcwMQ==", "bodyText": "Introduced a separate error for object constructor expressions in d057072.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27391#discussion_r547306701", "createdAt": "2020-12-22T14:26:09Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -1628,3 +1628,15 @@ error.invalid.isolated.qualifier.on.module.no.init.var.decl=\\\n \n error.binding.pattern.not.yet.supported.in.module.var.decl=\\\n   ''{0}'' binding pattern not yet supported in module variable declaration\n+\n+error.invalid.read.only.class.inclusion.in.object.type.descriptor=\\\n+  object type inclusion cannot be used with a ''readonly class'' in an object type descriptor\n+\n+error.invalid.inclusion.with.mismatched.qualifiers=\\\n+  invalid object type inclusion: missing ''{0}'' qualifier(s) in the referencing object\n+\n+error.invalid.read.only.class.inclusion.in.non.read.only.class=\\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIxODA4MA=="}, "originalCommit": {"oid": "a386b01edf1ad47154744a4f46b45b5a77003d3f"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2882, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}