{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyNjc0ODEx", "number": 27584, "title": "Refactor documentation lexer and parser", "bodyText": "Purpose\n\n Move commonly used lexer methods to AbstractLexer. e.g. isIdentifierFollowingChar()\n Remove global variables used for char-sequence-search in DocumentationLexer.\n Add documentation support for the new identifier definition.\n Give a parser warning when \"# Deprecated\" is followed by more text.\n( Will not address here as it is still in discussion ballerina-platform/ballerina-spec#461. But improved formatting for such scenario)\n Fix ability of using single quote alone as a quoted identifier.\n\nFixes #25279\nApproach\nN/A\nSamples\nSample with documenting quoted identifier\n# Adds parameter `'foo_\u01ae\u03ad\u015e\u0162` and parameter `'\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_param`\n# + 'foo_\u01ae\u03ad\u015e\u0162 - one thing to be added\n# + '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_param - another thing to be added\n# + return - the sum of them\nfunction add (int 'foo_\u01ae\u03ad\u015e\u0162, int '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_param) returns int {\n     return 'foo_\u01ae\u03ad\u015e\u0162 + '\u00fc\u0148\u0129\u0107\u0151\u0111\u0119_param;\n}\nRemarks\n\nIn documentation lexer, we did a char-sequence-search before tokenizing the content within the backticks.\nNow with the new identifier definition searching it at lexer level seemed to be more expensive.\nTherefore, we perform a token-sequence-search in the parser level instead.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-12-18T17:20:38Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27584", "merged": true, "mergeCommit": {"oid": "ab73f8ba47d22de88499524dd12cff68f9630510"}, "closed": true, "closedAt": "2021-01-19T10:36:43Z", "author": {"login": "lochana-chathura"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdlF46FgH2gAyNTQyNjc0ODExOjJhN2JmN2JkYjk5MGU4ZDVmOGYyM2FiOTdjMjc2MWM2Mjk2YzAwNzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdxo3iFgFqTU3MTExMTEyMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2a7bf7bdb990e8d5f8f23ab97c2761c6296c0073", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2a7bf7bdb990e8d5f8f23ab97c2761c6296c0073", "committedDate": "2020-12-11T11:04:07Z", "message": "Move common lexer methods to AbstractLexer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb2bcd476457b6561a396aabb5c1f8e515845b9b", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eb2bcd476457b6561a396aabb5c1f8e515845b9b", "committedDate": "2020-12-14T16:31:33Z", "message": "Refactor DocumentationLexer"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ebcee32faf890fa87ddfb0490181d91152440cd2", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ebcee32faf890fa87ddfb0490181d91152440cd2", "committedDate": "2020-12-18T17:14:56Z", "message": "Add documentation support for the new identifier definition"}, "afterCommit": {"oid": "c8228abf555676ef0b38d1682a8e4143d21f0437", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c8228abf555676ef0b38d1682a8e4143d21f0437", "committedDate": "2020-12-18T18:15:05Z", "message": "Add documentation support for the new identifier definition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba436b72d22de184f79c9a95205ba498eceeecdd", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ba436b72d22de184f79c9a95205ba498eceeecdd", "committedDate": "2020-12-18T19:27:58Z", "message": "Add documentation support for the new identifier definition"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c8228abf555676ef0b38d1682a8e4143d21f0437", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c8228abf555676ef0b38d1682a8e4143d21f0437", "committedDate": "2020-12-18T18:15:05Z", "message": "Add documentation support for the new identifier definition"}, "afterCommit": {"oid": "ba436b72d22de184f79c9a95205ba498eceeecdd", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ba436b72d22de184f79c9a95205ba498eceeecdd", "committedDate": "2020-12-18T19:27:58Z", "message": "Add documentation support for the new identifier definition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5715fbb08384e71fa2542aa2abcc47cece4b23e5", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5715fbb08384e71fa2542aa2abcc47cece4b23e5", "committedDate": "2020-12-20T20:16:48Z", "message": "Add warning for incorrect deprecated doc line\n\nGive a parser warning when details of \"# Deprecated\" are added in the same line"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2af4173bc0f7514b587eeb17b6e4184bd0c98573", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2af4173bc0f7514b587eeb17b6e4184bd0c98573", "committedDate": "2020-12-20T21:46:52Z", "message": "Cleanup code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "106161a524be239910c8f185837b391d934ab5f1", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/106161a524be239910c8f185837b391d934ab5f1", "committedDate": "2020-12-20T21:06:27Z", "message": "Cleanup code"}, "afterCommit": {"oid": "2af4173bc0f7514b587eeb17b6e4184bd0c98573", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2af4173bc0f7514b587eeb17b6e4184bd0c98573", "committedDate": "2020-12-20T21:46:52Z", "message": "Cleanup code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1caf3fae296a8b92f64fae2f54c4485dcbe38460", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1caf3fae296a8b92f64fae2f54c4485dcbe38460", "committedDate": "2020-12-21T11:43:50Z", "message": "Revert \"Add warning for incorrect deprecated doc line\"\n\nThis reverts commit 5715fbb0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87edeaa109cf96dfc004da51b2d3b2e9839725f3", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/87edeaa109cf96dfc004da51b2d3b2e9839725f3", "committedDate": "2020-12-21T12:26:28Z", "message": "Fix trialing trivia of \"Deprecated\" to improve formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07f0c01f5c865704e7656d4403565261ec092167", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/07f0c01f5c865704e7656d4403565261ec092167", "committedDate": "2021-01-13T09:15:22Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into refactor-doc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwOTU1MzAx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27584#pullrequestreview-570955301", "createdAt": "2021-01-19T07:11:22Z", "commit": {"oid": "07f0c01f5c865704e7656d4403565261ec092167"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwNzoxMToyMlrOIWA82Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwNzoxMToyMlrOIWA82Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTk1NTE2MQ==", "bodyText": "Don't we give a warning for invalid backtick content with NO_KEY. Also combineAndCreateBacktickContentToken can be renamed to combineAndCreateInvalidBacktickContentToken", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27584#discussion_r559955161", "createdAt": "2021-01-19T07:11:22Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/DocumentationParser.java", "diffHunk": "@@ -266,10 +378,81 @@ private STNode parseBacktickToken() {\n     }\n \n     /**\n-     * Parse back-tick content token.\n+     * Parse back-tick content.\n      *\n+     * @param referenceType Node that precedes the backtick block\n      * @return Parsed node\n      */\n+    private STNode parseBacktickContent(STNode referenceType) {\n+        ReferenceGenre referenceGenre = getReferenceGenre(referenceType);\n+        if (isValidBacktickContentSequence(referenceGenre)) {\n+            return parseBacktickContent();\n+        }\n+\n+        STNode contentToken = combineAndCreateBacktickContentToken();\n+        if (referenceGenre != ReferenceGenre.NO_KEY) {\n+            // Log warning for backtick block with a reference type, but content is invalid.\n+            contentToken = SyntaxErrors.addDiagnostic(contentToken,\n+                    DiagnosticWarningCode.WARNING_INVALID_DOCUMENTATION_IDENTIFIER, ((STToken) contentToken).text());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07f0c01f5c865704e7656d4403565261ec092167"}, "originalPosition": 156}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwOTU3MDQy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27584#pullrequestreview-570957042", "createdAt": "2021-01-19T07:14:58Z", "commit": {"oid": "07f0c01f5c865704e7656d4403565261ec092167"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwNzoxNDo1OFrOIWBB6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwNzoxNDo1OFrOIWBB6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTk1NjQ1Nw==", "bodyText": "We can remove these new lines.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27584#discussion_r559956457", "createdAt": "2021-01-19T07:14:58Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/AbstractLexer.java", "diffHunk": "@@ -134,4 +134,117 @@ protected STNode getLeadingTrivia() {\n         this.leadingTriviaList = new ArrayList<>(INITIAL_TRIVIA_CAPACITY);\n         return trivia;\n     }\n+\n+    /**\n+     * Check whether a given char is an identifier following char.\n+     * <p>\n+     * <code>IdentifierFollowingChar := IdentifierInitialChar | Digit</code>\n+     *\n+     * @param c character to check\n+     * @return <code>true</code>, if the character is an identifier following char. <code>false</code> otherwise.\n+     */\n+    protected static boolean isIdentifierFollowingChar(int c) {\n+        return isIdentifierInitialChar(c) || isDigit(c);\n+    }\n+\n+    /**\n+     * Check whether a given char is a digit.\n+     * <p>\n+     * <code>Digit := 0..9</code>\n+     *\n+     * @param c character to check\n+     * @return <code>true</code>, if the character represents a digit. <code>false</code> otherwise.\n+     */\n+    protected static boolean isDigit(int c) {\n+        return ('0' <= c && c <= '9');\n+    }\n+\n+    /**\n+     * Check whether a given char is a hexa digit.\n+     * <p>\n+     * <code>HexDigit := Digit | a .. f | A .. F</code>\n+     *\n+     * @param c character to check\n+     * @return <code>true</code>, if the character represents a hex digit. <code>false</code> otherwise.\n+     */\n+    protected static boolean isHexDigit(int c) {\n+        if ('a' <= c && c <= 'f') {\n+            return true;\n+        }\n+        if ('A' <= c && c <= 'F') {\n+            return true;\n+        }\n+        return isDigit(c);\n+    }\n+\n+    /**\n+     * Check whether a given char is an identifier start char.\n+     * <p>\n+     * <code>IdentifierInitialChar := A .. Z | a .. z | _ | UnicodeIdentifierChar</code>\n+     *\n+     * @param c character to check\n+     * @return <code>true</code>, if the character is an identifier start char. <code>false</code> otherwise.\n+     */\n+    protected static boolean isIdentifierInitialChar(int c) {\n+        if ('A' <= c && c <= 'Z') {\n+            return true;\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07f0c01f5c865704e7656d4403565261ec092167"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwOTU5MjIy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27584#pullrequestreview-570959222", "createdAt": "2021-01-19T07:19:16Z", "commit": {"oid": "07f0c01f5c865704e7656d4403565261ec092167"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwNzoxOToxNlrOIWBJKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwNzoxOToxNlrOIWBJKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTk1ODMxMw==", "bodyText": "Can remove the new line here as well", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27584#discussion_r559958313", "createdAt": "2021-01-19T07:19:16Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/DocumentationLexer.java", "diffHunk": "@@ -117,56 +107,97 @@ private String getLexeme() {\n     }\n \n     /**\n-     * <p>\n-     * Check whether a given char is an identifier start char.\n-     * </p>\n-     * <code>IdentifierInitialChar := A .. Z | a .. z | _ | UnicodeIdentifierChar</code>\n-     *\n-     * @param c character to check\n-     * @return <code>true</code>, if the character is an identifier start char. <code>false</code> otherwise.\n+     * Check whether a given char is a possible identifier start.\n      */\n-    private boolean isIdentifierInitialChar(int c) {\n-        // TODO: pre-mark all possible characters, using a mask. And use that mask here to check\n-        if ('A' <= c && c <= 'Z') {\n-            return true;\n-        }\n-\n-        if ('a' <= c && c <= 'z') {\n-            return true;\n-        }\n-\n-        if (c == '_') {\n-            return true;\n+    private boolean isPossibleIdentifierStart(int startChar) {\n+        switch (startChar) {\n+            case LexerTerminals.SINGLE_QUOTE:\n+            case LexerTerminals.BACKSLASH:\n+                return true;\n+            default:\n+                return isIdentifierInitialChar(startChar);\n         }\n-\n-        // TODO: if (UnicodeIdentifierChar) return false;\n-        return false;\n     }\n \n     /**\n+     * Process identifier end.\n      * <p>\n-     * Check whether a given char is an identifier following char.\n-     * </p>\n-     * <code>IdentifierFollowingChar := IdentifierInitialChar | Digit</code>\n+     * <code>\n+     * IdentifierEnd := IdentifierChar*\n+     * <br/>\n+     * IdentifierChar := IdentifierFollowingChar | IdentifierEscape\n+     * <br/>\n+     * IdentifierEscape := IdentifierSingleEscape | NumericEscape\n+     * </code>\n      *\n-     * @param c character to check\n-     * @return <code>true</code>, if the character is an identifier following char. <code>false</code> otherwise.\n+     * @param initialEscape Denotes whether <code>\\</code> is at the beginning of the identifier\n      */\n-    private boolean isIdentifierFollowingChar(int c) {\n-        return isIdentifierInitialChar(c) || isDigit(c);\n+    private void processIdentifierEnd(boolean initialEscape) {\n+        while (!reader.isEOF()) {\n+            int k = 1;\n+            int nextChar = reader.peek();\n+            if (isIdentifierFollowingChar(nextChar)) {\n+                reader.advance();\n+                continue;\n+            }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07f0c01f5c865704e7656d4403565261ec092167"}, "originalPosition": 105}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwOTY4MTg3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27584#pullrequestreview-570968187", "createdAt": "2021-01-19T07:36:20Z", "commit": {"oid": "07f0c01f5c865704e7656d4403565261ec092167"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwNzozNjoyMVrOIWBlNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwNzozNjoyMVrOIWBlNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTk2NTQ5NA==", "bodyText": "If we can return false from the calling methods (ie hasQualifiedIdentifier and hasBacktickExpr) whenever peek(lookahead.offset).kind == SyntaxKind.BACKTIC_CONTENT then we can simplify this by removing the Lookahead class", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27584#discussion_r559965494", "createdAt": "2021-01-19T07:36:21Z", "author": {"login": "rdulmina"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerina/compiler/internal/parser/DocumentationParser.java", "diffHunk": "@@ -157,13 +158,124 @@ private STNode parseDocumentationReference() {\n         }\n \n         STNode startBacktick = parseBacktickToken();\n-        STNode backtickContent = parseBacktickContent();\n+        STNode backtickContent = parseBacktickContent(referenceType);\n         STNode endBacktick = parseBacktickToken();\n-\n         return STNodeFactory.createDocumentationReferenceNode(referenceType, startBacktick, backtickContent,\n                 endBacktick);\n     }\n \n+    /**\n+     * Represents the current position with respect to the head in a token-sequence-search.\n+     */\n+    private static class Lookahead {\n+        private int offset = 1;\n+    }\n+\n+    /**\n+     * Genre of the reference that precedes the backtick block.\n+     */\n+    private enum ReferenceGenre {\n+        NO_KEY, SPECIAL_KEY, FUNCTION_KEY\n+    }\n+\n+    /**\n+     * Look ahead and see if upcoming token sequence is valid.\n+     *\n+     * @param refGenre Genre of the backtick block reference\n+     * @return <code>true</code> if content is valid<code>false</code> otherwise.\n+     */\n+    private boolean isValidBacktickContentSequence(ReferenceGenre refGenre) {\n+        boolean hasMatch;\n+        Lookahead lookahead = new Lookahead();\n+        switch (refGenre) {\n+            case SPECIAL_KEY:\n+                // Look for x, m:x match\n+                hasMatch = hasQualifiedIdentifier(lookahead);\n+                break;\n+            case FUNCTION_KEY:\n+                // Look for x, m:x, x(), m:x(), T.y(), m:T.y() match\n+                hasMatch = hasBacktickExpr(lookahead, true);\n+                break;\n+            case NO_KEY:\n+                // Look for x(), m:x(), T.y(), m:T.y() match\n+                hasMatch = hasBacktickExpr(lookahead, false);\n+                break;\n+            default:\n+                throw new IllegalStateException(\"Unsupported backtick reference genre\");\n+        }\n+\n+        return hasMatch && peek(lookahead.offset).kind == SyntaxKind.BACKTICK_TOKEN;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07f0c01f5c865704e7656d4403565261ec092167"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "445c81bf1de4bb26f1de217e2f881f28f1988699", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/445c81bf1de4bb26f1de217e2f881f28f1988699", "committedDate": "2021-01-19T09:19:18Z", "message": "Cleanup code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcxMTExMTIw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27584#pullrequestreview-571111120", "createdAt": "2021-01-19T10:36:23Z", "commit": {"oid": "445c81bf1de4bb26f1de217e2f881f28f1988699"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4647, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}