{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyMjY2NzM2", "number": 26976, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNDoxMjo0NlrOE6YLJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNTowNzoxMFrOE8EgRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NjQ4OTM0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNDoxMjo0NlrOH1auGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNDoxMjo0NlrOH1auGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc3NDM2Mg==", "bodyText": "shall we rename the API to references ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r525774362", "createdAt": "2020-11-18T04:12:46Z", "author": {"login": "nadeeshaan"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java", "diffHunk": "@@ -58,6 +59,16 @@\n      */\n     List<Symbol> moduleLevelSymbols();\n \n+    /**\n+     * If there's an identifier associated with a symbol at the specified cursor position, finds all the references of\n+     * the specified symbol within the relevant scope.\n+     *\n+     * @param fileName name of the file in which to look up the specified position\n+     * @param position a cursor position in the source\n+     * @return A {@link List} of line ranges of all the references\n+     */\n+    List<Location> allReferences(String fileName, LinePosition position);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23ae2c18c3b45b1f6f5c76528d0f5e50a970211e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjMxNTg5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwODo0NDo1OFrOH2STcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNjo0OToyNlrOH4A16A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY4NTA0Mw==", "bodyText": "Use of references across the modules is a common case. Have we thought of how user would query such references across modules? How one could query a single symbol across multiple semantic models of the modules. Is it possible to allow query references() through a Symbol as input?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r526685043", "createdAt": "2020-11-19T08:44:58Z", "author": {"login": "rasika"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -149,6 +151,25 @@ public BallerinaSemanticModel(BLangPackage bLangPackage, CompilerContext context\n         return compiledSymbols;\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public List<Location> references(String fileName, LinePosition position) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87a60f97177101ae991bca821ba1bc3edf222839"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc3MDg5NA==", "bodyText": "I think @rasika 's concern is a valid requirement. There is a catch though, which is the performance. With the symbol being an input then we query the symbol API and then again query the references API.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r526770894", "createdAt": "2020-11-19T10:57:11Z", "author": {"login": "nadeeshaan"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -149,6 +151,25 @@ public BallerinaSemanticModel(BLangPackage bLangPackage, CompilerContext context\n         return compiledSymbols;\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public List<Location> references(String fileName, LinePosition position) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY4NTA0Mw=="}, "originalCommit": {"oid": "87a60f97177101ae991bca821ba1bc3edf222839"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgxOTM4MA==", "bodyText": "This is what we talked about having an integration layer between the project API and the semantic API for right? Can definitely add another API which accepts a symbol as the input. In fact, I tried that approach first, and then reverted to position. From a performance POV, I don't think it'll be an issue since we don't need to query the symbol API again.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r526819380", "createdAt": "2020-11-19T12:08:30Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -149,6 +151,25 @@ public BallerinaSemanticModel(BLangPackage bLangPackage, CompilerContext context\n         return compiledSymbols;\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public List<Location> references(String fileName, LinePosition position) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY4NTA0Mw=="}, "originalCommit": {"oid": "87a60f97177101ae991bca821ba1bc3edf222839"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ5NjEwNA==", "bodyText": "Since now we allow Symbol as input, i think rest of the query can be possible with the introduction of the integration layer.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r528496104", "createdAt": "2020-11-23T06:49:26Z", "author": {"login": "rasika"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -149,6 +151,25 @@ public BallerinaSemanticModel(BLangPackage bLangPackage, CompilerContext context\n         return compiledSymbols;\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public List<Location> references(String fileName, LinePosition position) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY4NTA0Mw=="}, "originalCommit": {"oid": "87a60f97177101ae991bca821ba1bc3edf222839"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjc5ODkzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNDozMjoyNlrOH29ayg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNDozMjoyNlrOH29ayg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5MTQzNA==", "bodyText": "We could use symTag to check for BPackageSymbol and BAnnotationSymbol", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r527391434", "createdAt": "2020-11-20T04:32:26Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/BallerinaSemanticModel.java", "diffHunk": "@@ -235,7 +256,8 @@ private BLangCompilationUnit getCompilationUnit(String srcFile) {\n     }\n \n     private boolean isTypeSymbol(BSymbol symbol) {\n-        return symbol instanceof BTypeSymbol && !(symbol instanceof BPackageSymbol);\n+        return symbol instanceof BTypeSymbol && !(symbol instanceof BPackageSymbol)\n+                && !(symbol instanceof BAnnotationSymbol);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "089cbfe097f2b6c634be23a0627e650227db01ef"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjgwMjcxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNDozNDo1MVrOH29c4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDo0NzowN1rOH3SuNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5MTk3MQ==", "bodyText": "I feel accepting a symbol as a parameter would make more sense in-terms of the API's perspective..\nThen it reads as \"give me the references of this symbol\"", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r527391971", "createdAt": "2020-11-20T04:34:51Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java", "diffHunk": "@@ -58,6 +59,16 @@\n      */\n     List<Symbol> moduleLevelSymbols();\n \n+    /**\n+     * If there's an identifier associated with a symbol at the specified cursor position, finds all the references of\n+     * the specified symbol within the relevant scope.\n+     *\n+     * @param fileName name of the file in which to look up the specified position\n+     * @param position a cursor position in the source\n+     * @return A {@link List} of line ranges of all the references\n+     */\n+    List<Location> references(String fileName, LinePosition position);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "089cbfe097f2b6c634be23a0627e650227db01ef"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0MDQ3MA==", "bodyText": "Added an overloaded version of this which takes a Symbol.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r527740470", "createdAt": "2020-11-20T14:47:07Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java", "diffHunk": "@@ -58,6 +59,16 @@\n      */\n     List<Symbol> moduleLevelSymbols();\n \n+    /**\n+     * If there's an identifier associated with a symbol at the specified cursor position, finds all the references of\n+     * the specified symbol within the relevant scope.\n+     *\n+     * @param fileName name of the file in which to look up the specified position\n+     * @param position a cursor position in the source\n+     * @return A {@link List} of line ranges of all the references\n+     */\n+    List<Location> references(String fileName, LinePosition position);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5MTk3MQ=="}, "originalCommit": {"oid": "089cbfe097f2b6c634be23a0627e650227db01ef"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjgwNzkwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNDozNzozMlrOH29fnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDo0NzoyNFrOH3SvLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5MjY2OA==", "bodyText": "unused method?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r527392668", "createdAt": "2020-11-20T04:37:32Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java", "diffHunk": "@@ -108,6 +110,10 @@ public boolean isLangLib() {\n         return isLangLib;\n     }\n \n+    public BSymbol getInternalSymbol() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "089cbfe097f2b6c634be23a0627e650227db01ef"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0MDcxNg==", "bodyText": "In use, after the addition of the above mentioned API.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r527740716", "createdAt": "2020-11-20T14:47:24Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaSymbol.java", "diffHunk": "@@ -108,6 +110,10 @@ public boolean isLangLib() {\n         return isLangLib;\n     }\n \n+    public BSymbol getInternalSymbol() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5MjY2OA=="}, "originalCommit": {"oid": "089cbfe097f2b6c634be23a0627e650227db01ef"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDIzODEyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNTowNzoxMFrOH3_fKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNTo0MTowMVrOH3_4wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ3Mzg5OQ==", "bodyText": "Do we need the file name here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r528473899", "createdAt": "2020-11-23T05:07:10Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java", "diffHunk": "@@ -58,6 +59,25 @@\n      */\n     List<Symbol> moduleLevelSymbols();\n \n+    /**\n+     * Finds all the references of the specified symbol within the relevant scope.\n+     *\n+     * @param fileName name of the file in which to look up the specified position\n+     * @param symbol   a {@link Symbol} insance\n+     * @return A {@link List} of line ranges of all the references\n+     */\n+    List<Location> references(String fileName, Symbol symbol);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "653f898c0be348e9b4d5c0c9f0bd31c1fbba5165"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ4MDQ0OA==", "bodyText": "Don't need it. Removed with 345a9e0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26976#discussion_r528480448", "createdAt": "2020-11-23T05:41:01Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/SemanticModel.java", "diffHunk": "@@ -58,6 +59,25 @@\n      */\n     List<Symbol> moduleLevelSymbols();\n \n+    /**\n+     * Finds all the references of the specified symbol within the relevant scope.\n+     *\n+     * @param fileName name of the file in which to look up the specified position\n+     * @param symbol   a {@link Symbol} insance\n+     * @return A {@link List} of line ranges of all the references\n+     */\n+    List<Location> references(String fileName, Symbol symbol);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ3Mzg5OQ=="}, "originalCommit": {"oid": "653f898c0be348e9b4d5c0c9f0bd31c1fbba5165"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3019, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}