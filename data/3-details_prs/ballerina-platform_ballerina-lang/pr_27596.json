{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzMDg5MDA0", "number": 27596, "title": "Add support for mapping type rest arguments", "bodyText": "Purpose\n\nThis PR\n\n\nUpdate record equivalency rules for optional fields.\nAccording to the spec(a value belongs to a type if it looks like the type, and it will necessarily continue to look like the type no matter how the value is mutated) this type of assignment can be done. Its has been done with this.\n\ntype Person record {|\n    string name;\n    int id;\n    float avg?;\n|};\n\ntype Student record {|\n    string name;\n    int id;\n|};\n\npublic function main() {\n    Student st = {name: \"Amy\", id: 1234};\n    Person pr = st;\n}\n\nAllow closed record as rest argument.\n\ntype Foo record {|\n    int c = 10;\n    int d?;\n|};\n\nfunction getSum(int a, int b, int c, int d = 1) returns int {\n    return a + b + c + d;\n}\n\nfunction testFunctionWithMappingTypeRestArg() {\n    Foo f = {};\n    Foo f1 = {c:20, d:15};\n    int sum = getSum(10, 15, ...f); // case 1\n    int sum1 = getSum(10, 15, ...f1); // case 2\n}\nFor the case 1 instance need to check whether value for d is given or not(if value for d is given use that value if not use default value). Change the argument representation in the BIR to do that. Futher, keep one of the below state for argument in BIR.\n\nUser provided\nUser not provided\nUser conditionally provided(relate to the case 1)\n\nFurther information relate to Implementation design has been attached with this.\nFixes #21097\nFixes #23755\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-12-20T16:03:44Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596", "merged": true, "mergeCommit": {"oid": "69e740fc47ba699d095cee2e586788a0904f1b5c"}, "closed": true, "closedAt": "2021-01-21T09:57:29Z", "author": {"login": "chiranSachintha"}, "timelineItems": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdn_hwHAH2gAyNTQzMDg5MDA0OjFiYThhNjVhYWU0YTZiY2E2ZjBlMTU2YjdmMzBjZDQyODIyNjRlNTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdyRgDrgFqTU3MzE1NzExOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1ba8a65aae4a6bca6f0e156b7f30cd4282264e56", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1ba8a65aae4a6bca6f0e156b7f30cd4282264e56", "committedDate": "2020-12-20T11:21:10Z", "message": "Introduce semantic analysis changes for mapping type rest args"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ec3ac27e674a8a8ae51921ec0e5390b67b872c7", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3ec3ac27e674a8a8ae51921ec0e5390b67b872c7", "committedDate": "2020-12-20T11:23:00Z", "message": "Update record equivalency rules for optional fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7beb30d73be53aac55acd4898deb39087141fdc", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d7beb30d73be53aac55acd4898deb39087141fdc", "committedDate": "2020-12-20T11:46:18Z", "message": "Introduce desugar changes for mapping type rest args"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f10a6f6673566ad27f174dcadc5d248703ff0cb", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5f10a6f6673566ad27f174dcadc5d248703ff0cb", "committedDate": "2020-12-20T12:04:40Z", "message": "Add new way to represent an argument in an instruction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdb2fc2592ebe219286848ee4ed01b48ff77ab18", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fdb2fc2592ebe219286848ee4ed01b48ff77ab18", "committedDate": "2020-12-20T12:05:53Z", "message": "Add lhs temp variable optimization for arguments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00a172627e8510e57ed9f7449d15693c055581a3", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/00a172627e8510e57ed9f7449d15693c055581a3", "committedDate": "2020-12-20T12:16:43Z", "message": "Support expressions for function argument condition value"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2a84543129c78a72bb90a020bad3dbe02bff37f", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a2a84543129c78a72bb90a020bad3dbe02bff37f", "committedDate": "2020-12-20T12:35:38Z", "message": "Add birgen for arguments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1f7b47a3bfded60dbbc8625ba96c00b0eb714b9", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f1f7b47a3bfded60dbbc8625ba96c00b0eb714b9", "committedDate": "2020-12-20T12:41:30Z", "message": "Add support for default parameters from BIR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a631620acb0b0f08db48d12b42a7439807853cb5", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a631620acb0b0f08db48d12b42a7439807853cb5", "committedDate": "2020-12-20T12:43:33Z", "message": "Add unit tests for mapping type rest arguments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5834304e975f0d9a16c7d8c8cfc5b73ea538fcc9", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5834304e975f0d9a16c7d8c8cfc5b73ea538fcc9", "committedDate": "2020-12-20T13:17:52Z", "message": "Change the year of the license"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8522884110210d2edbccadf6292204ab0b5e3e61", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8522884110210d2edbccadf6292204ab0b5e3e61", "committedDate": "2020-12-20T13:23:21Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into issue-21097\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmTerminatorGen.java\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ba54a10f8691b0b2299fd68db659454f698e04a", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1ba54a10f8691b0b2299fd68db659454f698e04a", "committedDate": "2020-12-20T14:06:47Z", "message": "Resolve conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4db415d9b3e49cea6314e84d14f9a2b4893cf50", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c4db415d9b3e49cea6314e84d14f9a2b4893cf50", "committedDate": "2020-12-20T19:39:55Z", "message": "Fixed failing tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "309c9192582806d4defc7d29d15e89f8b4dbac44", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/309c9192582806d4defc7d29d15e89f8b4dbac44", "committedDate": "2020-12-20T18:33:44Z", "message": "Fixed failing tests"}, "afterCommit": {"oid": "c4db415d9b3e49cea6314e84d14f9a2b4893cf50", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c4db415d9b3e49cea6314e84d14f9a2b4893cf50", "committedDate": "2020-12-20T19:39:55Z", "message": "Fixed failing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a978027a9f844039667cc5256b0a2de5ac777c20", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a978027a9f844039667cc5256b0a2de5ac777c20", "committedDate": "2020-12-22T07:27:43Z", "message": "Refactor logic relate to mapping type rest arguments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "499ccdf94b3897049040b9cea98b5a5b366a86ed", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/499ccdf94b3897049040b9cea98b5a5b366a86ed", "committedDate": "2021-01-06T07:56:26Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into issue-21097"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f418c2ad71d2b9ae3076871256b2ead982ddef3", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2f418c2ad71d2b9ae3076871256b2ead982ddef3", "committedDate": "2021-01-07T05:52:21Z", "message": "Change type of argument in async invocations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d81681e1737e607463905f2bb726db75601ee4c5", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d81681e1737e607463905f2bb726db75601ee4c5", "committedDate": "2021-01-07T05:52:22Z", "message": "Renamed `Argument` class as `BIRArgument`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4ad53f628bbe529772caea25ca1a51e36e6ac0f", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c4ad53f628bbe529772caea25ca1a51e36e6ac0f", "committedDate": "2021-01-07T05:52:22Z", "message": "Fix type of arg list as `BIRArgument`"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2ODkyOTUy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#pullrequestreview-566892952", "createdAt": "2021-01-13T04:57:01Z", "commit": {"oid": "c4ad53f628bbe529772caea25ca1a51e36e6ac0f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwNDo1NzowMVrOISfkLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwNDo1NzowMVrOISfkLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI2MjQ0Ng==", "bodyText": "Can't we rearrange this,\nif (!Symbols.isOptional(lhsField.symbol)) {\n                     return false;\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r556262446", "createdAt": "2021-01-13T04:57:01Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2376,11 +2376,14 @@ private boolean checkFieldEquivalency(BRecordType lhsType, BRecordType rhsType,\n         for (BField lhsField : lhsType.fields.values()) {\n             BField rhsField = rhsFields.get(lhsField.name.value);\n \n-            // There should be a corresponding RHS field\n+            // If LHS field is required, there should be a corresponding RHS field\n             if (rhsField == null) {\n-                return false;\n+                if (Symbols.isOptional(lhsField.symbol)) {\n+                    continue;\n+                } else {\n+                    return false;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4ad53f628bbe529772caea25ca1a51e36e6ac0f"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e329b152713b288d2e4fc3e8c98819fdc6d1298", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5e329b152713b288d2e4fc3e8c98819fdc6d1298", "committedDate": "2021-01-18T11:23:59Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into issue-21097\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/NodeKind.java\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/BIRGen.java\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmTerminatorGen.java\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BIRTerminator.java\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ASTBuilderUtil.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fcaa7ae856e29c3613992c6426a4394304d1cb6", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9fcaa7ae856e29c3613992c6426a4394304d1cb6", "committedDate": "2021-01-18T11:58:08Z", "message": "Resolve conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0875d956d38601dc1de42778798dce42b7ea6013", "committedDate": "2021-01-20T07:02:25Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into issue-21097"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcxOTU1MjIz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#pullrequestreview-571955223", "createdAt": "2021-01-20T08:07:43Z", "commit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwODowNzo0M1rOIWxb-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwODowNzo0M1rOIWxb-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0OTU2Mw==", "bodyText": "2021?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560749563", "createdAt": "2021-01-20T08:07:43Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicParamNode.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcxOTU1NDA5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#pullrequestreview-571955409", "createdAt": "2021-01-20T08:07:59Z", "commit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwODowNzo1OVrOIWxcoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwODowNzo1OVrOIWxcoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc0OTcyOA==", "bodyText": "Where is the java doc for this class?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560749728", "createdAt": "2021-01-20T08:07:59Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicParamNode.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.ballerinalang.model.tree.expressions;\n+\n+/**\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcxOTYxMDcy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#pullrequestreview-571961072", "createdAt": "2021-01-20T08:16:05Z", "commit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwODoxNjowNVrOIWxu2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwODoxNjowNVrOIWxu2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc1NDM5NA==", "bodyText": "If Argument extends BIROperand, why do we need still get the BIROperand in the constructor ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560754394", "createdAt": "2021-01-20T08:16:05Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BIRArgument.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.bir.model;\n+\n+/**\n+ * {@code BIRArgument} represents an argument in an instruction.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BIRArgument extends BIROperand {\n+\n+    public ArgumentState argState;\n+    public BIROperand userProvidedCondition;\n+\n+    public BIRArgument(ArgumentState argState, BIROperand argVar) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcxOTYxODAz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#pullrequestreview-571961803", "createdAt": "2021-01-20T08:17:08Z", "commit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwODoxNzowOVrOIWxxRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwODoxNzowOVrOIWxxRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc1NTAxNA==", "bodyText": "2021? Seems you haven't checked header.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560755014", "createdAt": "2021-01-20T08:17:09Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangDynamicParamExpr.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ *  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcxOTYyMjcx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#pullrequestreview-571962271", "createdAt": "2021-01-20T08:17:47Z", "commit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwODoxNzo0N1rOIWxyvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwODoxNzo0N1rOIWxyvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDc1NTM5MQ==", "bodyText": "Unnecessary new lines", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560755391", "createdAt": "2021-01-20T08:17:47Z", "author": {"login": "Kishanthan"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/FunctionsWithRestArguments.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.ballerinalang.test.functions;\n+\n+import org.ballerinalang.test.BAssertUtil;\n+import org.ballerinalang.test.BCompileUtil;\n+import org.ballerinalang.test.BRunUtil;\n+import org.ballerinalang.test.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test Function Arguments with mapping type rest Expression.\n+ *\n+ * @since 2.0.0\n+ */\n+public class FunctionsWithRestArguments {\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5d1f6c2a2a6098c33380a9bda60806148760407c", "committedDate": "2021-01-20T09:37:50Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcyMDg5ODcz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#pullrequestreview-572089873", "createdAt": "2021-01-20T10:41:19Z", "commit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMDo0MToyMFrOIW4LWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMDo0MToyMFrOIW4LWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg1OTk5Mg==", "bodyText": "This changes the BIR format right? we'll need to update the kaitai file ?\n@Kishanthan wdyt?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560859992", "createdAt": "2021-01-20T10:41:20Z", "author": {"login": "manuranga"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/writer/BIRInstructionWriter.java", "diffHunk": "@@ -421,6 +422,27 @@ public void visit(BIROperand birOperand) {\n         }\n     }\n \n+    public void visit(BIRArgument birArgument) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0875d956d38601dc1de42778798dce42b7ea6013"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcyMTMzMjkx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#pullrequestreview-572133291", "createdAt": "2021-01-20T11:36:36Z", "commit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMTozNjozNlrOIW6Npw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMTozNjozNlrOIW6Npw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg5MzM1MQ==", "bodyText": "We have to introduce these changes in the runtime type checker also.\nThe type test below returns false atm.\ntype Person record {|\n    string name;\n    int id;\n    float avg?;\n|};\n\ntype Student record {|\n    string name;\n    int id;\n|};\n\npublic function main() {\n    Student st = {name: \"Amy\", id: 1234};\n\n    Person pr = st; // Works.\n\n    boolean res = <any> st is Person; // Evaluates to `false`\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560893351", "createdAt": "2021-01-20T11:36:36Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2650,11 +2650,14 @@ private boolean checkFieldEquivalency(BRecordType lhsType, BRecordType rhsType,\n         for (BField lhsField : lhsType.fields.values()) {\n             BField rhsField = rhsFields.get(lhsField.name.value);\n \n-            // There should be a corresponding RHS field\n+            // If LHS field is required, there should be a corresponding RHS field\n             if (rhsField == null) {\n-                return false;\n+                if (Symbols.isOptional(lhsField.symbol)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcyMTUyMTI2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#pullrequestreview-572152126", "createdAt": "2021-01-20T12:02:33Z", "commit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMjowMjozM1rOIW7HHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMjoxNjowOVrOIW7kbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkwODA2Mw==", "bodyText": "We can probably include more details, right? This is not quite a named arg?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560908063", "createdAt": "2021-01-20T12:02:33Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicParamNode.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.ballerinalang.model.tree.expressions;\n+\n+/**\n+ * Represent named arguments.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkxNTU2Ng==", "bodyText": "Why are we changing these?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560915566", "createdAt": "2021-01-20T12:16:09Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ASTBuilderUtil.java", "diffHunk": "@@ -724,11 +724,11 @@ public static BLangMatchExpression createMatchExpression(BLangExpression expr) {\n         return matchExpr;\n     }\n \n-    public static BLangFieldBasedAccess createFieldAccessExpr(BLangAccessibleExpression varRef, BLangIdentifier field) {\n+    public static BLangFieldBasedAccess createFieldAccessExpr(BLangExpression varRef, BLangIdentifier field) {\n         return createFieldAccessExpr(varRef, field, false);\n     }\n \n-    public static BLangFieldBasedAccess createFieldAccessExpr(BLangAccessibleExpression varRef, BLangIdentifier field,\n+    public static BLangFieldBasedAccess createFieldAccessExpr(BLangExpression varRef, BLangIdentifier field,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcyMjAxNDE0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#pullrequestreview-572201414", "createdAt": "2021-01-20T13:08:04Z", "commit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMzowODowNFrOIW9caA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMzoxMDo0NVrOIW9i8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk0NjI4MA==", "bodyText": "Please add both negative and positive (compile time and runtime) tests for the record assignability changes introduced in this PR.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560946280", "createdAt": "2021-01-20T13:08:04Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/record/ClosedRecordEquivalencyRulesTest.java", "diffHunk": "@@ -50,8 +50,6 @@ public void testClosedRecordNegatives() {\n         int i = 0;\n         validateError(negative, i++, \"incompatible types: expected 'AnotherPerson', found 'Person1'\", 28, 24);\n         validateError(negative, i++, \"incompatible types: expected 'AnotherPerson', found 'Person2'\", 38, 24);\n-        validateError(negative, i++, \"incompatible types: expected 'AnotherPerson3', found 'Person1'\", 49, 25);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk0Nzk1NQ==", "bodyText": "The varargRef variable you are using here is actually a BLangSimpleVarRef, right? If you change the type of the param to BLangSimpleVarRef in reorderNamedArgs, this could work without any other changes.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560947955", "createdAt": "2021-01-20T13:10:45Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ASTBuilderUtil.java", "diffHunk": "@@ -724,11 +724,11 @@ public static BLangMatchExpression createMatchExpression(BLangExpression expr) {\n         return matchExpr;\n     }\n \n-    public static BLangFieldBasedAccess createFieldAccessExpr(BLangAccessibleExpression varRef, BLangIdentifier field) {\n+    public static BLangFieldBasedAccess createFieldAccessExpr(BLangExpression varRef, BLangIdentifier field) {\n         return createFieldAccessExpr(varRef, field, false);\n     }\n \n-    public static BLangFieldBasedAccess createFieldAccessExpr(BLangAccessibleExpression varRef, BLangIdentifier field,\n+    public static BLangFieldBasedAccess createFieldAccessExpr(BLangExpression varRef, BLangIdentifier field,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkxNTU2Ng=="}, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcyMjMwODg0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#pullrequestreview-572230884", "createdAt": "2021-01-20T13:43:48Z", "commit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMzo0Mzo0OFrOIW-z0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMzo0NDoyM1rOIW-1fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk2ODY1Ng==", "bodyText": "These need to go in ASTBuilderUtil\nThere's already two methods to create BLangIndexBasedAccess in ASTBuilderUtil which we can probably reuse here\nWe probably don't need to set pos", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560968656", "createdAt": "2021-01-20T13:43:48Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -7385,6 +7417,41 @@ private void reorderNamedArgs(BLangInvocation iExpr, BInvokableSymbol invokableS\n         iExpr.requiredArgs = args;\n     }\n \n+    private BLangDynamicParamExpr createDynamicParamExpression(BLangExpression condition,\n+                                                               BLangExpression conditionalArg) {\n+        BLangDynamicParamExpr dymaicExpression = new BLangDynamicParamExpr();\n+        dymaicExpression.condition = condition;\n+        dymaicExpression.conditionalArgument = conditionalArg;\n+        return dymaicExpression;\n+    }\n+\n+    private BLangTernaryExpr createTernaryExprNode(BType type, BLangExpression expr, BLangExpression thenExpr,\n+                                                   BLangExpression elseExpr, Location pos) {\n+        BLangTernaryExpr ternaryExpr = (BLangTernaryExpr) TreeBuilder.createTernaryExpressionNode();\n+        ternaryExpr.pos = pos;\n+        ternaryExpr.elseExpr = elseExpr;\n+        ternaryExpr.thenExpr = thenExpr;\n+        ternaryExpr.expr = expr;\n+        ternaryExpr.type = type;\n+        return ternaryExpr;\n+    }\n+\n+    private BLangIndexBasedAccess createMemberAccessExprNode(BType type, BLangExpression expr,\n+                                                             BLangExpression indexExpr, Location pos) {\n+        BLangIndexBasedAccess memberAccessExpr = (BLangIndexBasedAccess) TreeBuilder.createIndexBasedAccessNode();\n+        memberAccessExpr.pos = pos;\n+        memberAccessExpr.expr = expr;\n+        memberAccessExpr.indexExpr = indexExpr;\n+        memberAccessExpr.type = type;\n+        return memberAccessExpr;\n+    }\n+\n+    private BLangExpression createIgnoreExprNode(BType type) {\n+        BLangExpression ignoreExpr = new BLangIgnoreExpr();\n+        ignoreExpr.type = type;\n+        return ignoreExpr;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk2OTA4NA==", "bodyText": "When moving this to ASTBuilderUtil shall we also create this via TreeBuilder like we do for other nodes?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560969084", "createdAt": "2021-01-20T13:44:23Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -7385,6 +7417,41 @@ private void reorderNamedArgs(BLangInvocation iExpr, BInvokableSymbol invokableS\n         iExpr.requiredArgs = args;\n     }\n \n+    private BLangDynamicParamExpr createDynamicParamExpression(BLangExpression condition,\n+                                                               BLangExpression conditionalArg) {\n+        BLangDynamicParamExpr dymaicExpression = new BLangDynamicParamExpr();\n+        dymaicExpression.condition = condition;\n+        dymaicExpression.conditionalArgument = conditionalArg;\n+        return dymaicExpression;\n+    }\n+\n+    private BLangTernaryExpr createTernaryExprNode(BType type, BLangExpression expr, BLangExpression thenExpr,\n+                                                   BLangExpression elseExpr, Location pos) {\n+        BLangTernaryExpr ternaryExpr = (BLangTernaryExpr) TreeBuilder.createTernaryExpressionNode();\n+        ternaryExpr.pos = pos;\n+        ternaryExpr.elseExpr = elseExpr;\n+        ternaryExpr.thenExpr = thenExpr;\n+        ternaryExpr.expr = expr;\n+        ternaryExpr.type = type;\n+        return ternaryExpr;\n+    }\n+\n+    private BLangIndexBasedAccess createMemberAccessExprNode(BType type, BLangExpression expr,\n+                                                             BLangExpression indexExpr, Location pos) {\n+        BLangIndexBasedAccess memberAccessExpr = (BLangIndexBasedAccess) TreeBuilder.createIndexBasedAccessNode();\n+        memberAccessExpr.pos = pos;\n+        memberAccessExpr.expr = expr;\n+        memberAccessExpr.indexExpr = indexExpr;\n+        memberAccessExpr.type = type;\n+        return memberAccessExpr;\n+    }\n+\n+    private BLangExpression createIgnoreExprNode(BType type) {\n+        BLangExpression ignoreExpr = new BLangIgnoreExpr();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 119}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcyMjU5MzM5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#pullrequestreview-572259339", "createdAt": "2021-01-20T14:13:44Z", "commit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxNDoxOToxN1rOIXAYaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxNTowNTozN1rOIXC2GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk5NDQwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (requiredParams.contains(nonRestParam)) {\n          \n          \n            \n                                fieldSymbol = new BVarSymbol(Flags.asMask(new HashSet<Flag>() {{\n          \n          \n            \n                                    add(Flag.REQUIRED);\n          \n          \n            \n                                }}), paramName, pkgID, paramType, recordSymbol, null, VIRTUAL);\n          \n          \n            \n                            } else {\n          \n          \n            \n                                fieldSymbol = new BVarSymbol(Flags.asMask(new HashSet<Flag>() {{\n          \n          \n            \n                                    add(Flag.OPTIONAL);\n          \n          \n            \n                                }}), paramName, pkgID, paramType, recordSymbol, null, VIRTUAL);\n          \n          \n            \n                            }\n          \n          \n            \n                            boolean required = requiredParams.contains(nonRestParam);\n          \n          \n            \n                            fieldSymbol = new BVarSymbol(Flags.asMask(new HashSet<Flag>() {{\n          \n          \n            \n                                add(required ? Flag.REQUIRED : Flag.OPTIONAL);\n          \n          \n            \n                            }}), paramName, pkgID, paramType, recordSymbol, null, VIRTUAL);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r560994409", "createdAt": "2021-01-20T14:19:17Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -5556,25 +5556,44 @@ private BType checkInvocationArgs(BLangInvocation iExpr, List<BType> paramTypes,\n             return symTable.semanticError;\n         }\n \n-        BType restType = restParam == null ? null : restParam.type;\n+        BType listTypeRestArg = restParam == null ? null : restParam.type;\n+        BRecordType mappingTypeRestArg = null;\n \n-        if (nonRestArgs.size() < nonRestParams.size() && vararg != null) {\n+        if (vararg != null && nonRestArgs.size() < nonRestParams.size()) {\n             // We only reach here if there are no named args and there is a vararg, and part of the non-rest params\n             // are provided via the vararg.\n-            // Create a new tuple type as the expected rest param type with expected required/defaultable param types\n-            // as members.\n+            // Create a new tuple type and a closed record type as the expected rest param type with expected\n+            // required/defaultable paramtypes as members.\n+            PackageID pkgID = env.enclPkg.symbol.pkgID;\n             List<BType> tupleMemberTypes = new ArrayList<>();\n+            BRecordTypeSymbol recordSymbol = createRecordTypeSymbol(pkgID, null, VIRTUAL);\n+            mappingTypeRestArg = new BRecordType(recordSymbol);\n+            LinkedHashMap<String, BField> fields = new LinkedHashMap<>();\n             BType tupleRestType = null;\n+            BVarSymbol fieldSymbol;\n \n             for (int j = nonRestArgs.size(); j < nonRestParams.size(); j++) {\n-                tupleMemberTypes.add(paramTypes.get(j));\n+                BType paramType = paramTypes.get(j);\n+                BVarSymbol nonRestParam = nonRestParams.get(j);\n+                Name paramName = nonRestParam.name;\n+                tupleMemberTypes.add(paramType);\n+                if (requiredParams.contains(nonRestParam)) {\n+                    fieldSymbol = new BVarSymbol(Flags.asMask(new HashSet<Flag>() {{\n+                        add(Flag.REQUIRED);\n+                    }}), paramName, pkgID, paramType, recordSymbol, null, VIRTUAL);\n+                } else {\n+                    fieldSymbol = new BVarSymbol(Flags.asMask(new HashSet<Flag>() {{\n+                        add(Flag.OPTIONAL);\n+                    }}), paramName, pkgID, paramType, recordSymbol, null, VIRTUAL);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAwMDE0OA==", "bodyText": "Field access is desugared into member access. Probably better to desugar directly to a member access.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561000148", "createdAt": "2021-01-20T14:26:59Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -7368,15 +7383,32 @@ private void reorderNamedArgs(BLangInvocation iExpr, BInvokableSymbol invokableS\n             } else {\n                 // If a vararg is provided, no parameter defaults are added and no named args are specified.\n                 // Thus, any missing args should come from the vararg.\n-                BLangIndexBasedAccess memberAccessExpr =\n-                        (BLangIndexBasedAccess) TreeBuilder.createIndexBasedAccessNode();\n-                memberAccessExpr.pos = varargRef.pos;\n-                memberAccessExpr.expr = varargRef;\n-                memberAccessExpr.indexExpr = rewriteExpr(createIntLiteral(varargIndex));\n-                memberAccessExpr.type = tupleTypedVararg ? ((BTupleType) varargType).tupleTypes.get(varargIndex) :\n-                        ((BArrayType) varargType).eType;\n-                varargIndex++;\n-                args.add(addConversionExprIfRequired(memberAccessExpr, param.type));\n+                BLangExpression indexExpr;\n+                if (varargRef.type.tag == TypeTags.RECORD) {\n+                    if (param.defaultableParam) {\n+                        BLangInvocation hasKeyInvocation = createLangLibInvocationNode(HAS_KEY, varargRef,\n+                                List.of(createStringLiteral(param.pos, param.name.value)), null, varargRef.pos);\n+                        indexExpr = rewriteExpr(createStringLiteral(param.pos, param.name.value));\n+                        BLangIndexBasedAccess memberAccessExpr = createMemberAccessExprNode(param.type,\n+                                varargRef, indexExpr, varargRef.pos);\n+                        BLangExpression ignoreExpr = createIgnoreExprNode(param.type);\n+                        BLangTernaryExpr ternaryExpr = createTernaryExprNode(param.type, hasKeyInvocation,\n+                                memberAccessExpr, ignoreExpr, varargRef.pos);\n+                        args.add(createDynamicParamExpression(hasKeyInvocation, ternaryExpr));\n+                    } else {\n+                        BLangFieldBasedAccess fieldBasedAccessExpression = ASTBuilderUtil.createFieldAccessExpr(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAwNTU0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    BLangDynamicParamExpr dymaicExpression = new BLangDynamicParamExpr();\n          \n          \n            \n                    BLangDynamicParamExpr dynamicExpression = new BLangDynamicParamExpr();", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561005543", "createdAt": "2021-01-20T14:33:32Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -7385,6 +7417,41 @@ private void reorderNamedArgs(BLangInvocation iExpr, BInvokableSymbol invokableS\n         iExpr.requiredArgs = args;\n     }\n \n+    private BLangDynamicParamExpr createDynamicParamExpression(BLangExpression condition,\n+                                                               BLangExpression conditionalArg) {\n+        BLangDynamicParamExpr dymaicExpression = new BLangDynamicParamExpr();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAwOTExNQ==", "bodyText": "This is used only within some of the if/else blocks, and doesn't have to be a common variable, right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561009115", "createdAt": "2021-01-20T14:38:07Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -7368,15 +7383,32 @@ private void reorderNamedArgs(BLangInvocation iExpr, BInvokableSymbol invokableS\n             } else {\n                 // If a vararg is provided, no parameter defaults are added and no named args are specified.\n                 // Thus, any missing args should come from the vararg.\n-                BLangIndexBasedAccess memberAccessExpr =\n-                        (BLangIndexBasedAccess) TreeBuilder.createIndexBasedAccessNode();\n-                memberAccessExpr.pos = varargRef.pos;\n-                memberAccessExpr.expr = varargRef;\n-                memberAccessExpr.indexExpr = rewriteExpr(createIntLiteral(varargIndex));\n-                memberAccessExpr.type = tupleTypedVararg ? ((BTupleType) varargType).tupleTypes.get(varargIndex) :\n-                        ((BArrayType) varargType).eType;\n-                varargIndex++;\n-                args.add(addConversionExprIfRequired(memberAccessExpr, param.type));\n+                BLangExpression indexExpr;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAxMDMyMg==", "bodyText": "Shouldn't this and DynamicParamNode be BLangDynamicArgExpr and DynamicArgNode respectively? This is to represent the argument, right? Not the params?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561010322", "createdAt": "2021-01-20T14:39:34Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangDynamicParamExpr.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.expressions;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.expressions.DynamicParamNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+\n+/**\n+ * Represents named arguments that should evaluate at runtime.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BLangDynamicParamExpr extends BLangExpression implements DynamicParamNode {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAxODY3Ng==", "bodyText": "This isn't quite user provided, right? Should we just call this condition?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561018676", "createdAt": "2021-01-20T14:49:51Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BIRArgument.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.bir.model;\n+\n+/**\n+ * {@code BIRArgument} represents an argument in an instruction.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BIRArgument extends BIROperand {\n+\n+    public ArgumentState argState;\n+    public BIROperand userProvidedCondition;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAxODk4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (this == other) {\n          \n          \n            \n                        return true;\n          \n          \n            \n                    } else {\n          \n          \n            \n                        return false;\n          \n          \n            \n                    }\n          \n          \n            \n                    return this == other;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561018982", "createdAt": "2021-01-20T14:50:14Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/model/BIRArgument.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.bir.model;\n+\n+/**\n+ * {@code BIRArgument} represents an argument in an instruction.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BIRArgument extends BIROperand {\n+\n+    public ArgumentState argState;\n+    public BIROperand userProvidedCondition;\n+\n+    public BIRArgument(ArgumentState argState, BIRVariableDcl argVar) {\n+        super(argVar);\n+        this.argState = argState;\n+    }\n+\n+    public BIRArgument(ArgumentState argState, BIRVariableDcl argVar, BIROperand userProvidedCondition) {\n+        super(argVar);\n+        this.argState = argState;\n+        this.userProvidedCondition = userProvidedCondition;\n+    }\n+\n+    @Override\n+    public boolean equals(Object other) {\n+        if (this == other) {\n+            return true;\n+        } else {\n+            return false;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAzNDc3Nw==", "bodyText": "Yes, we need to sufficiently describe this here. \"Represent named arguments.\" kinda indicates that it represents all named arguments which is not the case.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561034777", "createdAt": "2021-01-20T15:05:37Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/expressions/DynamicParamNode.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.ballerinalang.model.tree.expressions;\n+\n+/**\n+ * Represent named arguments.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkwODA2Mw=="}, "originalCommit": {"oid": "5d1f6c2a2a6098c33380a9bda60806148760407c"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50cdb7e73eb8e06c5dbae7607082f11f6188fdd4", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/50cdb7e73eb8e06c5dbae7607082f11f6188fdd4", "committedDate": "2021-01-20T21:00:11Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a09c4bc769162d1be973d7d41804e7829971130d", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a09c4bc769162d1be973d7d41804e7829971130d", "committedDate": "2021-01-20T21:27:02Z", "message": "Change visitor method of `BIRArgument`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38d2be76484c3a1a9e2ca1e5799b1c46b48a621e", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/38d2be76484c3a1a9e2ca1e5799b1c46b48a621e", "committedDate": "2021-01-20T21:54:40Z", "message": "Fix failing testcase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9002b8a7d39451578e038ad402181a87069a6c51", "author": {"user": {"login": "chiranSachintha", "name": "Chiran Sachintha"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9002b8a7d39451578e038ad402181a87069a6c51", "committedDate": "2021-01-20T22:35:48Z", "message": "Fix review suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczMDQ2NDIx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#pullrequestreview-573046421", "createdAt": "2021-01-21T07:32:54Z", "commit": {"oid": "9002b8a7d39451578e038ad402181a87069a6c51"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwNzozMjo1NFrOIXorqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwODozNzoyOFrOIXqzvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY1NDY5Nw==", "bodyText": "We can rewrite the testComplexSubtyping function so that this still fails, right?\nOn a separate note, if it wasn't possible to update the test to test the same concept, we should remove the relevant bal code too.\nPlease check wherever applicable.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561654697", "createdAt": "2021-01-21T07:32:54Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/record/MapToRecordAssignabilityTest.java", "diffHunk": "@@ -86,13 +84,6 @@ public void testSubtyping() {\n         BRunUtil.invoke(compileResult, \"testSubtyping\");\n     }\n \n-    @Test(expectedExceptions = BLangRuntimeException.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9002b8a7d39451578e038ad402181a87069a6c51"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY2NzU1MQ==", "bodyText": "Same comment re: updating/removing the test.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561667551", "createdAt": "2021-01-21T07:59:21Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/record/MapToRecordAssignabilityTest.java", "diffHunk": "@@ -55,8 +55,6 @@ public void testNegative() {\n         validateError(result, indx++,\n                       \"incompatible types: expected 'record {| string a; string...; |}', found 'map<string>'\", 29, 12);\n         validateError(result, indx++, \"incompatible types: expected 'record {| Bar...; |}', found 'map<Foo>'\", 52, 13);\n-        validateError(result, indx++, \"incompatible types: expected 'record {| Baz x?; Foo...; |}', found 'map<Bar>'\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9002b8a7d39451578e038ad402181a87069a6c51"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY2ODM1Nw==", "bodyText": "We can remove the source from the bal test file and make them positive tests.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561668357", "createdAt": "2021-01-21T08:00:48Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/record/ClosedRecordEquivalencyRulesTest.java", "diffHunk": "@@ -50,8 +50,6 @@ public void testClosedRecordNegatives() {\n         int i = 0;\n         validateError(negative, i++, \"incompatible types: expected 'AnotherPerson', found 'Person1'\", 28, 24);\n         validateError(negative, i++, \"incompatible types: expected 'AnotherPerson', found 'Person2'\", 38, 24);\n-        validateError(negative, i++, \"incompatible types: expected 'AnotherPerson3', found 'Person1'\", 49, 25);\n-        validateError(negative, i++, \"incompatible types: expected 'AnotherPerson3', found 'Person1'\", 55, 25);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9002b8a7d39451578e038ad402181a87069a6c51"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY3NDc5OA==", "bodyText": "We need to rename this also.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                DYNAMIC_PARAM_EXPR,\n          \n          \n            \n                DYNAMIC_ARG_EXPR,", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561674798", "createdAt": "2021-01-21T08:12:48Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/NodeKind.java", "diffHunk": "@@ -130,6 +130,7 @@\n     TRANSACTIONAL_EXPRESSION,\n     OBJECT_CTOR_EXPRESSION,\n     ERROR_CONSTRUCTOR_EXPRESSION,\n+    DYNAMIC_PARAM_EXPR,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9002b8a7d39451578e038ad402181a87069a6c51"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY4ODU4Mw==", "bodyText": "We should use the ASTBuilderUtil method here.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561688583", "createdAt": "2021-01-21T08:36:02Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -7214,6 +7223,12 @@ private void reorderArguments(BLangInvocation iExpr) {\n             // required/defaultable parameter are added to the new array.\n             BLangRestArgsExpression restArgsExpression = (BLangRestArgsExpression) restArgs.remove(0);\n             BArrayType restParamType = (BArrayType) invokableSymbol.restParam.type;\n+            if (restArgsExpression.type.tag == TypeTags.RECORD) {\n+                BLangExpression expr = new BLangIgnoreExpr();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9002b8a7d39451578e038ad402181a87069a6c51"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTY4OTUzNA==", "bodyText": "Do we need to add this at all? Can't we just return?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561689534", "createdAt": "2021-01-21T08:37:28Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -7214,6 +7223,12 @@ private void reorderArguments(BLangInvocation iExpr) {\n             // required/defaultable parameter are added to the new array.\n             BLangRestArgsExpression restArgsExpression = (BLangRestArgsExpression) restArgs.remove(0);\n             BArrayType restParamType = (BArrayType) invokableSymbol.restParam.type;\n+            if (restArgsExpression.type.tag == TypeTags.RECORD) {\n+                BLangExpression expr = new BLangIgnoreExpr();\n+                expr.type = restParamType;\n+                restArgs.add(expr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9002b8a7d39451578e038ad402181a87069a6c51"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczMTUzNzc4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#pullrequestreview-573153778", "createdAt": "2021-01-21T09:53:08Z", "commit": {"oid": "9002b8a7d39451578e038ad402181a87069a6c51"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwOTo1MzowOFrOIXt3Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwOTo1MzowOFrOIXt3Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTczOTU5MA==", "bodyText": "Let's also add some taint analysis tests.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561739590", "createdAt": "2021-01-21T09:53:08Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/functions/FunctionsWithRestArguments.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.ballerinalang.test.functions;\n+\n+import org.ballerinalang.test.BAssertUtil;\n+import org.ballerinalang.test.BCompileUtil;\n+import org.ballerinalang.test.BRunUtil;\n+import org.ballerinalang.test.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test Function Arguments with mapping type rest Expression.\n+ *\n+ * @since 2.0.0\n+ */\n+public class FunctionsWithRestArguments {\n+\n+    private CompileResult result;\n+\n+    @BeforeClass\n+    public void setup() {\n+        result = BCompileUtil.compile(\"test-src/functions/functions_with_mapping_type_rest_argument.bal\");\n+    }\n+\n+    @Test(description = \"Test functions arguments with function calls as default value\")\n+    public void testFunctionWithMappingTypeRestArg() {\n+        BRunUtil.invoke(result, \"testFunctionWithMappingTypeRestArg\");\n+    }\n+\n+    @Test\n+    public void testFuncSignatureSemanticsNegative() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9002b8a7d39451578e038ad402181a87069a6c51"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczMTU1OTIw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#pullrequestreview-573155920", "createdAt": "2021-01-21T09:55:29Z", "commit": {"oid": "9002b8a7d39451578e038ad402181a87069a6c51"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwOTo1NToyOVrOIXt9jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwOTo1NToyOVrOIXt9jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTc0MTE5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Foo f1 = {c:20, d:15};\n          \n          \n            \n                Foo f1 = {c: 20, d: 15};\n          \n      \n    \n    \n  \n\nPlease fix everywhere in this file.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#discussion_r561741197", "createdAt": "2021-01-21T09:55:29Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/functions/functions_with_mapping_type_rest_argument.bal", "diffHunk": "@@ -0,0 +1,82 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+type Foo record {|\n+    int c = 10;\n+    int d?;\n+|};\n+\n+type Bar record {|\n+    int a;\n+    int b;\n+    int c = 10;\n+    int d;\n+|};\n+\n+type Baz record {|\n+    int c;\n+|};\n+\n+type Val record{|\n+|};\n+\n+function getSum(int a, int b, int c, int d = 1) returns int {\n+    return a + b + c + d;\n+}\n+\n+function getAvg(int a, int b, int c, int d) returns int {\n+    return (a + b + c + d)/4;\n+}\n+\n+function getTotal(int a, int b, int c, int... m) returns int {\n+    return a + b + c;\n+}\n+\n+function testFunctionWithMappingTypeRestArg() {\n+    Foo f = {};\n+    Foo f1 = {c:20, d:15};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9002b8a7d39451578e038ad402181a87069a6c51"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczMTU3MTE4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27596#pullrequestreview-573157118", "createdAt": "2021-01-21T09:56:51Z", "commit": {"oid": "9002b8a7d39451578e038ad402181a87069a6c51"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4656, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}