{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0MTcyMjY5", "number": 26144, "reviewThreads": {"totalCount": 49, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNDoyNjoxM1rOE3DXqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwODozMzowOFrOFOjTWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTYyMzQ0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/matchpatterns/FieldMatchPatternNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNDoyNjoxM1rOHwLRMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNDowMDozNlrOHxpcnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI3ODMyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @since Swan Lake\n          \n          \n            \n             * @since 2.0.0\n          \n      \n    \n    \n  \n\nPlease fix in other new classes too.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r520278323", "createdAt": "2020-11-10T04:26:13Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/matchpatterns/FieldMatchPatternNode.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.model.tree.matchpatterns;\n+\n+import org.ballerinalang.model.tree.IdentifierNode;\n+import org.ballerinalang.model.tree.Node;\n+\n+/**\n+ * The interface with the APIs to implement the field-match-pattern.\n+ *\n+ * @since Swan Lake", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgyMTM0Mw==", "bodyText": "Changed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r521821343", "createdAt": "2020-11-12T04:00:36Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/matchpatterns/FieldMatchPatternNode.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.model.tree.matchpatterns;\n+\n+import org.ballerinalang.model.tree.IdentifierNode;\n+import org.ballerinalang.model.tree.Node;\n+\n+/**\n+ * The interface with the APIs to implement the field-match-pattern.\n+ *\n+ * @since Swan Lake", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI3ODMyMw=="}, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTYyNjk3OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/testng.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNDoyODoyM1rOHwLTPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNDowMDo0MFrOHxpczg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI3ODg0NA==", "bodyText": "Why have we added two commented out test classes for ones that are already running?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r520278844", "createdAt": "2020-11-10T04:28:23Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/testng.xml", "diffHunk": "@@ -201,8 +201,11 @@\n             <class name=\"org.ballerinalang.test.statements.matchstmt.MatchStatementSyntaxErrorsTest\"></class>\n             <class name=\"org.ballerinalang.test.statements.matchstmt.varbindingpatternmatchpattern.CaptureBindingPatternTest\"></class>\n             <class name=\"org.ballerinalang.test.statements.matchstmt.MatchStmtListMatchPatternTest\"></class>\n+            <class name=\"org.ballerinalang.test.statements.matchstmt.MatchStmtMappingMatchPatternTest\"></class>\n             <class name=\"org.ballerinalang.test.statements.matchstmt.MatchStatementOnFailTest\"></class>\n             <class name=\"org.ballerinalang.test.lock.LocksWithOnFailTest\"></class>\n+<!--            <class name=\"org.ballerinalang.test.statements.matchstmt.MatchStatementOnFailTest\"></class>-->\n+<!--            <class name=\"org.ballerinalang.test.lock.LocksWithOnFailTest\"></class>-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgyMTM5MA==", "bodyText": "Deleted those lines", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r521821390", "createdAt": "2020-11-12T04:00:40Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/resources/testng.xml", "diffHunk": "@@ -201,8 +201,11 @@\n             <class name=\"org.ballerinalang.test.statements.matchstmt.MatchStatementSyntaxErrorsTest\"></class>\n             <class name=\"org.ballerinalang.test.statements.matchstmt.varbindingpatternmatchpattern.CaptureBindingPatternTest\"></class>\n             <class name=\"org.ballerinalang.test.statements.matchstmt.MatchStmtListMatchPatternTest\"></class>\n+            <class name=\"org.ballerinalang.test.statements.matchstmt.MatchStmtMappingMatchPatternTest\"></class>\n             <class name=\"org.ballerinalang.test.statements.matchstmt.MatchStatementOnFailTest\"></class>\n             <class name=\"org.ballerinalang.test.lock.LocksWithOnFailTest\"></class>\n+<!--            <class name=\"org.ballerinalang.test.statements.matchstmt.MatchStatementOnFailTest\"></class>-->\n+<!--            <class name=\"org.ballerinalang.test.lock.LocksWithOnFailTest\"></class>-->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI3ODg0NA=="}, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTYzMDg1OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/mapping-match-pattern.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNDozMDozMVrOHwLVbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNDowMDo0NFrOHxpc9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI3OTQwNQ==", "bodyText": "IMO, the formatting has to be consistent with other usage of curly braces + key/value pairs.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    { a : \"str\"} => {\n          \n          \n            \n                    {a: \"str\"} => {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r520279405", "createdAt": "2020-11-10T04:30:31Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/mapping-match-pattern.bal", "diffHunk": "@@ -0,0 +1,524 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+function mappingMatchPattern1(any v) returns string {\n+    match v {\n+        { a : \"str\"} => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgyMTQzMQ==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r521821431", "createdAt": "2020-11-12T04:00:44Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/mapping-match-pattern.bal", "diffHunk": "@@ -0,0 +1,524 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+function mappingMatchPattern1(any v) returns string {\n+    match v {\n+        { a : \"str\"} => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI3OTQwNQ=="}, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTYzNTM5OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/matchstmt/MatchStmtMappingMatchPatternTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNDozMzowNVrOHwLX_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNDowMDo0OFrOHxpdKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4MDA2Mw==", "bodyText": "Shall we move this to the end and assert against i? That way we will assert all the errors in the future too.\nAssert.assertEquals(resultNegative.getErrorCount(), i);\nWill have to change i's initial value and switch to i++.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r520280063", "createdAt": "2020-11-10T04:33:05Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/matchstmt/MatchStmtMappingMatchPatternTest.java", "diffHunk": "@@ -0,0 +1,198 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.ballerinalang.test.statements.matchstmt;\n+\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test cases to verify the behaviour of the mapping-match-pattern.\n+ *\n+ * @since Swan Lake\n+ */\n+@Test(groups = { \"disableOnOldParser\" })\n+public class MatchStmtMappingMatchPatternTest {\n+\n+    private CompileResult result, resultNegative, resultRestPattern;\n+    private String patternNotMatched = \"pattern will not be matched\";\n+    private String unreachablePattern = \"unreachable pattern\";\n+\n+    @BeforeClass\n+    public void setup() {\n+        result = BCompileUtil.compile(\"test-src/statements/matchstmt/mapping-match-pattern.bal\");\n+        resultRestPattern = BCompileUtil.compile(\"test-src/statements/matchstmt/mapping-match-pattern-with-rest-match\" +\n+                \"-pattern.bal\");\n+        resultNegative = BCompileUtil.compile(\"test-src/statements/matchstmt/mapping-mach-pattern-negative.bal\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern1() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern1\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern2() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern2\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern3() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern3\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern4() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern4\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern5() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern5\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern6() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern6\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern7() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern7\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern8() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern8\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern9() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern9\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern10() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern10\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern11() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern11\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern12() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern12\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern13() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern13\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern14() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern14\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern15() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern15\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern16() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern16\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern17() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern17\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern18() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern18\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern19() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern19\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern20() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern20\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern21() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern21\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern22() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern22\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern23() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern23\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPatternWithRestPattern1() {\n+        BRunUtil.invoke(resultRestPattern, \"testMappingMatchPattern1\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPatternWithRestPattern2() {\n+        BRunUtil.invoke(resultRestPattern, \"testMappingMatchPattern2\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPatternWithRestPattern3() {\n+        BRunUtil.invoke(resultRestPattern, \"testMappingMatchPattern3\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPatternNegative() {\n+        Assert.assertEquals(resultNegative.getErrorCount(), 16);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgyMTQ4MQ==", "bodyText": "+1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r521821481", "createdAt": "2020-11-12T04:00:48Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/matchstmt/MatchStmtMappingMatchPatternTest.java", "diffHunk": "@@ -0,0 +1,198 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.ballerinalang.test.statements.matchstmt;\n+\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test cases to verify the behaviour of the mapping-match-pattern.\n+ *\n+ * @since Swan Lake\n+ */\n+@Test(groups = { \"disableOnOldParser\" })\n+public class MatchStmtMappingMatchPatternTest {\n+\n+    private CompileResult result, resultNegative, resultRestPattern;\n+    private String patternNotMatched = \"pattern will not be matched\";\n+    private String unreachablePattern = \"unreachable pattern\";\n+\n+    @BeforeClass\n+    public void setup() {\n+        result = BCompileUtil.compile(\"test-src/statements/matchstmt/mapping-match-pattern.bal\");\n+        resultRestPattern = BCompileUtil.compile(\"test-src/statements/matchstmt/mapping-match-pattern-with-rest-match\" +\n+                \"-pattern.bal\");\n+        resultNegative = BCompileUtil.compile(\"test-src/statements/matchstmt/mapping-mach-pattern-negative.bal\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern1() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern1\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern2() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern2\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern3() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern3\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern4() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern4\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern5() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern5\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern6() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern6\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern7() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern7\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern8() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern8\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern9() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern9\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern10() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern10\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern11() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern11\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern12() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern12\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern13() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern13\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern14() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern14\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern15() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern15\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern16() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern16\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern17() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern17\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern18() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern18\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern19() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern19\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern20() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern20\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern21() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern21\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern22() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern22\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPattern23() {\n+        BRunUtil.invoke(result, \"testMappingMatchPattern23\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPatternWithRestPattern1() {\n+        BRunUtil.invoke(resultRestPattern, \"testMappingMatchPattern1\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPatternWithRestPattern2() {\n+        BRunUtil.invoke(resultRestPattern, \"testMappingMatchPattern2\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPatternWithRestPattern3() {\n+        BRunUtil.invoke(resultRestPattern, \"testMappingMatchPattern3\");\n+    }\n+\n+    @Test\n+    public void testMappingMatchPatternNegative() {\n+        Assert.assertEquals(resultNegative.getErrorCount(), 16);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4MDA2Mw=="}, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTY0NjkwOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/matchstmt/MatchStmtMappingMatchPatternTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNDozOTozMlrOHwLeXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNDozOTozMlrOHwLeXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4MTY5NQ==", "bodyText": "Shall we make these constants?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r520281695", "createdAt": "2020-11-10T04:39:32Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/matchstmt/MatchStmtMappingMatchPatternTest.java", "diffHunk": "@@ -0,0 +1,198 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+package org.ballerinalang.test.statements.matchstmt;\n+\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test cases to verify the behaviour of the mapping-match-pattern.\n+ *\n+ * @since Swan Lake\n+ */\n+@Test(groups = { \"disableOnOldParser\" })\n+public class MatchStmtMappingMatchPatternTest {\n+\n+    private CompileResult result, resultNegative, resultRestPattern;\n+    private String patternNotMatched = \"pattern will not be matched\";\n+    private String unreachablePattern = \"unreachable pattern\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTY1NDE1OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/mapping-mach-pattern-negative.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNDo0Mzo1NlrOHwLikA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNDowMDo1N1rOHxpdiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4Mjc2OA==", "bodyText": "Formatting needs to be fixed for these too.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                map<int> v2 = { a : 2 };\n          \n          \n            \n                map<int> v2 = {a: 2};", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r520282768", "createdAt": "2020-11-10T04:43:56Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/mapping-mach-pattern-negative.bal", "diffHunk": "@@ -0,0 +1,84 @@\n+const string CONST1 = \"str\";\n+\n+function testMappingMatchPatternNegative() returns string {\n+\n+    boolean v1 = true;\n+    match v1 {\n+        { a : true } => { // pattern will not be matched\n+            return \"Match\";\n+        }\n+    }\n+\n+    map<int> v2 = { a : 2 };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgyMTU3OQ==", "bodyText": "Changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r521821579", "createdAt": "2020-11-12T04:00:57Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/mapping-mach-pattern-negative.bal", "diffHunk": "@@ -0,0 +1,84 @@\n+const string CONST1 = \"str\";\n+\n+function testMappingMatchPatternNegative() returns string {\n+\n+    boolean v1 = true;\n+    match v1 {\n+        { a : true } => { // pattern will not be matched\n+            return \"Match\";\n+        }\n+    }\n+\n+    map<int> v2 = { a : 2 };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4Mjc2OA=="}, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTY1NDY5OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/mapping-mach-pattern-negative.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNDo0NDoxMVrOHwLi2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNDowMTowOFrOHxpeCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4Mjg0MQ==", "bodyText": "Missing the licence header.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r520282841", "createdAt": "2020-11-10T04:44:11Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/mapping-mach-pattern-negative.bal", "diffHunk": "@@ -0,0 +1,84 @@\n+const string CONST1 = \"str\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgyMTcwNg==", "bodyText": "Added", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r521821706", "createdAt": "2020-11-12T04:01:08Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/mapping-mach-pattern-negative.bal", "diffHunk": "@@ -0,0 +1,84 @@\n+const string CONST1 = \"str\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4Mjg0MQ=="}, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTY1NjY4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/matchpatterns/BLangMappingMatchPattern.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNDo0NToxMFrOHwLj-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNDowMToxOFrOHxpejQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4MzEzMQ==", "bodyText": "Shall we add at least a brief description? Please check other classes too.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r520283131", "createdAt": "2020-11-10T04:45:10Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/matchpatterns/BLangMappingMatchPattern.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.matchpatterns;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.matchpatterns.FieldMatchPatternNode;\n+import org.ballerinalang.model.tree.matchpatterns.MappingMatchPatternNode;\n+import org.ballerinalang.model.tree.matchpatterns.RestMatchPatternNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * @since Swan Lake", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgyMTgzNw==", "bodyText": "Added", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r521821837", "createdAt": "2020-11-12T04:01:18Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/matchpatterns/BLangMappingMatchPattern.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.matchpatterns;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.matchpatterns.FieldMatchPatternNode;\n+import org.ballerinalang.model.tree.matchpatterns.MappingMatchPatternNode;\n+import org.ballerinalang.model.tree.matchpatterns.RestMatchPatternNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * @since Swan Lake", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4MzEzMQ=="}, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTY1NzAxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/matchpatterns/BLangMappingMatchPattern.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNDo0NToyMlrOHwLkMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNDowMToyOFrOHxpfDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4MzE4NA==", "bodyText": "Is this still relevant?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r520283184", "createdAt": "2020-11-10T04:45:22Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/matchpatterns/BLangMappingMatchPattern.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.matchpatterns;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.matchpatterns.FieldMatchPatternNode;\n+import org.ballerinalang.model.tree.matchpatterns.MappingMatchPatternNode;\n+import org.ballerinalang.model.tree.matchpatterns.RestMatchPatternNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * @since Swan Lake\n+ */\n+public class BLangMappingMatchPattern extends BLangMatchPattern implements MappingMatchPatternNode {\n+\n+    public List<BLangFieldMatchPattern> fieldMatchPatterns = new ArrayList<>();\n+    public BLangRestMatchPattern restMatchPattern;\n+    // TODO : add rest-match-pattern", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgyMTk2Nw==", "bodyText": "No, removed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r521821967", "createdAt": "2020-11-12T04:01:28Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/matchpatterns/BLangMappingMatchPattern.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.matchpatterns;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.matchpatterns.FieldMatchPatternNode;\n+import org.ballerinalang.model.tree.matchpatterns.MappingMatchPatternNode;\n+import org.ballerinalang.model.tree.matchpatterns.RestMatchPatternNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * @since Swan Lake\n+ */\n+public class BLangMappingMatchPattern extends BLangMatchPattern implements MappingMatchPatternNode {\n+\n+    public List<BLangFieldMatchPattern> fieldMatchPatterns = new ArrayList<>();\n+    public BLangRestMatchPattern restMatchPattern;\n+    // TODO : add rest-match-pattern", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4MzE4NA=="}, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTY1NzI5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/matchpatterns/BLangMappingMatchPattern.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNDo0NTozOVrOHwLkYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNDowMTo0MlrOHxpfjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4MzIzNA==", "bodyText": "Extra new line inconsistent with the rest of the class?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r520283234", "createdAt": "2020-11-10T04:45:39Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/matchpatterns/BLangMappingMatchPattern.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.matchpatterns;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.matchpatterns.FieldMatchPatternNode;\n+import org.ballerinalang.model.tree.matchpatterns.MappingMatchPatternNode;\n+import org.ballerinalang.model.tree.matchpatterns.RestMatchPatternNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * @since Swan Lake\n+ */\n+public class BLangMappingMatchPattern extends BLangMatchPattern implements MappingMatchPatternNode {\n+\n+    public List<BLangFieldMatchPattern> fieldMatchPatterns = new ArrayList<>();\n+    public BLangRestMatchPattern restMatchPattern;\n+    // TODO : add rest-match-pattern\n+\n+    @Override\n+    public void accept(BLangNodeVisitor visitor) {\n+        visitor.visit(this);\n+    }\n+\n+    @Override\n+    public NodeKind getKind() {\n+        return NodeKind.MAPPING_MATCH_PATTERN;\n+    }\n+\n+    @Override\n+    public List<? extends FieldMatchPatternNode> getFieldMatchPatterns() {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgyMjA5Mw==", "bodyText": "Removed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r521822093", "createdAt": "2020-11-12T04:01:42Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/matchpatterns/BLangMappingMatchPattern.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.matchpatterns;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.matchpatterns.FieldMatchPatternNode;\n+import org.ballerinalang.model.tree.matchpatterns.MappingMatchPatternNode;\n+import org.ballerinalang.model.tree.matchpatterns.RestMatchPatternNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * @since Swan Lake\n+ */\n+public class BLangMappingMatchPattern extends BLangMatchPattern implements MappingMatchPatternNode {\n+\n+    public List<BLangFieldMatchPattern> fieldMatchPatterns = new ArrayList<>();\n+    public BLangRestMatchPattern restMatchPattern;\n+    // TODO : add rest-match-pattern\n+\n+    @Override\n+    public void accept(BLangNodeVisitor visitor) {\n+        visitor.visit(this);\n+    }\n+\n+    @Override\n+    public NodeKind getKind() {\n+        return NodeKind.MAPPING_MATCH_PATTERN;\n+    }\n+\n+    @Override\n+    public List<? extends FieldMatchPatternNode> getFieldMatchPatterns() {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4MzIzNA=="}, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTY2MjEyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNDo0ODo0MFrOHwLnUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODo1MDoyNlrOH3GCsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4Mzk4Ng==", "bodyText": "@pubudu91, along with your recent changes, we need to set the ANONYMOUS flag here, right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r520283986", "createdAt": "2020-11-10T04:48:40Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -2345,6 +2348,136 @@ public void visit(BLangMatchGuard matchGuard) {\n         matchGuard.expr.accept(this);\n     }\n \n+    @Override\n+    public void visit(BLangMappingMatchPattern mappingMatchPattern) {\n+        BRecordTypeSymbol recordSymbol =\n+                Symbols.createRecordSymbol(0, names.fromString(\"$anonRecordType$\" + recordCount++),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY2NDAzMQ==", "bodyText": "Since this is a VIRTUAL symbol, it doesn't really matter. But I think as a best practice, it's better to treat any additional symbols that we create for desugared/inferred components/types just as we do for constructs in code and try to give as much as accurate details when creating the symbols (in this case, the ANONYMOUS flag).\n@KavinduZoysa Also, any particular reason not to use BLangAnonymousModelHelper to generate the anon name?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r522664031", "createdAt": "2020-11-13T05:28:28Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -2345,6 +2348,136 @@ public void visit(BLangMatchGuard matchGuard) {\n         matchGuard.expr.accept(this);\n     }\n \n+    @Override\n+    public void visit(BLangMappingMatchPattern mappingMatchPattern) {\n+        BRecordTypeSymbol recordSymbol =\n+                Symbols.createRecordSymbol(0, names.fromString(\"$anonRecordType$\" + recordCount++),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4Mzk4Ng=="}, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUzMjcyMA==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r527532720", "createdAt": "2020-11-20T08:50:26Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -2345,6 +2348,136 @@ public void visit(BLangMatchGuard matchGuard) {\n         matchGuard.expr.accept(this);\n     }\n \n+    @Override\n+    public void visit(BLangMappingMatchPattern mappingMatchPattern) {\n+        BRecordTypeSymbol recordSymbol =\n+                Symbols.createRecordSymbol(0, names.fromString(\"$anonRecordType$\" + recordCount++),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4Mzk4Ng=="}, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTY2NTkzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNDo1MDoyMFrOHwLpaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNDowMjowMlrOHxpgYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4NDUyMw==", "bodyText": "Can't/shouldn't we call analyzeNode instead of directly calling accept?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r520284523", "createdAt": "2020-11-10T04:50:20Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -2345,6 +2348,136 @@ public void visit(BLangMatchGuard matchGuard) {\n         matchGuard.expr.accept(this);\n     }\n \n+    @Override\n+    public void visit(BLangMappingMatchPattern mappingMatchPattern) {\n+        BRecordTypeSymbol recordSymbol =\n+                Symbols.createRecordSymbol(0, names.fromString(\"$anonRecordType$\" + recordCount++),\n+                        env.enclPkg.symbol.pkgID, null, env.scope.owner, mappingMatchPattern.pos, VIRTUAL);\n+        LinkedHashMap<String, BField> fields = new LinkedHashMap<>();\n+\n+        for (BLangFieldMatchPattern fieldMatchPattern : mappingMatchPattern.fieldMatchPatterns) {\n+            fieldMatchPattern.accept(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgyMjMwNg==", "bodyText": "Chnaged", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r521822306", "createdAt": "2020-11-12T04:02:02Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -2345,6 +2348,136 @@ public void visit(BLangMatchGuard matchGuard) {\n         matchGuard.expr.accept(this);\n     }\n \n+    @Override\n+    public void visit(BLangMappingMatchPattern mappingMatchPattern) {\n+        BRecordTypeSymbol recordSymbol =\n+                Symbols.createRecordSymbol(0, names.fromString(\"$anonRecordType$\" + recordCount++),\n+                        env.enclPkg.symbol.pkgID, null, env.scope.owner, mappingMatchPattern.pos, VIRTUAL);\n+        LinkedHashMap<String, BField> fields = new LinkedHashMap<>();\n+\n+        for (BLangFieldMatchPattern fieldMatchPattern : mappingMatchPattern.fieldMatchPatterns) {\n+            fieldMatchPattern.accept(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4NDUyMw=="}, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTcwNzQwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNToxMzowM1rOHwMBEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODo1MDozMVrOH3GC3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MDU3Ng==", "bodyText": "Don't we have to reset this?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r520290576", "createdAt": "2020-11-10T05:13:03Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -367,6 +373,19 @@ public BType resolvePatternTypeFromMatchExpr(BLangExpression matchExpr, BLangExp\n         return symTable.noType;\n     }\n \n+    public BType resolvePatternTypeFromMatchExpr(BLangMappingMatchPattern mappingMatchPattern, BType patternType,\n+                                                 SymbolEnv env) {\n+        if (mappingMatchPattern.matchExpr == null) {\n+            return patternType;\n+        }\n+        this.env = env;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUzMjc2NA==", "bodyText": "Changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r527532764", "createdAt": "2020-11-20T08:50:31Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -367,6 +373,19 @@ public BType resolvePatternTypeFromMatchExpr(BLangExpression matchExpr, BLangExp\n         return symTable.noType;\n     }\n \n+    public BType resolvePatternTypeFromMatchExpr(BLangMappingMatchPattern mappingMatchPattern, BType patternType,\n+                                                 SymbolEnv env) {\n+        if (mappingMatchPattern.matchExpr == null) {\n+            return patternType;\n+        }\n+        this.env = env;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5MDU3Ng=="}, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTczMzY1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNToyNzowMFrOHwMQcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNDowMjoxN1rOHxphDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5NDUxMw==", "bodyText": "The rest match pattern needs to allow for all unmatched fields which can include non-rest fields in the case of a record.\nThe following doesn't fail atm.\npublic function main() {\n    record {|\n        int a;\n        int b;\n        string...;\n    |} x = {a : 2, b: 3};\n\n    match x {\n        {a: 2, ...var rst} => {\n            map<string> mp = rst; // no compilation error, even though the type of `rst`\n                                  // is `record {|int b; string...;|}`  \n        }\n    }\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r520294513", "createdAt": "2020-11-10T05:27:00Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -2345,6 +2348,136 @@ public void visit(BLangMatchGuard matchGuard) {\n         matchGuard.expr.accept(this);\n     }\n \n+    @Override\n+    public void visit(BLangMappingMatchPattern mappingMatchPattern) {\n+        BRecordTypeSymbol recordSymbol =\n+                Symbols.createRecordSymbol(0, names.fromString(\"$anonRecordType$\" + recordCount++),\n+                        env.enclPkg.symbol.pkgID, null, env.scope.owner, mappingMatchPattern.pos, VIRTUAL);\n+        LinkedHashMap<String, BField> fields = new LinkedHashMap<>();\n+\n+        for (BLangFieldMatchPattern fieldMatchPattern : mappingMatchPattern.fieldMatchPatterns) {\n+            fieldMatchPattern.accept(this);\n+            String fieldName = fieldMatchPattern.fieldName.value;\n+            BVarSymbol fieldSymbol = new BVarSymbol(0, names.fromString(fieldName), env.enclPkg.symbol.pkgID,\n+                    fieldMatchPattern.matchPattern.type, recordSymbol, fieldMatchPattern.pos, COMPILED_SOURCE);\n+            BField field = new BField(names.fromString(fieldName), fieldMatchPattern.pos, fieldSymbol);\n+            fields.put(fieldName, field);\n+            mappingMatchPattern.declaredVars.putAll(fieldMatchPattern.declaredVars);\n+        }\n+        BRecordType recordVarType = new BRecordType(recordSymbol);\n+        recordVarType.fields = fields;\n+        recordVarType.restFieldType = symTable.anydataType;\n+        if (mappingMatchPattern.restMatchPattern != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgyMjQ3Nw==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r521822477", "createdAt": "2020-11-12T04:02:17Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -2345,6 +2348,136 @@ public void visit(BLangMatchGuard matchGuard) {\n         matchGuard.expr.accept(this);\n     }\n \n+    @Override\n+    public void visit(BLangMappingMatchPattern mappingMatchPattern) {\n+        BRecordTypeSymbol recordSymbol =\n+                Symbols.createRecordSymbol(0, names.fromString(\"$anonRecordType$\" + recordCount++),\n+                        env.enclPkg.symbol.pkgID, null, env.scope.owner, mappingMatchPattern.pos, VIRTUAL);\n+        LinkedHashMap<String, BField> fields = new LinkedHashMap<>();\n+\n+        for (BLangFieldMatchPattern fieldMatchPattern : mappingMatchPattern.fieldMatchPatterns) {\n+            fieldMatchPattern.accept(this);\n+            String fieldName = fieldMatchPattern.fieldName.value;\n+            BVarSymbol fieldSymbol = new BVarSymbol(0, names.fromString(fieldName), env.enclPkg.symbol.pkgID,\n+                    fieldMatchPattern.matchPattern.type, recordSymbol, fieldMatchPattern.pos, COMPILED_SOURCE);\n+            BField field = new BField(names.fromString(fieldName), fieldMatchPattern.pos, fieldSymbol);\n+            fields.put(fieldName, field);\n+            mappingMatchPattern.declaredVars.putAll(fieldMatchPattern.declaredVars);\n+        }\n+        BRecordType recordVarType = new BRecordType(recordSymbol);\n+        recordVarType.fields = fields;\n+        recordVarType.restFieldType = symTable.anydataType;\n+        if (mappingMatchPattern.restMatchPattern != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5NDUxMw=="}, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTc0MTUxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNToyOTowN1rOHwMVjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODo1MDozNVrOH3GDAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5NTgyMQ==", "bodyText": "Types is like a stateless util class, so IMO, we shouldn't do this. Can't we pass the env from wherever the methods are called?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r520295821", "createdAt": "2020-11-10T05:29:07Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -128,6 +132,8 @@\n     private Names names;\n     private int finiteTypeCount = 0;\n     private BUnionType expandedXMLBuiltinSubtypes;\n+    private int recordCount = 0;\n+    private SymbolEnv env;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQxNTU5MA==", "bodyText": "Even with this approach, just setting env for match won't work well with other places that call getTypeIntersection.\nFor example, the following results in a bad, sad error due to env being null.\npublic function main() {\n    map<int> m = {a: 1};\n\n    if m is record {int a;} {\n        \n    }\n}\n[2020-11-11 20:24:19,518] SEVERE {b7a.log.crash} - null \njava.lang.NullPointerException\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.Types.getTypeForRecordTypeMembersAssignableToType(Types.java:2813)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.Types.getTypeForMapTypeMembersAssignableToType(Types.java:2804)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.Types.lambda$getTypeIntersection$51(Types.java:3198)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)\n\tat java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1654)\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)\n\tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\tat java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.Types.getTypeIntersection(Types.java:3211)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.TypeNarrower.visit(TypeNarrower.java:194)\n\tat org.wso2.ballerinalang.compiler.tree.expressions.BLangTypeTestExpr.accept(BLangTypeTestExpr.java:65)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.TypeNarrower.analyzeExpr(TypeNarrower.java:224)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.TypeNarrower.getNarrowedTypes(TypeNarrower.java:202)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.TypeNarrower.evaluateTruth(TypeNarrower.java:92)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.TypeNarrower.evaluateTruth(TypeNarrower.java:114)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.visit(SemanticAnalyzer.java:2282)\n\tat org.wso2.ballerinalang.compiler.tree.statements.BLangIf.accept(BLangIf.java:56)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.analyzeNode(SemanticAnalyzer.java:3047)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.analyzeNode(SemanticAnalyzer.java:3015)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.analyzeStmt(SemanticAnalyzer.java:3011)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.visit(SemanticAnalyzer.java:392)\n\tat org.wso2.ballerinalang.compiler.tree.BLangBlockFunctionBody.accept(BLangBlockFunctionBody.java:58)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.analyzeNode(SemanticAnalyzer.java:3047)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.visit(SemanticAnalyzer.java:364)\n\tat org.wso2.ballerinalang.compiler.tree.BLangFunction.accept(BLangFunction.java:73)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.analyzeNode(SemanticAnalyzer.java:3047)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.analyzeNode(SemanticAnalyzer.java:3015)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.analyzeDef(SemanticAnalyzer.java:3007)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.visit(SemanticAnalyzer.java:280)\n\tat org.wso2.ballerinalang.compiler.tree.BLangPackage.accept(BLangPackage.java:163)\n\tat org.wso2.ballerinalang.compiler.semantics.analyzer.SemanticAnalyzer.analyze(SemanticAnalyzer.java:254)\n\tat org.wso2.ballerinalang.compiler.CompilerDriver.typeCheck(CompilerDriver.java:347)\n\tat org.wso2.ballerinalang.compiler.CompilerDriver.compile(CompilerDriver.java:276)\n\tat org.wso2.ballerinalang.compiler.CompilerDriver.compilePackageSymbol(CompilerDriver.java:268)\n\tat org.wso2.ballerinalang.compiler.CompilerDriver.compilePackage(CompilerDriver.java:144)\n\tat org.wso2.ballerinalang.compiler.Compiler.compilePackages(Compiler.java:176)\n\tat org.wso2.ballerinalang.compiler.Compiler.compilePackage(Compiler.java:221)\n\tat org.wso2.ballerinalang.compiler.Compiler.compile(Compiler.java:101)\n\tat org.wso2.ballerinalang.compiler.Compiler.build(Compiler.java:109)\n\tat org.ballerinalang.packerina.task.CompileTask.execute(CompileTask.java:55)\n\tat org.ballerinalang.packerina.TaskExecutor.executeTasks(TaskExecutor.java:38)\n\tat org.ballerinalang.packerina.cmd.RunCommand.execute(RunCommand.java:297)\n\tat java.base/java.util.Optional.ifPresent(Optional.java:183)\n\tat org.ballerinalang.tool.Main.main(Main.java:57)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r521415590", "createdAt": "2020-11-11T14:56:57Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -128,6 +132,8 @@\n     private Names names;\n     private int finiteTypeCount = 0;\n     private BUnionType expandedXMLBuiltinSubtypes;\n+    private int recordCount = 0;\n+    private SymbolEnv env;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5NTgyMQ=="}, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQxNTk3OA==", "bodyText": "I think we'll have to fix this by making getTypeIntersection accept the env.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r521415978", "createdAt": "2020-11-11T14:57:33Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -128,6 +132,8 @@\n     private Names names;\n     private int finiteTypeCount = 0;\n     private BUnionType expandedXMLBuiltinSubtypes;\n+    private int recordCount = 0;\n+    private SymbolEnv env;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5NTgyMQ=="}, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUzMjgwMQ==", "bodyText": "Changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r527532801", "createdAt": "2020-11-20T08:50:35Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -128,6 +132,8 @@\n     private Names names;\n     private int finiteTypeCount = 0;\n     private BUnionType expandedXMLBuiltinSubtypes;\n+    private int recordCount = 0;\n+    private SymbolEnv env;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5NTgyMQ=="}, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTc1MDU2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNTozMToxN1rOHwMbRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODo1MDo0OFrOH3GDbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5NzI4NA==", "bodyText": "Neither any nor anydata contain error. So shouldn't we check what the other type is here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r520297284", "createdAt": "2020-11-10T05:31:17Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -380,10 +399,32 @@ private boolean containsAnyType(BType type) {\n         return false;\n     }\n \n+    private boolean containsAnyDataType(BType type) {\n+        if (type.tag != TypeTags.UNION) {\n+            return type.tag == TypeTags.ANYDATA;\n+        }\n+\n+        for (BType memberTypes : ((BUnionType) type).getMemberTypes()) {\n+            if (memberTypes.tag == TypeTags.ANYDATA) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n     public BType mergeTypes(BType typeFirst, BType typeSecond) {\n         if (containsAnyType(typeFirst)) {\n             return typeSecond;\n         }\n+        if (containsAnyType(typeSecond)) {\n+            return typeFirst;\n+        }\n+        if (containsAnyDataType(typeFirst)) {\n+            return typeSecond;\n+        }\n+        if (containsAnyDataType(typeSecond)) {\n+            return typeFirst;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUzMjkxMQ==", "bodyText": "Yes, fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r527532911", "createdAt": "2020-11-20T08:50:48Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -380,10 +399,32 @@ private boolean containsAnyType(BType type) {\n         return false;\n     }\n \n+    private boolean containsAnyDataType(BType type) {\n+        if (type.tag != TypeTags.UNION) {\n+            return type.tag == TypeTags.ANYDATA;\n+        }\n+\n+        for (BType memberTypes : ((BUnionType) type).getMemberTypes()) {\n+            if (memberTypes.tag == TypeTags.ANYDATA) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n     public BType mergeTypes(BType typeFirst, BType typeSecond) {\n         if (containsAnyType(typeFirst)) {\n             return typeSecond;\n         }\n+        if (containsAnyType(typeSecond)) {\n+            return typeFirst;\n+        }\n+        if (containsAnyDataType(typeFirst)) {\n+            return typeSecond;\n+        }\n+        if (containsAnyDataType(typeSecond)) {\n+            return typeFirst;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5NzI4NA=="}, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTc1MzA5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNTozMjo1MlrOHwMcvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwODo0NDozN1rOHxwM9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5NzY2MQ==", "bodyText": "Shouldn't we create a new BMapType here instead of updating the parameter?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r520297661", "createdAt": "2020-11-10T05:32:52Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2756,6 +2788,61 @@ BType getTypeForUnionTypeMembersAssignableToType(BUnionType unionType, BType tar\n         }\n     }\n \n+    BType getTypeForMapTypeMembersAssignableToType(BMapType mapType, BType targetType) {\n+        if (targetType.tag != TypeTags.MAP && targetType.tag != TypeTags.RECORD) {\n+            return symTable.semanticError;\n+        }\n+        if (targetType.tag == TypeTags.MAP) {\n+            BType intersectionConstraintType = getTypeIntersection(mapType.constraint,\n+                    ((BMapType) targetType).constraint);\n+            if (intersectionConstraintType != symTable.semanticError) {\n+                return symTable.semanticError;\n+            }\n+            mapType.constraint = intersectionConstraintType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgyMjY0MA==", "bodyText": "I cannot find any special reason to do so. Is there any reason?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r521822640", "createdAt": "2020-11-12T04:02:33Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2756,6 +2788,61 @@ BType getTypeForUnionTypeMembersAssignableToType(BUnionType unionType, BType tar\n         }\n     }\n \n+    BType getTypeForMapTypeMembersAssignableToType(BMapType mapType, BType targetType) {\n+        if (targetType.tag != TypeTags.MAP && targetType.tag != TypeTags.RECORD) {\n+            return symTable.semanticError;\n+        }\n+        if (targetType.tag == TypeTags.MAP) {\n+            BType intersectionConstraintType = getTypeIntersection(mapType.constraint,\n+                    ((BMapType) targetType).constraint);\n+            if (intersectionConstraintType != symTable.semanticError) {\n+                return symTable.semanticError;\n+            }\n+            mapType.constraint = intersectionConstraintType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5NzY2MQ=="}, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzNDQ0OA==", "bodyText": "Update the type passed as a parameter can cause different errors elsewhere.\nFor example, check\npublic function main() {\n    map<int|boolean> m1 = {};\n\n    if m1 is map<string> {\n       \n    }\n\n    map<int> x = m1;\n}\nThe error for this on slp5 is\nincompatible types: expected 'map<int>', found 'map<(int|boolean)>'\nBut with this change it is\nincompatible types: expected 'map<int>', found 'map<other>'", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r521834448", "createdAt": "2020-11-12T04:37:51Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2756,6 +2788,61 @@ BType getTypeForUnionTypeMembersAssignableToType(BUnionType unionType, BType tar\n         }\n     }\n \n+    BType getTypeForMapTypeMembersAssignableToType(BMapType mapType, BType targetType) {\n+        if (targetType.tag != TypeTags.MAP && targetType.tag != TypeTags.RECORD) {\n+            return symTable.semanticError;\n+        }\n+        if (targetType.tag == TypeTags.MAP) {\n+            BType intersectionConstraintType = getTypeIntersection(mapType.constraint,\n+                    ((BMapType) targetType).constraint);\n+            if (intersectionConstraintType != symTable.semanticError) {\n+                return symTable.semanticError;\n+            }\n+            mapType.constraint = intersectionConstraintType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5NzY2MQ=="}, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgzNDY4MQ==", "bodyText": "Anyway why do we return symTable.semanticError if intersectionConstraintType != symTable.semanticError?\nDoesn't intersectionConstraintType != symTable.semanticError mean the intersection is valid?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r521834681", "createdAt": "2020-11-12T04:39:00Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2756,6 +2788,61 @@ BType getTypeForUnionTypeMembersAssignableToType(BUnionType unionType, BType tar\n         }\n     }\n \n+    BType getTypeForMapTypeMembersAssignableToType(BMapType mapType, BType targetType) {\n+        if (targetType.tag != TypeTags.MAP && targetType.tag != TypeTags.RECORD) {\n+            return symTable.semanticError;\n+        }\n+        if (targetType.tag == TypeTags.MAP) {\n+            BType intersectionConstraintType = getTypeIntersection(mapType.constraint,\n+                    ((BMapType) targetType).constraint);\n+            if (intersectionConstraintType != symTable.semanticError) {\n+                return symTable.semanticError;\n+            }\n+            mapType.constraint = intersectionConstraintType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5NzY2MQ=="}, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTkzMjAyMA==", "bodyText": "It is fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r521932020", "createdAt": "2020-11-12T08:44:37Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2756,6 +2788,61 @@ BType getTypeForUnionTypeMembersAssignableToType(BUnionType unionType, BType tar\n         }\n     }\n \n+    BType getTypeForMapTypeMembersAssignableToType(BMapType mapType, BType targetType) {\n+        if (targetType.tag != TypeTags.MAP && targetType.tag != TypeTags.RECORD) {\n+            return symTable.semanticError;\n+        }\n+        if (targetType.tag == TypeTags.MAP) {\n+            BType intersectionConstraintType = getTypeIntersection(mapType.constraint,\n+                    ((BMapType) targetType).constraint);\n+            if (intersectionConstraintType != symTable.semanticError) {\n+                return symTable.semanticError;\n+            }\n+            mapType.constraint = intersectionConstraintType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI5NzY2MQ=="}, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTc4NjIzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNTo0OTo0NFrOHwMv3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNDowMjo0MFrOHxpiAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwMjU1Nw==", "bodyText": "Are these names accurate? Just gets the intersection, right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r520302557", "createdAt": "2020-11-10T05:49:44Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2756,6 +2788,61 @@ BType getTypeForUnionTypeMembersAssignableToType(BUnionType unionType, BType tar\n         }\n     }\n \n+    BType getTypeForMapTypeMembersAssignableToType(BMapType mapType, BType targetType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgyMjcyMA==", "bodyText": "Changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r521822720", "createdAt": "2020-11-12T04:02:40Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2756,6 +2788,61 @@ BType getTypeForUnionTypeMembersAssignableToType(BUnionType unionType, BType tar\n         }\n     }\n \n+    BType getTypeForMapTypeMembersAssignableToType(BMapType mapType, BType targetType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwMjU1Nw=="}, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTc5MDIyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNTo1MTozN1rOHwMyMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwNjoxNjowNVrOH0lxsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwMzE1NQ==", "bodyText": "Aren't we implementing record-record intersection here? If so shouldn't we change the check in L2808 to just\ntargetType.tag != TypeTags.MAP\n@dulvinw is probably implementing record-record intersection though.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r520303155", "createdAt": "2020-11-10T05:51:37Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2756,6 +2788,61 @@ BType getTypeForUnionTypeMembersAssignableToType(BUnionType unionType, BType tar\n         }\n     }\n \n+    BType getTypeForMapTypeMembersAssignableToType(BMapType mapType, BType targetType) {\n+        if (targetType.tag != TypeTags.MAP && targetType.tag != TypeTags.RECORD) {\n+            return symTable.semanticError;\n+        }\n+        if (targetType.tag == TypeTags.MAP) {\n+            BType intersectionConstraintType = getTypeIntersection(mapType.constraint,\n+                    ((BMapType) targetType).constraint);\n+            if (intersectionConstraintType != symTable.semanticError) {\n+                return symTable.semanticError;\n+            }\n+            mapType.constraint = intersectionConstraintType;\n+            return mapType;\n+        }\n+        return getTypeForRecordTypeMembersAssignableToType((BRecordType) targetType, mapType);\n+    }\n+\n+    BType getTypeForRecordTypeMembersAssignableToType(BRecordType recordType, BType targetType) {\n+        if (targetType.tag != TypeTags.MAP && targetType.tag != TypeTags.RECORD) {\n+            return symTable.semanticError;\n+        }\n+        if (targetType.tag == TypeTags.MAP) {\n+            BRecordTypeSymbol recordSymbol =\n+                    Symbols.createRecordSymbol(0, names.fromString(\"$anonRecordIntersectionType$\" + recordCount++),\n+                            env.enclPkg.symbol.pkgID, null, env.scope.owner, recordType.tsymbol.pos, VIRTUAL);\n+            LinkedHashMap<String, BField> fields = new LinkedHashMap<>();\n+            for (String key : recordType.fields.keySet()) {\n+                BType intersectionKeyType = getTypeIntersection(recordType.fields.get(key).type,\n+                        ((BMapType) targetType).constraint);\n+                if (intersectionKeyType == symTable.semanticError) {\n+                    return symTable.semanticError;\n+                }\n+                BVarSymbol fieldSymbol = new BVarSymbol(0, names.fromString(key), env.enclPkg.symbol.pkgID,\n+                        intersectionKeyType, recordSymbol, recordType.fields.get(key).pos, COMPILED_SOURCE);\n+                BField field = new BField(names.fromString(key), recordType.fields.get(key).pos, fieldSymbol);\n+                fields.put(key, field);\n+            }\n+            BRecordType intersectionRecordType = new BRecordType(recordSymbol);\n+            recordSymbol.type = intersectionRecordType;\n+            intersectionRecordType.fields = fields;\n+\n+            if (recordType.restFieldType != null) {\n+                BType intersectionRestType = getTypeIntersection(recordType.restFieldType,\n+                        ((BMapType) targetType).constraint);\n+                if (intersectionRestType == symTable.semanticError) {\n+                    intersectionRecordType.sealed = true;\n+                }\n+                intersectionRecordType.restFieldType = intersectionRestType;\n+            } else {\n+                intersectionRecordType.sealed = recordType.sealed;\n+            }\n+            return intersectionRecordType;\n+        }\n+        return symTable.semanticError;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDkwNjkzMQ==", "bodyText": "This is added with the help of @dulvinw 's implementation.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r524906931", "createdAt": "2020-11-17T06:16:05Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2756,6 +2788,61 @@ BType getTypeForUnionTypeMembersAssignableToType(BUnionType unionType, BType tar\n         }\n     }\n \n+    BType getTypeForMapTypeMembersAssignableToType(BMapType mapType, BType targetType) {\n+        if (targetType.tag != TypeTags.MAP && targetType.tag != TypeTags.RECORD) {\n+            return symTable.semanticError;\n+        }\n+        if (targetType.tag == TypeTags.MAP) {\n+            BType intersectionConstraintType = getTypeIntersection(mapType.constraint,\n+                    ((BMapType) targetType).constraint);\n+            if (intersectionConstraintType != symTable.semanticError) {\n+                return symTable.semanticError;\n+            }\n+            mapType.constraint = intersectionConstraintType;\n+            return mapType;\n+        }\n+        return getTypeForRecordTypeMembersAssignableToType((BRecordType) targetType, mapType);\n+    }\n+\n+    BType getTypeForRecordTypeMembersAssignableToType(BRecordType recordType, BType targetType) {\n+        if (targetType.tag != TypeTags.MAP && targetType.tag != TypeTags.RECORD) {\n+            return symTable.semanticError;\n+        }\n+        if (targetType.tag == TypeTags.MAP) {\n+            BRecordTypeSymbol recordSymbol =\n+                    Symbols.createRecordSymbol(0, names.fromString(\"$anonRecordIntersectionType$\" + recordCount++),\n+                            env.enclPkg.symbol.pkgID, null, env.scope.owner, recordType.tsymbol.pos, VIRTUAL);\n+            LinkedHashMap<String, BField> fields = new LinkedHashMap<>();\n+            for (String key : recordType.fields.keySet()) {\n+                BType intersectionKeyType = getTypeIntersection(recordType.fields.get(key).type,\n+                        ((BMapType) targetType).constraint);\n+                if (intersectionKeyType == symTable.semanticError) {\n+                    return symTable.semanticError;\n+                }\n+                BVarSymbol fieldSymbol = new BVarSymbol(0, names.fromString(key), env.enclPkg.symbol.pkgID,\n+                        intersectionKeyType, recordSymbol, recordType.fields.get(key).pos, COMPILED_SOURCE);\n+                BField field = new BField(names.fromString(key), recordType.fields.get(key).pos, fieldSymbol);\n+                fields.put(key, field);\n+            }\n+            BRecordType intersectionRecordType = new BRecordType(recordSymbol);\n+            recordSymbol.type = intersectionRecordType;\n+            intersectionRecordType.fields = fields;\n+\n+            if (recordType.restFieldType != null) {\n+                BType intersectionRestType = getTypeIntersection(recordType.restFieldType,\n+                        ((BMapType) targetType).constraint);\n+                if (intersectionRestType == symTable.semanticError) {\n+                    intersectionRecordType.sealed = true;\n+                }\n+                intersectionRecordType.restFieldType = intersectionRestType;\n+            } else {\n+                intersectionRecordType.sealed = recordType.sealed;\n+            }\n+            return intersectionRecordType;\n+        }\n+        return symTable.semanticError;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwMzE1NQ=="}, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTc5NDIyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/matchpatterns/BLangMappingMatchPattern.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNTo1Mzo0MlrOHwM0rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwNDowMjo0NVrOHxpiOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwMzc5MA==", "bodyText": "Is this still relevant?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r520303790", "createdAt": "2020-11-10T05:53:42Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/matchpatterns/BLangMappingMatchPattern.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.matchpatterns;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.matchpatterns.FieldMatchPatternNode;\n+import org.ballerinalang.model.tree.matchpatterns.MappingMatchPatternNode;\n+import org.ballerinalang.model.tree.matchpatterns.RestMatchPatternNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * @since Swan Lake\n+ */\n+public class BLangMappingMatchPattern extends BLangMatchPattern implements MappingMatchPatternNode {\n+\n+    public List<BLangFieldMatchPattern> fieldMatchPatterns = new ArrayList<>();\n+    public BLangRestMatchPattern restMatchPattern;\n+    // TODO : add rest-match-pattern", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgyMjc3Nw==", "bodyText": "No, removed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r521822777", "createdAt": "2020-11-12T04:02:45Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/matchpatterns/BLangMappingMatchPattern.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.matchpatterns;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.matchpatterns.FieldMatchPatternNode;\n+import org.ballerinalang.model.tree.matchpatterns.MappingMatchPatternNode;\n+import org.ballerinalang.model.tree.matchpatterns.RestMatchPatternNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * @since Swan Lake\n+ */\n+public class BLangMappingMatchPattern extends BLangMatchPattern implements MappingMatchPatternNode {\n+\n+    public List<BLangFieldMatchPattern> fieldMatchPatterns = new ArrayList<>();\n+    public BLangRestMatchPattern restMatchPattern;\n+    // TODO : add rest-match-pattern", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMwMzc5MA=="}, "originalCommit": {"oid": "6bb24bce0a62d65e933f2d8f3bff8b5d4381b5b6"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjgzMTQ2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/matchpatterns/MappingMatchPatternNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNDo1MDo1MlrOH29skA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODo1MTowMFrOH3GD0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5NTk4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @since Swan Lake\n          \n          \n            \n             * @since 2.0.0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r527395984", "createdAt": "2020-11-20T04:50:52Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/matchpatterns/MappingMatchPatternNode.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.model.tree.matchpatterns;\n+\n+import org.ballerinalang.model.tree.Node;\n+\n+import java.util.List;\n+\n+/**\n+ * The interface with the APIs to implement the mapping-match-pattern.\n+ *\n+ * @since Swan Lake", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60633c4b0cba351b0952428c39168a63cc34d2df"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUzMzAxMQ==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r527533011", "createdAt": "2020-11-20T08:51:00Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/matchpatterns/MappingMatchPatternNode.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.model.tree.matchpatterns;\n+\n+import org.ballerinalang.model.tree.Node;\n+\n+import java.util.List;\n+\n+/**\n+ * The interface with the APIs to implement the mapping-match-pattern.\n+ *\n+ * @since Swan Lake", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5NTk4NA=="}, "originalCommit": {"oid": "60633c4b0cba351b0952428c39168a63cc34d2df"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjgzODg4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/matchpatterns/RestMatchPatternNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNDo1NDo1MFrOH29wnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODo1MTozMVrOH3GFAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5NzAyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @since Swan Lake\n          \n          \n            \n             * @since 2.0.0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r527397023", "createdAt": "2020-11-20T04:54:50Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/matchpatterns/RestMatchPatternNode.java", "diffHunk": "@@ -18,13 +18,14 @@\n package org.ballerinalang.model.tree.matchpatterns;\n \n import org.ballerinalang.model.tree.IdentifierNode;\n+import org.ballerinalang.model.tree.Node;\n \n /**\n  * The interface with the APIs to implement the rest-match-pattern.\n  *\n- * @since 2.0.0\n+ * @since Swan Lake", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60633c4b0cba351b0952428c39168a63cc34d2df"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUzMzMxMw==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r527533313", "createdAt": "2020-11-20T08:51:31Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/matchpatterns/RestMatchPatternNode.java", "diffHunk": "@@ -18,13 +18,14 @@\n package org.ballerinalang.model.tree.matchpatterns;\n \n import org.ballerinalang.model.tree.IdentifierNode;\n+import org.ballerinalang.model.tree.Node;\n \n /**\n  * The interface with the APIs to implement the rest-match-pattern.\n  *\n- * @since 2.0.0\n+ * @since Swan Lake", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzM5NzAyMw=="}, "originalCommit": {"oid": "60633c4b0cba351b0952428c39168a63cc34d2df"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjg2NTg5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNTowOTo1OFrOH29_6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOTo1NDowNVrOH3It_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQwMDkzOA==", "bodyText": "Do we have an issue to track cleaning these up?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r527400938", "createdAt": "2020-11-20T05:09:58Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -3916,23 +3927,53 @@ private BLangMatchPattern transformMatchPattern(Node matchPattern, Location matc\n             if (listMatchPatternNode.restMatchPattern().isPresent()) {\n                 RestMatchPatternNode restMatchPatternNode = listMatchPatternNode.restMatchPattern().get();\n                 bLangListMatchPattern.setRestMatchPattern(\n-                        (BLangRestMatchPattern) transformMatchPattern(restMatchPatternNode,\n-                                getPosition(restMatchPatternNode)));\n+                        (BLangRestMatchPattern) transformMatchPattern(restMatchPatternNode));\n             }\n             return bLangListMatchPattern;\n-        } else if (matchPattern.kind() == SyntaxKind.REST_MATCH_PATTERN) {\n+        }\n+\n+        if (kind == SyntaxKind.REST_MATCH_PATTERN) {\n             RestMatchPatternNode restMatchPatternNode = (RestMatchPatternNode) matchPattern;\n             BLangRestMatchPattern bLangRestMatchPattern = (BLangRestMatchPattern) TreeBuilder.createRestMatchPattern();\n             bLangRestMatchPattern.pos = matchPatternPos;\n \n             SimpleNameReferenceNode variableName = restMatchPatternNode.variableName();\n             bLangRestMatchPattern.setIdentifier(createIdentifier(getPosition(variableName), variableName.name()));\n             return bLangRestMatchPattern;\n-        } else {\n-            // TODO : Remove this after all binding patterns are implemented\n-            dlog.error(matchPatternPos, DiagnosticCode.MATCH_PATTERN_NOT_SUPPORTED);\n-            return null;\n         }\n+\n+        if (kind == SyntaxKind.MAPPING_MATCH_PATTERN) {\n+            MappingMatchPatternNode mappingMatchPatternNode = (MappingMatchPatternNode) matchPattern;\n+            BLangMappingMatchPattern bLangMappingMatchPattern =\n+                    (BLangMappingMatchPattern) TreeBuilder.createMappingMatchPattern();\n+            bLangMappingMatchPattern.pos = matchPatternPos;\n+\n+            for (FieldMatchPatternNode fieldMatchPatternNode : mappingMatchPatternNode.fieldMatchPatterns()) {\n+                bLangMappingMatchPattern.fieldMatchPatterns.add((BLangFieldMatchPattern)\n+                        transformMatchPattern(fieldMatchPatternNode));\n+            }\n+            if (mappingMatchPatternNode.restMatchPattern().isPresent()) {\n+                bLangMappingMatchPattern.restMatchPattern =\n+                        (BLangRestMatchPattern) transformMatchPattern(mappingMatchPatternNode.restMatchPattern().get());\n+            }\n+\n+            return bLangMappingMatchPattern;\n+        }\n+\n+        if (kind == SyntaxKind.FIELD_MATCH_PATTERN) {\n+            FieldMatchPatternNode fieldMatchPatternNode = (FieldMatchPatternNode) matchPattern;\n+            BLangFieldMatchPattern bLangFieldMatchPattern =\n+                    (BLangFieldMatchPattern) TreeBuilder.createFieldMatchPattern();\n+\n+            bLangFieldMatchPattern.fieldName =\n+                    createIdentifier(fieldMatchPatternNode.fieldNameNode());\n+            bLangFieldMatchPattern.matchPattern = transformMatchPattern(fieldMatchPatternNode.matchPattern());\n+            return bLangFieldMatchPattern;\n+        }\n+\n+        // TODO : Remove this after all binding patterns are implemented", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60633c4b0cba351b0952428c39168a63cc34d2df"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU3NjU3Mw==", "bodyText": "#24607", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r527576573", "createdAt": "2020-11-20T09:54:05Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -3916,23 +3927,53 @@ private BLangMatchPattern transformMatchPattern(Node matchPattern, Location matc\n             if (listMatchPatternNode.restMatchPattern().isPresent()) {\n                 RestMatchPatternNode restMatchPatternNode = listMatchPatternNode.restMatchPattern().get();\n                 bLangListMatchPattern.setRestMatchPattern(\n-                        (BLangRestMatchPattern) transformMatchPattern(restMatchPatternNode,\n-                                getPosition(restMatchPatternNode)));\n+                        (BLangRestMatchPattern) transformMatchPattern(restMatchPatternNode));\n             }\n             return bLangListMatchPattern;\n-        } else if (matchPattern.kind() == SyntaxKind.REST_MATCH_PATTERN) {\n+        }\n+\n+        if (kind == SyntaxKind.REST_MATCH_PATTERN) {\n             RestMatchPatternNode restMatchPatternNode = (RestMatchPatternNode) matchPattern;\n             BLangRestMatchPattern bLangRestMatchPattern = (BLangRestMatchPattern) TreeBuilder.createRestMatchPattern();\n             bLangRestMatchPattern.pos = matchPatternPos;\n \n             SimpleNameReferenceNode variableName = restMatchPatternNode.variableName();\n             bLangRestMatchPattern.setIdentifier(createIdentifier(getPosition(variableName), variableName.name()));\n             return bLangRestMatchPattern;\n-        } else {\n-            // TODO : Remove this after all binding patterns are implemented\n-            dlog.error(matchPatternPos, DiagnosticCode.MATCH_PATTERN_NOT_SUPPORTED);\n-            return null;\n         }\n+\n+        if (kind == SyntaxKind.MAPPING_MATCH_PATTERN) {\n+            MappingMatchPatternNode mappingMatchPatternNode = (MappingMatchPatternNode) matchPattern;\n+            BLangMappingMatchPattern bLangMappingMatchPattern =\n+                    (BLangMappingMatchPattern) TreeBuilder.createMappingMatchPattern();\n+            bLangMappingMatchPattern.pos = matchPatternPos;\n+\n+            for (FieldMatchPatternNode fieldMatchPatternNode : mappingMatchPatternNode.fieldMatchPatterns()) {\n+                bLangMappingMatchPattern.fieldMatchPatterns.add((BLangFieldMatchPattern)\n+                        transformMatchPattern(fieldMatchPatternNode));\n+            }\n+            if (mappingMatchPatternNode.restMatchPattern().isPresent()) {\n+                bLangMappingMatchPattern.restMatchPattern =\n+                        (BLangRestMatchPattern) transformMatchPattern(mappingMatchPatternNode.restMatchPattern().get());\n+            }\n+\n+            return bLangMappingMatchPattern;\n+        }\n+\n+        if (kind == SyntaxKind.FIELD_MATCH_PATTERN) {\n+            FieldMatchPatternNode fieldMatchPatternNode = (FieldMatchPatternNode) matchPattern;\n+            BLangFieldMatchPattern bLangFieldMatchPattern =\n+                    (BLangFieldMatchPattern) TreeBuilder.createFieldMatchPattern();\n+\n+            bLangFieldMatchPattern.fieldName =\n+                    createIdentifier(fieldMatchPatternNode.fieldNameNode());\n+            bLangFieldMatchPattern.matchPattern = transformMatchPattern(fieldMatchPatternNode.matchPattern());\n+            return bLangFieldMatchPattern;\n+        }\n+\n+        // TODO : Remove this after all binding patterns are implemented", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQwMDkzOA=="}, "originalCommit": {"oid": "60633c4b0cba351b0952428c39168a63cc34d2df"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjg2NzczOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNToxMDozM1rOH2-A1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODo1MTo0OFrOH3GFnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQwMTE3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void visit(BLangFieldMatchPattern fieldMatchPattern) {}\n          \n          \n            \n                public void visit(BLangFieldMatchPattern fieldMatchPattern) {\n          \n          \n            \n                }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r527401175", "createdAt": "2020-11-20T05:10:33Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -898,6 +900,13 @@ public void visit(BLangMatchClause matchClause) {\n         resetStatementReturns();\n     }\n \n+    @Override\n+    public void visit(BLangMappingMatchPattern mappingMatchPattern) {\n+    }\n+\n+    @Override\n+    public void visit(BLangFieldMatchPattern fieldMatchPattern) {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60633c4b0cba351b0952428c39168a63cc34d2df"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUzMzQ3MQ==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r527533471", "createdAt": "2020-11-20T08:51:48Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/CodeAnalyzer.java", "diffHunk": "@@ -898,6 +900,13 @@ public void visit(BLangMatchClause matchClause) {\n         resetStatementReturns();\n     }\n \n+    @Override\n+    public void visit(BLangMappingMatchPattern mappingMatchPattern) {\n+    }\n+\n+    @Override\n+    public void visit(BLangFieldMatchPattern fieldMatchPattern) {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQwMTE3NQ=="}, "originalCommit": {"oid": "60633c4b0cba351b0952428c39168a63cc34d2df"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjkyMTIxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeNarrower.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNToyODo0MFrOH2-kkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDoxMzo1NFrOIHuRDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQxMDMyMw==", "bodyText": "Is it correct to pass the pkgEnv here? Shouldn't it be the current env?\nFor example, if this env is eventually used to create a record for an intersection, and that intersection is within a function, the owner has to be the function and not the module?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r527410323", "createdAt": "2020-11-20T05:28:40Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeNarrower.java", "diffHunk": "@@ -257,15 +258,16 @@ private NarrowedTypes getNarrowedTypesForBinaryOp(Map<BVarSymbol, NarrowedTypes>\n             rhsTrueType = rhsFalseType = symbol.type;\n         }\n \n+        SymbolEnv pkgEnv = symTable.pkgEnvMap.get(this.env.enclPkg.symbol);\n         BType trueType, falseType;\n         if (operator == OperatorKind.AND) {\n-            trueType = types.getTypeIntersection(lhsTrueType, rhsTrueType);\n-            BType tmpType = types.getTypeIntersection(lhsTrueType, rhsFalseType);\n+            trueType = types.getTypeIntersection(lhsTrueType, rhsTrueType, pkgEnv);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60633c4b0cba351b0952428c39168a63cc34d2df"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUzMzkzOQ==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r527533939", "createdAt": "2020-11-20T08:52:39Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeNarrower.java", "diffHunk": "@@ -257,15 +258,16 @@ private NarrowedTypes getNarrowedTypesForBinaryOp(Map<BVarSymbol, NarrowedTypes>\n             rhsTrueType = rhsFalseType = symbol.type;\n         }\n \n+        SymbolEnv pkgEnv = symTable.pkgEnvMap.get(this.env.enclPkg.symbol);\n         BType trueType, falseType;\n         if (operator == OperatorKind.AND) {\n-            trueType = types.getTypeIntersection(lhsTrueType, rhsTrueType);\n-            BType tmpType = types.getTypeIntersection(lhsTrueType, rhsFalseType);\n+            trueType = types.getTypeIntersection(lhsTrueType, rhsTrueType, pkgEnv);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQxMDMyMw=="}, "originalCommit": {"oid": "60633c4b0cba351b0952428c39168a63cc34d2df"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUxNzQyNQ==", "bodyText": "Still seems to be using pkgEnv?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r541517425", "createdAt": "2020-12-12T06:44:45Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeNarrower.java", "diffHunk": "@@ -257,15 +258,16 @@ private NarrowedTypes getNarrowedTypesForBinaryOp(Map<BVarSymbol, NarrowedTypes>\n             rhsTrueType = rhsFalseType = symbol.type;\n         }\n \n+        SymbolEnv pkgEnv = symTable.pkgEnvMap.get(this.env.enclPkg.symbol);\n         BType trueType, falseType;\n         if (operator == OperatorKind.AND) {\n-            trueType = types.getTypeIntersection(lhsTrueType, rhsTrueType);\n-            BType tmpType = types.getTypeIntersection(lhsTrueType, rhsFalseType);\n+            trueType = types.getTypeIntersection(lhsTrueType, rhsTrueType, pkgEnv);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQxMDMyMw=="}, "originalCommit": {"oid": "60633c4b0cba351b0952428c39168a63cc34d2df"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk2ODk3Mg==", "bodyText": "I missed that, fixed it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r544968972", "createdAt": "2020-12-17T10:13:54Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeNarrower.java", "diffHunk": "@@ -257,15 +258,16 @@ private NarrowedTypes getNarrowedTypesForBinaryOp(Map<BVarSymbol, NarrowedTypes>\n             rhsTrueType = rhsFalseType = symbol.type;\n         }\n \n+        SymbolEnv pkgEnv = symTable.pkgEnvMap.get(this.env.enclPkg.symbol);\n         BType trueType, falseType;\n         if (operator == OperatorKind.AND) {\n-            trueType = types.getTypeIntersection(lhsTrueType, rhsTrueType);\n-            BType tmpType = types.getTypeIntersection(lhsTrueType, rhsFalseType);\n+            trueType = types.getTypeIntersection(lhsTrueType, rhsTrueType, pkgEnv);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQxMDMyMw=="}, "originalCommit": {"oid": "60633c4b0cba351b0952428c39168a63cc34d2df"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMDkyMTI2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/matchpatterns/MappingMatchPatternNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwNToyMjo0MlrOIEa46A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDoxMzo0N1rOIHuQzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUwNTc2OA==", "bodyText": "Is this used? If this is needed how come we don not need set methods for the field match patterns?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r541505768", "createdAt": "2020-12-12T05:22:42Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/matchpatterns/MappingMatchPatternNode.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.model.tree.matchpatterns;\n+\n+import org.ballerinalang.model.tree.Node;\n+\n+import java.util.List;\n+\n+/**\n+ * The interface with the APIs to implement the mapping-match-pattern.\n+ *\n+ * @since 2.0.0\n+ */\n+public interface MappingMatchPatternNode extends Node {\n+    List<? extends FieldMatchPatternNode> getFieldMatchPatterns();\n+\n+    RestMatchPatternNode getRestMatchPattern();\n+\n+    void setRestMatchPattern(RestMatchPatternNode restMatchPattern);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk2ODkwOA==", "bodyText": "Added setters", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r544968908", "createdAt": "2020-12-17T10:13:47Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/matchpatterns/MappingMatchPatternNode.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.model.tree.matchpatterns;\n+\n+import org.ballerinalang.model.tree.Node;\n+\n+import java.util.List;\n+\n+/**\n+ * The interface with the APIs to implement the mapping-match-pattern.\n+ *\n+ * @since 2.0.0\n+ */\n+public interface MappingMatchPatternNode extends Node {\n+    List<? extends FieldMatchPatternNode> getFieldMatchPatterns();\n+\n+    RestMatchPatternNode getRestMatchPattern();\n+\n+    void setRestMatchPattern(RestMatchPatternNode restMatchPattern);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUwNTc2OA=="}, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMDkyODc3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/NodeCloner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwNToyODo1N1rOIEa8Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDoxMzo0NVrOIHuQuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUwNjU4Ng==", "bodyText": "Do we need to set the symbol also here? We don't usually do that in the node cloner, right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r541506586", "createdAt": "2020-12-12T05:28:57Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/NodeCloner.java", "diffHunk": "@@ -746,6 +748,23 @@ public void visit(BLangListMatchPattern source) {\n         clone.declaredVars = source.declaredVars;\n     }\n \n+    @Override\n+    public void visit(BLangCaptureBindingPattern source) {\n+        BLangCaptureBindingPattern clone = new BLangCaptureBindingPattern();\n+        source.cloneRef = clone;\n+        clone.setIdentifier(source.getIdentifier());\n+        clone.symbol = (BVarSymbol) source.getSymbol();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk2ODg5MQ==", "bodyText": "Yes, removed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r544968891", "createdAt": "2020-12-17T10:13:45Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/NodeCloner.java", "diffHunk": "@@ -746,6 +748,23 @@ public void visit(BLangListMatchPattern source) {\n         clone.declaredVars = source.declaredVars;\n     }\n \n+    @Override\n+    public void visit(BLangCaptureBindingPattern source) {\n+        BLangCaptureBindingPattern clone = new BLangCaptureBindingPattern();\n+        source.cloneRef = clone;\n+        clone.setIdentifier(source.getIdentifier());\n+        clone.symbol = (BVarSymbol) source.getSymbol();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUwNjU4Ng=="}, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMDk4Njk2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwNjoxMzoxNFrOIEbUtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDoxMzo0MlrOIHuQow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUxMjg4NA==", "bodyText": "The following should work, right? x in the block scope should override the one in module scope?\nmap<int> x = {};\n\npublic function main() {\n    map<int> m = {a: 1, b: 2, c: 3};\n\n    // var x = m; // OK\n\n    match m {\n        {a: 1, ...var x} => {\n\n        }\n    }\n}\nFails with a \"redeclared symbol 'x'\" error for the module-level variable.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r541512884", "createdAt": "2020-12-12T06:13:14Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -2349,7 +2356,20 @@ public void visit(BLangMatchClause matchClause) {\n         SymbolEnv blockEnv = SymbolEnv.createBlockEnv(matchClause.blockStmt, env);\n \n         for (BLangMatchPattern matchPattern : matchClause.matchPatterns) {\n-            analyzeNode(matchPattern, blockEnv);\n+            SymbolEnv patternEnv = SymbolEnv.createPatternEnv(matchPattern, env);\n+            analyzeNode(matchPattern, patternEnv);\n+            Map<String, BVarSymbol> clauseVariables = matchClause.declaredVars;\n+            Map<String, BVarSymbol> patternVariables = matchPattern.declaredVars;\n+            for (String patternVariableName : patternVariables.keySet()) {\n+                BVarSymbol patternVariableSymbol = patternVariables.get(patternVariableName);\n+                if (!clauseVariables.containsKey(patternVariableName)) {\n+                    symbolEnter.defineSymbol(patternVariableSymbol.pos, patternVariableSymbol, blockEnv);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk2ODg2Nw==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r544968867", "createdAt": "2020-12-17T10:13:42Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SemanticAnalyzer.java", "diffHunk": "@@ -2349,7 +2356,20 @@ public void visit(BLangMatchClause matchClause) {\n         SymbolEnv blockEnv = SymbolEnv.createBlockEnv(matchClause.blockStmt, env);\n \n         for (BLangMatchPattern matchPattern : matchClause.matchPatterns) {\n-            analyzeNode(matchPattern, blockEnv);\n+            SymbolEnv patternEnv = SymbolEnv.createPatternEnv(matchPattern, env);\n+            analyzeNode(matchPattern, patternEnv);\n+            Map<String, BVarSymbol> clauseVariables = matchClause.declaredVars;\n+            Map<String, BVarSymbol> patternVariables = matchPattern.declaredVars;\n+            for (String patternVariableName : patternVariables.keySet()) {\n+                BVarSymbol patternVariableSymbol = patternVariables.get(patternVariableName);\n+                if (!clauseVariables.containsKey(patternVariableName)) {\n+                    symbolEnter.defineSymbol(patternVariableSymbol.pos, patternVariableSymbol, blockEnv);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUxMjg4NA=="}, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMTAwMzQ1OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/mapping-match-pattern.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwNjoyNDo1OVrOIEbbmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDoxMzo0MFrOIHuQbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUxNDY0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    {a:\"str\"} => {\n          \n          \n            \n                    {a: \"str\"} => {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r541514649", "createdAt": "2020-12-12T06:24:59Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/mapping-match-pattern.bal", "diffHunk": "@@ -0,0 +1,516 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+function mappingMatchPattern1(any v) returns string {\n+    match v {\n+        {a:\"str\"} => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk2ODgxNA==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r544968814", "createdAt": "2020-12-17T10:13:40Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/mapping-match-pattern.bal", "diffHunk": "@@ -0,0 +1,516 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+function mappingMatchPattern1(any v) returns string {\n+    match v {\n+        {a:\"str\"} => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUxNDY0OQ=="}, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMTAwOTkxOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/mapping-mach-pattern-negative.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwNjozMDoxMFrOIEbeTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDoxMzozN1rOIHuQSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUxNTM0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    { x : var a, y : 3 } => {\n          \n          \n            \n                    {x: var a, y: 3} => {\n          \n      \n    \n    \n  \n\nPlease fix formatting in all of the tests introduced here.\n\nno space after { and before }\nk1: v1, k2: v2 - no space before the colon, have a space after a comma and a colon", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r541515342", "createdAt": "2020-12-12T06:30:10Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/mapping-mach-pattern-negative.bal", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+const string CONST1 = \"str\";\n+\n+function testMappingMatchPatternNegative() returns string {\n+\n+    boolean v1 = true;\n+    match v1 {\n+        { a : true } => { // pattern will not be matched\n+            return \"Match\";\n+        }\n+    }\n+\n+    map<int> v2 = { a : 2 };\n+    match v2 {\n+        { a : \"2\" } => { // pattern will not be matched\n+            return \"Match\";\n+        }\n+        { x : 2, y : \"2\" } | { x : 3, y : \"3\"} => { // pattern will not be matched\n+            return \"Match\";\n+        }\n+        { c1 : CONST1, c2 : 2 } => { // pattern will not be matched\n+            return \"Match\";\n+        }\n+    }\n+\n+    map<int|string> v3 = { a : 2, b : \"2\" };\n+    match v3 {\n+        { a : 2 , b : true } => { // pattern will not be matched\n+            return \"Match\";\n+        }\n+        { a : CONST1 , b : true } => { // pattern will not be matched\n+            return \"Match\";\n+        }\n+    }\n+\n+    return \"No match\";\n+\n+}\n+\n+const X = 2;\n+const Y = 4;\n+function testSameMatchPatternsNegative1() {\n+    map<int> v = { x : 1, y : 2 };\n+    match v {\n+        { x : var a, y : 2 } | { x : var a, y : 2 } => { // unreachable pattern\n+        }\n+        { x : var a, y : 3 } => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk2ODc3Ng==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r544968776", "createdAt": "2020-12-17T10:13:37Z", "author": {"login": "KavinduZoysa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/mapping-mach-pattern-negative.bal", "diffHunk": "@@ -0,0 +1,100 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+const string CONST1 = \"str\";\n+\n+function testMappingMatchPatternNegative() returns string {\n+\n+    boolean v1 = true;\n+    match v1 {\n+        { a : true } => { // pattern will not be matched\n+            return \"Match\";\n+        }\n+    }\n+\n+    map<int> v2 = { a : 2 };\n+    match v2 {\n+        { a : \"2\" } => { // pattern will not be matched\n+            return \"Match\";\n+        }\n+        { x : 2, y : \"2\" } | { x : 3, y : \"3\"} => { // pattern will not be matched\n+            return \"Match\";\n+        }\n+        { c1 : CONST1, c2 : 2 } => { // pattern will not be matched\n+            return \"Match\";\n+        }\n+    }\n+\n+    map<int|string> v3 = { a : 2, b : \"2\" };\n+    match v3 {\n+        { a : 2 , b : true } => { // pattern will not be matched\n+            return \"Match\";\n+        }\n+        { a : CONST1 , b : true } => { // pattern will not be matched\n+            return \"Match\";\n+        }\n+    }\n+\n+    return \"No match\";\n+\n+}\n+\n+const X = 2;\n+const Y = 4;\n+function testSameMatchPatternsNegative1() {\n+    map<int> v = { x : 1, y : 2 };\n+    match v {\n+        { x : var a, y : 2 } | { x : var a, y : 2 } => { // unreachable pattern\n+        }\n+        { x : var a, y : 3 } => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUxNTM0Mg=="}, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMTA0NjI4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwNjo1ODoyNlrOIEbttA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwNDo1ODoxN1rOISflXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUxOTI4NA==", "bodyText": "Wouldn't the isAssignable check handle this and more cases here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r541519284", "createdAt": "2020-12-12T06:58:26Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -381,10 +404,32 @@ private boolean containsAnyType(BType type) {\n         return false;\n     }\n \n+    private boolean containsAnyDataType(BType type) {\n+        if (type.tag != TypeTags.UNION) {\n+            return type.tag == TypeTags.ANYDATA;\n+        }\n+\n+        for (BType memberTypes : ((BUnionType) type).getMemberTypes()) {\n+            if (memberTypes.tag == TypeTags.ANYDATA) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n     public BType mergeTypes(BType typeFirst, BType typeSecond) {\n-        if (containsAnyType(typeFirst)) {\n+        if (containsAnyType(typeFirst) && !containsErrorType(typeSecond)) {\n             return typeSecond;\n         }\n+        if (containsAnyType(typeSecond) && !containsErrorType(typeFirst)) {\n+            return typeFirst;\n+        }\n+        if (containsAnyDataType(typeFirst) && !containsErrorType(typeSecond)) {\n+            return typeSecond;\n+        }\n+        if (containsAnyDataType(typeSecond) && !containsErrorType(typeFirst)) {\n+            return typeFirst;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI2Mjc0OQ==", "bodyText": "Ping on this.\nAlso I don't think the subsequent check with isSameBasicType works either.\nFor example, if you passed int as the first type and 'int:Signed16 as the second type we would return int here.\nBut if we pass 'int:Signed16 as the first type as int as the second type we would return 'int:Signed16. Is this correct?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r556262749", "createdAt": "2021-01-13T04:58:17Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -381,10 +404,32 @@ private boolean containsAnyType(BType type) {\n         return false;\n     }\n \n+    private boolean containsAnyDataType(BType type) {\n+        if (type.tag != TypeTags.UNION) {\n+            return type.tag == TypeTags.ANYDATA;\n+        }\n+\n+        for (BType memberTypes : ((BUnionType) type).getMemberTypes()) {\n+            if (memberTypes.tag == TypeTags.ANYDATA) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n     public BType mergeTypes(BType typeFirst, BType typeSecond) {\n-        if (containsAnyType(typeFirst)) {\n+        if (containsAnyType(typeFirst) && !containsErrorType(typeSecond)) {\n             return typeSecond;\n         }\n+        if (containsAnyType(typeSecond) && !containsErrorType(typeFirst)) {\n+            return typeFirst;\n+        }\n+        if (containsAnyDataType(typeFirst) && !containsErrorType(typeSecond)) {\n+            return typeSecond;\n+        }\n+        if (containsAnyDataType(typeSecond) && !containsErrorType(typeFirst)) {\n+            return typeFirst;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUxOTI4NA=="}, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMTA0OTU1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwNzowMDo0OVrOIEbvEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDoxMzozMlrOIHuQEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUxOTYzMg==", "bodyText": "This can be a package-private method.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r541519632", "createdAt": "2020-12-12T07:00:49Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -381,10 +404,32 @@ private boolean containsAnyType(BType type) {\n         return false;\n     }\n \n+    private boolean containsAnyDataType(BType type) {\n+        if (type.tag != TypeTags.UNION) {\n+            return type.tag == TypeTags.ANYDATA;\n+        }\n+\n+        for (BType memberTypes : ((BUnionType) type).getMemberTypes()) {\n+            if (memberTypes.tag == TypeTags.ANYDATA) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n     public BType mergeTypes(BType typeFirst, BType typeSecond) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk2ODcyMw==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r544968723", "createdAt": "2020-12-17T10:13:32Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -381,10 +404,32 @@ private boolean containsAnyType(BType type) {\n         return false;\n     }\n \n+    private boolean containsAnyDataType(BType type) {\n+        if (type.tag != TypeTags.UNION) {\n+            return type.tag == TypeTags.ANYDATA;\n+        }\n+\n+        for (BType memberTypes : ((BUnionType) type).getMemberTypes()) {\n+            if (memberTypes.tag == TypeTags.ANYDATA) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n     public BType mergeTypes(BType typeFirst, BType typeSecond) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUxOTYzMg=="}, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMTA3NDc3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwNzoyMDo0MlrOIEb5zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDoxMzoyOFrOIHuP9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUyMjM4Mg==", "bodyText": "The following results in a bad, sad error here.\npublic function main() {\n    map<int>|map<json> m = {a: \"foo\", b: 2, c: 3};\n\n    match m {\n        {a: 1, ...var x}|{a: \"foo\", ...var x} => {\n\n        }\n    }\n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r541522382", "createdAt": "2020-12-12T07:20:42Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -3203,89 +3227,256 @@ private BLangExpression createConditionForListMemberPattern(int index, BLangMatc\n         return createVarCheckCondition(listMemberMatchPattern, tempVarRef);\n     }\n \n-    private BLangExpression createVarCheckCondition(BLangMatchPattern matchPattern,\n-                                                    BLangSimpleVarRef varRef) {\n+    private BLangExpression createConditionForMappingMatchPattern(BLangMappingMatchPattern mappingMatchPattern,\n+                                                                  BLangSimpleVarRef matchExprVarRef) {\n+        BType matchPatternType = mappingMatchPattern.type;\n+        Location pos = mappingMatchPattern.pos;\n \n-        NodeKind patternKind = matchPattern.getKind();\n-        switch (patternKind) {\n-            case WILDCARD_MATCH_PATTERN:\n-                return createConditionForWildCardMatchPattern((BLangWildCardMatchPattern) matchPattern);\n-            case CONST_MATCH_PATTERN:\n-                return createConditionForConstMatchPattern((BLangConstPattern) matchPattern, varRef);\n-            case VAR_BINDING_PATTERN_MATCH_PATTERN:\n-                return createConditionForVarBindingPatternMatchPattern(\n-                        (BLangVarBindingPatternMatchPattern) matchPattern, varRef);\n-            case LIST_MATCH_PATTERN:\n-                BLangListMatchPattern listMatchPattern = (BLangListMatchPattern) matchPattern;\n-                Location pos = listMatchPattern.pos;\n-                BLangBlockStmt blockStmt = ASTBuilderUtil.createBlockStmt(pos);\n-\n-                BLangSimpleVariableDef resultVarDef = createVarDef(\"$listPatternVarResult$\", symTable.booleanType, null,\n-                        pos);\n-                BLangSimpleVarRef resultVarRef = ASTBuilderUtil.createVariableRef(pos, resultVarDef.var.symbol);\n-                blockStmt.addStatement(resultVarDef);\n-\n-                BLangAssignment failureResult =\n-                        ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(false));\n-                BLangAssignment successResult =\n-                        ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(true));\n-                blockStmt.addStatement(failureResult);\n-\n-                List<BType> memberTupleTypes = ((BTupleType) varRef.type).getTupleTypes();\n-                List<BLangMatchPattern> matchPatterns = listMatchPattern.matchPatterns;\n-\n-                BLangSimpleVariableDef tempCastVarDef = createVarDef(\"$castTemp$\", varRef.type, varRef, pos);\n-                blockStmt.addStatement(tempCastVarDef);\n-                BLangExpression condition = createConditionForListMemberPattern(0, matchPatterns.get(0),\n-                        tempCastVarDef, blockStmt, memberTupleTypes.get(0), pos);\n-\n-                for (int i = 1; i < matchPatterns.size(); i++) {\n-                    BLangExpression memberPatternCondition = createConditionForListMemberPattern(i,\n-                            matchPatterns.get(i), tempCastVarDef, blockStmt, memberTupleTypes.get(i), pos);\n-\n-                    condition = ASTBuilderUtil.createBinaryExpr(pos, condition, memberPatternCondition,\n-                            symTable.booleanType, OperatorKind.AND, (BOperatorSymbol) symResolver\n-                                    .resolveBinaryOperator(OperatorKind.AND, symTable.booleanType,\n-                                            symTable.booleanType));\n-                }\n+        BLangSimpleVariableDef resultVarDef = createVarDef(\"$mappingPatternResult$\", symTable.booleanType, null, pos);\n+        BLangSimpleVarRef resultVarRef = ASTBuilderUtil.createVariableRef(pos, resultVarDef.var.symbol);\n+        BLangBlockStmt mainBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+        mainBlockStmt.addStatement(resultVarDef);\n+\n+        BLangAssignment failureResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(false));\n+        BLangAssignment successResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(true));\n+        mainBlockStmt.addStatement(failureResult);\n \n-                BLangBlockStmt tempBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n-                tempBlockStmt.addStatement(successResult);\n-                BLangIf ifStmtForMatchPatterns = ASTBuilderUtil.createIfElseStmt(pos, condition, tempBlockStmt, null);\n-                blockStmt.addStatement(ifStmtForMatchPatterns);\n+        BLangExpression typeCheckCondition = createIsLikeExpression(mappingMatchPattern.pos, matchExprVarRef,\n+                matchPatternType);\n+        BLangExpression typeConvertedExpr = addConversionExprIfRequired(matchExprVarRef, matchPatternType);\n+        BLangSimpleVariableDef tempCastVarDef = createVarDef(\"$castTemp$\", matchPatternType, typeConvertedExpr, pos);\n+        BLangSimpleVarRef tempCastVarRef = ASTBuilderUtil.createVariableRef(pos, tempCastVarDef.var.symbol);\n \n-                BLangStatementExpression statementExpression = ASTBuilderUtil.createStatementExpression(blockStmt,\n-                        resultVarRef);\n-                statementExpression.type = symTable.booleanType;\n-                return statementExpression;\n-            default:\n-                // If some patterns are not implemented, those should be detected before this phase\n-                // TODO : Remove this after all patterns are implemented\n-                return null;\n+        BLangBlockStmt ifBlock = ASTBuilderUtil.createBlockStmt(pos);\n+        ifBlock.addStatement(tempCastVarDef);\n+        BLangIf ifStmt = ASTBuilderUtil.createIfElseStmt(pos, typeCheckCondition, ifBlock, null);\n+        mainBlockStmt.addStatement(ifStmt);\n+\n+        BLangExpression condition = createConditionForFieldMatchPatterns(mappingMatchPattern.fieldMatchPatterns,\n+                tempCastVarDef, ifBlock, pos);\n+\n+        BLangBlockStmt tempBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+        tempBlockStmt.addStatement(successResult);\n+        if (mappingMatchPattern.restMatchPattern != null) {\n+            BLangRestMatchPattern restMatchPattern = mappingMatchPattern.restMatchPattern;\n+            Location restPatternPos = restMatchPattern.pos;\n+            List<String> keysToRemove = getKeysToRemove(mappingMatchPattern);\n+            BMapType entriesType = new BMapType(TypeTags.MAP, new BTupleType(Arrays.asList(symTable.stringType,\n+                    ((BRecordType) matchPatternType).restFieldType)), null);\n+            BLangInvocation entriesInvocation = generateMapEntriesInvocation(tempCastVarRef, entriesType);\n+            BLangSimpleVariableDef entriesVarDef = createVarDef(\"$entries$\", entriesType, entriesInvocation,\n+                    restPatternPos);\n+            tempBlockStmt.addStatement(entriesVarDef);\n+            BLangLambdaFunction filteringFunction = createFuncToFilterOutRestParam(keysToRemove, restPatternPos);\n+            BLangInvocation filterInvocation = generateMapFilterInvocation(pos, entriesVarDef.var, filteringFunction);\n+            BLangSimpleVariableDef filtersVarDef = createVarDef(\"$filteredVarDef$\", entriesType, filterInvocation,\n+                    restPatternPos);\n+            tempBlockStmt.addStatement(filtersVarDef);\n+            BLangLambdaFunction backToMapLambda = generateEntriesToMapLambda(restPatternPos);\n+            BLangInvocation mapInvocation = generateMapMapInvocation(restPatternPos, filtersVarDef.var,\n+                    backToMapLambda);\n+            BLangSimpleVariable restVar =\n+                    ASTBuilderUtil.createVariable(restPatternPos, restMatchPattern.getIdentifier().getValue(),\n+                            restMatchPattern.symbol.type, mapInvocation, restMatchPattern.symbol);\n+            BLangSimpleVariableDef restVarDef = ASTBuilderUtil.createVariableDef(restPatternPos, restVar);\n+            tempBlockStmt.addStatement(restVarDef);\n+        }\n+        BLangIf ifStmtForMatchPatterns = ASTBuilderUtil.createIfElseStmt(pos, condition, tempBlockStmt, null);\n+        ifBlock.addStatement(ifStmtForMatchPatterns);\n+\n+        BLangStatementExpression statementExpression = ASTBuilderUtil.createStatementExpression(mainBlockStmt,\n+                resultVarRef);\n+        statementExpression.type = symTable.booleanType;\n+\n+        addAsRecordTypeDefinition(matchPatternType, pos);\n+        return statementExpression;\n+    }\n+\n+    private List<String> getKeysToRemove(BLangMappingMatchPattern mappingMatchPattern) {\n+        List<String> allKeys = new ArrayList<>(((BRecordType) mappingMatchPattern.type).fields.keySet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk2ODY5Mw==", "bodyText": "fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r544968693", "createdAt": "2020-12-17T10:13:28Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -3203,89 +3227,256 @@ private BLangExpression createConditionForListMemberPattern(int index, BLangMatc\n         return createVarCheckCondition(listMemberMatchPattern, tempVarRef);\n     }\n \n-    private BLangExpression createVarCheckCondition(BLangMatchPattern matchPattern,\n-                                                    BLangSimpleVarRef varRef) {\n+    private BLangExpression createConditionForMappingMatchPattern(BLangMappingMatchPattern mappingMatchPattern,\n+                                                                  BLangSimpleVarRef matchExprVarRef) {\n+        BType matchPatternType = mappingMatchPattern.type;\n+        Location pos = mappingMatchPattern.pos;\n \n-        NodeKind patternKind = matchPattern.getKind();\n-        switch (patternKind) {\n-            case WILDCARD_MATCH_PATTERN:\n-                return createConditionForWildCardMatchPattern((BLangWildCardMatchPattern) matchPattern);\n-            case CONST_MATCH_PATTERN:\n-                return createConditionForConstMatchPattern((BLangConstPattern) matchPattern, varRef);\n-            case VAR_BINDING_PATTERN_MATCH_PATTERN:\n-                return createConditionForVarBindingPatternMatchPattern(\n-                        (BLangVarBindingPatternMatchPattern) matchPattern, varRef);\n-            case LIST_MATCH_PATTERN:\n-                BLangListMatchPattern listMatchPattern = (BLangListMatchPattern) matchPattern;\n-                Location pos = listMatchPattern.pos;\n-                BLangBlockStmt blockStmt = ASTBuilderUtil.createBlockStmt(pos);\n-\n-                BLangSimpleVariableDef resultVarDef = createVarDef(\"$listPatternVarResult$\", symTable.booleanType, null,\n-                        pos);\n-                BLangSimpleVarRef resultVarRef = ASTBuilderUtil.createVariableRef(pos, resultVarDef.var.symbol);\n-                blockStmt.addStatement(resultVarDef);\n-\n-                BLangAssignment failureResult =\n-                        ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(false));\n-                BLangAssignment successResult =\n-                        ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(true));\n-                blockStmt.addStatement(failureResult);\n-\n-                List<BType> memberTupleTypes = ((BTupleType) varRef.type).getTupleTypes();\n-                List<BLangMatchPattern> matchPatterns = listMatchPattern.matchPatterns;\n-\n-                BLangSimpleVariableDef tempCastVarDef = createVarDef(\"$castTemp$\", varRef.type, varRef, pos);\n-                blockStmt.addStatement(tempCastVarDef);\n-                BLangExpression condition = createConditionForListMemberPattern(0, matchPatterns.get(0),\n-                        tempCastVarDef, blockStmt, memberTupleTypes.get(0), pos);\n-\n-                for (int i = 1; i < matchPatterns.size(); i++) {\n-                    BLangExpression memberPatternCondition = createConditionForListMemberPattern(i,\n-                            matchPatterns.get(i), tempCastVarDef, blockStmt, memberTupleTypes.get(i), pos);\n-\n-                    condition = ASTBuilderUtil.createBinaryExpr(pos, condition, memberPatternCondition,\n-                            symTable.booleanType, OperatorKind.AND, (BOperatorSymbol) symResolver\n-                                    .resolveBinaryOperator(OperatorKind.AND, symTable.booleanType,\n-                                            symTable.booleanType));\n-                }\n+        BLangSimpleVariableDef resultVarDef = createVarDef(\"$mappingPatternResult$\", symTable.booleanType, null, pos);\n+        BLangSimpleVarRef resultVarRef = ASTBuilderUtil.createVariableRef(pos, resultVarDef.var.symbol);\n+        BLangBlockStmt mainBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+        mainBlockStmt.addStatement(resultVarDef);\n+\n+        BLangAssignment failureResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(false));\n+        BLangAssignment successResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(true));\n+        mainBlockStmt.addStatement(failureResult);\n \n-                BLangBlockStmt tempBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n-                tempBlockStmt.addStatement(successResult);\n-                BLangIf ifStmtForMatchPatterns = ASTBuilderUtil.createIfElseStmt(pos, condition, tempBlockStmt, null);\n-                blockStmt.addStatement(ifStmtForMatchPatterns);\n+        BLangExpression typeCheckCondition = createIsLikeExpression(mappingMatchPattern.pos, matchExprVarRef,\n+                matchPatternType);\n+        BLangExpression typeConvertedExpr = addConversionExprIfRequired(matchExprVarRef, matchPatternType);\n+        BLangSimpleVariableDef tempCastVarDef = createVarDef(\"$castTemp$\", matchPatternType, typeConvertedExpr, pos);\n+        BLangSimpleVarRef tempCastVarRef = ASTBuilderUtil.createVariableRef(pos, tempCastVarDef.var.symbol);\n \n-                BLangStatementExpression statementExpression = ASTBuilderUtil.createStatementExpression(blockStmt,\n-                        resultVarRef);\n-                statementExpression.type = symTable.booleanType;\n-                return statementExpression;\n-            default:\n-                // If some patterns are not implemented, those should be detected before this phase\n-                // TODO : Remove this after all patterns are implemented\n-                return null;\n+        BLangBlockStmt ifBlock = ASTBuilderUtil.createBlockStmt(pos);\n+        ifBlock.addStatement(tempCastVarDef);\n+        BLangIf ifStmt = ASTBuilderUtil.createIfElseStmt(pos, typeCheckCondition, ifBlock, null);\n+        mainBlockStmt.addStatement(ifStmt);\n+\n+        BLangExpression condition = createConditionForFieldMatchPatterns(mappingMatchPattern.fieldMatchPatterns,\n+                tempCastVarDef, ifBlock, pos);\n+\n+        BLangBlockStmt tempBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+        tempBlockStmt.addStatement(successResult);\n+        if (mappingMatchPattern.restMatchPattern != null) {\n+            BLangRestMatchPattern restMatchPattern = mappingMatchPattern.restMatchPattern;\n+            Location restPatternPos = restMatchPattern.pos;\n+            List<String> keysToRemove = getKeysToRemove(mappingMatchPattern);\n+            BMapType entriesType = new BMapType(TypeTags.MAP, new BTupleType(Arrays.asList(symTable.stringType,\n+                    ((BRecordType) matchPatternType).restFieldType)), null);\n+            BLangInvocation entriesInvocation = generateMapEntriesInvocation(tempCastVarRef, entriesType);\n+            BLangSimpleVariableDef entriesVarDef = createVarDef(\"$entries$\", entriesType, entriesInvocation,\n+                    restPatternPos);\n+            tempBlockStmt.addStatement(entriesVarDef);\n+            BLangLambdaFunction filteringFunction = createFuncToFilterOutRestParam(keysToRemove, restPatternPos);\n+            BLangInvocation filterInvocation = generateMapFilterInvocation(pos, entriesVarDef.var, filteringFunction);\n+            BLangSimpleVariableDef filtersVarDef = createVarDef(\"$filteredVarDef$\", entriesType, filterInvocation,\n+                    restPatternPos);\n+            tempBlockStmt.addStatement(filtersVarDef);\n+            BLangLambdaFunction backToMapLambda = generateEntriesToMapLambda(restPatternPos);\n+            BLangInvocation mapInvocation = generateMapMapInvocation(restPatternPos, filtersVarDef.var,\n+                    backToMapLambda);\n+            BLangSimpleVariable restVar =\n+                    ASTBuilderUtil.createVariable(restPatternPos, restMatchPattern.getIdentifier().getValue(),\n+                            restMatchPattern.symbol.type, mapInvocation, restMatchPattern.symbol);\n+            BLangSimpleVariableDef restVarDef = ASTBuilderUtil.createVariableDef(restPatternPos, restVar);\n+            tempBlockStmt.addStatement(restVarDef);\n+        }\n+        BLangIf ifStmtForMatchPatterns = ASTBuilderUtil.createIfElseStmt(pos, condition, tempBlockStmt, null);\n+        ifBlock.addStatement(ifStmtForMatchPatterns);\n+\n+        BLangStatementExpression statementExpression = ASTBuilderUtil.createStatementExpression(mainBlockStmt,\n+                resultVarRef);\n+        statementExpression.type = symTable.booleanType;\n+\n+        addAsRecordTypeDefinition(matchPatternType, pos);\n+        return statementExpression;\n+    }\n+\n+    private List<String> getKeysToRemove(BLangMappingMatchPattern mappingMatchPattern) {\n+        List<String> allKeys = new ArrayList<>(((BRecordType) mappingMatchPattern.type).fields.keySet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUyMjM4Mg=="}, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMTA4MDIwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwNzoyNDo0NlrOIEb8GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDoxMzoyNlrOIHuP5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUyMjk2OQ==", "bodyText": "Please recheck the access modifiers for these methods. Seems like they don't have to be public.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r541522969", "createdAt": "2020-12-12T07:24:46Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -368,6 +379,18 @@ public BType resolvePatternTypeFromMatchExpr(BLangExpression matchExpr, BLangExp\n         return symTable.noType;\n     }\n \n+    public BType resolvePatternTypeFromMatchExpr(BLangMappingMatchPattern mappingMatchPattern, BType patternType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk2ODY3Nw==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r544968677", "createdAt": "2020-12-17T10:13:26Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -368,6 +379,18 @@ public BType resolvePatternTypeFromMatchExpr(BLangExpression matchExpr, BLangExp\n         return symTable.noType;\n     }\n \n+    public BType resolvePatternTypeFromMatchExpr(BLangMappingMatchPattern mappingMatchPattern, BType patternType,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUyMjk2OQ=="}, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMTA4MjkxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwNzoyNjo1MlrOIEb9PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDoxMzoyNFrOIHuPzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUyMzI2MA==", "bodyText": "The comment is no longer relevant?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r541523260", "createdAt": "2020-12-12T07:26:52Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2736,25 +2781,16 @@ BType getTypeForFiniteTypeValuesAssignableToType(BFiniteType finiteType, BType t\n      * @return           a single type or a new union type if at least one member type of the union type is\n      *                      assignable to targetType, else semanticError\n      */\n-    BType getTypeForUnionTypeMembersAssignableToType(BUnionType unionType, BType targetType) {\n+    BType getTypeForUnionTypeMembersAssignableToType(BUnionType unionType, BType targetType, SymbolEnv env) {\n         List<BType> intersection = new LinkedList<>();\n \n         // type FooOne \"foo\"|1;\n         // type FooBar \"foo\"|\"bar\";\n         // unionType - boolean|FooOne, targetType - boolean|FooBar", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk2ODY1NQ==", "bodyText": "Removed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r544968655", "createdAt": "2020-12-17T10:13:24Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2736,25 +2781,16 @@ BType getTypeForFiniteTypeValuesAssignableToType(BFiniteType finiteType, BType t\n      * @return           a single type or a new union type if at least one member type of the union type is\n      *                      assignable to targetType, else semanticError\n      */\n-    BType getTypeForUnionTypeMembersAssignableToType(BUnionType unionType, BType targetType) {\n+    BType getTypeForUnionTypeMembersAssignableToType(BUnionType unionType, BType targetType, SymbolEnv env) {\n         List<BType> intersection = new LinkedList<>();\n \n         // type FooOne \"foo\"|1;\n         // type FooBar \"foo\"|\"bar\";\n         // unionType - boolean|FooOne, targetType - boolean|FooBar", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUyMzI2MA=="}, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMTA4NjczOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwNzoyOTo0OFrOIEb-2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwNTowMTo1MFrOISfo8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUyMzY3Mg==", "bodyText": "Can you check if we can replace this entire method with a direct call to getTypeIntersection instead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r541523672", "createdAt": "2020-12-12T07:29:48Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2736,25 +2781,16 @@ BType getTypeForFiniteTypeValuesAssignableToType(BFiniteType finiteType, BType t\n      * @return           a single type or a new union type if at least one member type of the union type is\n      *                      assignable to targetType, else semanticError\n      */\n-    BType getTypeForUnionTypeMembersAssignableToType(BUnionType unionType, BType targetType) {\n+    BType getTypeForUnionTypeMembersAssignableToType(BUnionType unionType, BType targetType, SymbolEnv env) {\n         List<BType> intersection = new LinkedList<>();\n \n         // type FooOne \"foo\"|1;\n         // type FooBar \"foo\"|\"bar\";\n         // unionType - boolean|FooOne, targetType - boolean|FooBar\n         unionType.getMemberTypes().forEach(memType -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk2ODYyNw==", "bodyText": "I did not get what you mean here, As I understood it is to replace getTypeForUnionTypeMembersAssignableToType -> getTypeIntersection and remove the getTypeForUnionTypeMembersAssignableToType from the switch-case check in  getTypeIntersection. Is that correct?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r544968627", "createdAt": "2020-12-17T10:13:21Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2736,25 +2781,16 @@ BType getTypeForFiniteTypeValuesAssignableToType(BFiniteType finiteType, BType t\n      * @return           a single type or a new union type if at least one member type of the union type is\n      *                      assignable to targetType, else semanticError\n      */\n-    BType getTypeForUnionTypeMembersAssignableToType(BUnionType unionType, BType targetType) {\n+    BType getTypeForUnionTypeMembersAssignableToType(BUnionType unionType, BType targetType, SymbolEnv env) {\n         List<BType> intersection = new LinkedList<>();\n \n         // type FooOne \"foo\"|1;\n         // type FooBar \"foo\"|\"bar\";\n         // unionType - boolean|FooOne, targetType - boolean|FooBar\n         unionType.getMemberTypes().forEach(memType -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUyMzY3Mg=="}, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI2MzY2NA==", "bodyText": "I missed that this was getting called from getTypeIntersection. This is OK.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r556263664", "createdAt": "2021-01-13T05:01:50Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2736,25 +2781,16 @@ BType getTypeForFiniteTypeValuesAssignableToType(BFiniteType finiteType, BType t\n      * @return           a single type or a new union type if at least one member type of the union type is\n      *                      assignable to targetType, else semanticError\n      */\n-    BType getTypeForUnionTypeMembersAssignableToType(BUnionType unionType, BType targetType) {\n+    BType getTypeForUnionTypeMembersAssignableToType(BUnionType unionType, BType targetType, SymbolEnv env) {\n         List<BType> intersection = new LinkedList<>();\n \n         // type FooOne \"foo\"|1;\n         // type FooBar \"foo\"|\"bar\";\n         // unionType - boolean|FooOne, targetType - boolean|FooBar\n         unionType.getMemberTypes().forEach(memType -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUyMzY3Mg=="}, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMTA5MzQwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwNzozNTowOFrOIEcBqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDoxMzoxN1rOIHuPiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUyNDM5NQ==", "bodyText": "Given that it's just two case can't we do\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (targetType.tag != TypeTags.MAP && targetType.tag != TypeTags.RECORD) {\n          \n          \n            \n                        return symTable.semanticError;\n          \n          \n            \n                    }\n          \n          \n            \n                    if (targetType.tag == TypeTags.MAP) {\n          \n          \n            \n                        BType intersectionConstraintType = getTypeIntersection(mapType.constraint,\n          \n          \n            \n                                ((BMapType) targetType).constraint, env);\n          \n          \n            \n                        if (intersectionConstraintType == symTable.semanticError) {\n          \n          \n            \n                            return symTable.semanticError;\n          \n          \n            \n                        }\n          \n          \n            \n                        return new BMapType(TypeTags.MAP, intersectionConstraintType, null);\n          \n          \n            \n                    }\n          \n          \n            \n                    return getTypeIntersectedWithRecordType((BRecordType) targetType, mapType, env);\n          \n          \n            \n                    int targetTypeTag = targetType.tag;\n          \n          \n            \n                    \n          \n          \n            \n                    if (targetTypeTag == TypeTags.MAP) {\n          \n          \n            \n                        BType intersectionConstraintType = getTypeIntersection(mapType.constraint,\n          \n          \n            \n                                ((BMapType) targetType).constraint, env);\n          \n          \n            \n                        if (intersectionConstraintType == symTable.semanticError) {\n          \n          \n            \n                            return symTable.semanticError;\n          \n          \n            \n                        }\n          \n          \n            \n                        return new BMapType(TypeTags.MAP, intersectionConstraintType, null);\n          \n          \n            \n                    }\n          \n          \n            \n                    \n          \n          \n            \n                    if (targetTypeTag == TypeTags.RECORD) {\n          \n          \n            \n                        return getTypeIntersectedWithRecordType((BRecordType) targetType, mapType, env);\n          \n          \n            \n                    }\n          \n          \n            \n                    \n          \n          \n            \n                    return symTable.semanticError;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r541524395", "createdAt": "2020-12-12T07:35:08Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2769,6 +2805,146 @@ BType getTypeForUnionTypeMembersAssignableToType(BUnionType unionType, BType tar\n         }\n     }\n \n+    BType getTypeIntersectedWithMapType(BMapType mapType, BType targetType, SymbolEnv env) {\n+        if (targetType.tag != TypeTags.MAP && targetType.tag != TypeTags.RECORD) {\n+            return symTable.semanticError;\n+        }\n+        if (targetType.tag == TypeTags.MAP) {\n+            BType intersectionConstraintType = getTypeIntersection(mapType.constraint,\n+                    ((BMapType) targetType).constraint, env);\n+            if (intersectionConstraintType == symTable.semanticError) {\n+                return symTable.semanticError;\n+            }\n+            return new BMapType(TypeTags.MAP, intersectionConstraintType, null);\n+        }\n+        return getTypeIntersectedWithRecordType((BRecordType) targetType, mapType, env);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk2ODU4NQ==", "bodyText": "Changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r544968585", "createdAt": "2020-12-17T10:13:17Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2769,6 +2805,146 @@ BType getTypeForUnionTypeMembersAssignableToType(BUnionType unionType, BType tar\n         }\n     }\n \n+    BType getTypeIntersectedWithMapType(BMapType mapType, BType targetType, SymbolEnv env) {\n+        if (targetType.tag != TypeTags.MAP && targetType.tag != TypeTags.RECORD) {\n+            return symTable.semanticError;\n+        }\n+        if (targetType.tag == TypeTags.MAP) {\n+            BType intersectionConstraintType = getTypeIntersection(mapType.constraint,\n+                    ((BMapType) targetType).constraint, env);\n+            if (intersectionConstraintType == symTable.semanticError) {\n+                return symTable.semanticError;\n+            }\n+            return new BMapType(TypeTags.MAP, intersectionConstraintType, null);\n+        }\n+        return getTypeIntersectedWithRecordType((BRecordType) targetType, mapType, env);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUyNDM5NQ=="}, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMTA5NjY5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwNzozNzozM1rOIEcDFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDoxMzoxNFrOIHuPYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUyNDc1Ng==", "bodyText": "Aren't we repeating some checks by doing this? Wouldn't it be better to extract out the map-record intersection logic to a separate method and directly call that here and in getTypeIntersectedWithRecordType?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r541524756", "createdAt": "2020-12-12T07:37:33Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2769,6 +2805,146 @@ BType getTypeForUnionTypeMembersAssignableToType(BUnionType unionType, BType tar\n         }\n     }\n \n+    BType getTypeIntersectedWithMapType(BMapType mapType, BType targetType, SymbolEnv env) {\n+        if (targetType.tag != TypeTags.MAP && targetType.tag != TypeTags.RECORD) {\n+            return symTable.semanticError;\n+        }\n+        if (targetType.tag == TypeTags.MAP) {\n+            BType intersectionConstraintType = getTypeIntersection(mapType.constraint,\n+                    ((BMapType) targetType).constraint, env);\n+            if (intersectionConstraintType == symTable.semanticError) {\n+                return symTable.semanticError;\n+            }\n+            return new BMapType(TypeTags.MAP, intersectionConstraintType, null);\n+        }\n+        return getTypeIntersectedWithRecordType((BRecordType) targetType, mapType, env);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUyNTg1Mg==", "bodyText": "Seems like getTypeIntersectedWithRecordType is only called from this method. If so we can change the targetType param of getTypeIntersectedWithRecordType to be of a BMapType and remove the tag checks.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r541525852", "createdAt": "2020-12-12T07:45:28Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2769,6 +2805,146 @@ BType getTypeForUnionTypeMembersAssignableToType(BUnionType unionType, BType tar\n         }\n     }\n \n+    BType getTypeIntersectedWithMapType(BMapType mapType, BType targetType, SymbolEnv env) {\n+        if (targetType.tag != TypeTags.MAP && targetType.tag != TypeTags.RECORD) {\n+            return symTable.semanticError;\n+        }\n+        if (targetType.tag == TypeTags.MAP) {\n+            BType intersectionConstraintType = getTypeIntersection(mapType.constraint,\n+                    ((BMapType) targetType).constraint, env);\n+            if (intersectionConstraintType == symTable.semanticError) {\n+                return symTable.semanticError;\n+            }\n+            return new BMapType(TypeTags.MAP, intersectionConstraintType, null);\n+        }\n+        return getTypeIntersectedWithRecordType((BRecordType) targetType, mapType, env);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUyNDc1Ng=="}, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk2ODU0Ng==", "bodyText": "Refactored", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r544968546", "createdAt": "2020-12-17T10:13:14Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2769,6 +2805,146 @@ BType getTypeForUnionTypeMembersAssignableToType(BUnionType unionType, BType tar\n         }\n     }\n \n+    BType getTypeIntersectedWithMapType(BMapType mapType, BType targetType, SymbolEnv env) {\n+        if (targetType.tag != TypeTags.MAP && targetType.tag != TypeTags.RECORD) {\n+            return symTable.semanticError;\n+        }\n+        if (targetType.tag == TypeTags.MAP) {\n+            BType intersectionConstraintType = getTypeIntersection(mapType.constraint,\n+                    ((BMapType) targetType).constraint, env);\n+            if (intersectionConstraintType == symTable.semanticError) {\n+                return symTable.semanticError;\n+            }\n+            return new BMapType(TypeTags.MAP, intersectionConstraintType, null);\n+        }\n+        return getTypeIntersectedWithRecordType((BRecordType) targetType, mapType, env);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUyNDc1Ng=="}, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMTEwMDUxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwNzo0MDozOFrOIEcErw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDoxMzoxMFrOIHuPPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUyNTE2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else if (isAssignable(origField.type, overlappingField.type)) {\n          \n          \n            \n                        return origField.type;\n          \n          \n            \n                    } else {\n          \n          \n            \n                        return symTable.semanticError;\n          \n          \n            \n                    }\n          \n          \n            \n                    } \n          \n          \n            \n                    \n          \n          \n            \n                    if (isAssignable(origField.type, overlappingField.type)) {\n          \n          \n            \n                        return origField.type;\n          \n          \n            \n                    }\n          \n          \n            \n                    return symTable.semanticError;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r541525167", "createdAt": "2020-12-12T07:40:38Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2769,6 +2805,146 @@ BType getTypeForUnionTypeMembersAssignableToType(BUnionType unionType, BType tar\n         }\n     }\n \n+    BType getTypeIntersectedWithMapType(BMapType mapType, BType targetType, SymbolEnv env) {\n+        if (targetType.tag != TypeTags.MAP && targetType.tag != TypeTags.RECORD) {\n+            return symTable.semanticError;\n+        }\n+        if (targetType.tag == TypeTags.MAP) {\n+            BType intersectionConstraintType = getTypeIntersection(mapType.constraint,\n+                    ((BMapType) targetType).constraint, env);\n+            if (intersectionConstraintType == symTable.semanticError) {\n+                return symTable.semanticError;\n+            }\n+            return new BMapType(TypeTags.MAP, intersectionConstraintType, null);\n+        }\n+        return getTypeIntersectedWithRecordType((BRecordType) targetType, mapType, env);\n+    }\n+\n+    BType getTypeIntersectedWithRecordType(BRecordType recordType, BType targetType, SymbolEnv env) {\n+        if (targetType.tag != TypeTags.MAP && targetType.tag != TypeTags.RECORD) {\n+            return symTable.semanticError;\n+        }\n+        if (targetType.tag == TypeTags.MAP) {\n+            BRecordType intersectionRecordType = createAnonymousRecord(env);\n+            LinkedHashMap<String, BField> fields = new LinkedHashMap<>();\n+            for (String key : recordType.fields.keySet()) {\n+                BType intersectionKeyType = getTypeIntersection(recordType.fields.get(key).type,\n+                        ((BMapType) targetType).constraint, env);\n+                if (intersectionKeyType == symTable.semanticError) {\n+                    return symTable.semanticError;\n+                }\n+                BVarSymbol fieldSymbol = new BVarSymbol(0, names.fromString(key), env.enclPkg.symbol.pkgID,\n+                        intersectionKeyType, intersectionRecordType.tsymbol, recordType.fields.get(key).pos,\n+                        COMPILED_SOURCE);\n+                BField field = new BField(names.fromString(key), recordType.fields.get(key).pos, fieldSymbol);\n+                fields.put(key, field);\n+            }\n+            intersectionRecordType.fields = fields;\n+\n+            if (recordType.restFieldType != null) {\n+                BType intersectionRestType = getTypeIntersection(recordType.restFieldType,\n+                        ((BMapType) targetType).constraint, env);\n+                if (intersectionRestType == symTable.semanticError) {\n+                    intersectionRecordType.sealed = true;\n+                }\n+                intersectionRecordType.restFieldType = intersectionRestType;\n+            } else {\n+                intersectionRecordType.sealed = recordType.sealed;\n+            }\n+            return intersectionRecordType;\n+        }\n+        return createRecordIntersection(recordType, targetType, env);\n+    }\n+\n+    private BType createRecordIntersection(BType recordTypeOne, BType recordTypeTwo, SymbolEnv env) {\n+        BRecordType recordType = createAnonymousRecord(env);\n+\n+        if (!populateRecordFields(recordType, recordTypeOne, env) ||\n+                !populateRecordFields(recordType, recordTypeTwo, env)) {\n+            return symTable.semanticError;\n+        }\n+\n+        recordType.restFieldType = getTypeIntersection(((BRecordType) recordTypeOne).restFieldType,\n+                ((BRecordType) recordTypeTwo).restFieldType, env);\n+\n+        if (recordType.restFieldType == symTable.semanticError) {\n+            return symTable.semanticError;\n+        }\n+        return recordType;\n+    }\n+\n+    private boolean populateRecordFields(BRecordType recordType, BType originalType, SymbolEnv env) {\n+        BTypeSymbol intersectionRecordSymbol = recordType.tsymbol;\n+        // If the detail type is BMapType simply ignore since the resulting detail type has `anydata` as rest type.\n+        if (originalType.getKind() != TypeKind.RECORD) {\n+            return true;\n+        }\n+        BRecordType originalRecordType = (BRecordType) originalType;\n+        LinkedHashMap<String, BField> fields = new LinkedHashMap<>();\n+        for (BField origField : originalRecordType.fields.values()) {\n+            org.wso2.ballerinalang.compiler.util.Name origFieldName = origField.name;\n+            String nameString = origFieldName.value;\n+\n+            BType recordFieldType = validateOverlappingFields(recordType, origField);\n+            if (recordFieldType == symTable.semanticError) {\n+                return false;\n+            }\n+\n+            BVarSymbol recordFieldSymbol = new BVarSymbol(origField.symbol.flags, origFieldName,\n+                    env.enclPkg.packageID, recordFieldType,\n+                    intersectionRecordSymbol, origField.pos, SOURCE);\n+            if (recordFieldType.tag == TypeTags.INVOKABLE && recordFieldType.tsymbol != null) {\n+                BInvokableTypeSymbol tsymbol = (BInvokableTypeSymbol) recordFieldType.tsymbol;\n+                BInvokableSymbol invokableSymbol = (BInvokableSymbol) recordFieldSymbol;\n+                invokableSymbol.params = tsymbol.params;\n+                invokableSymbol.restParam = tsymbol.restParam;\n+                invokableSymbol.retType = tsymbol.returnType;\n+                invokableSymbol.flags = tsymbol.flags;\n+            }\n+            fields.put(nameString, new BField(origFieldName, null, recordFieldSymbol));\n+        }\n+        recordType.fields.putAll(fields);\n+        return true;\n+    }\n+\n+    private BType validateOverlappingFields(BRecordType recordType, BField origField) {\n+        BField overlappingField = recordType.fields.get(origField.name.value);\n+        if (overlappingField == null) {\n+            return origField.type;\n+        }\n+\n+        if (isAssignable(overlappingField.type, origField.type)) {\n+            return overlappingField.type;\n+        } else if (isAssignable(origField.type, overlappingField.type)) {\n+            return origField.type;\n+        } else {\n+            return symTable.semanticError;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 284}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk2ODUxMQ==", "bodyText": "Changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r544968511", "createdAt": "2020-12-17T10:13:10Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2769,6 +2805,146 @@ BType getTypeForUnionTypeMembersAssignableToType(BUnionType unionType, BType tar\n         }\n     }\n \n+    BType getTypeIntersectedWithMapType(BMapType mapType, BType targetType, SymbolEnv env) {\n+        if (targetType.tag != TypeTags.MAP && targetType.tag != TypeTags.RECORD) {\n+            return symTable.semanticError;\n+        }\n+        if (targetType.tag == TypeTags.MAP) {\n+            BType intersectionConstraintType = getTypeIntersection(mapType.constraint,\n+                    ((BMapType) targetType).constraint, env);\n+            if (intersectionConstraintType == symTable.semanticError) {\n+                return symTable.semanticError;\n+            }\n+            return new BMapType(TypeTags.MAP, intersectionConstraintType, null);\n+        }\n+        return getTypeIntersectedWithRecordType((BRecordType) targetType, mapType, env);\n+    }\n+\n+    BType getTypeIntersectedWithRecordType(BRecordType recordType, BType targetType, SymbolEnv env) {\n+        if (targetType.tag != TypeTags.MAP && targetType.tag != TypeTags.RECORD) {\n+            return symTable.semanticError;\n+        }\n+        if (targetType.tag == TypeTags.MAP) {\n+            BRecordType intersectionRecordType = createAnonymousRecord(env);\n+            LinkedHashMap<String, BField> fields = new LinkedHashMap<>();\n+            for (String key : recordType.fields.keySet()) {\n+                BType intersectionKeyType = getTypeIntersection(recordType.fields.get(key).type,\n+                        ((BMapType) targetType).constraint, env);\n+                if (intersectionKeyType == symTable.semanticError) {\n+                    return symTable.semanticError;\n+                }\n+                BVarSymbol fieldSymbol = new BVarSymbol(0, names.fromString(key), env.enclPkg.symbol.pkgID,\n+                        intersectionKeyType, intersectionRecordType.tsymbol, recordType.fields.get(key).pos,\n+                        COMPILED_SOURCE);\n+                BField field = new BField(names.fromString(key), recordType.fields.get(key).pos, fieldSymbol);\n+                fields.put(key, field);\n+            }\n+            intersectionRecordType.fields = fields;\n+\n+            if (recordType.restFieldType != null) {\n+                BType intersectionRestType = getTypeIntersection(recordType.restFieldType,\n+                        ((BMapType) targetType).constraint, env);\n+                if (intersectionRestType == symTable.semanticError) {\n+                    intersectionRecordType.sealed = true;\n+                }\n+                intersectionRecordType.restFieldType = intersectionRestType;\n+            } else {\n+                intersectionRecordType.sealed = recordType.sealed;\n+            }\n+            return intersectionRecordType;\n+        }\n+        return createRecordIntersection(recordType, targetType, env);\n+    }\n+\n+    private BType createRecordIntersection(BType recordTypeOne, BType recordTypeTwo, SymbolEnv env) {\n+        BRecordType recordType = createAnonymousRecord(env);\n+\n+        if (!populateRecordFields(recordType, recordTypeOne, env) ||\n+                !populateRecordFields(recordType, recordTypeTwo, env)) {\n+            return symTable.semanticError;\n+        }\n+\n+        recordType.restFieldType = getTypeIntersection(((BRecordType) recordTypeOne).restFieldType,\n+                ((BRecordType) recordTypeTwo).restFieldType, env);\n+\n+        if (recordType.restFieldType == symTable.semanticError) {\n+            return symTable.semanticError;\n+        }\n+        return recordType;\n+    }\n+\n+    private boolean populateRecordFields(BRecordType recordType, BType originalType, SymbolEnv env) {\n+        BTypeSymbol intersectionRecordSymbol = recordType.tsymbol;\n+        // If the detail type is BMapType simply ignore since the resulting detail type has `anydata` as rest type.\n+        if (originalType.getKind() != TypeKind.RECORD) {\n+            return true;\n+        }\n+        BRecordType originalRecordType = (BRecordType) originalType;\n+        LinkedHashMap<String, BField> fields = new LinkedHashMap<>();\n+        for (BField origField : originalRecordType.fields.values()) {\n+            org.wso2.ballerinalang.compiler.util.Name origFieldName = origField.name;\n+            String nameString = origFieldName.value;\n+\n+            BType recordFieldType = validateOverlappingFields(recordType, origField);\n+            if (recordFieldType == symTable.semanticError) {\n+                return false;\n+            }\n+\n+            BVarSymbol recordFieldSymbol = new BVarSymbol(origField.symbol.flags, origFieldName,\n+                    env.enclPkg.packageID, recordFieldType,\n+                    intersectionRecordSymbol, origField.pos, SOURCE);\n+            if (recordFieldType.tag == TypeTags.INVOKABLE && recordFieldType.tsymbol != null) {\n+                BInvokableTypeSymbol tsymbol = (BInvokableTypeSymbol) recordFieldType.tsymbol;\n+                BInvokableSymbol invokableSymbol = (BInvokableSymbol) recordFieldSymbol;\n+                invokableSymbol.params = tsymbol.params;\n+                invokableSymbol.restParam = tsymbol.restParam;\n+                invokableSymbol.retType = tsymbol.returnType;\n+                invokableSymbol.flags = tsymbol.flags;\n+            }\n+            fields.put(nameString, new BField(origFieldName, null, recordFieldSymbol));\n+        }\n+        recordType.fields.putAll(fields);\n+        return true;\n+    }\n+\n+    private BType validateOverlappingFields(BRecordType recordType, BField origField) {\n+        BField overlappingField = recordType.fields.get(origField.name.value);\n+        if (overlappingField == null) {\n+            return origField.type;\n+        }\n+\n+        if (isAssignable(overlappingField.type, origField.type)) {\n+            return overlappingField.type;\n+        } else if (isAssignable(origField.type, overlappingField.type)) {\n+            return origField.type;\n+        } else {\n+            return symTable.semanticError;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUyNTE2Nw=="}, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 284}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMTEwMzY4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwNzo0MzowM1rOIEcGFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDoxMzowOFrOIHuPKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUyNTUyNA==", "bodyText": "Is setting intersectionRestType correct even if intersectionRestType is symTable.semanticError? Shouln't it be symTable.noType if it is an exclusive record?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r541525524", "createdAt": "2020-12-12T07:43:03Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2769,6 +2805,146 @@ BType getTypeForUnionTypeMembersAssignableToType(BUnionType unionType, BType tar\n         }\n     }\n \n+    BType getTypeIntersectedWithMapType(BMapType mapType, BType targetType, SymbolEnv env) {\n+        if (targetType.tag != TypeTags.MAP && targetType.tag != TypeTags.RECORD) {\n+            return symTable.semanticError;\n+        }\n+        if (targetType.tag == TypeTags.MAP) {\n+            BType intersectionConstraintType = getTypeIntersection(mapType.constraint,\n+                    ((BMapType) targetType).constraint, env);\n+            if (intersectionConstraintType == symTable.semanticError) {\n+                return symTable.semanticError;\n+            }\n+            return new BMapType(TypeTags.MAP, intersectionConstraintType, null);\n+        }\n+        return getTypeIntersectedWithRecordType((BRecordType) targetType, mapType, env);\n+    }\n+\n+    BType getTypeIntersectedWithRecordType(BRecordType recordType, BType targetType, SymbolEnv env) {\n+        if (targetType.tag != TypeTags.MAP && targetType.tag != TypeTags.RECORD) {\n+            return symTable.semanticError;\n+        }\n+        if (targetType.tag == TypeTags.MAP) {\n+            BRecordType intersectionRecordType = createAnonymousRecord(env);\n+            LinkedHashMap<String, BField> fields = new LinkedHashMap<>();\n+            for (String key : recordType.fields.keySet()) {\n+                BType intersectionKeyType = getTypeIntersection(recordType.fields.get(key).type,\n+                        ((BMapType) targetType).constraint, env);\n+                if (intersectionKeyType == symTable.semanticError) {\n+                    return symTable.semanticError;\n+                }\n+                BVarSymbol fieldSymbol = new BVarSymbol(0, names.fromString(key), env.enclPkg.symbol.pkgID,\n+                        intersectionKeyType, intersectionRecordType.tsymbol, recordType.fields.get(key).pos,\n+                        COMPILED_SOURCE);\n+                BField field = new BField(names.fromString(key), recordType.fields.get(key).pos, fieldSymbol);\n+                fields.put(key, field);\n+            }\n+            intersectionRecordType.fields = fields;\n+\n+            if (recordType.restFieldType != null) {\n+                BType intersectionRestType = getTypeIntersection(recordType.restFieldType,\n+                        ((BMapType) targetType).constraint, env);\n+                if (intersectionRestType == symTable.semanticError) {\n+                    intersectionRecordType.sealed = true;\n+                }\n+                intersectionRecordType.restFieldType = intersectionRestType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 212}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk2ODQ5MA==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r544968490", "createdAt": "2020-12-17T10:13:08Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2769,6 +2805,146 @@ BType getTypeForUnionTypeMembersAssignableToType(BUnionType unionType, BType tar\n         }\n     }\n \n+    BType getTypeIntersectedWithMapType(BMapType mapType, BType targetType, SymbolEnv env) {\n+        if (targetType.tag != TypeTags.MAP && targetType.tag != TypeTags.RECORD) {\n+            return symTable.semanticError;\n+        }\n+        if (targetType.tag == TypeTags.MAP) {\n+            BType intersectionConstraintType = getTypeIntersection(mapType.constraint,\n+                    ((BMapType) targetType).constraint, env);\n+            if (intersectionConstraintType == symTable.semanticError) {\n+                return symTable.semanticError;\n+            }\n+            return new BMapType(TypeTags.MAP, intersectionConstraintType, null);\n+        }\n+        return getTypeIntersectedWithRecordType((BRecordType) targetType, mapType, env);\n+    }\n+\n+    BType getTypeIntersectedWithRecordType(BRecordType recordType, BType targetType, SymbolEnv env) {\n+        if (targetType.tag != TypeTags.MAP && targetType.tag != TypeTags.RECORD) {\n+            return symTable.semanticError;\n+        }\n+        if (targetType.tag == TypeTags.MAP) {\n+            BRecordType intersectionRecordType = createAnonymousRecord(env);\n+            LinkedHashMap<String, BField> fields = new LinkedHashMap<>();\n+            for (String key : recordType.fields.keySet()) {\n+                BType intersectionKeyType = getTypeIntersection(recordType.fields.get(key).type,\n+                        ((BMapType) targetType).constraint, env);\n+                if (intersectionKeyType == symTable.semanticError) {\n+                    return symTable.semanticError;\n+                }\n+                BVarSymbol fieldSymbol = new BVarSymbol(0, names.fromString(key), env.enclPkg.symbol.pkgID,\n+                        intersectionKeyType, intersectionRecordType.tsymbol, recordType.fields.get(key).pos,\n+                        COMPILED_SOURCE);\n+                BField field = new BField(names.fromString(key), recordType.fields.get(key).pos, fieldSymbol);\n+                fields.put(key, field);\n+            }\n+            intersectionRecordType.fields = fields;\n+\n+            if (recordType.restFieldType != null) {\n+                BType intersectionRestType = getTypeIntersection(recordType.restFieldType,\n+                        ((BMapType) targetType).constraint, env);\n+                if (intersectionRestType == symTable.semanticError) {\n+                    intersectionRecordType.sealed = true;\n+                }\n+                intersectionRecordType.restFieldType = intersectionRestType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUyNTUyNA=="}, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 212}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMTExNjEyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwNzo1MjoyNVrOIEcLQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDoxMzowN1rOIHuPDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUyNjg1MA==", "bodyText": "AFAIK restFieldType is never null in a BRecordType. If it is an exclusive record, the restType will be symTable.noType. We may have to change this check.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r541526850", "createdAt": "2020-12-12T07:52:25Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2769,6 +2805,146 @@ BType getTypeForUnionTypeMembersAssignableToType(BUnionType unionType, BType tar\n         }\n     }\n \n+    BType getTypeIntersectedWithMapType(BMapType mapType, BType targetType, SymbolEnv env) {\n+        if (targetType.tag != TypeTags.MAP && targetType.tag != TypeTags.RECORD) {\n+            return symTable.semanticError;\n+        }\n+        if (targetType.tag == TypeTags.MAP) {\n+            BType intersectionConstraintType = getTypeIntersection(mapType.constraint,\n+                    ((BMapType) targetType).constraint, env);\n+            if (intersectionConstraintType == symTable.semanticError) {\n+                return symTable.semanticError;\n+            }\n+            return new BMapType(TypeTags.MAP, intersectionConstraintType, null);\n+        }\n+        return getTypeIntersectedWithRecordType((BRecordType) targetType, mapType, env);\n+    }\n+\n+    BType getTypeIntersectedWithRecordType(BRecordType recordType, BType targetType, SymbolEnv env) {\n+        if (targetType.tag != TypeTags.MAP && targetType.tag != TypeTags.RECORD) {\n+            return symTable.semanticError;\n+        }\n+        if (targetType.tag == TypeTags.MAP) {\n+            BRecordType intersectionRecordType = createAnonymousRecord(env);\n+            LinkedHashMap<String, BField> fields = new LinkedHashMap<>();\n+            for (String key : recordType.fields.keySet()) {\n+                BType intersectionKeyType = getTypeIntersection(recordType.fields.get(key).type,\n+                        ((BMapType) targetType).constraint, env);\n+                if (intersectionKeyType == symTable.semanticError) {\n+                    return symTable.semanticError;\n+                }\n+                BVarSymbol fieldSymbol = new BVarSymbol(0, names.fromString(key), env.enclPkg.symbol.pkgID,\n+                        intersectionKeyType, intersectionRecordType.tsymbol, recordType.fields.get(key).pos,\n+                        COMPILED_SOURCE);\n+                BField field = new BField(names.fromString(key), recordType.fields.get(key).pos, fieldSymbol);\n+                fields.put(key, field);\n+            }\n+            intersectionRecordType.fields = fields;\n+\n+            if (recordType.restFieldType != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk2ODQ2MA==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r544968460", "createdAt": "2020-12-17T10:13:07Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2769,6 +2805,146 @@ BType getTypeForUnionTypeMembersAssignableToType(BUnionType unionType, BType tar\n         }\n     }\n \n+    BType getTypeIntersectedWithMapType(BMapType mapType, BType targetType, SymbolEnv env) {\n+        if (targetType.tag != TypeTags.MAP && targetType.tag != TypeTags.RECORD) {\n+            return symTable.semanticError;\n+        }\n+        if (targetType.tag == TypeTags.MAP) {\n+            BType intersectionConstraintType = getTypeIntersection(mapType.constraint,\n+                    ((BMapType) targetType).constraint, env);\n+            if (intersectionConstraintType == symTable.semanticError) {\n+                return symTable.semanticError;\n+            }\n+            return new BMapType(TypeTags.MAP, intersectionConstraintType, null);\n+        }\n+        return getTypeIntersectedWithRecordType((BRecordType) targetType, mapType, env);\n+    }\n+\n+    BType getTypeIntersectedWithRecordType(BRecordType recordType, BType targetType, SymbolEnv env) {\n+        if (targetType.tag != TypeTags.MAP && targetType.tag != TypeTags.RECORD) {\n+            return symTable.semanticError;\n+        }\n+        if (targetType.tag == TypeTags.MAP) {\n+            BRecordType intersectionRecordType = createAnonymousRecord(env);\n+            LinkedHashMap<String, BField> fields = new LinkedHashMap<>();\n+            for (String key : recordType.fields.keySet()) {\n+                BType intersectionKeyType = getTypeIntersection(recordType.fields.get(key).type,\n+                        ((BMapType) targetType).constraint, env);\n+                if (intersectionKeyType == symTable.semanticError) {\n+                    return symTable.semanticError;\n+                }\n+                BVarSymbol fieldSymbol = new BVarSymbol(0, names.fromString(key), env.enclPkg.symbol.pkgID,\n+                        intersectionKeyType, intersectionRecordType.tsymbol, recordType.fields.get(key).pos,\n+                        COMPILED_SOURCE);\n+                BField field = new BField(names.fromString(key), recordType.fields.get(key).pos, fieldSymbol);\n+                fields.put(key, field);\n+            }\n+            intersectionRecordType.fields = fields;\n+\n+            if (recordType.restFieldType != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUyNjg1MA=="}, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 206}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMTExOTQ5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwNzo1NTowM1rOIEcMqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNzoyMjo0MlrOIIATvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUyNzIwOQ==", "bodyText": "Shouldn't we check if the field is optional here?\nFor example, map<json> and record {|int i; stream<int> j?;|} has an intersection, right?\nrecord {|int i;|}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r541527209", "createdAt": "2020-12-12T07:55:03Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2769,6 +2805,146 @@ BType getTypeForUnionTypeMembersAssignableToType(BUnionType unionType, BType tar\n         }\n     }\n \n+    BType getTypeIntersectedWithMapType(BMapType mapType, BType targetType, SymbolEnv env) {\n+        if (targetType.tag != TypeTags.MAP && targetType.tag != TypeTags.RECORD) {\n+            return symTable.semanticError;\n+        }\n+        if (targetType.tag == TypeTags.MAP) {\n+            BType intersectionConstraintType = getTypeIntersection(mapType.constraint,\n+                    ((BMapType) targetType).constraint, env);\n+            if (intersectionConstraintType == symTable.semanticError) {\n+                return symTable.semanticError;\n+            }\n+            return new BMapType(TypeTags.MAP, intersectionConstraintType, null);\n+        }\n+        return getTypeIntersectedWithRecordType((BRecordType) targetType, mapType, env);\n+    }\n+\n+    BType getTypeIntersectedWithRecordType(BRecordType recordType, BType targetType, SymbolEnv env) {\n+        if (targetType.tag != TypeTags.MAP && targetType.tag != TypeTags.RECORD) {\n+            return symTable.semanticError;\n+        }\n+        if (targetType.tag == TypeTags.MAP) {\n+            BRecordType intersectionRecordType = createAnonymousRecord(env);\n+            LinkedHashMap<String, BField> fields = new LinkedHashMap<>();\n+            for (String key : recordType.fields.keySet()) {\n+                BType intersectionKeyType = getTypeIntersection(recordType.fields.get(key).type,\n+                        ((BMapType) targetType).constraint, env);\n+                if (intersectionKeyType == symTable.semanticError) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI2NDU3NQ==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r545264575", "createdAt": "2020-12-17T17:22:42Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -2769,6 +2805,146 @@ BType getTypeForUnionTypeMembersAssignableToType(BUnionType unionType, BType tar\n         }\n     }\n \n+    BType getTypeIntersectedWithMapType(BMapType mapType, BType targetType, SymbolEnv env) {\n+        if (targetType.tag != TypeTags.MAP && targetType.tag != TypeTags.RECORD) {\n+            return symTable.semanticError;\n+        }\n+        if (targetType.tag == TypeTags.MAP) {\n+            BType intersectionConstraintType = getTypeIntersection(mapType.constraint,\n+                    ((BMapType) targetType).constraint, env);\n+            if (intersectionConstraintType == symTable.semanticError) {\n+                return symTable.semanticError;\n+            }\n+            return new BMapType(TypeTags.MAP, intersectionConstraintType, null);\n+        }\n+        return getTypeIntersectedWithRecordType((BRecordType) targetType, mapType, env);\n+    }\n+\n+    BType getTypeIntersectedWithRecordType(BRecordType recordType, BType targetType, SymbolEnv env) {\n+        if (targetType.tag != TypeTags.MAP && targetType.tag != TypeTags.RECORD) {\n+            return symTable.semanticError;\n+        }\n+        if (targetType.tag == TypeTags.MAP) {\n+            BRecordType intersectionRecordType = createAnonymousRecord(env);\n+            LinkedHashMap<String, BField> fields = new LinkedHashMap<>();\n+            for (String key : recordType.fields.keySet()) {\n+                BType intersectionKeyType = getTypeIntersection(recordType.fields.get(key).type,\n+                        ((BMapType) targetType).constraint, env);\n+                if (intersectionKeyType == symTable.semanticError) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUyNzIwOQ=="}, "originalCommit": {"oid": "1055ec1c66a9e91c8786d22d559dffc403d1011c"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMjA1MjI3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwNDozMzoyMlrOISfMKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwNDozMzoyMlrOISfMKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI1NjI5OA==", "bodyText": "There's quite a bit of repeated code between this and createVarCheckConditionForListMatchPattern, right? Shall we check if we can refactor these methods to avoid repetition?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r556256298", "createdAt": "2021-01-13T04:33:22Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -3463,89 +3487,252 @@ private BLangExpression createConditionForListMemberPattern(int index, BLangMatc\n         return createVarCheckCondition(listMemberMatchPattern, tempVarRef);\n     }\n \n-    private BLangExpression createVarCheckCondition(BLangMatchPattern matchPattern,\n-                                                    BLangSimpleVarRef varRef) {\n+    private BLangExpression createConditionForMappingMatchPattern(BLangMappingMatchPattern mappingMatchPattern,\n+                                                                  BLangSimpleVarRef matchExprVarRef) {\n+        BType matchPatternType = mappingMatchPattern.type;\n+        Location pos = mappingMatchPattern.pos;\n \n-        NodeKind patternKind = matchPattern.getKind();\n-        switch (patternKind) {\n-            case WILDCARD_MATCH_PATTERN:\n-                return createConditionForWildCardMatchPattern((BLangWildCardMatchPattern) matchPattern);\n-            case CONST_MATCH_PATTERN:\n-                return createConditionForConstMatchPattern((BLangConstPattern) matchPattern, varRef);\n-            case VAR_BINDING_PATTERN_MATCH_PATTERN:\n-                return createConditionForVarBindingPatternMatchPattern(\n-                        (BLangVarBindingPatternMatchPattern) matchPattern, varRef);\n-            case LIST_MATCH_PATTERN:\n-                BLangListMatchPattern listMatchPattern = (BLangListMatchPattern) matchPattern;\n-                Location pos = listMatchPattern.pos;\n-                BLangBlockStmt blockStmt = ASTBuilderUtil.createBlockStmt(pos);\n-\n-                BLangSimpleVariableDef resultVarDef = createVarDef(\"$listPatternVarResult$\", symTable.booleanType, null,\n-                        pos);\n-                BLangSimpleVarRef resultVarRef = ASTBuilderUtil.createVariableRef(pos, resultVarDef.var.symbol);\n-                blockStmt.addStatement(resultVarDef);\n-\n-                BLangAssignment failureResult =\n-                        ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(false));\n-                BLangAssignment successResult =\n-                        ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(true));\n-                blockStmt.addStatement(failureResult);\n-\n-                List<BType> memberTupleTypes = ((BTupleType) varRef.type).getTupleTypes();\n-                List<BLangMatchPattern> matchPatterns = listMatchPattern.matchPatterns;\n-\n-                BLangSimpleVariableDef tempCastVarDef = createVarDef(\"$castTemp$\", varRef.type, varRef, pos);\n-                blockStmt.addStatement(tempCastVarDef);\n-                BLangExpression condition = createConditionForListMemberPattern(0, matchPatterns.get(0),\n-                        tempCastVarDef, blockStmt, memberTupleTypes.get(0), pos);\n-\n-                for (int i = 1; i < matchPatterns.size(); i++) {\n-                    BLangExpression memberPatternCondition = createConditionForListMemberPattern(i,\n-                            matchPatterns.get(i), tempCastVarDef, blockStmt, memberTupleTypes.get(i), pos);\n-\n-                    condition = ASTBuilderUtil.createBinaryExpr(pos, condition, memberPatternCondition,\n-                            symTable.booleanType, OperatorKind.AND, (BOperatorSymbol) symResolver\n-                                    .resolveBinaryOperator(OperatorKind.AND, symTable.booleanType,\n-                                            symTable.booleanType));\n-                }\n+        BLangSimpleVariableDef resultVarDef = createVarDef(\"$mappingPatternResult$\", symTable.booleanType, null, pos);\n+        BLangSimpleVarRef resultVarRef = ASTBuilderUtil.createVariableRef(pos, resultVarDef.var.symbol);\n+        BLangBlockStmt mainBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+        mainBlockStmt.addStatement(resultVarDef);\n+\n+        BLangAssignment failureResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(false));\n+        BLangAssignment successResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(true));\n+        mainBlockStmt.addStatement(failureResult);\n \n-                BLangBlockStmt tempBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n-                tempBlockStmt.addStatement(successResult);\n-                BLangIf ifStmtForMatchPatterns = ASTBuilderUtil.createIfElseStmt(pos, condition, tempBlockStmt, null);\n-                blockStmt.addStatement(ifStmtForMatchPatterns);\n+        BLangExpression typeCheckCondition = createIsLikeExpression(mappingMatchPattern.pos, matchExprVarRef,\n+                matchPatternType);\n+        BLangExpression typeConvertedExpr = addConversionExprIfRequired(matchExprVarRef, matchPatternType);\n+        BLangSimpleVariableDef tempCastVarDef = createVarDef(\"$castTemp$\", matchPatternType, typeConvertedExpr, pos);\n+        BLangSimpleVarRef tempCastVarRef = ASTBuilderUtil.createVariableRef(pos, tempCastVarDef.var.symbol);\n \n-                BLangStatementExpression statementExpression = ASTBuilderUtil.createStatementExpression(blockStmt,\n-                        resultVarRef);\n-                statementExpression.type = symTable.booleanType;\n-                return statementExpression;\n-            default:\n-                // If some patterns are not implemented, those should be detected before this phase\n-                // TODO : Remove this after all patterns are implemented\n-                return null;\n+        BLangBlockStmt ifBlock = ASTBuilderUtil.createBlockStmt(pos);\n+        ifBlock.addStatement(tempCastVarDef);\n+        BLangIf ifStmt = ASTBuilderUtil.createIfElseStmt(pos, typeCheckCondition, ifBlock, null);\n+        mainBlockStmt.addStatement(ifStmt);\n+\n+        BLangExpression condition = createConditionForFieldMatchPatterns(mappingMatchPattern.fieldMatchPatterns,\n+                tempCastVarDef, ifBlock, pos);\n+\n+        BLangBlockStmt tempBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+        tempBlockStmt.addStatement(successResult);\n+        if (mappingMatchPattern.restMatchPattern != null) {\n+            BLangRestMatchPattern restMatchPattern = mappingMatchPattern.restMatchPattern;\n+            Location restPatternPos = restMatchPattern.pos;\n+            List<String> keysToRemove = getKeysToRemove(mappingMatchPattern);\n+            BMapType entriesType = new BMapType(TypeTags.MAP, new BTupleType(Arrays.asList(symTable.stringType,\n+                    ((BMapType) mappingMatchPattern.restMatchPattern.type).constraint)), null);\n+            BLangInvocation entriesInvocation = generateMapEntriesInvocation(tempCastVarRef, entriesType);\n+            BLangSimpleVariableDef entriesVarDef = createVarDef(\"$entries$\", entriesType, entriesInvocation,\n+                    restPatternPos);\n+            tempBlockStmt.addStatement(entriesVarDef);\n+            BLangLambdaFunction filteringFunction = createFuncToFilterOutRestParam(keysToRemove, restPatternPos);\n+            BLangInvocation filterInvocation = generateMapFilterInvocation(pos, entriesVarDef.var, filteringFunction);\n+            BLangSimpleVariableDef filtersVarDef = createVarDef(\"$filteredVarDef$\", entriesType, filterInvocation,\n+                    restPatternPos);\n+            tempBlockStmt.addStatement(filtersVarDef);\n+            BLangLambdaFunction backToMapLambda = generateEntriesToMapLambda(restPatternPos);\n+            BLangInvocation mapInvocation = generateMapMapInvocation(restPatternPos, filtersVarDef.var,\n+                    backToMapLambda);\n+            BLangSimpleVarRef restMatchPatternVarRef = declaredVarDef.get(restMatchPattern.getIdentifier().getValue());\n+            tempBlockStmt.addStatement(ASTBuilderUtil.createAssignmentStmt(pos, restMatchPatternVarRef, mapInvocation));\n+        }\n+        BLangIf ifStmtForMatchPatterns = ASTBuilderUtil.createIfElseStmt(pos, condition, tempBlockStmt, null);\n+        ifBlock.addStatement(ifStmtForMatchPatterns);\n+\n+        BLangStatementExpression statementExpression = ASTBuilderUtil.createStatementExpression(mainBlockStmt,\n+                resultVarRef);\n+        statementExpression.type = symTable.booleanType;\n+\n+        addAsRecordTypeDefinition(matchPatternType, pos);\n+        return statementExpression;\n+    }\n+\n+    private List<String> getKeysToRemove(BLangMappingMatchPattern mappingMatchPattern) {\n+        List<String> keysToRemove = new ArrayList<>();\n+        for (BLangFieldMatchPattern fieldMatchPattern : mappingMatchPattern.fieldMatchPatterns) {\n+            keysToRemove.add(fieldMatchPattern.fieldName.value);\n         }\n+        return keysToRemove;\n     }\n \n-    private BLangExpression createConditionForMatchPattern(BLangMatchPattern matchPattern,\n-                                                           BLangSimpleVarRef matchExprVarRef) {\n+    private BLangExpression createConditionForFieldMatchPatterns(List<BLangFieldMatchPattern> fieldMatchPatterns,\n+                                                                 BLangSimpleVariableDef varDef,\n+                                                                 BLangBlockStmt blockStmt,\n+                                                                 Location pos) {\n+        BLangExpression condition = ASTBuilderUtil.createLiteral(pos, symTable.booleanType, true);\n+        for (int i = 0; i < fieldMatchPatterns.size(); i++) {\n+            BLangExpression fieldMatchPatternCondition =\n+                    createConditionForFieldMatchPattern(i, fieldMatchPatterns.get(i), varDef, blockStmt);\n+            condition = ASTBuilderUtil.createBinaryExpr(pos, condition, fieldMatchPatternCondition,\n+                    symTable.booleanType, OperatorKind.AND, (BOperatorSymbol) symResolver\n+                            .resolveBinaryOperator(OperatorKind.AND, symTable.booleanType, symTable.booleanType));\n+        }\n+        return condition;\n+    }\n+\n+    private BLangExpression createConditionForFieldMatchPattern(int index, BLangFieldMatchPattern fieldMatchPattern,\n+                                                                BLangSimpleVariableDef tempCastVarDef,\n+                                                                BLangBlockStmt blockStmt) {\n+        String fieldName = fieldMatchPattern.fieldName.value;\n+        BLangMatchPattern matchPattern = fieldMatchPattern.matchPattern;\n+        BLangFieldBasedAccess fieldBasedAccessExpr = getFieldAccessExpression(fieldMatchPattern.pos, fieldName,\n+                matchPattern.type, tempCastVarDef.var.symbol);\n+        BLangSimpleVariableDef tempVarDef = createVarDef(\"$memberVarTemp$\" + index + \"_$\", matchPattern.type,\n+                fieldBasedAccessExpr, matchPattern.pos);\n+        BLangSimpleVarRef tempVarRef = ASTBuilderUtil.createVariableRef(matchPattern.pos, tempVarDef.var.symbol);\n+        blockStmt.addStatement(tempVarDef);\n+        return createVarCheckCondition(matchPattern, tempVarRef);\n+    }\n+\n+    private BLangExpression createVarCheckCondition(BLangMatchPattern matchPattern, BLangSimpleVarRef varRef) {\n \n         NodeKind patternKind = matchPattern.getKind();\n         switch (patternKind) {\n             case WILDCARD_MATCH_PATTERN:\n                 return createConditionForWildCardMatchPattern((BLangWildCardMatchPattern) matchPattern);\n             case CONST_MATCH_PATTERN:\n-                return createConditionForConstMatchPattern((BLangConstPattern) matchPattern, matchExprVarRef);\n+                return createConditionForConstMatchPattern((BLangConstPattern) matchPattern, varRef);\n             case VAR_BINDING_PATTERN_MATCH_PATTERN:\n                 return createConditionForVarBindingPatternMatchPattern(\n-                        (BLangVarBindingPatternMatchPattern) matchPattern, matchExprVarRef);\n+                        (BLangVarBindingPatternMatchPattern) matchPattern, varRef);\n             case LIST_MATCH_PATTERN:\n-                return createConditionForListMatchPattern((BLangListMatchPattern) matchPattern, matchExprVarRef);\n+                return createVarCheckConditionForListMatchPattern((BLangListMatchPattern) matchPattern, varRef);\n+            case MAPPING_MATCH_PATTERN:\n+                return createVarCheckConditionForMappingMatchPattern((BLangMappingMatchPattern) matchPattern, varRef);\n             default:\n                 // If some patterns are not implemented, those should be detected before this phase\n                 // TODO : Remove this after all patterns are implemented\n                 return null;\n         }\n     }\n \n+    private BLangExpression createVarCheckConditionForListMatchPattern(BLangListMatchPattern listMatchPattern,\n+                                                                       BLangSimpleVarRef varRef) {\n+        Location pos = listMatchPattern.pos;\n+        BLangBlockStmt blockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+\n+        BLangSimpleVariableDef resultVarDef = createVarDef(\"$listPatternVarResult$\", symTable.booleanType, null,\n+                pos);\n+        BLangSimpleVarRef resultVarRef = ASTBuilderUtil.createVariableRef(pos, resultVarDef.var.symbol);\n+        blockStmt.addStatement(resultVarDef);\n+\n+        BLangAssignment failureResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(false));\n+        BLangAssignment successResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(true));\n+        blockStmt.addStatement(failureResult);\n+\n+        List<BType> memberTupleTypes = ((BTupleType) varRef.type).getTupleTypes();\n+        List<BLangMatchPattern> matchPatterns = listMatchPattern.matchPatterns;\n+\n+        BLangSimpleVariableDef tempCastVarDef = createVarDef(\"$castTemp$\", varRef.type, varRef, pos);\n+        blockStmt.addStatement(tempCastVarDef);\n+        BLangExpression condition = createConditionForListMemberPattern(0, matchPatterns.get(0),\n+                tempCastVarDef, blockStmt, memberTupleTypes.get(0), pos);\n+\n+        for (int i = 1; i < matchPatterns.size(); i++) {\n+            BLangExpression memberPatternCondition = createConditionForListMemberPattern(i,\n+                    matchPatterns.get(i), tempCastVarDef, blockStmt, memberTupleTypes.get(i), pos);\n+\n+            condition = ASTBuilderUtil.createBinaryExpr(pos, condition, memberPatternCondition,\n+                    symTable.booleanType, OperatorKind.AND, (BOperatorSymbol) symResolver\n+                            .resolveBinaryOperator(OperatorKind.AND, symTable.booleanType,\n+                                    symTable.booleanType));\n+        }\n+\n+        BLangBlockStmt tempBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+        tempBlockStmt.addStatement(successResult);\n+        BLangIf ifStmtForMatchPatterns = ASTBuilderUtil.createIfElseStmt(pos, condition, tempBlockStmt, null);\n+        blockStmt.addStatement(ifStmtForMatchPatterns);\n+\n+        BLangStatementExpression statementExpression = ASTBuilderUtil.createStatementExpression(blockStmt,\n+                resultVarRef);\n+        statementExpression.type = symTable.booleanType;\n+        return statementExpression;\n+    }\n+\n+    private BLangExpression createVarCheckConditionForMappingMatchPattern(BLangMappingMatchPattern mappingMatchPattern,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a795ecd1ecb76c24c1d87a0e00b7ecd1849f0ef4"}, "originalPosition": 281}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMjA1NTc4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwNDozNTozMVrOISfOPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwOToxNToyMVrOISmHTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI1NjgyOA==", "bodyText": "Can't we return here? Or we have to unnecessarily check the tag in L3701 and return?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r556256828", "createdAt": "2021-01-13T04:35:31Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -3463,89 +3487,252 @@ private BLangExpression createConditionForListMemberPattern(int index, BLangMatc\n         return createVarCheckCondition(listMemberMatchPattern, tempVarRef);\n     }\n \n-    private BLangExpression createVarCheckCondition(BLangMatchPattern matchPattern,\n-                                                    BLangSimpleVarRef varRef) {\n+    private BLangExpression createConditionForMappingMatchPattern(BLangMappingMatchPattern mappingMatchPattern,\n+                                                                  BLangSimpleVarRef matchExprVarRef) {\n+        BType matchPatternType = mappingMatchPattern.type;\n+        Location pos = mappingMatchPattern.pos;\n \n-        NodeKind patternKind = matchPattern.getKind();\n-        switch (patternKind) {\n-            case WILDCARD_MATCH_PATTERN:\n-                return createConditionForWildCardMatchPattern((BLangWildCardMatchPattern) matchPattern);\n-            case CONST_MATCH_PATTERN:\n-                return createConditionForConstMatchPattern((BLangConstPattern) matchPattern, varRef);\n-            case VAR_BINDING_PATTERN_MATCH_PATTERN:\n-                return createConditionForVarBindingPatternMatchPattern(\n-                        (BLangVarBindingPatternMatchPattern) matchPattern, varRef);\n-            case LIST_MATCH_PATTERN:\n-                BLangListMatchPattern listMatchPattern = (BLangListMatchPattern) matchPattern;\n-                Location pos = listMatchPattern.pos;\n-                BLangBlockStmt blockStmt = ASTBuilderUtil.createBlockStmt(pos);\n-\n-                BLangSimpleVariableDef resultVarDef = createVarDef(\"$listPatternVarResult$\", symTable.booleanType, null,\n-                        pos);\n-                BLangSimpleVarRef resultVarRef = ASTBuilderUtil.createVariableRef(pos, resultVarDef.var.symbol);\n-                blockStmt.addStatement(resultVarDef);\n-\n-                BLangAssignment failureResult =\n-                        ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(false));\n-                BLangAssignment successResult =\n-                        ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(true));\n-                blockStmt.addStatement(failureResult);\n-\n-                List<BType> memberTupleTypes = ((BTupleType) varRef.type).getTupleTypes();\n-                List<BLangMatchPattern> matchPatterns = listMatchPattern.matchPatterns;\n-\n-                BLangSimpleVariableDef tempCastVarDef = createVarDef(\"$castTemp$\", varRef.type, varRef, pos);\n-                blockStmt.addStatement(tempCastVarDef);\n-                BLangExpression condition = createConditionForListMemberPattern(0, matchPatterns.get(0),\n-                        tempCastVarDef, blockStmt, memberTupleTypes.get(0), pos);\n-\n-                for (int i = 1; i < matchPatterns.size(); i++) {\n-                    BLangExpression memberPatternCondition = createConditionForListMemberPattern(i,\n-                            matchPatterns.get(i), tempCastVarDef, blockStmt, memberTupleTypes.get(i), pos);\n-\n-                    condition = ASTBuilderUtil.createBinaryExpr(pos, condition, memberPatternCondition,\n-                            symTable.booleanType, OperatorKind.AND, (BOperatorSymbol) symResolver\n-                                    .resolveBinaryOperator(OperatorKind.AND, symTable.booleanType,\n-                                            symTable.booleanType));\n-                }\n+        BLangSimpleVariableDef resultVarDef = createVarDef(\"$mappingPatternResult$\", symTable.booleanType, null, pos);\n+        BLangSimpleVarRef resultVarRef = ASTBuilderUtil.createVariableRef(pos, resultVarDef.var.symbol);\n+        BLangBlockStmt mainBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+        mainBlockStmt.addStatement(resultVarDef);\n+\n+        BLangAssignment failureResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(false));\n+        BLangAssignment successResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(true));\n+        mainBlockStmt.addStatement(failureResult);\n \n-                BLangBlockStmt tempBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n-                tempBlockStmt.addStatement(successResult);\n-                BLangIf ifStmtForMatchPatterns = ASTBuilderUtil.createIfElseStmt(pos, condition, tempBlockStmt, null);\n-                blockStmt.addStatement(ifStmtForMatchPatterns);\n+        BLangExpression typeCheckCondition = createIsLikeExpression(mappingMatchPattern.pos, matchExprVarRef,\n+                matchPatternType);\n+        BLangExpression typeConvertedExpr = addConversionExprIfRequired(matchExprVarRef, matchPatternType);\n+        BLangSimpleVariableDef tempCastVarDef = createVarDef(\"$castTemp$\", matchPatternType, typeConvertedExpr, pos);\n+        BLangSimpleVarRef tempCastVarRef = ASTBuilderUtil.createVariableRef(pos, tempCastVarDef.var.symbol);\n \n-                BLangStatementExpression statementExpression = ASTBuilderUtil.createStatementExpression(blockStmt,\n-                        resultVarRef);\n-                statementExpression.type = symTable.booleanType;\n-                return statementExpression;\n-            default:\n-                // If some patterns are not implemented, those should be detected before this phase\n-                // TODO : Remove this after all patterns are implemented\n-                return null;\n+        BLangBlockStmt ifBlock = ASTBuilderUtil.createBlockStmt(pos);\n+        ifBlock.addStatement(tempCastVarDef);\n+        BLangIf ifStmt = ASTBuilderUtil.createIfElseStmt(pos, typeCheckCondition, ifBlock, null);\n+        mainBlockStmt.addStatement(ifStmt);\n+\n+        BLangExpression condition = createConditionForFieldMatchPatterns(mappingMatchPattern.fieldMatchPatterns,\n+                tempCastVarDef, ifBlock, pos);\n+\n+        BLangBlockStmt tempBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+        tempBlockStmt.addStatement(successResult);\n+        if (mappingMatchPattern.restMatchPattern != null) {\n+            BLangRestMatchPattern restMatchPattern = mappingMatchPattern.restMatchPattern;\n+            Location restPatternPos = restMatchPattern.pos;\n+            List<String> keysToRemove = getKeysToRemove(mappingMatchPattern);\n+            BMapType entriesType = new BMapType(TypeTags.MAP, new BTupleType(Arrays.asList(symTable.stringType,\n+                    ((BMapType) mappingMatchPattern.restMatchPattern.type).constraint)), null);\n+            BLangInvocation entriesInvocation = generateMapEntriesInvocation(tempCastVarRef, entriesType);\n+            BLangSimpleVariableDef entriesVarDef = createVarDef(\"$entries$\", entriesType, entriesInvocation,\n+                    restPatternPos);\n+            tempBlockStmt.addStatement(entriesVarDef);\n+            BLangLambdaFunction filteringFunction = createFuncToFilterOutRestParam(keysToRemove, restPatternPos);\n+            BLangInvocation filterInvocation = generateMapFilterInvocation(pos, entriesVarDef.var, filteringFunction);\n+            BLangSimpleVariableDef filtersVarDef = createVarDef(\"$filteredVarDef$\", entriesType, filterInvocation,\n+                    restPatternPos);\n+            tempBlockStmt.addStatement(filtersVarDef);\n+            BLangLambdaFunction backToMapLambda = generateEntriesToMapLambda(restPatternPos);\n+            BLangInvocation mapInvocation = generateMapMapInvocation(restPatternPos, filtersVarDef.var,\n+                    backToMapLambda);\n+            BLangSimpleVarRef restMatchPatternVarRef = declaredVarDef.get(restMatchPattern.getIdentifier().getValue());\n+            tempBlockStmt.addStatement(ASTBuilderUtil.createAssignmentStmt(pos, restMatchPatternVarRef, mapInvocation));\n+        }\n+        BLangIf ifStmtForMatchPatterns = ASTBuilderUtil.createIfElseStmt(pos, condition, tempBlockStmt, null);\n+        ifBlock.addStatement(ifStmtForMatchPatterns);\n+\n+        BLangStatementExpression statementExpression = ASTBuilderUtil.createStatementExpression(mainBlockStmt,\n+                resultVarRef);\n+        statementExpression.type = symTable.booleanType;\n+\n+        addAsRecordTypeDefinition(matchPatternType, pos);\n+        return statementExpression;\n+    }\n+\n+    private List<String> getKeysToRemove(BLangMappingMatchPattern mappingMatchPattern) {\n+        List<String> keysToRemove = new ArrayList<>();\n+        for (BLangFieldMatchPattern fieldMatchPattern : mappingMatchPattern.fieldMatchPatterns) {\n+            keysToRemove.add(fieldMatchPattern.fieldName.value);\n         }\n+        return keysToRemove;\n     }\n \n-    private BLangExpression createConditionForMatchPattern(BLangMatchPattern matchPattern,\n-                                                           BLangSimpleVarRef matchExprVarRef) {\n+    private BLangExpression createConditionForFieldMatchPatterns(List<BLangFieldMatchPattern> fieldMatchPatterns,\n+                                                                 BLangSimpleVariableDef varDef,\n+                                                                 BLangBlockStmt blockStmt,\n+                                                                 Location pos) {\n+        BLangExpression condition = ASTBuilderUtil.createLiteral(pos, symTable.booleanType, true);\n+        for (int i = 0; i < fieldMatchPatterns.size(); i++) {\n+            BLangExpression fieldMatchPatternCondition =\n+                    createConditionForFieldMatchPattern(i, fieldMatchPatterns.get(i), varDef, blockStmt);\n+            condition = ASTBuilderUtil.createBinaryExpr(pos, condition, fieldMatchPatternCondition,\n+                    symTable.booleanType, OperatorKind.AND, (BOperatorSymbol) symResolver\n+                            .resolveBinaryOperator(OperatorKind.AND, symTable.booleanType, symTable.booleanType));\n+        }\n+        return condition;\n+    }\n+\n+    private BLangExpression createConditionForFieldMatchPattern(int index, BLangFieldMatchPattern fieldMatchPattern,\n+                                                                BLangSimpleVariableDef tempCastVarDef,\n+                                                                BLangBlockStmt blockStmt) {\n+        String fieldName = fieldMatchPattern.fieldName.value;\n+        BLangMatchPattern matchPattern = fieldMatchPattern.matchPattern;\n+        BLangFieldBasedAccess fieldBasedAccessExpr = getFieldAccessExpression(fieldMatchPattern.pos, fieldName,\n+                matchPattern.type, tempCastVarDef.var.symbol);\n+        BLangSimpleVariableDef tempVarDef = createVarDef(\"$memberVarTemp$\" + index + \"_$\", matchPattern.type,\n+                fieldBasedAccessExpr, matchPattern.pos);\n+        BLangSimpleVarRef tempVarRef = ASTBuilderUtil.createVariableRef(matchPattern.pos, tempVarDef.var.symbol);\n+        blockStmt.addStatement(tempVarDef);\n+        return createVarCheckCondition(matchPattern, tempVarRef);\n+    }\n+\n+    private BLangExpression createVarCheckCondition(BLangMatchPattern matchPattern, BLangSimpleVarRef varRef) {\n \n         NodeKind patternKind = matchPattern.getKind();\n         switch (patternKind) {\n             case WILDCARD_MATCH_PATTERN:\n                 return createConditionForWildCardMatchPattern((BLangWildCardMatchPattern) matchPattern);\n             case CONST_MATCH_PATTERN:\n-                return createConditionForConstMatchPattern((BLangConstPattern) matchPattern, matchExprVarRef);\n+                return createConditionForConstMatchPattern((BLangConstPattern) matchPattern, varRef);\n             case VAR_BINDING_PATTERN_MATCH_PATTERN:\n                 return createConditionForVarBindingPatternMatchPattern(\n-                        (BLangVarBindingPatternMatchPattern) matchPattern, matchExprVarRef);\n+                        (BLangVarBindingPatternMatchPattern) matchPattern, varRef);\n             case LIST_MATCH_PATTERN:\n-                return createConditionForListMatchPattern((BLangListMatchPattern) matchPattern, matchExprVarRef);\n+                return createVarCheckConditionForListMatchPattern((BLangListMatchPattern) matchPattern, varRef);\n+            case MAPPING_MATCH_PATTERN:\n+                return createVarCheckConditionForMappingMatchPattern((BLangMappingMatchPattern) matchPattern, varRef);\n             default:\n                 // If some patterns are not implemented, those should be detected before this phase\n                 // TODO : Remove this after all patterns are implemented\n                 return null;\n         }\n     }\n \n+    private BLangExpression createVarCheckConditionForListMatchPattern(BLangListMatchPattern listMatchPattern,\n+                                                                       BLangSimpleVarRef varRef) {\n+        Location pos = listMatchPattern.pos;\n+        BLangBlockStmt blockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+\n+        BLangSimpleVariableDef resultVarDef = createVarDef(\"$listPatternVarResult$\", symTable.booleanType, null,\n+                pos);\n+        BLangSimpleVarRef resultVarRef = ASTBuilderUtil.createVariableRef(pos, resultVarDef.var.symbol);\n+        blockStmt.addStatement(resultVarDef);\n+\n+        BLangAssignment failureResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(false));\n+        BLangAssignment successResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(true));\n+        blockStmt.addStatement(failureResult);\n+\n+        List<BType> memberTupleTypes = ((BTupleType) varRef.type).getTupleTypes();\n+        List<BLangMatchPattern> matchPatterns = listMatchPattern.matchPatterns;\n+\n+        BLangSimpleVariableDef tempCastVarDef = createVarDef(\"$castTemp$\", varRef.type, varRef, pos);\n+        blockStmt.addStatement(tempCastVarDef);\n+        BLangExpression condition = createConditionForListMemberPattern(0, matchPatterns.get(0),\n+                tempCastVarDef, blockStmt, memberTupleTypes.get(0), pos);\n+\n+        for (int i = 1; i < matchPatterns.size(); i++) {\n+            BLangExpression memberPatternCondition = createConditionForListMemberPattern(i,\n+                    matchPatterns.get(i), tempCastVarDef, blockStmt, memberTupleTypes.get(i), pos);\n+\n+            condition = ASTBuilderUtil.createBinaryExpr(pos, condition, memberPatternCondition,\n+                    symTable.booleanType, OperatorKind.AND, (BOperatorSymbol) symResolver\n+                            .resolveBinaryOperator(OperatorKind.AND, symTable.booleanType,\n+                                    symTable.booleanType));\n+        }\n+\n+        BLangBlockStmt tempBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+        tempBlockStmt.addStatement(successResult);\n+        BLangIf ifStmtForMatchPatterns = ASTBuilderUtil.createIfElseStmt(pos, condition, tempBlockStmt, null);\n+        blockStmt.addStatement(ifStmtForMatchPatterns);\n+\n+        BLangStatementExpression statementExpression = ASTBuilderUtil.createStatementExpression(blockStmt,\n+                resultVarRef);\n+        statementExpression.type = symTable.booleanType;\n+        return statementExpression;\n+    }\n+\n+    private BLangExpression createVarCheckConditionForMappingMatchPattern(BLangMappingMatchPattern mappingMatchPattern,\n+                                                                          BLangSimpleVarRef varRef) {\n+        BRecordType recordType = (BRecordType) mappingMatchPattern.type;\n+        Location pos = mappingMatchPattern.pos;\n+        BLangBlockStmt blockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+\n+        BLangSimpleVariableDef resultVarDef = createVarDef(\"$mappingPatternVarResult$\", symTable.booleanType,\n+                null, pos);\n+        BLangSimpleVarRef resultVarRef = ASTBuilderUtil.createVariableRef(pos, resultVarDef.var.symbol);\n+        blockStmt.addStatement(resultVarDef);\n+\n+        BLangAssignment failureResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(false));\n+        BLangAssignment successResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(true));\n+        blockStmt.addStatement(failureResult);\n+\n+        BLangSimpleVariableDef tempCastVarDef = createVarDef(\"$castTemp$\", mappingMatchPattern.type, varRef,\n+                pos);\n+        blockStmt.addStatement(tempCastVarDef);\n+\n+        BLangExpression condition =\n+                createConditionForFieldMatchPatterns(mappingMatchPattern.fieldMatchPatterns, tempCastVarDef,\n+                        blockStmt, pos);\n+\n+        BLangBlockStmt tempBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+        tempBlockStmt.addStatement(successResult);\n+        BLangIf ifStmtForMatchPatterns = ASTBuilderUtil.createIfElseStmt(pos, condition, tempBlockStmt, null);\n+        blockStmt.addStatement(ifStmtForMatchPatterns);\n+\n+        BLangStatementExpression statementExpression = ASTBuilderUtil.createStatementExpression(blockStmt,\n+                resultVarRef);\n+        statementExpression.type = symTable.booleanType;\n+        addAsRecordTypeDefinition(recordType, pos);\n+        return statementExpression;\n+    }\n+\n+    private void addAsRecordTypeDefinition(BType type, Location pos) {\n+        if (type.tag == TypeTags.UNION) {\n+            for (BType memberType : ((BUnionType) type).getMemberTypes()) {\n+                addAsRecordTypeDefinition(memberType, pos);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a795ecd1ecb76c24c1d87a0e00b7ecd1849f0ef4"}, "originalPosition": 322}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM2OTc0Mw==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r556369743", "createdAt": "2021-01-13T09:15:21Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -3463,89 +3487,252 @@ private BLangExpression createConditionForListMemberPattern(int index, BLangMatc\n         return createVarCheckCondition(listMemberMatchPattern, tempVarRef);\n     }\n \n-    private BLangExpression createVarCheckCondition(BLangMatchPattern matchPattern,\n-                                                    BLangSimpleVarRef varRef) {\n+    private BLangExpression createConditionForMappingMatchPattern(BLangMappingMatchPattern mappingMatchPattern,\n+                                                                  BLangSimpleVarRef matchExprVarRef) {\n+        BType matchPatternType = mappingMatchPattern.type;\n+        Location pos = mappingMatchPattern.pos;\n \n-        NodeKind patternKind = matchPattern.getKind();\n-        switch (patternKind) {\n-            case WILDCARD_MATCH_PATTERN:\n-                return createConditionForWildCardMatchPattern((BLangWildCardMatchPattern) matchPattern);\n-            case CONST_MATCH_PATTERN:\n-                return createConditionForConstMatchPattern((BLangConstPattern) matchPattern, varRef);\n-            case VAR_BINDING_PATTERN_MATCH_PATTERN:\n-                return createConditionForVarBindingPatternMatchPattern(\n-                        (BLangVarBindingPatternMatchPattern) matchPattern, varRef);\n-            case LIST_MATCH_PATTERN:\n-                BLangListMatchPattern listMatchPattern = (BLangListMatchPattern) matchPattern;\n-                Location pos = listMatchPattern.pos;\n-                BLangBlockStmt blockStmt = ASTBuilderUtil.createBlockStmt(pos);\n-\n-                BLangSimpleVariableDef resultVarDef = createVarDef(\"$listPatternVarResult$\", symTable.booleanType, null,\n-                        pos);\n-                BLangSimpleVarRef resultVarRef = ASTBuilderUtil.createVariableRef(pos, resultVarDef.var.symbol);\n-                blockStmt.addStatement(resultVarDef);\n-\n-                BLangAssignment failureResult =\n-                        ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(false));\n-                BLangAssignment successResult =\n-                        ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(true));\n-                blockStmt.addStatement(failureResult);\n-\n-                List<BType> memberTupleTypes = ((BTupleType) varRef.type).getTupleTypes();\n-                List<BLangMatchPattern> matchPatterns = listMatchPattern.matchPatterns;\n-\n-                BLangSimpleVariableDef tempCastVarDef = createVarDef(\"$castTemp$\", varRef.type, varRef, pos);\n-                blockStmt.addStatement(tempCastVarDef);\n-                BLangExpression condition = createConditionForListMemberPattern(0, matchPatterns.get(0),\n-                        tempCastVarDef, blockStmt, memberTupleTypes.get(0), pos);\n-\n-                for (int i = 1; i < matchPatterns.size(); i++) {\n-                    BLangExpression memberPatternCondition = createConditionForListMemberPattern(i,\n-                            matchPatterns.get(i), tempCastVarDef, blockStmt, memberTupleTypes.get(i), pos);\n-\n-                    condition = ASTBuilderUtil.createBinaryExpr(pos, condition, memberPatternCondition,\n-                            symTable.booleanType, OperatorKind.AND, (BOperatorSymbol) symResolver\n-                                    .resolveBinaryOperator(OperatorKind.AND, symTable.booleanType,\n-                                            symTable.booleanType));\n-                }\n+        BLangSimpleVariableDef resultVarDef = createVarDef(\"$mappingPatternResult$\", symTable.booleanType, null, pos);\n+        BLangSimpleVarRef resultVarRef = ASTBuilderUtil.createVariableRef(pos, resultVarDef.var.symbol);\n+        BLangBlockStmt mainBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+        mainBlockStmt.addStatement(resultVarDef);\n+\n+        BLangAssignment failureResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(false));\n+        BLangAssignment successResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(true));\n+        mainBlockStmt.addStatement(failureResult);\n \n-                BLangBlockStmt tempBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n-                tempBlockStmt.addStatement(successResult);\n-                BLangIf ifStmtForMatchPatterns = ASTBuilderUtil.createIfElseStmt(pos, condition, tempBlockStmt, null);\n-                blockStmt.addStatement(ifStmtForMatchPatterns);\n+        BLangExpression typeCheckCondition = createIsLikeExpression(mappingMatchPattern.pos, matchExprVarRef,\n+                matchPatternType);\n+        BLangExpression typeConvertedExpr = addConversionExprIfRequired(matchExprVarRef, matchPatternType);\n+        BLangSimpleVariableDef tempCastVarDef = createVarDef(\"$castTemp$\", matchPatternType, typeConvertedExpr, pos);\n+        BLangSimpleVarRef tempCastVarRef = ASTBuilderUtil.createVariableRef(pos, tempCastVarDef.var.symbol);\n \n-                BLangStatementExpression statementExpression = ASTBuilderUtil.createStatementExpression(blockStmt,\n-                        resultVarRef);\n-                statementExpression.type = symTable.booleanType;\n-                return statementExpression;\n-            default:\n-                // If some patterns are not implemented, those should be detected before this phase\n-                // TODO : Remove this after all patterns are implemented\n-                return null;\n+        BLangBlockStmt ifBlock = ASTBuilderUtil.createBlockStmt(pos);\n+        ifBlock.addStatement(tempCastVarDef);\n+        BLangIf ifStmt = ASTBuilderUtil.createIfElseStmt(pos, typeCheckCondition, ifBlock, null);\n+        mainBlockStmt.addStatement(ifStmt);\n+\n+        BLangExpression condition = createConditionForFieldMatchPatterns(mappingMatchPattern.fieldMatchPatterns,\n+                tempCastVarDef, ifBlock, pos);\n+\n+        BLangBlockStmt tempBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+        tempBlockStmt.addStatement(successResult);\n+        if (mappingMatchPattern.restMatchPattern != null) {\n+            BLangRestMatchPattern restMatchPattern = mappingMatchPattern.restMatchPattern;\n+            Location restPatternPos = restMatchPattern.pos;\n+            List<String> keysToRemove = getKeysToRemove(mappingMatchPattern);\n+            BMapType entriesType = new BMapType(TypeTags.MAP, new BTupleType(Arrays.asList(symTable.stringType,\n+                    ((BMapType) mappingMatchPattern.restMatchPattern.type).constraint)), null);\n+            BLangInvocation entriesInvocation = generateMapEntriesInvocation(tempCastVarRef, entriesType);\n+            BLangSimpleVariableDef entriesVarDef = createVarDef(\"$entries$\", entriesType, entriesInvocation,\n+                    restPatternPos);\n+            tempBlockStmt.addStatement(entriesVarDef);\n+            BLangLambdaFunction filteringFunction = createFuncToFilterOutRestParam(keysToRemove, restPatternPos);\n+            BLangInvocation filterInvocation = generateMapFilterInvocation(pos, entriesVarDef.var, filteringFunction);\n+            BLangSimpleVariableDef filtersVarDef = createVarDef(\"$filteredVarDef$\", entriesType, filterInvocation,\n+                    restPatternPos);\n+            tempBlockStmt.addStatement(filtersVarDef);\n+            BLangLambdaFunction backToMapLambda = generateEntriesToMapLambda(restPatternPos);\n+            BLangInvocation mapInvocation = generateMapMapInvocation(restPatternPos, filtersVarDef.var,\n+                    backToMapLambda);\n+            BLangSimpleVarRef restMatchPatternVarRef = declaredVarDef.get(restMatchPattern.getIdentifier().getValue());\n+            tempBlockStmt.addStatement(ASTBuilderUtil.createAssignmentStmt(pos, restMatchPatternVarRef, mapInvocation));\n+        }\n+        BLangIf ifStmtForMatchPatterns = ASTBuilderUtil.createIfElseStmt(pos, condition, tempBlockStmt, null);\n+        ifBlock.addStatement(ifStmtForMatchPatterns);\n+\n+        BLangStatementExpression statementExpression = ASTBuilderUtil.createStatementExpression(mainBlockStmt,\n+                resultVarRef);\n+        statementExpression.type = symTable.booleanType;\n+\n+        addAsRecordTypeDefinition(matchPatternType, pos);\n+        return statementExpression;\n+    }\n+\n+    private List<String> getKeysToRemove(BLangMappingMatchPattern mappingMatchPattern) {\n+        List<String> keysToRemove = new ArrayList<>();\n+        for (BLangFieldMatchPattern fieldMatchPattern : mappingMatchPattern.fieldMatchPatterns) {\n+            keysToRemove.add(fieldMatchPattern.fieldName.value);\n         }\n+        return keysToRemove;\n     }\n \n-    private BLangExpression createConditionForMatchPattern(BLangMatchPattern matchPattern,\n-                                                           BLangSimpleVarRef matchExprVarRef) {\n+    private BLangExpression createConditionForFieldMatchPatterns(List<BLangFieldMatchPattern> fieldMatchPatterns,\n+                                                                 BLangSimpleVariableDef varDef,\n+                                                                 BLangBlockStmt blockStmt,\n+                                                                 Location pos) {\n+        BLangExpression condition = ASTBuilderUtil.createLiteral(pos, symTable.booleanType, true);\n+        for (int i = 0; i < fieldMatchPatterns.size(); i++) {\n+            BLangExpression fieldMatchPatternCondition =\n+                    createConditionForFieldMatchPattern(i, fieldMatchPatterns.get(i), varDef, blockStmt);\n+            condition = ASTBuilderUtil.createBinaryExpr(pos, condition, fieldMatchPatternCondition,\n+                    symTable.booleanType, OperatorKind.AND, (BOperatorSymbol) symResolver\n+                            .resolveBinaryOperator(OperatorKind.AND, symTable.booleanType, symTable.booleanType));\n+        }\n+        return condition;\n+    }\n+\n+    private BLangExpression createConditionForFieldMatchPattern(int index, BLangFieldMatchPattern fieldMatchPattern,\n+                                                                BLangSimpleVariableDef tempCastVarDef,\n+                                                                BLangBlockStmt blockStmt) {\n+        String fieldName = fieldMatchPattern.fieldName.value;\n+        BLangMatchPattern matchPattern = fieldMatchPattern.matchPattern;\n+        BLangFieldBasedAccess fieldBasedAccessExpr = getFieldAccessExpression(fieldMatchPattern.pos, fieldName,\n+                matchPattern.type, tempCastVarDef.var.symbol);\n+        BLangSimpleVariableDef tempVarDef = createVarDef(\"$memberVarTemp$\" + index + \"_$\", matchPattern.type,\n+                fieldBasedAccessExpr, matchPattern.pos);\n+        BLangSimpleVarRef tempVarRef = ASTBuilderUtil.createVariableRef(matchPattern.pos, tempVarDef.var.symbol);\n+        blockStmt.addStatement(tempVarDef);\n+        return createVarCheckCondition(matchPattern, tempVarRef);\n+    }\n+\n+    private BLangExpression createVarCheckCondition(BLangMatchPattern matchPattern, BLangSimpleVarRef varRef) {\n \n         NodeKind patternKind = matchPattern.getKind();\n         switch (patternKind) {\n             case WILDCARD_MATCH_PATTERN:\n                 return createConditionForWildCardMatchPattern((BLangWildCardMatchPattern) matchPattern);\n             case CONST_MATCH_PATTERN:\n-                return createConditionForConstMatchPattern((BLangConstPattern) matchPattern, matchExprVarRef);\n+                return createConditionForConstMatchPattern((BLangConstPattern) matchPattern, varRef);\n             case VAR_BINDING_PATTERN_MATCH_PATTERN:\n                 return createConditionForVarBindingPatternMatchPattern(\n-                        (BLangVarBindingPatternMatchPattern) matchPattern, matchExprVarRef);\n+                        (BLangVarBindingPatternMatchPattern) matchPattern, varRef);\n             case LIST_MATCH_PATTERN:\n-                return createConditionForListMatchPattern((BLangListMatchPattern) matchPattern, matchExprVarRef);\n+                return createVarCheckConditionForListMatchPattern((BLangListMatchPattern) matchPattern, varRef);\n+            case MAPPING_MATCH_PATTERN:\n+                return createVarCheckConditionForMappingMatchPattern((BLangMappingMatchPattern) matchPattern, varRef);\n             default:\n                 // If some patterns are not implemented, those should be detected before this phase\n                 // TODO : Remove this after all patterns are implemented\n                 return null;\n         }\n     }\n \n+    private BLangExpression createVarCheckConditionForListMatchPattern(BLangListMatchPattern listMatchPattern,\n+                                                                       BLangSimpleVarRef varRef) {\n+        Location pos = listMatchPattern.pos;\n+        BLangBlockStmt blockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+\n+        BLangSimpleVariableDef resultVarDef = createVarDef(\"$listPatternVarResult$\", symTable.booleanType, null,\n+                pos);\n+        BLangSimpleVarRef resultVarRef = ASTBuilderUtil.createVariableRef(pos, resultVarDef.var.symbol);\n+        blockStmt.addStatement(resultVarDef);\n+\n+        BLangAssignment failureResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(false));\n+        BLangAssignment successResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(true));\n+        blockStmt.addStatement(failureResult);\n+\n+        List<BType> memberTupleTypes = ((BTupleType) varRef.type).getTupleTypes();\n+        List<BLangMatchPattern> matchPatterns = listMatchPattern.matchPatterns;\n+\n+        BLangSimpleVariableDef tempCastVarDef = createVarDef(\"$castTemp$\", varRef.type, varRef, pos);\n+        blockStmt.addStatement(tempCastVarDef);\n+        BLangExpression condition = createConditionForListMemberPattern(0, matchPatterns.get(0),\n+                tempCastVarDef, blockStmt, memberTupleTypes.get(0), pos);\n+\n+        for (int i = 1; i < matchPatterns.size(); i++) {\n+            BLangExpression memberPatternCondition = createConditionForListMemberPattern(i,\n+                    matchPatterns.get(i), tempCastVarDef, blockStmt, memberTupleTypes.get(i), pos);\n+\n+            condition = ASTBuilderUtil.createBinaryExpr(pos, condition, memberPatternCondition,\n+                    symTable.booleanType, OperatorKind.AND, (BOperatorSymbol) symResolver\n+                            .resolveBinaryOperator(OperatorKind.AND, symTable.booleanType,\n+                                    symTable.booleanType));\n+        }\n+\n+        BLangBlockStmt tempBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+        tempBlockStmt.addStatement(successResult);\n+        BLangIf ifStmtForMatchPatterns = ASTBuilderUtil.createIfElseStmt(pos, condition, tempBlockStmt, null);\n+        blockStmt.addStatement(ifStmtForMatchPatterns);\n+\n+        BLangStatementExpression statementExpression = ASTBuilderUtil.createStatementExpression(blockStmt,\n+                resultVarRef);\n+        statementExpression.type = symTable.booleanType;\n+        return statementExpression;\n+    }\n+\n+    private BLangExpression createVarCheckConditionForMappingMatchPattern(BLangMappingMatchPattern mappingMatchPattern,\n+                                                                          BLangSimpleVarRef varRef) {\n+        BRecordType recordType = (BRecordType) mappingMatchPattern.type;\n+        Location pos = mappingMatchPattern.pos;\n+        BLangBlockStmt blockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+\n+        BLangSimpleVariableDef resultVarDef = createVarDef(\"$mappingPatternVarResult$\", symTable.booleanType,\n+                null, pos);\n+        BLangSimpleVarRef resultVarRef = ASTBuilderUtil.createVariableRef(pos, resultVarDef.var.symbol);\n+        blockStmt.addStatement(resultVarDef);\n+\n+        BLangAssignment failureResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(false));\n+        BLangAssignment successResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(true));\n+        blockStmt.addStatement(failureResult);\n+\n+        BLangSimpleVariableDef tempCastVarDef = createVarDef(\"$castTemp$\", mappingMatchPattern.type, varRef,\n+                pos);\n+        blockStmt.addStatement(tempCastVarDef);\n+\n+        BLangExpression condition =\n+                createConditionForFieldMatchPatterns(mappingMatchPattern.fieldMatchPatterns, tempCastVarDef,\n+                        blockStmt, pos);\n+\n+        BLangBlockStmt tempBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+        tempBlockStmt.addStatement(successResult);\n+        BLangIf ifStmtForMatchPatterns = ASTBuilderUtil.createIfElseStmt(pos, condition, tempBlockStmt, null);\n+        blockStmt.addStatement(ifStmtForMatchPatterns);\n+\n+        BLangStatementExpression statementExpression = ASTBuilderUtil.createStatementExpression(blockStmt,\n+                resultVarRef);\n+        statementExpression.type = symTable.booleanType;\n+        addAsRecordTypeDefinition(recordType, pos);\n+        return statementExpression;\n+    }\n+\n+    private void addAsRecordTypeDefinition(BType type, Location pos) {\n+        if (type.tag == TypeTags.UNION) {\n+            for (BType memberType : ((BUnionType) type).getMemberTypes()) {\n+                addAsRecordTypeDefinition(memberType, pos);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI1NjgyOA=="}, "originalCommit": {"oid": "a795ecd1ecb76c24c1d87a0e00b7ecd1849f0ef4"}, "originalPosition": 322}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMjA2NDU0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwNDozOTo0MVrOISfS6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwNDozOTo0MVrOISfS6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI1ODAyNQ==", "bodyText": "Can't we use org.wso2.ballerinalang.compiler.util.TypeDefBuilderHelper#createRecordTypeNode(org.wso2.ballerinalang.compiler.semantics.model.types.BRecordType, org.ballerinalang.model.elements.PackageID, org.wso2.ballerinalang.compiler.semantics.model.SymbolTable, io.ballerina.tools.diagnostics.Location) here?\nIf there's something missing I think it should go in TypeDefBuilderHelper rather than adding it here.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r556258025", "createdAt": "2021-01-13T04:39:41Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -3463,89 +3487,252 @@ private BLangExpression createConditionForListMemberPattern(int index, BLangMatc\n         return createVarCheckCondition(listMemberMatchPattern, tempVarRef);\n     }\n \n-    private BLangExpression createVarCheckCondition(BLangMatchPattern matchPattern,\n-                                                    BLangSimpleVarRef varRef) {\n+    private BLangExpression createConditionForMappingMatchPattern(BLangMappingMatchPattern mappingMatchPattern,\n+                                                                  BLangSimpleVarRef matchExprVarRef) {\n+        BType matchPatternType = mappingMatchPattern.type;\n+        Location pos = mappingMatchPattern.pos;\n \n-        NodeKind patternKind = matchPattern.getKind();\n-        switch (patternKind) {\n-            case WILDCARD_MATCH_PATTERN:\n-                return createConditionForWildCardMatchPattern((BLangWildCardMatchPattern) matchPattern);\n-            case CONST_MATCH_PATTERN:\n-                return createConditionForConstMatchPattern((BLangConstPattern) matchPattern, varRef);\n-            case VAR_BINDING_PATTERN_MATCH_PATTERN:\n-                return createConditionForVarBindingPatternMatchPattern(\n-                        (BLangVarBindingPatternMatchPattern) matchPattern, varRef);\n-            case LIST_MATCH_PATTERN:\n-                BLangListMatchPattern listMatchPattern = (BLangListMatchPattern) matchPattern;\n-                Location pos = listMatchPattern.pos;\n-                BLangBlockStmt blockStmt = ASTBuilderUtil.createBlockStmt(pos);\n-\n-                BLangSimpleVariableDef resultVarDef = createVarDef(\"$listPatternVarResult$\", symTable.booleanType, null,\n-                        pos);\n-                BLangSimpleVarRef resultVarRef = ASTBuilderUtil.createVariableRef(pos, resultVarDef.var.symbol);\n-                blockStmt.addStatement(resultVarDef);\n-\n-                BLangAssignment failureResult =\n-                        ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(false));\n-                BLangAssignment successResult =\n-                        ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(true));\n-                blockStmt.addStatement(failureResult);\n-\n-                List<BType> memberTupleTypes = ((BTupleType) varRef.type).getTupleTypes();\n-                List<BLangMatchPattern> matchPatterns = listMatchPattern.matchPatterns;\n-\n-                BLangSimpleVariableDef tempCastVarDef = createVarDef(\"$castTemp$\", varRef.type, varRef, pos);\n-                blockStmt.addStatement(tempCastVarDef);\n-                BLangExpression condition = createConditionForListMemberPattern(0, matchPatterns.get(0),\n-                        tempCastVarDef, blockStmt, memberTupleTypes.get(0), pos);\n-\n-                for (int i = 1; i < matchPatterns.size(); i++) {\n-                    BLangExpression memberPatternCondition = createConditionForListMemberPattern(i,\n-                            matchPatterns.get(i), tempCastVarDef, blockStmt, memberTupleTypes.get(i), pos);\n-\n-                    condition = ASTBuilderUtil.createBinaryExpr(pos, condition, memberPatternCondition,\n-                            symTable.booleanType, OperatorKind.AND, (BOperatorSymbol) symResolver\n-                                    .resolveBinaryOperator(OperatorKind.AND, symTable.booleanType,\n-                                            symTable.booleanType));\n-                }\n+        BLangSimpleVariableDef resultVarDef = createVarDef(\"$mappingPatternResult$\", symTable.booleanType, null, pos);\n+        BLangSimpleVarRef resultVarRef = ASTBuilderUtil.createVariableRef(pos, resultVarDef.var.symbol);\n+        BLangBlockStmt mainBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+        mainBlockStmt.addStatement(resultVarDef);\n+\n+        BLangAssignment failureResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(false));\n+        BLangAssignment successResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(true));\n+        mainBlockStmt.addStatement(failureResult);\n \n-                BLangBlockStmt tempBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n-                tempBlockStmt.addStatement(successResult);\n-                BLangIf ifStmtForMatchPatterns = ASTBuilderUtil.createIfElseStmt(pos, condition, tempBlockStmt, null);\n-                blockStmt.addStatement(ifStmtForMatchPatterns);\n+        BLangExpression typeCheckCondition = createIsLikeExpression(mappingMatchPattern.pos, matchExprVarRef,\n+                matchPatternType);\n+        BLangExpression typeConvertedExpr = addConversionExprIfRequired(matchExprVarRef, matchPatternType);\n+        BLangSimpleVariableDef tempCastVarDef = createVarDef(\"$castTemp$\", matchPatternType, typeConvertedExpr, pos);\n+        BLangSimpleVarRef tempCastVarRef = ASTBuilderUtil.createVariableRef(pos, tempCastVarDef.var.symbol);\n \n-                BLangStatementExpression statementExpression = ASTBuilderUtil.createStatementExpression(blockStmt,\n-                        resultVarRef);\n-                statementExpression.type = symTable.booleanType;\n-                return statementExpression;\n-            default:\n-                // If some patterns are not implemented, those should be detected before this phase\n-                // TODO : Remove this after all patterns are implemented\n-                return null;\n+        BLangBlockStmt ifBlock = ASTBuilderUtil.createBlockStmt(pos);\n+        ifBlock.addStatement(tempCastVarDef);\n+        BLangIf ifStmt = ASTBuilderUtil.createIfElseStmt(pos, typeCheckCondition, ifBlock, null);\n+        mainBlockStmt.addStatement(ifStmt);\n+\n+        BLangExpression condition = createConditionForFieldMatchPatterns(mappingMatchPattern.fieldMatchPatterns,\n+                tempCastVarDef, ifBlock, pos);\n+\n+        BLangBlockStmt tempBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+        tempBlockStmt.addStatement(successResult);\n+        if (mappingMatchPattern.restMatchPattern != null) {\n+            BLangRestMatchPattern restMatchPattern = mappingMatchPattern.restMatchPattern;\n+            Location restPatternPos = restMatchPattern.pos;\n+            List<String> keysToRemove = getKeysToRemove(mappingMatchPattern);\n+            BMapType entriesType = new BMapType(TypeTags.MAP, new BTupleType(Arrays.asList(symTable.stringType,\n+                    ((BMapType) mappingMatchPattern.restMatchPattern.type).constraint)), null);\n+            BLangInvocation entriesInvocation = generateMapEntriesInvocation(tempCastVarRef, entriesType);\n+            BLangSimpleVariableDef entriesVarDef = createVarDef(\"$entries$\", entriesType, entriesInvocation,\n+                    restPatternPos);\n+            tempBlockStmt.addStatement(entriesVarDef);\n+            BLangLambdaFunction filteringFunction = createFuncToFilterOutRestParam(keysToRemove, restPatternPos);\n+            BLangInvocation filterInvocation = generateMapFilterInvocation(pos, entriesVarDef.var, filteringFunction);\n+            BLangSimpleVariableDef filtersVarDef = createVarDef(\"$filteredVarDef$\", entriesType, filterInvocation,\n+                    restPatternPos);\n+            tempBlockStmt.addStatement(filtersVarDef);\n+            BLangLambdaFunction backToMapLambda = generateEntriesToMapLambda(restPatternPos);\n+            BLangInvocation mapInvocation = generateMapMapInvocation(restPatternPos, filtersVarDef.var,\n+                    backToMapLambda);\n+            BLangSimpleVarRef restMatchPatternVarRef = declaredVarDef.get(restMatchPattern.getIdentifier().getValue());\n+            tempBlockStmt.addStatement(ASTBuilderUtil.createAssignmentStmt(pos, restMatchPatternVarRef, mapInvocation));\n+        }\n+        BLangIf ifStmtForMatchPatterns = ASTBuilderUtil.createIfElseStmt(pos, condition, tempBlockStmt, null);\n+        ifBlock.addStatement(ifStmtForMatchPatterns);\n+\n+        BLangStatementExpression statementExpression = ASTBuilderUtil.createStatementExpression(mainBlockStmt,\n+                resultVarRef);\n+        statementExpression.type = symTable.booleanType;\n+\n+        addAsRecordTypeDefinition(matchPatternType, pos);\n+        return statementExpression;\n+    }\n+\n+    private List<String> getKeysToRemove(BLangMappingMatchPattern mappingMatchPattern) {\n+        List<String> keysToRemove = new ArrayList<>();\n+        for (BLangFieldMatchPattern fieldMatchPattern : mappingMatchPattern.fieldMatchPatterns) {\n+            keysToRemove.add(fieldMatchPattern.fieldName.value);\n         }\n+        return keysToRemove;\n     }\n \n-    private BLangExpression createConditionForMatchPattern(BLangMatchPattern matchPattern,\n-                                                           BLangSimpleVarRef matchExprVarRef) {\n+    private BLangExpression createConditionForFieldMatchPatterns(List<BLangFieldMatchPattern> fieldMatchPatterns,\n+                                                                 BLangSimpleVariableDef varDef,\n+                                                                 BLangBlockStmt blockStmt,\n+                                                                 Location pos) {\n+        BLangExpression condition = ASTBuilderUtil.createLiteral(pos, symTable.booleanType, true);\n+        for (int i = 0; i < fieldMatchPatterns.size(); i++) {\n+            BLangExpression fieldMatchPatternCondition =\n+                    createConditionForFieldMatchPattern(i, fieldMatchPatterns.get(i), varDef, blockStmt);\n+            condition = ASTBuilderUtil.createBinaryExpr(pos, condition, fieldMatchPatternCondition,\n+                    symTable.booleanType, OperatorKind.AND, (BOperatorSymbol) symResolver\n+                            .resolveBinaryOperator(OperatorKind.AND, symTable.booleanType, symTable.booleanType));\n+        }\n+        return condition;\n+    }\n+\n+    private BLangExpression createConditionForFieldMatchPattern(int index, BLangFieldMatchPattern fieldMatchPattern,\n+                                                                BLangSimpleVariableDef tempCastVarDef,\n+                                                                BLangBlockStmt blockStmt) {\n+        String fieldName = fieldMatchPattern.fieldName.value;\n+        BLangMatchPattern matchPattern = fieldMatchPattern.matchPattern;\n+        BLangFieldBasedAccess fieldBasedAccessExpr = getFieldAccessExpression(fieldMatchPattern.pos, fieldName,\n+                matchPattern.type, tempCastVarDef.var.symbol);\n+        BLangSimpleVariableDef tempVarDef = createVarDef(\"$memberVarTemp$\" + index + \"_$\", matchPattern.type,\n+                fieldBasedAccessExpr, matchPattern.pos);\n+        BLangSimpleVarRef tempVarRef = ASTBuilderUtil.createVariableRef(matchPattern.pos, tempVarDef.var.symbol);\n+        blockStmt.addStatement(tempVarDef);\n+        return createVarCheckCondition(matchPattern, tempVarRef);\n+    }\n+\n+    private BLangExpression createVarCheckCondition(BLangMatchPattern matchPattern, BLangSimpleVarRef varRef) {\n \n         NodeKind patternKind = matchPattern.getKind();\n         switch (patternKind) {\n             case WILDCARD_MATCH_PATTERN:\n                 return createConditionForWildCardMatchPattern((BLangWildCardMatchPattern) matchPattern);\n             case CONST_MATCH_PATTERN:\n-                return createConditionForConstMatchPattern((BLangConstPattern) matchPattern, matchExprVarRef);\n+                return createConditionForConstMatchPattern((BLangConstPattern) matchPattern, varRef);\n             case VAR_BINDING_PATTERN_MATCH_PATTERN:\n                 return createConditionForVarBindingPatternMatchPattern(\n-                        (BLangVarBindingPatternMatchPattern) matchPattern, matchExprVarRef);\n+                        (BLangVarBindingPatternMatchPattern) matchPattern, varRef);\n             case LIST_MATCH_PATTERN:\n-                return createConditionForListMatchPattern((BLangListMatchPattern) matchPattern, matchExprVarRef);\n+                return createVarCheckConditionForListMatchPattern((BLangListMatchPattern) matchPattern, varRef);\n+            case MAPPING_MATCH_PATTERN:\n+                return createVarCheckConditionForMappingMatchPattern((BLangMappingMatchPattern) matchPattern, varRef);\n             default:\n                 // If some patterns are not implemented, those should be detected before this phase\n                 // TODO : Remove this after all patterns are implemented\n                 return null;\n         }\n     }\n \n+    private BLangExpression createVarCheckConditionForListMatchPattern(BLangListMatchPattern listMatchPattern,\n+                                                                       BLangSimpleVarRef varRef) {\n+        Location pos = listMatchPattern.pos;\n+        BLangBlockStmt blockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+\n+        BLangSimpleVariableDef resultVarDef = createVarDef(\"$listPatternVarResult$\", symTable.booleanType, null,\n+                pos);\n+        BLangSimpleVarRef resultVarRef = ASTBuilderUtil.createVariableRef(pos, resultVarDef.var.symbol);\n+        blockStmt.addStatement(resultVarDef);\n+\n+        BLangAssignment failureResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(false));\n+        BLangAssignment successResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(true));\n+        blockStmt.addStatement(failureResult);\n+\n+        List<BType> memberTupleTypes = ((BTupleType) varRef.type).getTupleTypes();\n+        List<BLangMatchPattern> matchPatterns = listMatchPattern.matchPatterns;\n+\n+        BLangSimpleVariableDef tempCastVarDef = createVarDef(\"$castTemp$\", varRef.type, varRef, pos);\n+        blockStmt.addStatement(tempCastVarDef);\n+        BLangExpression condition = createConditionForListMemberPattern(0, matchPatterns.get(0),\n+                tempCastVarDef, blockStmt, memberTupleTypes.get(0), pos);\n+\n+        for (int i = 1; i < matchPatterns.size(); i++) {\n+            BLangExpression memberPatternCondition = createConditionForListMemberPattern(i,\n+                    matchPatterns.get(i), tempCastVarDef, blockStmt, memberTupleTypes.get(i), pos);\n+\n+            condition = ASTBuilderUtil.createBinaryExpr(pos, condition, memberPatternCondition,\n+                    symTable.booleanType, OperatorKind.AND, (BOperatorSymbol) symResolver\n+                            .resolveBinaryOperator(OperatorKind.AND, symTable.booleanType,\n+                                    symTable.booleanType));\n+        }\n+\n+        BLangBlockStmt tempBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+        tempBlockStmt.addStatement(successResult);\n+        BLangIf ifStmtForMatchPatterns = ASTBuilderUtil.createIfElseStmt(pos, condition, tempBlockStmt, null);\n+        blockStmt.addStatement(ifStmtForMatchPatterns);\n+\n+        BLangStatementExpression statementExpression = ASTBuilderUtil.createStatementExpression(blockStmt,\n+                resultVarRef);\n+        statementExpression.type = symTable.booleanType;\n+        return statementExpression;\n+    }\n+\n+    private BLangExpression createVarCheckConditionForMappingMatchPattern(BLangMappingMatchPattern mappingMatchPattern,\n+                                                                          BLangSimpleVarRef varRef) {\n+        BRecordType recordType = (BRecordType) mappingMatchPattern.type;\n+        Location pos = mappingMatchPattern.pos;\n+        BLangBlockStmt blockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+\n+        BLangSimpleVariableDef resultVarDef = createVarDef(\"$mappingPatternVarResult$\", symTable.booleanType,\n+                null, pos);\n+        BLangSimpleVarRef resultVarRef = ASTBuilderUtil.createVariableRef(pos, resultVarDef.var.symbol);\n+        blockStmt.addStatement(resultVarDef);\n+\n+        BLangAssignment failureResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(false));\n+        BLangAssignment successResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(true));\n+        blockStmt.addStatement(failureResult);\n+\n+        BLangSimpleVariableDef tempCastVarDef = createVarDef(\"$castTemp$\", mappingMatchPattern.type, varRef,\n+                pos);\n+        blockStmt.addStatement(tempCastVarDef);\n+\n+        BLangExpression condition =\n+                createConditionForFieldMatchPatterns(mappingMatchPattern.fieldMatchPatterns, tempCastVarDef,\n+                        blockStmt, pos);\n+\n+        BLangBlockStmt tempBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+        tempBlockStmt.addStatement(successResult);\n+        BLangIf ifStmtForMatchPatterns = ASTBuilderUtil.createIfElseStmt(pos, condition, tempBlockStmt, null);\n+        blockStmt.addStatement(ifStmtForMatchPatterns);\n+\n+        BLangStatementExpression statementExpression = ASTBuilderUtil.createStatementExpression(blockStmt,\n+                resultVarRef);\n+        statementExpression.type = symTable.booleanType;\n+        addAsRecordTypeDefinition(recordType, pos);\n+        return statementExpression;\n+    }\n+\n+    private void addAsRecordTypeDefinition(BType type, Location pos) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a795ecd1ecb76c24c1d87a0e00b7ecd1849f0ef4"}, "originalPosition": 318}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMjA2NjAzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwNDo0MDoyOVrOISfTtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwOToxNToxMFrOISmG6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI1ODIzMA==", "bodyText": "What's the scenario where this becomes true?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r556258230", "createdAt": "2021-01-13T04:40:29Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -3463,89 +3487,252 @@ private BLangExpression createConditionForListMemberPattern(int index, BLangMatc\n         return createVarCheckCondition(listMemberMatchPattern, tempVarRef);\n     }\n \n-    private BLangExpression createVarCheckCondition(BLangMatchPattern matchPattern,\n-                                                    BLangSimpleVarRef varRef) {\n+    private BLangExpression createConditionForMappingMatchPattern(BLangMappingMatchPattern mappingMatchPattern,\n+                                                                  BLangSimpleVarRef matchExprVarRef) {\n+        BType matchPatternType = mappingMatchPattern.type;\n+        Location pos = mappingMatchPattern.pos;\n \n-        NodeKind patternKind = matchPattern.getKind();\n-        switch (patternKind) {\n-            case WILDCARD_MATCH_PATTERN:\n-                return createConditionForWildCardMatchPattern((BLangWildCardMatchPattern) matchPattern);\n-            case CONST_MATCH_PATTERN:\n-                return createConditionForConstMatchPattern((BLangConstPattern) matchPattern, varRef);\n-            case VAR_BINDING_PATTERN_MATCH_PATTERN:\n-                return createConditionForVarBindingPatternMatchPattern(\n-                        (BLangVarBindingPatternMatchPattern) matchPattern, varRef);\n-            case LIST_MATCH_PATTERN:\n-                BLangListMatchPattern listMatchPattern = (BLangListMatchPattern) matchPattern;\n-                Location pos = listMatchPattern.pos;\n-                BLangBlockStmt blockStmt = ASTBuilderUtil.createBlockStmt(pos);\n-\n-                BLangSimpleVariableDef resultVarDef = createVarDef(\"$listPatternVarResult$\", symTable.booleanType, null,\n-                        pos);\n-                BLangSimpleVarRef resultVarRef = ASTBuilderUtil.createVariableRef(pos, resultVarDef.var.symbol);\n-                blockStmt.addStatement(resultVarDef);\n-\n-                BLangAssignment failureResult =\n-                        ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(false));\n-                BLangAssignment successResult =\n-                        ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(true));\n-                blockStmt.addStatement(failureResult);\n-\n-                List<BType> memberTupleTypes = ((BTupleType) varRef.type).getTupleTypes();\n-                List<BLangMatchPattern> matchPatterns = listMatchPattern.matchPatterns;\n-\n-                BLangSimpleVariableDef tempCastVarDef = createVarDef(\"$castTemp$\", varRef.type, varRef, pos);\n-                blockStmt.addStatement(tempCastVarDef);\n-                BLangExpression condition = createConditionForListMemberPattern(0, matchPatterns.get(0),\n-                        tempCastVarDef, blockStmt, memberTupleTypes.get(0), pos);\n-\n-                for (int i = 1; i < matchPatterns.size(); i++) {\n-                    BLangExpression memberPatternCondition = createConditionForListMemberPattern(i,\n-                            matchPatterns.get(i), tempCastVarDef, blockStmt, memberTupleTypes.get(i), pos);\n-\n-                    condition = ASTBuilderUtil.createBinaryExpr(pos, condition, memberPatternCondition,\n-                            symTable.booleanType, OperatorKind.AND, (BOperatorSymbol) symResolver\n-                                    .resolveBinaryOperator(OperatorKind.AND, symTable.booleanType,\n-                                            symTable.booleanType));\n-                }\n+        BLangSimpleVariableDef resultVarDef = createVarDef(\"$mappingPatternResult$\", symTable.booleanType, null, pos);\n+        BLangSimpleVarRef resultVarRef = ASTBuilderUtil.createVariableRef(pos, resultVarDef.var.symbol);\n+        BLangBlockStmt mainBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+        mainBlockStmt.addStatement(resultVarDef);\n+\n+        BLangAssignment failureResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(false));\n+        BLangAssignment successResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(true));\n+        mainBlockStmt.addStatement(failureResult);\n \n-                BLangBlockStmt tempBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n-                tempBlockStmt.addStatement(successResult);\n-                BLangIf ifStmtForMatchPatterns = ASTBuilderUtil.createIfElseStmt(pos, condition, tempBlockStmt, null);\n-                blockStmt.addStatement(ifStmtForMatchPatterns);\n+        BLangExpression typeCheckCondition = createIsLikeExpression(mappingMatchPattern.pos, matchExprVarRef,\n+                matchPatternType);\n+        BLangExpression typeConvertedExpr = addConversionExprIfRequired(matchExprVarRef, matchPatternType);\n+        BLangSimpleVariableDef tempCastVarDef = createVarDef(\"$castTemp$\", matchPatternType, typeConvertedExpr, pos);\n+        BLangSimpleVarRef tempCastVarRef = ASTBuilderUtil.createVariableRef(pos, tempCastVarDef.var.symbol);\n \n-                BLangStatementExpression statementExpression = ASTBuilderUtil.createStatementExpression(blockStmt,\n-                        resultVarRef);\n-                statementExpression.type = symTable.booleanType;\n-                return statementExpression;\n-            default:\n-                // If some patterns are not implemented, those should be detected before this phase\n-                // TODO : Remove this after all patterns are implemented\n-                return null;\n+        BLangBlockStmt ifBlock = ASTBuilderUtil.createBlockStmt(pos);\n+        ifBlock.addStatement(tempCastVarDef);\n+        BLangIf ifStmt = ASTBuilderUtil.createIfElseStmt(pos, typeCheckCondition, ifBlock, null);\n+        mainBlockStmt.addStatement(ifStmt);\n+\n+        BLangExpression condition = createConditionForFieldMatchPatterns(mappingMatchPattern.fieldMatchPatterns,\n+                tempCastVarDef, ifBlock, pos);\n+\n+        BLangBlockStmt tempBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+        tempBlockStmt.addStatement(successResult);\n+        if (mappingMatchPattern.restMatchPattern != null) {\n+            BLangRestMatchPattern restMatchPattern = mappingMatchPattern.restMatchPattern;\n+            Location restPatternPos = restMatchPattern.pos;\n+            List<String> keysToRemove = getKeysToRemove(mappingMatchPattern);\n+            BMapType entriesType = new BMapType(TypeTags.MAP, new BTupleType(Arrays.asList(symTable.stringType,\n+                    ((BMapType) mappingMatchPattern.restMatchPattern.type).constraint)), null);\n+            BLangInvocation entriesInvocation = generateMapEntriesInvocation(tempCastVarRef, entriesType);\n+            BLangSimpleVariableDef entriesVarDef = createVarDef(\"$entries$\", entriesType, entriesInvocation,\n+                    restPatternPos);\n+            tempBlockStmt.addStatement(entriesVarDef);\n+            BLangLambdaFunction filteringFunction = createFuncToFilterOutRestParam(keysToRemove, restPatternPos);\n+            BLangInvocation filterInvocation = generateMapFilterInvocation(pos, entriesVarDef.var, filteringFunction);\n+            BLangSimpleVariableDef filtersVarDef = createVarDef(\"$filteredVarDef$\", entriesType, filterInvocation,\n+                    restPatternPos);\n+            tempBlockStmt.addStatement(filtersVarDef);\n+            BLangLambdaFunction backToMapLambda = generateEntriesToMapLambda(restPatternPos);\n+            BLangInvocation mapInvocation = generateMapMapInvocation(restPatternPos, filtersVarDef.var,\n+                    backToMapLambda);\n+            BLangSimpleVarRef restMatchPatternVarRef = declaredVarDef.get(restMatchPattern.getIdentifier().getValue());\n+            tempBlockStmt.addStatement(ASTBuilderUtil.createAssignmentStmt(pos, restMatchPatternVarRef, mapInvocation));\n+        }\n+        BLangIf ifStmtForMatchPatterns = ASTBuilderUtil.createIfElseStmt(pos, condition, tempBlockStmt, null);\n+        ifBlock.addStatement(ifStmtForMatchPatterns);\n+\n+        BLangStatementExpression statementExpression = ASTBuilderUtil.createStatementExpression(mainBlockStmt,\n+                resultVarRef);\n+        statementExpression.type = symTable.booleanType;\n+\n+        addAsRecordTypeDefinition(matchPatternType, pos);\n+        return statementExpression;\n+    }\n+\n+    private List<String> getKeysToRemove(BLangMappingMatchPattern mappingMatchPattern) {\n+        List<String> keysToRemove = new ArrayList<>();\n+        for (BLangFieldMatchPattern fieldMatchPattern : mappingMatchPattern.fieldMatchPatterns) {\n+            keysToRemove.add(fieldMatchPattern.fieldName.value);\n         }\n+        return keysToRemove;\n     }\n \n-    private BLangExpression createConditionForMatchPattern(BLangMatchPattern matchPattern,\n-                                                           BLangSimpleVarRef matchExprVarRef) {\n+    private BLangExpression createConditionForFieldMatchPatterns(List<BLangFieldMatchPattern> fieldMatchPatterns,\n+                                                                 BLangSimpleVariableDef varDef,\n+                                                                 BLangBlockStmt blockStmt,\n+                                                                 Location pos) {\n+        BLangExpression condition = ASTBuilderUtil.createLiteral(pos, symTable.booleanType, true);\n+        for (int i = 0; i < fieldMatchPatterns.size(); i++) {\n+            BLangExpression fieldMatchPatternCondition =\n+                    createConditionForFieldMatchPattern(i, fieldMatchPatterns.get(i), varDef, blockStmt);\n+            condition = ASTBuilderUtil.createBinaryExpr(pos, condition, fieldMatchPatternCondition,\n+                    symTable.booleanType, OperatorKind.AND, (BOperatorSymbol) symResolver\n+                            .resolveBinaryOperator(OperatorKind.AND, symTable.booleanType, symTable.booleanType));\n+        }\n+        return condition;\n+    }\n+\n+    private BLangExpression createConditionForFieldMatchPattern(int index, BLangFieldMatchPattern fieldMatchPattern,\n+                                                                BLangSimpleVariableDef tempCastVarDef,\n+                                                                BLangBlockStmt blockStmt) {\n+        String fieldName = fieldMatchPattern.fieldName.value;\n+        BLangMatchPattern matchPattern = fieldMatchPattern.matchPattern;\n+        BLangFieldBasedAccess fieldBasedAccessExpr = getFieldAccessExpression(fieldMatchPattern.pos, fieldName,\n+                matchPattern.type, tempCastVarDef.var.symbol);\n+        BLangSimpleVariableDef tempVarDef = createVarDef(\"$memberVarTemp$\" + index + \"_$\", matchPattern.type,\n+                fieldBasedAccessExpr, matchPattern.pos);\n+        BLangSimpleVarRef tempVarRef = ASTBuilderUtil.createVariableRef(matchPattern.pos, tempVarDef.var.symbol);\n+        blockStmt.addStatement(tempVarDef);\n+        return createVarCheckCondition(matchPattern, tempVarRef);\n+    }\n+\n+    private BLangExpression createVarCheckCondition(BLangMatchPattern matchPattern, BLangSimpleVarRef varRef) {\n \n         NodeKind patternKind = matchPattern.getKind();\n         switch (patternKind) {\n             case WILDCARD_MATCH_PATTERN:\n                 return createConditionForWildCardMatchPattern((BLangWildCardMatchPattern) matchPattern);\n             case CONST_MATCH_PATTERN:\n-                return createConditionForConstMatchPattern((BLangConstPattern) matchPattern, matchExprVarRef);\n+                return createConditionForConstMatchPattern((BLangConstPattern) matchPattern, varRef);\n             case VAR_BINDING_PATTERN_MATCH_PATTERN:\n                 return createConditionForVarBindingPatternMatchPattern(\n-                        (BLangVarBindingPatternMatchPattern) matchPattern, matchExprVarRef);\n+                        (BLangVarBindingPatternMatchPattern) matchPattern, varRef);\n             case LIST_MATCH_PATTERN:\n-                return createConditionForListMatchPattern((BLangListMatchPattern) matchPattern, matchExprVarRef);\n+                return createVarCheckConditionForListMatchPattern((BLangListMatchPattern) matchPattern, varRef);\n+            case MAPPING_MATCH_PATTERN:\n+                return createVarCheckConditionForMappingMatchPattern((BLangMappingMatchPattern) matchPattern, varRef);\n             default:\n                 // If some patterns are not implemented, those should be detected before this phase\n                 // TODO : Remove this after all patterns are implemented\n                 return null;\n         }\n     }\n \n+    private BLangExpression createVarCheckConditionForListMatchPattern(BLangListMatchPattern listMatchPattern,\n+                                                                       BLangSimpleVarRef varRef) {\n+        Location pos = listMatchPattern.pos;\n+        BLangBlockStmt blockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+\n+        BLangSimpleVariableDef resultVarDef = createVarDef(\"$listPatternVarResult$\", symTable.booleanType, null,\n+                pos);\n+        BLangSimpleVarRef resultVarRef = ASTBuilderUtil.createVariableRef(pos, resultVarDef.var.symbol);\n+        blockStmt.addStatement(resultVarDef);\n+\n+        BLangAssignment failureResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(false));\n+        BLangAssignment successResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(true));\n+        blockStmt.addStatement(failureResult);\n+\n+        List<BType> memberTupleTypes = ((BTupleType) varRef.type).getTupleTypes();\n+        List<BLangMatchPattern> matchPatterns = listMatchPattern.matchPatterns;\n+\n+        BLangSimpleVariableDef tempCastVarDef = createVarDef(\"$castTemp$\", varRef.type, varRef, pos);\n+        blockStmt.addStatement(tempCastVarDef);\n+        BLangExpression condition = createConditionForListMemberPattern(0, matchPatterns.get(0),\n+                tempCastVarDef, blockStmt, memberTupleTypes.get(0), pos);\n+\n+        for (int i = 1; i < matchPatterns.size(); i++) {\n+            BLangExpression memberPatternCondition = createConditionForListMemberPattern(i,\n+                    matchPatterns.get(i), tempCastVarDef, blockStmt, memberTupleTypes.get(i), pos);\n+\n+            condition = ASTBuilderUtil.createBinaryExpr(pos, condition, memberPatternCondition,\n+                    symTable.booleanType, OperatorKind.AND, (BOperatorSymbol) symResolver\n+                            .resolveBinaryOperator(OperatorKind.AND, symTable.booleanType,\n+                                    symTable.booleanType));\n+        }\n+\n+        BLangBlockStmt tempBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+        tempBlockStmt.addStatement(successResult);\n+        BLangIf ifStmtForMatchPatterns = ASTBuilderUtil.createIfElseStmt(pos, condition, tempBlockStmt, null);\n+        blockStmt.addStatement(ifStmtForMatchPatterns);\n+\n+        BLangStatementExpression statementExpression = ASTBuilderUtil.createStatementExpression(blockStmt,\n+                resultVarRef);\n+        statementExpression.type = symTable.booleanType;\n+        return statementExpression;\n+    }\n+\n+    private BLangExpression createVarCheckConditionForMappingMatchPattern(BLangMappingMatchPattern mappingMatchPattern,\n+                                                                          BLangSimpleVarRef varRef) {\n+        BRecordType recordType = (BRecordType) mappingMatchPattern.type;\n+        Location pos = mappingMatchPattern.pos;\n+        BLangBlockStmt blockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+\n+        BLangSimpleVariableDef resultVarDef = createVarDef(\"$mappingPatternVarResult$\", symTable.booleanType,\n+                null, pos);\n+        BLangSimpleVarRef resultVarRef = ASTBuilderUtil.createVariableRef(pos, resultVarDef.var.symbol);\n+        blockStmt.addStatement(resultVarDef);\n+\n+        BLangAssignment failureResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(false));\n+        BLangAssignment successResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(true));\n+        blockStmt.addStatement(failureResult);\n+\n+        BLangSimpleVariableDef tempCastVarDef = createVarDef(\"$castTemp$\", mappingMatchPattern.type, varRef,\n+                pos);\n+        blockStmt.addStatement(tempCastVarDef);\n+\n+        BLangExpression condition =\n+                createConditionForFieldMatchPatterns(mappingMatchPattern.fieldMatchPatterns, tempCastVarDef,\n+                        blockStmt, pos);\n+\n+        BLangBlockStmt tempBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+        tempBlockStmt.addStatement(successResult);\n+        BLangIf ifStmtForMatchPatterns = ASTBuilderUtil.createIfElseStmt(pos, condition, tempBlockStmt, null);\n+        blockStmt.addStatement(ifStmtForMatchPatterns);\n+\n+        BLangStatementExpression statementExpression = ASTBuilderUtil.createStatementExpression(blockStmt,\n+                resultVarRef);\n+        statementExpression.type = symTable.booleanType;\n+        addAsRecordTypeDefinition(recordType, pos);\n+        return statementExpression;\n+    }\n+\n+    private void addAsRecordTypeDefinition(BType type, Location pos) {\n+        if (type.tag == TypeTags.UNION) {\n+            for (BType memberType : ((BUnionType) type).getMemberTypes()) {\n+                addAsRecordTypeDefinition(memberType, pos);\n+            }\n+        }\n+        if (type.tag != TypeTags.RECORD) {\n+            return;\n+        }\n+        BRecordType recordType = (BRecordType) type;\n+        if (isRecordTypeDefExist(recordType.tsymbol, env)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a795ecd1ecb76c24c1d87a0e00b7ecd1849f0ef4"}, "originalPosition": 328}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM2OTY0MA==", "bodyText": "function foo(record {int x; int|string y;} v) returns string {\n    match v {\n        {x: 2, y: 3} => {\n            return \"match1\";\n        }\n        {x: 2, y: \"3\"} => {\n            return \"match2\";\n        }\n        {x: 2, y: var a} => {\n            return \"match3\";\n        }\n    }\n    return \"No match\";\n}\n\nIn this example, type of 3rd match-pattern is taken as {int, any|error}. Then it is resolved as {int, int|string} (type of v). In this process, tSymbol of match-pattern becomes, the tSymbol of v (this happens in getIntersectionType() function) which is already defined as typeDef in top level.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r556369640", "createdAt": "2021-01-13T09:15:10Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -3463,89 +3487,252 @@ private BLangExpression createConditionForListMemberPattern(int index, BLangMatc\n         return createVarCheckCondition(listMemberMatchPattern, tempVarRef);\n     }\n \n-    private BLangExpression createVarCheckCondition(BLangMatchPattern matchPattern,\n-                                                    BLangSimpleVarRef varRef) {\n+    private BLangExpression createConditionForMappingMatchPattern(BLangMappingMatchPattern mappingMatchPattern,\n+                                                                  BLangSimpleVarRef matchExprVarRef) {\n+        BType matchPatternType = mappingMatchPattern.type;\n+        Location pos = mappingMatchPattern.pos;\n \n-        NodeKind patternKind = matchPattern.getKind();\n-        switch (patternKind) {\n-            case WILDCARD_MATCH_PATTERN:\n-                return createConditionForWildCardMatchPattern((BLangWildCardMatchPattern) matchPattern);\n-            case CONST_MATCH_PATTERN:\n-                return createConditionForConstMatchPattern((BLangConstPattern) matchPattern, varRef);\n-            case VAR_BINDING_PATTERN_MATCH_PATTERN:\n-                return createConditionForVarBindingPatternMatchPattern(\n-                        (BLangVarBindingPatternMatchPattern) matchPattern, varRef);\n-            case LIST_MATCH_PATTERN:\n-                BLangListMatchPattern listMatchPattern = (BLangListMatchPattern) matchPattern;\n-                Location pos = listMatchPattern.pos;\n-                BLangBlockStmt blockStmt = ASTBuilderUtil.createBlockStmt(pos);\n-\n-                BLangSimpleVariableDef resultVarDef = createVarDef(\"$listPatternVarResult$\", symTable.booleanType, null,\n-                        pos);\n-                BLangSimpleVarRef resultVarRef = ASTBuilderUtil.createVariableRef(pos, resultVarDef.var.symbol);\n-                blockStmt.addStatement(resultVarDef);\n-\n-                BLangAssignment failureResult =\n-                        ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(false));\n-                BLangAssignment successResult =\n-                        ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(true));\n-                blockStmt.addStatement(failureResult);\n-\n-                List<BType> memberTupleTypes = ((BTupleType) varRef.type).getTupleTypes();\n-                List<BLangMatchPattern> matchPatterns = listMatchPattern.matchPatterns;\n-\n-                BLangSimpleVariableDef tempCastVarDef = createVarDef(\"$castTemp$\", varRef.type, varRef, pos);\n-                blockStmt.addStatement(tempCastVarDef);\n-                BLangExpression condition = createConditionForListMemberPattern(0, matchPatterns.get(0),\n-                        tempCastVarDef, blockStmt, memberTupleTypes.get(0), pos);\n-\n-                for (int i = 1; i < matchPatterns.size(); i++) {\n-                    BLangExpression memberPatternCondition = createConditionForListMemberPattern(i,\n-                            matchPatterns.get(i), tempCastVarDef, blockStmt, memberTupleTypes.get(i), pos);\n-\n-                    condition = ASTBuilderUtil.createBinaryExpr(pos, condition, memberPatternCondition,\n-                            symTable.booleanType, OperatorKind.AND, (BOperatorSymbol) symResolver\n-                                    .resolveBinaryOperator(OperatorKind.AND, symTable.booleanType,\n-                                            symTable.booleanType));\n-                }\n+        BLangSimpleVariableDef resultVarDef = createVarDef(\"$mappingPatternResult$\", symTable.booleanType, null, pos);\n+        BLangSimpleVarRef resultVarRef = ASTBuilderUtil.createVariableRef(pos, resultVarDef.var.symbol);\n+        BLangBlockStmt mainBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+        mainBlockStmt.addStatement(resultVarDef);\n+\n+        BLangAssignment failureResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(false));\n+        BLangAssignment successResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(true));\n+        mainBlockStmt.addStatement(failureResult);\n \n-                BLangBlockStmt tempBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n-                tempBlockStmt.addStatement(successResult);\n-                BLangIf ifStmtForMatchPatterns = ASTBuilderUtil.createIfElseStmt(pos, condition, tempBlockStmt, null);\n-                blockStmt.addStatement(ifStmtForMatchPatterns);\n+        BLangExpression typeCheckCondition = createIsLikeExpression(mappingMatchPattern.pos, matchExprVarRef,\n+                matchPatternType);\n+        BLangExpression typeConvertedExpr = addConversionExprIfRequired(matchExprVarRef, matchPatternType);\n+        BLangSimpleVariableDef tempCastVarDef = createVarDef(\"$castTemp$\", matchPatternType, typeConvertedExpr, pos);\n+        BLangSimpleVarRef tempCastVarRef = ASTBuilderUtil.createVariableRef(pos, tempCastVarDef.var.symbol);\n \n-                BLangStatementExpression statementExpression = ASTBuilderUtil.createStatementExpression(blockStmt,\n-                        resultVarRef);\n-                statementExpression.type = symTable.booleanType;\n-                return statementExpression;\n-            default:\n-                // If some patterns are not implemented, those should be detected before this phase\n-                // TODO : Remove this after all patterns are implemented\n-                return null;\n+        BLangBlockStmt ifBlock = ASTBuilderUtil.createBlockStmt(pos);\n+        ifBlock.addStatement(tempCastVarDef);\n+        BLangIf ifStmt = ASTBuilderUtil.createIfElseStmt(pos, typeCheckCondition, ifBlock, null);\n+        mainBlockStmt.addStatement(ifStmt);\n+\n+        BLangExpression condition = createConditionForFieldMatchPatterns(mappingMatchPattern.fieldMatchPatterns,\n+                tempCastVarDef, ifBlock, pos);\n+\n+        BLangBlockStmt tempBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+        tempBlockStmt.addStatement(successResult);\n+        if (mappingMatchPattern.restMatchPattern != null) {\n+            BLangRestMatchPattern restMatchPattern = mappingMatchPattern.restMatchPattern;\n+            Location restPatternPos = restMatchPattern.pos;\n+            List<String> keysToRemove = getKeysToRemove(mappingMatchPattern);\n+            BMapType entriesType = new BMapType(TypeTags.MAP, new BTupleType(Arrays.asList(symTable.stringType,\n+                    ((BMapType) mappingMatchPattern.restMatchPattern.type).constraint)), null);\n+            BLangInvocation entriesInvocation = generateMapEntriesInvocation(tempCastVarRef, entriesType);\n+            BLangSimpleVariableDef entriesVarDef = createVarDef(\"$entries$\", entriesType, entriesInvocation,\n+                    restPatternPos);\n+            tempBlockStmt.addStatement(entriesVarDef);\n+            BLangLambdaFunction filteringFunction = createFuncToFilterOutRestParam(keysToRemove, restPatternPos);\n+            BLangInvocation filterInvocation = generateMapFilterInvocation(pos, entriesVarDef.var, filteringFunction);\n+            BLangSimpleVariableDef filtersVarDef = createVarDef(\"$filteredVarDef$\", entriesType, filterInvocation,\n+                    restPatternPos);\n+            tempBlockStmt.addStatement(filtersVarDef);\n+            BLangLambdaFunction backToMapLambda = generateEntriesToMapLambda(restPatternPos);\n+            BLangInvocation mapInvocation = generateMapMapInvocation(restPatternPos, filtersVarDef.var,\n+                    backToMapLambda);\n+            BLangSimpleVarRef restMatchPatternVarRef = declaredVarDef.get(restMatchPattern.getIdentifier().getValue());\n+            tempBlockStmt.addStatement(ASTBuilderUtil.createAssignmentStmt(pos, restMatchPatternVarRef, mapInvocation));\n+        }\n+        BLangIf ifStmtForMatchPatterns = ASTBuilderUtil.createIfElseStmt(pos, condition, tempBlockStmt, null);\n+        ifBlock.addStatement(ifStmtForMatchPatterns);\n+\n+        BLangStatementExpression statementExpression = ASTBuilderUtil.createStatementExpression(mainBlockStmt,\n+                resultVarRef);\n+        statementExpression.type = symTable.booleanType;\n+\n+        addAsRecordTypeDefinition(matchPatternType, pos);\n+        return statementExpression;\n+    }\n+\n+    private List<String> getKeysToRemove(BLangMappingMatchPattern mappingMatchPattern) {\n+        List<String> keysToRemove = new ArrayList<>();\n+        for (BLangFieldMatchPattern fieldMatchPattern : mappingMatchPattern.fieldMatchPatterns) {\n+            keysToRemove.add(fieldMatchPattern.fieldName.value);\n         }\n+        return keysToRemove;\n     }\n \n-    private BLangExpression createConditionForMatchPattern(BLangMatchPattern matchPattern,\n-                                                           BLangSimpleVarRef matchExprVarRef) {\n+    private BLangExpression createConditionForFieldMatchPatterns(List<BLangFieldMatchPattern> fieldMatchPatterns,\n+                                                                 BLangSimpleVariableDef varDef,\n+                                                                 BLangBlockStmt blockStmt,\n+                                                                 Location pos) {\n+        BLangExpression condition = ASTBuilderUtil.createLiteral(pos, symTable.booleanType, true);\n+        for (int i = 0; i < fieldMatchPatterns.size(); i++) {\n+            BLangExpression fieldMatchPatternCondition =\n+                    createConditionForFieldMatchPattern(i, fieldMatchPatterns.get(i), varDef, blockStmt);\n+            condition = ASTBuilderUtil.createBinaryExpr(pos, condition, fieldMatchPatternCondition,\n+                    symTable.booleanType, OperatorKind.AND, (BOperatorSymbol) symResolver\n+                            .resolveBinaryOperator(OperatorKind.AND, symTable.booleanType, symTable.booleanType));\n+        }\n+        return condition;\n+    }\n+\n+    private BLangExpression createConditionForFieldMatchPattern(int index, BLangFieldMatchPattern fieldMatchPattern,\n+                                                                BLangSimpleVariableDef tempCastVarDef,\n+                                                                BLangBlockStmt blockStmt) {\n+        String fieldName = fieldMatchPattern.fieldName.value;\n+        BLangMatchPattern matchPattern = fieldMatchPattern.matchPattern;\n+        BLangFieldBasedAccess fieldBasedAccessExpr = getFieldAccessExpression(fieldMatchPattern.pos, fieldName,\n+                matchPattern.type, tempCastVarDef.var.symbol);\n+        BLangSimpleVariableDef tempVarDef = createVarDef(\"$memberVarTemp$\" + index + \"_$\", matchPattern.type,\n+                fieldBasedAccessExpr, matchPattern.pos);\n+        BLangSimpleVarRef tempVarRef = ASTBuilderUtil.createVariableRef(matchPattern.pos, tempVarDef.var.symbol);\n+        blockStmt.addStatement(tempVarDef);\n+        return createVarCheckCondition(matchPattern, tempVarRef);\n+    }\n+\n+    private BLangExpression createVarCheckCondition(BLangMatchPattern matchPattern, BLangSimpleVarRef varRef) {\n \n         NodeKind patternKind = matchPattern.getKind();\n         switch (patternKind) {\n             case WILDCARD_MATCH_PATTERN:\n                 return createConditionForWildCardMatchPattern((BLangWildCardMatchPattern) matchPattern);\n             case CONST_MATCH_PATTERN:\n-                return createConditionForConstMatchPattern((BLangConstPattern) matchPattern, matchExprVarRef);\n+                return createConditionForConstMatchPattern((BLangConstPattern) matchPattern, varRef);\n             case VAR_BINDING_PATTERN_MATCH_PATTERN:\n                 return createConditionForVarBindingPatternMatchPattern(\n-                        (BLangVarBindingPatternMatchPattern) matchPattern, matchExprVarRef);\n+                        (BLangVarBindingPatternMatchPattern) matchPattern, varRef);\n             case LIST_MATCH_PATTERN:\n-                return createConditionForListMatchPattern((BLangListMatchPattern) matchPattern, matchExprVarRef);\n+                return createVarCheckConditionForListMatchPattern((BLangListMatchPattern) matchPattern, varRef);\n+            case MAPPING_MATCH_PATTERN:\n+                return createVarCheckConditionForMappingMatchPattern((BLangMappingMatchPattern) matchPattern, varRef);\n             default:\n                 // If some patterns are not implemented, those should be detected before this phase\n                 // TODO : Remove this after all patterns are implemented\n                 return null;\n         }\n     }\n \n+    private BLangExpression createVarCheckConditionForListMatchPattern(BLangListMatchPattern listMatchPattern,\n+                                                                       BLangSimpleVarRef varRef) {\n+        Location pos = listMatchPattern.pos;\n+        BLangBlockStmt blockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+\n+        BLangSimpleVariableDef resultVarDef = createVarDef(\"$listPatternVarResult$\", symTable.booleanType, null,\n+                pos);\n+        BLangSimpleVarRef resultVarRef = ASTBuilderUtil.createVariableRef(pos, resultVarDef.var.symbol);\n+        blockStmt.addStatement(resultVarDef);\n+\n+        BLangAssignment failureResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(false));\n+        BLangAssignment successResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(true));\n+        blockStmt.addStatement(failureResult);\n+\n+        List<BType> memberTupleTypes = ((BTupleType) varRef.type).getTupleTypes();\n+        List<BLangMatchPattern> matchPatterns = listMatchPattern.matchPatterns;\n+\n+        BLangSimpleVariableDef tempCastVarDef = createVarDef(\"$castTemp$\", varRef.type, varRef, pos);\n+        blockStmt.addStatement(tempCastVarDef);\n+        BLangExpression condition = createConditionForListMemberPattern(0, matchPatterns.get(0),\n+                tempCastVarDef, blockStmt, memberTupleTypes.get(0), pos);\n+\n+        for (int i = 1; i < matchPatterns.size(); i++) {\n+            BLangExpression memberPatternCondition = createConditionForListMemberPattern(i,\n+                    matchPatterns.get(i), tempCastVarDef, blockStmt, memberTupleTypes.get(i), pos);\n+\n+            condition = ASTBuilderUtil.createBinaryExpr(pos, condition, memberPatternCondition,\n+                    symTable.booleanType, OperatorKind.AND, (BOperatorSymbol) symResolver\n+                            .resolveBinaryOperator(OperatorKind.AND, symTable.booleanType,\n+                                    symTable.booleanType));\n+        }\n+\n+        BLangBlockStmt tempBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+        tempBlockStmt.addStatement(successResult);\n+        BLangIf ifStmtForMatchPatterns = ASTBuilderUtil.createIfElseStmt(pos, condition, tempBlockStmt, null);\n+        blockStmt.addStatement(ifStmtForMatchPatterns);\n+\n+        BLangStatementExpression statementExpression = ASTBuilderUtil.createStatementExpression(blockStmt,\n+                resultVarRef);\n+        statementExpression.type = symTable.booleanType;\n+        return statementExpression;\n+    }\n+\n+    private BLangExpression createVarCheckConditionForMappingMatchPattern(BLangMappingMatchPattern mappingMatchPattern,\n+                                                                          BLangSimpleVarRef varRef) {\n+        BRecordType recordType = (BRecordType) mappingMatchPattern.type;\n+        Location pos = mappingMatchPattern.pos;\n+        BLangBlockStmt blockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+\n+        BLangSimpleVariableDef resultVarDef = createVarDef(\"$mappingPatternVarResult$\", symTable.booleanType,\n+                null, pos);\n+        BLangSimpleVarRef resultVarRef = ASTBuilderUtil.createVariableRef(pos, resultVarDef.var.symbol);\n+        blockStmt.addStatement(resultVarDef);\n+\n+        BLangAssignment failureResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(false));\n+        BLangAssignment successResult =\n+                ASTBuilderUtil.createAssignmentStmt(pos, resultVarRef, getBooleanLiteral(true));\n+        blockStmt.addStatement(failureResult);\n+\n+        BLangSimpleVariableDef tempCastVarDef = createVarDef(\"$castTemp$\", mappingMatchPattern.type, varRef,\n+                pos);\n+        blockStmt.addStatement(tempCastVarDef);\n+\n+        BLangExpression condition =\n+                createConditionForFieldMatchPatterns(mappingMatchPattern.fieldMatchPatterns, tempCastVarDef,\n+                        blockStmt, pos);\n+\n+        BLangBlockStmt tempBlockStmt = ASTBuilderUtil.createBlockStmt(pos);\n+        tempBlockStmt.addStatement(successResult);\n+        BLangIf ifStmtForMatchPatterns = ASTBuilderUtil.createIfElseStmt(pos, condition, tempBlockStmt, null);\n+        blockStmt.addStatement(ifStmtForMatchPatterns);\n+\n+        BLangStatementExpression statementExpression = ASTBuilderUtil.createStatementExpression(blockStmt,\n+                resultVarRef);\n+        statementExpression.type = symTable.booleanType;\n+        addAsRecordTypeDefinition(recordType, pos);\n+        return statementExpression;\n+    }\n+\n+    private void addAsRecordTypeDefinition(BType type, Location pos) {\n+        if (type.tag == TypeTags.UNION) {\n+            for (BType memberType : ((BUnionType) type).getMemberTypes()) {\n+                addAsRecordTypeDefinition(memberType, pos);\n+            }\n+        }\n+        if (type.tag != TypeTags.RECORD) {\n+            return;\n+        }\n+        BRecordType recordType = (BRecordType) type;\n+        if (isRecordTypeDefExist(recordType.tsymbol, env)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI1ODIzMA=="}, "originalCommit": {"oid": "a795ecd1ecb76c24c1d87a0e00b7ecd1849f0ef4"}, "originalPosition": 328}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMjA4MTQxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwNDo0ODo0NFrOISfb7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwOToxNToxMVrOISmG9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI2MDMzNA==", "bodyText": "Unused variables.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r556260334", "createdAt": "2021-01-13T04:48:44Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -136,6 +137,8 @@\n     private Names names;\n     private int finiteTypeCount = 0;\n     private BUnionType expandedXMLBuiltinSubtypes;\n+    private int recordCount = 0;\n+    private SymbolEnv env;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a795ecd1ecb76c24c1d87a0e00b7ecd1849f0ef4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM2OTY1Mg==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r556369652", "createdAt": "2021-01-13T09:15:11Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/Types.java", "diffHunk": "@@ -136,6 +137,8 @@\n     private Names names;\n     private int finiteTypeCount = 0;\n     private BUnionType expandedXMLBuiltinSubtypes;\n+    private int recordCount = 0;\n+    private SymbolEnv env;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI2MDMzNA=="}, "originalCommit": {"oid": "a795ecd1ecb76c24c1d87a0e00b7ecd1849f0ef4"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMjEwNDc3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/matchpatterns/BLangMappingMatchPattern.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwNTowMjoxOFrOISfpbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwOToxNToxNVrOISmHEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI2Mzc5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @since Swan Lake\n          \n          \n            \n             * @since 2.0.0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r556263790", "createdAt": "2021-01-13T05:02:18Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/matchpatterns/BLangMappingMatchPattern.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.matchpatterns;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.matchpatterns.FieldMatchPatternNode;\n+import org.ballerinalang.model.tree.matchpatterns.MappingMatchPatternNode;\n+import org.ballerinalang.model.tree.matchpatterns.RestMatchPatternNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Represent mapping-match-pattern.\n+ *\n+ * @since Swan Lake", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a795ecd1ecb76c24c1d87a0e00b7ecd1849f0ef4"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM2OTY4Mw==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r556369683", "createdAt": "2021-01-13T09:15:15Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/matchpatterns/BLangMappingMatchPattern.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.tree.matchpatterns;\n+\n+import org.ballerinalang.model.tree.NodeKind;\n+import org.ballerinalang.model.tree.matchpatterns.FieldMatchPatternNode;\n+import org.ballerinalang.model.tree.matchpatterns.MappingMatchPatternNode;\n+import org.ballerinalang.model.tree.matchpatterns.RestMatchPatternNode;\n+import org.wso2.ballerinalang.compiler.tree.BLangNodeVisitor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Represent mapping-match-pattern.\n+ *\n+ * @since Swan Lake", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI2Mzc5MA=="}, "originalCommit": {"oid": "a795ecd1ecb76c24c1d87a0e00b7ecd1849f0ef4"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwODAyNzc2OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/mapping-match-pattern.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwODozMzowOFrOITYi_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxNTo0NDozOFrOITqnZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzE5NjAyOQ==", "bodyText": "The third pattern has an extra variable, right? Shouldn't this fail because \"All the match-patterns in a given match-pattern-list must bind the same set of variables.\"?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r557196029", "createdAt": "2021-01-14T08:33:08Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/mapping-match-pattern.bal", "diffHunk": "@@ -0,0 +1,516 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+function mappingMatchPattern1(any v) returns string {\n+    match v {\n+        {a: \"str\"} => {\n+            return \"match1\";\n+        }\n+        {a: 1} => {\n+            return \"match2\";\n+        }\n+        {a: true} => {\n+            return \"match3\";\n+        }\n+    }\n+    return \"No match\";\n+}\n+\n+function testMappingMatchPattern1() {\n+    assertEquals(\"match1\", mappingMatchPattern1({a: \"str\"}));\n+    assertEquals(\"match1\", mappingMatchPattern1({a: \"str\", b: \"D\"}));\n+    assertEquals(\"match2\", mappingMatchPattern1({a: 1}));\n+    assertEquals(\"match3\", mappingMatchPattern1({a: true}));\n+    assertEquals(\"No match\", mappingMatchPattern1({b: true}));\n+}\n+\n+function mappingMatchPattern2(any v) returns string {\n+    match v {\n+        {a: \"str1\", b: \"str2\"} => {\n+            return \"match1\";\n+        }\n+        {a: 1, b: 2} => {\n+            return \"match2\";\n+        }\n+        {a: true, b: false, c: 3} => {\n+            return \"match3\";\n+        }\n+    }\n+\n+    return \"No match\";\n+}\n+\n+function testMappingMatchPattern2() {\n+    assertEquals(\"match1\", mappingMatchPattern2({a: \"str1\", b: \"str2\"}));\n+    assertEquals(\"match2\", mappingMatchPattern2({a: 1, b: 2}));\n+    assertEquals(\"match3\", mappingMatchPattern2({a: true, b: false, c: 3}));\n+    assertEquals(\"match2\", mappingMatchPattern2({a: 1, b: 2, c: 4}));\n+    assertEquals(\"No match\", mappingMatchPattern2({b: true}));\n+}\n+\n+function mappingMatchPattern3(any v) returns string {\n+    match v {\n+        {a: \"str1\", b: \"str2\"} | {a: \"str3\", b: \"str4\"} | {a: \"str5\", b: \"str6\", c: \"str7\"}  => {\n+            return \"match1\";\n+        }\n+        {a: 1, b: 2} | {a: 3, b: 4} | {a: 5, b: 6, c: 7} => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3912c8b24c867847fec11d4e2c6a7fd17f57b3e6"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQ5MjA3MA==", "bodyText": "As discussed offline, I guess we don't have to consider these as variables.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26144#discussion_r557492070", "createdAt": "2021-01-14T15:44:38Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/matchstmt/mapping-match-pattern.bal", "diffHunk": "@@ -0,0 +1,516 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+function mappingMatchPattern1(any v) returns string {\n+    match v {\n+        {a: \"str\"} => {\n+            return \"match1\";\n+        }\n+        {a: 1} => {\n+            return \"match2\";\n+        }\n+        {a: true} => {\n+            return \"match3\";\n+        }\n+    }\n+    return \"No match\";\n+}\n+\n+function testMappingMatchPattern1() {\n+    assertEquals(\"match1\", mappingMatchPattern1({a: \"str\"}));\n+    assertEquals(\"match1\", mappingMatchPattern1({a: \"str\", b: \"D\"}));\n+    assertEquals(\"match2\", mappingMatchPattern1({a: 1}));\n+    assertEquals(\"match3\", mappingMatchPattern1({a: true}));\n+    assertEquals(\"No match\", mappingMatchPattern1({b: true}));\n+}\n+\n+function mappingMatchPattern2(any v) returns string {\n+    match v {\n+        {a: \"str1\", b: \"str2\"} => {\n+            return \"match1\";\n+        }\n+        {a: 1, b: 2} => {\n+            return \"match2\";\n+        }\n+        {a: true, b: false, c: 3} => {\n+            return \"match3\";\n+        }\n+    }\n+\n+    return \"No match\";\n+}\n+\n+function testMappingMatchPattern2() {\n+    assertEquals(\"match1\", mappingMatchPattern2({a: \"str1\", b: \"str2\"}));\n+    assertEquals(\"match2\", mappingMatchPattern2({a: 1, b: 2}));\n+    assertEquals(\"match3\", mappingMatchPattern2({a: true, b: false, c: 3}));\n+    assertEquals(\"match2\", mappingMatchPattern2({a: 1, b: 2, c: 4}));\n+    assertEquals(\"No match\", mappingMatchPattern2({b: true}));\n+}\n+\n+function mappingMatchPattern3(any v) returns string {\n+    match v {\n+        {a: \"str1\", b: \"str2\"} | {a: \"str3\", b: \"str4\"} | {a: \"str5\", b: \"str6\", c: \"str7\"}  => {\n+            return \"match1\";\n+        }\n+        {a: 1, b: 2} | {a: 3, b: 4} | {a: 5, b: 6, c: 7} => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzE5NjAyOQ=="}, "originalCommit": {"oid": "3912c8b24c867847fec11d4e2c6a7fd17f57b3e6"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4838, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}