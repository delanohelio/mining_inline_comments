{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0NzQ2OTYx", "number": 26385, "title": "Fix the concurrent behaviour issue of cache", "bodyText": "Purpose\n$Subject\nFixes ballerina-platform/ballerina-standard-library#211", "createdAt": "2020-10-16T10:31:09Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26385", "merged": true, "mergeCommit": {"oid": "8a3180b2b5fc353b50ee4f7317e1551d15c62f54"}, "closed": true, "closedAt": "2020-10-19T06:15:49Z", "author": {"login": "kalaiyarasiganeshalingam"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdTFft_AH2gAyNTA0NzQ2OTYxOjNmYmNhMTFkMzgyZDgwODIzMTJjMDIwN2JiZGRkOWE3MmU1OWE5OTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdT9-1LAFqTUxMTQzNzAwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3fbca11d382d8082312c0207bbddd9a72e59a996", "author": {"user": {"login": "kalaiyarasiganeshalingam", "name": "Kalaiyarasi Ganeshalingam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3fbca11d382d8082312c0207bbddd9a72e59a996", "committedDate": "2020-10-16T12:25:58Z", "message": "Fix issue\n\nAdd doc comments\n\nAdd new line\n\nMake the changes in the java file\n\nAdd java import\n\nMake the changes in the bal file\n\nAdd linkedlist object"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21826f9aed404a4a36c1a141568c850ae42fcbf4", "author": {"user": {"login": "kalaiyarasiganeshalingam", "name": "Kalaiyarasi Ganeshalingam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/21826f9aed404a4a36c1a141568c850ae42fcbf4", "committedDate": "2020-10-16T12:39:00Z", "message": "Improve the coding"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "356d434485eb570e0005e94474f4dff21162248e", "author": {"user": {"login": "kalaiyarasiganeshalingam", "name": "Kalaiyarasi Ganeshalingam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/356d434485eb570e0005e94474f4dff21162248e", "committedDate": "2020-10-16T12:41:24Z", "message": "Make the changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a1ee64c0e7888d8062a9d24c8444dfc4cd4634c", "author": {"user": {"login": "kalaiyarasiganeshalingam", "name": "Kalaiyarasi Ganeshalingam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9a1ee64c0e7888d8062a9d24c8444dfc4cd4634c", "committedDate": "2020-10-16T12:59:57Z", "message": "Remove the semicolon"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a7bf9888e86fed95b4dec8629ffdf3d0d85b0c0", "author": {"user": {"login": "kalaiyarasiganeshalingam", "name": "Kalaiyarasi Ganeshalingam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9a7bf9888e86fed95b4dec8629ffdf3d0d85b0c0", "committedDate": "2020-10-16T13:17:23Z", "message": "Uncomment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dca9c1755168be79050cabd5aa6ead2cffda1e3", "author": {"user": {"login": "kalaiyarasiganeshalingam", "name": "Kalaiyarasi Ganeshalingam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2dca9c1755168be79050cabd5aa6ead2cffda1e3", "committedDate": "2020-10-16T13:35:14Z", "message": "Remove unnused import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwODYyOTky", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26385#pullrequestreview-510862992", "createdAt": "2020-10-17T01:30:31Z", "commit": {"oid": "2dca9c1755168be79050cabd5aa6ead2cffda1e3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fad17d4ffc789e5f7c52299a4cc7b2913a9b00d", "author": {"user": {"login": "kalaiyarasiganeshalingam", "name": "Kalaiyarasi Ganeshalingam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1fad17d4ffc789e5f7c52299a4cc7b2913a9b00d", "committedDate": "2020-10-17T07:29:02Z", "message": "Re-add the deleted changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78ab8478e97adb4a968d48178fe5e9de9fec939f", "author": {"user": {"login": "kalaiyarasiganeshalingam", "name": "Kalaiyarasi Ganeshalingam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/78ab8478e97adb4a968d48178fe5e9de9fec939f", "committedDate": "2020-10-17T08:08:36Z", "message": "Add set method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwOTg3MjEz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26385#pullrequestreview-510987213", "createdAt": "2020-10-17T13:48:28Z", "commit": {"oid": "78ab8478e97adb4a968d48178fe5e9de9fec939f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxMzo0ODoyOVrOHjdeuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxMzo0ODoyOVrOHjdeuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk0NTIxMQ==", "bodyText": "Shall we remove this, since this is no longer valid?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26385#discussion_r506945211", "createdAt": "2020-10-17T13:48:29Z", "author": {"login": "ldclakmal"}, "path": "stdlib/cache/src/main/ballerina/src/cache/linked_list.bal", "diffHunk": "@@ -27,103 +29,111 @@ public type Node record {|\n     Node? next = ();\n |};\n \n-# Represents a linked list, which is used to govern the cache eviction policy.\n+# The `cache:LinkedList` object consists operations of `LinkedList` data structure which are related\n+# to LRU eviction algorithm\n #\n # + head - The first node of the linked list\n # + tail - The last node of the linked list\n-public type LinkedList record {\n-    Node? head;\n-    Node? tail;\n-};\n-\n-# Adds a node to the end of the provided linked list.\n-#\n-# + list - Linked list to which the provided node should be added\n-# + node - The node, which should be added to the provided linked list\n-public function addLast(LinkedList list, Node node) {\n-    if (list.tail is ()) {\n-        list.head = node;\n-        list.tail = list.head;\n-        return;\n-    }\n+public type LinkedList object {\n \n-    Node tailNode = <Node>list.tail;\n-    node.prev = tailNode;\n-    tailNode.next = node;\n-    list.tail = node;\n-}\n+    // This flag is used to avoid concurrency issues occurring during the removing nodes from the linked-list.\n+    // Ballerina locks cannot be used for this since it may lead to unexpected results.\n+    boolean removeInProgress = false;\n+    Node? head = ();\n+    Node? tail = ();\n \n-# Adds a node to the start of the provided linked list.\n-#\n-# + list - Linked list to which the provided node should be added\n-# + node - The node, which should be added to the provided linked list\n-public function addFirst(LinkedList list, Node node) {\n-    if (list.head is ()) {\n-        list.head = node;\n-        list.tail = list.head;\n-        return;\n+    # Adds a node to the end of the provided linked list.\n+    #\n+    # + node - The node, which should be added to the provided linked list\n+    public function addLast(Node node) {\n+        if (self.tail is ()) {\n+            self.head = node;\n+            self.tail = self.head;\n+            return;\n+        }\n+        Node tempNode = node;\n+        Node tailNode = <Node>self.tail;\n+        tempNode.prev = tailNode;\n+        tailNode.next = tempNode;\n+        self.tail = tempNode;\n     }\n \n-    Node headNode = <Node>list.head;\n-    node.next = headNode;\n-    headNode.prev = node;\n-    list.head = node;\n-}\n-\n-// This flag is used to avoid concurrency issues occurring during the removing nodes from the linked-list.\n-// Ballerina locks cannot be used for this since it may lead to unexpected results.\n-boolean removeInProgress = false;\n+    # Adds a node to the start of the provided linked list.\n+    #\n+    # + node - The node, which should be added to the provided linked list\n+    public function addFirst(Node node) {\n+        if (self.head is ()) {\n+            self.head = node;\n+            self.tail = self.head;\n+            return;\n+        }\n+        Node tempNode = node;\n+        Node headNode = <Node>self.head;\n+        tempNode.next = headNode;\n+        headNode.prev = tempNode;\n+        self.head = tempNode;\n+    }\n \n-# Removes a node from the provided linked list.\n-#\n-# + list - Linked list from which the provided node should be removed\n-# + node - The node, which should be removed from the provided linked list\n-public function remove(LinkedList list, Node node) {\n-    // Using this flag, we prevent the concurrency issues, but this will avoid removing some nodes from the linked-list.\n-    // Due to that, when the eviction happens, there can be situations where a node which is used recently is get\n-    // removed from the cache.\n-    if (!removeInProgress) {\n-        removeInProgress = true;\n-        if (node.prev is ()) {\n-            list.head = node.next;\n-        } else {\n-            Node prev = <Node>node.prev;\n-            prev.next = node.next;\n+    # Removes a node from the provided linked list.\n+    #\n+    # + node - The node, which should be removed from the provided linked list\n+    public function remove(Node node) {\n+        // Using this flag, we prevent the concurrency issues, but this will avoid removing some nodes from the linked-list.\n+        // Due to that, when the eviction happens, there can be situations where a node which is used recently is get\n+        // removed from the cache.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ab8478e97adb4a968d48178fe5e9de9fec939f"}, "originalPosition": 118}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwOTg3Mzgw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26385#pullrequestreview-510987380", "createdAt": "2020-10-17T13:51:35Z", "commit": {"oid": "78ab8478e97adb4a968d48178fe5e9de9fec939f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxMzo1MTozNVrOHjdfyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxMzo1MTozNVrOHjdfyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk0NTQ4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            function externSetLock() = @java:Method {\n          \n          \n            \n                name: \"setLock\",\n          \n          \n            \n                class: \"org.ballerinalang.stdlib.cache.nativeimpl.Lock\"\n          \n          \n            \n            } external;\n          \n          \n            \n            function releaseLock() = @java:Method {\n          \n          \n            \n                class: \"org.ballerinalang.stdlib.cache.nativeimpl.Lock\"\n          \n          \n            \n            } external;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26385#discussion_r506945483", "createdAt": "2020-10-17T13:51:35Z", "author": {"login": "ldclakmal"}, "path": "stdlib/cache/src/main/ballerina/src/cache/linked_list.bal", "diffHunk": "@@ -27,103 +29,111 @@ public type Node record {|\n     Node? next = ();\n |};\n \n-# Represents a linked list, which is used to govern the cache eviction policy.\n+# The `cache:LinkedList` object consists operations of `LinkedList` data structure which are related\n+# to LRU eviction algorithm\n #\n # + head - The first node of the linked list\n # + tail - The last node of the linked list\n-public type LinkedList record {\n-    Node? head;\n-    Node? tail;\n-};\n-\n-# Adds a node to the end of the provided linked list.\n-#\n-# + list - Linked list to which the provided node should be added\n-# + node - The node, which should be added to the provided linked list\n-public function addLast(LinkedList list, Node node) {\n-    if (list.tail is ()) {\n-        list.head = node;\n-        list.tail = list.head;\n-        return;\n-    }\n+public type LinkedList object {\n \n-    Node tailNode = <Node>list.tail;\n-    node.prev = tailNode;\n-    tailNode.next = node;\n-    list.tail = node;\n-}\n+    // This flag is used to avoid concurrency issues occurring during the removing nodes from the linked-list.\n+    // Ballerina locks cannot be used for this since it may lead to unexpected results.\n+    boolean removeInProgress = false;\n+    Node? head = ();\n+    Node? tail = ();\n \n-# Adds a node to the start of the provided linked list.\n-#\n-# + list - Linked list to which the provided node should be added\n-# + node - The node, which should be added to the provided linked list\n-public function addFirst(LinkedList list, Node node) {\n-    if (list.head is ()) {\n-        list.head = node;\n-        list.tail = list.head;\n-        return;\n+    # Adds a node to the end of the provided linked list.\n+    #\n+    # + node - The node, which should be added to the provided linked list\n+    public function addLast(Node node) {\n+        if (self.tail is ()) {\n+            self.head = node;\n+            self.tail = self.head;\n+            return;\n+        }\n+        Node tempNode = node;\n+        Node tailNode = <Node>self.tail;\n+        tempNode.prev = tailNode;\n+        tailNode.next = tempNode;\n+        self.tail = tempNode;\n     }\n \n-    Node headNode = <Node>list.head;\n-    node.next = headNode;\n-    headNode.prev = node;\n-    list.head = node;\n-}\n-\n-// This flag is used to avoid concurrency issues occurring during the removing nodes from the linked-list.\n-// Ballerina locks cannot be used for this since it may lead to unexpected results.\n-boolean removeInProgress = false;\n+    # Adds a node to the start of the provided linked list.\n+    #\n+    # + node - The node, which should be added to the provided linked list\n+    public function addFirst(Node node) {\n+        if (self.head is ()) {\n+            self.head = node;\n+            self.tail = self.head;\n+            return;\n+        }\n+        Node tempNode = node;\n+        Node headNode = <Node>self.head;\n+        tempNode.next = headNode;\n+        headNode.prev = tempNode;\n+        self.head = tempNode;\n+    }\n \n-# Removes a node from the provided linked list.\n-#\n-# + list - Linked list from which the provided node should be removed\n-# + node - The node, which should be removed from the provided linked list\n-public function remove(LinkedList list, Node node) {\n-    // Using this flag, we prevent the concurrency issues, but this will avoid removing some nodes from the linked-list.\n-    // Due to that, when the eviction happens, there can be situations where a node which is used recently is get\n-    // removed from the cache.\n-    if (!removeInProgress) {\n-        removeInProgress = true;\n-        if (node.prev is ()) {\n-            list.head = node.next;\n-        } else {\n-            Node prev = <Node>node.prev;\n-            prev.next = node.next;\n+    # Removes a node from the provided linked list.\n+    #\n+    # + node - The node, which should be removed from the provided linked list\n+    public function remove(Node node) {\n+        // Using this flag, we prevent the concurrency issues, but this will avoid removing some nodes from the linked-list.\n+        // Due to that, when the eviction happens, there can be situations where a node which is used recently is get\n+        // removed from the cache.\n+        if (externCheckState()) {\n+            if (node.prev is ()) {\n+                self.head = node.next;\n+            } else {\n+                Node prev = <Node>node.prev;\n+                prev.next = node.next;\n+            }\n+            if (node.next is ()) {\n+                self.tail = node.prev;\n+            } else {\n+                Node next = <Node>node.next;\n+                next.prev = node.prev;\n+            }\n+            node.next = ();\n+            node.prev = ();\n         }\n+        //externSetLock();\n+    }\n \n-        if (node.next is ()) {\n-            list.tail = node.prev;\n-        } else {\n-            Node next = <Node>node.next;\n-            next.prev = node.prev;\n+    # Removes the last node from the provided linked list.\n+    #\n+    # + return - Last node of the provided linked list or `()` if the last node is empty\n+    public function removeLast() returns Node? {\n+        if (self.tail is ()) {\n+            return ();\n         }\n-        node.next = ();\n-        node.prev = ();\n-        removeInProgress = false;\n+        Node tail = <Node>self.tail;\n+        Node predecessorOfTail = <Node>tail.prev;\n+        self.tail = predecessorOfTail;\n+        predecessorOfTail.next = ();\n+        tail.prev = ();\n+\n+        return tail;\n     }\n-}\n \n-# Removes the last node from the provided linked list.\n-#\n-# + list - Linked list from which the last node should be removed\n-# + return - Last node of the provided linked list or `()` if the last node is empty\n-public function removeLast(LinkedList list) returns Node? {\n-    if (list.tail is ()) {\n-        return ();\n+    # Clears the provided linked list.\n+    public function clear() {\n+        self.head = ();\n+        self.tail = ();\n     }\n-    Node tail = <Node>list.tail;\n-    Node predecessorOfTail = <Node>tail.prev;\n-    list.tail = predecessorOfTail;\n-    predecessorOfTail.next = ();\n-    tail.prev = ();\n+};\n \n-    return tail;\n-}\n+function externLockInit() = @java:Method {\n+    name: \"init\",\n+    class: \"org.ballerinalang.stdlib.cache.nativeimpl.Lock\"\n+} external;\n \n-# Clears the provided linked list.\n-#\n-# + list - Linked list which should be cleared\n-public function clear(LinkedList list) {\n-    list.head = ();\n-    list.tail = ();\n-}\n+function externCheckState() returns boolean = @java:Method {\n+    name: \"lock\",\n+    class: \"org.ballerinalang.stdlib.cache.nativeimpl.Lock\"\n+} external;\n+\n+function externSetLock() = @java:Method {\n+    name: \"setLock\",\n+    class: \"org.ballerinalang.stdlib.cache.nativeimpl.Lock\"\n+} external;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ab8478e97adb4a968d48178fe5e9de9fec939f"}, "originalPosition": 204}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwOTg3NTQz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26385#pullrequestreview-510987543", "createdAt": "2020-10-17T13:54:20Z", "commit": {"oid": "78ab8478e97adb4a968d48178fe5e9de9fec939f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxMzo1NDoyMVrOHjdgvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxMzo1NDoyMVrOHjdgvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk0NTcyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static boolean lock() {\n          \n          \n            \n                    return locked.compareAndSet(false, true);\n          \n          \n            \n                }\n          \n          \n            \n                public static boolean tryLock() {\n          \n          \n            \n                    return locked.compareAndSet(false, true);\n          \n          \n            \n                }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26385#discussion_r506945726", "createdAt": "2020-10-17T13:54:21Z", "author": {"login": "ldclakmal"}, "path": "stdlib/cache/src/main/java/org/ballerinalang/stdlib/cache/nativeimpl/Lock.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.cache.nativeimpl;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Class to handle ballerina external functions in Cache library.\n+ */\n+public class Lock {\n+    private static AtomicBoolean locked;\n+\n+    public static void init() {\n+        locked = new AtomicBoolean(false);\n+    }\n+\n+    public static boolean lock() {\n+        return locked.compareAndSet(false, true);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ab8478e97adb4a968d48178fe5e9de9fec939f"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwOTg3NTgy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26385#pullrequestreview-510987582", "createdAt": "2020-10-17T13:54:58Z", "commit": {"oid": "78ab8478e97adb4a968d48178fe5e9de9fec939f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxMzo1NDo1OFrOHjdg5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxMzo1NDo1OFrOHjdg5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk0NTc2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static void setLock() {\n          \n          \n            \n                    locked.set(false);\n          \n          \n            \n                }\n          \n          \n            \n                public static void releaseLock() {\n          \n          \n            \n                    locked.set(false);\n          \n          \n            \n                }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26385#discussion_r506945766", "createdAt": "2020-10-17T13:54:58Z", "author": {"login": "ldclakmal"}, "path": "stdlib/cache/src/main/java/org/ballerinalang/stdlib/cache/nativeimpl/Lock.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.cache.nativeimpl;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Class to handle ballerina external functions in Cache library.\n+ */\n+public class Lock {\n+    private static AtomicBoolean locked;\n+\n+    public static void init() {\n+        locked = new AtomicBoolean(false);\n+    }\n+\n+    public static boolean lock() {\n+        return locked.compareAndSet(false, true);\n+    }\n+\n+    public static void setLock() {\n+        locked.set(false);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ab8478e97adb4a968d48178fe5e9de9fec939f"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwOTg3NjAx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26385#pullrequestreview-510987601", "createdAt": "2020-10-17T13:55:19Z", "commit": {"oid": "78ab8478e97adb4a968d48178fe5e9de9fec939f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxMzo1NToxOVrOHjdhCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxMzo1NToxOVrOHjdhCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk0NTgwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            function externCheckState() returns boolean = @java:Method {\n          \n          \n            \n                name: \"lock\",\n          \n          \n            \n                class: \"org.ballerinalang.stdlib.cache.nativeimpl.Lock\"\n          \n          \n            \n            } external;\n          \n          \n            \n            function tryLock() returns boolean = @java:Method {\n          \n          \n            \n                class: \"org.ballerinalang.stdlib.cache.nativeimpl.Lock\"\n          \n          \n            \n            } external;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26385#discussion_r506945801", "createdAt": "2020-10-17T13:55:19Z", "author": {"login": "ldclakmal"}, "path": "stdlib/cache/src/main/ballerina/src/cache/linked_list.bal", "diffHunk": "@@ -27,103 +29,111 @@ public type Node record {|\n     Node? next = ();\n |};\n \n-# Represents a linked list, which is used to govern the cache eviction policy.\n+# The `cache:LinkedList` object consists operations of `LinkedList` data structure which are related\n+# to LRU eviction algorithm\n #\n # + head - The first node of the linked list\n # + tail - The last node of the linked list\n-public type LinkedList record {\n-    Node? head;\n-    Node? tail;\n-};\n-\n-# Adds a node to the end of the provided linked list.\n-#\n-# + list - Linked list to which the provided node should be added\n-# + node - The node, which should be added to the provided linked list\n-public function addLast(LinkedList list, Node node) {\n-    if (list.tail is ()) {\n-        list.head = node;\n-        list.tail = list.head;\n-        return;\n-    }\n+public type LinkedList object {\n \n-    Node tailNode = <Node>list.tail;\n-    node.prev = tailNode;\n-    tailNode.next = node;\n-    list.tail = node;\n-}\n+    // This flag is used to avoid concurrency issues occurring during the removing nodes from the linked-list.\n+    // Ballerina locks cannot be used for this since it may lead to unexpected results.\n+    boolean removeInProgress = false;\n+    Node? head = ();\n+    Node? tail = ();\n \n-# Adds a node to the start of the provided linked list.\n-#\n-# + list - Linked list to which the provided node should be added\n-# + node - The node, which should be added to the provided linked list\n-public function addFirst(LinkedList list, Node node) {\n-    if (list.head is ()) {\n-        list.head = node;\n-        list.tail = list.head;\n-        return;\n+    # Adds a node to the end of the provided linked list.\n+    #\n+    # + node - The node, which should be added to the provided linked list\n+    public function addLast(Node node) {\n+        if (self.tail is ()) {\n+            self.head = node;\n+            self.tail = self.head;\n+            return;\n+        }\n+        Node tempNode = node;\n+        Node tailNode = <Node>self.tail;\n+        tempNode.prev = tailNode;\n+        tailNode.next = tempNode;\n+        self.tail = tempNode;\n     }\n \n-    Node headNode = <Node>list.head;\n-    node.next = headNode;\n-    headNode.prev = node;\n-    list.head = node;\n-}\n-\n-// This flag is used to avoid concurrency issues occurring during the removing nodes from the linked-list.\n-// Ballerina locks cannot be used for this since it may lead to unexpected results.\n-boolean removeInProgress = false;\n+    # Adds a node to the start of the provided linked list.\n+    #\n+    # + node - The node, which should be added to the provided linked list\n+    public function addFirst(Node node) {\n+        if (self.head is ()) {\n+            self.head = node;\n+            self.tail = self.head;\n+            return;\n+        }\n+        Node tempNode = node;\n+        Node headNode = <Node>self.head;\n+        tempNode.next = headNode;\n+        headNode.prev = tempNode;\n+        self.head = tempNode;\n+    }\n \n-# Removes a node from the provided linked list.\n-#\n-# + list - Linked list from which the provided node should be removed\n-# + node - The node, which should be removed from the provided linked list\n-public function remove(LinkedList list, Node node) {\n-    // Using this flag, we prevent the concurrency issues, but this will avoid removing some nodes from the linked-list.\n-    // Due to that, when the eviction happens, there can be situations where a node which is used recently is get\n-    // removed from the cache.\n-    if (!removeInProgress) {\n-        removeInProgress = true;\n-        if (node.prev is ()) {\n-            list.head = node.next;\n-        } else {\n-            Node prev = <Node>node.prev;\n-            prev.next = node.next;\n+    # Removes a node from the provided linked list.\n+    #\n+    # + node - The node, which should be removed from the provided linked list\n+    public function remove(Node node) {\n+        // Using this flag, we prevent the concurrency issues, but this will avoid removing some nodes from the linked-list.\n+        // Due to that, when the eviction happens, there can be situations where a node which is used recently is get\n+        // removed from the cache.\n+        if (externCheckState()) {\n+            if (node.prev is ()) {\n+                self.head = node.next;\n+            } else {\n+                Node prev = <Node>node.prev;\n+                prev.next = node.next;\n+            }\n+            if (node.next is ()) {\n+                self.tail = node.prev;\n+            } else {\n+                Node next = <Node>node.next;\n+                next.prev = node.prev;\n+            }\n+            node.next = ();\n+            node.prev = ();\n         }\n+        //externSetLock();\n+    }\n \n-        if (node.next is ()) {\n-            list.tail = node.prev;\n-        } else {\n-            Node next = <Node>node.next;\n-            next.prev = node.prev;\n+    # Removes the last node from the provided linked list.\n+    #\n+    # + return - Last node of the provided linked list or `()` if the last node is empty\n+    public function removeLast() returns Node? {\n+        if (self.tail is ()) {\n+            return ();\n         }\n-        node.next = ();\n-        node.prev = ();\n-        removeInProgress = false;\n+        Node tail = <Node>self.tail;\n+        Node predecessorOfTail = <Node>tail.prev;\n+        self.tail = predecessorOfTail;\n+        predecessorOfTail.next = ();\n+        tail.prev = ();\n+\n+        return tail;\n     }\n-}\n \n-# Removes the last node from the provided linked list.\n-#\n-# + list - Linked list from which the last node should be removed\n-# + return - Last node of the provided linked list or `()` if the last node is empty\n-public function removeLast(LinkedList list) returns Node? {\n-    if (list.tail is ()) {\n-        return ();\n+    # Clears the provided linked list.\n+    public function clear() {\n+        self.head = ();\n+        self.tail = ();\n     }\n-    Node tail = <Node>list.tail;\n-    Node predecessorOfTail = <Node>tail.prev;\n-    list.tail = predecessorOfTail;\n-    predecessorOfTail.next = ();\n-    tail.prev = ();\n+};\n \n-    return tail;\n-}\n+function externLockInit() = @java:Method {\n+    name: \"init\",\n+    class: \"org.ballerinalang.stdlib.cache.nativeimpl.Lock\"\n+} external;\n \n-# Clears the provided linked list.\n-#\n-# + list - Linked list which should be cleared\n-public function clear(LinkedList list) {\n-    list.head = ();\n-    list.tail = ();\n-}\n+function externCheckState() returns boolean = @java:Method {\n+    name: \"lock\",\n+    class: \"org.ballerinalang.stdlib.cache.nativeimpl.Lock\"\n+} external;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ab8478e97adb4a968d48178fe5e9de9fec939f"}, "originalPosition": 199}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwOTg3NjM0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26385#pullrequestreview-510987634", "createdAt": "2020-10-17T13:55:43Z", "commit": {"oid": "78ab8478e97adb4a968d48178fe5e9de9fec939f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxMzo1NTo0M1rOHjdhLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxMzo1NTo0M1rOHjdhLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk0NTgzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (externCheckState()) {\n          \n          \n            \n                    if (tryLock()) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26385#discussion_r506945839", "createdAt": "2020-10-17T13:55:43Z", "author": {"login": "ldclakmal"}, "path": "stdlib/cache/src/main/ballerina/src/cache/linked_list.bal", "diffHunk": "@@ -27,103 +29,111 @@ public type Node record {|\n     Node? next = ();\n |};\n \n-# Represents a linked list, which is used to govern the cache eviction policy.\n+# The `cache:LinkedList` object consists operations of `LinkedList` data structure which are related\n+# to LRU eviction algorithm\n #\n # + head - The first node of the linked list\n # + tail - The last node of the linked list\n-public type LinkedList record {\n-    Node? head;\n-    Node? tail;\n-};\n-\n-# Adds a node to the end of the provided linked list.\n-#\n-# + list - Linked list to which the provided node should be added\n-# + node - The node, which should be added to the provided linked list\n-public function addLast(LinkedList list, Node node) {\n-    if (list.tail is ()) {\n-        list.head = node;\n-        list.tail = list.head;\n-        return;\n-    }\n+public type LinkedList object {\n \n-    Node tailNode = <Node>list.tail;\n-    node.prev = tailNode;\n-    tailNode.next = node;\n-    list.tail = node;\n-}\n+    // This flag is used to avoid concurrency issues occurring during the removing nodes from the linked-list.\n+    // Ballerina locks cannot be used for this since it may lead to unexpected results.\n+    boolean removeInProgress = false;\n+    Node? head = ();\n+    Node? tail = ();\n \n-# Adds a node to the start of the provided linked list.\n-#\n-# + list - Linked list to which the provided node should be added\n-# + node - The node, which should be added to the provided linked list\n-public function addFirst(LinkedList list, Node node) {\n-    if (list.head is ()) {\n-        list.head = node;\n-        list.tail = list.head;\n-        return;\n+    # Adds a node to the end of the provided linked list.\n+    #\n+    # + node - The node, which should be added to the provided linked list\n+    public function addLast(Node node) {\n+        if (self.tail is ()) {\n+            self.head = node;\n+            self.tail = self.head;\n+            return;\n+        }\n+        Node tempNode = node;\n+        Node tailNode = <Node>self.tail;\n+        tempNode.prev = tailNode;\n+        tailNode.next = tempNode;\n+        self.tail = tempNode;\n     }\n \n-    Node headNode = <Node>list.head;\n-    node.next = headNode;\n-    headNode.prev = node;\n-    list.head = node;\n-}\n-\n-// This flag is used to avoid concurrency issues occurring during the removing nodes from the linked-list.\n-// Ballerina locks cannot be used for this since it may lead to unexpected results.\n-boolean removeInProgress = false;\n+    # Adds a node to the start of the provided linked list.\n+    #\n+    # + node - The node, which should be added to the provided linked list\n+    public function addFirst(Node node) {\n+        if (self.head is ()) {\n+            self.head = node;\n+            self.tail = self.head;\n+            return;\n+        }\n+        Node tempNode = node;\n+        Node headNode = <Node>self.head;\n+        tempNode.next = headNode;\n+        headNode.prev = tempNode;\n+        self.head = tempNode;\n+    }\n \n-# Removes a node from the provided linked list.\n-#\n-# + list - Linked list from which the provided node should be removed\n-# + node - The node, which should be removed from the provided linked list\n-public function remove(LinkedList list, Node node) {\n-    // Using this flag, we prevent the concurrency issues, but this will avoid removing some nodes from the linked-list.\n-    // Due to that, when the eviction happens, there can be situations where a node which is used recently is get\n-    // removed from the cache.\n-    if (!removeInProgress) {\n-        removeInProgress = true;\n-        if (node.prev is ()) {\n-            list.head = node.next;\n-        } else {\n-            Node prev = <Node>node.prev;\n-            prev.next = node.next;\n+    # Removes a node from the provided linked list.\n+    #\n+    # + node - The node, which should be removed from the provided linked list\n+    public function remove(Node node) {\n+        // Using this flag, we prevent the concurrency issues, but this will avoid removing some nodes from the linked-list.\n+        // Due to that, when the eviction happens, there can be situations where a node which is used recently is get\n+        // removed from the cache.\n+        if (externCheckState()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ab8478e97adb4a968d48178fe5e9de9fec939f"}, "originalPosition": 119}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwOTg3NjYw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26385#pullrequestreview-510987660", "createdAt": "2020-10-17T13:56:08Z", "commit": {"oid": "78ab8478e97adb4a968d48178fe5e9de9fec939f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxMzo1NjowOFrOHjdhWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxMzo1NjowOFrOHjdhWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk0NTg4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        node.prev = ();\n          \n          \n            \n                    }\n          \n          \n            \n                    //externSetLock();\n          \n          \n            \n                        node.prev = ();\n          \n          \n            \n                        releaseLock();\n          \n          \n            \n                    }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26385#discussion_r506945883", "createdAt": "2020-10-17T13:56:08Z", "author": {"login": "ldclakmal"}, "path": "stdlib/cache/src/main/ballerina/src/cache/linked_list.bal", "diffHunk": "@@ -27,103 +29,111 @@ public type Node record {|\n     Node? next = ();\n |};\n \n-# Represents a linked list, which is used to govern the cache eviction policy.\n+# The `cache:LinkedList` object consists operations of `LinkedList` data structure which are related\n+# to LRU eviction algorithm\n #\n # + head - The first node of the linked list\n # + tail - The last node of the linked list\n-public type LinkedList record {\n-    Node? head;\n-    Node? tail;\n-};\n-\n-# Adds a node to the end of the provided linked list.\n-#\n-# + list - Linked list to which the provided node should be added\n-# + node - The node, which should be added to the provided linked list\n-public function addLast(LinkedList list, Node node) {\n-    if (list.tail is ()) {\n-        list.head = node;\n-        list.tail = list.head;\n-        return;\n-    }\n+public type LinkedList object {\n \n-    Node tailNode = <Node>list.tail;\n-    node.prev = tailNode;\n-    tailNode.next = node;\n-    list.tail = node;\n-}\n+    // This flag is used to avoid concurrency issues occurring during the removing nodes from the linked-list.\n+    // Ballerina locks cannot be used for this since it may lead to unexpected results.\n+    boolean removeInProgress = false;\n+    Node? head = ();\n+    Node? tail = ();\n \n-# Adds a node to the start of the provided linked list.\n-#\n-# + list - Linked list to which the provided node should be added\n-# + node - The node, which should be added to the provided linked list\n-public function addFirst(LinkedList list, Node node) {\n-    if (list.head is ()) {\n-        list.head = node;\n-        list.tail = list.head;\n-        return;\n+    # Adds a node to the end of the provided linked list.\n+    #\n+    # + node - The node, which should be added to the provided linked list\n+    public function addLast(Node node) {\n+        if (self.tail is ()) {\n+            self.head = node;\n+            self.tail = self.head;\n+            return;\n+        }\n+        Node tempNode = node;\n+        Node tailNode = <Node>self.tail;\n+        tempNode.prev = tailNode;\n+        tailNode.next = tempNode;\n+        self.tail = tempNode;\n     }\n \n-    Node headNode = <Node>list.head;\n-    node.next = headNode;\n-    headNode.prev = node;\n-    list.head = node;\n-}\n-\n-// This flag is used to avoid concurrency issues occurring during the removing nodes from the linked-list.\n-// Ballerina locks cannot be used for this since it may lead to unexpected results.\n-boolean removeInProgress = false;\n+    # Adds a node to the start of the provided linked list.\n+    #\n+    # + node - The node, which should be added to the provided linked list\n+    public function addFirst(Node node) {\n+        if (self.head is ()) {\n+            self.head = node;\n+            self.tail = self.head;\n+            return;\n+        }\n+        Node tempNode = node;\n+        Node headNode = <Node>self.head;\n+        tempNode.next = headNode;\n+        headNode.prev = tempNode;\n+        self.head = tempNode;\n+    }\n \n-# Removes a node from the provided linked list.\n-#\n-# + list - Linked list from which the provided node should be removed\n-# + node - The node, which should be removed from the provided linked list\n-public function remove(LinkedList list, Node node) {\n-    // Using this flag, we prevent the concurrency issues, but this will avoid removing some nodes from the linked-list.\n-    // Due to that, when the eviction happens, there can be situations where a node which is used recently is get\n-    // removed from the cache.\n-    if (!removeInProgress) {\n-        removeInProgress = true;\n-        if (node.prev is ()) {\n-            list.head = node.next;\n-        } else {\n-            Node prev = <Node>node.prev;\n-            prev.next = node.next;\n+    # Removes a node from the provided linked list.\n+    #\n+    # + node - The node, which should be removed from the provided linked list\n+    public function remove(Node node) {\n+        // Using this flag, we prevent the concurrency issues, but this will avoid removing some nodes from the linked-list.\n+        // Due to that, when the eviction happens, there can be situations where a node which is used recently is get\n+        // removed from the cache.\n+        if (externCheckState()) {\n+            if (node.prev is ()) {\n+                self.head = node.next;\n+            } else {\n+                Node prev = <Node>node.prev;\n+                prev.next = node.next;\n+            }\n+            if (node.next is ()) {\n+                self.tail = node.prev;\n+            } else {\n+                Node next = <Node>node.next;\n+                next.prev = node.prev;\n+            }\n+            node.next = ();\n+            node.prev = ();\n         }\n+        //externSetLock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ab8478e97adb4a968d48178fe5e9de9fec939f"}, "originalPosition": 135}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwOTg3Nzkx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26385#pullrequestreview-510987791", "createdAt": "2020-10-17T13:58:00Z", "commit": {"oid": "78ab8478e97adb4a968d48178fe5e9de9fec939f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxMzo1ODowMFrOHjdiAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxMzo1ODowMFrOHjdiAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk0NjA0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Class to handle ballerina external functions in Cache library.\n          \n          \n            \n             * Class to handle concurrency behaviour of `LinkedList` using compare and swap technique.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26385#discussion_r506946049", "createdAt": "2020-10-17T13:58:00Z", "author": {"login": "ldclakmal"}, "path": "stdlib/cache/src/main/java/org/ballerinalang/stdlib/cache/nativeimpl/Lock.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.cache.nativeimpl;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Class to handle ballerina external functions in Cache library.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78ab8478e97adb4a968d48178fe5e9de9fec939f"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fb9d1f96669a8acb3f3ca3a140e9ced96997905", "author": {"user": {"login": "kalaiyarasiganeshalingam", "name": "Kalaiyarasi Ganeshalingam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1fb9d1f96669a8acb3f3ca3a140e9ced96997905", "committedDate": "2020-10-18T07:34:51Z", "message": "Fix comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f567b0b26699dfcac3940568bc9223e9e2d876bc", "author": {"user": {"login": "kalaiyarasiganeshalingam", "name": "Kalaiyarasi Ganeshalingam"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f567b0b26699dfcac3940568bc9223e9e2d876bc", "committedDate": "2020-10-18T08:29:06Z", "message": "Remove variable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNDE0MTM0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26385#pullrequestreview-511414134", "createdAt": "2020-10-19T05:08:05Z", "commit": {"oid": "f567b0b26699dfcac3940568bc9223e9e2d876bc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNDM3MDA2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26385#pullrequestreview-511437006", "createdAt": "2020-10-19T06:14:38Z", "commit": {"oid": "f567b0b26699dfcac3940568bc9223e9e2d876bc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4397, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}