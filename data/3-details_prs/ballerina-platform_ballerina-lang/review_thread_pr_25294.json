{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4NDc0Mzcy", "number": 25294, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwMzo1NjowM1rOEY4gHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNTozMjo1M1rOEbaY2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NTI3MDA1OnYy", "diffSide": "RIGHT", "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/TestCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwMzo1NjowM1rOHBY8Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNDowODozMVrOHBZFeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIxOTIxOA==", "bodyText": "Shall we rename the flag to --rerun-failed?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25294#discussion_r471219218", "createdAt": "2020-08-17T03:56:03Z", "author": {"login": "azinneera"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/TestCommand.java", "diffHunk": "@@ -159,6 +159,9 @@ public TestCommand(Path userDir, PrintStream outStream, PrintStream errStream, b\n     @CommandLine.Option(names = \"--old-parser\", description = \"Enable old parser.\", hidden = true)\n     private boolean useOldParser;\n \n+    @CommandLine.Option(names = \"--rerun-failedTests\", description = \"Rerun failed tests.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7fea588df21afb4f4eae178c172651d8f10cb0e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIyMTYyNg==", "bodyText": "Ack. Will change to --rerun-failed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25294#discussion_r471221626", "createdAt": "2020-08-17T04:08:31Z", "author": {"login": "Ibaqu"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/TestCommand.java", "diffHunk": "@@ -159,6 +159,9 @@ public TestCommand(Path userDir, PrintStream outStream, PrintStream errStream, b\n     @CommandLine.Option(names = \"--old-parser\", description = \"Enable old parser.\", hidden = true)\n     private boolean useOldParser;\n \n+    @CommandLine.Option(names = \"--rerun-failedTests\", description = \"Rerun failed tests.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIxOTIxOA=="}, "originalCommit": {"oid": "f7fea588df21afb4f4eae178c172651d8f10cb0e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NTMyNTM0OnYy", "diffSide": "RIGHT", "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/CleanTargetDirTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNDozNjoyOVrOHBZbmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNjowNzo0OVrOHBazOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIyNzI4OA==", "bodyText": "Can these comments can be removed?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25294#discussion_r471227288", "createdAt": "2020-08-17T04:36:29Z", "author": {"login": "azinneera"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/CleanTargetDirTask.java", "diffHunk": "@@ -58,8 +59,14 @@ public void execute(BuildContext buildContext) {\n                         + File.separator + ProjectDirConstants.BIN_DIR_NAME).toPath());\n                 deleteResource(new File(targetDir.toAbsolutePath().toString()\n                         + File.separator + ProjectDirConstants.TARGET_BALO_DIRECTORY).toPath());\n-                deleteResource(new File(targetDir.toAbsolutePath().toString()\n-                        + File.separator + ProjectDirConstants.CACHES_DIR_NAME).toPath());\n+//                deleteResource(new File(targetDir.toAbsolutePath().toString()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7fea588df21afb4f4eae178c172651d8f10cb0e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI0OTcyMg==", "bodyText": "removed changes to CleanTargetDirTask", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25294#discussion_r471249722", "createdAt": "2020-08-17T06:07:49Z", "author": {"login": "Ibaqu"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/CleanTargetDirTask.java", "diffHunk": "@@ -58,8 +59,14 @@ public void execute(BuildContext buildContext) {\n                         + File.separator + ProjectDirConstants.BIN_DIR_NAME).toPath());\n                 deleteResource(new File(targetDir.toAbsolutePath().toString()\n                         + File.separator + ProjectDirConstants.TARGET_BALO_DIRECTORY).toPath());\n-                deleteResource(new File(targetDir.toAbsolutePath().toString()\n-                        + File.separator + ProjectDirConstants.CACHES_DIR_NAME).toPath());\n+//                deleteResource(new File(targetDir.toAbsolutePath().toString()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIyNzI4OA=="}, "originalCommit": {"oid": "f7fea588df21afb4f4eae178c172651d8f10cb0e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDU5NzU1OnYy", "diffSide": "RIGHT", "path": "misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/BTestRunner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOToyNDoxNVrOHCLILA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMzowNzowNlrOHCTQLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0MTUxNg==", "bodyText": "Shall we correct the typo in \"retun_test.json\"", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25294#discussion_r472041516", "createdAt": "2020-08-18T09:24:15Z", "author": {"login": "Dilhasha"}, "path": "misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/BTestRunner.java", "diffHunk": "@@ -404,6 +413,13 @@ private void executeFunction(Test test, TestSuite suite, String packageName, Cla\n                                  Scheduler scheduler, AtomicBoolean shouldSkip, AtomicBoolean shouldSkipTest,\n                                  List<String> failedOrSkippedTests, List<String> failedAfterFuncTests) {\n         TesterinaResult functionResult;\n+        Path sourceRootPath = Paths.get(suite.getSourceRootPath());\n+        Path jsonCacheDir = sourceRootPath.resolve(\"target\").resolve(\"caches\").resolve(\"json_cache\");\n+        Path rerunJson =\n+                jsonCacheDir.resolve(suite.getOrgName()).resolve(suite.getPackageID()).resolve(suite.getVersion());\n+        Path jsonPath = Paths.get(rerunJson.toString(), \"retun_test.json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b9e8da33e3e9ae0d7ae4243eb286da3cdbac4c9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE3NDYzOA==", "bodyText": "Corrected typo in all instances.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25294#discussion_r472174638", "createdAt": "2020-08-18T13:07:06Z", "author": {"login": "Ibaqu"}, "path": "misc/testerina/modules/testerina-runtime/src/main/java/org/ballerinalang/test/runtime/BTestRunner.java", "diffHunk": "@@ -404,6 +413,13 @@ private void executeFunction(Test test, TestSuite suite, String packageName, Cla\n                                  Scheduler scheduler, AtomicBoolean shouldSkip, AtomicBoolean shouldSkipTest,\n                                  List<String> failedOrSkippedTests, List<String> failedAfterFuncTests) {\n         TesterinaResult functionResult;\n+        Path sourceRootPath = Paths.get(suite.getSourceRootPath());\n+        Path jsonCacheDir = sourceRootPath.resolve(\"target\").resolve(\"caches\").resolve(\"json_cache\");\n+        Path rerunJson =\n+                jsonCacheDir.resolve(suite.getOrgName()).resolve(suite.getPackageID()).resolve(suite.getVersion());\n+        Path jsonPath = Paths.get(rerunJson.toString(), \"retun_test.json\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0MTUxNg=="}, "originalCommit": {"oid": "5b9e8da33e3e9ae0d7ae4243eb286da3cdbac4c9"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTczOTAxOnYy", "diffSide": "RIGHT", "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/TestCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNTowMTo1NFrOHFUsUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNToxNDo0NlrOHFU4cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM0Mzk1NQ==", "bodyText": "Once the new package implementation is in place, we should allow running with the -a flag. Please create an issue to track this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25294#discussion_r475343955", "createdAt": "2020-08-24T05:01:54Z", "author": {"login": "azinneera"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/TestCommand.java", "diffHunk": "@@ -204,6 +207,28 @@ public void execute() {\n             return;\n         }\n \n+        if (this.rerunTests) {\n+            // Cannot rerun failed tests using -a | -all flags\n+            if (this.buildAll) {\n+                CommandUtil.printError(this.errStream,\n+                                       \"Cannot specify --rerun-failed and -a | --all flags at the same time\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce647e52448f4b91556307e72865437e69995b64"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM0NzA1Nw==", "bodyText": "Ack. Created issue to track this : #25382", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25294#discussion_r475347057", "createdAt": "2020-08-24T05:14:46Z", "author": {"login": "Ibaqu"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/cmd/TestCommand.java", "diffHunk": "@@ -204,6 +207,28 @@ public void execute() {\n             return;\n         }\n \n+        if (this.rerunTests) {\n+            // Cannot rerun failed tests using -a | -all flags\n+            if (this.buildAll) {\n+                CommandUtil.printError(this.errStream,\n+                                       \"Cannot specify --rerun-failed and -a | --all flags at the same time\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM0Mzk1NQ=="}, "originalCommit": {"oid": "ce647e52448f4b91556307e72865437e69995b64"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTc5MDYzOnYy", "diffSide": "RIGHT", "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/RunTestsTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNTozMTowNVrOHFVI7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzoxNzowMVrOHFXZZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM1MTI3Nw==", "bodyText": "We should catch the exception and close the BufferedReader. Lets wrap this with a try-with-resources block.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25294#discussion_r475351277", "createdAt": "2020-08-24T05:31:05Z", "author": {"login": "azinneera"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/RunTestsTask.java", "diffHunk": "@@ -432,4 +458,11 @@ private ModuleStatus loadModuleStatusFromFile(Path statusJsonPath) throws IOExce\n         BufferedReader bufferedReader = Files.newBufferedReader(statusJsonPath, StandardCharsets.UTF_8);\n         return gson.fromJson(bufferedReader, ModuleStatus.class);\n     }\n+\n+    private List<String> readFailedTestsFromFile(Path rerunTestJsonPath) throws IOException {\n+        Gson gson = new Gson();\n+        rerunTestJsonPath = Paths.get(rerunTestJsonPath.toString(), \"rerun_test.json\");\n+        BufferedReader bufferedReader = Files.newBufferedReader(rerunTestJsonPath, StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce647e52448f4b91556307e72865437e69995b64"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM4ODI2Mw==", "bodyText": "Used try-with-resource block and handled exceptions within the function itself", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25294#discussion_r475388263", "createdAt": "2020-08-24T07:17:01Z", "author": {"login": "Ibaqu"}, "path": "cli/ballerina-packerina/src/main/java/org/ballerinalang/packerina/task/RunTestsTask.java", "diffHunk": "@@ -432,4 +458,11 @@ private ModuleStatus loadModuleStatusFromFile(Path statusJsonPath) throws IOExce\n         BufferedReader bufferedReader = Files.newBufferedReader(statusJsonPath, StandardCharsets.UTF_8);\n         return gson.fromJson(bufferedReader, ModuleStatus.class);\n     }\n+\n+    private List<String> readFailedTestsFromFile(Path rerunTestJsonPath) throws IOException {\n+        Gson gson = new Gson();\n+        rerunTestJsonPath = Paths.get(rerunTestJsonPath.toString(), \"rerun_test.json\");\n+        BufferedReader bufferedReader = Files.newBufferedReader(rerunTestJsonPath, StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM1MTI3Nw=="}, "originalCommit": {"oid": "ce647e52448f4b91556307e72865437e69995b64"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTc5MzU1OnYy", "diffSide": "RIGHT", "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/RerunFailedTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNTozMjo1M1rOHFVKlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzoxNjoyMFrOHFXX6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM1MTcwMg==", "bodyText": "Lets add a test case to verify the behavior when there are are no failed tests found.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25294#discussion_r475351702", "createdAt": "2020-08-24T05:32:53Z", "author": {"login": "azinneera"}, "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/RerunFailedTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.testerina.test;\n+\n+import org.ballerinalang.test.context.BMainInstance;\n+import org.ballerinalang.test.context.BallerinaTestException;\n+import org.ballerinalang.test.context.LogLeecher;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test class containting tests related to Rerun failed test functionality.\n+ */\n+public class RerunFailedTest extends BaseTestCase {\n+\n+    private BMainInstance balClient;\n+    private String projectPath;\n+\n+    @BeforeClass\n+    public void setup() throws BallerinaTestException {\n+        balClient = new BMainInstance(balServer);\n+        projectPath = rerunFailedProjectPath.toString();\n+    }\n+\n+    @Test\n+    public void testFullTest() throws BallerinaTestException {\n+        String msg1 = \"2 passing\";\n+        String msg2 = \"2 failing\";\n+        LogLeecher clientLeecher1 = new LogLeecher(msg1);\n+        LogLeecher clientLeecher2 = new LogLeecher(msg2);\n+\n+        balClient.runMain(\"test\", new String[]{\"module_1\"}, null, new String[]{},\n+                new LogLeecher[]{clientLeecher1, clientLeecher2}, projectPath);\n+\n+        clientLeecher1.waitForText(20000);\n+        clientLeecher2.waitForText(20000);\n+    }\n+\n+    @Test (dependsOnMethods = \"testFullTest\")\n+    public void testRerunFailedTest() throws BallerinaTestException {\n+        String msg1 = \"0 passing\";\n+        String msg2 = \"2 failing\";\n+        LogLeecher clientLeecher1 = new LogLeecher(msg1);\n+        LogLeecher clientLeecher2 = new LogLeecher(msg2);\n+\n+        balClient.runMain(\"test\", new String[]{\"--rerun-failed\", \"module_1\"}, null, new String[]{},\n+                new LogLeecher[]{clientLeecher1, clientLeecher2}, projectPath);\n+\n+        clientLeecher1.waitForText(20000);\n+        clientLeecher2.waitForText(20000);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce647e52448f4b91556307e72865437e69995b64"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM4Nzg4MQ==", "bodyText": "Added testRerunWithNoFailedTests", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25294#discussion_r475387881", "createdAt": "2020-08-24T07:16:20Z", "author": {"login": "Ibaqu"}, "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/RerunFailedTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.testerina.test;\n+\n+import org.ballerinalang.test.context.BMainInstance;\n+import org.ballerinalang.test.context.BallerinaTestException;\n+import org.ballerinalang.test.context.LogLeecher;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test class containting tests related to Rerun failed test functionality.\n+ */\n+public class RerunFailedTest extends BaseTestCase {\n+\n+    private BMainInstance balClient;\n+    private String projectPath;\n+\n+    @BeforeClass\n+    public void setup() throws BallerinaTestException {\n+        balClient = new BMainInstance(balServer);\n+        projectPath = rerunFailedProjectPath.toString();\n+    }\n+\n+    @Test\n+    public void testFullTest() throws BallerinaTestException {\n+        String msg1 = \"2 passing\";\n+        String msg2 = \"2 failing\";\n+        LogLeecher clientLeecher1 = new LogLeecher(msg1);\n+        LogLeecher clientLeecher2 = new LogLeecher(msg2);\n+\n+        balClient.runMain(\"test\", new String[]{\"module_1\"}, null, new String[]{},\n+                new LogLeecher[]{clientLeecher1, clientLeecher2}, projectPath);\n+\n+        clientLeecher1.waitForText(20000);\n+        clientLeecher2.waitForText(20000);\n+    }\n+\n+    @Test (dependsOnMethods = \"testFullTest\")\n+    public void testRerunFailedTest() throws BallerinaTestException {\n+        String msg1 = \"0 passing\";\n+        String msg2 = \"2 failing\";\n+        LogLeecher clientLeecher1 = new LogLeecher(msg1);\n+        LogLeecher clientLeecher2 = new LogLeecher(msg2);\n+\n+        balClient.runMain(\"test\", new String[]{\"--rerun-failed\", \"module_1\"}, null, new String[]{},\n+                new LogLeecher[]{clientLeecher1, clientLeecher2}, projectPath);\n+\n+        clientLeecher1.waitForText(20000);\n+        clientLeecher2.waitForText(20000);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM1MTcwMg=="}, "originalCommit": {"oid": "ce647e52448f4b91556307e72865437e69995b64"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 230, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}