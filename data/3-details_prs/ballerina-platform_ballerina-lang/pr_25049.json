{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5MDc3Njk0", "number": 25049, "title": "Optimize use of local variables use in BIR", "bodyText": "Purpose\nResolve #24775 and #23914\nApproach\n\nThe controlflow graph is created from the BIR and liveness analysis is performed on it. The resulting liveOut values of each instruction is used to optimize the BIR.\n\nSamples\n\nN/A\n\nRemarks\n\nN/A\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-07-30T11:04:38Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25049", "merged": true, "mergeCommit": {"oid": "9e655441166c1df12cd81017bf4ecfb2ef522bc9"}, "closed": true, "closedAt": "2020-08-12T13:59:38Z", "author": {"login": "riyafa"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc6TBU0ABqjM2MDgyMDg2NDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-L3RjgFqTQ2NTk0MzM3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b383b6793707e4ea2242c412b7aa19af1f35b937", "author": {"user": {"login": "riyafa", "name": "Riyafa Abdul Hameed"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b383b6793707e4ea2242c412b7aa19af1f35b937", "committedDate": "2020-07-30T10:08:30Z", "message": "Optimize use of local variables use in BIR\n\nThe controlflow graph is created from the BIR and liveness analysis is performed on it. The resulting liveOut values of each instruction is used to optimize the BIR.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/24775 and https://github.com/ballerina-platform/ballerina-lang/issues/23914"}, "afterCommit": {"oid": "9d6431df15e99551191b99425719b10bdce2102f", "author": {"user": {"login": "riyafa", "name": "Riyafa Abdul Hameed"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9d6431df15e99551191b99425719b10bdce2102f", "committedDate": "2020-07-31T12:01:08Z", "message": "Optimize use of local variables use in BIR\n\nThe controlflow graph is created from the BIR and liveness analysis is performed on it. The resulting liveOut values of each instruction is used to optimize the BIR.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/24775 and https://github.com/ballerina-platform/ballerina-lang/issues/23914"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9d6431df15e99551191b99425719b10bdce2102f", "author": {"user": {"login": "riyafa", "name": "Riyafa Abdul Hameed"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9d6431df15e99551191b99425719b10bdce2102f", "committedDate": "2020-07-31T12:01:08Z", "message": "Optimize use of local variables use in BIR\n\nThe controlflow graph is created from the BIR and liveness analysis is performed on it. The resulting liveOut values of each instruction is used to optimize the BIR.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/24775 and https://github.com/ballerina-platform/ballerina-lang/issues/23914"}, "afterCommit": {"oid": "4b27c786bb39bcc53a4ed03f34885100bab115c8", "author": {"user": {"login": "riyafa", "name": "Riyafa Abdul Hameed"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4b27c786bb39bcc53a4ed03f34885100bab115c8", "committedDate": "2020-07-31T12:10:17Z", "message": "Optimize use of local variables use in BIR\n\nThe controlflow graph is created from the BIR and liveness analysis is performed on it. The resulting liveOut values of each instruction is used to optimize the BIR.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/24775 and https://github.com/ballerina-platform/ballerina-lang/issues/23914"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b27c786bb39bcc53a4ed03f34885100bab115c8", "author": {"user": {"login": "riyafa", "name": "Riyafa Abdul Hameed"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4b27c786bb39bcc53a4ed03f34885100bab115c8", "committedDate": "2020-07-31T12:10:17Z", "message": "Optimize use of local variables use in BIR\n\nThe controlflow graph is created from the BIR and liveness analysis is performed on it. The resulting liveOut values of each instruction is used to optimize the BIR.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/24775 and https://github.com/ballerina-platform/ballerina-lang/issues/23914"}, "afterCommit": {"oid": "f37af48e7e7bd0a47dc1d00661616fe8c2ef451b", "author": {"user": {"login": "riyafa", "name": "Riyafa Abdul Hameed"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f37af48e7e7bd0a47dc1d00661616fe8c2ef451b", "committedDate": "2020-08-04T04:53:45Z", "message": "Optimize use of local variables use in BIR\n\nThe controlflow graph is created from the BIR and liveness analysis is performed on it. The resulting liveOut values of each instruction is used to optimize the BIR.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/24775 and https://github.com/ballerina-platform/ballerina-lang/issues/23914"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f37af48e7e7bd0a47dc1d00661616fe8c2ef451b", "author": {"user": {"login": "riyafa", "name": "Riyafa Abdul Hameed"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f37af48e7e7bd0a47dc1d00661616fe8c2ef451b", "committedDate": "2020-08-04T04:53:45Z", "message": "Optimize use of local variables use in BIR\n\nThe controlflow graph is created from the BIR and liveness analysis is performed on it. The resulting liveOut values of each instruction is used to optimize the BIR.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/24775 and https://github.com/ballerina-platform/ballerina-lang/issues/23914"}, "afterCommit": {"oid": "337cf4f73495b3f0347ded5d5741908b591ef66c", "author": {"user": {"login": "riyafa", "name": "Riyafa Abdul Hameed"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/337cf4f73495b3f0347ded5d5741908b591ef66c", "committedDate": "2020-08-04T05:06:10Z", "message": "Optimize use of local variables use in BIR\n\nThe controlflow graph is created from the BIR and liveness analysis is performed on it. The resulting liveOut values of each instruction is used to optimize the BIR.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/24775 and https://github.com/ballerina-platform/ballerina-lang/issues/23914"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "337cf4f73495b3f0347ded5d5741908b591ef66c", "author": {"user": {"login": "riyafa", "name": "Riyafa Abdul Hameed"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/337cf4f73495b3f0347ded5d5741908b591ef66c", "committedDate": "2020-08-04T05:06:10Z", "message": "Optimize use of local variables use in BIR\n\nThe controlflow graph is created from the BIR and liveness analysis is performed on it. The resulting liveOut values of each instruction is used to optimize the BIR.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/24775 and https://github.com/ballerina-platform/ballerina-lang/issues/23914"}, "afterCommit": {"oid": "18ae3d8b91f09442a0863e4aa2b8d6bf2cf98822", "author": {"user": {"login": "riyafa", "name": "Riyafa Abdul Hameed"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/18ae3d8b91f09442a0863e4aa2b8d6bf2cf98822", "committedDate": "2020-08-06T05:57:19Z", "message": "Optimize use of local variables use in BIR\n\nThe controlflow graph is created from the BIR and liveness analysis is performed on it. The resulting liveOut values of each instruction is used to optimize the BIR.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/24775 and https://github.com/ballerina-platform/ballerina-lang/issues/23914"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "18ae3d8b91f09442a0863e4aa2b8d6bf2cf98822", "author": {"user": {"login": "riyafa", "name": "Riyafa Abdul Hameed"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/18ae3d8b91f09442a0863e4aa2b8d6bf2cf98822", "committedDate": "2020-08-06T05:57:19Z", "message": "Optimize use of local variables use in BIR\n\nThe controlflow graph is created from the BIR and liveness analysis is performed on it. The resulting liveOut values of each instruction is used to optimize the BIR.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/24775 and https://github.com/ballerina-platform/ballerina-lang/issues/23914"}, "afterCommit": {"oid": "c1bc59f8431e15bf671c9ae88d3e4f4d29d2f7ea", "author": {"user": {"login": "riyafa", "name": "Riyafa Abdul Hameed"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c1bc59f8431e15bf671c9ae88d3e4f4d29d2f7ea", "committedDate": "2020-08-06T09:27:23Z", "message": "Optimize use of local variables use in BIR\n\nThe controlflow graph is created from the BIR and liveness analysis is performed on it. The resulting liveOut values of each instruction is used to optimize the BIR.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/24775 and https://github.com/ballerina-platform/ballerina-lang/issues/23914"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c1bc59f8431e15bf671c9ae88d3e4f4d29d2f7ea", "author": {"user": {"login": "riyafa", "name": "Riyafa Abdul Hameed"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c1bc59f8431e15bf671c9ae88d3e4f4d29d2f7ea", "committedDate": "2020-08-06T09:27:23Z", "message": "Optimize use of local variables use in BIR\n\nThe controlflow graph is created from the BIR and liveness analysis is performed on it. The resulting liveOut values of each instruction is used to optimize the BIR.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/24775 and https://github.com/ballerina-platform/ballerina-lang/issues/23914"}, "afterCommit": {"oid": "27e27c9de233b7b1f91174c772e02b851ee40241", "author": {"user": {"login": "riyafa", "name": "Riyafa Abdul Hameed"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/27e27c9de233b7b1f91174c772e02b851ee40241", "committedDate": "2020-08-07T05:19:36Z", "message": "Optimize use of local variables use in BIR\n\nThe controlflow graph is created from the BIR and liveness analysis is performed on it. The resulting liveOut values of each instruction is used to optimize the BIR.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/24775 and https://github.com/ballerina-platform/ballerina-lang/issues/23914"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MjIxNDU3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25049#pullrequestreview-465221457", "createdAt": "2020-08-11T16:13:44Z", "commit": {"oid": "27e27c9de233b7b1f91174c772e02b851ee40241"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjoxMzo0NFrOG-_MSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjoxMzo0NFrOG-_MSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcwMDIzNA==", "bodyText": "isn't it better to use \"this.variableOptimizer\" here? I always find it to be readable within a constructor", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25049#discussion_r468700234", "createdAt": "2020-08-11T16:13:44Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/optimizer/BIROptimizer.java", "diffHunk": "@@ -67,6 +68,7 @@ private BIROptimizer(CompilerContext context) {\n         this.rhsTempVarOptimizer = new RHSTempVarOptimizer();\n         this.lhsTempVarOptimizer = new LHSTempVarOptimizer();\n         this.lockOptimizer = new BIRLockOptimizer();\n+        variableOptimizer = new BirVariableOptimizer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27e27c9de233b7b1f91174c772e02b851ee40241"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NTc4MDIw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25049#pullrequestreview-465578020", "createdAt": "2020-08-12T04:10:39Z", "commit": {"oid": "27e27c9de233b7b1f91174c772e02b851ee40241"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNDoxMDozOVrOG_RG2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNDoxMDozOVrOG_RG2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk5Mzc1NQ==", "bodyText": "shall we first return if lhsOp is null ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25049#discussion_r468993755", "createdAt": "2020-08-12T04:10:39Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/optimizer/BirVariableOptimizer.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.bir.optimizer;\n+\n+import org.wso2.ballerinalang.compiler.bir.model.BIRAbstractInstruction;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRNode;\n+import org.wso2.ballerinalang.compiler.bir.model.BIROperand;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRTerminator;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRVisitor;\n+import org.wso2.ballerinalang.compiler.bir.model.InstructionKind;\n+import org.wso2.ballerinalang.compiler.bir.model.VarKind;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Optimize variables by reusing temporary variables of the same type.\n+ *\n+ * @since 1.2.1\n+ */\n+public class BirVariableOptimizer extends BIRVisitor {\n+    public void optimizeNode(BIRNode node) {\n+        node.accept(this);\n+    }\n+\n+    @Override\n+    public void visit(BIRNode.BIRPackage birPackage) {\n+        birPackage.typeDefs.forEach(tDef -> tDef.accept(this));\n+        birPackage.functions.forEach(func -> func.accept(this));\n+    }\n+\n+    @Override\n+    public void visit(BIRNode.BIRTypeDefinition birTypeDefinition) {\n+        birTypeDefinition.attachedFuncs.forEach(func -> func.accept(this));\n+    }\n+\n+    @Override\n+    public void visit(BIRNode.BIRFunction birFunction) {\n+        ControlFlowGraph graph = new ControlFlowGraph(birFunction);\n+        LivenessAnalyzer analyzer = new LivenessAnalyzer(graph.getNodes());\n+        Map<BIRAbstractInstruction, Set<BIRNode.BIRVariableDcl>> liveOuts = analyzer.getInstructionLiveOuts();\n+        List<BIRNode.BIRVariableDcl> unusedVars = new ArrayList<>();\n+        reuseVars(liveOuts, unusedVars, birFunction);\n+        unusedVars.forEach(var -> birFunction.localVars.remove(var));\n+    }\n+\n+    private void reuseVars(Map<BIRAbstractInstruction, Set<BIRNode.BIRVariableDcl>> liveOuts,\n+                           List<BIRNode.BIRVariableDcl> unusedVars, BIRNode.BIRFunction birFunction) {\n+        List<BIRAbstractInstruction> instructionList = getInstructionList(birFunction);\n+        Map<BType, LinkedList<BIRNode.BIRVariableDcl>> freeVars = new HashMap<>();\n+        for (int i = 0; i < instructionList.size(); i++) {\n+            if (instructionList.get(i).getKind() == InstructionKind.XML_SEQ_STORE) {\n+                continue;\n+            }\n+            tryToReuseFromFreeVars(liveOuts, freeVars, instructionList, i, unusedVars);\n+            checkForFreeVars(freeVars, liveOuts, instructionList.get(i));\n+        }\n+    }\n+\n+    private void checkForFreeVars(Map<BType, LinkedList<BIRNode.BIRVariableDcl>> freeVars,\n+                                  Map<BIRAbstractInstruction, Set<BIRNode.BIRVariableDcl>> liveOuts,\n+                                  BIRAbstractInstruction instruction) {\n+        for (BIROperand operand : instruction.getRhsOperands()) {\n+            BType type = operand.variableDcl.type;\n+            if (operand.variableDcl.kind == VarKind.TEMP && !liveOuts.get(instruction).contains(operand.variableDcl)) {\n+                if (!freeVars.containsKey(type)) {\n+                    freeVars.put(type, new LinkedList<>());\n+                }\n+                LinkedList<BIRNode.BIRVariableDcl> ls = freeVars.get(type);\n+                ls.add(operand.variableDcl);\n+            }\n+        }\n+    }\n+\n+    private void tryToReuseFromFreeVars(Map<BIRAbstractInstruction, Set<BIRNode.BIRVariableDcl>> liveOuts,\n+                                        Map<BType, LinkedList<BIRNode.BIRVariableDcl>> freeVars,\n+                                        List<BIRAbstractInstruction> instructionList, int idx,\n+                                        List<BIRNode.BIRVariableDcl> unusedVars) {\n+        BIRAbstractInstruction instruction = instructionList.get(idx);\n+        if (instruction.lhsOp != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27e27c9de233b7b1f91174c772e02b851ee40241"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NTc4MjIx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25049#pullrequestreview-465578221", "createdAt": "2020-08-12T04:11:25Z", "commit": {"oid": "27e27c9de233b7b1f91174c772e02b851ee40241"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNDoxMToyNVrOG_RHbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNDoxMToyNVrOG_RHbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk5MzkwMQ==", "bodyText": "and same here, shall we retunr if defLs is null or empty?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25049#discussion_r468993901", "createdAt": "2020-08-12T04:11:25Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/optimizer/BirVariableOptimizer.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.bir.optimizer;\n+\n+import org.wso2.ballerinalang.compiler.bir.model.BIRAbstractInstruction;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRNode;\n+import org.wso2.ballerinalang.compiler.bir.model.BIROperand;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRTerminator;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRVisitor;\n+import org.wso2.ballerinalang.compiler.bir.model.InstructionKind;\n+import org.wso2.ballerinalang.compiler.bir.model.VarKind;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Optimize variables by reusing temporary variables of the same type.\n+ *\n+ * @since 1.2.1\n+ */\n+public class BirVariableOptimizer extends BIRVisitor {\n+    public void optimizeNode(BIRNode node) {\n+        node.accept(this);\n+    }\n+\n+    @Override\n+    public void visit(BIRNode.BIRPackage birPackage) {\n+        birPackage.typeDefs.forEach(tDef -> tDef.accept(this));\n+        birPackage.functions.forEach(func -> func.accept(this));\n+    }\n+\n+    @Override\n+    public void visit(BIRNode.BIRTypeDefinition birTypeDefinition) {\n+        birTypeDefinition.attachedFuncs.forEach(func -> func.accept(this));\n+    }\n+\n+    @Override\n+    public void visit(BIRNode.BIRFunction birFunction) {\n+        ControlFlowGraph graph = new ControlFlowGraph(birFunction);\n+        LivenessAnalyzer analyzer = new LivenessAnalyzer(graph.getNodes());\n+        Map<BIRAbstractInstruction, Set<BIRNode.BIRVariableDcl>> liveOuts = analyzer.getInstructionLiveOuts();\n+        List<BIRNode.BIRVariableDcl> unusedVars = new ArrayList<>();\n+        reuseVars(liveOuts, unusedVars, birFunction);\n+        unusedVars.forEach(var -> birFunction.localVars.remove(var));\n+    }\n+\n+    private void reuseVars(Map<BIRAbstractInstruction, Set<BIRNode.BIRVariableDcl>> liveOuts,\n+                           List<BIRNode.BIRVariableDcl> unusedVars, BIRNode.BIRFunction birFunction) {\n+        List<BIRAbstractInstruction> instructionList = getInstructionList(birFunction);\n+        Map<BType, LinkedList<BIRNode.BIRVariableDcl>> freeVars = new HashMap<>();\n+        for (int i = 0; i < instructionList.size(); i++) {\n+            if (instructionList.get(i).getKind() == InstructionKind.XML_SEQ_STORE) {\n+                continue;\n+            }\n+            tryToReuseFromFreeVars(liveOuts, freeVars, instructionList, i, unusedVars);\n+            checkForFreeVars(freeVars, liveOuts, instructionList.get(i));\n+        }\n+    }\n+\n+    private void checkForFreeVars(Map<BType, LinkedList<BIRNode.BIRVariableDcl>> freeVars,\n+                                  Map<BIRAbstractInstruction, Set<BIRNode.BIRVariableDcl>> liveOuts,\n+                                  BIRAbstractInstruction instruction) {\n+        for (BIROperand operand : instruction.getRhsOperands()) {\n+            BType type = operand.variableDcl.type;\n+            if (operand.variableDcl.kind == VarKind.TEMP && !liveOuts.get(instruction).contains(operand.variableDcl)) {\n+                if (!freeVars.containsKey(type)) {\n+                    freeVars.put(type, new LinkedList<>());\n+                }\n+                LinkedList<BIRNode.BIRVariableDcl> ls = freeVars.get(type);\n+                ls.add(operand.variableDcl);\n+            }\n+        }\n+    }\n+\n+    private void tryToReuseFromFreeVars(Map<BIRAbstractInstruction, Set<BIRNode.BIRVariableDcl>> liveOuts,\n+                                        Map<BType, LinkedList<BIRNode.BIRVariableDcl>> freeVars,\n+                                        List<BIRAbstractInstruction> instructionList, int idx,\n+                                        List<BIRNode.BIRVariableDcl> unusedVars) {\n+        BIRAbstractInstruction instruction = instructionList.get(idx);\n+        if (instruction.lhsOp != null) {\n+            BType type = instruction.lhsOp.variableDcl.type;\n+            LinkedList<BIRNode.BIRVariableDcl> defLs = freeVars.get(type);\n+            if (defLs != null && !defLs.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27e27c9de233b7b1f91174c772e02b851ee40241"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NTc5NTU3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25049#pullrequestreview-465579557", "createdAt": "2020-08-12T04:16:02Z", "commit": {"oid": "27e27c9de233b7b1f91174c772e02b851ee40241"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNDoxNjowMlrOG_RMEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNDoxNjowMlrOG_RMEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk5NTA4OQ==", "bodyText": "what is idx here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25049#discussion_r468995089", "createdAt": "2020-08-12T04:16:02Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/optimizer/BirVariableOptimizer.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.bir.optimizer;\n+\n+import org.wso2.ballerinalang.compiler.bir.model.BIRAbstractInstruction;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRNode;\n+import org.wso2.ballerinalang.compiler.bir.model.BIROperand;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRTerminator;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRVisitor;\n+import org.wso2.ballerinalang.compiler.bir.model.InstructionKind;\n+import org.wso2.ballerinalang.compiler.bir.model.VarKind;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Optimize variables by reusing temporary variables of the same type.\n+ *\n+ * @since 1.2.1\n+ */\n+public class BirVariableOptimizer extends BIRVisitor {\n+    public void optimizeNode(BIRNode node) {\n+        node.accept(this);\n+    }\n+\n+    @Override\n+    public void visit(BIRNode.BIRPackage birPackage) {\n+        birPackage.typeDefs.forEach(tDef -> tDef.accept(this));\n+        birPackage.functions.forEach(func -> func.accept(this));\n+    }\n+\n+    @Override\n+    public void visit(BIRNode.BIRTypeDefinition birTypeDefinition) {\n+        birTypeDefinition.attachedFuncs.forEach(func -> func.accept(this));\n+    }\n+\n+    @Override\n+    public void visit(BIRNode.BIRFunction birFunction) {\n+        ControlFlowGraph graph = new ControlFlowGraph(birFunction);\n+        LivenessAnalyzer analyzer = new LivenessAnalyzer(graph.getNodes());\n+        Map<BIRAbstractInstruction, Set<BIRNode.BIRVariableDcl>> liveOuts = analyzer.getInstructionLiveOuts();\n+        List<BIRNode.BIRVariableDcl> unusedVars = new ArrayList<>();\n+        reuseVars(liveOuts, unusedVars, birFunction);\n+        unusedVars.forEach(var -> birFunction.localVars.remove(var));\n+    }\n+\n+    private void reuseVars(Map<BIRAbstractInstruction, Set<BIRNode.BIRVariableDcl>> liveOuts,\n+                           List<BIRNode.BIRVariableDcl> unusedVars, BIRNode.BIRFunction birFunction) {\n+        List<BIRAbstractInstruction> instructionList = getInstructionList(birFunction);\n+        Map<BType, LinkedList<BIRNode.BIRVariableDcl>> freeVars = new HashMap<>();\n+        for (int i = 0; i < instructionList.size(); i++) {\n+            if (instructionList.get(i).getKind() == InstructionKind.XML_SEQ_STORE) {\n+                continue;\n+            }\n+            tryToReuseFromFreeVars(liveOuts, freeVars, instructionList, i, unusedVars);\n+            checkForFreeVars(freeVars, liveOuts, instructionList.get(i));\n+        }\n+    }\n+\n+    private void checkForFreeVars(Map<BType, LinkedList<BIRNode.BIRVariableDcl>> freeVars,\n+                                  Map<BIRAbstractInstruction, Set<BIRNode.BIRVariableDcl>> liveOuts,\n+                                  BIRAbstractInstruction instruction) {\n+        for (BIROperand operand : instruction.getRhsOperands()) {\n+            BType type = operand.variableDcl.type;\n+            if (operand.variableDcl.kind == VarKind.TEMP && !liveOuts.get(instruction).contains(operand.variableDcl)) {\n+                if (!freeVars.containsKey(type)) {\n+                    freeVars.put(type, new LinkedList<>());\n+                }\n+                LinkedList<BIRNode.BIRVariableDcl> ls = freeVars.get(type);\n+                ls.add(operand.variableDcl);\n+            }\n+        }\n+    }\n+\n+    private void tryToReuseFromFreeVars(Map<BIRAbstractInstruction, Set<BIRNode.BIRVariableDcl>> liveOuts,\n+                                        Map<BType, LinkedList<BIRNode.BIRVariableDcl>> freeVars,\n+                                        List<BIRAbstractInstruction> instructionList, int idx,\n+                                        List<BIRNode.BIRVariableDcl> unusedVars) {\n+        BIRAbstractInstruction instruction = instructionList.get(idx);\n+        if (instruction.lhsOp != null) {\n+            BType type = instruction.lhsOp.variableDcl.type;\n+            LinkedList<BIRNode.BIRVariableDcl> defLs = freeVars.get(type);\n+            if (defLs != null && !defLs.isEmpty()) {\n+                BIRNode.BIRVariableDcl newLhsOp = defLs.peek();\n+                BIRNode.BIRVariableDcl oldLhsOp = (instruction).lhsOp.variableDcl;\n+                if (oldLhsOp.kind == VarKind.TEMP && !checkVarUse(instruction, oldLhsOp)) {\n+                    defLs.remove();\n+                    unusedVars.add(oldLhsOp);\n+                    replaceOldOp(instructionList, idx, oldLhsOp, newLhsOp, liveOuts);\n+                    instruction.lhsOp.variableDcl = newLhsOp;\n+                }\n+            }\n+\n+        }\n+    }\n+\n+    private void replaceOldOp(List<BIRAbstractInstruction> ls, int idx, BIRNode.BIRVariableDcl oldLhsOp,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27e27c9de233b7b1f91174c772e02b851ee40241"}, "originalPosition": 118}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "27e27c9de233b7b1f91174c772e02b851ee40241", "author": {"user": {"login": "riyafa", "name": "Riyafa Abdul Hameed"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/27e27c9de233b7b1f91174c772e02b851ee40241", "committedDate": "2020-08-07T05:19:36Z", "message": "Optimize use of local variables use in BIR\n\nThe controlflow graph is created from the BIR and liveness analysis is performed on it. The resulting liveOut values of each instruction is used to optimize the BIR.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/24775 and https://github.com/ballerina-platform/ballerina-lang/issues/23914"}, "afterCommit": {"oid": "0007f770fd5eec0eb3243a7b1320ff0080af6ff9", "author": {"user": {"login": "riyafa", "name": "Riyafa Abdul Hameed"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0007f770fd5eec0eb3243a7b1320ff0080af6ff9", "committedDate": "2020-08-12T05:56:18Z", "message": "Optimize use of local variables use in BIR\n\nThe controlflow graph is created from the BIR and liveness analysis is performed on it. The resulting liveOut values of each instruction is used to optimize the BIR.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/24775 and https://github.com/ballerina-platform/ballerina-lang/issues/23914"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NjEyMjk1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25049#pullrequestreview-465612295", "createdAt": "2020-08-12T06:02:47Z", "commit": {"oid": "0007f770fd5eec0eb3243a7b1320ff0080af6ff9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjowMjo0N1rOG_S6wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjowMjo0N1rOG_S6wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAyMzQyNQ==", "bodyText": "can we reverse this if and continue the loop?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25049#discussion_r469023425", "createdAt": "2020-08-12T06:02:47Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/optimizer/BirVariableOptimizer.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.bir.optimizer;\n+\n+import org.wso2.ballerinalang.compiler.bir.model.BIRAbstractInstruction;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRNode;\n+import org.wso2.ballerinalang.compiler.bir.model.BIROperand;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRTerminator;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRVisitor;\n+import org.wso2.ballerinalang.compiler.bir.model.InstructionKind;\n+import org.wso2.ballerinalang.compiler.bir.model.VarKind;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Optimize variables by reusing temporary variables of the same type.\n+ *\n+ * @since 1.2.1\n+ */\n+public class BirVariableOptimizer extends BIRVisitor {\n+    public void optimizeNode(BIRNode node) {\n+        node.accept(this);\n+    }\n+\n+    @Override\n+    public void visit(BIRNode.BIRPackage birPackage) {\n+        birPackage.typeDefs.forEach(tDef -> tDef.accept(this));\n+        birPackage.functions.forEach(func -> func.accept(this));\n+    }\n+\n+    @Override\n+    public void visit(BIRNode.BIRTypeDefinition birTypeDefinition) {\n+        birTypeDefinition.attachedFuncs.forEach(func -> func.accept(this));\n+    }\n+\n+    @Override\n+    public void visit(BIRNode.BIRFunction birFunction) {\n+        ControlFlowGraph graph = new ControlFlowGraph(birFunction);\n+        LivenessAnalyzer analyzer = new LivenessAnalyzer(graph.getNodes());\n+        Map<BIRAbstractInstruction, Set<BIRNode.BIRVariableDcl>> liveOuts = analyzer.getInstructionLiveOuts();\n+        List<BIRNode.BIRVariableDcl> unusedVars = new ArrayList<>();\n+        reuseVars(liveOuts, unusedVars, birFunction);\n+        unusedVars.forEach(var -> birFunction.localVars.remove(var));\n+    }\n+\n+    private void reuseVars(Map<BIRAbstractInstruction, Set<BIRNode.BIRVariableDcl>> liveOuts,\n+                           List<BIRNode.BIRVariableDcl> unusedVars, BIRNode.BIRFunction birFunction) {\n+        List<BIRAbstractInstruction> instructionList = getInstructionList(birFunction);\n+        Map<BType, LinkedList<BIRNode.BIRVariableDcl>> freeVars = new HashMap<>();\n+        for (int i = 0; i < instructionList.size(); i++) {\n+            if (instructionList.get(i).getKind() == InstructionKind.XML_SEQ_STORE) {\n+                continue;\n+            }\n+            tryToReuseFromFreeVars(liveOuts, freeVars, instructionList, i, unusedVars);\n+            checkForFreeVars(freeVars, liveOuts, instructionList.get(i));\n+        }\n+    }\n+\n+    private void checkForFreeVars(Map<BType, LinkedList<BIRNode.BIRVariableDcl>> freeVars,\n+                                  Map<BIRAbstractInstruction, Set<BIRNode.BIRVariableDcl>> liveOuts,\n+                                  BIRAbstractInstruction instruction) {\n+        for (BIROperand operand : instruction.getRhsOperands()) {\n+            BType type = operand.variableDcl.type;\n+            if (operand.variableDcl.kind == VarKind.TEMP && !liveOuts.get(instruction).contains(operand.variableDcl)) {\n+                if (!freeVars.containsKey(type)) {\n+                    freeVars.put(type, new LinkedList<>());\n+                }\n+                LinkedList<BIRNode.BIRVariableDcl> ls = freeVars.get(type);\n+                ls.add(operand.variableDcl);\n+            }\n+        }\n+    }\n+\n+    private void tryToReuseFromFreeVars(Map<BIRAbstractInstruction, Set<BIRNode.BIRVariableDcl>> liveOuts,\n+                                        Map<BType, LinkedList<BIRNode.BIRVariableDcl>> freeVars,\n+                                        List<BIRAbstractInstruction> instructionList, int index,\n+                                        List<BIRNode.BIRVariableDcl> unusedVars) {\n+        BIRAbstractInstruction instruction = instructionList.get(index);\n+        if (instruction.lhsOp == null) {\n+            return;\n+        }\n+        BType type = instruction.lhsOp.variableDcl.type;\n+        LinkedList<BIRNode.BIRVariableDcl> defLs = freeVars.get(type);\n+        if (defLs == null || defLs.isEmpty()) {\n+            return;\n+        }\n+        BIRNode.BIRVariableDcl newLhsOp = defLs.peek();\n+        BIRNode.BIRVariableDcl oldLhsOp = (instruction).lhsOp.variableDcl;\n+        if (oldLhsOp.kind == VarKind.TEMP && !checkVarUse(instruction, oldLhsOp)) {\n+            defLs.remove();\n+            unusedVars.add(oldLhsOp);\n+            replaceOldOp(instructionList, index, oldLhsOp, newLhsOp, liveOuts);\n+            instruction.lhsOp.variableDcl = newLhsOp;\n+        }\n+    }\n+\n+    private void replaceOldOp(List<BIRAbstractInstruction> instructionList, int index, BIRNode.BIRVariableDcl oldLhsOp,\n+                              BIRNode.BIRVariableDcl newLhsOp,\n+                              Map<BIRAbstractInstruction, Set<BIRNode.BIRVariableDcl>> liveOuts) {\n+        for (int i = index + 1; i < instructionList.size(); i++) {\n+            BIRAbstractInstruction instruction = instructionList.get(i);\n+            boolean changed = false;\n+            BIROperand[] operands = instruction.getRhsOperands();\n+            for (BIROperand operand : operands) {\n+                if (operand.variableDcl == oldLhsOp) {\n+                    operand.variableDcl = newLhsOp;\n+                    changed = true;\n+                }\n+            }\n+\n+            if (changed) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0007f770fd5eec0eb3243a7b1320ff0080af6ff9"}, "originalPosition": 133}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0007f770fd5eec0eb3243a7b1320ff0080af6ff9", "author": {"user": {"login": "riyafa", "name": "Riyafa Abdul Hameed"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0007f770fd5eec0eb3243a7b1320ff0080af6ff9", "committedDate": "2020-08-12T05:56:18Z", "message": "Optimize use of local variables use in BIR\n\nThe controlflow graph is created from the BIR and liveness analysis is performed on it. The resulting liveOut values of each instruction is used to optimize the BIR.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/24775 and https://github.com/ballerina-platform/ballerina-lang/issues/23914"}, "afterCommit": {"oid": "f5c0a58c751665ad385ded28316766ceb7cb4ede", "author": {"user": {"login": "riyafa", "name": "Riyafa Abdul Hameed"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f5c0a58c751665ad385ded28316766ceb7cb4ede", "committedDate": "2020-08-12T06:06:50Z", "message": "Optimize use of local variables use in BIR\n\nThe controlflow graph is created from the BIR and liveness analysis is performed on it. The resulting liveOut values of each instruction is used to optimize the BIR.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/24775 and https://github.com/ballerina-platform/ballerina-lang/issues/23914"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NzA0MTk3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25049#pullrequestreview-465704197", "createdAt": "2020-08-12T08:34:05Z", "commit": {"oid": "f5c0a58c751665ad385ded28316766ceb7cb4ede"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODozNDowNVrOG_XYlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODozNDowNVrOG_XYlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA5NjU5Nw==", "bodyText": "lets remove the version tag for now.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25049#discussion_r469096597", "createdAt": "2020-08-12T08:34:05Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/optimizer/ControlFlowGraph.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.bir.optimizer;\n+\n+import org.wso2.ballerinalang.compiler.bir.model.BIRAbstractInstruction;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRNode;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRTerminator;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * The control flow graph that gets created from the bir.\n+ *\n+ * @since 2.0.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5c0a58c751665ad385ded28316766ceb7cb4ede"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NzU3MTE1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25049#pullrequestreview-465757115", "createdAt": "2020-08-12T09:44:21Z", "commit": {"oid": "f5c0a58c751665ad385ded28316766ceb7cb4ede"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOTo0NDoyMVrOG_Z8Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOTo0NDoyMVrOG_Z8Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEzODQ3OQ==", "bodyText": "remove this version tag too", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25049#discussion_r469138479", "createdAt": "2020-08-12T09:44:21Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/optimizer/BirVariableOptimizer.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.ballerinalang.compiler.bir.optimizer;\n+\n+import org.wso2.ballerinalang.compiler.bir.model.BIRAbstractInstruction;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRNode;\n+import org.wso2.ballerinalang.compiler.bir.model.BIROperand;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRTerminator;\n+import org.wso2.ballerinalang.compiler.bir.model.BIRVisitor;\n+import org.wso2.ballerinalang.compiler.bir.model.InstructionKind;\n+import org.wso2.ballerinalang.compiler.bir.model.VarKind;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Optimize variables by reusing temporary variables of the same type.\n+ *\n+ * @since 1.2.1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5c0a58c751665ad385ded28316766ceb7cb4ede"}, "originalPosition": 40}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f5c0a58c751665ad385ded28316766ceb7cb4ede", "author": {"user": {"login": "riyafa", "name": "Riyafa Abdul Hameed"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f5c0a58c751665ad385ded28316766ceb7cb4ede", "committedDate": "2020-08-12T06:06:50Z", "message": "Optimize use of local variables use in BIR\n\nThe controlflow graph is created from the BIR and liveness analysis is performed on it. The resulting liveOut values of each instruction is used to optimize the BIR.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/24775 and https://github.com/ballerina-platform/ballerina-lang/issues/23914"}, "afterCommit": {"oid": "6d179c440f0daba0ec77712a39c49fe627c2ff36", "author": {"user": {"login": "riyafa", "name": "Riyafa Abdul Hameed"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6d179c440f0daba0ec77712a39c49fe627c2ff36", "committedDate": "2020-08-12T09:50:57Z", "message": "Optimize use of local variables use in BIR\n\nThe controlflow graph is created from the BIR and liveness analysis is performed on it. The resulting liveOut values of each instruction is used to optimize the BIR.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/24775 and https://github.com/ballerina-platform/ballerina-lang/issues/23914"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NzYzNzQ0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25049#pullrequestreview-465763744", "createdAt": "2020-08-12T09:53:42Z", "commit": {"oid": "6d179c440f0daba0ec77712a39c49fe627c2ff36"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f44c381089a4507ddc494be60422ff097861f01c", "author": {"user": {"login": "riyafa", "name": "Riyafa Abdul Hameed"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f44c381089a4507ddc494be60422ff097861f01c", "committedDate": "2020-08-12T10:53:48Z", "message": "Optimize use of local variables use in BIR\n\nThe controlflow graph is created from the BIR and liveness analysis is performed on it. The resulting liveOut values of each instruction is used to optimize the BIR.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/24775 and https://github.com/ballerina-platform/ballerina-lang/issues/23914"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6d179c440f0daba0ec77712a39c49fe627c2ff36", "author": {"user": {"login": "riyafa", "name": "Riyafa Abdul Hameed"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6d179c440f0daba0ec77712a39c49fe627c2ff36", "committedDate": "2020-08-12T09:50:57Z", "message": "Optimize use of local variables use in BIR\n\nThe controlflow graph is created from the BIR and liveness analysis is performed on it. The resulting liveOut values of each instruction is used to optimize the BIR.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/24775 and https://github.com/ballerina-platform/ballerina-lang/issues/23914"}, "afterCommit": {"oid": "f44c381089a4507ddc494be60422ff097861f01c", "author": {"user": {"login": "riyafa", "name": "Riyafa Abdul Hameed"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f44c381089a4507ddc494be60422ff097861f01c", "committedDate": "2020-08-12T10:53:48Z", "message": "Optimize use of local variables use in BIR\n\nThe controlflow graph is created from the BIR and liveness analysis is performed on it. The resulting liveOut values of each instruction is used to optimize the BIR.\n\nResolve https://github.com/ballerina-platform/ballerina-lang/issues/24775 and https://github.com/ballerina-platform/ballerina-lang/issues/23914"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1OTQzMzcz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25049#pullrequestreview-465943373", "createdAt": "2020-08-12T13:58:43Z", "commit": {"oid": "f44c381089a4507ddc494be60422ff097861f01c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4967, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}