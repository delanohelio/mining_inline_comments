{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2NTAxMTQz", "number": 25224, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjozMjoyOFrOEXfTig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNzo1MTo1MFrOEZl0xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDY1NjEwOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/observability/tracer/TracersStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjozMjoyOFrOG_TkQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNjozOTozM1rOG_Tvsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzNDA1MA==", "bodyText": "can't we use tracerName.equalsIgnoreCase(openTracer.getName())", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25224#discussion_r469034050", "createdAt": "2020-08-12T06:32:28Z", "author": {"login": "riyafa"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/observability/tracer/TracersStore.java", "diffHunk": "@@ -51,31 +52,29 @@ private TracersStore() {\n     public void loadTracers() {\n         ConfigRegistry configRegistry = ConfigRegistry.getInstance();\n         if (configRegistry.getAsBoolean(CONFIG_TRACING_ENABLED)) {\n-\n-            this.tracerStore = new HashMap<>();\n+            String overallProviderName = configRegistry.getConfigOrDefault(CONFIG_OBSERVABILITY_PROVIDER, JAEGER);\n+            String tracerName = configRegistry.getConfigOrDefault(TRACER_NAME_CONFIG, overallProviderName);\n \n             ServiceLoader<OpenTracer> openTracers = ServiceLoader.load(OpenTracer.class);\n-            HashMap<String, OpenTracer> tracerMap = new HashMap<>();\n-            openTracers.forEach(t -> tracerMap.put(t.getName().toLowerCase(), t));\n-\n-            String defaultReporterName = configRegistry.getConfigOrDefault(CONFIG_OBSERVABILITY_PROVIDER, JAEGER);\n-            String tracerName = configRegistry.getConfigOrDefault(TRACER_NAME_CONFIG, defaultReporterName);\n+            for (OpenTracer openTracer : openTracers) {\n+                if (Objects.equals(openTracer.getName().toLowerCase(), tracerName.toLowerCase())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27c0096da43a9186eb41739056f1cf4f0c7310cb"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzNjk3OQ==", "bodyText": "Fixed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25224#discussion_r469036979", "createdAt": "2020-08-12T06:39:33Z", "author": {"login": "nadundesilva"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/observability/tracer/TracersStore.java", "diffHunk": "@@ -51,31 +52,29 @@ private TracersStore() {\n     public void loadTracers() {\n         ConfigRegistry configRegistry = ConfigRegistry.getInstance();\n         if (configRegistry.getAsBoolean(CONFIG_TRACING_ENABLED)) {\n-\n-            this.tracerStore = new HashMap<>();\n+            String overallProviderName = configRegistry.getConfigOrDefault(CONFIG_OBSERVABILITY_PROVIDER, JAEGER);\n+            String tracerName = configRegistry.getConfigOrDefault(TRACER_NAME_CONFIG, overallProviderName);\n \n             ServiceLoader<OpenTracer> openTracers = ServiceLoader.load(OpenTracer.class);\n-            HashMap<String, OpenTracer> tracerMap = new HashMap<>();\n-            openTracers.forEach(t -> tracerMap.put(t.getName().toLowerCase(), t));\n-\n-            String defaultReporterName = configRegistry.getConfigOrDefault(CONFIG_OBSERVABILITY_PROVIDER, JAEGER);\n-            String tracerName = configRegistry.getConfigOrDefault(TRACER_NAME_CONFIG, defaultReporterName);\n+            for (OpenTracer openTracer : openTracers) {\n+                if (Objects.equals(openTracer.getName().toLowerCase(), tracerName.toLowerCase())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAzNDA1MA=="}, "originalCommit": {"oid": "27c0096da43a9186eb41739056f1cf4f0c7310cb"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjY5NTcyOnYy", "diffSide": "RIGHT", "path": "misc/tracing-extensions/modules/ballerina-choreo-extension/src/main/java/org/ballerinalang/observe/trace/extension/choreo/ChoreoJaegerReporter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNzo1MTo1MFrOHCfnew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMjo0MDozMVrOHCt2mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM3NzIxMQ==", "bodyText": "what is the reason for this change? synchronizing on a different object.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25224#discussion_r472377211", "createdAt": "2020-08-18T17:51:50Z", "author": {"login": "Kishanthan"}, "path": "misc/tracing-extensions/modules/ballerina-choreo-extension/src/main/java/org/ballerinalang/observe/trace/extension/choreo/ChoreoJaegerReporter.java", "diffHunk": "@@ -126,13 +126,15 @@ private synchronized void append(JaegerSpan jaegerSpan) {\n             long duration = jaegerSpan.getDuration() / 1000;    // Jaeger stores duration in microseconds by default\n             ChoreoTraceSpan traceSpan = new ChoreoTraceSpan(spanContext.getTraceId(), spanContext.getSpanId(),\n                     jaegerSpan.getServiceName(), jaegerSpan.getOperationName(), timestamp, duration, tags, references);\n-            traceSpans.add(traceSpan);\n+            synchronized (traceSpans) {\n+                traceSpans.add(traceSpan);\n+            }\n         }\n \n         @Override\n         public void run() {\n             ChoreoTraceSpan[] spansToBeSent;\n-            synchronized (this) {\n+            synchronized (traceSpans) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a39a69f275e1a4e0bb2a8882549ed10ea6fb9a50"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYxMDQ1OA==", "bodyText": "This change is not required. I reverted the change in 0b5ba74", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25224#discussion_r472610458", "createdAt": "2020-08-19T02:40:31Z", "author": {"login": "nadundesilva"}, "path": "misc/tracing-extensions/modules/ballerina-choreo-extension/src/main/java/org/ballerinalang/observe/trace/extension/choreo/ChoreoJaegerReporter.java", "diffHunk": "@@ -126,13 +126,15 @@ private synchronized void append(JaegerSpan jaegerSpan) {\n             long duration = jaegerSpan.getDuration() / 1000;    // Jaeger stores duration in microseconds by default\n             ChoreoTraceSpan traceSpan = new ChoreoTraceSpan(spanContext.getTraceId(), spanContext.getSpanId(),\n                     jaegerSpan.getServiceName(), jaegerSpan.getOperationName(), timestamp, duration, tags, references);\n-            traceSpans.add(traceSpan);\n+            synchronized (traceSpans) {\n+                traceSpans.add(traceSpan);\n+            }\n         }\n \n         @Override\n         public void run() {\n             ChoreoTraceSpan[] spansToBeSent;\n-            synchronized (this) {\n+            synchronized (traceSpans) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM3NzIxMQ=="}, "originalCommit": {"oid": "a39a69f275e1a4e0bb2a8882549ed10ea6fb9a50"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 370, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}