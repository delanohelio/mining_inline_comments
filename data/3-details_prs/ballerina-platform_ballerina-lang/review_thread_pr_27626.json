{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0NTgyNDgz", "number": 27626, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxOTowNjoxMFrOFLAxeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODoxOToyM1rOFLlojw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDkxMzIyOnYy", "diffSide": "RIGHT", "path": "langlib/lang.annotations/src/main/ballerina/annotations.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxOTowNjoxMFrOIN9aWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxOToxMDozMlrOIN9kPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUwODU3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + label - label to be dispaled for a Ballerina construct\n          \n          \n            \n            # + label - label to be displayed for a Ballerina construct", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27626#discussion_r551508570", "createdAt": "2021-01-04T19:06:10Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.annotations/src/main/ballerina/annotations.bal", "diffHunk": "@@ -73,5 +73,16 @@ public type StrandData record {|\n # Denotes new Strand execution semantics.\n public const annotation StrandData strand on source worker;\n \n-# Denotes icon metadata related to types and functions.\n-public const annotation record {| string path; |} icon on source type, source function, source class;\n+# Describes display metadata.\n+#\n+# + label - label to be dispaled for a Ballerina construct", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7827db7314cc202afe33773ea4f02ad5b04e0c2e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUxMTEwMA==", "bodyText": "Should this just be \"label for the Ballerina construct\" instead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27626#discussion_r551511100", "createdAt": "2021-01-04T19:10:32Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.annotations/src/main/ballerina/annotations.bal", "diffHunk": "@@ -73,5 +73,16 @@ public type StrandData record {|\n # Denotes new Strand execution semantics.\n public const annotation StrandData strand on source worker;\n \n-# Denotes icon metadata related to types and functions.\n-public const annotation record {| string path; |} icon on source type, source function, source class;\n+# Describes display metadata.\n+#\n+# + label - label to be dispaled for a Ballerina construct", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUwODU3MA=="}, "originalCommit": {"oid": "7827db7314cc202afe33773ea4f02ad5b04e0c2e"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDk1MzMxOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/annotations/display_annot.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxOToxNzoxM1rOIN9xXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNjoyNToyNFrOIOLetg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUxNDQ2Mg==", "bodyText": "Shall we add a test for the openness of DisplayData too? With additional fields in the annotation?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27626#discussion_r551514462", "createdAt": "2021-01-04T19:17:13Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/annotations/display_annot.bal", "diffHunk": "@@ -14,15 +14,33 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-@icon { path: \"/fooIconPath.icon\" }\n+@display {iconPath: \"fooIconPath.icon\", label: \"Foo function\"}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7827db7314cc202afe33773ea4f02ad5b04e0c2e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTczOTA2Mg==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27626#discussion_r551739062", "createdAt": "2021-01-05T06:25:24Z", "author": {"login": "rdhananjaya"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/annotations/display_annot.bal", "diffHunk": "@@ -14,15 +14,33 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-@icon { path: \"/fooIconPath.icon\" }\n+@display {iconPath: \"fooIconPath.icon\", label: \"Foo function\"}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUxNDQ2Mg=="}, "originalCommit": {"oid": "7827db7314cc202afe33773ea4f02ad5b04e0c2e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NjQyNzE4OnYy", "diffSide": "RIGHT", "path": "langlib/lang.annotations/src/main/ballerina/annotations.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMzo0ODo1NFrOIOw-zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMzo0ODo1NFrOIOw-zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM1MzQ4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # icon path relative to module's resouce directory\n          \n          \n            \n                # icon path relative to module's resource directory", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27626#discussion_r552353485", "createdAt": "2021-01-06T03:48:54Z", "author": {"login": "MaryamZi"}, "path": "langlib/lang.annotations/src/main/ballerina/annotations.bal", "diffHunk": "@@ -73,5 +73,12 @@ public type StrandData record {|\n # Denotes new Strand execution semantics.\n public const annotation StrandData strand on source worker;\n \n-# Denotes icon metadata related to types and functions.\n-public const annotation record {| string path; |} icon on source type, source function, source class;\n+# Denotes general-purpose metadata to customize how Ballerina symbols are displayed in a UI environment.\n+public const annotation record {\n+    # label for the Ballerina construct\n+    string label;\n+    # icon path relative to module's resouce directory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ed31aa8ce34354bb9fac5358a4960ad52e8032f"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NjQzMTA5OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/annotations/DisplayAnnotationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMzo1MTozNlrOIOxBGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMzo1MTozNlrOIOxBGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM1NDA3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test void testIconAnnotationNegative() {\n          \n          \n            \n                @Test void testDisplayAnnotationNegative() {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27626#discussion_r552354074", "createdAt": "2021-01-06T03:51:36Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/annotations/DisplayAnnotationTest.java", "diffHunk": "@@ -29,57 +29,65 @@\n import org.wso2.ballerinalang.compiler.tree.BLangClassDefinition;\n import org.wso2.ballerinalang.compiler.tree.BLangFunction;\n import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangService;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangExpression;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangTypeConversionExpr;\n \n import java.util.List;\n \n /**\n- * Class to test icon annotation.\n+ * Class to test display annotation.\n  *\n  * @since 2.0\n  */\n-public class IconAnnotationTest {\n+public class DisplayAnnotationTest {\n \n     private CompileResult result;\n     private CompileResult negative;\n \n     @BeforeClass\n     public void setup() {\n-        negative = BCompileUtil.compile(\"test-src/annotations/icon_annot_negative.bal\");\n-        result = BCompileUtil.compile(\"test-src/annotations/icon_annot.bal\");\n+        negative = BCompileUtil.compile(\"test-src/annotations/display_annot_negative.bal\");\n+        result = BCompileUtil.compile(\"test-src/annotations/display_annot.bal\");\n     }\n \n     @Test\n-    public void testIconOnFunction() {\n+    public void testDisplayAnnotOnFunction() {\n         BLangFunction fooFunction = (BLangFunction) ((List) ((BLangPackage) result.getAST()).functions).get(0);\n         BLangAnnotationAttachment annot = (BLangAnnotationAttachment) ((List) fooFunction.annAttachments).get(0);\n-        Assert.assertEquals(getActualExpressionFromAnnotationAttachmentExpr(annot.expr).toString(), \" {path: \" +\n-                \"/fooIconPath.icon}\");\n+        Assert.assertEquals(getActualExpressionFromAnnotationAttachmentExpr(annot.expr).toString(),\n+                \" {iconPath: fooIconPath.icon,label: Foo function}\");\n+    }\n+\n+    @Test\n+    public void testDisplayAnnotOnServiceDecl() {\n+        BLangService service = (BLangService) result.getAST().getServices().get(0);\n+        BLangAnnotationAttachment attachment = service.getAnnotationAttachments().get(0);\n+        Assert.assertEquals(getActualExpressionFromAnnotationAttachmentExpr(attachment.expr).toString(),\n+                \" {iconPath: service.icon,label: service,misc: Other info}\");\n     }\n \n     @Test (enabled = false)\n     public void testIconOnObjectAndMemberFunction() {\n         ClassDefinition clz = result.getAST().getClassDefinitions().get(0);\n         List<? extends AnnotationAttachmentNode> objAnnot = clz.getAnnotationAttachments();\n         Assert.assertEquals(objAnnot.size(), 1);\n-        Assert.assertEquals(objAnnot.get(0).getExpression().toString(), \" {path: /barIconPath.icon}.cloneReadOnly()\");\n+        Assert.assertEquals(objAnnot.get(0).getExpression().toString(),\n+                \" {iconPath: barIconPath.icon,label: Bar class}.cloneReadOnly()\");\n \n         List<BLangAnnotationAttachment> attachedFuncAttachments =\n                 ((BLangClassDefinition) clz).functions.get(0).annAttachments;\n         String annotAsString =\n                 getActualExpressionFromAnnotationAttachmentExpr(attachedFuncAttachments.get(0).getExpression())\n                         .toString();\n-        Assert.assertEquals(annotAsString, \" {path: /kMemberFuncIconPath.icon}\");\n+        Assert.assertEquals(annotAsString, \" {iconPath: kMemberFuncIconPath.icon,label: k method}\");\n     }\n \n     @Test void testIconAnnotationNegative() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ed31aa8ce34354bb9fac5358a4960ad52e8032f"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NjQzMTcyOnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/annotations/DisplayAnnotationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMzo1MjowNFrOIOxBeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMzo1MjowNFrOIOxBeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM1NDE2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testIconOnObjectAndMemberFunction() {\n          \n          \n            \n                public void testDisplayOnObjectAndMemberFunction() {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27626#discussion_r552354168", "createdAt": "2021-01-06T03:52:04Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/annotations/DisplayAnnotationTest.java", "diffHunk": "@@ -29,57 +29,65 @@\n import org.wso2.ballerinalang.compiler.tree.BLangClassDefinition;\n import org.wso2.ballerinalang.compiler.tree.BLangFunction;\n import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangService;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangExpression;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangTypeConversionExpr;\n \n import java.util.List;\n \n /**\n- * Class to test icon annotation.\n+ * Class to test display annotation.\n  *\n  * @since 2.0\n  */\n-public class IconAnnotationTest {\n+public class DisplayAnnotationTest {\n \n     private CompileResult result;\n     private CompileResult negative;\n \n     @BeforeClass\n     public void setup() {\n-        negative = BCompileUtil.compile(\"test-src/annotations/icon_annot_negative.bal\");\n-        result = BCompileUtil.compile(\"test-src/annotations/icon_annot.bal\");\n+        negative = BCompileUtil.compile(\"test-src/annotations/display_annot_negative.bal\");\n+        result = BCompileUtil.compile(\"test-src/annotations/display_annot.bal\");\n     }\n \n     @Test\n-    public void testIconOnFunction() {\n+    public void testDisplayAnnotOnFunction() {\n         BLangFunction fooFunction = (BLangFunction) ((List) ((BLangPackage) result.getAST()).functions).get(0);\n         BLangAnnotationAttachment annot = (BLangAnnotationAttachment) ((List) fooFunction.annAttachments).get(0);\n-        Assert.assertEquals(getActualExpressionFromAnnotationAttachmentExpr(annot.expr).toString(), \" {path: \" +\n-                \"/fooIconPath.icon}\");\n+        Assert.assertEquals(getActualExpressionFromAnnotationAttachmentExpr(annot.expr).toString(),\n+                \" {iconPath: fooIconPath.icon,label: Foo function}\");\n+    }\n+\n+    @Test\n+    public void testDisplayAnnotOnServiceDecl() {\n+        BLangService service = (BLangService) result.getAST().getServices().get(0);\n+        BLangAnnotationAttachment attachment = service.getAnnotationAttachments().get(0);\n+        Assert.assertEquals(getActualExpressionFromAnnotationAttachmentExpr(attachment.expr).toString(),\n+                \" {iconPath: service.icon,label: service,misc: Other info}\");\n     }\n \n     @Test (enabled = false)\n     public void testIconOnObjectAndMemberFunction() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ed31aa8ce34354bb9fac5358a4960ad52e8032f"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NjQzMjE4OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/annotations/DisplayAnnotationTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMzo1MjoyNlrOIOxBwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODoxMDo0NVrOIO1bXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM1NDI0MQ==", "bodyText": "Can this be enabled?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27626#discussion_r552354241", "createdAt": "2021-01-06T03:52:26Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/annotations/DisplayAnnotationTest.java", "diffHunk": "@@ -29,57 +29,65 @@\n import org.wso2.ballerinalang.compiler.tree.BLangClassDefinition;\n import org.wso2.ballerinalang.compiler.tree.BLangFunction;\n import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangService;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangExpression;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangTypeConversionExpr;\n \n import java.util.List;\n \n /**\n- * Class to test icon annotation.\n+ * Class to test display annotation.\n  *\n  * @since 2.0\n  */\n-public class IconAnnotationTest {\n+public class DisplayAnnotationTest {\n \n     private CompileResult result;\n     private CompileResult negative;\n \n     @BeforeClass\n     public void setup() {\n-        negative = BCompileUtil.compile(\"test-src/annotations/icon_annot_negative.bal\");\n-        result = BCompileUtil.compile(\"test-src/annotations/icon_annot.bal\");\n+        negative = BCompileUtil.compile(\"test-src/annotations/display_annot_negative.bal\");\n+        result = BCompileUtil.compile(\"test-src/annotations/display_annot.bal\");\n     }\n \n     @Test\n-    public void testIconOnFunction() {\n+    public void testDisplayAnnotOnFunction() {\n         BLangFunction fooFunction = (BLangFunction) ((List) ((BLangPackage) result.getAST()).functions).get(0);\n         BLangAnnotationAttachment annot = (BLangAnnotationAttachment) ((List) fooFunction.annAttachments).get(0);\n-        Assert.assertEquals(getActualExpressionFromAnnotationAttachmentExpr(annot.expr).toString(), \" {path: \" +\n-                \"/fooIconPath.icon}\");\n+        Assert.assertEquals(getActualExpressionFromAnnotationAttachmentExpr(annot.expr).toString(),\n+                \" {iconPath: fooIconPath.icon,label: Foo function}\");\n+    }\n+\n+    @Test\n+    public void testDisplayAnnotOnServiceDecl() {\n+        BLangService service = (BLangService) result.getAST().getServices().get(0);\n+        BLangAnnotationAttachment attachment = service.getAnnotationAttachments().get(0);\n+        Assert.assertEquals(getActualExpressionFromAnnotationAttachmentExpr(attachment.expr).toString(),\n+                \" {iconPath: service.icon,label: service,misc: Other info}\");\n     }\n \n     @Test (enabled = false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ed31aa8ce34354bb9fac5358a4960ad52e8032f"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM1NzMzMg==", "bodyText": "We can by removing .cloneReadOnly() bit, but then when we fix the annotation cloning issue this will fail.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27626#discussion_r552357332", "createdAt": "2021-01-06T04:05:56Z", "author": {"login": "rdhananjaya"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/annotations/DisplayAnnotationTest.java", "diffHunk": "@@ -29,57 +29,65 @@\n import org.wso2.ballerinalang.compiler.tree.BLangClassDefinition;\n import org.wso2.ballerinalang.compiler.tree.BLangFunction;\n import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangService;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangExpression;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangTypeConversionExpr;\n \n import java.util.List;\n \n /**\n- * Class to test icon annotation.\n+ * Class to test display annotation.\n  *\n  * @since 2.0\n  */\n-public class IconAnnotationTest {\n+public class DisplayAnnotationTest {\n \n     private CompileResult result;\n     private CompileResult negative;\n \n     @BeforeClass\n     public void setup() {\n-        negative = BCompileUtil.compile(\"test-src/annotations/icon_annot_negative.bal\");\n-        result = BCompileUtil.compile(\"test-src/annotations/icon_annot.bal\");\n+        negative = BCompileUtil.compile(\"test-src/annotations/display_annot_negative.bal\");\n+        result = BCompileUtil.compile(\"test-src/annotations/display_annot.bal\");\n     }\n \n     @Test\n-    public void testIconOnFunction() {\n+    public void testDisplayAnnotOnFunction() {\n         BLangFunction fooFunction = (BLangFunction) ((List) ((BLangPackage) result.getAST()).functions).get(0);\n         BLangAnnotationAttachment annot = (BLangAnnotationAttachment) ((List) fooFunction.annAttachments).get(0);\n-        Assert.assertEquals(getActualExpressionFromAnnotationAttachmentExpr(annot.expr).toString(), \" {path: \" +\n-                \"/fooIconPath.icon}\");\n+        Assert.assertEquals(getActualExpressionFromAnnotationAttachmentExpr(annot.expr).toString(),\n+                \" {iconPath: fooIconPath.icon,label: Foo function}\");\n+    }\n+\n+    @Test\n+    public void testDisplayAnnotOnServiceDecl() {\n+        BLangService service = (BLangService) result.getAST().getServices().get(0);\n+        BLangAnnotationAttachment attachment = service.getAnnotationAttachments().get(0);\n+        Assert.assertEquals(getActualExpressionFromAnnotationAttachmentExpr(attachment.expr).toString(),\n+                \" {iconPath: service.icon,label: service,misc: Other info}\");\n     }\n \n     @Test (enabled = false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM1NDI0MQ=="}, "originalCommit": {"oid": "1ed31aa8ce34354bb9fac5358a4960ad52e8032f"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM1Nzg3MA==", "bodyText": "That's OK, right? The rest will probably fail anyway so we can fix the set of tests together? WDYT?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27626#discussion_r552357870", "createdAt": "2021-01-06T04:08:16Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/annotations/DisplayAnnotationTest.java", "diffHunk": "@@ -29,57 +29,65 @@\n import org.wso2.ballerinalang.compiler.tree.BLangClassDefinition;\n import org.wso2.ballerinalang.compiler.tree.BLangFunction;\n import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangService;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangExpression;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangTypeConversionExpr;\n \n import java.util.List;\n \n /**\n- * Class to test icon annotation.\n+ * Class to test display annotation.\n  *\n  * @since 2.0\n  */\n-public class IconAnnotationTest {\n+public class DisplayAnnotationTest {\n \n     private CompileResult result;\n     private CompileResult negative;\n \n     @BeforeClass\n     public void setup() {\n-        negative = BCompileUtil.compile(\"test-src/annotations/icon_annot_negative.bal\");\n-        result = BCompileUtil.compile(\"test-src/annotations/icon_annot.bal\");\n+        negative = BCompileUtil.compile(\"test-src/annotations/display_annot_negative.bal\");\n+        result = BCompileUtil.compile(\"test-src/annotations/display_annot.bal\");\n     }\n \n     @Test\n-    public void testIconOnFunction() {\n+    public void testDisplayAnnotOnFunction() {\n         BLangFunction fooFunction = (BLangFunction) ((List) ((BLangPackage) result.getAST()).functions).get(0);\n         BLangAnnotationAttachment annot = (BLangAnnotationAttachment) ((List) fooFunction.annAttachments).get(0);\n-        Assert.assertEquals(getActualExpressionFromAnnotationAttachmentExpr(annot.expr).toString(), \" {path: \" +\n-                \"/fooIconPath.icon}\");\n+        Assert.assertEquals(getActualExpressionFromAnnotationAttachmentExpr(annot.expr).toString(),\n+                \" {iconPath: fooIconPath.icon,label: Foo function}\");\n+    }\n+\n+    @Test\n+    public void testDisplayAnnotOnServiceDecl() {\n+        BLangService service = (BLangService) result.getAST().getServices().get(0);\n+        BLangAnnotationAttachment attachment = service.getAnnotationAttachments().get(0);\n+        Assert.assertEquals(getActualExpressionFromAnnotationAttachmentExpr(attachment.expr).toString(),\n+                \" {iconPath: service.icon,label: service,misc: Other info}\");\n     }\n \n     @Test (enabled = false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM1NDI0MQ=="}, "originalCommit": {"oid": "1ed31aa8ce34354bb9fac5358a4960ad52e8032f"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQyNjMzMg==", "bodyText": "done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27626#discussion_r552426332", "createdAt": "2021-01-06T08:10:45Z", "author": {"login": "rdhananjaya"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/annotations/DisplayAnnotationTest.java", "diffHunk": "@@ -29,57 +29,65 @@\n import org.wso2.ballerinalang.compiler.tree.BLangClassDefinition;\n import org.wso2.ballerinalang.compiler.tree.BLangFunction;\n import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.tree.BLangService;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangExpression;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangInvocation;\n import org.wso2.ballerinalang.compiler.tree.expressions.BLangTypeConversionExpr;\n \n import java.util.List;\n \n /**\n- * Class to test icon annotation.\n+ * Class to test display annotation.\n  *\n  * @since 2.0\n  */\n-public class IconAnnotationTest {\n+public class DisplayAnnotationTest {\n \n     private CompileResult result;\n     private CompileResult negative;\n \n     @BeforeClass\n     public void setup() {\n-        negative = BCompileUtil.compile(\"test-src/annotations/icon_annot_negative.bal\");\n-        result = BCompileUtil.compile(\"test-src/annotations/icon_annot.bal\");\n+        negative = BCompileUtil.compile(\"test-src/annotations/display_annot_negative.bal\");\n+        result = BCompileUtil.compile(\"test-src/annotations/display_annot.bal\");\n     }\n \n     @Test\n-    public void testIconOnFunction() {\n+    public void testDisplayAnnotOnFunction() {\n         BLangFunction fooFunction = (BLangFunction) ((List) ((BLangPackage) result.getAST()).functions).get(0);\n         BLangAnnotationAttachment annot = (BLangAnnotationAttachment) ((List) fooFunction.annAttachments).get(0);\n-        Assert.assertEquals(getActualExpressionFromAnnotationAttachmentExpr(annot.expr).toString(), \" {path: \" +\n-                \"/fooIconPath.icon}\");\n+        Assert.assertEquals(getActualExpressionFromAnnotationAttachmentExpr(annot.expr).toString(),\n+                \" {iconPath: fooIconPath.icon,label: Foo function}\");\n+    }\n+\n+    @Test\n+    public void testDisplayAnnotOnServiceDecl() {\n+        BLangService service = (BLangService) result.getAST().getServices().get(0);\n+        BLangAnnotationAttachment attachment = service.getAnnotationAttachments().get(0);\n+        Assert.assertEquals(getActualExpressionFromAnnotationAttachmentExpr(attachment.expr).toString(),\n+                \" {iconPath: service.icon,label: service,misc: Other info}\");\n     }\n \n     @Test (enabled = false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjM1NDI0MQ=="}, "originalCommit": {"oid": "1ed31aa8ce34354bb9fac5358a4960ad52e8032f"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Njk1MjQ3OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/annotations/display_annot_negative.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODoxOToyM1rOIO1o5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMjozNzo0NlrOIO-ArQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQyOTc5Nw==", "bodyText": "Do we need this now?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27626#discussion_r552429797", "createdAt": "2021-01-06T08:19:23Z", "author": {"login": "MaryamZi"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/annotations/display_annot_negative.bal", "diffHunk": "@@ -14,11 +14,11 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-@icon { path: \"/fooIconPath.icon\" }\n-@icon { path: \"/fooIconPath.icon\" }\n+@display {iconPath: \"fooIconPath.icon\", label: \"l\"}\n+@display {iconPath: \"fooIconPath.icon\", label: \"j\"}\n function foo(int i, string k) returns int {\n     return i;\n }\n \n-@icon { path: \"/fooIconPath.icon\" }\n+@display {iconPath: \"fooIconPath.icon\", label: \"k\"}\n int GLOBAL = 3;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13b459afb67675187ccf5dfcac442d02d96b1da1"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjU2Njk1Nw==", "bodyText": "Removed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27626#discussion_r552566957", "createdAt": "2021-01-06T12:37:46Z", "author": {"login": "rdhananjaya"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/annotations/display_annot_negative.bal", "diffHunk": "@@ -14,11 +14,11 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-@icon { path: \"/fooIconPath.icon\" }\n-@icon { path: \"/fooIconPath.icon\" }\n+@display {iconPath: \"fooIconPath.icon\", label: \"l\"}\n+@display {iconPath: \"fooIconPath.icon\", label: \"j\"}\n function foo(int i, string k) returns int {\n     return i;\n }\n \n-@icon { path: \"/fooIconPath.icon\" }\n+@display {iconPath: \"fooIconPath.icon\", label: \"k\"}\n int GLOBAL = 3;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQyOTc5Nw=="}, "originalCommit": {"oid": "13b459afb67675187ccf5dfcac442d02d96b1da1"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2807, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}