{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzNTk2NDU5", "number": 26693, "title": "Add a multi-language extension support", "bodyText": "Purpose\n\nWith this add the multi-language extension support for language server. Currently we have added three Language Feature extensions along with this PR.\n\n\nCompletion Extension\nFormatting Extension\nDiagnostic Extension\n\nAlso, with this PR we migrated the completion feature to delegate to the particular completion extension(Currently Ballerina only)\nSamples\nWriting a feature extension\n\nImplement the CompletionExtension, FormattingExtension or DiagnosticsExtension\nImplements the execute method\nexecute method is the entry point\nLangExtensionDelegator is the publicly exposed delegate API.\n\nEx: Implementing a language extension for completion feature\n@JavaSPIService(\"org.ballerinalang.langserver.commons.LanguageExtension\")\npublic class BallerinaCompletionExtension implements CompletionExtension {\n    @Override\n    public boolean validate(CompletionParams inputParams) {\n        // language validation based on the input parameters\n    }\n\n    @Override\n    public Either<List<CompletionItem>, CompletionList> execute(CompletionParams inputParams, LSContext context) {\n        // resolving logic\n    }\n}\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-11-01T10:32:35Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26693", "merged": true, "mergeCommit": {"oid": "ea4b3e2281468ae9cd6546acdfbfeb8d8187c82e"}, "closed": true, "closedAt": "2020-11-02T07:05:24Z", "author": {"login": "nadeeshaan"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdYNCWYgH2gAyNTEzNTk2NDU5OjJiMzI2YTgyYzk0MDZkMTdkM2U2ZDc1YmVmNjNlNjJlMGQxYzZlNGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdYd9bxAFqTUyMTM0Mzg5MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2b326a82c9406d17d3e6d75bef63e62e0d1c6e4f", "author": {"user": {"login": "nadeeshaan", "name": "Nadeeshaan Gunasinghe"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2b326a82c9406d17d3e6d75bef63e62e0d1c6e4f", "committedDate": "2020-11-01T10:02:45Z", "message": "add a multi-language extension support"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMzA2NzA2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26693#pullrequestreview-521306706", "createdAt": "2020-11-02T03:01:02Z", "commit": {"oid": "2b326a82c9406d17d3e6d75bef63e62e0d1c6e4f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMzowMTowM1rOHr0-Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMzowNDowMVrOHr1ADQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcxODY3OQ==", "bodyText": "Specific reason to limit to one? We can merge the results from multiple filtered extensions. eg. there can be two completion extensions with the same uri pattern.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26693#discussion_r515718679", "createdAt": "2020-11-02T03:01:03Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/LangExtensionDelegator.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.langserver;\n+\n+import org.ballerinalang.langserver.commons.CompletionExtension;\n+import org.ballerinalang.langserver.commons.DiagnosticsExtension;\n+import org.ballerinalang.langserver.commons.FormattingExtension;\n+import org.ballerinalang.langserver.commons.LSContext;\n+import org.ballerinalang.langserver.commons.LanguageExtension;\n+import org.eclipse.lsp4j.CompletionItem;\n+import org.eclipse.lsp4j.CompletionList;\n+import org.eclipse.lsp4j.CompletionParams;\n+import org.eclipse.lsp4j.DocumentFormattingParams;\n+import org.eclipse.lsp4j.PublishDiagnosticsParams;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.eclipse.lsp4j.jsonrpc.messages.Either;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.ServiceLoader;\n+\n+/**\n+ * Delegate the operation to the valid extension.\n+ *\n+ * @since 2.0.0\n+ */\n+public class LangExtensionDelegator {\n+\n+    private static final LangExtensionDelegator INSTANCE = new LangExtensionDelegator();\n+\n+    private final List<CompletionExtension> completionExtensions = new ArrayList<>();\n+    private final List<FormattingExtension> formatExtensions = new ArrayList<>();\n+    private final List<DiagnosticsExtension> diagExtensions = new ArrayList<>();\n+\n+    private LangExtensionDelegator() {\n+        ServiceLoader.load(LanguageExtension.class).forEach(languageExtension -> {\n+            switch (languageExtension.kind()) {\n+                case COMPLETION:\n+                    completionExtensions.add((CompletionExtension) languageExtension);\n+                    break;\n+                case FORMAT:\n+                    formatExtensions.add((FormattingExtension) languageExtension);\n+                    break;\n+                case DIAGNOSTIC:\n+                    diagExtensions.add((DiagnosticsExtension) languageExtension);\n+                    break;\n+                default:\n+                    break;\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Get the completions.\n+     *\n+     * @param params completion parameters\n+     * @return {@link Either} completion results\n+     */\n+    public Either<List<CompletionItem>, CompletionList> completion(CompletionParams params, LSContext context) {\n+        return completionExtensions.stream().filter(ext -> ext.validate(params))\n+                .map(ext -> ext.execute(params, context))\n+                .findFirst()\n+                .orElse(Either.forRight(new CompletionList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b326a82c9406d17d3e6d75bef63e62e0d1c6e4f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcxODc1NA==", "bodyText": "Specific reason to limit to one? We can merge the results from multiple filtered extensions. eg. there can be two completion extensions with the same uri pattern.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26693#discussion_r515718754", "createdAt": "2020-11-02T03:01:25Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/LangExtensionDelegator.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.langserver;\n+\n+import org.ballerinalang.langserver.commons.CompletionExtension;\n+import org.ballerinalang.langserver.commons.DiagnosticsExtension;\n+import org.ballerinalang.langserver.commons.FormattingExtension;\n+import org.ballerinalang.langserver.commons.LSContext;\n+import org.ballerinalang.langserver.commons.LanguageExtension;\n+import org.eclipse.lsp4j.CompletionItem;\n+import org.eclipse.lsp4j.CompletionList;\n+import org.eclipse.lsp4j.CompletionParams;\n+import org.eclipse.lsp4j.DocumentFormattingParams;\n+import org.eclipse.lsp4j.PublishDiagnosticsParams;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.eclipse.lsp4j.jsonrpc.messages.Either;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.ServiceLoader;\n+\n+/**\n+ * Delegate the operation to the valid extension.\n+ *\n+ * @since 2.0.0\n+ */\n+public class LangExtensionDelegator {\n+\n+    private static final LangExtensionDelegator INSTANCE = new LangExtensionDelegator();\n+\n+    private final List<CompletionExtension> completionExtensions = new ArrayList<>();\n+    private final List<FormattingExtension> formatExtensions = new ArrayList<>();\n+    private final List<DiagnosticsExtension> diagExtensions = new ArrayList<>();\n+\n+    private LangExtensionDelegator() {\n+        ServiceLoader.load(LanguageExtension.class).forEach(languageExtension -> {\n+            switch (languageExtension.kind()) {\n+                case COMPLETION:\n+                    completionExtensions.add((CompletionExtension) languageExtension);\n+                    break;\n+                case FORMAT:\n+                    formatExtensions.add((FormattingExtension) languageExtension);\n+                    break;\n+                case DIAGNOSTIC:\n+                    diagExtensions.add((DiagnosticsExtension) languageExtension);\n+                    break;\n+                default:\n+                    break;\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Get the completions.\n+     *\n+     * @param params completion parameters\n+     * @return {@link Either} completion results\n+     */\n+    public Either<List<CompletionItem>, CompletionList> completion(CompletionParams params, LSContext context) {\n+        return completionExtensions.stream().filter(ext -> ext.validate(params))\n+                .map(ext -> ext.execute(params, context))\n+                .findFirst()\n+                .orElse(Either.forRight(new CompletionList()));\n+    }\n+\n+    /**\n+     * Get the formatting.\n+     *\n+     * @param params formatting parameters\n+     * @return {@link List} of text edits\n+     */\n+    public List<? extends TextEdit> formatting(DocumentFormattingParams params, LSContext context) {\n+        return formatExtensions.stream().filter(ext -> ext.validate(params))\n+                .map(ext -> ext.execute(params, context))\n+                .findFirst()\n+                .orElse(new ArrayList<>());\n+    }\n+\n+    /**\n+     * Get the Diagnostics.\n+     *\n+     * @param uri document URI\n+     * @return {@link PublishDiagnosticsParams} diagnostic params calculated\n+     */\n+    public PublishDiagnosticsParams diagnostics(String uri, LSContext context) {\n+        return diagExtensions.stream().filter(ext -> ext.validate(uri))\n+                .map(ext -> ext.execute(uri, context))\n+                .findFirst()\n+                .orElse(new PublishDiagnosticsParams());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b326a82c9406d17d3e6d75bef63e62e0d1c6e4f"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcxODc4NQ==", "bodyText": "Specific reason to limit to one? We can merge the results from multiple filtered extensions. eg. there can be two completion extensions with the same uri pattern.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26693#discussion_r515718785", "createdAt": "2020-11-02T03:01:38Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/LangExtensionDelegator.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.langserver;\n+\n+import org.ballerinalang.langserver.commons.CompletionExtension;\n+import org.ballerinalang.langserver.commons.DiagnosticsExtension;\n+import org.ballerinalang.langserver.commons.FormattingExtension;\n+import org.ballerinalang.langserver.commons.LSContext;\n+import org.ballerinalang.langserver.commons.LanguageExtension;\n+import org.eclipse.lsp4j.CompletionItem;\n+import org.eclipse.lsp4j.CompletionList;\n+import org.eclipse.lsp4j.CompletionParams;\n+import org.eclipse.lsp4j.DocumentFormattingParams;\n+import org.eclipse.lsp4j.PublishDiagnosticsParams;\n+import org.eclipse.lsp4j.TextEdit;\n+import org.eclipse.lsp4j.jsonrpc.messages.Either;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.ServiceLoader;\n+\n+/**\n+ * Delegate the operation to the valid extension.\n+ *\n+ * @since 2.0.0\n+ */\n+public class LangExtensionDelegator {\n+\n+    private static final LangExtensionDelegator INSTANCE = new LangExtensionDelegator();\n+\n+    private final List<CompletionExtension> completionExtensions = new ArrayList<>();\n+    private final List<FormattingExtension> formatExtensions = new ArrayList<>();\n+    private final List<DiagnosticsExtension> diagExtensions = new ArrayList<>();\n+\n+    private LangExtensionDelegator() {\n+        ServiceLoader.load(LanguageExtension.class).forEach(languageExtension -> {\n+            switch (languageExtension.kind()) {\n+                case COMPLETION:\n+                    completionExtensions.add((CompletionExtension) languageExtension);\n+                    break;\n+                case FORMAT:\n+                    formatExtensions.add((FormattingExtension) languageExtension);\n+                    break;\n+                case DIAGNOSTIC:\n+                    diagExtensions.add((DiagnosticsExtension) languageExtension);\n+                    break;\n+                default:\n+                    break;\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Get the completions.\n+     *\n+     * @param params completion parameters\n+     * @return {@link Either} completion results\n+     */\n+    public Either<List<CompletionItem>, CompletionList> completion(CompletionParams params, LSContext context) {\n+        return completionExtensions.stream().filter(ext -> ext.validate(params))\n+                .map(ext -> ext.execute(params, context))\n+                .findFirst()\n+                .orElse(Either.forRight(new CompletionList()));\n+    }\n+\n+    /**\n+     * Get the formatting.\n+     *\n+     * @param params formatting parameters\n+     * @return {@link List} of text edits\n+     */\n+    public List<? extends TextEdit> formatting(DocumentFormattingParams params, LSContext context) {\n+        return formatExtensions.stream().filter(ext -> ext.validate(params))\n+                .map(ext -> ext.execute(params, context))\n+                .findFirst()\n+                .orElse(new ArrayList<>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b326a82c9406d17d3e6d75bef63e62e0d1c6e4f"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcxOTE4MQ==", "bodyText": "Instead of returning new ArrayList<>() for erroneous cases we can return an unmodifiable pre-declared empty list with Collections.emptyList(). This will limit ad-hoc new list objects creations. Check for other places in the PR that returns new arraylist as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26693#discussion_r515719181", "createdAt": "2020-11-02T03:04:01Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/BallerinaTextDocumentService.java", "diffHunk": "@@ -156,14 +155,13 @@ void setClientCapabilities(LSClientCapabilities clientCapabilities) {\n \n     @Override\n     public CompletableFuture<Either<List<CompletionItem>, CompletionList>> completion(CompletionParams position) {\n-        final List<CompletionItem> completions = new ArrayList<>();\n         return CompletableFuture.supplyAsync(() -> {\n             String fileUri = position.getTextDocument().getUri();\n             Optional<Path> completionPath = CommonUtil.getPathFromURI(fileUri);\n \n             // Note: If the source is a cached stdlib source or path does not exist, then return early and ignore\n             if (completionPath.isEmpty() || CommonUtil.isCachedExternalSource(fileUri)) {\n-                return Either.forLeft(completions);\n+                return Either.forLeft(new ArrayList<>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b326a82c9406d17d3e6d75bef63e62e0d1c6e4f"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6919e578942ccf8b4acbeba12e21d1fc8daa78f", "author": {"user": {"login": "nadeeshaan", "name": "Nadeeshaan Gunasinghe"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f6919e578942ccf8b4acbeba12e21d1fc8daa78f", "committedDate": "2020-11-02T05:19:36Z", "message": "add aggregated result support"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMzM5OTQ5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26693#pullrequestreview-521339949", "createdAt": "2020-11-02T05:31:13Z", "commit": {"oid": "f6919e578942ccf8b4acbeba12e21d1fc8daa78f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMzQzODkx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26693#pullrequestreview-521343891", "createdAt": "2020-11-02T05:45:46Z", "commit": {"oid": "f6919e578942ccf8b4acbeba12e21d1fc8daa78f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4329, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}