{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxMzg4NDY0", "number": 23821, "title": "Adding multiple resource support for gRPC client/bidi streaming", "bodyText": "Purpose\nCurrently, the gRPC client streaming and Bidi streaming only support a single resource per service. This enables adding multiple resources per service.\nApproach\nRather than providing onOpen, onMessage, onComplete and onError resources within the service, this replaces with a single resource. The client stream is provided as a stream<>. By iterating through the stream, the server can read the client stream. At stream completion an error named grpc:EOS is returned.\nSamples\nresource function clientStream(grpc:Caller caller, stream<MessageRequest, error> clientStream) {\nerror? e = grpcStream.forEach(function(MessageRequest value) {\n    \t//Carry out onMessage functions here\n    });\nif (e is grpc:EOS) {\n\t//Carry out onComplete functions here\n} else if (e is grpc:Error) {\n\t//Carry out onError functions here\n\t}\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-06-08T20:47:50Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821", "merged": true, "mergeCommit": {"oid": "87d2a0f243a6c3e34a3df517849c955a49ee5919"}, "closed": true, "closedAt": "2020-06-12T08:00:46Z", "author": {"login": "daksithj"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpR1GpAH2gAyNDMxMzg4NDY0OmZhY2YxYmJmMGE4YTZhMmMyN2Y2NzBkMmE3Mjk0YTI0YTM5MzEyNjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqc3C3AFqTQyOTQ5MDk1Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "facf1bbf0a8a6a2c27f670d2a7294a24a3931268", "author": {"user": {"login": "daksithj", "name": "Daksith Jayasinghe"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/facf1bbf0a8a6a2c27f670d2a7294a24a3931268", "committedDate": "2020-06-08T15:03:22Z", "message": "Changed the gRPC streaming handling on the server side"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1f191f9ac69353dd467633a4293a75a26d018ed", "author": {"user": {"login": "daksithj", "name": "Daksith Jayasinghe"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b1f191f9ac69353dd467633a4293a75a26d018ed", "committedDate": "2020-06-08T19:23:08Z", "message": "Updated the integration tests and removed the proto generation functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "804db38032d34c3dd8a5c013e73b64e951afac47", "author": {"user": {"login": "daksithj", "name": "Daksith Jayasinghe"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/804db38032d34c3dd8a5c013e73b64e951afac47", "committedDate": "2020-06-08T20:20:25Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into streaming-synch\n\n# Conflicts:\n#\tstdlib/grpc/src/main/java/org/ballerinalang/net/grpc/GrpcConstants.java\n#\tstdlib/grpc/src/main/java/org/ballerinalang/net/grpc/nativeimpl/serviceendpoint/FunctionUtils.java\n#\tstdlib/grpc/src/main/java/org/ballerinalang/net/grpc/proto/ServiceDefinitionValidator.java\n#\tstdlib/grpc/src/main/java/org/ballerinalang/net/grpc/proto/ServiceProtoUtils.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21190192c94afc48adfedfcf9c4fb159a6a6de9b", "author": {"user": {"login": "daksithj", "name": "Daksith Jayasinghe"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/21190192c94afc48adfedfcf9c4fb159a6a6de9b", "committedDate": "2020-06-09T04:17:19Z", "message": "Fixed the grpc:tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3Nzk3MTI1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#pullrequestreview-427797125", "createdAt": "2020-06-10T07:50:56Z", "commit": {"oid": "21190192c94afc48adfedfcf9c4fb159a6a6de9b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNzo1MDo1N1rOGhpC3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNzo1MDo1N1rOGhpC3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkyODY3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                typedesc<anydata> requestType?;\n          \n          \n            \n                typedesc<anydata> responseType?;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r437928670", "createdAt": "2020-06-10T07:50:57Z", "author": {"login": "daneshk"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/annotation.bal", "diffHunk": "@@ -21,16 +21,10 @@\n #                   type is derived from the input argument of the resource\n # + responseType - Response message type of the resource. This is an optional field. If it is not specified, the response\n #                   type is derived from the value passed to the send() expression\n-# + clientStreaming - Client streaming flag. This applies only for client streaming and\n-#                     bidirectional streaming. The flag should be set to true if the service is defined as client/bidirectional streaming\n-# + serverStreaming - Server streaming flag. This applies only for bidirectional streaming. The flag\n-#                     should be set to true if the service is defined as bidirectional streaming\n public type GrpcServiceConfig record {|\n     string name = \"\";\n     typedesc<anydata> requestType?;\n     typedesc<anydata> responseType?;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21190192c94afc48adfedfcf9c4fb159a6a6de9b"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3ODEwODYx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#pullrequestreview-427810861", "createdAt": "2020-06-10T08:07:49Z", "commit": {"oid": "21190192c94afc48adfedfcf9c4fb159a6a6de9b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODowNzo0OVrOGhppQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODowNzo0OVrOGhppQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkzODQ5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        error? result = closeStream(self);\n          \n          \n            \n                        if (result is error) {\n          \n          \n            \n                            return result;\n          \n          \n            \n                        } else {\n          \n          \n            \n                            return prepareError (EOS_REASON, \"Stream closed from server side\", result);\n          \n          \n            \n                        }\n          \n          \n            \n                        return closeStream(self);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r437938496", "createdAt": "2020-06-10T08:07:49Z", "author": {"login": "daneshk"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/service_endpoint.bal", "diffHunk": "@@ -94,6 +94,46 @@ public type Listener object {\n     }\n };\n \n+# The stream iterator object that is used to iterate through the stream messages.\n+#\n+type StreamIterator object {\n+    private boolean isClosed = false;\n+\n+    public function next() returns record {|anydata value;|}|error? {\n+        if (self.isClosed) {\n+            return StreamEndError (message = \"Stream is closed. Therefore, \"\n+                           + \"no operations are allowed further on the stream.\");\n+        }\n+        anydata|handle |error? result = nextResult(self);\n+        if (result is anydata) {\n+            if (result is ()) {\n+                self.isClosed = true;\n+                return prepareError (EOS_REASON, \"End of stream reached\", result);\n+            }\n+            return {value: result};\n+        } else if (result is handle) {\n+            return {value: java:toString(result)};\n+        } else {\n+            return result;\n+        }\n+    }\n+\n+    public function close() returns error? {\n+        if (!self.isClosed) {\n+            self.isClosed = true;\n+            error? result = closeStream(self);\n+            if (result is error) {\n+                return result;\n+            } else {\n+                return prepareError (EOS_REASON, \"Stream closed from server side\", result);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21190192c94afc48adfedfcf9c4fb159a6a6de9b"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3ODE3OTc5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#pullrequestreview-427817979", "createdAt": "2020-06-10T08:16:37Z", "commit": {"oid": "21190192c94afc48adfedfcf9c4fb159a6a6de9b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODoxNjozN1rOGhp-hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODoxNjozN1rOGhp-hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk0Mzk0MQ==", "bodyText": "Shall we use log API instead of io to print the message?\nOn the server-side, we use log API to log the message.\nOn the client-side, we use io API to print the message.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r437943941", "createdAt": "2020-06-10T08:16:37Z", "author": {"login": "daneshk"}, "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/grpcservices/04_client_streaming_service.bal", "diffHunk": "@@ -20,32 +20,28 @@ import ballerina/io;\n // Server endpoint configuration\n listener grpc:Listener ep4 = new (9094);\n \n-@grpc:ServiceConfig {name:\"HelloWorld7\",\n-    clientStreaming:true}\n+@grpc:ServiceConfig {name:\"HelloWorld7\"}\n @grpc:ServiceDescriptor {\n     descriptor: ROOT_DESCRIPTOR_4,\n     descMap: getDescriptorMap4()\n }\n service HelloWorld7 on ep4 {\n-    resource function onOpen(grpc:Caller caller) {\n-        io:println(\"connected sucessfully.\");\n-    }\n-\n-    resource function onMessage(grpc:Caller caller, string name) {\n-        io:println(\"greet received: \" + name);\n-    }\n \n-    resource function onError(grpc:Caller caller, error err) {\n-        io:println(\"Something unexpected happens at server : \" + err.reason());\n-    }\n-\n-    resource function onComplete(grpc:Caller caller) {\n-        io:println(\"Server Response\");\n-        grpc:Error? err = caller->send(\"Ack\");\n-        if (err is grpc:Error) {\n-            io:println(\"Error from Connector: \" + err.reason());\n-        } else {\n-            io:println(\"Server send response : Ack\");\n+    resource function lotsOfGreetings(grpc:Caller caller, stream<string, error>clientStream) {\n+        io:println(\"connected sucessfully.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21190192c94afc48adfedfcf9c4fb159a6a6de9b"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3ODMzMTU1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#pullrequestreview-427833155", "createdAt": "2020-06-10T08:35:12Z", "commit": {"oid": "21190192c94afc48adfedfcf9c4fb159a6a6de9b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODozNToxMlrOGhqr_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODozNToxMlrOGhqr_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1NTU4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String RESOURCE_CONFIG_STREAMING = \"streaming\";\n          \n          \n            \n                public static final String RESOURCE_CONFIG_REQUEST_TYPE = \"requestType\";\n          \n          \n            \n                public static final String RESOURCE_CONFIG_RESPONSE_TYPE = \"responseType\";", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r437955582", "createdAt": "2020-06-10T08:35:12Z", "author": {"login": "daneshk"}, "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/proto/ServiceProtoConstants.java", "diffHunk": "@@ -52,10 +52,6 @@\n     public static final String ANN_SERVICE_CONFIG_FQN = PROTOCOL_STRUCT_PACKAGE_GRPC + \":ServiceConfig\";\n     public static final String ANN_RESOURCE_CONFIG = \"ResourceConfig\";\n \n-    public static final String SERVICE_CONFIG_RPC_ENDPOINT = \"name\";\n-    public static final String SERVICE_CONFIG_CLIENT_STREAMING = \"clientStreaming\";\n-    public static final String SERVICE_CONFIG_SERVER_STREAMING = \"serverStreaming\";\n-\n     public static final String RESOURCE_CONFIG_STREAMING = \"streaming\";\n     public static final String RESOURCE_CONFIG_REQUEST_TYPE = \"requestType\";\n     public static final String RESOURCE_CONFIG_RESPONSE_TYPE = \"responseType\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21190192c94afc48adfedfcf9c4fb159a6a6de9b"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3ODQzMzQ0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#pullrequestreview-427843344", "createdAt": "2020-06-10T08:47:51Z", "commit": {"oid": "21190192c94afc48adfedfcf9c4fb159a6a6de9b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODo0Nzo1MVrOGhrKeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODo0Nzo1MVrOGhrKeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk2MzM4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.requestType = requestType;\n          \n          \n            \n                    this.responseType = responseType;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r437963384", "createdAt": "2020-06-10T08:47:51Z", "author": {"login": "daneshk"}, "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/config/ServiceConfiguration.java", "diffHunk": "@@ -29,29 +29,16 @@\n     private String rpcEndpoint;\n     private BType requestType;\n     private BType responseType;\n-    private boolean clientStreaming;\n-    private boolean serverStreaming;\n \n-    public ServiceConfiguration(String rpcEndpoint, BType requestType, BType responseType, boolean clientStreaming,\n-                                boolean serverStreaming) {\n+    public ServiceConfiguration(String rpcEndpoint, BType requestType, BType responseType) {\n         this.rpcEndpoint = rpcEndpoint;\n         this.requestType = requestType;\n         this.responseType = responseType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21190192c94afc48adfedfcf9c4fb159a6a6de9b"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d784ea1573a395e131e97b06e407f991a88c8db", "author": {"user": {"login": "daksithj", "name": "Daksith Jayasinghe"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8d784ea1573a395e131e97b06e407f991a88c8db", "committedDate": "2020-06-10T10:39:18Z", "message": "Made the changes suggested in the review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3341b67ac22ccd6ec66df2c7004f8b83bed95b7a", "author": {"user": {"login": "daksithj", "name": "Daksith Jayasinghe"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3341b67ac22ccd6ec66df2c7004f8b83bed95b7a", "committedDate": "2020-06-10T12:57:53Z", "message": "Fixed some related lang-server tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MjM0ODkx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#pullrequestreview-428234891", "createdAt": "2020-06-10T16:33:08Z", "commit": {"oid": "3341b67ac22ccd6ec66df2c7004f8b83bed95b7a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNjozMzowOFrOGh9OUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNjozMzowOFrOGh9OUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI1OTI4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return prepareError (EOS_REASON, \"End of stream reached\", result);\n          \n          \n            \n                            return prepareError(EOS_REASON, \"End of stream reached\", result);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r438259280", "createdAt": "2020-06-10T16:33:08Z", "author": {"login": "daneshk"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/service_endpoint.bal", "diffHunk": "@@ -94,6 +94,41 @@ public type Listener object {\n     }\n };\n \n+# The stream iterator object that is used to iterate through the stream messages.\n+#\n+type StreamIterator object {\n+    private boolean isClosed = false;\n+\n+    public function next() returns record {|anydata value;|}|error? {\n+        if (self.isClosed) {\n+            return StreamEndError (message = \"Stream is closed. Therefore, \"\n+                           + \"no operations are allowed further on the stream.\");\n+        }\n+        anydata|handle |error? result = nextResult(self);\n+        if (result is anydata) {\n+            if (result is ()) {\n+                self.isClosed = true;\n+                return prepareError (EOS_REASON, \"End of stream reached\", result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3341b67ac22ccd6ec66df2c7004f8b83bed95b7a"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MjM1MTAx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#pullrequestreview-428235101", "createdAt": "2020-06-10T16:33:25Z", "commit": {"oid": "3341b67ac22ccd6ec66df2c7004f8b83bed95b7a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNjozMzoyNVrOGh9PCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNjozMzoyNVrOGh9PCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI1OTQ2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return StreamEndError (message = \"Stream is closed. Therefore, \"\n          \n          \n            \n                        return StreamEndError(message = \"Stream is closed. Therefore, \"", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r438259466", "createdAt": "2020-06-10T16:33:25Z", "author": {"login": "daneshk"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/service_endpoint.bal", "diffHunk": "@@ -94,6 +94,41 @@ public type Listener object {\n     }\n };\n \n+# The stream iterator object that is used to iterate through the stream messages.\n+#\n+type StreamIterator object {\n+    private boolean isClosed = false;\n+\n+    public function next() returns record {|anydata value;|}|error? {\n+        if (self.isClosed) {\n+            return StreamEndError (message = \"Stream is closed. Therefore, \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3341b67ac22ccd6ec66df2c7004f8b83bed95b7a"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e0be416a23f70f815a4b71d4c3aa9d1058519ed", "author": {"user": {"login": "daksithj", "name": "Daksith Jayasinghe"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3e0be416a23f70f815a4b71d4c3aa9d1058519ed", "committedDate": "2020-06-10T16:56:19Z", "message": "Update stdlib/grpc/src/main/ballerina/src/grpc/service_endpoint.bal\n\nCo-authored-by: Danesh Kuruppu <daneshk@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "123803e423fd3006f864392e06d90af3e794d33d", "author": {"user": {"login": "daksithj", "name": "Daksith Jayasinghe"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/123803e423fd3006f864392e06d90af3e794d33d", "committedDate": "2020-06-10T16:56:30Z", "message": "Update stdlib/grpc/src/main/ballerina/src/grpc/service_endpoint.bal\n\nCo-authored-by: Danesh Kuruppu <daneshk@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NzcyMjgw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#pullrequestreview-428772280", "createdAt": "2020-06-11T10:08:46Z", "commit": {"oid": "123803e423fd3006f864392e06d90af3e794d33d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDowODo0NlrOGiW9Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDowODo0NlrOGiW9Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY4MDg1MA==", "bodyText": "Shall we rename it as StreamClosedError", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r438680850", "createdAt": "2020-06-11T10:08:46Z", "author": {"login": "daneshk"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/grpc_errors.bal", "diffHunk": "@@ -113,17 +113,27 @@ public type ResiliencyErrorType ALL_RETRY_ATTEMPTS_FAILED;\n # Represents all the resiliency-related errors.\n public type ResiliencyError AllRetryAttemptsFailed;\n \n+# Represents the reason of calling next after the stream has closed.\n+public const STREAM_END_REASON = \"{ballerina/grpc}StreamEndError\";\n+# Represents an error when calling next when the stream has closed.\n+public type StreamEndError error<STREAM_END_REASON, Detail>;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "123803e423fd3006f864392e06d90af3e794d33d"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NzcyNTgw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#pullrequestreview-428772580", "createdAt": "2020-06-11T10:09:14Z", "commit": {"oid": "123803e423fd3006f864392e06d90af3e794d33d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDowOToxNFrOGiW9-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDowOToxNFrOGiW9-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY4MTA4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    anydata|handle |error? result = nextResult(self);\n          \n          \n            \n                    anydata|handle|error? result = nextResult(self);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r438681081", "createdAt": "2020-06-11T10:09:14Z", "author": {"login": "daneshk"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/service_endpoint.bal", "diffHunk": "@@ -94,6 +94,41 @@ public type Listener object {\n     }\n };\n \n+# The stream iterator object that is used to iterate through the stream messages.\n+#\n+type StreamIterator object {\n+    private boolean isClosed = false;\n+\n+    public function next() returns record {|anydata value;|}|error? {\n+        if (self.isClosed) {\n+            return StreamEndError(message = \"Stream is closed. Therefore, \"\n+                           + \"no operations are allowed further on the stream.\");\n+        }\n+        anydata|handle |error? result = nextResult(self);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "123803e423fd3006f864392e06d90af3e794d33d"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NzcyNzg1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#pullrequestreview-428772785", "createdAt": "2020-06-11T10:09:30Z", "commit": {"oid": "123803e423fd3006f864392e06d90af3e794d33d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDowOTozMFrOGiW-kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDowOTozMFrOGiW-kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY4MTIzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return StreamEndError (message = \"Stream is closed. Therefore, \"\n          \n          \n            \n                        return StreamEndError(message = \"Stream is closed. Therefore, \"", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r438681232", "createdAt": "2020-06-11T10:09:30Z", "author": {"login": "daneshk"}, "path": "stdlib/grpc/src/main/ballerina/src/grpc/service_endpoint.bal", "diffHunk": "@@ -94,6 +94,41 @@ public type Listener object {\n     }\n };\n \n+# The stream iterator object that is used to iterate through the stream messages.\n+#\n+type StreamIterator object {\n+    private boolean isClosed = false;\n+\n+    public function next() returns record {|anydata value;|}|error? {\n+        if (self.isClosed) {\n+            return StreamEndError(message = \"Stream is closed. Therefore, \"\n+                           + \"no operations are allowed further on the stream.\");\n+        }\n+        anydata|handle |error? result = nextResult(self);\n+        if (result is anydata) {\n+            if (result is ()) {\n+                self.isClosed = true;\n+                return prepareError(EOS_REASON, \"End of stream reached\", result);\n+            }\n+            return {value: result};\n+        } else if (result is handle) {\n+            return {value: java:toString(result)};\n+        } else {\n+            return result;\n+        }\n+    }\n+\n+    public function close() returns error? {\n+        if (!self.isClosed) {\n+            self.isClosed = true;\n+            return closeStream(self);\n+        } else {\n+            return StreamEndError (message = \"Stream is closed. Therefore, \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "123803e423fd3006f864392e06d90af3e794d33d"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4Nzc3OTEy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#pullrequestreview-428777912", "createdAt": "2020-06-11T10:17:03Z", "commit": {"oid": "123803e423fd3006f864392e06d90af3e794d33d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDoxNzowM1rOGiXNZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDoxNzowM1rOGiXNZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY4NTAyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        } else if (inputType != null && \"stream\".equals(inputType.getName())) {\n          \n          \n            \n                        } else if (inputType instanceof BStreamType) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r438685029", "createdAt": "2020-06-11T10:17:03Z", "author": {"login": "daneshk"}, "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/ServicesBuilderUtils.java", "diffHunk": "@@ -286,6 +280,8 @@ private static BType getResourceInputParameterType(AttachedFunction attachedFunc\n             if (inputType != null && \"Headers\".equals(inputType.getName()) &&\n                     inputType.getPackage() != null && PROTOCOL_PACKAGE_GRPC.equals(inputType.getPackage().getName())) {\n                 return BTypes.typeNull;\n+            } else if (inputType != null && \"stream\".equals(inputType.getName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "123803e423fd3006f864392e06d90af3e794d33d"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4Nzc4ODkx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#pullrequestreview-428778891", "createdAt": "2020-06-11T10:18:32Z", "commit": {"oid": "123803e423fd3006f864392e06d90af3e794d33d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDoxODozMlrOGiXQkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDoxODozMlrOGiXQkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY4NTg0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public ServiceConfiguration(String rpcEndpoint, BType requestType, BType responseType) {\n          \n          \n            \n                public ServiceConfiguration(String rpcEndpoint) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r438685843", "createdAt": "2020-06-11T10:18:32Z", "author": {"login": "daneshk"}, "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/config/ServiceConfiguration.java", "diffHunk": "@@ -27,37 +27,12 @@\n public class ServiceConfiguration {\n \n     private String rpcEndpoint;\n-    private BType requestType;\n-    private BType responseType;\n-    private boolean clientStreaming;\n-    private boolean serverStreaming;\n \n-    public ServiceConfiguration(String rpcEndpoint, BType requestType, BType responseType, boolean clientStreaming,\n-                                boolean serverStreaming) {\n+    public ServiceConfiguration(String rpcEndpoint, BType requestType, BType responseType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "123803e423fd3006f864392e06d90af3e794d33d"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4ODQ2OTQx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#pullrequestreview-428846941", "createdAt": "2020-06-11T12:10:39Z", "commit": {"oid": "123803e423fd3006f864392e06d90af3e794d33d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjoxMDo0MFrOGiaYkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMjoxMDo0MFrOGiaYkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNzA0Mw==", "bodyText": "If we can implement it using Java Queue, we can eliminate semaphore usage, right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r438737043", "createdAt": "2020-06-11T12:10:40Z", "author": {"login": "daneshk"}, "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/listener/StreamingServerCallHandler.java", "diffHunk": "@@ -43,57 +58,87 @@\n  */\n public class StreamingServerCallHandler extends ServerCallHandler {\n \n-    private final Map<String, ServiceResource> resourceMap;\n+    private final ServiceResource resource;\n+    private final BType inputType;\n \n-    public StreamingServerCallHandler(Descriptors.MethodDescriptor methodDescriptor, Map<String, ServiceResource>\n-            resourceMap) throws GrpcServerException {\n+    public StreamingServerCallHandler(Descriptors.MethodDescriptor methodDescriptor, ServiceResource resource,\n+                                      BType inputType) throws GrpcServerException {\n         super(methodDescriptor);\n-        validateStreamingResources(resourceMap);\n-        this.resourceMap = resourceMap;\n+        if (resource == null) {\n+            throw new GrpcServerException(\"Streaming service resource doesn't exist.\");\n+        }\n+        this.resource = resource;\n+        this.inputType = inputType;\n     }\n \n     @Override\n     public Listener startCall(ServerCall call) {\n         ServerCallStreamObserver responseObserver = new ServerCallStreamObserver(call);\n-        StreamObserver requestObserver = invoke(responseObserver, call.getObserverContext());\n-        return new StreamingServerCallListener(requestObserver, responseObserver);\n+        StreamObserver requestObserver = invoke(responseObserver, call);\n+        return new StreamingServerCallHandler.StreamingServerCallListener(requestObserver, responseObserver);\n     }\n \n-    private StreamObserver invoke(StreamObserver responseObserver, ObserverContext context) {\n-        ServiceResource onOpen = resourceMap.get(GrpcConstants.ON_OPEN_RESOURCE);\n-        StreamingCallableUnitCallBack callback = new StreamingCallableUnitCallBack(responseObserver, context);\n-        Map<String, Object> properties = new HashMap<>();\n-        if (ObserveUtils.isObservabilityEnabled()) {\n-            properties.put(ObservabilityConstants.KEY_OBSERVER_CONTEXT, context);\n+    private StreamObserver invoke(StreamObserver responseObserver, ServerCall call) {\n+        ObserverContext context = call.getObserverContext();\n+        ObjectValue streamIterator = BallerinaValues.createObjectValue(GrpcConstants.PROTOCOL_GRPC_PKG_ID,\n+                ITERATOR_OBJECT_NAME, new Object[1]);\n+        Semaphore listenerSemaphore = new Semaphore(1, true);\n+        Semaphore iteratorSemaphore = new Semaphore(0, true);\n+        streamIterator.addNativeData(LISTENER_LOCK, listenerSemaphore);\n+        streamIterator.addNativeData(ITERATOR_LOCK, iteratorSemaphore);\n+        streamIterator.addNativeData(CLIENT_ENDPOINT_TYPE, getConnectionParameter(responseObserver));\n+        StreamValue requestStream = new StreamValue(new BStreamType(inputType), streamIterator);\n+        onStreamInvoke(resource, requestStream, call.getHeaders(), responseObserver, context);\n+        return new StreamingServerRequestObserver(streamIterator, iteratorSemaphore, listenerSemaphore);\n+    }\n+\n+    private static final class StreamingServerRequestObserver implements StreamObserver {\n+        \n+        private final ObjectValue streamIterator;\n+        private final Semaphore iteratorSemaphore;\n+        private final Semaphore listenerSemaphore;\n+\n+        StreamingServerRequestObserver(ObjectValue streamIterator, Semaphore iteratorSemaphore,\n+                                       Semaphore listenerSemaphore) {\n+            this.streamIterator = streamIterator;\n+            this.iteratorSemaphore = iteratorSemaphore;\n+            this.listenerSemaphore = listenerSemaphore;\n         }\n-        onOpen.getRuntime().invokeMethodAsync(onOpen.getService(), onOpen.getFunctionName(), callback, properties,\n-                computeMessageParams(onOpen, null, responseObserver));\n-        callback.available.acquireUninterruptibly();\n-\n-        return new StreamObserver() {\n-            @Override\n-            public void onNext(Message value) {\n-                ServiceResource onMessage = resourceMap.get(GrpcConstants.ON_MESSAGE_RESOURCE);\n-\n-                CallableUnitCallback callback = new StreamingCallableUnitCallBack(responseObserver, context);\n-                onMessage.getRuntime().invokeMethodAsync(onMessage.getService(), onMessage.getFunctionName(),\n-                        callback, properties, computeMessageParams(onMessage, value, responseObserver));\n-            }\n \n-            @Override\n-            public void onError(Message error) {\n-                ServiceResource onError = resourceMap.get(GrpcConstants.ON_ERROR_RESOURCE);\n-                onErrorInvoke(onError, responseObserver, error, context);\n+        @Override\n+        public void onNext(Message value) {\n+            try {\n+                listenerSemaphore.acquire();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "123803e423fd3006f864392e06d90af3e794d33d"}, "originalPosition": 124}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c64dfc401fbedca5ebd68d340a32a77683790bf0", "author": {"user": {"login": "daksithj", "name": "Daksith Jayasinghe"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c64dfc401fbedca5ebd68d340a32a77683790bf0", "committedDate": "2020-06-11T22:17:12Z", "message": "Made changes according to review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eee6030b17314a10aa01615d48f2b903f931861a", "author": {"user": {"login": "daksithj", "name": "Daksith Jayasinghe"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eee6030b17314a10aa01615d48f2b903f931861a", "committedDate": "2020-06-11T22:18:27Z", "message": "Made changes according to review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9c28b4d99ba676098e42220aba5e585e211c28e", "author": {"user": {"login": "daksithj", "name": "Daksith Jayasinghe"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e9c28b4d99ba676098e42220aba5e585e211c28e", "committedDate": "2020-06-11T22:24:41Z", "message": "Reviewd according to suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "340c1815ba51bee96a4c6815c1a6cadad03b238a", "author": {"user": {"login": "daksithj", "name": "Daksith Jayasinghe"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/340c1815ba51bee96a4c6815c1a6cadad03b238a", "committedDate": "2020-06-12T06:26:34Z", "message": "Renaming stream closed error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NDkwOTU3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#pullrequestreview-429490957", "createdAt": "2020-06-12T06:28:23Z", "commit": {"oid": "340c1815ba51bee96a4c6815c1a6cadad03b238a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4430, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}