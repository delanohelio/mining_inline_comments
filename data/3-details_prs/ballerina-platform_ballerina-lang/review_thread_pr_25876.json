{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4NTU0MDQ5", "number": 25876, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMTo0MzoxOVrOEkfrzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMTo0NDoyMVrOEkftIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzAzMzEwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/diagnostic/BallerinaDiagnostic.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMTo0MzoxOVrOHTeEdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMTo0MzoxOVrOHTeEdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE3NzY1NA==", "bodyText": "Let's rename all the BallerinaDiagnostic** classes to BLangDiagnostic**, to be consistent with the other naming patterns.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25876#discussion_r490177654", "createdAt": "2020-09-17T11:43:19Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/diagnostic/BallerinaDiagnostic.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.diagnostic;\n+\n+import io.ballerina.tools.diagnostics.Diagnostic;\n+import io.ballerina.tools.diagnostics.DiagnosticInfo;\n+import io.ballerina.tools.diagnostics.Location;\n+\n+/**\n+ * Represent a diagnostic in the ballerina compiler front-end. A diagnostic can be a semantic\n+ * error, a warning or a info.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BallerinaDiagnostic extends Diagnostic {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b96fbddd36be342f29b35235bb89bfa0ab5809"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzAzNjUxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/diagnostic/BallerinaDiagnosticLog.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMTo0NDoyMVrOHTeGbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjoyMDowNVrOHTq3xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE3ODE1OA==", "bodyText": "Shall we create an issue to track this", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25876#discussion_r490178158", "createdAt": "2020-09-17T11:44:21Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/diagnostic/BallerinaDiagnosticLog.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.diagnostic;\n+\n+import io.ballerina.tools.diagnostics.Diagnostic;\n+import io.ballerina.tools.diagnostics.DiagnosticInfo;\n+import io.ballerina.tools.diagnostics.DiagnosticSeverity;\n+import org.ballerinalang.model.elements.PackageID;\n+import org.ballerinalang.util.diagnostic.Diagnostic.DiagnosticPosition;\n+import org.ballerinalang.util.diagnostic.Diagnostic.Kind;\n+import org.ballerinalang.util.diagnostic.DiagnosticCode;\n+import org.ballerinalang.util.diagnostic.DiagnosticLog;\n+import org.wso2.ballerinalang.compiler.PackageCache;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n+\n+import java.text.MessageFormat;\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+\n+/**\n+ * Logger class for logging various compiler diagnostics.\n+ * \n+ * @since 2.0.0\n+ */\n+public class BallerinaDiagnosticLog implements DiagnosticLog {\n+\n+    private static final CompilerContext.Key<BallerinaDiagnosticLog> DIAGNOSTIC_LOG_KEY = new CompilerContext.Key<>();\n+    private static final String ERROR_PREFIX = \"error\";\n+    private static final String WARNING_PREFIX = \"warning\";\n+    private static final String NOTE_PREFIX = \"note\";\n+    private static final ResourceBundle MESSAGES = ResourceBundle.getBundle(\"compiler\", Locale.getDefault());\n+\n+    private int errorCount = 0;\n+    private PackageCache packageCache;\n+    private boolean isMute = false;\n+\n+    private BallerinaDiagnosticLog(CompilerContext context) {\n+        context.put(DIAGNOSTIC_LOG_KEY, this);\n+        this.packageCache = PackageCache.getInstance(context);\n+    }\n+\n+    public static BallerinaDiagnosticLog getInstance(CompilerContext context) {\n+        BallerinaDiagnosticLog dLogger = context.get(DIAGNOSTIC_LOG_KEY);\n+        if (dLogger == null) {\n+            dLogger = new BallerinaDiagnosticLog(context);\n+        }\n+\n+        return dLogger;\n+    }\n+\n+    /**\n+     * Log an error.\n+     * \n+     * @param pos Position of the error in the source code.\n+     * @param code Error code\n+     * @param args Parameters associated with the error\n+     */\n+    public void error(DiagnosticPos pos, DiagnosticCode code, Object... args) {\n+        String msg = formatMessage(ERROR_PREFIX, code, args);\n+        reportDiagnostic(pos, msg, DiagnosticSeverity.ERROR);\n+    }\n+\n+    /**\n+     * Log a warning.\n+     * \n+     * @param pos Position of the warning in the source code.\n+     * @param code Error code\n+     * @param args Parameters associated with the error\n+     */\n+    public void warning(DiagnosticPos pos, DiagnosticCode code, Object... args) {\n+        String msg = formatMessage(WARNING_PREFIX, code, args);\n+        reportDiagnostic(pos, msg, DiagnosticSeverity.WARNING);\n+    }\n+\n+    /**\n+     * Log an info.\n+     * \n+     * @param pos Position of the info in the source code.\n+     * @param code Error code\n+     * @param args Parameters associated with the info\n+     */\n+    public void note(DiagnosticPos pos, DiagnosticCode code, Object... args) {\n+        String msg = formatMessage(NOTE_PREFIX, code, args);\n+        reportDiagnostic(pos, msg, DiagnosticSeverity.INFO);\n+    }\n+\n+    /**\n+     * Get the number of error logged in this logger.\n+     *\n+     * @return Number of errors logged.\n+     */\n+    public int errorCount() {\n+        return this.errorCount;\n+    }\n+\n+    /**\n+     * Set the error count.\n+     * \n+     * @param errorCount Error count\n+     */\n+    public void setErrorCount(int errorCount) {\n+        this.errorCount = errorCount;\n+    }\n+\n+    /**\n+     * Reset error count.\n+     */\n+    public void resetErrorCount() {\n+        this.errorCount = 0;\n+    }\n+\n+    /**\n+     * Mute the logger. This will stop reporting the diagnostic.\n+     * However it will continue to keep track of the number of errors.\n+     */\n+    public void mute() {\n+        this.isMute = true;\n+    }\n+\n+    /**\n+     * Unmute the logger. This will start reporting the diagnostic.\n+     */\n+    public void unmute() {\n+        this.isMute = false;\n+    }\n+\n+    @Override\n+    public void logDiagnostic(Kind kind, DiagnosticPosition pos, CharSequence message) {\n+        DiagnosticSeverity severity;\n+        switch (kind) {\n+            case ERROR:\n+                severity = DiagnosticSeverity.ERROR;\n+                break;\n+            case WARNING:\n+                severity = DiagnosticSeverity.WARNING;\n+                break;\n+            case NOTE:\n+            default:\n+                severity = DiagnosticSeverity.INFO;\n+                break;\n+        }\n+\n+        reportDiagnostic((DiagnosticPos) pos, message.toString(), severity);\n+    }\n+\n+    /**\n+     * Report a diagnostic for a given package.\n+     * \n+     * @param pkgId Package ID of the diagnostic associated with\n+     * @param diagnostic\n+     */\n+    public void logDiagnostic(PackageID pkgId, Diagnostic diagnostic) {\n+        if (diagnostic.diagnosticInfo().severity() == DiagnosticSeverity.ERROR) {\n+            this.errorCount++;\n+        }\n+\n+        storeDiagnosticInPackage(pkgId, diagnostic);\n+    }\n+\n+    // private helper methods\n+\n+    private String formatMessage(String prefix, DiagnosticCode code, Object[] args) {\n+        String msgKey = MESSAGES.getString(prefix + \".\" + code.getValue());\n+        return MessageFormat.format(msgKey, args);\n+    }\n+\n+    private void reportDiagnostic(DiagnosticPos pos, String msg, DiagnosticSeverity severity) {\n+        if (severity == DiagnosticSeverity.ERROR) {\n+            this.errorCount++;\n+        }\n+\n+        if (this.isMute) {\n+            return;\n+        }\n+\n+        // TODO: Add 'code' and 'messageTemplate' to the DiagnosticInfo", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5b96fbddd36be342f29b35235bb89bfa0ab5809"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM4NzM5Ng==", "bodyText": "Created #25901", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25876#discussion_r490387396", "createdAt": "2020-09-17T16:20:05Z", "author": {"login": "dulajdilshan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/diagnostic/BallerinaDiagnosticLog.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.wso2.ballerinalang.compiler.diagnostic;\n+\n+import io.ballerina.tools.diagnostics.Diagnostic;\n+import io.ballerina.tools.diagnostics.DiagnosticInfo;\n+import io.ballerina.tools.diagnostics.DiagnosticSeverity;\n+import org.ballerinalang.model.elements.PackageID;\n+import org.ballerinalang.util.diagnostic.Diagnostic.DiagnosticPosition;\n+import org.ballerinalang.util.diagnostic.Diagnostic.Kind;\n+import org.ballerinalang.util.diagnostic.DiagnosticCode;\n+import org.ballerinalang.util.diagnostic.DiagnosticLog;\n+import org.wso2.ballerinalang.compiler.PackageCache;\n+import org.wso2.ballerinalang.compiler.tree.BLangPackage;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.compiler.util.diagnotic.DiagnosticPos;\n+\n+import java.text.MessageFormat;\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+\n+/**\n+ * Logger class for logging various compiler diagnostics.\n+ * \n+ * @since 2.0.0\n+ */\n+public class BallerinaDiagnosticLog implements DiagnosticLog {\n+\n+    private static final CompilerContext.Key<BallerinaDiagnosticLog> DIAGNOSTIC_LOG_KEY = new CompilerContext.Key<>();\n+    private static final String ERROR_PREFIX = \"error\";\n+    private static final String WARNING_PREFIX = \"warning\";\n+    private static final String NOTE_PREFIX = \"note\";\n+    private static final ResourceBundle MESSAGES = ResourceBundle.getBundle(\"compiler\", Locale.getDefault());\n+\n+    private int errorCount = 0;\n+    private PackageCache packageCache;\n+    private boolean isMute = false;\n+\n+    private BallerinaDiagnosticLog(CompilerContext context) {\n+        context.put(DIAGNOSTIC_LOG_KEY, this);\n+        this.packageCache = PackageCache.getInstance(context);\n+    }\n+\n+    public static BallerinaDiagnosticLog getInstance(CompilerContext context) {\n+        BallerinaDiagnosticLog dLogger = context.get(DIAGNOSTIC_LOG_KEY);\n+        if (dLogger == null) {\n+            dLogger = new BallerinaDiagnosticLog(context);\n+        }\n+\n+        return dLogger;\n+    }\n+\n+    /**\n+     * Log an error.\n+     * \n+     * @param pos Position of the error in the source code.\n+     * @param code Error code\n+     * @param args Parameters associated with the error\n+     */\n+    public void error(DiagnosticPos pos, DiagnosticCode code, Object... args) {\n+        String msg = formatMessage(ERROR_PREFIX, code, args);\n+        reportDiagnostic(pos, msg, DiagnosticSeverity.ERROR);\n+    }\n+\n+    /**\n+     * Log a warning.\n+     * \n+     * @param pos Position of the warning in the source code.\n+     * @param code Error code\n+     * @param args Parameters associated with the error\n+     */\n+    public void warning(DiagnosticPos pos, DiagnosticCode code, Object... args) {\n+        String msg = formatMessage(WARNING_PREFIX, code, args);\n+        reportDiagnostic(pos, msg, DiagnosticSeverity.WARNING);\n+    }\n+\n+    /**\n+     * Log an info.\n+     * \n+     * @param pos Position of the info in the source code.\n+     * @param code Error code\n+     * @param args Parameters associated with the info\n+     */\n+    public void note(DiagnosticPos pos, DiagnosticCode code, Object... args) {\n+        String msg = formatMessage(NOTE_PREFIX, code, args);\n+        reportDiagnostic(pos, msg, DiagnosticSeverity.INFO);\n+    }\n+\n+    /**\n+     * Get the number of error logged in this logger.\n+     *\n+     * @return Number of errors logged.\n+     */\n+    public int errorCount() {\n+        return this.errorCount;\n+    }\n+\n+    /**\n+     * Set the error count.\n+     * \n+     * @param errorCount Error count\n+     */\n+    public void setErrorCount(int errorCount) {\n+        this.errorCount = errorCount;\n+    }\n+\n+    /**\n+     * Reset error count.\n+     */\n+    public void resetErrorCount() {\n+        this.errorCount = 0;\n+    }\n+\n+    /**\n+     * Mute the logger. This will stop reporting the diagnostic.\n+     * However it will continue to keep track of the number of errors.\n+     */\n+    public void mute() {\n+        this.isMute = true;\n+    }\n+\n+    /**\n+     * Unmute the logger. This will start reporting the diagnostic.\n+     */\n+    public void unmute() {\n+        this.isMute = false;\n+    }\n+\n+    @Override\n+    public void logDiagnostic(Kind kind, DiagnosticPosition pos, CharSequence message) {\n+        DiagnosticSeverity severity;\n+        switch (kind) {\n+            case ERROR:\n+                severity = DiagnosticSeverity.ERROR;\n+                break;\n+            case WARNING:\n+                severity = DiagnosticSeverity.WARNING;\n+                break;\n+            case NOTE:\n+            default:\n+                severity = DiagnosticSeverity.INFO;\n+                break;\n+        }\n+\n+        reportDiagnostic((DiagnosticPos) pos, message.toString(), severity);\n+    }\n+\n+    /**\n+     * Report a diagnostic for a given package.\n+     * \n+     * @param pkgId Package ID of the diagnostic associated with\n+     * @param diagnostic\n+     */\n+    public void logDiagnostic(PackageID pkgId, Diagnostic diagnostic) {\n+        if (diagnostic.diagnosticInfo().severity() == DiagnosticSeverity.ERROR) {\n+            this.errorCount++;\n+        }\n+\n+        storeDiagnosticInPackage(pkgId, diagnostic);\n+    }\n+\n+    // private helper methods\n+\n+    private String formatMessage(String prefix, DiagnosticCode code, Object[] args) {\n+        String msgKey = MESSAGES.getString(prefix + \".\" + code.getValue());\n+        return MessageFormat.format(msgKey, args);\n+    }\n+\n+    private void reportDiagnostic(DiagnosticPos pos, String msg, DiagnosticSeverity severity) {\n+        if (severity == DiagnosticSeverity.ERROR) {\n+            this.errorCount++;\n+        }\n+\n+        if (this.isMute) {\n+            return;\n+        }\n+\n+        // TODO: Add 'code' and 'messageTemplate' to the DiagnosticInfo", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE3ODE1OA=="}, "originalCommit": {"oid": "b5b96fbddd36be342f29b35235bb89bfa0ab5809"}, "originalPosition": 193}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4957, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}