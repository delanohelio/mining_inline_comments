{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2Mjc0MjM0", "number": 22346, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzo0NzoxM1rODvkcOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzozNjo0MFrODwGH4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjA2NzE1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzo0NzoxM1rOGCEX5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTowODo1NVrOGCWN_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgyMTk4OA==", "bodyText": "I don't think this else branch will ever get hit when all members of the union are arrays. The same goes for the map case below.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r404821988", "createdAt": "2020-04-07T13:47:13Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -398,6 +405,34 @@ private void findTypeParamInTupleForArray(DiagnosticPos pos, BArrayType expType,\n         findTypeParam(pos, expType.eType, tupleElementType, env, resolvedTypes, result);\n     }\n \n+    private void findTypeParamInUnionForArray(DiagnosticPos pos, BArrayType expType, BUnionType actualType,\n+                                              SymbolEnv env, HashSet<BType> resolvedTypes, FindTypeParamResult result) {\n+        LinkedHashSet<BType> tupleTypes = new LinkedHashSet<>();\n+        for (BType type : actualType.getMemberTypes()) {\n+            if (type.tag == TypeTags.ARRAY) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c61ee01fbb5ab7f6949f255474b256194e12b7c0"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExNDM2NQ==", "bodyText": "Removed the else parts : 41a8b88", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r405114365", "createdAt": "2020-04-07T21:08:55Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -398,6 +405,34 @@ private void findTypeParamInTupleForArray(DiagnosticPos pos, BArrayType expType,\n         findTypeParam(pos, expType.eType, tupleElementType, env, resolvedTypes, result);\n     }\n \n+    private void findTypeParamInUnionForArray(DiagnosticPos pos, BArrayType expType, BUnionType actualType,\n+                                              SymbolEnv env, HashSet<BType> resolvedTypes, FindTypeParamResult result) {\n+        LinkedHashSet<BType> tupleTypes = new LinkedHashSet<>();\n+        for (BType type : actualType.getMemberTypes()) {\n+            if (type.tag == TypeTags.ARRAY) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgyMTk4OA=="}, "originalCommit": {"oid": "c61ee01fbb5ab7f6949f255474b256194e12b7c0"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjE5NDI3OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/TypeParamTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMjowODo0OVrOGCsNUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzozNTo1NFrOGCvkyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ3NDY0Mw==", "bodyText": "Shall we add a few more negative test cases with incompatible unions?\nSuch as on (int[]|string[]|float), (int[]|map)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r405474643", "createdAt": "2020-04-08T12:08:49Z", "author": {"login": "rdhananjaya"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/TypeParamTest.java", "diffHunk": "@@ -67,13 +67,9 @@ public void testTypeParamNegative() {\n         BAssertUtil.validateError(result, err++, \"incompatible types: expected 'int', found 'float'\", 119, 21);\n         BAssertUtil.validateError(result, err++, \"incompatible types: expected 'byte', found 'int'\", 122, 31);\n         BAssertUtil.validateError(result, err++, \"incompatible types: expected 'byte', found 'int'\", 125, 26);\n-\n-        // Disabled due to https://github.com/ballerina-platform/ballerina-lang/issues/22137\n-        // BAssertUtil.validateError(result, err++, \"incompatible types: expected '(int|string)', found 'int'\", 130,\n-        // 14);\n-        // BAssertUtil.validateError(result, err++, \"incompatible types: expected '(int|string)', found 'float'\", 131,\n-        //                           24);\n-\n+        BAssertUtil.validateError(result, err++, \"incompatible types: expected '(int|string)', found 'boolean'\", 130,\n+                                  14);\n+        BAssertUtil.validateError(result, err++, \"incompatible types: expected '(int|string)', found 'float'\", 131, 24);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a8b883de93e15548d1f90cbc4abeaa63428c69"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUyOTgwMw==", "bodyText": "Don't think code visit this logic for negative cases? It gives an undefined function.\nI added some different test cases ec685a4\nAny suggestions?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r405529803", "createdAt": "2020-04-08T13:35:54Z", "author": {"login": "KRVPerera"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/TypeParamTest.java", "diffHunk": "@@ -67,13 +67,9 @@ public void testTypeParamNegative() {\n         BAssertUtil.validateError(result, err++, \"incompatible types: expected 'int', found 'float'\", 119, 21);\n         BAssertUtil.validateError(result, err++, \"incompatible types: expected 'byte', found 'int'\", 122, 31);\n         BAssertUtil.validateError(result, err++, \"incompatible types: expected 'byte', found 'int'\", 125, 26);\n-\n-        // Disabled due to https://github.com/ballerina-platform/ballerina-lang/issues/22137\n-        // BAssertUtil.validateError(result, err++, \"incompatible types: expected '(int|string)', found 'int'\", 130,\n-        // 14);\n-        // BAssertUtil.validateError(result, err++, \"incompatible types: expected '(int|string)', found 'float'\", 131,\n-        //                           24);\n-\n+        BAssertUtil.validateError(result, err++, \"incompatible types: expected '(int|string)', found 'boolean'\", 130,\n+                                  14);\n+        BAssertUtil.validateError(result, err++, \"incompatible types: expected '(int|string)', found 'float'\", 131, 24);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ3NDY0Mw=="}, "originalCommit": {"oid": "41a8b883de93e15548d1f90cbc4abeaa63428c69"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjk3NjYzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNToxMToyOFrOGCz1_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODo0ODoyNVrOGKeGFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5OTc0Mw==", "bodyText": "The issue we are trying to solve is not only for lists and maps. I think you have to handle the union scenarios for pretty much each case here.\nFor example, for streams also it fails atm.\ntype Foo record {\n    string id;\n};\n\ntype Bar record {\n    int id;\n};\n\n\npublic function main() { \n    \n    Foo[] fooList = [{id: \"1234\"}, {id: \"5678\"}];\n        \n    stream<Foo> fooStream = fooList.toStream();\n\n    stream<Foo>|stream<Bar> fooBarStream = fooStream;\n\n    record {|Foo|Bar value;|}|error? res = fooBarStream.next(); \n}", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r405599743", "createdAt": "2020-04-08T15:11:28Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -306,6 +309,10 @@ private void findTypeParam(DiagnosticPos pos, BType expType, BType actualType, S\n                     findTypeParamInMapForRecord(pos, (BMapType) expType, (BRecordType) actualType, env, resolvedTypes,\n                                                 result);\n                 }\n+                if (actualType.tag == TypeTags.UNION) {\n+                    findTypeParamInUnionForMap(pos, (BMapType) expType, (BUnionType) actualType, env, resolvedTypes,\n+                                               result);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec685a4fd8a1d34e0a93b9eb724c0c95f3d51a9c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYzMjAyMA==", "bodyText": "Related to : #22570", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r413632020", "createdAt": "2020-04-23T08:48:25Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -306,6 +309,10 @@ private void findTypeParam(DiagnosticPos pos, BType expType, BType actualType, S\n                     findTypeParamInMapForRecord(pos, (BMapType) expType, (BRecordType) actualType, env, resolvedTypes,\n                                                 result);\n                 }\n+                if (actualType.tag == TypeTags.UNION) {\n+                    findTypeParamInUnionForMap(pos, (BMapType) expType, (BUnionType) actualType, env, resolvedTypes,\n+                                               result);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5OTc0Mw=="}, "originalCommit": {"oid": "ec685a4fd8a1d34e0a93b9eb724c0c95f3d51a9c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzIwOTkzOnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/TypeParamTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjowMjowN1rOGC2HdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjowMjowN1rOGC2HdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYzNjk4MQ==", "bodyText": "I don't think we need this, we won't get to this point if there are errors.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r405636981", "createdAt": "2020-04-08T16:02:07Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/TypeParamTest.java", "diffHunk": "@@ -111,4 +109,14 @@ public void testLangLibImports() {\n         Assert.assertEquals(ret2[0].stringValue(), \"100\");\n     }\n \n+    @Test(description = \"Tests for type narrowing for union return parameters\")\n+    public void testTypeNarrowingForUnionReturnParameters() {\n+        CompileResult result = BCompileUtil.compile(\"test-src/type-param/type_param_narrowing_for_union_return.bal\");\n+        BRunUtil.invoke(result, \"testSimpleUnionReturnParameterNarrowing\");\n+        BRunUtil.invoke(result, \"testUnionOfMapsReturnParameterNarrowing\");\n+        BRunUtil.invoke(result, \"testStringIntFloatSimpleAndArrayUnionReturnParameterNarrowing\");\n+        BRunUtil.invoke(result, \"testIntFloatSimpleAndMapUnionReturnParameterNarrowing\");\n+        BRunUtil.invoke(result, \"testIntFloatSimpleArrayMapUnionReturnParameterNarrowing\");\n+        Assert.assertEquals(result.getErrorCount(), 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec685a4fd8a1d34e0a93b9eb724c0c95f3d51a9c"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzIxNDU4OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/type-param/type_param_test_negative.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjowMzowOVrOGC2KUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjowMzowOVrOGC2KUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYzNzcxMw==", "bodyText": "We don't add spaces around the | in unions now. Please fix everywhere.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                int[] | string[] arr = [1, 2];\n          \n          \n            \n                int[]|string[] arr = [1, 2];", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r405637713", "createdAt": "2020-04-08T16:03:09Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/type-param/type_param_test_negative.bal", "diffHunk": "@@ -126,7 +126,14 @@ function testInvalidArgForBoundRequiredParam() {\n }\n \n function testInvalidArgOnUnionTypedValue() {\n-    int[]|string[] arr = [1, 2];\n+    int[] | string[] arr = [1, 2];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec685a4fd8a1d34e0a93b9eb724c0c95f3d51a9c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzIxNzgxOnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/type-param/type_param_narrowing_for_union_return.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjowMzo1NVrOGC2MZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjowMzo1NVrOGC2MZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYzODI0NQ==", "bodyText": "Please add the licence.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r405638245", "createdAt": "2020-04-08T16:03:55Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/type-param/type_param_narrowing_for_union_return.bal", "diffHunk": "@@ -0,0 +1,48 @@\n+function testSimpleUnionReturnParameterNarrowing() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec685a4fd8a1d34e0a93b9eb724c0c95f3d51a9c"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzIzNjQ0OnYy", "diffSide": "RIGHT", "path": "langlib/langlib-test/src/test/resources/test-src/type-param/type_param_narrowing_for_union_return.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjowODozMlrOGC2YVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjowODozMlrOGC2YVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0MTMwMg==", "bodyText": "While these are not tests for the langlib methods themselves (enumerate, get, etc.) IMO it'll still be useful to assert something from the result to verify correct runtime behaviour.\nFor example here we can assert\nassertTrue(y[0][1] is int);\nassertEquals(1, y[0][1]);\nassertTrue(y[1][1] is int);\nassertEquals(2, y[1][1]);\nShall we replace the assertTrue(true)s with proper assertions for type and value?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r405641302", "createdAt": "2020-04-08T16:08:32Z", "author": {"login": "MaryamZi"}, "path": "langlib/langlib-test/src/test/resources/test-src/type-param/type_param_narrowing_for_union_return.bal", "diffHunk": "@@ -0,0 +1,48 @@\n+function testSimpleUnionReturnParameterNarrowing() {\n+    int[]|float[] arr = <int[]>[1, 2];\n+    [int, (int|float)][] y = arr.enumerate();\n+    assertTrue(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec685a4fd8a1d34e0a93b9eb724c0c95f3d51a9c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzQ5Mjk1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzoxMTo1N1rOGC453g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzoxMTo1N1rOGC453g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4MjY1NA==", "bodyText": "Can we call this something like memberTypes instead? L422 too.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r405682654", "createdAt": "2020-04-08T17:11:57Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -398,6 +405,30 @@ private void findTypeParamInTupleForArray(DiagnosticPos pos, BArrayType expType,\n         findTypeParam(pos, expType.eType, tupleElementType, env, resolvedTypes, result);\n     }\n \n+    private void findTypeParamInUnionForArray(DiagnosticPos pos, BArrayType expType, BUnionType actualType,\n+                                              SymbolEnv env, HashSet<BType> resolvedTypes, FindTypeParamResult result) {\n+        LinkedHashSet<BType> tupleTypes = new LinkedHashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec685a4fd8a1d34e0a93b9eb724c0c95f3d51a9c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzU4NDQ1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzozNjoxNlrOGC5zBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzozNjoxNlrOGC5zBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY5NzI4NA==", "bodyText": "I think we can generalize this and findTypeParamInUnionForMap.\n    private void findTypeParamInUnion(DiagnosticPos pos, BType expType, BUnionType actualType,\n                                      SymbolEnv env, HashSet<BType> resolvedTypes, FindTypeParamResult result) {\n        LinkedHashSet<BType> memTypes = new LinkedHashSet<>();\n        for (BType type : actualType.getMemberTypes()) {\n            switch (type.tag) {\n                case TypeTags.ARRAY:\n                    memTypes.add(((BArrayType) type).eType);\n                    break;\n                case TypeTags.MAP:\n                    memTypes.add(((BMapType) type).constraint);\n                    break;\n            }\n        }\n        BUnionType unionType = BUnionType.create(null, memTypes);\n        findTypeParam(pos, expType, unionType, env, resolvedTypes, result);\n    }\nTo this we can pass as expType the array element type or map constraint type.\ne.g.,\nfindTypeParamInUnion(pos, ((BArrayType) expType).eType, (BUnionType) actualType, env, resolvedTypes, \n                     result);\nI think this will be the cleaner approach when we're adding checks for the rest of the cases in findTypeParam too.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r405697284", "createdAt": "2020-04-08T17:36:16Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -398,6 +405,30 @@ private void findTypeParamInTupleForArray(DiagnosticPos pos, BArrayType expType,\n         findTypeParam(pos, expType.eType, tupleElementType, env, resolvedTypes, result);\n     }\n \n+    private void findTypeParamInUnionForArray(DiagnosticPos pos, BArrayType expType, BUnionType actualType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec685a4fd8a1d34e0a93b9eb724c0c95f3d51a9c"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzU4NTYxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzozNjo0MFrOGC5z1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMjo1MjoyNlrOGOn1eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY5NzQ5NA==", "bodyText": "What about tuples, and similarly records for maps?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r405697494", "createdAt": "2020-04-08T17:36:40Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -398,6 +405,30 @@ private void findTypeParamInTupleForArray(DiagnosticPos pos, BArrayType expType,\n         findTypeParam(pos, expType.eType, tupleElementType, env, resolvedTypes, result);\n     }\n \n+    private void findTypeParamInUnionForArray(DiagnosticPos pos, BArrayType expType, BUnionType actualType,\n+                                              SymbolEnv env, HashSet<BType> resolvedTypes, FindTypeParamResult result) {\n+        LinkedHashSet<BType> tupleTypes = new LinkedHashSet<>();\n+        for (BType type : actualType.getMemberTypes()) {\n+            if (type.tag == TypeTags.ARRAY) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec685a4fd8a1d34e0a93b9eb724c0c95f3d51a9c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk4NTkxMg==", "bodyText": "I have fixed this please help review.\nRecords: d617fd7\nTuples: 12fc986", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22346#discussion_r417985912", "createdAt": "2020-04-30T12:52:26Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeParamAnalyzer.java", "diffHunk": "@@ -398,6 +405,30 @@ private void findTypeParamInTupleForArray(DiagnosticPos pos, BArrayType expType,\n         findTypeParam(pos, expType.eType, tupleElementType, env, resolvedTypes, result);\n     }\n \n+    private void findTypeParamInUnionForArray(DiagnosticPos pos, BArrayType expType, BUnionType actualType,\n+                                              SymbolEnv env, HashSet<BType> resolvedTypes, FindTypeParamResult result) {\n+        LinkedHashSet<BType> tupleTypes = new LinkedHashSet<>();\n+        for (BType type : actualType.getMemberTypes()) {\n+            if (type.tag == TypeTags.ARRAY) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY5NzQ5NA=="}, "originalCommit": {"oid": "ec685a4fd8a1d34e0a93b9eb724c0c95f3d51a9c"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4470, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}