{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNTQ3MjIz", "number": 20980, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNDozMDowMlrODfC42w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNTo0MjoyMlrODfDbPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODc5NzcxOnYy", "diffSide": "RIGHT", "path": "stdlib/config-api/src/main/java/org/ballerinalang/stdlib/config/GetConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNDozMDowMlrOFoheag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNDozMDowMlrOFoheag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAzNTgxOA==", "bodyText": "Was this annotation needed?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20980#discussion_r378035818", "createdAt": "2020-02-12T04:30:02Z", "author": {"login": "pubudu91"}, "path": "stdlib/config-api/src/main/java/org/ballerinalang/stdlib/config/GetConfig.java", "diffHunk": "@@ -65,16 +65,27 @@ public static Object get(String configKey, String type) {\n     @SuppressWarnings(\"unchecked\")\n     private static MapValue buildMapValue(Map<String, Object> section) {\n         MapValue map = new MapValueImpl<String, Object>();\n-\n-        section.forEach((key, val) -> {\n-            if (val instanceof String || val instanceof Long || val instanceof Double || val instanceof Boolean) {\n-                map.put(key, val);\n-            }\n-        });\n+        section.forEach((key, val) -> map.put(key, getConvertedValue(val)));\n         return map;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     private static BArray buildArrayValue(List value) {\n-        return BValueCreator.createArrayValue(value.toArray(), new BArrayType(BTypes.typeAnydata));\n+        Object[] convertedValues = new Object[value.size()];\n+        value.forEach(convertedValue -> convertedValues[value.indexOf(convertedValue)] =\n+                getConvertedValue(convertedValue));\n+        return BValueCreator.createArrayValue(convertedValues, new BArrayType(BTypes.typeAnydata));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ff47df5de2e7d22248b19aec3f2328af3a3a87"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODgxNTg4OnYy", "diffSide": "RIGHT", "path": "stdlib/config-api/src/main/java/org/ballerinalang/stdlib/config/GetConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNDo0NTozNlrOFohpmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNToxNjozMFrOFoh__A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAzODY4MQ==", "bodyText": "Shall we replace this with a normal for loop? We now avoid the use of these as much as possible and reverting the current usages back to normal loops", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20980#discussion_r378038681", "createdAt": "2020-02-12T04:45:36Z", "author": {"login": "pubudu91"}, "path": "stdlib/config-api/src/main/java/org/ballerinalang/stdlib/config/GetConfig.java", "diffHunk": "@@ -65,16 +65,27 @@ public static Object get(String configKey, String type) {\n     @SuppressWarnings(\"unchecked\")\n     private static MapValue buildMapValue(Map<String, Object> section) {\n         MapValue map = new MapValueImpl<String, Object>();\n-\n-        section.forEach((key, val) -> {\n-            if (val instanceof String || val instanceof Long || val instanceof Double || val instanceof Boolean) {\n-                map.put(key, val);\n-            }\n-        });\n+        section.forEach((key, val) -> map.put(key, getConvertedValue(val)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ff47df5de2e7d22248b19aec3f2328af3a3a87"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA0MDkwNg==", "bodyText": "+1.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20980#discussion_r378040906", "createdAt": "2020-02-12T04:57:33Z", "author": {"login": "aashikam"}, "path": "stdlib/config-api/src/main/java/org/ballerinalang/stdlib/config/GetConfig.java", "diffHunk": "@@ -65,16 +65,27 @@ public static Object get(String configKey, String type) {\n     @SuppressWarnings(\"unchecked\")\n     private static MapValue buildMapValue(Map<String, Object> section) {\n         MapValue map = new MapValueImpl<String, Object>();\n-\n-        section.forEach((key, val) -> {\n-            if (val instanceof String || val instanceof Long || val instanceof Double || val instanceof Boolean) {\n-                map.put(key, val);\n-            }\n-        });\n+        section.forEach((key, val) -> map.put(key, getConvertedValue(val)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAzODY4MQ=="}, "originalCommit": {"oid": "c5ff47df5de2e7d22248b19aec3f2328af3a3a87"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA0NDQxMg==", "bodyText": "Corrected.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20980#discussion_r378044412", "createdAt": "2020-02-12T05:16:30Z", "author": {"login": "aashikam"}, "path": "stdlib/config-api/src/main/java/org/ballerinalang/stdlib/config/GetConfig.java", "diffHunk": "@@ -65,16 +65,27 @@ public static Object get(String configKey, String type) {\n     @SuppressWarnings(\"unchecked\")\n     private static MapValue buildMapValue(Map<String, Object> section) {\n         MapValue map = new MapValueImpl<String, Object>();\n-\n-        section.forEach((key, val) -> {\n-            if (val instanceof String || val instanceof Long || val instanceof Double || val instanceof Boolean) {\n-                map.put(key, val);\n-            }\n-        });\n+        section.forEach((key, val) -> map.put(key, getConvertedValue(val)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAzODY4MQ=="}, "originalCommit": {"oid": "c5ff47df5de2e7d22248b19aec3f2328af3a3a87"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODgxNjMwOnYy", "diffSide": "RIGHT", "path": "stdlib/config-api/src/main/java/org/ballerinalang/stdlib/config/GetConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNDo0NjowMFrOFohp3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNToxNjoxOVrOFoh_2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAzODc0OQ==", "bodyText": "same comment as above regarding the use of .forEach()", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20980#discussion_r378038749", "createdAt": "2020-02-12T04:46:00Z", "author": {"login": "pubudu91"}, "path": "stdlib/config-api/src/main/java/org/ballerinalang/stdlib/config/GetConfig.java", "diffHunk": "@@ -65,16 +65,27 @@ public static Object get(String configKey, String type) {\n     @SuppressWarnings(\"unchecked\")\n     private static MapValue buildMapValue(Map<String, Object> section) {\n         MapValue map = new MapValueImpl<String, Object>();\n-\n-        section.forEach((key, val) -> {\n-            if (val instanceof String || val instanceof Long || val instanceof Double || val instanceof Boolean) {\n-                map.put(key, val);\n-            }\n-        });\n+        section.forEach((key, val) -> map.put(key, getConvertedValue(val)));\n         return map;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     private static BArray buildArrayValue(List value) {\n-        return BValueCreator.createArrayValue(value.toArray(), new BArrayType(BTypes.typeAnydata));\n+        Object[] convertedValues = new Object[value.size()];\n+        value.forEach(convertedValue -> convertedValues[value.indexOf(convertedValue)] =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ff47df5de2e7d22248b19aec3f2328af3a3a87"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA0NDM3Ng==", "bodyText": "Corrected.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20980#discussion_r378044376", "createdAt": "2020-02-12T05:16:19Z", "author": {"login": "aashikam"}, "path": "stdlib/config-api/src/main/java/org/ballerinalang/stdlib/config/GetConfig.java", "diffHunk": "@@ -65,16 +65,27 @@ public static Object get(String configKey, String type) {\n     @SuppressWarnings(\"unchecked\")\n     private static MapValue buildMapValue(Map<String, Object> section) {\n         MapValue map = new MapValueImpl<String, Object>();\n-\n-        section.forEach((key, val) -> {\n-            if (val instanceof String || val instanceof Long || val instanceof Double || val instanceof Boolean) {\n-                map.put(key, val);\n-            }\n-        });\n+        section.forEach((key, val) -> map.put(key, getConvertedValue(val)));\n         return map;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     private static BArray buildArrayValue(List value) {\n-        return BValueCreator.createArrayValue(value.toArray(), new BArrayType(BTypes.typeAnydata));\n+        Object[] convertedValues = new Object[value.size()];\n+        value.forEach(convertedValue -> convertedValues[value.indexOf(convertedValue)] =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAzODc0OQ=="}, "originalCommit": {"oid": "c5ff47df5de2e7d22248b19aec3f2328af3a3a87"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODg4NTc1OnYy", "diffSide": "RIGHT", "path": "stdlib/config-api/src/test/resources/datafiles/default/ballerina.conf", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNTo0MjoyMlrOFoiUpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMToyNjo0NVrOForDeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA0OTcwMw==", "bodyText": "Shall we add test cases for negative cases and multi dimensional arrays as well? See https://github.com/toml-lang/toml/tree/v0.4.0#array\nAlso a bit more complex case for arrays of table and a negative case as well: https://github.com/toml-lang/toml/tree/v0.4.0#array-of-tables", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20980#discussion_r378049703", "createdAt": "2020-02-12T05:42:22Z", "author": {"login": "pubudu91"}, "path": "stdlib/config-api/src/test/resources/datafiles/default/ballerina.conf", "diffHunk": "@@ -52,3 +52,11 @@ World!!!\n [listenerConfig.keyStore]\n paths=[\"/etc\", \"/tmp\", \"/usr/lib/\"]\n ports=[9090, 9091, 9092]\n+\n+[[foo]]\n+a=1\n+b=2\n+\n+[[foo]]\n+a=3\n+b=4", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ff47df5de2e7d22248b19aec3f2328af3a3a87"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE5Mjc2MQ==", "bodyText": "Added more tests.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20980#discussion_r378192761", "createdAt": "2020-02-12T11:26:45Z", "author": {"login": "aashikam"}, "path": "stdlib/config-api/src/test/resources/datafiles/default/ballerina.conf", "diffHunk": "@@ -52,3 +52,11 @@ World!!!\n [listenerConfig.keyStore]\n paths=[\"/etc\", \"/tmp\", \"/usr/lib/\"]\n ports=[9090, 9091, 9092]\n+\n+[[foo]]\n+a=1\n+b=2\n+\n+[[foo]]\n+a=3\n+b=4", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA0OTcwMw=="}, "originalCommit": {"oid": "c5ff47df5de2e7d22248b19aec3f2328af3a3a87"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1209, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}