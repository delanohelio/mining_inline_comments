{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MjI5MTYw", "number": 27189, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNjozMTo0MVrOFCJc5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjowODozMFrOFFjfDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Nzk2MzI1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaCharTypeSymbol.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNjozMTo0MVrOIBJJbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNjozMTo0MVrOIBJJbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA2OTM1Nw==", "bodyText": "will it be possible to assign CHAR kind?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27189#discussion_r538069357", "createdAt": "2020-12-08T06:31:41Z", "author": {"login": "nadeeshaan"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaCharTypeSymbol.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.ballerina.compiler.api.impl.symbols;\n+\n+import io.ballerina.compiler.api.ModuleID;\n+import io.ballerina.compiler.api.symbols.CharTypeSymbol;\n+import io.ballerina.compiler.api.symbols.TypeDescKind;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BStringSubType;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+\n+/**\n+ * Represents the string:Char type descriptor.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BallerinaCharTypeSymbol extends AbstractTypeSymbol implements CharTypeSymbol {\n+\n+    public BallerinaCharTypeSymbol(CompilerContext context, ModuleID moduleID, BStringSubType charType) {\n+        super(context, TypeDescKind.STRING, moduleID, charType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6040b3327f5194aac42c038a2cd56903bbedff"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Nzk3MDYwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaIntSigned16TypeSymbol.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNjozNDowN1rOIBJNRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMToyNzoyMFrOIBUzOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA3MDM0MA==", "bodyText": "Same as the Char type, will it be possible to have a subtype kind? Otherwise in order to distinguish we will have to have an instance of check", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27189#discussion_r538070340", "createdAt": "2020-12-08T06:34:07Z", "author": {"login": "nadeeshaan"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaIntSigned16TypeSymbol.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.ballerina.compiler.api.impl.symbols;\n+\n+import io.ballerina.compiler.api.ModuleID;\n+import io.ballerina.compiler.api.symbols.IntSigned16TypeSymbol;\n+import io.ballerina.compiler.api.symbols.TypeDescKind;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BIntSubType;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.compiler.util.Names;\n+\n+/**\n+ * Represents the int:Signed16 type descriptor.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BallerinaIntSigned16TypeSymbol extends AbstractTypeSymbol implements IntSigned16TypeSymbol {\n+\n+    public BallerinaIntSigned16TypeSymbol(CompilerContext context, ModuleID moduleID, BIntSubType signed16Type) {\n+        super(context, TypeDescKind.INT, moduleID, signed16Type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6040b3327f5194aac42c038a2cd56903bbedff"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA3MzgwMw==", "bodyText": "We can include. The downside would be if we want to check if the type is an integer kind, we'll have to consider all the types and/or provide a util to check if the type is an integer kind", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27189#discussion_r538073803", "createdAt": "2020-12-08T06:42:29Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaIntSigned16TypeSymbol.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.ballerina.compiler.api.impl.symbols;\n+\n+import io.ballerina.compiler.api.ModuleID;\n+import io.ballerina.compiler.api.symbols.IntSigned16TypeSymbol;\n+import io.ballerina.compiler.api.symbols.TypeDescKind;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BIntSubType;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.compiler.util.Names;\n+\n+/**\n+ * Represents the int:Signed16 type descriptor.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BallerinaIntSigned16TypeSymbol extends AbstractTypeSymbol implements IntSigned16TypeSymbol {\n+\n+    public BallerinaIntSigned16TypeSymbol(CompilerContext context, ModuleID moduleID, BIntSubType signed16Type) {\n+        super(context, TypeDescKind.INT, moduleID, signed16Type);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA3MDM0MA=="}, "originalCommit": {"oid": "bc6040b3327f5194aac42c038a2cd56903bbedff"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA3NDc5NA==", "bodyText": "My suggestion is, that we keep a separate API for the subtype. We have to consider this when we order the suggestions with the priority", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27189#discussion_r538074794", "createdAt": "2020-12-08T06:44:50Z", "author": {"login": "nadeeshaan"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaIntSigned16TypeSymbol.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.ballerina.compiler.api.impl.symbols;\n+\n+import io.ballerina.compiler.api.ModuleID;\n+import io.ballerina.compiler.api.symbols.IntSigned16TypeSymbol;\n+import io.ballerina.compiler.api.symbols.TypeDescKind;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BIntSubType;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.compiler.util.Names;\n+\n+/**\n+ * Represents the int:Signed16 type descriptor.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BallerinaIntSigned16TypeSymbol extends AbstractTypeSymbol implements IntSigned16TypeSymbol {\n+\n+    public BallerinaIntSigned16TypeSymbol(CompilerContext context, ModuleID moduleID, BIntSubType signed16Type) {\n+        super(context, TypeDescKind.INT, moduleID, signed16Type);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA3MDM0MA=="}, "originalCommit": {"oid": "bc6040b3327f5194aac42c038a2cd56903bbedff"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI2MDI4MA==", "bodyText": "Added the discussed APIs to the respective type symbols.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27189#discussion_r538260280", "createdAt": "2020-12-08T11:27:20Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaIntSigned16TypeSymbol.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.ballerina.compiler.api.impl.symbols;\n+\n+import io.ballerina.compiler.api.ModuleID;\n+import io.ballerina.compiler.api.symbols.IntSigned16TypeSymbol;\n+import io.ballerina.compiler.api.symbols.TypeDescKind;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BIntSubType;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+import org.wso2.ballerinalang.compiler.util.Names;\n+\n+/**\n+ * Represents the int:Signed16 type descriptor.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BallerinaIntSigned16TypeSymbol extends AbstractTypeSymbol implements IntSigned16TypeSymbol {\n+\n+    public BallerinaIntSigned16TypeSymbol(CompilerContext context, ModuleID moduleID, BIntSubType signed16Type) {\n+        super(context, TypeDescKind.INT, moduleID, signed16Type);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA3MDM0MA=="}, "originalCommit": {"oid": "bc6040b3327f5194aac42c038a2cd56903bbedff"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4Mzc4NzcyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/symbols/StringTypeSymbol.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMjo1ODowM1rOIB_-HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMjowMTo1OVrOICx_LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk2NzU4MQ==", "bodyText": "What if we introduce a common interface for all subtypes?\nThat interface can have a method called subtype()", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27189#discussion_r538967581", "createdAt": "2020-12-09T02:58:03Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/symbols/StringTypeSymbol.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.ballerina.compiler.api.symbols;\n+\n+/**\n+ * Represents the string type descriptor.\n+ *\n+ * @since 2.0.0\n+ */\n+public interface StringTypeSymbol extends TypeSymbol {\n+\n+    /**\n+     * Retrieves the string kind represented by the type symbol. Intended to be used when one needs to differentiate\n+     * between the different kinds of string subtypes.\n+     *\n+     * @return The kind of string represented\n+     */\n+    Kind stringKind();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b47972208e13c27b1fe10e33bfe59e7f2c4f017"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEwNzY5Mg==", "bodyText": "What would the return type of subtype() be?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27189#discussion_r539107692", "createdAt": "2020-12-09T08:35:10Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/symbols/StringTypeSymbol.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.ballerina.compiler.api.symbols;\n+\n+/**\n+ * Represents the string type descriptor.\n+ *\n+ * @since 2.0.0\n+ */\n+public interface StringTypeSymbol extends TypeSymbol {\n+\n+    /**\n+     * Retrieves the string kind represented by the type symbol. Intended to be used when one needs to differentiate\n+     * between the different kinds of string subtypes.\n+     *\n+     * @return The kind of string represented\n+     */\n+    Kind stringKind();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk2NzU4MQ=="}, "originalCommit": {"oid": "5b47972208e13c27b1fe10e33bfe59e7f2c4f017"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4NzA1Mg==", "bodyText": "I was thinking of returning a similar enum (a merged enum with all subtypes)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27189#discussion_r539787052", "createdAt": "2020-12-10T02:01:59Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/symbols/StringTypeSymbol.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.ballerina.compiler.api.symbols;\n+\n+/**\n+ * Represents the string type descriptor.\n+ *\n+ * @since 2.0.0\n+ */\n+public interface StringTypeSymbol extends TypeSymbol {\n+\n+    /**\n+     * Retrieves the string kind represented by the type symbol. Intended to be used when one needs to differentiate\n+     * between the different kinds of string subtypes.\n+     *\n+     * @return The kind of string represented\n+     */\n+    Kind stringKind();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk2NzU4MQ=="}, "originalCommit": {"oid": "5b47972208e13c27b1fe10e33bfe59e7f2c4f017"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4Mzc5MzUwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaTypeSymbol.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMzowMDoxM1rOICABVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwODozODowMlrOICIoeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk2ODQwNg==", "bodyText": "What are the possible types that could fall on to this group?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27189#discussion_r538968406", "createdAt": "2020-12-09T03:00:13Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaTypeSymbol.java", "diffHunk": "@@ -17,29 +17,23 @@\n package io.ballerina.compiler.api.impl.symbols;\n \n import io.ballerina.compiler.api.ModuleID;\n-import io.ballerina.compiler.api.symbols.SimpleTypeSymbol;\n import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n import org.wso2.ballerinalang.compiler.util.CompilerContext;\n \n /**\n- * Represents the built-in simple type descriptor.\n+ * Represents type descriptors which do not fall in to any other type descriptor.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b47972208e13c27b1fe10e33bfe59e7f2c4f017"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEwOTQ5Ng==", "bodyText": "With the changes introduced in this PR, this becomes a sort of a fall back type symbol for any typedescs we may have missed. Currently the only one I can think of is the \"dependent type\". Plan is to get rid of this altogether for alpha.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27189#discussion_r539109496", "createdAt": "2020-12-09T08:38:02Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaTypeSymbol.java", "diffHunk": "@@ -17,29 +17,23 @@\n package io.ballerina.compiler.api.impl.symbols;\n \n import io.ballerina.compiler.api.ModuleID;\n-import io.ballerina.compiler.api.symbols.SimpleTypeSymbol;\n import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n import org.wso2.ballerinalang.compiler.util.CompilerContext;\n \n /**\n- * Represents the built-in simple type descriptor.\n+ * Represents type descriptors which do not fall in to any other type descriptor.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk2ODQwNg=="}, "originalCommit": {"oid": "5b47972208e13c27b1fe10e33bfe59e7f2c4f017"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzY4NTkxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaByteTypeSymbol.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjowODozMFrOIGHs_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMjowODozMFrOIGHs_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI4ODU3Mw==", "bodyText": "can we use this.typeDescKind.getName()? would be better than hardcoding", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27189#discussion_r543288573", "createdAt": "2020-12-15T12:08:30Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/symbols/BallerinaByteTypeSymbol.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.ballerina.compiler.api.impl.symbols;\n+\n+import io.ballerina.compiler.api.ModuleID;\n+import io.ballerina.compiler.api.symbols.ByteTypeSymbol;\n+import io.ballerina.compiler.api.symbols.TypeDescKind;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.compiler.util.CompilerContext;\n+\n+/**\n+ * Represents the byte type descriptor.\n+ *\n+ * @since 2.0.0\n+ */\n+public class BallerinaByteTypeSymbol extends AbstractTypeSymbol implements ByteTypeSymbol {\n+\n+    public BallerinaByteTypeSymbol(CompilerContext context, ModuleID moduleID, BType byteType) {\n+        super(context, TypeDescKind.BYTE, moduleID, byteType);\n+    }\n+\n+    @Override\n+    public String name() {\n+        return \"byte\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3449a37eee11a9b4f5c9019ba43dc309fa4da5ed"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2974, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}