{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMzM4NzQz", "number": 22542, "title": "Refactor maths api docs", "bodyText": "Purpose\n$Subject\nApproach\nUpdate docs according to the standards.", "createdAt": "2020-04-09T10:21:30Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542", "merged": true, "mergeCommit": {"oid": "e56f57ae99252b984d7f9bf24e22898a69f131ba"}, "closed": true, "closedAt": "2020-04-15T13:17:58Z", "author": {"login": "MadhukaHarith92"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcV6qldAFqTM5MDcwMzY5NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcWPPDXAH2gAyNDAxMzM4NzQzOmI3ZGI1YzBmMzNjMDA5Mjk2MjI2YzQzOTdkMzgzNWJjMWZjMDc1Nzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNzAzNjk1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#pullrequestreview-390703695", "createdAt": "2020-04-09T11:18:49Z", "commit": {"oid": "28d43c8c8629721246c0fdf50efe94effeb2e8b2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMToxODo0OVrOGDUcyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMToxODo0OVrOGDUcyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEzMzk2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For information on the operation, which you can perform with this module, see the below Function. For examples on the usage of the operation, see [Math Api](https://ballerina.io/v1-1/learn/by-example/math-functions.html).\n          \n          \n            \n            For information on the operation, which you can perform with this module, see the below **Functions**. For examples on the usage of the operations, see [Math Api](https://ballerina.io/v1-1/learn/by-example/math-functions.html).\n          \n      \n    \n    \n  \n\nThis is incorrect. please refer the template and correct.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406133962", "createdAt": "2020-04-09T11:18:49Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/Module.md", "diffHunk": "@@ -1,44 +1,3 @@\n-## Module overview\n-\n This module provides functions to perform fixed-precision integer arithmetic and fixed-precision decimal arithmetic. It includes functions to get the absolute, cosine, sine, root, tangent, and more for a given value.\n \n-## Sample\n-The sample given below uses a few functions that are in the `ballerina/math` module.\n-\n-```ballerina\n-import ballerina/io;\n-import ballerina/math;\n-\n-public function main(string... args) {\n-\n-   // Get the value of Pi from the \u2018ballerina/math module\u2019.\n-   io:println(\"Value of Pi : \", math:PI.toString());\n-\n-   // Get the value of E from the \u2018ballerina/math module\u2019.\n-   io:println(\"Value of E  : \", math:E.toString());\n-\n-   // Get the absolute value of the given floating point number. \n-   float absoluteFloatValue = math:absFloat(-152.2544);\n-   io:println(\"Absolute value of -152.2544 : \", absoluteFloatValue.toString());\n-\n-   // Get the absolute value of an integer.\n-   int absoluteIntValue = math:absInt(-152);\n-   io:println(\"Absolute value of -152 : \", absoluteIntValue.toString());\n-\n-   // Get the Arc cosine of a given value.\n-   float acosValue = math:acos(0.027415567780803774);\n-   io:println(\"Arc cosine of 0.027415567780803774 : \", acosValue.toString());\n-\n-   // Get the Arc Sine value of a given value.\n-   float arcSineValue = math:asin(0.027415567780803774);\n-   io:println(\"Arc sine of 0.027415567780803774 : \", arcSineValue.toString());\n-\n-   // Get the Arc Tangent value of a given value.\n-   float arcTangent = math:atan(0.027415567780803774);\n-   io:println(\"Arc tangent of 0.027415567780803774 : \", arcTangent.toString());\n-\n-   // Calculate the cubic root of a given value.\n-   float cubeRoot = math:cbrt(-27);\n-   io:println(\"Cube root of -27 : \", cubeRoot.toString());\n-}\n-```\n+For information on the operation, which you can perform with this module, see the below Function. For examples on the usage of the operation, see [Math Api](https://ballerina.io/v1-1/learn/by-example/math-functions.html).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28d43c8c8629721246c0fdf50efe94effeb2e8b2"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNzc1OTAz", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#pullrequestreview-390775903", "createdAt": "2020-04-09T13:09:46Z", "commit": {"oid": "10188d193591fb82fc46affe531ae29808690b6f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzowOTo0NlrOGDX85w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzowOTo0NlrOGDX85w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5MTMzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For information on the operation, which you can perform with this module, see the below **Functions**. For examples on the usage of the operations, see [Math Api](https://ballerina.io/v1-1/learn/by-example/math-functions.html).\n          \n          \n            \n            For information on the operation, which you can perform with this module, see the below **Functions**. For examples on the usage of the operations, see [Math Example](https://ballerina.io/v1-1/learn/by-example/math-functions.html).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406191335", "createdAt": "2020-04-09T13:09:46Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/Module.md", "diffHunk": "@@ -1,44 +1,3 @@\n-## Module overview\n-\n This module provides functions to perform fixed-precision integer arithmetic and fixed-precision decimal arithmetic. It includes functions to get the absolute, cosine, sine, root, tangent, and more for a given value.\n \n-## Sample\n-The sample given below uses a few functions that are in the `ballerina/math` module.\n-\n-```ballerina\n-import ballerina/io;\n-import ballerina/math;\n-\n-public function main(string... args) {\n-\n-   // Get the value of Pi from the \u2018ballerina/math module\u2019.\n-   io:println(\"Value of Pi : \", math:PI.toString());\n-\n-   // Get the value of E from the \u2018ballerina/math module\u2019.\n-   io:println(\"Value of E  : \", math:E.toString());\n-\n-   // Get the absolute value of the given floating point number. \n-   float absoluteFloatValue = math:absFloat(-152.2544);\n-   io:println(\"Absolute value of -152.2544 : \", absoluteFloatValue.toString());\n-\n-   // Get the absolute value of an integer.\n-   int absoluteIntValue = math:absInt(-152);\n-   io:println(\"Absolute value of -152 : \", absoluteIntValue.toString());\n-\n-   // Get the Arc cosine of a given value.\n-   float acosValue = math:acos(0.027415567780803774);\n-   io:println(\"Arc cosine of 0.027415567780803774 : \", acosValue.toString());\n-\n-   // Get the Arc Sine value of a given value.\n-   float arcSineValue = math:asin(0.027415567780803774);\n-   io:println(\"Arc sine of 0.027415567780803774 : \", arcSineValue.toString());\n-\n-   // Get the Arc Tangent value of a given value.\n-   float arcTangent = math:atan(0.027415567780803774);\n-   io:println(\"Arc tangent of 0.027415567780803774 : \", arcTangent.toString());\n-\n-   // Calculate the cubic root of a given value.\n-   float cubeRoot = math:cbrt(-27);\n-   io:println(\"Cube root of -27 : \", cubeRoot.toString());\n-}\n-```\n+For information on the operation, which you can perform with this module, see the below **Functions**. For examples on the usage of the operations, see [Math Api](https://ballerina.io/v1-1/learn/by-example/math-functions.html).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10188d193591fb82fc46affe531ae29808690b6f"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwODA2NTQw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#pullrequestreview-390806540", "createdAt": "2020-04-09T13:46:10Z", "commit": {"oid": "3f05f0c54c662f9efb5c063b79c1aed731ab8f4d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzo0NjoxMFrOGDZcBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzo0Njo0MFrOGDZdRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxNTY4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For information on the operation, which you can perform with this module, see the below **Functions**. For examples on the usage of the operations, see [Math Example](https://ballerina.io/v1-1/learn/by-example/math-functions.html).\n          \n          \n            \n            For information on the operation, which you can perform with this module, see the below **Functions**. For examples on the usage of the operations, see the [Math Example](https://ballerina.io/v1-1/learn/by-example/math-functions.html).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406215685", "createdAt": "2020-04-09T13:46:10Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/Module.md", "diffHunk": "@@ -1,44 +1,3 @@\n-## Module overview\n-\n This module provides functions to perform fixed-precision integer arithmetic and fixed-precision decimal arithmetic. It includes functions to get the absolute, cosine, sine, root, tangent, and more for a given value.\n \n-## Sample\n-The sample given below uses a few functions that are in the `ballerina/math` module.\n-\n-```ballerina\n-import ballerina/io;\n-import ballerina/math;\n-\n-public function main(string... args) {\n-\n-   // Get the value of Pi from the \u2018ballerina/math module\u2019.\n-   io:println(\"Value of Pi : \", math:PI.toString());\n-\n-   // Get the value of E from the \u2018ballerina/math module\u2019.\n-   io:println(\"Value of E  : \", math:E.toString());\n-\n-   // Get the absolute value of the given floating point number. \n-   float absoluteFloatValue = math:absFloat(-152.2544);\n-   io:println(\"Absolute value of -152.2544 : \", absoluteFloatValue.toString());\n-\n-   // Get the absolute value of an integer.\n-   int absoluteIntValue = math:absInt(-152);\n-   io:println(\"Absolute value of -152 : \", absoluteIntValue.toString());\n-\n-   // Get the Arc cosine of a given value.\n-   float acosValue = math:acos(0.027415567780803774);\n-   io:println(\"Arc cosine of 0.027415567780803774 : \", acosValue.toString());\n-\n-   // Get the Arc Sine value of a given value.\n-   float arcSineValue = math:asin(0.027415567780803774);\n-   io:println(\"Arc sine of 0.027415567780803774 : \", arcSineValue.toString());\n-\n-   // Get the Arc Tangent value of a given value.\n-   float arcTangent = math:atan(0.027415567780803774);\n-   io:println(\"Arc tangent of 0.027415567780803774 : \", arcTangent.toString());\n-\n-   // Calculate the cubic root of a given value.\n-   float cubeRoot = math:cbrt(-27);\n-   io:println(\"Cube root of -27 : \", cubeRoot.toString());\n-}\n-```\n+For information on the operation, which you can perform with this module, see the below **Functions**. For examples on the usage of the operations, see [Math Example](https://ballerina.io/v1-1/learn/by-example/math-functions.html).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f05f0c54c662f9efb5c063b79c1aed731ab8f4d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxNjAwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns Euler's number, that is 'e' raised to the power of exponent.\n          \n          \n            \n            # Returns the Euler's number, which is 'e' raised to the power of the exponent.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406216004", "createdAt": "2020-04-09T13:46:40Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/natives.bal", "diffHunk": "@@ -23,7 +23,10 @@ public const float PI = 3.141592653589793;\n public const float E = 2.718281828459045;\n \n # Returns Euler's number, that is 'e' raised to the power of exponent.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f05f0c54c662f9efb5c063b79c1aed731ab8f4d"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMjkzOTk5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#pullrequestreview-391293999", "createdAt": "2020-04-10T06:52:48Z", "commit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "state": "COMMENTED", "comments": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNjo1Mjo0OFrOGDypRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzowNDoyNVrOGDy2hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyODY3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For information on the operation, which you can perform with this module, see the below Function. For examples on the usage of the operation, see [Math Api](https://ballerina.io/v1-1/learn/by-example/math-functions.html).\n          \n          \n            \n            For information on the operations, which you can perform with this module, see the below **Functions**. For an example on the usage of the operation, see the [Math Example](https://ballerina.io/v1-1/learn/by-example/math-functions.html).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406628679", "createdAt": "2020-04-10T06:52:48Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/Module.md", "diffHunk": "@@ -1,44 +1,3 @@\n-## Module overview\n-\n This module provides functions to perform fixed-precision integer arithmetic and fixed-precision decimal arithmetic. It includes functions to get the absolute, cosine, sine, root, tangent, and more for a given value.\n \n-## Sample\n-The sample given below uses a few functions that are in the `ballerina/math` module.\n-\n-```ballerina\n-import ballerina/io;\n-import ballerina/math;\n-\n-public function main(string... args) {\n-\n-   // Get the value of Pi from the \u2018ballerina/math module\u2019.\n-   io:println(\"Value of Pi : \", math:PI.toString());\n-\n-   // Get the value of E from the \u2018ballerina/math module\u2019.\n-   io:println(\"Value of E  : \", math:E.toString());\n-\n-   // Get the absolute value of the given floating point number. \n-   float absoluteFloatValue = math:absFloat(-152.2544);\n-   io:println(\"Absolute value of -152.2544 : \", absoluteFloatValue.toString());\n-\n-   // Get the absolute value of an integer.\n-   int absoluteIntValue = math:absInt(-152);\n-   io:println(\"Absolute value of -152 : \", absoluteIntValue.toString());\n-\n-   // Get the Arc cosine of a given value.\n-   float acosValue = math:acos(0.027415567780803774);\n-   io:println(\"Arc cosine of 0.027415567780803774 : \", acosValue.toString());\n-\n-   // Get the Arc Sine value of a given value.\n-   float arcSineValue = math:asin(0.027415567780803774);\n-   io:println(\"Arc sine of 0.027415567780803774 : \", arcSineValue.toString());\n-\n-   // Get the Arc Tangent value of a given value.\n-   float arcTangent = math:atan(0.027415567780803774);\n-   io:println(\"Arc tangent of 0.027415567780803774 : \", arcTangent.toString());\n-\n-   // Calculate the cubic root of a given value.\n-   float cubeRoot = math:cbrt(-27);\n-   io:println(\"Cube root of -27 : \", cubeRoot.toString());\n-}\n-```\n+For information on the operation, which you can perform with this module, see the below Function. For examples on the usage of the operation, see [Math Api](https://ballerina.io/v1-1/learn/by-example/math-functions.html).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyODkwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Calculates Euler's number, that is 'e' raised to the power of exponent.\n          \n          \n            \n            # Calculates Euler's number, which is 'e' raised to the power of the exponential value.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406628909", "createdAt": "2020-04-10T06:53:37Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/natives.bal", "diffHunk": "@@ -16,16 +16,19 @@\n \n import ballerina/java;\n \n-# The ratio of the circumference of a circle to its diameter.\n+# Ratio of the circumference of a circle to its diameter.\n public const float PI = 3.141592653589793;\n \n-# The base of the natural logarithms.\n+# Base of the natural logarithms.\n public const float E = 2.718281828459045;\n \n-# Returns Euler's number, that is 'e' raised to the power of exponent.\n-#\n-# + val - Exponent value to raise\n-# + return - Exp value\n+# Calculates Euler's number, that is 'e' raised to the power of exponent.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyOTEwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Selected random value or `Error` if start range is greater than the end range\n          \n          \n            \n            # + return - Selected random value or else `Error` if start range is greater than the end range", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406629102", "createdAt": "2020-04-10T06:54:11Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/natives.bal", "diffHunk": "@@ -35,37 +38,46 @@ function externExp(float val) returns float = @java:Method {\n     class: \"java.lang.Math\"\n } external;\n \n-# Returns the value of the 'a' raised to the power of 'b'.\n-#\n-# + a - The base value\n-# + b - The exponent value\n-# + return - Result value\n+# Calculates the value of the 'a' raised to the power of 'b'.\n+# ```ballerina\n+# float aPowerB = math:pow(3.2, 2.4);\n+# ```\n+# \n+# + a - Base value\n+# + b - Exponential value\n+# + return - Calculated exponential value\n public function pow(float a, float b) returns float {\n     return externPow(a, b);\n }\n \n function externPow(float a, float b) returns float = @java:Method {\n-   name: \"pow\",\n-   class: \"java.lang.Math\"\n+    name: \"pow\",\n+    class: \"java.lang.Math\"\n } external;\n \n-# Returns a random number between 0.0 and 1.0.\n-#\n-# + return - Random value\n+# Selects a random number between 0.0 and 1.0.\n+# ```ballerina\n+# float randomValue = math:random();\n+# ```\n+# \n+# + return - Selected random value\n public function random() returns float {\n     return externRandom();\n }\n \n function externRandom() returns float = @java:Method {\n-   name: \"random\",\n-   class: \"java.lang.Math\"\n+    name: \"random\",\n+    class: \"java.lang.Math\"\n } external;\n \n-# Returns a random number between given start(inclusive) and end(exclusive) values.\n-#\n+# Selects a random number between the given start(inclusive) and end(exclusive) values.\n+# ```ballerina\n+# int|error randomInteger = math:randomInRange(1, 100);\n+# ```\n+# \n # + startRange - Range start value\n # + endRange - Range end value\n-# + return - Random value or `Error` if start range is greater than the end range\n+# + return - Selected random value or `Error` if start range is greater than the end range", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyOTE1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Calculates rounded positive square root of the given value.\n          \n          \n            \n            # Calculates the rounded positive square root of the given value.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406629159", "createdAt": "2020-04-10T06:54:20Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/natives.bal", "diffHunk": "@@ -75,10 +87,13 @@ function externRandomInRange(int startRange, int endRange) returns int|Error = @\n     class: \"org.ballerinalang.stdlib.math.nativeimpl.ExternMethods\"\n } external;\n \n-# Returns rounded positive square root of the given value.\n-#\n+# Calculates rounded positive square root of the given value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyOTE5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + val - Value to get square root\n          \n          \n            \n            # + val - Value to get the square root", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406629193", "createdAt": "2020-04-10T06:54:29Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/natives.bal", "diffHunk": "@@ -75,10 +87,13 @@ function externRandomInRange(int startRange, int endRange) returns int|Error = @\n     class: \"org.ballerinalang.stdlib.math.nativeimpl.ExternMethods\"\n } external;\n \n-# Returns rounded positive square root of the given value.\n-#\n+# Calculates rounded positive square root of the given value.\n+# ```ballerina\n+# float squareRoot = math:sqrt(6.4);\n+# ```\n+# \n # + val - Value to get square root", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyOTI1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + val - Value to get absolute value\n          \n          \n            \n            # + val - Value to get the absolute value", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406629251", "createdAt": "2020-04-10T06:54:42Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/natives.bal", "diffHunk": "@@ -88,10 +103,13 @@ function externSqrt(float val) returns float = @java:Method {\n     class: \"java.lang.Math\"\n } external;\n \n-# Returns the absolute value of a float value.\n-#\n+# Calculates the absolute value of a float value.\n+# ```ballerina\n+# float absoluteFloatValue = math:absFloat(-152.2544);\n+# ```\n+# \n # + val - Value to get absolute value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyOTM5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Calculates the arc cosine of a value; the returned angle is in the range 0.0 through pi.\n          \n          \n            \n            # Calculates the arc cosine of a value. The returned angle is in the range 0.0 through pi.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406629391", "createdAt": "2020-04-10T06:55:10Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/natives.bal", "diffHunk": "@@ -116,10 +137,13 @@ function externAbsInt(int val) returns int = @java:Method {\n     paramTypes: [\"long\"]\n } external;\n \n-# Returns the arc cosine of a value; the returned angle is in the range 0.0 through pi.\n-#\n+# Calculates the arc cosine of a value; the returned angle is in the range 0.0 through pi.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyOTQ3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Calculates arc sine value\n          \n          \n            \n            # + return - Calculated arc sine value", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406629475", "createdAt": "2020-04-10T06:55:29Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/natives.bal", "diffHunk": "@@ -129,10 +153,13 @@ function externAcos(float val) returns float = @java:Method {\n     class: \"java.lang.Math\"\n } external;\n \n-# Returns the arc sine of a value.\n-#\n+# Calculates the arc sine of a value.\n+# ```ballerina\n+# float arcSineValue = math:asin(0.027415567780803774);\n+# ```\n+# \n # + val - Value to get the arc sine\n-# + return - Arc sine value\n+# + return - Calculates arc sine value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyOTU2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Calculates the angle theta from the conversion of rectangular coordinates (a, b) to polar coordinates (r, theta).\n          \n          \n            \n            # Calculates the angle theta from the conversion of the rectangular coordinates (a, b) to polar coordinates (r, theta).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406629568", "createdAt": "2020-04-10T06:55:47Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/natives.bal", "diffHunk": "@@ -155,11 +185,14 @@ function externAtan(float val) returns float = @java:Method {\n     class: \"java.lang.Math\"\n } external;\n \n-# Returns the angle theta from the conversion of rectangular coordinates (a, b) to polar coordinates (r, theta).\n-#\n-# + a - The ordinate coordinate\n-# + b - The abscissa coordinate\n-# + return - The result\n+# Calculates the angle theta from the conversion of rectangular coordinates (a, b) to polar coordinates (r, theta).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyOTc3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + val - Number whose hyperbolic cosine is to be returned\n          \n          \n            \n            # + val - Number of which the hyperbolic cosine is to be returned", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406629774", "createdAt": "2020-04-10T06:56:39Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/natives.bal", "diffHunk": "@@ -224,10 +269,13 @@ function externCos(float val) returns float = @java:Method {\n     class: \"java.lang.Math\"\n } external;\n \n-# Returns the hyperbolic cosine of a float value.\n-#\n-# + val - The number whose hyperbolic cosine is to be returned\n-# + return - The hyperbolic cosine of given float value\n+# Calculates the hyperbolic cosine of a float value.\n+# ```ballerina\n+# float hyperbolicCosineValue = math:cosh(0.3124);\n+# ```\n+# \n+# + val - Number whose hyperbolic cosine is to be returned", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "originalPosition": 295}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyOTgxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Calculated hyperbolic cosine of given float value\n          \n          \n            \n            # + return - Calculated hyperbolic cosine of the given float value", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406629815", "createdAt": "2020-04-10T06:56:48Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/natives.bal", "diffHunk": "@@ -224,10 +269,13 @@ function externCos(float val) returns float = @java:Method {\n     class: \"java.lang.Math\"\n } external;\n \n-# Returns the hyperbolic cosine of a float value.\n-#\n-# + val - The number whose hyperbolic cosine is to be returned\n-# + return - The hyperbolic cosine of given float value\n+# Calculates the hyperbolic cosine of a float value.\n+# ```ballerina\n+# float hyperbolicCosineValue = math:cosh(0.3124);\n+# ```\n+# \n+# + val - Number whose hyperbolic cosine is to be returned\n+# + return - Calculated hyperbolic cosine of given float value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "originalPosition": 296}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyOTkwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + val - Exponent to raise e to in the computation\n          \n          \n            \n            # + val - Exponent to raise e in the computation", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406629903", "createdAt": "2020-04-10T06:57:09Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/natives.bal", "diffHunk": "@@ -237,10 +285,13 @@ function externCosh(float val) returns float = @java:Method {\n     class: \"java.lang.Math\"\n } external;\n \n-# Returns (e to the power of x) -1.\n-#\n-# + val - The exponent to raise e to in the computation\n-# + return - The result\n+# Calculates (e to the power of x) -1.\n+# ```ballerina\n+# float exponentValue = math:expm1(6.4);\n+# ```\n+# \n+# + val - Exponent to raise e to in the computation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "originalPosition": 313}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMDA1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + a - dividend\n          \n          \n            \n            # + a - Dividend", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406630058", "createdAt": "2020-04-10T06:57:38Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/natives.bal", "diffHunk": "@@ -278,11 +335,14 @@ function externFloorDiv(int a, int b) returns int|Error = @java:Method {\n     class: \"org.ballerinalang.stdlib.math.nativeimpl.ExternMethods\"\n } external;\n \n-# Returns the floor modulus of the long arguments.\n-#\n-# + a - The dividend\n-# + b - The divisor\n-# + return - The result or `Error` if b is 0\n+# Calculates the floor modulus of the long arguments.\n+# ```ballerina\n+# int|error floorModulesValue = math:floorMod(6, 4);\n+# ```\n+# \n+# + a - dividend", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "originalPosition": 370}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMDExNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + b - divisor\n          \n          \n            \n            # + b - Divisor", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406630114", "createdAt": "2020-04-10T06:57:46Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/natives.bal", "diffHunk": "@@ -278,11 +335,14 @@ function externFloorDiv(int a, int b) returns int|Error = @java:Method {\n     class: \"org.ballerinalang.stdlib.math.nativeimpl.ExternMethods\"\n } external;\n \n-# Returns the floor modulus of the long arguments.\n-#\n-# + a - The dividend\n-# + b - The divisor\n-# + return - The result or `Error` if b is 0\n+# Calculates the floor modulus of the long arguments.\n+# ```ballerina\n+# int|error floorModulesValue = math:floorMod(6, 4);\n+# ```\n+# \n+# + a - dividend\n+# + b - divisor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "originalPosition": 371}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMDE3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Calculated floor modulus or `Error` if b is 0\n          \n          \n            \n            # + return - Calculated floor modulus or else `Error` if b is 0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406630179", "createdAt": "2020-04-10T06:57:55Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/natives.bal", "diffHunk": "@@ -278,11 +335,14 @@ function externFloorDiv(int a, int b) returns int|Error = @java:Method {\n     class: \"org.ballerinalang.stdlib.math.nativeimpl.ExternMethods\"\n } external;\n \n-# Returns the floor modulus of the long arguments.\n-#\n-# + a - The dividend\n-# + b - The divisor\n-# + return - The result or `Error` if b is 0\n+# Calculates the floor modulus of the long arguments.\n+# ```ballerina\n+# int|error floorModulesValue = math:floorMod(6, 4);\n+# ```\n+# \n+# + a - dividend\n+# + b - divisor\n+# + return - Calculated floor modulus or `Error` if b is 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "originalPosition": 372}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMDMyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Calculates sqrt(a squared +b squared) without intermediate overflow or underflow.\n          \n          \n            \n            # Calculates sqrt(a squared +b squared) without an intermediate overflow or underflow.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406630327", "createdAt": "2020-04-10T06:58:21Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/natives.bal", "diffHunk": "@@ -306,11 +369,14 @@ function externGetExponent(float val) returns int = @java:Method {\n     paramTypes: [\"double\"]\n } external;\n \n-# Returns sqrt(a squared +b squared) without intermediate overflow or underflow.\n-#\n+# Calculates sqrt(a squared +b squared) without intermediate overflow or underflow.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "originalPosition": 399}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMDQwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + a - dividend\n          \n          \n            \n            # + a - Dividend", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406630409", "createdAt": "2020-04-10T06:58:36Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/natives.bal", "diffHunk": "@@ -321,10 +387,13 @@ function externHypot(float a, float b) returns float = @java:Method {\n } external;\n \n # Computes the remainder operation on two arguments as prescribed by the IEEE 754 standard.\n-#\n-# + a - The dividend\n-# + b - The divisor\n-# + return - The remainder when a is divided by b\n+# ```ballerina\n+# float remainderValue = math:remainder(6.4, 3.6);\n+# ```\n+# \n+# + a - dividend", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "originalPosition": 423}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMDQzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + b - divisor\n          \n          \n            \n            # + b - Divisor", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406630439", "createdAt": "2020-04-10T06:58:43Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/natives.bal", "diffHunk": "@@ -321,10 +387,13 @@ function externHypot(float a, float b) returns float = @java:Method {\n } external;\n \n # Computes the remainder operation on two arguments as prescribed by the IEEE 754 standard.\n-#\n-# + a - The dividend\n-# + b - The divisor\n-# + return - The remainder when a is divided by b\n+# ```ballerina\n+# float remainderValue = math:remainder(6.4, 3.6);\n+# ```\n+# \n+# + a - dividend\n+# + b - divisor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "originalPosition": 424}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMDY1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Calculated negation value or `Error` if overflow occurred\n          \n          \n            \n            # + return - Calculated negation value or else `Error` if an overflow occurred", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406630655", "createdAt": "2020-04-10T06:59:25Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/natives.bal", "diffHunk": "@@ -373,10 +451,13 @@ function externLog1p(float val) returns float = @java:Method {\n     class: \"java.lang.Math\"\n } external;\n \n-# Returns the negation of the argument.\n-#\n-# + val - The value to negate\n-# + return - The result or `Error` if overflow occurred\n+# Calculates the negation of the argument.\n+# ```ballerina\n+# int|error negationValue = math:negateExact(6);\n+# ```\n+# \n+# + val - value to negate\n+# + return - Calculated negation value or `Error` if overflow occurred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "originalPosition": 494}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMDg5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + b - Value indicating which of start's neighbors or start should be returned\n          \n          \n            \n            # + b - Value indicating which neighbour to start from or start should be returned", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406630890", "createdAt": "2020-04-10T07:00:15Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/natives.bal", "diffHunk": "@@ -386,11 +467,14 @@ function externNegateExact(int val) returns int|Error = @java:Method {\n     class: \"org.ballerinalang.stdlib.math.nativeimpl.ExternMethods\"\n } external;\n \n-# Returns the floating-point number adjacent to the first argument in the direction of the second argument.\n-#\n+# Calculates the floating-point number adjacent to the first argument in the direction of the second argument.\n+# ```ballerina\n+# float nextAfterValue = math:nextAfter(6.4, 3.4);\n+# ```\n+# \n # + a - Starting floating-point value\n # + b - Value indicating which of start's neighbors or start should be returned", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "originalPosition": 510}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMDk5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Calculates the adjacent floating-point value closer to negative infinity.\n          \n          \n            \n            # Calculates the adjacent floating-point value closer to the negative infinity.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406630994", "createdAt": "2020-04-10T07:00:38Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/natives.bal", "diffHunk": "@@ -401,10 +485,13 @@ function externNextAfter(float a, float b) returns float = @java:Method {\n     paramTypes: [\"double\", \"double\"]\n } external;\n \n-# Returns the adjacent floating-point value closer to negative infinity.\n-#\n+# Calculates the adjacent floating-point value closer to negative infinity.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "originalPosition": 522}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMTA1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Calculates the adjacent floating-point value closer to positive infinity.\n          \n          \n            \n            # Calculates the adjacent floating-point value closer to the positive infinity.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406631053", "createdAt": "2020-04-10T07:00:50Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/natives.bal", "diffHunk": "@@ -415,10 +502,13 @@ function externNextDown(float val) returns float = @java:Method {\n     paramTypes: [\"double\"]\n } external;\n \n-# Returns the adjacent floating-point value closer to positive infinity.\n-#\n+# Calculates the adjacent floating-point value closer to positive infinity.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "originalPosition": 539}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMTEwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Calculates floating-point value\n          \n          \n            \n            # + return - Calculated floating-point value", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406631100", "createdAt": "2020-04-10T07:01:00Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/natives.bal", "diffHunk": "@@ -415,10 +502,13 @@ function externNextDown(float val) returns float = @java:Method {\n     paramTypes: [\"double\"]\n } external;\n \n-# Returns the adjacent floating-point value closer to positive infinity.\n-#\n+# Calculates the adjacent floating-point value closer to positive infinity.\n+# ```ballerina\n+# float nextUpValue = math:nextUp(6.4);\n+# ```\n+# \n # + val - Starting floating-point value\n-# + return - The result\n+# + return - Calculates floating-point value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "originalPosition": 546}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMTE3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Calculates the closest int to the argument, with ties rounding to positive infinity.\n          \n          \n            \n            # Calculates the closest int to the argument with ties rounding to the positive infinity.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406631171", "createdAt": "2020-04-10T07:01:20Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/natives.bal", "diffHunk": "@@ -442,10 +535,13 @@ function externRint(float val) returns float = @java:Method {\n     class: \"java.lang.Math\"\n } external;\n \n-# Returns the closest int to the argument, with ties rounding to positive infinity.\n-#\n+# Calculates the closest int to the argument, with ties rounding to positive infinity.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "originalPosition": 573}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMTI4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Calculates a \u00d7 (2 to the power of b) rounded as if performed by a single correctly rounded floating-point\n          \n          \n            \n            # Calculates a \u00d7 (2 to the power of b) rounded as if performed by a single correctly-rounded floating-point", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406631285", "createdAt": "2020-04-10T07:01:42Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/natives.bal", "diffHunk": "@@ -456,12 +552,15 @@ function externRound(float val) returns int = @java:Method {\n     paramTypes: [\"double\"]\n } external;\n \n-# Returns a \u00d7 (2 to the power of b) rounded as if performed by a single correctly rounded floating-point\n+# Calculates a \u00d7 (2 to the power of b) rounded as if performed by a single correctly rounded floating-point", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "originalPosition": 589}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMTQyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # multiply to a member of the float value set.\n          \n          \n            \n            # by multiplying it with a member of the float value set.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406631423", "createdAt": "2020-04-10T07:02:13Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/natives.bal", "diffHunk": "@@ -456,12 +552,15 @@ function externRound(float val) returns int = @java:Method {\n     paramTypes: [\"double\"]\n } external;\n \n-# Returns a \u00d7 (2 to the power of b) rounded as if performed by a single correctly rounded floating-point\n+# Calculates a \u00d7 (2 to the power of b) rounded as if performed by a single correctly rounded floating-point\n # multiply to a member of the float value set.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "originalPosition": 590}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMTUzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + val - floating-point value whose signum is to be returned\n          \n          \n            \n            # + val - floating-point value of which the signum is to be returned", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406631532", "createdAt": "2020-04-10T07:02:36Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/natives.bal", "diffHunk": "@@ -471,10 +570,13 @@ function externScalb(float a, int b) returns float = @java:Method {\n     class: \"org.ballerinalang.stdlib.math.nativeimpl.ExternMethods\"\n } external;\n \n-# Returns the signum function of the argument.\n-#\n-# + val - The floating-point value whose signum is to be returned\n-# + return - The signum function of the argument\n+# Calculates the signum function of the argument.\n+# ```ballerina\n+# float signumValue = math:signum(6.4);\n+# ```\n+# \n+# + val - floating-point value whose signum is to be returned", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "originalPosition": 616}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMTYwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + val - An angle, in radians\n          \n          \n            \n            # + val - An angle in radians", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406631605", "createdAt": "2020-04-10T07:02:49Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/natives.bal", "diffHunk": "@@ -485,10 +587,13 @@ function externSignum(float val) returns float = @java:Method {\n     paramTypes: [\"double\"]\n } external;\n \n-# Returns the trigonometric sine of an angle.\n-#\n+# Calculates the trigonometric sine of an angle.\n+# ```ballerina\n+# float sineValue = math:sin(0.96);\n+# ```\n+# \n # + val - An angle, in radians", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "originalPosition": 632}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMTY3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + val - Number whose hyperbolic sine is to be returned\n          \n          \n            \n            # + val - Number of which the hyperbolic sine is to be returned", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406631674", "createdAt": "2020-04-10T07:03:02Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/natives.bal", "diffHunk": "@@ -498,10 +603,13 @@ function externSin(float val) returns float = @java:Method {\n     class: \"java.lang.Math\"\n } external;\n \n-# Returns the hyperbolic sine of a float value.\n-#\n-# + val - The number whose hyperbolic sine is to be returned\n-# + return - The hyperbolic sine of a given float\n+# Calculates the hyperbolic sine of a float value.\n+# ```ballerina\n+# float hyperbolicSineValue = math:sinh(0.96);\n+# ```\n+# \n+# + val - Number whose hyperbolic sine is to be returned", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "originalPosition": 651}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMTcxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + val - An angle, in radians\n          \n          \n            \n            # + val - An angle in radians", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406631712", "createdAt": "2020-04-10T07:03:13Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/natives.bal", "diffHunk": "@@ -511,10 +619,13 @@ function externSinh(float val) returns float = @java:Method {\n     class: \"java.lang.Math\"\n } external;\n \n-# Returns the trigonometric tangent of an angle.\n-#\n+# Calculates the trigonometric tangent of an angle.\n+# ```ballerina\n+# float tanValue = math:tan(0.96);\n+# ```\n+# \n # + val - An angle, in radians", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "originalPosition": 667}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMTc2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + val - Number whose hyperbolic tangent is to be returned\n          \n          \n            \n            # + val - Number of which the hyperbolic tangent is to be returned", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406631761", "createdAt": "2020-04-10T07:03:25Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/natives.bal", "diffHunk": "@@ -524,10 +635,13 @@ function externTan(float val) returns float = @java:Method {\n     class: \"java.lang.Math\"\n } external;\n \n-# Returns the hyperbolic tangent of a double value.\n-#\n-# + val - The number whose hyperbolic tangent is to be returned\n-# + return - The hyperbolic tangent of x\n+# Calculates the hyperbolic tangent of a double value.\n+# ```ballerina\n+# float hyperbolicTanValue = math:tanh(0.96);\n+# ```\n+# \n+# + val - Number whose hyperbolic tangent is to be returned", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "originalPosition": 686}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMTg0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + val - An angle, in radians\n          \n          \n            \n            # + val - An angle in radians", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406631842", "createdAt": "2020-04-10T07:03:38Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/natives.bal", "diffHunk": "@@ -538,9 +652,12 @@ function externTanh(float val) returns float = @java:Method {\n } external;\n \n # Converts an angle measured in radians to an approximately equivalent angle measured in degrees.\n-#\n+# ```ballerina\n+# float angleValueInDegrees = math:toDegrees(0.96);\n+# ```\n+# \n # + val - An angle, in radians", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "originalPosition": 700}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMTk3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + val - An angle, in degrees\n          \n          \n            \n            # + val - An angle in degrees", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406631973", "createdAt": "2020-04-10T07:04:06Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/natives.bal", "diffHunk": "@@ -551,9 +668,12 @@ function externToDegrees(float val) returns float = @java:Method {\n } external;\n \n # Converts an angle measured in degrees to an approximately equivalent angle measured in radians.\n-#\n+# ```ballerina\n+# float angleValueInRadians = math:toRadians(0.96);\n+# ```\n+# \n # + val - An angle, in degrees", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "originalPosition": 715}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMjA3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + val - Floating-point value whose ulp is to be returned\n          \n          \n            \n            # + val - Floating-point value of which the ulp is to be returned", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406632071", "createdAt": "2020-04-10T07:04:25Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/natives.bal", "diffHunk": "@@ -564,9 +684,12 @@ function externToRadians(float val) returns float = @java:Method {\n } external;\n \n # Returns the size of an ulp of the argument.\n-#\n-# + val - The floating-point value whose ulp is to be returned\n-# + return - The size of an ulp of the argument\n+# ```ballerina\n+# float ulpValue = math:ulp(0.96);\n+# ```\n+# \n+# + val - Floating-point value whose ulp is to be returned", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "875649b11ec1db0d52005ba582f8950440d95fe3"}, "originalPosition": 732}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4aa89e9a9dd04e23c372ecb91501c5b61f5f3ce0", "author": {"user": {"login": "MadhukaHarith92", "name": "Madhuka Harith Wickramapala"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4aa89e9a9dd04e23c372ecb91501c5b61f5f3ce0", "committedDate": "2020-04-10T07:14:52Z", "message": "Refactor maths api docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMzA5ODAw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#pullrequestreview-391309800", "createdAt": "2020-04-10T07:37:52Z", "commit": {"oid": "bc787cc6b832cc96c5b8eb8ff270c5ea46f83029"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMzEwMjk0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#pullrequestreview-391310294", "createdAt": "2020-04-10T07:39:04Z", "commit": {"oid": "bc787cc6b832cc96c5b8eb8ff270c5ea46f83029"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzozOTowNFrOGDzhoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzozOTowNFrOGDzhoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0MzEwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For information on the operation, which you can perform with this module, see the below Function. For examples on the usage of the operation, see [Math Api](https://ballerina.io/v1-1/learn/by-example/math-functions.html).\n          \n          \n            \n            For information on the operation, which you can perform with this module, see the below **Functions**. For examples on the usage of the operation, see the [Math Example](https://ballerina.io/v1-1/learn/by-example/math-functions.html).", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#discussion_r406643105", "createdAt": "2020-04-10T07:39:04Z", "author": {"login": "praneesha"}, "path": "stdlib/math/src/main/ballerina/src/math/Module.md", "diffHunk": "@@ -1,44 +1,3 @@\n-## Module overview\n-\n This module provides functions to perform fixed-precision integer arithmetic and fixed-precision decimal arithmetic. It includes functions to get the absolute, cosine, sine, root, tangent, and more for a given value.\n \n-## Sample\n-The sample given below uses a few functions that are in the `ballerina/math` module.\n-\n-```ballerina\n-import ballerina/io;\n-import ballerina/math;\n-\n-public function main(string... args) {\n-\n-   // Get the value of Pi from the \u2018ballerina/math module\u2019.\n-   io:println(\"Value of Pi : \", math:PI.toString());\n-\n-   // Get the value of E from the \u2018ballerina/math module\u2019.\n-   io:println(\"Value of E  : \", math:E.toString());\n-\n-   // Get the absolute value of the given floating point number. \n-   float absoluteFloatValue = math:absFloat(-152.2544);\n-   io:println(\"Absolute value of -152.2544 : \", absoluteFloatValue.toString());\n-\n-   // Get the absolute value of an integer.\n-   int absoluteIntValue = math:absInt(-152);\n-   io:println(\"Absolute value of -152 : \", absoluteIntValue.toString());\n-\n-   // Get the Arc cosine of a given value.\n-   float acosValue = math:acos(0.027415567780803774);\n-   io:println(\"Arc cosine of 0.027415567780803774 : \", acosValue.toString());\n-\n-   // Get the Arc Sine value of a given value.\n-   float arcSineValue = math:asin(0.027415567780803774);\n-   io:println(\"Arc sine of 0.027415567780803774 : \", arcSineValue.toString());\n-\n-   // Get the Arc Tangent value of a given value.\n-   float arcTangent = math:atan(0.027415567780803774);\n-   io:println(\"Arc tangent of 0.027415567780803774 : \", arcTangent.toString());\n-\n-   // Calculate the cubic root of a given value.\n-   float cubeRoot = math:cbrt(-27);\n-   io:println(\"Cube root of -27 : \", cubeRoot.toString());\n-}\n-```\n+For information on the operation, which you can perform with this module, see the below Function. For examples on the usage of the operation, see [Math Api](https://ballerina.io/v1-1/learn/by-example/math-functions.html).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc787cc6b832cc96c5b8eb8ff270c5ea46f83029"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMzEzNDgw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22542#pullrequestreview-391313480", "createdAt": "2020-04-10T07:46:42Z", "commit": {"oid": "d84492cbd167235d8370b05b7316c1d8d9c36f75"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7db5c0f33c009296226c4397d3835bc1fc07577", "author": {"user": {"login": "MadhukaHarith92", "name": "Madhuka Harith Wickramapala"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b7db5c0f33c009296226c4397d3835bc1fc07577", "committedDate": "2020-04-10T11:17:26Z", "message": "Update BBE url"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3811, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}