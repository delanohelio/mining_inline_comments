{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNjUwMjc0", "number": 21308, "title": "Implement Ballerina Cache API (v2.0.0) [master]", "bodyText": "Purpose\nThis PR introduces the Ballerina Cache API v2.0.0.\nDiscussion related to the design: https://groups.google.com/d/msg/ballerina-dev/Im0BpGqwBhU/zuIdkZ9FBQAJ\nSummary\nThe AbstractCache object which has the common APIs as follows and there can be \"custom implementations\" with different data storage like file, database etc. with structural equivalent to the abstract object.\npublic type AbstractCache abstract object {\n    public function put(string key, any value, int maxAgeInSeconds) returns Error?;\n    public function get(string key) returns any|Error;\n    public function invalidate(string key) returns Error?;\n    public function invalidateAll() returns Error?;\n    public function hasKey(string key) returns boolean;\n    public function keys() returns string[];\n    public function size() returns int;\n    public function capacity() returns int;\n};\nThe AbstractEvictionPolicy object which has the common APIs as follows and there can be \"custom implementations\" with different eviction algorithms with structural equivalent to the abstract object. That custom implementation has to maintain the LinkedList data structure according to the eviction algorithm.\npublic type AbstractEvictionPolicy abstract object {\n    public function get(LinkedList list, Node node);\n    public function put(LinkedList list, Node node);\n    public function remove(LinkedList list, Node node);\n    public function replace(LinkedList list, Node newNode, Node oldNode);\n    public function clear(LinkedList list);\n    public function evict(LinkedList list) returns Node?;\n};\nThe Ballerina Cache module provides a Cache object, which is a map data structure based implementation of the AbstractCache object. It is not recommended to insert () as the value of the cache since it doesn't make any sense to cache a nil. Also, it provides the LruEvictionPolicy object, which is based on the LRU eviction algorithm.\nWhile initializing the Cache, the developer have to pass the following parameters as the cache configurations.\n\ncapacity - Max number of entries allowed for the cache\nevictionPolicy - The policy which defines the cache eviction algorithm\nevictionFactor - The factor which the entries will be evicted once the cache full\ndefaultMaxAgeInSeconds - Freshness time of all the cache entries in seconds. This value can be overwritten by the maxAgeInSeconds property, when inserting entry to cache. '-1' means, the entries are valid forever.\ncleanupIntervalInSeconds - The interval time of the timer task which cleans the cache entries. This is an optional parameter.\n\nFor the better user experience the above config is initialized with default values as follows:\npublic type CacheConfig record {|\n    int capacity = 100;\n    AbstractEvictionPolicy evictionPolicy = new LruEvictionPolicy();\n    float evictionFactor = 0.25;\n    int defaultMaxAgeInSeconds = -1;\n    int cleanupIntervalInSeconds?;\n|};\nDiscussion\nThere are 2 mandatory scenarios + 1 optional scenario where a cache entry get removed from the cache and maintain the freshness of the cache entries. The 2 independent factors which are eviction policy & freshness time of the cache entry governs the 3 scenarios.\n\nWhen using the get API, if the return cache entry has expired, it get removed.\nWhen using the put API, if the cache size has reached its capacity, number of entries get removed based on the 'eviction policy' and 'eviction factor'.\nIf cleanupIntervalInSeconds (optional property) is configured, the timer task will remove the expired cache entries based on the configured interval.\n\nThe main benefit of using the cleanupIntervalInSeconds optional property is that the developer can optimize memory usage while adding some additional CPU costs and vice versa. The default behavior is the CPU optimized method.\nThe concept of the Cache object is purely based on the Ballerina map data structure and a linked list data structure. Please refer the mail https://groups.google.com/d/msg/ballerina-dev/DOsQyUqrCe0/ii-vkSXHAAAJ. The key of the map entry would be a string and the value of the map entry would be a node of the linked list.\npublic type Node record {|\n    any value;\n    Node? prev = ();\n    Node? next = ();\n|};\nWhile using the cache, a CacheEntry record will be created and added as the value of the Node record. Node record will be inserted into the map data structure against the provided string key.\ntype CacheEntry record {|\n    string key;\n    any data;\n    int expTime;\n|};\nThe linked list data structure is purely used for the eviction of the cache. According to the user configured eviction policy, when inserting / updating / retrieving cache entries, the linked list data structure should get updated. Therefore, when eviction happens, cache entries can be removed efficiently, without iterating the complete map data structure.\nExample: If the eviction policy is LRU, always the MRU item will be the head of the linked list. When eviction happens, nodes from the tail will be deleted without iterating the map.\nFurther, developers can implement a custom caching implementations based on different cache storage mechanisms (file, database etc.) and different eviction policies (MRU, FIFO etc.) as they wish. Ballerina provides a \"map-based cache\" as the default cache implementation.\nImplementation\nThis implementation introduces the v2.0.0. of the Ballerina cache API and it replaces all the current usages of the cache. This will be released with Ballerina v1.2.0.\nWith this cache v2.0.0 we were able to gain average 3x performance improvement compared to cache v1.0.0.\nSamples\nCache Initialization\nA basic sample cache of 100 capacity, which uses LRU as the eviction policy and eviction factor is 0.25 is as follows:\ncache:Cache cache = new;\nA basic sample cache of 1000 capacity, the eviction factor is 0.2, cache entry default freshness time as 1 hour, and clean up timer configured with 5 seconds interval  is as follows:\ncache:Cache cache = new({\n    capacity: 1000,\n    evictionFactor: 0.2,\n    defaultMaxAgeInSeconds: 3600\n    cleanupIntervalInSeconds: 5\n});\nAn advanced sample cache which uses a custom eviction policy along with the default capacity, eviction factor, max age and cleanup interval is as follows:\npublic type CustomEvictionPolicy object {\n    *cache:AbstractEvictionPolicy;\n    public function get(LinkedList list, Node node) { // custom implementation }\n    public function put(LinkedList list, Node node) { // custom implementation }\n    public function remove(LinkedList list, Node node) { // custom implementation }\n    public function replace(LinkedList list, Node newNode, Node oldNode) { // custom implementation }\n    public function clear(LinkedList list) { // custom implementation }\n    public function evict(LinkedList list) returns Node? { // custom implementation }\n}\n\ncache:Cache cache = new({\n    capacity: 1000,\n    evictionPolicy: new CustomEvictionPolicy()\n});\nCache Usage\nThe simple way of using the initialized cache without handling errors is as follows:\n_ = check cache.put(\"key1\", \"value1\");\nstring value = <string> check cache.get(\"key1\");\n_ = check cache.invalidate(\"key1\");\n_ = check cache.invalidateAll();\nboolean hasKey = cache.hasKey(\"key1\");\nstring[] keys = cache.keys();\nint size = cache.size();\nint capacity = cache.capacity();\nThe advanced way of using the initialized cache with error handling is as follows:\ncache:Error? result = cache.put(\"key1\", \"value1\");\nif (result is cache:Error) {\n    // implement what to do, if any error happen when inserting item to cache\n}\n\nany|cache:Error result = cache.get(\"key1\");\nif (result is cache:Error) {\n    // implement what to do, if any error happen when retrieving item from the cache\n}\nstring value = <string>result;\n\ncache:Error? result = check cache.invalidate(\"key1\");\nif (result is cache:Error) {\n    // implement what to do, if any error happen when discarding item from the cache\n}\n\ncache:Error? result = check cache.invalidateAll();\nif (result is cache:Error) {\n    // implement what to do, if any error happen when discarding item from the cache\n}\n\nboolean hasKey = cache.hasKey(\"key1\");\n\nstring[] keys = cache.keys();\n\nint size = cache.size();\n\nint capacity = cache.capacity();\nReferences\nThe design was influenced by https://github.com/chethiya/ballerina-cache by @chethiya\nRelated Discussions:\nhttps://groups.google.com/d/msg/ballerina-dev/2aECiDPnL6A/5s9XmoG2AAAJ\nhttps://groups.google.com/d/msg/ballerina-dev/4VkPqATJ1tI/63PW3MR0DgAJ\nRelated Resource:\nhttps://en.wikipedia.org/wiki/Cache_replacement_policies\nhttps://guava.dev/releases/21.0/api/docs/com/google/common/cache/Cache.html\nhttp://chethiya.github.io/ballerina-lru-cache.html\nhttps://github.com/chethiya/ballerina-cache/blob/master/src/cache/lru-cache.bal\nhttps://www.geeksforgeeks.org/lru-cache-implementation/\nhttps://www.interviewcake.com/concept/java/lru-cache\nhttps://stackoverflow.com/questions/2504178/lru-cache-design\nFixes #21051\nFixes #19187\nFixes #19557\nFixes #19487\nFixes #20614\nFixes #21545\nFixes #21302\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-02-27T05:47:48Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308", "merged": true, "mergeCommit": {"oid": "17497e9a18e4f920a67f443a15dea128b4f15f5e"}, "closed": true, "closedAt": "2020-03-11T08:18:48Z", "author": {"login": "ldclakmal"}, "timelineItems": {"totalCount": 64, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHrtkzgH2gAyMzgwNjUwMjc0OjlhOThjZDYzMTQzZGI1MjdjZjlmMWM5NTAyMzI1MjNhYTE1ZGVjMmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMisj0gFqTM3MjU0NjgzNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9a98cd63143db527cf9f1c950232523aa15dec2b", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9a98cd63143db527cf9f1c950232523aa15dec2b", "committedDate": "2020-02-25T05:59:15Z", "message": "Implement linked list data structure"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "660607a95768816b9d1ad83ba9a994e69cd81123", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/660607a95768816b9d1ad83ba9a994e69cd81123", "committedDate": "2020-03-01T02:51:07Z", "message": "Update unit tests"}, "afterCommit": {"oid": "639ae76c7fdb18a363aea23460b75a6ff3fd4991", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/639ae76c7fdb18a363aea23460b75a6ff3fd4991", "committedDate": "2020-03-01T03:30:25Z", "message": "Update unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0915eecd728269c24aa4f4695325602557e74b97", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0915eecd728269c24aa4f4695325602557e74b97", "committedDate": "2020-03-01T03:33:22Z", "message": "Implement ballerina cache v2\n\nImplement ballerina cache v2\n\nRemove linked list print function\n\nFix a bug in max-age time\n\nRefactor cache api\n\nImplement task scheduler for cache cleanup\n\nRefactor code\n\nAdd ballerina documentations\n\nAdd developer comments\n\nRefactor code\n\nFix bugs\n\nImplement FIFO eviction policy\n\nUpdate documentations\n\nAdd default max-age property\n\nAdd ballerina docs for abstract object\n\nUpdate cache version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb188894414745c701b2f9b16d2b0f186c5a9b54", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eb188894414745c701b2f9b16d2b0f186c5a9b54", "committedDate": "2020-03-01T03:33:27Z", "message": "Remove cache v1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "639ae76c7fdb18a363aea23460b75a6ff3fd4991", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/639ae76c7fdb18a363aea23460b75a6ff3fd4991", "committedDate": "2020-03-01T03:30:25Z", "message": "Update unit tests"}, "afterCommit": {"oid": "35a4b8b587b5b466722e0b9bf98330f064f619e5", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/35a4b8b587b5b466722e0b9bf98330f064f619e5", "committedDate": "2020-03-01T03:33:28Z", "message": "Update unit tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "35a4b8b587b5b466722e0b9bf98330f064f619e5", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/35a4b8b587b5b466722e0b9bf98330f064f619e5", "committedDate": "2020-03-01T03:33:28Z", "message": "Update unit tests"}, "afterCommit": {"oid": "4ddb1e046bd176ecfd504b67b6eb7f84e66ac338", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4ddb1e046bd176ecfd504b67b6eb7f84e66ac338", "committedDate": "2020-03-01T03:36:36Z", "message": "Update unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77c6e35bb919344a044890ce51922445cdd445a5", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/77c6e35bb919344a044890ce51922445cdd445a5", "committedDate": "2020-03-01T03:56:38Z", "message": "Update unit tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4ddb1e046bd176ecfd504b67b6eb7f84e66ac338", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4ddb1e046bd176ecfd504b67b6eb7f84e66ac338", "committedDate": "2020-03-01T03:36:36Z", "message": "Update unit tests"}, "afterCommit": {"oid": "dd8ee0248c87b22cd85472122629ccbd78a46bd3", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dd8ee0248c87b22cd85472122629ccbd78a46bd3", "committedDate": "2020-03-01T07:17:53Z", "message": "Update cache module usages"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f35e2f009aa4b9a7d028148bf19412ebcc8ece75", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f35e2f009aa4b9a7d028148bf19412ebcc8ece75", "committedDate": "2020-03-01T16:09:57Z", "message": "Fix a concurrency issue"}, "afterCommit": {"oid": "185eec37922b6990d19b754c37fa9749a67f7b8e", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/185eec37922b6990d19b754c37fa9749a67f7b8e", "committedDate": "2020-03-01T16:18:17Z", "message": "Fix a concurrency issue"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "185eec37922b6990d19b754c37fa9749a67f7b8e", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/185eec37922b6990d19b754c37fa9749a67f7b8e", "committedDate": "2020-03-01T16:18:17Z", "message": "Fix a concurrency issue"}, "afterCommit": {"oid": "a004d0e7a87edbbbe76f58cb9b5191d93dd12bf8", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a004d0e7a87edbbbe76f58cb9b5191d93dd12bf8", "committedDate": "2020-03-01T16:32:07Z", "message": "Fix a concurrency issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4e5274977b2ba3db402cd10a2941021d36d9c04", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f4e5274977b2ba3db402cd10a2941021d36d9c04", "committedDate": "2020-03-01T17:42:26Z", "message": "Update cache module usages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bed6b44fa3c7fcf7488a9e8e7775da050bf1fc3b", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bed6b44fa3c7fcf7488a9e8e7775da050bf1fc3b", "committedDate": "2020-03-01T17:42:39Z", "message": "Fix a concurrency issue"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a004d0e7a87edbbbe76f58cb9b5191d93dd12bf8", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a004d0e7a87edbbbe76f58cb9b5191d93dd12bf8", "committedDate": "2020-03-01T16:32:07Z", "message": "Fix a concurrency issue"}, "afterCommit": {"oid": "bed6b44fa3c7fcf7488a9e8e7775da050bf1fc3b", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bed6b44fa3c7fcf7488a9e8e7775da050bf1fc3b", "committedDate": "2020-03-01T17:42:39Z", "message": "Fix a concurrency issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2OTQwNzU3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#pullrequestreview-366940757", "createdAt": "2020-03-02T04:05:30Z", "commit": {"oid": "bed6b44fa3c7fcf7488a9e8e7775da050bf1fc3b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNDowNTozMFrOFwTH_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNDowNTozMFrOFwTH_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE4OTMxMQ==", "bodyText": "Can we make maxAgeInSeconds an optional param with -1 as default value?\nIMO maxAgeInSeconds value will not be changed specifically for the 80% of the case.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r386189311", "createdAt": "2020-03-02T04:05:30Z", "author": {"login": "chamil321"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_cache.bal", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents Ballerina `AbstractCache` object and cache related operations. Any custom cache implementation should be\n+# object-wise similar.\n+public type AbstractCache abstract object {\n+\n+    # Adds the given key, value pair to the cache.\n+    #\n+    # + key - Key of the cached value\n+    # + value - Value to be cached\n+    # + maxAgeInSeconds - The value in seconds which the cache entry is valid. '-1' means, the entry is valid forever.\n+    public function put(string key, any value, int maxAgeInSeconds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bed6b44fa3c7fcf7488a9e8e7775da050bf1fc3b"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2OTM5OTQw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#pullrequestreview-366939940", "createdAt": "2020-03-02T04:00:59Z", "commit": {"oid": "bed6b44fa3c7fcf7488a9e8e7775da050bf1fc3b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNDowMTowMFrOFwTFYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNDoyNTowMlrOFwTTpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE4ODY0MA==", "bodyText": "What if someone for some reason wants to add errors to the cache? Shouldn't we allow\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public function put(string key, any value, int maxAgeInSeconds);\n          \n          \n            \n                public function put(string key, any|error value, int maxAgeInSeconds);", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r386188640", "createdAt": "2020-03-02T04:01:00Z", "author": {"login": "MaryamZi"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_cache.bal", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents Ballerina `AbstractCache` object and cache related operations. Any custom cache implementation should be\n+# object-wise similar.\n+public type AbstractCache abstract object {\n+\n+    # Adds the given key, value pair to the cache.\n+    #\n+    # + key - Key of the cached value\n+    # + value - Value to be cached\n+    # + maxAgeInSeconds - The value in seconds which the cache entry is valid. '-1' means, the entry is valid forever.\n+    public function put(string key, any value, int maxAgeInSeconds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bed6b44fa3c7fcf7488a9e8e7775da050bf1fc3b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE4OTI3OA==", "bodyText": "any contains () so any? is redundant.\nSince a cache can be hold basically any value, this return type could cause the issue of not being able to identify if () is returned because the cache does not contain an entry by the particular key vs the cache holding () as the value for the particular key.\nA similar situation is avoided in the iterator design by having the next method return record {| T value; |}?, where returning a record always represents the presence of a value. See https://ballerina.io/spec/lang/2019R3/#section_5.5.1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r386189278", "createdAt": "2020-03-02T04:05:23Z", "author": {"login": "MaryamZi"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_cache.bal", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents Ballerina `AbstractCache` object and cache related operations. Any custom cache implementation should be\n+# object-wise similar.\n+public type AbstractCache abstract object {\n+\n+    # Adds the given key, value pair to the cache.\n+    #\n+    # + key - Key of the cached value\n+    # + value - Value to be cached\n+    # + maxAgeInSeconds - The value in seconds which the cache entry is valid. '-1' means, the entry is valid forever.\n+    public function put(string key, any value, int maxAgeInSeconds);\n+\n+    # Returns the cached value associated with the given key. If the provided cache key is not found,\n+    # () will be returned.\n+    #\n+    # + key - Key which is used to retrieve the cached value\n+    # + return - The cached value associated with the given key\n+    public function get(string key) returns any?;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bed6b44fa3c7fcf7488a9e8e7775da050bf1fc3b"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE5MjI5NQ==", "bodyText": "What happens if there is no entry with the particular key? Shouldn't we include those details in the documentation?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r386192295", "createdAt": "2020-03-02T04:25:02Z", "author": {"login": "MaryamZi"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_cache.bal", "diffHunk": "@@ -0,0 +1,64 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents Ballerina `AbstractCache` object and cache related operations. Any custom cache implementation should be\n+# object-wise similar.\n+public type AbstractCache abstract object {\n+\n+    # Adds the given key, value pair to the cache.\n+    #\n+    # + key - Key of the cached value\n+    # + value - Value to be cached\n+    # + maxAgeInSeconds - The value in seconds which the cache entry is valid. '-1' means, the entry is valid forever.\n+    public function put(string key, any value, int maxAgeInSeconds);\n+\n+    # Returns the cached value associated with the given key. If the provided cache key is not found,\n+    # () will be returned.\n+    #\n+    # + key - Key which is used to retrieve the cached value\n+    # + return - The cached value associated with the given key\n+    public function get(string key) returns any?;\n+\n+    # Removes a cached value from the cache.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bed6b44fa3c7fcf7488a9e8e7775da050bf1fc3b"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2OTQ1ODYx", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#pullrequestreview-366945861", "createdAt": "2020-03-02T04:32:29Z", "commit": {"oid": "bed6b44fa3c7fcf7488a9e8e7775da050bf1fc3b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNDozMjoyOVrOFwTYVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNDozMjoyOVrOFwTYVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE5MzQ5Mg==", "bodyText": "Here we need to remove the old node from the cache and add the new node. seems like we are adding the same old node into the cache. Please check", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r386193492", "createdAt": "2020-03-02T04:32:29Z", "author": {"login": "daneshk"}, "path": "stdlib/cache/src/main/ballerina/src/cache/cache.bal", "diffHunk": "@@ -14,336 +14,302 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import ballerina/system;\n import ballerina/task;\n import ballerina/time;\n \n-# Cache cleanup task invoking interval in ms.\n-const int CACHE_CLEANUP_INTERVAL = 5000;\n+# The `LRU` eviction algorithm.\n+public const LRU = \"Least Recently Used\";\n+# The `FIFO` eviction algorithm.\n+public const FIFO = \"First In First Out\";\n \n-# Map which stores all of the caches.\n-map<Cache> cacheMap = {};\n+# The collection of eviction algorithms.\n+public type EvictionPolicy LRU|FIFO;\n \n-task:TimerConfiguration cacheCleanupTimerConfiguration = {\n-    intervalInMillis: CACHE_CLEANUP_INTERVAL,\n-    initialDelayInMillis: CACHE_CLEANUP_INTERVAL\n-};\n-\n-task:Scheduler cacheCleanupTimer = new(cacheCleanupTimerConfiguration);\n-\n-boolean timerStarted = false;\n-\n-# Represents a cache entry.\n+# Represents cache configuration.\n #\n-# + value - cache value\n-# + lastAccessedTime - last accessed time in ms of this value which is used to remove LRU cached values\n+# + capacity - Maximum number of entries allowed\n+# + evictionPolicy - The policy which defines the cache eviction algorithm\n+# + evictionFactor - The factor which the entries will be evicted once the cache full\n+# + defaultMaxAgeInSeconds - The default value in seconds which all the cache entries are valid.\n+#                            '-1' means, the entries are valid forever.\n+#                            This will be overwritten by the the `maxAge` property set when inserting item to cache\n+# + timerIntervalInSeconds - Interval of the timer task which clean up the cache\n+public type CacheConfig record {|\n+    int capacity;\n+    EvictionPolicy evictionPolicy;\n+    float evictionFactor;\n+    int defaultMaxAgeInSeconds = -1;\n+    int timerIntervalInSeconds?;\n+|};\n+\n type CacheEntry record {|\n-    any value;\n-    int lastAccessedTime;\n+    string key;\n+    any data;\n+    int expTime;       // exp time since epoch. calculated based on the `maxAge` parameter when inserting to map\n+|};\n+\n+// TODO: Remove by fixing https://github.com/ballerina-platform/ballerina-lang/issues/21268\n+type MapAndList record {|\n+    map<Node> entries;\n+    LinkedList list;\n |};\n \n-# Represents a Ballerina `Cache` which can hold multiple entries and remove entries based on time and size.\n+// Cleanup service which cleans the cache entries periodically.\n+service cleanupService = service {\n+    resource function onTrigger(MapAndList mapAndList) {\n+        lock {\n+            cleanup(mapAndList);\n+        }\n+    }\n+};\n+\n+# Represents Ballerina `Cache` object and cache related operations.\n public type Cache object {\n \n+    *AbstractCache;\n+\n     private int capacity;\n-    map<CacheEntry> entries = {};\n-    int expiryTimeInMillis;\n+    private EvictionPolicy evictionPolicy;\n     private float evictionFactor;\n-    private string uuid;\n+    private int defaultMaxAgeInSeconds;\n+    private map<Node> entries = {};\n+    private LinkedList list;\n \n-    # Creates a new `Cache`.\n+    # Creates a new `Cache` object.\n     #\n-    # + expiryTimeInMillis - Time since its last access in which the cache will be expired.\n-    # + capacity - Maximum number of entries allowed.\n-    # + evictionFactor - The factor which the entries will be evicted once the cache full.\n-    public function __init(public int expiryTimeInMillis = 900000, public int capacity = 100, public float evictionFactor = 0.25) {\n-\n-        // Cache expiry time must be a positive value.\n-        if (expiryTimeInMillis <= 0) {\n-            Error e = error(CACHE_ERROR, message = \"Expiry time must be greater than 0.\");\n-            panic e;\n-        }\n+    # + cacheConfig - Cache configurations\n+    public function __init(CacheConfig cacheConfig) {\n+        self.capacity = cacheConfig.capacity;\n+        self.evictionPolicy = cacheConfig.evictionPolicy;\n+        self.evictionFactor = cacheConfig.evictionFactor;\n+        self.defaultMaxAgeInSeconds = cacheConfig.defaultMaxAgeInSeconds;\n+\n         // Cache capacity must be a positive value.\n-        if (capacity <= 0) {\n-            Error e = error(CACHE_ERROR, message = \"Capacity must be greater than 0.\");\n-            panic e;\n+        if (self.capacity <= 0) {\n+            panic error(CACHE_ERROR, message = \"Capacity must be greater than 0.\");\n         }\n         // Cache eviction factor must be between 0.0 (exclusive) and 1.0 (inclusive).\n-        if (evictionFactor <= 0 || evictionFactor > 1) {\n-            Error e = error(CACHE_ERROR, message = \"Cache eviction factor must be between 0.0 (exclusive) and 1.0 (inclusive).\");\n-            panic e;\n+        if (self.evictionFactor <= 0 || self.evictionFactor > 1) {\n+            panic error(CACHE_ERROR, message = \"Cache eviction factor must be between 0.0 (exclusive) and 1.0 (inclusive).\");\n         }\n-        // We remove empty caches to prevent OOM issues. So in such scenarios, the cache will not be in the `cacheMap`\n-        // when we are trying to add a new cache entry to that cache. So we need to create a new cache. For that, keep\n-        // track of the UUID.\n-        self.uuid = system:uuid();\n-        cacheMap[self.uuid] = self;\n-        self.expiryTimeInMillis = expiryTimeInMillis;\n-        self.capacity = capacity;\n-        self.evictionFactor = evictionFactor;\n-\n-        var attachCacheCleanerResult = cacheCleanupTimer.attach(cacheCleanupService);\n-        if (attachCacheCleanerResult is error) {\n-            record {| string message?; anydata|error...; |} detail = attachCacheCleanerResult.detail();\n-            Error e = error(CACHE_ERROR, message = \"Failed to create the cache cleanup task: \" +  <string> detail[\"message\"]);\n-            panic e;\n+\n+        // Cache eviction factor must be between 0.0 (exclusive) and 1.0 (inclusive).\n+        if (self.defaultMaxAgeInSeconds != -1 && self.defaultMaxAgeInSeconds <= 0) {\n+            panic error(CACHE_ERROR, message = \"Default max age should be greater than 0 or -1 for indicate forever valid.\");\n         }\n \n-        if (!timerStarted && !cacheCleanupTimer.isStarted()) {\n-            lock {\n-                if(!cacheCleanupTimer.isStarted()) {\n-                    var timerStartResult = cacheCleanupTimer.start();\n-                    if (timerStartResult is error) {\n-                        record {| string message?; anydata|error...; |} detail = timerStartResult.detail();\n-                        Error e = error(CACHE_ERROR, message = \"Failed to start the cache cleanup task: \" +  <string> detail[\"message\"]);\n-                        panic e;\n-                    }\n-                    timerStarted = true;\n-                }\n+        self.list = {\n+            head: (),\n+            tail: ()\n+        };\n+        int? timerIntervalInSeconds = cacheConfig?.timerIntervalInSeconds;\n+        if (timerIntervalInSeconds is int) {\n+            task:TimerConfiguration timerConfiguration = {\n+                intervalInMillis: timerIntervalInSeconds,\n+                initialDelayInMillis: timerIntervalInSeconds\n+            };\n+            task:Scheduler cleanupScheduler = new(timerConfiguration);\n+            MapAndList mapAndList = {\n+                entries: self.entries,\n+                list: self.list\n+            };\n+            task:SchedulerError? result = cleanupScheduler.attach(cleanupService, attachment = mapAndList);\n+            if (result is task:SchedulerError) {\n+                record {| string message?; anydata|error...; |} detail = result.detail();\n+                panic error(CACHE_ERROR, message = \"Failed to create the cache cleanup task: \" + <string>detail[\"message\"]);\n+            }\n+            result = cleanupScheduler.start();\n+            if (result is task:SchedulerError) {\n+                record {| string message?; anydata|error...; |} detail = result.detail();\n+                panic error(CACHE_ERROR, message = \"Failed to start the cache cleanup task: \" + <string>detail[\"message\"]);\n             }\n         }\n     }\n \n-    # Checks whether the given key has an associated cache value.\n-    #\n-    # + key - The key to be checked.\n-    # + return - `true` if the given key has an associated value, `false` otherwise.\n-    public function hasKey(string key) returns boolean {\n-        return self.entries.hasKey(key);\n-    }\n-\n-    # Returns the size of the cache.\n-    #\n-    # + return - The size of the cache.\n-    public function size() returns int {\n-        return self.entries.length();\n-    }\n-\n-    # Adds the given key, value pair to the provided cache.\n+    # Adds the given key, value pair to the cache.\n     #\n-    # + key - Value which should be used as the key.\n-    # + value - Value to be cached.\n-    public function put(string key, any value) {\n-        // We need to synchronize this process otherwise concurrency might cause issues.\n-         lock {\n-            int cacheCapacity = self.capacity;\n-            int cacheSize = self.entries.length();\n-\n-            // If the current cache is full, evict cache.\n-            if (cacheCapacity <= cacheSize) {\n-                self.evict();\n+    # + key - Key of the cached value\n+    # + value - Value to be cached\n+    # + maxAgeInSeconds - The value in seconds which the cache entry is valid. '-1' means, the entry is valid forever.\n+    public function put(string key, any value, int maxAgeInSeconds = -1) {\n+        lock {\n+            // If the current cache is full (i.e. size = capacity), evict cache.\n+            if (self.size() == self.capacity) {\n+                evict(self.entries, self.list, self.evictionPolicy, self.capacity, self.evictionFactor);\n             }\n-            // Add the new cache entry.\n-            int time = time:currentTime().time;\n-            CacheEntry entry = { value: value, lastAccessedTime: time };\n-            self.entries[key] = entry;\n-\n-            // If the UUID is not found, that means that cache was removed after being empty. So we need to create a\n-            // new cache with the current cache object.\n-            if (!cacheMap.hasKey(self.uuid)) {\n-                cacheMap[self.uuid] = self;\n+\n+            // Calculate the `expTime` of the cache entry based on the `maxAgeInSeconds` property and\n+            // `defaultMaxAgeInSeconds` property.\n+            int calculatedExpTime = -1;\n+            if (maxAgeInSeconds != -1 && maxAgeInSeconds > 0) {\n+                calculatedExpTime = time:nanoTime() + (maxAgeInSeconds * 1000 * 1000 * 1000);\n+            } else {\n+                if (self.defaultMaxAgeInSeconds != -1) {\n+                    calculatedExpTime = time:nanoTime() + (self.defaultMaxAgeInSeconds * 1000 * 1000 * 1000);\n+                }\n             }\n-         }\n-    }\n \n-    # Evicts the cache when the cache is full.\n-    function evict() {\n-        int maxCapacity = self.capacity;\n-        float ef = self.evictionFactor;\n-        int numberOfKeysToEvict = <int>(maxCapacity * ef);\n-        // Get the above number of least recently used cache entry keys from the cache\n-        string[] cacheKeys = self.getLRUCacheKeys(numberOfKeysToEvict);\n-        // Iterate through the map and remove entries.\n-        foreach var c in cacheKeys {\n-            // These cache values are ignored. So it is not needed to check the return value for the remove function.\n-            var tempVar = self.entries.remove(c);\n+            CacheEntry entry = {\n+                key: key,\n+                data: value,\n+                expTime: calculatedExpTime\n+            };\n+\n+            if (self.hasKey(key)) {\n+                Node node = self.entries.get(key);\n+                putOnEvictionPolicy(self.evictionPolicy, self.list, node, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bed6b44fa3c7fcf7488a9e8e7775da050bf1fc3b"}, "originalPosition": 267}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e1b8ca61189c7901adaa7d15d3e7eae1280607d", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9e1b8ca61189c7901adaa7d15d3e7eae1280607d", "committedDate": "2020-03-02T05:46:36Z", "message": "Improve cleanup concurrency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cf23f89727e3e6593d6375baa00cf0e9b75329b", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4cf23f89727e3e6593d6375baa00cf0e9b75329b", "committedDate": "2020-03-02T05:47:30Z", "message": "Fix a bug in cache put for existing entry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cce9e3259d7d174a4cb0e0549dbed102a919d4a", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0cce9e3259d7d174a4cb0e0549dbed102a919d4a", "committedDate": "2020-03-02T05:51:07Z", "message": "Fix abstract cache object with default value"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "145934bcacb39ca755165fe42a1429a6018ba6a7", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/145934bcacb39ca755165fe42a1429a6018ba6a7", "committedDate": "2020-03-02T06:46:45Z", "message": "Add cache init default values and update usages"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MDM4NTE2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#pullrequestreview-367038516", "createdAt": "2020-03-02T09:07:38Z", "commit": {"oid": "145934bcacb39ca755165fe42a1429a6018ba6a7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwOTowNzozOFrOFwX74Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwOTowNzozOFrOFwX74Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI2ODEyOQ==", "bodyText": "Shall we rename this to something which conveys what this time interval is about?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r386268129", "createdAt": "2020-03-02T09:07:38Z", "author": {"login": "pubudu91"}, "path": "stdlib/cache/src/main/ballerina/src/cache/cache.bal", "diffHunk": "@@ -14,336 +14,308 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import ballerina/system;\n import ballerina/task;\n import ballerina/time;\n \n-# Cache cleanup task invoking interval in ms.\n-const int CACHE_CLEANUP_INTERVAL = 5000;\n+# The `LRU` eviction algorithm.\n+public const LRU = \"Least Recently Used\";\n+# The `FIFO` eviction algorithm.\n+public const FIFO = \"First In First Out\";\n \n-# Map which stores all of the caches.\n-map<Cache> cacheMap = {};\n+# The collection of eviction algorithms.\n+public type EvictionPolicy LRU|FIFO;\n \n-task:TimerConfiguration cacheCleanupTimerConfiguration = {\n-    intervalInMillis: CACHE_CLEANUP_INTERVAL,\n-    initialDelayInMillis: CACHE_CLEANUP_INTERVAL\n-};\n-\n-task:Scheduler cacheCleanupTimer = new(cacheCleanupTimerConfiguration);\n-\n-boolean timerStarted = false;\n-\n-# Represents a cache entry.\n+# Represents cache configuration.\n #\n-# + value - cache value\n-# + lastAccessedTime - last accessed time in ms of this value which is used to remove LRU cached values\n+# + capacity - Maximum number of entries allowed\n+# + evictionPolicy - The policy which defines the cache eviction algorithm\n+# + evictionFactor - The factor which the entries will be evicted once the cache full\n+# + defaultMaxAgeInSeconds - The default value in seconds which all the cache entries are valid.\n+#                            '-1' means, the entries are valid forever.\n+#                            This will be overwritten by the the `maxAge` property set when inserting item to cache\n+# + timerIntervalInSeconds - Interval of the timer task which clean up the cache\n+public type CacheConfig record {|\n+    int capacity = 100;\n+    EvictionPolicy evictionPolicy = LRU;\n+    float evictionFactor = 0.25;\n+    int defaultMaxAgeInSeconds = -1;\n+    int timerIntervalInSeconds?;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "145934bcacb39ca755165fe42a1429a6018ba6a7"}, "originalPosition": 52}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f58589846fa499a12efbf2c65b17ad8f00dad51a", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f58589846fa499a12efbf2c65b17ad8f00dad51a", "committedDate": "2020-03-03T02:22:30Z", "message": "Update cache API with return of the error"}, "afterCommit": {"oid": "26a8a6ee5be15b01996a7ef85476230868369e20", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/26a8a6ee5be15b01996a7ef85476230868369e20", "committedDate": "2020-03-03T02:32:58Z", "message": "Update cache API with return of the error"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "26a8a6ee5be15b01996a7ef85476230868369e20", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/26a8a6ee5be15b01996a7ef85476230868369e20", "committedDate": "2020-03-03T02:32:58Z", "message": "Update cache API with return of the error"}, "afterCommit": {"oid": "290a0bd771eedf5baece05c6fb03cfa962c807d4", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/290a0bd771eedf5baece05c6fb03cfa962c807d4", "committedDate": "2020-03-03T02:52:14Z", "message": "Update cache API with return of the error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "931cf109b04ef2771e5c1e216c8cc557a8aee1c4", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/931cf109b04ef2771e5c1e216c8cc557a8aee1c4", "committedDate": "2020-03-03T02:59:38Z", "message": "Update cache API with return of the error"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "290a0bd771eedf5baece05c6fb03cfa962c807d4", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/290a0bd771eedf5baece05c6fb03cfa962c807d4", "committedDate": "2020-03-03T02:52:14Z", "message": "Update cache API with return of the error"}, "afterCommit": {"oid": "92b72b9ec2145e398314a930ade03641bfd59c9a", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/92b72b9ec2145e398314a930ade03641bfd59c9a", "committedDate": "2020-03-03T03:00:22Z", "message": "Update cache API usages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "685430939861f69e7f62cf0112dfefa1616d5094", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/685430939861f69e7f62cf0112dfefa1616d5094", "committedDate": "2020-03-03T05:46:40Z", "message": "Update cache API usages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb6373bbeb884c5cbfbf8ba4323642b0e5006917", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cb6373bbeb884c5cbfbf8ba4323642b0e5006917", "committedDate": "2020-03-03T05:46:50Z", "message": "Address review suggestions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "97722a464ecd43b8440046e804458ff2209c135b", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/97722a464ecd43b8440046e804458ff2209c135b", "committedDate": "2020-03-03T03:06:35Z", "message": "Address review suggestions"}, "afterCommit": {"oid": "cb6373bbeb884c5cbfbf8ba4323642b0e5006917", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cb6373bbeb884c5cbfbf8ba4323642b0e5006917", "committedDate": "2020-03-03T05:46:50Z", "message": "Address review suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ef7f23d765d278b98b1cf0fe2908b6d8027c758", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9ef7f23d765d278b98b1cf0fe2908b6d8027c758", "committedDate": "2020-03-03T11:10:32Z", "message": "Abstract out the eviction policy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dda4fd8a26cd7e360614907d159013dabfc7f90", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0dda4fd8a26cd7e360614907d159013dabfc7f90", "committedDate": "2020-03-03T12:04:24Z", "message": "Update cache API usages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "180d04351e166fb69554d0f2c3a93ed2a3de8a99", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/180d04351e166fb69554d0f2c3a93ed2a3de8a99", "committedDate": "2020-03-04T06:07:09Z", "message": "Improve cache API usages with cache v2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bbfa326d2f453292479c0dd4e4cab8ba34190e7", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0bbfa326d2f453292479c0dd4e4cab8ba34190e7", "committedDate": "2020-03-04T06:47:32Z", "message": "Add ballerina documentations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81367dee28020b3d8cb208ada554d55d0d1283bc", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/81367dee28020b3d8cb208ada554d55d0d1283bc", "committedDate": "2020-03-05T06:08:40Z", "message": "Fix lang-server test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39689d358347e856d69892ab93d3992612f3c715", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/39689d358347e856d69892ab93d3992612f3c715", "committedDate": "2020-03-05T06:18:56Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into refactor-cache\n\n# Conflicts:\n#\tlanguage-server/modules/langserver-core/src/test/resources/completion/object/objectTest13.json\n#\tlanguage-server/modules/langserver-core/src/test/resources/completion/toplevel/globalVarDefPackageContent.json\n#\tlanguage-server/modules/langserver-core/src/test/resources/completion/toplevel/statementWithMissingSemiColon3.json"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MzQzNjMw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#pullrequestreview-369343630", "createdAt": "2020-03-05T07:29:21Z", "commit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "state": "COMMENTED", "comments": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNzoyOToyMVrOFyI0eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNzozODoxNlrOFyI_7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExNzYyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Add the given key, value pair to the cache.\n          \n          \n            \n                # Add the given key value pair to the cache.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388117626", "createdAt": "2020-03-05T07:29:21Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_cache.bal", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents Ballerina `AbstractCache` object and cache related operations.\n+# Any custom cache implementation should be object-wise similar.\n+public type AbstractCache abstract object {\n+\n+    # Add the given key, value pair to the cache.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExNzY4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + maxAgeInSeconds - The value in seconds which the cache entry is valid. '-1' means, the entry is valid forever.\n          \n          \n            \n                # + maxAgeInSeconds - The value in seconds, which the cache entry is valid. '-1' means, the entry is valid forever.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388117687", "createdAt": "2020-03-05T07:29:33Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_cache.bal", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents Ballerina `AbstractCache` object and cache related operations.\n+# Any custom cache implementation should be object-wise similar.\n+public type AbstractCache abstract object {\n+\n+    # Add the given key, value pair to the cache.\n+    #\n+    # + key - Key of the cached value\n+    # + value - Value to be cached\n+    # + maxAgeInSeconds - The value in seconds which the cache entry is valid. '-1' means, the entry is valid forever.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExNzc1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + key - Key which is used to retrieve the cached value\n          \n          \n            \n                # + key - Key, which is used to retrieve the cached value", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388117752", "createdAt": "2020-03-05T07:29:45Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_cache.bal", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents Ballerina `AbstractCache` object and cache related operations.\n+# Any custom cache implementation should be object-wise similar.\n+public type AbstractCache abstract object {\n+\n+    # Add the given key, value pair to the cache.\n+    #\n+    # + key - Key of the cached value\n+    # + value - Value to be cached\n+    # + maxAgeInSeconds - The value in seconds which the cache entry is valid. '-1' means, the entry is valid forever.\n+    public function put(string key, any value, int maxAgeInSeconds = -1);\n+\n+    # Return the cached value associated with the given key.\n+    #\n+    # + key - Key which is used to retrieve the cached value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExODAxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # `Error` if the provided cache key is not or if any error occurred while retrieving from the cache.\n          \n          \n            \n                # `Error` if any error occurred while retrieving from the cache.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388118018", "createdAt": "2020-03-05T07:30:35Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_cache.bal", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents Ballerina `AbstractCache` object and cache related operations.\n+# Any custom cache implementation should be object-wise similar.\n+public type AbstractCache abstract object {\n+\n+    # Add the given key, value pair to the cache.\n+    #\n+    # + key - Key of the cached value\n+    # + value - Value to be cached\n+    # + maxAgeInSeconds - The value in seconds which the cache entry is valid. '-1' means, the entry is valid forever.\n+    public function put(string key, any value, int maxAgeInSeconds = -1);\n+\n+    # Return the cached value associated with the given key.\n+    #\n+    # + key - Key which is used to retrieve the cached value\n+    # + return - The cached value associated with the given key or\n+    # `Error` if the provided cache key is not or if any error occurred while retrieving from the cache.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExODEzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Invalidate a cached value from the cache.\n          \n          \n            \n                # Validate a cached value from the cache.\n          \n      \n    \n    \n  \n\nThere is no word as \"invalidating\". You validate and the value becomes valid or invalid.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388118131", "createdAt": "2020-03-05T07:30:52Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_cache.bal", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents Ballerina `AbstractCache` object and cache related operations.\n+# Any custom cache implementation should be object-wise similar.\n+public type AbstractCache abstract object {\n+\n+    # Add the given key, value pair to the cache.\n+    #\n+    # + key - Key of the cached value\n+    # + value - Value to be cached\n+    # + maxAgeInSeconds - The value in seconds which the cache entry is valid. '-1' means, the entry is valid forever.\n+    public function put(string key, any value, int maxAgeInSeconds = -1);\n+\n+    # Return the cached value associated with the given key.\n+    #\n+    # + key - Key which is used to retrieve the cached value\n+    # + return - The cached value associated with the given key or\n+    # `Error` if the provided cache key is not or if any error occurred while retrieving from the cache.\n+    public function get(string key) returns any|Error;\n+\n+    # Invalidate a cached value from the cache.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExODI0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + key - Key of the cache entry which needs to be invalidate\n          \n          \n            \n                # + key - Key of the cache entry, which needs to be validated", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388118242", "createdAt": "2020-03-05T07:31:12Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_cache.bal", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents Ballerina `AbstractCache` object and cache related operations.\n+# Any custom cache implementation should be object-wise similar.\n+public type AbstractCache abstract object {\n+\n+    # Add the given key, value pair to the cache.\n+    #\n+    # + key - Key of the cached value\n+    # + value - Value to be cached\n+    # + maxAgeInSeconds - The value in seconds which the cache entry is valid. '-1' means, the entry is valid forever.\n+    public function put(string key, any value, int maxAgeInSeconds = -1);\n+\n+    # Return the cached value associated with the given key.\n+    #\n+    # + key - Key which is used to retrieve the cached value\n+    # + return - The cached value associated with the given key or\n+    # `Error` if the provided cache key is not or if any error occurred while retrieving from the cache.\n+    public function get(string key) returns any|Error;\n+\n+    # Invalidate a cached value from the cache.\n+    #\n+    # + key - Key of the cache entry which needs to be invalidate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExODM1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `()` if successfully invalidated or\n          \n          \n            \n                # + return - `()` if successfully validated or", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388118357", "createdAt": "2020-03-05T07:31:36Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_cache.bal", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents Ballerina `AbstractCache` object and cache related operations.\n+# Any custom cache implementation should be object-wise similar.\n+public type AbstractCache abstract object {\n+\n+    # Add the given key, value pair to the cache.\n+    #\n+    # + key - Key of the cached value\n+    # + value - Value to be cached\n+    # + maxAgeInSeconds - The value in seconds which the cache entry is valid. '-1' means, the entry is valid forever.\n+    public function put(string key, any value, int maxAgeInSeconds = -1);\n+\n+    # Return the cached value associated with the given key.\n+    #\n+    # + key - Key which is used to retrieve the cached value\n+    # + return - The cached value associated with the given key or\n+    # `Error` if the provided cache key is not or if any error occurred while retrieving from the cache.\n+    public function get(string key) returns any|Error;\n+\n+    # Invalidate a cached value from the cache.\n+    #\n+    # + key - Key of the cache entry which needs to be invalidate\n+    # + return - `()` if successfully invalidated or", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExODQ0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # `Error` if the provided cache key is not or if any error occurred while invalidating from the cache.\n          \n          \n            \n                # `Error` if any error occurred while validating from the cache.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388118446", "createdAt": "2020-03-05T07:31:53Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_cache.bal", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents Ballerina `AbstractCache` object and cache related operations.\n+# Any custom cache implementation should be object-wise similar.\n+public type AbstractCache abstract object {\n+\n+    # Add the given key, value pair to the cache.\n+    #\n+    # + key - Key of the cached value\n+    # + value - Value to be cached\n+    # + maxAgeInSeconds - The value in seconds which the cache entry is valid. '-1' means, the entry is valid forever.\n+    public function put(string key, any value, int maxAgeInSeconds = -1);\n+\n+    # Return the cached value associated with the given key.\n+    #\n+    # + key - Key which is used to retrieve the cached value\n+    # + return - The cached value associated with the given key or\n+    # `Error` if the provided cache key is not or if any error occurred while retrieving from the cache.\n+    public function get(string key) returns any|Error;\n+\n+    # Invalidate a cached value from the cache.\n+    #\n+    # + key - Key of the cache entry which needs to be invalidate\n+    # + return - `()` if successfully invalidated or\n+    # `Error` if the provided cache key is not or if any error occurred while invalidating from the cache.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExODQ5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Invalidate all the cached values from the cache.\n          \n          \n            \n                # Validate all the cached values from the cache.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388118492", "createdAt": "2020-03-05T07:32:03Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_cache.bal", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents Ballerina `AbstractCache` object and cache related operations.\n+# Any custom cache implementation should be object-wise similar.\n+public type AbstractCache abstract object {\n+\n+    # Add the given key, value pair to the cache.\n+    #\n+    # + key - Key of the cached value\n+    # + value - Value to be cached\n+    # + maxAgeInSeconds - The value in seconds which the cache entry is valid. '-1' means, the entry is valid forever.\n+    public function put(string key, any value, int maxAgeInSeconds = -1);\n+\n+    # Return the cached value associated with the given key.\n+    #\n+    # + key - Key which is used to retrieve the cached value\n+    # + return - The cached value associated with the given key or\n+    # `Error` if the provided cache key is not or if any error occurred while retrieving from the cache.\n+    public function get(string key) returns any|Error;\n+\n+    # Invalidate a cached value from the cache.\n+    #\n+    # + key - Key of the cache entry which needs to be invalidate\n+    # + return - `()` if successfully invalidated or\n+    # `Error` if the provided cache key is not or if any error occurred while invalidating from the cache.\n+    public function invalidate(string key) returns Error?;\n+\n+    # Invalidate all the cached values from the cache.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExODU2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `()` if successfully invalidated all or\n          \n          \n            \n                # + return - `()` if all are successfully validated", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388118567", "createdAt": "2020-03-05T07:32:19Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_cache.bal", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents Ballerina `AbstractCache` object and cache related operations.\n+# Any custom cache implementation should be object-wise similar.\n+public type AbstractCache abstract object {\n+\n+    # Add the given key, value pair to the cache.\n+    #\n+    # + key - Key of the cached value\n+    # + value - Value to be cached\n+    # + maxAgeInSeconds - The value in seconds which the cache entry is valid. '-1' means, the entry is valid forever.\n+    public function put(string key, any value, int maxAgeInSeconds = -1);\n+\n+    # Return the cached value associated with the given key.\n+    #\n+    # + key - Key which is used to retrieve the cached value\n+    # + return - The cached value associated with the given key or\n+    # `Error` if the provided cache key is not or if any error occurred while retrieving from the cache.\n+    public function get(string key) returns any|Error;\n+\n+    # Invalidate a cached value from the cache.\n+    #\n+    # + key - Key of the cache entry which needs to be invalidate\n+    # + return - `()` if successfully invalidated or\n+    # `Error` if the provided cache key is not or if any error occurred while invalidating from the cache.\n+    public function invalidate(string key) returns Error?;\n+\n+    # Invalidate all the cached values from the cache.\n+    #\n+    # + return - `()` if successfully invalidated all or", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExODYzNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # `Error` if any error occurred while invalidating all from the cache.\n          \n          \n            \n                # `Error` if any error occurred while validating all from the cache.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388118637", "createdAt": "2020-03-05T07:32:32Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_cache.bal", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents Ballerina `AbstractCache` object and cache related operations.\n+# Any custom cache implementation should be object-wise similar.\n+public type AbstractCache abstract object {\n+\n+    # Add the given key, value pair to the cache.\n+    #\n+    # + key - Key of the cached value\n+    # + value - Value to be cached\n+    # + maxAgeInSeconds - The value in seconds which the cache entry is valid. '-1' means, the entry is valid forever.\n+    public function put(string key, any value, int maxAgeInSeconds = -1);\n+\n+    # Return the cached value associated with the given key.\n+    #\n+    # + key - Key which is used to retrieve the cached value\n+    # + return - The cached value associated with the given key or\n+    # `Error` if the provided cache key is not or if any error occurred while retrieving from the cache.\n+    public function get(string key) returns any|Error;\n+\n+    # Invalidate a cached value from the cache.\n+    #\n+    # + key - Key of the cache entry which needs to be invalidate\n+    # + return - `()` if successfully invalidated or\n+    # `Error` if the provided cache key is not or if any error occurred while invalidating from the cache.\n+    public function invalidate(string key) returns Error?;\n+\n+    # Invalidate all the cached values from the cache.\n+    #\n+    # + return - `()` if successfully invalidated all or\n+    # `Error` if any error occurred while invalidating all from the cache.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExOTAwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Whether the an associated cache value is available in the cache or not\n          \n          \n            \n                # + return - Whether an associated cache value is available in the cache or not", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388119002", "createdAt": "2020-03-05T07:33:30Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_cache.bal", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents Ballerina `AbstractCache` object and cache related operations.\n+# Any custom cache implementation should be object-wise similar.\n+public type AbstractCache abstract object {\n+\n+    # Add the given key, value pair to the cache.\n+    #\n+    # + key - Key of the cached value\n+    # + value - Value to be cached\n+    # + maxAgeInSeconds - The value in seconds which the cache entry is valid. '-1' means, the entry is valid forever.\n+    public function put(string key, any value, int maxAgeInSeconds = -1);\n+\n+    # Return the cached value associated with the given key.\n+    #\n+    # + key - Key which is used to retrieve the cached value\n+    # + return - The cached value associated with the given key or\n+    # `Error` if the provided cache key is not or if any error occurred while retrieving from the cache.\n+    public function get(string key) returns any|Error;\n+\n+    # Invalidate a cached value from the cache.\n+    #\n+    # + key - Key of the cache entry which needs to be invalidate\n+    # + return - `()` if successfully invalidated or\n+    # `Error` if the provided cache key is not or if any error occurred while invalidating from the cache.\n+    public function invalidate(string key) returns Error?;\n+\n+    # Invalidate all the cached values from the cache.\n+    #\n+    # + return - `()` if successfully invalidated all or\n+    # `Error` if any error occurred while invalidating all from the cache.\n+    public function invalidateAll() returns Error?;\n+\n+    # Checks whether the given key has an associated cache value.\n+    #\n+    # + key - The key to be checked\n+    # + return - Whether the an associated cache value is available in the cache or not", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExOTE1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents Ballerina `AbstractCache` object and cache related operations.\n          \n          \n            \n            # Represents the Ballerina `AbstractCache` object and cache-related operations.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388119157", "createdAt": "2020-03-05T07:33:59Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_cache.bal", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents Ballerina `AbstractCache` object and cache related operations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExOTIxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents Ballerina `AbstractEvictionPolicy` object and cache eviction related operations\n          \n          \n            \n            # Represents the Ballerina `AbstractEvictionPolicy` object and cache eviction related operations", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388119218", "createdAt": "2020-03-05T07:34:14Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents Ballerina `AbstractEvictionPolicy` object and cache eviction related operations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExOTQyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Update linked list based on get operation.\n          \n          \n            \n                # Update the linked list based on the get operation.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388119421", "createdAt": "2020-03-05T07:34:50Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents Ballerina `AbstractEvictionPolicy` object and cache eviction related operations\n+# based on linked list data structure.\n+# Any custom cache implementation should be object-wise similar.\n+public type AbstractEvictionPolicy abstract object {\n+\n+    # Update linked list based on get operation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExOTQ2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # based on linked list data structure.\n          \n          \n            \n            # based on a linked list data structure.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388119462", "createdAt": "2020-03-05T07:34:58Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents Ballerina `AbstractEvictionPolicy` object and cache eviction related operations\n+# based on linked list data structure.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExOTUxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + node - Node of the linked list which is retrieved\n          \n          \n            \n                # + node - Node of the linked list, which is retrieved", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388119514", "createdAt": "2020-03-05T07:35:08Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents Ballerina `AbstractEvictionPolicy` object and cache eviction related operations\n+# based on linked list data structure.\n+# Any custom cache implementation should be object-wise similar.\n+public type AbstractEvictionPolicy abstract object {\n+\n+    # Update linked list based on get operation.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is retrieved", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExOTU4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Update linked list based on put operation.\n          \n          \n            \n                # Update the linked list based on the put operation.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388119589", "createdAt": "2020-03-05T07:35:18Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents Ballerina `AbstractEvictionPolicy` object and cache eviction related operations\n+# based on linked list data structure.\n+# Any custom cache implementation should be object-wise similar.\n+public type AbstractEvictionPolicy abstract object {\n+\n+    # Update linked list based on get operation.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is retrieved\n+    public function get(LinkedList list, Node node);\n+\n+    # Update linked list based on put operation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExOTY2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + node - Node of the linked list which is newly added\n          \n          \n            \n                # + node - Node of the linked list, which is added newly", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388119664", "createdAt": "2020-03-05T07:35:34Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents Ballerina `AbstractEvictionPolicy` object and cache eviction related operations\n+# based on linked list data structure.\n+# Any custom cache implementation should be object-wise similar.\n+public type AbstractEvictionPolicy abstract object {\n+\n+    # Update linked list based on get operation.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is retrieved\n+    public function get(LinkedList list, Node node);\n+\n+    # Update linked list based on put operation.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is newly added", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExOTczMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Update linked list based on remove operation.\n          \n          \n            \n                # Update the linked list based on the remove operation.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388119733", "createdAt": "2020-03-05T07:35:47Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents Ballerina `AbstractEvictionPolicy` object and cache eviction related operations\n+# based on linked list data structure.\n+# Any custom cache implementation should be object-wise similar.\n+public type AbstractEvictionPolicy abstract object {\n+\n+    # Update linked list based on get operation.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is retrieved\n+    public function get(LinkedList list, Node node);\n+\n+    # Update linked list based on put operation.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is newly added\n+    public function put(LinkedList list, Node node);\n+\n+    # Update linked list based on remove operation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExOTc5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + node - Node of the linked list which is deleted\n          \n          \n            \n                # + node - Node of the linked list, which is deleted", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388119792", "createdAt": "2020-03-05T07:35:54Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents Ballerina `AbstractEvictionPolicy` object and cache eviction related operations\n+# based on linked list data structure.\n+# Any custom cache implementation should be object-wise similar.\n+public type AbstractEvictionPolicy abstract object {\n+\n+    # Update linked list based on get operation.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is retrieved\n+    public function get(LinkedList list, Node node);\n+\n+    # Update linked list based on put operation.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is newly added\n+    public function put(LinkedList list, Node node);\n+\n+    # Update linked list based on remove operation.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is deleted", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExOTg0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Update linked list based on replace operation.\n          \n          \n            \n                # Update the linked list based on the replace operation.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388119847", "createdAt": "2020-03-05T07:36:03Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents Ballerina `AbstractEvictionPolicy` object and cache eviction related operations\n+# based on linked list data structure.\n+# Any custom cache implementation should be object-wise similar.\n+public type AbstractEvictionPolicy abstract object {\n+\n+    # Update linked list based on get operation.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is retrieved\n+    public function get(LinkedList list, Node node);\n+\n+    # Update linked list based on put operation.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is newly added\n+    public function put(LinkedList list, Node node);\n+\n+    # Update linked list based on remove operation.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is deleted\n+    public function remove(LinkedList list, Node node);\n+\n+    # Update linked list based on replace operation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODExOTk2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + newNode - Node of the linked list which is replaced by\n          \n          \n            \n                # + newNode - Node of the linked list, which is used for replacing", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388119962", "createdAt": "2020-03-05T07:36:24Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents Ballerina `AbstractEvictionPolicy` object and cache eviction related operations\n+# based on linked list data structure.\n+# Any custom cache implementation should be object-wise similar.\n+public type AbstractEvictionPolicy abstract object {\n+\n+    # Update linked list based on get operation.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is retrieved\n+    public function get(LinkedList list, Node node);\n+\n+    # Update linked list based on put operation.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is newly added\n+    public function put(LinkedList list, Node node);\n+\n+    # Update linked list based on remove operation.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is deleted\n+    public function remove(LinkedList list, Node node);\n+\n+    # Update linked list based on replace operation.\n+    #\n+    # + list - Linked list data structure\n+    # + newNode - Node of the linked list which is replaced by", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEyMDM4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + oldNode - Node of the linked list which is to be replaced\n          \n          \n            \n                # + oldNode - Node of the linked list, which will be replaced", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388120385", "createdAt": "2020-03-05T07:37:44Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents Ballerina `AbstractEvictionPolicy` object and cache eviction related operations\n+# based on linked list data structure.\n+# Any custom cache implementation should be object-wise similar.\n+public type AbstractEvictionPolicy abstract object {\n+\n+    # Update linked list based on get operation.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is retrieved\n+    public function get(LinkedList list, Node node);\n+\n+    # Update linked list based on put operation.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is newly added\n+    public function put(LinkedList list, Node node);\n+\n+    # Update linked list based on remove operation.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is deleted\n+    public function remove(LinkedList list, Node node);\n+\n+    # Update linked list based on replace operation.\n+    #\n+    # + list - Linked list data structure\n+    # + newNode - Node of the linked list which is replaced by\n+    # + oldNode - Node of the linked list which is to be replaced", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEyMDQzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Update linked list based on clear operation.\n          \n          \n            \n                # Update the linked list based on the clear operation.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388120438", "createdAt": "2020-03-05T07:37:52Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents Ballerina `AbstractEvictionPolicy` object and cache eviction related operations\n+# based on linked list data structure.\n+# Any custom cache implementation should be object-wise similar.\n+public type AbstractEvictionPolicy abstract object {\n+\n+    # Update linked list based on get operation.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is retrieved\n+    public function get(LinkedList list, Node node);\n+\n+    # Update linked list based on put operation.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is newly added\n+    public function put(LinkedList list, Node node);\n+\n+    # Update linked list based on remove operation.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is deleted\n+    public function remove(LinkedList list, Node node);\n+\n+    # Update linked list based on replace operation.\n+    #\n+    # + list - Linked list data structure\n+    # + newNode - Node of the linked list which is replaced by\n+    # + oldNode - Node of the linked list which is to be replaced\n+    public function replace(LinkedList list, Node newNode, Node oldNode);\n+\n+    # Update linked list based on clear operation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEyMDQ4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Update linked list based on evict operation.\n          \n          \n            \n                # Update the linked list based on the evict operation.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388120489", "createdAt": "2020-03-05T07:38:03Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents Ballerina `AbstractEvictionPolicy` object and cache eviction related operations\n+# based on linked list data structure.\n+# Any custom cache implementation should be object-wise similar.\n+public type AbstractEvictionPolicy abstract object {\n+\n+    # Update linked list based on get operation.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is retrieved\n+    public function get(LinkedList list, Node node);\n+\n+    # Update linked list based on put operation.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is newly added\n+    public function put(LinkedList list, Node node);\n+\n+    # Update linked list based on remove operation.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is deleted\n+    public function remove(LinkedList list, Node node);\n+\n+    # Update linked list based on replace operation.\n+    #\n+    # + list - Linked list data structure\n+    # + newNode - Node of the linked list which is replaced by\n+    # + oldNode - Node of the linked list which is to be replaced\n+    public function replace(LinkedList list, Node newNode, Node oldNode);\n+\n+    # Update linked list based on clear operation.\n+    #\n+    # + list - Linked list data structure\n+    public function clear(LinkedList list);\n+\n+    # Update linked list based on evict operation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEyMDU1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The Ndde which should evict from the linked list or `()` if nothing to be evicted\n          \n          \n            \n                # + return - The Node, which should evict from the linked list or `()` if nothing to be evicted", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388120559", "createdAt": "2020-03-05T07:38:16Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_eviction_policy.bal", "diffHunk": "@@ -0,0 +1,58 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents Ballerina `AbstractEvictionPolicy` object and cache eviction related operations\n+# based on linked list data structure.\n+# Any custom cache implementation should be object-wise similar.\n+public type AbstractEvictionPolicy abstract object {\n+\n+    # Update linked list based on get operation.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is retrieved\n+    public function get(LinkedList list, Node node);\n+\n+    # Update linked list based on put operation.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is newly added\n+    public function put(LinkedList list, Node node);\n+\n+    # Update linked list based on remove operation.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is deleted\n+    public function remove(LinkedList list, Node node);\n+\n+    # Update linked list based on replace operation.\n+    #\n+    # + list - Linked list data structure\n+    # + newNode - Node of the linked list which is replaced by\n+    # + oldNode - Node of the linked list which is to be replaced\n+    public function replace(LinkedList list, Node newNode, Node oldNode);\n+\n+    # Update linked list based on clear operation.\n+    #\n+    # + list - Linked list data structure\n+    public function clear(LinkedList list);\n+\n+    # Update linked list based on evict operation.\n+    #\n+    # + list - Linked list data structure\n+    # + return - The Ndde which should evict from the linked list or `()` if nothing to be evicted", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MzQ3NjMy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#pullrequestreview-369347632", "createdAt": "2020-03-05T07:39:18Z", "commit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "state": "COMMENTED", "comments": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNzozOToxOVrOFyJBWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNzo0NDowMlrOFyJH0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEyMDkyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Log and prepare `error` as a `Error`.\n          \n          \n            \n            # Log and prepare the `error` as an `Error`.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388120923", "createdAt": "2020-03-05T07:39:19Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/cache_errors.bal", "diffHunk": "@@ -25,3 +27,19 @@ public type Detail record {\n \n public const CACHE_ERROR = \"{ballerina/cache}Error\";\n public type Error error<CACHE_ERROR, Detail>;\n+\n+# Log and prepare `error` as a `Error`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEyMTA0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // This is a linked list data structure implementation which is used for the eviction algorithm of the cache.\n          \n          \n            \n            // This is a linked list data structure implementation, which is used for the eviction algorithm of the cache.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388121045", "createdAt": "2020-03-05T07:39:40Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/linked_list.bal", "diffHunk": "@@ -0,0 +1,90 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+// This is a linked list data structure implementation which is used for the eviction algorithm of the cache.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEyMTE3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents `LruEvictionPolicy` object which has LRU eviction algorithm related operations\n          \n          \n            \n            # Represents the `LruEvictionPolicy` object, which has LRU eviction algorithm related operations", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388121171", "createdAt": "2020-03-05T07:40:05Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents `LruEvictionPolicy` object which has LRU eviction algorithm related operations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEyMTI1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # based on linked list data structure.\n          \n          \n            \n            # based on a linked list data structure.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388121252", "createdAt": "2020-03-05T07:40:18Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents `LruEvictionPolicy` object which has LRU eviction algorithm related operations\n+# based on linked list data structure.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEyMTM0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Update linked list based on get operation related to LRU eviction algorithm.\n          \n          \n            \n                # Update the linked list based on the get operation related to the LRU eviction algorithm.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388121340", "createdAt": "2020-03-05T07:40:33Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents `LruEvictionPolicy` object which has LRU eviction algorithm related operations\n+# based on linked list data structure.\n+public type LruEvictionPolicy object {\n+\n+    *AbstractEvictionPolicy;\n+\n+    # Update linked list based on get operation related to LRU eviction algorithm.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEyMTM5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + node - Node of the linked list which is retrieved\n          \n          \n            \n                # + node - Node of the linked list, which is retrieved", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388121391", "createdAt": "2020-03-05T07:40:42Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents `LruEvictionPolicy` object which has LRU eviction algorithm related operations\n+# based on linked list data structure.\n+public type LruEvictionPolicy object {\n+\n+    *AbstractEvictionPolicy;\n+\n+    # Update linked list based on get operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is retrieved", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEyMTQ5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Update linked list based on put operation related to LRU eviction algorithm.\n          \n          \n            \n                # Update the linked list based on the put operation related to the LRU eviction algorithm.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388121492", "createdAt": "2020-03-05T07:40:57Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents `LruEvictionPolicy` object which has LRU eviction algorithm related operations\n+# based on linked list data structure.\n+public type LruEvictionPolicy object {\n+\n+    *AbstractEvictionPolicy;\n+\n+    # Update linked list based on get operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is retrieved\n+    public function get(LinkedList list, Node node) {\n+        remove(list, node);\n+        addFirst(list, node);\n+    }\n+\n+    # Update linked list based on put operation related to LRU eviction algorithm.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEyMTYwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + node - Node of the linked list which is newly added\n          \n          \n            \n                # + node - Node of the linked list, which is added newly", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388121603", "createdAt": "2020-03-05T07:41:17Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents `LruEvictionPolicy` object which has LRU eviction algorithm related operations\n+# based on linked list data structure.\n+public type LruEvictionPolicy object {\n+\n+    *AbstractEvictionPolicy;\n+\n+    # Update linked list based on get operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is retrieved\n+    public function get(LinkedList list, Node node) {\n+        remove(list, node);\n+        addFirst(list, node);\n+    }\n+\n+    # Update linked list based on put operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is newly added", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEyMTY2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Update linked list based on remove operation related to LRU eviction algorithm.\n          \n          \n            \n                # Update the linked list based on the remove operation related to the LRU eviction algorithm.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388121666", "createdAt": "2020-03-05T07:41:30Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents `LruEvictionPolicy` object which has LRU eviction algorithm related operations\n+# based on linked list data structure.\n+public type LruEvictionPolicy object {\n+\n+    *AbstractEvictionPolicy;\n+\n+    # Update linked list based on get operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is retrieved\n+    public function get(LinkedList list, Node node) {\n+        remove(list, node);\n+        addFirst(list, node);\n+    }\n+\n+    # Update linked list based on put operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is newly added\n+    public function put(LinkedList list, Node node) {\n+        addFirst(list, node);\n+    }\n+\n+    # Update linked list based on remove operation related to LRU eviction algorithm.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEyMTcyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + node - Node of the linked list which is deleted\n          \n          \n            \n                # + node - Node of the linked list, which is deleted", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388121720", "createdAt": "2020-03-05T07:41:38Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents `LruEvictionPolicy` object which has LRU eviction algorithm related operations\n+# based on linked list data structure.\n+public type LruEvictionPolicy object {\n+\n+    *AbstractEvictionPolicy;\n+\n+    # Update linked list based on get operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is retrieved\n+    public function get(LinkedList list, Node node) {\n+        remove(list, node);\n+        addFirst(list, node);\n+    }\n+\n+    # Update linked list based on put operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is newly added\n+    public function put(LinkedList list, Node node) {\n+        addFirst(list, node);\n+    }\n+\n+    # Update linked list based on remove operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is deleted", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEyMTc5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Update linked list based on replace operation related to LRU eviction algorithm.\n          \n          \n            \n                # Update the linked list based on the replace operation related to the LRU eviction algorithm.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388121797", "createdAt": "2020-03-05T07:41:49Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents `LruEvictionPolicy` object which has LRU eviction algorithm related operations\n+# based on linked list data structure.\n+public type LruEvictionPolicy object {\n+\n+    *AbstractEvictionPolicy;\n+\n+    # Update linked list based on get operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is retrieved\n+    public function get(LinkedList list, Node node) {\n+        remove(list, node);\n+        addFirst(list, node);\n+    }\n+\n+    # Update linked list based on put operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is newly added\n+    public function put(LinkedList list, Node node) {\n+        addFirst(list, node);\n+    }\n+\n+    # Update linked list based on remove operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is deleted\n+    public function remove(LinkedList list, Node node) {\n+        remove(list, node);\n+    }\n+\n+    # Update linked list based on replace operation related to LRU eviction algorithm.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEyMTg2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + newNode - Node of the linked list which is replaced by\n          \n          \n            \n                # + newNode - Node of the linked list, which is used for replacing", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388121865", "createdAt": "2020-03-05T07:42:02Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents `LruEvictionPolicy` object which has LRU eviction algorithm related operations\n+# based on linked list data structure.\n+public type LruEvictionPolicy object {\n+\n+    *AbstractEvictionPolicy;\n+\n+    # Update linked list based on get operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is retrieved\n+    public function get(LinkedList list, Node node) {\n+        remove(list, node);\n+        addFirst(list, node);\n+    }\n+\n+    # Update linked list based on put operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is newly added\n+    public function put(LinkedList list, Node node) {\n+        addFirst(list, node);\n+    }\n+\n+    # Update linked list based on remove operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is deleted\n+    public function remove(LinkedList list, Node node) {\n+        remove(list, node);\n+    }\n+\n+    # Update linked list based on replace operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    # + newNode - Node of the linked list which is replaced by", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEyMTkyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + oldNode - Node of the linked list which is to be replaced\n          \n          \n            \n                # + oldNode - Node of the linked list, which will be replaced", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388121920", "createdAt": "2020-03-05T07:42:12Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents `LruEvictionPolicy` object which has LRU eviction algorithm related operations\n+# based on linked list data structure.\n+public type LruEvictionPolicy object {\n+\n+    *AbstractEvictionPolicy;\n+\n+    # Update linked list based on get operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is retrieved\n+    public function get(LinkedList list, Node node) {\n+        remove(list, node);\n+        addFirst(list, node);\n+    }\n+\n+    # Update linked list based on put operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is newly added\n+    public function put(LinkedList list, Node node) {\n+        addFirst(list, node);\n+    }\n+\n+    # Update linked list based on remove operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is deleted\n+    public function remove(LinkedList list, Node node) {\n+        remove(list, node);\n+    }\n+\n+    # Update linked list based on replace operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    # + newNode - Node of the linked list which is replaced by\n+    # + oldNode - Node of the linked list which is to be replaced", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEyMjAwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Update linked list based on clear operation related to LRU eviction algorithm.\n          \n          \n            \n                # Update the linked list based on the clear operation related to the LRU eviction algorithm.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388122001", "createdAt": "2020-03-05T07:42:27Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents `LruEvictionPolicy` object which has LRU eviction algorithm related operations\n+# based on linked list data structure.\n+public type LruEvictionPolicy object {\n+\n+    *AbstractEvictionPolicy;\n+\n+    # Update linked list based on get operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is retrieved\n+    public function get(LinkedList list, Node node) {\n+        remove(list, node);\n+        addFirst(list, node);\n+    }\n+\n+    # Update linked list based on put operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is newly added\n+    public function put(LinkedList list, Node node) {\n+        addFirst(list, node);\n+    }\n+\n+    # Update linked list based on remove operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is deleted\n+    public function remove(LinkedList list, Node node) {\n+        remove(list, node);\n+    }\n+\n+    # Update linked list based on replace operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    # + newNode - Node of the linked list which is replaced by\n+    # + oldNode - Node of the linked list which is to be replaced\n+    public function replace(LinkedList list, Node newNode, Node oldNode) {\n+        remove(list, oldNode);\n+        addFirst(list, newNode);\n+    }\n+\n+    # Update linked list based on clear operation related to LRU eviction algorithm.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEyMjA4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Update linked list based on evict operation related to LRU eviction algorithm.\n          \n          \n            \n                # Update the linked list based on the evict operation related to the LRU eviction algorithm.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388122082", "createdAt": "2020-03-05T07:42:39Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents `LruEvictionPolicy` object which has LRU eviction algorithm related operations\n+# based on linked list data structure.\n+public type LruEvictionPolicy object {\n+\n+    *AbstractEvictionPolicy;\n+\n+    # Update linked list based on get operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is retrieved\n+    public function get(LinkedList list, Node node) {\n+        remove(list, node);\n+        addFirst(list, node);\n+    }\n+\n+    # Update linked list based on put operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is newly added\n+    public function put(LinkedList list, Node node) {\n+        addFirst(list, node);\n+    }\n+\n+    # Update linked list based on remove operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is deleted\n+    public function remove(LinkedList list, Node node) {\n+        remove(list, node);\n+    }\n+\n+    # Update linked list based on replace operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    # + newNode - Node of the linked list which is replaced by\n+    # + oldNode - Node of the linked list which is to be replaced\n+    public function replace(LinkedList list, Node newNode, Node oldNode) {\n+        remove(list, oldNode);\n+        addFirst(list, newNode);\n+    }\n+\n+    # Update linked list based on clear operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    public function clear(LinkedList list) {\n+        clear(list);\n+    }\n+\n+    # Update linked list based on evict operation related to LRU eviction algorithm.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEyMjE2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The Ndde which should evict from the linked list or `()` if nothing to be evicted\n          \n          \n            \n                # + return - The Node, which should evict from the linked list or `()` if nothing to be evicted", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388122168", "createdAt": "2020-03-05T07:42:53Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/lru_eviction_policy.bal", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents `LruEvictionPolicy` object which has LRU eviction algorithm related operations\n+# based on linked list data structure.\n+public type LruEvictionPolicy object {\n+\n+    *AbstractEvictionPolicy;\n+\n+    # Update linked list based on get operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is retrieved\n+    public function get(LinkedList list, Node node) {\n+        remove(list, node);\n+        addFirst(list, node);\n+    }\n+\n+    # Update linked list based on put operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is newly added\n+    public function put(LinkedList list, Node node) {\n+        addFirst(list, node);\n+    }\n+\n+    # Update linked list based on remove operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    # + node - Node of the linked list which is deleted\n+    public function remove(LinkedList list, Node node) {\n+        remove(list, node);\n+    }\n+\n+    # Update linked list based on replace operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    # + newNode - Node of the linked list which is replaced by\n+    # + oldNode - Node of the linked list which is to be replaced\n+    public function replace(LinkedList list, Node newNode, Node oldNode) {\n+        remove(list, oldNode);\n+        addFirst(list, newNode);\n+    }\n+\n+    # Update linked list based on clear operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    public function clear(LinkedList list) {\n+        clear(list);\n+    }\n+\n+    # Update linked list based on evict operation related to LRU eviction algorithm.\n+    #\n+    # + list - Linked list data structure\n+    # + return - The Ndde which should evict from the linked list or `()` if nothing to be evicted", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEyMjUwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + oauth2Cache - Cache used to store OAuth2 token and information\n          \n          \n            \n            # + oauth2Cache - Cache used to store the OAuth2 token and other related information", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388122509", "createdAt": "2020-03-05T07:43:50Z", "author": {"login": "praneesha"}, "path": "stdlib/oauth2/src/main/ballerina/src/oauth2/inbound_oauth2_provider.bal", "diffHunk": "@@ -157,35 +148,22 @@ public function getScopes(string scopes) returns string[] {\n #\n # + url - URL of the introspection server\n # + tokenTypeHint - A hint about the type of the token submitted for introspection\n-# + oauth2CacheConfig - Configurations for the OAuth2 cache\n+# + oauth2Cache - Cache used to store OAuth2 token and information", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEyMjU3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + defaultTokenExpTimeInSeconds - Expiration time of the tokens if introspection response does not contain `exp` field\n          \n          \n            \n            # + defaultTokenExpTimeInSeconds - Expiration time of the tokens if introspection response does not contain an `exp` field", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388122579", "createdAt": "2020-03-05T07:44:02Z", "author": {"login": "praneesha"}, "path": "stdlib/oauth2/src/main/ballerina/src/oauth2/inbound_oauth2_provider.bal", "diffHunk": "@@ -157,35 +148,22 @@ public function getScopes(string scopes) returns string[] {\n #\n # + url - URL of the introspection server\n # + tokenTypeHint - A hint about the type of the token submitted for introspection\n-# + oauth2CacheConfig - Configurations for the OAuth2 cache\n+# + oauth2Cache - Cache used to store OAuth2 token and information\n+# + defaultTokenExpTimeInSeconds - Expiration time of the tokens if introspection response does not contain `exp` field", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39689d358347e856d69892ab93d3992612f3c715"}, "originalPosition": 80}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fc4f8d8e13d101acc1b92d04ba3fddc3df1cd77", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8fc4f8d8e13d101acc1b92d04ba3fddc3df1cd77", "committedDate": "2020-03-05T11:31:38Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMDYwOTE1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#pullrequestreview-370060915", "createdAt": "2020-03-06T03:21:20Z", "commit": {"oid": "6ba74184c4825f0b2184bc30867cc4234522de17"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMzoyMToyMVrOFysEUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMzoyMToyMVrOFysEUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY5NTEyMA==", "bodyText": "Do we need to throw an error if entry not found during the invalidation? What if we return a boolean instead?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r388695120", "createdAt": "2020-03-06T03:21:21Z", "author": {"login": "wggihan"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_cache.bal", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents the Ballerina `AbstractCache` object and cache-related operations.\n+# Any custom cache implementation should be object-wise similar.\n+public type AbstractCache abstract object {\n+\n+    # Add the given key value pair to the cache.\n+    #\n+    # + key - Key of the cached value\n+    # + value - Value to be cached\n+    # + maxAgeInSeconds - The value in seconds, which the cache entry is valid. '-1' means, the entry is valid forever.\n+    public function put(string key, any value, int maxAgeInSeconds = -1);\n+\n+    # Return the cached value associated with the given key.\n+    #\n+    # + key - Key, which is used to retrieve the cached value\n+    # + return - The cached value associated with the given key or\n+    # `Error` if the provided cache key is not available or if any error occurred while retrieving from the cache.\n+    public function get(string key) returns any|Error;\n+\n+    # Discard a cached value from the cache.\n+    #\n+    # + key - Key of the cache entry which needs to be discarded\n+    # + return - `()` if successfully discarded or\n+    # `Error` if the provided cache key is not available or if any error occurred while discarding from the cache.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ba74184c4825f0b2184bc30867cc4234522de17"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27e76cb0ff8fd55778970f17e0eea27b4e14ffa2", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/27e76cb0ff8fd55778970f17e0eea27b4e14ffa2", "committedDate": "2020-03-06T04:44:18Z", "message": "Update API docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba7b2331dc8504ae7aac0646ef83cabd7f7ad4fd", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ba7b2331dc8504ae7aac0646ef83cabd7f7ad4fd", "committedDate": "2020-03-06T04:44:36Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into refactor-cache"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6ba74184c4825f0b2184bc30867cc4234522de17", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6ba74184c4825f0b2184bc30867cc4234522de17", "committedDate": "2020-03-05T11:39:34Z", "message": "Update API docs"}, "afterCommit": {"oid": "2e69b4db1c1b0b75e295ff5efa1848f86647a1a9", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2e69b4db1c1b0b75e295ff5efa1848f86647a1a9", "committedDate": "2020-03-06T05:25:39Z", "message": "Fix multiple attachment usage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0d5b1f49f4709735e213a1a64570eeea65ebe2b", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b0d5b1f49f4709735e213a1a64570eeea65ebe2b", "committedDate": "2020-03-06T08:01:50Z", "message": "Fix multiple attachment usage"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2e69b4db1c1b0b75e295ff5efa1848f86647a1a9", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2e69b4db1c1b0b75e295ff5efa1848f86647a1a9", "committedDate": "2020-03-06T05:25:39Z", "message": "Fix multiple attachment usage"}, "afterCommit": {"oid": "b0d5b1f49f4709735e213a1a64570eeea65ebe2b", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b0d5b1f49f4709735e213a1a64570eeea65ebe2b", "committedDate": "2020-03-06T08:01:50Z", "message": "Fix multiple attachment usage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a0751c6de1541d0801d891823784cff6a3654b1", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5a0751c6de1541d0801d891823784cff6a3654b1", "committedDate": "2020-03-06T13:47:04Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into refactor-cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65c1555af131c0fe187dac19c12e41c82c78228a", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/65c1555af131c0fe187dac19c12e41c82c78228a", "committedDate": "2020-03-06T16:23:50Z", "message": "Update cache API of put operation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f7b6e2cb70931d180a4bdbdb359fb75407cf4fc0", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f7b6e2cb70931d180a4bdbdb359fb75407cf4fc0", "committedDate": "2020-03-06T14:41:19Z", "message": "Update cache API usages"}, "afterCommit": {"oid": "fd2423c402c654c911a6d5871bee22a21e396794", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fd2423c402c654c911a6d5871bee22a21e396794", "committedDate": "2020-03-06T16:24:07Z", "message": "Update cache API usages"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fd2423c402c654c911a6d5871bee22a21e396794", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fd2423c402c654c911a6d5871bee22a21e396794", "committedDate": "2020-03-06T16:24:07Z", "message": "Update cache API usages"}, "afterCommit": {"oid": "b553565b0c83f5126efb5e0a34fc2a2f8475c342", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b553565b0c83f5126efb5e0a34fc2a2f8475c342", "committedDate": "2020-03-09T02:20:56Z", "message": "Update cache API usages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63d00cf5f656bcc010807eb3582bbb10eb21d8bf", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/63d00cf5f656bcc010807eb3582bbb10eb21d8bf", "committedDate": "2020-03-09T02:23:37Z", "message": "Update cache API usages"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b553565b0c83f5126efb5e0a34fc2a2f8475c342", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b553565b0c83f5126efb5e0a34fc2a2f8475c342", "committedDate": "2020-03-09T02:20:56Z", "message": "Update cache API usages"}, "afterCommit": {"oid": "63d00cf5f656bcc010807eb3582bbb10eb21d8bf", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/63d00cf5f656bcc010807eb3582bbb10eb21d8bf", "committedDate": "2020-03-09T02:23:37Z", "message": "Update cache API usages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "431b2c67c1519df02f92ccf1e8a0e658afd5e870", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/431b2c67c1519df02f92ccf1e8a0e658afd5e870", "committedDate": "2020-03-09T04:00:15Z", "message": "Update module.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7ffc61bfe381eb5a03befddc31222f9eace1c97f", "committedDate": "2020-03-09T04:18:54Z", "message": "Update cache BBE"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNjcxODc4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#pullrequestreview-371671878", "createdAt": "2020-03-10T04:12:43Z", "commit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "state": "COMMENTED", "comments": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNDoxMjo0M1rOF0A-7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNDoyMTowN1rOF0BGLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NjM4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Add the given key value pair to the cache. If the cache previously contained a value associated with key, the\n          \n          \n            \n                # Add the given key value pair to the cache. If the cache previously contained a value associated with the key, the", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390086382", "createdAt": "2020-03-10T04:12:43Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_cache.bal", "diffHunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents the Ballerina `AbstractCache` object and cache-related operations.\n+# Any custom cache implementation should be object-wise similar.\n+public type AbstractCache abstract object {\n+\n+    # Add the given key value pair to the cache. If the cache previously contained a value associated with key, the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NjQxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # old value is replaced by value.\n          \n          \n            \n                # old value is replaced by the new value.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390086416", "createdAt": "2020-03-10T04:12:51Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_cache.bal", "diffHunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents the Ballerina `AbstractCache` object and cache-related operations.\n+# Any custom cache implementation should be object-wise similar.\n+public type AbstractCache abstract object {\n+\n+    # Add the given key value pair to the cache. If the cache previously contained a value associated with key, the\n+    # old value is replaced by value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NjUxNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + maxAgeInSeconds - The value in seconds, which the cache entry is valid. '-1' means, the entry is valid forever.\n          \n          \n            \n                # + maxAgeInSeconds - The time in seconds during which the cache entry is valid. '-1' means, the entry is valid forever.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390086517", "createdAt": "2020-03-10T04:13:20Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_cache.bal", "diffHunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents the Ballerina `AbstractCache` object and cache-related operations.\n+# Any custom cache implementation should be object-wise similar.\n+public type AbstractCache abstract object {\n+\n+    # Add the given key value pair to the cache. If the cache previously contained a value associated with key, the\n+    # old value is replaced by value.\n+    #\n+    # + key - Key of the cached value\n+    # + value - Value to be cached\n+    # + maxAgeInSeconds - The value in seconds, which the cache entry is valid. '-1' means, the entry is valid forever.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NjYwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # `Error` if any error occurred while inserting entry to the cache.\n          \n          \n            \n                # `Error` if any error occurred while inserting the entry to the cache.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390086609", "createdAt": "2020-03-10T04:13:36Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_cache.bal", "diffHunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents the Ballerina `AbstractCache` object and cache-related operations.\n+# Any custom cache implementation should be object-wise similar.\n+public type AbstractCache abstract object {\n+\n+    # Add the given key value pair to the cache. If the cache previously contained a value associated with key, the\n+    # old value is replaced by value.\n+    #\n+    # + key - Key of the cached value\n+    # + value - Value to be cached\n+    # + maxAgeInSeconds - The value in seconds, which the cache entry is valid. '-1' means, the entry is valid forever.\n+    # + return - `()` if successfully added to the cache or\n+    # `Error` if any error occurred while inserting entry to the cache.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NjY4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - The cached value associated with the given key or\n          \n          \n            \n                # + return - The cached value associated with the given key,", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390086685", "createdAt": "2020-03-10T04:13:56Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_cache.bal", "diffHunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents the Ballerina `AbstractCache` object and cache-related operations.\n+# Any custom cache implementation should be object-wise similar.\n+public type AbstractCache abstract object {\n+\n+    # Add the given key value pair to the cache. If the cache previously contained a value associated with key, the\n+    # old value is replaced by value.\n+    #\n+    # + key - Key of the cached value\n+    # + value - Value to be cached\n+    # + maxAgeInSeconds - The value in seconds, which the cache entry is valid. '-1' means, the entry is valid forever.\n+    # + return - `()` if successfully added to the cache or\n+    # `Error` if any error occurred while inserting entry to the cache.\n+    public function put(string key, any value, int maxAgeInSeconds = -1) returns Error?;\n+\n+    # Return the cached value associated with the given key.\n+    #\n+    # + key - Key, which is used to retrieve the cached value\n+    # + return - The cached value associated with the given key or", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NjcwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # `Error` if the provided cache key is not available or if any error occurred while retrieving from the cache.\n          \n          \n            \n                # `Error` if the provided cache key is not available, or if any error occurred while retrieving from the cache.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390086703", "createdAt": "2020-03-10T04:14:05Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_cache.bal", "diffHunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents the Ballerina `AbstractCache` object and cache-related operations.\n+# Any custom cache implementation should be object-wise similar.\n+public type AbstractCache abstract object {\n+\n+    # Add the given key value pair to the cache. If the cache previously contained a value associated with key, the\n+    # old value is replaced by value.\n+    #\n+    # + key - Key of the cached value\n+    # + value - Value to be cached\n+    # + maxAgeInSeconds - The value in seconds, which the cache entry is valid. '-1' means, the entry is valid forever.\n+    # + return - `()` if successfully added to the cache or\n+    # `Error` if any error occurred while inserting entry to the cache.\n+    public function put(string key, any value, int maxAgeInSeconds = -1) returns Error?;\n+\n+    # Return the cached value associated with the given key.\n+    #\n+    # + key - Key, which is used to retrieve the cached value\n+    # + return - The cached value associated with the given key or\n+    # `Error` if the provided cache key is not available or if any error occurred while retrieving from the cache.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4Njc4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + key - Key of the cache entry which needs to be discarded\n          \n          \n            \n                # + key - Key of the cache entry, which needs to be discarded", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390086789", "createdAt": "2020-03-10T04:14:29Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_cache.bal", "diffHunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents the Ballerina `AbstractCache` object and cache-related operations.\n+# Any custom cache implementation should be object-wise similar.\n+public type AbstractCache abstract object {\n+\n+    # Add the given key value pair to the cache. If the cache previously contained a value associated with key, the\n+    # old value is replaced by value.\n+    #\n+    # + key - Key of the cached value\n+    # + value - Value to be cached\n+    # + maxAgeInSeconds - The value in seconds, which the cache entry is valid. '-1' means, the entry is valid forever.\n+    # + return - `()` if successfully added to the cache or\n+    # `Error` if any error occurred while inserting entry to the cache.\n+    public function put(string key, any value, int maxAgeInSeconds = -1) returns Error?;\n+\n+    # Return the cached value associated with the given key.\n+    #\n+    # + key - Key, which is used to retrieve the cached value\n+    # + return - The cached value associated with the given key or\n+    # `Error` if the provided cache key is not available or if any error occurred while retrieving from the cache.\n+    public function get(string key) returns any|Error;\n+\n+    # Discard a cached value from the cache.\n+    #\n+    # + key - Key of the cache entry which needs to be discarded", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NjgxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `()` if successfully discarded or\n          \n          \n            \n                # + return - `()` if successfully discarded,", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390086812", "createdAt": "2020-03-10T04:14:38Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_cache.bal", "diffHunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents the Ballerina `AbstractCache` object and cache-related operations.\n+# Any custom cache implementation should be object-wise similar.\n+public type AbstractCache abstract object {\n+\n+    # Add the given key value pair to the cache. If the cache previously contained a value associated with key, the\n+    # old value is replaced by value.\n+    #\n+    # + key - Key of the cached value\n+    # + value - Value to be cached\n+    # + maxAgeInSeconds - The value in seconds, which the cache entry is valid. '-1' means, the entry is valid forever.\n+    # + return - `()` if successfully added to the cache or\n+    # `Error` if any error occurred while inserting entry to the cache.\n+    public function put(string key, any value, int maxAgeInSeconds = -1) returns Error?;\n+\n+    # Return the cached value associated with the given key.\n+    #\n+    # + key - Key, which is used to retrieve the cached value\n+    # + return - The cached value associated with the given key or\n+    # `Error` if the provided cache key is not available or if any error occurred while retrieving from the cache.\n+    public function get(string key) returns any|Error;\n+\n+    # Discard a cached value from the cache.\n+    #\n+    # + key - Key of the cache entry which needs to be discarded\n+    # + return - `()` if successfully discarded or", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NjgzMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # `Error` if the provided cache key is not available or if any error occurred while discarding from the cache.\n          \n          \n            \n                # `Error` if the provided cache key is not available, or if any error occurred while discarding from the cache.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390086833", "createdAt": "2020-03-10T04:14:46Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/abstract_cache.bal", "diffHunk": "@@ -0,0 +1,72 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents the Ballerina `AbstractCache` object and cache-related operations.\n+# Any custom cache implementation should be object-wise similar.\n+public type AbstractCache abstract object {\n+\n+    # Add the given key value pair to the cache. If the cache previously contained a value associated with key, the\n+    # old value is replaced by value.\n+    #\n+    # + key - Key of the cached value\n+    # + value - Value to be cached\n+    # + maxAgeInSeconds - The value in seconds, which the cache entry is valid. '-1' means, the entry is valid forever.\n+    # + return - `()` if successfully added to the cache or\n+    # `Error` if any error occurred while inserting entry to the cache.\n+    public function put(string key, any value, int maxAgeInSeconds = -1) returns Error?;\n+\n+    # Return the cached value associated with the given key.\n+    #\n+    # + key - Key, which is used to retrieve the cached value\n+    # + return - The cached value associated with the given key or\n+    # `Error` if the provided cache key is not available or if any error occurred while retrieving from the cache.\n+    public function get(string key) returns any|Error;\n+\n+    # Discard a cached value from the cache.\n+    #\n+    # + key - Key of the cache entry which needs to be discarded\n+    # + return - `()` if successfully discarded or\n+    # `Error` if the provided cache key is not available or if any error occurred while discarding from the cache.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NzI1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `AbstractCache` object which has the common APIs as follows and there can be \"custom implementations\" with different data storage like file, database etc. with structural equivalent to the abstract object.\n          \n          \n            \n            The `AbstractCache` object has the common APIs as follows. Also, there can be \"custom implementations\" with a different data storage like file, database, etc. with structural equivalency to the abstract object.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390087253", "createdAt": "2020-03-10T04:16:41Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -1,25 +1,167 @@\n ## Module Overview\n \n-This module offers a cache that supports time-based eviction, and size-based eviction.\n+The `AbstractCache` object which has the common APIs as follows and there can be \"custom implementations\" with different data storage like file, database etc. with structural equivalent to the abstract object.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NzQzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `AbstractEvictionPolicy` object which has the common APIs as follows and there can be \"custom implementations\" with different eviction algorithms with structural equivalent to the abstract object. That custom implementation has to maintain the `LinkedList` data structure according to the eviction algorithm.\n          \n          \n            \n            The `AbstractEvictionPolicy` object has the common APIs as follows. Also, there can be \"custom implementations\" with different eviction algorithms with structural equivalency to the abstract object. That custom implementation has to maintain the `LinkedList` data structure according to the eviction algorithm.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390087431", "createdAt": "2020-03-10T04:17:37Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -1,25 +1,167 @@\n ## Module Overview\n \n-This module offers a cache that supports time-based eviction, and size-based eviction.\n+The `AbstractCache` object which has the common APIs as follows and there can be \"custom implementations\" with different data storage like file, database etc. with structural equivalent to the abstract object.\n \n-This means that entries are removed from the cache once the expiry time has elapsed (i.e., time-based eviction), or when the cache runs out of \n-space (i.e., size-based eviction). Caching is useful when a value takes significant cost or time to compute and \n-retrieve, and it is therefore useful to cache it for future use.\n+```ballerina\n+public type AbstractCache abstract object {\n+    public function put(string key, any value, int maxAgeInSeconds) returns Error?;\n+    public function get(string key) returns any|Error;\n+    public function invalidate(string key) returns Error?;\n+    public function invalidateAll() returns Error?;\n+    public function hasKey(string key) returns boolean;\n+    public function keys() returns string[];\n+    public function size() returns int;\n+    public function capacity() returns int;\n+};\n+```\n \n-The following code snippet creates a cache that can hold a maximum of 10 entries. An entry of this cache expires \n-one minute after its last access. When the cache is full, 20% of the entries (i.e., 2 entries) will be evicted to make \n-space for new entries.\n+The `AbstractEvictionPolicy` object which has the common APIs as follows and there can be \"custom implementations\" with different eviction algorithms with structural equivalent to the abstract object. That custom implementation has to maintain the `LinkedList` data structure according to the eviction algorithm.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NzUzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Ballerina Cache module provides a `Cache` object which is a map data structure based implementation of `AbstractCache` object. Also, it provides `LruEvictionPolicy` object which is based on LRU eviction algorithm.\n          \n          \n            \n            The Ballerina Cache module provides a `Cache` object, which is a map data structure based implementation of the `AbstractCache` object. Also, it provides the `LruEvictionPolicy` object, which is based on the LRU eviction algorithm.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390087534", "createdAt": "2020-03-10T04:18:09Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -1,25 +1,167 @@\n ## Module Overview\n \n-This module offers a cache that supports time-based eviction, and size-based eviction.\n+The `AbstractCache` object which has the common APIs as follows and there can be \"custom implementations\" with different data storage like file, database etc. with structural equivalent to the abstract object.\n \n-This means that entries are removed from the cache once the expiry time has elapsed (i.e., time-based eviction), or when the cache runs out of \n-space (i.e., size-based eviction). Caching is useful when a value takes significant cost or time to compute and \n-retrieve, and it is therefore useful to cache it for future use.\n+```ballerina\n+public type AbstractCache abstract object {\n+    public function put(string key, any value, int maxAgeInSeconds) returns Error?;\n+    public function get(string key) returns any|Error;\n+    public function invalidate(string key) returns Error?;\n+    public function invalidateAll() returns Error?;\n+    public function hasKey(string key) returns boolean;\n+    public function keys() returns string[];\n+    public function size() returns int;\n+    public function capacity() returns int;\n+};\n+```\n \n-The following code snippet creates a cache that can hold a maximum of 10 entries. An entry of this cache expires \n-one minute after its last access. When the cache is full, 20% of the entries (i.e., 2 entries) will be evicted to make \n-space for new entries.\n+The `AbstractEvictionPolicy` object which has the common APIs as follows and there can be \"custom implementations\" with different eviction algorithms with structural equivalent to the abstract object. That custom implementation has to maintain the `LinkedList` data structure according to the eviction algorithm.\n \n ```ballerina\n-// The `evictionFactor` specifies the percentage of items\n-// that will be evicted when the cache is full.\n-cache:Cache cache = new(expiryTimeInMillis = 60000, capacity = 10, evictionFactor = 0.2);\n+public type AbstractEvictionPolicy abstract object {\n+    public function get(LinkedList list, Node node);\n+    public function put(LinkedList list, Node node);\n+    public function remove(LinkedList list, Node node);\n+    public function replace(LinkedList list, Node newNode, Node oldNode);\n+    public function clear(LinkedList list);\n+    public function evict(LinkedList list) returns Node?;\n+};\n+```\n \n-// Enter a value, and a key to reference that value.\n-// This will be a new entry in the cache.\n-cache.put(\"key-a\", \"value-a\");\n+Ballerina Cache module provides a `Cache` object which is a map data structure based implementation of `AbstractCache` object. Also, it provides `LruEvictionPolicy` object which is based on LRU eviction algorithm.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NzYxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            While initializing the `Cache`, the developer have to pass the following parameters as the cache configurations.\n          \n          \n            \n            While initializing the `Cache`, the developer has to pass the following parameters as the cache configurations.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390087618", "createdAt": "2020-03-10T04:18:26Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -1,25 +1,167 @@\n ## Module Overview\n \n-This module offers a cache that supports time-based eviction, and size-based eviction.\n+The `AbstractCache` object which has the common APIs as follows and there can be \"custom implementations\" with different data storage like file, database etc. with structural equivalent to the abstract object.\n \n-This means that entries are removed from the cache once the expiry time has elapsed (i.e., time-based eviction), or when the cache runs out of \n-space (i.e., size-based eviction). Caching is useful when a value takes significant cost or time to compute and \n-retrieve, and it is therefore useful to cache it for future use.\n+```ballerina\n+public type AbstractCache abstract object {\n+    public function put(string key, any value, int maxAgeInSeconds) returns Error?;\n+    public function get(string key) returns any|Error;\n+    public function invalidate(string key) returns Error?;\n+    public function invalidateAll() returns Error?;\n+    public function hasKey(string key) returns boolean;\n+    public function keys() returns string[];\n+    public function size() returns int;\n+    public function capacity() returns int;\n+};\n+```\n \n-The following code snippet creates a cache that can hold a maximum of 10 entries. An entry of this cache expires \n-one minute after its last access. When the cache is full, 20% of the entries (i.e., 2 entries) will be evicted to make \n-space for new entries.\n+The `AbstractEvictionPolicy` object which has the common APIs as follows and there can be \"custom implementations\" with different eviction algorithms with structural equivalent to the abstract object. That custom implementation has to maintain the `LinkedList` data structure according to the eviction algorithm.\n \n ```ballerina\n-// The `evictionFactor` specifies the percentage of items\n-// that will be evicted when the cache is full.\n-cache:Cache cache = new(expiryTimeInMillis = 60000, capacity = 10, evictionFactor = 0.2);\n+public type AbstractEvictionPolicy abstract object {\n+    public function get(LinkedList list, Node node);\n+    public function put(LinkedList list, Node node);\n+    public function remove(LinkedList list, Node node);\n+    public function replace(LinkedList list, Node newNode, Node oldNode);\n+    public function clear(LinkedList list);\n+    public function evict(LinkedList list) returns Node?;\n+};\n+```\n \n-// Enter a value, and a key to reference that value.\n-// This will be a new entry in the cache.\n-cache.put(\"key-a\", \"value-a\");\n+Ballerina Cache module provides a `Cache` object which is a map data structure based implementation of `AbstractCache` object. Also, it provides `LruEvictionPolicy` object which is based on LRU eviction algorithm.\n \n-// Use the same key to retrieve the value.\n-string returnValue = <string>cache.get(\"key-a\");\n+While initializing the `Cache`, the developer have to pass the following parameters as the cache configurations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NzY3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - `evictionPolicy` - The policy which defines the cache eviction algorithm\n          \n          \n            \n            - `evictionPolicy` - The policy, which defines the cache eviction algorithm", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390087678", "createdAt": "2020-03-10T04:18:36Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -1,25 +1,167 @@\n ## Module Overview\n \n-This module offers a cache that supports time-based eviction, and size-based eviction.\n+The `AbstractCache` object which has the common APIs as follows and there can be \"custom implementations\" with different data storage like file, database etc. with structural equivalent to the abstract object.\n \n-This means that entries are removed from the cache once the expiry time has elapsed (i.e., time-based eviction), or when the cache runs out of \n-space (i.e., size-based eviction). Caching is useful when a value takes significant cost or time to compute and \n-retrieve, and it is therefore useful to cache it for future use.\n+```ballerina\n+public type AbstractCache abstract object {\n+    public function put(string key, any value, int maxAgeInSeconds) returns Error?;\n+    public function get(string key) returns any|Error;\n+    public function invalidate(string key) returns Error?;\n+    public function invalidateAll() returns Error?;\n+    public function hasKey(string key) returns boolean;\n+    public function keys() returns string[];\n+    public function size() returns int;\n+    public function capacity() returns int;\n+};\n+```\n \n-The following code snippet creates a cache that can hold a maximum of 10 entries. An entry of this cache expires \n-one minute after its last access. When the cache is full, 20% of the entries (i.e., 2 entries) will be evicted to make \n-space for new entries.\n+The `AbstractEvictionPolicy` object which has the common APIs as follows and there can be \"custom implementations\" with different eviction algorithms with structural equivalent to the abstract object. That custom implementation has to maintain the `LinkedList` data structure according to the eviction algorithm.\n \n ```ballerina\n-// The `evictionFactor` specifies the percentage of items\n-// that will be evicted when the cache is full.\n-cache:Cache cache = new(expiryTimeInMillis = 60000, capacity = 10, evictionFactor = 0.2);\n+public type AbstractEvictionPolicy abstract object {\n+    public function get(LinkedList list, Node node);\n+    public function put(LinkedList list, Node node);\n+    public function remove(LinkedList list, Node node);\n+    public function replace(LinkedList list, Node newNode, Node oldNode);\n+    public function clear(LinkedList list);\n+    public function evict(LinkedList list) returns Node?;\n+};\n+```\n \n-// Enter a value, and a key to reference that value.\n-// This will be a new entry in the cache.\n-cache.put(\"key-a\", \"value-a\");\n+Ballerina Cache module provides a `Cache` object which is a map data structure based implementation of `AbstractCache` object. Also, it provides `LruEvictionPolicy` object which is based on LRU eviction algorithm.\n \n-// Use the same key to retrieve the value.\n-string returnValue = <string>cache.get(\"key-a\");\n+While initializing the `Cache`, the developer have to pass the following parameters as the cache configurations.\n+- `capacity` - Max number of entries allowed for the cache\n+- `evictionPolicy` - The policy which defines the cache eviction algorithm", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4Nzc2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - `evictionFactor` - The factor which the entries will be evicted once the cache full\n          \n          \n            \n            - `evictionFactor` - The factor of which the entries will be evicted once the cache is full", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390087761", "createdAt": "2020-03-10T04:18:54Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -1,25 +1,167 @@\n ## Module Overview\n \n-This module offers a cache that supports time-based eviction, and size-based eviction.\n+The `AbstractCache` object which has the common APIs as follows and there can be \"custom implementations\" with different data storage like file, database etc. with structural equivalent to the abstract object.\n \n-This means that entries are removed from the cache once the expiry time has elapsed (i.e., time-based eviction), or when the cache runs out of \n-space (i.e., size-based eviction). Caching is useful when a value takes significant cost or time to compute and \n-retrieve, and it is therefore useful to cache it for future use.\n+```ballerina\n+public type AbstractCache abstract object {\n+    public function put(string key, any value, int maxAgeInSeconds) returns Error?;\n+    public function get(string key) returns any|Error;\n+    public function invalidate(string key) returns Error?;\n+    public function invalidateAll() returns Error?;\n+    public function hasKey(string key) returns boolean;\n+    public function keys() returns string[];\n+    public function size() returns int;\n+    public function capacity() returns int;\n+};\n+```\n \n-The following code snippet creates a cache that can hold a maximum of 10 entries. An entry of this cache expires \n-one minute after its last access. When the cache is full, 20% of the entries (i.e., 2 entries) will be evicted to make \n-space for new entries.\n+The `AbstractEvictionPolicy` object which has the common APIs as follows and there can be \"custom implementations\" with different eviction algorithms with structural equivalent to the abstract object. That custom implementation has to maintain the `LinkedList` data structure according to the eviction algorithm.\n \n ```ballerina\n-// The `evictionFactor` specifies the percentage of items\n-// that will be evicted when the cache is full.\n-cache:Cache cache = new(expiryTimeInMillis = 60000, capacity = 10, evictionFactor = 0.2);\n+public type AbstractEvictionPolicy abstract object {\n+    public function get(LinkedList list, Node node);\n+    public function put(LinkedList list, Node node);\n+    public function remove(LinkedList list, Node node);\n+    public function replace(LinkedList list, Node newNode, Node oldNode);\n+    public function clear(LinkedList list);\n+    public function evict(LinkedList list) returns Node?;\n+};\n+```\n \n-// Enter a value, and a key to reference that value.\n-// This will be a new entry in the cache.\n-cache.put(\"key-a\", \"value-a\");\n+Ballerina Cache module provides a `Cache` object which is a map data structure based implementation of `AbstractCache` object. Also, it provides `LruEvictionPolicy` object which is based on LRU eviction algorithm.\n \n-// Use the same key to retrieve the value.\n-string returnValue = <string>cache.get(\"key-a\");\n+While initializing the `Cache`, the developer have to pass the following parameters as the cache configurations.\n+- `capacity` - Max number of entries allowed for the cache\n+- `evictionPolicy` - The policy which defines the cache eviction algorithm\n+- `evictionFactor` - The factor which the entries will be evicted once the cache full", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NzgzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - `defaultMaxAgeInSeconds` - Freshness time of all the cache entries in seconds. This value can be overwritten by the `maxAgeInSeconds` property, when inserting entry to cache. '-1' means, the entries are valid forever.\n          \n          \n            \n            - `defaultMaxAgeInSeconds` - Freshness time of all the cache entries in seconds. This value can be overwritten by the `maxAgeInSeconds` property when inserting an entry to the cache. '-1' means, the entries are valid forever.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390087839", "createdAt": "2020-03-10T04:19:12Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -1,25 +1,167 @@\n ## Module Overview\n \n-This module offers a cache that supports time-based eviction, and size-based eviction.\n+The `AbstractCache` object which has the common APIs as follows and there can be \"custom implementations\" with different data storage like file, database etc. with structural equivalent to the abstract object.\n \n-This means that entries are removed from the cache once the expiry time has elapsed (i.e., time-based eviction), or when the cache runs out of \n-space (i.e., size-based eviction). Caching is useful when a value takes significant cost or time to compute and \n-retrieve, and it is therefore useful to cache it for future use.\n+```ballerina\n+public type AbstractCache abstract object {\n+    public function put(string key, any value, int maxAgeInSeconds) returns Error?;\n+    public function get(string key) returns any|Error;\n+    public function invalidate(string key) returns Error?;\n+    public function invalidateAll() returns Error?;\n+    public function hasKey(string key) returns boolean;\n+    public function keys() returns string[];\n+    public function size() returns int;\n+    public function capacity() returns int;\n+};\n+```\n \n-The following code snippet creates a cache that can hold a maximum of 10 entries. An entry of this cache expires \n-one minute after its last access. When the cache is full, 20% of the entries (i.e., 2 entries) will be evicted to make \n-space for new entries.\n+The `AbstractEvictionPolicy` object which has the common APIs as follows and there can be \"custom implementations\" with different eviction algorithms with structural equivalent to the abstract object. That custom implementation has to maintain the `LinkedList` data structure according to the eviction algorithm.\n \n ```ballerina\n-// The `evictionFactor` specifies the percentage of items\n-// that will be evicted when the cache is full.\n-cache:Cache cache = new(expiryTimeInMillis = 60000, capacity = 10, evictionFactor = 0.2);\n+public type AbstractEvictionPolicy abstract object {\n+    public function get(LinkedList list, Node node);\n+    public function put(LinkedList list, Node node);\n+    public function remove(LinkedList list, Node node);\n+    public function replace(LinkedList list, Node newNode, Node oldNode);\n+    public function clear(LinkedList list);\n+    public function evict(LinkedList list) returns Node?;\n+};\n+```\n \n-// Enter a value, and a key to reference that value.\n-// This will be a new entry in the cache.\n-cache.put(\"key-a\", \"value-a\");\n+Ballerina Cache module provides a `Cache` object which is a map data structure based implementation of `AbstractCache` object. Also, it provides `LruEvictionPolicy` object which is based on LRU eviction algorithm.\n \n-// Use the same key to retrieve the value.\n-string returnValue = <string>cache.get(\"key-a\");\n+While initializing the `Cache`, the developer have to pass the following parameters as the cache configurations.\n+- `capacity` - Max number of entries allowed for the cache\n+- `evictionPolicy` - The policy which defines the cache eviction algorithm\n+- `evictionFactor` - The factor which the entries will be evicted once the cache full\n+- `defaultMaxAgeInSeconds` - Freshness time of all the cache entries in seconds. This value can be overwritten by the `maxAgeInSeconds` property, when inserting entry to cache. '-1' means, the entries are valid forever.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4Nzg3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - `cleanupIntervalInSeconds` - The interval time of the timer task which cleans the cache entries. This is an optional parameter.\n          \n          \n            \n            - `cleanupIntervalInSeconds` - The interval time of the timer task, which cleans the cache entries. This is an optional parameter.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390087872", "createdAt": "2020-03-10T04:19:21Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -1,25 +1,167 @@\n ## Module Overview\n \n-This module offers a cache that supports time-based eviction, and size-based eviction.\n+The `AbstractCache` object which has the common APIs as follows and there can be \"custom implementations\" with different data storage like file, database etc. with structural equivalent to the abstract object.\n \n-This means that entries are removed from the cache once the expiry time has elapsed (i.e., time-based eviction), or when the cache runs out of \n-space (i.e., size-based eviction). Caching is useful when a value takes significant cost or time to compute and \n-retrieve, and it is therefore useful to cache it for future use.\n+```ballerina\n+public type AbstractCache abstract object {\n+    public function put(string key, any value, int maxAgeInSeconds) returns Error?;\n+    public function get(string key) returns any|Error;\n+    public function invalidate(string key) returns Error?;\n+    public function invalidateAll() returns Error?;\n+    public function hasKey(string key) returns boolean;\n+    public function keys() returns string[];\n+    public function size() returns int;\n+    public function capacity() returns int;\n+};\n+```\n \n-The following code snippet creates a cache that can hold a maximum of 10 entries. An entry of this cache expires \n-one minute after its last access. When the cache is full, 20% of the entries (i.e., 2 entries) will be evicted to make \n-space for new entries.\n+The `AbstractEvictionPolicy` object which has the common APIs as follows and there can be \"custom implementations\" with different eviction algorithms with structural equivalent to the abstract object. That custom implementation has to maintain the `LinkedList` data structure according to the eviction algorithm.\n \n ```ballerina\n-// The `evictionFactor` specifies the percentage of items\n-// that will be evicted when the cache is full.\n-cache:Cache cache = new(expiryTimeInMillis = 60000, capacity = 10, evictionFactor = 0.2);\n+public type AbstractEvictionPolicy abstract object {\n+    public function get(LinkedList list, Node node);\n+    public function put(LinkedList list, Node node);\n+    public function remove(LinkedList list, Node node);\n+    public function replace(LinkedList list, Node newNode, Node oldNode);\n+    public function clear(LinkedList list);\n+    public function evict(LinkedList list) returns Node?;\n+};\n+```\n \n-// Enter a value, and a key to reference that value.\n-// This will be a new entry in the cache.\n-cache.put(\"key-a\", \"value-a\");\n+Ballerina Cache module provides a `Cache` object which is a map data structure based implementation of `AbstractCache` object. Also, it provides `LruEvictionPolicy` object which is based on LRU eviction algorithm.\n \n-// Use the same key to retrieve the value.\n-string returnValue = <string>cache.get(\"key-a\");\n+While initializing the `Cache`, the developer have to pass the following parameters as the cache configurations.\n+- `capacity` - Max number of entries allowed for the cache\n+- `evictionPolicy` - The policy which defines the cache eviction algorithm\n+- `evictionFactor` - The factor which the entries will be evicted once the cache full\n+- `defaultMaxAgeInSeconds` - Freshness time of all the cache entries in seconds. This value can be overwritten by the `maxAgeInSeconds` property, when inserting entry to cache. '-1' means, the entries are valid forever.\n+- `cleanupIntervalInSeconds` - The interval time of the timer task which cleans the cache entries. This is an optional parameter.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4Nzk0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For the better user experience the above config is initialized with default values as follows:\n          \n          \n            \n            For a better user experience, the above config is initialized with default values as follows:", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390087946", "createdAt": "2020-03-10T04:19:41Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -1,25 +1,167 @@\n ## Module Overview\n \n-This module offers a cache that supports time-based eviction, and size-based eviction.\n+The `AbstractCache` object which has the common APIs as follows and there can be \"custom implementations\" with different data storage like file, database etc. with structural equivalent to the abstract object.\n \n-This means that entries are removed from the cache once the expiry time has elapsed (i.e., time-based eviction), or when the cache runs out of \n-space (i.e., size-based eviction). Caching is useful when a value takes significant cost or time to compute and \n-retrieve, and it is therefore useful to cache it for future use.\n+```ballerina\n+public type AbstractCache abstract object {\n+    public function put(string key, any value, int maxAgeInSeconds) returns Error?;\n+    public function get(string key) returns any|Error;\n+    public function invalidate(string key) returns Error?;\n+    public function invalidateAll() returns Error?;\n+    public function hasKey(string key) returns boolean;\n+    public function keys() returns string[];\n+    public function size() returns int;\n+    public function capacity() returns int;\n+};\n+```\n \n-The following code snippet creates a cache that can hold a maximum of 10 entries. An entry of this cache expires \n-one minute after its last access. When the cache is full, 20% of the entries (i.e., 2 entries) will be evicted to make \n-space for new entries.\n+The `AbstractEvictionPolicy` object which has the common APIs as follows and there can be \"custom implementations\" with different eviction algorithms with structural equivalent to the abstract object. That custom implementation has to maintain the `LinkedList` data structure according to the eviction algorithm.\n \n ```ballerina\n-// The `evictionFactor` specifies the percentage of items\n-// that will be evicted when the cache is full.\n-cache:Cache cache = new(expiryTimeInMillis = 60000, capacity = 10, evictionFactor = 0.2);\n+public type AbstractEvictionPolicy abstract object {\n+    public function get(LinkedList list, Node node);\n+    public function put(LinkedList list, Node node);\n+    public function remove(LinkedList list, Node node);\n+    public function replace(LinkedList list, Node newNode, Node oldNode);\n+    public function clear(LinkedList list);\n+    public function evict(LinkedList list) returns Node?;\n+};\n+```\n \n-// Enter a value, and a key to reference that value.\n-// This will be a new entry in the cache.\n-cache.put(\"key-a\", \"value-a\");\n+Ballerina Cache module provides a `Cache` object which is a map data structure based implementation of `AbstractCache` object. Also, it provides `LruEvictionPolicy` object which is based on LRU eviction algorithm.\n \n-// Use the same key to retrieve the value.\n-string returnValue = <string>cache.get(\"key-a\");\n+While initializing the `Cache`, the developer have to pass the following parameters as the cache configurations.\n+- `capacity` - Max number of entries allowed for the cache\n+- `evictionPolicy` - The policy which defines the cache eviction algorithm\n+- `evictionFactor` - The factor which the entries will be evicted once the cache full\n+- `defaultMaxAgeInSeconds` - Freshness time of all the cache entries in seconds. This value can be overwritten by the `maxAgeInSeconds` property, when inserting entry to cache. '-1' means, the entries are valid forever.\n+- `cleanupIntervalInSeconds` - The interval time of the timer task which cleans the cache entries. This is an optional parameter.\n+\n+For the better user experience the above config is initialized with default values as follows:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4ODEwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            There are 2 mandatory scenarios + 1 optional scenario where a cache entry get removed from the cache and maintain the freshness of the cache entries. The 2 independent factors which are eviction policy & freshness time of the cache  entry governs the 3 scenarios.\n          \n          \n            \n            There are 2 mandatory scenarios and 1 optional scenario, in which a cache entry gets removed from the cache and maintains the freshness of the cache entries. The 2 independent factors (i.e., eviction policy and freshness time of the cache entry) governs the 3 scenarios.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390088104", "createdAt": "2020-03-10T04:20:32Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -1,25 +1,167 @@\n ## Module Overview\n \n-This module offers a cache that supports time-based eviction, and size-based eviction.\n+The `AbstractCache` object which has the common APIs as follows and there can be \"custom implementations\" with different data storage like file, database etc. with structural equivalent to the abstract object.\n \n-This means that entries are removed from the cache once the expiry time has elapsed (i.e., time-based eviction), or when the cache runs out of \n-space (i.e., size-based eviction). Caching is useful when a value takes significant cost or time to compute and \n-retrieve, and it is therefore useful to cache it for future use.\n+```ballerina\n+public type AbstractCache abstract object {\n+    public function put(string key, any value, int maxAgeInSeconds) returns Error?;\n+    public function get(string key) returns any|Error;\n+    public function invalidate(string key) returns Error?;\n+    public function invalidateAll() returns Error?;\n+    public function hasKey(string key) returns boolean;\n+    public function keys() returns string[];\n+    public function size() returns int;\n+    public function capacity() returns int;\n+};\n+```\n \n-The following code snippet creates a cache that can hold a maximum of 10 entries. An entry of this cache expires \n-one minute after its last access. When the cache is full, 20% of the entries (i.e., 2 entries) will be evicted to make \n-space for new entries.\n+The `AbstractEvictionPolicy` object which has the common APIs as follows and there can be \"custom implementations\" with different eviction algorithms with structural equivalent to the abstract object. That custom implementation has to maintain the `LinkedList` data structure according to the eviction algorithm.\n \n ```ballerina\n-// The `evictionFactor` specifies the percentage of items\n-// that will be evicted when the cache is full.\n-cache:Cache cache = new(expiryTimeInMillis = 60000, capacity = 10, evictionFactor = 0.2);\n+public type AbstractEvictionPolicy abstract object {\n+    public function get(LinkedList list, Node node);\n+    public function put(LinkedList list, Node node);\n+    public function remove(LinkedList list, Node node);\n+    public function replace(LinkedList list, Node newNode, Node oldNode);\n+    public function clear(LinkedList list);\n+    public function evict(LinkedList list) returns Node?;\n+};\n+```\n \n-// Enter a value, and a key to reference that value.\n-// This will be a new entry in the cache.\n-cache.put(\"key-a\", \"value-a\");\n+Ballerina Cache module provides a `Cache` object which is a map data structure based implementation of `AbstractCache` object. Also, it provides `LruEvictionPolicy` object which is based on LRU eviction algorithm.\n \n-// Use the same key to retrieve the value.\n-string returnValue = <string>cache.get(\"key-a\");\n+While initializing the `Cache`, the developer have to pass the following parameters as the cache configurations.\n+- `capacity` - Max number of entries allowed for the cache\n+- `evictionPolicy` - The policy which defines the cache eviction algorithm\n+- `evictionFactor` - The factor which the entries will be evicted once the cache full\n+- `defaultMaxAgeInSeconds` - Freshness time of all the cache entries in seconds. This value can be overwritten by the `maxAgeInSeconds` property, when inserting entry to cache. '-1' means, the entries are valid forever.\n+- `cleanupIntervalInSeconds` - The interval time of the timer task which cleans the cache entries. This is an optional parameter.\n+\n+For the better user experience the above config is initialized with default values as follows:\n+\n+```ballerina\n+public type CacheConfig record {|\n+    int capacity = 100;\n+    AbstractEvictionPolicy evictionPolicy = new LruEvictionPolicy();\n+    float evictionFactor = 0.25;\n+    int defaultMaxAgeInSeconds = -1;\n+    int cleanupIntervalInSeconds?;\n+|};\n ```\n \n+There are 2 mandatory scenarios + 1 optional scenario where a cache entry get removed from the cache and maintain the freshness of the cache entries. The 2 independent factors which are eviction policy & freshness time of the cache  entry governs the 3 scenarios.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4ODIzNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. When using the `get` API, if the return cache entry has expired, it get removed.\n          \n          \n            \n            1. When using the `get` API, if the return cache entry has expired, it gets removed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390088237", "createdAt": "2020-03-10T04:21:07Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -1,25 +1,167 @@\n ## Module Overview\n \n-This module offers a cache that supports time-based eviction, and size-based eviction.\n+The `AbstractCache` object which has the common APIs as follows and there can be \"custom implementations\" with different data storage like file, database etc. with structural equivalent to the abstract object.\n \n-This means that entries are removed from the cache once the expiry time has elapsed (i.e., time-based eviction), or when the cache runs out of \n-space (i.e., size-based eviction). Caching is useful when a value takes significant cost or time to compute and \n-retrieve, and it is therefore useful to cache it for future use.\n+```ballerina\n+public type AbstractCache abstract object {\n+    public function put(string key, any value, int maxAgeInSeconds) returns Error?;\n+    public function get(string key) returns any|Error;\n+    public function invalidate(string key) returns Error?;\n+    public function invalidateAll() returns Error?;\n+    public function hasKey(string key) returns boolean;\n+    public function keys() returns string[];\n+    public function size() returns int;\n+    public function capacity() returns int;\n+};\n+```\n \n-The following code snippet creates a cache that can hold a maximum of 10 entries. An entry of this cache expires \n-one minute after its last access. When the cache is full, 20% of the entries (i.e., 2 entries) will be evicted to make \n-space for new entries.\n+The `AbstractEvictionPolicy` object which has the common APIs as follows and there can be \"custom implementations\" with different eviction algorithms with structural equivalent to the abstract object. That custom implementation has to maintain the `LinkedList` data structure according to the eviction algorithm.\n \n ```ballerina\n-// The `evictionFactor` specifies the percentage of items\n-// that will be evicted when the cache is full.\n-cache:Cache cache = new(expiryTimeInMillis = 60000, capacity = 10, evictionFactor = 0.2);\n+public type AbstractEvictionPolicy abstract object {\n+    public function get(LinkedList list, Node node);\n+    public function put(LinkedList list, Node node);\n+    public function remove(LinkedList list, Node node);\n+    public function replace(LinkedList list, Node newNode, Node oldNode);\n+    public function clear(LinkedList list);\n+    public function evict(LinkedList list) returns Node?;\n+};\n+```\n \n-// Enter a value, and a key to reference that value.\n-// This will be a new entry in the cache.\n-cache.put(\"key-a\", \"value-a\");\n+Ballerina Cache module provides a `Cache` object which is a map data structure based implementation of `AbstractCache` object. Also, it provides `LruEvictionPolicy` object which is based on LRU eviction algorithm.\n \n-// Use the same key to retrieve the value.\n-string returnValue = <string>cache.get(\"key-a\");\n+While initializing the `Cache`, the developer have to pass the following parameters as the cache configurations.\n+- `capacity` - Max number of entries allowed for the cache\n+- `evictionPolicy` - The policy which defines the cache eviction algorithm\n+- `evictionFactor` - The factor which the entries will be evicted once the cache full\n+- `defaultMaxAgeInSeconds` - Freshness time of all the cache entries in seconds. This value can be overwritten by the `maxAgeInSeconds` property, when inserting entry to cache. '-1' means, the entries are valid forever.\n+- `cleanupIntervalInSeconds` - The interval time of the timer task which cleans the cache entries. This is an optional parameter.\n+\n+For the better user experience the above config is initialized with default values as follows:\n+\n+```ballerina\n+public type CacheConfig record {|\n+    int capacity = 100;\n+    AbstractEvictionPolicy evictionPolicy = new LruEvictionPolicy();\n+    float evictionFactor = 0.25;\n+    int defaultMaxAgeInSeconds = -1;\n+    int cleanupIntervalInSeconds?;\n+|};\n ```\n \n+There are 2 mandatory scenarios + 1 optional scenario where a cache entry get removed from the cache and maintain the freshness of the cache entries. The 2 independent factors which are eviction policy & freshness time of the cache  entry governs the 3 scenarios.\n+\n+1. When using the `get` API, if the return cache entry has expired, it get removed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNjc0NjY5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#pullrequestreview-371674669", "createdAt": "2020-03-10T04:23:46Z", "commit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "state": "COMMENTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNDoyMzo0NlrOF0BIZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNDozMTo1OVrOF0BOwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4ODgwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            2. When using the `put` API, if the cache size has reached its capacity, number of entries get removed based on the 'eviction policy' and 'eviction factor'.\n          \n          \n            \n            2. When using the `put` API, if the cache size has reached its capacity, the number of entries get removed based on the 'eviction policy' and 'eviction factor'.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390088804", "createdAt": "2020-03-10T04:23:46Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -1,25 +1,167 @@\n ## Module Overview\n \n-This module offers a cache that supports time-based eviction, and size-based eviction.\n+The `AbstractCache` object which has the common APIs as follows and there can be \"custom implementations\" with different data storage like file, database etc. with structural equivalent to the abstract object.\n \n-This means that entries are removed from the cache once the expiry time has elapsed (i.e., time-based eviction), or when the cache runs out of \n-space (i.e., size-based eviction). Caching is useful when a value takes significant cost or time to compute and \n-retrieve, and it is therefore useful to cache it for future use.\n+```ballerina\n+public type AbstractCache abstract object {\n+    public function put(string key, any value, int maxAgeInSeconds) returns Error?;\n+    public function get(string key) returns any|Error;\n+    public function invalidate(string key) returns Error?;\n+    public function invalidateAll() returns Error?;\n+    public function hasKey(string key) returns boolean;\n+    public function keys() returns string[];\n+    public function size() returns int;\n+    public function capacity() returns int;\n+};\n+```\n \n-The following code snippet creates a cache that can hold a maximum of 10 entries. An entry of this cache expires \n-one minute after its last access. When the cache is full, 20% of the entries (i.e., 2 entries) will be evicted to make \n-space for new entries.\n+The `AbstractEvictionPolicy` object which has the common APIs as follows and there can be \"custom implementations\" with different eviction algorithms with structural equivalent to the abstract object. That custom implementation has to maintain the `LinkedList` data structure according to the eviction algorithm.\n \n ```ballerina\n-// The `evictionFactor` specifies the percentage of items\n-// that will be evicted when the cache is full.\n-cache:Cache cache = new(expiryTimeInMillis = 60000, capacity = 10, evictionFactor = 0.2);\n+public type AbstractEvictionPolicy abstract object {\n+    public function get(LinkedList list, Node node);\n+    public function put(LinkedList list, Node node);\n+    public function remove(LinkedList list, Node node);\n+    public function replace(LinkedList list, Node newNode, Node oldNode);\n+    public function clear(LinkedList list);\n+    public function evict(LinkedList list) returns Node?;\n+};\n+```\n \n-// Enter a value, and a key to reference that value.\n-// This will be a new entry in the cache.\n-cache.put(\"key-a\", \"value-a\");\n+Ballerina Cache module provides a `Cache` object which is a map data structure based implementation of `AbstractCache` object. Also, it provides `LruEvictionPolicy` object which is based on LRU eviction algorithm.\n \n-// Use the same key to retrieve the value.\n-string returnValue = <string>cache.get(\"key-a\");\n+While initializing the `Cache`, the developer have to pass the following parameters as the cache configurations.\n+- `capacity` - Max number of entries allowed for the cache\n+- `evictionPolicy` - The policy which defines the cache eviction algorithm\n+- `evictionFactor` - The factor which the entries will be evicted once the cache full\n+- `defaultMaxAgeInSeconds` - Freshness time of all the cache entries in seconds. This value can be overwritten by the `maxAgeInSeconds` property, when inserting entry to cache. '-1' means, the entries are valid forever.\n+- `cleanupIntervalInSeconds` - The interval time of the timer task which cleans the cache entries. This is an optional parameter.\n+\n+For the better user experience the above config is initialized with default values as follows:\n+\n+```ballerina\n+public type CacheConfig record {|\n+    int capacity = 100;\n+    AbstractEvictionPolicy evictionPolicy = new LruEvictionPolicy();\n+    float evictionFactor = 0.25;\n+    int defaultMaxAgeInSeconds = -1;\n+    int cleanupIntervalInSeconds?;\n+|};\n ```\n \n+There are 2 mandatory scenarios + 1 optional scenario where a cache entry get removed from the cache and maintain the freshness of the cache entries. The 2 independent factors which are eviction policy & freshness time of the cache  entry governs the 3 scenarios.\n+\n+1. When using the `get` API, if the return cache entry has expired, it get removed.\n+2. When using the `put` API, if the cache size has reached its capacity, number of entries get removed based on the 'eviction policy' and 'eviction factor'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4ODkwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The main benefit of using the `cleanupIntervalInSeconds` optional property is that the developer can optimize memory usage while adding some additional CPU costs and vice versa. The default behavior is the CPU optimized method.\n          \n          \n            \n            The main benefit of using the `cleanupIntervalInSeconds` (optional) property is that the developer can optimize the memory usage while adding some additional CPU costs and vice versa. The default behaviour is the CPU-optimized method.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390088904", "createdAt": "2020-03-10T04:24:24Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -1,25 +1,167 @@\n ## Module Overview\n \n-This module offers a cache that supports time-based eviction, and size-based eviction.\n+The `AbstractCache` object which has the common APIs as follows and there can be \"custom implementations\" with different data storage like file, database etc. with structural equivalent to the abstract object.\n \n-This means that entries are removed from the cache once the expiry time has elapsed (i.e., time-based eviction), or when the cache runs out of \n-space (i.e., size-based eviction). Caching is useful when a value takes significant cost or time to compute and \n-retrieve, and it is therefore useful to cache it for future use.\n+```ballerina\n+public type AbstractCache abstract object {\n+    public function put(string key, any value, int maxAgeInSeconds) returns Error?;\n+    public function get(string key) returns any|Error;\n+    public function invalidate(string key) returns Error?;\n+    public function invalidateAll() returns Error?;\n+    public function hasKey(string key) returns boolean;\n+    public function keys() returns string[];\n+    public function size() returns int;\n+    public function capacity() returns int;\n+};\n+```\n \n-The following code snippet creates a cache that can hold a maximum of 10 entries. An entry of this cache expires \n-one minute after its last access. When the cache is full, 20% of the entries (i.e., 2 entries) will be evicted to make \n-space for new entries.\n+The `AbstractEvictionPolicy` object which has the common APIs as follows and there can be \"custom implementations\" with different eviction algorithms with structural equivalent to the abstract object. That custom implementation has to maintain the `LinkedList` data structure according to the eviction algorithm.\n \n ```ballerina\n-// The `evictionFactor` specifies the percentage of items\n-// that will be evicted when the cache is full.\n-cache:Cache cache = new(expiryTimeInMillis = 60000, capacity = 10, evictionFactor = 0.2);\n+public type AbstractEvictionPolicy abstract object {\n+    public function get(LinkedList list, Node node);\n+    public function put(LinkedList list, Node node);\n+    public function remove(LinkedList list, Node node);\n+    public function replace(LinkedList list, Node newNode, Node oldNode);\n+    public function clear(LinkedList list);\n+    public function evict(LinkedList list) returns Node?;\n+};\n+```\n \n-// Enter a value, and a key to reference that value.\n-// This will be a new entry in the cache.\n-cache.put(\"key-a\", \"value-a\");\n+Ballerina Cache module provides a `Cache` object which is a map data structure based implementation of `AbstractCache` object. Also, it provides `LruEvictionPolicy` object which is based on LRU eviction algorithm.\n \n-// Use the same key to retrieve the value.\n-string returnValue = <string>cache.get(\"key-a\");\n+While initializing the `Cache`, the developer have to pass the following parameters as the cache configurations.\n+- `capacity` - Max number of entries allowed for the cache\n+- `evictionPolicy` - The policy which defines the cache eviction algorithm\n+- `evictionFactor` - The factor which the entries will be evicted once the cache full\n+- `defaultMaxAgeInSeconds` - Freshness time of all the cache entries in seconds. This value can be overwritten by the `maxAgeInSeconds` property, when inserting entry to cache. '-1' means, the entries are valid forever.\n+- `cleanupIntervalInSeconds` - The interval time of the timer task which cleans the cache entries. This is an optional parameter.\n+\n+For the better user experience the above config is initialized with default values as follows:\n+\n+```ballerina\n+public type CacheConfig record {|\n+    int capacity = 100;\n+    AbstractEvictionPolicy evictionPolicy = new LruEvictionPolicy();\n+    float evictionFactor = 0.25;\n+    int defaultMaxAgeInSeconds = -1;\n+    int cleanupIntervalInSeconds?;\n+|};\n ```\n \n+There are 2 mandatory scenarios + 1 optional scenario where a cache entry get removed from the cache and maintain the freshness of the cache entries. The 2 independent factors which are eviction policy & freshness time of the cache  entry governs the 3 scenarios.\n+\n+1. When using the `get` API, if the return cache entry has expired, it get removed.\n+2. When using the `put` API, if the cache size has reached its capacity, number of entries get removed based on the 'eviction policy' and 'eviction factor'.\n+3. If `cleanupIntervalInSeconds` (optional property) is configured, the timer task will remove the expired cache entries based on the configured interval.\n+\n+The main benefit of using the `cleanupIntervalInSeconds` optional property is that the developer can optimize memory usage while adding some additional CPU costs and vice versa. The default behavior is the CPU optimized method.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4ODk5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            While using the cache, a `CacheEntry` record will be created and added as the value of the `Node` record. `Node` record will be inserted into the map data structure against the provided string key.\n          \n          \n            \n            While using the cache, a `CacheEntry` record will be created and added as the value of the `Node` record. The `Node` record will be inserted into the map data structure against the provided string key.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390088995", "createdAt": "2020-03-10T04:24:56Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -1,25 +1,167 @@\n ## Module Overview\n \n-This module offers a cache that supports time-based eviction, and size-based eviction.\n+The `AbstractCache` object which has the common APIs as follows and there can be \"custom implementations\" with different data storage like file, database etc. with structural equivalent to the abstract object.\n \n-This means that entries are removed from the cache once the expiry time has elapsed (i.e., time-based eviction), or when the cache runs out of \n-space (i.e., size-based eviction). Caching is useful when a value takes significant cost or time to compute and \n-retrieve, and it is therefore useful to cache it for future use.\n+```ballerina\n+public type AbstractCache abstract object {\n+    public function put(string key, any value, int maxAgeInSeconds) returns Error?;\n+    public function get(string key) returns any|Error;\n+    public function invalidate(string key) returns Error?;\n+    public function invalidateAll() returns Error?;\n+    public function hasKey(string key) returns boolean;\n+    public function keys() returns string[];\n+    public function size() returns int;\n+    public function capacity() returns int;\n+};\n+```\n \n-The following code snippet creates a cache that can hold a maximum of 10 entries. An entry of this cache expires \n-one minute after its last access. When the cache is full, 20% of the entries (i.e., 2 entries) will be evicted to make \n-space for new entries.\n+The `AbstractEvictionPolicy` object which has the common APIs as follows and there can be \"custom implementations\" with different eviction algorithms with structural equivalent to the abstract object. That custom implementation has to maintain the `LinkedList` data structure according to the eviction algorithm.\n \n ```ballerina\n-// The `evictionFactor` specifies the percentage of items\n-// that will be evicted when the cache is full.\n-cache:Cache cache = new(expiryTimeInMillis = 60000, capacity = 10, evictionFactor = 0.2);\n+public type AbstractEvictionPolicy abstract object {\n+    public function get(LinkedList list, Node node);\n+    public function put(LinkedList list, Node node);\n+    public function remove(LinkedList list, Node node);\n+    public function replace(LinkedList list, Node newNode, Node oldNode);\n+    public function clear(LinkedList list);\n+    public function evict(LinkedList list) returns Node?;\n+};\n+```\n \n-// Enter a value, and a key to reference that value.\n-// This will be a new entry in the cache.\n-cache.put(\"key-a\", \"value-a\");\n+Ballerina Cache module provides a `Cache` object which is a map data structure based implementation of `AbstractCache` object. Also, it provides `LruEvictionPolicy` object which is based on LRU eviction algorithm.\n \n-// Use the same key to retrieve the value.\n-string returnValue = <string>cache.get(\"key-a\");\n+While initializing the `Cache`, the developer have to pass the following parameters as the cache configurations.\n+- `capacity` - Max number of entries allowed for the cache\n+- `evictionPolicy` - The policy which defines the cache eviction algorithm\n+- `evictionFactor` - The factor which the entries will be evicted once the cache full\n+- `defaultMaxAgeInSeconds` - Freshness time of all the cache entries in seconds. This value can be overwritten by the `maxAgeInSeconds` property, when inserting entry to cache. '-1' means, the entries are valid forever.\n+- `cleanupIntervalInSeconds` - The interval time of the timer task which cleans the cache entries. This is an optional parameter.\n+\n+For the better user experience the above config is initialized with default values as follows:\n+\n+```ballerina\n+public type CacheConfig record {|\n+    int capacity = 100;\n+    AbstractEvictionPolicy evictionPolicy = new LruEvictionPolicy();\n+    float evictionFactor = 0.25;\n+    int defaultMaxAgeInSeconds = -1;\n+    int cleanupIntervalInSeconds?;\n+|};\n ```\n \n+There are 2 mandatory scenarios + 1 optional scenario where a cache entry get removed from the cache and maintain the freshness of the cache entries. The 2 independent factors which are eviction policy & freshness time of the cache  entry governs the 3 scenarios.\n+\n+1. When using the `get` API, if the return cache entry has expired, it get removed.\n+2. When using the `put` API, if the cache size has reached its capacity, number of entries get removed based on the 'eviction policy' and 'eviction factor'.\n+3. If `cleanupIntervalInSeconds` (optional property) is configured, the timer task will remove the expired cache entries based on the configured interval.\n+\n+The main benefit of using the `cleanupIntervalInSeconds` optional property is that the developer can optimize memory usage while adding some additional CPU costs and vice versa. The default behavior is the CPU optimized method.\n+\n+The concept of the default `Cache` object is purely based on the Ballerina map data structure and a linked list data structure. The key of the map entry would be a string and the value of the map entry would be a node of the linked list.\n+\n+```ballerina\n+public type Node record {|\n+    any value;\n+    Node? prev = ();\n+    Node? next = ();\n+|};\n+```\n+\n+While using the cache, a `CacheEntry` record will be created and added as the value of the `Node` record. `Node` record will be inserted into the map data structure against the provided string key.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4OTA0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The linked list data structure is purely used for the eviction of the cache. According to the user configured eviction policy, when inserting / updating / retrieving cache entries, the linked list data structure should get updated. Therefore, when eviction happens, cache entries can be removed efficiently, without iterating the complete map data structure.\n          \n          \n            \n            The linked list data structure is purely used for the eviction of the cache. According to the user configured eviction policy, when inserting / updating / retrieving cache entries, the linked list data structure should get updated. Therefore, when eviction happens, cache entries can be removed efficiently without iterating the complete map data structure.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390089041", "createdAt": "2020-03-10T04:25:14Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -1,25 +1,167 @@\n ## Module Overview\n \n-This module offers a cache that supports time-based eviction, and size-based eviction.\n+The `AbstractCache` object which has the common APIs as follows and there can be \"custom implementations\" with different data storage like file, database etc. with structural equivalent to the abstract object.\n \n-This means that entries are removed from the cache once the expiry time has elapsed (i.e., time-based eviction), or when the cache runs out of \n-space (i.e., size-based eviction). Caching is useful when a value takes significant cost or time to compute and \n-retrieve, and it is therefore useful to cache it for future use.\n+```ballerina\n+public type AbstractCache abstract object {\n+    public function put(string key, any value, int maxAgeInSeconds) returns Error?;\n+    public function get(string key) returns any|Error;\n+    public function invalidate(string key) returns Error?;\n+    public function invalidateAll() returns Error?;\n+    public function hasKey(string key) returns boolean;\n+    public function keys() returns string[];\n+    public function size() returns int;\n+    public function capacity() returns int;\n+};\n+```\n \n-The following code snippet creates a cache that can hold a maximum of 10 entries. An entry of this cache expires \n-one minute after its last access. When the cache is full, 20% of the entries (i.e., 2 entries) will be evicted to make \n-space for new entries.\n+The `AbstractEvictionPolicy` object which has the common APIs as follows and there can be \"custom implementations\" with different eviction algorithms with structural equivalent to the abstract object. That custom implementation has to maintain the `LinkedList` data structure according to the eviction algorithm.\n \n ```ballerina\n-// The `evictionFactor` specifies the percentage of items\n-// that will be evicted when the cache is full.\n-cache:Cache cache = new(expiryTimeInMillis = 60000, capacity = 10, evictionFactor = 0.2);\n+public type AbstractEvictionPolicy abstract object {\n+    public function get(LinkedList list, Node node);\n+    public function put(LinkedList list, Node node);\n+    public function remove(LinkedList list, Node node);\n+    public function replace(LinkedList list, Node newNode, Node oldNode);\n+    public function clear(LinkedList list);\n+    public function evict(LinkedList list) returns Node?;\n+};\n+```\n \n-// Enter a value, and a key to reference that value.\n-// This will be a new entry in the cache.\n-cache.put(\"key-a\", \"value-a\");\n+Ballerina Cache module provides a `Cache` object which is a map data structure based implementation of `AbstractCache` object. Also, it provides `LruEvictionPolicy` object which is based on LRU eviction algorithm.\n \n-// Use the same key to retrieve the value.\n-string returnValue = <string>cache.get(\"key-a\");\n+While initializing the `Cache`, the developer have to pass the following parameters as the cache configurations.\n+- `capacity` - Max number of entries allowed for the cache\n+- `evictionPolicy` - The policy which defines the cache eviction algorithm\n+- `evictionFactor` - The factor which the entries will be evicted once the cache full\n+- `defaultMaxAgeInSeconds` - Freshness time of all the cache entries in seconds. This value can be overwritten by the `maxAgeInSeconds` property, when inserting entry to cache. '-1' means, the entries are valid forever.\n+- `cleanupIntervalInSeconds` - The interval time of the timer task which cleans the cache entries. This is an optional parameter.\n+\n+For the better user experience the above config is initialized with default values as follows:\n+\n+```ballerina\n+public type CacheConfig record {|\n+    int capacity = 100;\n+    AbstractEvictionPolicy evictionPolicy = new LruEvictionPolicy();\n+    float evictionFactor = 0.25;\n+    int defaultMaxAgeInSeconds = -1;\n+    int cleanupIntervalInSeconds?;\n+|};\n ```\n \n+There are 2 mandatory scenarios + 1 optional scenario where a cache entry get removed from the cache and maintain the freshness of the cache entries. The 2 independent factors which are eviction policy & freshness time of the cache  entry governs the 3 scenarios.\n+\n+1. When using the `get` API, if the return cache entry has expired, it get removed.\n+2. When using the `put` API, if the cache size has reached its capacity, number of entries get removed based on the 'eviction policy' and 'eviction factor'.\n+3. If `cleanupIntervalInSeconds` (optional property) is configured, the timer task will remove the expired cache entries based on the configured interval.\n+\n+The main benefit of using the `cleanupIntervalInSeconds` optional property is that the developer can optimize memory usage while adding some additional CPU costs and vice versa. The default behavior is the CPU optimized method.\n+\n+The concept of the default `Cache` object is purely based on the Ballerina map data structure and a linked list data structure. The key of the map entry would be a string and the value of the map entry would be a node of the linked list.\n+\n+```ballerina\n+public type Node record {|\n+    any value;\n+    Node? prev = ();\n+    Node? next = ();\n+|};\n+```\n+\n+While using the cache, a `CacheEntry` record will be created and added as the value of the `Node` record. `Node` record will be inserted into the map data structure against the provided string key.\n+\n+```ballerina\n+type CacheEntry record {|\n+    string key;\n+    any data;\n+    int expTime;\n+|};\n+```\n+\n+The linked list data structure is purely used for the eviction of the cache. According to the user configured eviction policy, when inserting / updating / retrieving cache entries, the linked list data structure should get updated. Therefore, when eviction happens, cache entries can be removed efficiently, without iterating the complete map data structure.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4OTEzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Further, developers can implement a custom caching implementations based on different cache storage mechanisms (file, database etc.) and different eviction policies (MRU, FIFO etc.) as they wish. Ballerina provides a \"map-based cache\" as the default cache implementation.\n          \n          \n            \n            Further, developers can implement custom caching implementations based on different cache storage mechanisms (file, database. etc.) and different eviction policies (MRU, FIFO, etc.). Ballerina provides a \"map-based cache\" as the default cache implementation.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390089139", "createdAt": "2020-03-10T04:25:47Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -1,25 +1,167 @@\n ## Module Overview\n \n-This module offers a cache that supports time-based eviction, and size-based eviction.\n+The `AbstractCache` object which has the common APIs as follows and there can be \"custom implementations\" with different data storage like file, database etc. with structural equivalent to the abstract object.\n \n-This means that entries are removed from the cache once the expiry time has elapsed (i.e., time-based eviction), or when the cache runs out of \n-space (i.e., size-based eviction). Caching is useful when a value takes significant cost or time to compute and \n-retrieve, and it is therefore useful to cache it for future use.\n+```ballerina\n+public type AbstractCache abstract object {\n+    public function put(string key, any value, int maxAgeInSeconds) returns Error?;\n+    public function get(string key) returns any|Error;\n+    public function invalidate(string key) returns Error?;\n+    public function invalidateAll() returns Error?;\n+    public function hasKey(string key) returns boolean;\n+    public function keys() returns string[];\n+    public function size() returns int;\n+    public function capacity() returns int;\n+};\n+```\n \n-The following code snippet creates a cache that can hold a maximum of 10 entries. An entry of this cache expires \n-one minute after its last access. When the cache is full, 20% of the entries (i.e., 2 entries) will be evicted to make \n-space for new entries.\n+The `AbstractEvictionPolicy` object which has the common APIs as follows and there can be \"custom implementations\" with different eviction algorithms with structural equivalent to the abstract object. That custom implementation has to maintain the `LinkedList` data structure according to the eviction algorithm.\n \n ```ballerina\n-// The `evictionFactor` specifies the percentage of items\n-// that will be evicted when the cache is full.\n-cache:Cache cache = new(expiryTimeInMillis = 60000, capacity = 10, evictionFactor = 0.2);\n+public type AbstractEvictionPolicy abstract object {\n+    public function get(LinkedList list, Node node);\n+    public function put(LinkedList list, Node node);\n+    public function remove(LinkedList list, Node node);\n+    public function replace(LinkedList list, Node newNode, Node oldNode);\n+    public function clear(LinkedList list);\n+    public function evict(LinkedList list) returns Node?;\n+};\n+```\n \n-// Enter a value, and a key to reference that value.\n-// This will be a new entry in the cache.\n-cache.put(\"key-a\", \"value-a\");\n+Ballerina Cache module provides a `Cache` object which is a map data structure based implementation of `AbstractCache` object. Also, it provides `LruEvictionPolicy` object which is based on LRU eviction algorithm.\n \n-// Use the same key to retrieve the value.\n-string returnValue = <string>cache.get(\"key-a\");\n+While initializing the `Cache`, the developer have to pass the following parameters as the cache configurations.\n+- `capacity` - Max number of entries allowed for the cache\n+- `evictionPolicy` - The policy which defines the cache eviction algorithm\n+- `evictionFactor` - The factor which the entries will be evicted once the cache full\n+- `defaultMaxAgeInSeconds` - Freshness time of all the cache entries in seconds. This value can be overwritten by the `maxAgeInSeconds` property, when inserting entry to cache. '-1' means, the entries are valid forever.\n+- `cleanupIntervalInSeconds` - The interval time of the timer task which cleans the cache entries. This is an optional parameter.\n+\n+For the better user experience the above config is initialized with default values as follows:\n+\n+```ballerina\n+public type CacheConfig record {|\n+    int capacity = 100;\n+    AbstractEvictionPolicy evictionPolicy = new LruEvictionPolicy();\n+    float evictionFactor = 0.25;\n+    int defaultMaxAgeInSeconds = -1;\n+    int cleanupIntervalInSeconds?;\n+|};\n ```\n \n+There are 2 mandatory scenarios + 1 optional scenario where a cache entry get removed from the cache and maintain the freshness of the cache entries. The 2 independent factors which are eviction policy & freshness time of the cache  entry governs the 3 scenarios.\n+\n+1. When using the `get` API, if the return cache entry has expired, it get removed.\n+2. When using the `put` API, if the cache size has reached its capacity, number of entries get removed based on the 'eviction policy' and 'eviction factor'.\n+3. If `cleanupIntervalInSeconds` (optional property) is configured, the timer task will remove the expired cache entries based on the configured interval.\n+\n+The main benefit of using the `cleanupIntervalInSeconds` optional property is that the developer can optimize memory usage while adding some additional CPU costs and vice versa. The default behavior is the CPU optimized method.\n+\n+The concept of the default `Cache` object is purely based on the Ballerina map data structure and a linked list data structure. The key of the map entry would be a string and the value of the map entry would be a node of the linked list.\n+\n+```ballerina\n+public type Node record {|\n+    any value;\n+    Node? prev = ();\n+    Node? next = ();\n+|};\n+```\n+\n+While using the cache, a `CacheEntry` record will be created and added as the value of the `Node` record. `Node` record will be inserted into the map data structure against the provided string key.\n+\n+```ballerina\n+type CacheEntry record {|\n+    string key;\n+    any data;\n+    int expTime;\n+|};\n+```\n+\n+The linked list data structure is purely used for the eviction of the cache. According to the user configured eviction policy, when inserting / updating / retrieving cache entries, the linked list data structure should get updated. Therefore, when eviction happens, cache entries can be removed efficiently, without iterating the complete map data structure.\n+\n+**Example:** If the eviction policy is LRU, always the MRU item will be the head of the linked list. When eviction happens, nodes from the tail will be deleted without iterating the map.\n+\n+Further, developers can implement a custom caching implementations based on different cache storage mechanisms (file, database etc.) and different eviction policies (MRU, FIFO etc.) as they wish. Ballerina provides a \"map-based cache\" as the default cache implementation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4OTMxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A basic sample cache of 100 capacity, which uses LRU as the eviction policy and eviction factor is 0.25 is as follows:\n          \n          \n            \n            The following is a basic sample cache of 100 capacity, which uses LRU as the eviction policy and eviction factor as 0.25:", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390089319", "createdAt": "2020-03-10T04:26:40Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -1,25 +1,167 @@\n ## Module Overview\n \n-This module offers a cache that supports time-based eviction, and size-based eviction.\n+The `AbstractCache` object which has the common APIs as follows and there can be \"custom implementations\" with different data storage like file, database etc. with structural equivalent to the abstract object.\n \n-This means that entries are removed from the cache once the expiry time has elapsed (i.e., time-based eviction), or when the cache runs out of \n-space (i.e., size-based eviction). Caching is useful when a value takes significant cost or time to compute and \n-retrieve, and it is therefore useful to cache it for future use.\n+```ballerina\n+public type AbstractCache abstract object {\n+    public function put(string key, any value, int maxAgeInSeconds) returns Error?;\n+    public function get(string key) returns any|Error;\n+    public function invalidate(string key) returns Error?;\n+    public function invalidateAll() returns Error?;\n+    public function hasKey(string key) returns boolean;\n+    public function keys() returns string[];\n+    public function size() returns int;\n+    public function capacity() returns int;\n+};\n+```\n \n-The following code snippet creates a cache that can hold a maximum of 10 entries. An entry of this cache expires \n-one minute after its last access. When the cache is full, 20% of the entries (i.e., 2 entries) will be evicted to make \n-space for new entries.\n+The `AbstractEvictionPolicy` object which has the common APIs as follows and there can be \"custom implementations\" with different eviction algorithms with structural equivalent to the abstract object. That custom implementation has to maintain the `LinkedList` data structure according to the eviction algorithm.\n \n ```ballerina\n-// The `evictionFactor` specifies the percentage of items\n-// that will be evicted when the cache is full.\n-cache:Cache cache = new(expiryTimeInMillis = 60000, capacity = 10, evictionFactor = 0.2);\n+public type AbstractEvictionPolicy abstract object {\n+    public function get(LinkedList list, Node node);\n+    public function put(LinkedList list, Node node);\n+    public function remove(LinkedList list, Node node);\n+    public function replace(LinkedList list, Node newNode, Node oldNode);\n+    public function clear(LinkedList list);\n+    public function evict(LinkedList list) returns Node?;\n+};\n+```\n \n-// Enter a value, and a key to reference that value.\n-// This will be a new entry in the cache.\n-cache.put(\"key-a\", \"value-a\");\n+Ballerina Cache module provides a `Cache` object which is a map data structure based implementation of `AbstractCache` object. Also, it provides `LruEvictionPolicy` object which is based on LRU eviction algorithm.\n \n-// Use the same key to retrieve the value.\n-string returnValue = <string>cache.get(\"key-a\");\n+While initializing the `Cache`, the developer have to pass the following parameters as the cache configurations.\n+- `capacity` - Max number of entries allowed for the cache\n+- `evictionPolicy` - The policy which defines the cache eviction algorithm\n+- `evictionFactor` - The factor which the entries will be evicted once the cache full\n+- `defaultMaxAgeInSeconds` - Freshness time of all the cache entries in seconds. This value can be overwritten by the `maxAgeInSeconds` property, when inserting entry to cache. '-1' means, the entries are valid forever.\n+- `cleanupIntervalInSeconds` - The interval time of the timer task which cleans the cache entries. This is an optional parameter.\n+\n+For the better user experience the above config is initialized with default values as follows:\n+\n+```ballerina\n+public type CacheConfig record {|\n+    int capacity = 100;\n+    AbstractEvictionPolicy evictionPolicy = new LruEvictionPolicy();\n+    float evictionFactor = 0.25;\n+    int defaultMaxAgeInSeconds = -1;\n+    int cleanupIntervalInSeconds?;\n+|};\n ```\n \n+There are 2 mandatory scenarios + 1 optional scenario where a cache entry get removed from the cache and maintain the freshness of the cache entries. The 2 independent factors which are eviction policy & freshness time of the cache  entry governs the 3 scenarios.\n+\n+1. When using the `get` API, if the return cache entry has expired, it get removed.\n+2. When using the `put` API, if the cache size has reached its capacity, number of entries get removed based on the 'eviction policy' and 'eviction factor'.\n+3. If `cleanupIntervalInSeconds` (optional property) is configured, the timer task will remove the expired cache entries based on the configured interval.\n+\n+The main benefit of using the `cleanupIntervalInSeconds` optional property is that the developer can optimize memory usage while adding some additional CPU costs and vice versa. The default behavior is the CPU optimized method.\n+\n+The concept of the default `Cache` object is purely based on the Ballerina map data structure and a linked list data structure. The key of the map entry would be a string and the value of the map entry would be a node of the linked list.\n+\n+```ballerina\n+public type Node record {|\n+    any value;\n+    Node? prev = ();\n+    Node? next = ();\n+|};\n+```\n+\n+While using the cache, a `CacheEntry` record will be created and added as the value of the `Node` record. `Node` record will be inserted into the map data structure against the provided string key.\n+\n+```ballerina\n+type CacheEntry record {|\n+    string key;\n+    any data;\n+    int expTime;\n+|};\n+```\n+\n+The linked list data structure is purely used for the eviction of the cache. According to the user configured eviction policy, when inserting / updating / retrieving cache entries, the linked list data structure should get updated. Therefore, when eviction happens, cache entries can be removed efficiently, without iterating the complete map data structure.\n+\n+**Example:** If the eviction policy is LRU, always the MRU item will be the head of the linked list. When eviction happens, nodes from the tail will be deleted without iterating the map.\n+\n+Further, developers can implement a custom caching implementations based on different cache storage mechanisms (file, database etc.) and different eviction policies (MRU, FIFO etc.) as they wish. Ballerina provides a \"map-based cache\" as the default cache implementation.\n+\n+### Samples\n+\n+#### Cache Initialization\n+\n+A basic sample cache of 100 capacity, which uses LRU as the eviction policy and eviction factor is 0.25 is as follows:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4OTY0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A basic sample cache of 1000 capacity, the eviction factor is 0.2, cache entry default freshness time as 1 hour, and clean up timer configured with 5 seconds interval  is as follows:\n          \n          \n            \n            The following is a basic sample with a cache capacity of 1000, the eviction factor as 0.2, cache entry default freshness time as 1 hour, and clean up timer configured with a 5 seconds interval:", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390089649", "createdAt": "2020-03-10T04:28:23Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -1,25 +1,167 @@\n ## Module Overview\n \n-This module offers a cache that supports time-based eviction, and size-based eviction.\n+The `AbstractCache` object which has the common APIs as follows and there can be \"custom implementations\" with different data storage like file, database etc. with structural equivalent to the abstract object.\n \n-This means that entries are removed from the cache once the expiry time has elapsed (i.e., time-based eviction), or when the cache runs out of \n-space (i.e., size-based eviction). Caching is useful when a value takes significant cost or time to compute and \n-retrieve, and it is therefore useful to cache it for future use.\n+```ballerina\n+public type AbstractCache abstract object {\n+    public function put(string key, any value, int maxAgeInSeconds) returns Error?;\n+    public function get(string key) returns any|Error;\n+    public function invalidate(string key) returns Error?;\n+    public function invalidateAll() returns Error?;\n+    public function hasKey(string key) returns boolean;\n+    public function keys() returns string[];\n+    public function size() returns int;\n+    public function capacity() returns int;\n+};\n+```\n \n-The following code snippet creates a cache that can hold a maximum of 10 entries. An entry of this cache expires \n-one minute after its last access. When the cache is full, 20% of the entries (i.e., 2 entries) will be evicted to make \n-space for new entries.\n+The `AbstractEvictionPolicy` object which has the common APIs as follows and there can be \"custom implementations\" with different eviction algorithms with structural equivalent to the abstract object. That custom implementation has to maintain the `LinkedList` data structure according to the eviction algorithm.\n \n ```ballerina\n-// The `evictionFactor` specifies the percentage of items\n-// that will be evicted when the cache is full.\n-cache:Cache cache = new(expiryTimeInMillis = 60000, capacity = 10, evictionFactor = 0.2);\n+public type AbstractEvictionPolicy abstract object {\n+    public function get(LinkedList list, Node node);\n+    public function put(LinkedList list, Node node);\n+    public function remove(LinkedList list, Node node);\n+    public function replace(LinkedList list, Node newNode, Node oldNode);\n+    public function clear(LinkedList list);\n+    public function evict(LinkedList list) returns Node?;\n+};\n+```\n \n-// Enter a value, and a key to reference that value.\n-// This will be a new entry in the cache.\n-cache.put(\"key-a\", \"value-a\");\n+Ballerina Cache module provides a `Cache` object which is a map data structure based implementation of `AbstractCache` object. Also, it provides `LruEvictionPolicy` object which is based on LRU eviction algorithm.\n \n-// Use the same key to retrieve the value.\n-string returnValue = <string>cache.get(\"key-a\");\n+While initializing the `Cache`, the developer have to pass the following parameters as the cache configurations.\n+- `capacity` - Max number of entries allowed for the cache\n+- `evictionPolicy` - The policy which defines the cache eviction algorithm\n+- `evictionFactor` - The factor which the entries will be evicted once the cache full\n+- `defaultMaxAgeInSeconds` - Freshness time of all the cache entries in seconds. This value can be overwritten by the `maxAgeInSeconds` property, when inserting entry to cache. '-1' means, the entries are valid forever.\n+- `cleanupIntervalInSeconds` - The interval time of the timer task which cleans the cache entries. This is an optional parameter.\n+\n+For the better user experience the above config is initialized with default values as follows:\n+\n+```ballerina\n+public type CacheConfig record {|\n+    int capacity = 100;\n+    AbstractEvictionPolicy evictionPolicy = new LruEvictionPolicy();\n+    float evictionFactor = 0.25;\n+    int defaultMaxAgeInSeconds = -1;\n+    int cleanupIntervalInSeconds?;\n+|};\n ```\n \n+There are 2 mandatory scenarios + 1 optional scenario where a cache entry get removed from the cache and maintain the freshness of the cache entries. The 2 independent factors which are eviction policy & freshness time of the cache  entry governs the 3 scenarios.\n+\n+1. When using the `get` API, if the return cache entry has expired, it get removed.\n+2. When using the `put` API, if the cache size has reached its capacity, number of entries get removed based on the 'eviction policy' and 'eviction factor'.\n+3. If `cleanupIntervalInSeconds` (optional property) is configured, the timer task will remove the expired cache entries based on the configured interval.\n+\n+The main benefit of using the `cleanupIntervalInSeconds` optional property is that the developer can optimize memory usage while adding some additional CPU costs and vice versa. The default behavior is the CPU optimized method.\n+\n+The concept of the default `Cache` object is purely based on the Ballerina map data structure and a linked list data structure. The key of the map entry would be a string and the value of the map entry would be a node of the linked list.\n+\n+```ballerina\n+public type Node record {|\n+    any value;\n+    Node? prev = ();\n+    Node? next = ();\n+|};\n+```\n+\n+While using the cache, a `CacheEntry` record will be created and added as the value of the `Node` record. `Node` record will be inserted into the map data structure against the provided string key.\n+\n+```ballerina\n+type CacheEntry record {|\n+    string key;\n+    any data;\n+    int expTime;\n+|};\n+```\n+\n+The linked list data structure is purely used for the eviction of the cache. According to the user configured eviction policy, when inserting / updating / retrieving cache entries, the linked list data structure should get updated. Therefore, when eviction happens, cache entries can be removed efficiently, without iterating the complete map data structure.\n+\n+**Example:** If the eviction policy is LRU, always the MRU item will be the head of the linked list. When eviction happens, nodes from the tail will be deleted without iterating the map.\n+\n+Further, developers can implement a custom caching implementations based on different cache storage mechanisms (file, database etc.) and different eviction policies (MRU, FIFO etc.) as they wish. Ballerina provides a \"map-based cache\" as the default cache implementation.\n+\n+### Samples\n+\n+#### Cache Initialization\n+\n+A basic sample cache of 100 capacity, which uses LRU as the eviction policy and eviction factor is 0.25 is as follows:\n+```ballerina\n+cache:Cache cache = new;\n+```\n+\n+A basic sample cache of 1000 capacity, the eviction factor is 0.2, cache entry default freshness time as 1 hour, and clean up timer configured with 5 seconds interval  is as follows:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4OTc2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            An advanced sample cache which uses a custom eviction policy along with the default capacity, eviction factor, max age and cleanup interval is as follows:\n          \n          \n            \n            The following is an advanced sample cache, which uses a custom eviction policy along with the default capacity, eviction factor, max age, and cleanup interval:", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390089769", "createdAt": "2020-03-10T04:28:51Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -1,25 +1,167 @@\n ## Module Overview\n \n-This module offers a cache that supports time-based eviction, and size-based eviction.\n+The `AbstractCache` object which has the common APIs as follows and there can be \"custom implementations\" with different data storage like file, database etc. with structural equivalent to the abstract object.\n \n-This means that entries are removed from the cache once the expiry time has elapsed (i.e., time-based eviction), or when the cache runs out of \n-space (i.e., size-based eviction). Caching is useful when a value takes significant cost or time to compute and \n-retrieve, and it is therefore useful to cache it for future use.\n+```ballerina\n+public type AbstractCache abstract object {\n+    public function put(string key, any value, int maxAgeInSeconds) returns Error?;\n+    public function get(string key) returns any|Error;\n+    public function invalidate(string key) returns Error?;\n+    public function invalidateAll() returns Error?;\n+    public function hasKey(string key) returns boolean;\n+    public function keys() returns string[];\n+    public function size() returns int;\n+    public function capacity() returns int;\n+};\n+```\n \n-The following code snippet creates a cache that can hold a maximum of 10 entries. An entry of this cache expires \n-one minute after its last access. When the cache is full, 20% of the entries (i.e., 2 entries) will be evicted to make \n-space for new entries.\n+The `AbstractEvictionPolicy` object which has the common APIs as follows and there can be \"custom implementations\" with different eviction algorithms with structural equivalent to the abstract object. That custom implementation has to maintain the `LinkedList` data structure according to the eviction algorithm.\n \n ```ballerina\n-// The `evictionFactor` specifies the percentage of items\n-// that will be evicted when the cache is full.\n-cache:Cache cache = new(expiryTimeInMillis = 60000, capacity = 10, evictionFactor = 0.2);\n+public type AbstractEvictionPolicy abstract object {\n+    public function get(LinkedList list, Node node);\n+    public function put(LinkedList list, Node node);\n+    public function remove(LinkedList list, Node node);\n+    public function replace(LinkedList list, Node newNode, Node oldNode);\n+    public function clear(LinkedList list);\n+    public function evict(LinkedList list) returns Node?;\n+};\n+```\n \n-// Enter a value, and a key to reference that value.\n-// This will be a new entry in the cache.\n-cache.put(\"key-a\", \"value-a\");\n+Ballerina Cache module provides a `Cache` object which is a map data structure based implementation of `AbstractCache` object. Also, it provides `LruEvictionPolicy` object which is based on LRU eviction algorithm.\n \n-// Use the same key to retrieve the value.\n-string returnValue = <string>cache.get(\"key-a\");\n+While initializing the `Cache`, the developer have to pass the following parameters as the cache configurations.\n+- `capacity` - Max number of entries allowed for the cache\n+- `evictionPolicy` - The policy which defines the cache eviction algorithm\n+- `evictionFactor` - The factor which the entries will be evicted once the cache full\n+- `defaultMaxAgeInSeconds` - Freshness time of all the cache entries in seconds. This value can be overwritten by the `maxAgeInSeconds` property, when inserting entry to cache. '-1' means, the entries are valid forever.\n+- `cleanupIntervalInSeconds` - The interval time of the timer task which cleans the cache entries. This is an optional parameter.\n+\n+For the better user experience the above config is initialized with default values as follows:\n+\n+```ballerina\n+public type CacheConfig record {|\n+    int capacity = 100;\n+    AbstractEvictionPolicy evictionPolicy = new LruEvictionPolicy();\n+    float evictionFactor = 0.25;\n+    int defaultMaxAgeInSeconds = -1;\n+    int cleanupIntervalInSeconds?;\n+|};\n ```\n \n+There are 2 mandatory scenarios + 1 optional scenario where a cache entry get removed from the cache and maintain the freshness of the cache entries. The 2 independent factors which are eviction policy & freshness time of the cache  entry governs the 3 scenarios.\n+\n+1. When using the `get` API, if the return cache entry has expired, it get removed.\n+2. When using the `put` API, if the cache size has reached its capacity, number of entries get removed based on the 'eviction policy' and 'eviction factor'.\n+3. If `cleanupIntervalInSeconds` (optional property) is configured, the timer task will remove the expired cache entries based on the configured interval.\n+\n+The main benefit of using the `cleanupIntervalInSeconds` optional property is that the developer can optimize memory usage while adding some additional CPU costs and vice versa. The default behavior is the CPU optimized method.\n+\n+The concept of the default `Cache` object is purely based on the Ballerina map data structure and a linked list data structure. The key of the map entry would be a string and the value of the map entry would be a node of the linked list.\n+\n+```ballerina\n+public type Node record {|\n+    any value;\n+    Node? prev = ();\n+    Node? next = ();\n+|};\n+```\n+\n+While using the cache, a `CacheEntry` record will be created and added as the value of the `Node` record. `Node` record will be inserted into the map data structure against the provided string key.\n+\n+```ballerina\n+type CacheEntry record {|\n+    string key;\n+    any data;\n+    int expTime;\n+|};\n+```\n+\n+The linked list data structure is purely used for the eviction of the cache. According to the user configured eviction policy, when inserting / updating / retrieving cache entries, the linked list data structure should get updated. Therefore, when eviction happens, cache entries can be removed efficiently, without iterating the complete map data structure.\n+\n+**Example:** If the eviction policy is LRU, always the MRU item will be the head of the linked list. When eviction happens, nodes from the tail will be deleted without iterating the map.\n+\n+Further, developers can implement a custom caching implementations based on different cache storage mechanisms (file, database etc.) and different eviction policies (MRU, FIFO etc.) as they wish. Ballerina provides a \"map-based cache\" as the default cache implementation.\n+\n+### Samples\n+\n+#### Cache Initialization\n+\n+A basic sample cache of 100 capacity, which uses LRU as the eviction policy and eviction factor is 0.25 is as follows:\n+```ballerina\n+cache:Cache cache = new;\n+```\n+\n+A basic sample cache of 1000 capacity, the eviction factor is 0.2, cache entry default freshness time as 1 hour, and clean up timer configured with 5 seconds interval  is as follows:\n+```ballerina\n+cache:Cache cache = new({\n+    capacity: 1000,\n+    evictionFactor: 0.2,\n+    defaultMaxAgeInSeconds: 3600\n+    cleanupIntervalInSeconds: 5\n+});\n+```\n+\n+An advanced sample cache which uses a custom eviction policy along with the default capacity, eviction factor, max age and cleanup interval is as follows:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4OTgyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The simple way of using the initialized cache without handling errors is as follows:\n          \n          \n            \n            The simplest way of using the initialized cache without handling errors is as follows:", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390089824", "createdAt": "2020-03-10T04:29:07Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -1,25 +1,167 @@\n ## Module Overview\n \n-This module offers a cache that supports time-based eviction, and size-based eviction.\n+The `AbstractCache` object which has the common APIs as follows and there can be \"custom implementations\" with different data storage like file, database etc. with structural equivalent to the abstract object.\n \n-This means that entries are removed from the cache once the expiry time has elapsed (i.e., time-based eviction), or when the cache runs out of \n-space (i.e., size-based eviction). Caching is useful when a value takes significant cost or time to compute and \n-retrieve, and it is therefore useful to cache it for future use.\n+```ballerina\n+public type AbstractCache abstract object {\n+    public function put(string key, any value, int maxAgeInSeconds) returns Error?;\n+    public function get(string key) returns any|Error;\n+    public function invalidate(string key) returns Error?;\n+    public function invalidateAll() returns Error?;\n+    public function hasKey(string key) returns boolean;\n+    public function keys() returns string[];\n+    public function size() returns int;\n+    public function capacity() returns int;\n+};\n+```\n \n-The following code snippet creates a cache that can hold a maximum of 10 entries. An entry of this cache expires \n-one minute after its last access. When the cache is full, 20% of the entries (i.e., 2 entries) will be evicted to make \n-space for new entries.\n+The `AbstractEvictionPolicy` object which has the common APIs as follows and there can be \"custom implementations\" with different eviction algorithms with structural equivalent to the abstract object. That custom implementation has to maintain the `LinkedList` data structure according to the eviction algorithm.\n \n ```ballerina\n-// The `evictionFactor` specifies the percentage of items\n-// that will be evicted when the cache is full.\n-cache:Cache cache = new(expiryTimeInMillis = 60000, capacity = 10, evictionFactor = 0.2);\n+public type AbstractEvictionPolicy abstract object {\n+    public function get(LinkedList list, Node node);\n+    public function put(LinkedList list, Node node);\n+    public function remove(LinkedList list, Node node);\n+    public function replace(LinkedList list, Node newNode, Node oldNode);\n+    public function clear(LinkedList list);\n+    public function evict(LinkedList list) returns Node?;\n+};\n+```\n \n-// Enter a value, and a key to reference that value.\n-// This will be a new entry in the cache.\n-cache.put(\"key-a\", \"value-a\");\n+Ballerina Cache module provides a `Cache` object which is a map data structure based implementation of `AbstractCache` object. Also, it provides `LruEvictionPolicy` object which is based on LRU eviction algorithm.\n \n-// Use the same key to retrieve the value.\n-string returnValue = <string>cache.get(\"key-a\");\n+While initializing the `Cache`, the developer have to pass the following parameters as the cache configurations.\n+- `capacity` - Max number of entries allowed for the cache\n+- `evictionPolicy` - The policy which defines the cache eviction algorithm\n+- `evictionFactor` - The factor which the entries will be evicted once the cache full\n+- `defaultMaxAgeInSeconds` - Freshness time of all the cache entries in seconds. This value can be overwritten by the `maxAgeInSeconds` property, when inserting entry to cache. '-1' means, the entries are valid forever.\n+- `cleanupIntervalInSeconds` - The interval time of the timer task which cleans the cache entries. This is an optional parameter.\n+\n+For the better user experience the above config is initialized with default values as follows:\n+\n+```ballerina\n+public type CacheConfig record {|\n+    int capacity = 100;\n+    AbstractEvictionPolicy evictionPolicy = new LruEvictionPolicy();\n+    float evictionFactor = 0.25;\n+    int defaultMaxAgeInSeconds = -1;\n+    int cleanupIntervalInSeconds?;\n+|};\n ```\n \n+There are 2 mandatory scenarios + 1 optional scenario where a cache entry get removed from the cache and maintain the freshness of the cache entries. The 2 independent factors which are eviction policy & freshness time of the cache  entry governs the 3 scenarios.\n+\n+1. When using the `get` API, if the return cache entry has expired, it get removed.\n+2. When using the `put` API, if the cache size has reached its capacity, number of entries get removed based on the 'eviction policy' and 'eviction factor'.\n+3. If `cleanupIntervalInSeconds` (optional property) is configured, the timer task will remove the expired cache entries based on the configured interval.\n+\n+The main benefit of using the `cleanupIntervalInSeconds` optional property is that the developer can optimize memory usage while adding some additional CPU costs and vice versa. The default behavior is the CPU optimized method.\n+\n+The concept of the default `Cache` object is purely based on the Ballerina map data structure and a linked list data structure. The key of the map entry would be a string and the value of the map entry would be a node of the linked list.\n+\n+```ballerina\n+public type Node record {|\n+    any value;\n+    Node? prev = ();\n+    Node? next = ();\n+|};\n+```\n+\n+While using the cache, a `CacheEntry` record will be created and added as the value of the `Node` record. `Node` record will be inserted into the map data structure against the provided string key.\n+\n+```ballerina\n+type CacheEntry record {|\n+    string key;\n+    any data;\n+    int expTime;\n+|};\n+```\n+\n+The linked list data structure is purely used for the eviction of the cache. According to the user configured eviction policy, when inserting / updating / retrieving cache entries, the linked list data structure should get updated. Therefore, when eviction happens, cache entries can be removed efficiently, without iterating the complete map data structure.\n+\n+**Example:** If the eviction policy is LRU, always the MRU item will be the head of the linked list. When eviction happens, nodes from the tail will be deleted without iterating the map.\n+\n+Further, developers can implement a custom caching implementations based on different cache storage mechanisms (file, database etc.) and different eviction policies (MRU, FIFO etc.) as they wish. Ballerina provides a \"map-based cache\" as the default cache implementation.\n+\n+### Samples\n+\n+#### Cache Initialization\n+\n+A basic sample cache of 100 capacity, which uses LRU as the eviction policy and eviction factor is 0.25 is as follows:\n+```ballerina\n+cache:Cache cache = new;\n+```\n+\n+A basic sample cache of 1000 capacity, the eviction factor is 0.2, cache entry default freshness time as 1 hour, and clean up timer configured with 5 seconds interval  is as follows:\n+```ballerina\n+cache:Cache cache = new({\n+    capacity: 1000,\n+    evictionFactor: 0.2,\n+    defaultMaxAgeInSeconds: 3600\n+    cleanupIntervalInSeconds: 5\n+});\n+```\n+\n+An advanced sample cache which uses a custom eviction policy along with the default capacity, eviction factor, max age and cleanup interval is as follows:\n+```ballerina\n+public type CustomEvictionPolicy object {\n+    *cache:AbstractEvictionPolicy;\n+    public function get(LinkedList list, Node node) { // custom implementation }\n+    public function put(LinkedList list, Node node) { // custom implementation }\n+    public function remove(LinkedList list, Node node) { // custom implementation }\n+    public function replace(LinkedList list, Node newNode, Node oldNode) { // custom implementation }\n+    public function clear(LinkedList list) { // custom implementation }\n+    public function evict(LinkedList list) returns Node? { // custom implementation }\n+}\n+\n+cache:Cache cache = new({\n+    capacity: 1000,\n+    evictionPolicy: new CustomEvictionPolicy()\n+});\n+```\n+\n+#### Cache Usage\n+\n+The simple way of using the initialized cache without handling errors is as follows:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4OTkyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // implement what to do, if any error happen when inserting item to cache\n          \n          \n            \n                // Implement what to do if any error happens when inserting an item to the cache.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390089921", "createdAt": "2020-03-10T04:29:34Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -1,25 +1,167 @@\n ## Module Overview\n \n-This module offers a cache that supports time-based eviction, and size-based eviction.\n+The `AbstractCache` object which has the common APIs as follows and there can be \"custom implementations\" with different data storage like file, database etc. with structural equivalent to the abstract object.\n \n-This means that entries are removed from the cache once the expiry time has elapsed (i.e., time-based eviction), or when the cache runs out of \n-space (i.e., size-based eviction). Caching is useful when a value takes significant cost or time to compute and \n-retrieve, and it is therefore useful to cache it for future use.\n+```ballerina\n+public type AbstractCache abstract object {\n+    public function put(string key, any value, int maxAgeInSeconds) returns Error?;\n+    public function get(string key) returns any|Error;\n+    public function invalidate(string key) returns Error?;\n+    public function invalidateAll() returns Error?;\n+    public function hasKey(string key) returns boolean;\n+    public function keys() returns string[];\n+    public function size() returns int;\n+    public function capacity() returns int;\n+};\n+```\n \n-The following code snippet creates a cache that can hold a maximum of 10 entries. An entry of this cache expires \n-one minute after its last access. When the cache is full, 20% of the entries (i.e., 2 entries) will be evicted to make \n-space for new entries.\n+The `AbstractEvictionPolicy` object which has the common APIs as follows and there can be \"custom implementations\" with different eviction algorithms with structural equivalent to the abstract object. That custom implementation has to maintain the `LinkedList` data structure according to the eviction algorithm.\n \n ```ballerina\n-// The `evictionFactor` specifies the percentage of items\n-// that will be evicted when the cache is full.\n-cache:Cache cache = new(expiryTimeInMillis = 60000, capacity = 10, evictionFactor = 0.2);\n+public type AbstractEvictionPolicy abstract object {\n+    public function get(LinkedList list, Node node);\n+    public function put(LinkedList list, Node node);\n+    public function remove(LinkedList list, Node node);\n+    public function replace(LinkedList list, Node newNode, Node oldNode);\n+    public function clear(LinkedList list);\n+    public function evict(LinkedList list) returns Node?;\n+};\n+```\n \n-// Enter a value, and a key to reference that value.\n-// This will be a new entry in the cache.\n-cache.put(\"key-a\", \"value-a\");\n+Ballerina Cache module provides a `Cache` object which is a map data structure based implementation of `AbstractCache` object. Also, it provides `LruEvictionPolicy` object which is based on LRU eviction algorithm.\n \n-// Use the same key to retrieve the value.\n-string returnValue = <string>cache.get(\"key-a\");\n+While initializing the `Cache`, the developer have to pass the following parameters as the cache configurations.\n+- `capacity` - Max number of entries allowed for the cache\n+- `evictionPolicy` - The policy which defines the cache eviction algorithm\n+- `evictionFactor` - The factor which the entries will be evicted once the cache full\n+- `defaultMaxAgeInSeconds` - Freshness time of all the cache entries in seconds. This value can be overwritten by the `maxAgeInSeconds` property, when inserting entry to cache. '-1' means, the entries are valid forever.\n+- `cleanupIntervalInSeconds` - The interval time of the timer task which cleans the cache entries. This is an optional parameter.\n+\n+For the better user experience the above config is initialized with default values as follows:\n+\n+```ballerina\n+public type CacheConfig record {|\n+    int capacity = 100;\n+    AbstractEvictionPolicy evictionPolicy = new LruEvictionPolicy();\n+    float evictionFactor = 0.25;\n+    int defaultMaxAgeInSeconds = -1;\n+    int cleanupIntervalInSeconds?;\n+|};\n ```\n \n+There are 2 mandatory scenarios + 1 optional scenario where a cache entry get removed from the cache and maintain the freshness of the cache entries. The 2 independent factors which are eviction policy & freshness time of the cache  entry governs the 3 scenarios.\n+\n+1. When using the `get` API, if the return cache entry has expired, it get removed.\n+2. When using the `put` API, if the cache size has reached its capacity, number of entries get removed based on the 'eviction policy' and 'eviction factor'.\n+3. If `cleanupIntervalInSeconds` (optional property) is configured, the timer task will remove the expired cache entries based on the configured interval.\n+\n+The main benefit of using the `cleanupIntervalInSeconds` optional property is that the developer can optimize memory usage while adding some additional CPU costs and vice versa. The default behavior is the CPU optimized method.\n+\n+The concept of the default `Cache` object is purely based on the Ballerina map data structure and a linked list data structure. The key of the map entry would be a string and the value of the map entry would be a node of the linked list.\n+\n+```ballerina\n+public type Node record {|\n+    any value;\n+    Node? prev = ();\n+    Node? next = ();\n+|};\n+```\n+\n+While using the cache, a `CacheEntry` record will be created and added as the value of the `Node` record. `Node` record will be inserted into the map data structure against the provided string key.\n+\n+```ballerina\n+type CacheEntry record {|\n+    string key;\n+    any data;\n+    int expTime;\n+|};\n+```\n+\n+The linked list data structure is purely used for the eviction of the cache. According to the user configured eviction policy, when inserting / updating / retrieving cache entries, the linked list data structure should get updated. Therefore, when eviction happens, cache entries can be removed efficiently, without iterating the complete map data structure.\n+\n+**Example:** If the eviction policy is LRU, always the MRU item will be the head of the linked list. When eviction happens, nodes from the tail will be deleted without iterating the map.\n+\n+Further, developers can implement a custom caching implementations based on different cache storage mechanisms (file, database etc.) and different eviction policies (MRU, FIFO etc.) as they wish. Ballerina provides a \"map-based cache\" as the default cache implementation.\n+\n+### Samples\n+\n+#### Cache Initialization\n+\n+A basic sample cache of 100 capacity, which uses LRU as the eviction policy and eviction factor is 0.25 is as follows:\n+```ballerina\n+cache:Cache cache = new;\n+```\n+\n+A basic sample cache of 1000 capacity, the eviction factor is 0.2, cache entry default freshness time as 1 hour, and clean up timer configured with 5 seconds interval  is as follows:\n+```ballerina\n+cache:Cache cache = new({\n+    capacity: 1000,\n+    evictionFactor: 0.2,\n+    defaultMaxAgeInSeconds: 3600\n+    cleanupIntervalInSeconds: 5\n+});\n+```\n+\n+An advanced sample cache which uses a custom eviction policy along with the default capacity, eviction factor, max age and cleanup interval is as follows:\n+```ballerina\n+public type CustomEvictionPolicy object {\n+    *cache:AbstractEvictionPolicy;\n+    public function get(LinkedList list, Node node) { // custom implementation }\n+    public function put(LinkedList list, Node node) { // custom implementation }\n+    public function remove(LinkedList list, Node node) { // custom implementation }\n+    public function replace(LinkedList list, Node newNode, Node oldNode) { // custom implementation }\n+    public function clear(LinkedList list) { // custom implementation }\n+    public function evict(LinkedList list) returns Node? { // custom implementation }\n+}\n+\n+cache:Cache cache = new({\n+    capacity: 1000,\n+    evictionPolicy: new CustomEvictionPolicy()\n+});\n+```\n+\n+#### Cache Usage\n+\n+The simple way of using the initialized cache without handling errors is as follows:\n+```ballerina\n+_ = check cache.put(\"key1\", \"value1\");\n+string value = <string> check cache.get(\"key1\");\n+_ = check cache.invalidate(\"key1\");\n+_ = check cache.invalidateAll();\n+boolean hasKey = cache.hasKey(\"key1\");\n+string[] keys = cache.keys();\n+int size = cache.size();\n+int capacity = cache.capacity();\n+```\n+\n+The advanced way of using the initialized cache with error handling is as follows:\n+```ballerina\n+cache:Error? result = cache.put(\"key1\", \"value1\");\n+if (result is cache:Error) {\n+    // implement what to do, if any error happen when inserting item to cache", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5MDAyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // implement what to do, if any error happen when retrieving item from the cache\n          \n          \n            \n                // Implement what to do if any error happens when retrieving an item from the cache.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390090021", "createdAt": "2020-03-10T04:29:58Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/Module.md", "diffHunk": "@@ -1,25 +1,167 @@\n ## Module Overview\n \n-This module offers a cache that supports time-based eviction, and size-based eviction.\n+The `AbstractCache` object which has the common APIs as follows and there can be \"custom implementations\" with different data storage like file, database etc. with structural equivalent to the abstract object.\n \n-This means that entries are removed from the cache once the expiry time has elapsed (i.e., time-based eviction), or when the cache runs out of \n-space (i.e., size-based eviction). Caching is useful when a value takes significant cost or time to compute and \n-retrieve, and it is therefore useful to cache it for future use.\n+```ballerina\n+public type AbstractCache abstract object {\n+    public function put(string key, any value, int maxAgeInSeconds) returns Error?;\n+    public function get(string key) returns any|Error;\n+    public function invalidate(string key) returns Error?;\n+    public function invalidateAll() returns Error?;\n+    public function hasKey(string key) returns boolean;\n+    public function keys() returns string[];\n+    public function size() returns int;\n+    public function capacity() returns int;\n+};\n+```\n \n-The following code snippet creates a cache that can hold a maximum of 10 entries. An entry of this cache expires \n-one minute after its last access. When the cache is full, 20% of the entries (i.e., 2 entries) will be evicted to make \n-space for new entries.\n+The `AbstractEvictionPolicy` object which has the common APIs as follows and there can be \"custom implementations\" with different eviction algorithms with structural equivalent to the abstract object. That custom implementation has to maintain the `LinkedList` data structure according to the eviction algorithm.\n \n ```ballerina\n-// The `evictionFactor` specifies the percentage of items\n-// that will be evicted when the cache is full.\n-cache:Cache cache = new(expiryTimeInMillis = 60000, capacity = 10, evictionFactor = 0.2);\n+public type AbstractEvictionPolicy abstract object {\n+    public function get(LinkedList list, Node node);\n+    public function put(LinkedList list, Node node);\n+    public function remove(LinkedList list, Node node);\n+    public function replace(LinkedList list, Node newNode, Node oldNode);\n+    public function clear(LinkedList list);\n+    public function evict(LinkedList list) returns Node?;\n+};\n+```\n \n-// Enter a value, and a key to reference that value.\n-// This will be a new entry in the cache.\n-cache.put(\"key-a\", \"value-a\");\n+Ballerina Cache module provides a `Cache` object which is a map data structure based implementation of `AbstractCache` object. Also, it provides `LruEvictionPolicy` object which is based on LRU eviction algorithm.\n \n-// Use the same key to retrieve the value.\n-string returnValue = <string>cache.get(\"key-a\");\n+While initializing the `Cache`, the developer have to pass the following parameters as the cache configurations.\n+- `capacity` - Max number of entries allowed for the cache\n+- `evictionPolicy` - The policy which defines the cache eviction algorithm\n+- `evictionFactor` - The factor which the entries will be evicted once the cache full\n+- `defaultMaxAgeInSeconds` - Freshness time of all the cache entries in seconds. This value can be overwritten by the `maxAgeInSeconds` property, when inserting entry to cache. '-1' means, the entries are valid forever.\n+- `cleanupIntervalInSeconds` - The interval time of the timer task which cleans the cache entries. This is an optional parameter.\n+\n+For the better user experience the above config is initialized with default values as follows:\n+\n+```ballerina\n+public type CacheConfig record {|\n+    int capacity = 100;\n+    AbstractEvictionPolicy evictionPolicy = new LruEvictionPolicy();\n+    float evictionFactor = 0.25;\n+    int defaultMaxAgeInSeconds = -1;\n+    int cleanupIntervalInSeconds?;\n+|};\n ```\n \n+There are 2 mandatory scenarios + 1 optional scenario where a cache entry get removed from the cache and maintain the freshness of the cache entries. The 2 independent factors which are eviction policy & freshness time of the cache  entry governs the 3 scenarios.\n+\n+1. When using the `get` API, if the return cache entry has expired, it get removed.\n+2. When using the `put` API, if the cache size has reached its capacity, number of entries get removed based on the 'eviction policy' and 'eviction factor'.\n+3. If `cleanupIntervalInSeconds` (optional property) is configured, the timer task will remove the expired cache entries based on the configured interval.\n+\n+The main benefit of using the `cleanupIntervalInSeconds` optional property is that the developer can optimize memory usage while adding some additional CPU costs and vice versa. The default behavior is the CPU optimized method.\n+\n+The concept of the default `Cache` object is purely based on the Ballerina map data structure and a linked list data structure. The key of the map entry would be a string and the value of the map entry would be a node of the linked list.\n+\n+```ballerina\n+public type Node record {|\n+    any value;\n+    Node? prev = ();\n+    Node? next = ();\n+|};\n+```\n+\n+While using the cache, a `CacheEntry` record will be created and added as the value of the `Node` record. `Node` record will be inserted into the map data structure against the provided string key.\n+\n+```ballerina\n+type CacheEntry record {|\n+    string key;\n+    any data;\n+    int expTime;\n+|};\n+```\n+\n+The linked list data structure is purely used for the eviction of the cache. According to the user configured eviction policy, when inserting / updating / retrieving cache entries, the linked list data structure should get updated. Therefore, when eviction happens, cache entries can be removed efficiently, without iterating the complete map data structure.\n+\n+**Example:** If the eviction policy is LRU, always the MRU item will be the head of the linked list. When eviction happens, nodes from the tail will be deleted without iterating the map.\n+\n+Further, developers can implement a custom caching implementations based on different cache storage mechanisms (file, database etc.) and different eviction policies (MRU, FIFO etc.) as they wish. Ballerina provides a \"map-based cache\" as the default cache implementation.\n+\n+### Samples\n+\n+#### Cache Initialization\n+\n+A basic sample cache of 100 capacity, which uses LRU as the eviction policy and eviction factor is 0.25 is as follows:\n+```ballerina\n+cache:Cache cache = new;\n+```\n+\n+A basic sample cache of 1000 capacity, the eviction factor is 0.2, cache entry default freshness time as 1 hour, and clean up timer configured with 5 seconds interval  is as follows:\n+```ballerina\n+cache:Cache cache = new({\n+    capacity: 1000,\n+    evictionFactor: 0.2,\n+    defaultMaxAgeInSeconds: 3600\n+    cleanupIntervalInSeconds: 5\n+});\n+```\n+\n+An advanced sample cache which uses a custom eviction policy along with the default capacity, eviction factor, max age and cleanup interval is as follows:\n+```ballerina\n+public type CustomEvictionPolicy object {\n+    *cache:AbstractEvictionPolicy;\n+    public function get(LinkedList list, Node node) { // custom implementation }\n+    public function put(LinkedList list, Node node) { // custom implementation }\n+    public function remove(LinkedList list, Node node) { // custom implementation }\n+    public function replace(LinkedList list, Node newNode, Node oldNode) { // custom implementation }\n+    public function clear(LinkedList list) { // custom implementation }\n+    public function evict(LinkedList list) returns Node? { // custom implementation }\n+}\n+\n+cache:Cache cache = new({\n+    capacity: 1000,\n+    evictionPolicy: new CustomEvictionPolicy()\n+});\n+```\n+\n+#### Cache Usage\n+\n+The simple way of using the initialized cache without handling errors is as follows:\n+```ballerina\n+_ = check cache.put(\"key1\", \"value1\");\n+string value = <string> check cache.get(\"key1\");\n+_ = check cache.invalidate(\"key1\");\n+_ = check cache.invalidateAll();\n+boolean hasKey = cache.hasKey(\"key1\");\n+string[] keys = cache.keys();\n+int size = cache.size();\n+int capacity = cache.capacity();\n+```\n+\n+The advanced way of using the initialized cache with error handling is as follows:\n+```ballerina\n+cache:Error? result = cache.put(\"key1\", \"value1\");\n+if (result is cache:Error) {\n+    // implement what to do, if any error happen when inserting item to cache\n+}\n+\n+any|cache:Error result = cache.get(\"key1\");\n+if (result is cache:Error) {\n+    // implement what to do, if any error happen when retrieving item from the cache", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5MDI1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // The default max age of cache entry is set to 2 seconds. The cache\n          \n          \n            \n                // The default max age of the cache entry is set to 2 seconds. The cache", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390090255", "createdAt": "2020-03-10T04:31:10Z", "author": {"login": "praneesha"}, "path": "examples/cache/cache.bal", "diffHunk": "@@ -2,34 +2,52 @@ import ballerina/cache;\n import ballerina/io;\n import ballerina/runtime;\n \n-public function main() {\n-    // This creates a new cache. The cache cleanup task runs every 5 seconds\n-    // and clears all the expired caches. In this example, the cache expiry time\n-    // is set to four seconds in order to demonstrate how cache cleaning is\n-    // carried out.\n-    cache:Cache cache = new (4000);\n+public function main() returns error? {\n+    // This creates a new cache of size 10. The eviction factor is set to 0.2,\n+    // which means at the time of eviction 10*0.2=2 entries get removed from\n+    // the cache.\n+    // The default max age of cache entry is set to 2 seconds. The cache", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5MDMwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Checked for the cached key availability.\n          \n          \n            \n                // Checks for the cached key availability.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390090301", "createdAt": "2020-03-10T04:31:25Z", "author": {"login": "praneesha"}, "path": "examples/cache/cache.bal", "diffHunk": "@@ -2,34 +2,52 @@ import ballerina/cache;\n import ballerina/io;\n import ballerina/runtime;\n \n-public function main() {\n-    // This creates a new cache. The cache cleanup task runs every 5 seconds\n-    // and clears all the expired caches. In this example, the cache expiry time\n-    // is set to four seconds in order to demonstrate how cache cleaning is\n-    // carried out.\n-    cache:Cache cache = new (4000);\n+public function main() returns error? {\n+    // This creates a new cache of size 10. The eviction factor is set to 0.2,\n+    // which means at the time of eviction 10*0.2=2 entries get removed from\n+    // the cache.\n+    // The default max age of cache entry is set to 2 seconds. The cache\n+    // cleanup task runs every 3 seconds and clears all the expired entries.\n+    cache:Cache cache = new({\n+        capacity: 10,\n+        evictionFactor: 0.2,\n+        defaultMaxAgeInSeconds: 2,\n+        cleanupIntervalInSeconds: 3\n+    });\n \n     // Adds a new entry to the cache.\n-    cache.put(\"Name\", \"Ballerina\");\n+    _ = check cache.put(\"key1\", \"value1\");\n+    // Adds a new entry to the cache by overriding the default max age.\n+    _ = check cache.put(\"key2\", \"value2\", 3600);\n \n-    // Fetches the cached value.\n-    string name = \"\";\n-    if (cache.hasKey(\"Name\")) {\n-        name = <string>cache.get(\"Name\");\n+    // Checked for the cached key availability.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5MDM2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // During this period cache entry with the key 'key1' should be removed\n          \n          \n            \n                // During this period, the cache entry with the key 'key1' should be removed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390090364", "createdAt": "2020-03-10T04:31:40Z", "author": {"login": "praneesha"}, "path": "examples/cache/cache.bal", "diffHunk": "@@ -2,34 +2,52 @@ import ballerina/cache;\n import ballerina/io;\n import ballerina/runtime;\n \n-public function main() {\n-    // This creates a new cache. The cache cleanup task runs every 5 seconds\n-    // and clears all the expired caches. In this example, the cache expiry time\n-    // is set to four seconds in order to demonstrate how cache cleaning is\n-    // carried out.\n-    cache:Cache cache = new (4000);\n+public function main() returns error? {\n+    // This creates a new cache of size 10. The eviction factor is set to 0.2,\n+    // which means at the time of eviction 10*0.2=2 entries get removed from\n+    // the cache.\n+    // The default max age of cache entry is set to 2 seconds. The cache\n+    // cleanup task runs every 3 seconds and clears all the expired entries.\n+    cache:Cache cache = new({\n+        capacity: 10,\n+        evictionFactor: 0.2,\n+        defaultMaxAgeInSeconds: 2,\n+        cleanupIntervalInSeconds: 3\n+    });\n \n     // Adds a new entry to the cache.\n-    cache.put(\"Name\", \"Ballerina\");\n+    _ = check cache.put(\"key1\", \"value1\");\n+    // Adds a new entry to the cache by overriding the default max age.\n+    _ = check cache.put(\"key2\", \"value2\", 3600);\n \n-    // Fetches the cached value.\n-    string name = \"\";\n-    if (cache.hasKey(\"Name\")) {\n-        name = <string>cache.get(\"Name\");\n+    // Checked for the cached key availability.\n+    if (cache.hasKey(\"key1\")) {\n+        // Fetches the cached value.\n+        string value = <string> check cache.get(\"key1\");\n+        io:println(\"key1: \" + value);\n     }\n-    io:println(\"Name: \" + name);\n \n-    // This sends the current worker to the sleep mode for six seconds.\n+    // This sends the current worker to the sleep mode for 4 seconds.\n     // No execution takes place during this period.\n-    runtime:sleep(6000);\n-\n-    // The cache expires after 4 seconds. The cache cleanup task runs during the\n-    // fifth second and cleans the cache while this thread is in the sleep mode.\n-    // As a result, the value in the cache becomes null.\n-    if (cache.hasKey(\"Name\")) {\n-        name = <string>cache.get(\"Name\");\n-    } else {\n-        name = \"\";\n-    }\n-    io:println(\"Name: \" + name);\n+    runtime:sleep(4000);\n+\n+    // During this period cache entry with the key 'key1' should be removed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5MDQwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // since the max of it is set to 2 seconds by default. But the cache\n          \n          \n            \n                // since the max of it is set to 2 seconds by default. However, the cache", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390090403", "createdAt": "2020-03-10T04:31:52Z", "author": {"login": "praneesha"}, "path": "examples/cache/cache.bal", "diffHunk": "@@ -2,34 +2,52 @@ import ballerina/cache;\n import ballerina/io;\n import ballerina/runtime;\n \n-public function main() {\n-    // This creates a new cache. The cache cleanup task runs every 5 seconds\n-    // and clears all the expired caches. In this example, the cache expiry time\n-    // is set to four seconds in order to demonstrate how cache cleaning is\n-    // carried out.\n-    cache:Cache cache = new (4000);\n+public function main() returns error? {\n+    // This creates a new cache of size 10. The eviction factor is set to 0.2,\n+    // which means at the time of eviction 10*0.2=2 entries get removed from\n+    // the cache.\n+    // The default max age of cache entry is set to 2 seconds. The cache\n+    // cleanup task runs every 3 seconds and clears all the expired entries.\n+    cache:Cache cache = new({\n+        capacity: 10,\n+        evictionFactor: 0.2,\n+        defaultMaxAgeInSeconds: 2,\n+        cleanupIntervalInSeconds: 3\n+    });\n \n     // Adds a new entry to the cache.\n-    cache.put(\"Name\", \"Ballerina\");\n+    _ = check cache.put(\"key1\", \"value1\");\n+    // Adds a new entry to the cache by overriding the default max age.\n+    _ = check cache.put(\"key2\", \"value2\", 3600);\n \n-    // Fetches the cached value.\n-    string name = \"\";\n-    if (cache.hasKey(\"Name\")) {\n-        name = <string>cache.get(\"Name\");\n+    // Checked for the cached key availability.\n+    if (cache.hasKey(\"key1\")) {\n+        // Fetches the cached value.\n+        string value = <string> check cache.get(\"key1\");\n+        io:println(\"key1: \" + value);\n     }\n-    io:println(\"Name: \" + name);\n \n-    // This sends the current worker to the sleep mode for six seconds.\n+    // This sends the current worker to the sleep mode for 4 seconds.\n     // No execution takes place during this period.\n-    runtime:sleep(6000);\n-\n-    // The cache expires after 4 seconds. The cache cleanup task runs during the\n-    // fifth second and cleans the cache while this thread is in the sleep mode.\n-    // As a result, the value in the cache becomes null.\n-    if (cache.hasKey(\"Name\")) {\n-        name = <string>cache.get(\"Name\");\n-    } else {\n-        name = \"\";\n-    }\n-    io:println(\"Name: \" + name);\n+    runtime:sleep(4000);\n+\n+    // During this period cache entry with the key 'key1' should be removed\n+    // since the max of it is set to 2 seconds by default. But the cache", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5MDQzMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // entry with the key 'key2' should be exist in the cache.\n          \n          \n            \n                // entry with the key 'key2' should exist in the cache.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390090433", "createdAt": "2020-03-10T04:31:59Z", "author": {"login": "praneesha"}, "path": "examples/cache/cache.bal", "diffHunk": "@@ -2,34 +2,52 @@ import ballerina/cache;\n import ballerina/io;\n import ballerina/runtime;\n \n-public function main() {\n-    // This creates a new cache. The cache cleanup task runs every 5 seconds\n-    // and clears all the expired caches. In this example, the cache expiry time\n-    // is set to four seconds in order to demonstrate how cache cleaning is\n-    // carried out.\n-    cache:Cache cache = new (4000);\n+public function main() returns error? {\n+    // This creates a new cache of size 10. The eviction factor is set to 0.2,\n+    // which means at the time of eviction 10*0.2=2 entries get removed from\n+    // the cache.\n+    // The default max age of cache entry is set to 2 seconds. The cache\n+    // cleanup task runs every 3 seconds and clears all the expired entries.\n+    cache:Cache cache = new({\n+        capacity: 10,\n+        evictionFactor: 0.2,\n+        defaultMaxAgeInSeconds: 2,\n+        cleanupIntervalInSeconds: 3\n+    });\n \n     // Adds a new entry to the cache.\n-    cache.put(\"Name\", \"Ballerina\");\n+    _ = check cache.put(\"key1\", \"value1\");\n+    // Adds a new entry to the cache by overriding the default max age.\n+    _ = check cache.put(\"key2\", \"value2\", 3600);\n \n-    // Fetches the cached value.\n-    string name = \"\";\n-    if (cache.hasKey(\"Name\")) {\n-        name = <string>cache.get(\"Name\");\n+    // Checked for the cached key availability.\n+    if (cache.hasKey(\"key1\")) {\n+        // Fetches the cached value.\n+        string value = <string> check cache.get(\"key1\");\n+        io:println(\"key1: \" + value);\n     }\n-    io:println(\"Name: \" + name);\n \n-    // This sends the current worker to the sleep mode for six seconds.\n+    // This sends the current worker to the sleep mode for 4 seconds.\n     // No execution takes place during this period.\n-    runtime:sleep(6000);\n-\n-    // The cache expires after 4 seconds. The cache cleanup task runs during the\n-    // fifth second and cleans the cache while this thread is in the sleep mode.\n-    // As a result, the value in the cache becomes null.\n-    if (cache.hasKey(\"Name\")) {\n-        name = <string>cache.get(\"Name\");\n-    } else {\n-        name = \"\";\n-    }\n-    io:println(\"Name: \" + name);\n+    runtime:sleep(4000);\n+\n+    // During this period cache entry with the key 'key1' should be removed\n+    // since the max of it is set to 2 seconds by default. But the cache\n+    // entry with the key 'key2' should be exist in the cache.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ffc61bfe381eb5a03befddc31222f9eace1c97f"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a14614a888b66b308ca808b28dea8eda7e03af2", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2a14614a888b66b308ca808b28dea8eda7e03af2", "committedDate": "2020-03-10T04:38:25Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31df05e0da5cdd4a8c86da90881e36856c4fe4ef", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/31df05e0da5cdd4a8c86da90881e36856c4fe4ef", "committedDate": "2020-03-10T08:39:26Z", "message": "Add ballerina docs for cache error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNzU5OTQ5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#pullrequestreview-371759949", "createdAt": "2020-03-10T08:40:38Z", "commit": {"oid": "31df05e0da5cdd4a8c86da90881e36856c4fe4ef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODo0MDozOFrOF0FgpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODo0MDozOFrOF0FgpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2MDU0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents the Cache error reason.\n          \n          \n            \n            # Represents the reason for the Cache error.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390160549", "createdAt": "2020-03-10T08:40:38Z", "author": {"login": "praneesha"}, "path": "stdlib/cache/src/main/ballerina/src/cache/cache_errors.bal", "diffHunk": "@@ -25,7 +25,11 @@ public type Detail record {\n     error cause?;\n };\n \n+# Represents the Cache error reason.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31df05e0da5cdd4a8c86da90881e36856c4fe4ef"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ce20a8d6a06dbf78a64e6431d8c28fc541e41f9", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2ce20a8d6a06dbf78a64e6431d8c28fc541e41f9", "committedDate": "2020-03-10T08:42:06Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxOTQ0NDQ1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#pullrequestreview-371944445", "createdAt": "2020-03-10T13:23:08Z", "commit": {"oid": "2ce20a8d6a06dbf78a64e6431d8c28fc541e41f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzoyMzowOFrOF0OgzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzoyMzowOFrOF0OgzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwODA0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#discussion_r390308045", "createdAt": "2020-03-10T13:23:08Z", "author": {"login": "daneshk"}, "path": "stdlib/cache/src/main/ballerina/src/cache/cache.bal", "diffHunk": "@@ -14,336 +14,277 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-import ballerina/system;\n import ballerina/task;\n import ballerina/time;\n \n-# Cache cleanup task invoking interval in ms.\n-const int CACHE_CLEANUP_INTERVAL = 5000;\n-\n-# Map which stores all of the caches.\n-map<Cache> cacheMap = {};\n-\n-task:TimerConfiguration cacheCleanupTimerConfiguration = {\n-    intervalInMillis: CACHE_CLEANUP_INTERVAL,\n-    initialDelayInMillis: CACHE_CLEANUP_INTERVAL\n-};\n-\n-task:Scheduler cacheCleanupTimer = new(cacheCleanupTimerConfiguration);\n-\n-boolean timerStarted = false;\n-\n-# Represents a cache entry.\n+# Represents cache configuration.\n #\n-# + value - cache value\n-# + lastAccessedTime - last accessed time in ms of this value which is used to remove LRU cached values\n+# + capacity - Maximum number of entries allowed\n+# + evictionPolicy - The policy which defines the cache eviction algorithm\n+# + evictionFactor - The factor which the entries will be evicted once the cache full\n+# + defaultMaxAgeInSeconds - The default value in seconds which all the cache entries are valid.\n+#                            '-1' means, the entries are valid forever. This will be overwritten by the the\n+#                            `maxAgeInSeconds` property set when inserting item to the cache\n+# + cleanupIntervalInSeconds - Interval of the timer task which clean up the cache\n+public type CacheConfig record {|\n+    int capacity = 100;\n+    AbstractEvictionPolicy evictionPolicy = new LruEvictionPolicy();\n+    float evictionFactor = 0.25;\n+    int defaultMaxAgeInSeconds = -1;\n+    int cleanupIntervalInSeconds?;\n+|};\n+\n type CacheEntry record {|\n-    any value;\n-    int lastAccessedTime;\n+    string key;\n+    any data;\n+    int expTime;       // exp time since epoch. calculated based on the `maxAge` parameter when inserting to map\n |};\n \n-# Represents a Ballerina `Cache` which can hold multiple entries and remove entries based on time and size.\n+// Cleanup service which cleans the cache entries periodically.\n+boolean cleanupInProgress = false;\n+\n+// Cleanup service which cleans the cache entries periodically.\n+service cleanupService = service {\n+    resource function onTrigger(map<Node> entries, LinkedList list, AbstractEvictionPolicy evictionPolicy) {\n+        // This check will skip the processes triggered while the clean up in progress.\n+        if (!cleanupInProgress) {\n+            lock {\n+                cleanupInProgress = true;\n+                cleanup(entries, list, evictionPolicy);\n+                cleanupInProgress = false;\n+            }\n+        }\n+    }\n+};\n+\n+# Represents Ballerina `Cache` object and cache related operations.\n public type Cache object {\n \n+    *AbstractCache;\n+\n     private int capacity;\n-    map<CacheEntry> entries = {};\n-    int expiryTimeInMillis;\n+    private AbstractEvictionPolicy evictionPolicy;\n     private float evictionFactor;\n-    private string uuid;\n+    private int defaultMaxAgeInSeconds;\n+    private map<Node> entries = {};\n+    private LinkedList list;\n \n-    # Creates a new `Cache`.\n+    # Creates a new `Cache` object.\n     #\n-    # + expiryTimeInMillis - Time since its last access in which the cache will be expired.\n-    # + capacity - Maximum number of entries allowed.\n-    # + evictionFactor - The factor which the entries will be evicted once the cache full.\n-    public function __init(public int expiryTimeInMillis = 900000, public int capacity = 100, public float evictionFactor = 0.25) {\n+    # + cacheConfig - Cache configurations\n+    public function __init(CacheConfig cacheConfig = {}) {\n+        self.capacity = cacheConfig.capacity;\n+        self.evictionPolicy = cacheConfig.evictionPolicy;\n+        self.evictionFactor = cacheConfig.evictionFactor;\n+        self.defaultMaxAgeInSeconds = cacheConfig.defaultMaxAgeInSeconds;\n \n-        // Cache expiry time must be a positive value.\n-        if (expiryTimeInMillis <= 0) {\n-            Error e = error(CACHE_ERROR, message = \"Expiry time must be greater than 0.\");\n-            panic e;\n-        }\n         // Cache capacity must be a positive value.\n-        if (capacity <= 0) {\n-            Error e = error(CACHE_ERROR, message = \"Capacity must be greater than 0.\");\n-            panic e;\n+        if (self.capacity <= 0) {\n+            panic prepareError(\"Capacity must be greater than 0.\");\n         }\n         // Cache eviction factor must be between 0.0 (exclusive) and 1.0 (inclusive).\n-        if (evictionFactor <= 0 || evictionFactor > 1) {\n-            Error e = error(CACHE_ERROR, message = \"Cache eviction factor must be between 0.0 (exclusive) and 1.0 (inclusive).\");\n-            panic e;\n+        if (self.evictionFactor <= 0 || self.evictionFactor > 1) {\n+            panic prepareError(\"Cache eviction factor must be between 0.0 (exclusive) and 1.0 (inclusive).\");\n         }\n-        // We remove empty caches to prevent OOM issues. So in such scenarios, the cache will not be in the `cacheMap`\n-        // when we are trying to add a new cache entry to that cache. So we need to create a new cache. For that, keep\n-        // track of the UUID.\n-        self.uuid = system:uuid();\n-        cacheMap[self.uuid] = self;\n-        self.expiryTimeInMillis = expiryTimeInMillis;\n-        self.capacity = capacity;\n-        self.evictionFactor = evictionFactor;\n \n-        var attachCacheCleanerResult = cacheCleanupTimer.attach(cacheCleanupService);\n-        if (attachCacheCleanerResult is error) {\n-            record {| string message?; anydata|error...; |} detail = attachCacheCleanerResult.detail();\n-            Error e = error(CACHE_ERROR, message = \"Failed to create the cache cleanup task: \" +  <string> detail[\"message\"]);\n-            panic e;\n+        // Cache eviction factor must be between 0.0 (exclusive) and 1.0 (inclusive).\n+        if (self.defaultMaxAgeInSeconds != -1 && self.defaultMaxAgeInSeconds <= 0) {\n+            panic prepareError(\"Default max age should be greater than 0 or -1 for indicate forever valid.\");\n         }\n \n-        if (!timerStarted && !cacheCleanupTimer.isStarted()) {\n-            lock {\n-                if(!cacheCleanupTimer.isStarted()) {\n-                    var timerStartResult = cacheCleanupTimer.start();\n-                    if (timerStartResult is error) {\n-                        record {| string message?; anydata|error...; |} detail = timerStartResult.detail();\n-                        Error e = error(CACHE_ERROR, message = \"Failed to start the cache cleanup task: \" +  <string> detail[\"message\"]);\n-                        panic e;\n-                    }\n-                    timerStarted = true;\n-                }\n+        self.list = {\n+            head: (),\n+            tail: ()\n+        };\n+        int? cleanupIntervalInSeconds = cacheConfig?.cleanupIntervalInSeconds;\n+        if (cleanupIntervalInSeconds is int) {\n+            task:TimerConfiguration timerConfiguration = {\n+                intervalInMillis: cleanupIntervalInSeconds,\n+                initialDelayInMillis: cleanupIntervalInSeconds\n+            };\n+            task:Scheduler cleanupScheduler = new(timerConfiguration);\n+            task:SchedulerError? result = cleanupScheduler.attach(cleanupService, self.entries, self.list,\n+                                                                  self.evictionPolicy);\n+            if (result is task:SchedulerError) {\n+                panic prepareError(\"Failed to create the cache cleanup task.\", result);\n+            }\n+            result = cleanupScheduler.start();\n+            if (result is task:SchedulerError) {\n+                panic prepareError(\"Failed to start the cache cleanup task.\", result);\n             }\n         }\n     }\n \n-    # Checks whether the given key has an associated cache value.\n+    # Add the given key value pair to the cache. If the cache previously contained a value associated with key, the\n+    # old value is replaced by value.\n     #\n-    # + key - The key to be checked.\n-    # + return - `true` if the given key has an associated value, `false` otherwise.\n-    public function hasKey(string key) returns boolean {\n-        return self.entries.hasKey(key);\n-    }\n+    # + key - Key of the cached value\n+    # + value - Value to be cached\n+    # + maxAgeInSeconds - The value in seconds, which the cache entry is valid. '-1' means, the entry is valid forever.\n+    # + return - `()` if successfully added to the cache or\n+    # `Error` if any error occurred while inserting entry to the cache.\n+    public function put(string key, any value, int maxAgeInSeconds = -1) returns Error? {\n+        lock {\n+            // If the current cache is full (i.e. size = capacity), evict cache.\n+            if (self.size() == self.capacity) {\n+                evict(self.entries, self.list, self.evictionPolicy, self.capacity, self.evictionFactor);\n+            }\n \n-    # Returns the size of the cache.\n-    #\n-    # + return - The size of the cache.\n-    public function size() returns int {\n-        return self.entries.length();\n+            // Calculate the `expTime` of the cache entry based on the `maxAgeInSeconds` property and\n+            // `defaultMaxAgeInSeconds` property.\n+            int calculatedExpTime = -1;\n+            if (maxAgeInSeconds != -1 && maxAgeInSeconds > 0) {\n+                calculatedExpTime = time:nanoTime() + (maxAgeInSeconds * 1000 * 1000 * 1000);\n+            } else {\n+                if (self.defaultMaxAgeInSeconds != -1) {\n+                    calculatedExpTime = time:nanoTime() + (self.defaultMaxAgeInSeconds * 1000 * 1000 * 1000);\n+                }\n+            }\n+\n+            CacheEntry entry = {\n+                key: key,\n+                data: value,\n+                expTime: calculatedExpTime\n+            };\n+            Node newNode = { value: entry };\n+\n+            if (self.hasKey(key)) {\n+                Node oldNode = self.entries.get(key);\n+                self.evictionPolicy.replace(self.list, newNode, oldNode);\n+            } else {\n+                self.evictionPolicy.put(self.list, newNode);\n+            }\n+            self.entries[key] = newNode;\n+        }\n     }\n \n-    # Adds the given key, value pair to the provided cache.\n+    # Return the cached value associated with the given key.\n     #\n-    # + key - Value which should be used as the key.\n-    # + value - Value to be cached.\n-    public function put(string key, any value) {\n-        // We need to synchronize this process otherwise concurrency might cause issues.\n-         lock {\n-            int cacheCapacity = self.capacity;\n-            int cacheSize = self.entries.length();\n-\n-            // If the current cache is full, evict cache.\n-            if (cacheCapacity <= cacheSize) {\n-                self.evict();\n+    # + key - Key which is used to retrieve the cached value\n+    # + return - The cached value associated with the given key or\n+    # `Error` if the provided cache key is not or if any error occurred while retrieving from the cache.\n+    public function get(string key) returns any|Error {\n+        lock {\n+            if (!self.hasKey(key)) {\n+                return prepareError(\"Cache entry from the given key: \" + key + \", is not available.\");\n             }\n-            // Add the new cache entry.\n-            int time = time:currentTime().time;\n-            CacheEntry entry = { value: value, lastAccessedTime: time };\n-            self.entries[key] = entry;\n \n-            // If the UUID is not found, that means that cache was removed after being empty. So we need to create a\n-            // new cache with the current cache object.\n-            if (!cacheMap.hasKey(self.uuid)) {\n-                cacheMap[self.uuid] = self;\n+            Node node = self.entries.get(key);\n+            CacheEntry entry = <CacheEntry>node.value;\n+\n+            // Check whether the cache entry is already expired. Even though the cache cleaning task is configured\n+            // and runs in predefined intervals, sometimes the cache entry might not have been removed at this point\n+            // even though it is expired. So this check guarantees that the expired cache entries will not be returned.\n+            if (entry.expTime != -1 && entry.expTime < time:nanoTime()) {\n+                self.evictionPolicy.remove(self.list, node);\n+                return removeEntry(self.entries, key);\n             }\n-         }\n-    }\n \n-    # Evicts the cache when the cache is full.\n-    function evict() {\n-        int maxCapacity = self.capacity;\n-        float ef = self.evictionFactor;\n-        int numberOfKeysToEvict = <int>(maxCapacity * ef);\n-        // Get the above number of least recently used cache entry keys from the cache\n-        string[] cacheKeys = self.getLRUCacheKeys(numberOfKeysToEvict);\n-        // Iterate through the map and remove entries.\n-        foreach var c in cacheKeys {\n-            // These cache values are ignored. So it is not needed to check the return value for the remove function.\n-            var tempVar = self.entries.remove(c);\n+            self.evictionPolicy.get(self.list, node);\n+            return entry.data;\n         }\n     }\n \n-    # Returns the cached value associated with the given key. If the provided cache key is not found,\n-    # () will be returned.\n+    # Discard a cached value from the cache.\n     #\n-    # + key - Key which is used to retrieve the cached value.\n-    # + return - The cached value associated with the given key.\n-    public function get(string key) returns any? {\n-        // Check whether the requested cache is available.\n-        if (!self.hasKey(key)) {\n-            return ();\n-        }\n-        // Get the requested cache entry from the map.\n-        CacheEntry? cacheEntry = self.entries[key];\n-\n-        if (cacheEntry is CacheEntry) {\n-            // Check whether the cache entry is already expired. Since the cache cleaning task runs in predefined intervals,\n-            // sometimes the cache entry might not have been removed at this point even though it is expired. So this check\n-            // guarantees that the expired cache entries will not be returned.\n-            int currentSystemTime = time:currentTime().time;\n-            if (currentSystemTime >= cacheEntry.lastAccessedTime + self.expiryTimeInMillis) {\n-                // If it is expired, remove the cache and return nil.\n-                self.remove(key);\n-                return ();\n+    # + key - Key of the cache entry which needs to be discarded\n+    # + return - `()` if successfully discarded or\n+    # `Error` if the provided cache key is not or if any error occurred while discarding from the cache.\n+    public function invalidate(string key) returns Error? {\n+        lock {\n+            if (!self.hasKey(key)) {\n+                return prepareError(\"Cache entry from the given key: \" + key + \", is not available.\");\n             }\n-            // Modify the last accessed time and return the cache if it is not expired.\n-            cacheEntry.lastAccessedTime = time:currentTime().time;\n-            return cacheEntry.value;\n-        } else {\n-            return ();\n+\n+            Node node = self.entries.get(key);\n+            self.evictionPolicy.remove(self.list, node);\n+            return removeEntry(self.entries, key);\n         }\n     }\n \n-    # Removes a cached value from a cache.\n+    # Discard all the cached values from the cache.\n     #\n-    # + key - Key of the cache entry which needs to be removed.\n-    public function remove(string key) {\n-        // Cache might already be removed by the cache clearing task. So no need to check the return value.\n-        if (self.entries.hasKey(key)) {\n-            var tempVar = self.entries.remove(key);\n+    # + return - `()` if successfully discarded all or\n+    # `Error` if any error occurred while discarding all from the cache.\n+    public function invalidateAll() returns Error? {\n+        lock {\n+            self.evictionPolicy.clear(self.list);\n+            return removeAllEntries(self.entries);\n         }\n     }\n \n-    # Returns all keys from current cache.\n+    # Checks whether the given key has an associated cache value.\n+    #\n+    # + key - The key to be checked\n+    # + return - Whether the an associated cache value is available in the cache or not\n+    public function hasKey(string key) returns boolean {\n+        return self.entries.hasKey(key);\n+    }\n+\n+    # Returns all keys from the cache.\n     #\n-    # + return - Array of all keys from the current cache.\n+    # + return - Array of all keys from the cache\n     public function keys() returns string[] {\n         return self.entries.keys();\n     }\n \n-    # Returns the key of the least recently used cache entry.\n-    # This is used to remove entries if the cache is full.\n+    # Returns the size of the cache.\n+    #\n+    # + return - The size of the cache\n+    public function size() returns int {\n+        return self.entries.length();\n+    }\n+\n+    # Returns the capacity of the cache.\n     #\n-    # + numberOfKeysToEvict - The number of keys which should be evicted.\n-    # + return - Number of keys to be evicted.\n-    function getLRUCacheKeys(int numberOfKeysToEvict) returns string[] {\n-        // Create new arrays to hold keys to be removed and hold the corresponding timestamps.\n-        string[] cacheKeysToBeRemoved = [];\n-        int[] timestamps = [];\n-        string[] keys = self.entries.keys();\n-        // Iterate through the keys.\n-        foreach var key in keys {\n-            CacheEntry? cacheEntry = self.entries[key];\n-            if (cacheEntry is CacheEntry) {\n-                // Check and add the key to the cacheKeysToBeRemoved if it matches the conditions.\n-                checkAndAdd(numberOfKeysToEvict, cacheKeysToBeRemoved, timestamps, key, cacheEntry.lastAccessedTime);\n-            }\n-            // If the key is not found in the map, that means that the corresponding cache is already removed\n-            // (possibly by a another worker).\n-        }\n-        // Return the array.\n-        return cacheKeysToBeRemoved;\n+    # + return - The capacity of the cache\n+    public function capacity() returns int {\n+        return self.capacity;\n     }\n };\n \n-# Removes expired cache entries from all caches.\n-function runCacheExpiry() {\n-\n-    // We need to keep track of empty caches. We remove these to prevent OOM issues.\n-    int emptyCacheCount = 0;\n-    string[] emptyCacheKeys = [];\n-\n-    // Iterate through all caches.\n-    int keyIndex = 0;\n-    string[] currentCacheKeys = cacheMap.keys();\n-    int cacheKeysLength = currentCacheKeys.length();\n-    while (keyIndex < cacheKeysLength) {\n-\n-        string currentCacheKey = currentCacheKeys[keyIndex];\n-        keyIndex += 1;\n-        Cache? currentCache = cacheMap[currentCacheKey];\n-        if (currentCache is ()) {\n-            continue;\n+function evict(map<Node> entries, LinkedList list, AbstractEvictionPolicy evictionPolicy, int capacity,\n+               float evictionFactor) {\n+    int evictionKeysCount = <int>(capacity * evictionFactor);\n+    foreach int i in 1...evictionKeysCount {\n+        Node? node = evictionPolicy.evict(list);\n+        if (node is Node) {\n+            CacheEntry entry = <CacheEntry>node.value;\n+            Error? result = removeEntry(entries, entry.key);\n+            // The return result (error which occurred due to unavailability of the key or nil) is ignored\n+            // since no purpose of handling it.\n         } else {\n-            // Get the expiry time of the current cache\n-            int currentCacheExpiryTime = currentCache.expiryTimeInMillis;\n-\n-            // Create a new array to store keys of cache entries which needs to be removed.\n-            string[] cachesToBeRemoved = [];\n-\n-            int cachesToBeRemovedIndex = 0;\n-            // Iterate through all keys.\n-            int entrykeyIndex = 0;\n-            string[] entryKeys = currentCache.entries.keys();\n-            int entryKeysLength = entryKeys.length();\n-            while (entrykeyIndex < entryKeysLength) {\n-\n-                var key = entryKeys[entrykeyIndex];\n-                entrykeyIndex += 1;\n-                CacheEntry? entry = currentCache.entries[key];\n-                if (entry is ()) {\n-                    continue;\n-                } else {\n-                    // Get the current system time.\n-                    int currentSystemTime = time:currentTime().time;\n-\n-                    // Check whether the cache entry needs to be removed.\n-                    if (currentSystemTime >= entry.lastAccessedTime + currentCacheExpiryTime) {\n-                        cachesToBeRemoved[cachesToBeRemovedIndex] = key;\n-                        cachesToBeRemovedIndex += 1;\n-                    }\n-                }\n-            }\n-\n-            // Iterate through the key list which needs to be removed.\n-            int currentKeyIndex = 0;\n-            while(currentKeyIndex < cachesToBeRemovedIndex) {\n-                string key = cachesToBeRemoved[currentKeyIndex];\n-                // Remove the cache entry.\n-                var tempVar = currentCache.entries.remove(key);\n-                currentKeyIndex += 1;\n-            }\n-\n-            // If there are no entries, we add that cache key to the `emptyCacheKeys`.\n-            int size = currentCache.entries.length();\n-            if (size == 0) {\n-                emptyCacheKeys[emptyCacheCount] = currentCacheKey;\n-                emptyCacheCount += 1;\n-            }\n+            break;\n         }\n     }\n+}\n \n-    // We iterate though all empty cache keys and remove them from the `cacheMap`.\n-    foreach var emptyCacheKey in emptyCacheKeys {\n-        if (cacheMap.hasKey(emptyCacheKey)) {\n-            var tempVar = cacheMap.remove(emptyCacheKey);\n+function cleanup(map<Node> entries, LinkedList list, AbstractEvictionPolicy evictionPolicy) {\n+    if (entries.length() == 0) {\n+        return;\n+    }\n+    foreach Node node in entries {\n+        CacheEntry entry = <CacheEntry>node.value;\n+        if (entry.expTime != -1 && entry.expTime < time:nanoTime()) {\n+            evictionPolicy.remove(list, node);\n+            Error? result = removeEntry(entries, entry.key);\n+            // The return result (error which occurred due to unavailability of the key or nil) is ignored\n+            // since no purpose of handling it.\n+            return;\n         }\n     }\n-    return ();\n }\n \n-# Utility function to identify which cache entries should be evicted.\n-function checkAndAdd(int numberOfKeysToEvict, string[] cacheKeys, int[] timestamps, string key, int lastAccessTime) {\n-    string myKey = key;\n-    int myLastAccessTime = lastAccessTime;\n-\n-    // Iterate while we count all values from 0 to numberOfKeysToEvict exclusive of numberOfKeysToEvict since the\n-    // array size should be numberOfKeysToEvict.\n-    foreach var index in 0..<numberOfKeysToEvict {\n-        // If we have encountered the end of the array, that means we can add the new values to the end of the\n-        // array since we haven\u2019t reached the numberOfKeysToEvict limit.\n-        if (cacheKeys.length() == index) {\n-            cacheKeys[index] = myKey;\n-            timestamps[index] = myLastAccessTime;\n-            // Break the loop since we don't have any more elements to compare since we are at the end\n-            break;\n-        } else {\n-            // If the timestamps[index] > lastAccessTime, that means the cache which corresponds to the 'key' is\n-            // older than the current entry at the array which we are checking.\n-            if (timestamps[index] > myLastAccessTime) {\n-                // Swap the values. We use the swapped value to continue to check whether we can find any place to\n-                // add it in the array.\n-                string tempKey = cacheKeys[index];\n-                int tempTimeStamp = timestamps[index];\n-                cacheKeys[index] = myKey;\n-                timestamps[index] = myLastAccessTime;\n-                myKey = tempKey;\n-                myLastAccessTime = tempTimeStamp;\n-            }\n-        }\n+function removeEntry(map<Node> entries, string key) returns Error? {\n+    var result = trap entries.remove(key);\n+    if (result is error) {\n+        return prepareError(\"Error while removing the entry (key: \" + key + \") from the map. \", result);\n     }\n }\n \n-# Cleanup service which cleans the cache periodically.\n-service cacheCleanupService = service {\n-    resource function onTrigger() {\n-        runCacheExpiry();\n+function removeAllEntries(map<Node> entries) returns Error? {\n+    var result = trap entries.removeAll();\n+    if (result is error) {\n+        return prepareError(\"Error while removing all the entries from the map.\", result);\n     }\n-};\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ce20a8d6a06dbf78a64e6431d8c28fc541e41f9"}, "originalPosition": 549}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxOTUyNTY5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#pullrequestreview-371952569", "createdAt": "2020-03-10T13:33:04Z", "commit": {"oid": "2ce20a8d6a06dbf78a64e6431d8c28fc541e41f9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c68f0ea4e71a461fea0f42a6d0fdb9218457b018", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c68f0ea4e71a461fea0f42a6d0fdb9218457b018", "committedDate": "2020-03-10T14:13:56Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: Danesh Kuruppu <daneshk@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f24f950fa5034582ca215de4bbc84741c97b3ae1", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f24f950fa5034582ca215de4bbc84741c97b3ae1", "committedDate": "2020-03-11T04:42:52Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into refactor-cache\n\n# Conflicts:\n#\tstdlib/auth/src/main/ballerina/src/auth/utils.bal\n#\tstdlib/jwt/src/main/ballerina/src/jwt/inbound_jwt_auth_provider.bal\n#\tstdlib/oauth2/src/main/ballerina/src/oauth2/inbound_oauth2_provider.bal"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b9908bd1bd4f9f6858acafee0988a24be74603cb", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b9908bd1bd4f9f6858acafee0988a24be74603cb", "committedDate": "2020-03-11T04:20:46Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into refactor-cache\n\n# Conflicts:\n#\tstdlib/auth/src/main/ballerina/src/auth/utils.bal\n#\tstdlib/jwt/src/main/ballerina/src/jwt/inbound_jwt_auth_provider.bal\n#\tstdlib/oauth2/src/main/ballerina/src/oauth2/inbound_oauth2_provider.bal"}, "afterCommit": {"oid": "f24f950fa5034582ca215de4bbc84741c97b3ae1", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f24f950fa5034582ca215de4bbc84741c97b3ae1", "committedDate": "2020-03-11T04:42:52Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into refactor-cache\n\n# Conflicts:\n#\tstdlib/auth/src/main/ballerina/src/auth/utils.bal\n#\tstdlib/jwt/src/main/ballerina/src/jwt/inbound_jwt_auth_provider.bal\n#\tstdlib/oauth2/src/main/ballerina/src/oauth2/inbound_oauth2_provider.bal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e1de98cd48bd67ddae0316920fc8fa3695dd9ee", "author": {"user": {"login": "ldclakmal", "name": "Chanaka Lakmal"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5e1de98cd48bd67ddae0316920fc8fa3695dd9ee", "committedDate": "2020-03-11T05:03:18Z", "message": "Prevent nil value insertion to cache"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNTQ2ODM0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21308#pullrequestreview-372546834", "createdAt": "2020-03-11T08:18:37Z", "commit": {"oid": "5e1de98cd48bd67ddae0316920fc8fa3695dd9ee"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4050, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}