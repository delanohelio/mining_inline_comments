{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4OTc0NDEz", "number": 21776, "title": "Update examples for mapping constructor changes", "bodyText": "Purpose\n$title.\nFixes #21101\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-03-16T04:04:08Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21776", "merged": true, "mergeCommit": {"oid": "0aa86892784d83af43737d62a30b5cfdeae29f3d"}, "closed": true, "closedAt": "2020-03-16T14:31:40Z", "author": {"login": "MaryamZi"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcN9VbrgH2gAyMzg4OTc0NDEzOjRiNmQ2Mzk5NjEzYWQ4YjQwMGEwZWY4M2E4YzViYzE4NGI2M2JkMWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOOblEgFqTM3NTIyODg2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4b6d6399613ad8b400a0ef83a8c5bc184b63bd1a", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4b6d6399613ad8b400a0ef83a8c5bc184b63bd1a", "committedDate": "2020-03-15T17:54:43Z", "message": "Add var ref field examples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc87c8f461f60732f21f253f0ea9cfb5b38fc686", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fc87c8f461f60732f21f253f0ea9cfb5b38fc686", "committedDate": "2020-03-16T03:52:30Z", "message": "Add spread field examples"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0OTA0MDgw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21776#pullrequestreview-374904080", "createdAt": "2020-03-16T04:19:15Z", "commit": {"oid": "fc87c8f461f60732f21f253f0ea9cfb5b38fc686"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDoxOToxNVrOF2lIYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwNDoyODoxNVrOF2lOWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NTc3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // The value in a key-value pair can be any expression that evaluates\n          \n          \n            \n                    // The value in a key-value pair can be any expression, which evaluates", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21776#discussion_r392775779", "createdAt": "2020-03-16T04:19:15Z", "author": {"login": "praneesha"}, "path": "examples/maps/maps.bal", "diffHunk": "@@ -1,43 +1,73 @@\n import ballerina/io;\n \n public function main() {\n-    // Declares a `map` constrained by the type `string`.\n+    // Declare a `map` constrained by the type `string`.\n     map<string> m;\n \n-    // You can also declare and initialize a `map` with a map literal.\n+    string city = \"Colombo\";\n+    string country = \"Sri Lanka\";\n+    string codeLiteral = \"code\";\n+\n+    // You can also declare and initialize a `map` with a mapping constructor\n+    // expression.\n     map<string> addrMap = {\n+        // A field can be specified as a key-value pair.\n         line1: \"No. 20\",\n         line2: \"Palm Grove\",\n+        // The value in a key-value pair can be any expression that evaluates", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc87c8f461f60732f21f253f0ea9cfb5b38fc686"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NjE5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // The type of a member access expression for a map is thus the union of\n          \n          \n            \n                // Thus, the type of a member access expression for a map is the union of\n          \n      \n    \n    \n  \n\nhaving \"thus\" in the middle of the sentence disturbs the flow of it. Better to have it at the beginning.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21776#discussion_r392776195", "createdAt": "2020-03-16T04:21:17Z", "author": {"login": "praneesha"}, "path": "examples/maps/maps.bal", "diffHunk": "@@ -1,43 +1,73 @@\n import ballerina/io;\n \n public function main() {\n-    // Declares a `map` constrained by the type `string`.\n+    // Declare a `map` constrained by the type `string`.\n     map<string> m;\n \n-    // You can also declare and initialize a `map` with a map literal.\n+    string city = \"Colombo\";\n+    string country = \"Sri Lanka\";\n+    string codeLiteral = \"code\";\n+\n+    // You can also declare and initialize a `map` with a mapping constructor\n+    // expression.\n     map<string> addrMap = {\n+        // A field can be specified as a key-value pair.\n         line1: \"No. 20\",\n         line2: \"Palm Grove\",\n+        // The value in a key-value pair can be any expression that evaluates\n+        // to a value of a type that belongs to the constraint type of the map.\n         city: \"Colombo 03\",\n-        country: \"Sri Lanka\"\n+        // A field can also be just a variable reference, which would result\n+        // in the variable name being the field name and the variable itself\n+        // being the value expression.\n+        // This is equivalent to saying `country: country`.\n+        country,\n+        // The key in a key-value pair can also be a computed key.\n+        // A computed key is defined by specifying the key expression within\n+        // brackets. The key expression must belong to type `string`.\n+        // For a computed key, the key expression is evaluated at runtime and\n+        // the resulting value is used as the key.\n+        [codeLiteral]: \"00300\"\n     };\n     io:println(addrMap);\n \n-    // Retrieves a value using member access.\n-    string country = <string>addrMap[\"country\"];\n-    io:println(country);\n+    // Retrieve a value using member access.\n+    // Member access returns the value if a field exists in the map with the\n+    // specified key, or `()` if a field does not exist with the specified key.\n+    // The type of a member access expression for a map is thus the union of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc87c8f461f60732f21f253f0ea9cfb5b38fc686"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NjUxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // specified key, or `()` if a field does not exist with the specified key.\n          \n          \n            \n                // specified key. Else, it returns `()` if a field does not exist with the specified key.\n          \n      \n    \n    \n  \n\nBreaking the text into smaller sentences to increase understandability.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21776#discussion_r392776514", "createdAt": "2020-03-16T04:23:23Z", "author": {"login": "praneesha"}, "path": "examples/maps/maps.bal", "diffHunk": "@@ -1,43 +1,73 @@\n import ballerina/io;\n \n public function main() {\n-    // Declares a `map` constrained by the type `string`.\n+    // Declare a `map` constrained by the type `string`.\n     map<string> m;\n \n-    // You can also declare and initialize a `map` with a map literal.\n+    string city = \"Colombo\";\n+    string country = \"Sri Lanka\";\n+    string codeLiteral = \"code\";\n+\n+    // You can also declare and initialize a `map` with a mapping constructor\n+    // expression.\n     map<string> addrMap = {\n+        // A field can be specified as a key-value pair.\n         line1: \"No. 20\",\n         line2: \"Palm Grove\",\n+        // The value in a key-value pair can be any expression that evaluates\n+        // to a value of a type that belongs to the constraint type of the map.\n         city: \"Colombo 03\",\n-        country: \"Sri Lanka\"\n+        // A field can also be just a variable reference, which would result\n+        // in the variable name being the field name and the variable itself\n+        // being the value expression.\n+        // This is equivalent to saying `country: country`.\n+        country,\n+        // The key in a key-value pair can also be a computed key.\n+        // A computed key is defined by specifying the key expression within\n+        // brackets. The key expression must belong to type `string`.\n+        // For a computed key, the key expression is evaluated at runtime and\n+        // the resulting value is used as the key.\n+        [codeLiteral]: \"00300\"\n     };\n     io:println(addrMap);\n \n-    // Retrieves a value using member access.\n-    string country = <string>addrMap[\"country\"];\n-    io:println(country);\n+    // Retrieve a value using member access.\n+    // Member access returns the value if a field exists in the map with the\n+    // specified key, or `()` if a field does not exist with the specified key.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc87c8f461f60732f21f253f0ea9cfb5b38fc686"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NjU1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // If the map has a field with the specified key, `.get()` returns the value,\n          \n          \n            \n                // If the map has a field with the specified key, `.get()` returns the value.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21776#discussion_r392776555", "createdAt": "2020-03-16T04:23:35Z", "author": {"login": "praneesha"}, "path": "examples/maps/maps.bal", "diffHunk": "@@ -1,43 +1,73 @@\n import ballerina/io;\n \n public function main() {\n-    // Declares a `map` constrained by the type `string`.\n+    // Declare a `map` constrained by the type `string`.\n     map<string> m;\n \n-    // You can also declare and initialize a `map` with a map literal.\n+    string city = \"Colombo\";\n+    string country = \"Sri Lanka\";\n+    string codeLiteral = \"code\";\n+\n+    // You can also declare and initialize a `map` with a mapping constructor\n+    // expression.\n     map<string> addrMap = {\n+        // A field can be specified as a key-value pair.\n         line1: \"No. 20\",\n         line2: \"Palm Grove\",\n+        // The value in a key-value pair can be any expression that evaluates\n+        // to a value of a type that belongs to the constraint type of the map.\n         city: \"Colombo 03\",\n-        country: \"Sri Lanka\"\n+        // A field can also be just a variable reference, which would result\n+        // in the variable name being the field name and the variable itself\n+        // being the value expression.\n+        // This is equivalent to saying `country: country`.\n+        country,\n+        // The key in a key-value pair can also be a computed key.\n+        // A computed key is defined by specifying the key expression within\n+        // brackets. The key expression must belong to type `string`.\n+        // For a computed key, the key expression is evaluated at runtime and\n+        // the resulting value is used as the key.\n+        [codeLiteral]: \"00300\"\n     };\n     io:println(addrMap);\n \n-    // Retrieves a value using member access.\n-    string country = <string>addrMap[\"country\"];\n-    io:println(country);\n+    // Retrieve a value using member access.\n+    // Member access returns the value if a field exists in the map with the\n+    // specified key, or `()` if a field does not exist with the specified key.\n+    // The type of a member access expression for a map is thus the union of\n+    // the constraint type and the nil type.\n+    string? countryValue = addrMap[\"country\"];\n+\n+    if (countryValue is string) {\n+        io:println(countryValue);\n+    } else {\n+        io:println(\"key 'country' not found\");\n+    }\n \n-    // Retrieves a value using the `.get()` method.\n-    // Panics if the map does not have a member with the specified key.\n-    string line2 = addrMap.get(\"line2\");\n-    io:println(line2);\n+    // Retrieve a value using the `.get()` method.\n+    // If the map has a field with the specified key, `.get()` returns the value,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc87c8f461f60732f21f253f0ea9cfb5b38fc686"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NjYwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // or panics if the map does not have a field with the specified key.\n          \n          \n            \n                // Else, it panics if the map does not have a field with the specified key.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21776#discussion_r392776604", "createdAt": "2020-03-16T04:23:49Z", "author": {"login": "praneesha"}, "path": "examples/maps/maps.bal", "diffHunk": "@@ -1,43 +1,73 @@\n import ballerina/io;\n \n public function main() {\n-    // Declares a `map` constrained by the type `string`.\n+    // Declare a `map` constrained by the type `string`.\n     map<string> m;\n \n-    // You can also declare and initialize a `map` with a map literal.\n+    string city = \"Colombo\";\n+    string country = \"Sri Lanka\";\n+    string codeLiteral = \"code\";\n+\n+    // You can also declare and initialize a `map` with a mapping constructor\n+    // expression.\n     map<string> addrMap = {\n+        // A field can be specified as a key-value pair.\n         line1: \"No. 20\",\n         line2: \"Palm Grove\",\n+        // The value in a key-value pair can be any expression that evaluates\n+        // to a value of a type that belongs to the constraint type of the map.\n         city: \"Colombo 03\",\n-        country: \"Sri Lanka\"\n+        // A field can also be just a variable reference, which would result\n+        // in the variable name being the field name and the variable itself\n+        // being the value expression.\n+        // This is equivalent to saying `country: country`.\n+        country,\n+        // The key in a key-value pair can also be a computed key.\n+        // A computed key is defined by specifying the key expression within\n+        // brackets. The key expression must belong to type `string`.\n+        // For a computed key, the key expression is evaluated at runtime and\n+        // the resulting value is used as the key.\n+        [codeLiteral]: \"00300\"\n     };\n     io:println(addrMap);\n \n-    // Retrieves a value using member access.\n-    string country = <string>addrMap[\"country\"];\n-    io:println(country);\n+    // Retrieve a value using member access.\n+    // Member access returns the value if a field exists in the map with the\n+    // specified key, or `()` if a field does not exist with the specified key.\n+    // The type of a member access expression for a map is thus the union of\n+    // the constraint type and the nil type.\n+    string? countryValue = addrMap[\"country\"];\n+\n+    if (countryValue is string) {\n+        io:println(countryValue);\n+    } else {\n+        io:println(\"key 'country' not found\");\n+    }\n \n-    // Retrieves a value using the `.get()` method.\n-    // Panics if the map does not have a member with the specified key.\n-    string line2 = addrMap.get(\"line2\");\n-    io:println(line2);\n+    // Retrieve a value using the `.get()` method.\n+    // If the map has a field with the specified key, `.get()` returns the value,\n+    // or panics if the map does not have a field with the specified key.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc87c8f461f60732f21f253f0ea9cfb5b38fc686"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NjY0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Member access lvalue expressions can be used to add fields to a map\n          \n          \n            \n                // Member access value expressions can be used to add fields to a map", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21776#discussion_r392776643", "createdAt": "2020-03-16T04:24:07Z", "author": {"login": "praneesha"}, "path": "examples/maps/maps.bal", "diffHunk": "@@ -1,43 +1,73 @@\n import ballerina/io;\n \n public function main() {\n-    // Declares a `map` constrained by the type `string`.\n+    // Declare a `map` constrained by the type `string`.\n     map<string> m;\n \n-    // You can also declare and initialize a `map` with a map literal.\n+    string city = \"Colombo\";\n+    string country = \"Sri Lanka\";\n+    string codeLiteral = \"code\";\n+\n+    // You can also declare and initialize a `map` with a mapping constructor\n+    // expression.\n     map<string> addrMap = {\n+        // A field can be specified as a key-value pair.\n         line1: \"No. 20\",\n         line2: \"Palm Grove\",\n+        // The value in a key-value pair can be any expression that evaluates\n+        // to a value of a type that belongs to the constraint type of the map.\n         city: \"Colombo 03\",\n-        country: \"Sri Lanka\"\n+        // A field can also be just a variable reference, which would result\n+        // in the variable name being the field name and the variable itself\n+        // being the value expression.\n+        // This is equivalent to saying `country: country`.\n+        country,\n+        // The key in a key-value pair can also be a computed key.\n+        // A computed key is defined by specifying the key expression within\n+        // brackets. The key expression must belong to type `string`.\n+        // For a computed key, the key expression is evaluated at runtime and\n+        // the resulting value is used as the key.\n+        [codeLiteral]: \"00300\"\n     };\n     io:println(addrMap);\n \n-    // Retrieves a value using member access.\n-    string country = <string>addrMap[\"country\"];\n-    io:println(country);\n+    // Retrieve a value using member access.\n+    // Member access returns the value if a field exists in the map with the\n+    // specified key, or `()` if a field does not exist with the specified key.\n+    // The type of a member access expression for a map is thus the union of\n+    // the constraint type and the nil type.\n+    string? countryValue = addrMap[\"country\"];\n+\n+    if (countryValue is string) {\n+        io:println(countryValue);\n+    } else {\n+        io:println(\"key 'country' not found\");\n+    }\n \n-    // Retrieves a value using the `.get()` method.\n-    // Panics if the map does not have a member with the specified key.\n-    string line2 = addrMap.get(\"line2\");\n-    io:println(line2);\n+    // Retrieve a value using the `.get()` method.\n+    // If the map has a field with the specified key, `.get()` returns the value,\n+    // or panics if the map does not have a field with the specified key.\n+    // Thus, the type for `.get()` on a map is the map's constraint type.\n+    string line2Value = addrMap.get(\"line2\");\n+    io:println(line2Value);\n \n-    // The `.hasKey()` function checks if a map contains a specified key.\n+    // The `.hasKey()` function checks if a map contains the specified key.\n     boolean hasPostalCode = addrMap.hasKey(\"postalCode\");\n     io:println(hasPostalCode);\n \n-    // Adds or updates the value of a key.\n+    // Member access lvalue expressions can be used to add fields to a map", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc87c8f461f60732f21f253f0ea9cfb5b38fc686"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NjY1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // or update an already existing field in the map.\n          \n          \n            \n                // or update an already-existing field in the map.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21776#discussion_r392776657", "createdAt": "2020-03-16T04:24:16Z", "author": {"login": "praneesha"}, "path": "examples/maps/maps.bal", "diffHunk": "@@ -1,43 +1,73 @@\n import ballerina/io;\n \n public function main() {\n-    // Declares a `map` constrained by the type `string`.\n+    // Declare a `map` constrained by the type `string`.\n     map<string> m;\n \n-    // You can also declare and initialize a `map` with a map literal.\n+    string city = \"Colombo\";\n+    string country = \"Sri Lanka\";\n+    string codeLiteral = \"code\";\n+\n+    // You can also declare and initialize a `map` with a mapping constructor\n+    // expression.\n     map<string> addrMap = {\n+        // A field can be specified as a key-value pair.\n         line1: \"No. 20\",\n         line2: \"Palm Grove\",\n+        // The value in a key-value pair can be any expression that evaluates\n+        // to a value of a type that belongs to the constraint type of the map.\n         city: \"Colombo 03\",\n-        country: \"Sri Lanka\"\n+        // A field can also be just a variable reference, which would result\n+        // in the variable name being the field name and the variable itself\n+        // being the value expression.\n+        // This is equivalent to saying `country: country`.\n+        country,\n+        // The key in a key-value pair can also be a computed key.\n+        // A computed key is defined by specifying the key expression within\n+        // brackets. The key expression must belong to type `string`.\n+        // For a computed key, the key expression is evaluated at runtime and\n+        // the resulting value is used as the key.\n+        [codeLiteral]: \"00300\"\n     };\n     io:println(addrMap);\n \n-    // Retrieves a value using member access.\n-    string country = <string>addrMap[\"country\"];\n-    io:println(country);\n+    // Retrieve a value using member access.\n+    // Member access returns the value if a field exists in the map with the\n+    // specified key, or `()` if a field does not exist with the specified key.\n+    // The type of a member access expression for a map is thus the union of\n+    // the constraint type and the nil type.\n+    string? countryValue = addrMap[\"country\"];\n+\n+    if (countryValue is string) {\n+        io:println(countryValue);\n+    } else {\n+        io:println(\"key 'country' not found\");\n+    }\n \n-    // Retrieves a value using the `.get()` method.\n-    // Panics if the map does not have a member with the specified key.\n-    string line2 = addrMap.get(\"line2\");\n-    io:println(line2);\n+    // Retrieve a value using the `.get()` method.\n+    // If the map has a field with the specified key, `.get()` returns the value,\n+    // or panics if the map does not have a field with the specified key.\n+    // Thus, the type for `.get()` on a map is the map's constraint type.\n+    string line2Value = addrMap.get(\"line2\");\n+    io:println(line2Value);\n \n-    // The `.hasKey()` function checks if a map contains a specified key.\n+    // The `.hasKey()` function checks if a map contains the specified key.\n     boolean hasPostalCode = addrMap.hasKey(\"postalCode\");\n     io:println(hasPostalCode);\n \n-    // Adds or updates the value of a key.\n+    // Member access lvalue expressions can be used to add fields to a map\n+    // or update an already existing field in the map.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc87c8f461f60732f21f253f0ea9cfb5b38fc686"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NjcyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // A mapping constructor expression can also include a spread field,\n          \n          \n            \n                // A mapping constructor expression can also include a spread field\n          \n      \n    \n    \n  \n\nWe do not need a comma here.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21776#discussion_r392776727", "createdAt": "2020-03-16T04:24:47Z", "author": {"login": "praneesha"}, "path": "examples/maps/maps.bal", "diffHunk": "@@ -56,15 +87,13 @@ public function main() {\n         }\n     );\n     io:println(modifiedMarks);\n-    \n-    // Maps can only contain values of the type specified by the constraint type descriptor.\n-    map<string> stringMap = {};\n-    stringMap[\"index\"] = \"100892N\";\n \n-    // The return type of member access will be `T?` where `T` is the constraint type of the map.\n-    // If the key does not exist, nil (`()`) is returned.\n-    // The Elvis operator `?:` is a conditional operator that handles `()`.\n-    // If the given expression evaluates to nil, the second expression is evaluated and its value is returned.\n-    string index2 = stringMap[\"index\"] ?: \"\";\n-    io:println(index2);\n+    // A mapping constructor expression can also include a spread field,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc87c8f461f60732f21f253f0ea9cfb5b38fc686"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NjkyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // The name of the variable will be used as the key, while\n          \n          \n            \n                    // The name of the variable will be used as the key while\n          \n      \n    \n    \n  \n\nWe do not need a comma before the \"while\" conjunction.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21776#discussion_r392776928", "createdAt": "2020-03-16T04:25:51Z", "author": {"login": "praneesha"}, "path": "examples/records/records.bal", "diffHunk": "@@ -28,12 +28,21 @@ type Grades record {|\n \n \n public function main() {\n+\n+    int age = 17;\n+\n     // This creates a `Student` record. Since all the fields are required and none of the fields\n     // have explicit default values assigned to them, values must be specified for all the fields\n     // when creating the record.\n     Student john = {\n+        // A field can be specified as a key-value pair.\n         name: \"John Doe\",\n-        age: 17,\n+        // A variable reference can also be used to define a field.\n+        // The name of the variable will be used as the key, while", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc87c8f461f60732f21f253f0ea9cfb5b38fc686"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3Njk2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // can also include a spread field, referring to another mapping value.\n          \n          \n            \n                // can also include a spread field referring to another mapping value.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21776#discussion_r392776967", "createdAt": "2020-03-16T04:26:08Z", "author": {"login": "praneesha"}, "path": "examples/records/records.bal", "diffHunk": "@@ -89,4 +99,33 @@ public function main() {\n     // record, else `()` is returned.\n     int? english = grades[\"english\"];\n     io:println(english);\n+\n+    // A mapping constructor expression used when creating a record value\n+    // can also include a spread field, referring to another mapping value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc87c8f461f60732f21f253f0ea9cfb5b38fc686"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NzAxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Using a mapping constructor expression with `var` (i.e., no contextually expected\n          \n          \n            \n                // Using a mapping constructor expression with `var` (i.e., no contextually-expected", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21776#discussion_r392777014", "createdAt": "2020-03-16T04:26:27Z", "author": {"login": "praneesha"}, "path": "examples/records/records.bal", "diffHunk": "@@ -89,4 +99,33 @@ public function main() {\n     // record, else `()` is returned.\n     int? english = grades[\"english\"];\n     io:println(english);\n+\n+    // A mapping constructor expression used when creating a record value\n+    // can also include a spread field, referring to another mapping value.\n+    // When a spread field is specified, all the fields of the relevant\n+    // mapping value are added to the new record value being created.\n+    // A spread field is used with `address` to include the individual address\n+    // entries in `address` when creating `anne`.\n+    Student anne = {\n+        name: \"Anne\",\n+        age: 18,\n+        grades: {\n+            maths: 70,\n+            physics: 80,\n+            chemistry: 55\n+        },\n+        ...address\n+    };\n+    io:println(anne);\n+\n+    // Using a mapping constructor expression with `var` (i.e., no contextually expected", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc87c8f461f60732f21f253f0ea9cfb5b38fc686"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NzIzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // type) results in a mapping value where the inferred type is a record type based\n          \n          \n            \n                // type) results in a mapping value, where the inferred type is a record type based\n          \n      \n    \n    \n  \n\nWe can have a comma before the \"where\" conjunction here to increase clarity and understandability since the sentence is long.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21776#discussion_r392777236", "createdAt": "2020-03-16T04:28:00Z", "author": {"login": "praneesha"}, "path": "examples/records/records.bal", "diffHunk": "@@ -89,4 +99,33 @@ public function main() {\n     // record, else `()` is returned.\n     int? english = grades[\"english\"];\n     io:println(english);\n+\n+    // A mapping constructor expression used when creating a record value\n+    // can also include a spread field, referring to another mapping value.\n+    // When a spread field is specified, all the fields of the relevant\n+    // mapping value are added to the new record value being created.\n+    // A spread field is used with `address` to include the individual address\n+    // entries in `address` when creating `anne`.\n+    Student anne = {\n+        name: \"Anne\",\n+        age: 18,\n+        grades: {\n+            maths: 70,\n+            physics: 80,\n+            chemistry: 55\n+        },\n+        ...address\n+    };\n+    io:println(anne);\n+\n+    // Using a mapping constructor expression with `var` (i.e., no contextually expected\n+    // type) results in a mapping value where the inferred type is a record type based", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc87c8f461f60732f21f253f0ea9cfb5b38fc686"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc3NzMwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // `record {| string name; int age; string city; string country; |}`\n          \n          \n            \n                // `record {| string name; int age; string city; string country; |}`.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21776#discussion_r392777305", "createdAt": "2020-03-16T04:28:15Z", "author": {"login": "praneesha"}, "path": "examples/records/records.bal", "diffHunk": "@@ -89,4 +99,33 @@ public function main() {\n     // record, else `()` is returned.\n     int? english = grades[\"english\"];\n     io:println(english);\n+\n+    // A mapping constructor expression used when creating a record value\n+    // can also include a spread field, referring to another mapping value.\n+    // When a spread field is specified, all the fields of the relevant\n+    // mapping value are added to the new record value being created.\n+    // A spread field is used with `address` to include the individual address\n+    // entries in `address` when creating `anne`.\n+    Student anne = {\n+        name: \"Anne\",\n+        age: 18,\n+        grades: {\n+            maths: 70,\n+            physics: 80,\n+            chemistry: 55\n+        },\n+        ...address\n+    };\n+    io:println(anne);\n+\n+    // Using a mapping constructor expression with `var` (i.e., no contextually expected\n+    // type) results in a mapping value where the inferred type is a record type based\n+    // on the fields specified in the mapping constructor expression.\n+    var rec = {name: \"Amy\", age: 18, ...address};\n+    io:println(rec);\n+\n+    // The record type inferred for `rec` is\n+    // `record {| string name; int age; string city; string country; |}`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc87c8f461f60732f21f253f0ea9cfb5b38fc686"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "188126e2d903a577a58bea2a38905d05df5fa358", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/188126e2d903a577a58bea2a38905d05df5fa358", "committedDate": "2020-03-16T04:32:47Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0OTg1MzM1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21776#pullrequestreview-374985335", "createdAt": "2020-03-16T08:06:55Z", "commit": {"oid": "188126e2d903a577a58bea2a38905d05df5fa358"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODowNjo1NVrOF2pKfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODowNjo1NVrOF2pKfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg0MTg1Mw==", "bodyText": "This first sentence sounds like a heading. Shall we rephrase this or remove it altogether?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21776#discussion_r392841853", "createdAt": "2020-03-16T08:06:55Z", "author": {"login": "pubudu91"}, "path": "examples/maps/maps.bal", "diffHunk": "@@ -1,43 +1,73 @@\n import ballerina/io;\n \n public function main() {\n-    // Declares a `map` constrained by the type `string`.\n+    // Declare a `map` constrained by the type `string`.\n     map<string> m;\n \n-    // You can also declare and initialize a `map` with a map literal.\n+    string city = \"Colombo\";\n+    string country = \"Sri Lanka\";\n+    string codeLiteral = \"code\";\n+\n+    // You can also declare and initialize a `map` with a mapping constructor\n+    // expression.\n     map<string> addrMap = {\n+        // A field can be specified as a key-value pair.\n         line1: \"No. 20\",\n         line2: \"Palm Grove\",\n+        // The value in a key-value pair can be any expression, which evaluates\n+        // to a value of a type that belongs to the constraint type of the map.\n         city: \"Colombo 03\",\n-        country: \"Sri Lanka\"\n+        // A field can also be just a variable reference, which would result\n+        // in the variable name being the field name and the variable itself\n+        // being the value expression.\n+        // This is equivalent to saying `country: country`.\n+        country,\n+        // The key in a key-value pair can also be a computed key.\n+        // A computed key is defined by specifying the key expression within\n+        // brackets. The key expression must belong to type `string`.\n+        // For a computed key, the key expression is evaluated at runtime and\n+        // the resulting value is used as the key.\n+        [codeLiteral]: \"00300\"\n     };\n     io:println(addrMap);\n \n-    // Retrieves a value using member access.\n-    string country = <string>addrMap[\"country\"];\n-    io:println(country);\n+    // Retrieve a value using member access.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "188126e2d903a577a58bea2a38905d05df5fa358"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0OTg5MTA3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21776#pullrequestreview-374989107", "createdAt": "2020-03-16T08:14:03Z", "commit": {"oid": "188126e2d903a577a58bea2a38905d05df5fa358"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODoxNDowM1rOF2pWJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODoxNDowM1rOF2pWJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg0NDgzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Thus, the type for `.get()` on a map is the map's constraint type.\n          \n          \n            \n                // Thus, the return type of `get()` when invoked on a map is the map's constraint type.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21776#discussion_r392844836", "createdAt": "2020-03-16T08:14:03Z", "author": {"login": "pubudu91"}, "path": "examples/maps/maps.bal", "diffHunk": "@@ -1,43 +1,73 @@\n import ballerina/io;\n \n public function main() {\n-    // Declares a `map` constrained by the type `string`.\n+    // Declare a `map` constrained by the type `string`.\n     map<string> m;\n \n-    // You can also declare and initialize a `map` with a map literal.\n+    string city = \"Colombo\";\n+    string country = \"Sri Lanka\";\n+    string codeLiteral = \"code\";\n+\n+    // You can also declare and initialize a `map` with a mapping constructor\n+    // expression.\n     map<string> addrMap = {\n+        // A field can be specified as a key-value pair.\n         line1: \"No. 20\",\n         line2: \"Palm Grove\",\n+        // The value in a key-value pair can be any expression, which evaluates\n+        // to a value of a type that belongs to the constraint type of the map.\n         city: \"Colombo 03\",\n-        country: \"Sri Lanka\"\n+        // A field can also be just a variable reference, which would result\n+        // in the variable name being the field name and the variable itself\n+        // being the value expression.\n+        // This is equivalent to saying `country: country`.\n+        country,\n+        // The key in a key-value pair can also be a computed key.\n+        // A computed key is defined by specifying the key expression within\n+        // brackets. The key expression must belong to type `string`.\n+        // For a computed key, the key expression is evaluated at runtime and\n+        // the resulting value is used as the key.\n+        [codeLiteral]: \"00300\"\n     };\n     io:println(addrMap);\n \n-    // Retrieves a value using member access.\n-    string country = <string>addrMap[\"country\"];\n-    io:println(country);\n+    // Retrieve a value using member access.\n+    // Member access returns the value if a field exists in the map with the\n+    // specified key. Else, it returns `()` if a field does not exist with the specified key.\n+    // Thus, the type of a member access expression for a map is the union of\n+    // the constraint type and the nil type.\n+    string? countryValue = addrMap[\"country\"];\n+\n+    if (countryValue is string) {\n+        io:println(countryValue);\n+    } else {\n+        io:println(\"key 'country' not found\");\n+    }\n \n-    // Retrieves a value using the `.get()` method.\n-    // Panics if the map does not have a member with the specified key.\n-    string line2 = addrMap.get(\"line2\");\n-    io:println(line2);\n+    // Retrieve a value using the `.get()` method.\n+    // If the map has a field with the specified key, `.get()` returns the value.\n+    // Else, it panics if the map does not have a field with the specified key.\n+    // Thus, the type for `.get()` on a map is the map's constraint type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "188126e2d903a577a58bea2a38905d05df5fa358"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0OTkxNTk0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21776#pullrequestreview-374991594", "createdAt": "2020-03-16T08:18:41Z", "commit": {"oid": "188126e2d903a577a58bea2a38905d05df5fa358"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODoxODo0MVrOF2pdrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODoxODo0MVrOF2pdrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg0Njc2Nw==", "bodyText": "Lang lib functions are referred to as functions right? Not methods? Also, when referring to functions we haven't used periods in other places IIRC", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21776#discussion_r392846767", "createdAt": "2020-03-16T08:18:41Z", "author": {"login": "pubudu91"}, "path": "examples/maps/maps.bal", "diffHunk": "@@ -1,43 +1,73 @@\n import ballerina/io;\n \n public function main() {\n-    // Declares a `map` constrained by the type `string`.\n+    // Declare a `map` constrained by the type `string`.\n     map<string> m;\n \n-    // You can also declare and initialize a `map` with a map literal.\n+    string city = \"Colombo\";\n+    string country = \"Sri Lanka\";\n+    string codeLiteral = \"code\";\n+\n+    // You can also declare and initialize a `map` with a mapping constructor\n+    // expression.\n     map<string> addrMap = {\n+        // A field can be specified as a key-value pair.\n         line1: \"No. 20\",\n         line2: \"Palm Grove\",\n+        // The value in a key-value pair can be any expression, which evaluates\n+        // to a value of a type that belongs to the constraint type of the map.\n         city: \"Colombo 03\",\n-        country: \"Sri Lanka\"\n+        // A field can also be just a variable reference, which would result\n+        // in the variable name being the field name and the variable itself\n+        // being the value expression.\n+        // This is equivalent to saying `country: country`.\n+        country,\n+        // The key in a key-value pair can also be a computed key.\n+        // A computed key is defined by specifying the key expression within\n+        // brackets. The key expression must belong to type `string`.\n+        // For a computed key, the key expression is evaluated at runtime and\n+        // the resulting value is used as the key.\n+        [codeLiteral]: \"00300\"\n     };\n     io:println(addrMap);\n \n-    // Retrieves a value using member access.\n-    string country = <string>addrMap[\"country\"];\n-    io:println(country);\n+    // Retrieve a value using member access.\n+    // Member access returns the value if a field exists in the map with the\n+    // specified key. Else, it returns `()` if a field does not exist with the specified key.\n+    // Thus, the type of a member access expression for a map is the union of\n+    // the constraint type and the nil type.\n+    string? countryValue = addrMap[\"country\"];\n+\n+    if (countryValue is string) {\n+        io:println(countryValue);\n+    } else {\n+        io:println(\"key 'country' not found\");\n+    }\n \n-    // Retrieves a value using the `.get()` method.\n-    // Panics if the map does not have a member with the specified key.\n-    string line2 = addrMap.get(\"line2\");\n-    io:println(line2);\n+    // Retrieve a value using the `.get()` method.\n+    // If the map has a field with the specified key, `.get()` returns the value.\n+    // Else, it panics if the map does not have a field with the specified key.\n+    // Thus, the type for `.get()` on a map is the map's constraint type.\n+    string line2Value = addrMap.get(\"line2\");\n+    io:println(line2Value);\n \n-    // The `.hasKey()` function checks if a map contains a specified key.\n+    // The `.hasKey()` function checks if a map contains the specified key.\n     boolean hasPostalCode = addrMap.hasKey(\"postalCode\");\n     io:println(hasPostalCode);\n \n-    // Adds or updates the value of a key.\n+    // Member access lvalue expressions can be used to add fields to a map\n+    // or update an already-existing field in the map.\n     addrMap[\"postalCode\"] = \"00300\";\n     io:println(addrMap);\n \n-    // The `keys()` method returns the keys of the map as an array.\n+    // The `.keys()` method returns the keys of the map as an array.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "188126e2d903a577a58bea2a38905d05df5fa358"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0OTk1NjA1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21776#pullrequestreview-374995605", "createdAt": "2020-03-16T08:25:47Z", "commit": {"oid": "188126e2d903a577a58bea2a38905d05df5fa358"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODoyNTo0N1rOF2pqoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODoyNTo0N1rOF2pqoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1MDA4MA==", "bodyText": "\"will return the key-value pairs as an array of tuples\"", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21776#discussion_r392850080", "createdAt": "2020-03-16T08:25:47Z", "author": {"login": "pubudu91"}, "path": "examples/maps/maps.bal", "diffHunk": "@@ -46,8 +76,9 @@ public function main() {\n     });\n \n     map<int> marks = {sam: 50, jon: 60};\n+\n     // Calling the `.entries()` method on a map will return the key (`string`)\n-    // and the value as a tuple variable.\n+    // and the value pairs as tuples.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "188126e2d903a577a58bea2a38905d05df5fa358"}, "originalPosition": 97}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7b7ac5ad94b30f756a452e4d7d4e51db62d6bdc", "author": {"user": {"login": "MaryamZi", "name": "Maryam Ziyad"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d7b7ac5ad94b30f756a452e4d7d4e51db62d6bdc", "committedDate": "2020-03-16T09:40:41Z", "message": "Address review suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MjI4ODYw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21776#pullrequestreview-375228860", "createdAt": "2020-03-16T13:49:49Z", "commit": {"oid": "d7b7ac5ad94b30f756a452e4d7d4e51db62d6bdc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3944, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}