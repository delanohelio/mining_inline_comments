{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzNDUwNTIz", "number": 21476, "reviewThreads": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMDoxMDozNlrODk-8ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMjo0Mzo0OVrODm6-ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTA2NjU0OnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/types.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMDoxMDozNlrOFxnKtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMDoxMDozNlrOFxnKtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU2NjI2Mw==", "bodyText": "Why this is a property in ClientConfiguration level? Can't we make it a optional parameter in update action only?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r387566263", "createdAt": "2020-03-04T10:10:36Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/types.bal", "diffHunk": "@@ -25,12 +25,15 @@ import ballerinax/java;\n # + poolOptions - Properties for the connection pool configuration. Refer `PoolOptions` for more details\n # + dbOptions - A map of DB specific properties. These properties will have an effect only if the dataSourceClassName is\n #               provided in poolOptions\n+# + getGeneratedKeys - Allow to retrieves auto-generated keys after a statement has been executed if value is `true`.\n+#                      It will return auto-generated keys only if supported by JDBC\n public type ClientConfiguration record {|\n     string url = \"\";\n     string username = \"\";\n     string password = \"\";\n     PoolOptions poolOptions?;\n     map<anydata> dbOptions = {};\n+    boolean getGeneratedKeys = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dded750f7cbd57c06da9ce4a6e6ab95151bba783"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTA5MTkwOnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDoyNjowOFrOFyOCOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDoyNjowOFrOFyOCOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwMzA2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + getGeneratedKeys - Allow to retrieves auto-generated keys after a statement has been executed if value is\n          \n          \n            \n                # + getGeneratedKeys - Allow to retrieves auto-generated keys after a statement has been executed if the value is", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388203064", "createdAt": "2020-03-05T10:26:08Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -59,14 +59,16 @@ public type Client client object {\n     #\n     # + sqlQuery - SQL statement to execute\n     # + parameters - The parameters to be passed to the update query\n+    # + getGeneratedKeys - Allow to retrieves auto-generated keys after a statement has been executed if value is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a51708cc7a8bfd913f183f7850b8093e985220a7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTA5NjU3OnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDoyNzoyNlrOFyOFHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDoyNzoyNlrOFyOFHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwMzgwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #                      `true`.It will return auto-generated keys only if supported by JDBC\n          \n          \n            \n                #                      `true`. If it is not supported by the used JDBC driver, still it will return `nil`.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388203805", "createdAt": "2020-03-05T10:27:26Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -59,14 +59,16 @@ public type Client client object {\n     #\n     # + sqlQuery - SQL statement to execute\n     # + parameters - The parameters to be passed to the update query\n+    # + getGeneratedKeys - Allow to retrieves auto-generated keys after a statement has been executed if value is\n+    #                      `true`.It will return auto-generated keys only if supported by JDBC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a51708cc7a8bfd913f183f7850b8093e985220a7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTA5OTczOnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDoyODoxN1rOFyOHDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDoyODoxN1rOFyOHDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwNDMwMw==", "bodyText": "please change similar to above doc comment suggestion", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388204303", "createdAt": "2020-03-05T10:28:17Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -78,18 +80,21 @@ public type Client client object {\n     #           may or may not continue to process the remaining commands in the batch. This property can be\n     #           used to override this behavior. When it is set to true, if there is a failure in a few commands and\n     #           the JDBC driver continues with the remaining commands, the successfully executed commands in the batch\n-    #           also will get rolled back.\n+    #           also will get rolled back\n+    # + getGeneratedKeys - Allow to retrieves auto-generated keys after a statement has been executed if value is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a51708cc7a8bfd913f183f7850b8093e985220a7"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTEwOTA1OnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDozMDo0OVrOFyOMlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDozMDo0OVrOFyOMlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwNTcxNw==", "bodyText": "It seems the parameters are not consistent in this remote function now. The rollbackAllInFailure is a boolean while the next similar parameter getGeneratedKeys is boolean?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388205717", "createdAt": "2020-03-05T10:30:49Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -78,18 +80,21 @@ public type Client client object {\n     #           may or may not continue to process the remaining commands in the batch. This property can be\n     #           used to override this behavior. When it is set to true, if there is a failure in a few commands and\n     #           the JDBC driver continues with the remaining commands, the successfully executed commands in the batch\n-    #           also will get rolled back.\n+    #           also will get rolled back\n+    # + getGeneratedKeys - Allow to retrieves auto-generated keys after a statement has been executed if value is\n+    #                      `true`.It will return auto-generated keys only if supported by JDBC\n     # + return - A `BatchUpdateResult` with the updated row count and returned error if any. If all the commands\n     #            in the batch have executed successfully, the error will be `nil`. If one or more commands have failed,\n     #            the `returnedError` field will give the corresponding `Error` along with the int[] which\n-    #            contains updated row count or the status returned from each command in the batch.\n+    #            contains updated row count or the status returned from each command in the batch\n     public remote function batchUpdate(@untainted string sqlQuery, boolean rollbackAllInFailure,\n-                                       Param?[]... parameters)\n+                                       boolean? getGeneratedKeys = (), Param?[]... parameters)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a51708cc7a8bfd913f183f7850b8093e985220a7"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTE1MzMzOnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDo0Mjo1N1rOFyOm0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDo0Mjo1N1rOFyOm0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxMjQzNQ==", "bodyText": "IMO, instead of boolean? we should use boolean with default value. So for simple update statements which doesn't have parameters, we can specify the sqlQuery only", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388212435", "createdAt": "2020-03-05T10:42:57Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -59,14 +59,16 @@ public type Client client object {\n     #\n     # + sqlQuery - SQL statement to execute\n     # + parameters - The parameters to be passed to the update query\n+    # + getGeneratedKeys - Allow to retrieves auto-generated keys after a statement has been executed if value is\n+    #                      `true`.It will return auto-generated keys only if supported by JDBC\n     # + return - `UpdateResult` with the updated row count and key column values,\n     #             else `Error` will be returned if there is an error\n-    public remote function update(@untainted string sqlQuery, Param... parameters)\n-                                  returns UpdateResult|Error {\n+    public remote function update(@untainted string sqlQuery, boolean? getGeneratedKeys = (),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a51708cc7a8bfd913f183f7850b8093e985220a7"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTE3OTA5OnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDo1MDoyMVrOFyO2iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMzoxMToxNlrOFyr8MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxNjQ1Ng==", "bodyText": "Shall we swap parameters and getGeneratedKeys? Bascially have the same order in the remote function it self.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388216456", "createdAt": "2020-03-05T10:50:21Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -59,14 +59,16 @@ public type Client client object {\n     #\n     # + sqlQuery - SQL statement to execute\n     # + parameters - The parameters to be passed to the update query\n+    # + getGeneratedKeys - Allow to retrieves auto-generated keys after a statement has been executed if value is\n+    #                      `true`.It will return auto-generated keys only if supported by JDBC\n     # + return - `UpdateResult` with the updated row count and key column values,\n     #             else `Error` will be returned if there is an error\n-    public remote function update(@untainted string sqlQuery, Param... parameters)\n-                                  returns UpdateResult|Error {\n+    public remote function update(@untainted string sqlQuery, boolean? getGeneratedKeys = (),\n+                                  Param... parameters) returns UpdateResult|Error {\n         if (!self.clientActive) {\n             return self.handleStoppedClientInvocation();\n         }\n-        return nativeUpdate(self, java:fromString(sqlQuery), parameters);\n+        return nativeUpdate(self, java:fromString(sqlQuery), parameters, getGeneratedKeys);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a51708cc7a8bfd913f183f7850b8093e985220a7"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxODYyNw==", "bodyText": "We  can't swap as required parameter not allowed after default-able parameters.\nERROR: ballerinax/java.jdbc:0.0.0::client.bal:132:24:: required parameter not allowed after defaultable parameters", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388418627", "createdAt": "2020-03-05T16:42:20Z", "author": {"login": "kalaiyarasiganeshalingam"}, "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -59,14 +59,16 @@ public type Client client object {\n     #\n     # + sqlQuery - SQL statement to execute\n     # + parameters - The parameters to be passed to the update query\n+    # + getGeneratedKeys - Allow to retrieves auto-generated keys after a statement has been executed if value is\n+    #                      `true`.It will return auto-generated keys only if supported by JDBC\n     # + return - `UpdateResult` with the updated row count and key column values,\n     #             else `Error` will be returned if there is an error\n-    public remote function update(@untainted string sqlQuery, Param... parameters)\n-                                  returns UpdateResult|Error {\n+    public remote function update(@untainted string sqlQuery, boolean? getGeneratedKeys = (),\n+                                  Param... parameters) returns UpdateResult|Error {\n         if (!self.clientActive) {\n             return self.handleStoppedClientInvocation();\n         }\n-        return nativeUpdate(self, java:fromString(sqlQuery), parameters);\n+        return nativeUpdate(self, java:fromString(sqlQuery), parameters, getGeneratedKeys);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxNjQ1Ng=="}, "originalCommit": {"oid": "a51708cc7a8bfd913f183f7850b8093e985220a7"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY5MzA0MQ==", "bodyText": "We don't need to make the parameter defaultable in internal function. because we always have a value for that parameter.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388693041", "createdAt": "2020-03-06T03:11:16Z", "author": {"login": "daneshk"}, "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -59,14 +59,16 @@ public type Client client object {\n     #\n     # + sqlQuery - SQL statement to execute\n     # + parameters - The parameters to be passed to the update query\n+    # + getGeneratedKeys - Allow to retrieves auto-generated keys after a statement has been executed if value is\n+    #                      `true`.It will return auto-generated keys only if supported by JDBC\n     # + return - `UpdateResult` with the updated row count and key column values,\n     #             else `Error` will be returned if there is an error\n-    public remote function update(@untainted string sqlQuery, Param... parameters)\n-                                  returns UpdateResult|Error {\n+    public remote function update(@untainted string sqlQuery, boolean? getGeneratedKeys = (),\n+                                  Param... parameters) returns UpdateResult|Error {\n         if (!self.clientActive) {\n             return self.handleStoppedClientInvocation();\n         }\n-        return nativeUpdate(self, java:fromString(sqlQuery), parameters);\n+        return nativeUpdate(self, java:fromString(sqlQuery), parameters, getGeneratedKeys);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxNjQ1Ng=="}, "originalCommit": {"oid": "a51708cc7a8bfd913f183f7850b8093e985220a7"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTE4NjAwOnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/types.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDo1MjoxMFrOFyO6nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwODo0NDozMVrOFyw-gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxNzUwMQ==", "bodyText": "Why only this map is mar as nillable? Why we are not being consistent with UpdateResult record?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388217501", "createdAt": "2020-03-05T10:52:10Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/types.bal", "diffHunk": "@@ -232,7 +232,7 @@ public type UpdateResult record {|\n # + returnedError - The `Error` returned from the remote function in case of a failure\n public type BatchUpdateResult record {|\n     int[] updatedRowCount;\n-    map<anydata[]> generatedKeys;\n+    map<anydata[]>? generatedKeys;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a51708cc7a8bfd913f183f7850b8093e985220a7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3NTU1NQ==", "bodyText": "Fixed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388775555", "createdAt": "2020-03-06T08:44:31Z", "author": {"login": "kalaiyarasiganeshalingam"}, "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/types.bal", "diffHunk": "@@ -232,7 +232,7 @@ public type UpdateResult record {|\n # + returnedError - The `Error` returned from the remote function in case of a failure\n public type BatchUpdateResult record {|\n     int[] updatedRowCount;\n-    map<anydata[]> generatedKeys;\n+    map<anydata[]>? generatedKeys;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxNzUwMQ=="}, "originalCommit": {"oid": "a51708cc7a8bfd913f183f7850b8093e985220a7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTIwNDA5OnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/main/java/org/ballerinax/jdbc/methods/ExternFunctions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDo1Nzo1OFrOFyPGBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDo1Nzo1OFrOFyPGBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyMDQyMg==", "bodyText": "What is the reason for appending . at the end instead of the beginning of the line?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388220422", "createdAt": "2020-03-05T10:57:58Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc/src/main/java/org/ballerinax/jdbc/methods/ExternFunctions.java", "diffHunk": "@@ -72,9 +74,9 @@ public static void createClient(ObjectValue client, MapValue<String, Object> con\n         String dbType = url.split(\":\")[1].toUpperCase(Locale.getDefault());\n \n         SQLDatasource.SQLDatasourceParamsBuilder builder = new SQLDatasource.SQLDatasourceParamsBuilder(dbType);\n-        SQLDatasource.SQLDatasourceParams sqlDatasourceParams = builder.withPoolOptions(poolOptionsWrapper)\n-                .withJdbcUrl(url).withUsername(username).withPassword(password).withDbOptionsMap(dbOptions)\n-                .withIsGlobalDatasource(userProvidedPoolOptionsNotPresent).build();\n+        SQLDatasource.SQLDatasourceParams sqlDatasourceParams = builder.withPoolOptions(poolOptionsWrapper).\n+                withJdbcUrl(url).withUsername(username).withPassword(password).withDbOptionsMap(dbOptions).\n+                withIsGlobalDatasource(userProvidedPoolOptionsNotPresent).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a51708cc7a8bfd913f183f7850b8093e985220a7"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODIyNjI2OnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMzowNDoyNlrOFyr2VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMzowNDoyNlrOFyr2VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY5MTU0MA==", "bodyText": "IMO, a better name for this variable is returnGeneratedKeys", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388691540", "createdAt": "2020-03-06T03:04:26Z", "author": {"login": "daneshk"}, "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -59,14 +59,16 @@ public type Client client object {\n     #\n     # + sqlQuery - SQL statement to execute\n     # + parameters - The parameters to be passed to the update query\n+    # + getGeneratedKeys - Allow to retrieves auto-generated keys after a statement has been executed if the value is\n+    #                      `true`. If it is not supported by the used JDBC driver, still it will return `nil`.\n     # + return - `UpdateResult` with the updated row count and key column values,\n     #             else `Error` will be returned if there is an error\n-    public remote function update(@untainted string sqlQuery, Param... parameters)\n-                                  returns UpdateResult|Error {\n+    public remote function update(@untainted string sqlQuery, boolean getGeneratedKeys = false, Param... parameters)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ba0164d1576381c0b6953f54b8565240cba0a63"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODIzNzU5OnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMzoxMjozNlrOFyr9Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMzoxMjozNlrOFyr9Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY5MzI4Nw==", "bodyText": "Same as above. I think a better name for this variable is returnGeneratedKeys", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388693287", "createdAt": "2020-03-06T03:12:36Z", "author": {"login": "daneshk"}, "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -78,18 +80,21 @@ public type Client client object {\n     #           may or may not continue to process the remaining commands in the batch. This property can be\n     #           used to override this behavior. When it is set to true, if there is a failure in a few commands and\n     #           the JDBC driver continues with the remaining commands, the successfully executed commands in the batch\n-    #           also will get rolled back.\n+    #           also will get rolled back\n+    # + getGeneratedKeys - Allow to retrieves auto-generated keys after a statement has been executed if the value is\n+    #                      `true`. If it is not supported by the used JDBC driver, still it will return `nil`.\n     # + return - A `BatchUpdateResult` with the updated row count and returned error if any. If all the commands\n     #            in the batch have executed successfully, the error will be `nil`. If one or more commands have failed,\n     #            the `returnedError` field will give the corresponding `Error` along with the int[] which\n-    #            contains updated row count or the status returned from each command in the batch.\n-    public remote function batchUpdate(@untainted string sqlQuery, boolean rollbackAllInFailure,\n-                                       Param?[]... parameters)\n+    #            contains updated row count or the status returned from each command in the batch\n+    public remote function batchUpdate(@untainted string sqlQuery, boolean rollbackAllInFailure = false,\n+                                       boolean getGeneratedKeys = false, Param?[]... parameters)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ba0164d1576381c0b6953f54b8565240cba0a63"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODI1MjY4OnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMzoyMzo0MlrOFysGGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMzoyMzo0MlrOFysGGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY5NTU3OA==", "bodyText": "# + getGeneratedKeys - Indicate that generated keys should be made available for retrieval. If the value is set to true, auto-generated keys are made available to retrieve when the statement is executed. If the underline JDBC driver does not support it, still it will return `()` value.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388695578", "createdAt": "2020-03-06T03:23:42Z", "author": {"login": "daneshk"}, "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -78,18 +80,21 @@ public type Client client object {\n     #           may or may not continue to process the remaining commands in the batch. This property can be\n     #           used to override this behavior. When it is set to true, if there is a failure in a few commands and\n     #           the JDBC driver continues with the remaining commands, the successfully executed commands in the batch\n-    #           also will get rolled back.\n+    #           also will get rolled back\n+    # + getGeneratedKeys - Allow to retrieves auto-generated keys after a statement has been executed if the value is\n+    #                      `true`. If it is not supported by the used JDBC driver, still it will return `nil`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ba0164d1576381c0b6953f54b8565240cba0a63"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODI2NDM0OnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/main/java/org/ballerinax/jdbc/datasource/SQLDatasource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMzozMjoyM1rOFysM-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMzozMjoyM1rOFysM-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY5NzMzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private boolean supportsGetGeneratedKeys = false;\n          \n          \n            \n                private boolean supportGeneratedKeys = false;", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388697337", "createdAt": "2020-03-06T03:32:23Z", "author": {"login": "daneshk"}, "path": "stdlib/jdbc/src/main/java/org/ballerinax/jdbc/datasource/SQLDatasource.java", "diffHunk": "@@ -50,6 +51,7 @@\n     private AtomicInteger clientCounter = new AtomicInteger(0);\n     private Lock mutex = new ReentrantLock();\n     private boolean poolShutdown = false;\n+    private boolean supportsGetGeneratedKeys = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ba0164d1576381c0b6953f54b8565240cba0a63"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODM1NTIyOnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/main/java/org/ballerinax/jdbc/statement/UpdateStatement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDo0NjowNlrOFytC9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDo0NjowNlrOFytC9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMTE1OA==", "bodyText": "Shall we change this to something like below and use that boolean for other two places? That will avoid taking && twice with the same booleans.\nboolean retrieveGeneratedKeys = isKeyRetrievalSupportedStatement() && getGeneratedKey", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388711158", "createdAt": "2020-03-06T04:46:06Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc/src/main/java/org/ballerinax/jdbc/statement/UpdateStatement.java", "diffHunk": "@@ -74,24 +78,26 @@ public Object execute() {\n             ArrayValue generatedParams = constructParameters(parameters);\n             conn = getDatabaseConnection(strand, client, datasource);\n             String processedQuery = createProcessedQueryString(query, generatedParams);\n-            stmt = conn.prepareStatement(processedQuery, Statement.RETURN_GENERATED_KEYS);\n+\n+            boolean keyRetrievalSupportedStatement = isKeyRetrievalSupportedStatement();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ba0164d1576381c0b6953f54b8565240cba0a63"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODM1OTU5OnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/main/java/org/ballerinax/jdbc/statement/UpdateStatement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDo0OTozM1rOFytFhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDo0OTozM1rOFytFhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMTgxMg==", "bodyText": "What is the purpose of this method?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388711812", "createdAt": "2020-03-06T04:49:33Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc/src/main/java/org/ballerinax/jdbc/statement/UpdateStatement.java", "diffHunk": "@@ -133,7 +134,25 @@ private boolean isDdlStatement() {\n         return populatedUpdateResultRecord;\n     }\n \n-    private enum DdlKeyword {\n-        CREATE, ALTER, DROP, TRUNCATE, COMMENT, RENAME\n+    private enum GenKeyStmt {\n+        INSERT, DELETE, UPDATE, MERGE\n+    }\n+\n+    /**\n+     * Check if the statement is one of INSERT, DELETE, UPDATE or MERGE.\n+     */\n+    private boolean isKeyRetrievalSupportedStatement() {\n+        if (datasource.isKeyRetrievalSupported()) {\n+            return Arrays.stream(GenKeyStmt.values()).anyMatch(stmt -> this.query.trim().toUpperCase(Locale.ENGLISH).\n+                    startsWith(stmt.name()));\n+        } else {\n+            ErrorHandlerUtils.printError(\"ERROR: Unable to get keys as JDBC is not supported to retrieve \" +\n+                    \"auto-generated keys from \" + datasource.getDatabaseProductName());\n+            return false;\n+        }\n+    }\n+\n+    public static boolean getGeneratedKey(Object getGeneratedKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ba0164d1576381c0b6953f54b8565240cba0a63"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODM2MzE1OnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/main/java/org/ballerinax/jdbc/statement/BatchUpdateStatement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDo1MjozMlrOFytHnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDo1MjozMlrOFytHnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMjM1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        boolean keyRetrievalSupportedStatement = datasource.isKeyRetrievalSupported();\n          \n          \n            \n                        boolean keyRetrievalSupported = datasource.isKeyRetrievalSupported();", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388712351", "createdAt": "2020-03-06T04:52:32Z", "author": {"login": "daneshk"}, "path": "stdlib/jdbc/src/main/java/org/ballerinax/jdbc/statement/BatchUpdateStatement.java", "diffHunk": "@@ -83,8 +87,8 @@ public BatchUpdateStatement(ObjectValue client, SQLDatasource datasource, String\n         String errorMessagePrefix = \"failed to execute batch update\";\n         try {\n             conn = getDatabaseConnection(strand, client, datasource);\n-            boolean generatedKeyReturningSupported = isGeneratedKeyReturningSupported();\n-            if (generatedKeyReturningSupported) {\n+            boolean keyRetrievalSupportedStatement = datasource.isKeyRetrievalSupported();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ba0164d1576381c0b6953f54b8565240cba0a63"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODM2Mzg4OnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/main/java/org/ballerinax/jdbc/datasource/SQLDatasource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDo1MzoyMlrOFytIKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDo1MzoyMlrOFytIKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMjQ4OA==", "bodyText": "Normal practice is boolean returned function name = is + boolean variable name. Can we rename the method name or variable name to follow the same practice?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388712488", "createdAt": "2020-03-06T04:53:22Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc/src/main/java/org/ballerinax/jdbc/datasource/SQLDatasource.java", "diffHunk": "@@ -119,6 +123,10 @@ public boolean isPoolShutdown() {\n         return poolShutdown;\n     }\n \n+    public boolean isKeyRetrievalSupported() {\n+        return this.supportsGetGeneratedKeys;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ba0164d1576381c0b6953f54b8565240cba0a63"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODM3MDI3OnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/main/java/org/ballerinax/jdbc/Constants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNDo1ODozM1rOFytMBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwODoxNToyNVrOFywQ2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMzQ3Ng==", "bodyText": "Why do we need to define this constant like this? This is not a jdbc related constant. @daneshk / @wggihan Are we following similar pattern in other modules?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388713476", "createdAt": "2020-03-06T04:58:33Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc/src/main/java/org/ballerinax/jdbc/Constants.java", "diffHunk": "@@ -165,6 +165,9 @@\n         public static final String MSSQL_SERVER = \"microsoft sql server\";\n     }\n \n+    // Warning suppression\n+    public static final String UNCHECKED = \"unchecked\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ba0164d1576381c0b6953f54b8565240cba0a63"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc2Mzg2Ng==", "bodyText": "AFAIK, directly using annotation without using this kind of constant in other modules.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388763866", "createdAt": "2020-03-06T08:15:25Z", "author": {"login": "wggihan"}, "path": "stdlib/jdbc/src/main/java/org/ballerinax/jdbc/Constants.java", "diffHunk": "@@ -165,6 +165,9 @@\n         public static final String MSSQL_SERVER = \"microsoft sql server\";\n     }\n \n+    // Warning suppression\n+    public static final String UNCHECKED = \"unchecked\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMzQ3Ng=="}, "originalCommit": {"oid": "3ba0164d1576381c0b6953f54b8565240cba0a63"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODM3NDEyOnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/main/java/org/ballerinax/jdbc/datasource/SQLDatasource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNTowMToyM1rOFytOTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNTowMToyM1rOFytOTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxNDA2MA==", "bodyText": "We cannot rely on this API to check whether DB driver supports get generated keys. Because there is no guarantee that all DB driver implements this function. IMO we should not use this for our internal logic", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388714060", "createdAt": "2020-03-06T05:01:23Z", "author": {"login": "daneshk"}, "path": "stdlib/jdbc/src/main/java/org/ballerinax/jdbc/datasource/SQLDatasource.java", "diffHunk": "@@ -61,7 +63,9 @@ public SQLDatasource init(SQLDatasourceParams sqlDatasourceParams) {\n             throw ErrorGenerator.getSQLDatabaseError(e);\n         }\n         try (Connection con = getSQLConnection()) {\n-            databaseProductName = con.getMetaData().getDatabaseProductName().toLowerCase(Locale.ENGLISH);\n+            DatabaseMetaData metaData = con.getMetaData();\n+            databaseProductName = metaData.getDatabaseProductName().toLowerCase(Locale.ENGLISH);\n+            this.supportsGetGeneratedKeys = metaData.supportsGetGeneratedKeys();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ba0164d1576381c0b6953f54b8565240cba0a63"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODM3NTc0OnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/test/java/org/ballerinax/jdbc/actions/UpdateTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNTowMjo0NFrOFytPTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNTowMjo0NFrOFytPTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxNDMxNg==", "bodyText": "Instead of this comment, shall we use descriptive name for the function itself. This is the pattern followed for other test cases as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388714316", "createdAt": "2020-03-06T05:02:44Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc/src/test/java/org/ballerinax/jdbc/actions/UpdateTest.java", "diffHunk": "@@ -229,12 +229,24 @@ public void testInsertBoolDataAsIntsAndReturnInts() {\n         Assert.assertEquals(((BInteger) returns[2]).intValue(), 1);\n     }\n \n+    /**\n+     * Test for getting auto-generated key when getGeneratedKey is true and the table doesn't have auto generated key.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ba0164d1576381c0b6953f54b8565240cba0a63"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODM4NzM4OnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/main/java/org/ballerinax/jdbc/statement/BatchUpdateStatement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNToxMTozNlrOFytWQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNToxMTozNlrOFytWQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxNjA5OA==", "bodyText": "Shall we remove checking keyRetrievalSupportedStatement and only rely on value set by the user?\nand pass all the errors we encounter while performing the operation to the user.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388716098", "createdAt": "2020-03-06T05:11:36Z", "author": {"login": "daneshk"}, "path": "stdlib/jdbc/src/main/java/org/ballerinax/jdbc/statement/BatchUpdateStatement.java", "diffHunk": "@@ -83,8 +87,8 @@ public BatchUpdateStatement(ObjectValue client, SQLDatasource datasource, String\n         String errorMessagePrefix = \"failed to execute batch update\";\n         try {\n             conn = getDatabaseConnection(strand, client, datasource);\n-            boolean generatedKeyReturningSupported = isGeneratedKeyReturningSupported();\n-            if (generatedKeyReturningSupported) {\n+            boolean keyRetrievalSupportedStatement = datasource.isKeyRetrievalSupported();\n+            if (getGeneratedKey && keyRetrievalSupportedStatement) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ba0164d1576381c0b6953f54b8565240cba0a63"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTE1NzU1OnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMDo0OTo0MVrOFy0qXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMTowODoyNVrOFy1K5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgzNTkzNA==", "bodyText": "Shouldn't it be an error if the underline JDBC driver does not support it?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388835934", "createdAt": "2020-03-06T10:49:41Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -59,14 +59,18 @@ public type Client client object {\n     #\n     # + sqlQuery - SQL statement to execute\n     # + parameters - The parameters to be passed to the update query\n+    # + returnGeneratedKeys - Indicate that generated keys should be made available for retrieval. If the value is\n+    #                         set to true, auto-generated keys are made available to retrieve when the statement\n+    #                         is executed. If the underline JDBC driver does not support it, still it will return `()`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ecf0cabaa906d97448341042d4ff83688ad82e4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg0MDk4OQ==", "bodyText": "+1. we need to send an error if underline JDBC not supported", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388840989", "createdAt": "2020-03-06T11:00:48Z", "author": {"login": "daneshk"}, "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -59,14 +59,18 @@ public type Client client object {\n     #\n     # + sqlQuery - SQL statement to execute\n     # + parameters - The parameters to be passed to the update query\n+    # + returnGeneratedKeys - Indicate that generated keys should be made available for retrieval. If the value is\n+    #                         set to true, auto-generated keys are made available to retrieve when the statement\n+    #                         is executed. If the underline JDBC driver does not support it, still it will return `()`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgzNTkzNA=="}, "originalCommit": {"oid": "5ecf0cabaa906d97448341042d4ff83688ad82e4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg0NDI2Mw==", "bodyText": "Yes, It returns an error  but I forgot to update here.\nI have fixed it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388844263", "createdAt": "2020-03-06T11:08:25Z", "author": {"login": "kalaiyarasiganeshalingam"}, "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -59,14 +59,18 @@ public type Client client object {\n     #\n     # + sqlQuery - SQL statement to execute\n     # + parameters - The parameters to be passed to the update query\n+    # + returnGeneratedKeys - Indicate that generated keys should be made available for retrieval. If the value is\n+    #                         set to true, auto-generated keys are made available to retrieve when the statement\n+    #                         is executed. If the underline JDBC driver does not support it, still it will return `()`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgzNTkzNA=="}, "originalCommit": {"oid": "5ecf0cabaa906d97448341042d4ff83688ad82e4"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTE2MjIzOnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMDo1MToxOVrOFy0tWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMDo1MToxOVrOFy0tWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgzNjY5OA==", "bodyText": "Same as above?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388836698", "createdAt": "2020-03-06T10:51:19Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -78,18 +82,23 @@ public type Client client object {\n     #           may or may not continue to process the remaining commands in the batch. This property can be\n     #           used to override this behavior. When it is set to true, if there is a failure in a few commands and\n     #           the JDBC driver continues with the remaining commands, the successfully executed commands in the batch\n-    #           also will get rolled back.\n+    #           also will get rolled back\n+    # + returnGeneratedKeys - Indicate that generated keys should be made available for retrieval. If the value is\n+    #                         set to true, auto-generated keys are made available to retrieve when the statement\n+    #                         is executed. If the underline JDBC driver does not support it, still it will return `()`\n+    #                         value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ecf0cabaa906d97448341042d4ff83688ad82e4"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTM5MTM4OnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjoxOToxN1rOFy23Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjoxOToxN1rOFy23Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg3MjAxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #                         is executed. If the underline JDBC driver does not support it, still it will return\n          \n          \n            \n                #                         is executed. If the underline JDBC driver does not support it, it will return", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388872011", "createdAt": "2020-03-06T12:19:17Z", "author": {"login": "daneshk"}, "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -59,14 +59,18 @@ public type Client client object {\n     #\n     # + sqlQuery - SQL statement to execute\n     # + parameters - The parameters to be passed to the update query\n+    # + returnGeneratedKeys - Indicate that generated keys should be made available for retrieval. If the value is\n+    #                         set to true, auto-generated keys are made available to retrieve when the statement\n+    #                         is executed. If the underline JDBC driver does not support it, still it will return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d623a82ce636b043c49d8075c6ea01963e994a8f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTM5MzAzOnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjoyMDowNlrOFy24YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjoyMDowNlrOFy24YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg3MjI4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #                         is executed. If the underline JDBC driver does not support it, still it will return\n          \n          \n            \n                #                         is executed. If the underline JDBC driver does not support it, it will return", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388872289", "createdAt": "2020-03-06T12:20:06Z", "author": {"login": "daneshk"}, "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -78,18 +82,23 @@ public type Client client object {\n     #           may or may not continue to process the remaining commands in the batch. This property can be\n     #           used to override this behavior. When it is set to true, if there is a failure in a few commands and\n     #           the JDBC driver continues with the remaining commands, the successfully executed commands in the batch\n-    #           also will get rolled back.\n+    #           also will get rolled back\n+    # + returnGeneratedKeys - Indicate that generated keys should be made available for retrieval. If the value is\n+    #                         set to true, auto-generated keys are made available to retrieve when the statement\n+    #                         is executed. If the underline JDBC driver does not support it, still it will return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d623a82ce636b043c49d8075c6ea01963e994a8f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTQwNzAwOnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjoyNTo0OVrOFy3Avg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjoyNTo0OVrOFy3Avg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg3NDQzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #                         set to true, auto-generated keys are made available to retrieve when the statement\n          \n          \n            \n                #                         set to `true`, auto-generated keys are made available to retrieve when the statement", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388874430", "createdAt": "2020-03-06T12:25:49Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -59,14 +59,18 @@ public type Client client object {\n     #\n     # + sqlQuery - SQL statement to execute\n     # + parameters - The parameters to be passed to the update query\n+    # + returnGeneratedKeys - Indicate that generated keys should be made available for retrieval. If the value is\n+    #                         set to true, auto-generated keys are made available to retrieve when the statement", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d623a82ce636b043c49d8075c6ea01963e994a8f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTQwNzgzOnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjoyNjoxMFrOFy3BRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjoyNjoxMFrOFy3BRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg3NDU2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #                         an `Error`\n          \n          \n            \n                #                         an `Error`.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388874565", "createdAt": "2020-03-06T12:26:10Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -59,14 +59,18 @@ public type Client client object {\n     #\n     # + sqlQuery - SQL statement to execute\n     # + parameters - The parameters to be passed to the update query\n+    # + returnGeneratedKeys - Indicate that generated keys should be made available for retrieval. If the value is\n+    #                         set to true, auto-generated keys are made available to retrieve when the statement\n+    #                         is executed. If the underline JDBC driver does not support it, still it will return\n+    #                         an `Error`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d623a82ce636b043c49d8075c6ea01963e994a8f"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTQwODkyOnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjoyNjozM1rOFy3B5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjoyNjozM1rOFy3B5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg3NDcyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #                         set to true, auto-generated keys are made available to retrieve when the statement\n          \n          \n            \n                #                         set to `true`, auto-generated keys are made available to retrieve when the statement", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388874725", "createdAt": "2020-03-06T12:26:33Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -78,18 +82,23 @@ public type Client client object {\n     #           may or may not continue to process the remaining commands in the batch. This property can be\n     #           used to override this behavior. When it is set to true, if there is a failure in a few commands and\n     #           the JDBC driver continues with the remaining commands, the successfully executed commands in the batch\n-    #           also will get rolled back.\n+    #           also will get rolled back\n+    # + returnGeneratedKeys - Indicate that generated keys should be made available for retrieval. If the value is\n+    #                         set to true, auto-generated keys are made available to retrieve when the statement", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d623a82ce636b043c49d8075c6ea01963e994a8f"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTQwOTIzOnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjoyNjo0MlrOFy3CGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjoyNjo0MlrOFy3CGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg3NDc3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #                         an `Error`\n          \n          \n            \n                #                         an `Error`.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388874778", "createdAt": "2020-03-06T12:26:42Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -78,18 +82,23 @@ public type Client client object {\n     #           may or may not continue to process the remaining commands in the batch. This property can be\n     #           used to override this behavior. When it is set to true, if there is a failure in a few commands and\n     #           the JDBC driver continues with the remaining commands, the successfully executed commands in the batch\n-    #           also will get rolled back.\n+    #           also will get rolled back\n+    # + returnGeneratedKeys - Indicate that generated keys should be made available for retrieval. If the value is\n+    #                         set to true, auto-generated keys are made available to retrieve when the statement\n+    #                         is executed. If the underline JDBC driver does not support it, still it will return\n+    #                         an `Error`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d623a82ce636b043c49d8075c6ea01963e994a8f"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTQxMDY2OnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjoyNzowOFrOFy3C7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjoyNzozM1rOFy3DgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg3NDk5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #            contains updated row count or the status returned from each command in the batch\n          \n          \n            \n                #            contains updated row count or the status returned from each command in the batch.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388874991", "createdAt": "2020-03-06T12:27:08Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -78,18 +82,23 @@ public type Client client object {\n     #           may or may not continue to process the remaining commands in the batch. This property can be\n     #           used to override this behavior. When it is set to true, if there is a failure in a few commands and\n     #           the JDBC driver continues with the remaining commands, the successfully executed commands in the batch\n-    #           also will get rolled back.\n+    #           also will get rolled back\n+    # + returnGeneratedKeys - Indicate that generated keys should be made available for retrieval. If the value is\n+    #                         set to true, auto-generated keys are made available to retrieve when the statement\n+    #                         is executed. If the underline JDBC driver does not support it, still it will return\n+    #                         an `Error`\n     # + return - A `BatchUpdateResult` with the updated row count and returned error if any. If all the commands\n     #            in the batch have executed successfully, the error will be `nil`. If one or more commands have failed,\n     #            the `returnedError` field will give the corresponding `Error` along with the int[] which\n-    #            contains updated row count or the status returned from each command in the batch.\n+    #            contains updated row count or the status returned from each command in the batch", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d623a82ce636b043c49d8075c6ea01963e994a8f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg3NTEzNw==", "bodyText": "The convention is to use the full stop if we have multiple sentences.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388875137", "createdAt": "2020-03-06T12:27:33Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -78,18 +82,23 @@ public type Client client object {\n     #           may or may not continue to process the remaining commands in the batch. This property can be\n     #           used to override this behavior. When it is set to true, if there is a failure in a few commands and\n     #           the JDBC driver continues with the remaining commands, the successfully executed commands in the batch\n-    #           also will get rolled back.\n+    #           also will get rolled back\n+    # + returnGeneratedKeys - Indicate that generated keys should be made available for retrieval. If the value is\n+    #                         set to true, auto-generated keys are made available to retrieve when the statement\n+    #                         is executed. If the underline JDBC driver does not support it, still it will return\n+    #                         an `Error`\n     # + return - A `BatchUpdateResult` with the updated row count and returned error if any. If all the commands\n     #            in the batch have executed successfully, the error will be `nil`. If one or more commands have failed,\n     #            the `returnedError` field will give the corresponding `Error` along with the int[] which\n-    #            contains updated row count or the status returned from each command in the batch.\n+    #            contains updated row count or the status returned from each command in the batch", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg3NDk5MQ=="}, "originalCommit": {"oid": "d623a82ce636b043c49d8075c6ea01963e994a8f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTQxODA5OnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/main/java/org/ballerinax/jdbc/statement/UpdateStatement.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjoyOTo0OFrOFy3HRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxNTo1MjozOFrOFzV-aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg3NjEwMg==", "bodyText": "Can we add a test case for this scenario as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388876102", "createdAt": "2020-03-06T12:29:48Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc/src/main/java/org/ballerinax/jdbc/statement/UpdateStatement.java", "diffHunk": "@@ -70,26 +71,36 @@ public Object execute() {\n         checkAndObserveSQLAction(strand, datasource, query);\n         boolean isInTransaction = strand.isInTransaction();\n         String errorMessagePrefix = \"failed to execute update query: \";\n+        MapValue<String, Object> generatedKeys = new MapValueImpl<>();\n         try {\n             ArrayValue generatedParams = constructParameters(parameters);\n             conn = getDatabaseConnection(strand, client, datasource);\n             String processedQuery = createProcessedQueryString(query, generatedParams);\n-            stmt = conn.prepareStatement(processedQuery, Statement.RETURN_GENERATED_KEYS);\n+\n+            if (returnGeneratedKeys) {\n+                stmt = conn.prepareStatement(processedQuery, PreparedStatement.RETURN_GENERATED_KEYS);\n+            } else {\n+                stmt = conn.prepareStatement(processedQuery);\n+            }\n+\n             ProcessedStatement processedStatement = new ProcessedStatement(conn, stmt, generatedParams,\n                     datasource.getDatabaseProductName());\n             stmt = processedStatement.prepare();\n             int count = stmt.executeUpdate();\n-            MapValue<String, Object> generatedKeys;\n-            if (!isDdlStatement()) {\n-                rs = stmt.getGeneratedKeys();\n-                //This result set contains the auto generated keys.\n-                if (rs.next()) {\n-                    generatedKeys = getGeneratedKeys(rs);\n+            if (returnGeneratedKeys) {\n+                if (isKeyRetrievalSupported()) {\n+                    rs = stmt.getGeneratedKeys();\n+                    //This result set contains the auto generated keys.\n+                    if (rs.next()) {\n+                        generatedKeys = getGeneratedKeys(rs);\n+                    }\n                 } else {\n-                    generatedKeys = new MapValueImpl<>();\n+                    handleErrorOnTransaction(this.strand);\n+                    String message = \"The returnGeneratedKeys only support INSERT, UPDATE, DELETE and MERGE \" +\n+                            \"operations.\";\n+                    checkAndObserveSQLError(strand, \"execute update failed: \" + message);\n+                    return ErrorGenerator.getSQLApplicationError(message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d623a82ce636b043c49d8075c6ea01963e994a8f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM4MTczNw==", "bodyText": "Added.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r389381737", "createdAt": "2020-03-08T15:52:38Z", "author": {"login": "kalaiyarasiganeshalingam"}, "path": "stdlib/jdbc/src/main/java/org/ballerinax/jdbc/statement/UpdateStatement.java", "diffHunk": "@@ -70,26 +71,36 @@ public Object execute() {\n         checkAndObserveSQLAction(strand, datasource, query);\n         boolean isInTransaction = strand.isInTransaction();\n         String errorMessagePrefix = \"failed to execute update query: \";\n+        MapValue<String, Object> generatedKeys = new MapValueImpl<>();\n         try {\n             ArrayValue generatedParams = constructParameters(parameters);\n             conn = getDatabaseConnection(strand, client, datasource);\n             String processedQuery = createProcessedQueryString(query, generatedParams);\n-            stmt = conn.prepareStatement(processedQuery, Statement.RETURN_GENERATED_KEYS);\n+\n+            if (returnGeneratedKeys) {\n+                stmt = conn.prepareStatement(processedQuery, PreparedStatement.RETURN_GENERATED_KEYS);\n+            } else {\n+                stmt = conn.prepareStatement(processedQuery);\n+            }\n+\n             ProcessedStatement processedStatement = new ProcessedStatement(conn, stmt, generatedParams,\n                     datasource.getDatabaseProductName());\n             stmt = processedStatement.prepare();\n             int count = stmt.executeUpdate();\n-            MapValue<String, Object> generatedKeys;\n-            if (!isDdlStatement()) {\n-                rs = stmt.getGeneratedKeys();\n-                //This result set contains the auto generated keys.\n-                if (rs.next()) {\n-                    generatedKeys = getGeneratedKeys(rs);\n+            if (returnGeneratedKeys) {\n+                if (isKeyRetrievalSupported()) {\n+                    rs = stmt.getGeneratedKeys();\n+                    //This result set contains the auto generated keys.\n+                    if (rs.next()) {\n+                        generatedKeys = getGeneratedKeys(rs);\n+                    }\n                 } else {\n-                    generatedKeys = new MapValueImpl<>();\n+                    handleErrorOnTransaction(this.strand);\n+                    String message = \"The returnGeneratedKeys only support INSERT, UPDATE, DELETE and MERGE \" +\n+                            \"operations.\";\n+                    checkAndObserveSQLError(strand, \"execute update failed: \" + message);\n+                    return ErrorGenerator.getSQLApplicationError(message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg3NjEwMg=="}, "originalCommit": {"oid": "d623a82ce636b043c49d8075c6ea01963e994a8f"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTQ1MTc3OnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/main/java/org/ballerinax/jdbc/statement/UpdateStatement.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjo0MjoxNlrOFy3bNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNDowMzoyMVrOF0QLIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg4MTIwNQ==", "bodyText": "Why do we need this extra check?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r388881205", "createdAt": "2020-03-06T12:42:16Z", "author": {"login": "daneshk"}, "path": "stdlib/jdbc/src/main/java/org/ballerinax/jdbc/statement/UpdateStatement.java", "diffHunk": "@@ -70,26 +71,36 @@ public Object execute() {\n         checkAndObserveSQLAction(strand, datasource, query);\n         boolean isInTransaction = strand.isInTransaction();\n         String errorMessagePrefix = \"failed to execute update query: \";\n+        MapValue<String, Object> generatedKeys = new MapValueImpl<>();\n         try {\n             ArrayValue generatedParams = constructParameters(parameters);\n             conn = getDatabaseConnection(strand, client, datasource);\n             String processedQuery = createProcessedQueryString(query, generatedParams);\n-            stmt = conn.prepareStatement(processedQuery, Statement.RETURN_GENERATED_KEYS);\n+\n+            if (returnGeneratedKeys) {\n+                stmt = conn.prepareStatement(processedQuery, PreparedStatement.RETURN_GENERATED_KEYS);\n+            } else {\n+                stmt = conn.prepareStatement(processedQuery);\n+            }\n+\n             ProcessedStatement processedStatement = new ProcessedStatement(conn, stmt, generatedParams,\n                     datasource.getDatabaseProductName());\n             stmt = processedStatement.prepare();\n             int count = stmt.executeUpdate();\n-            MapValue<String, Object> generatedKeys;\n-            if (!isDdlStatement()) {\n-                rs = stmt.getGeneratedKeys();\n-                //This result set contains the auto generated keys.\n-                if (rs.next()) {\n-                    generatedKeys = getGeneratedKeys(rs);\n+            if (returnGeneratedKeys) {\n+                if (isKeyRetrievalSupported()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d623a82ce636b043c49d8075c6ea01963e994a8f"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM4MTY0NA==", "bodyText": "The returnGeneratedKeys only support INSERT, UPDATE, DELETE and MERGE operations So we need to check if the statement has one of these.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r389381644", "createdAt": "2020-03-08T15:51:52Z", "author": {"login": "kalaiyarasiganeshalingam"}, "path": "stdlib/jdbc/src/main/java/org/ballerinax/jdbc/statement/UpdateStatement.java", "diffHunk": "@@ -70,26 +71,36 @@ public Object execute() {\n         checkAndObserveSQLAction(strand, datasource, query);\n         boolean isInTransaction = strand.isInTransaction();\n         String errorMessagePrefix = \"failed to execute update query: \";\n+        MapValue<String, Object> generatedKeys = new MapValueImpl<>();\n         try {\n             ArrayValue generatedParams = constructParameters(parameters);\n             conn = getDatabaseConnection(strand, client, datasource);\n             String processedQuery = createProcessedQueryString(query, generatedParams);\n-            stmt = conn.prepareStatement(processedQuery, Statement.RETURN_GENERATED_KEYS);\n+\n+            if (returnGeneratedKeys) {\n+                stmt = conn.prepareStatement(processedQuery, PreparedStatement.RETURN_GENERATED_KEYS);\n+            } else {\n+                stmt = conn.prepareStatement(processedQuery);\n+            }\n+\n             ProcessedStatement processedStatement = new ProcessedStatement(conn, stmt, generatedParams,\n                     datasource.getDatabaseProductName());\n             stmt = processedStatement.prepare();\n             int count = stmt.executeUpdate();\n-            MapValue<String, Object> generatedKeys;\n-            if (!isDdlStatement()) {\n-                rs = stmt.getGeneratedKeys();\n-                //This result set contains the auto generated keys.\n-                if (rs.next()) {\n-                    generatedKeys = getGeneratedKeys(rs);\n+            if (returnGeneratedKeys) {\n+                if (isKeyRetrievalSupported()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg4MTIwNQ=="}, "originalCommit": {"oid": "d623a82ce636b043c49d8075c6ea01963e994a8f"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQzMDkyNQ==", "bodyText": "Do we need specifically handle this? what if we not handled and user set return generated keys for other operation. do we get a meaningful error from the driver?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r389430925", "createdAt": "2020-03-09T01:37:12Z", "author": {"login": "daneshk"}, "path": "stdlib/jdbc/src/main/java/org/ballerinax/jdbc/statement/UpdateStatement.java", "diffHunk": "@@ -70,26 +71,36 @@ public Object execute() {\n         checkAndObserveSQLAction(strand, datasource, query);\n         boolean isInTransaction = strand.isInTransaction();\n         String errorMessagePrefix = \"failed to execute update query: \";\n+        MapValue<String, Object> generatedKeys = new MapValueImpl<>();\n         try {\n             ArrayValue generatedParams = constructParameters(parameters);\n             conn = getDatabaseConnection(strand, client, datasource);\n             String processedQuery = createProcessedQueryString(query, generatedParams);\n-            stmt = conn.prepareStatement(processedQuery, Statement.RETURN_GENERATED_KEYS);\n+\n+            if (returnGeneratedKeys) {\n+                stmt = conn.prepareStatement(processedQuery, PreparedStatement.RETURN_GENERATED_KEYS);\n+            } else {\n+                stmt = conn.prepareStatement(processedQuery);\n+            }\n+\n             ProcessedStatement processedStatement = new ProcessedStatement(conn, stmt, generatedParams,\n                     datasource.getDatabaseProductName());\n             stmt = processedStatement.prepare();\n             int count = stmt.executeUpdate();\n-            MapValue<String, Object> generatedKeys;\n-            if (!isDdlStatement()) {\n-                rs = stmt.getGeneratedKeys();\n-                //This result set contains the auto generated keys.\n-                if (rs.next()) {\n-                    generatedKeys = getGeneratedKeys(rs);\n+            if (returnGeneratedKeys) {\n+                if (isKeyRetrievalSupported()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg4MTIwNQ=="}, "originalCommit": {"oid": "d623a82ce636b043c49d8075c6ea01963e994a8f"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIxOTg5Mg==", "bodyText": "We haven't got a meaningful error from the driver but got an empty ResultSet. So, I specifically handled this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r390219892", "createdAt": "2020-03-10T10:28:33Z", "author": {"login": "kalaiyarasiganeshalingam"}, "path": "stdlib/jdbc/src/main/java/org/ballerinax/jdbc/statement/UpdateStatement.java", "diffHunk": "@@ -70,26 +71,36 @@ public Object execute() {\n         checkAndObserveSQLAction(strand, datasource, query);\n         boolean isInTransaction = strand.isInTransaction();\n         String errorMessagePrefix = \"failed to execute update query: \";\n+        MapValue<String, Object> generatedKeys = new MapValueImpl<>();\n         try {\n             ArrayValue generatedParams = constructParameters(parameters);\n             conn = getDatabaseConnection(strand, client, datasource);\n             String processedQuery = createProcessedQueryString(query, generatedParams);\n-            stmt = conn.prepareStatement(processedQuery, Statement.RETURN_GENERATED_KEYS);\n+\n+            if (returnGeneratedKeys) {\n+                stmt = conn.prepareStatement(processedQuery, PreparedStatement.RETURN_GENERATED_KEYS);\n+            } else {\n+                stmt = conn.prepareStatement(processedQuery);\n+            }\n+\n             ProcessedStatement processedStatement = new ProcessedStatement(conn, stmt, generatedParams,\n                     datasource.getDatabaseProductName());\n             stmt = processedStatement.prepare();\n             int count = stmt.executeUpdate();\n-            MapValue<String, Object> generatedKeys;\n-            if (!isDdlStatement()) {\n-                rs = stmt.getGeneratedKeys();\n-                //This result set contains the auto generated keys.\n-                if (rs.next()) {\n-                    generatedKeys = getGeneratedKeys(rs);\n+            if (returnGeneratedKeys) {\n+                if (isKeyRetrievalSupported()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg4MTIwNQ=="}, "originalCommit": {"oid": "d623a82ce636b043c49d8075c6ea01963e994a8f"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2MTYzMA==", "bodyText": "@daneshk I too think we don't need to explicitly check this. Isn't it a driver or DB dependent thing whether throwing an exception or returning empty result set. Why we are limiting only to the INSERT, DELETE, UPDATE, MERGE since the developer now has the full control to retrieve the generated keys or not.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r390261630", "createdAt": "2020-03-10T11:53:22Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc/src/main/java/org/ballerinax/jdbc/statement/UpdateStatement.java", "diffHunk": "@@ -70,26 +71,36 @@ public Object execute() {\n         checkAndObserveSQLAction(strand, datasource, query);\n         boolean isInTransaction = strand.isInTransaction();\n         String errorMessagePrefix = \"failed to execute update query: \";\n+        MapValue<String, Object> generatedKeys = new MapValueImpl<>();\n         try {\n             ArrayValue generatedParams = constructParameters(parameters);\n             conn = getDatabaseConnection(strand, client, datasource);\n             String processedQuery = createProcessedQueryString(query, generatedParams);\n-            stmt = conn.prepareStatement(processedQuery, Statement.RETURN_GENERATED_KEYS);\n+\n+            if (returnGeneratedKeys) {\n+                stmt = conn.prepareStatement(processedQuery, PreparedStatement.RETURN_GENERATED_KEYS);\n+            } else {\n+                stmt = conn.prepareStatement(processedQuery);\n+            }\n+\n             ProcessedStatement processedStatement = new ProcessedStatement(conn, stmt, generatedParams,\n                     datasource.getDatabaseProductName());\n             stmt = processedStatement.prepare();\n             int count = stmt.executeUpdate();\n-            MapValue<String, Object> generatedKeys;\n-            if (!isDdlStatement()) {\n-                rs = stmt.getGeneratedKeys();\n-                //This result set contains the auto generated keys.\n-                if (rs.next()) {\n-                    generatedKeys = getGeneratedKeys(rs);\n+            if (returnGeneratedKeys) {\n+                if (isKeyRetrievalSupported()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg4MTIwNQ=="}, "originalCommit": {"oid": "d623a82ce636b043c49d8075c6ea01963e994a8f"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMzNTI2Nw==", "bodyText": "Removed it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r390335267", "createdAt": "2020-03-10T14:03:21Z", "author": {"login": "kalaiyarasiganeshalingam"}, "path": "stdlib/jdbc/src/main/java/org/ballerinax/jdbc/statement/UpdateStatement.java", "diffHunk": "@@ -70,26 +71,36 @@ public Object execute() {\n         checkAndObserveSQLAction(strand, datasource, query);\n         boolean isInTransaction = strand.isInTransaction();\n         String errorMessagePrefix = \"failed to execute update query: \";\n+        MapValue<String, Object> generatedKeys = new MapValueImpl<>();\n         try {\n             ArrayValue generatedParams = constructParameters(parameters);\n             conn = getDatabaseConnection(strand, client, datasource);\n             String processedQuery = createProcessedQueryString(query, generatedParams);\n-            stmt = conn.prepareStatement(processedQuery, Statement.RETURN_GENERATED_KEYS);\n+\n+            if (returnGeneratedKeys) {\n+                stmt = conn.prepareStatement(processedQuery, PreparedStatement.RETURN_GENERATED_KEYS);\n+            } else {\n+                stmt = conn.prepareStatement(processedQuery);\n+            }\n+\n             ProcessedStatement processedStatement = new ProcessedStatement(conn, stmt, generatedParams,\n                     datasource.getDatabaseProductName());\n             stmt = processedStatement.prepare();\n             int count = stmt.executeUpdate();\n-            MapValue<String, Object> generatedKeys;\n-            if (!isDdlStatement()) {\n-                rs = stmt.getGeneratedKeys();\n-                //This result set contains the auto generated keys.\n-                if (rs.next()) {\n-                    generatedKeys = getGeneratedKeys(rs);\n+            if (returnGeneratedKeys) {\n+                if (isKeyRetrievalSupported()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg4MTIwNQ=="}, "originalCommit": {"oid": "d623a82ce636b043c49d8075c6ea01963e994a8f"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODQ3NDIzOnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTo0MDo0MlrOF0LT-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTo0MDo0MlrOF0LT-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1NTYxMA==", "bodyText": "Can't we make this a defaultable parameter with default value is false. Then we don't need to append false for simple update statements which doesn't have parameters", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r390255610", "createdAt": "2020-03-10T11:40:42Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -59,14 +59,17 @@ public type Client client object {\n     #\n     # + sqlQuery - SQL statement to execute\n     # + parameters - The parameters to be passed to the update query\n+    # + returnGeneratedKeys - Indicate that generated keys should be made available for retrieval. If the value is\n+    #                         set to `true`, auto-generated keys are made available to retrieve when the statement\n+    #                         is executed. If the underline JDBC driver does not support it, it will return an `Error`.\n     # + return - `UpdateResult` with the updated row count and key column values,\n     #             else `Error` will be returned if there is an error\n-    public remote function update(@untainted string sqlQuery, Param... parameters)\n-                                  returns UpdateResult|Error {\n+    public remote function update(@untainted string sqlQuery, boolean returnGeneratedKeys, Param... parameters)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d526150f5addfdbeb8c63556baa5a98e26ed51c"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODQ4NDg1OnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTo0NDowNFrOF0LaSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMTo0NDowNFrOF0LaSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1NzIyNQ==", "bodyText": "Same as above. Can't we change the boolean arugments to defaultable parameters?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r390257225", "createdAt": "2020-03-10T11:44:04Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -78,18 +81,22 @@ public type Client client object {\n     #           may or may not continue to process the remaining commands in the batch. This property can be\n     #           used to override this behavior. When it is set to true, if there is a failure in a few commands and\n     #           the JDBC driver continues with the remaining commands, the successfully executed commands in the batch\n-    #           also will get rolled back.\n+    #           also will get rolled back\n+    # + returnGeneratedKeys - Indicate that generated keys should be made available for retrieval. If the value is\n+    #                         set to `true`, auto-generated keys are made available to retrieve when the statement\n+    #                         is executed. If the underline JDBC driver does not support it, it will return an `Error`.\n     # + return - A `BatchUpdateResult` with the updated row count and returned error if any. If all the commands\n     #            in the batch have executed successfully, the error will be `nil`. If one or more commands have failed,\n     #            the `returnedError` field will give the corresponding `Error` along with the int[] which\n     #            contains updated row count or the status returned from each command in the batch.\n     public remote function batchUpdate(@untainted string sqlQuery, boolean rollbackAllInFailure,\n-                                       Param?[]... parameters)\n+                                       boolean returnGeneratedKeys, Param?[]... parameters)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d526150f5addfdbeb8c63556baa5a98e26ed51c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODYwNjM1OnYy", "diffSide": "RIGHT", "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMjoyNDowN1rOF0MkNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMjoyNDowN1rOF0MkNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI3NjE1MA==", "bodyText": "IMO we should make rollbackAllInFailure also a defaultable parameter.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r390276150", "createdAt": "2020-03-10T12:24:07Z", "author": {"login": "anupama-pathirage"}, "path": "stdlib/jdbc/src/main/ballerina/src/java.jdbc/client.bal", "diffHunk": "@@ -78,18 +81,22 @@ public type Client client object {\n     #           may or may not continue to process the remaining commands in the batch. This property can be\n     #           used to override this behavior. When it is set to true, if there is a failure in a few commands and\n     #           the JDBC driver continues with the remaining commands, the successfully executed commands in the batch\n-    #           also will get rolled back.\n+    #           also will get rolled back\n+    # + returnGeneratedKeys - Indicate that generated keys should be made available for retrieval. If the value is\n+    #                         set to `true`, auto-generated keys are made available to retrieve when the statement\n+    #                         is executed. If the underline JDBC driver does not support it, it will return an `Error`.\n     # + return - A `BatchUpdateResult` with the updated row count and returned error if any. If all the commands\n     #            in the batch have executed successfully, the error will be `nil`. If one or more commands have failed,\n     #            the `returnedError` field will give the corresponding `Error` along with the int[] which\n     #            contains updated row count or the status returned from each command in the batch.\n     public remote function batchUpdate(@untainted string sqlQuery, boolean rollbackAllInFailure,\n-                                       Param?[]... parameters)\n+                                       boolean returnGeneratedKeys = false, Param?[]... parameters)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd58703e5c603bd46f47dd45300816d5bf2beb57"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTM4NzI1OnYy", "diffSide": "RIGHT", "path": "examples/jdbc-client-crud-operations/jdbc_client_crud_operations.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMjo0Mzo1MFrOF0nhKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNDozMDowMVrOF0o6TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxNzczNw==", "bodyText": "Why we can't remove passing false? we already have set false as default value", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r390717737", "createdAt": "2020-03-11T02:43:50Z", "author": {"login": "daneshk"}, "path": "examples/jdbc-client-crud-operations/jdbc_client_crud_operations.bal", "diffHunk": "@@ -45,7 +45,7 @@ public function main() {\n     // of the `java.jdbc` module.\n     int age = 24;\n     string name = \"Anne\";\n-    ret = testDB->update(\"INSERT INTO student(age, name) values (?, ?)\",\n+    ret = testDB->update(\"INSERT INTO student(age, name) values (?, ?)\", false,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "773e6c03d8f6e6ff1d6f499b69271dc672a80924"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc0MDU1Nw==", "bodyText": "If update statement which doesn't have parameters, no need to append false but In this case, update statements have parameters So we need to set that value.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21476#discussion_r390740557", "createdAt": "2020-03-11T04:30:01Z", "author": {"login": "kalaiyarasiganeshalingam"}, "path": "examples/jdbc-client-crud-operations/jdbc_client_crud_operations.bal", "diffHunk": "@@ -45,7 +45,7 @@ public function main() {\n     // of the `java.jdbc` module.\n     int age = 24;\n     string name = \"Anne\";\n-    ret = testDB->update(\"INSERT INTO student(age, name) values (?, ?)\",\n+    ret = testDB->update(\"INSERT INTO student(age, name) values (?, ?)\", false,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcxNzczNw=="}, "originalCommit": {"oid": "773e6c03d8f6e6ff1d6f499b69271dc672a80924"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 908, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}