{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMTMzNjU0", "number": 23505, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNTo0ODoxOFrOD_8Y6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxODo0MDozOVrOEDk5xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4Mzc2Mjk3OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/execution/proj9/src/c/main.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNTo0ODoxOFrOGa6Qyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNjoxNTowNlrOGa6zOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg3MDczMA==", "bodyText": "Shall we add license header to the test bal files?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23505#discussion_r430870730", "createdAt": "2020-05-27T05:48:18Z", "author": {"login": "riyafa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/execution/proj9/src/c/main.bal", "diffHunk": "@@ -0,0 +1,14 @@\n+import a;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b3e7127192f8d4bfa45989a8172d2ccb80e8cd5"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg3OTU0Ng==", "bodyText": "The bal files in the previous test projects does not contain the license headers.\nproject 1\nIs it required?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23505#discussion_r430879546", "createdAt": "2020-05-27T06:15:06Z", "author": {"login": "HindujaB"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/execution/proj9/src/c/main.bal", "diffHunk": "@@ -0,0 +1,14 @@\n+import a;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg3MDczMA=="}, "originalCommit": {"oid": "0b3e7127192f8d4bfa45989a8172d2ccb80e8cd5"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4Mzc2NTA0OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/execution/proj10/src/c/main.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNTo0OToyOFrOGa6SJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNTo0OToyOFrOGa6SJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg3MTA3OQ==", "bodyText": "can we have better names for modules for clarity instead of a and b?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23505#discussion_r430871079", "createdAt": "2020-05-27T05:49:28Z", "author": {"login": "riyafa"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/execution/proj10/src/c/main.bal", "diffHunk": "@@ -0,0 +1,14 @@\n+import a;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b3e7127192f8d4bfa45989a8172d2ccb80e8cd5"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4Mzc3MTc4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmMethodGen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNTo1Mjo0MFrOGa6WRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNjo0NjozNVrOGa7iLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg3MjEzMw==", "bodyText": "Shall we add constant to java methods like moduleStartAttempted, moduleStartSuccess", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23505#discussion_r430872133", "createdAt": "2020-05-27T05:52:40Z", "author": {"login": "warunalakshitha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmMethodGen.java", "diffHunk": "@@ -780,12 +781,15 @@ private static String calculateModuleSpecialFuncName(PackageID id, String funcSu\n     }\n \n     private static void scheduleStopMethod(MethodVisitor mv, String initClass, String stopFuncName,\n-                                           int schedulerIndex, int futureIndex) {\n+                                           int schedulerIndex, int futureIndex, String moduleClass) {\n \n         String lambdaFuncName = \"$lambda$\" + stopFuncName;\n         // Create a schedular. A new schedular is used here, to make the stop function to not to\n         // depend/wait on whatever is being running on the background. eg: a busy loop in the main.\n \n+        mv.visitFieldInsn(GETSTATIC, moduleClass, \"moduleStartAttempted\", \"Z\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b3e7127192f8d4bfa45989a8172d2ccb80e8cd5"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg5MTU2Ng==", "bodyText": "Done in the latest commit", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23505#discussion_r430891566", "createdAt": "2020-05-27T06:46:35Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmMethodGen.java", "diffHunk": "@@ -780,12 +781,15 @@ private static String calculateModuleSpecialFuncName(PackageID id, String funcSu\n     }\n \n     private static void scheduleStopMethod(MethodVisitor mv, String initClass, String stopFuncName,\n-                                           int schedulerIndex, int futureIndex) {\n+                                           int schedulerIndex, int futureIndex, String moduleClass) {\n \n         String lambdaFuncName = \"$lambda$\" + stopFuncName;\n         // Create a schedular. A new schedular is used here, to make the stop function to not to\n         // depend/wait on whatever is being running on the background. eg: a busy loop in the main.\n \n+        mv.visitFieldInsn(GETSTATIC, moduleClass, \"moduleStartAttempted\", \"Z\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg3MjEzMw=="}, "originalCommit": {"oid": "0b3e7127192f8d4bfa45989a8172d2ccb80e8cd5"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4Mzc3NDE4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmMethodGen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNTo1Mzo1NlrOGa6XwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNjo0NjoxMlrOGa7hng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg3MjUxMw==", "bodyText": "shall we check terminator.kind instead of instance of", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23505#discussion_r430872513", "createdAt": "2020-05-27T05:53:56Z", "author": {"login": "warunalakshitha"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmMethodGen.java", "diffHunk": "@@ -1908,6 +1924,13 @@ public void generateBasicBlocks(MethodVisitor mv, List<BIRBasicBlock> basicBlock\n                 mv.visitIntInsn(SIPUSH, caseIndex);\n                 mv.visitVarInsn(ISTORE, stateVarIndex);\n                 caseIndex += 1;\n+\n+                //set module start success to true for ___init class\n+                if (func == module.functions.get(1) && terminator instanceof Return) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b3e7127192f8d4bfa45989a8172d2ccb80e8cd5"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg5MTQyMg==", "bodyText": "Done in the latest commit", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23505#discussion_r430891422", "createdAt": "2020-05-27T06:46:12Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmMethodGen.java", "diffHunk": "@@ -1908,6 +1924,13 @@ public void generateBasicBlocks(MethodVisitor mv, List<BIRBasicBlock> basicBlock\n                 mv.visitIntInsn(SIPUSH, caseIndex);\n                 mv.visitVarInsn(ISTORE, stateVarIndex);\n                 caseIndex += 1;\n+\n+                //set module start success to true for ___init class\n+                if (func == module.functions.get(1) && terminator instanceof Return) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg3MjUxMw=="}, "originalCommit": {"oid": "0b3e7127192f8d4bfa45989a8172d2ccb80e8cd5"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4Mzc5NTA2OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/execution/proj10/.gitignore", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNjowMzoyMVrOGa6kVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNjowMzoyMVrOGa6kVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg3NTczNQ==", "bodyText": "We can remove the .gitignore files", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23505#discussion_r430875735", "createdAt": "2020-05-27T06:03:21Z", "author": {"login": "warunalakshitha"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/execution/proj10/.gitignore", "diffHunk": "@@ -0,0 +1 @@\n+target", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b3e7127192f8d4bfa45989a8172d2ccb80e8cd5"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjMyNTQ2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmMethodGen.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNToyOTowMFrOGcPPng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNToyOTowMFrOGcPPng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2MzA3MA==", "bodyText": "Shall we have the called function after the calling method? This improves vertical readability", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23505#discussion_r432263070", "createdAt": "2020-05-29T05:29:00Z", "author": {"login": "riyafa"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmMethodGen.java", "diffHunk": "@@ -752,6 +755,10 @@ private static boolean isModuleTestInitFunction(BIRPackage module, BIRFunction f\n         return func.name.value.equals(calculateModuleSpecialFuncName(packageToModuleId(module), \"<testinit>\"));\n     }\n \n+    private static boolean isModuleStartFunction(BIRPackage module, BIRFunction function) {\n+        return function == module.functions.get(1);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db52c79d70d73d07f2f1f0d2fef09ca48539ea9"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjgyNDA2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmConstants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwODo0NTowM1rOGcUGpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwODo0NTowM1rOGcUGpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM0MjY5Mg==", "bodyText": "check with user defined variable names", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23505#discussion_r432342692", "createdAt": "2020-05-29T08:45:03Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmConstants.java", "diffHunk": "@@ -186,6 +186,8 @@\n     public static final String TYPEDESC_CLASS_PREFIX = \"$typedesc$\";\n     public static final String BALLERINA = \"ballerina\";\n     public static final String BUILT_IN_PACKAGE_NAME = \"lang.annotations\";\n+    public static final String MODULE_START_ATTEMPTED = \"moduleStartAttempted\";\n+    public static final String MODULE_START_SUCCESS = \"moduleStartSuccess\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db52c79d70d73d07f2f1f0d2fef09ca48539ea9"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjgzNzczOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmMethodGen.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwODo0OToxNFrOGcUPZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwODo0OToxNFrOGcUPZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM0NDkzMw==", "bodyText": "check with start function name?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23505#discussion_r432344933", "createdAt": "2020-05-29T08:49:14Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmMethodGen.java", "diffHunk": "@@ -752,6 +755,10 @@ private static boolean isModuleTestInitFunction(BIRPackage module, BIRFunction f\n         return func.name.value.equals(calculateModuleSpecialFuncName(packageToModuleId(module), \"<testinit>\"));\n     }\n \n+    private static boolean isModuleStartFunction(BIRPackage module, BIRFunction function) {\n+        return function == module.functions.get(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db52c79d70d73d07f2f1f0d2fef09ca48539ea9"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Mjg0NjQ0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmMethodGen.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwODo1MTozM1rOGcUUpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwODo1MTozM1rOGcUUpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM0NjI3OQ==", "bodyText": "moduleStartSUccessful", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23505#discussion_r432346279", "createdAt": "2020-05-29T08:51:33Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmMethodGen.java", "diffHunk": "@@ -780,12 +787,15 @@ private static String calculateModuleSpecialFuncName(PackageID id, String funcSu\n     }\n \n     private static void scheduleStopMethod(MethodVisitor mv, String initClass, String stopFuncName,\n-                                           int schedulerIndex, int futureIndex) {\n+                                           int schedulerIndex, int futureIndex, String moduleClass) {\n \n         String lambdaFuncName = \"$lambda$\" + stopFuncName;\n         // Create a schedular. A new schedular is used here, to make the stop function to not to\n         // depend/wait on whatever is being running on the background. eg: a busy loop in the main.\n \n+        mv.visitFieldInsn(GETSTATIC, moduleClass, MODULE_START_ATTEMPTED, \"Z\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db52c79d70d73d07f2f1f0d2fef09ca48539ea9"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Mjg5OTg1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmMethodGen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTowNzo1NVrOGcU3Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTowODoxOVrOGcU4Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM1NTE0Mg==", "bodyText": "check for over checking per instruction", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23505#discussion_r432355142", "createdAt": "2020-05-29T09:07:55Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmMethodGen.java", "diffHunk": "@@ -1908,6 +1925,13 @@ public void generateBasicBlocks(MethodVisitor mv, List<BIRBasicBlock> basicBlock\n                 mv.visitIntInsn(SIPUSH, caseIndex);\n                 mv.visitVarInsn(ISTORE, stateVarIndex);\n                 caseIndex += 1;\n+\n+                //set module start success to true for ___init class\n+                if (isModuleStartFunction(module, func) && terminator.kind == InstructionKind.RETURN) {\n+                    mv.visitInsn(ICONST_1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db52c79d70d73d07f2f1f0d2fef09ca48539ea9"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM1NTM0Nw==", "bodyText": "check if we can move closer to return generation", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23505#discussion_r432355347", "createdAt": "2020-05-29T09:08:19Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmMethodGen.java", "diffHunk": "@@ -1908,6 +1925,13 @@ public void generateBasicBlocks(MethodVisitor mv, List<BIRBasicBlock> basicBlock\n                 mv.visitIntInsn(SIPUSH, caseIndex);\n                 mv.visitVarInsn(ISTORE, stateVarIndex);\n                 caseIndex += 1;\n+\n+                //set module start success to true for ___init class\n+                if (isModuleStartFunction(module, func) && terminator.kind == InstructionKind.RETURN) {\n+                    mv.visitInsn(ICONST_1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM1NTE0Mg=="}, "originalCommit": {"oid": "1db52c79d70d73d07f2f1f0d2fef09ca48539ea9"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzAzNjA4OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/util/RuntimeUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo0OTo0NVrOGcWOMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo0OTo0NVrOGcWOMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3NzM5NA==", "bodyText": "IMO better way is to use handleRuntimeErrors without Runtime.getRuntime().exit(1) and add a new method \"handleRuntimeErrorsAndExit\" which calls handleRuntimeErrors +  Runtime.getRuntime().exit(1). In  that case you need to change the current usages in handleRuntimeErrors and   HANDLE_THROWABLE_METHOD constant in jvmconstants", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23505#discussion_r432377394", "createdAt": "2020-05-29T09:49:45Z", "author": {"login": "warunalakshitha"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/util/RuntimeUtils.java", "diffHunk": "@@ -137,6 +137,14 @@ public static void handleRuntimeErrors(Throwable throwable) {\n         Runtime.getRuntime().exit(1);\n     }\n \n+    public static void handleRuntimeErrorWithoutShutDown(Throwable throwable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db52c79d70d73d07f2f1f0d2fef09ca48539ea9"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTE5OTE5OnYy", "diffSide": "RIGHT", "path": "tests/jballerina-unit-test/src/test/resources/test-src/execution/projectModuleDependencyChainForInit/Ballerina.toml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzoyOToxOVrOGfFxKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToyNDozM1rOGfLVmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI1MzU0NQ==", "bodyText": "@warunalakshitha , can you check the naming used by @HindujaB here for org name and module names?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23505#discussion_r435253545", "createdAt": "2020-06-04T13:29:19Z", "author": {"login": "Kishanthan"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/execution/projectModuleDependencyChainForInit/Ballerina.toml", "diffHunk": "@@ -0,0 +1,5 @@\n+[project]\n+org-name= \"unit-tests\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff8804023bc4a748bdb420b16f410e6cfcbdad44"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI2NDg1OQ==", "bodyText": "We need to improve the module names based on coding best practices. Module names can contain alphanumeric characters including dots. Dots in a module name have no meaning other than the last segment after the final dot being used as a default alias within the source code. The underscore ( _ ) character and camel case are not allowed.\nEx: lang.string, auth - valid module names", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23505#discussion_r435264859", "createdAt": "2020-06-04T13:42:54Z", "author": {"login": "warunalakshitha"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/execution/projectModuleDependencyChainForInit/Ballerina.toml", "diffHunk": "@@ -0,0 +1,5 @@\n+[project]\n+org-name= \"unit-tests\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI1MzU0NQ=="}, "originalCommit": {"oid": "ff8804023bc4a748bdb420b16f410e6cfcbdad44"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM0NDc5Mg==", "bodyText": "Sorry. Fixed it in recent commit.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23505#discussion_r435344792", "createdAt": "2020-06-04T15:24:33Z", "author": {"login": "HindujaB"}, "path": "tests/jballerina-unit-test/src/test/resources/test-src/execution/projectModuleDependencyChainForInit/Ballerina.toml", "diffHunk": "@@ -0,0 +1,5 @@\n+[project]\n+org-name= \"unit-tests\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI1MzU0NQ=="}, "originalCommit": {"oid": "ff8804023bc4a748bdb420b16f410e6cfcbdad44"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODk4MDE4OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/connector/AsyncFunctionCallBack.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNToxMToyOVrOGgPZeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNjozOToxNFrOGgQ2Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1OTg5Nw==", "bodyText": "is it correct to call exit here? then jvm would exit right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23505#discussion_r436459897", "createdAt": "2020-06-08T05:11:29Z", "author": {"login": "Kishanthan"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/connector/AsyncFunctionCallBack.java", "diffHunk": "@@ -69,7 +69,7 @@ public void notifySuccess() {\n \n     @Override\n     public void notifyFailure(ErrorValue error) {\n-        RuntimeUtils.handleRuntimeErrors(error);\n+        RuntimeUtils.handleRuntimeErrorsAndExit(error);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b6ed4cb75b71529615d1a9b1e9fe33a940286e9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1OTk1MQ==", "bodyText": "@HindujaB @warunalakshitha", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23505#discussion_r436459951", "createdAt": "2020-06-08T05:11:50Z", "author": {"login": "Kishanthan"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/connector/AsyncFunctionCallBack.java", "diffHunk": "@@ -69,7 +69,7 @@ public void notifySuccess() {\n \n     @Override\n     public void notifyFailure(ErrorValue error) {\n-        RuntimeUtils.handleRuntimeErrors(error);\n+        RuntimeUtils.handleRuntimeErrorsAndExit(error);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1OTg5Nw=="}, "originalCommit": {"oid": "6b6ed4cb75b71529615d1a9b1e9fe33a940286e9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ3NzI5NQ==", "bodyText": "This seems bug. lets just put just \"handleRuntimeErrors\" without exit.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23505#discussion_r436477295", "createdAt": "2020-06-08T06:20:06Z", "author": {"login": "warunalakshitha"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/connector/AsyncFunctionCallBack.java", "diffHunk": "@@ -69,7 +69,7 @@ public void notifySuccess() {\n \n     @Override\n     public void notifyFailure(ErrorValue error) {\n-        RuntimeUtils.handleRuntimeErrors(error);\n+        RuntimeUtils.handleRuntimeErrorsAndExit(error);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1OTg5Nw=="}, "originalCommit": {"oid": "6b6ed4cb75b71529615d1a9b1e9fe33a940286e9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4MzYwMw==", "bodyText": "Modified them", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23505#discussion_r436483603", "createdAt": "2020-06-08T06:39:14Z", "author": {"login": "HindujaB"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/values/connector/AsyncFunctionCallBack.java", "diffHunk": "@@ -69,7 +69,7 @@ public void notifySuccess() {\n \n     @Override\n     public void notifyFailure(ErrorValue error) {\n-        RuntimeUtils.handleRuntimeErrors(error);\n+        RuntimeUtils.handleRuntimeErrorsAndExit(error);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1OTg5Nw=="}, "originalCommit": {"oid": "6b6ed4cb75b71529615d1a9b1e9fe33a940286e9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTM1MDA1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmMethodGen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzo1OTowOVrOGgS8cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMzoxNzozM1rOGgdfqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUxODAwMQ==", "bodyText": "function name is already there in the enclosing method. lets use that.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23505#discussion_r436518001", "createdAt": "2020-06-08T07:59:09Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmMethodGen.java", "diffHunk": "@@ -1476,6 +1484,10 @@ public void genJMethodForBFunc(BIRFunction func,\n         LabelGenerator labelGen = new LabelGenerator();\n \n         mv.visitCode();\n+        if (isModuleStartFunction(module, func)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dbc11bf18f0cb8d31da1bd6910f775c6abbb0b7"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5MDg1OA==", "bodyText": "done in last commit", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23505#discussion_r436690858", "createdAt": "2020-06-08T13:17:33Z", "author": {"login": "HindujaB"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmMethodGen.java", "diffHunk": "@@ -1476,6 +1484,10 @@ public void genJMethodForBFunc(BIRFunction func,\n         LabelGenerator labelGen = new LabelGenerator();\n \n         mv.visitCode();\n+        if (isModuleStartFunction(module, func)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUxODAwMQ=="}, "originalCommit": {"oid": "6dbc11bf18f0cb8d31da1bd6910f775c6abbb0b7"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTM1NDIzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmMethodGen.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwODowMDoyMFrOGgS--Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwODowMDoyMFrOGgS--Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUxODY0OQ==", "bodyText": "same here as well where the function name is already calculated.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23505#discussion_r436518649", "createdAt": "2020-06-08T08:00:20Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmMethodGen.java", "diffHunk": "@@ -1923,6 +1939,12 @@ public void generateBasicBlocks(MethodVisitor mv, List<BIRBasicBlock> basicBlock\n                     generateAnnotLoad(mv, module.typeDefs, getPackageName(module.org.value, module.name.value,\n                                                                           module.version.value));\n                 }\n+                //set module start success to true for ___init class\n+                if (isModuleStartFunction(module, func) && terminator.kind == InstructionKind.RETURN) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dbc11bf18f0cb8d31da1bd6910f775c6abbb0b7"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTg1Nzk4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmMethodGen.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxODo0MDozOVrOGgrL_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxODo0MDozOVrOGgrL_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkxNTE5OA==", "bodyText": "This statement can be moved inside the body of the if condition added below as initClass will only be used when that if condition becomes true right?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23505#discussion_r436915198", "createdAt": "2020-06-08T18:40:39Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmMethodGen.java", "diffHunk": "@@ -1446,6 +1454,8 @@ public void genJMethodForBFunc(BIRFunction func,\n \n         String currentPackageName = getPackageName(module.org.value, module.name.value, module.version.value);\n         BIRVarToJVMIndexMap indexMap = new BIRVarToJVMIndexMap();\n+        String initClass = getModuleLevelClassName(module.org.value, module.name.value, module.version.value,\n+                MODULE_INIT_CLASS_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27d3a2d651dfcb2d4b89e33939c003c2b47cde38"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3618, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}