{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMDczMzEw", "number": 23089, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzoxMTo1M1rOD5FU8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNToyNjoyMFrOD5rGqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTgyNzA0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/test/resources/statements/assignment-stmt/assignment_stmt_source_12.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzoxMTo1M1rOGQJ47g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNToyNToxN1rOGREcHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU5MjQzMA==", "bodyText": "With let expression support this assignment-stmt recovery test case recovers as a let expression. So I altered the test case a little.  Is it alright?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23089#discussion_r419592430", "createdAt": "2020-05-04T17:11:53Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/test/resources/statements/assignment-stmt/assignment_stmt_source_12.bal", "diffHunk": "@@ -1,5 +1,5 @@\n function foo() {\n     a =\n-    int b =\n+    b =\n     int a = 6;\n }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e031d565607bc0c2570dfabaf00f67e8ed047b2e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU1MTcwOQ==", "bodyText": "Lets create an issue.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23089#discussion_r420551709", "createdAt": "2020-05-06T05:25:17Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/resources/statements/assignment-stmt/assignment_stmt_source_12.bal", "diffHunk": "@@ -1,5 +1,5 @@\n function foo() {\n     a =\n-    int b =\n+    b =\n     int a = 6;\n }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU5MjQzMA=="}, "originalCommit": {"oid": "e031d565607bc0c2570dfabaf00f67e8ed047b2e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODAxNjQzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNToyNjoyMFrOGREdIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwOTozNjo1OFrOGRLN1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU1MTk3MA==", "bodyText": "Should we return an empty list here?\nAnd context should be ended.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23089#discussion_r420551970", "createdAt": "2020-05-06T05:26:20Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -7301,4 +7309,102 @@ private STNode parseErrorKeyWord() {\n             return sol.recoveredNode;\n         }\n     }\n+\n+    /**\n+     * Parse let expression.\n+     * <p>\n+     * <code>\n+     * let-expr := let let-var-decl [, let-var-decl]* in expression\n+     * </code>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseLetExpression() {\n+        STNode letKeyword = parseLetKeyword();\n+        STNode letVarDeclarations = parseLetVarDeclarations();\n+        STNode inKeyword = parseInKeyword();\n+        STNode expression = parseExpression();\n+        return STNodeFactory.createLetExpressionNode(letKeyword, letVarDeclarations, inKeyword, expression);\n+    }\n+\n+    /**\n+     * Parse let-keyword.\n+     *\n+     * @return Let-keyword node\n+     */\n+    private STNode parseLetKeyword() {\n+        STToken token = peek();\n+        if (token.kind == SyntaxKind.LET_KEYWORD) {\n+            return consume();\n+        } else {\n+            Solution sol = recover(token, ParserRuleContext.LET_KEYWORD);\n+            return sol.recoveredNode;\n+        }\n+    }\n+\n+    /**\n+     * Parse let variable declarations.\n+     * <p>\n+     * <code>let-var-decl-list := let-var-decl [, let-var-decl]*</code>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseLetVarDeclarations() {\n+        startContext(ParserRuleContext.LET_VAR_DECL);\n+        List<STNode> varDecls = new ArrayList<>();\n+        STToken nextToken = peek();\n+\n+        // Make sure at least one let variable declaration is present\n+        if (isEndOfLetVarDeclarations(nextToken.kind)) {\n+            this.errorHandler.reportMissingTokenError(\"missing let variable declaration\");\n+            return STNodeFactory.createMissingToken(SyntaxKind.LET_VAR_DECL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da6919a33f9bf8fd1a530cd0a4f0c862a1ba485"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU1MzYxOQ==", "bodyText": "yeah. the context should be ended. :)\nis it ok to return an empty list? there should be at least one let-var-decl.\nFollowing had been done in the parseListeners() method for expression-list := expression (, expression)*\n            endContext();\n            this.errorHandler.reportMissingTokenError(\"missing expression\");\n            return STNodeFactory.createMissingToken(SyntaxKind.IDENTIFIER_TOKEN);\n        }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23089#discussion_r420553619", "createdAt": "2020-05-06T05:33:01Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -7301,4 +7309,102 @@ private STNode parseErrorKeyWord() {\n             return sol.recoveredNode;\n         }\n     }\n+\n+    /**\n+     * Parse let expression.\n+     * <p>\n+     * <code>\n+     * let-expr := let let-var-decl [, let-var-decl]* in expression\n+     * </code>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseLetExpression() {\n+        STNode letKeyword = parseLetKeyword();\n+        STNode letVarDeclarations = parseLetVarDeclarations();\n+        STNode inKeyword = parseInKeyword();\n+        STNode expression = parseExpression();\n+        return STNodeFactory.createLetExpressionNode(letKeyword, letVarDeclarations, inKeyword, expression);\n+    }\n+\n+    /**\n+     * Parse let-keyword.\n+     *\n+     * @return Let-keyword node\n+     */\n+    private STNode parseLetKeyword() {\n+        STToken token = peek();\n+        if (token.kind == SyntaxKind.LET_KEYWORD) {\n+            return consume();\n+        } else {\n+            Solution sol = recover(token, ParserRuleContext.LET_KEYWORD);\n+            return sol.recoveredNode;\n+        }\n+    }\n+\n+    /**\n+     * Parse let variable declarations.\n+     * <p>\n+     * <code>let-var-decl-list := let-var-decl [, let-var-decl]*</code>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseLetVarDeclarations() {\n+        startContext(ParserRuleContext.LET_VAR_DECL);\n+        List<STNode> varDecls = new ArrayList<>();\n+        STToken nextToken = peek();\n+\n+        // Make sure at least one let variable declaration is present\n+        if (isEndOfLetVarDeclarations(nextToken.kind)) {\n+            this.errorHandler.reportMissingTokenError(\"missing let variable declaration\");\n+            return STNodeFactory.createMissingToken(SyntaxKind.LET_VAR_DECL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU1MTk3MA=="}, "originalCommit": {"oid": "1da6919a33f9bf8fd1a530cd0a4f0c862a1ba485"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY2Mjc0Mw==", "bodyText": "Yeah, since we log the errors, that should be fine.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23089#discussion_r420662743", "createdAt": "2020-05-06T09:36:58Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -7301,4 +7309,102 @@ private STNode parseErrorKeyWord() {\n             return sol.recoveredNode;\n         }\n     }\n+\n+    /**\n+     * Parse let expression.\n+     * <p>\n+     * <code>\n+     * let-expr := let let-var-decl [, let-var-decl]* in expression\n+     * </code>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseLetExpression() {\n+        STNode letKeyword = parseLetKeyword();\n+        STNode letVarDeclarations = parseLetVarDeclarations();\n+        STNode inKeyword = parseInKeyword();\n+        STNode expression = parseExpression();\n+        return STNodeFactory.createLetExpressionNode(letKeyword, letVarDeclarations, inKeyword, expression);\n+    }\n+\n+    /**\n+     * Parse let-keyword.\n+     *\n+     * @return Let-keyword node\n+     */\n+    private STNode parseLetKeyword() {\n+        STToken token = peek();\n+        if (token.kind == SyntaxKind.LET_KEYWORD) {\n+            return consume();\n+        } else {\n+            Solution sol = recover(token, ParserRuleContext.LET_KEYWORD);\n+            return sol.recoveredNode;\n+        }\n+    }\n+\n+    /**\n+     * Parse let variable declarations.\n+     * <p>\n+     * <code>let-var-decl-list := let-var-decl [, let-var-decl]*</code>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseLetVarDeclarations() {\n+        startContext(ParserRuleContext.LET_VAR_DECL);\n+        List<STNode> varDecls = new ArrayList<>();\n+        STToken nextToken = peek();\n+\n+        // Make sure at least one let variable declaration is present\n+        if (isEndOfLetVarDeclarations(nextToken.kind)) {\n+            this.errorHandler.reportMissingTokenError(\"missing let variable declaration\");\n+            return STNodeFactory.createMissingToken(SyntaxKind.LET_VAR_DECL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU1MTk3MA=="}, "originalCommit": {"oid": "1da6919a33f9bf8fd1a530cd0a4f0c862a1ba485"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3705, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}