{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NzAzODIz", "number": 21185, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNDozNDo1OVrODjVGoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNDozNDo1OVrODjVGoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzcyNTEyOnYy", "diffSide": "RIGHT", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/CodeActionUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNDozNDo1OVrOFvE_Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNDo1MToyM1rOFvFL-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkwOTA3NA==", "bodyText": "Can we use https://github.com/ballerina-platform/ballerina-lang/blob/master/language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/common/utils/CommonUtil.java#L186 to convert the diagnostic position to zero-based positioning?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21185#discussion_r384909074", "createdAt": "2020-02-27T04:34:59Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/CodeActionUtil.java", "diffHunk": "@@ -140,4 +156,42 @@ public static CodeActionNodeType topLevelNodeInLine(TextDocumentIdentifier ident\n             return null;\n         }\n     }\n+\n+    /**\n+     * Translates ballerina diagnostics into lsp4j diagnostics.\n+     *\n+     * @param ballerinaDiags a list of {@link org.ballerinalang.util.diagnostic.Diagnostic}\n+     * @return a list of {@link Diagnostic}\n+     */\n+    public static List<org.eclipse.lsp4j.Diagnostic> toDiagnostics(\n+            List<org.ballerinalang.util.diagnostic.Diagnostic> ballerinaDiags) {\n+        List<org.eclipse.lsp4j.Diagnostic> lsDiagnostics = new ArrayList<>();\n+        ballerinaDiags.forEach(diagnostic -> {\n+            org.eclipse.lsp4j.Diagnostic lsDiagnostic = new org.eclipse.lsp4j.Diagnostic();\n+            lsDiagnostic.setSeverity(DiagnosticSeverity.Error);\n+            lsDiagnostic.setMessage(diagnostic.getMessage());\n+            Range r = new Range();\n+\n+            int startLine = diagnostic.getPosition().getStartLine() - 1; // LSP diagnostics range is 0 based\n+            int startChar = diagnostic.getPosition().getStartColumn() - 1;\n+            int endLine = diagnostic.getPosition().getEndLine() - 1;\n+            int endChar = diagnostic.getPosition().getEndColumn() - 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3236ebbbd0747d6645b99c5d66d92488b153a308"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkxMjM3OQ==", "bodyText": "Will fix in a separate PR", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21185#discussion_r384912379", "createdAt": "2020-02-27T04:51:23Z", "author": {"login": "rasika"}, "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/codeaction/CodeActionUtil.java", "diffHunk": "@@ -140,4 +156,42 @@ public static CodeActionNodeType topLevelNodeInLine(TextDocumentIdentifier ident\n             return null;\n         }\n     }\n+\n+    /**\n+     * Translates ballerina diagnostics into lsp4j diagnostics.\n+     *\n+     * @param ballerinaDiags a list of {@link org.ballerinalang.util.diagnostic.Diagnostic}\n+     * @return a list of {@link Diagnostic}\n+     */\n+    public static List<org.eclipse.lsp4j.Diagnostic> toDiagnostics(\n+            List<org.ballerinalang.util.diagnostic.Diagnostic> ballerinaDiags) {\n+        List<org.eclipse.lsp4j.Diagnostic> lsDiagnostics = new ArrayList<>();\n+        ballerinaDiags.forEach(diagnostic -> {\n+            org.eclipse.lsp4j.Diagnostic lsDiagnostic = new org.eclipse.lsp4j.Diagnostic();\n+            lsDiagnostic.setSeverity(DiagnosticSeverity.Error);\n+            lsDiagnostic.setMessage(diagnostic.getMessage());\n+            Range r = new Range();\n+\n+            int startLine = diagnostic.getPosition().getStartLine() - 1; // LSP diagnostics range is 0 based\n+            int startChar = diagnostic.getPosition().getStartColumn() - 1;\n+            int endLine = diagnostic.getPosition().getEndLine() - 1;\n+            int endChar = diagnostic.getPosition().getEndColumn() - 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkwOTA3NA=="}, "originalCommit": {"oid": "3236ebbbd0747d6645b99c5d66d92488b153a308"}, "originalPosition": 145}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1098, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}