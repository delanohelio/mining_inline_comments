{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5OTcwODg1", "number": 22936, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwODo1MToyMFrOD3F4xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMDoxNzo0MVrOD3IAxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDk0NzI0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwODo1MToyMFrOGNJrZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwOTo1NTozN1rOGNMMxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ0MzIzNw==", "bodyText": "I reuse the parseListeners() here which has the following definition.\n<code>expression-list := expression (, expression)*</code>\nShall I refactor its name to parseExpressionsList() and corresponding LISTNERS_LIST ctx name to EXPRESSIONS_LIST in error handler.\nOr Let's keep keep those names intact ?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22936#discussion_r416443237", "createdAt": "2020-04-28T08:51:20Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -6847,4 +6852,39 @@ private STNode parseTrapKeyword() {\n             return sol.recoveredNode;\n         }\n     }\n+\n+    /**\n+     * Parse list constructor expression.\n+     * <p>\n+     * <code>\n+     * list-constructor-expr := [ [ expr-list ] ]\n+     * <br/>\n+     * expr-list := expression (, expression)*\n+     * </code>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseListConstructorExpr() {\n+        startContext(ParserRuleContext.LIST_CONSTRUCTOR);\n+        STNode openBracket = parseOpenBracket();\n+        STNode expressions = parseOptionalExpressionsList();\n+        STNode closeBracket = parseCloseBracket();\n+        endContext();\n+        return STNodeFactory.createListConstructorExpressionNode(openBracket, expressions, closeBracket);\n+    }\n+\n+    /**\n+     * Parse optional expression list.\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseOptionalExpressionsList() {\n+        STToken nextToken = peek();\n+\n+        // Return an empty list if list is empty\n+        if (isEndOfListenersList(nextToken.kind)) {\n+            return STNodeFactory.createNodeList(new ArrayList<>());\n+        }\n+        return parseListeners();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "103fa42a98705f6708f3699693077e2f345192a2"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ4NDU0OA==", "bodyText": "I think we would need two contexts, to make error recovery easy. For example, end of the listeners-list is the {, whereas end of the list constructor is ].\nBut +1 for reusing the same parser logic. May be we can extract the common code and re-use it?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22936#discussion_r416484548", "createdAt": "2020-04-28T09:55:37Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -6847,4 +6852,39 @@ private STNode parseTrapKeyword() {\n             return sol.recoveredNode;\n         }\n     }\n+\n+    /**\n+     * Parse list constructor expression.\n+     * <p>\n+     * <code>\n+     * list-constructor-expr := [ [ expr-list ] ]\n+     * <br/>\n+     * expr-list := expression (, expression)*\n+     * </code>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseListConstructorExpr() {\n+        startContext(ParserRuleContext.LIST_CONSTRUCTOR);\n+        STNode openBracket = parseOpenBracket();\n+        STNode expressions = parseOptionalExpressionsList();\n+        STNode closeBracket = parseCloseBracket();\n+        endContext();\n+        return STNodeFactory.createListConstructorExpressionNode(openBracket, expressions, closeBracket);\n+    }\n+\n+    /**\n+     * Parse optional expression list.\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseOptionalExpressionsList() {\n+        STToken nextToken = peek();\n+\n+        // Return an empty list if list is empty\n+        if (isEndOfListenersList(nextToken.kind)) {\n+            return STNodeFactory.createNodeList(new ArrayList<>());\n+        }\n+        return parseListeners();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ0MzIzNw=="}, "originalCommit": {"oid": "103fa42a98705f6708f3699693077e2f345192a2"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MTI4NTExOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMDoxNTowNFrOGNM8ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMDoxNTowNFrOGNM8ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ5Njc2Mw==", "bodyText": "{ ParserRuleContext.CLOSE_BRACKET, ParserRuleContext.EXPRESSION }", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22936#discussion_r416496763", "createdAt": "2020-04-28T10:15:04Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -261,6 +261,9 @@\n     private static final ParserRuleContext[] TYPEDESC_RHS = {ParserRuleContext.NON_RECURSIVE_TYPE,\n             ParserRuleContext.ARRAY_TYPE_DESCRIPTOR, ParserRuleContext.OPTIONAL_TYPE_DESCRIPTOR };\n \n+    private static final ParserRuleContext[] LIST_CONSTRUCTOR_RHS =\n+            { ParserRuleContext.CLOSE_BRACKET, ParserRuleContext.LISTENERS_LIST };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "103fa42a98705f6708f3699693077e2f345192a2"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MTI5NTQyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMDoxNzo0MVrOGNNCmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMDo1NDoxNlrOGNOVBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ5ODMzMA==", "bodyText": "Can a close-brace be present in a list-constructor context?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22936#discussion_r416498330", "createdAt": "2020-04-28T10:17:41Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -2297,14 +2309,16 @@ private ParserRuleContext getNextRuleForCloseBrace(int nextLookahead) {\n             case FORK_STMT:\n                 endContext(); // end fork-statement\n                 return ParserRuleContext.STATEMENT;\n+            case LIST_CONSTRUCTOR:\n+                return ParserRuleContext.CLOSE_BRACKET;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "103fa42a98705f6708f3699693077e2f345192a2"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjUxOTQyOQ==", "bodyText": "This is a mistaken addition from a previous commit of mine. I'll fix.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22936#discussion_r416519429", "createdAt": "2020-04-28T10:54:16Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -2297,14 +2309,16 @@ private ParserRuleContext getNextRuleForCloseBrace(int nextLookahead) {\n             case FORK_STMT:\n                 endContext(); // end fork-statement\n                 return ParserRuleContext.STATEMENT;\n+            case LIST_CONSTRUCTOR:\n+                return ParserRuleContext.CLOSE_BRACKET;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ5ODMzMA=="}, "originalCommit": {"oid": "103fa42a98705f6708f3699693077e2f345192a2"}, "originalPosition": 243}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3816, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}