{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2NjE2Mjc5", "number": 25778, "title": "Add parser changes for isolated objects", "bodyText": "Purpose\n\nAdd isolated qualifier support for module-class-defn and object-type-descriptor\n\nFixes #25569\nApproach\nN/A\nSamples\nN/A\nRemarks\nN/A\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-09-14T13:26:30Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25778", "merged": true, "mergeCommit": {"oid": "757f1a84dff2ff4d238b577a39c11bb4a1aa3d77"}, "closed": true, "closedAt": "2020-09-30T12:30:46Z", "author": {"login": "lochana-chathura"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdIzBtHgH2gAyNDg2NjE2Mjc5Ojg0YjIwMjA0NjRlYmUzYThkYTljNzRmNDJjNmJjNTAxZjllYWM0OGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdN7-KigFqTQ5OTM3NjUyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "84b2020464ebe3a8da9c74f42c6bc501f9eac48a", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/84b2020464ebe3a8da9c74f42c6bc501f9eac48a", "committedDate": "2020-09-14T13:15:39Z", "message": "Add parser changes for isolated objects"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "946e71758a33c93b1b9f24a5dfc2829b6a847c1b", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/946e71758a33c93b1b9f24a5dfc2829b6a847c1b", "committedDate": "2020-09-14T13:19:45Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into isolated-objects\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5Mjg5Njc4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25778#pullrequestreview-489289678", "createdAt": "2020-09-16T05:42:10Z", "commit": {"oid": "946e71758a33c93b1b9f24a5dfc2829b6a847c1b"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MzQxNDY1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25778#pullrequestreview-489341465", "createdAt": "2020-09-16T07:21:38Z", "commit": {"oid": "946e71758a33c93b1b9f24a5dfc2829b6a847c1b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzoyMTozOFrOHSjfiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzoyMTozOFrOHSjfiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIxNzkyOA==", "bodyText": "Lets remove this, if its no longer needed.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25778#discussion_r489217928", "createdAt": "2020-09-16T07:21:38Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -1022,7 +1022,8 @@ public BLangNode transform(ObjectFieldNode objFieldNode) {\n         Optional<Node> doc = getDocumentationString(objFieldNode.metadata());\n         simpleVar.markdownDocumentationAttachment = createMarkdownDocumentationAttachment(doc);\n \n-        addRedonlyQualifier(objFieldNode.readonlyKeyword(), objFieldNode.typeName(), simpleVar);\n+        // TODO: add changes for `final`\n+//        addRedonlyQualifier(objFieldNode.readonlyKeyword(), objFieldNode.typeName(), simpleVar);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "946e71758a33c93b1b9f24a5dfc2829b6a847c1b"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0720ea62a256a9100968811ea1fe2b5e590c1bf0", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0720ea62a256a9100968811ea1fe2b5e590c1bf0", "committedDate": "2020-09-16T13:32:07Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into isolated-objects\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d215f5c708264d7f981f3e975cee7c668f7dace6", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d215f5c708264d7f981f3e975cee7c668f7dace6", "committedDate": "2020-09-16T16:05:48Z", "message": "Fix conflicts with upstream changes and refactor code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4e56868b4c1d801b79773b267ffd0c8cae59f306", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4e56868b4c1d801b79773b267ffd0c8cae59f306", "committedDate": "2020-09-16T15:58:25Z", "message": "Fix conflicts with upstream changes and refactor code"}, "afterCommit": {"oid": "d215f5c708264d7f981f3e975cee7c668f7dace6", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d215f5c708264d7f981f3e975cee7c668f7dace6", "committedDate": "2020-09-16T16:05:48Z", "message": "Fix conflicts with upstream changes and refactor code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bdca1f6d7b4d068b6dc2cfedf8050640eeff622", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8bdca1f6d7b4d068b6dc2cfedf8050640eeff622", "committedDate": "2020-09-16T16:39:56Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into isolated-objects"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6b5631614ea2901ecbb7a270f607d77b2abada3", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d6b5631614ea2901ecbb7a270f607d77b2abada3", "committedDate": "2020-09-18T05:07:40Z", "message": "Add few object type tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80df0c57ff42a75830e04382dccdcbeb0e425c73", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/80df0c57ff42a75830e04382dccdcbeb0e425c73", "committedDate": "2020-09-22T13:58:50Z", "message": "Fix isolated object conflicts with isolated func upstream changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f746d0bb62bab96caa0253aeed4992bfc3fa397", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9f746d0bb62bab96caa0253aeed4992bfc3fa397", "committedDate": "2020-09-22T13:59:19Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into isolated-objects"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "761dcb60e0ee15cbdd2a9a5045242b961b7e6573", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/761dcb60e0ee15cbdd2a9a5045242b961b7e6573", "committedDate": "2020-09-18T12:35:23Z", "message": "Temporary commit stashed changes"}, "afterCommit": {"oid": "9f746d0bb62bab96caa0253aeed4992bfc3fa397", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9f746d0bb62bab96caa0253aeed4992bfc3fa397", "committedDate": "2020-09-22T13:59:19Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into isolated-objects"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebb4f58b6ce5899f9fb7fbeb72b3e7d21014ea3a", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ebb4f58b6ce5899f9fb7fbeb72b3e7d21014ea3a", "committedDate": "2020-09-23T04:04:22Z", "message": "Temporary disable failing LS tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0MDI0NTcy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25778#pullrequestreview-494024572", "createdAt": "2020-09-23T04:11:32Z", "commit": {"oid": "ebb4f58b6ce5899f9fb7fbeb72b3e7d21014ea3a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNDoxMTozM1rOHWVqkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwNDoxMTozM1rOHWVqkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzE4NTY4Mg==", "bodyText": "Can we create an issue to track this test disabling?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25778#discussion_r493185682", "createdAt": "2020-09-23T04:11:33Z", "author": {"login": "nadeeshaan"}, "path": "language-server/modules/langserver-core/src/test/java/org/ballerinalang/langserver/completion/latest/ClassDefContextTest.java", "diffHunk": "@@ -41,6 +41,6 @@ public String getTestResourceDir() {\n \n     @Override\n     public List<String> skipList() {\n-        return Arrays.asList(\"config3.json\", \"config8.json\");\n+        return Arrays.asList(\"config3.json\", \"config8.json\", \"config12.json\", \"config13.json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb4f58b6ce5899f9fb7fbeb72b3e7d21014ea3a"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83ba2ff80e90b45c9c3517358d4b88186c30ee98", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/83ba2ff80e90b45c9c3517358d4b88186c30ee98", "committedDate": "2020-09-23T04:27:02Z", "message": "Fix object_type_def_assert_24.json for EOF new line"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MTY2OTU1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25778#pullrequestreview-497166955", "createdAt": "2020-09-28T03:31:58Z", "commit": {"oid": "83ba2ff80e90b45c9c3517358d4b88186c30ee98"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMzozMTo1OVrOHYtbqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMzozMjowNFrOHYtbtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY3MjIzNQ==", "bodyText": "Similar to the prev one, I think we don't need the parseObjectTypeQualifiers() method", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25778#discussion_r495672235", "createdAt": "2020-09-28T03:31:59Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4625,56 +4662,150 @@ private STNode parseObjectConstructorExpression(STNode annots) {\n \n     /**\n      * <p>\n-     * Parse object type qualifiers.\n+     * Parse object constructor qualifiers.\n      * </p>\n-     * <code>object-type-qualifiers := [client]</code>\n+     * <code>object-constructor-qualifier := [client]</code>\n      *\n      * @return Parsed node\n      */\n-    private STNode parseObjectTypeQualifiers() {\n+    private STNode parseObjectConstructorQualifiers() {\n+        STToken nextToken = peek();\n+        STToken firstQualifier;\n+        switch (nextToken.kind) {\n+            case CLIENT_KEYWORD:\n+                firstQualifier = consume();\n+                break;\n+            case READONLY_KEYWORD:\n+            case ABSTRACT_KEYWORD:\n+            case ISOLATED_KEYWORD:\n+                // Here we allow parsing of old object type qualifiers (`abstract` and `readonly`)\n+                // and then log an error\n+                firstQualifier = consume();\n+                addInvalidNodeToNextToken(firstQualifier, DiagnosticErrorCode.ERROR_QUALIFIER_NOT_ALLOWED,\n+                        firstQualifier.text());\n+                return parseObjectConstructorQualifiers();\n+            case OBJECT_KEYWORD:\n+                return STNodeFactory.createEmptyNodeList();\n+            default:\n+                recover(nextToken, ParserRuleContext.OBJECT_CONSTRUCTOR_QUALIFIER);\n+                return parseObjectConstructorQualifiers();\n+        }\n+\n+        return parseObjectConstructorNextQualifiers(firstQualifier);\n+    }\n+\n+    private STNode parseObjectConstructorNextQualifiers(STNode firstQualifier) {\n         List<STNode> qualifiers = new ArrayList<>();\n-        STNode qualifier;\n-        DiagnosticErrorCode errorCode = null;\n-        boolean hasClient = false;\n+        qualifiers.add(firstQualifier);\n \n-        // Here we allow parsing of old object type qualifiers (`abstract` and `readonly`) and then log an error\n-        for (int i = 0; i < 3; i++) {\n+        // Parse remaining qualifiers\n+        for (int i = 0; i < 2; i++) {\n             STToken nextToken = peek();\n+            if (isNodeWithSyntaxKindInList(qualifiers, nextToken.kind)) {\n+                // Consume the nextToken\n+                nextToken = consume();\n+                updateLastNodeInListWithInvalidNode(qualifiers, nextToken,\n+                        DiagnosticErrorCode.ERROR_DUPLICATE_QUALIFIER, nextToken.text());\n+                continue;\n+            }\n+\n+            STToken nextQualifier;\n             switch (nextToken.kind) {\n                 case CLIENT_KEYWORD:\n-                    qualifier = consume();\n-                    if (hasClient) {\n-                        errorCode = DiagnosticErrorCode.ERROR_DUPLICATE_OBJECT_TYPE_QUALIFIER;\n-                    } else {\n-                        qualifiers.add(qualifier);\n-                        hasClient = true;\n-                    }\n-                    break;\n-                case ABSTRACT_KEYWORD:\n-                    qualifier = consume();\n-                    errorCode = DiagnosticErrorCode.ERROR_ABSTRACT_QUALIFIER_NOT_ALLOWED_IN_OBJECT;\n+                    nextQualifier = consume();\n                     break;\n                 case READONLY_KEYWORD:\n-                    qualifier = consume();\n-                    errorCode = DiagnosticErrorCode.ERROR_READONLY_QUALIFIER_NOT_ALLOWED_IN_OBJECT;\n-                    break;\n+                case ABSTRACT_KEYWORD:\n+                case ISOLATED_KEYWORD:\n+                    // Here we allow parsing of old object type qualifiers (`abstract` and `readonly`)\n+                    // and then log an error\n+                    nextQualifier = consume();\n+                    updateLastNodeInListWithInvalidNode(qualifiers, nextQualifier,\n+                            DiagnosticErrorCode.ERROR_QUALIFIER_NOT_ALLOWED, nextQualifier.text());\n+                    continue;\n                 case OBJECT_KEYWORD:\n                 default:\n                     return STNodeFactory.createNodeList(qualifiers);\n             }\n+            qualifiers.add(nextQualifier);\n+        }\n \n-            if (errorCode != null) {\n-                if (qualifiers.size() > 0) {\n-                    updateLastNodeInListWithInvalidNode(qualifiers, qualifier, errorCode);\n-                } else {\n-                    addInvalidNodeToNextToken(qualifier, errorCode);\n-                }\n-                errorCode = null;\n+        return STNodeFactory.createNodeList(qualifiers);\n+    }\n+\n+    /**\n+     * <p>\n+     * Parse object type descriptor qualifiers.\n+     * </p>\n+     * <code>object-type-descriptor-qualifiers := (client | isolated)*</code>\n+     *\n+     * @return Parsed node\n+     */\n+    private STNode parseObjectTypeQualifiers() {\n+        STToken nextToken = peek();\n+        STToken firstQualifier;\n+        switch (nextToken.kind) {\n+            case CLIENT_KEYWORD:\n+            case ISOLATED_KEYWORD:\n+                firstQualifier = consume();\n+                break;\n+            case READONLY_KEYWORD:\n+            case ABSTRACT_KEYWORD:\n+                // Here we allow parsing of old object type qualifiers (`abstract` and `readonly`)\n+                // and then log an error\n+                firstQualifier = consume();\n+                addInvalidNodeToNextToken(firstQualifier, DiagnosticErrorCode.ERROR_QUALIFIER_NOT_ALLOWED,\n+                        firstQualifier.text());\n+                return parseObjectTypeQualifiers();\n+            case OBJECT_KEYWORD:\n+                return STNodeFactory.createEmptyNodeList();\n+            default:\n+                recover(nextToken, ParserRuleContext.OBJECT_TYPE_QUALIFIER);\n+                return parseObjectTypeQualifiers();\n+        }\n+\n+        return parseObjectTypeNextQualifiers(firstQualifier);\n+    }\n+\n+    private STNode parseObjectTypeNextQualifiers(STNode firstQualifier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83ba2ff80e90b45c9c3517358d4b88186c30ee98"}, "originalPosition": 322}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY3MjI0Ng==", "bodyText": "Do we need two methods?\nI think the one with the loop would be sufficient to handle all cases.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25778#discussion_r495672246", "createdAt": "2020-09-28T03:32:04Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -4625,56 +4662,150 @@ private STNode parseObjectConstructorExpression(STNode annots) {\n \n     /**\n      * <p>\n-     * Parse object type qualifiers.\n+     * Parse object constructor qualifiers.\n      * </p>\n-     * <code>object-type-qualifiers := [client]</code>\n+     * <code>object-constructor-qualifier := [client]</code>\n      *\n      * @return Parsed node\n      */\n-    private STNode parseObjectTypeQualifiers() {\n+    private STNode parseObjectConstructorQualifiers() {\n+        STToken nextToken = peek();\n+        STToken firstQualifier;\n+        switch (nextToken.kind) {\n+            case CLIENT_KEYWORD:\n+                firstQualifier = consume();\n+                break;\n+            case READONLY_KEYWORD:\n+            case ABSTRACT_KEYWORD:\n+            case ISOLATED_KEYWORD:\n+                // Here we allow parsing of old object type qualifiers (`abstract` and `readonly`)\n+                // and then log an error\n+                firstQualifier = consume();\n+                addInvalidNodeToNextToken(firstQualifier, DiagnosticErrorCode.ERROR_QUALIFIER_NOT_ALLOWED,\n+                        firstQualifier.text());\n+                return parseObjectConstructorQualifiers();\n+            case OBJECT_KEYWORD:\n+                return STNodeFactory.createEmptyNodeList();\n+            default:\n+                recover(nextToken, ParserRuleContext.OBJECT_CONSTRUCTOR_QUALIFIER);\n+                return parseObjectConstructorQualifiers();\n+        }\n+\n+        return parseObjectConstructorNextQualifiers(firstQualifier);\n+    }\n+\n+    private STNode parseObjectConstructorNextQualifiers(STNode firstQualifier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83ba2ff80e90b45c9c3517358d4b88186c30ee98"}, "originalPosition": 223}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4f4469b6ec5436eba7dda21f85961e80ab7cc6ad", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4f4469b6ec5436eba7dda21f85961e80ab7cc6ad", "committedDate": "2020-09-28T06:29:33Z", "message": "Revamp object and class qualifier parsing"}, "afterCommit": {"oid": "a8a48d15cb7464207dd856127090397ed99e500a", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a8a48d15cb7464207dd856127090397ed99e500a", "committedDate": "2020-09-28T07:19:31Z", "message": "Revamp object and class qualifier parsing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d51435f5f021e219ef0e366b9fb128e00c4f716", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9d51435f5f021e219ef0e366b9fb128e00c4f716", "committedDate": "2020-09-28T07:27:03Z", "message": "Revamp object and class qualifier parsing"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a8a48d15cb7464207dd856127090397ed99e500a", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a8a48d15cb7464207dd856127090397ed99e500a", "committedDate": "2020-09-28T07:19:31Z", "message": "Revamp object and class qualifier parsing"}, "afterCommit": {"oid": "9d51435f5f021e219ef0e366b9fb128e00c4f716", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9d51435f5f021e219ef0e366b9fb128e00c4f716", "committedDate": "2020-09-28T07:27:03Z", "message": "Revamp object and class qualifier parsing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5Mzc2NTI1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25778#pullrequestreview-499376525", "createdAt": "2020-09-30T12:30:33Z", "commit": {"oid": "9d51435f5f021e219ef0e366b9fb128e00c4f716"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4738, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}