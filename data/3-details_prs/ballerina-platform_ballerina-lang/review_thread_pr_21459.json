{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMzM5MjEw", "number": 21459, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjowNjowN1rODk69eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwODoyNTo1MlrODk8yjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDQxMzM4OnYy", "diffSide": "RIGHT", "path": "langlib/lang.map/src/main/java/org/ballerinalang/langlib/map/RemoveIfHasKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjowNjowN1rOFxg89Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNjozOToyOFrOFxhf6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2NDQzNw==", "bodyText": "Shall we add @since annotation for this?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21459#discussion_r387464437", "createdAt": "2020-03-04T06:06:07Z", "author": {"login": "anupama-pathirage"}, "path": "langlib/lang.map/src/main/java/org/ballerinalang/langlib/map/RemoveIfHasKey.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.langlib.map;\n+\n+import org.ballerinalang.jvm.BallerinaErrors;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import static org.ballerinalang.jvm.MapUtils.checkIsMapOnlyOperation;\n+import static org.ballerinalang.jvm.MapUtils.checkValidFieldForRecord;\n+\n+/**\n+ * Extern function to remove element from the map if key exists.\n+ * ballerina.model.map:removeIfHasKey(string)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b7aca57f46737731b1a532b175cf0022d7c3760"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ3MzM4Nw==", "bodyText": "Added.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21459#discussion_r387473387", "createdAt": "2020-03-04T06:39:28Z", "author": {"login": "KavinduZoysa"}, "path": "langlib/lang.map/src/main/java/org/ballerinalang/langlib/map/RemoveIfHasKey.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.langlib.map;\n+\n+import org.ballerinalang.jvm.BallerinaErrors;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import static org.ballerinalang.jvm.MapUtils.checkIsMapOnlyOperation;\n+import static org.ballerinalang.jvm.MapUtils.checkValidFieldForRecord;\n+\n+/**\n+ * Extern function to remove element from the map if key exists.\n+ * ballerina.model.map:removeIfHasKey(string)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ2NDQzNw=="}, "originalCommit": {"oid": "0b7aca57f46737731b1a532b175cf0022d7c3760"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDcwODk4OnYy", "diffSide": "RIGHT", "path": "langlib/lang.map/src/main/java/org/ballerinalang/langlib/map/RemoveIfHasKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwODoyNDoyOFrOFxjung==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNDoyNjoxM1rOFyGDfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUwOTkxOA==", "bodyText": "Shall we move this to a constant?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21459#discussion_r387509918", "createdAt": "2020-03-04T08:24:28Z", "author": {"login": "pubudu91"}, "path": "langlib/lang.map/src/main/java/org/ballerinalang/langlib/map/RemoveIfHasKey.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.langlib.map;\n+\n+import org.ballerinalang.jvm.BallerinaErrors;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import static org.ballerinalang.jvm.MapUtils.checkIsMapOnlyOperation;\n+import static org.ballerinalang.jvm.MapUtils.checkValidFieldForRecord;\n+\n+/**\n+ * Extern function to remove element from the map if key exists.\n+ * ballerina.model.map:removeIfHasKey(string)\n+ *\n+ * @since 1.2.0\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.map\", functionName = \"removeIfHasKey\",\n+        args = {@Argument(name = \"m\", type = TypeKind.MAP), @Argument(name = \"k\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.ANY)},\n+        isPublic = true\n+)\n+public class RemoveIfHasKey {\n+\n+    public static Object removeIfHasKey(Strand strand, MapValue<?, ?> m, String k) {\n+        String op = \"removeIfHasKey()\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9894e6269d1c2e2f20b1c5399bc79c5b75a49211"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA3MjMxNg==", "bodyText": "Added.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21459#discussion_r388072316", "createdAt": "2020-03-05T04:26:13Z", "author": {"login": "KavinduZoysa"}, "path": "langlib/lang.map/src/main/java/org/ballerinalang/langlib/map/RemoveIfHasKey.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.langlib.map;\n+\n+import org.ballerinalang.jvm.BallerinaErrors;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import static org.ballerinalang.jvm.MapUtils.checkIsMapOnlyOperation;\n+import static org.ballerinalang.jvm.MapUtils.checkValidFieldForRecord;\n+\n+/**\n+ * Extern function to remove element from the map if key exists.\n+ * ballerina.model.map:removeIfHasKey(string)\n+ *\n+ * @since 1.2.0\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.map\", functionName = \"removeIfHasKey\",\n+        args = {@Argument(name = \"m\", type = TypeKind.MAP), @Argument(name = \"k\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.ANY)},\n+        isPublic = true\n+)\n+public class RemoveIfHasKey {\n+\n+    public static Object removeIfHasKey(Strand strand, MapValue<?, ?> m, String k) {\n+        String op = \"removeIfHasKey()\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUwOTkxOA=="}, "originalCommit": {"oid": "9894e6269d1c2e2f20b1c5399bc79c5b75a49211"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDcxMzEwOnYy", "diffSide": "RIGHT", "path": "langlib/lang.map/src/main/java/org/ballerinalang/langlib/map/RemoveIfHasKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwODoyNTo1MlrOFxjxIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwNDoyNjoxNlrOFyGDhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUxMDU2MA==", "bodyText": "Need to verify whether this is consistent with how freeze panics are handled in other places. (i.e., the error message and its format)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21459#discussion_r387510560", "createdAt": "2020-03-04T08:25:52Z", "author": {"login": "pubudu91"}, "path": "langlib/lang.map/src/main/java/org/ballerinalang/langlib/map/RemoveIfHasKey.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.langlib.map;\n+\n+import org.ballerinalang.jvm.BallerinaErrors;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import static org.ballerinalang.jvm.MapUtils.checkIsMapOnlyOperation;\n+import static org.ballerinalang.jvm.MapUtils.checkValidFieldForRecord;\n+\n+/**\n+ * Extern function to remove element from the map if key exists.\n+ * ballerina.model.map:removeIfHasKey(string)\n+ *\n+ * @since 1.2.0\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.map\", functionName = \"removeIfHasKey\",\n+        args = {@Argument(name = \"m\", type = TypeKind.MAP), @Argument(name = \"k\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.ANY)},\n+        isPublic = true\n+)\n+public class RemoveIfHasKey {\n+\n+    public static Object removeIfHasKey(Strand strand, MapValue<?, ?> m, String k) {\n+        String op = \"removeIfHasKey()\";\n+\n+        checkIsMapOnlyOperation(m.getType(), op);\n+        checkValidFieldForRecord(m, k, op);\n+        try {\n+            return m.remove(k);\n+        } catch (org.ballerinalang.jvm.util.exceptions.BLangFreezeException e) {\n+            throw BallerinaErrors.createError(e.getMessage(),\n+                    \"Failed to remove element from map: \" + e.getDetail());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9894e6269d1c2e2f20b1c5399bc79c5b75a49211"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODA3MjMyNg==", "bodyText": "Yes, this is consistent with other places where the freeze panics are handled.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21459#discussion_r388072326", "createdAt": "2020-03-05T04:26:16Z", "author": {"login": "KavinduZoysa"}, "path": "langlib/lang.map/src/main/java/org/ballerinalang/langlib/map/RemoveIfHasKey.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.langlib.map;\n+\n+import org.ballerinalang.jvm.BallerinaErrors;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+\n+import static org.ballerinalang.jvm.MapUtils.checkIsMapOnlyOperation;\n+import static org.ballerinalang.jvm.MapUtils.checkValidFieldForRecord;\n+\n+/**\n+ * Extern function to remove element from the map if key exists.\n+ * ballerina.model.map:removeIfHasKey(string)\n+ *\n+ * @since 1.2.0\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.map\", functionName = \"removeIfHasKey\",\n+        args = {@Argument(name = \"m\", type = TypeKind.MAP), @Argument(name = \"k\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.ANY)},\n+        isPublic = true\n+)\n+public class RemoveIfHasKey {\n+\n+    public static Object removeIfHasKey(Strand strand, MapValue<?, ?> m, String k) {\n+        String op = \"removeIfHasKey()\";\n+\n+        checkIsMapOnlyOperation(m.getType(), op);\n+        checkValidFieldForRecord(m, k, op);\n+        try {\n+            return m.remove(k);\n+        } catch (org.ballerinalang.jvm.util.exceptions.BLangFreezeException e) {\n+            throw BallerinaErrors.createError(e.getMessage(),\n+                    \"Failed to remove element from map: \" + e.getDetail());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUxMDU2MA=="}, "originalCommit": {"oid": "9894e6269d1c2e2f20b1c5399bc79c5b75a49211"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 901, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}