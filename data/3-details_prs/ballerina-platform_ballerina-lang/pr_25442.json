{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczOTU4NDQ2", "number": 25442, "title": "Fix taint analysis not working with raw templates generated from a query", "bodyText": "Purpose\n\n$title\n\nFixes #25318\nApproach\n\nDescribe how you are implementing the solutions along with the design details.\n\nSamples\n\nProvide high-level details about the samples related to this feature.\n\nRemarks\n\nList any other known issues, related PRs, TODO items, or any other notes related to the PR.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-08-26T14:46:00Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25442", "merged": true, "mergeCommit": {"oid": "6a4102c679fe80e381a2cc03308fdb2ca705dfac"}, "closed": true, "closedAt": "2020-08-27T14:47:50Z", "author": {"login": "lasinicl"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCs4plgH2gAyNDczOTU4NDQ2OmY3YWI1YTgwODdkMTk1NDE1NGJlNGQ5MzgyOTZmNzQ1ZWIyYzAwZjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdDBjgrAFqTQ3Njc5Njg3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f7ab5a8087d1954154be4d938296f745eb2c00f1", "author": {"user": {"login": "lasinicl", "name": "Lasini Liyange"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f7ab5a8087d1954154be4d938296f745eb2c00f1", "committedDate": "2020-08-26T14:42:47Z", "message": "Improve taint checking in query expression"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13b46453ef7fa5331eb98386f8896847cc4c61b1", "author": {"user": {"login": "lasinicl", "name": "Lasini Liyange"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/13b46453ef7fa5331eb98386f8896847cc4c61b1", "committedDate": "2020-08-27T04:44:37Z", "message": "Refactor tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2Mzg0NTIy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25442#pullrequestreview-476384522", "createdAt": "2020-08-27T04:55:42Z", "commit": {"oid": "13b46453ef7fa5331eb98386f8896847cc4c61b1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNDo1NTo0MlrOHH99Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNToxMTowM1rOHH-k6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODExNzIyMw==", "bodyText": "Do we need this if-else code block? It seems, both blocks look similar.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25442#discussion_r478117223", "createdAt": "2020-08-27T04:55:42Z", "author": {"login": "mohanvive"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TaintAnalyzer.java", "diffHunk": "@@ -1634,7 +1635,19 @@ public void visit(BLangIndexBasedAccess.BLangStringAccessExpr stringAccessExpr)\n \n     @Override\n     public void visit(BLangQueryExpr queryExpr) {\n-        /* ignore */\n+        BLangInputClause inputClause = (BLangInputClause) queryExpr.getQueryClauses().get(0);\n+        for (BLangNode clause : queryExpr.getQueryClauses()) {\n+            if (clause.getKind() == NodeKind.FROM) {\n+                inputClause  = (BLangInputClause) clause;\n+            } else if (clause.getKind() == NodeKind.JOIN) {\n+                inputClause = (BLangInputClause) clause;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13b46453ef7fa5331eb98386f8896847cc4c61b1"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODExOTIxMw==", "bodyText": "Better to deleteFiles within the finally block.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25442#discussion_r478119213", "createdAt": "2020-08-27T04:58:31Z", "author": {"login": "mohanvive"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/query/QueryTaintAnalysisNegativeTests.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+package org.ballerinalang.test.query;\n+\n+import org.ballerinalang.model.values.BString;\n+import org.ballerinalang.model.values.BValue;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.ballerinalang.test.utils.SQLDBUtils;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.sql.SQLException;\n+\n+import static org.ballerinalang.test.util.BAssertUtil.validateError;\n+\n+/**\n+ * This contains negative tests for taint checking in query expression.\n+ *\n+ * @since Swan Lake\n+ */\n+@Test(groups = {\"disableOnOldParser\"})\n+public class QueryTaintAnalysisNegativeTests {\n+    private CompileResult negativeResult;\n+    private static final String DB_NAME = \"TEST_QUERY_TAINT_ANALYSIS\";\n+    private static final String JDBC_URL = \"jdbc:h2:file:\" + SQLDBUtils.DB_DIR + DB_NAME;\n+    private BValue[] args = {new BString(JDBC_URL), new BString(SQLDBUtils.DB_USER),\n+            new BString(SQLDBUtils.DB_PASSWORD)};\n+\n+    @BeforeClass\n+    public void setup() throws SQLException {\n+        negativeResult = BCompileUtil.compileOffline(SQLDBUtils.getBalFilesDir(\"query\",\n+                \"query-taint-analysis-negative.bal\"));\n+        SQLDBUtils.deleteFiles(new File(SQLDBUtils.DB_DIR), DB_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13b46453ef7fa5331eb98386f8896847cc4c61b1"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODEyNjM2MQ==", "bodyText": "Please provide the path with the error message.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25442#discussion_r478126361", "createdAt": "2020-08-27T05:09:38Z", "author": {"login": "mohanvive"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/utils/SQLDBUtils.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.test.utils;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.ballerinalang.model.values.BError;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.Assert;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.FileVisitOption;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Comparator;\n+\n+/**\n+ * Util class for query tests with SQL DB.\n+ *\n+ * @since Swan Lake\n+ */\n+public class SQLDBUtils {\n+    private static final Logger log = LoggerFactory.getLogger(SQLDBUtils.class);\n+\n+    public static final String DB_DIR = Paths.get(\".\", \"target\", \"tempdb\").toString() + File.separator;\n+    public static final String DB_USER = \"sa\";\n+    public static final String DB_PASSWORD = \"\";\n+    public static final String SQL_APPLICATION_ERROR_REASON = \"{ballerina/sql}ApplicationError\";\n+    public static final String SQL_ERROR_MESSAGE = \"message\";\n+\n+    /**\n+     * Create H2 DB with the given name and initialize with given SQL file.\n+     *\n+     * @param dbDirectory Name of the DB directory.\n+     * @param dbName      Name of the DB instance.\n+     * @param sqlFile     SQL statements for initialization.\n+     */\n+    public static void initH2Database(String dbDirectory, String dbName, String sqlFile) throws SQLException {\n+        String jdbcURL = \"jdbc:h2:file:\" + dbDirectory + dbName;\n+        initDatabase(jdbcURL, DB_USER, DB_PASSWORD, sqlFile);\n+    }\n+\n+    /**\n+     * Create a DB and initialize with given SQL file.\n+     *\n+     * @param jdbcURL  JDBC URL\n+     * @param username Username for the DB\n+     * @param password Password to connect to the DB\n+     * @param sqlFile  SQL statements for initialization.\n+     */\n+    private static void initDatabase(String jdbcURL, String username, String password, String sqlFile)\n+            throws SQLException {\n+        Connection connection = DriverManager.getConnection(jdbcURL, username, password);\n+        Statement st = connection.createStatement();\n+        String sql = readFileToString(sqlFile);\n+        String[] sqlQuery = sql.trim().split(\"/\");\n+        for (String query : sqlQuery) {\n+            st.executeUpdate(query.trim());\n+        }\n+        if (!connection.getAutoCommit()) {\n+            connection.commit();\n+        }\n+        connection.close();\n+    }\n+\n+    /**\n+     * Delete the given directory along with all files and sub directories.\n+     *\n+     * @param directory Directory to delete.\n+     */\n+    public static void deleteDirectory(File directory) {\n+        try {\n+            Files.walk(directory.toPath(), FileVisitOption.FOLLOW_LINKS)\n+                    .sorted(Comparator.reverseOrder()).map(Path::toFile).forEach(File::delete);\n+        } catch (IOException e) {\n+            log.error(\"Error while deleting database directory: \", e);\n+        }\n+    }\n+\n+    /**\n+     * Delete all the files and sub directories which matches given prefix in a given directory.\n+     *\n+     * @param directory Directory which contains files to delete.\n+     * @param affix     Affix for finding the matching files to delete.\n+     */\n+    public static void deleteFiles(File directory, String affix) {\n+        if (!directory.isDirectory()) {\n+            return;\n+        }\n+\n+        for (File f : directory.listFiles()) {\n+            if (f.getName().startsWith(affix) || f.getName().endsWith(affix)) {\n+                deleteDirectory(f);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Resolve the the path of the resource file.\n+     *\n+     * @param fileName Name of the resource file\n+     * @return Absolute path of the resource file\n+     */\n+    public static Path getResourcePath(String fileName) {\n+        return Paths.get(\"src\", \"test\", \"resources\", fileName).toAbsolutePath();\n+    }\n+\n+    private static String readFileToString(String path) {\n+        // The name of a resource is a '/'-separated path name that identifies the resource.\n+        // Hence regardless of the separator corresponding to the OS forward slash should be used.\n+        URL fileResource = BCompileUtil.class.getClassLoader().getResource(path.replace(\"\\\\\", \"/\"));\n+        try {\n+            return FileUtils.readFileToString(new File(fileResource.toURI()), StandardCharsets.UTF_8);\n+        } catch (IOException | URISyntaxException e) {\n+            log.error(\"File reading failed\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13b46453ef7fa5331eb98386f8896847cc4c61b1"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODEyNzMzOA==", "bodyText": "Can you please write a testcase for happy path as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25442#discussion_r478127338", "createdAt": "2020-08-27T05:11:03Z", "author": {"login": "mohanvive"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/query/QueryTaintAnalysisNegativeTests.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13b46453ef7fa5331eb98386f8896847cc4c61b1"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da5a67ff4c101422c38726dc2096502be86824ce", "author": {"user": {"login": "lasinicl", "name": "Lasini Liyange"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/da5a67ff4c101422c38726dc2096502be86824ce", "committedDate": "2020-08-27T08:33:11Z", "message": "Add suggested changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "041e45a6b7d6b0a7b54d79d1e899f3d03e0687ac", "author": {"user": {"login": "lasinicl", "name": "Lasini Liyange"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/041e45a6b7d6b0a7b54d79d1e899f3d03e0687ac", "committedDate": "2020-08-27T08:49:55Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into fix-25318"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46683da0ac36d646124989a2cb30feb1e037d2d1", "author": {"user": {"login": "lasinicl", "name": "Lasini Liyange"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/46683da0ac36d646124989a2cb30feb1e037d2d1", "committedDate": "2020-08-27T10:31:50Z", "message": "Fix checkstyle issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a04c733c83103561ea9b49c9f9f85a5dc46cb717", "author": {"user": {"login": "lasinicl", "name": "Lasini Liyange"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a04c733c83103561ea9b49c9f9f85a5dc46cb717", "committedDate": "2020-08-27T12:18:30Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into fix-25318"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2Nzk2ODc0", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25442#pullrequestreview-476796874", "createdAt": "2020-08-27T14:47:42Z", "commit": {"oid": "a04c733c83103561ea9b49c9f9f85a5dc46cb717"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4927, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}