{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNjM2ODIx", "number": 23114, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNDo1MTo0OVrOD5qxEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjowMjowN1rOD7gFZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzk2MTE0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNDo1MTo0OVrOGRD-IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMzo0MToxOVrOGSl8zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NDAzMw==", "bodyText": "I think theres a similar method already", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r420544033", "createdAt": "2020-05-06T04:51:49Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3463,6 +3465,28 @@ private STNode parseFuncCall(STNode identifier) {\n         return STNodeFactory.createFunctionCallExpressionNode(identifier, openParen, args, closeParen);\n     }\n \n+    /**\n+     * Parse error constructor expression.\n+     *\n+     * @return Error constructor expression\n+     */\n+    private STNode parseErrorConstructorExpr() {\n+        STNode errorKeyword = parseErrorKeyword();\n+        STNode openParen = parseOpenParenthesis();\n+        STNode args = parseArgsList();\n+        STNode closeParen = parseCloseParenthesis();\n+        return STNodeFactory.createErrorConstructorExpressionNode(errorKeyword, openParen, args, closeParen);\n+    }\n+\n+    /**\n+     * Parse error keyword.\n+     *\n+     * @return Error keyword\n+     */\n+    private STNode parseErrorKeyword() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02001a19913066eea69cd8c3d11f9d8cc5dd988d"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE0OTMyNA==", "bodyText": "Removed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r422149324", "createdAt": "2020-05-08T13:41:19Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3463,6 +3465,28 @@ private STNode parseFuncCall(STNode identifier) {\n         return STNodeFactory.createFunctionCallExpressionNode(identifier, openParen, args, closeParen);\n     }\n \n+    /**\n+     * Parse error constructor expression.\n+     *\n+     * @return Error constructor expression\n+     */\n+    private STNode parseErrorConstructorExpr() {\n+        STNode errorKeyword = parseErrorKeyword();\n+        STNode openParen = parseOpenParenthesis();\n+        STNode args = parseArgsList();\n+        STNode closeParen = parseCloseParenthesis();\n+        return STNodeFactory.createErrorConstructorExpressionNode(errorKeyword, openParen, args, closeParen);\n+    }\n+\n+    /**\n+     * Parse error keyword.\n+     *\n+     * @return Error keyword\n+     */\n+    private STNode parseErrorKeyword() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NDAzMw=="}, "originalCommit": {"oid": "02001a19913066eea69cd8c3d11f9d8cc5dd988d"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzk2MzQyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNDo1MzozMFrOGRD_Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMzo0MTozMVrOGSl9GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NDMzOA==", "bodyText": "Shall we add the grammar rule here as a doc comment? You can check other expressions for a sample.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r420544338", "createdAt": "2020-05-06T04:53:30Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3463,6 +3465,28 @@ private STNode parseFuncCall(STNode identifier) {\n         return STNodeFactory.createFunctionCallExpressionNode(identifier, openParen, args, closeParen);\n     }\n \n+    /**\n+     * Parse error constructor expression.\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02001a19913066eea69cd8c3d11f9d8cc5dd988d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE0OTQwMQ==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r422149401", "createdAt": "2020-05-08T13:41:31Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3463,6 +3465,28 @@ private STNode parseFuncCall(STNode identifier) {\n         return STNodeFactory.createFunctionCallExpressionNode(identifier, openParen, args, closeParen);\n     }\n \n+    /**\n+     * Parse error constructor expression.\n+     *", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NDMzOA=="}, "originalCommit": {"oid": "02001a19913066eea69cd8c3d11f9d8cc5dd988d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzk2OTgwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNDo1NzoyMlrOGREC9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMzo0MTo0MFrOGSl9aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NTI2OQ==", "bodyText": "Shall we rename this as FunctionalConstructorExpression?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r420545269", "createdAt": "2020-05-06T04:57:22Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "diffHunk": "@@ -698,6 +698,30 @@\n                 }\n             ]\n         },\n+        {\n+            \"name\": \"ErrorConstructorExpressionNode\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02001a19913066eea69cd8c3d11f9d8cc5dd988d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE0OTQ4MQ==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r422149481", "createdAt": "2020-05-08T13:41:40Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-treegen/src/main/resources/syntax_tree_descriptor.json", "diffHunk": "@@ -698,6 +698,30 @@\n                 }\n             ]\n         },\n+        {\n+            \"name\": \"ErrorConstructorExpressionNode\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NTI2OQ=="}, "originalCommit": {"oid": "02001a19913066eea69cd8c3d11f9d8cc5dd988d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzk2OTk3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/test/resources/expressions/error-constructor-expr/error_constructor_expr_source_01.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNDo1NzozMlrOGREDDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMzo0MTo1NVrOGSl95g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NTI5NA==", "bodyText": "Add new line", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r420545294", "createdAt": "2020-05-06T04:57:32Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/resources/expressions/error-constructor-expr/error_constructor_expr_source_01.bal", "diffHunk": "@@ -0,0 +1,3 @@\n+public function foo() {\n+    var er = error(\"ERROR_REASON\", message = \"error message\");\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02001a19913066eea69cd8c3d11f9d8cc5dd988d"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE0OTYwNg==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r422149606", "createdAt": "2020-05-08T13:41:55Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-parser/src/test/resources/expressions/error-constructor-expr/error_constructor_expr_source_01.bal", "diffHunk": "@@ -0,0 +1,3 @@\n+public function foo() {\n+    var er = error(\"ERROR_REASON\", message = \"error message\");\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NTI5NA=="}, "originalCommit": {"oid": "02001a19913066eea69cd8c3d11f9d8cc5dd988d"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzk3MjI0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/expressions/ErrorConstructorExprTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNDo1ODo1N1rOGREEUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMzo0MjowOFrOGSl-Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NTYxNw==", "bodyText": "Shall we add some more tests, such as missing open-parenthesis, missing close-parenthesis, extra tokens before/after error keyword, etc", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r420545617", "createdAt": "2020-05-06T04:58:57Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/expressions/ErrorConstructorExprTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.parser.test.syntax.expressions;\n+\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test parsing Error constructor expression.\n+ *\n+ * @since 1.3.0\n+ */\n+public class ErrorConstructorExprTest extends AbstractExpressionsTest {\n+\n+    // Valid syntax\n+    @Test\n+    public void testWithOutArgs() {\n+        test(\"error()\", \"error-constructor-expr/error_constructor_expr_assert_01.json\");\n+    }\n+\n+    @Test\n+    public void testWithArgs1() {\n+        test(\"error(\\\"ERROR_REASON\\\", message = \\\"error message\\\")\", \"error-constructor-expr\" +\n+                \"/error_constructor_expr_assert_02.json\");\n+    }\n+\n+    @Test\n+    public void testWithArgs2() {\n+        test(\"error(\\\"ERROR_REASON\\\", \\\"error message\\\");\", \"error-constructor-expr\" +\n+                \"/error_constructor_expr_assert_03.json\");\n+    }\n+\n+    @Test\n+    public void testWithAssignment() {\n+        testFile(\"error-constructor-expr/error_constructor_expr_source_01.bal\", \"error-constructor-expr\" +\n+                \"/error_constructor_expr_assert_04.json\");\n+    }\n+\n+    //Invalid syntax\n+    @Test\n+    public void testWrongAssignment() {\n+        testFile(\"error-constructor-expr/error_constructor_expr_source_02.bal\", \"error-constructor-expr\" +\n+                \"/error_constructor_expr_assert_05.json\");\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02001a19913066eea69cd8c3d11f9d8cc5dd988d"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE0OTY5MA==", "bodyText": "Done", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r422149690", "createdAt": "2020-05-08T13:42:08Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/expressions/ErrorConstructorExprTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.parser.test.syntax.expressions;\n+\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test parsing Error constructor expression.\n+ *\n+ * @since 1.3.0\n+ */\n+public class ErrorConstructorExprTest extends AbstractExpressionsTest {\n+\n+    // Valid syntax\n+    @Test\n+    public void testWithOutArgs() {\n+        test(\"error()\", \"error-constructor-expr/error_constructor_expr_assert_01.json\");\n+    }\n+\n+    @Test\n+    public void testWithArgs1() {\n+        test(\"error(\\\"ERROR_REASON\\\", message = \\\"error message\\\")\", \"error-constructor-expr\" +\n+                \"/error_constructor_expr_assert_02.json\");\n+    }\n+\n+    @Test\n+    public void testWithArgs2() {\n+        test(\"error(\\\"ERROR_REASON\\\", \\\"error message\\\");\", \"error-constructor-expr\" +\n+                \"/error_constructor_expr_assert_03.json\");\n+    }\n+\n+    @Test\n+    public void testWithAssignment() {\n+        testFile(\"error-constructor-expr/error_constructor_expr_source_01.bal\", \"error-constructor-expr\" +\n+                \"/error_constructor_expr_assert_04.json\");\n+    }\n+\n+    //Invalid syntax\n+    @Test\n+    public void testWrongAssignment() {\n+        testFile(\"error-constructor-expr/error_constructor_expr_source_02.bal\", \"error-constructor-expr\" +\n+                \"/error_constructor_expr_assert_05.json\");\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0NTYxNw=="}, "originalCommit": {"oid": "02001a19913066eea69cd8c3d11f9d8cc5dd988d"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDM2OTUyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxMDoyODowOVrOGS6JrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNTo0MzowM1rOGT20cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4MDMwMQ==", "bodyText": "Do we need the syntaxKind as a parameter for this? This method is used only in one place", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r422480301", "createdAt": "2020-05-09T10:28:09Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3470,6 +3472,28 @@ private STNode parseFuncCall(STNode identifier) {\n         return STNodeFactory.createFunctionCallExpressionNode(identifier, openParen, args, closeParen);\n     }\n \n+    /**\n+     * Parse error constructor expression.\n+     * <code>functional-constructor-expr := functionally-constructible-type-reference ( arg-list )\n+     * functionally-constructible-type-reference := error | type-reference</code>\n+     *\n+     * @param kind Syntax kind\n+     * @return Functional constructor expression\n+     */\n+    private STNode parseFunctionalConstructorExpr(SyntaxKind kind) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b44aaa7333f090376a57283b07684d536b6378b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ5NDQwMA==", "bodyText": "At this moment we may have only one SyntaxKind for functional-constructor-expr. But with the implementation of other type references, new SyntaxKinds can be introduced.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r422494400", "createdAt": "2020-05-09T13:12:52Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3470,6 +3472,28 @@ private STNode parseFuncCall(STNode identifier) {\n         return STNodeFactory.createFunctionCallExpressionNode(identifier, openParen, args, closeParen);\n     }\n \n+    /**\n+     * Parse error constructor expression.\n+     * <code>functional-constructor-expr := functionally-constructible-type-reference ( arg-list )\n+     * functionally-constructible-type-reference := error | type-reference</code>\n+     *\n+     * @param kind Syntax kind\n+     * @return Functional constructor expression\n+     */\n+    private STNode parseFunctionalConstructorExpr(SyntaxKind kind) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4MDMwMQ=="}, "originalCommit": {"oid": "0b44aaa7333f090376a57283b07684d536b6378b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU3MDUxMQ==", "bodyText": "We can update the method when we have the requirement. Reason is, if anyone implementing the other type-reference decided not to use this method, then this change would become unnecessary.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r422570511", "createdAt": "2020-05-10T01:47:50Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3470,6 +3472,28 @@ private STNode parseFuncCall(STNode identifier) {\n         return STNodeFactory.createFunctionCallExpressionNode(identifier, openParen, args, closeParen);\n     }\n \n+    /**\n+     * Parse error constructor expression.\n+     * <code>functional-constructor-expr := functionally-constructible-type-reference ( arg-list )\n+     * functionally-constructible-type-reference := error | type-reference</code>\n+     *\n+     * @param kind Syntax kind\n+     * @return Functional constructor expression\n+     */\n+    private STNode parseFunctionalConstructorExpr(SyntaxKind kind) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4MDMwMQ=="}, "originalCommit": {"oid": "0b44aaa7333f090376a57283b07684d536b6378b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU3MDkzOQ==", "bodyText": "We should also look at the possibility of using the function-call node to represent error-constructor.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r422570939", "createdAt": "2020-05-10T01:52:30Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3470,6 +3472,28 @@ private STNode parseFuncCall(STNode identifier) {\n         return STNodeFactory.createFunctionCallExpressionNode(identifier, openParen, args, closeParen);\n     }\n \n+    /**\n+     * Parse error constructor expression.\n+     * <code>functional-constructor-expr := functionally-constructible-type-reference ( arg-list )\n+     * functionally-constructible-type-reference := error | type-reference</code>\n+     *\n+     * @param kind Syntax kind\n+     * @return Functional constructor expression\n+     */\n+    private STNode parseFunctionalConstructorExpr(SyntaxKind kind) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4MDMwMQ=="}, "originalCommit": {"oid": "0b44aaa7333f090376a57283b07684d536b6378b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ3NDI4OA==", "bodyText": "Removed the syntax kind and it was handled same as FunctionCall.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r423474288", "createdAt": "2020-05-12T05:43:03Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3470,6 +3472,28 @@ private STNode parseFuncCall(STNode identifier) {\n         return STNodeFactory.createFunctionCallExpressionNode(identifier, openParen, args, closeParen);\n     }\n \n+    /**\n+     * Parse error constructor expression.\n+     * <code>functional-constructor-expr := functionally-constructible-type-reference ( arg-list )\n+     * functionally-constructible-type-reference := error | type-reference</code>\n+     *\n+     * @param kind Syntax kind\n+     * @return Functional constructor expression\n+     */\n+    private STNode parseFunctionalConstructorExpr(SyntaxKind kind) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4MDMwMQ=="}, "originalCommit": {"oid": "0b44aaa7333f090376a57283b07684d536b6378b"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDM3NDg3OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxMDozNzowN1rOGS6Mjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNTo0MDo0OFrOGT2x-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4MTAzOA==", "bodyText": "Even-though a context is started here, its never ended.\nShould be ended after ending the args-list context.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r422481038", "createdAt": "2020-05-09T10:37:07Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -1346,6 +1348,7 @@ protected ParserRuleContext getNextRule(ParserRuleContext currentCtx, int nextLo\n             case KEY_SPECIFIER:\n             case ERROR_TYPE_DESCRIPTOR:\n             case LET_VAR_DECL:\n+            case ERROR_CONSTRUCTOR_EXPRESSION:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b44aaa7333f090376a57283b07684d536b6378b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ3MzY1Nw==", "bodyText": "Removed this context.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r423473657", "createdAt": "2020-05-12T05:40:48Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -1346,6 +1348,7 @@ protected ParserRuleContext getNextRule(ParserRuleContext currentCtx, int nextLo\n             case KEY_SPECIFIER:\n             case ERROR_TYPE_DESCRIPTOR:\n             case LET_VAR_DECL:\n+            case ERROR_CONSTRUCTOR_EXPRESSION:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4MTAzOA=="}, "originalCommit": {"oid": "0b44aaa7333f090376a57283b07684d536b6378b"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDM3ODA4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxMDo0MjoyMFrOGS6OHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNTo0MDozMFrOGT2xnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4MTQzOA==", "bodyText": "Need to add proper line-breaks/paragraph-starts, to render properly. Check other doc comments.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r422481438", "createdAt": "2020-05-09T10:42:20Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3470,6 +3472,28 @@ private STNode parseFuncCall(STNode identifier) {\n         return STNodeFactory.createFunctionCallExpressionNode(identifier, openParen, args, closeParen);\n     }\n \n+    /**\n+     * Parse error constructor expression.\n+     * <code>functional-constructor-expr := functionally-constructible-type-reference ( arg-list )\n+     * functionally-constructible-type-reference := error | type-reference</code>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b44aaa7333f090376a57283b07684d536b6378b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ3MzU2NQ==", "bodyText": "Added", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r423473565", "createdAt": "2020-05-12T05:40:30Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3470,6 +3472,28 @@ private STNode parseFuncCall(STNode identifier) {\n         return STNodeFactory.createFunctionCallExpressionNode(identifier, openParen, args, closeParen);\n     }\n \n+    /**\n+     * Parse error constructor expression.\n+     * <code>functional-constructor-expr := functionally-constructible-type-reference ( arg-list )\n+     * functionally-constructible-type-reference := error | type-reference</code>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4MTQzOA=="}, "originalCommit": {"oid": "0b44aaa7333f090376a57283b07684d536b6378b"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzE3Mjc5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNTo1Nzo0MFrOGT3Gog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMToyMDo1MFrOGUB8MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ3ODk0Ng==", "bodyText": "Wrong method name. This method only parse error constructor.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r423478946", "createdAt": "2020-05-12T05:57:40Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3776,6 +3778,22 @@ private STNode parseFuncCall(STNode identifier) {\n         return STNodeFactory.createFunctionCallExpressionNode(identifier, openParen, args, closeParen);\n     }\n \n+    /**\n+     * <p>\n+     * Parse error constructor expression.\n+     * </p>\n+     * <code>\n+     * functional-constructor-expr := functionally-constructible-type-reference ( arg-list )\n+     * functionally-constructible-type-reference := error | type-reference\n+     * </code>\n+     *\n+     * @return Functional constructor expression\n+     */\n+    private STNode parseFunctionalConstructorExpr() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af77ae5a1f52c76c180bd18b3e93f63e96e96b6a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1NjQ5Nw==", "bodyText": "Changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r423656497", "createdAt": "2020-05-12T11:20:50Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3776,6 +3778,22 @@ private STNode parseFuncCall(STNode identifier) {\n         return STNodeFactory.createFunctionCallExpressionNode(identifier, openParen, args, closeParen);\n     }\n \n+    /**\n+     * <p>\n+     * Parse error constructor expression.\n+     * </p>\n+     * <code>\n+     * functional-constructor-expr := functionally-constructible-type-reference ( arg-list )\n+     * functionally-constructible-type-reference := error | type-reference\n+     * </code>\n+     *\n+     * @return Functional constructor expression\n+     */\n+    private STNode parseFunctionalConstructorExpr() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ3ODk0Ng=="}, "originalCommit": {"oid": "af77ae5a1f52c76c180bd18b3e93f63e96e96b6a"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzE3MzUzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNTo1Nzo1OFrOGT3HHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMToyMDo1NlrOGUB8cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ3OTA2OQ==", "bodyText": "var-name is not correct.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r423479069", "createdAt": "2020-05-12T05:57:58Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3776,6 +3778,22 @@ private STNode parseFuncCall(STNode identifier) {\n         return STNodeFactory.createFunctionCallExpressionNode(identifier, openParen, args, closeParen);\n     }\n \n+    /**\n+     * <p>\n+     * Parse error constructor expression.\n+     * </p>\n+     * <code>\n+     * functional-constructor-expr := functionally-constructible-type-reference ( arg-list )\n+     * functionally-constructible-type-reference := error | type-reference\n+     * </code>\n+     *\n+     * @return Functional constructor expression\n+     */\n+    private STNode parseFunctionalConstructorExpr() {\n+        STNode functionallyConstructibleTypeReference = parseErrorKeyWord();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af77ae5a1f52c76c180bd18b3e93f63e96e96b6a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1NjU2MQ==", "bodyText": "Changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r423656561", "createdAt": "2020-05-12T11:20:56Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParser.java", "diffHunk": "@@ -3776,6 +3778,22 @@ private STNode parseFuncCall(STNode identifier) {\n         return STNodeFactory.createFunctionCallExpressionNode(identifier, openParen, args, closeParen);\n     }\n \n+    /**\n+     * <p>\n+     * Parse error constructor expression.\n+     * </p>\n+     * <code>\n+     * functional-constructor-expr := functionally-constructible-type-reference ( arg-list )\n+     * functionally-constructible-type-reference := error | type-reference\n+     * </code>\n+     *\n+     * @return Functional constructor expression\n+     */\n+    private STNode parseFunctionalConstructorExpr() {\n+        STNode functionallyConstructibleTypeReference = parseErrorKeyWord();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ3OTA2OQ=="}, "originalCommit": {"oid": "af77ae5a1f52c76c180bd18b3e93f63e96e96b6a"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzE3NDM2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNTo1ODoyNVrOGT3Hpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMToyMToxMVrOGUB83A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ3OTIwNw==", "bodyText": "don't need the else block, can simply return", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r423479207", "createdAt": "2020-05-12T05:58:25Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -1865,8 +1866,9 @@ protected ParserRuleContext getNextRule(ParserRuleContext currentCtx, int nextLo\n             case ERROR_KEYWORD:\n                 if (isInTypeDescContext()) {\n                     return ParserRuleContext.ERROR_TYPE_PARAM_START;\n+                } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af77ae5a1f52c76c180bd18b3e93f63e96e96b6a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1NjY2OA==", "bodyText": "Changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r423656668", "createdAt": "2020-05-12T11:21:11Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/BallerinaParserErrorHandler.java", "diffHunk": "@@ -1865,8 +1866,9 @@ protected ParserRuleContext getNextRule(ParserRuleContext currentCtx, int nextLo\n             case ERROR_KEYWORD:\n                 if (isInTypeDescContext()) {\n                     return ParserRuleContext.ERROR_TYPE_PARAM_START;\n+                } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ3OTIwNw=="}, "originalCommit": {"oid": "af77ae5a1f52c76c180bd18b3e93f63e96e96b6a"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzE4MjQ1OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/expressions/ErrorConstructorExprTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjowMjowN1rOGT3MbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMToyMTowNFrOGUB8sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ4MDQyOA==", "bodyText": "Don't need two levels of directories functional-constructor-expr/error-constructor-expr/", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r423480428", "createdAt": "2020-05-12T06:02:07Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/expressions/ErrorConstructorExprTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.parser.test.syntax.expressions;\n+\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test parsing Error constructor expression.\n+ *\n+ * @since 1.3.0\n+ */\n+public class ErrorConstructorExprTest extends AbstractExpressionsTest {\n+\n+    // Valid syntax\n+    @Test\n+    public void testWithOutArgs() {\n+        test(\"error()\", \"functional-constructor-expr/error-constructor-expr/error_constructor_expr_without_args.json\");\n+    }\n+\n+    @Test\n+    public void testWithArgs() {\n+        test(\"error(\\\"ERROR_REASON\\\", message = \\\"error message\\\")\", \"functional-constructor-expr/error-constructor\" +\n+                \"-expr/error_constructor_expr_with_args_01.json\");\n+        test(\"error(\\\"ERROR_REASON\\\", \\\"error message\\\");\", \"functional-constructor-expr/error-constructor-expr\" +\n+                \"/error_constructor_expr_with_args_02.json\");\n+    }\n+\n+    @Test\n+    public void testWithAssignment() {\n+        testFile(\"functional-constructor-expr/error-constructor-expr/error_constructor_expr_source_01.bal\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af77ae5a1f52c76c180bd18b3e93f63e96e96b6a"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1NjYyNg==", "bodyText": "Changed", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23114#discussion_r423656626", "createdAt": "2020-05-12T11:21:04Z", "author": {"login": "KavinduZoysa"}, "path": "compiler/ballerina-parser/src/test/java/io/ballerinalang/compiler/parser/test/syntax/expressions/ErrorConstructorExprTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.ballerinalang.compiler.parser.test.syntax.expressions;\n+\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test parsing Error constructor expression.\n+ *\n+ * @since 1.3.0\n+ */\n+public class ErrorConstructorExprTest extends AbstractExpressionsTest {\n+\n+    // Valid syntax\n+    @Test\n+    public void testWithOutArgs() {\n+        test(\"error()\", \"functional-constructor-expr/error-constructor-expr/error_constructor_expr_without_args.json\");\n+    }\n+\n+    @Test\n+    public void testWithArgs() {\n+        test(\"error(\\\"ERROR_REASON\\\", message = \\\"error message\\\")\", \"functional-constructor-expr/error-constructor\" +\n+                \"-expr/error_constructor_expr_with_args_01.json\");\n+        test(\"error(\\\"ERROR_REASON\\\", \\\"error message\\\");\", \"functional-constructor-expr/error-constructor-expr\" +\n+                \"/error_constructor_expr_with_args_02.json\");\n+    }\n+\n+    @Test\n+    public void testWithAssignment() {\n+        testFile(\"functional-constructor-expr/error-constructor-expr/error_constructor_expr_source_01.bal\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ4MDQyOA=="}, "originalCommit": {"oid": "af77ae5a1f52c76c180bd18b3e93f63e96e96b6a"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3729, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}