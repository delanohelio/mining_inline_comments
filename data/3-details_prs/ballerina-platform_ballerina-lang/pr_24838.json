{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzMDU0MjY1", "number": 24838, "title": "Remove ANTLR dependencies from Documentation Analyzer", "bodyText": "Purpose\n\nAdd support for parsing of single-backtick content as syntax nodes\nRemove ANTLR dependencies from Documentation Analyzer\n\nFixes #24730\nApproach\nN/A\nSamples\nN/A\nRemarks\nN/A\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-07-20T04:59:25Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24838", "merged": true, "mergeCommit": {"oid": "1f2cae3832cfaa26317e34a29104ba03d7263813"}, "closed": true, "closedAt": "2020-07-23T09:14:54Z", "author": {"login": "lochana-chathura"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1JvXagH2gAyNDUzMDU0MjY1Ojg5ODhhNTcwNzVkNGFhZTVlMjM5NzM1ZmY0NzZkM2NiMTQ5MDdjMWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3r0E7gFqTQ1Mzk1MzQ4Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8988a57075d4aae5e239735ff476d3cb14907c1f", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8988a57075d4aae5e239735ff476d3cb14907c1f", "committedDate": "2020-07-15T12:24:57Z", "message": "Add syntax parsing support for single-backtick content"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21436737152f8421d34c4b94e07191238a63076a", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/21436737152f8421d34c4b94e07191238a63076a", "committedDate": "2020-07-16T12:27:10Z", "message": "Remove ANTLR dependencies from DocumentationAnalyzer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0e265157778d7510a27503a907721c18919f8ac", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c0e265157778d7510a27503a907721c18919f8ac", "committedDate": "2020-07-16T12:50:23Z", "message": "Fix wrong usages of backtick content in documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e596ca1f8e2d50d65faa05fe90640645d27b5a4d", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e596ca1f8e2d50d65faa05fe90640645d27b5a4d", "committedDate": "2020-07-16T12:52:42Z", "message": "Disable failing tests on old parser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81a4f762ec0cf80d84ceb3817228d8790f989399", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/81a4f762ec0cf80d84ceb3817228d8790f989399", "committedDate": "2020-07-19T18:06:08Z", "message": "Enable DeprecationAnnotationTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fa618d8a3d557469cd95e69d7b492c38b19a8c6", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6fa618d8a3d557469cd95e69d7b492c38b19a8c6", "committedDate": "2020-07-19T19:07:15Z", "message": "Enable DeprecationAnnotationNegativeTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4246b79a888dca34459dc5d25e0b17d03c2a54ac", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4246b79a888dca34459dc5d25e0b17d03c2a54ac", "committedDate": "2020-07-19T19:24:24Z", "message": "Add test case for single backtick content parsing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e2cb44e514f316b9221a763b0158a5b233c5a75", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1e2cb44e514f316b9221a763b0158a5b233c5a75", "committedDate": "2020-07-20T04:38:33Z", "message": "Refactor code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMjk3MzM1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24838#pullrequestreview-451297335", "createdAt": "2020-07-20T05:03:12Z", "commit": {"oid": "1e2cb44e514f316b9221a763b0158a5b233c5a75"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNTowMzoxMlrOGz4Tpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNTowMzoxMlrOGz4Tpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA1MzA5NA==", "bodyText": "do we inject parser diagnostic to the compiler diagnostic somewhere? or two APIs act independently?\nright now I log a warning for this in the node transformer as well.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24838#discussion_r457053094", "createdAt": "2020-07-20T05:03:12Z", "author": {"login": "lochana-chathura"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/DocumentationLexer.java", "diffHunk": "@@ -669,23 +702,79 @@ private STToken readDocumentationBacktickContentToken() {\n         if (nextToken == LexerTerminals.BACKTICK) {\n             reader.advance();\n             switchMode(ParserMode.DOCUMENTATION_INTERNAL);\n+            resetSpecialKeywordInPlace();\n             return getDocumentationSyntaxTokenWithNoTrivia(SyntaxKind.BACKTICK_TOKEN);\n         }\n \n+        int lookAheadCount = 0;\n+        String backtickStr = \"\";\n         while (!reader.isEOF()) {\n             switch (nextToken) {\n                 case LexerTerminals.BACKTICK:\n                 case LexerTerminals.NEWLINE:\n                 case LexerTerminals.CARRIAGE_RETURN:\n                     break;\n                 default:\n-                    reader.advance();\n-                    nextToken = peek();\n+                    backtickStr = backtickStr.concat(String.valueOf((char) nextToken));\n+                    lookAheadCount++;\n+                    nextToken = reader.peek(lookAheadCount);\n                     continue;\n             }\n             break;\n         }\n \n-        return getDocumentationLiteral(SyntaxKind.BACKTICK_CONTENT);\n+        if (!isSpecialKeywordInPlace) {\n+            // Look for a x(), m:x(), T.y(), m:T.y() match\n+            boolean hasMatch = backtickStr.matches(backtickExprRegex);\n+            if (hasMatch) {\n+                switchMode(ParserMode.DOCUMENTATION_BACKTICK_EXPR);\n+                return readDocumentationBacktickExprToken();\n+            } else {\n+                reportLexerError(DiagnosticWarningCode.WARNING_INVALID_DOCUMENTATION_EXPRESSION);\n+                reader.advance(lookAheadCount);\n+                return getDocumentationLiteral(SyntaxKind.BACKTICK_CONTENT);\n+            }\n+        }\n+\n+        reader.advance(lookAheadCount);\n+        resetSpecialKeywordInPlace();\n+\n+        boolean isIdentifier = backtickStr.matches(identifierRegex);\n+        if (isIdentifier) {\n+            return getIdentifierToken();\n+        } else {\n+            reportLexerError(DiagnosticWarningCode.WARNING_INVALID_DOCUMENTATION_IDENTIFIER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2cb44e514f316b9221a763b0158a5b233c5a75"}, "originalPosition": 132}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMzA1NzQ4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24838#pullrequestreview-451305748", "createdAt": "2020-07-20T05:31:55Z", "commit": {"oid": "1e2cb44e514f316b9221a763b0158a5b233c5a75"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNTozMTo1NVrOGz5Ffg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNTo1NToxNlrOGz5xEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA2NTg1NA==", "bodyText": "Shall we use our own method to visit the characters and do this validation?\nRegex-matching can be expensive. I think if we remove that regex, way we can also avoid Line#718 (string concat) which is also a bit expensive.\nUsually numeric operations are much faster compared to string operations. eg: (int/char comparison vs string compare, array-access vs map-access)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24838#discussion_r457065854", "createdAt": "2020-07-20T05:31:55Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-parser/src/main/java/io/ballerinalang/compiler/internal/parser/DocumentationLexer.java", "diffHunk": "@@ -669,23 +702,79 @@ private STToken readDocumentationBacktickContentToken() {\n         if (nextToken == LexerTerminals.BACKTICK) {\n             reader.advance();\n             switchMode(ParserMode.DOCUMENTATION_INTERNAL);\n+            resetSpecialKeywordInPlace();\n             return getDocumentationSyntaxTokenWithNoTrivia(SyntaxKind.BACKTICK_TOKEN);\n         }\n \n+        int lookAheadCount = 0;\n+        String backtickStr = \"\";\n         while (!reader.isEOF()) {\n             switch (nextToken) {\n                 case LexerTerminals.BACKTICK:\n                 case LexerTerminals.NEWLINE:\n                 case LexerTerminals.CARRIAGE_RETURN:\n                     break;\n                 default:\n-                    reader.advance();\n-                    nextToken = peek();\n+                    backtickStr = backtickStr.concat(String.valueOf((char) nextToken));\n+                    lookAheadCount++;\n+                    nextToken = reader.peek(lookAheadCount);\n                     continue;\n             }\n             break;\n         }\n \n-        return getDocumentationLiteral(SyntaxKind.BACKTICK_CONTENT);\n+        if (!isSpecialKeywordInPlace) {\n+            // Look for a x(), m:x(), T.y(), m:T.y() match\n+            boolean hasMatch = backtickStr.matches(backtickExprRegex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2cb44e514f316b9221a763b0158a5b233c5a75"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA2ODc5NQ==", "bodyText": "Shall we return the normal-positions if there are no metadata?\nReason is, theres a plan for making metadata optional in the syntax tree.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24838#discussion_r457068795", "createdAt": "2020-07-20T05:38:17Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -456,6 +459,24 @@ private DiagnosticPos getPosition(Node node) {\n                 endPos.offset() + 1);\n     }\n \n+    private DiagnosticPos getPositionWithoutMetadata(Node node) {\n+        if (node == null) {\n+            return null;\n+        }\n+        NonTerminalNode nonTerminalNode = (NonTerminalNode) node;\n+        ChildNodeList children = nonTerminalNode.children();\n+        // If there's metadata it will be the first child.\n+        // Hence set start position from next immediate child.\n+        if (children.get(0).kind() == SyntaxKind.METADATA) {\n+            LinePosition startPos = children.get(1).lineRange().startLine();\n+            LinePosition endPos = node.lineRange().endLine();\n+            return new DiagnosticPos(diagnosticSource, startPos.line() + 1, endPos.line() + 1, startPos.offset() + 1,\n+                    endPos.offset() + 1);\n+        } else {\n+            throw new IllegalArgumentException(\"Node should have metadata\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2cb44e514f316b9221a763b0158a5b233c5a75"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA3MTI3Mg==", "bodyText": "can take !referenceType.isPresent() condition out, as its common for both conditions.\nAlso would be good to extract this content to a separate method?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24838#discussion_r457071272", "createdAt": "2020-07-20T05:43:44Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -4258,26 +4303,69 @@ private String addReferencesAndReturnDocumentationText(LinkedList<BLangMarkdownR\n                 BLangMarkdownReferenceDocumentation bLangRefDoc = new BLangMarkdownReferenceDocumentation();\n                 DocumentationReferenceNode docReferenceNode = (DocumentationReferenceNode) element;\n \n+                DiagnosticPos pos = getPosition(docReferenceNode);\n+                bLangRefDoc.pos = pos;\n+\n+                Token startBacktick = docReferenceNode.startBacktick();\n+                Node backtickContent = docReferenceNode.backtickContent();\n+                Token endBacktick = docReferenceNode.endBacktick();\n+\n+                String contentString = backtickContent.isMissing() ? \"\" : backtickContent.toString();\n+                bLangRefDoc.referenceName = contentString;\n+\n                 bLangRefDoc.type = DocumentationReferenceType.BACKTICK_CONTENT;\n-                docReferenceNode.referenceType().ifPresent(\n+                Optional<Token> referenceType = docReferenceNode.referenceType();\n+                referenceType.ifPresent(\n                         refType -> {\n                             bLangRefDoc.type = stringToRefType(refType.text());\n+                            if (backtickContent.kind() == SyntaxKind.BACKTICK_CONTENT) {\n+                                // backtick content preceded by a special keyword, should be an identifier\n+                                bLangRefDoc.hasParserWarnings = true;\n+                                dlog.warning(pos, DiagnosticCode.INVALID_DOCUMENTATION_IDENTIFIER, contentString);\n+                            } else {\n+                                bLangRefDoc.identifier = ((Token) backtickContent).text();\n+                            }\n                             docText.append(refType.toString());\n                         }\n                 );\n \n-                Token startBacktick = docReferenceNode.startBacktick();\n-                docText.append(startBacktick.isMissing() ? \"\" : startBacktick.text());\n+                if (!referenceType.isPresent() && backtickContent.kind() == SyntaxKind.BACKTICK_CONTENT) {\n+                    // reaching here means, backtick content is not in one of x(), m:x(), T.y(), m:T.y() formats\n+                    // no warning is logged for this case\n+                    bLangRefDoc.hasParserWarnings = true;\n+                }\n \n-                Token backtickContent = docReferenceNode.backtickContent();\n-                String contentString = backtickContent.isMissing() ? \"\" : backtickContent.text();\n-                bLangRefDoc.referenceName = contentString;\n-                docText.append(contentString);\n+                if (!referenceType.isPresent() && backtickContent.kind() != SyntaxKind.BACKTICK_CONTENT) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2cb44e514f316b9221a763b0158a5b233c5a75"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA3MzE4MA==", "bodyText": "I think we can remove this warning, since all parser errors (should) get added to compiler diagnostics.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24838#discussion_r457073180", "createdAt": "2020-07-20T05:47:38Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -4258,26 +4303,69 @@ private String addReferencesAndReturnDocumentationText(LinkedList<BLangMarkdownR\n                 BLangMarkdownReferenceDocumentation bLangRefDoc = new BLangMarkdownReferenceDocumentation();\n                 DocumentationReferenceNode docReferenceNode = (DocumentationReferenceNode) element;\n \n+                DiagnosticPos pos = getPosition(docReferenceNode);\n+                bLangRefDoc.pos = pos;\n+\n+                Token startBacktick = docReferenceNode.startBacktick();\n+                Node backtickContent = docReferenceNode.backtickContent();\n+                Token endBacktick = docReferenceNode.endBacktick();\n+\n+                String contentString = backtickContent.isMissing() ? \"\" : backtickContent.toString();\n+                bLangRefDoc.referenceName = contentString;\n+\n                 bLangRefDoc.type = DocumentationReferenceType.BACKTICK_CONTENT;\n-                docReferenceNode.referenceType().ifPresent(\n+                Optional<Token> referenceType = docReferenceNode.referenceType();\n+                referenceType.ifPresent(\n                         refType -> {\n                             bLangRefDoc.type = stringToRefType(refType.text());\n+                            if (backtickContent.kind() == SyntaxKind.BACKTICK_CONTENT) {\n+                                // backtick content preceded by a special keyword, should be an identifier\n+                                bLangRefDoc.hasParserWarnings = true;\n+                                dlog.warning(pos, DiagnosticCode.INVALID_DOCUMENTATION_IDENTIFIER, contentString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2cb44e514f316b9221a763b0158a5b233c5a75"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA3NzAwOQ==", "bodyText": "shouldn't this be allowed?\ni.e:\n# some text followed by type `M:X`\n\nSpec says \"if it is a qualified name M:X, then the source file must have imported M, and X must refer to a public name of an appropriate type in M\"", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24838#discussion_r457077009", "createdAt": "2020-07-20T05:55:16Z", "author": {"login": "SupunS"}, "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -620,7 +620,7 @@ function externHasHeader(Entity entity, string headerName, HeaderPosition positi\n # + contentToBeEncoded - Content that needs to be encoded can be of type `string`, `byte[]` or `io:ReadableByteChannel`\n # + charset - Charset to be used. This is used only with the string input\n # + return - An encoded `string` if the given input is of type string, an encoded `byte[]` if the given input is of\n-#            type byte[], an encoded `io:ReadableByteChannel` if the given input is of type `io:ReadableByteChannel`,\n+#            type byte[], an encoded `io:ReadableByteChannel` if the given input is of type ``io:ReadableByteChannel``,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e2cb44e514f316b9221a763b0158a5b233c5a75"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fac61400256dd20fb73623fc7bd974ae3626bdb4", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fac61400256dd20fb73623fc7bd974ae3626bdb4", "committedDate": "2020-07-21T06:41:56Z", "message": "Add review changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d9c246425793354324113b72f373b3ea254d06e", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7d9c246425793354324113b72f373b3ea254d06e", "committedDate": "2020-07-21T10:20:59Z", "message": "Fix ResourceConfigPathTest failing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30960f407c199df86670b874dc6eb2b84116db52", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/30960f407c199df86670b874dc6eb2b84116db52", "committedDate": "2020-07-22T11:00:31Z", "message": "Fix parser warnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45be373c9bdfed36e3fe3452b3a599052f51ba47", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/45be373c9bdfed36e3fe3452b3a599052f51ba47", "committedDate": "2020-07-22T11:37:38Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into doc-support2\n\n\u0001 Conflicts:\n\u0001\tcompiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java\n\u0001\tcompiler/ballerina-lang/src/main/resources/compiler.properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d083750b1b055f8f0d813c89809a00a8d3d529ab", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d083750b1b055f8f0d813c89809a00a8d3d529ab", "committedDate": "2020-07-22T18:22:34Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into doc-support2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd74f1ec172a95202e1090b0113789b1593bd613", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cd74f1ec172a95202e1090b0113789b1593bd613", "committedDate": "2020-07-22T19:21:48Z", "message": "Revert error positions for SignatureTest and ResourceConfigPathTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4568b25640b53b6629b36730c00e32c99f63436", "author": {"user": {"login": "lochana-chathura", "name": null}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a4568b25640b53b6629b36730c00e32c99f63436", "committedDate": "2020-07-23T04:34:24Z", "message": "Add backtick expr support for special case with function keyword"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzODM0NzY4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24838#pullrequestreview-453834768", "createdAt": "2020-07-23T04:53:16Z", "commit": {"oid": "a4568b25640b53b6629b36730c00e32c99f63436"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDo1MzoxNlrOG18LGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDo1MzoxNlrOG18LGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxMzU5Mg==", "bodyText": "In case of invalid backtick content, earlier position was given as the start position of doc ref. Now it is directly pointed at the backtick content.\ne.g.\nFor, # service `9invalidServ` \n\nearlier position: warn column 3\nnew position: warn column 12", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24838#discussion_r459213592", "createdAt": "2020-07-23T04:53:16Z", "author": {"login": "lochana-chathura"}, "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/documentation/MarkdownDocumentationTest.java", "diffHunk": "@@ -340,7 +340,7 @@ public void testDocumentationNegative() {\n         BAssertUtil.validateWarning(compileResult, index++, \"no documentable return parameter\", 11, 1);\n         BAssertUtil.validateWarning(compileResult, index++, \"undocumented field 'cd'\", 15, 5);\n         BAssertUtil.validateWarning(compileResult, index++,\n-                \"invalid identifier in documentation reference '9invalidServ'\", 21, 3);\n+                \"invalid identifier in documentation reference '9invalidServ'\", 21, 12);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4568b25640b53b6629b36730c00e32c99f63436"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzOTUzNDg3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24838#pullrequestreview-453953487", "createdAt": "2020-07-23T09:05:52Z", "commit": {"oid": "a4568b25640b53b6629b36730c00e32c99f63436"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOTowNTo1M1rOG2CLow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOTowNTo1M1rOG2CLow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxMjAzNQ==", "bodyText": "can doo == for equal check", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24838#discussion_r459312035", "createdAt": "2020-07-23T09:05:53Z", "author": {"login": "SupunS"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/Parser.java", "diffHunk": "@@ -268,8 +269,16 @@ private void reportSyntaxDiagnostics(BDiagnosticSource diagnosticSource, SyntaxT\n \n             // TODO This is the temporary mechanism\n             // We need to merge the diagnostic reporting mechanisms of the new parser and the semantic analyzer\n-            DiagnosticCode code = DiagnosticCode.SYNTAX_ERROR;\n-            dlog.error(pos, code, syntaxDiagnostic.message());\n+            DiagnosticCode code;\n+\n+            DiagnosticSeverity severity = syntaxDiagnostic.diagnosticInfo().severity();\n+            if (DiagnosticSeverity.WARNING.equals(severity)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4568b25640b53b6629b36730c00e32c99f63436"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3674, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}