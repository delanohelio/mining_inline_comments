{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MTUxNzk5", "number": 21016, "title": "Implement CLI module implementation in Java", "bodyText": "Purpose\n\nRewrite the CLI module implementation in Java which has implemented using Ballerina. Added a progress bar for module push and module pull and changed integration tests accordingly.\n\nFixes #21015\nApproach\n\nDescribe how you are implementing the solutions along with the design details.\n\nSamples\n\nProvide high-level details about the samples related to this feature.\n\nRemarks\n\nList any other known issues, related PRs, TODO items, or any other notes related to the PR.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-02-12T07:30:09Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016", "merged": true, "mergeCommit": {"oid": "fe5d1ebac0cd0aaefccf6734e5a0130803da14f0"}, "closed": true, "closedAt": "2020-03-03T04:25:27Z", "author": {"login": "pramodya1994"}, "timelineItems": {"totalCount": 42, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDid6bABqjMwMjk4OTEwMjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJv9kHgFqTM2NzMxOTMyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bed803d0f8ea57d8d1538c98681f2cb8557a6a08", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bed803d0f8ea57d8d1538c98681f2cb8557a6a08", "committedDate": "2020-02-12T07:22:05Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}, "afterCommit": {"oid": "1f60c88881bd2f30f9bd3fca63fdff2be2a77fdb", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1f60c88881bd2f30f9bd3fca63fdff2be2a77fdb", "committedDate": "2020-02-12T08:56:54Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1f60c88881bd2f30f9bd3fca63fdff2be2a77fdb", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1f60c88881bd2f30f9bd3fca63fdff2be2a77fdb", "committedDate": "2020-02-12T08:56:54Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}, "afterCommit": {"oid": "b2644cf7a5e957a64e16cc5fc68ef86ac991d6fe", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b2644cf7a5e957a64e16cc5fc68ef86ac991d6fe", "committedDate": "2020-02-13T08:48:38Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b2644cf7a5e957a64e16cc5fc68ef86ac991d6fe", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b2644cf7a5e957a64e16cc5fc68ef86ac991d6fe", "committedDate": "2020-02-13T08:48:38Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}, "afterCommit": {"oid": "061ff5687f2236d33918fd3a06141bbc90da6fae", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/061ff5687f2236d33918fd3a06141bbc90da6fae", "committedDate": "2020-02-14T09:28:26Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "061ff5687f2236d33918fd3a06141bbc90da6fae", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/061ff5687f2236d33918fd3a06141bbc90da6fae", "committedDate": "2020-02-14T09:28:26Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}, "afterCommit": {"oid": "f1b2de68d3801ac8adc381d56b4436cc6b44e663", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f1b2de68d3801ac8adc381d56b4436cc6b44e663", "committedDate": "2020-02-16T15:37:33Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4560b027ec94cee2f6deafa94a735072510386a9", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4560b027ec94cee2f6deafa94a735072510386a9", "committedDate": "2020-02-17T08:26:23Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into bal2java-central-cmd"}, "afterCommit": {"oid": "cac8c53b7c2a90c6ad1d2a38dd342b009a914ade", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cac8c53b7c2a90c6ad1d2a38dd342b009a914ade", "committedDate": "2020-02-17T12:13:58Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c93fc280e289c369d9e907457371c9c5cb2c4ef", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2c93fc280e289c369d9e907457371c9c5cb2c4ef", "committedDate": "2020-02-17T12:17:09Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into bal2java-central-cmd"}, "afterCommit": {"oid": "64b69158bc3339cbb5d199f16d6d654c4f7b8da0", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/64b69158bc3339cbb5d199f16d6d654c4f7b8da0", "committedDate": "2020-02-17T12:53:16Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into bal2java-central-cmd"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "64b69158bc3339cbb5d199f16d6d654c4f7b8da0", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/64b69158bc3339cbb5d199f16d6d654c4f7b8da0", "committedDate": "2020-02-17T12:53:16Z", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into bal2java-central-cmd"}, "afterCommit": {"oid": "1bccda6b51f5eced1175c8131e93ba6b92652f97", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1bccda6b51f5eced1175c8131e93ba6b92652f97", "committedDate": "2020-02-17T13:08:17Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1bccda6b51f5eced1175c8131e93ba6b92652f97", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1bccda6b51f5eced1175c8131e93ba6b92652f97", "committedDate": "2020-02-17T13:08:17Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}, "afterCommit": {"oid": "f207694e6d85345250ed511585c7557cf5fe9602", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f207694e6d85345250ed511585c7557cf5fe9602", "committedDate": "2020-02-17T14:54:53Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f207694e6d85345250ed511585c7557cf5fe9602", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f207694e6d85345250ed511585c7557cf5fe9602", "committedDate": "2020-02-17T14:54:53Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}, "afterCommit": {"oid": "63b9e8564c68573d0bf352c8a9f8bdb71fb94893", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/63b9e8564c68573d0bf352c8a9f8bdb71fb94893", "committedDate": "2020-02-17T16:07:55Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "63b9e8564c68573d0bf352c8a9f8bdb71fb94893", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/63b9e8564c68573d0bf352c8a9f8bdb71fb94893", "committedDate": "2020-02-17T16:07:55Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}, "afterCommit": {"oid": "e5308805a690871e57ef48b8443f10edf18f4e74", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e5308805a690871e57ef48b8443f10edf18f4e74", "committedDate": "2020-02-17T17:51:05Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e5308805a690871e57ef48b8443f10edf18f4e74", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e5308805a690871e57ef48b8443f10edf18f4e74", "committedDate": "2020-02-17T17:51:05Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}, "afterCommit": {"oid": "3b4db30dc50e0598af82e9590c23a22c96ffe188", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3b4db30dc50e0598af82e9590c23a22c96ffe188", "committedDate": "2020-02-18T05:10:50Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3b4db30dc50e0598af82e9590c23a22c96ffe188", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3b4db30dc50e0598af82e9590c23a22c96ffe188", "committedDate": "2020-02-18T05:10:50Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}, "afterCommit": {"oid": "48ae5d7170ec583c2bbe1aa486161f3950ca54b5", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/48ae5d7170ec583c2bbe1aa486161f3950ca54b5", "committedDate": "2020-02-18T06:24:33Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "48ae5d7170ec583c2bbe1aa486161f3950ca54b5", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/48ae5d7170ec583c2bbe1aa486161f3950ca54b5", "committedDate": "2020-02-18T06:24:33Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}, "afterCommit": {"oid": "b002fa1ef7d5a8be1a9f80067f02b5c2a3f13d1f", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b002fa1ef7d5a8be1a9f80067f02b5c2a3f13d1f", "committedDate": "2020-02-18T09:03:40Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b002fa1ef7d5a8be1a9f80067f02b5c2a3f13d1f", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b002fa1ef7d5a8be1a9f80067f02b5c2a3f13d1f", "committedDate": "2020-02-18T09:03:40Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}, "afterCommit": {"oid": "d95e539e1fa522e859fb4abb311e0b2b51866300", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d95e539e1fa522e859fb4abb311e0b2b51866300", "committedDate": "2020-02-18T09:37:50Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d95e539e1fa522e859fb4abb311e0b2b51866300", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d95e539e1fa522e859fb4abb311e0b2b51866300", "committedDate": "2020-02-18T09:37:50Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}, "afterCommit": {"oid": "7676b2d610f6989c60e32853a26feff076dc97a6", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7676b2d610f6989c60e32853a26feff076dc97a6", "committedDate": "2020-02-18T11:24:39Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNDI5NTU4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#pullrequestreview-360429558", "createdAt": "2020-02-18T15:24:38Z", "commit": {"oid": "7676b2d610f6989c60e32853a26feff076dc97a6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNToyNDozOVrOFrGrTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNToyNDozOVrOFrGrTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc0MjQ3Ng==", "bodyText": "Shall we remove this extra line?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#discussion_r380742476", "createdAt": "2020-02-18T15:24:39Z", "author": {"login": "suganyasuven"}, "path": "cli/ballerina-cli-module/src/main/java/org/ballerinalang/cli/module/Pull.java", "diffHunk": "@@ -0,0 +1,227 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.ballerinalang.cli.module;\n+\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.cli.module.util.ErrorUtil;\n+import org.ballerinalang.cli.module.util.Utils;\n+import org.ballerinalang.jvm.JSONParser;\n+import org.ballerinalang.jvm.values.MapValue;\n+\n+import java.io.BufferedReader;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static org.ballerinalang.cli.module.util.Utils.convertToUrl;\n+import static org.ballerinalang.cli.module.util.Utils.createHttpUrlConnection;\n+import static org.ballerinalang.cli.module.util.Utils.initializeSsl;\n+import static org.ballerinalang.cli.module.util.Utils.setRequestMethod;\n+\n+/**\n+ * This class is pulling the modules from ballerina central.\n+ */\n+public class Pull {\n+    private static final String VERSION_REGEX = \"(\\\\d+\\\\.)(\\\\d+\\\\.)(\\\\d+)\";\n+    private static PrintStream outStream = System.out;\n+    private static DefaultLogFormatter logFormatter = new DefaultLogFormatter();\n+\n+    private Pull() {\n+    }\n+\n+    public static void execute(String url, String modulePathInBaloCache, String modulePath, String proxyHost,\n+            int proxyPort, String proxyUsername, String proxyPassword, String supportedVersionRange, boolean isBuild,\n+            String nightlyBuild, String langSpecVersion, String platform) {\n+        if (isBuild) {\n+            logFormatter = new BuildLogFormatter();\n+        }\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(convertToUrl(url + supportedVersionRange), proxyHost,\n+                proxyPort, proxyUsername, proxyPassword);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // set headers.\n+        if (!platform.equals(\"\")) {\n+            conn.setRequestProperty(\"Ballerina-Platform\", platform);\n+        }\n+        if (!langSpecVersion.equals(\"\")) {\n+            conn.setRequestProperty(\"Ballerina-Language-Specification-Version\", langSpecVersion);\n+        }\n+        conn.setRequestProperty(\"Accept-Encoding\", \"identity\");\n+\n+        boolean redirect = false;\n+        try {\n+            int statusCode = conn.getResponseCode();\n+\n+            if (Integer.toString(statusCode).startsWith(\"5\")) {\n+                createError(\"unable to connect to remote repository: \" + url);\n+            } else if (statusCode != HttpURLConnection.HTTP_OK) {\n+                if (statusCode == HttpURLConnection.HTTP_MOVED_TEMP || statusCode == HttpURLConnection.HTTP_MOVED_PERM\n+                        || statusCode == HttpURLConnection.HTTP_SEE_OTHER) {\n+                    redirect = true;\n+                } else {\n+                    handleErrorResponse(url, modulePath, isBuild, conn, statusCode);\n+                }\n+            }\n+\n+            if (redirect) {\n+                // get redirect url from \"location\" header field\n+                String newUrl = conn.getHeaderField(\"Location\");\n+                String contentDisposition = conn.getHeaderField(\"Content-Disposition\");\n+\n+                conn = createHttpUrlConnection(convertToUrl(newUrl), proxyHost, proxyPort, proxyUsername,\n+                        proxyPassword);\n+                conn.setRequestProperty(\"Content-Disposition\", contentDisposition);\n+\n+                String resolvedURI = conn.getHeaderField(\"RESOLVED_REQUESTED_URI\");\n+                if (resolvedURI == null || resolvedURI.equals(\"\")) {\n+                    resolvedURI = newUrl;\n+                }\n+                String[] uriParts = resolvedURI.split(\"/\");\n+                String moduleVersion = uriParts[uriParts.length - 3];\n+                boolean valid = moduleVersion.matches(VERSION_REGEX);\n+\n+                if (valid) {\n+                    String baloFile = setFileNameFromContentDispositionHeader(contentDisposition,\n+                            uriParts[uriParts.length - 1]);\n+                    Path baloCacheWithModulePath = Paths.get(modulePathInBaloCache, moduleVersion);\n+                    //<user.home>.ballerina/balo_cache/<org-name>/<module-name>/<module-version>\n+\n+                    Path baloPath = Paths.get(baloCacheWithModulePath.toString(), baloFile);\n+                    if (baloPath.toFile().exists()) {\n+                        createError(\"module already exists in the home repository: \" + baloPath.toString());\n+                    }\n+\n+                    createBaloFileDirectory(baloCacheWithModulePath);\n+                    copyBaloFile(modulePath, conn, moduleVersion, baloPath);\n+\n+                    if (nightlyBuild.equals(\"true\")) {\n+                        // If its a nightly build tag the file as a module from nightly\n+                        Path nightlyBuildMetaFile = Paths.get(baloCacheWithModulePath.toString(), \"nightly.build\");\n+                        if (!Paths.get(nightlyBuild).toFile().exists()) {\n+                            createNightlyBuildMetaFile(nightlyBuildMetaFile);\n+                        }\n+                    }\n+                } else {\n+                    createError(\"module version could not be detected\");\n+                }\n+            }\n+        } catch (IOException e) {\n+            createError(\"connection to the remote repository host failed: \" + e.getMessage());\n+        }\n+        conn.disconnect();\n+        Authenticator.setDefault(null);\n+    }\n+\n+    private static void createNightlyBuildMetaFile(Path nightlyBuildMetaFile) {\n+        try {\n+            Files.createFile(nightlyBuildMetaFile);\n+        } catch (Exception e) {\n+            createError(\"error occurred while creating nightly.build file.\");\n+        }\n+    }\n+\n+    private static void copyBaloFile(String modulePath, HttpURLConnection conn, String moduleVersion, Path baloPath) {\n+        try (InputStream inputStream = conn.getInputStream();\n+                FileOutputStream outputStream = new FileOutputStream(baloPath.toString())) {\n+            byte[] buffer = new byte[1024];\n+            int count;\n+\n+            long totalSizeInKB = conn.getContentLengthLong() / 1024;\n+            try (ProgressBar progressBar = new ProgressBar(\n+                    modulePath + \":\" + moduleVersion + \" [central.ballerina.io -> home repo] \",\n+                    totalSizeInKB, 1000, outStream, ProgressBarStyle.ASCII, \" KB\", 1)) {\n+                while ((count = inputStream.read(buffer)) > 0) {\n+                    outputStream.write(buffer, 0, count);\n+                    progressBar.step();\n+                }\n+            }\n+        } catch (IOException e) {\n+            createError(\"error occurred copying the balo file: \" + e.getMessage());\n+        }\n+    }\n+\n+    private static void createBaloFileDirectory(Path baloCacheWithModulePath) {\n+        try {\n+            Files.createDirectory(baloCacheWithModulePath);\n+        } catch (Exception e) {\n+            createError(\"error creating directory for balo file\");\n+        }\n+    }\n+\n+    private static void handleErrorResponse(String url, String modulePath, boolean isBuild, HttpURLConnection conn,\n+            int statusCode) {\n+        try (BufferedReader reader = new BufferedReader(\n+                new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+            StringBuilder result = new StringBuilder();\n+            String line;\n+            while ((line = reader.readLine()) != null) {\n+                result.append(line);\n+            }\n+\n+            MapValue payload = (MapValue) JSONParser.parse(result.toString());\n+            String errMsg = payload.getStringValue(\"message\");\n+\n+            if (statusCode == HttpURLConnection.HTTP_NOT_FOUND && isBuild && errMsg\n+                    .contains(\"module not found\")) {\n+                // To ignore printing the error\n+                createError(\"\");\n+            } else {\n+                createError(errMsg);\n+            }\n+        } catch (IOException e) {\n+            createError(\"failed to pull the module '\" + modulePath + \"' from the remote repository '\" + url\n+                    + \"'\");\n+        }\n+    }\n+\n+    private static void createError(String errMessage) {\n+        throw ErrorUtil.createCommandException(logFormatter.formatLog(errMessage));\n+    }\n+\n+    private static String setFileNameFromContentDispositionHeader(String contentDisposition, String baloFile) {\n+        if (contentDisposition != null && !contentDisposition.equals(\"\")) {\n+            return contentDisposition.substring(\"attachment; filename=\".length());\n+        } else {\n+            return baloFile;\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7676b2d610f6989c60e32853a26feff076dc97a6"}, "originalPosition": 214}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNDQ4NDI3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#pullrequestreview-360448427", "createdAt": "2020-02-18T15:45:53Z", "commit": {"oid": "7676b2d610f6989c60e32853a26feff076dc97a6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNTo0NTo1NFrOFrHleQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNTo0NTo1NFrOFrHleQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc1NzM2OQ==", "bodyText": "Shall we end the statement with the concatenation operator?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#discussion_r380757369", "createdAt": "2020-02-18T15:45:54Z", "author": {"login": "suganyasuven"}, "path": "cli/ballerina-cli-module/src/main/java/org/ballerinalang/cli/module/Pull.java", "diffHunk": "@@ -0,0 +1,227 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.ballerinalang.cli.module;\n+\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.cli.module.util.ErrorUtil;\n+import org.ballerinalang.cli.module.util.Utils;\n+import org.ballerinalang.jvm.JSONParser;\n+import org.ballerinalang.jvm.values.MapValue;\n+\n+import java.io.BufferedReader;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static org.ballerinalang.cli.module.util.Utils.convertToUrl;\n+import static org.ballerinalang.cli.module.util.Utils.createHttpUrlConnection;\n+import static org.ballerinalang.cli.module.util.Utils.initializeSsl;\n+import static org.ballerinalang.cli.module.util.Utils.setRequestMethod;\n+\n+/**\n+ * This class is pulling the modules from ballerina central.\n+ */\n+public class Pull {\n+    private static final String VERSION_REGEX = \"(\\\\d+\\\\.)(\\\\d+\\\\.)(\\\\d+)\";\n+    private static PrintStream outStream = System.out;\n+    private static DefaultLogFormatter logFormatter = new DefaultLogFormatter();\n+\n+    private Pull() {\n+    }\n+\n+    public static void execute(String url, String modulePathInBaloCache, String modulePath, String proxyHost,\n+            int proxyPort, String proxyUsername, String proxyPassword, String supportedVersionRange, boolean isBuild,\n+            String nightlyBuild, String langSpecVersion, String platform) {\n+        if (isBuild) {\n+            logFormatter = new BuildLogFormatter();\n+        }\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(convertToUrl(url + supportedVersionRange), proxyHost,\n+                proxyPort, proxyUsername, proxyPassword);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // set headers.\n+        if (!platform.equals(\"\")) {\n+            conn.setRequestProperty(\"Ballerina-Platform\", platform);\n+        }\n+        if (!langSpecVersion.equals(\"\")) {\n+            conn.setRequestProperty(\"Ballerina-Language-Specification-Version\", langSpecVersion);\n+        }\n+        conn.setRequestProperty(\"Accept-Encoding\", \"identity\");\n+\n+        boolean redirect = false;\n+        try {\n+            int statusCode = conn.getResponseCode();\n+\n+            if (Integer.toString(statusCode).startsWith(\"5\")) {\n+                createError(\"unable to connect to remote repository: \" + url);\n+            } else if (statusCode != HttpURLConnection.HTTP_OK) {\n+                if (statusCode == HttpURLConnection.HTTP_MOVED_TEMP || statusCode == HttpURLConnection.HTTP_MOVED_PERM\n+                        || statusCode == HttpURLConnection.HTTP_SEE_OTHER) {\n+                    redirect = true;\n+                } else {\n+                    handleErrorResponse(url, modulePath, isBuild, conn, statusCode);\n+                }\n+            }\n+\n+            if (redirect) {\n+                // get redirect url from \"location\" header field\n+                String newUrl = conn.getHeaderField(\"Location\");\n+                String contentDisposition = conn.getHeaderField(\"Content-Disposition\");\n+\n+                conn = createHttpUrlConnection(convertToUrl(newUrl), proxyHost, proxyPort, proxyUsername,\n+                        proxyPassword);\n+                conn.setRequestProperty(\"Content-Disposition\", contentDisposition);\n+\n+                String resolvedURI = conn.getHeaderField(\"RESOLVED_REQUESTED_URI\");\n+                if (resolvedURI == null || resolvedURI.equals(\"\")) {\n+                    resolvedURI = newUrl;\n+                }\n+                String[] uriParts = resolvedURI.split(\"/\");\n+                String moduleVersion = uriParts[uriParts.length - 3];\n+                boolean valid = moduleVersion.matches(VERSION_REGEX);\n+\n+                if (valid) {\n+                    String baloFile = setFileNameFromContentDispositionHeader(contentDisposition,\n+                            uriParts[uriParts.length - 1]);\n+                    Path baloCacheWithModulePath = Paths.get(modulePathInBaloCache, moduleVersion);\n+                    //<user.home>.ballerina/balo_cache/<org-name>/<module-name>/<module-version>\n+\n+                    Path baloPath = Paths.get(baloCacheWithModulePath.toString(), baloFile);\n+                    if (baloPath.toFile().exists()) {\n+                        createError(\"module already exists in the home repository: \" + baloPath.toString());\n+                    }\n+\n+                    createBaloFileDirectory(baloCacheWithModulePath);\n+                    copyBaloFile(modulePath, conn, moduleVersion, baloPath);\n+\n+                    if (nightlyBuild.equals(\"true\")) {\n+                        // If its a nightly build tag the file as a module from nightly\n+                        Path nightlyBuildMetaFile = Paths.get(baloCacheWithModulePath.toString(), \"nightly.build\");\n+                        if (!Paths.get(nightlyBuild).toFile().exists()) {\n+                            createNightlyBuildMetaFile(nightlyBuildMetaFile);\n+                        }\n+                    }\n+                } else {\n+                    createError(\"module version could not be detected\");\n+                }\n+            }\n+        } catch (IOException e) {\n+            createError(\"connection to the remote repository host failed: \" + e.getMessage());\n+        }\n+        conn.disconnect();\n+        Authenticator.setDefault(null);\n+    }\n+\n+    private static void createNightlyBuildMetaFile(Path nightlyBuildMetaFile) {\n+        try {\n+            Files.createFile(nightlyBuildMetaFile);\n+        } catch (Exception e) {\n+            createError(\"error occurred while creating nightly.build file.\");\n+        }\n+    }\n+\n+    private static void copyBaloFile(String modulePath, HttpURLConnection conn, String moduleVersion, Path baloPath) {\n+        try (InputStream inputStream = conn.getInputStream();\n+                FileOutputStream outputStream = new FileOutputStream(baloPath.toString())) {\n+            byte[] buffer = new byte[1024];\n+            int count;\n+\n+            long totalSizeInKB = conn.getContentLengthLong() / 1024;\n+            try (ProgressBar progressBar = new ProgressBar(\n+                    modulePath + \":\" + moduleVersion + \" [central.ballerina.io -> home repo] \",\n+                    totalSizeInKB, 1000, outStream, ProgressBarStyle.ASCII, \" KB\", 1)) {\n+                while ((count = inputStream.read(buffer)) > 0) {\n+                    outputStream.write(buffer, 0, count);\n+                    progressBar.step();\n+                }\n+            }\n+        } catch (IOException e) {\n+            createError(\"error occurred copying the balo file: \" + e.getMessage());\n+        }\n+    }\n+\n+    private static void createBaloFileDirectory(Path baloCacheWithModulePath) {\n+        try {\n+            Files.createDirectory(baloCacheWithModulePath);\n+        } catch (Exception e) {\n+            createError(\"error creating directory for balo file\");\n+        }\n+    }\n+\n+    private static void handleErrorResponse(String url, String modulePath, boolean isBuild, HttpURLConnection conn,\n+            int statusCode) {\n+        try (BufferedReader reader = new BufferedReader(\n+                new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+            StringBuilder result = new StringBuilder();\n+            String line;\n+            while ((line = reader.readLine()) != null) {\n+                result.append(line);\n+            }\n+\n+            MapValue payload = (MapValue) JSONParser.parse(result.toString());\n+            String errMsg = payload.getStringValue(\"message\");\n+\n+            if (statusCode == HttpURLConnection.HTTP_NOT_FOUND && isBuild && errMsg\n+                    .contains(\"module not found\")) {\n+                // To ignore printing the error\n+                createError(\"\");\n+            } else {\n+                createError(errMsg);\n+            }\n+        } catch (IOException e) {\n+            createError(\"failed to pull the module '\" + modulePath + \"' from the remote repository '\" + url", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7676b2d610f6989c60e32853a26feff076dc97a6"}, "originalPosition": 198}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7676b2d610f6989c60e32853a26feff076dc97a6", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7676b2d610f6989c60e32853a26feff076dc97a6", "committedDate": "2020-02-18T11:24:39Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}, "afterCommit": {"oid": "7687615d1c20fc1455e79b211964ae46992df054", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7687615d1c20fc1455e79b211964ae46992df054", "committedDate": "2020-02-18T17:10:10Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7687615d1c20fc1455e79b211964ae46992df054", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7687615d1c20fc1455e79b211964ae46992df054", "committedDate": "2020-02-18T17:10:10Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}, "afterCommit": {"oid": "1dd12dc846221a799094ab71649a6378ea32ed87", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1dd12dc846221a799094ab71649a6378ea32ed87", "committedDate": "2020-02-19T05:26:39Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwODk0OTAw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#pullrequestreview-360894900", "createdAt": "2020-02-19T07:42:51Z", "commit": {"oid": "1dd12dc846221a799094ab71649a6378ea32ed87"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNzo0Mjo1MVrOFrdxXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNzo1NDowM1rOFreBiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEyMDg2Mg==", "bodyText": "licence year 2020", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#discussion_r381120862", "createdAt": "2020-02-19T07:42:51Z", "author": {"login": "warunalakshitha"}, "path": "cli/ballerina-cli-module/build.gradle", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dd12dc846221a799094ab71649a6378ea32ed87"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEyMTExMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            description = 'Ballerina - CLI Module Push'\n          \n          \n            \n            description = 'Ballerina - CLI Module'", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#discussion_r381121111", "createdAt": "2020-02-19T07:43:32Z", "author": {"login": "warunalakshitha"}, "path": "cli/ballerina-cli-module/build.gradle", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+apply from: \"$rootDir/gradle/javaProject.gradle\"\n+\n+configurations {\n+    birJar\n+    bir\n+    birJarCompile { transitive false }\n+    testCompile.exclude group: 'org.slf4j', module: 'slf4j-log4j12'\n+    testCompile.exclude group: 'org.slf4j', module: 'slf4j-simple'\n+    testCompile.exclude group: 'org.ops4j.pax.logging', module: 'pax-logging-api'\n+}\n+\n+dependencies {\n+\n+    bir project(path: ':ballerina-io',  configuration: 'bir')\n+    bir project(path: ':testerina:testerina-core',  configuration: 'bir')\n+\n+    implementation project(':ballerina-runtime')\n+    implementation project(':toml-parser')\n+    implementation 'com.moandjiezana.toml:toml4j'\n+    implementation 'info.picocli:picocli'\n+    implementation 'org.apache.commons:commons-compress:1.18'\n+    implementation 'me.tongfei:progressbar:0.7.4'\n+    implementation 'org.jline:jline:3.11.0'\n+\n+    testCompile 'org.testng:testng'\n+    testCompile 'com.moandjiezana.toml:toml4j'\n+\n+    testRuntime project(':ballerina-jvm')\n+    testRuntime project(':ballerina-bir')\n+    testRuntime project(':ballerina-backend-jvm')\n+\n+    testRuntime project(path: ':ballerina-backend-jvm', configuration: 'birJar')\n+    testRuntime project(path: ':ballerina-jvm', configuration: 'birJar')\n+    testRuntime project(path: ':ballerina-bir', configuration: 'birJar')\n+\n+    birJarCompile project(path: ':ballerina-bootstrapper', configuration: 'pack4')\n+}\n+\n+task createBirCache {\n+    dependsOn configurations.bir\n+\n+    doLast {\n+        configurations.bir.each { artifact ->\n+            copy {\n+                from artifact\n+                into \"$buildDir/bir-cache/\"\n+            }\n+        }\n+    }\n+\n+    inputs.files configurations.bir\n+    outputs.dir \"$buildDir/bir-cache\"\n+    outputs.cacheIf { false }\n+}\n+\n+checkstyleMain {\n+    exclude 'org/ballerinalang/packerina/model/BaloToml.java'\n+}\n+\n+test {\n+    dependsOn createBirCache\n+    dependsOn configurations.birJar\n+    dependsOn configurations.birJarCompile\n+\n+    systemProperty \"java.util.logging.manager\", \"org.ballerinalang.logging.BLogManager\"\n+    useTestNG() {\n+        suites 'src/test/resources/testng.xml'\n+    }\n+    doFirst {\n+//        systemProperty \"ballerina.bootstrap.home\", files(configurations.birJarCompile).singleFile\n+    }\n+}\n+\n+description = 'Ballerina - CLI Module Push'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dd12dc846221a799094ab71649a6378ea32ed87"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEyMTc4NQ==", "bodyText": "Shall we remove the space", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#discussion_r381121785", "createdAt": "2020-02-19T07:45:02Z", "author": {"login": "warunalakshitha"}, "path": "cli/ballerina-cli-module/src/main/java/org/ballerinalang/cli/module/Pull.java", "diffHunk": "@@ -0,0 +1,226 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.ballerinalang.cli.module;\n+\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.cli.module.util.ErrorUtil;\n+import org.ballerinalang.cli.module.util.Utils;\n+import org.ballerinalang.jvm.JSONParser;\n+import org.ballerinalang.jvm.values.MapValue;\n+\n+import java.io.BufferedReader;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static org.ballerinalang.cli.module.util.Utils.convertToUrl;\n+import static org.ballerinalang.cli.module.util.Utils.createHttpUrlConnection;\n+import static org.ballerinalang.cli.module.util.Utils.initializeSsl;\n+import static org.ballerinalang.cli.module.util.Utils.setRequestMethod;\n+\n+/**\n+ * This class is pulling the modules from ballerina central.\n+ */\n+public class Pull {\n+    private static final String VERSION_REGEX = \"(\\\\d+\\\\.)(\\\\d+\\\\.)(\\\\d+)\";\n+    private static PrintStream outStream = System.out;\n+    private static DefaultLogFormatter logFormatter = new DefaultLogFormatter();\n+\n+    private Pull() {\n+    }\n+\n+    public static void execute(String url, String modulePathInBaloCache, String modulePath, String proxyHost,\n+            int proxyPort, String proxyUsername, String proxyPassword, String supportedVersionRange, boolean isBuild,\n+            String nightlyBuild, String langSpecVersion, String platform) {\n+        if (isBuild) {\n+            logFormatter = new BuildLogFormatter();\n+        }\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(convertToUrl(url + supportedVersionRange), proxyHost,\n+                proxyPort, proxyUsername, proxyPassword);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // set headers.\n+        if (!platform.equals(\"\")) {\n+            conn.setRequestProperty(\"Ballerina-Platform\", platform);\n+        }\n+        if (!langSpecVersion.equals(\"\")) {\n+            conn.setRequestProperty(\"Ballerina-Language-Specification-Version\", langSpecVersion);\n+        }\n+        conn.setRequestProperty(\"Accept-Encoding\", \"identity\");\n+\n+        boolean redirect = false;\n+        try {\n+            int statusCode = conn.getResponseCode();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dd12dc846221a799094ab71649a6378ea32ed87"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEyMjIzNg==", "bodyText": "Shall we add  conn.disconnect to finally block", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#discussion_r381122236", "createdAt": "2020-02-19T07:46:09Z", "author": {"login": "warunalakshitha"}, "path": "cli/ballerina-cli-module/src/main/java/org/ballerinalang/cli/module/Pull.java", "diffHunk": "@@ -0,0 +1,226 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.ballerinalang.cli.module;\n+\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.cli.module.util.ErrorUtil;\n+import org.ballerinalang.cli.module.util.Utils;\n+import org.ballerinalang.jvm.JSONParser;\n+import org.ballerinalang.jvm.values.MapValue;\n+\n+import java.io.BufferedReader;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static org.ballerinalang.cli.module.util.Utils.convertToUrl;\n+import static org.ballerinalang.cli.module.util.Utils.createHttpUrlConnection;\n+import static org.ballerinalang.cli.module.util.Utils.initializeSsl;\n+import static org.ballerinalang.cli.module.util.Utils.setRequestMethod;\n+\n+/**\n+ * This class is pulling the modules from ballerina central.\n+ */\n+public class Pull {\n+    private static final String VERSION_REGEX = \"(\\\\d+\\\\.)(\\\\d+\\\\.)(\\\\d+)\";\n+    private static PrintStream outStream = System.out;\n+    private static DefaultLogFormatter logFormatter = new DefaultLogFormatter();\n+\n+    private Pull() {\n+    }\n+\n+    public static void execute(String url, String modulePathInBaloCache, String modulePath, String proxyHost,\n+            int proxyPort, String proxyUsername, String proxyPassword, String supportedVersionRange, boolean isBuild,\n+            String nightlyBuild, String langSpecVersion, String platform) {\n+        if (isBuild) {\n+            logFormatter = new BuildLogFormatter();\n+        }\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(convertToUrl(url + supportedVersionRange), proxyHost,\n+                proxyPort, proxyUsername, proxyPassword);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // set headers.\n+        if (!platform.equals(\"\")) {\n+            conn.setRequestProperty(\"Ballerina-Platform\", platform);\n+        }\n+        if (!langSpecVersion.equals(\"\")) {\n+            conn.setRequestProperty(\"Ballerina-Language-Specification-Version\", langSpecVersion);\n+        }\n+        conn.setRequestProperty(\"Accept-Encoding\", \"identity\");\n+\n+        boolean redirect = false;\n+        try {\n+            int statusCode = conn.getResponseCode();\n+\n+            if (Integer.toString(statusCode).startsWith(\"5\")) {\n+                createError(\"unable to connect to remote repository: \" + url);\n+            } else if (statusCode != HttpURLConnection.HTTP_OK) {\n+                if (statusCode == HttpURLConnection.HTTP_MOVED_TEMP || statusCode == HttpURLConnection.HTTP_MOVED_PERM\n+                        || statusCode == HttpURLConnection.HTTP_SEE_OTHER) {\n+                    redirect = true;\n+                } else {\n+                    handleErrorResponse(url, modulePath, isBuild, conn, statusCode);\n+                }\n+            }\n+\n+            if (redirect) {\n+                // get redirect url from \"location\" header field\n+                String newUrl = conn.getHeaderField(\"Location\");\n+                String contentDisposition = conn.getHeaderField(\"Content-Disposition\");\n+\n+                conn = createHttpUrlConnection(convertToUrl(newUrl), proxyHost, proxyPort, proxyUsername,\n+                        proxyPassword);\n+                conn.setRequestProperty(\"Content-Disposition\", contentDisposition);\n+\n+                String resolvedURI = conn.getHeaderField(\"RESOLVED_REQUESTED_URI\");\n+                if (resolvedURI == null || resolvedURI.equals(\"\")) {\n+                    resolvedURI = newUrl;\n+                }\n+                String[] uriParts = resolvedURI.split(\"/\");\n+                String moduleVersion = uriParts[uriParts.length - 3];\n+                boolean valid = moduleVersion.matches(VERSION_REGEX);\n+\n+                if (valid) {\n+                    String baloFile = setFileNameFromContentDispositionHeader(contentDisposition,\n+                            uriParts[uriParts.length - 1]);\n+                    Path baloCacheWithModulePath = Paths.get(modulePathInBaloCache, moduleVersion);\n+                    //<user.home>.ballerina/balo_cache/<org-name>/<module-name>/<module-version>\n+\n+                    Path baloPath = Paths.get(baloCacheWithModulePath.toString(), baloFile);\n+                    if (baloPath.toFile().exists()) {\n+                        createError(\"module already exists in the home repository: \" + baloPath.toString());\n+                    }\n+\n+                    createBaloFileDirectory(baloCacheWithModulePath);\n+                    copyBaloFile(modulePath, conn, moduleVersion, baloPath);\n+\n+                    if (nightlyBuild.equals(\"true\")) {\n+                        // If its a nightly build tag the file as a module from nightly\n+                        Path nightlyBuildMetaFile = Paths.get(baloCacheWithModulePath.toString(), \"nightly.build\");\n+                        if (!Paths.get(nightlyBuild).toFile().exists()) {\n+                            createNightlyBuildMetaFile(nightlyBuildMetaFile);\n+                        }\n+                    }\n+                } else {\n+                    createError(\"module version could not be detected\");\n+                }\n+            }\n+        } catch (IOException e) {\n+            createError(\"connection to the remote repository host failed: \" + e.getMessage());\n+        }\n+        conn.disconnect();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dd12dc846221a799094ab71649a6378ea32ed87"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEyMjc0MA==", "bodyText": "nightlyBuild or nightlyBuildMetaFile?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#discussion_r381122740", "createdAt": "2020-02-19T07:47:32Z", "author": {"login": "warunalakshitha"}, "path": "cli/ballerina-cli-module/src/main/java/org/ballerinalang/cli/module/Pull.java", "diffHunk": "@@ -0,0 +1,226 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.ballerinalang.cli.module;\n+\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.cli.module.util.ErrorUtil;\n+import org.ballerinalang.cli.module.util.Utils;\n+import org.ballerinalang.jvm.JSONParser;\n+import org.ballerinalang.jvm.values.MapValue;\n+\n+import java.io.BufferedReader;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static org.ballerinalang.cli.module.util.Utils.convertToUrl;\n+import static org.ballerinalang.cli.module.util.Utils.createHttpUrlConnection;\n+import static org.ballerinalang.cli.module.util.Utils.initializeSsl;\n+import static org.ballerinalang.cli.module.util.Utils.setRequestMethod;\n+\n+/**\n+ * This class is pulling the modules from ballerina central.\n+ */\n+public class Pull {\n+    private static final String VERSION_REGEX = \"(\\\\d+\\\\.)(\\\\d+\\\\.)(\\\\d+)\";\n+    private static PrintStream outStream = System.out;\n+    private static DefaultLogFormatter logFormatter = new DefaultLogFormatter();\n+\n+    private Pull() {\n+    }\n+\n+    public static void execute(String url, String modulePathInBaloCache, String modulePath, String proxyHost,\n+            int proxyPort, String proxyUsername, String proxyPassword, String supportedVersionRange, boolean isBuild,\n+            String nightlyBuild, String langSpecVersion, String platform) {\n+        if (isBuild) {\n+            logFormatter = new BuildLogFormatter();\n+        }\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(convertToUrl(url + supportedVersionRange), proxyHost,\n+                proxyPort, proxyUsername, proxyPassword);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // set headers.\n+        if (!platform.equals(\"\")) {\n+            conn.setRequestProperty(\"Ballerina-Platform\", platform);\n+        }\n+        if (!langSpecVersion.equals(\"\")) {\n+            conn.setRequestProperty(\"Ballerina-Language-Specification-Version\", langSpecVersion);\n+        }\n+        conn.setRequestProperty(\"Accept-Encoding\", \"identity\");\n+\n+        boolean redirect = false;\n+        try {\n+            int statusCode = conn.getResponseCode();\n+\n+            if (Integer.toString(statusCode).startsWith(\"5\")) {\n+                createError(\"unable to connect to remote repository: \" + url);\n+            } else if (statusCode != HttpURLConnection.HTTP_OK) {\n+                if (statusCode == HttpURLConnection.HTTP_MOVED_TEMP || statusCode == HttpURLConnection.HTTP_MOVED_PERM\n+                        || statusCode == HttpURLConnection.HTTP_SEE_OTHER) {\n+                    redirect = true;\n+                } else {\n+                    handleErrorResponse(url, modulePath, isBuild, conn, statusCode);\n+                }\n+            }\n+\n+            if (redirect) {\n+                // get redirect url from \"location\" header field\n+                String newUrl = conn.getHeaderField(\"Location\");\n+                String contentDisposition = conn.getHeaderField(\"Content-Disposition\");\n+\n+                conn = createHttpUrlConnection(convertToUrl(newUrl), proxyHost, proxyPort, proxyUsername,\n+                        proxyPassword);\n+                conn.setRequestProperty(\"Content-Disposition\", contentDisposition);\n+\n+                String resolvedURI = conn.getHeaderField(\"RESOLVED_REQUESTED_URI\");\n+                if (resolvedURI == null || resolvedURI.equals(\"\")) {\n+                    resolvedURI = newUrl;\n+                }\n+                String[] uriParts = resolvedURI.split(\"/\");\n+                String moduleVersion = uriParts[uriParts.length - 3];\n+                boolean valid = moduleVersion.matches(VERSION_REGEX);\n+\n+                if (valid) {\n+                    String baloFile = setFileNameFromContentDispositionHeader(contentDisposition,\n+                            uriParts[uriParts.length - 1]);\n+                    Path baloCacheWithModulePath = Paths.get(modulePathInBaloCache, moduleVersion);\n+                    //<user.home>.ballerina/balo_cache/<org-name>/<module-name>/<module-version>\n+\n+                    Path baloPath = Paths.get(baloCacheWithModulePath.toString(), baloFile);\n+                    if (baloPath.toFile().exists()) {\n+                        createError(\"module already exists in the home repository: \" + baloPath.toString());\n+                    }\n+\n+                    createBaloFileDirectory(baloCacheWithModulePath);\n+                    copyBaloFile(modulePath, conn, moduleVersion, baloPath);\n+\n+                    if (nightlyBuild.equals(\"true\")) {\n+                        // If its a nightly build tag the file as a module from nightly\n+                        Path nightlyBuildMetaFile = Paths.get(baloCacheWithModulePath.toString(), \"nightly.build\");\n+                        if (!Paths.get(nightlyBuild).toFile().exists()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dd12dc846221a799094ab71649a6378ea32ed87"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEyMzIzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static void createNightlyBuildMetaFile(Path nightlyBuildMetaFile) {\n          \n          \n            \n                private static void createNightlyBuildMetaFile(Path nightlyBuildMetaFilePath) {", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#discussion_r381123231", "createdAt": "2020-02-19T07:48:52Z", "author": {"login": "warunalakshitha"}, "path": "cli/ballerina-cli-module/src/main/java/org/ballerinalang/cli/module/Pull.java", "diffHunk": "@@ -0,0 +1,226 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.ballerinalang.cli.module;\n+\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.cli.module.util.ErrorUtil;\n+import org.ballerinalang.cli.module.util.Utils;\n+import org.ballerinalang.jvm.JSONParser;\n+import org.ballerinalang.jvm.values.MapValue;\n+\n+import java.io.BufferedReader;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static org.ballerinalang.cli.module.util.Utils.convertToUrl;\n+import static org.ballerinalang.cli.module.util.Utils.createHttpUrlConnection;\n+import static org.ballerinalang.cli.module.util.Utils.initializeSsl;\n+import static org.ballerinalang.cli.module.util.Utils.setRequestMethod;\n+\n+/**\n+ * This class is pulling the modules from ballerina central.\n+ */\n+public class Pull {\n+    private static final String VERSION_REGEX = \"(\\\\d+\\\\.)(\\\\d+\\\\.)(\\\\d+)\";\n+    private static PrintStream outStream = System.out;\n+    private static DefaultLogFormatter logFormatter = new DefaultLogFormatter();\n+\n+    private Pull() {\n+    }\n+\n+    public static void execute(String url, String modulePathInBaloCache, String modulePath, String proxyHost,\n+            int proxyPort, String proxyUsername, String proxyPassword, String supportedVersionRange, boolean isBuild,\n+            String nightlyBuild, String langSpecVersion, String platform) {\n+        if (isBuild) {\n+            logFormatter = new BuildLogFormatter();\n+        }\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(convertToUrl(url + supportedVersionRange), proxyHost,\n+                proxyPort, proxyUsername, proxyPassword);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // set headers.\n+        if (!platform.equals(\"\")) {\n+            conn.setRequestProperty(\"Ballerina-Platform\", platform);\n+        }\n+        if (!langSpecVersion.equals(\"\")) {\n+            conn.setRequestProperty(\"Ballerina-Language-Specification-Version\", langSpecVersion);\n+        }\n+        conn.setRequestProperty(\"Accept-Encoding\", \"identity\");\n+\n+        boolean redirect = false;\n+        try {\n+            int statusCode = conn.getResponseCode();\n+\n+            if (Integer.toString(statusCode).startsWith(\"5\")) {\n+                createError(\"unable to connect to remote repository: \" + url);\n+            } else if (statusCode != HttpURLConnection.HTTP_OK) {\n+                if (statusCode == HttpURLConnection.HTTP_MOVED_TEMP || statusCode == HttpURLConnection.HTTP_MOVED_PERM\n+                        || statusCode == HttpURLConnection.HTTP_SEE_OTHER) {\n+                    redirect = true;\n+                } else {\n+                    handleErrorResponse(url, modulePath, isBuild, conn, statusCode);\n+                }\n+            }\n+\n+            if (redirect) {\n+                // get redirect url from \"location\" header field\n+                String newUrl = conn.getHeaderField(\"Location\");\n+                String contentDisposition = conn.getHeaderField(\"Content-Disposition\");\n+\n+                conn = createHttpUrlConnection(convertToUrl(newUrl), proxyHost, proxyPort, proxyUsername,\n+                        proxyPassword);\n+                conn.setRequestProperty(\"Content-Disposition\", contentDisposition);\n+\n+                String resolvedURI = conn.getHeaderField(\"RESOLVED_REQUESTED_URI\");\n+                if (resolvedURI == null || resolvedURI.equals(\"\")) {\n+                    resolvedURI = newUrl;\n+                }\n+                String[] uriParts = resolvedURI.split(\"/\");\n+                String moduleVersion = uriParts[uriParts.length - 3];\n+                boolean valid = moduleVersion.matches(VERSION_REGEX);\n+\n+                if (valid) {\n+                    String baloFile = setFileNameFromContentDispositionHeader(contentDisposition,\n+                            uriParts[uriParts.length - 1]);\n+                    Path baloCacheWithModulePath = Paths.get(modulePathInBaloCache, moduleVersion);\n+                    //<user.home>.ballerina/balo_cache/<org-name>/<module-name>/<module-version>\n+\n+                    Path baloPath = Paths.get(baloCacheWithModulePath.toString(), baloFile);\n+                    if (baloPath.toFile().exists()) {\n+                        createError(\"module already exists in the home repository: \" + baloPath.toString());\n+                    }\n+\n+                    createBaloFileDirectory(baloCacheWithModulePath);\n+                    copyBaloFile(modulePath, conn, moduleVersion, baloPath);\n+\n+                    if (nightlyBuild.equals(\"true\")) {\n+                        // If its a nightly build tag the file as a module from nightly\n+                        Path nightlyBuildMetaFile = Paths.get(baloCacheWithModulePath.toString(), \"nightly.build\");\n+                        if (!Paths.get(nightlyBuild).toFile().exists()) {\n+                            createNightlyBuildMetaFile(nightlyBuildMetaFile);\n+                        }\n+                    }\n+                } else {\n+                    createError(\"module version could not be detected\");\n+                }\n+            }\n+        } catch (IOException e) {\n+            createError(\"connection to the remote repository host failed: \" + e.getMessage());\n+        }\n+        conn.disconnect();\n+        Authenticator.setDefault(null);\n+    }\n+\n+    private static void createNightlyBuildMetaFile(Path nightlyBuildMetaFile) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dd12dc846221a799094ab71649a6378ea32ed87"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEyNDAxNQ==", "bodyText": "why we need to ignore the error?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#discussion_r381124015", "createdAt": "2020-02-19T07:51:10Z", "author": {"login": "warunalakshitha"}, "path": "cli/ballerina-cli-module/src/main/java/org/ballerinalang/cli/module/Pull.java", "diffHunk": "@@ -0,0 +1,226 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.ballerinalang.cli.module;\n+\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.cli.module.util.ErrorUtil;\n+import org.ballerinalang.cli.module.util.Utils;\n+import org.ballerinalang.jvm.JSONParser;\n+import org.ballerinalang.jvm.values.MapValue;\n+\n+import java.io.BufferedReader;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static org.ballerinalang.cli.module.util.Utils.convertToUrl;\n+import static org.ballerinalang.cli.module.util.Utils.createHttpUrlConnection;\n+import static org.ballerinalang.cli.module.util.Utils.initializeSsl;\n+import static org.ballerinalang.cli.module.util.Utils.setRequestMethod;\n+\n+/**\n+ * This class is pulling the modules from ballerina central.\n+ */\n+public class Pull {\n+    private static final String VERSION_REGEX = \"(\\\\d+\\\\.)(\\\\d+\\\\.)(\\\\d+)\";\n+    private static PrintStream outStream = System.out;\n+    private static DefaultLogFormatter logFormatter = new DefaultLogFormatter();\n+\n+    private Pull() {\n+    }\n+\n+    public static void execute(String url, String modulePathInBaloCache, String modulePath, String proxyHost,\n+            int proxyPort, String proxyUsername, String proxyPassword, String supportedVersionRange, boolean isBuild,\n+            String nightlyBuild, String langSpecVersion, String platform) {\n+        if (isBuild) {\n+            logFormatter = new BuildLogFormatter();\n+        }\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(convertToUrl(url + supportedVersionRange), proxyHost,\n+                proxyPort, proxyUsername, proxyPassword);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // set headers.\n+        if (!platform.equals(\"\")) {\n+            conn.setRequestProperty(\"Ballerina-Platform\", platform);\n+        }\n+        if (!langSpecVersion.equals(\"\")) {\n+            conn.setRequestProperty(\"Ballerina-Language-Specification-Version\", langSpecVersion);\n+        }\n+        conn.setRequestProperty(\"Accept-Encoding\", \"identity\");\n+\n+        boolean redirect = false;\n+        try {\n+            int statusCode = conn.getResponseCode();\n+\n+            if (Integer.toString(statusCode).startsWith(\"5\")) {\n+                createError(\"unable to connect to remote repository: \" + url);\n+            } else if (statusCode != HttpURLConnection.HTTP_OK) {\n+                if (statusCode == HttpURLConnection.HTTP_MOVED_TEMP || statusCode == HttpURLConnection.HTTP_MOVED_PERM\n+                        || statusCode == HttpURLConnection.HTTP_SEE_OTHER) {\n+                    redirect = true;\n+                } else {\n+                    handleErrorResponse(url, modulePath, isBuild, conn, statusCode);\n+                }\n+            }\n+\n+            if (redirect) {\n+                // get redirect url from \"location\" header field\n+                String newUrl = conn.getHeaderField(\"Location\");\n+                String contentDisposition = conn.getHeaderField(\"Content-Disposition\");\n+\n+                conn = createHttpUrlConnection(convertToUrl(newUrl), proxyHost, proxyPort, proxyUsername,\n+                        proxyPassword);\n+                conn.setRequestProperty(\"Content-Disposition\", contentDisposition);\n+\n+                String resolvedURI = conn.getHeaderField(\"RESOLVED_REQUESTED_URI\");\n+                if (resolvedURI == null || resolvedURI.equals(\"\")) {\n+                    resolvedURI = newUrl;\n+                }\n+                String[] uriParts = resolvedURI.split(\"/\");\n+                String moduleVersion = uriParts[uriParts.length - 3];\n+                boolean valid = moduleVersion.matches(VERSION_REGEX);\n+\n+                if (valid) {\n+                    String baloFile = setFileNameFromContentDispositionHeader(contentDisposition,\n+                            uriParts[uriParts.length - 1]);\n+                    Path baloCacheWithModulePath = Paths.get(modulePathInBaloCache, moduleVersion);\n+                    //<user.home>.ballerina/balo_cache/<org-name>/<module-name>/<module-version>\n+\n+                    Path baloPath = Paths.get(baloCacheWithModulePath.toString(), baloFile);\n+                    if (baloPath.toFile().exists()) {\n+                        createError(\"module already exists in the home repository: \" + baloPath.toString());\n+                    }\n+\n+                    createBaloFileDirectory(baloCacheWithModulePath);\n+                    copyBaloFile(modulePath, conn, moduleVersion, baloPath);\n+\n+                    if (nightlyBuild.equals(\"true\")) {\n+                        // If its a nightly build tag the file as a module from nightly\n+                        Path nightlyBuildMetaFile = Paths.get(baloCacheWithModulePath.toString(), \"nightly.build\");\n+                        if (!Paths.get(nightlyBuild).toFile().exists()) {\n+                            createNightlyBuildMetaFile(nightlyBuildMetaFile);\n+                        }\n+                    }\n+                } else {\n+                    createError(\"module version could not be detected\");\n+                }\n+            }\n+        } catch (IOException e) {\n+            createError(\"connection to the remote repository host failed: \" + e.getMessage());\n+        }\n+        conn.disconnect();\n+        Authenticator.setDefault(null);\n+    }\n+\n+    private static void createNightlyBuildMetaFile(Path nightlyBuildMetaFile) {\n+        try {\n+            Files.createFile(nightlyBuildMetaFile);\n+        } catch (Exception e) {\n+            createError(\"error occurred while creating nightly.build file.\");\n+        }\n+    }\n+\n+    private static void copyBaloFile(String modulePath, HttpURLConnection conn, String moduleVersion, Path baloPath) {\n+        try (InputStream inputStream = conn.getInputStream();\n+                FileOutputStream outputStream = new FileOutputStream(baloPath.toString())) {\n+            byte[] buffer = new byte[1024];\n+            int count;\n+\n+            long totalSizeInKB = conn.getContentLengthLong() / 1024;\n+            try (ProgressBar progressBar = new ProgressBar(\n+                    modulePath + \":\" + moduleVersion + \" [central.ballerina.io -> home repo] \",\n+                    totalSizeInKB, 1000, outStream, ProgressBarStyle.ASCII, \" KB\", 1)) {\n+                while ((count = inputStream.read(buffer)) > 0) {\n+                    outputStream.write(buffer, 0, count);\n+                    progressBar.step();\n+                }\n+            }\n+        } catch (IOException e) {\n+            createError(\"error occurred copying the balo file: \" + e.getMessage());\n+        }\n+    }\n+\n+    private static void createBaloFileDirectory(Path baloCacheWithModulePath) {\n+        try {\n+            Files.createDirectory(baloCacheWithModulePath);\n+        } catch (Exception e) {\n+            createError(\"error creating directory for balo file\");\n+        }\n+    }\n+\n+    private static void handleErrorResponse(String url, String modulePath, boolean isBuild, HttpURLConnection conn,\n+            int statusCode) {\n+        try (BufferedReader reader = new BufferedReader(\n+                new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+            StringBuilder result = new StringBuilder();\n+            String line;\n+            while ((line = reader.readLine()) != null) {\n+                result.append(line);\n+            }\n+\n+            MapValue payload = (MapValue) JSONParser.parse(result.toString());\n+            String errMsg = payload.getStringValue(\"message\");\n+\n+            if (statusCode == HttpURLConnection.HTTP_NOT_FOUND && isBuild && errMsg\n+                    .contains(\"module not found\")) {\n+                // To ignore printing the error\n+                createError(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dd12dc846221a799094ab71649a6378ea32ed87"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEyNDE3OA==", "bodyText": "Add to finally block", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#discussion_r381124178", "createdAt": "2020-02-19T07:51:37Z", "author": {"login": "warunalakshitha"}, "path": "cli/ballerina-cli-module/src/main/java/org/ballerinalang/cli/module/Push.java", "diffHunk": "@@ -0,0 +1,121 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.ballerinalang.cli.module;\n+\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.cli.module.util.ErrorUtil;\n+import org.ballerinalang.cli.module.util.Utils;\n+\n+import java.io.BufferedReader;\n+import java.io.DataOutputStream;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.cli.module.util.Utils.convertToUrl;\n+import static org.ballerinalang.cli.module.util.Utils.createHttpUrlConnection;\n+import static org.ballerinalang.cli.module.util.Utils.initializeSsl;\n+import static org.ballerinalang.cli.module.util.Utils.setRequestMethod;\n+\n+/**\n+ * This class is pushing the modules to ballerina central.\n+ */\n+public class Push {\n+\n+    private static PrintStream errStream = System.err;\n+    private static PrintStream outStream = System.out;\n+\n+    private Push() {\n+    }\n+\n+    public static void execute(String url, String proxyHost, int proxyPort, String proxyUsername, String proxyPassword,\n+            String accessToken, String orgName, String moduleName, String version, Path baloPath) {\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(convertToUrl(url), proxyHost, proxyPort, proxyUsername,\n+                proxyPassword);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.POST);\n+\n+        // set headers.\n+        conn.setRequestProperty(\"Authorization\", \"Bearer \" + accessToken);\n+        conn.setRequestProperty(\"Push-Organization\", orgName);\n+        conn.setRequestProperty(\"Content-Type\", \"application/octet-stream\");\n+\n+        conn.setDoOutput(true);\n+        conn.setChunkedStreamingMode(1024);\n+\n+        byte[] baloContent;\n+        try {\n+            baloContent = Files.readAllBytes(baloPath);\n+        } catch (IOException e) {\n+            throw ErrorUtil.createCommandException(\"cannot read the balo content\");\n+        }\n+\n+        try (DataOutputStream outputStream = new DataOutputStream(conn.getOutputStream())) {\n+            // send post request.\n+            byte[] buffer = new byte[1024];\n+            int count;\n+            long totalSizeInMB = baloContent.length / 1024;\n+\n+            try (ProgressBar progressBar = new ProgressBar(\n+                    orgName + \"/\" + moduleName + \":\" + version + \" [project repo -> central]\", totalSizeInMB, 1000,\n+                    outStream, ProgressBarStyle.ASCII, \" KB\", 1);\n+                    FileInputStream fis = new FileInputStream(baloPath.toFile())) {\n+                while ((count = fis.read(buffer)) > 0) {\n+                    outputStream.write(buffer, 0, count);\n+                    outputStream.flush();\n+                    progressBar.step();\n+                }\n+            }\n+        } catch (FileNotFoundException e) {\n+            throw ErrorUtil.createCommandException(\"cannot read the balo content\");\n+        } catch (IOException e) {\n+            throw ErrorUtil.createCommandException(\"error occurred while uploading balo to central: \" + e.getMessage());\n+        }\n+\n+        try {\n+            int statusCode = conn.getResponseCode();\n+\n+            if (Integer.toString(statusCode).startsWith(\"5\")) {\n+                errStream.println(\"unable to connect to remote repository: \" + url);\n+            } else if (statusCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n+                errStream.println(\"unauthorized access token for organisation: \" + orgName);\n+            } else if (statusCode != HttpURLConnection.HTTP_OK) {\n+                try (BufferedReader errorStream = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    String errorContent = errorStream.lines().collect(Collectors.joining(\"\\n\"));\n+                    errStream.println(errorContent);\n+                }\n+            } else {\n+                outStream.println(orgName + \"/\" + moduleName + \":\" + version + \" pushed to central successfully\");\n+            }\n+        } catch (IOException e) {\n+            throw ErrorUtil.createCommandException(e.getMessage());\n+        }\n+        conn.disconnect();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dd12dc846221a799094ab71649a6378ea32ed87"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEyNDQxNA==", "bodyText": "Shall we add this to finally block", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#discussion_r381124414", "createdAt": "2020-02-19T07:52:19Z", "author": {"login": "warunalakshitha"}, "path": "cli/ballerina-cli-module/src/main/java/org/ballerinalang/cli/module/Search.java", "diffHunk": "@@ -0,0 +1,236 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.ballerinalang.cli.module;\n+\n+import org.ballerinalang.cli.module.util.ErrorUtil;\n+import org.ballerinalang.cli.module.util.Utils;\n+import org.ballerinalang.jvm.JSONParser;\n+import org.ballerinalang.jvm.values.ArrayValue;\n+import org.ballerinalang.jvm.values.MapValue;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.nio.charset.Charset;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.stream.Collectors;\n+\n+import static org.ballerinalang.cli.module.util.Utils.convertToUrl;\n+import static org.ballerinalang.cli.module.util.Utils.createHttpUrlConnection;\n+import static org.ballerinalang.cli.module.util.Utils.initializeSsl;\n+import static org.ballerinalang.cli.module.util.Utils.setRequestMethod;\n+\n+/**\n+ * This class is searching modules from ballerina central.\n+ */\n+public class Search {\n+\n+    private static PrintStream errStream = System.err;\n+    private static PrintStream outStream = System.out;\n+\n+    private Search() {\n+    }\n+\n+    public static void execute(String url, String proxyHost, int proxyPort, String proxyUsername, String proxyPassword,\n+            String terminalWidth) {\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(convertToUrl(url), proxyHost, proxyPort, proxyUsername,\n+                proxyPassword);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        try {\n+            int statusCode = conn.getResponseCode();\n+\n+            if (Integer.toString(statusCode).startsWith(\"5\")) {\n+                errStream.println(\"unable to connect to remote repository: \" + url);\n+            } else if (statusCode != HttpURLConnection.HTTP_OK) {\n+                try (BufferedReader errorStream = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    String errorContent = errorStream.lines().collect(Collectors.joining(\"\\n\"));\n+                    errStream.println(errorContent);\n+                }\n+            } else {\n+                try (BufferedReader reader = new BufferedReader(\n+                        new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+                    StringBuilder result = new StringBuilder();\n+                    String line;\n+                    while ((line = reader.readLine()) != null) {\n+                        result.append(line);\n+                    }\n+                    MapValue payload = (MapValue) JSONParser.parse(result.toString());\n+                    if (payload.getIntValue(\"count\") > 0) {\n+                        ArrayValue modules = payload.getArrayValue(\"modules\");\n+                        printModules(modules, terminalWidth);\n+                    } else {\n+                        errStream.println(\"no modules found\");\n+                    }\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw ErrorUtil.createCommandException(e.getMessage());\n+        }\n+        conn.disconnect();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dd12dc846221a799094ab71649a6378ea32ed87"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEyNDgzOA==", "bodyText": "add close to finally block", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#discussion_r381124838", "createdAt": "2020-02-19T07:53:34Z", "author": {"login": "warunalakshitha"}, "path": "cli/ballerina-cli-module/src/main/java/org/ballerinalang/cli/module/TokenUpdater.java", "diffHunk": "@@ -0,0 +1,102 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.ballerinalang.cli.module;\n+\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+import org.ballerinalang.cli.module.util.ErrorUtil;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.net.InetSocketAddress;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+\n+/**\n+ * This class has a service which updates the access token in the `Settings.toml` file.\n+ */\n+public class TokenUpdater {\n+\n+    private static PrintStream errStream = System.err;\n+    private static PrintStream outStream = System.out;\n+\n+    private TokenUpdater() {\n+    }\n+\n+    public static void execute() {\n+        HttpServer server;\n+        try {\n+            server = HttpServer.create(new InetSocketAddress(9295), 0);\n+        } catch (IOException e) {\n+            throw ErrorUtil.createCommandException(\"error occurred while creating the server: \" + e.getMessage());\n+        }\n+        server.createContext(\"/update-settings\", new TokenUpdateHandler());\n+        server.setExecutor(null); // creates a default executor\n+        server.start();\n+    }\n+\n+    static class TokenUpdateHandler implements HttpHandler {\n+        @Override public void handle(HttpExchange httpExchange) {\n+            String token = getToken(httpExchange.getRequestURI().getPath());\n+            String currentUsersHomeDir = System.getProperty(\"user.home\");\n+            String settingsTomlPath =\n+                    currentUsersHomeDir + File.separator + \".ballerina\" + File.separator + \"Settings.toml\";\n+            FileOutputStream outputStream = null;\n+            try {\n+                outputStream = new FileOutputStream(settingsTomlPath);\n+                String str = \"[central]\\naccesstoken=\\\"\" + token + \"\\\"\";\n+                outputStream.write(str.getBytes(StandardCharsets.UTF_8));\n+            } catch (FileNotFoundException e) {\n+                throw ErrorUtil.createCommandException(\"Settings.toml file could not be found: \" + settingsTomlPath);\n+            } catch (IOException e) {\n+                throw ErrorUtil.createCommandException(\n+                        \"error occurred while writing to the Settings.toml file: \" + e.getMessage());\n+            } finally {\n+                try {\n+                    if (outputStream != null) {\n+                        outputStream.close();\n+                    }\n+                } catch (IOException e) {\n+                    errStream.println(\"error occurred while closing the output stream: \" + e.getMessage());\n+                }\n+            }\n+            outStream.println(\"token updated\");\n+\n+            try {\n+                String response = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\"/>\";\n+                httpExchange.getResponseHeaders().put(\"Content-Type\", Collections.singletonList(\"image/svg+xml\"));\n+                httpExchange.sendResponseHeaders(200, response.getBytes(StandardCharsets.UTF_8).length);\n+                OutputStream os = httpExchange.getResponseBody();\n+                os.write(response.getBytes(StandardCharsets.UTF_8));\n+                os.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dd12dc846221a799094ab71649a6378ea32ed87"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEyNTAwMA==", "bodyText": "Shall we use Paths.get()", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#discussion_r381125000", "createdAt": "2020-02-19T07:54:03Z", "author": {"login": "warunalakshitha"}, "path": "cli/ballerina-cli-module/src/main/java/org/ballerinalang/cli/module/TokenUpdater.java", "diffHunk": "@@ -0,0 +1,102 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.ballerinalang.cli.module;\n+\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+import org.ballerinalang.cli.module.util.ErrorUtil;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.net.InetSocketAddress;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+\n+/**\n+ * This class has a service which updates the access token in the `Settings.toml` file.\n+ */\n+public class TokenUpdater {\n+\n+    private static PrintStream errStream = System.err;\n+    private static PrintStream outStream = System.out;\n+\n+    private TokenUpdater() {\n+    }\n+\n+    public static void execute() {\n+        HttpServer server;\n+        try {\n+            server = HttpServer.create(new InetSocketAddress(9295), 0);\n+        } catch (IOException e) {\n+            throw ErrorUtil.createCommandException(\"error occurred while creating the server: \" + e.getMessage());\n+        }\n+        server.createContext(\"/update-settings\", new TokenUpdateHandler());\n+        server.setExecutor(null); // creates a default executor\n+        server.start();\n+    }\n+\n+    static class TokenUpdateHandler implements HttpHandler {\n+        @Override public void handle(HttpExchange httpExchange) {\n+            String token = getToken(httpExchange.getRequestURI().getPath());\n+            String currentUsersHomeDir = System.getProperty(\"user.home\");\n+            String settingsTomlPath =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dd12dc846221a799094ab71649a6378ea32ed87"}, "originalPosition": 61}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1dd12dc846221a799094ab71649a6378ea32ed87", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1dd12dc846221a799094ab71649a6378ea32ed87", "committedDate": "2020-02-19T05:26:39Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}, "afterCommit": {"oid": "25c9755acffbd2103e98e4e0bb3fbf2a04701e39", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/25c9755acffbd2103e98e4e0bb3fbf2a04701e39", "committedDate": "2020-02-19T16:27:15Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MDg4MzY4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#pullrequestreview-364088368", "createdAt": "2020-02-25T12:03:15Z", "commit": {"oid": "25c9755acffbd2103e98e4e0bb3fbf2a04701e39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMjowMzoxNlrOFuDjgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMjowMzoxNlrOFuDjgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgzNzA1Nw==", "bodyText": "Please add @since annotation for all the new classes.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#discussion_r383837057", "createdAt": "2020-02-25T12:03:16Z", "author": {"login": "anupama-pathirage"}, "path": "cli/ballerina-cli-module/src/main/java/org/ballerinalang/cli/module/Pull.java", "diffHunk": "@@ -0,0 +1,220 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.ballerinalang.cli.module;\n+\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.cli.module.util.ErrorUtil;\n+import org.ballerinalang.cli.module.util.Utils;\n+import org.ballerinalang.jvm.JSONParser;\n+import org.ballerinalang.jvm.values.MapValue;\n+\n+import java.io.BufferedReader;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static org.ballerinalang.cli.module.util.Utils.convertToUrl;\n+import static org.ballerinalang.cli.module.util.Utils.createHttpUrlConnection;\n+import static org.ballerinalang.cli.module.util.Utils.initializeSsl;\n+import static org.ballerinalang.cli.module.util.Utils.setRequestMethod;\n+\n+/**\n+ * This class is pulling the modules from ballerina central.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25c9755acffbd2103e98e4e0bb3fbf2a04701e39"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MDk3MzE2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#pullrequestreview-364097316", "createdAt": "2020-02-25T12:19:24Z", "commit": {"oid": "25c9755acffbd2103e98e4e0bb3fbf2a04701e39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMjoxOToyNFrOFuD_cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMjoxOToyNFrOFuD_cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg0NDIwOQ==", "bodyText": "What is the purpose of isBuild and statusCode?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#discussion_r383844209", "createdAt": "2020-02-25T12:19:24Z", "author": {"login": "anupama-pathirage"}, "path": "cli/ballerina-cli-module/src/main/java/org/ballerinalang/cli/module/Pull.java", "diffHunk": "@@ -0,0 +1,220 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.ballerinalang.cli.module;\n+\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.cli.module.util.ErrorUtil;\n+import org.ballerinalang.cli.module.util.Utils;\n+import org.ballerinalang.jvm.JSONParser;\n+import org.ballerinalang.jvm.values.MapValue;\n+\n+import java.io.BufferedReader;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static org.ballerinalang.cli.module.util.Utils.convertToUrl;\n+import static org.ballerinalang.cli.module.util.Utils.createHttpUrlConnection;\n+import static org.ballerinalang.cli.module.util.Utils.initializeSsl;\n+import static org.ballerinalang.cli.module.util.Utils.setRequestMethod;\n+\n+/**\n+ * This class is pulling the modules from ballerina central.\n+ */\n+public class Pull {\n+    private static final String VERSION_REGEX = \"(\\\\d+\\\\.)(\\\\d+\\\\.)(\\\\d+)\";\n+    private static PrintStream outStream = System.out;\n+    private static DefaultLogFormatter logFormatter = new DefaultLogFormatter();\n+\n+    private Pull() {\n+    }\n+\n+    public static void execute(String url, String modulePathInBaloCache, String modulePath, String proxyHost,\n+            int proxyPort, String proxyUsername, String proxyPassword, String supportedVersionRange, boolean isBuild,\n+            String nightlyBuild, String langSpecVersion, String platform) {\n+        if (isBuild) {\n+            logFormatter = new BuildLogFormatter();\n+        }\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(convertToUrl(url + supportedVersionRange), proxyHost,\n+                proxyPort, proxyUsername, proxyPassword);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // set headers.\n+        if (!platform.equals(\"\")) {\n+            conn.setRequestProperty(\"Ballerina-Platform\", platform);\n+        }\n+        if (!langSpecVersion.equals(\"\")) {\n+            conn.setRequestProperty(\"Ballerina-Language-Specification-Version\", langSpecVersion);\n+        }\n+        conn.setRequestProperty(\"Accept-Encoding\", \"identity\");\n+\n+        boolean redirect = false;\n+        try {\n+            int statusCode = conn.getResponseCode();\n+            if (Integer.toString(statusCode).startsWith(\"5\")) {\n+                createError(\"unable to connect to remote repository: \" + url);\n+            } else if (statusCode != HttpURLConnection.HTTP_OK) {\n+                if (statusCode == HttpURLConnection.HTTP_MOVED_TEMP || statusCode == HttpURLConnection.HTTP_MOVED_PERM\n+                        || statusCode == HttpURLConnection.HTTP_SEE_OTHER) {\n+                    redirect = true;\n+                } else {\n+                    handleErrorResponse(url, modulePath, isBuild, conn, statusCode);\n+                }\n+            }\n+\n+            if (redirect) {\n+                // get redirect url from \"location\" header field\n+                String newUrl = conn.getHeaderField(\"Location\");\n+                String contentDisposition = conn.getHeaderField(\"Content-Disposition\");\n+\n+                conn = createHttpUrlConnection(convertToUrl(newUrl), proxyHost, proxyPort, proxyUsername,\n+                        proxyPassword);\n+                conn.setRequestProperty(\"Content-Disposition\", contentDisposition);\n+\n+                String resolvedURI = conn.getHeaderField(\"RESOLVED_REQUESTED_URI\");\n+                if (resolvedURI == null || resolvedURI.equals(\"\")) {\n+                    resolvedURI = newUrl;\n+                }\n+                String[] uriParts = resolvedURI.split(\"/\");\n+                String moduleVersion = uriParts[uriParts.length - 3];\n+                boolean valid = moduleVersion.matches(VERSION_REGEX);\n+\n+                if (valid) {\n+                    String baloFile = setFileNameFromContentDispositionHeader(contentDisposition,\n+                            uriParts[uriParts.length - 1]);\n+                    Path baloCacheWithModulePath = Paths.get(modulePathInBaloCache, moduleVersion);\n+                    //<user.home>.ballerina/balo_cache/<org-name>/<module-name>/<module-version>\n+\n+                    Path baloPath = Paths.get(baloCacheWithModulePath.toString(), baloFile);\n+                    if (baloPath.toFile().exists()) {\n+                        createError(\"module already exists in the home repository: \" + baloPath.toString());\n+                    }\n+\n+                    createBaloFileDirectory(baloCacheWithModulePath);\n+                    copyBaloFile(modulePath, conn, moduleVersion, baloPath);\n+\n+                    if (nightlyBuild.equals(\"true\")) {\n+                        // If its a nightly build tag the file as a module from nightly\n+                        Path nightlyBuildMetaFile = Paths.get(baloCacheWithModulePath.toString(), \"nightly.build\");\n+                        if (!nightlyBuildMetaFile.toFile().exists()) {\n+                            createNightlyBuildMetaFile(nightlyBuildMetaFile);\n+                        }\n+                    }\n+                } else {\n+                    createError(\"module version could not be detected\");\n+                }\n+            }\n+        } catch (IOException e) {\n+            createError(\"connection to the remote repository host failed: \" + e.getMessage());\n+        } finally {\n+            conn.disconnect();\n+        }\n+        Authenticator.setDefault(null);\n+    }\n+\n+    private static void createNightlyBuildMetaFile(Path nightlyBuildMetaFile) {\n+        try {\n+            Files.createFile(nightlyBuildMetaFile);\n+        } catch (Exception e) {\n+            createError(\"error occurred while creating nightly.build file.\");\n+        }\n+    }\n+\n+    private static void copyBaloFile(String modulePath, HttpURLConnection conn, String moduleVersion, Path baloPath) {\n+        try (InputStream inputStream = conn.getInputStream();\n+                FileOutputStream outputStream = new FileOutputStream(baloPath.toString())) {\n+            byte[] buffer = new byte[1024];\n+            int count;\n+\n+            long totalSizeInKB = conn.getContentLengthLong() / 1024;\n+            try (ProgressBar progressBar = new ProgressBar(\n+                    modulePath + \":\" + moduleVersion + \" [central.ballerina.io -> home repo] \",\n+                    totalSizeInKB, 1000, outStream, ProgressBarStyle.ASCII, \" KB\", 1)) {\n+                while ((count = inputStream.read(buffer)) > 0) {\n+                    outputStream.write(buffer, 0, count);\n+                    progressBar.step();\n+                }\n+            }\n+            outStream.println(modulePath + \":\" + moduleVersion + \" pulled from central successfully\");\n+        } catch (IOException e) {\n+            createError(\"error occurred copying the balo file: \" + e.getMessage());\n+        }\n+    }\n+\n+    private static void createBaloFileDirectory(Path baloCacheWithModulePath) {\n+        try {\n+            Files.createDirectory(baloCacheWithModulePath);\n+        } catch (Exception e) {\n+            createError(\"error creating directory for balo file\");\n+        }\n+    }\n+\n+    private static void handleErrorResponse(String url, String modulePath, boolean isBuild, HttpURLConnection conn,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25c9755acffbd2103e98e4e0bb3fbf2a04701e39"}, "originalPosition": 178}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MDk3OTEw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#pullrequestreview-364097910", "createdAt": "2020-02-25T12:20:27Z", "commit": {"oid": "25c9755acffbd2103e98e4e0bb3fbf2a04701e39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMjoyMDoyN1rOFuEBOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMjoyMDoyN1rOFuEBOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg0NDY2Nw==", "bodyText": "Can be reformated to a single line?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#discussion_r383844667", "createdAt": "2020-02-25T12:20:27Z", "author": {"login": "anupama-pathirage"}, "path": "cli/ballerina-cli-module/src/main/java/org/ballerinalang/cli/module/Pull.java", "diffHunk": "@@ -0,0 +1,220 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.ballerinalang.cli.module;\n+\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.cli.module.util.ErrorUtil;\n+import org.ballerinalang.cli.module.util.Utils;\n+import org.ballerinalang.jvm.JSONParser;\n+import org.ballerinalang.jvm.values.MapValue;\n+\n+import java.io.BufferedReader;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static org.ballerinalang.cli.module.util.Utils.convertToUrl;\n+import static org.ballerinalang.cli.module.util.Utils.createHttpUrlConnection;\n+import static org.ballerinalang.cli.module.util.Utils.initializeSsl;\n+import static org.ballerinalang.cli.module.util.Utils.setRequestMethod;\n+\n+/**\n+ * This class is pulling the modules from ballerina central.\n+ */\n+public class Pull {\n+    private static final String VERSION_REGEX = \"(\\\\d+\\\\.)(\\\\d+\\\\.)(\\\\d+)\";\n+    private static PrintStream outStream = System.out;\n+    private static DefaultLogFormatter logFormatter = new DefaultLogFormatter();\n+\n+    private Pull() {\n+    }\n+\n+    public static void execute(String url, String modulePathInBaloCache, String modulePath, String proxyHost,\n+            int proxyPort, String proxyUsername, String proxyPassword, String supportedVersionRange, boolean isBuild,\n+            String nightlyBuild, String langSpecVersion, String platform) {\n+        if (isBuild) {\n+            logFormatter = new BuildLogFormatter();\n+        }\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(convertToUrl(url + supportedVersionRange), proxyHost,\n+                proxyPort, proxyUsername, proxyPassword);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // set headers.\n+        if (!platform.equals(\"\")) {\n+            conn.setRequestProperty(\"Ballerina-Platform\", platform);\n+        }\n+        if (!langSpecVersion.equals(\"\")) {\n+            conn.setRequestProperty(\"Ballerina-Language-Specification-Version\", langSpecVersion);\n+        }\n+        conn.setRequestProperty(\"Accept-Encoding\", \"identity\");\n+\n+        boolean redirect = false;\n+        try {\n+            int statusCode = conn.getResponseCode();\n+            if (Integer.toString(statusCode).startsWith(\"5\")) {\n+                createError(\"unable to connect to remote repository: \" + url);\n+            } else if (statusCode != HttpURLConnection.HTTP_OK) {\n+                if (statusCode == HttpURLConnection.HTTP_MOVED_TEMP || statusCode == HttpURLConnection.HTTP_MOVED_PERM\n+                        || statusCode == HttpURLConnection.HTTP_SEE_OTHER) {\n+                    redirect = true;\n+                } else {\n+                    handleErrorResponse(url, modulePath, isBuild, conn, statusCode);\n+                }\n+            }\n+\n+            if (redirect) {\n+                // get redirect url from \"location\" header field\n+                String newUrl = conn.getHeaderField(\"Location\");\n+                String contentDisposition = conn.getHeaderField(\"Content-Disposition\");\n+\n+                conn = createHttpUrlConnection(convertToUrl(newUrl), proxyHost, proxyPort, proxyUsername,\n+                        proxyPassword);\n+                conn.setRequestProperty(\"Content-Disposition\", contentDisposition);\n+\n+                String resolvedURI = conn.getHeaderField(\"RESOLVED_REQUESTED_URI\");\n+                if (resolvedURI == null || resolvedURI.equals(\"\")) {\n+                    resolvedURI = newUrl;\n+                }\n+                String[] uriParts = resolvedURI.split(\"/\");\n+                String moduleVersion = uriParts[uriParts.length - 3];\n+                boolean valid = moduleVersion.matches(VERSION_REGEX);\n+\n+                if (valid) {\n+                    String baloFile = setFileNameFromContentDispositionHeader(contentDisposition,\n+                            uriParts[uriParts.length - 1]);\n+                    Path baloCacheWithModulePath = Paths.get(modulePathInBaloCache, moduleVersion);\n+                    //<user.home>.ballerina/balo_cache/<org-name>/<module-name>/<module-version>\n+\n+                    Path baloPath = Paths.get(baloCacheWithModulePath.toString(), baloFile);\n+                    if (baloPath.toFile().exists()) {\n+                        createError(\"module already exists in the home repository: \" + baloPath.toString());\n+                    }\n+\n+                    createBaloFileDirectory(baloCacheWithModulePath);\n+                    copyBaloFile(modulePath, conn, moduleVersion, baloPath);\n+\n+                    if (nightlyBuild.equals(\"true\")) {\n+                        // If its a nightly build tag the file as a module from nightly\n+                        Path nightlyBuildMetaFile = Paths.get(baloCacheWithModulePath.toString(), \"nightly.build\");\n+                        if (!nightlyBuildMetaFile.toFile().exists()) {\n+                            createNightlyBuildMetaFile(nightlyBuildMetaFile);\n+                        }\n+                    }\n+                } else {\n+                    createError(\"module version could not be detected\");\n+                }\n+            }\n+        } catch (IOException e) {\n+            createError(\"connection to the remote repository host failed: \" + e.getMessage());\n+        } finally {\n+            conn.disconnect();\n+        }\n+        Authenticator.setDefault(null);\n+    }\n+\n+    private static void createNightlyBuildMetaFile(Path nightlyBuildMetaFile) {\n+        try {\n+            Files.createFile(nightlyBuildMetaFile);\n+        } catch (Exception e) {\n+            createError(\"error occurred while creating nightly.build file.\");\n+        }\n+    }\n+\n+    private static void copyBaloFile(String modulePath, HttpURLConnection conn, String moduleVersion, Path baloPath) {\n+        try (InputStream inputStream = conn.getInputStream();\n+                FileOutputStream outputStream = new FileOutputStream(baloPath.toString())) {\n+            byte[] buffer = new byte[1024];\n+            int count;\n+\n+            long totalSizeInKB = conn.getContentLengthLong() / 1024;\n+            try (ProgressBar progressBar = new ProgressBar(\n+                    modulePath + \":\" + moduleVersion + \" [central.ballerina.io -> home repo] \",\n+                    totalSizeInKB, 1000, outStream, ProgressBarStyle.ASCII, \" KB\", 1)) {\n+                while ((count = inputStream.read(buffer)) > 0) {\n+                    outputStream.write(buffer, 0, count);\n+                    progressBar.step();\n+                }\n+            }\n+            outStream.println(modulePath + \":\" + moduleVersion + \" pulled from central successfully\");\n+        } catch (IOException e) {\n+            createError(\"error occurred copying the balo file: \" + e.getMessage());\n+        }\n+    }\n+\n+    private static void createBaloFileDirectory(Path baloCacheWithModulePath) {\n+        try {\n+            Files.createDirectory(baloCacheWithModulePath);\n+        } catch (Exception e) {\n+            createError(\"error creating directory for balo file\");\n+        }\n+    }\n+\n+    private static void handleErrorResponse(String url, String modulePath, boolean isBuild, HttpURLConnection conn,\n+            int statusCode) {\n+        try (BufferedReader reader = new BufferedReader(\n+                new InputStreamReader(conn.getInputStream(), Charset.defaultCharset()))) {\n+            StringBuilder result = new StringBuilder();\n+            String line;\n+            while ((line = reader.readLine()) != null) {\n+                result.append(line);\n+            }\n+\n+            MapValue payload = (MapValue) JSONParser.parse(result.toString());\n+            String errMsg = payload.getStringValue(\"message\");\n+            createError(errMsg);\n+        } catch (IOException e) {\n+            createError(\"failed to pull the module '\" + modulePath + \"' from the remote repository '\" +\n+                    url + \"'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25c9755acffbd2103e98e4e0bb3fbf2a04701e39"}, "originalPosition": 193}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MDk5OTA2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#pullrequestreview-364099906", "createdAt": "2020-02-25T12:24:06Z", "commit": {"oid": "25c9755acffbd2103e98e4e0bb3fbf2a04701e39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMjoyNDowN1rOFuEHig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMjoyNDowN1rOFuEHig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg0NjI4Mg==", "bodyText": "Can platform become null? Should we use null safe check? i.e. \"\".equals(platform)?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#discussion_r383846282", "createdAt": "2020-02-25T12:24:07Z", "author": {"login": "anupama-pathirage"}, "path": "cli/ballerina-cli-module/src/main/java/org/ballerinalang/cli/module/Pull.java", "diffHunk": "@@ -0,0 +1,220 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.ballerinalang.cli.module;\n+\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.cli.module.util.ErrorUtil;\n+import org.ballerinalang.cli.module.util.Utils;\n+import org.ballerinalang.jvm.JSONParser;\n+import org.ballerinalang.jvm.values.MapValue;\n+\n+import java.io.BufferedReader;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static org.ballerinalang.cli.module.util.Utils.convertToUrl;\n+import static org.ballerinalang.cli.module.util.Utils.createHttpUrlConnection;\n+import static org.ballerinalang.cli.module.util.Utils.initializeSsl;\n+import static org.ballerinalang.cli.module.util.Utils.setRequestMethod;\n+\n+/**\n+ * This class is pulling the modules from ballerina central.\n+ */\n+public class Pull {\n+    private static final String VERSION_REGEX = \"(\\\\d+\\\\.)(\\\\d+\\\\.)(\\\\d+)\";\n+    private static PrintStream outStream = System.out;\n+    private static DefaultLogFormatter logFormatter = new DefaultLogFormatter();\n+\n+    private Pull() {\n+    }\n+\n+    public static void execute(String url, String modulePathInBaloCache, String modulePath, String proxyHost,\n+            int proxyPort, String proxyUsername, String proxyPassword, String supportedVersionRange, boolean isBuild,\n+            String nightlyBuild, String langSpecVersion, String platform) {\n+        if (isBuild) {\n+            logFormatter = new BuildLogFormatter();\n+        }\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(convertToUrl(url + supportedVersionRange), proxyHost,\n+                proxyPort, proxyUsername, proxyPassword);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // set headers.\n+        if (!platform.equals(\"\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25c9755acffbd2103e98e4e0bb3fbf2a04701e39"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MTA2NTkw", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#pullrequestreview-364106590", "createdAt": "2020-02-25T12:36:11Z", "commit": {"oid": "25c9755acffbd2103e98e4e0bb3fbf2a04701e39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMjozNjoxMVrOFuEcbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMjozNjoxMVrOFuEcbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg1MTYyOA==", "bodyText": "Seems proxyPortAsString and executor is not needed anymore.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#discussion_r383851628", "createdAt": "2020-02-25T12:36:11Z", "author": {"login": "anupama-pathirage"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/packaging/converters/URIConverter.java", "diffHunk": "@@ -127,35 +128,36 @@ public URI combine(URI s, String p) {\n         String nightlyBuild = String.valueOf(RepoUtils.getBallerinaVersion().contains(\"SNAPSHOT\"));\n         EmbeddedExecutor executor = EmbeddedExecutorProvider.getInstance().getExecutor();\n         for (String supportedPlatform : SUPPORTED_PLATFORMS) {\n-            Optional<RuntimeException> runtimeException = executor.executeMainFunction(\"module_pull\",\n-                    remoteURI.toString(), modulePathInBaloCache.toString(), modulePath, proxy.getHost(),\n-                    proxyPortAsString, proxy.getUserName(), proxy.getPassword(), RepoUtils.getTerminalWidth(),\n-                    supportedVersionRange, String.valueOf(this.isBuild), nightlyBuild, IMPLEMENTATION_VERSION,\n-                    supportedPlatform);\n-            // Check if error has occurred or not.\n-            if (runtimeException.isPresent()) {\n-                String errorMessage = runtimeException.get().getMessage();\n-                if (null != errorMessage && !\"\".equals(errorMessage.trim())) {\n-                    // removing the error stack\n-                    if (errorMessage.contains(\"\\n\\tat\")) {\n-                        errorMessage = errorMessage.substring(0, errorMessage.indexOf(\"\\n\\tat\"));\n-                    }\n-    \n-                    // if module already exists in home repository\n-                    if (errorMessage.contains(\"module already exists in the home repository\") && this.isBuild) {\n-                        // Need to update the version of moduleID that was resolved by remote. But since the version\n-                        // cannot be returned by the call done to module_pull.bal file we need to set the version from\n-                        // the downloaded balo file.\n-                        Patten patten = this.homeBaloRepo.calculate(moduleID);\n-                        return patten.convertToSources(this.homeBaloRepo.getConverterInstance(), moduleID);\n-                    }\n-\n-                    // check if the message is empty or not. Empty means module not found. Else some other error.\n-                    // Log if it is some other error.\n-                    if (!\"\".equals(errorMessage.replace(\"error: \\t\", \"\").trim())) {\n-                        this.errStream.println(errorMessage.trim());\n-                        return Stream.of();\n-                    }\n+            String errorMessage = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25c9755acffbd2103e98e4e0bb3fbf2a04701e39"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MTA4Mjg5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#pullrequestreview-364108289", "createdAt": "2020-02-25T12:38:57Z", "commit": {"oid": "25c9755acffbd2103e98e4e0bb3fbf2a04701e39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMjozODo1N1rOFuEhiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMjozODo1N1rOFuEhiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg1MjkzOQ==", "bodyText": "Why nightlyBuild is passed as a string here? Seems a boolean can be passed directly as it is taken as String.valueOf(RepoUtils.getBallerinaVersion().contains(\"SNAPSHOT\")); in the caller function.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#discussion_r383852939", "createdAt": "2020-02-25T12:38:57Z", "author": {"login": "anupama-pathirage"}, "path": "cli/ballerina-cli-module/src/main/java/org/ballerinalang/cli/module/Pull.java", "diffHunk": "@@ -0,0 +1,220 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.ballerinalang.cli.module;\n+\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.cli.module.util.ErrorUtil;\n+import org.ballerinalang.cli.module.util.Utils;\n+import org.ballerinalang.jvm.JSONParser;\n+import org.ballerinalang.jvm.values.MapValue;\n+\n+import java.io.BufferedReader;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static org.ballerinalang.cli.module.util.Utils.convertToUrl;\n+import static org.ballerinalang.cli.module.util.Utils.createHttpUrlConnection;\n+import static org.ballerinalang.cli.module.util.Utils.initializeSsl;\n+import static org.ballerinalang.cli.module.util.Utils.setRequestMethod;\n+\n+/**\n+ * This class is pulling the modules from ballerina central.\n+ */\n+public class Pull {\n+    private static final String VERSION_REGEX = \"(\\\\d+\\\\.)(\\\\d+\\\\.)(\\\\d+)\";\n+    private static PrintStream outStream = System.out;\n+    private static DefaultLogFormatter logFormatter = new DefaultLogFormatter();\n+\n+    private Pull() {\n+    }\n+\n+    public static void execute(String url, String modulePathInBaloCache, String modulePath, String proxyHost,\n+            int proxyPort, String proxyUsername, String proxyPassword, String supportedVersionRange, boolean isBuild,\n+            String nightlyBuild, String langSpecVersion, String platform) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25c9755acffbd2103e98e4e0bb3fbf2a04701e39"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MTE1OTUy", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#pullrequestreview-364115952", "createdAt": "2020-02-25T12:52:35Z", "commit": {"oid": "25c9755acffbd2103e98e4e0bb3fbf2a04701e39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMjo1MjozNVrOFuE6EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMjo1MjozNVrOFuE6EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg1OTIxNw==", "bodyText": "Can we check statusCode >= 500 here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#discussion_r383859217", "createdAt": "2020-02-25T12:52:35Z", "author": {"login": "anupama-pathirage"}, "path": "cli/ballerina-cli-module/src/main/java/org/ballerinalang/cli/module/Pull.java", "diffHunk": "@@ -0,0 +1,220 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.ballerinalang.cli.module;\n+\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.cli.module.util.ErrorUtil;\n+import org.ballerinalang.cli.module.util.Utils;\n+import org.ballerinalang.jvm.JSONParser;\n+import org.ballerinalang.jvm.values.MapValue;\n+\n+import java.io.BufferedReader;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static org.ballerinalang.cli.module.util.Utils.convertToUrl;\n+import static org.ballerinalang.cli.module.util.Utils.createHttpUrlConnection;\n+import static org.ballerinalang.cli.module.util.Utils.initializeSsl;\n+import static org.ballerinalang.cli.module.util.Utils.setRequestMethod;\n+\n+/**\n+ * This class is pulling the modules from ballerina central.\n+ */\n+public class Pull {\n+    private static final String VERSION_REGEX = \"(\\\\d+\\\\.)(\\\\d+\\\\.)(\\\\d+)\";\n+    private static PrintStream outStream = System.out;\n+    private static DefaultLogFormatter logFormatter = new DefaultLogFormatter();\n+\n+    private Pull() {\n+    }\n+\n+    public static void execute(String url, String modulePathInBaloCache, String modulePath, String proxyHost,\n+            int proxyPort, String proxyUsername, String proxyPassword, String supportedVersionRange, boolean isBuild,\n+            String nightlyBuild, String langSpecVersion, String platform) {\n+        if (isBuild) {\n+            logFormatter = new BuildLogFormatter();\n+        }\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(convertToUrl(url + supportedVersionRange), proxyHost,\n+                proxyPort, proxyUsername, proxyPassword);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // set headers.\n+        if (!platform.equals(\"\")) {\n+            conn.setRequestProperty(\"Ballerina-Platform\", platform);\n+        }\n+        if (!langSpecVersion.equals(\"\")) {\n+            conn.setRequestProperty(\"Ballerina-Language-Specification-Version\", langSpecVersion);\n+        }\n+        conn.setRequestProperty(\"Accept-Encoding\", \"identity\");\n+\n+        boolean redirect = false;\n+        try {\n+            int statusCode = conn.getResponseCode();\n+            if (Integer.toString(statusCode).startsWith(\"5\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25c9755acffbd2103e98e4e0bb3fbf2a04701e39"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MTE4Nzc4", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#pullrequestreview-364118778", "createdAt": "2020-02-25T12:57:17Z", "commit": {"oid": "25c9755acffbd2103e98e4e0bb3fbf2a04701e39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMjo1NzoxN1rOFuFC8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMjo1NzoxN1rOFuFC8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg2MTQ5MQ==", "bodyText": "Shall we add a constants class and move all these string constants there? Then it will be easy to track and change if required in future.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#discussion_r383861491", "createdAt": "2020-02-25T12:57:17Z", "author": {"login": "anupama-pathirage"}, "path": "cli/ballerina-cli-module/src/main/java/org/ballerinalang/cli/module/Pull.java", "diffHunk": "@@ -0,0 +1,220 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.ballerinalang.cli.module;\n+\n+import me.tongfei.progressbar.ProgressBar;\n+import me.tongfei.progressbar.ProgressBarStyle;\n+import org.ballerinalang.cli.module.util.ErrorUtil;\n+import org.ballerinalang.cli.module.util.Utils;\n+import org.ballerinalang.jvm.JSONParser;\n+import org.ballerinalang.jvm.values.MapValue;\n+\n+import java.io.BufferedReader;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.PrintStream;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static org.ballerinalang.cli.module.util.Utils.convertToUrl;\n+import static org.ballerinalang.cli.module.util.Utils.createHttpUrlConnection;\n+import static org.ballerinalang.cli.module.util.Utils.initializeSsl;\n+import static org.ballerinalang.cli.module.util.Utils.setRequestMethod;\n+\n+/**\n+ * This class is pulling the modules from ballerina central.\n+ */\n+public class Pull {\n+    private static final String VERSION_REGEX = \"(\\\\d+\\\\.)(\\\\d+\\\\.)(\\\\d+)\";\n+    private static PrintStream outStream = System.out;\n+    private static DefaultLogFormatter logFormatter = new DefaultLogFormatter();\n+\n+    private Pull() {\n+    }\n+\n+    public static void execute(String url, String modulePathInBaloCache, String modulePath, String proxyHost,\n+            int proxyPort, String proxyUsername, String proxyPassword, String supportedVersionRange, boolean isBuild,\n+            String nightlyBuild, String langSpecVersion, String platform) {\n+        if (isBuild) {\n+            logFormatter = new BuildLogFormatter();\n+        }\n+\n+        initializeSsl();\n+        HttpURLConnection conn = createHttpUrlConnection(convertToUrl(url + supportedVersionRange), proxyHost,\n+                proxyPort, proxyUsername, proxyPassword);\n+        conn.setInstanceFollowRedirects(false);\n+        setRequestMethod(conn, Utils.RequestMethod.GET);\n+\n+        // set headers.\n+        if (!platform.equals(\"\")) {\n+            conn.setRequestProperty(\"Ballerina-Platform\", platform);\n+        }\n+        if (!langSpecVersion.equals(\"\")) {\n+            conn.setRequestProperty(\"Ballerina-Language-Specification-Version\", langSpecVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25c9755acffbd2103e98e4e0bb3fbf2a04701e39"}, "originalPosition": 73}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "25c9755acffbd2103e98e4e0bb3fbf2a04701e39", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/25c9755acffbd2103e98e4e0bb3fbf2a04701e39", "committedDate": "2020-02-19T16:27:15Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}, "afterCommit": {"oid": "94943f291600a2fd929b48d2ac85a13e8f9a63aa", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/94943f291600a2fd929b48d2ac85a13e8f9a63aa", "committedDate": "2020-02-26T10:37:37Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0ODc5NjM1", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#pullrequestreview-364879635", "createdAt": "2020-02-26T13:04:41Z", "commit": {"oid": "94943f291600a2fd929b48d2ac85a13e8f9a63aa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzowNDo0MVrOFuqsoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzowNDo0MVrOFuqsoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ3ODM2OQ==", "bodyText": "Is it ok to use hard coded port here? What if it is already used?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#discussion_r384478369", "createdAt": "2020-02-26T13:04:41Z", "author": {"login": "anupama-pathirage"}, "path": "cli/ballerina-cli-module/src/main/java/org/ballerinalang/cli/module/TokenUpdater.java", "diffHunk": "@@ -0,0 +1,112 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.ballerinalang.cli.module;\n+\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+import org.ballerinalang.cli.module.util.ErrorUtil;\n+\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.net.InetSocketAddress;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+\n+/**\n+ * This class has a service which updates the access token in the `Settings.toml` file.\n+ */\n+public class TokenUpdater {\n+\n+    private static PrintStream errStream = System.err;\n+    private static PrintStream outStream = System.out;\n+\n+    private TokenUpdater() {\n+    }\n+\n+    public static void execute(String settingsTomlFilePath) {\n+        HttpServer server;\n+        try {\n+            server = HttpServer.create(new InetSocketAddress(9295), 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94943f291600a2fd929b48d2ac85a13e8f9a63aa"}, "originalPosition": 48}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "94943f291600a2fd929b48d2ac85a13e8f9a63aa", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/94943f291600a2fd929b48d2ac85a13e8f9a63aa", "committedDate": "2020-02-26T10:37:37Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}, "afterCommit": {"oid": "c7be46f7582df04944f1ec8c53e3915452eaf851", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c7be46f7582df04944f1ec8c53e3915452eaf851", "committedDate": "2020-02-26T15:50:05Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c7be46f7582df04944f1ec8c53e3915452eaf851", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c7be46f7582df04944f1ec8c53e3915452eaf851", "committedDate": "2020-02-26T15:50:05Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}, "afterCommit": {"oid": "24ec9e2714655f87c04edc31ae594e2a3f05b5ae", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/24ec9e2714655f87c04edc31ae594e2a3f05b5ae", "committedDate": "2020-02-26T17:35:41Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "24ec9e2714655f87c04edc31ae594e2a3f05b5ae", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/24ec9e2714655f87c04edc31ae594e2a3f05b5ae", "committedDate": "2020-02-26T17:35:41Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}, "afterCommit": {"oid": "a577d3adbb4d7e84088fe7f4e756efb786a29089", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a577d3adbb4d7e84088fe7f4e756efb786a29089", "committedDate": "2020-02-27T08:12:55Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a577d3adbb4d7e84088fe7f4e756efb786a29089", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a577d3adbb4d7e84088fe7f4e756efb786a29089", "committedDate": "2020-02-27T08:12:55Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}, "afterCommit": {"oid": "c422f0b172f292f96e5db5f504b5d652642d0395", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c422f0b172f292f96e5db5f504b5d652642d0395", "committedDate": "2020-02-27T08:30:20Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c422f0b172f292f96e5db5f504b5d652642d0395", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c422f0b172f292f96e5db5f504b5d652642d0395", "committedDate": "2020-02-27T08:30:20Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}, "afterCommit": {"oid": "085d82d6ed23bfa870ade72155f3cb7e9da23237", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/085d82d6ed23bfa870ade72155f3cb7e9da23237", "committedDate": "2020-02-27T13:29:51Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "085d82d6ed23bfa870ade72155f3cb7e9da23237", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/085d82d6ed23bfa870ade72155f3cb7e9da23237", "committedDate": "2020-02-27T13:29:51Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}, "afterCommit": {"oid": "7d48a92ffd55eafddc31586f2aea0561497cbc88", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7d48a92ffd55eafddc31586f2aea0561497cbc88", "committedDate": "2020-02-27T17:49:37Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4cff210f7396e329d15acf06fb4d4955bd1cb43", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e4cff210f7396e329d15acf06fb4d4955bd1cb43", "committedDate": "2020-03-02T05:42:09Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7d48a92ffd55eafddc31586f2aea0561497cbc88", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7d48a92ffd55eafddc31586f2aea0561497cbc88", "committedDate": "2020-02-27T17:49:37Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}, "afterCommit": {"oid": "e4cff210f7396e329d15acf06fb4d4955bd1cb43", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e4cff210f7396e329d15acf06fb4d4955bd1cb43", "committedDate": "2020-03-02T05:42:09Z", "message": "Implement CLI module implementation in Java\n\nRewrite the CLI module implementation in Java which has\nimplemented using Ballerina.\n\nFixes https://github.com/ballerina-platform/ballerina-lang/issues/21015"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f58dc06d8b17b8d0b34d5252a5445537710d01c", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4f58dc06d8b17b8d0b34d5252a5445537710d01c", "committedDate": "2020-03-02T11:44:18Z", "message": "Merge branch 'master' into bal2java-central-cmd"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "123151bcd1e731dceeefa85ea76bf07b51caa263", "author": {"user": {"login": "pramodya1994", "name": "Pramodya Mendis"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/123151bcd1e731dceeefa85ea76bf07b51caa263", "committedDate": "2020-03-02T12:55:44Z", "message": "Fix corrupted balo file issue in Pull.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MzE5MzI2", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21016#pullrequestreview-367319326", "createdAt": "2020-03-02T16:04:11Z", "commit": {"oid": "123151bcd1e731dceeefa85ea76bf07b51caa263"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4258, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}