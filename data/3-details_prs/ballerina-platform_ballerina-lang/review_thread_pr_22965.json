{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNjI2NzE1", "number": 22965, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOToyODozM1rOD5Urdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo0Njo0MlrOD7L9Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDM0MjMxOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOToyODozM1rOGQhY2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOToyODozM1rOGQhY2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk3NzQzMw==", "bodyText": "We can change this to.\n if (!unresolvedTypes.add(type)) {\n    return true;\n}\nThis should prevent double hash calculation to search in unresolvedTypes", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22965#discussion_r419977433", "createdAt": "2020-05-05T09:28:33Z", "author": {"login": "KRVPerera"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1154,6 +1166,87 @@ private static boolean isReadonlyType(BType sourceType) {\n         return false;\n     }\n \n+    boolean isSelectivelyImmutableType(BType type) {\n+        return isSelectivelyImmutableType(type, new HashSet<>());\n+    }\n+\n+    public static boolean isSelectivelyImmutableType(BType type, Set<BType> unresolvedTypes) {\n+        if (isInherentlyImmutableType(type)) {\n+            // Always immutable.\n+            return false;\n+        }\n+\n+        if (unresolvedTypes.contains(type)) {\n+            return true;\n+        }\n+        unresolvedTypes.add(type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce0ff960e89184d567a503ffb210d19909ddabd7"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDM5NDk0OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOTo0Mjo1NFrOGQh46g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwODoyOTozM1rOGSd34A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk4NTY0Mg==", "bodyText": "IMO according to spec below types are always selectively immutable types.\n\nxml\nlist\nmapping\ntable\n\nI think this method is searching whether read-only bit is on for selectively immutable type. It may be better to change the function name.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22965#discussion_r419985642", "createdAt": "2020-05-05T09:42:54Z", "author": {"login": "KRVPerera"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1154,6 +1166,87 @@ private static boolean isReadonlyType(BType sourceType) {\n         return false;\n     }\n \n+    boolean isSelectivelyImmutableType(BType type) {\n+        return isSelectivelyImmutableType(type, new HashSet<>());\n+    }\n+\n+    public static boolean isSelectivelyImmutableType(BType type, Set<BType> unresolvedTypes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce0ff960e89184d567a503ffb210d19909ddabd7"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg3MzcxMw==", "bodyText": "No, this does not check for the read-only bit.\nEven though mappings in general are selectively immutable, some mappings can never be immutable. e.g., map<future>. This method checks if the specified type can be immutable.\nIf it's still unclear maybe we can call this something like isPossiblyImmutableSelectivelyImmutableType, but given that the logic is quite obvious I'm not sure we need it.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22965#discussion_r421873713", "createdAt": "2020-05-08T00:45:20Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1154,6 +1166,87 @@ private static boolean isReadonlyType(BType sourceType) {\n         return false;\n     }\n \n+    boolean isSelectivelyImmutableType(BType type) {\n+        return isSelectivelyImmutableType(type, new HashSet<>());\n+    }\n+\n+    public static boolean isSelectivelyImmutableType(BType type, Set<BType> unresolvedTypes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk4NTY0Mg=="}, "originalCommit": {"oid": "ce0ff960e89184d567a503ffb210d19909ddabd7"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAxNjk5Mg==", "bodyText": "Okay. I was thinking if someone wanted to write a method in future to check the read-only bit; then we may need to change the name at that time.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22965#discussion_r422016992", "createdAt": "2020-05-08T08:29:33Z", "author": {"login": "KRVPerera"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1154,6 +1166,87 @@ private static boolean isReadonlyType(BType sourceType) {\n         return false;\n     }\n \n+    boolean isSelectivelyImmutableType(BType type) {\n+        return isSelectivelyImmutableType(type, new HashSet<>());\n+    }\n+\n+    public static boolean isSelectivelyImmutableType(BType type, Set<BType> unresolvedTypes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk4NTY0Mg=="}, "originalCommit": {"oid": "ce0ff960e89184d567a503ffb210d19909ddabd7"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDQwNzI2OnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOTo0NjozMFrOGQiAqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOTo0NjozMFrOGQiAqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk4NzYyNA==", "bodyText": "This logic is not needed right. If this is added to return early? Don't see how this can improve performance for this small function. And inside this very method,  we have called both functions in the same place. Therefore I believe this is a double calculation.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22965#discussion_r419987624", "createdAt": "2020-05-05T09:46:30Z", "author": {"login": "KRVPerera"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1154,6 +1166,87 @@ private static boolean isReadonlyType(BType sourceType) {\n         return false;\n     }\n \n+    boolean isSelectivelyImmutableType(BType type) {\n+        return isSelectivelyImmutableType(type, new HashSet<>());\n+    }\n+\n+    public static boolean isSelectivelyImmutableType(BType type, Set<BType> unresolvedTypes) {\n+        if (isInherentlyImmutableType(type)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce0ff960e89184d567a503ffb210d19909ddabd7"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTEwMzIxOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmValueGen.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTo0MToyN1rOGRPDAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNzowNjoxNVrOGRczFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyNTUwNw==", "bodyText": "I am in the process of removing createRecordInitWrapper method, can we please move (or duplicate) this in createInstantiateMethod", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22965#discussion_r420725507", "createdAt": "2020-05-06T11:41:27Z", "author": {"login": "manuranga"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmValueGen.java", "diffHunk": "@@ -680,8 +688,12 @@ private void createRecordInitWrapper(ClassWriter cw, String className, BIRNode.B\n                 String refTypeClassName = getTypeValueClassName(typeRef.tsymbol.pkgID,\n                         toNameString(typeRef));\n                 mv.visitInsn(DUP2);\n+\n+                mv.visitInsn(ICONST_0);\n+                mv.visitTypeInsn(ANEWARRAY, MAPPING_INITIAL_VALUE_ENTRY);\n+\n                 mv.visitMethodInsn(INVOKESTATIC, refTypeClassName, \"$init\",\n-                        String.format(\"(L%s;L%s;)V\", STRAND, MAP_VALUE), false);\n+                        String.format(\"(L%s;L%s;[L%s;)V\", STRAND, MAP_VALUE, BINITIAL_VALUE_ENTRY), false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a96a0fcf3c5b95527e650969f4df916b6ae480c9"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk1MDgwNA==", "bodyText": "We don't need initial values for referenced record types, so having the initial value population logic in \"instantiate\" should be enough. Moved to createInstantiateMethod in 6f89a47.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22965#discussion_r420950804", "createdAt": "2020-05-06T17:06:15Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmValueGen.java", "diffHunk": "@@ -680,8 +688,12 @@ private void createRecordInitWrapper(ClassWriter cw, String className, BIRNode.B\n                 String refTypeClassName = getTypeValueClassName(typeRef.tsymbol.pkgID,\n                         toNameString(typeRef));\n                 mv.visitInsn(DUP2);\n+\n+                mv.visitInsn(ICONST_0);\n+                mv.visitTypeInsn(ANEWARRAY, MAPPING_INITIAL_VALUE_ENTRY);\n+\n                 mv.visitMethodInsn(INVOKESTATIC, refTypeClassName, \"$init\",\n-                        String.format(\"(L%s;L%s;)V\", STRAND, MAP_VALUE), false);\n+                        String.format(\"(L%s;L%s;[L%s;)V\", STRAND, MAP_VALUE, BINITIAL_VALUE_ENTRY), false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyNTUwNw=="}, "originalCommit": {"oid": "a96a0fcf3c5b95527e650969f4df916b6ae480c9"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTMzNjA5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmInstructionGen.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjo0NzozNFrOGRRSUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjo0NzozNFrOGRRSUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc2MjE5Mg==", "bodyText": "looks like there is an alignment issue here. probably due to merge conflicts with jvm codegen package classes.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22965#discussion_r420762192", "createdAt": "2020-05-06T12:47:34Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmInstructionGen.java", "diffHunk": "@@ -1336,33 +1390,27 @@ void generateArrayStoreIns(BIRNonTerminator.FieldAccess inst) {\n         this.loadVar(inst.keyOp.variableDcl);\n         this.loadVar(inst.rhsOp.variableDcl);\n \n-        BType valueType = inst.rhsOp.variableDcl.type;\n-        BType varRefType = inst.lhsOp.variableDcl.type;\n-        if (varRefType.tag == TypeTags.JSON ||\n-                (varRefType.tag == TypeTags.ARRAY && ((BArrayType) varRefType).eType instanceof BJSONType)) {\n-            addBoxInsn(this.mv, valueType);\n-            this.mv.visitMethodInsn(INVOKESTATIC, JSON_UTILS, \"setArrayElement\",\n-                    String.format(\"(L%s;JL%s;)V\", OBJECT, OBJECT), false);\n-            return;\n-        }\n-\n-        if (TypeTags.isIntegerTypeTag(valueType.tag)) {\n-            this.mv.visitMethodInsn(INVOKEINTERFACE, ARRAY_VALUE, \"add\", \"(JJ)V\", true);\n-        } else if (valueType.tag == TypeTags.FLOAT) {\n-            this.mv.visitMethodInsn(INVOKEINTERFACE, ARRAY_VALUE, \"add\", \"(JD)V\", true);\n-        } else if (TypeTags.isStringTypeTag(valueType.tag)) {\n-            this.mv.visitMethodInsn(INVOKEINTERFACE, ARRAY_VALUE, \"add\",\n-                    String.format(\"(JL%s;)V\", JvmPackageGen.IS_BSTRING ? JvmConstants.B_STRING_VALUE :\n-                            STRING_VALUE), true);\n-        } else if (valueType.tag == TypeTags.BOOLEAN) {\n-            this.mv.visitMethodInsn(INVOKEINTERFACE, ARRAY_VALUE, \"add\", \"(JZ)V\", true);\n-        } else if (valueType.tag == TypeTags.BYTE) {\n-            this.mv.visitInsn(I2B);\n-            this.mv.visitMethodInsn(INVOKEINTERFACE, ARRAY_VALUE, \"add\", \"(JB)V\", true);\n-        } else {\n-            this.mv.visitMethodInsn(INVOKEINTERFACE, ARRAY_VALUE, \"add\", String.format(\"(JL%s;)V\", OBJECT), true);\n+            BType valueType = inst.rhsOp.variableDcl.type;\n+\n+            String method = \"add\";\n+\n+            if (TypeTags.isIntegerTypeTag(valueType.tag)) {\n+                this.mv.visitMethodInsn(INVOKEINTERFACE, ARRAY_VALUE, method, \"(JJ)V\", true);\n+            } else if (valueType.tag == TypeTags.FLOAT) {\n+                this.mv.visitMethodInsn(INVOKEINTERFACE, ARRAY_VALUE, method, \"(JD)V\", true);\n+            } else if (TypeTags.isStringTypeTag(valueType.tag)) {\n+                this.mv.visitMethodInsn(INVOKEINTERFACE, ARRAY_VALUE, method,\n+                                        String.format(\"(JL%s;)V\", JvmPackageGen.IS_BSTRING ?\n+                                                JvmConstants.B_STRING_VALUE : STRING_VALUE), true);\n+            } else if (valueType.tag == TypeTags.BOOLEAN) {\n+                this.mv.visitMethodInsn(INVOKEINTERFACE, ARRAY_VALUE, method, \"(JZ)V\", true);\n+            } else if (valueType.tag == TypeTags.BYTE) {\n+                this.mv.visitInsn(I2B);\n+                this.mv.visitMethodInsn(INVOKEINTERFACE, ARRAY_VALUE, method, \"(JB)V\", true);\n+            } else {\n+                this.mv.visitMethodInsn(INVOKEINTERFACE, ARRAY_VALUE, method, String.format(\"(JL%s;)V\", OBJECT), true);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a96a0fcf3c5b95527e650969f4df916b6ae480c9"}, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTMzNjc4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmInstructionGen.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjo0Nzo0NlrOGRRStg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjo0Nzo0NlrOGRRStg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc2MjI5NA==", "bodyText": "looks like there is an alignment issue here. probably due to merge conflicts with jvm codegen package classes.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22965#discussion_r420762294", "createdAt": "2020-05-06T12:47:46Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmInstructionGen.java", "diffHunk": "@@ -1583,14 +1631,17 @@ void generateFPLoadIns(BIRNonTerminator.FPLoad inst, LambdaMetadata lambdaMetada\n \n     void generateNewXMLElementIns(BIRNonTerminator.NewXMLElement newXMLElement) {\n \n-        this.loadVar(newXMLElement.startTagOp.variableDcl);\n-        this.mv.visitTypeInsn(CHECKCAST, XML_QNAME);\n-        this.loadVar(newXMLElement.defaultNsURIOp.variableDcl);\n-        this.mv.visitMethodInsn(INVOKESTATIC, XML_FACTORY, \"createXMLElement\",\n-                String.format(\"(L%s;L%s;)L%s;\", XML_QNAME,\n-                        JvmPackageGen.IS_BSTRING ? JvmConstants.B_STRING_VALUE : STRING_VALUE, XML_VALUE), false);\n-        this.storeToVar(newXMLElement.lhsOp.variableDcl);\n-    }\n+            this.loadVar(newXMLElement.startTagOp.variableDcl);\n+            this.mv.visitTypeInsn(CHECKCAST, XML_QNAME);\n+            this.loadVar(newXMLElement.defaultNsURIOp.variableDcl);\n+            loadType(this.mv, newXMLElement.type);\n+\n+            this.mv.visitMethodInsn(INVOKESTATIC, XML_FACTORY, \"createXMLElement\",\n+                                    String.format(\"(L%s;L%s;L%s;)L%s;\", XML_QNAME,\n+                                                  JvmPackageGen.IS_BSTRING ? JvmConstants.B_STRING_VALUE :\n+                                                          STRING_VALUE, BTYPE, XML_VALUE), false);\n+            this.storeToVar(newXMLElement.lhsOp.variableDcl);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a96a0fcf3c5b95527e650969f4df916b6ae480c9"}, "originalPosition": 221}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTMzNzI5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmInstructionGen.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjo0Nzo1NlrOGRRTDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjo0Nzo1NlrOGRRTDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc2MjM4MA==", "bodyText": "looks like there is an alignment issue here. probably due to merge conflicts with jvm codegen package classes.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22965#discussion_r420762380", "createdAt": "2020-05-06T12:47:56Z", "author": {"login": "Kishanthan"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmInstructionGen.java", "diffHunk": "@@ -1627,23 +1678,28 @@ void generateNewXMLTextIns(BIRNonTerminator.NewXMLText newXMLText) {\n \n     void generateNewXMLCommentIns(BIRNonTerminator.NewXMLComment newXMLComment) {\n \n-        this.loadVar(newXMLComment.textOp.variableDcl);\n-        this.mv.visitMethodInsn(INVOKESTATIC, XML_FACTORY, \"createXMLComment\",\n-                String.format(\"(L%s;)L%s;\", JvmPackageGen.IS_BSTRING ? JvmConstants.B_STRING_VALUE :\n-                        STRING_VALUE, XML_VALUE),\n-                false);\n-        this.storeToVar(newXMLComment.lhsOp.variableDcl);\n-    }\n+            this.loadVar(newXMLComment.textOp.variableDcl);\n+\n+            loadType(this.mv, newXMLComment.type);\n+\n+            this.mv.visitMethodInsn(INVOKESTATIC, XML_FACTORY, \"createXMLComment\",\n+                                    String.format(\"(L%s;L%s;)L%s;\", JvmPackageGen.IS_BSTRING ?\n+                                                          JvmConstants.B_STRING_VALUE : STRING_VALUE, BTYPE, XML_VALUE),\n+                                    false);\n+            this.storeToVar(newXMLComment.lhsOp.variableDcl);\n+        }\n \n     void generateNewXMLProcIns(BIRNonTerminator.NewXMLProcIns newXMLPI) {\n \n-        this.loadVar(newXMLPI.targetOp.variableDcl);\n-        this.loadVar(newXMLPI.dataOp.variableDcl);\n-        String consVal = JvmPackageGen.IS_BSTRING ? JvmConstants.B_STRING_VALUE : STRING_VALUE;\n-        this.mv.visitMethodInsn(INVOKESTATIC, XML_FACTORY, \"createXMLProcessingInstruction\",\n-                String.format(\"(L%s;L%s;)L%s;\", consVal, consVal, XML_VALUE), false);\n-        this.storeToVar(newXMLPI.lhsOp.variableDcl);\n-    }\n+            this.loadVar(newXMLPI.targetOp.variableDcl);\n+            this.loadVar(newXMLPI.dataOp.variableDcl);\n+            loadType(this.mv, newXMLPI.type);\n+\n+            String consVal = JvmPackageGen.IS_BSTRING ? JvmConstants.B_STRING_VALUE : STRING_VALUE;\n+            this.mv.visitMethodInsn(INVOKESTATIC, XML_FACTORY, \"createXMLProcessingInstruction\",\n+                                    String.format(\"(L%s;L%s;L%s;)L%s;\", consVal, consVal, BTYPE, XML_VALUE), false);\n+            this.storeToVar(newXMLPI.lhsOp.variableDcl);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a96a0fcf3c5b95527e650969f4df916b6ae480c9"}, "originalPosition": 264}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTQwMjUzOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODo1NDo0OVrOGSL73g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODo1NDo0OVrOGSL73g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcyMzEwMg==", "bodyText": "It is better to move this check outside of the loop (caching)\n!Symbols.isFlagOn(type.flags, Flags.READONLY)", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22965#discussion_r421723102", "createdAt": "2020-05-07T18:54:49Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1495,7 +1495,13 @@ private boolean validateRequiredAndReadonlyFields(BRecordType type,\n                         types.isAssignable(typePosPair.type, symTable.readonlyType)) {\n                     continue;\n                 }\n-                dlog.error(typePosPair.pos, DiagnosticCode.INVALID_FIELD_FOR_READONLY_RECORD_FIELD, fieldName);\n+\n+                if (!Symbols.isFlagOn(type.flags, Flags.READONLY) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c099b87758dfec2c99b7538a2bf54bb69ad37a7"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTQ3MjY2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxOToxNDo1MVrOGSMncg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxOToxNDo1MVrOGSMncg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTczNDI1OA==", "bodyText": "Why do we call checkType here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22965#discussion_r421734258", "createdAt": "2020-05-07T19:14:51Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2106,6 +2112,9 @@ public void visit(BLangFieldBasedAccess fieldAccessExpr) {\n                     if (isAllReadonlyTypes(varRefType)) {\n                         dlog.error(fieldAccessExpr.pos, DiagnosticCode.CANNOT_UPDATE_READONLY_VALUE_OF_TYPE,\n                                    varRefType);\n+                        types.checkType(fieldAccessExpr, actualType, this.expType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c099b87758dfec2c99b7538a2bf54bb69ad37a7"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTQ3OTcyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxOToxNzowNVrOGSMr8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMDo1NzowOFrOGSVUuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTczNTQwOA==", "bodyText": "Is this a performance improvement? I think this is unnecessary.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22965#discussion_r421735408", "createdAt": "2020-05-07T19:17:05Z", "author": {"login": "KRVPerera"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1334,7 +1334,8 @@ private void defineErrorDetails(List<BLangTypeDefinition> typeDefNodes, SymbolEn\n     }\n \n     private void defineFields(List<BLangTypeDefinition> typeDefNodes, SymbolEnv pkgEnv) {\n-        for (BLangTypeDefinition typeDef : typeDefNodes) {\n+        for (int i = 0; i < typeDefNodes.size(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c099b87758dfec2c99b7538a2bf54bb69ad37a7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg3NjkyMQ==", "bodyText": "This is to avoid potential concurrent modification errors since we may have to define new record type defs while iterating through the current list.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22965#discussion_r421876921", "createdAt": "2020-05-08T00:57:08Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -1334,7 +1334,8 @@ private void defineErrorDetails(List<BLangTypeDefinition> typeDefNodes, SymbolEn\n     }\n \n     private void defineFields(List<BLangTypeDefinition> typeDefNodes, SymbolEnv pkgEnv) {\n-        for (BLangTypeDefinition typeDef : typeDefNodes) {\n+        for (int i = 0; i < typeDefNodes.size(); i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTczNTQwOA=="}, "originalCommit": {"oid": "1c099b87758dfec2c99b7538a2bf54bb69ad37a7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzc1OTE4OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDowOTozOVrOGTVtUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzowNDo0OVrOGTlTNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkzMTc5Mw==", "bodyText": "Check for optional fields.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22965#discussion_r422931793", "createdAt": "2020-05-11T10:09:39Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2168,14 +2208,19 @@ public void visit(BLangIndexBasedAccess indexBasedAccessExpr) {\n \n         BType exprType = indexBasedAccessExpr.expr.type;\n         BLangExpression indexExpr = indexBasedAccessExpr.indexExpr;\n+\n         if (actualType != symTable.semanticError &&\n-                types.isSubTypeOfBaseType(exprType, TypeTags.RECORD) &&\n-                (indexBasedAccessExpr.lhsVar || indexBasedAccessExpr.compoundAssignmentLhsVar) &&\n-                (indexExpr.getKind() == NodeKind.LITERAL || isConst(indexExpr))) {\n-            String name = getConstFieldName(indexExpr);\n-            if (allRecordsHaveRequiredReadonlyField(exprType, name)) {\n+                (indexBasedAccessExpr.lhsVar || indexBasedAccessExpr.compoundAssignmentLhsVar)) {\n+            if (isAllReadonlyTypes(exprType)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a5006032f2f74bcc3a2bc815ec79acbf7dac763"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE4NzI1Mg==", "bodyText": "This is not required since what we are checking here is something like\n(Foo & readonly)|(Bar & readonly) x = {};\nx[\"val\"] = 1;\n\nThis is always invalid since the value itself is immutable and cannot be updated.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22965#discussion_r423187252", "createdAt": "2020-05-11T17:04:49Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2168,14 +2208,19 @@ public void visit(BLangIndexBasedAccess indexBasedAccessExpr) {\n \n         BType exprType = indexBasedAccessExpr.expr.type;\n         BLangExpression indexExpr = indexBasedAccessExpr.indexExpr;\n+\n         if (actualType != symTable.semanticError &&\n-                types.isSubTypeOfBaseType(exprType, TypeTags.RECORD) &&\n-                (indexBasedAccessExpr.lhsVar || indexBasedAccessExpr.compoundAssignmentLhsVar) &&\n-                (indexExpr.getKind() == NodeKind.LITERAL || isConst(indexExpr))) {\n-            String name = getConstFieldName(indexExpr);\n-            if (allRecordsHaveRequiredReadonlyField(exprType, name)) {\n+                (indexBasedAccessExpr.lhsVar || indexBasedAccessExpr.compoundAssignmentLhsVar)) {\n+            if (isAllReadonlyTypes(exprType)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkzMTc5Mw=="}, "originalCommit": {"oid": "1a5006032f2f74bcc3a2bc815ec79acbf7dac763"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzg4NDUwOnYy", "diffSide": "RIGHT", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/XMLFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo0NjozMlrOGTW7MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo0NjozMlrOGTW7MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1MTcyOA==", "bodyText": "Accept a flag instead and set relevant type internally.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22965#discussion_r422951728", "createdAt": "2020-05-11T10:46:32Z", "author": {"login": "MaryamZi"}, "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/XMLFactory.java", "diffHunk": "@@ -345,6 +386,31 @@ public static XMLValue createXMLProcessingInstruction(BString tartget, BString d\n         return createXMLProcessingInstruction(tartget.getValue(), data.getValue());\n     }\n \n+    /**\n+     * Create a processing instruction type XMLValue, specifying the type which will indicate mutability.\n+     *\n+     * @param target    PI target\n+     * @param data      PI data\n+     * @param type      The type for the PI\n+     * @return XMLValue Processing instruction type XMLValue\n+     */\n+    @Deprecated\n+    public static XMLValue createXMLProcessingInstruction(String target, String data, BType type) {\n+        return new XMLPi(data, target, type);\n+    }\n+\n+    /**\n+     * Create a processing instruction type XMLValue, specifying the type which will indicate mutability.\n+     *\n+     * @param target    PI target\n+     * @param data      PI data\n+     * @param type      The type for the PI\n+     * @return XMLValue Processing instruction type XMLValue\n+     */\n+    public static XMLValue createXMLProcessingInstruction(BString target, BString data, BType type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a5006032f2f74bcc3a2bc815ec79acbf7dac763"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzg4NDk5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMDo0Njo0MlrOGTW7gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzoyMDowOVrOGTl3ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1MTgwOA==", "bodyText": "The !Symbols.isFlagOn(field.type.flags, Flags.READONLY) check is not relevant here right? IIUC, this checks if there's a readonly field in a mutable record type? Plus, isn't it the same check as in the if block above? Is the field being readonly and the field's type being readonly two different things?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22965#discussion_r422951808", "createdAt": "2020-05-11T10:46:42Z", "author": {"login": "pubudu91"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1481,7 +1497,12 @@ private boolean validateRequiredAndReadonlyFields(BRecordType type,\n                         types.isAssignable(typePosPair.type, symTable.readonlyType)) {\n                     continue;\n                 }\n-                dlog.error(typePosPair.pos, DiagnosticCode.INVALID_FIELD_FOR_READONLY_RECORD_FIELD, fieldName);\n+\n+                if (mutableRecordType && !Symbols.isFlagOn(field.type.flags, Flags.READONLY)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a5006032f2f74bcc3a2bc815ec79acbf7dac763"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE5NjUzOQ==", "bodyText": "Yeah they're different.\nSo there are three possible scenarios.\n\nThe expected type is T & readonly where T is the record type. Meaning, the value itself will be immutable and whatever fields that are specified should also be immutable. This is what is checked with mutableRecordType.\n\nFoo & readonly f = {};\n\nA field's type is T & readonly. This means that whatever value set for that field will have to be immutable. That's the second check.\n\ntype Foo record {|\n    Bar & readonly b;\n|};\nAnd you can also update the b field in a Foo value after creating  the record value, but the Bar value must always be immutable.\n\nThen there's readonly fields where in addition to 2) there's also the constraint that the value cannot be updated once it is set.\n\ntype Foo record {|\n    readonly Bar b;\n|};\nWe only want to log an error here for 3.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22965#discussion_r423196539", "createdAt": "2020-05-11T17:20:09Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -1481,7 +1497,12 @@ private boolean validateRequiredAndReadonlyFields(BRecordType type,\n                         types.isAssignable(typePosPair.type, symTable.readonlyType)) {\n                     continue;\n                 }\n-                dlog.error(typePosPair.pos, DiagnosticCode.INVALID_FIELD_FOR_READONLY_RECORD_FIELD, fieldName);\n+\n+                if (mutableRecordType && !Symbols.isFlagOn(field.type.flags, Flags.READONLY)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1MTgwOA=="}, "originalCommit": {"oid": "1a5006032f2f74bcc3a2bc815ec79acbf7dac763"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3838, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}