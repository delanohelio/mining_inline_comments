{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNDI5ODIz", "number": 27609, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNjozMDoxOFrOFH2rJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxNDo1MDo0NFrOFOLhOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNzgwMTMyOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangListConstructorExpr.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNjozMDoxOFrOIJeR0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNjo0MDo0NlrOIRd0Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgwNDE3Nw==", "bodyText": "I'm not sure if we should be marking these as BLangAccessExpressions. These aren't access expressions, right? They are the expressions on which the access is done?\nShouldn't we fix the visits for field/member access instead? To consider any BLangExpression rather than expecting a BLangVariableReference (https://github.com/ballerina-platform/ballerina-lang/blob/master/compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java#L2465)?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609#discussion_r546804177", "createdAt": "2020-12-21T16:30:18Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangListConstructorExpr.java", "diffHunk": "@@ -35,7 +35,7 @@\n  * @see BLangJSONArrayLiteral\n  * @since 1.0\n  */\n-public class BLangListConstructorExpr extends BLangExpression implements ListConstructorExprNode {\n+public class BLangListConstructorExpr extends BLangAccessExpression implements ListConstructorExprNode {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76dbe7f2d70fb6c03eecb853346d0724cb86eec7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2MTA3Mg==", "bodyText": "I have a mixed opinion on this. But, if we have any better way as @MaryamZi mentioned, then let's explore that and see.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609#discussion_r547061072", "createdAt": "2020-12-22T04:27:15Z", "author": {"login": "mohanvive"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangListConstructorExpr.java", "diffHunk": "@@ -35,7 +35,7 @@\n  * @see BLangJSONArrayLiteral\n  * @since 1.0\n  */\n-public class BLangListConstructorExpr extends BLangExpression implements ListConstructorExprNode {\n+public class BLangListConstructorExpr extends BLangAccessExpression implements ListConstructorExprNode {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgwNDE3Nw=="}, "originalCommit": {"oid": "76dbe7f2d70fb6c03eecb853346d0724cb86eec7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyMjI5NA==", "bodyText": "Is it ok to introduce another abstraction with lhsVar, compoundAssignmentLhsVar, etc..., and expect that? Or is it possible to get rid of analyzing them all together, given that we need to allow all the BLangExpression? Or do we have to analyze case by case (i.e BLangVariableReferences, Structural Constructs, etc...)?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609#discussion_r547322294", "createdAt": "2020-12-22T14:54:35Z", "author": {"login": "grainier"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangListConstructorExpr.java", "diffHunk": "@@ -35,7 +35,7 @@\n  * @see BLangJSONArrayLiteral\n  * @since 1.0\n  */\n-public class BLangListConstructorExpr extends BLangExpression implements ListConstructorExprNode {\n+public class BLangListConstructorExpr extends BLangAccessExpression implements ListConstructorExprNode {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgwNDE3Nw=="}, "originalCommit": {"oid": "76dbe7f2d70fb6c03eecb853346d0724cb86eec7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk3MTE3NA==", "bodyText": "I believe we still need to preserve information regarding whether or not certain expressions are on the LHS to support/restrict certain scenarios.\ntype Foo record {|\n    int i?;\n|};\n\npublic function main() {\n    Foo f = {};\n\n    f.i = 1; // field access for an optional field on the LHS - valid\n    int? i = f.i; // field access for an optional field on the RHS - invalid\n\n    int? j = (<Foo> {})?.i; // valid\n\n    (<Foo> {}).i = 2; // invalid, LHS is not a variable-reference-lvexpr, field-access-lvexpr, nor a member-access-lvexpr\n}\nThe spec has this concept of lvalues (https://ballerina.io/spec/lang/master/#section_7.14.1) and an lvexpr is defined as\nlvexpr :=\n   variable-reference-lvexpr\n   | field-access-lvexpr\n   | member-access-lvexpr\n\nThinking out loud, lhsVar, compoundAssignmentLhsVar, etc. may thus only be relevant for variable-reference, field-access, and member-access.\nI think we should look into the possibility of basing the abstraction on this.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609#discussion_r547971174", "createdAt": "2020-12-23T13:57:40Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangListConstructorExpr.java", "diffHunk": "@@ -35,7 +35,7 @@\n  * @see BLangJSONArrayLiteral\n  * @since 1.0\n  */\n-public class BLangListConstructorExpr extends BLangExpression implements ListConstructorExprNode {\n+public class BLangListConstructorExpr extends BLangAccessExpression implements ListConstructorExprNode {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgwNDE3Nw=="}, "originalCommit": {"oid": "76dbe7f2d70fb6c03eecb853346d0724cb86eec7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTE4NTI1MA==", "bodyText": "Thinking out loud, lhsVar, compoundAssignmentLhsVar, etc. may thus only be relevant for variable-reference, field-access, and member-access.\n\n@MaryamZi, I agree, but with the current implementation, BLangAccessExpression extends BLangVariableReference and both BLangFieldBasedAccess, BLangIndexBasedAccess extends BLangAccessExpression. Since, information like lhsVar & compoundAssignmentLhsVar belongs to BLangVariableReference, there's already a such abstraction. However, it's not only limited to lvexpr, but inherits by each and every expression which descendant from BLangVariableReference. Is that acceptable?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609#discussion_r555185250", "createdAt": "2021-01-11T16:40:46Z", "author": {"login": "grainier"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangListConstructorExpr.java", "diffHunk": "@@ -35,7 +35,7 @@\n  * @see BLangJSONArrayLiteral\n  * @since 1.0\n  */\n-public class BLangListConstructorExpr extends BLangExpression implements ListConstructorExprNode {\n+public class BLangListConstructorExpr extends BLangAccessExpression implements ListConstructorExprNode {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgwNDE3Nw=="}, "originalCommit": {"oid": "76dbe7f2d70fb6c03eecb853346d0724cb86eec7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMjQ2NjI2OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwNzozOTowNFrOISi26A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxMTo0Mjo0NVrOISrm6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjMxNjM5Mg==", "bodyText": "Shall we rename this method and first param, as this function now support more than simpleVariableReferences", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609#discussion_r556316392", "createdAt": "2021-01-13T07:39:04Z", "author": {"login": "rdhananjaya"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -2367,7 +2367,7 @@ private void createVarRefAssignmentStmts(BLangTupleVarRef parentTupleVariable, B\n      * This method creates a assignment statement and assigns and array expression based on the given indexExpr.\n      *\n      */\n-    private void createSimpleVarRefAssignmentStmt(BLangVariableReference simpleVarRef, BLangBlockStmt parentBlockStmt,\n+    private void createSimpleVarRefAssignmentStmt(BLangExpression simpleVarRef, BLangBlockStmt parentBlockStmt,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b8b583dd52feb7c65746c56e201c07aa652c090"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQ1OTc1NA==", "bodyText": "Fixed in 2785477", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609#discussion_r556459754", "createdAt": "2021-01-13T11:42:45Z", "author": {"login": "grainier"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -2367,7 +2367,7 @@ private void createVarRefAssignmentStmts(BLangTupleVarRef parentTupleVariable, B\n      * This method creates a assignment statement and assigns and array expression based on the given indexExpr.\n      *\n      */\n-    private void createSimpleVarRefAssignmentStmt(BLangVariableReference simpleVarRef, BLangBlockStmt parentBlockStmt,\n+    private void createSimpleVarRefAssignmentStmt(BLangExpression simpleVarRef, BLangBlockStmt parentBlockStmt,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjMxNjM5Mg=="}, "originalCommit": {"oid": "9b8b583dd52feb7c65746c56e201c07aa652c090"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwNDEwNTY5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ASTBuilderUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxNDo0NToxOVrOISyccA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxNTo0NzowNFrOIS1ctg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjU3MTc2MA==", "bodyText": "Can we accept BLangAccessibleExpressions here?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609#discussion_r556571760", "createdAt": "2021-01-13T14:45:19Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ASTBuilderUtil.java", "diffHunk": "@@ -724,19 +723,19 @@ public static BLangMatchExpression createMatchExpression(BLangExpression expr) {\n         return matchExpr;\n     }\n \n-    public static BLangFieldBasedAccess createFieldAccessExpr(BLangVariableReference varRef, BLangIdentifier field) {\n+    public static BLangFieldBasedAccess createFieldAccessExpr(BLangExpression varRef, BLangIdentifier field) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "278547735197ee003300179d272056e1b9251534"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYyMDk4Mg==", "bodyText": "Fixed in 004d3a3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609#discussion_r556620982", "createdAt": "2021-01-13T15:47:04Z", "author": {"login": "grainier"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/ASTBuilderUtil.java", "diffHunk": "@@ -724,19 +723,19 @@ public static BLangMatchExpression createMatchExpression(BLangExpression expr) {\n         return matchExpr;\n     }\n \n-    public static BLangFieldBasedAccess createFieldAccessExpr(BLangVariableReference varRef, BLangIdentifier field) {\n+    public static BLangFieldBasedAccess createFieldAccessExpr(BLangExpression varRef, BLangIdentifier field) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjU3MTc2MA=="}, "originalCommit": {"oid": "278547735197ee003300179d272056e1b9251534"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwNDExMTUwOnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxNDo0NjozNlrOISygLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxNTo0NzowMFrOIS1cYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjU3MjcxOQ==", "bodyText": "Shouldn't this be a BLangAccessibleExpression?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609#discussion_r556572719", "createdAt": "2021-01-13T14:46:36Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -2367,25 +2367,25 @@ private void createVarRefAssignmentStmts(BLangTupleVarRef parentTupleVariable, B\n      * This method creates a assignment statement and assigns and array expression based on the given indexExpr.\n      *\n      */\n-    private void createSimpleVarRefAssignmentStmt(BLangVariableReference simpleVarRef, BLangBlockStmt parentBlockStmt,\n-                                                  BLangExpression indexExpr, BVarSymbol tupleVarSymbol,\n-                                                  BLangIndexBasedAccess parentArrayAccessExpr) {\n+    private void createAssignmentStmt(BLangAccessExpression accessExpression, BLangBlockStmt parentBlockStmt,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "278547735197ee003300179d272056e1b9251534"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYyMDg5OQ==", "bodyText": "Fixed in 004d3a3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609#discussion_r556620899", "createdAt": "2021-01-13T15:47:00Z", "author": {"login": "grainier"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/desugar/Desugar.java", "diffHunk": "@@ -2367,25 +2367,25 @@ private void createVarRefAssignmentStmts(BLangTupleVarRef parentTupleVariable, B\n      * This method creates a assignment statement and assigns and array expression based on the given indexExpr.\n      *\n      */\n-    private void createSimpleVarRefAssignmentStmt(BLangVariableReference simpleVarRef, BLangBlockStmt parentBlockStmt,\n-                                                  BLangExpression indexExpr, BVarSymbol tupleVarSymbol,\n-                                                  BLangIndexBasedAccess parentArrayAccessExpr) {\n+    private void createAssignmentStmt(BLangAccessExpression accessExpression, BLangBlockStmt parentBlockStmt,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjU3MjcxOQ=="}, "originalCommit": {"oid": "278547735197ee003300179d272056e1b9251534"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwNDEyODY5OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxNDo1MDoxMlrOISyq9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxNTo0Njo1NlrOIS1b-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjU3NTQ3OA==", "bodyText": "Shouldn't this always be true? If not, shouldn't we log an error or return?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609#discussion_r556575478", "createdAt": "2021-01-13T14:50:12Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2462,11 +2463,14 @@ private boolean isFunctionArgument(BSymbol symbol, List<BLangSimpleVariable> par\n     }\n \n     public void visit(BLangFieldBasedAccess fieldAccessExpr) {\n-        // First analyze the variable reference expression.\n-        ((BLangVariableReference) fieldAccessExpr.expr).lhsVar = fieldAccessExpr.lhsVar;\n-        ((BLangVariableReference) fieldAccessExpr.expr).compoundAssignmentLhsVar =\n-                fieldAccessExpr.compoundAssignmentLhsVar;\n-        BType varRefType = getTypeOfExprInFieldAccess(fieldAccessExpr.expr);\n+        // First analyze the accessible expression.\n+        BLangExpression containerExpression = fieldAccessExpr.expr;\n+        if (containerExpression instanceof BLangAccessibleExpression) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "278547735197ee003300179d272056e1b9251534"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYyMDc5Mw==", "bodyText": "Fixed in 004d3a3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609#discussion_r556620793", "createdAt": "2021-01-13T15:46:56Z", "author": {"login": "grainier"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -2462,11 +2463,14 @@ private boolean isFunctionArgument(BSymbol symbol, List<BLangSimpleVariable> par\n     }\n \n     public void visit(BLangFieldBasedAccess fieldAccessExpr) {\n-        // First analyze the variable reference expression.\n-        ((BLangVariableReference) fieldAccessExpr.expr).lhsVar = fieldAccessExpr.lhsVar;\n-        ((BLangVariableReference) fieldAccessExpr.expr).compoundAssignmentLhsVar =\n-                fieldAccessExpr.compoundAssignmentLhsVar;\n-        BType varRefType = getTypeOfExprInFieldAccess(fieldAccessExpr.expr);\n+        // First analyze the accessible expression.\n+        BLangExpression containerExpression = fieldAccessExpr.expr;\n+        if (containerExpression instanceof BLangAccessibleExpression) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjU3NTQ3OA=="}, "originalCommit": {"oid": "278547735197ee003300179d272056e1b9251534"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwNDEzMDE0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangAccessExpression.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxNDo1MDozMVrOISyr2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxNTo0Njo1MFrOIS1bYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjU3NTcwNA==", "bodyText": "Unnecessary change?", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609#discussion_r556575704", "createdAt": "2021-01-13T14:50:31Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangAccessExpression.java", "diffHunk": "@@ -26,12 +25,13 @@\n  * \n  * @since 0.970.0\n  */\n-public abstract class BLangAccessExpression extends BLangVariableReference implements VariableReferenceNode {\n+public abstract class BLangAccessExpression extends BLangAccessibleExpression {\n \n     public BLangExpression expr;\n     public boolean optionalFieldAccess = false;\n     public boolean errorSafeNavigation = false;\n     public boolean nilSafeNavigation = false;\n     public BType originalType;\n     public boolean leafNode;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "278547735197ee003300179d272056e1b9251534"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYyMDY0MA==", "bodyText": "Fixed in 004d3a3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609#discussion_r556620640", "createdAt": "2021-01-13T15:46:50Z", "author": {"login": "grainier"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangAccessExpression.java", "diffHunk": "@@ -26,12 +25,13 @@\n  * \n  * @since 0.970.0\n  */\n-public abstract class BLangAccessExpression extends BLangVariableReference implements VariableReferenceNode {\n+public abstract class BLangAccessExpression extends BLangAccessibleExpression {\n \n     public BLangExpression expr;\n     public boolean optionalFieldAccess = false;\n     public boolean errorSafeNavigation = false;\n     public boolean nilSafeNavigation = false;\n     public BType originalType;\n     public boolean leafNode;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjU3NTcwNA=="}, "originalCommit": {"oid": "278547735197ee003300179d272056e1b9251534"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwNDEzMTE0OnYy", "diffSide": "RIGHT", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangAccessibleExpression.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxNDo1MDo0NFrOISyshg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxNTo0Njo0NVrOIS1a5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjU3NTg3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *  Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609#discussion_r556575878", "createdAt": "2021-01-13T14:50:44Z", "author": {"login": "MaryamZi"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangAccessibleExpression.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "278547735197ee003300179d272056e1b9251534"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYyMDUxOA==", "bodyText": "Fixed in 004d3a3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/27609#discussion_r556620518", "createdAt": "2021-01-13T15:46:45Z", "author": {"login": "grainier"}, "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/expressions/BLangAccessibleExpression.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjU3NTg3OA=="}, "originalCommit": {"oid": "278547735197ee003300179d272056e1b9251534"}, "originalPosition": 2}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2792, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}