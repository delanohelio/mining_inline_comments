{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MjAwOTk4", "number": 23201, "title": "Adds Java interop array utils into the java.arrays module of stdlib", "bodyText": "Purpose\nThis PR adds 2 array util functions toHandle and fromHandle into the java.arrays module of the Ballerina standard library.\nFixes #22725\nApproach\n1. toHandle\n# Returns a handle value representation for a Ballerina array.\n# handle handleValue = check java.arrays:toHandle(array, \"char\");\n#\n# + array - Ballerina array which is to be converted to a handle reference\n# + jType - Java class name or the primitive type of the array elements referenced by the handle\n# + return - The `handle|error` after the conversion\npublic function toHandle(any[] array, string jType) returns handle|error;\nExample:\nhandle handleValue = check java.arrays:toHandle(array, \"char\");\n2. fromHandle\n# Returns a Ballerina array for a handle that holds a Java array.\n#\n# + array - The `handle`, which refers to the Java array\n# + jType - The `string` parameter provided to specify the Java array element type\n# + bType - The optional `string` parameter provided to specify the Ballerina array element type\n# + return - Ballerina array `any[]|error` for the provided handle\npublic function fromHandle(handle array, string jType, string bType = \"default\") returns any[]|error;\nExample:\nint[] array = <int[]> check jarrays:fromHandle(arrayHandle, \"int\");\nSamples\nRefer the test cases included in this PR for samples.\nRemarks\n\nList any other known issues, related PRs, TODO items, or any other notes related to the PR.\n\nCheck List\n\n Read the Contributing Guide\n Updated Change Log\n Checked Tooling Support (#)\n Added necessary tests\n\n Unit Tests\n Spec Conformance Tests\n Integration Tests\n Ballerina By Example Tests\n\n\n Increased Test Coverage\n Added necessary documentation\n\n API documentation\n Module documentation in Module.md files\n Ballerina By Examples", "createdAt": "2020-05-13T08:25:43Z", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23201", "merged": true, "mergeCommit": {"oid": "f2c5710e02699d51cc771ec9b6c6c30d928ae489"}, "closed": true, "closedAt": "2020-06-07T15:38:51Z", "author": {"login": "IrushiL"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcg0hmEgH2gAyNDE3MjAwOTk4OjdhMDJmMzkzMTIwMGEwM2FmNDAzMzVmNjBkMmI2NDlkY2RlMjgyYTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcoyhYXAFqTQyNTc4MjI4Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7a02f3931200a03af40335f60d2b649dcde282a5", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7a02f3931200a03af40335f60d2b649dcde282a5", "committedDate": "2020-05-13T08:23:25Z", "message": "Add array util functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "750792ece08c29b9b5a945b722b6f417b421c445", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/750792ece08c29b9b5a945b722b6f417b421c445", "committedDate": "2020-05-13T08:23:37Z", "message": "Add JObject and Bindings annotation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNzgxNzE5", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23201#pullrequestreview-410781719", "createdAt": "2020-05-13T10:11:49Z", "commit": {"oid": "750792ece08c29b9b5a945b722b6f417b421c445"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoxMTo0OVrOGUq09g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDoxMzo0OFrOGUq4_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMyNjM5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Ballerina array `any[]|error` for the provided handle\n          \n          \n            \n            # + return - Ballerina `any[]|error` array for the provided handle", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23201#discussion_r424326390", "createdAt": "2020-05-13T10:11:49Z", "author": {"login": "praneesha"}, "path": "stdlib/java.arrays/src/main/ballerina/src/java.arrays/java_array_utils.bal", "diffHunk": "@@ -73,3 +73,222 @@ public function set(public handle array, public int index, public handle element\n public function getLength(public handle array) returns int = @java:Method {\n     class: \"java.lang.reflect.Array\"\n } external;\n+\n+# Returns a Ballerina array for a handle that holds a Java array.\n+# ```ballerina\n+# int[] array = <int[]> check jarrays:fromHandle(arrayHandle, \"int\");\n+# ```\n+#\n+# + array - The `handle`, which refers to the Java array\n+# + jType - The `string` parameter provided to specify the Java array element type\n+# + bType - The optional `string` parameter provided to specify the Ballerina array element type\n+# + return - Ballerina array `any[]|error` for the provided handle", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "750792ece08c29b9b5a945b722b6f417b421c445"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMyNzQyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + array - Ballerina array which is to be converted to a handle reference\n          \n          \n            \n            # + array - Ballerina array, which is to be converted to a handle reference", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23201#discussion_r424327420", "createdAt": "2020-05-13T10:13:48Z", "author": {"login": "praneesha"}, "path": "stdlib/java.arrays/src/main/ballerina/src/java.arrays/java_array_utils.bal", "diffHunk": "@@ -73,3 +73,222 @@ public function set(public handle array, public int index, public handle element\n public function getLength(public handle array) returns int = @java:Method {\n     class: \"java.lang.reflect.Array\"\n } external;\n+\n+# Returns a Ballerina array for a handle that holds a Java array.\n+# ```ballerina\n+# int[] array = <int[]> check jarrays:fromHandle(arrayHandle, \"int\");\n+# ```\n+#\n+# + array - The `handle`, which refers to the Java array\n+# + jType - The `string` parameter provided to specify the Java array element type\n+# + bType - The optional `string` parameter provided to specify the Ballerina array element type\n+# + return - Ballerina array `any[]|error` for the provided handle\n+public function fromHandle(handle array, string jType, string bType = \"default\") returns any[]|error {\n+    int count = getLength(array);\n+    any[] returnArray = [];\n+    if (!java:isNull(array)) {\n+        if (jType == \"string\") {\n+            string[] returnStringArray = [];\n+            foreach int i in 0 ... count-1 {\n+                string? element = java:toString(<handle>get(array, i));\n+                if (element is string) {\n+                    returnStringArray[i] = element;\n+                }\n+            }\n+            return returnStringArray;\n+        } else if (jType == \"handle\") {\n+            handle[] returnHandleArray = [];\n+            foreach int i in 0 ... count-1 {\n+                returnHandleArray[i] = get(array, i);\n+            }\n+            return returnHandleArray;\n+        } else if (jType == \"boolean\") {\n+            boolean[] returnBooleanArray = [];\n+            foreach int i in 0 ... count-1 {\n+                boolean element = getBBooleanFromJBoolean(get(array, i));\n+                returnBooleanArray[i] = element;\n+            }\n+            return returnBooleanArray;\n+        } else if (jType == \"float\") {\n+            float[] returnFloatArray = [];\n+            foreach int i in 0 ... count-1 {\n+                float element = getBFloatFromJFloat(get(array, i));\n+                returnFloatArray[i] = element;\n+            }\n+            return returnFloatArray;\n+        } else if (jType == \"double\") {\n+            float[] returnFloatArray = [];\n+            foreach int i in 0 ... count-1 {\n+                float element = getBFloatFromJDouble(get(array, i));\n+                returnFloatArray[i] = element;\n+            }\n+            return returnFloatArray;\n+        } else if (jType == \"int\" && (bType == \"default\" || bType == \"int\")) {\n+            int[] returnIntArray = [];\n+            foreach int i in 0 ... count-1 {\n+                int element = getBIntFromJInt(get(array, i));\n+                returnIntArray[i] = element;\n+            }\n+            return returnIntArray;\n+        } else if (jType == \"int\" && bType == \"float\") {\n+            float[] returnFloatArray = [];\n+            foreach int i in 0 ... count-1 {\n+                float element = getBFloatFromJInt(get(array, i));\n+                returnFloatArray[i] = element;\n+            }\n+            return returnFloatArray;\n+        } else if (jType == \"byte\" && (bType == \"default\" || bType == \"byte\")) {\n+            byte[] returnByteArray = [];\n+            foreach int i in 0 ... count-1 {\n+                byte element = getBByteFromJByte(get(array, i));\n+                returnByteArray[i] = element;\n+            }\n+            return returnByteArray;\n+        } else if (jType == \"byte\" && bType == \"float\") {\n+            float[] returnFloatArray = [];\n+            foreach int i in 0 ... count-1 {\n+                float element = getBFloatFromJByte(get(array, i));\n+                returnFloatArray[i] = element;\n+            }\n+            return returnFloatArray;\n+        } else if (jType == \"byte\" && bType == \"int\") {\n+            int[] returnIntArray = [];\n+            foreach int i in 0 ... count-1 {\n+                int element = getBIntFromJByte(get(array, i));\n+                returnIntArray[i] = element;\n+            }\n+            return returnIntArray;\n+        } else if (jType == \"short\" && (bType == \"default\" || bType == \"int\")) {\n+            int[] returnIntArray = [];\n+            foreach int i in 0 ... count-1 {\n+                int element = getBIntFromJShort(get(array, i));\n+                returnIntArray[i] = element;\n+            }\n+            return returnIntArray;\n+        } else if (jType == \"short\" && bType == \"float\") {\n+            float[] returnFloatArray = [];\n+            foreach int i in 0 ... count-1 {\n+                float element = getBFloatFromJShort(get(array, i));\n+                returnFloatArray[i] = element;\n+            }\n+            return returnFloatArray;\n+        } else if (jType == \"long\" && (bType == \"default\" || bType == \"int\")) {\n+            int[] returnIntArray = [];\n+            foreach int i in 0 ... count-1 {\n+                int element = getBIntFromJLong(get(array, i));\n+                returnIntArray[i] = element;\n+            }\n+            return returnIntArray;\n+        } else if (jType == \"long\" && bType == \"float\") {\n+            float[] returnFloatArray = [];\n+            foreach int i in 0 ... count-1 {\n+                float element = getBFloatFromJLong(get(array, i));\n+                returnFloatArray[i] = element;\n+            }\n+            return returnFloatArray;\n+        } else if (jType == \"char\" && (bType == \"default\" || bType == \"int\")) {\n+            int[] returnIntArray = [];\n+            foreach int i in 0 ... count-1 {\n+                int element = getBIntFromJChar(get(array, i));\n+                returnIntArray[i] = element;\n+            }\n+            return returnIntArray;\n+        } else if (jType == \"char\" && bType == \"float\") {\n+            float[] returnFloatArray = [];\n+            foreach int i in 0 ... count-1 {\n+                float element = getBFloatFromJChar(get(array, i));\n+                returnFloatArray[i] = element;\n+            }\n+            return returnFloatArray;\n+        } else {\n+            return error(\"{ballerina/java.arrays} Handle to array conversion cannot be applied on the provided types\");\n+        }\n+    }\n+    return returnArray;\n+}\n+\n+# Returns a handle value representation for a Ballerina array.\n+# ```ballerina\n+# handle handleValue = check java.arrays:toHandle(array, \"char\");\n+# ```\n+#\n+# + array - Ballerina array which is to be converted to a handle reference", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "750792ece08c29b9b5a945b722b6f417b421c445"}, "originalPosition": 143}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11f763a8bd59500ec25bf5ad81051667985fa9d4", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/11f763a8bd59500ec25bf5ad81051667985fa9d4", "committedDate": "2020-05-13T10:17:03Z", "message": "Fix doc comment\n\nCo-authored-by: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3013de017cee6498a9ba8877c025f98995319378", "author": {"user": {"login": "IrushiL", "name": "Irushi Liyanage"}}, "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3013de017cee6498a9ba8877c025f98995319378", "committedDate": "2020-05-13T10:17:23Z", "message": "Fix doc comment\n\nCo-authored-by: praneesha <praneesha@wso2.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NzgyMjg3", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23201#pullrequestreview-425782287", "createdAt": "2020-06-07T02:34:46Z", "commit": {"oid": "3013de017cee6498a9ba8877c025f98995319378"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3313, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}