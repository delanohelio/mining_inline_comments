{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1MjE1MzI4", "number": 6157, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMjowNjoyOFrOE76ouQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMjoxMzo0NlrOE76qtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMjYyMTM3OnYy", "diffSide": "RIGHT", "path": "frameworks/OCaml/webmachine/haproxy.cfg", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMjowNjoyOFrOH3zADQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwNjowMjozMFrOH30IDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2OTMyNQ==", "bodyText": "We should probably remove haproxy from the OCaml benchmarks, now that we know that sharing a socket yields better throughput", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6157#discussion_r528269325", "createdAt": "2020-11-22T02:06:28Z", "author": {"login": "blandinw"}, "path": "frameworks/OCaml/webmachine/haproxy.cfg", "diffHunk": "@@ -7,10 +7,10 @@ global\n     nbthread    2\n \n defaults\n-    mode                    http\n+    mode                    tcp", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63aecce94483b6b7c68d8b0fbb03f72b39d97100"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI4Nzc1OA==", "bodyText": "In the long term yes but I would like to have one run completed to see how much overhead it adds. Locally the plaintext test actually produces a higher RPS behind haproxy than with the multiprocess approach.", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6157#discussion_r528287758", "createdAt": "2020-11-22T06:02:30Z", "author": {"login": "rbjorklin"}, "path": "frameworks/OCaml/webmachine/haproxy.cfg", "diffHunk": "@@ -7,10 +7,10 @@ global\n     nbthread    2\n \n defaults\n-    mode                    http\n+    mode                    tcp", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2OTMyNQ=="}, "originalCommit": {"oid": "63aecce94483b6b7c68d8b0fbb03f72b39d97100"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMjYyMjI4OnYy", "diffSide": "RIGHT", "path": "frameworks/OCaml/webmachine/src/src/bin/tfb.ml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMjowNzo0MFrOH3zAdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxODoxMzowM1rOH35-HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2OTQyOA==", "bodyText": "We probably shouldn't ignore the return value (promise) of all the async Lwt functions.\nAlternatively, you can use regular Printf when you're not serving requests yet.", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6157#discussion_r528269428", "createdAt": "2020-11-22T02:07:40Z", "author": {"login": "blandinw"}, "path": "frameworks/OCaml/webmachine/src/src/bin/tfb.ml", "diffHunk": "@@ -138,7 +139,46 @@ class queries =\n       Wm.continue (`String (Lib.Db_j.string_of_queries json)) rd\n   end\n \n+let dump_lwt () =\n+  let options =\n+    [\n+      (\"fd_passing\", `fd_passing);\n+      (\"fdatasync\", `fdatasync);\n+      (\"get_affinity\", `get_affinity);\n+      (\"get_cpu\", `get_cpu);\n+      (\"get_credentials\", `get_credentials);\n+      (\"libev\", `libev);\n+      (\"madvise\", `madvise);\n+      (\"mincore\", `mincore);\n+      (\"recv_msg\", `recv_msg);\n+      (\"send_msg\", `send_msg);\n+      (\"set_affinity\", `set_affinity);\n+      (\"wait4\", `wait4);\n+    ]\n+  in\n+  ignore @@ Lwt_io.eprintf \"Lwt:\\n\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63aecce94483b6b7c68d8b0fbb03f72b39d97100"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI4Nzg2MA==", "bodyText": "I agree I just don't know how to make it work without either ignoring the promise or using the regular Printf. My Lwt foo is pretty weak so any pointers on how to make this work with Lwt_io without ignore would be appreciated.", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6157#discussion_r528287860", "createdAt": "2020-11-22T06:04:29Z", "author": {"login": "rbjorklin"}, "path": "frameworks/OCaml/webmachine/src/src/bin/tfb.ml", "diffHunk": "@@ -138,7 +139,46 @@ class queries =\n       Wm.continue (`String (Lib.Db_j.string_of_queries json)) rd\n   end\n \n+let dump_lwt () =\n+  let options =\n+    [\n+      (\"fd_passing\", `fd_passing);\n+      (\"fdatasync\", `fdatasync);\n+      (\"get_affinity\", `get_affinity);\n+      (\"get_cpu\", `get_cpu);\n+      (\"get_credentials\", `get_credentials);\n+      (\"libev\", `libev);\n+      (\"madvise\", `madvise);\n+      (\"mincore\", `mincore);\n+      (\"recv_msg\", `recv_msg);\n+      (\"send_msg\", `send_msg);\n+      (\"set_affinity\", `set_affinity);\n+      (\"wait4\", `wait4);\n+    ]\n+  in\n+  ignore @@ Lwt_io.eprintf \"Lwt:\\n\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2OTQyOA=="}, "originalCommit": {"oid": "63aecce94483b6b7c68d8b0fbb03f72b39d97100"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODM4MzUxNw==", "bodyText": "Lwt exposes a monadic API (monadic just means that you chain things together using the bind, aka. >>= or >|= operators) to allow you to do just that.\nCurrently, you're starting up async computations in a fire and forget fashion instead of executing them sequentially. If you're familiar with Javascript promises, you can think of >>= and >|= as .then(). You can look at my code in httpaf_unix.ml for an example of using the monadic API. There's a lot of information encoded in the type signatures of the Lwt monadic functions, do not hesitate to scrutinize them, as well as the type signatures of >>=, >|= and Lwt_main.run.", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6157#discussion_r528383517", "createdAt": "2020-11-22T18:13:03Z", "author": {"login": "blandinw"}, "path": "frameworks/OCaml/webmachine/src/src/bin/tfb.ml", "diffHunk": "@@ -138,7 +139,46 @@ class queries =\n       Wm.continue (`String (Lib.Db_j.string_of_queries json)) rd\n   end\n \n+let dump_lwt () =\n+  let options =\n+    [\n+      (\"fd_passing\", `fd_passing);\n+      (\"fdatasync\", `fdatasync);\n+      (\"get_affinity\", `get_affinity);\n+      (\"get_cpu\", `get_cpu);\n+      (\"get_credentials\", `get_credentials);\n+      (\"libev\", `libev);\n+      (\"madvise\", `madvise);\n+      (\"mincore\", `mincore);\n+      (\"recv_msg\", `recv_msg);\n+      (\"send_msg\", `send_msg);\n+      (\"set_affinity\", `set_affinity);\n+      (\"wait4\", `wait4);\n+    ]\n+  in\n+  ignore @@ Lwt_io.eprintf \"Lwt:\\n\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2OTQyOA=="}, "originalCommit": {"oid": "63aecce94483b6b7c68d8b0fbb03f72b39d97100"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMjYyMjM4OnYy", "diffSide": "RIGHT", "path": "frameworks/OCaml/webmachine/src/src/bin/tfb.ml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMjowNzo1OFrOH3zAfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwNjowNjowNFrOH30JLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2OTQzOQ==", "bodyText": "why not use all cores?", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6157#discussion_r528269439", "createdAt": "2020-11-22T02:07:58Z", "author": {"login": "blandinw"}, "path": "frameworks/OCaml/webmachine/src/src/bin/tfb.ml", "diffHunk": "@@ -138,7 +139,46 @@ class queries =\n       Wm.continue (`String (Lib.Db_j.string_of_queries json)) rd\n   end\n \n+let dump_lwt () =\n+  let options =\n+    [\n+      (\"fd_passing\", `fd_passing);\n+      (\"fdatasync\", `fdatasync);\n+      (\"get_affinity\", `get_affinity);\n+      (\"get_cpu\", `get_cpu);\n+      (\"get_credentials\", `get_credentials);\n+      (\"libev\", `libev);\n+      (\"madvise\", `madvise);\n+      (\"mincore\", `mincore);\n+      (\"recv_msg\", `recv_msg);\n+      (\"send_msg\", `send_msg);\n+      (\"set_affinity\", `set_affinity);\n+      (\"wait4\", `wait4);\n+    ]\n+  in\n+  ignore @@ Lwt_io.eprintf \"Lwt:\\n\";\n+  List.iter\n+    (fun (str, opt) ->\n+      ignore @@ Lwt_io.eprintf \"  %s = %b\\n\" str (Lwt_sys.have opt))\n+    options\n+\n let main () =\n+  (* https://github.com/mirage/ocaml-cohttp/issues/328#issuecomment-222583580 *)\n+  Lwt_io.set_default_buffer_size 0x10000;\n+  let nproc =\n+    match Sys.getenv \"CORE_COUNT\" with", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63aecce94483b6b7c68d8b0fbb03f72b39d97100"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI4ODA0Nw==", "bodyText": "I wanted to compare the forking shared socket approach with a multiprocess multisocket approach while still using your tweaks to memoize the Date header.", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6157#discussion_r528288047", "createdAt": "2020-11-22T06:06:04Z", "author": {"login": "rbjorklin"}, "path": "frameworks/OCaml/webmachine/src/src/bin/tfb.ml", "diffHunk": "@@ -138,7 +139,46 @@ class queries =\n       Wm.continue (`String (Lib.Db_j.string_of_queries json)) rd\n   end\n \n+let dump_lwt () =\n+  let options =\n+    [\n+      (\"fd_passing\", `fd_passing);\n+      (\"fdatasync\", `fdatasync);\n+      (\"get_affinity\", `get_affinity);\n+      (\"get_cpu\", `get_cpu);\n+      (\"get_credentials\", `get_credentials);\n+      (\"libev\", `libev);\n+      (\"madvise\", `madvise);\n+      (\"mincore\", `mincore);\n+      (\"recv_msg\", `recv_msg);\n+      (\"send_msg\", `send_msg);\n+      (\"set_affinity\", `set_affinity);\n+      (\"wait4\", `wait4);\n+    ]\n+  in\n+  ignore @@ Lwt_io.eprintf \"Lwt:\\n\";\n+  List.iter\n+    (fun (str, opt) ->\n+      ignore @@ Lwt_io.eprintf \"  %s = %b\\n\" str (Lwt_sys.have opt))\n+    options\n+\n let main () =\n+  (* https://github.com/mirage/ocaml-cohttp/issues/328#issuecomment-222583580 *)\n+  Lwt_io.set_default_buffer_size 0x10000;\n+  let nproc =\n+    match Sys.getenv \"CORE_COUNT\" with", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2OTQzOQ=="}, "originalCommit": {"oid": "63aecce94483b6b7c68d8b0fbb03f72b39d97100"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMjYyMjQ0OnYy", "diffSide": "RIGHT", "path": "frameworks/OCaml/webmachine/src/src/bin/tfb.ml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMjowODoyMVrOH3zAiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMjowODoyMVrOH3zAiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2OTQ0OQ==", "bodyText": "See above, don't discard returned promise, or use regular Printf", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6157#discussion_r528269449", "createdAt": "2020-11-22T02:08:21Z", "author": {"login": "blandinw"}, "path": "frameworks/OCaml/webmachine/src/src/bin/tfb.ml", "diffHunk": "@@ -138,7 +139,46 @@ class queries =\n       Wm.continue (`String (Lib.Db_j.string_of_queries json)) rd\n   end\n \n+let dump_lwt () =\n+  let options =\n+    [\n+      (\"fd_passing\", `fd_passing);\n+      (\"fdatasync\", `fdatasync);\n+      (\"get_affinity\", `get_affinity);\n+      (\"get_cpu\", `get_cpu);\n+      (\"get_credentials\", `get_credentials);\n+      (\"libev\", `libev);\n+      (\"madvise\", `madvise);\n+      (\"mincore\", `mincore);\n+      (\"recv_msg\", `recv_msg);\n+      (\"send_msg\", `send_msg);\n+      (\"set_affinity\", `set_affinity);\n+      (\"wait4\", `wait4);\n+    ]\n+  in\n+  ignore @@ Lwt_io.eprintf \"Lwt:\\n\";\n+  List.iter\n+    (fun (str, opt) ->\n+      ignore @@ Lwt_io.eprintf \"  %s = %b\\n\" str (Lwt_sys.have opt))\n+    options\n+\n let main () =\n+  (* https://github.com/mirage/ocaml-cohttp/issues/328#issuecomment-222583580 *)\n+  Lwt_io.set_default_buffer_size 0x10000;\n+  let nproc =\n+    match Sys.getenv \"CORE_COUNT\" with\n+    | x -> int_of_string x\n+    | exception Not_found ->\n+        Unix.open_process_in \"getconf _NPROCESSORS_ONLN\"\n+        |> input_line\n+        |> int_of_string\n+  in\n+  ignore @@ Lwt_io.eprintf \"Detected %d cores\\n\" nproc;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63aecce94483b6b7c68d8b0fbb03f72b39d97100"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMjYyNTM4OnYy", "diffSide": "RIGHT", "path": "frameworks/OCaml/webmachine/src/src/bin/tfb.ml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMjoxMjowNVrOH3zB1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMjoxMjowNVrOH3zB1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2OTc4Mw==", "bodyText": "See above, don't discard returned promise, or use regular Printf", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6157#discussion_r528269783", "createdAt": "2020-11-22T02:12:05Z", "author": {"login": "blandinw"}, "path": "frameworks/OCaml/webmachine/src/src/bin/tfb.ml", "diffHunk": "@@ -138,7 +139,46 @@ class queries =\n       Wm.continue (`String (Lib.Db_j.string_of_queries json)) rd\n   end\n \n+let dump_lwt () =\n+  let options =\n+    [\n+      (\"fd_passing\", `fd_passing);\n+      (\"fdatasync\", `fdatasync);\n+      (\"get_affinity\", `get_affinity);\n+      (\"get_cpu\", `get_cpu);\n+      (\"get_credentials\", `get_credentials);\n+      (\"libev\", `libev);\n+      (\"madvise\", `madvise);\n+      (\"mincore\", `mincore);\n+      (\"recv_msg\", `recv_msg);\n+      (\"send_msg\", `send_msg);\n+      (\"set_affinity\", `set_affinity);\n+      (\"wait4\", `wait4);\n+    ]\n+  in\n+  ignore @@ Lwt_io.eprintf \"Lwt:\\n\";\n+  List.iter\n+    (fun (str, opt) ->\n+      ignore @@ Lwt_io.eprintf \"  %s = %b\\n\" str (Lwt_sys.have opt))\n+    options\n+\n let main () =\n+  (* https://github.com/mirage/ocaml-cohttp/issues/328#issuecomment-222583580 *)\n+  Lwt_io.set_default_buffer_size 0x10000;\n+  let nproc =\n+    match Sys.getenv \"CORE_COUNT\" with\n+    | x -> int_of_string x\n+    | exception Not_found ->\n+        Unix.open_process_in \"getconf _NPROCESSORS_ONLN\"\n+        |> input_line\n+        |> int_of_string\n+  in\n+  ignore @@ Lwt_io.eprintf \"Detected %d cores\\n\" nproc;\n+  let ulimit_n =\n+    Unix.open_process_in \"ulimit -n\" |> input_line |> int_of_string\n+  in\n+  ignore @@ Lwt_io.eprintf \"Detected %d max open files\\n\" ulimit_n;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63aecce94483b6b7c68d8b0fbb03f72b39d97100"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMjYyNTY0OnYy", "diffSide": "RIGHT", "path": "frameworks/OCaml/webmachine/src/src/bin/tfb.ml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMjoxMjoxM1rOH3zB8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMjoxMjoxM1rOH3zB8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2OTgxMA==", "bodyText": "See above, don't discard returned promise, or use regular Printf", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6157#discussion_r528269810", "createdAt": "2020-11-22T02:12:13Z", "author": {"login": "blandinw"}, "path": "frameworks/OCaml/webmachine/src/src/bin/tfb.ml", "diffHunk": "@@ -160,35 +200,36 @@ let main () =\n      | Some result -> result)\n     >>= fun (status, headers, body, _) ->\n     let headers = Header.add headers \"Server\" \"webmachine\" in\n-    let headers = Header.add headers \"Date\" (Lib.Time.now ()) in\n+    let headers = Header.add headers \"Date\" Lib.Time.(!memo_date) in\n     Server.respond ~headers ~body ~status ()\n   in\n \n-  let config = Server.make ~callback () in\n-  Server.create ~mode:(`TCP (`Port port)) config >|= fun () ->\n-  Printf.eprintf \"hello_lwt: listening on 0.0.0.0:%d%!\" port\n-\n-let () =\n-  let options =\n-    [\n-      (\"fd_passing\", `fd_passing);\n-      (\"fdatasync\", `fdatasync);\n-      (\"get_affinity\", `get_affinity);\n-      (\"get_cpu\", `get_cpu);\n-      (\"get_credentials\", `get_credentials);\n-      (\"libev\", `libev);\n-      (\"madvise\", `madvise);\n-      (\"mincore\", `mincore);\n-      (\"recv_msg\", `recv_msg);\n-      (\"send_msg\", `send_msg);\n-      (\"set_affinity\", `set_affinity);\n-      (\"wait4\", `wait4);\n-    ]\n+  let ipaddr = Unix.inet_addr_any in\n+  let sockaddr = Unix.ADDR_INET (ipaddr, port) in\n+  let socket =\n+    Lwt_unix.socket (Unix.domain_of_sockaddr sockaddr) Unix.SOCK_STREAM 0\n   in\n-  List.iter\n-    (fun (str, opt) ->\n-      print_endline (\"option \" ^ str ^ \": \" ^ string_of_bool (Lwt_sys.have opt)))\n-    options;\n-  (* https://github.com/mirage/ocaml-cohttp/issues/328#issuecomment-222583580 *)\n-  Lwt_io.set_default_buffer_size 0x10000;\n-  Lwt_main.run (main ())\n+  Lwt_unix.setsockopt socket Unix.SO_REUSEADDR true;\n+\n+  Lwt_main.run\n+  @@ ( Lwt_unix.bind socket sockaddr >|= fun () ->\n+       Lwt_unix.listen socket (Lwt_unix.somaxconn () [@ocaml.warning \"-3\"]) );\n+\n+  for i = 1 to nproc do\n+    ignore @@ Lwt_io.flush_all ();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63aecce94483b6b7c68d8b0fbb03f72b39d97100"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMjYyNTY5OnYy", "diffSide": "RIGHT", "path": "frameworks/OCaml/webmachine/src/src/bin/tfb.ml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMjoxMjoxOFrOH3zB-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMjoxMjoxOFrOH3zB-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2OTgxNg==", "bodyText": "See above, don't discard returned promise, or use regular Printf", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6157#discussion_r528269816", "createdAt": "2020-11-22T02:12:18Z", "author": {"login": "blandinw"}, "path": "frameworks/OCaml/webmachine/src/src/bin/tfb.ml", "diffHunk": "@@ -160,35 +200,36 @@ let main () =\n      | Some result -> result)\n     >>= fun (status, headers, body, _) ->\n     let headers = Header.add headers \"Server\" \"webmachine\" in\n-    let headers = Header.add headers \"Date\" (Lib.Time.now ()) in\n+    let headers = Header.add headers \"Date\" Lib.Time.(!memo_date) in\n     Server.respond ~headers ~body ~status ()\n   in\n \n-  let config = Server.make ~callback () in\n-  Server.create ~mode:(`TCP (`Port port)) config >|= fun () ->\n-  Printf.eprintf \"hello_lwt: listening on 0.0.0.0:%d%!\" port\n-\n-let () =\n-  let options =\n-    [\n-      (\"fd_passing\", `fd_passing);\n-      (\"fdatasync\", `fdatasync);\n-      (\"get_affinity\", `get_affinity);\n-      (\"get_cpu\", `get_cpu);\n-      (\"get_credentials\", `get_credentials);\n-      (\"libev\", `libev);\n-      (\"madvise\", `madvise);\n-      (\"mincore\", `mincore);\n-      (\"recv_msg\", `recv_msg);\n-      (\"send_msg\", `send_msg);\n-      (\"set_affinity\", `set_affinity);\n-      (\"wait4\", `wait4);\n-    ]\n+  let ipaddr = Unix.inet_addr_any in\n+  let sockaddr = Unix.ADDR_INET (ipaddr, port) in\n+  let socket =\n+    Lwt_unix.socket (Unix.domain_of_sockaddr sockaddr) Unix.SOCK_STREAM 0\n   in\n-  List.iter\n-    (fun (str, opt) ->\n-      print_endline (\"option \" ^ str ^ \": \" ^ string_of_bool (Lwt_sys.have opt)))\n-    options;\n-  (* https://github.com/mirage/ocaml-cohttp/issues/328#issuecomment-222583580 *)\n-  Lwt_io.set_default_buffer_size 0x10000;\n-  Lwt_main.run (main ())\n+  Lwt_unix.setsockopt socket Unix.SO_REUSEADDR true;\n+\n+  Lwt_main.run\n+  @@ ( Lwt_unix.bind socket sockaddr >|= fun () ->\n+       Lwt_unix.listen socket (Lwt_unix.somaxconn () [@ocaml.warning \"-3\"]) );\n+\n+  for i = 1 to nproc do\n+    ignore @@ Lwt_io.flush_all ();\n+    if Lwt_unix.fork () = 0 then (\n+      (* child *)\n+      Lib.Time.refresh_date ();\n+      ignore\n+      @@ Lwt_io.eprintf \"Listening on %s:%d (child %d)\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63aecce94483b6b7c68d8b0fbb03f72b39d97100"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMjYyNjE0OnYy", "diffSide": "RIGHT", "path": "frameworks/OCaml/webmachine/src/src/bin/tfb.ml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMjoxMzowNVrOH3zCKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMjoxMzowNVrOH3zCKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2OTg2Nw==", "bodyText": "See above, don't discard returned promise, or use regular Printf", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6157#discussion_r528269867", "createdAt": "2020-11-22T02:13:05Z", "author": {"login": "blandinw"}, "path": "frameworks/OCaml/webmachine/src/src/bin/tfb.ml", "diffHunk": "@@ -160,35 +200,36 @@ let main () =\n      | Some result -> result)\n     >>= fun (status, headers, body, _) ->\n     let headers = Header.add headers \"Server\" \"webmachine\" in\n-    let headers = Header.add headers \"Date\" (Lib.Time.now ()) in\n+    let headers = Header.add headers \"Date\" Lib.Time.(!memo_date) in\n     Server.respond ~headers ~body ~status ()\n   in\n \n-  let config = Server.make ~callback () in\n-  Server.create ~mode:(`TCP (`Port port)) config >|= fun () ->\n-  Printf.eprintf \"hello_lwt: listening on 0.0.0.0:%d%!\" port\n-\n-let () =\n-  let options =\n-    [\n-      (\"fd_passing\", `fd_passing);\n-      (\"fdatasync\", `fdatasync);\n-      (\"get_affinity\", `get_affinity);\n-      (\"get_cpu\", `get_cpu);\n-      (\"get_credentials\", `get_credentials);\n-      (\"libev\", `libev);\n-      (\"madvise\", `madvise);\n-      (\"mincore\", `mincore);\n-      (\"recv_msg\", `recv_msg);\n-      (\"send_msg\", `send_msg);\n-      (\"set_affinity\", `set_affinity);\n-      (\"wait4\", `wait4);\n-    ]\n+  let ipaddr = Unix.inet_addr_any in\n+  let sockaddr = Unix.ADDR_INET (ipaddr, port) in\n+  let socket =\n+    Lwt_unix.socket (Unix.domain_of_sockaddr sockaddr) Unix.SOCK_STREAM 0\n   in\n-  List.iter\n-    (fun (str, opt) ->\n-      print_endline (\"option \" ^ str ^ \": \" ^ string_of_bool (Lwt_sys.have opt)))\n-    options;\n-  (* https://github.com/mirage/ocaml-cohttp/issues/328#issuecomment-222583580 *)\n-  Lwt_io.set_default_buffer_size 0x10000;\n-  Lwt_main.run (main ())\n+  Lwt_unix.setsockopt socket Unix.SO_REUSEADDR true;\n+\n+  Lwt_main.run\n+  @@ ( Lwt_unix.bind socket sockaddr >|= fun () ->\n+       Lwt_unix.listen socket (Lwt_unix.somaxconn () [@ocaml.warning \"-3\"]) );\n+\n+  for i = 1 to nproc do\n+    ignore @@ Lwt_io.flush_all ();\n+    if Lwt_unix.fork () = 0 then (\n+      (* child *)\n+      Lib.Time.refresh_date ();\n+      ignore\n+      @@ Lwt_io.eprintf \"Listening on %s:%d (child %d)\\n\"\n+           (Unix.string_of_inet_addr ipaddr)\n+           port i;\n+      let config = Server.make ~callback () in\n+      ignore @@ Server.create ~mode:(`TCP (`Socket socket)) config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63aecce94483b6b7c68d8b0fbb03f72b39d97100"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMjYyNjMwOnYy", "diffSide": "RIGHT", "path": "frameworks/OCaml/webmachine/src/src/bin/tfb.ml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMjoxMzoyN1rOH3zCPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxODozNDoxMlrOH36Iug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2OTg4NA==", "bodyText": "You need to loop here, because any signal is gonna wake up the process", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6157#discussion_r528269884", "createdAt": "2020-11-22T02:13:27Z", "author": {"login": "blandinw"}, "path": "frameworks/OCaml/webmachine/src/src/bin/tfb.ml", "diffHunk": "@@ -160,35 +200,36 @@ let main () =\n      | Some result -> result)\n     >>= fun (status, headers, body, _) ->\n     let headers = Header.add headers \"Server\" \"webmachine\" in\n-    let headers = Header.add headers \"Date\" (Lib.Time.now ()) in\n+    let headers = Header.add headers \"Date\" Lib.Time.(!memo_date) in\n     Server.respond ~headers ~body ~status ()\n   in\n \n-  let config = Server.make ~callback () in\n-  Server.create ~mode:(`TCP (`Port port)) config >|= fun () ->\n-  Printf.eprintf \"hello_lwt: listening on 0.0.0.0:%d%!\" port\n-\n-let () =\n-  let options =\n-    [\n-      (\"fd_passing\", `fd_passing);\n-      (\"fdatasync\", `fdatasync);\n-      (\"get_affinity\", `get_affinity);\n-      (\"get_cpu\", `get_cpu);\n-      (\"get_credentials\", `get_credentials);\n-      (\"libev\", `libev);\n-      (\"madvise\", `madvise);\n-      (\"mincore\", `mincore);\n-      (\"recv_msg\", `recv_msg);\n-      (\"send_msg\", `send_msg);\n-      (\"set_affinity\", `set_affinity);\n-      (\"wait4\", `wait4);\n-    ]\n+  let ipaddr = Unix.inet_addr_any in\n+  let sockaddr = Unix.ADDR_INET (ipaddr, port) in\n+  let socket =\n+    Lwt_unix.socket (Unix.domain_of_sockaddr sockaddr) Unix.SOCK_STREAM 0\n   in\n-  List.iter\n-    (fun (str, opt) ->\n-      print_endline (\"option \" ^ str ^ \": \" ^ string_of_bool (Lwt_sys.have opt)))\n-    options;\n-  (* https://github.com/mirage/ocaml-cohttp/issues/328#issuecomment-222583580 *)\n-  Lwt_io.set_default_buffer_size 0x10000;\n-  Lwt_main.run (main ())\n+  Lwt_unix.setsockopt socket Unix.SO_REUSEADDR true;\n+\n+  Lwt_main.run\n+  @@ ( Lwt_unix.bind socket sockaddr >|= fun () ->\n+       Lwt_unix.listen socket (Lwt_unix.somaxconn () [@ocaml.warning \"-3\"]) );\n+\n+  for i = 1 to nproc do\n+    ignore @@ Lwt_io.flush_all ();\n+    if Lwt_unix.fork () = 0 then (\n+      (* child *)\n+      Lib.Time.refresh_date ();\n+      ignore\n+      @@ Lwt_io.eprintf \"Listening on %s:%d (child %d)\\n\"\n+           (Unix.string_of_inet_addr ipaddr)\n+           port i;\n+      let config = Server.make ~callback () in\n+      ignore @@ Server.create ~mode:(`TCP (`Socket socket)) config;\n+      let forever, _ = Lwt.wait () in\n+      Lwt_main.run forever;\n+      exit 0 )\n+  done;\n+  Unix.pause ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63aecce94483b6b7c68d8b0fbb03f72b39d97100"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI4ODE2NQ==", "bodyText": "It seems to work without a loop, what could happen?\nWith the loop all signals are effectively ignored, right?", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6157#discussion_r528288165", "createdAt": "2020-11-22T06:07:32Z", "author": {"login": "rbjorklin"}, "path": "frameworks/OCaml/webmachine/src/src/bin/tfb.ml", "diffHunk": "@@ -160,35 +200,36 @@ let main () =\n      | Some result -> result)\n     >>= fun (status, headers, body, _) ->\n     let headers = Header.add headers \"Server\" \"webmachine\" in\n-    let headers = Header.add headers \"Date\" (Lib.Time.now ()) in\n+    let headers = Header.add headers \"Date\" Lib.Time.(!memo_date) in\n     Server.respond ~headers ~body ~status ()\n   in\n \n-  let config = Server.make ~callback () in\n-  Server.create ~mode:(`TCP (`Port port)) config >|= fun () ->\n-  Printf.eprintf \"hello_lwt: listening on 0.0.0.0:%d%!\" port\n-\n-let () =\n-  let options =\n-    [\n-      (\"fd_passing\", `fd_passing);\n-      (\"fdatasync\", `fdatasync);\n-      (\"get_affinity\", `get_affinity);\n-      (\"get_cpu\", `get_cpu);\n-      (\"get_credentials\", `get_credentials);\n-      (\"libev\", `libev);\n-      (\"madvise\", `madvise);\n-      (\"mincore\", `mincore);\n-      (\"recv_msg\", `recv_msg);\n-      (\"send_msg\", `send_msg);\n-      (\"set_affinity\", `set_affinity);\n-      (\"wait4\", `wait4);\n-    ]\n+  let ipaddr = Unix.inet_addr_any in\n+  let sockaddr = Unix.ADDR_INET (ipaddr, port) in\n+  let socket =\n+    Lwt_unix.socket (Unix.domain_of_sockaddr sockaddr) Unix.SOCK_STREAM 0\n   in\n-  List.iter\n-    (fun (str, opt) ->\n-      print_endline (\"option \" ^ str ^ \": \" ^ string_of_bool (Lwt_sys.have opt)))\n-    options;\n-  (* https://github.com/mirage/ocaml-cohttp/issues/328#issuecomment-222583580 *)\n-  Lwt_io.set_default_buffer_size 0x10000;\n-  Lwt_main.run (main ())\n+  Lwt_unix.setsockopt socket Unix.SO_REUSEADDR true;\n+\n+  Lwt_main.run\n+  @@ ( Lwt_unix.bind socket sockaddr >|= fun () ->\n+       Lwt_unix.listen socket (Lwt_unix.somaxconn () [@ocaml.warning \"-3\"]) );\n+\n+  for i = 1 to nproc do\n+    ignore @@ Lwt_io.flush_all ();\n+    if Lwt_unix.fork () = 0 then (\n+      (* child *)\n+      Lib.Time.refresh_date ();\n+      ignore\n+      @@ Lwt_io.eprintf \"Listening on %s:%d (child %d)\\n\"\n+           (Unix.string_of_inet_addr ipaddr)\n+           port i;\n+      let config = Server.make ~callback () in\n+      ignore @@ Server.create ~mode:(`TCP (`Socket socket)) config;\n+      let forever, _ = Lwt.wait () in\n+      Lwt_main.run forever;\n+      exit 0 )\n+  done;\n+  Unix.pause ()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2OTg4NA=="}, "originalCommit": {"oid": "63aecce94483b6b7c68d8b0fbb03f72b39d97100"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODM4NjIzNA==", "bodyText": "Well, if you want to keep the (parent) process running (for example if it's your monitored Docker process), you should loop to avoid exiting.\nIf you don't care about the parent process (as currently, since haproxy is actually the monitored Docker process), you can just remove Unix.pause altogether. You'd need to update the code if you get rid of haproxy.\nMy main point was that the current version (Unix.pause without loop) looks unintended.", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6157#discussion_r528386234", "createdAt": "2020-11-22T18:34:12Z", "author": {"login": "blandinw"}, "path": "frameworks/OCaml/webmachine/src/src/bin/tfb.ml", "diffHunk": "@@ -160,35 +200,36 @@ let main () =\n      | Some result -> result)\n     >>= fun (status, headers, body, _) ->\n     let headers = Header.add headers \"Server\" \"webmachine\" in\n-    let headers = Header.add headers \"Date\" (Lib.Time.now ()) in\n+    let headers = Header.add headers \"Date\" Lib.Time.(!memo_date) in\n     Server.respond ~headers ~body ~status ()\n   in\n \n-  let config = Server.make ~callback () in\n-  Server.create ~mode:(`TCP (`Port port)) config >|= fun () ->\n-  Printf.eprintf \"hello_lwt: listening on 0.0.0.0:%d%!\" port\n-\n-let () =\n-  let options =\n-    [\n-      (\"fd_passing\", `fd_passing);\n-      (\"fdatasync\", `fdatasync);\n-      (\"get_affinity\", `get_affinity);\n-      (\"get_cpu\", `get_cpu);\n-      (\"get_credentials\", `get_credentials);\n-      (\"libev\", `libev);\n-      (\"madvise\", `madvise);\n-      (\"mincore\", `mincore);\n-      (\"recv_msg\", `recv_msg);\n-      (\"send_msg\", `send_msg);\n-      (\"set_affinity\", `set_affinity);\n-      (\"wait4\", `wait4);\n-    ]\n+  let ipaddr = Unix.inet_addr_any in\n+  let sockaddr = Unix.ADDR_INET (ipaddr, port) in\n+  let socket =\n+    Lwt_unix.socket (Unix.domain_of_sockaddr sockaddr) Unix.SOCK_STREAM 0\n   in\n-  List.iter\n-    (fun (str, opt) ->\n-      print_endline (\"option \" ^ str ^ \": \" ^ string_of_bool (Lwt_sys.have opt)))\n-    options;\n-  (* https://github.com/mirage/ocaml-cohttp/issues/328#issuecomment-222583580 *)\n-  Lwt_io.set_default_buffer_size 0x10000;\n-  Lwt_main.run (main ())\n+  Lwt_unix.setsockopt socket Unix.SO_REUSEADDR true;\n+\n+  Lwt_main.run\n+  @@ ( Lwt_unix.bind socket sockaddr >|= fun () ->\n+       Lwt_unix.listen socket (Lwt_unix.somaxconn () [@ocaml.warning \"-3\"]) );\n+\n+  for i = 1 to nproc do\n+    ignore @@ Lwt_io.flush_all ();\n+    if Lwt_unix.fork () = 0 then (\n+      (* child *)\n+      Lib.Time.refresh_date ();\n+      ignore\n+      @@ Lwt_io.eprintf \"Listening on %s:%d (child %d)\\n\"\n+           (Unix.string_of_inet_addr ipaddr)\n+           port i;\n+      let config = Server.make ~callback () in\n+      ignore @@ Server.create ~mode:(`TCP (`Socket socket)) config;\n+      let forever, _ = Lwt.wait () in\n+      Lwt_main.run forever;\n+      exit 0 )\n+  done;\n+  Unix.pause ()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2OTg4NA=="}, "originalCommit": {"oid": "63aecce94483b6b7c68d8b0fbb03f72b39d97100"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMjYyNjQ2OnYy", "diffSide": "RIGHT", "path": "frameworks/OCaml/webmachine/webmachine-haproxy.dockerfile", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMjoxMzo0NlrOH3zCTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMjoxMzo0NlrOH3zCTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2OTkwMQ==", "bodyText": "why not use all cores?", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6157#discussion_r528269901", "createdAt": "2020-11-22T02:13:46Z", "author": {"login": "blandinw"}, "path": "frameworks/OCaml/webmachine/webmachine-haproxy.dockerfile", "diffHunk": "@@ -8,6 +8,8 @@ ENV TZ  :/etc/localtime\n # https://linux.die.net/man/1/ocamlrun\n # https://blog.janestreet.com/memory-allocator-showdown/\n ENV OCAMLRUNPARAM a=2,o=240\n+# This makes the program only spawn one child process to serve requests\n+ENV CORE_COUNT 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63aecce94483b6b7c68d8b0fbb03f72b39d97100"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2535, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}