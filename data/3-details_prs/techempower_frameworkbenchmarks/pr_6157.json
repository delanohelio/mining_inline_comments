{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1MjE1MzI4", "number": 6157, "title": "fix: make OCaml webmachine multiprocess", "bodyText": "revert haproxy http mode + keep alive as it incurred a 40% performance penalty\nspawned child processes is configurable with CORE_COUNT to still allow\na fair Haproxy comparison\nthis is an adaptation of @blandinw's solution in #6131", "createdAt": "2020-11-22T01:29:55Z", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6157", "merged": true, "mergeCommit": {"oid": "4c9d725ae7e6e0aa2637ba6b4a04c1042c260a46"}, "closed": true, "closedAt": "2020-11-23T15:23:24Z", "author": {"login": "rbjorklin"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABde2QSxAH2gAyNTI1MjE1MzI4OjYzYWVjY2U5NDQ4M2I2YjdjNjhkOGIwZmJiMDNmNzJiMzlkOTcxMDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfObI0AH2gAyNTI1MjE1MzI4OmE5MDc2Zjk0ZDVmMmVhOGU3OTcwOGZjNWYxNGQ0ODBiOTMxMDgxMDE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "63aecce94483b6b7c68d8b0fbb03f72b39d97100", "author": {"user": {"login": "rbjorklin", "name": "Robin Bj\u00f6rklin"}}, "url": "https://github.com/TechEmpower/FrameworkBenchmarks/commit/63aecce94483b6b7c68d8b0fbb03f72b39d97100", "committedDate": "2020-11-22T01:27:38Z", "message": "fix: make OCaml webmachine multiprocess\n\n* revert haproxy http mode + keep alive as it incurred a 40% performance penalty\n* spawned child processes is configurable with CORE_COUNT to still allow\n  a fair Haproxy comparison"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MDIzMDg5", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6157#pullrequestreview-536023089", "createdAt": "2020-11-22T02:06:27Z", "commit": {"oid": "63aecce94483b6b7c68d8b0fbb03f72b39d97100"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMjowNjoyOFrOH3zADQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQwMjoxMzo0NlrOH3zCTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2OTMyNQ==", "bodyText": "We should probably remove haproxy from the OCaml benchmarks, now that we know that sharing a socket yields better throughput", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6157#discussion_r528269325", "createdAt": "2020-11-22T02:06:28Z", "author": {"login": "blandinw"}, "path": "frameworks/OCaml/webmachine/haproxy.cfg", "diffHunk": "@@ -7,10 +7,10 @@ global\n     nbthread    2\n \n defaults\n-    mode                    http\n+    mode                    tcp", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63aecce94483b6b7c68d8b0fbb03f72b39d97100"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2OTQyOA==", "bodyText": "We probably shouldn't ignore the return value (promise) of all the async Lwt functions.\nAlternatively, you can use regular Printf when you're not serving requests yet.", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6157#discussion_r528269428", "createdAt": "2020-11-22T02:07:40Z", "author": {"login": "blandinw"}, "path": "frameworks/OCaml/webmachine/src/src/bin/tfb.ml", "diffHunk": "@@ -138,7 +139,46 @@ class queries =\n       Wm.continue (`String (Lib.Db_j.string_of_queries json)) rd\n   end\n \n+let dump_lwt () =\n+  let options =\n+    [\n+      (\"fd_passing\", `fd_passing);\n+      (\"fdatasync\", `fdatasync);\n+      (\"get_affinity\", `get_affinity);\n+      (\"get_cpu\", `get_cpu);\n+      (\"get_credentials\", `get_credentials);\n+      (\"libev\", `libev);\n+      (\"madvise\", `madvise);\n+      (\"mincore\", `mincore);\n+      (\"recv_msg\", `recv_msg);\n+      (\"send_msg\", `send_msg);\n+      (\"set_affinity\", `set_affinity);\n+      (\"wait4\", `wait4);\n+    ]\n+  in\n+  ignore @@ Lwt_io.eprintf \"Lwt:\\n\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63aecce94483b6b7c68d8b0fbb03f72b39d97100"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2OTQzOQ==", "bodyText": "why not use all cores?", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6157#discussion_r528269439", "createdAt": "2020-11-22T02:07:58Z", "author": {"login": "blandinw"}, "path": "frameworks/OCaml/webmachine/src/src/bin/tfb.ml", "diffHunk": "@@ -138,7 +139,46 @@ class queries =\n       Wm.continue (`String (Lib.Db_j.string_of_queries json)) rd\n   end\n \n+let dump_lwt () =\n+  let options =\n+    [\n+      (\"fd_passing\", `fd_passing);\n+      (\"fdatasync\", `fdatasync);\n+      (\"get_affinity\", `get_affinity);\n+      (\"get_cpu\", `get_cpu);\n+      (\"get_credentials\", `get_credentials);\n+      (\"libev\", `libev);\n+      (\"madvise\", `madvise);\n+      (\"mincore\", `mincore);\n+      (\"recv_msg\", `recv_msg);\n+      (\"send_msg\", `send_msg);\n+      (\"set_affinity\", `set_affinity);\n+      (\"wait4\", `wait4);\n+    ]\n+  in\n+  ignore @@ Lwt_io.eprintf \"Lwt:\\n\";\n+  List.iter\n+    (fun (str, opt) ->\n+      ignore @@ Lwt_io.eprintf \"  %s = %b\\n\" str (Lwt_sys.have opt))\n+    options\n+\n let main () =\n+  (* https://github.com/mirage/ocaml-cohttp/issues/328#issuecomment-222583580 *)\n+  Lwt_io.set_default_buffer_size 0x10000;\n+  let nproc =\n+    match Sys.getenv \"CORE_COUNT\" with", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63aecce94483b6b7c68d8b0fbb03f72b39d97100"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2OTQ0OQ==", "bodyText": "See above, don't discard returned promise, or use regular Printf", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6157#discussion_r528269449", "createdAt": "2020-11-22T02:08:21Z", "author": {"login": "blandinw"}, "path": "frameworks/OCaml/webmachine/src/src/bin/tfb.ml", "diffHunk": "@@ -138,7 +139,46 @@ class queries =\n       Wm.continue (`String (Lib.Db_j.string_of_queries json)) rd\n   end\n \n+let dump_lwt () =\n+  let options =\n+    [\n+      (\"fd_passing\", `fd_passing);\n+      (\"fdatasync\", `fdatasync);\n+      (\"get_affinity\", `get_affinity);\n+      (\"get_cpu\", `get_cpu);\n+      (\"get_credentials\", `get_credentials);\n+      (\"libev\", `libev);\n+      (\"madvise\", `madvise);\n+      (\"mincore\", `mincore);\n+      (\"recv_msg\", `recv_msg);\n+      (\"send_msg\", `send_msg);\n+      (\"set_affinity\", `set_affinity);\n+      (\"wait4\", `wait4);\n+    ]\n+  in\n+  ignore @@ Lwt_io.eprintf \"Lwt:\\n\";\n+  List.iter\n+    (fun (str, opt) ->\n+      ignore @@ Lwt_io.eprintf \"  %s = %b\\n\" str (Lwt_sys.have opt))\n+    options\n+\n let main () =\n+  (* https://github.com/mirage/ocaml-cohttp/issues/328#issuecomment-222583580 *)\n+  Lwt_io.set_default_buffer_size 0x10000;\n+  let nproc =\n+    match Sys.getenv \"CORE_COUNT\" with\n+    | x -> int_of_string x\n+    | exception Not_found ->\n+        Unix.open_process_in \"getconf _NPROCESSORS_ONLN\"\n+        |> input_line\n+        |> int_of_string\n+  in\n+  ignore @@ Lwt_io.eprintf \"Detected %d cores\\n\" nproc;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63aecce94483b6b7c68d8b0fbb03f72b39d97100"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2OTc4Mw==", "bodyText": "See above, don't discard returned promise, or use regular Printf", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6157#discussion_r528269783", "createdAt": "2020-11-22T02:12:05Z", "author": {"login": "blandinw"}, "path": "frameworks/OCaml/webmachine/src/src/bin/tfb.ml", "diffHunk": "@@ -138,7 +139,46 @@ class queries =\n       Wm.continue (`String (Lib.Db_j.string_of_queries json)) rd\n   end\n \n+let dump_lwt () =\n+  let options =\n+    [\n+      (\"fd_passing\", `fd_passing);\n+      (\"fdatasync\", `fdatasync);\n+      (\"get_affinity\", `get_affinity);\n+      (\"get_cpu\", `get_cpu);\n+      (\"get_credentials\", `get_credentials);\n+      (\"libev\", `libev);\n+      (\"madvise\", `madvise);\n+      (\"mincore\", `mincore);\n+      (\"recv_msg\", `recv_msg);\n+      (\"send_msg\", `send_msg);\n+      (\"set_affinity\", `set_affinity);\n+      (\"wait4\", `wait4);\n+    ]\n+  in\n+  ignore @@ Lwt_io.eprintf \"Lwt:\\n\";\n+  List.iter\n+    (fun (str, opt) ->\n+      ignore @@ Lwt_io.eprintf \"  %s = %b\\n\" str (Lwt_sys.have opt))\n+    options\n+\n let main () =\n+  (* https://github.com/mirage/ocaml-cohttp/issues/328#issuecomment-222583580 *)\n+  Lwt_io.set_default_buffer_size 0x10000;\n+  let nproc =\n+    match Sys.getenv \"CORE_COUNT\" with\n+    | x -> int_of_string x\n+    | exception Not_found ->\n+        Unix.open_process_in \"getconf _NPROCESSORS_ONLN\"\n+        |> input_line\n+        |> int_of_string\n+  in\n+  ignore @@ Lwt_io.eprintf \"Detected %d cores\\n\" nproc;\n+  let ulimit_n =\n+    Unix.open_process_in \"ulimit -n\" |> input_line |> int_of_string\n+  in\n+  ignore @@ Lwt_io.eprintf \"Detected %d max open files\\n\" ulimit_n;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63aecce94483b6b7c68d8b0fbb03f72b39d97100"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2OTgxMA==", "bodyText": "See above, don't discard returned promise, or use regular Printf", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6157#discussion_r528269810", "createdAt": "2020-11-22T02:12:13Z", "author": {"login": "blandinw"}, "path": "frameworks/OCaml/webmachine/src/src/bin/tfb.ml", "diffHunk": "@@ -160,35 +200,36 @@ let main () =\n      | Some result -> result)\n     >>= fun (status, headers, body, _) ->\n     let headers = Header.add headers \"Server\" \"webmachine\" in\n-    let headers = Header.add headers \"Date\" (Lib.Time.now ()) in\n+    let headers = Header.add headers \"Date\" Lib.Time.(!memo_date) in\n     Server.respond ~headers ~body ~status ()\n   in\n \n-  let config = Server.make ~callback () in\n-  Server.create ~mode:(`TCP (`Port port)) config >|= fun () ->\n-  Printf.eprintf \"hello_lwt: listening on 0.0.0.0:%d%!\" port\n-\n-let () =\n-  let options =\n-    [\n-      (\"fd_passing\", `fd_passing);\n-      (\"fdatasync\", `fdatasync);\n-      (\"get_affinity\", `get_affinity);\n-      (\"get_cpu\", `get_cpu);\n-      (\"get_credentials\", `get_credentials);\n-      (\"libev\", `libev);\n-      (\"madvise\", `madvise);\n-      (\"mincore\", `mincore);\n-      (\"recv_msg\", `recv_msg);\n-      (\"send_msg\", `send_msg);\n-      (\"set_affinity\", `set_affinity);\n-      (\"wait4\", `wait4);\n-    ]\n+  let ipaddr = Unix.inet_addr_any in\n+  let sockaddr = Unix.ADDR_INET (ipaddr, port) in\n+  let socket =\n+    Lwt_unix.socket (Unix.domain_of_sockaddr sockaddr) Unix.SOCK_STREAM 0\n   in\n-  List.iter\n-    (fun (str, opt) ->\n-      print_endline (\"option \" ^ str ^ \": \" ^ string_of_bool (Lwt_sys.have opt)))\n-    options;\n-  (* https://github.com/mirage/ocaml-cohttp/issues/328#issuecomment-222583580 *)\n-  Lwt_io.set_default_buffer_size 0x10000;\n-  Lwt_main.run (main ())\n+  Lwt_unix.setsockopt socket Unix.SO_REUSEADDR true;\n+\n+  Lwt_main.run\n+  @@ ( Lwt_unix.bind socket sockaddr >|= fun () ->\n+       Lwt_unix.listen socket (Lwt_unix.somaxconn () [@ocaml.warning \"-3\"]) );\n+\n+  for i = 1 to nproc do\n+    ignore @@ Lwt_io.flush_all ();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63aecce94483b6b7c68d8b0fbb03f72b39d97100"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2OTgxNg==", "bodyText": "See above, don't discard returned promise, or use regular Printf", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6157#discussion_r528269816", "createdAt": "2020-11-22T02:12:18Z", "author": {"login": "blandinw"}, "path": "frameworks/OCaml/webmachine/src/src/bin/tfb.ml", "diffHunk": "@@ -160,35 +200,36 @@ let main () =\n      | Some result -> result)\n     >>= fun (status, headers, body, _) ->\n     let headers = Header.add headers \"Server\" \"webmachine\" in\n-    let headers = Header.add headers \"Date\" (Lib.Time.now ()) in\n+    let headers = Header.add headers \"Date\" Lib.Time.(!memo_date) in\n     Server.respond ~headers ~body ~status ()\n   in\n \n-  let config = Server.make ~callback () in\n-  Server.create ~mode:(`TCP (`Port port)) config >|= fun () ->\n-  Printf.eprintf \"hello_lwt: listening on 0.0.0.0:%d%!\" port\n-\n-let () =\n-  let options =\n-    [\n-      (\"fd_passing\", `fd_passing);\n-      (\"fdatasync\", `fdatasync);\n-      (\"get_affinity\", `get_affinity);\n-      (\"get_cpu\", `get_cpu);\n-      (\"get_credentials\", `get_credentials);\n-      (\"libev\", `libev);\n-      (\"madvise\", `madvise);\n-      (\"mincore\", `mincore);\n-      (\"recv_msg\", `recv_msg);\n-      (\"send_msg\", `send_msg);\n-      (\"set_affinity\", `set_affinity);\n-      (\"wait4\", `wait4);\n-    ]\n+  let ipaddr = Unix.inet_addr_any in\n+  let sockaddr = Unix.ADDR_INET (ipaddr, port) in\n+  let socket =\n+    Lwt_unix.socket (Unix.domain_of_sockaddr sockaddr) Unix.SOCK_STREAM 0\n   in\n-  List.iter\n-    (fun (str, opt) ->\n-      print_endline (\"option \" ^ str ^ \": \" ^ string_of_bool (Lwt_sys.have opt)))\n-    options;\n-  (* https://github.com/mirage/ocaml-cohttp/issues/328#issuecomment-222583580 *)\n-  Lwt_io.set_default_buffer_size 0x10000;\n-  Lwt_main.run (main ())\n+  Lwt_unix.setsockopt socket Unix.SO_REUSEADDR true;\n+\n+  Lwt_main.run\n+  @@ ( Lwt_unix.bind socket sockaddr >|= fun () ->\n+       Lwt_unix.listen socket (Lwt_unix.somaxconn () [@ocaml.warning \"-3\"]) );\n+\n+  for i = 1 to nproc do\n+    ignore @@ Lwt_io.flush_all ();\n+    if Lwt_unix.fork () = 0 then (\n+      (* child *)\n+      Lib.Time.refresh_date ();\n+      ignore\n+      @@ Lwt_io.eprintf \"Listening on %s:%d (child %d)\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63aecce94483b6b7c68d8b0fbb03f72b39d97100"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2OTg2Nw==", "bodyText": "See above, don't discard returned promise, or use regular Printf", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6157#discussion_r528269867", "createdAt": "2020-11-22T02:13:05Z", "author": {"login": "blandinw"}, "path": "frameworks/OCaml/webmachine/src/src/bin/tfb.ml", "diffHunk": "@@ -160,35 +200,36 @@ let main () =\n      | Some result -> result)\n     >>= fun (status, headers, body, _) ->\n     let headers = Header.add headers \"Server\" \"webmachine\" in\n-    let headers = Header.add headers \"Date\" (Lib.Time.now ()) in\n+    let headers = Header.add headers \"Date\" Lib.Time.(!memo_date) in\n     Server.respond ~headers ~body ~status ()\n   in\n \n-  let config = Server.make ~callback () in\n-  Server.create ~mode:(`TCP (`Port port)) config >|= fun () ->\n-  Printf.eprintf \"hello_lwt: listening on 0.0.0.0:%d%!\" port\n-\n-let () =\n-  let options =\n-    [\n-      (\"fd_passing\", `fd_passing);\n-      (\"fdatasync\", `fdatasync);\n-      (\"get_affinity\", `get_affinity);\n-      (\"get_cpu\", `get_cpu);\n-      (\"get_credentials\", `get_credentials);\n-      (\"libev\", `libev);\n-      (\"madvise\", `madvise);\n-      (\"mincore\", `mincore);\n-      (\"recv_msg\", `recv_msg);\n-      (\"send_msg\", `send_msg);\n-      (\"set_affinity\", `set_affinity);\n-      (\"wait4\", `wait4);\n-    ]\n+  let ipaddr = Unix.inet_addr_any in\n+  let sockaddr = Unix.ADDR_INET (ipaddr, port) in\n+  let socket =\n+    Lwt_unix.socket (Unix.domain_of_sockaddr sockaddr) Unix.SOCK_STREAM 0\n   in\n-  List.iter\n-    (fun (str, opt) ->\n-      print_endline (\"option \" ^ str ^ \": \" ^ string_of_bool (Lwt_sys.have opt)))\n-    options;\n-  (* https://github.com/mirage/ocaml-cohttp/issues/328#issuecomment-222583580 *)\n-  Lwt_io.set_default_buffer_size 0x10000;\n-  Lwt_main.run (main ())\n+  Lwt_unix.setsockopt socket Unix.SO_REUSEADDR true;\n+\n+  Lwt_main.run\n+  @@ ( Lwt_unix.bind socket sockaddr >|= fun () ->\n+       Lwt_unix.listen socket (Lwt_unix.somaxconn () [@ocaml.warning \"-3\"]) );\n+\n+  for i = 1 to nproc do\n+    ignore @@ Lwt_io.flush_all ();\n+    if Lwt_unix.fork () = 0 then (\n+      (* child *)\n+      Lib.Time.refresh_date ();\n+      ignore\n+      @@ Lwt_io.eprintf \"Listening on %s:%d (child %d)\\n\"\n+           (Unix.string_of_inet_addr ipaddr)\n+           port i;\n+      let config = Server.make ~callback () in\n+      ignore @@ Server.create ~mode:(`TCP (`Socket socket)) config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63aecce94483b6b7c68d8b0fbb03f72b39d97100"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2OTg4NA==", "bodyText": "You need to loop here, because any signal is gonna wake up the process", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6157#discussion_r528269884", "createdAt": "2020-11-22T02:13:27Z", "author": {"login": "blandinw"}, "path": "frameworks/OCaml/webmachine/src/src/bin/tfb.ml", "diffHunk": "@@ -160,35 +200,36 @@ let main () =\n      | Some result -> result)\n     >>= fun (status, headers, body, _) ->\n     let headers = Header.add headers \"Server\" \"webmachine\" in\n-    let headers = Header.add headers \"Date\" (Lib.Time.now ()) in\n+    let headers = Header.add headers \"Date\" Lib.Time.(!memo_date) in\n     Server.respond ~headers ~body ~status ()\n   in\n \n-  let config = Server.make ~callback () in\n-  Server.create ~mode:(`TCP (`Port port)) config >|= fun () ->\n-  Printf.eprintf \"hello_lwt: listening on 0.0.0.0:%d%!\" port\n-\n-let () =\n-  let options =\n-    [\n-      (\"fd_passing\", `fd_passing);\n-      (\"fdatasync\", `fdatasync);\n-      (\"get_affinity\", `get_affinity);\n-      (\"get_cpu\", `get_cpu);\n-      (\"get_credentials\", `get_credentials);\n-      (\"libev\", `libev);\n-      (\"madvise\", `madvise);\n-      (\"mincore\", `mincore);\n-      (\"recv_msg\", `recv_msg);\n-      (\"send_msg\", `send_msg);\n-      (\"set_affinity\", `set_affinity);\n-      (\"wait4\", `wait4);\n-    ]\n+  let ipaddr = Unix.inet_addr_any in\n+  let sockaddr = Unix.ADDR_INET (ipaddr, port) in\n+  let socket =\n+    Lwt_unix.socket (Unix.domain_of_sockaddr sockaddr) Unix.SOCK_STREAM 0\n   in\n-  List.iter\n-    (fun (str, opt) ->\n-      print_endline (\"option \" ^ str ^ \": \" ^ string_of_bool (Lwt_sys.have opt)))\n-    options;\n-  (* https://github.com/mirage/ocaml-cohttp/issues/328#issuecomment-222583580 *)\n-  Lwt_io.set_default_buffer_size 0x10000;\n-  Lwt_main.run (main ())\n+  Lwt_unix.setsockopt socket Unix.SO_REUSEADDR true;\n+\n+  Lwt_main.run\n+  @@ ( Lwt_unix.bind socket sockaddr >|= fun () ->\n+       Lwt_unix.listen socket (Lwt_unix.somaxconn () [@ocaml.warning \"-3\"]) );\n+\n+  for i = 1 to nproc do\n+    ignore @@ Lwt_io.flush_all ();\n+    if Lwt_unix.fork () = 0 then (\n+      (* child *)\n+      Lib.Time.refresh_date ();\n+      ignore\n+      @@ Lwt_io.eprintf \"Listening on %s:%d (child %d)\\n\"\n+           (Unix.string_of_inet_addr ipaddr)\n+           port i;\n+      let config = Server.make ~callback () in\n+      ignore @@ Server.create ~mode:(`TCP (`Socket socket)) config;\n+      let forever, _ = Lwt.wait () in\n+      Lwt_main.run forever;\n+      exit 0 )\n+  done;\n+  Unix.pause ()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63aecce94483b6b7c68d8b0fbb03f72b39d97100"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI2OTkwMQ==", "bodyText": "why not use all cores?", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6157#discussion_r528269901", "createdAt": "2020-11-22T02:13:46Z", "author": {"login": "blandinw"}, "path": "frameworks/OCaml/webmachine/webmachine-haproxy.dockerfile", "diffHunk": "@@ -8,6 +8,8 @@ ENV TZ  :/etc/localtime\n # https://linux.die.net/man/1/ocamlrun\n # https://blog.janestreet.com/memory-allocator-showdown/\n ENV OCAMLRUNPARAM a=2,o=240\n+# This makes the program only spawn one child process to serve requests\n+ENV CORE_COUNT 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63aecce94483b6b7c68d8b0fbb03f72b39d97100"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53ea7ffb5003c0032b2b56e3a1ef251e9c6c4610", "author": {"user": {"login": "rbjorklin", "name": "Robin Bj\u00f6rklin"}}, "url": "https://github.com/TechEmpower/FrameworkBenchmarks/commit/53ea7ffb5003c0032b2b56e3a1ef251e9c6c4610", "committedDate": "2020-11-23T05:36:06Z", "message": "chore: address review comments for OCaml webmachine"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9076f94d5f2ea8e79708fc5f14d480b93108101", "author": {"user": {"login": "rbjorklin", "name": "Robin Bj\u00f6rklin"}}, "url": "https://github.com/TechEmpower/FrameworkBenchmarks/commit/a9076f94d5f2ea8e79708fc5f14d480b93108101", "committedDate": "2020-11-23T05:37:12Z", "message": "fix(OCaml): use sparse ocamlformat style for better diff-ability"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3920, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}