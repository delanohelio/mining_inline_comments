{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MjE3MDAy", "number": 5973, "title": "Added swoole-postgres", "bodyText": "Added swoole-postgres\nUpdated the PHP version to be 7.4\nUpdated Swoole postgres version to be 4.5.1", "createdAt": "2020-09-01T17:04:28Z", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5973", "merged": true, "mergeCommit": {"oid": "136c9e27474625ea24705744bfab976678ac0732"}, "closed": true, "closedAt": "2020-09-04T14:15:32Z", "author": {"login": "doubaokun"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEqdPYgH2gAyNDc3MjE3MDAyOjNiMmQ0ZjYxZGZhNDU0YmFjNzQ4MDcyOTRkMmZjM2RlNzAwOGFkOTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFg6eEgFqTQ4MjQ2MDE3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3b2d4f61dfa454bac74807294d2fc3de7008ad92", "author": {"user": {"login": "doubaokun", "name": "Bruce Dou"}}, "url": "https://github.com/TechEmpower/FrameworkBenchmarks/commit/3b2d4f61dfa454bac74807294d2fc3de7008ad92", "committedDate": "2020-09-01T17:00:53Z", "message": "Added swoole-postgres"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNTg2MzY5", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5973#pullrequestreview-481586369", "createdAt": "2020-09-03T07:55:30Z", "commit": {"oid": "3b2d4f61dfa454bac74807294d2fc3de7008ad92"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzo1NTozMFrOHManlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzo1NTozMFrOHManlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc4MTA3OA==", "bodyText": "Delete the tests not using db in postgres variant.", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5973#discussion_r482781078", "createdAt": "2020-09-03T07:55:30Z", "author": {"login": "joanhey"}, "path": "frameworks/PHP/swoole/benchmark_config.json", "diffHunk": "@@ -24,6 +24,29 @@\n       \"notes\": \"\",\n       \"versus\": \"php\"\n     },\n+    \"postgres\": {\n+      \"json_url\": \"/json\",\n+      \"plaintext_url\": \"/plaintext\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b2d4f61dfa454bac74807294d2fc3de7008ad92"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNjE2NDYx", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5973#pullrequestreview-481616461", "createdAt": "2020-09-03T08:33:33Z", "commit": {"oid": "3b2d4f61dfa454bac74807294d2fc3de7008ad92"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwODozMzozM1rOHMcB8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwODozMzozM1rOHMcB8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgwNDIxMA==", "bodyText": "Why not add in swoole-server.php for both mysql and postgres?\nSo will be only one codebase to maintain.", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5973#discussion_r482804210", "createdAt": "2020-09-03T08:33:33Z", "author": {"login": "joanhey"}, "path": "frameworks/PHP/swoole/swoole-server-postgres.php", "diffHunk": "@@ -0,0 +1,247 @@\n+<?php\n+\n+use Swoole\\Http\\Request;\n+use Swoole\\Http\\Response;\n+\n+$server = new swoole_http_server('0.0.0.0', 8080, SWOOLE_BASE);\n+$server->set([\n+    'worker_num' => swoole_cpu_num() * 2,\n+    'log_file' => '/dev/null',\n+    'log_level' => 5,\n+]);\n+\n+$pool = new \\DatabasePool('postgres');\n+\n+/**\n+ * On start of the PHP worker. One worker per server process is started.\n+ */\n+$server->on('workerStart', function ($srv) use ($pool) {\n+    $pool->init(\\intdiv(512, $srv->setting['worker_num']));\n+});\n+\n+/**\n+ * The DB test\n+ *\n+ * @param string $database_type\n+ * @param int $queries\n+ *\n+ * @return string\n+ */\n+$db = function (int $queries = 0) use ($pool): string {\n+    $db = $pool->get();\n+    // Read number of queries to run from URL parameter\n+    $query_count = 1;\n+    if ($queries > 1) {\n+        $query_count = $queries > 500 ? 500 : $queries;\n+    }\n+\n+    // Create an array with the response string.\n+    $arr = [];\n+    // Define query\n+    $db->prepare('select_query', 'SELECT id, randomnumber FROM World WHERE id = $1');\n+\n+    // For each query, store the result set values in the response array\n+    while ($query_count--) {\n+        $id = mt_rand(1, 10000);\n+        $res = $db->execute('select_query', [$id]);\n+        $ret = $db->fetchAll($res);\n+        // Store result in array.\n+        $arr[] = ['id' => $id, 'randomnumber' => $ret[0]['randomnumber']];\n+    }\n+\n+    // Use the PHP standard JSON encoder.\n+    // http://www.php.net/manual/en/function.json-encode.php\n+    if ($queries === -1) {\n+        $arr = $arr[0];\n+    }\n+\n+    $pool->put($db);\n+\n+    return \\json_encode($arr, JSON_NUMERIC_CHECK);\n+};\n+\n+/**\n+ * The Fortunes test\n+ *\n+ * @param string $database_type\n+ *\n+ * @return string\n+ */\n+$fortunes = function () use ($pool): string {\n+    $db = $pool->get();\n+\n+    $fortune = [];\n+    $db->prepare('fortunes', 'SELECT id, message FROM Fortune');\n+    $res = $db->execute('fortunes', []);\n+    $arr = $db->fetchAll($res);\n+\n+    foreach ($arr as $row) {\n+        $fortune[$row['id']] = $row['message'];\n+    }\n+    $fortune[0] = 'Additional fortune added at request time.';\n+    \\asort($fortune);\n+\n+    $html = '';\n+    foreach ($fortune as $id => $message) {\n+        $message = \\htmlspecialchars($message, ENT_QUOTES, 'UTF-8');\n+        $html .= \"<tr><td>{$id}</td><td>{$message}</td></tr>\";\n+    }\n+\n+    $pool->put($db);\n+\n+    return '<!DOCTYPE html><html><head><title>Fortunes</title></head><body><table><tr><th>id</th><th>message</th></tr>'\n+            .$html.\n+            '</table></body></html>';\n+};\n+\n+/**\n+ * The Updates test\n+ *\n+ * @param string $database_type\n+ * @param int $queries\n+ *\n+ * @return string\n+ */\n+$updates = function (int $queries = 0) use ($pool): string {\n+    $db = $pool->get();\n+\n+    $query_count = 1;\n+    if ($queries > 1) {\n+        $query_count = $queries > 500 ? 500 : $queries;\n+    }\n+\n+    $arr = [];\n+    $db->prepare('updates_test_select', 'SELECT randomnumber FROM World WHERE id = $1');\n+    $db->prepare('updates_test_update', 'UPDATE World SET randomnumber = $1 WHERE id = $2');\n+\n+    while ($query_count--) {\n+        $id = mt_rand(1, 10000);\n+        $randomNumber = mt_rand(1, 10000);\n+        $res = $db->execute('updates_test_select', [$id]);\n+        $ret = $db->fetchAll($res);\n+        // Store result in array.\n+        $world = ['id' => $id, 'randomnumber' => $ret[0]['randomnumber']];\n+        $world['randomnumber'] = $randomNumber;\n+        $res = $db->execute('updates_test_update', [$randomNumber, $id]);\n+        $arr[] = $world;\n+    }\n+\n+    $pool->put($db);\n+\n+    return \\json_encode($arr, JSON_NUMERIC_CHECK);\n+};\n+\n+\n+/**\n+ * On every request to the (web)server, execute the following code\n+ */\n+$server->on('request', function (Request $req, Response $res) use ($db, $fortunes, $updates) {\n+    try {\n+        switch ($req->server['request_uri']) {\n+            case '/json':\n+                $res->header('Content-Type', 'application/json');\n+                $res->end(json_encode(['message' => 'Hello, World!']));\n+                break;\n+\n+            case '/plaintext':\n+                $res->header('Content-Type', 'text/plain; charset=utf-8');\n+                $res->end('Hello, World!');\n+                break;\n+\n+            case '/db':\n+                $res->header('Content-Type', 'application/json');\n+\n+                if (isset($req->get['queries'])) {\n+                    $res->end($db((int)$req->get['queries']));\n+                } else {\n+                    $res->end($db(-1));\n+                }\n+                break;\n+\n+            case '/fortunes':\n+                $res->header('Content-Type', 'text/html; charset=utf-8');\n+                $res->end($fortunes());\n+                break;\n+\n+            case '/updates':\n+                $res->header('Content-Type', 'application/json');\n+\n+                if (isset($req->get['queries'])) {\n+                    $res->end($updates((int)$req->get['queries']));\n+                } else {\n+                    $res->end($updates(-1));\n+                }\n+                break;\n+\n+            default:\n+                $res->status(404);\n+                $res->end('Error 404');\n+\n+        }\n+\n+    } catch (\\Throwable $e) {\n+        $res->status(500);\n+        $res->end('Error 500');\n+    }\n+});\n+\n+$server->start();\n+\n+/**\n+ * Class DatabasePool\n+ *\n+ * Deal with the fact that Swoole 2.1.3 has no build in database pooling\n+ */\n+class DatabasePool\n+{\n+    private $server = [\n+        'host' => '',\n+        'user' => 'benchmarkdbuser',\n+        'password' => 'benchmarkdbpass',\n+        'database' => 'hello_world'\n+    ];\n+\n+    private $pool;\n+    \n+    private $type;\n+\n+    public function __construct($type)\n+    {\n+        $this->server['host'] = \\gethostbyname('tfb-database');\n+        $this->type = $type;\n+    }\n+    \n+    public function init($capacity)\n+    {\n+        $this->pool=new \\Swoole\\Coroutine\\Channel($capacity);\n+        while($capacity>0){\n+            $db=$this->createDbInstance();\n+            if($db!==false){\n+                $this->pool->push($db);\n+                $capacity--;\n+            }\n+        }\n+    }\n+\n+    private function createDbInstance()\n+    {\n+        if ($this->type === 'postgres') {\n+            $db = new Swoole\\Coroutine\\PostgreSql;\n+            if ($db->connect(\"host={$this->server['host']} port=5432 dbname={$this->server['database']} user={$this->server['user']} password={$this->server['password']}\")){\n+                return $db;\n+            }\n+        }\n+        \n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b2d4f61dfa454bac74807294d2fc3de7008ad92"}, "originalPosition": 235}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0a5918797afb3a17d0508cf5259736e3b44f16b", "author": {"user": {"login": "doubaokun", "name": "Bruce Dou"}}, "url": "https://github.com/TechEmpower/FrameworkBenchmarks/commit/e0a5918797afb3a17d0508cf5259736e3b44f16b", "committedDate": "2020-09-03T15:36:55Z", "message": "Remove none db test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85d4cd0820d205d0188717b358c4b302f36f9a62", "author": {"user": {"login": "doubaokun", "name": "Bruce Dou"}}, "url": "https://github.com/TechEmpower/FrameworkBenchmarks/commit/85d4cd0820d205d0188717b358c4b302f36f9a62", "committedDate": "2020-09-03T16:38:37Z", "message": "Merge pg and mysql."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNDYwMTc3", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5973#pullrequestreview-482460177", "createdAt": "2020-09-04T08:27:41Z", "commit": {"oid": "85d4cd0820d205d0188717b358c4b302f36f9a62"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3855, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}