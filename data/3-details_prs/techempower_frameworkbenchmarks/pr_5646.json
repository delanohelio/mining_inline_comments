{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4NzY4NTEx", "number": 5646, "title": "Add libsniper HTTP client/server library", "bodyText": "libsniper is a small, very fast C++ library for writing highload HTTP services (f.e. RTB services).\nI wrote only plaintext bench. The main goal of the library is very fast processing of incoming requests.", "createdAt": "2020-04-24T21:15:14Z", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5646", "merged": true, "mergeCommit": {"oid": "7555405d284967c60c142157727cf6e326f2e2f6"}, "closed": true, "closedAt": "2020-04-28T15:20:23Z", "author": {"login": "OlegRomanenko"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABca4FnkAH2gAyNDA4NzY4NTExOjVlZjI2NDUzZjA5ZWQyZWJmNmExOGVhYzFmMTc1OGIzODk4MmJmMDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcb99b2gH2gAyNDA4NzY4NTExOmFiNjNlNjA5Njg4MWMyMmU5ZjY2ZDAwMjQ3NjdjMGRkYjk4MzQwOTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5ef26453f09ed2ebf6a18eac1f1758b38982bf05", "author": {"user": {"login": "OlegRomanenko", "name": "Oleg Romanenko"}}, "url": "https://github.com/TechEmpower/FrameworkBenchmarks/commit/5ef26453f09ed2ebf6a18eac1f1758b38982bf05", "committedDate": "2020-04-24T21:08:56Z", "message": "libsniper is a small, very fast C++ library for writing highload HTTP services (f.e. RTB services)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMzExNzk5", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5646#pullrequestreview-401311799", "createdAt": "2020-04-27T20:44:44Z", "commit": {"oid": "5ef26453f09ed2ebf6a18eac1f1758b38982bf05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDo0NDo0NVrOGM24Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDo0NDo0NVrOGM24Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEzNTIwNw==", "bodyText": "Thanks for your contribution @OlegRomanenko\nI don't see any type of routing here. Please see rule 6 in the General Requirements\n\nSome form of request routing is required, even if only a single test type (e.g., Plaintext) is implemented. In most cases, the framework's canonical router or a mainstream router library will be used. In some cases, it is considered normal and sufficiently production-grade to use hand-crafted minimalist routing using control structures such as if/else branching. This is acceptable where it is considered canonical for the framework.", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5646#discussion_r416135207", "createdAt": "2020-04-27T20:44:45Z", "author": {"login": "nbrady-techempower"}, "path": "frameworks/C++/libsniper/libsniper_bench/src/main.cpp", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright (c) 2020, RTBtech, MediaSniper, Oleg Romanenko (oleg@romanenko.ro)\n+ */\n+\n+#include <sniper/event/Loop.h>\n+#include <sniper/event/Timer.h>\n+#include <sniper/http/Server.h>\n+#include <sniper/log/log.h>\n+#include <sniper/std/check.h>\n+#include <sniper/std/vector.h>\n+#include <sniper/threads/Stop.h>\n+#include <thread>\n+\n+using namespace sniper;\n+\n+class Server\n+{\n+public:\n+    explicit Server()\n+    {\n+        for (unsigned i = 0; i < std::thread::hardware_concurrency(); i++)\n+            _workers.emplace_back(&Server::worker_noexcept, this, i);\n+    }\n+\n+    ~Server()\n+    {\n+        for (auto& w : _workers)\n+            if (w.joinable())\n+                w.join();\n+    }\n+\n+private:\n+    void worker_noexcept(unsigned int thread_num) noexcept\n+    {\n+        try {\n+            worker(thread_num);\n+        }\n+        catch (std::exception& e) {\n+            log_err(e.what());\n+        }\n+        catch (...) {\n+            log_err(\"[Server] non std::exception occured\");\n+        }\n+    }\n+\n+    static string gen_date()\n+    {\n+        return fmt::format(\"Date: {:%a, %d %b %Y %H:%M:%S} GMT\\r\\n\", fmt::gmtime(time(nullptr)));\n+    }\n+\n+    void worker(unsigned thread_num)\n+    {\n+        auto loop = event::make_loop();\n+        check(loop, \"[Server] cannot init event loop\");\n+\n+        http::server::Config config;\n+        config.max_conns = 100000;\n+        config.connection.keep_alive_timeout = 10min;\n+        config.connection.request_read_timeout = 10s;\n+\n+        http::Server http_server(loop, config);\n+        check(http_server.bind(\"\", 8090), \"[Server] cannot bind to localhost:8090\");\n+\n+        string date = gen_date();\n+        http_server.set_cb_request([&, this](const auto& conn, const auto& req, const auto& resp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ef26453f09ed2ebf6a18eac1f1758b38982bf05"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab63e6096881c22e9f66d0024767c0ddb9834092", "author": {"user": {"login": "OlegRomanenko", "name": "Oleg Romanenko"}}, "url": "https://github.com/TechEmpower/FrameworkBenchmarks/commit/ab63e6096881c22e9f66d0024767c0ddb9834092", "committedDate": "2020-04-28T06:33:21Z", "message": "Add request routing"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3892, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}