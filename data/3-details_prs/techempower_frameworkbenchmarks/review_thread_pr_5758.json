{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyODU2NTU1", "number": 5758, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNTo0Mjo0OVrOEEvdBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNTo0Mjo0OVrOEEvdBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDA3MjM5OnYy", "diffSide": "RIGHT", "path": "frameworks/Rust/ntex/src/db.rs", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNTo0Mjo0OVrOGijYMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzoxMDo1NFrOGim1HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg4NDQwMw==", "bodyText": "The changes here and setting the body length capacity violate rule 5. in the fortunes test:\n\nThe list data structure must be a dynamic-size or equivalent and should not be dimensioned using foreknowledge of the row-count of the database table.", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5758#discussion_r438884403", "createdAt": "2020-06-11T15:42:49Z", "author": {"login": "nbrady-techempower"}, "path": "frameworks/Rust/ntex/src/db.rs", "diffHunk": "@@ -161,31 +175,49 @@ impl PgConnection {\n         }\n     }\n \n-    pub fn tell_fortune(&self) -> impl Future<Output = Result<Vec<Fortune>, io::Error>> {\n-        let mut items = vec![Fortune {\n-            id: 0,\n-            message: \"Additional fortune added at request time.\".to_string(),\n-        }];\n-\n+    pub fn tell_fortune(&self) -> impl Future<Output = Result<Bytes, io::Error>> {\n         let fut = self.cl.query_raw(&self.fortune, &[]);\n \n         async move {\n             let mut stream = fut\n                 .await\n                 .map_err(|e| io::Error::new(io::ErrorKind::Other, format!(\"{:?}\", e)))?;\n \n+            let mut rows = SmallVec::<[_; 32]>::new();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca4955468764ba3c949e6f0af5a592dfd9ec395a"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg4OTE1Mg==", "bodyText": "SmallVec is dynamic, it can contain any number of elements", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5758#discussion_r438889152", "createdAt": "2020-06-11T15:48:27Z", "author": {"login": "fafhrd91"}, "path": "frameworks/Rust/ntex/src/db.rs", "diffHunk": "@@ -161,31 +175,49 @@ impl PgConnection {\n         }\n     }\n \n-    pub fn tell_fortune(&self) -> impl Future<Output = Result<Vec<Fortune>, io::Error>> {\n-        let mut items = vec![Fortune {\n-            id: 0,\n-            message: \"Additional fortune added at request time.\".to_string(),\n-        }];\n-\n+    pub fn tell_fortune(&self) -> impl Future<Output = Result<Bytes, io::Error>> {\n         let fut = self.cl.query_raw(&self.fortune, &[]);\n \n         async move {\n             let mut stream = fut\n                 .await\n                 .map_err(|e| io::Error::new(io::ErrorKind::Other, format!(\"{:?}\", e)))?;\n \n+            let mut rows = SmallVec::<[_; 32]>::new();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg4NDQwMw=="}, "originalCommit": {"oid": "ca4955468764ba3c949e6f0af5a592dfd9ec395a"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg5ODA4NA==", "bodyText": "I don't see any documentation on the TemplateFixed macro, but it makes me think that using that with these initial capacities is optimizing for a known size of memory allocation. Can you help me understand what TemplateFixed does? Also,\nlet mut body = BytesMut::with_capacity(2048);\n            unsafe {\n                // Maybe uninit\n                body.set_len(2048);", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5758#discussion_r438898084", "createdAt": "2020-06-11T15:59:08Z", "author": {"login": "nbrady-techempower"}, "path": "frameworks/Rust/ntex/src/db.rs", "diffHunk": "@@ -161,31 +175,49 @@ impl PgConnection {\n         }\n     }\n \n-    pub fn tell_fortune(&self) -> impl Future<Output = Result<Vec<Fortune>, io::Error>> {\n-        let mut items = vec![Fortune {\n-            id: 0,\n-            message: \"Additional fortune added at request time.\".to_string(),\n-        }];\n-\n+    pub fn tell_fortune(&self) -> impl Future<Output = Result<Bytes, io::Error>> {\n         let fut = self.cl.query_raw(&self.fortune, &[]);\n \n         async move {\n             let mut stream = fut\n                 .await\n                 .map_err(|e| io::Error::new(io::ErrorKind::Other, format!(\"{:?}\", e)))?;\n \n+            let mut rows = SmallVec::<[_; 32]>::new();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg4NDQwMw=="}, "originalCommit": {"oid": "ca4955468764ba3c949e6f0af5a592dfd9ec395a"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwMDAzNA==", "bodyText": "this is just uninitialized buffer, yarte engine write to that memory directly.\nhttps://docs.rs/yarte/0.9.9/yarte/derive.TemplateFixed.html", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5758#discussion_r438900034", "createdAt": "2020-06-11T16:02:08Z", "author": {"login": "fafhrd91"}, "path": "frameworks/Rust/ntex/src/db.rs", "diffHunk": "@@ -161,31 +175,49 @@ impl PgConnection {\n         }\n     }\n \n-    pub fn tell_fortune(&self) -> impl Future<Output = Result<Vec<Fortune>, io::Error>> {\n-        let mut items = vec![Fortune {\n-            id: 0,\n-            message: \"Additional fortune added at request time.\".to_string(),\n-        }];\n-\n+    pub fn tell_fortune(&self) -> impl Future<Output = Result<Bytes, io::Error>> {\n         let fut = self.cl.query_raw(&self.fortune, &[]);\n \n         async move {\n             let mut stream = fut\n                 .await\n                 .map_err(|e| io::Error::new(io::ErrorKind::Other, format!(\"{:?}\", e)))?;\n \n+            let mut rows = SmallVec::<[_; 32]>::new();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg4NDQwMw=="}, "originalCommit": {"oid": "ca4955468764ba3c949e6f0af5a592dfd9ec395a"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkzMDgxMQ==", "bodyText": "If the fortune body is more than 2048 bytes:\nntex-db: thread 'ntex-rt:worker:9' panicked at 'called `Option::unwrap()` on a `None` value', src/db.rs:211:28\n\nThis can be replicated by adding a couple more rows to the Fortunes table.", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5758#discussion_r438930811", "createdAt": "2020-06-11T16:52:39Z", "author": {"login": "nbrady-techempower"}, "path": "frameworks/Rust/ntex/src/db.rs", "diffHunk": "@@ -161,31 +175,49 @@ impl PgConnection {\n         }\n     }\n \n-    pub fn tell_fortune(&self) -> impl Future<Output = Result<Vec<Fortune>, io::Error>> {\n-        let mut items = vec![Fortune {\n-            id: 0,\n-            message: \"Additional fortune added at request time.\".to_string(),\n-        }];\n-\n+    pub fn tell_fortune(&self) -> impl Future<Output = Result<Bytes, io::Error>> {\n         let fut = self.cl.query_raw(&self.fortune, &[]);\n \n         async move {\n             let mut stream = fut\n                 .await\n                 .map_err(|e| io::Error::new(io::ErrorKind::Other, format!(\"{:?}\", e)))?;\n \n+            let mut rows = SmallVec::<[_; 32]>::new();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg4NDQwMw=="}, "originalCommit": {"oid": "ca4955468764ba3c949e6f0af5a592dfd9ec395a"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkzODc0Ng==", "bodyText": "fair point. it is fixed.", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5758#discussion_r438938746", "createdAt": "2020-06-11T17:06:43Z", "author": {"login": "fafhrd91"}, "path": "frameworks/Rust/ntex/src/db.rs", "diffHunk": "@@ -161,31 +175,49 @@ impl PgConnection {\n         }\n     }\n \n-    pub fn tell_fortune(&self) -> impl Future<Output = Result<Vec<Fortune>, io::Error>> {\n-        let mut items = vec![Fortune {\n-            id: 0,\n-            message: \"Additional fortune added at request time.\".to_string(),\n-        }];\n-\n+    pub fn tell_fortune(&self) -> impl Future<Output = Result<Bytes, io::Error>> {\n         let fut = self.cl.query_raw(&self.fortune, &[]);\n \n         async move {\n             let mut stream = fut\n                 .await\n                 .map_err(|e| io::Error::new(io::ErrorKind::Other, format!(\"{:?}\", e)))?;\n \n+            let mut rows = SmallVec::<[_; 32]>::new();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg4NDQwMw=="}, "originalCommit": {"oid": "ca4955468764ba3c949e6f0af5a592dfd9ec395a"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk0MDk1Nw==", "bodyText": "@fafhrd91 thanks!", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5758#discussion_r438940957", "createdAt": "2020-06-11T17:10:54Z", "author": {"login": "nbrady-techempower"}, "path": "frameworks/Rust/ntex/src/db.rs", "diffHunk": "@@ -161,31 +175,49 @@ impl PgConnection {\n         }\n     }\n \n-    pub fn tell_fortune(&self) -> impl Future<Output = Result<Vec<Fortune>, io::Error>> {\n-        let mut items = vec![Fortune {\n-            id: 0,\n-            message: \"Additional fortune added at request time.\".to_string(),\n-        }];\n-\n+    pub fn tell_fortune(&self) -> impl Future<Output = Result<Bytes, io::Error>> {\n         let fut = self.cl.query_raw(&self.fortune, &[]);\n \n         async move {\n             let mut stream = fut\n                 .await\n                 .map_err(|e| io::Error::new(io::ErrorKind::Other, format!(\"{:?}\", e)))?;\n \n+            let mut rows = SmallVec::<[_; 32]>::new();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg4NDQwMw=="}, "originalCommit": {"oid": "ca4955468764ba3c949e6f0af5a592dfd9ec395a"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2662, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}