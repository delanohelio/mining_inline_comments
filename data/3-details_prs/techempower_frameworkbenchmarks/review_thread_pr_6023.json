{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwMTY0NTU1", "number": 6023, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTo1MzoxOFrOElu4ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTo1MzoxOFrOElu4ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDAwODc0OnYy", "diffSide": "RIGHT", "path": "frameworks/C++/lithium/lithium.cc", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTo1MzoxOFrOHVXp9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODoxMTozMFrOHVcxBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2OTcxNw==", "bodyText": "It's too early on Monday morning for me to figure out exactly what this cache is doing or why it's needed but if it's caching anything so that subsequent serializations require less work, it's a violation of the last rule in the JSON requirements.\n\nThe serialization to JSON must not be cached\n\nhttps://github.com/TechEmpower/FrameworkBenchmarks/wiki/Project-Information-Framework-Tests-Overview#json-serialization", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6023#discussion_r492169717", "createdAt": "2020-09-21T15:53:18Z", "author": {"login": "nbrady-techempower"}, "path": "frameworks/C++/lithium/lithium.cc", "diffHunk": "@@ -54,7 +54,31 @@ void siege(int port) {\n }\n #endif\n \n-lru_cache<int, decltype(mmm(s::id = int(), s::randomNumber = int()))> world_cache(10000);\n+struct json_cache {\n+\n+  template <typename T>\n+  void insert(T o) { \n+    if (0 == buffer.size())\n+      positions.push_back(buffer.size());\n+    buffer.append(json_encode(o)); \n+    positions.push_back(buffer.size());\n+  }\n+  std::string get_json_array(const std::vector<int>& ids) {\n+    std::string json = \"[\";\n+    json.append(buffer, positions[ids[0]], positions[ids[0]+1] - positions[ids[0]]);\n+    for (int i = 1; i < ids.size(); i++) {\n+      json.append(1, ',');\n+      json.append(buffer, positions[ids[i]], positions[ids[i]+1] - positions[ids[i]]);\n+    }\n+    json.append(1, ']');\n+    return json;\n+  }\n+\n+  std::string buffer;\n+  std::vector<int> positions;\n+};\n+\n+json_cache world_cache;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69887f91cd2b88a658ec332fc2ba7d860a703243"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1MDk1Ng==", "bodyText": "Sorry @nbrady-techempower  I forgot about this rule. I removed the json caching in my last commit.", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6023#discussion_r492250956", "createdAt": "2020-09-21T18:06:59Z", "author": {"login": "matt-42"}, "path": "frameworks/C++/lithium/lithium.cc", "diffHunk": "@@ -54,7 +54,31 @@ void siege(int port) {\n }\n #endif\n \n-lru_cache<int, decltype(mmm(s::id = int(), s::randomNumber = int()))> world_cache(10000);\n+struct json_cache {\n+\n+  template <typename T>\n+  void insert(T o) { \n+    if (0 == buffer.size())\n+      positions.push_back(buffer.size());\n+    buffer.append(json_encode(o)); \n+    positions.push_back(buffer.size());\n+  }\n+  std::string get_json_array(const std::vector<int>& ids) {\n+    std::string json = \"[\";\n+    json.append(buffer, positions[ids[0]], positions[ids[0]+1] - positions[ids[0]]);\n+    for (int i = 1; i < ids.size(); i++) {\n+      json.append(1, ',');\n+      json.append(buffer, positions[ids[i]], positions[ids[i]+1] - positions[ids[i]]);\n+    }\n+    json.append(1, ']');\n+    return json;\n+  }\n+\n+  std::string buffer;\n+  std::vector<int> positions;\n+};\n+\n+json_cache world_cache;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2OTcxNw=="}, "originalCommit": {"oid": "69887f91cd2b88a658ec332fc2ba7d860a703243"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1MzQ0NQ==", "bodyText": "Thanks! Will merge when it passes travis!", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6023#discussion_r492253445", "createdAt": "2020-09-21T18:11:30Z", "author": {"login": "nbrady-techempower"}, "path": "frameworks/C++/lithium/lithium.cc", "diffHunk": "@@ -54,7 +54,31 @@ void siege(int port) {\n }\n #endif\n \n-lru_cache<int, decltype(mmm(s::id = int(), s::randomNumber = int()))> world_cache(10000);\n+struct json_cache {\n+\n+  template <typename T>\n+  void insert(T o) { \n+    if (0 == buffer.size())\n+      positions.push_back(buffer.size());\n+    buffer.append(json_encode(o)); \n+    positions.push_back(buffer.size());\n+  }\n+  std::string get_json_array(const std::vector<int>& ids) {\n+    std::string json = \"[\";\n+    json.append(buffer, positions[ids[0]], positions[ids[0]+1] - positions[ids[0]]);\n+    for (int i = 1; i < ids.size(); i++) {\n+      json.append(1, ',');\n+      json.append(buffer, positions[ids[i]], positions[ids[i]+1] - positions[ids[i]]);\n+    }\n+    json.append(1, ']');\n+    return json;\n+  }\n+\n+  std::string buffer;\n+  std::vector<int> positions;\n+};\n+\n+json_cache world_cache;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2OTcxNw=="}, "originalCommit": {"oid": "69887f91cd2b88a658ec332fc2ba7d860a703243"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2560, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}