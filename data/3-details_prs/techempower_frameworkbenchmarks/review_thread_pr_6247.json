{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2Mjc2NDQw", "number": 6247, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwOToyMzozOFrOFJuXZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwOToyMzozOFrOFJuXZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzQxMTU3OnYy", "diffSide": "RIGHT", "path": "frameworks/Python/aiohttp/app/main.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwOToyMzozOFrOIMK3yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMjo1MzoxMlrOIMOoZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYzMTk0Nw==", "bodyText": "I thought async Jinja was very slow. Is this really a performance improvement?", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6247#discussion_r549631947", "createdAt": "2020-12-29T09:23:38Z", "author": {"login": "samuelcolvin"}, "path": "frameworks/Python/aiohttp/app/main.py", "diffHunk": "@@ -80,14 +80,13 @@ def setup_routes(app):\n         app.router.add_get('/updates/{queries:.*}', updates_raw)\n \n \n-def create_app(loop):\n-    app = web.Application(loop=loop)\n+def create_app():\n+    app = web.Application()\n \n     jinja2_loader = jinja2.FileSystemLoader(str(THIS_DIR / 'templates'))\n-    aiohttp_jinja2.setup(app, loader=jinja2_loader)\n+    aiohttp_jinja2.setup(app, loader=jinja2_loader, enable_async=True)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a59ef41a5fa064d2c3357199d6f255bb7a552ba"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY5MzU0Mg==", "bodyText": "I'll revert it just in case, but I think the performance issue is only with using await etc. in the template.\nMy theory was that this might be able to improve parallelisation in future, if jinja is able to return control to the event loop while rendering or something (as this would now be doing await render_template_async() instead of render_template()). Though I don't think it has this benefit currently.\nNote that async wasn't supported at all with aiohttp-jinja2<1.4.", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6247#discussion_r549693542", "createdAt": "2020-12-29T12:53:12Z", "author": {"login": "Dreamsorcerer"}, "path": "frameworks/Python/aiohttp/app/main.py", "diffHunk": "@@ -80,14 +80,13 @@ def setup_routes(app):\n         app.router.add_get('/updates/{queries:.*}', updates_raw)\n \n \n-def create_app(loop):\n-    app = web.Application(loop=loop)\n+def create_app():\n+    app = web.Application()\n \n     jinja2_loader = jinja2.FileSystemLoader(str(THIS_DIR / 'templates'))\n-    aiohttp_jinja2.setup(app, loader=jinja2_loader)\n+    aiohttp_jinja2.setup(app, loader=jinja2_loader, enable_async=True)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYzMTk0Nw=="}, "originalCommit": {"oid": "9a59ef41a5fa064d2c3357199d6f255bb7a552ba"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2523, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}