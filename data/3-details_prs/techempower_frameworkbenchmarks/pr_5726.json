{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NzcyNjk3", "number": 5726, "title": "Add benchmark for Frank", "bodyText": "This adds the Frank micro-framework written in F#.", "createdAt": "2020-06-02T19:01:10Z", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5726", "merged": true, "mergeCommit": {"oid": "cea20bde8aa5e43c833aa144ccf714675ec3c932"}, "closed": true, "closedAt": "2020-06-12T17:02:35Z", "author": {"login": "panesofglass"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqSxbhgFqTQyOTE4OTk3MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqlF5nAFqTQyOTg2MTU5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MTg5OTcw", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5726#pullrequestreview-429189970", "createdAt": "2020-06-11T18:43:05Z", "commit": {"oid": "8f1d20430dfd3e23324d058bf118dc949c431217"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODo0MzowNVrOGiqM6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODo0MzowNVrOGiqM6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5NjIwMg==", "bodyText": "@panesofglass Apologies for taking so long to review.\nThe object for the json test needs to be instantiated and serialized on every request.\nstruct {| message = \"Hello, World!\" |} and this serialization should be moved into the function below.", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5726#discussion_r438996202", "createdAt": "2020-06-11T18:43:05Z", "author": {"login": "nbrady-techempower"}, "path": "frameworks/FSharp/frank/src/App/Program.fs", "diffHunk": "@@ -0,0 +1,126 @@\n+module App.App\n+\n+open System\n+open System.IO\n+open System.Threading.Tasks\n+open Microsoft.AspNetCore.Hosting\n+open Microsoft.AspNetCore.Http\n+open Dapper\n+open Frank.Builder\n+open FSharp.Control.Tasks\n+open Npgsql\n+open App\n+open Models\n+\n+let private DefaultCapacity = 1386\n+let private MaxBuilderSize = DefaultCapacity * 3\n+let private BufferSize = 27\n+\n+type MemoryStreamCache = \n+    \n+    [<ThreadStatic>]\n+    [<DefaultValue>]\n+    static val mutable private instance: MemoryStream\n+\n+    static member Get() = MemoryStreamCache.Get(DefaultCapacity)\n+    static member Get(capacity:int) = \n+        \n+        if capacity <= MaxBuilderSize then\n+            let ms = MemoryStreamCache.instance;\n+            let capacity = max capacity DefaultCapacity\n+            \n+            if ms <> null && capacity <= ms.Capacity then\n+                MemoryStreamCache.instance <- null;\n+                ms.SetLength 0L\n+                ms\n+            else\n+                new MemoryStream(capacity)\n+        else\n+            new MemoryStream(capacity)\n+\n+    static member Release(ms:MemoryStream) = \n+        if ms.Capacity <= MaxBuilderSize then\n+            MemoryStreamCache.instance <- ms\n+\n+let inline contentLength x = new Nullable<int64> ( int64 x )\n+\n+let json' data : HttpContext -> Task<unit> =\n+    let bytes = Utf8Json.JsonSerializer.Serialize(data)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f1d20430dfd3e23324d058bf118dc949c431217"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MjQzOTgy", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5726#pullrequestreview-429243982", "createdAt": "2020-06-11T20:00:16Z", "commit": {"oid": "8f1d20430dfd3e23324d058bf118dc949c431217"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMDowMDoxNlrOGislJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMDowMDoxNlrOGislJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzNTE3NA==", "bodyText": "@panesofglass  if I put a printfn \"test\" here and then hit the json route over and over again, it will not print. If it is moved into the function, it will, so this is not currently meeting the requirements.", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5726#discussion_r439035174", "createdAt": "2020-06-11T20:00:16Z", "author": {"login": "nbrady-techempower"}, "path": "frameworks/FSharp/frank/src/App/Program.fs", "diffHunk": "@@ -0,0 +1,126 @@\n+module App.App\n+\n+open System\n+open System.IO\n+open System.Threading.Tasks\n+open Microsoft.AspNetCore.Hosting\n+open Microsoft.AspNetCore.Http\n+open Dapper\n+open Frank.Builder\n+open FSharp.Control.Tasks\n+open Npgsql\n+open App\n+open Models\n+\n+let private DefaultCapacity = 1386\n+let private MaxBuilderSize = DefaultCapacity * 3\n+let private BufferSize = 27\n+\n+type MemoryStreamCache = \n+    \n+    [<ThreadStatic>]\n+    [<DefaultValue>]\n+    static val mutable private instance: MemoryStream\n+\n+    static member Get() = MemoryStreamCache.Get(DefaultCapacity)\n+    static member Get(capacity:int) = \n+        \n+        if capacity <= MaxBuilderSize then\n+            let ms = MemoryStreamCache.instance;\n+            let capacity = max capacity DefaultCapacity\n+            \n+            if ms <> null && capacity <= ms.Capacity then\n+                MemoryStreamCache.instance <- null;\n+                ms.SetLength 0L\n+                ms\n+            else\n+                new MemoryStream(capacity)\n+        else\n+            new MemoryStream(capacity)\n+\n+    static member Release(ms:MemoryStream) = \n+        if ms.Capacity <= MaxBuilderSize then\n+            MemoryStreamCache.instance <- ms\n+\n+let inline contentLength x = new Nullable<int64> ( int64 x )\n+\n+let json' data : HttpContext -> Task<unit> =\n+    let bytes = Utf8Json.JsonSerializer.Serialize(data)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f1d20430dfd3e23324d058bf118dc949c431217"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MjQ5MTA1", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5726#pullrequestreview-429249105", "createdAt": "2020-06-11T20:03:53Z", "commit": {"oid": "b20c8c0ce9b4f55a77fbd182126e6c5220e2a352"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMDowMzo1M1rOGisrjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMDowMzo1M1rOGisrjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzNjgxMw==", "bodyText": "Just to be clear, the plaintext route does not have the same requirements.", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5726#discussion_r439036813", "createdAt": "2020-06-11T20:03:53Z", "author": {"login": "nbrady-techempower"}, "path": "frameworks/FSharp/frank/src/App/Program.fs", "diffHunk": "@@ -45,21 +45,21 @@ type MemoryStreamCache =\n let inline contentLength x = new Nullable<int64> ( int64 x )\n \n let json' data : HttpContext -> Task<unit> =\n-    let bytes = Utf8Json.JsonSerializer.Serialize(data)\n     fun ctx -> \n         ctx.Response.ContentLength <- contentLength bytes.Length\n         ctx.Response.ContentType <- \"application/json\"\n         ctx.Response.StatusCode <- 200\n+        let bytes = Utf8Json.JsonSerializer.Serialize(data)\n         task {\n             do! ctx.Response.Body.WriteAsync(bytes, 0, bytes.Length)\n         }\n \n let text' (msg:string): HttpContext -> Task<unit> =\n-    let bytes = System.Text.Encoding.UTF8.GetBytes(msg)\n     fun ctx ->\n         ctx.Response.ContentLength <- contentLength bytes.Length\n         ctx.Response.ContentType <- \"text/plain\"\n         ctx.Response.StatusCode <- 200\n+        let bytes = System.Text.Encoding.UTF8.GetBytes(msg)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b20c8c0ce9b4f55a77fbd182126e6c5220e2a352"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7dea323d324bd6c0a37a3af44d9bf2a5581bfa7", "author": {"user": {"login": "panesofglass", "name": "Ryan Riley"}}, "url": "https://github.com/TechEmpower/FrameworkBenchmarks/commit/e7dea323d324bd6c0a37a3af44d9bf2a5581bfa7", "committedDate": "2020-06-12T00:10:00Z", "message": "Add benchmark for Frank"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fb1d678c6aaa8363c565c031ed09c084ca08e18", "author": {"user": {"login": "panesofglass", "name": "Ryan Riley"}}, "url": "https://github.com/TechEmpower/FrameworkBenchmarks/commit/4fb1d678c6aaa8363c565c031ed09c084ca08e18", "committedDate": "2020-06-12T00:10:00Z", "message": "Add Red Hat Linux Transport for comparison"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83d3bf07e94419c28ae7ab1655e858d931db518c", "author": {"user": {"login": "panesofglass", "name": "Ryan Riley"}}, "url": "https://github.com/TechEmpower/FrameworkBenchmarks/commit/83d3bf07e94419c28ae7ab1655e858d931db518c", "committedDate": "2020-06-12T00:20:10Z", "message": "Update versions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "71dd1c510fc0c2bb52966cbc7640fc9cdfb492b3", "author": {"user": {"login": "panesofglass", "name": "Ryan Riley"}}, "url": "https://github.com/TechEmpower/FrameworkBenchmarks/commit/71dd1c510fc0c2bb52966cbc7640fc9cdfb492b3", "committedDate": "2020-06-11T22:47:50Z", "message": "Fix build"}, "afterCommit": {"oid": "83d3bf07e94419c28ae7ab1655e858d931db518c", "author": {"user": {"login": "panesofglass", "name": "Ryan Riley"}}, "url": "https://github.com/TechEmpower/FrameworkBenchmarks/commit/83d3bf07e94419c28ae7ab1655e858d931db518c", "committedDate": "2020-06-12T00:20:10Z", "message": "Update versions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0eedd4ac14e80db79170d8e9a155a9cdfc3122f", "author": {"user": {"login": "panesofglass", "name": "Ryan Riley"}}, "url": "https://github.com/TechEmpower/FrameworkBenchmarks/commit/b0eedd4ac14e80db79170d8e9a155a9cdfc3122f", "committedDate": "2020-06-12T01:00:22Z", "message": "Keep Server header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ffc661aebc23bc2e745093d51a1cce87de7555b", "author": {"user": {"login": "panesofglass", "name": "Ryan Riley"}}, "url": "https://github.com/TechEmpower/FrameworkBenchmarks/commit/1ffc661aebc23bc2e745093d51a1cce87de7555b", "committedDate": "2020-06-12T02:32:28Z", "message": "Production-like HTML rendering and OOB JSON rendering"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5ODI3MTI4", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5726#pullrequestreview-429827128", "createdAt": "2020-06-12T15:17:05Z", "commit": {"oid": "1ffc661aebc23bc2e745093d51a1cce87de7555b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNToxNzowNVrOGjH3zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNToxNzowNVrOGjH3zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ4MjMxNg==", "bodyText": "Sorry to be a pain here, but this struct creation still needs to be moved into the function at line 24. My understanding of what is happening here is that this struct is only being created once and then being serialized on each request. It also needs to be instantiated on each request.\nhttps://github.com/TechEmpower/FrameworkBenchmarks/wiki/Project-Information-Framework-Tests-Overview#json-serialization\n\ni. For each request, an object mapping the key message to Hello, World! must be instantiated.", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5726#discussion_r439482316", "createdAt": "2020-06-12T15:17:05Z", "author": {"login": "nbrady-techempower"}, "path": "frameworks/FSharp/frank/src/App/Program.fs", "diffHunk": "@@ -0,0 +1,88 @@\n+module App.App\n+\n+open System\n+open System.IO\n+open System.Text\n+open System.Text.Json.Serialization\n+open System.Text.Json\n+open System.Threading.Tasks\n+open Microsoft.AspNetCore.Hosting\n+open Microsoft.AspNetCore.Http\n+open Microsoft.Extensions.Logging\n+open Dapper\n+open Giraffe\n+open Frank.Builder\n+open FSharp.Control.Tasks\n+open Npgsql\n+open Models\n+\n+let inline contentLength x = new Nullable<int64> ( int64 x )\n+\n+let json' data : HttpContext -> Task =\n+    let options = JsonSerializerOptions()\n+    options.Converters.Add(JsonFSharpConverter())\n+    fun ctx ->\n+        ctx.Response.ContentType <- \"application/json\"\n+        ctx.Response.StatusCode <- 200\n+        JsonSerializer.SerializeAsync(ctx.Response.Body, data)\n+\n+let text' (msg:string): HttpContext -> Task =\n+    let bytes = Encoding.UTF8.GetBytes(msg)\n+    fun ctx ->\n+        ctx.Response.ContentLength <- contentLength bytes.Length\n+        ctx.Response.ContentType <- \"text/plain\"\n+        ctx.Response.StatusCode <- 200\n+        ctx.Response.Body.WriteAsync(bytes, 0, bytes.Length)\n+\n+// Pulled from Giraffe example\n+let fortunes' = \n+    let extra = { id = 0; message = \"Additional fortune added at request time.\" }\n+    fun next (ctx: HttpContext) ->\n+        let conn = new NpgsqlConnection(ConnectionString)\n+        ctx.Response.RegisterForDispose conn\n+        task {\n+            let! data = conn.QueryAsync<Fortune>(\"SELECT id, message FROM fortune\")\n+\n+            let fortunes = \n+                let xs = data.AsList()\n+                xs.Add extra\n+                xs.Sort FortuneComparer\n+                xs\n+\n+            return! htmlView (HtmlViews.fortunes fortunes) next ctx\n+        }\n+\n+// Resources\n+\n+let plaintext = \n+    resource \"/plaintext\" {\n+        name \"Plain text\"\n+        get (text' \"Hello, World!\")\n+    }\n+\n+let json =\n+    resource \"/json\" {\n+        name \"JSON\"\n+        get (json' struct {|message=\"Hello, World!\"|})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ffc661aebc23bc2e745093d51a1cce87de7555b"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cb996efb8974b7a0cff9fc7a6af97a3237c042d", "author": {"user": {"login": "panesofglass", "name": "Ryan Riley"}}, "url": "https://github.com/TechEmpower/FrameworkBenchmarks/commit/3cb996efb8974b7a0cff9fc7a6af97a3237c042d", "committedDate": "2020-06-12T15:59:51Z", "message": "Update Program.fs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26a37bbacfc4331ed922c8e5853c9f4cd7b0086f", "author": {"user": {"login": "panesofglass", "name": "Ryan Riley"}}, "url": "https://github.com/TechEmpower/FrameworkBenchmarks/commit/26a37bbacfc4331ed922c8e5853c9f4cd7b0086f", "committedDate": "2020-06-12T16:00:56Z", "message": "Update Program.fs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5ODYxNTk4", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5726#pullrequestreview-429861598", "createdAt": "2020-06-12T16:03:50Z", "commit": {"oid": "26a37bbacfc4331ed922c8e5853c9f4cd7b0086f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3873, "cost": 1, "resetAt": "2021-11-02T12:20:56Z"}}}