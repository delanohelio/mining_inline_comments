{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3NTgzMDM5", "number": 6163, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzowNzowNFrOE9UiPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzowNzowNFrOE9UiPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzM1MDM2OnYy", "diffSide": "RIGHT", "path": "frameworks/OCaml/opium/src/bin/main_forks.ml", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzowNzowNFrOH58vFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzo0MjoxOVrOH5-ASQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNTk3Mw==", "bodyText": "@blandinw I notice that you have this function wrapped both in async and catch\nI'm not that familiar with Lwt, is it necessary?", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6163#discussion_r530525973", "createdAt": "2020-11-25T17:07:04Z", "author": {"login": "mudrz"}, "path": "frameworks/OCaml/opium/src/bin/main_forks.ml", "diffHunk": "@@ -0,0 +1,69 @@\n+open Opium.Std\n+open Lwt.Syntax\n+\n+let run_app app ~instances ~port =\n+  let listen_address =\n+    let inet_addr = Unix.inet_addr_any in\n+    Unix.ADDR_INET (inet_addr, port)\n+  in\n+  let socket =\n+    Lwt_unix.socket (Unix.domain_of_sockaddr listen_address) Unix.SOCK_STREAM 0\n+  in\n+  Lwt_unix.setsockopt socket Unix.SO_REUSEADDR true;\n+\n+  Lwt_main.run (\n+    let+ () = Lwt_unix.bind socket listen_address in\n+    Lwt_unix.listen socket (Lwt_unix.somaxconn () [@ocaml.warning \"-3\"])\n+  );\n+\n+  let rec accept_loop socket handler instance =\n+    let* (socket', sockaddr') = Lwt_unix.accept socket in\n+    Lwt.async (fun () -> handler sockaddr' socket');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "231ef36078f175c3c8a0c24fa75adb6190ae57b7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUzMjg0NQ==", "bodyText": "Probably an oversight on my end!\nIf I recall correctly, catch allows customized error handling, while async defers to async_exception_hook.\nIf that's correct, they're redundant and only one should be used.", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6163#discussion_r530532845", "createdAt": "2020-11-25T17:18:13Z", "author": {"login": "blandinw"}, "path": "frameworks/OCaml/opium/src/bin/main_forks.ml", "diffHunk": "@@ -0,0 +1,69 @@\n+open Opium.Std\n+open Lwt.Syntax\n+\n+let run_app app ~instances ~port =\n+  let listen_address =\n+    let inet_addr = Unix.inet_addr_any in\n+    Unix.ADDR_INET (inet_addr, port)\n+  in\n+  let socket =\n+    Lwt_unix.socket (Unix.domain_of_sockaddr listen_address) Unix.SOCK_STREAM 0\n+  in\n+  Lwt_unix.setsockopt socket Unix.SO_REUSEADDR true;\n+\n+  Lwt_main.run (\n+    let+ () = Lwt_unix.bind socket listen_address in\n+    Lwt_unix.listen socket (Lwt_unix.somaxconn () [@ocaml.warning \"-3\"])\n+  );\n+\n+  let rec accept_loop socket handler instance =\n+    let* (socket', sockaddr') = Lwt_unix.accept socket in\n+    Lwt.async (fun () -> handler sockaddr' socket');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNTk3Mw=="}, "originalCommit": {"oid": "231ef36078f175c3c8a0c24fa75adb6190ae57b7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU0MTIxNw==", "bodyText": "okay, thanks for the clarification \ud83d\udc4d\nassuming that the rest of the implementation is correct, we'll be able to compare httpaf with higher level libraries", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6163#discussion_r530541217", "createdAt": "2020-11-25T17:32:35Z", "author": {"login": "mudrz"}, "path": "frameworks/OCaml/opium/src/bin/main_forks.ml", "diffHunk": "@@ -0,0 +1,69 @@\n+open Opium.Std\n+open Lwt.Syntax\n+\n+let run_app app ~instances ~port =\n+  let listen_address =\n+    let inet_addr = Unix.inet_addr_any in\n+    Unix.ADDR_INET (inet_addr, port)\n+  in\n+  let socket =\n+    Lwt_unix.socket (Unix.domain_of_sockaddr listen_address) Unix.SOCK_STREAM 0\n+  in\n+  Lwt_unix.setsockopt socket Unix.SO_REUSEADDR true;\n+\n+  Lwt_main.run (\n+    let+ () = Lwt_unix.bind socket listen_address in\n+    Lwt_unix.listen socket (Lwt_unix.somaxconn () [@ocaml.warning \"-3\"])\n+  );\n+\n+  let rec accept_loop socket handler instance =\n+    let* (socket', sockaddr') = Lwt_unix.accept socket in\n+    Lwt.async (fun () -> handler sockaddr' socket');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNTk3Mw=="}, "originalCommit": {"oid": "231ef36078f175c3c8a0c24fa75adb6190ae57b7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU0Njc2MQ==", "bodyText": "Yes! The implementation looks good at a high level. It may be worth running a local test to compare the haproxy solution and this one, I'd expect a 5x to 10x speed up", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/6163#discussion_r530546761", "createdAt": "2020-11-25T17:42:19Z", "author": {"login": "blandinw"}, "path": "frameworks/OCaml/opium/src/bin/main_forks.ml", "diffHunk": "@@ -0,0 +1,69 @@\n+open Opium.Std\n+open Lwt.Syntax\n+\n+let run_app app ~instances ~port =\n+  let listen_address =\n+    let inet_addr = Unix.inet_addr_any in\n+    Unix.ADDR_INET (inet_addr, port)\n+  in\n+  let socket =\n+    Lwt_unix.socket (Unix.domain_of_sockaddr listen_address) Unix.SOCK_STREAM 0\n+  in\n+  Lwt_unix.setsockopt socket Unix.SO_REUSEADDR true;\n+\n+  Lwt_main.run (\n+    let+ () = Lwt_unix.bind socket listen_address in\n+    Lwt_unix.listen socket (Lwt_unix.somaxconn () [@ocaml.warning \"-3\"])\n+  );\n+\n+  let rec accept_loop socket handler instance =\n+    let* (socket', sockaddr') = Lwt_unix.accept socket in\n+    Lwt.async (fun () -> handler sockaddr' socket');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNTk3Mw=="}, "originalCommit": {"oid": "231ef36078f175c3c8a0c24fa75adb6190ae57b7"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2541, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}