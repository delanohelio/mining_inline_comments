{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3MjA0MzE2", "number": 5728, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTowMTo1N1rOECMaGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNDo1ODo0M1rOEFFxFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzM1ODk5OnYy", "diffSide": "RIGHT", "path": "frameworks/Java/quarkus/benchmark_config.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTowMTo1N1rOGegDrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTowMTo1N1rOGegDrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzNTY5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"webserver\": \"Undertow\",\n          \n          \n            \n                    \"webserver\": \"None\",\n          \n      \n    \n    \n  \n\nthe pgclient implementation is using reactive routes from from vert.x-web. This should not be Undertow", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5728#discussion_r434635693", "createdAt": "2020-06-03T15:01:57Z", "author": {"login": "johnaohara"}, "path": "frameworks/Java/quarkus/benchmark_config.json", "diffHunk": "@@ -55,7 +41,7 @@\n         \"flavor\": \"None\",\n         \"orm\": \"Micro\",\n         \"platform\": \"JAX-RS\",\n-        \"webserver\": \"None\",\n+        \"webserver\": \"Undertow\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e86f670a22bf01360b0e028e0b9573888a05d2b3"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzM3MjgzOnYy", "diffSide": "RIGHT", "path": "frameworks/Java/quarkus/hibernate/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTowNDo1N1rOGegMXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTowNDo1N1rOGegMXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzNzkxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                sudo podman run --ulimit memlock=-1:-1 -it --rm=true --network host --memory-swappiness=0 --name HibernateTestingPGSQL -e POSTGRES_USER=benchmarkdbuser -e POSTGRES_PASSWORD=benchmarkdbpass -e POSTGRES_DB=hello_world -p 5432:5432 postgres:12\n          \n          \n            \n            Using podman;\n          \n          \n            \n            \n          \n          \n            \n                    podman run --ulimit memlock=-1:-1 -it --rm=true --network host --memory-swappiness=0 --name HibernateTestingPGSQL -e POSTGRES_USER=benchmarkdbuser -e POSTGRES_PASSWORD=benchmarkdbpass -e POSTGRES_DB=hello_world -p 5432:5432 postgres:12\n          \n          \n            \n            \n          \n          \n            \n            Using docker;\n          \n          \n            \n            \n          \n          \n            \n                    sudo docker run --ulimit memlock=-1:-1 -it --rm=true --network host --memory-swappiness=0 --name HibernateTestingPGSQL -e POSTGRES_USER=benchmarkdbuser -e POSTGRES_PASSWORD=benchmarkdbpass -e POSTGRES_DB=hello_world -p 5432:5432 postgres:12\n          \n      \n    \n    \n  \n\npodman should run as the current user, also provide an alternative for using docker", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5728#discussion_r434637917", "createdAt": "2020-06-03T15:04:57Z", "author": {"login": "johnaohara"}, "path": "frameworks/Java/quarkus/hibernate/README.md", "diffHunk": "@@ -0,0 +1,69 @@\n+# Local development\n+\n+During development it might be easier to start a PostgreSQL instance directly:\n+\n+    sudo podman run --ulimit memlock=-1:-1 -it --rm=true --network host --memory-swappiness=0 --name HibernateTestingPGSQL -e POSTGRES_USER=benchmarkdbuser -e POSTGRES_PASSWORD=benchmarkdbpass -e POSTGRES_DB=hello_world -p 5432:5432 postgres:12", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e86f670a22bf01360b0e028e0b9573888a05d2b3"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODI4OTIwOnYy", "diffSide": "RIGHT", "path": "frameworks/Java/quarkus/hibernate/src/main/java/io/quarkus/benchmark/resource/JsonResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOTowMDo1NFrOGepXAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOTo0NjowNVrOGeq5Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4ODA5Ng==", "bodyText": "Instantiating a new object for each request is one of the requirements.\n\ni. For each request, an object mapping the key message to Hello, World! must be instantiated.", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5728#discussion_r434788096", "createdAt": "2020-06-03T19:00:54Z", "author": {"login": "michaelhixson"}, "path": "frameworks/Java/quarkus/hibernate/src/main/java/io/quarkus/benchmark/resource/JsonResource.java", "diffHunk": "@@ -1,22 +1,22 @@\n package io.quarkus.benchmark.resource;\n \n-import java.util.Map;\n-import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.CompletionStage;\n-\n import javax.ws.rs.GET;\n import javax.ws.rs.Path;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n+import java.util.Collections;\n+import java.util.Map;\n \n @Path(\"/json\")\n public class JsonResource {\n     private static final String MESSAGE = \"message\";\n     private static final String HELLO = \"Hello, World!\";\n+    private static final Map<String, String> map = Collections.singletonMap( MESSAGE, HELLO );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af116a29ebabba790e6ec76651085ae89f49440e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxMzI0Nw==", "bodyText": "Oops, missed that. Fixed.", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5728#discussion_r434813247", "createdAt": "2020-06-03T19:46:05Z", "author": {"login": "FroMage"}, "path": "frameworks/Java/quarkus/hibernate/src/main/java/io/quarkus/benchmark/resource/JsonResource.java", "diffHunk": "@@ -1,22 +1,22 @@\n package io.quarkus.benchmark.resource;\n \n-import java.util.Map;\n-import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.CompletionStage;\n-\n import javax.ws.rs.GET;\n import javax.ws.rs.Path;\n import javax.ws.rs.Produces;\n import javax.ws.rs.core.MediaType;\n+import java.util.Collections;\n+import java.util.Map;\n \n @Path(\"/json\")\n public class JsonResource {\n     private static final String MESSAGE = \"message\";\n     private static final String HELLO = \"Hello, World!\";\n+    private static final Map<String, String> map = Collections.singletonMap( MESSAGE, HELLO );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4ODA5Ng=="}, "originalCommit": {"oid": "af116a29ebabba790e6ec76651085ae89f49440e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzc2OTI5OnYy", "diffSide": "RIGHT", "path": "frameworks/Java/quarkus/hibernate/start-app.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxOTo0Mjo0MFrOGgFW8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwODoyMjozOFrOGgTrJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5NTQwOA==", "bodyText": "should flight recorder be enabled for benchmarks?", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5728#discussion_r436295408", "createdAt": "2020-06-06T19:42:40Z", "author": {"login": "kenyee"}, "path": "frameworks/Java/quarkus/hibernate/start-app.sh", "diffHunk": "@@ -0,0 +1 @@\n+java -XX:+FlightRecorder -XX:+UseParallelGC -Dquarkus.datasource.url=jdbc:postgresql://localhost:5432/hello_world?loggerLevel=OFF\\&disableColumnSanitiser=true\\&assumeMinServerVersion=12\\&sslmode=disable -Dquarkus.http.host=127.0.0.1 -Djava.lang.Integer.IntegerCache.high=10000 -Dvertx.disableHttpHeadersValidation=true -Dvertx.disableMetrics=true -Dvertx.disableH2c=true -Dvertx.disableWebsockets=true -Dvertx.flashPolicyHandler=false -Dvertx.threadChecks=false -Dvertx.disableContextTimings=true -Dvertx.disableTCCL=true -Dhibernate.allow_update_outside_transaction=true -Djboss.threads.eqe.statistics=false -jar target/hibernate-1.0-SNAPSHOT-runner.jar", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b862ee66d9c41b9e4eec37f440ba1785fc14bd2d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUyOTk1Ng==", "bodyText": "This is for developping the benchmark, to figure out how to make it better.", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5728#discussion_r436529956", "createdAt": "2020-06-08T08:22:38Z", "author": {"login": "FroMage"}, "path": "frameworks/Java/quarkus/hibernate/start-app.sh", "diffHunk": "@@ -0,0 +1 @@\n+java -XX:+FlightRecorder -XX:+UseParallelGC -Dquarkus.datasource.url=jdbc:postgresql://localhost:5432/hello_world?loggerLevel=OFF\\&disableColumnSanitiser=true\\&assumeMinServerVersion=12\\&sslmode=disable -Dquarkus.http.host=127.0.0.1 -Djava.lang.Integer.IntegerCache.high=10000 -Dvertx.disableHttpHeadersValidation=true -Dvertx.disableMetrics=true -Dvertx.disableH2c=true -Dvertx.disableWebsockets=true -Dvertx.flashPolicyHandler=false -Dvertx.threadChecks=false -Dvertx.disableContextTimings=true -Dvertx.disableTCCL=true -Dhibernate.allow_update_outside_transaction=true -Djboss.threads.eqe.statistics=false -jar target/hibernate-1.0-SNAPSHOT-runner.jar", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5NTQwOA=="}, "originalCommit": {"oid": "b862ee66d9c41b9e4eec37f440ba1785fc14bd2d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzc2OTk3OnYy", "diffSide": "RIGHT", "path": "frameworks/Java/quarkus/pgclient/src/main/java/io/quarkus/benchmark/repository/pgclient/PgClientFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxOTo0NDoyN1rOGgFXTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwODoyNjo1MFrOGgT0Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5NTUwMw==", "bodyText": "would be nice for these to be constants for readability", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5728#discussion_r436295503", "createdAt": "2020-06-06T19:44:27Z", "author": {"login": "kenyee"}, "path": "frameworks/Java/quarkus/pgclient/src/main/java/io/quarkus/benchmark/repository/pgclient/PgClientFactory.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package io.quarkus.benchmark.repository.pgclient;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Inject;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+import io.vertx.mutiny.core.Vertx;\n+import io.vertx.mutiny.pgclient.PgPool;\n+import io.vertx.pgclient.PgConnectOptions;\n+import io.vertx.sqlclient.PoolOptions;\n+\n+@ApplicationScoped\n+public class PgClientFactory {\n+\n+\t@ConfigProperty(name = \"quarkus.datasource.url\")\n+\tString url;\n+\n+\t@ConfigProperty(name = \"quarkus.datasource.username\")\n+\tString user;\n+\n+\t@ConfigProperty(name = \"quarkus.datasource.password\")\n+\tString pass;\n+\n+\t@Inject\n+\tVertx vertx;\n+\n+\t@Produces\n+\t@ApplicationScoped\n+\tpublic PgClients pgClients() {\n+\t    return new PgClients(this);\n+\t}\n+\n+\n+\tPgPool sqlClient(int size) {\n+\t\tPoolOptions options = new PoolOptions();\n+\t\tPgConnectOptions connectOptions = new PgConnectOptions();\n+\t\t// vertx-reactive:postgresql://tfb-database:5432/hello_world\n+\t\tMatcher matcher = Pattern.compile(\"vertx-reactive:postgresql://([-a-zA-Z]+):([0-9]+)/(.*)\").matcher(url);\n+\t\tmatcher.matches();\n+\t\tconnectOptions.setDatabase(matcher.group(3));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b862ee66d9c41b9e4eec37f440ba1785fc14bd2d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUzMjI3OA==", "bodyText": "Done.", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5728#discussion_r436532278", "createdAt": "2020-06-08T08:26:50Z", "author": {"login": "FroMage"}, "path": "frameworks/Java/quarkus/pgclient/src/main/java/io/quarkus/benchmark/repository/pgclient/PgClientFactory.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package io.quarkus.benchmark.repository.pgclient;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Inject;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+import io.vertx.mutiny.core.Vertx;\n+import io.vertx.mutiny.pgclient.PgPool;\n+import io.vertx.pgclient.PgConnectOptions;\n+import io.vertx.sqlclient.PoolOptions;\n+\n+@ApplicationScoped\n+public class PgClientFactory {\n+\n+\t@ConfigProperty(name = \"quarkus.datasource.url\")\n+\tString url;\n+\n+\t@ConfigProperty(name = \"quarkus.datasource.username\")\n+\tString user;\n+\n+\t@ConfigProperty(name = \"quarkus.datasource.password\")\n+\tString pass;\n+\n+\t@Inject\n+\tVertx vertx;\n+\n+\t@Produces\n+\t@ApplicationScoped\n+\tpublic PgClients pgClients() {\n+\t    return new PgClients(this);\n+\t}\n+\n+\n+\tPgPool sqlClient(int size) {\n+\t\tPoolOptions options = new PoolOptions();\n+\t\tPgConnectOptions connectOptions = new PgConnectOptions();\n+\t\t// vertx-reactive:postgresql://tfb-database:5432/hello_world\n+\t\tMatcher matcher = Pattern.compile(\"vertx-reactive:postgresql://([-a-zA-Z]+):([0-9]+)/(.*)\").matcher(url);\n+\t\tmatcher.matches();\n+\t\tconnectOptions.setDatabase(matcher.group(3));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5NTUwMw=="}, "originalCommit": {"oid": "b862ee66d9c41b9e4eec37f440ba1785fc14bd2d"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzc3MDMxOnYy", "diffSide": "RIGHT", "path": "frameworks/Java/quarkus/pgclient/src/main/java/io/quarkus/benchmark/repository/pgclient/PgClients.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxOTo0NTowN1rOGgFXfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwODoyNjo0NFrOGgTz_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5NTU1MQ==", "bodyText": "would be nice for the 4 to be a constant for readability", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5728#discussion_r436295551", "createdAt": "2020-06-06T19:45:07Z", "author": {"login": "kenyee"}, "path": "frameworks/Java/quarkus/pgclient/src/main/java/io/quarkus/benchmark/repository/pgclient/PgClients.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.quarkus.benchmark.repository.pgclient;\n+\n+import io.vertx.mutiny.pgclient.PgPool;\n+import io.vertx.mutiny.sqlclient.SqlClient;\n+\n+class PgClients {\n+    private ThreadLocal<SqlClient> sqlClient = new ThreadLocal<>();\n+    private ThreadLocal<PgPool> pool = new ThreadLocal<>();\n+    private PgClientFactory pgClientFactory;\n+\n+\t// for ArC\n+\tpublic PgClients() {\n+\t}\n+\n+\tpublic PgClients(PgClientFactory pgClientFactory) {\n+\t    this.pgClientFactory = pgClientFactory;\n+    }\n+\n+    SqlClient getClient() {\n+        SqlClient ret = sqlClient.get();\n+        if(ret == null) {\n+            ret = pgClientFactory.sqlClient(1);\n+            sqlClient.set(ret);\n+        }\n+\t\treturn ret;\n+\t}\n+\n+\tsynchronized PgPool getPool() {\n+        PgPool ret = pool.get();\n+        if(ret == null) {\n+            ret = pgClientFactory.sqlClient(4);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b862ee66d9c41b9e4eec37f440ba1785fc14bd2d"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUzMjIyMA==", "bodyText": "Done.", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5728#discussion_r436532220", "createdAt": "2020-06-08T08:26:44Z", "author": {"login": "FroMage"}, "path": "frameworks/Java/quarkus/pgclient/src/main/java/io/quarkus/benchmark/repository/pgclient/PgClients.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.quarkus.benchmark.repository.pgclient;\n+\n+import io.vertx.mutiny.pgclient.PgPool;\n+import io.vertx.mutiny.sqlclient.SqlClient;\n+\n+class PgClients {\n+    private ThreadLocal<SqlClient> sqlClient = new ThreadLocal<>();\n+    private ThreadLocal<PgPool> pool = new ThreadLocal<>();\n+    private PgClientFactory pgClientFactory;\n+\n+\t// for ArC\n+\tpublic PgClients() {\n+\t}\n+\n+\tpublic PgClients(PgClientFactory pgClientFactory) {\n+\t    this.pgClientFactory = pgClientFactory;\n+    }\n+\n+    SqlClient getClient() {\n+        SqlClient ret = sqlClient.get();\n+        if(ret == null) {\n+            ret = pgClientFactory.sqlClient(1);\n+            sqlClient.set(ret);\n+        }\n+\t\treturn ret;\n+\t}\n+\n+\tsynchronized PgPool getPool() {\n+        PgPool ret = pool.get();\n+        if(ret == null) {\n+            ret = pgClientFactory.sqlClient(4);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5NTU1MQ=="}, "originalCommit": {"oid": "b862ee66d9c41b9e4eec37f440ba1785fc14bd2d"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzc3MDg5OnYy", "diffSide": "RIGHT", "path": "frameworks/Java/quarkus/pgclient/src/main/java/io/quarkus/benchmark/repository/pgclient/WorldRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxOTo0NjoxMVrOGgFXxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwODoyNjozOFrOGgTzww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5NTYyMw==", "bodyText": "isn't specifying the column names explicitly faster than using *?", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5728#discussion_r436295623", "createdAt": "2020-06-06T19:46:11Z", "author": {"login": "kenyee"}, "path": "frameworks/Java/quarkus/pgclient/src/main/java/io/quarkus/benchmark/repository/pgclient/WorldRepository.java", "diffHunk": "@@ -1,46 +1,38 @@\n package io.quarkus.benchmark.repository.pgclient;\n \n-import java.util.concurrent.Executors;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n \n import javax.enterprise.context.ApplicationScoped;\n import javax.inject.Inject;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n import io.quarkus.benchmark.model.World;\n-import io.reactivex.Maybe;\n-import io.reactivex.Scheduler;\n-import io.reactivex.Single;\n-import io.reactivex.schedulers.Schedulers;\n-import io.vertx.reactivex.pgclient.PgPool;\n-import io.vertx.reactivex.sqlclient.RowIterator;\n-import io.vertx.reactivex.sqlclient.RowSet;\n-import io.vertx.reactivex.sqlclient.Tuple;\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.mutiny.sqlclient.Row;\n+import io.vertx.mutiny.sqlclient.Tuple;\n \n @ApplicationScoped\n public class WorldRepository {\n \n-    private static Logger LOG = LoggerFactory.getLogger(WorldRepository.class);\n-\n     @Inject\n-    PgPool client;\n-\n-    private final Scheduler scheduler = Schedulers.from(Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() * 2));\n-\n-    public Maybe<World> find(int id) {\n-        return client.rxPreparedQuery(\"SELECT id, randomnumber FROM world WHERE id = $1\", Tuple.of(id))\n-                .map(RowSet::iterator)\n-                .filter(RowIterator::hasNext)\n-                .map(RowIterator::next)\n-                .map(row -> new World(row.getInteger(0), row.getInteger(1)))\n-                .subscribeOn(scheduler);\n+    PgClients clients;\n+\n+    public Uni<World> find(int id) {\n+        return clients.getClient().preparedQuery(\"SELECT * FROM World WHERE id = $1\", Tuple.of(id))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b862ee66d9c41b9e4eec37f440ba1785fc14bd2d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUzMjE2Mw==", "bodyText": "True, fixed.", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5728#discussion_r436532163", "createdAt": "2020-06-08T08:26:38Z", "author": {"login": "FroMage"}, "path": "frameworks/Java/quarkus/pgclient/src/main/java/io/quarkus/benchmark/repository/pgclient/WorldRepository.java", "diffHunk": "@@ -1,46 +1,38 @@\n package io.quarkus.benchmark.repository.pgclient;\n \n-import java.util.concurrent.Executors;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n \n import javax.enterprise.context.ApplicationScoped;\n import javax.inject.Inject;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n import io.quarkus.benchmark.model.World;\n-import io.reactivex.Maybe;\n-import io.reactivex.Scheduler;\n-import io.reactivex.Single;\n-import io.reactivex.schedulers.Schedulers;\n-import io.vertx.reactivex.pgclient.PgPool;\n-import io.vertx.reactivex.sqlclient.RowIterator;\n-import io.vertx.reactivex.sqlclient.RowSet;\n-import io.vertx.reactivex.sqlclient.Tuple;\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.mutiny.sqlclient.Row;\n+import io.vertx.mutiny.sqlclient.Tuple;\n \n @ApplicationScoped\n public class WorldRepository {\n \n-    private static Logger LOG = LoggerFactory.getLogger(WorldRepository.class);\n-\n     @Inject\n-    PgPool client;\n-\n-    private final Scheduler scheduler = Schedulers.from(Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() * 2));\n-\n-    public Maybe<World> find(int id) {\n-        return client.rxPreparedQuery(\"SELECT id, randomnumber FROM world WHERE id = $1\", Tuple.of(id))\n-                .map(RowSet::iterator)\n-                .filter(RowIterator::hasNext)\n-                .map(RowIterator::next)\n-                .map(row -> new World(row.getInteger(0), row.getInteger(1)))\n-                .subscribeOn(scheduler);\n+    PgClients clients;\n+\n+    public Uni<World> find(int id) {\n+        return clients.getClient().preparedQuery(\"SELECT * FROM World WHERE id = $1\", Tuple.of(id))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5NTYyMw=="}, "originalCommit": {"oid": "b862ee66d9c41b9e4eec37f440ba1785fc14bd2d"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNzcyODIwOnYy", "diffSide": "RIGHT", "path": "frameworks/Java/quarkus/benchmark_config.json", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNDo1ODo0M1rOGjHObA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODoxOTo0MFrOGkQcHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3MTcyNA==", "bodyText": "As of right now, you need a test named \"default\" or the toolset spits up a bunch of warnings. You'll have to change this and rename the quarkus-hibernate.dockerfile to quarkus.dockerfile", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5728#discussion_r439471724", "createdAt": "2020-06-12T14:58:43Z", "author": {"login": "nbrady-techempower"}, "path": "frameworks/Java/quarkus/benchmark_config.json", "diffHunk": "@@ -2,8 +2,12 @@\n   \"framework\": \"quarkus\",\n   \"tests\": [\n     {\n-      \"default\": {\n+      \"hibernate\": {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28e83d9d2d342cb931e925580b35f50ed891b7ca"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzMjg5Mg==", "bodyText": "Thanks. If I do that, will we still get two entries in the benchmark run or do I actually need to split this off into another entry entirely?", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5728#discussion_r440032892", "createdAt": "2020-06-15T09:04:47Z", "author": {"login": "FroMage"}, "path": "frameworks/Java/quarkus/benchmark_config.json", "diffHunk": "@@ -2,8 +2,12 @@\n   \"framework\": \"quarkus\",\n   \"tests\": [\n     {\n-      \"default\": {\n+      \"hibernate\": {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3MTcyNA=="}, "originalCommit": {"oid": "28e83d9d2d342cb931e925580b35f50ed891b7ca"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI5OTQ5NQ==", "bodyText": "Sorry, I don't understand the question. We're just changing the key to the test. It shouldn't change the number of entries or require you split anything off.", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5728#discussion_r440299495", "createdAt": "2020-06-15T16:28:34Z", "author": {"login": "nbrady-techempower"}, "path": "frameworks/Java/quarkus/benchmark_config.json", "diffHunk": "@@ -2,8 +2,12 @@\n   \"framework\": \"quarkus\",\n   \"tests\": [\n     {\n-      \"default\": {\n+      \"hibernate\": {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3MTcyNA=="}, "originalCommit": {"oid": "28e83d9d2d342cb931e925580b35f50ed891b7ca"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwMjk0Nw==", "bodyText": "Just to clarify: this will still end up with two different result lines in the benchmark results, right?", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5728#discussion_r440302947", "createdAt": "2020-06-15T16:34:27Z", "author": {"login": "FroMage"}, "path": "frameworks/Java/quarkus/benchmark_config.json", "diffHunk": "@@ -2,8 +2,12 @@\n   \"framework\": \"quarkus\",\n   \"tests\": [\n     {\n-      \"default\": {\n+      \"hibernate\": {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3MTcyNA=="}, "originalCommit": {"oid": "28e83d9d2d342cb931e925580b35f50ed891b7ca"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwNDIxMw==", "bodyText": "Ah, yes. You will have a quarkus result which will be the first \"default\" one, and then a quarkus-pgclient result. There will still be two different result lines.", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5728#discussion_r440304213", "createdAt": "2020-06-15T16:36:42Z", "author": {"login": "nbrady-techempower"}, "path": "frameworks/Java/quarkus/benchmark_config.json", "diffHunk": "@@ -2,8 +2,12 @@\n   \"framework\": \"quarkus\",\n   \"tests\": [\n     {\n-      \"default\": {\n+      \"hibernate\": {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3MTcyNA=="}, "originalCommit": {"oid": "28e83d9d2d342cb931e925580b35f50ed891b7ca"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY3MTI2MQ==", "bodyText": "OK thanks, done.", "url": "https://github.com/TechEmpower/FrameworkBenchmarks/pull/5728#discussion_r440671261", "createdAt": "2020-06-16T08:19:40Z", "author": {"login": "FroMage"}, "path": "frameworks/Java/quarkus/benchmark_config.json", "diffHunk": "@@ -2,8 +2,12 @@\n   \"framework\": \"quarkus\",\n   \"tests\": [\n     {\n-      \"default\": {\n+      \"hibernate\": {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ3MTcyNA=="}, "originalCommit": {"oid": "28e83d9d2d342cb931e925580b35f50ed891b7ca"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2656, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}