{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3Mjg5ODg5", "number": 10524, "reviewThreads": {"totalCount": 83, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzowNzo0MlrOE8--9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNFQyMzozMzozOFrOFh0F3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzgxOTQwOnYy", "diffSide": "RIGHT", "path": "extensions-core/kinesis-indexing-service/src/main/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzowNzo0MlrOH5bmBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNTozOToyM1rOH7CYvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk4Mjk4MQ==", "bodyText": "add comment stating why this is not implemented", "url": "https://github.com/apache/druid/pull/10524#discussion_r529982981", "createdAt": "2020-11-24T23:07:42Z", "author": {"login": "capistrant"}, "path": "extensions-core/kinesis-indexing-service/src/main/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisor.java", "diffHunk": "@@ -377,6 +377,11 @@ protected boolean useExclusiveStartSequenceNumberForNonFirstSequence()\n     return true;\n   }\n \n+  @Override\n+  protected void collectLag(ArrayList<Long> lags)\n+  {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY2NzEzNA==", "bodyText": "Done.", "url": "https://github.com/apache/druid/pull/10524#discussion_r531667134", "createdAt": "2020-11-27T15:39:23Z", "author": {"login": "zhangyue19921010"}, "path": "extensions-core/kinesis-indexing-service/src/main/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisor.java", "diffHunk": "@@ -377,6 +377,11 @@ protected boolean useExclusiveStartSequenceNumberForNonFirstSequence()\n     return true;\n   }\n \n+  @Override\n+  protected void collectLag(ArrayList<Long> lags)\n+  {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk4Mjk4MQ=="}, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzgyMTgzOnYy", "diffSide": "RIGHT", "path": "extensions-core/kinesis-indexing-service/src/main/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisorIOConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzowODoxMFrOH5bnkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNTo0OToxMlrOH7CrVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk4MzM3OA==", "bodyText": "nit: remove empty line", "url": "https://github.com/apache/druid/pull/10524#discussion_r529983378", "createdAt": "2020-11-24T23:08:10Z", "author": {"login": "capistrant"}, "path": "extensions-core/kinesis-indexing-service/src/main/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisorIOConfig.java", "diffHunk": "@@ -85,7 +88,9 @@ public KinesisSupervisorIOConfig(\n         completionTimeout,\n         lateMessageRejectionPeriod,\n         earlyMessageRejectionPeriod,\n+        dynamicAllocationTasksProperties,\n         lateMessageRejectionStartDateTime\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY3MTg5NQ==", "bodyText": "Done.", "url": "https://github.com/apache/druid/pull/10524#discussion_r531671895", "createdAt": "2020-11-27T15:49:12Z", "author": {"login": "zhangyue19921010"}, "path": "extensions-core/kinesis-indexing-service/src/main/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisorIOConfig.java", "diffHunk": "@@ -85,7 +88,9 @@ public KinesisSupervisorIOConfig(\n         completionTimeout,\n         lateMessageRejectionPeriod,\n         earlyMessageRejectionPeriod,\n+        dynamicAllocationTasksProperties,\n         lateMessageRejectionStartDateTime\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk4MzM3OA=="}, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzgyOTA4OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzowOToyOVrOH5bsLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNTo0MDoxNVrOH7Cahw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk4NDU1Ng==", "bodyText": "javadoc would be helpful as this is important/complex method", "url": "https://github.com/apache/druid/pull/10524#discussion_r529984556", "createdAt": "2020-11-24T23:09:29Z", "author": {"login": "capistrant"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -317,6 +322,157 @@ public void handle()\n     }\n   }\n \n+  // same as submit supervisor logic\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    @Override\n+    public void handle()\n+    {\n+      lock.lock();\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        long minTriggerDynamicFrequency = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"minTriggerDynamicFrequencyMillis\", 1200000)));\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        // max(minTriggerDynamicFrequency, metricsCollectionRangeMillis)\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.info(\"PendingCompletionTaskGroups is : \" + pendingCompletionTaskGroups);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [\" + pendingCompletionTaskGroups + \"]\");\n+            return;\n+          }\n+        }\n+        if (nowTime - dynamicTriggerLastRunTime < minTriggerDynamicFrequency) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [\" + (nowTime - dynamicTriggerLastRunTime) + \"]. Defined minTriggerDynamicFrequency is [\" + minTriggerDynamicFrequency + \"] , CLAM DOWN NOW !\");\n+          return;\n+        }\n+        if (!queue.isAtFullCapacity()) {\n+          log.info(\"Metrics collection is not at full capacity, skip to check dynamic allocate task : [\" + queue.size() + \" vs \" + queue.maxSize() + \"]\");\n+          return;\n+        }\n+        List<Long> lags = collectTotalLags();\n+        boolean allocationSuccess = dynamicAllocate(lags);\n+        if (allocationSuccess) {\n+          dynamicTriggerLastRunTime = nowTime;\n+          queue.clear();\n+        }\n+      }\n+      catch (Exception e) {\n+        log.error(e, \"Error, when parse DynamicAllocationTasksNotice\");\n+      }\n+      finally {\n+        lock.unlock();\n+      }\n+    }\n+  }\n+\n+  private boolean dynamicAllocate(List<Long> lags) throws InterruptedException, ExecutionException, TimeoutException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUwMTk5Mg==", "bodyText": "logs added in this method should provide context about what supervisor they refer to. I also think we should evaluate what logs should be changed to debug too so limit the chattiness of info level", "url": "https://github.com/apache/druid/pull/10524#discussion_r530501992", "createdAt": "2020-11-25T16:30:04Z", "author": {"login": "capistrant"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -317,6 +322,157 @@ public void handle()\n     }\n   }\n \n+  // same as submit supervisor logic\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    @Override\n+    public void handle()\n+    {\n+      lock.lock();\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        long minTriggerDynamicFrequency = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"minTriggerDynamicFrequencyMillis\", 1200000)));\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        // max(minTriggerDynamicFrequency, metricsCollectionRangeMillis)\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.info(\"PendingCompletionTaskGroups is : \" + pendingCompletionTaskGroups);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [\" + pendingCompletionTaskGroups + \"]\");\n+            return;\n+          }\n+        }\n+        if (nowTime - dynamicTriggerLastRunTime < minTriggerDynamicFrequency) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [\" + (nowTime - dynamicTriggerLastRunTime) + \"]. Defined minTriggerDynamicFrequency is [\" + minTriggerDynamicFrequency + \"] , CLAM DOWN NOW !\");\n+          return;\n+        }\n+        if (!queue.isAtFullCapacity()) {\n+          log.info(\"Metrics collection is not at full capacity, skip to check dynamic allocate task : [\" + queue.size() + \" vs \" + queue.maxSize() + \"]\");\n+          return;\n+        }\n+        List<Long> lags = collectTotalLags();\n+        boolean allocationSuccess = dynamicAllocate(lags);\n+        if (allocationSuccess) {\n+          dynamicTriggerLastRunTime = nowTime;\n+          queue.clear();\n+        }\n+      }\n+      catch (Exception e) {\n+        log.error(e, \"Error, when parse DynamicAllocationTasksNotice\");\n+      }\n+      finally {\n+        lock.unlock();\n+      }\n+    }\n+  }\n+\n+  private boolean dynamicAllocate(List<Long> lags) throws InterruptedException, ExecutionException, TimeoutException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk4NDU1Ng=="}, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUwMjI3NA==", "bodyText": "should the config defaults be instantiated as final constants at top of class?", "url": "https://github.com/apache/druid/pull/10524#discussion_r530502274", "createdAt": "2020-11-25T16:30:31Z", "author": {"login": "capistrant"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -317,6 +322,157 @@ public void handle()\n     }\n   }\n \n+  // same as submit supervisor logic\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    @Override\n+    public void handle()\n+    {\n+      lock.lock();\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        long minTriggerDynamicFrequency = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"minTriggerDynamicFrequencyMillis\", 1200000)));\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        // max(minTriggerDynamicFrequency, metricsCollectionRangeMillis)\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.info(\"PendingCompletionTaskGroups is : \" + pendingCompletionTaskGroups);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [\" + pendingCompletionTaskGroups + \"]\");\n+            return;\n+          }\n+        }\n+        if (nowTime - dynamicTriggerLastRunTime < minTriggerDynamicFrequency) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [\" + (nowTime - dynamicTriggerLastRunTime) + \"]. Defined minTriggerDynamicFrequency is [\" + minTriggerDynamicFrequency + \"] , CLAM DOWN NOW !\");\n+          return;\n+        }\n+        if (!queue.isAtFullCapacity()) {\n+          log.info(\"Metrics collection is not at full capacity, skip to check dynamic allocate task : [\" + queue.size() + \" vs \" + queue.maxSize() + \"]\");\n+          return;\n+        }\n+        List<Long> lags = collectTotalLags();\n+        boolean allocationSuccess = dynamicAllocate(lags);\n+        if (allocationSuccess) {\n+          dynamicTriggerLastRunTime = nowTime;\n+          queue.clear();\n+        }\n+      }\n+      catch (Exception e) {\n+        log.error(e, \"Error, when parse DynamicAllocationTasksNotice\");\n+      }\n+      finally {\n+        lock.unlock();\n+      }\n+    }\n+  }\n+\n+  private boolean dynamicAllocate(List<Long> lags) throws InterruptedException, ExecutionException, TimeoutException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk4NDU1Ng=="}, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY2NzU5MQ==", "bodyText": "All done.", "url": "https://github.com/apache/druid/pull/10524#discussion_r531667591", "createdAt": "2020-11-27T15:40:15Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -317,6 +322,157 @@ public void handle()\n     }\n   }\n \n+  // same as submit supervisor logic\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    @Override\n+    public void handle()\n+    {\n+      lock.lock();\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        long minTriggerDynamicFrequency = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"minTriggerDynamicFrequencyMillis\", 1200000)));\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        // max(minTriggerDynamicFrequency, metricsCollectionRangeMillis)\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.info(\"PendingCompletionTaskGroups is : \" + pendingCompletionTaskGroups);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [\" + pendingCompletionTaskGroups + \"]\");\n+            return;\n+          }\n+        }\n+        if (nowTime - dynamicTriggerLastRunTime < minTriggerDynamicFrequency) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [\" + (nowTime - dynamicTriggerLastRunTime) + \"]. Defined minTriggerDynamicFrequency is [\" + minTriggerDynamicFrequency + \"] , CLAM DOWN NOW !\");\n+          return;\n+        }\n+        if (!queue.isAtFullCapacity()) {\n+          log.info(\"Metrics collection is not at full capacity, skip to check dynamic allocate task : [\" + queue.size() + \" vs \" + queue.maxSize() + \"]\");\n+          return;\n+        }\n+        List<Long> lags = collectTotalLags();\n+        boolean allocationSuccess = dynamicAllocate(lags);\n+        if (allocationSuccess) {\n+          dynamicTriggerLastRunTime = nowTime;\n+          queue.clear();\n+        }\n+      }\n+      catch (Exception e) {\n+        log.error(e, \"Error, when parse DynamicAllocationTasksNotice\");\n+      }\n+      finally {\n+        lock.unlock();\n+      }\n+    }\n+  }\n+\n+  private boolean dynamicAllocate(List<Long> lags) throws InterruptedException, ExecutionException, TimeoutException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk4NDU1Ng=="}, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzgzMTQ3OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzowOTo1N1rOH5btxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNTozOTo0OFrOH7CZqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk4NDk2Ng==", "bodyText": "javadoc would be helpful as this is complex/important method override", "url": "https://github.com/apache/druid/pull/10524#discussion_r529984966", "createdAt": "2020-11-24T23:09:57Z", "author": {"login": "capistrant"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -317,6 +322,157 @@ public void handle()\n     }\n   }\n \n+  // same as submit supervisor logic\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    @Override\n+    public void handle()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUwMDM1OQ==", "bodyText": "also the logs added should add context about what supervisor is being logged. I think we should evaluate what logs should be changed to debug too so limit the chattiness of info level", "url": "https://github.com/apache/druid/pull/10524#discussion_r530500359", "createdAt": "2020-11-25T16:27:40Z", "author": {"login": "capistrant"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -317,6 +322,157 @@ public void handle()\n     }\n   }\n \n+  // same as submit supervisor logic\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    @Override\n+    public void handle()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk4NDk2Ng=="}, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY2NzM3MQ==", "bodyText": "Done.", "url": "https://github.com/apache/druid/pull/10524#discussion_r531667371", "createdAt": "2020-11-27T15:39:48Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -317,6 +322,157 @@ public void handle()\n     }\n   }\n \n+  // same as submit supervisor logic\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    @Override\n+    public void handle()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk4NDk2Ng=="}, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzgzODczOnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzoxMToxMFrOH5bydQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNTo0NzowNVrOH7CngA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk4NjE2NQ==", "bodyText": "javadoc please", "url": "https://github.com/apache/druid/pull/10524#discussion_r529986165", "createdAt": "2020-11-24T23:11:10Z", "author": {"login": "capistrant"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -3561,4 +3843,6 @@ protected void emitLag()\n    * sequences. In Kafka, start offsets are always inclusive.\n    */\n   protected abstract boolean useExclusiveStartSequenceNumberForNonFirstSequence();\n+\n+  protected abstract void collectLag(ArrayList<Long> lags);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 479}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY3MDkxMg==", "bodyText": "Done.", "url": "https://github.com/apache/druid/pull/10524#discussion_r531670912", "createdAt": "2020-11-27T15:47:05Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -3561,4 +3843,6 @@ protected void emitLag()\n    * sequences. In Kafka, start offsets are always inclusive.\n    */\n   protected abstract boolean useExclusiveStartSequenceNumberForNonFirstSequence();\n+\n+  protected abstract void collectLag(ArrayList<Long> lags);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk4NjE2NQ=="}, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 479}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzg0OTUzOnYy", "diffSide": "RIGHT", "path": "indexing-service/src/test/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisorStateTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzoxMjo1OVrOH5b5eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNTo0Nzo1NVrOH7Co-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk4Nzk2MA==", "bodyText": "we need to document all of these new configs in kafka-ingestion.md in the KafkaSupervisorIOConfig section", "url": "https://github.com/apache/druid/pull/10524#discussion_r529987960", "createdAt": "2020-11-24T23:12:59Z", "author": {"login": "capistrant"}, "path": "indexing-service/src/test/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisorStateTest.java", "diffHunk": "@@ -824,12 +827,32 @@ private static SeekableStreamSupervisorIOConfig getIOConfig()\n         false,\n         new Period(\"PT30M\"),\n         null,\n-        null, null\n+        null, getProperties(), null\n     )\n     {\n     };\n   }\n \n+  private static Map<String, Object> getProperties()\n+  {\n+    HashMap<String, Object> dynamicAllocationTasksProperties = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY3MTI5MA==", "bodyText": "Done.", "url": "https://github.com/apache/druid/pull/10524#discussion_r531671290", "createdAt": "2020-11-27T15:47:55Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/test/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisorStateTest.java", "diffHunk": "@@ -824,12 +827,32 @@ private static SeekableStreamSupervisorIOConfig getIOConfig()\n         false,\n         new Period(\"PT30M\"),\n         null,\n-        null, null\n+        null, getProperties(), null\n     )\n     {\n     };\n   }\n \n+  private static Map<String, Object> getProperties()\n+  {\n+    HashMap<String, Object> dynamicAllocationTasksProperties = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk4Nzk2MA=="}, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzk1NDAyOnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzozMTowMVrOH5c9XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNTo1ODoyM1rOH7C8Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAwNTM0MA==", "bodyText": "what is the reasoning behind this default of 8?", "url": "https://github.com/apache/druid/pull/10524#discussion_r530005340", "createdAt": "2020-11-24T23:31:01Z", "author": {"login": "capistrant"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -518,20 +684,52 @@ public SeekableStreamSupervisor(\n     this.useExclusiveStartingSequence = useExclusiveStartingSequence;\n     this.dataSource = spec.getDataSchema().getDataSource();\n     this.ioConfig = spec.getIoConfig();\n+    this.dynamicAllocationTasksProperties = ioConfig.getDynamicAllocationTasksProperties();\n+    log.info(\"Get dynamicAllocationTasksProperties from IOConfig : \" + dynamicAllocationTasksProperties);\n+\n+    if (dynamicAllocationTasksProperties != null && !dynamicAllocationTasksProperties.isEmpty() && Boolean.parseBoolean(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"enableDynamicAllocationTasks\", false)))) {\n+      log.info(\"EnableDynamicAllocationTasks for datasource \" + dataSource);\n+      this.enableDynamicAllocationTasks = true;\n+    } else {\n+      log.info(\"Disable Dynamic Allocate Tasks\");\n+      this.enableDynamicAllocationTasks = false;\n+    }\n+    int taskCountMax = 0;\n+    if (enableDynamicAllocationTasks) {\n+      this.metricsCollectionIntervalMillis = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"metricsCollectionIntervalMillis\", 10000)));\n+      this.metricsCollectionRangeMillis = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"metricsCollectionRangeMillis\", 6 * 10 * 1000)));\n+      int slots = (int) (metricsCollectionRangeMillis / metricsCollectionIntervalMillis) + 1;\n+      log.info(\" The interval of metrics collection is \" + metricsCollectionIntervalMillis + \", \" + metricsCollectionRangeMillis + \" timeRange will collect \" + slots + \" data points at most.\");\n+      this.queue = new CircularFifoQueue<>(slots);\n+      taskCountMax = Integer.parseInt(String.valueOf(this.dynamicAllocationTasksProperties.getOrDefault(\"taskCountMax\", 8)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 256}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY3NjIzMQ==", "bodyText": "We have deployed this auto scale feature on PRD environment for half a year. And it works stably and efficiently. The default values of all parameters are the best practice values continuously adjusted according to the online conditions. And the max number of ingest tasks in our cluster is 8. Just in case, maybe 4 is more reasonable, avoiding using up all resources. And users can set a larger value if 4 is not satisfied.", "url": "https://github.com/apache/druid/pull/10524#discussion_r531676231", "createdAt": "2020-11-27T15:58:23Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -518,20 +684,52 @@ public SeekableStreamSupervisor(\n     this.useExclusiveStartingSequence = useExclusiveStartingSequence;\n     this.dataSource = spec.getDataSchema().getDataSource();\n     this.ioConfig = spec.getIoConfig();\n+    this.dynamicAllocationTasksProperties = ioConfig.getDynamicAllocationTasksProperties();\n+    log.info(\"Get dynamicAllocationTasksProperties from IOConfig : \" + dynamicAllocationTasksProperties);\n+\n+    if (dynamicAllocationTasksProperties != null && !dynamicAllocationTasksProperties.isEmpty() && Boolean.parseBoolean(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"enableDynamicAllocationTasks\", false)))) {\n+      log.info(\"EnableDynamicAllocationTasks for datasource \" + dataSource);\n+      this.enableDynamicAllocationTasks = true;\n+    } else {\n+      log.info(\"Disable Dynamic Allocate Tasks\");\n+      this.enableDynamicAllocationTasks = false;\n+    }\n+    int taskCountMax = 0;\n+    if (enableDynamicAllocationTasks) {\n+      this.metricsCollectionIntervalMillis = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"metricsCollectionIntervalMillis\", 10000)));\n+      this.metricsCollectionRangeMillis = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"metricsCollectionRangeMillis\", 6 * 10 * 1000)));\n+      int slots = (int) (metricsCollectionRangeMillis / metricsCollectionIntervalMillis) + 1;\n+      log.info(\" The interval of metrics collection is \" + metricsCollectionIntervalMillis + \", \" + metricsCollectionRangeMillis + \" timeRange will collect \" + slots + \" data points at most.\");\n+      this.queue = new CircularFifoQueue<>(slots);\n+      taskCountMax = Integer.parseInt(String.valueOf(this.dynamicAllocationTasksProperties.getOrDefault(\"taskCountMax\", 8)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAwNTM0MA=="}, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 256}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzk2NDczOnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzozMjo1NlrOH5dEXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNTo1OToxN1rOH7C93Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAwNzEzMw==", "bodyText": "I don't think this log or the one below is needed since there aren't logs for the other Execs", "url": "https://github.com/apache/druid/pull/10524#discussion_r530007133", "createdAt": "2020-11-24T23:32:56Z", "author": {"login": "capistrant"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -652,6 +857,11 @@ public void stop(boolean stopGracefully)\n       try {\n         scheduledExec.shutdownNow(); // stop recurring executions\n         reportingExec.shutdownNow();\n+        log.info(\"Shut Down allocationExec now\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 316}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY3NjYzNw==", "bodyText": "Done.", "url": "https://github.com/apache/druid/pull/10524#discussion_r531676637", "createdAt": "2020-11-27T15:59:17Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -652,6 +857,11 @@ public void stop(boolean stopGracefully)\n       try {\n         scheduledExec.shutdownNow(); // stop recurring executions\n         reportingExec.shutdownNow();\n+        log.info(\"Shut Down allocationExec now\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAwNzEzMw=="}, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 316}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzk3OTU1OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzozNTozOFrOH5dN_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNTo1OTo1OFrOH7C_Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAwOTU5Nw==", "bodyText": "is this supposed to be collectAndComputeLags()? As far as I can tell, the log on line 982 seems to suggest that is the name you may have meant to use", "url": "https://github.com/apache/druid/pull/10524#discussion_r530009597", "createdAt": "2020-11-24T23:35:38Z", "author": {"login": "capistrant"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -791,6 +1016,38 @@ public void tryInit()\n     }\n   }\n \n+  private Runnable collectAndcollectLags()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 352}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA2MDY2MQ==", "bodyText": "also, a javadoc would be helpful too if you don't mind", "url": "https://github.com/apache/druid/pull/10524#discussion_r530060661", "createdAt": "2020-11-25T02:05:37Z", "author": {"login": "capistrant"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -791,6 +1016,38 @@ public void tryInit()\n     }\n   }\n \n+  private Runnable collectAndcollectLags()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAwOTU5Nw=="}, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 352}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY3NjkzOQ==", "bodyText": "Yes, collectAndComputeLags() is expected. Done :)", "url": "https://github.com/apache/druid/pull/10524#discussion_r531676939", "createdAt": "2020-11-27T15:59:58Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -791,6 +1016,38 @@ public void tryInit()\n     }\n   }\n \n+  private Runnable collectAndcollectLags()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAwOTU5Nw=="}, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 352}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDA0NDU5OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisorIOConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzo1NToyOFrOH5d1yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNjowMDo0MVrOH7DAbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAxOTc4Ng==", "bodyText": "as your comment says below, this could be null. Should we annotate as nullable?", "url": "https://github.com/apache/druid/pull/10524#discussion_r530019786", "createdAt": "2020-11-24T23:55:28Z", "author": {"login": "capistrant"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisorIOConfig.java", "diffHunk": "@@ -46,6 +48,7 @@\n   private final Optional<Duration> lateMessageRejectionPeriod;\n   private final Optional<Duration> earlyMessageRejectionPeriod;\n   private final Optional<DateTime> lateMessageRejectionStartDateTime;\n+  private final Map<String, Object> dynamicAllocationTasksProperties;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY3NzI5Mw==", "bodyText": "Of course.", "url": "https://github.com/apache/druid/pull/10524#discussion_r531677293", "createdAt": "2020-11-27T16:00:41Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisorIOConfig.java", "diffHunk": "@@ -46,6 +48,7 @@\n   private final Optional<Duration> lateMessageRejectionPeriod;\n   private final Optional<Duration> earlyMessageRejectionPeriod;\n   private final Optional<DateTime> lateMessageRejectionStartDateTime;\n+  private final Map<String, Object> dynamicAllocationTasksProperties;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAxOTc4Ng=="}, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDA0Njg1OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisorIOConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzo1NjozNFrOH5d3Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNTo0NzoxNlrOH7Cn1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAyMDE0Nw==", "bodyText": "should this be annotated as nullable if the instance can be null as your comment in the constructor suggests?", "url": "https://github.com/apache/druid/pull/10524#discussion_r530020147", "createdAt": "2020-11-24T23:56:34Z", "author": {"login": "capistrant"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisorIOConfig.java", "diffHunk": "@@ -113,12 +119,23 @@ public Integer getReplicas()\n     return replicas;\n   }\n \n+  @JsonProperty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY3MDk5OA==", "bodyText": "Done.", "url": "https://github.com/apache/druid/pull/10524#discussion_r531670998", "createdAt": "2020-11-27T15:47:16Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisorIOConfig.java", "diffHunk": "@@ -113,12 +119,23 @@ public Integer getReplicas()\n     return replicas;\n   }\n \n+  @JsonProperty", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAyMDE0Nw=="}, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDA1Mjk2OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzo1OToyOVrOH5d66g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNTo0Njo1OFrOH7CnWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAyMTA5OA==", "bodyText": "pretty straightforward method, but a short javadoc would be nice since we are updating an important lag related object", "url": "https://github.com/apache/druid/pull/10524#discussion_r530021098", "createdAt": "2020-11-24T23:59:29Z", "author": {"login": "capistrant"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -3526,6 +3789,25 @@ protected void emitLag()\n     }\n   }\n \n+\n+  protected void computeLags(Map<PartitionIdType, Long> partitionLags, ArrayList<Long> lags)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 453}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY3MDg3Mg==", "bodyText": "Done.", "url": "https://github.com/apache/druid/pull/10524#discussion_r531670872", "createdAt": "2020-11-27T15:46:58Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -3526,6 +3789,25 @@ protected void emitLag()\n     }\n   }\n \n+\n+  protected void computeLags(Map<PartitionIdType, Long> partitionLags, ArrayList<Long> lags)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAyMTA5OA=="}, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 453}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDA1OTEyOnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMDowMjoyM1rOH5d-dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNTo0Njo0OVrOH7CnHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAyMjAwNQ==", "bodyText": "what are the implications of this failing? we are catching and carrying on. Can anything negative come from that?", "url": "https://github.com/apache/druid/pull/10524#discussion_r530022005", "createdAt": "2020-11-25T00:02:23Z", "author": {"login": "capistrant"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -1137,6 +1394,20 @@ public void gracefulShutdownInternal() throws ExecutionException, InterruptedExc\n   @VisibleForTesting\n   public void resetInternal(DataSourceMetadata dataSourceMetadata)\n   {\n+    // clear queue for kafka lags\n+    if (enableDynamicAllocationTasks && queue != null) {\n+      try {\n+        lock.lock();\n+        queue.clear();\n+      }\n+      catch (Exception e) {\n+        log.warn(e, \"Error,when clear queue in rest action\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 398}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY3MDgxMw==", "bodyText": "If this clear action is failed. The collection of lag points may be not as accurate as expected. May interfere with scale action. But this failing rarely happens and the  impact is acceptable. Because scale action is graceful and no data will lose or duplicate.", "url": "https://github.com/apache/druid/pull/10524#discussion_r531670813", "createdAt": "2020-11-27T15:46:49Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -1137,6 +1394,20 @@ public void gracefulShutdownInternal() throws ExecutionException, InterruptedExc\n   @VisibleForTesting\n   public void resetInternal(DataSourceMetadata dataSourceMetadata)\n   {\n+    // clear queue for kafka lags\n+    if (enableDynamicAllocationTasks && queue != null) {\n+      try {\n+        lock.lock();\n+        queue.clear();\n+      }\n+      catch (Exception e) {\n+        log.warn(e, \"Error,when clear queue in rest action\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAyMjAwNQ=="}, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 398}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDA2MDQ1OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMDowMzowNVrOH5d_TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNjowMTozMFrOH7DBmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAyMjIyMA==", "bodyText": "I think refactoring with a more descriptive name would be beneficial for readability", "url": "https://github.com/apache/druid/pull/10524#discussion_r530022220", "createdAt": "2020-11-25T00:03:05Z", "author": {"login": "capistrant"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -495,6 +655,12 @@ boolean isValidTaskGroup(int taskGroupId, @Nullable TaskGroup taskGroup)\n   private volatile boolean stopped = false;\n   private volatile boolean lifecycleStarted = false;\n   private final ServiceEmitter emitter;\n+  private final boolean enableDynamicAllocationTasks;\n+  private volatile long metricsCollectionIntervalMillis;\n+  private volatile long metricsCollectionRangeMillis;\n+  private volatile long dynamicCheckStartDelayMillis;\n+  private volatile long dynamicCheckPeriod;\n+  private volatile CircularFifoQueue<Long> queue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY3NzU5Mw==", "bodyText": "Done. renamed as lagMetricsQueue", "url": "https://github.com/apache/druid/pull/10524#discussion_r531677593", "createdAt": "2020-11-27T16:01:30Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -495,6 +655,12 @@ boolean isValidTaskGroup(int taskGroupId, @Nullable TaskGroup taskGroup)\n   private volatile boolean stopped = false;\n   private volatile boolean lifecycleStarted = false;\n   private final ServiceEmitter emitter;\n+  private final boolean enableDynamicAllocationTasks;\n+  private volatile long metricsCollectionIntervalMillis;\n+  private volatile long metricsCollectionRangeMillis;\n+  private volatile long dynamicCheckStartDelayMillis;\n+  private volatile long dynamicCheckPeriod;\n+  private volatile CircularFifoQueue<Long> queue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAyMjIyMA=="}, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDM2MzkxOnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMjoyMzo1OVrOH5gq1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNjowODo1MlrOH7DNMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA2NjEzNA==", "bodyText": "I think this method deserves a more specific name as it is actually re-submitting the supervisor. Perhaps submitSupervisorWithTaskCount or something of that sort?", "url": "https://github.com/apache/druid/pull/10524#discussion_r530066134", "createdAt": "2020-11-25T02:23:59Z", "author": {"login": "capistrant"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -317,6 +322,157 @@ public void handle()\n     }\n   }\n \n+  // same as submit supervisor logic\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    @Override\n+    public void handle()\n+    {\n+      lock.lock();\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        long minTriggerDynamicFrequency = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"minTriggerDynamicFrequencyMillis\", 1200000)));\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        // max(minTriggerDynamicFrequency, metricsCollectionRangeMillis)\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.info(\"PendingCompletionTaskGroups is : \" + pendingCompletionTaskGroups);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [\" + pendingCompletionTaskGroups + \"]\");\n+            return;\n+          }\n+        }\n+        if (nowTime - dynamicTriggerLastRunTime < minTriggerDynamicFrequency) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [\" + (nowTime - dynamicTriggerLastRunTime) + \"]. Defined minTriggerDynamicFrequency is [\" + minTriggerDynamicFrequency + \"] , CLAM DOWN NOW !\");\n+          return;\n+        }\n+        if (!queue.isAtFullCapacity()) {\n+          log.info(\"Metrics collection is not at full capacity, skip to check dynamic allocate task : [\" + queue.size() + \" vs \" + queue.maxSize() + \"]\");\n+          return;\n+        }\n+        List<Long> lags = collectTotalLags();\n+        boolean allocationSuccess = dynamicAllocate(lags);\n+        if (allocationSuccess) {\n+          dynamicTriggerLastRunTime = nowTime;\n+          queue.clear();\n+        }\n+      }\n+      catch (Exception e) {\n+        log.error(e, \"Error, when parse DynamicAllocationTasksNotice\");\n+      }\n+      finally {\n+        lock.unlock();\n+      }\n+    }\n+  }\n+\n+  private boolean dynamicAllocate(List<Long> lags) throws InterruptedException, ExecutionException, TimeoutException\n+  {\n+    // if supervisor is not suspended, ensure required tasks are running\n+    // if suspended, ensure tasks have been requested to gracefully stop\n+    log.info(\"[%s] supervisor is running, start to check dynamic allocate task logic\", dataSource);\n+    long scaleOutThreshold = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"scaleOutThreshold\", 5000000)));\n+    long scaleInThreshold = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"scaleInThreshold\", 1000000)));\n+    double triggerSaleOutThresholdFrequency = Double.parseDouble(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"triggerSaleOutThresholdFrequency\", 0.3)));\n+    double triggerSaleInThresholdFrequency = Double.parseDouble(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"triggerSaleInThresholdFrequency\", 0.8)));\n+    int taskCountMax = Integer.parseInt(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"taskCountMax\", 8)));\n+    int taskCountMin = Integer.parseInt(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"taskCountMin\", 1)));\n+    int scaleInStep = Integer.parseInt(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"scaleInStep\", 1)));\n+    int scaleOutStep = Integer.parseInt(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"scaleOutStep\", 2)));\n+    int beyond = 0;\n+    int within = 0;\n+    int metricsCount = lags.size();\n+    for (Long lag : lags) {\n+      if (lag >= scaleOutThreshold) {\n+        beyond++;\n+      }\n+      if (lag <= scaleInThreshold) {\n+        within++;\n+      }\n+    }\n+    double beyondProportion = beyond * 1.0 / metricsCount;\n+    double withinProportion = within * 1.0 / metricsCount;\n+    log.info(\"triggerSaleOutThresholdFrequency is [ \" + triggerSaleOutThresholdFrequency + \" ] and triggerSaleInThresholdFrequency is [ \" + triggerSaleInThresholdFrequency + \" ]\");\n+    log.info(\"beyondProportion is [ \" + beyondProportion + \" ] and withinProportion is [ \" + withinProportion + \" ]\");\n+\n+    int currentActiveTaskCount;\n+    int desireActiveTaskCount;\n+    Collection<TaskGroup> activeTaskGroups = activelyReadingTaskGroups.values();\n+    currentActiveTaskCount = activeTaskGroups.size();\n+\n+    if (beyondProportion >= triggerSaleOutThresholdFrequency) {\n+      // Do Scale out\n+      int taskCount = currentActiveTaskCount + scaleOutStep;\n+      if (currentActiveTaskCount == taskCountMax) {\n+        log.info(\"CurrentActiveTaskCount reach task count Max limit, skip to scale out tasks\");\n+        return false;\n+      } else {\n+        desireActiveTaskCount = Math.min(taskCount, taskCountMax);\n+      }\n+      log.info(\"Start to scale out tasks , current active task number [ \" + currentActiveTaskCount + \" ] and desire task number is [ \" + desireActiveTaskCount + \" ] \");\n+      gracefulShutdownInternal();\n+      // clear everything\n+      clearAllocationInfos();\n+      log.info(\"Set Task Count : \" + desireActiveTaskCount);\n+      setTaskCount(desireActiveTaskCount);\n+      return true;\n+    }\n+\n+    if (withinProportion >= triggerSaleInThresholdFrequency) {\n+      // Do Scale in\n+      int taskCount = currentActiveTaskCount - scaleInStep;\n+      if (currentActiveTaskCount == taskCountMin) {\n+        log.info(\"CurrentActiveTaskCount reach task count Min limit, skip to scale in tasks\");\n+        return false;\n+      } else {\n+        desireActiveTaskCount = Math.max(taskCount, taskCountMin);\n+      }\n+      log.info(\"Start to scale in tasks , current active task number [ \" + currentActiveTaskCount + \" ] and desire task number is [ \" + desireActiveTaskCount + \" ] \");\n+      gracefulShutdownInternal();\n+      // clear everything\n+      clearAllocationInfos();\n+      log.info(\"Set Task Count : \" + desireActiveTaskCount);\n+      setTaskCount(desireActiveTaskCount);\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  private void setTaskCount(int desireActiveTaskCount)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUwOTQyMg==", "bodyText": "what are the consequences of failure at this point? we have called gracefulShutdownInternal so I assume we will be left with no active supervisor for the datasource?", "url": "https://github.com/apache/druid/pull/10524#discussion_r530509422", "createdAt": "2020-11-25T16:41:41Z", "author": {"login": "capistrant"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -317,6 +322,157 @@ public void handle()\n     }\n   }\n \n+  // same as submit supervisor logic\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    @Override\n+    public void handle()\n+    {\n+      lock.lock();\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        long minTriggerDynamicFrequency = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"minTriggerDynamicFrequencyMillis\", 1200000)));\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        // max(minTriggerDynamicFrequency, metricsCollectionRangeMillis)\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.info(\"PendingCompletionTaskGroups is : \" + pendingCompletionTaskGroups);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [\" + pendingCompletionTaskGroups + \"]\");\n+            return;\n+          }\n+        }\n+        if (nowTime - dynamicTriggerLastRunTime < minTriggerDynamicFrequency) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [\" + (nowTime - dynamicTriggerLastRunTime) + \"]. Defined minTriggerDynamicFrequency is [\" + minTriggerDynamicFrequency + \"] , CLAM DOWN NOW !\");\n+          return;\n+        }\n+        if (!queue.isAtFullCapacity()) {\n+          log.info(\"Metrics collection is not at full capacity, skip to check dynamic allocate task : [\" + queue.size() + \" vs \" + queue.maxSize() + \"]\");\n+          return;\n+        }\n+        List<Long> lags = collectTotalLags();\n+        boolean allocationSuccess = dynamicAllocate(lags);\n+        if (allocationSuccess) {\n+          dynamicTriggerLastRunTime = nowTime;\n+          queue.clear();\n+        }\n+      }\n+      catch (Exception e) {\n+        log.error(e, \"Error, when parse DynamicAllocationTasksNotice\");\n+      }\n+      finally {\n+        lock.unlock();\n+      }\n+    }\n+  }\n+\n+  private boolean dynamicAllocate(List<Long> lags) throws InterruptedException, ExecutionException, TimeoutException\n+  {\n+    // if supervisor is not suspended, ensure required tasks are running\n+    // if suspended, ensure tasks have been requested to gracefully stop\n+    log.info(\"[%s] supervisor is running, start to check dynamic allocate task logic\", dataSource);\n+    long scaleOutThreshold = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"scaleOutThreshold\", 5000000)));\n+    long scaleInThreshold = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"scaleInThreshold\", 1000000)));\n+    double triggerSaleOutThresholdFrequency = Double.parseDouble(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"triggerSaleOutThresholdFrequency\", 0.3)));\n+    double triggerSaleInThresholdFrequency = Double.parseDouble(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"triggerSaleInThresholdFrequency\", 0.8)));\n+    int taskCountMax = Integer.parseInt(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"taskCountMax\", 8)));\n+    int taskCountMin = Integer.parseInt(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"taskCountMin\", 1)));\n+    int scaleInStep = Integer.parseInt(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"scaleInStep\", 1)));\n+    int scaleOutStep = Integer.parseInt(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"scaleOutStep\", 2)));\n+    int beyond = 0;\n+    int within = 0;\n+    int metricsCount = lags.size();\n+    for (Long lag : lags) {\n+      if (lag >= scaleOutThreshold) {\n+        beyond++;\n+      }\n+      if (lag <= scaleInThreshold) {\n+        within++;\n+      }\n+    }\n+    double beyondProportion = beyond * 1.0 / metricsCount;\n+    double withinProportion = within * 1.0 / metricsCount;\n+    log.info(\"triggerSaleOutThresholdFrequency is [ \" + triggerSaleOutThresholdFrequency + \" ] and triggerSaleInThresholdFrequency is [ \" + triggerSaleInThresholdFrequency + \" ]\");\n+    log.info(\"beyondProportion is [ \" + beyondProportion + \" ] and withinProportion is [ \" + withinProportion + \" ]\");\n+\n+    int currentActiveTaskCount;\n+    int desireActiveTaskCount;\n+    Collection<TaskGroup> activeTaskGroups = activelyReadingTaskGroups.values();\n+    currentActiveTaskCount = activeTaskGroups.size();\n+\n+    if (beyondProportion >= triggerSaleOutThresholdFrequency) {\n+      // Do Scale out\n+      int taskCount = currentActiveTaskCount + scaleOutStep;\n+      if (currentActiveTaskCount == taskCountMax) {\n+        log.info(\"CurrentActiveTaskCount reach task count Max limit, skip to scale out tasks\");\n+        return false;\n+      } else {\n+        desireActiveTaskCount = Math.min(taskCount, taskCountMax);\n+      }\n+      log.info(\"Start to scale out tasks , current active task number [ \" + currentActiveTaskCount + \" ] and desire task number is [ \" + desireActiveTaskCount + \" ] \");\n+      gracefulShutdownInternal();\n+      // clear everything\n+      clearAllocationInfos();\n+      log.info(\"Set Task Count : \" + desireActiveTaskCount);\n+      setTaskCount(desireActiveTaskCount);\n+      return true;\n+    }\n+\n+    if (withinProportion >= triggerSaleInThresholdFrequency) {\n+      // Do Scale in\n+      int taskCount = currentActiveTaskCount - scaleInStep;\n+      if (currentActiveTaskCount == taskCountMin) {\n+        log.info(\"CurrentActiveTaskCount reach task count Min limit, skip to scale in tasks\");\n+        return false;\n+      } else {\n+        desireActiveTaskCount = Math.max(taskCount, taskCountMin);\n+      }\n+      log.info(\"Start to scale in tasks , current active task number [ \" + currentActiveTaskCount + \" ] and desire task number is [ \" + desireActiveTaskCount + \" ] \");\n+      gracefulShutdownInternal();\n+      // clear everything\n+      clearAllocationInfos();\n+      log.info(\"Set Task Count : \" + desireActiveTaskCount);\n+      setTaskCount(desireActiveTaskCount);\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  private void setTaskCount(int desireActiveTaskCount)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA2NjEzNA=="}, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY4MDU2Mw==", "bodyText": "renamed as changeTaskCountInIOConfig\nthe method gracefulShutdownInternal will not suspend the supervisor. It will make the ingest tasks stop reading and start to publish data. So that whether the func fails or not, the supervisor is always active. What's more, if this func failed, current scale action will be canceled. And will try another scale action in dynamicCheckPeriod.", "url": "https://github.com/apache/druid/pull/10524#discussion_r531680563", "createdAt": "2020-11-27T16:08:52Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -317,6 +322,157 @@ public void handle()\n     }\n   }\n \n+  // same as submit supervisor logic\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    @Override\n+    public void handle()\n+    {\n+      lock.lock();\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        long minTriggerDynamicFrequency = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"minTriggerDynamicFrequencyMillis\", 1200000)));\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        // max(minTriggerDynamicFrequency, metricsCollectionRangeMillis)\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.info(\"PendingCompletionTaskGroups is : \" + pendingCompletionTaskGroups);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [\" + pendingCompletionTaskGroups + \"]\");\n+            return;\n+          }\n+        }\n+        if (nowTime - dynamicTriggerLastRunTime < minTriggerDynamicFrequency) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [\" + (nowTime - dynamicTriggerLastRunTime) + \"]. Defined minTriggerDynamicFrequency is [\" + minTriggerDynamicFrequency + \"] , CLAM DOWN NOW !\");\n+          return;\n+        }\n+        if (!queue.isAtFullCapacity()) {\n+          log.info(\"Metrics collection is not at full capacity, skip to check dynamic allocate task : [\" + queue.size() + \" vs \" + queue.maxSize() + \"]\");\n+          return;\n+        }\n+        List<Long> lags = collectTotalLags();\n+        boolean allocationSuccess = dynamicAllocate(lags);\n+        if (allocationSuccess) {\n+          dynamicTriggerLastRunTime = nowTime;\n+          queue.clear();\n+        }\n+      }\n+      catch (Exception e) {\n+        log.error(e, \"Error, when parse DynamicAllocationTasksNotice\");\n+      }\n+      finally {\n+        lock.unlock();\n+      }\n+    }\n+  }\n+\n+  private boolean dynamicAllocate(List<Long> lags) throws InterruptedException, ExecutionException, TimeoutException\n+  {\n+    // if supervisor is not suspended, ensure required tasks are running\n+    // if suspended, ensure tasks have been requested to gracefully stop\n+    log.info(\"[%s] supervisor is running, start to check dynamic allocate task logic\", dataSource);\n+    long scaleOutThreshold = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"scaleOutThreshold\", 5000000)));\n+    long scaleInThreshold = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"scaleInThreshold\", 1000000)));\n+    double triggerSaleOutThresholdFrequency = Double.parseDouble(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"triggerSaleOutThresholdFrequency\", 0.3)));\n+    double triggerSaleInThresholdFrequency = Double.parseDouble(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"triggerSaleInThresholdFrequency\", 0.8)));\n+    int taskCountMax = Integer.parseInt(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"taskCountMax\", 8)));\n+    int taskCountMin = Integer.parseInt(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"taskCountMin\", 1)));\n+    int scaleInStep = Integer.parseInt(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"scaleInStep\", 1)));\n+    int scaleOutStep = Integer.parseInt(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"scaleOutStep\", 2)));\n+    int beyond = 0;\n+    int within = 0;\n+    int metricsCount = lags.size();\n+    for (Long lag : lags) {\n+      if (lag >= scaleOutThreshold) {\n+        beyond++;\n+      }\n+      if (lag <= scaleInThreshold) {\n+        within++;\n+      }\n+    }\n+    double beyondProportion = beyond * 1.0 / metricsCount;\n+    double withinProportion = within * 1.0 / metricsCount;\n+    log.info(\"triggerSaleOutThresholdFrequency is [ \" + triggerSaleOutThresholdFrequency + \" ] and triggerSaleInThresholdFrequency is [ \" + triggerSaleInThresholdFrequency + \" ]\");\n+    log.info(\"beyondProportion is [ \" + beyondProportion + \" ] and withinProportion is [ \" + withinProportion + \" ]\");\n+\n+    int currentActiveTaskCount;\n+    int desireActiveTaskCount;\n+    Collection<TaskGroup> activeTaskGroups = activelyReadingTaskGroups.values();\n+    currentActiveTaskCount = activeTaskGroups.size();\n+\n+    if (beyondProportion >= triggerSaleOutThresholdFrequency) {\n+      // Do Scale out\n+      int taskCount = currentActiveTaskCount + scaleOutStep;\n+      if (currentActiveTaskCount == taskCountMax) {\n+        log.info(\"CurrentActiveTaskCount reach task count Max limit, skip to scale out tasks\");\n+        return false;\n+      } else {\n+        desireActiveTaskCount = Math.min(taskCount, taskCountMax);\n+      }\n+      log.info(\"Start to scale out tasks , current active task number [ \" + currentActiveTaskCount + \" ] and desire task number is [ \" + desireActiveTaskCount + \" ] \");\n+      gracefulShutdownInternal();\n+      // clear everything\n+      clearAllocationInfos();\n+      log.info(\"Set Task Count : \" + desireActiveTaskCount);\n+      setTaskCount(desireActiveTaskCount);\n+      return true;\n+    }\n+\n+    if (withinProportion >= triggerSaleInThresholdFrequency) {\n+      // Do Scale in\n+      int taskCount = currentActiveTaskCount - scaleInStep;\n+      if (currentActiveTaskCount == taskCountMin) {\n+        log.info(\"CurrentActiveTaskCount reach task count Min limit, skip to scale in tasks\");\n+        return false;\n+      } else {\n+        desireActiveTaskCount = Math.max(taskCount, taskCountMin);\n+      }\n+      log.info(\"Start to scale in tasks , current active task number [ \" + currentActiveTaskCount + \" ] and desire task number is [ \" + desireActiveTaskCount + \" ] \");\n+      gracefulShutdownInternal();\n+      // clear everything\n+      clearAllocationInfos();\n+      log.info(\"Set Task Count : \" + desireActiveTaskCount);\n+      setTaskCount(desireActiveTaskCount);\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  private void setTaskCount(int desireActiveTaskCount)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA2NjEzNA=="}, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzE2MjI2OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjoyMjoxNlrOH568UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNTo0MDozOVrOH7CbbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ5NjU5Mw==", "bodyText": "same thought about debug level and context about the supervisor it is referring to", "url": "https://github.com/apache/druid/pull/10524#discussion_r530496593", "createdAt": "2020-11-25T16:22:16Z", "author": {"login": "capistrant"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -518,20 +684,52 @@ public SeekableStreamSupervisor(\n     this.useExclusiveStartingSequence = useExclusiveStartingSequence;\n     this.dataSource = spec.getDataSchema().getDataSource();\n     this.ioConfig = spec.getIoConfig();\n+    this.dynamicAllocationTasksProperties = ioConfig.getDynamicAllocationTasksProperties();\n+    log.info(\"Get dynamicAllocationTasksProperties from IOConfig : \" + dynamicAllocationTasksProperties);\n+\n+    if (dynamicAllocationTasksProperties != null && !dynamicAllocationTasksProperties.isEmpty() && Boolean.parseBoolean(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"enableDynamicAllocationTasks\", false)))) {\n+      log.info(\"EnableDynamicAllocationTasks for datasource \" + dataSource);\n+      this.enableDynamicAllocationTasks = true;\n+    } else {\n+      log.info(\"Disable Dynamic Allocate Tasks\");\n+      this.enableDynamicAllocationTasks = false;\n+    }\n+    int taskCountMax = 0;\n+    if (enableDynamicAllocationTasks) {\n+      this.metricsCollectionIntervalMillis = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"metricsCollectionIntervalMillis\", 10000)));\n+      this.metricsCollectionRangeMillis = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"metricsCollectionRangeMillis\", 6 * 10 * 1000)));\n+      int slots = (int) (metricsCollectionRangeMillis / metricsCollectionIntervalMillis) + 1;\n+      log.info(\" The interval of metrics collection is \" + metricsCollectionIntervalMillis + \", \" + metricsCollectionRangeMillis + \" timeRange will collect \" + slots + \" data points at most.\");\n+      this.queue = new CircularFifoQueue<>(slots);\n+      taskCountMax = Integer.parseInt(String.valueOf(this.dynamicAllocationTasksProperties.getOrDefault(\"taskCountMax\", 8)));\n+      this.dynamicCheckStartDelayMillis = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"dynamicCheckStartDelayMillis\", 300000)));\n+      this.dynamicCheckPeriod = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"dynamicCheckPeriod\", 600000)));\n+      this.metricsCollectionRangeMillis = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"metricsCollectionRangeMillis\", 600000)));\n+    }\n+\n     this.tuningConfig = spec.getTuningConfig();\n     this.taskTuningConfig = this.tuningConfig.convertToTaskTuningConfig();\n     this.supervisorId = supervisorId;\n     this.exec = Execs.singleThreaded(supervisorId);\n     this.scheduledExec = Execs.scheduledSingleThreaded(supervisorId + \"-Scheduler-%d\");\n     this.reportingExec = Execs.scheduledSingleThreaded(supervisorId + \"-Reporting-%d\");\n+    this.allocationExec = Execs.scheduledSingleThreaded(supervisorId + \"-Allocation-%d\");\n+    this.lagComputationExec = Execs.scheduledSingleThreaded(supervisorId + \"-Computation-%d\");\n     this.stateManager = new SeekableStreamSupervisorStateManager(\n         spec.getSupervisorStateManagerConfig(),\n         spec.isSuspended()\n     );\n \n-    int workerThreads = (this.tuningConfig.getWorkerThreads() != null\n-                         ? this.tuningConfig.getWorkerThreads()\n-                         : Math.min(10, this.ioConfig.getTaskCount()));\n+    int workerThreads;\n+    if (enableDynamicAllocationTasks) {\n+      workerThreads = (this.tuningConfig.getWorkerThreads() != null\n+              ? this.tuningConfig.getWorkerThreads()\n+              : Math.min(10, taskCountMax));\n+    } else {\n+      workerThreads = (this.tuningConfig.getWorkerThreads() != null\n+              ? this.tuningConfig.getWorkerThreads()\n+              : Math.min(10, this.ioConfig.getTaskCount()));\n+    }\n \n     this.workerExec = MoreExecutors.listeningDecorator(Execs.multiThreaded(workerThreads, supervisorId + \"-Worker-%d\"));\n     log.info(\"Created worker pool with [%d] threads for dataSource [%s]\", workerThreads, this.dataSource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 290}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY2NzgyMQ==", "bodyText": "Done.", "url": "https://github.com/apache/druid/pull/10524#discussion_r531667821", "createdAt": "2020-11-27T15:40:39Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -518,20 +684,52 @@ public SeekableStreamSupervisor(\n     this.useExclusiveStartingSequence = useExclusiveStartingSequence;\n     this.dataSource = spec.getDataSchema().getDataSource();\n     this.ioConfig = spec.getIoConfig();\n+    this.dynamicAllocationTasksProperties = ioConfig.getDynamicAllocationTasksProperties();\n+    log.info(\"Get dynamicAllocationTasksProperties from IOConfig : \" + dynamicAllocationTasksProperties);\n+\n+    if (dynamicAllocationTasksProperties != null && !dynamicAllocationTasksProperties.isEmpty() && Boolean.parseBoolean(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"enableDynamicAllocationTasks\", false)))) {\n+      log.info(\"EnableDynamicAllocationTasks for datasource \" + dataSource);\n+      this.enableDynamicAllocationTasks = true;\n+    } else {\n+      log.info(\"Disable Dynamic Allocate Tasks\");\n+      this.enableDynamicAllocationTasks = false;\n+    }\n+    int taskCountMax = 0;\n+    if (enableDynamicAllocationTasks) {\n+      this.metricsCollectionIntervalMillis = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"metricsCollectionIntervalMillis\", 10000)));\n+      this.metricsCollectionRangeMillis = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"metricsCollectionRangeMillis\", 6 * 10 * 1000)));\n+      int slots = (int) (metricsCollectionRangeMillis / metricsCollectionIntervalMillis) + 1;\n+      log.info(\" The interval of metrics collection is \" + metricsCollectionIntervalMillis + \", \" + metricsCollectionRangeMillis + \" timeRange will collect \" + slots + \" data points at most.\");\n+      this.queue = new CircularFifoQueue<>(slots);\n+      taskCountMax = Integer.parseInt(String.valueOf(this.dynamicAllocationTasksProperties.getOrDefault(\"taskCountMax\", 8)));\n+      this.dynamicCheckStartDelayMillis = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"dynamicCheckStartDelayMillis\", 300000)));\n+      this.dynamicCheckPeriod = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"dynamicCheckPeriod\", 600000)));\n+      this.metricsCollectionRangeMillis = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"metricsCollectionRangeMillis\", 600000)));\n+    }\n+\n     this.tuningConfig = spec.getTuningConfig();\n     this.taskTuningConfig = this.tuningConfig.convertToTaskTuningConfig();\n     this.supervisorId = supervisorId;\n     this.exec = Execs.singleThreaded(supervisorId);\n     this.scheduledExec = Execs.scheduledSingleThreaded(supervisorId + \"-Scheduler-%d\");\n     this.reportingExec = Execs.scheduledSingleThreaded(supervisorId + \"-Reporting-%d\");\n+    this.allocationExec = Execs.scheduledSingleThreaded(supervisorId + \"-Allocation-%d\");\n+    this.lagComputationExec = Execs.scheduledSingleThreaded(supervisorId + \"-Computation-%d\");\n     this.stateManager = new SeekableStreamSupervisorStateManager(\n         spec.getSupervisorStateManagerConfig(),\n         spec.isSuspended()\n     );\n \n-    int workerThreads = (this.tuningConfig.getWorkerThreads() != null\n-                         ? this.tuningConfig.getWorkerThreads()\n-                         : Math.min(10, this.ioConfig.getTaskCount()));\n+    int workerThreads;\n+    if (enableDynamicAllocationTasks) {\n+      workerThreads = (this.tuningConfig.getWorkerThreads() != null\n+              ? this.tuningConfig.getWorkerThreads()\n+              : Math.min(10, taskCountMax));\n+    } else {\n+      workerThreads = (this.tuningConfig.getWorkerThreads() != null\n+              ? this.tuningConfig.getWorkerThreads()\n+              : Math.min(10, this.ioConfig.getTaskCount()));\n+    }\n \n     this.workerExec = MoreExecutors.listeningDecorator(Execs.multiThreaded(workerThreads, supervisorId + \"-Worker-%d\"));\n     log.info(\"Created worker pool with [%d] threads for dataSource [%s]\", workerThreads, this.dataSource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ5NjU5Mw=="}, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 290}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzE3NDQ2OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjoyNTowNlrOH57Dxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNjoyMzo1OFrOH7DlMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ5ODUwMg==", "bodyText": "wondering if it would be better to have all these defaults be final constants instantiated at top of class for easy reference?", "url": "https://github.com/apache/druid/pull/10524#discussion_r530498502", "createdAt": "2020-11-25T16:25:06Z", "author": {"login": "capistrant"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -518,20 +684,52 @@ public SeekableStreamSupervisor(\n     this.useExclusiveStartingSequence = useExclusiveStartingSequence;\n     this.dataSource = spec.getDataSchema().getDataSource();\n     this.ioConfig = spec.getIoConfig();\n+    this.dynamicAllocationTasksProperties = ioConfig.getDynamicAllocationTasksProperties();\n+    log.info(\"Get dynamicAllocationTasksProperties from IOConfig : \" + dynamicAllocationTasksProperties);\n+\n+    if (dynamicAllocationTasksProperties != null && !dynamicAllocationTasksProperties.isEmpty() && Boolean.parseBoolean(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"enableDynamicAllocationTasks\", false)))) {\n+      log.info(\"EnableDynamicAllocationTasks for datasource \" + dataSource);\n+      this.enableDynamicAllocationTasks = true;\n+    } else {\n+      log.info(\"Disable Dynamic Allocate Tasks\");\n+      this.enableDynamicAllocationTasks = false;\n+    }\n+    int taskCountMax = 0;\n+    if (enableDynamicAllocationTasks) {\n+      this.metricsCollectionIntervalMillis = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"metricsCollectionIntervalMillis\", 10000)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 251}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY4NjcwNw==", "bodyText": "Done.", "url": "https://github.com/apache/druid/pull/10524#discussion_r531686707", "createdAt": "2020-11-27T16:23:58Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -518,20 +684,52 @@ public SeekableStreamSupervisor(\n     this.useExclusiveStartingSequence = useExclusiveStartingSequence;\n     this.dataSource = spec.getDataSchema().getDataSource();\n     this.ioConfig = spec.getIoConfig();\n+    this.dynamicAllocationTasksProperties = ioConfig.getDynamicAllocationTasksProperties();\n+    log.info(\"Get dynamicAllocationTasksProperties from IOConfig : \" + dynamicAllocationTasksProperties);\n+\n+    if (dynamicAllocationTasksProperties != null && !dynamicAllocationTasksProperties.isEmpty() && Boolean.parseBoolean(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"enableDynamicAllocationTasks\", false)))) {\n+      log.info(\"EnableDynamicAllocationTasks for datasource \" + dataSource);\n+      this.enableDynamicAllocationTasks = true;\n+    } else {\n+      log.info(\"Disable Dynamic Allocate Tasks\");\n+      this.enableDynamicAllocationTasks = false;\n+    }\n+    int taskCountMax = 0;\n+    if (enableDynamicAllocationTasks) {\n+      this.metricsCollectionIntervalMillis = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"metricsCollectionIntervalMillis\", 10000)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ5ODUwMg=="}, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 251}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzE4MDQ4OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjoyNjoyNFrOH57Hiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNjoyNDowNVrOH7DlXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ5OTQ2Nw==", "bodyText": "wondering if this default value should be final constant instantiated at top of class?", "url": "https://github.com/apache/druid/pull/10524#discussion_r530499467", "createdAt": "2020-11-25T16:26:24Z", "author": {"login": "capistrant"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -317,6 +322,157 @@ public void handle()\n     }\n   }\n \n+  // same as submit supervisor logic\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    @Override\n+    public void handle()\n+    {\n+      lock.lock();\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        long minTriggerDynamicFrequency = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"minTriggerDynamicFrequencyMillis\", 1200000)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY4Njc0OA==", "bodyText": "Done.", "url": "https://github.com/apache/druid/pull/10524#discussion_r531686748", "createdAt": "2020-11-27T16:24:05Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -317,6 +322,157 @@ public void handle()\n     }\n   }\n \n+  // same as submit supervisor logic\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    @Override\n+    public void handle()\n+    {\n+      lock.lock();\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        long minTriggerDynamicFrequency = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"minTriggerDynamicFrequencyMillis\", 1200000)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ5OTQ2Nw=="}, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzI1NjEyOnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjo0NDoxN1rOH5714g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNTo0MDoyNlrOH7Ca5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUxMTMzMA==", "bodyText": "logs in this constructor should include info on the supervisor being referred to. I think we should also evaluate what can be debug to reduce chattiness in info level logging.", "url": "https://github.com/apache/druid/pull/10524#discussion_r530511330", "createdAt": "2020-11-25T16:44:17Z", "author": {"login": "capistrant"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -495,6 +655,12 @@ boolean isValidTaskGroup(int taskGroupId, @Nullable TaskGroup taskGroup)\n   private volatile boolean stopped = false;\n   private volatile boolean lifecycleStarted = false;\n   private final ServiceEmitter emitter;\n+  private final boolean enableDynamicAllocationTasks;\n+  private volatile long metricsCollectionIntervalMillis;\n+  private volatile long metricsCollectionRangeMillis;\n+  private volatile long dynamicCheckStartDelayMillis;\n+  private volatile long dynamicCheckPeriod;\n+  private volatile CircularFifoQueue<Long> queue;\n \n   public SeekableStreamSupervisor(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY2NzY4NA==", "bodyText": "Done.", "url": "https://github.com/apache/druid/pull/10524#discussion_r531667684", "createdAt": "2020-11-27T15:40:26Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -495,6 +655,12 @@ boolean isValidTaskGroup(int taskGroupId, @Nullable TaskGroup taskGroup)\n   private volatile boolean stopped = false;\n   private volatile boolean lifecycleStarted = false;\n   private final ServiceEmitter emitter;\n+  private final boolean enableDynamicAllocationTasks;\n+  private volatile long metricsCollectionIntervalMillis;\n+  private volatile long metricsCollectionRangeMillis;\n+  private volatile long dynamicCheckStartDelayMillis;\n+  private volatile long dynamicCheckPeriod;\n+  private volatile CircularFifoQueue<Long> queue;\n \n   public SeekableStreamSupervisor(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUxMTMzMA=="}, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 233}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzI2NDY5OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjo0NjoxNlrOH577MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNjoyNDoxMlrOH7Dlfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUxMjY4OA==", "bodyText": "include reference to the datasource in this log and the one for the lag computation executor below. Should they be debug to reduce info level chattiness?", "url": "https://github.com/apache/druid/pull/10524#discussion_r530512688", "createdAt": "2020-11-25T16:46:16Z", "author": {"login": "capistrant"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -768,7 +978,22 @@ public void tryInit()\n         );\n \n         scheduleReporting(reportingExec);\n-\n+        if (enableDynamicAllocationTasks) {\n+          log.info(\"Collect and compute lags at fixed rate of \" + metricsCollectionIntervalMillis);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 330}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY4Njc4Mg==", "bodyText": "Done.", "url": "https://github.com/apache/druid/pull/10524#discussion_r531686782", "createdAt": "2020-11-27T16:24:12Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -768,7 +978,22 @@ public void tryInit()\n         );\n \n         scheduleReporting(reportingExec);\n-\n+        if (enableDynamicAllocationTasks) {\n+          log.info(\"Collect and compute lags at fixed rate of \" + metricsCollectionIntervalMillis);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUxMjY4OA=="}, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 330}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzMwMjA2OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjo1NTowMlrOH58Rqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNTo0MDo0OVrOH7Cbtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUxODQ0Mg==", "bodyText": "logs should provide context about what supervisor they are referring. As in other places, lets assess what can be changed to debug to reduce chattiness", "url": "https://github.com/apache/druid/pull/10524#discussion_r530518442", "createdAt": "2020-11-25T16:55:02Z", "author": {"login": "capistrant"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -791,6 +1016,38 @@ public void tryInit()\n     }\n   }\n \n+  private Runnable collectAndcollectLags()\n+  {\n+    return new Runnable() {\n+      @Override\n+      public void run()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 356}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY2Nzg5NQ==", "bodyText": "Done.", "url": "https://github.com/apache/druid/pull/10524#discussion_r531667895", "createdAt": "2020-11-27T15:40:49Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -791,6 +1016,38 @@ public void tryInit()\n     }\n   }\n \n+  private Runnable collectAndcollectLags()\n+  {\n+    return new Runnable() {\n+      @Override\n+      public void run()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUxODQ0Mg=="}, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 356}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzMwNDU3OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjo1NTozMFrOH58TFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNjoyNDoyN1rOH7Dl-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUxODgwNQ==", "bodyText": "should this be warn if we catch and move on?", "url": "https://github.com/apache/druid/pull/10524#discussion_r530518805", "createdAt": "2020-11-25T16:55:30Z", "author": {"login": "capistrant"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -791,6 +1016,38 @@ public void tryInit()\n     }\n   }\n \n+  private Runnable collectAndcollectLags()\n+  {\n+    return new Runnable() {\n+      @Override\n+      public void run()\n+      {\n+        lock.lock();\n+        try {\n+          if (!spec.isSuspended()) {\n+            ArrayList<Long> metricsInfo = new ArrayList<>(3);\n+            collectLag(metricsInfo);\n+            long totalLags = metricsInfo.size() < 3 ? 0 : metricsInfo.get(1);\n+            queue.offer(totalLags > 0 ? totalLags : 0);\n+            log.info(\"Current lag metric points : \" + new ArrayList<>(queue));\n+          } else {\n+            log.info(\"[%s] supervisor is suspended, skip to collect kafka lags\", dataSource);\n+          }\n+        }\n+        catch (Exception e) {\n+          log.error(e, \"Error, When collect kafka lags\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 371}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY4NjkwNQ==", "bodyText": "Done.", "url": "https://github.com/apache/druid/pull/10524#discussion_r531686905", "createdAt": "2020-11-27T16:24:27Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -791,6 +1016,38 @@ public void tryInit()\n     }\n   }\n \n+  private Runnable collectAndcollectLags()\n+  {\n+    return new Runnable() {\n+      @Override\n+      public void run()\n+      {\n+        lock.lock();\n+        try {\n+          if (!spec.isSuspended()) {\n+            ArrayList<Long> metricsInfo = new ArrayList<>(3);\n+            collectLag(metricsInfo);\n+            long totalLags = metricsInfo.size() < 3 ? 0 : metricsInfo.get(1);\n+            queue.offer(totalLags > 0 ? totalLags : 0);\n+            log.info(\"Current lag metric points : \" + new ArrayList<>(queue));\n+          } else {\n+            log.info(\"[%s] supervisor is suspended, skip to collect kafka lags\", dataSource);\n+          }\n+        }\n+        catch (Exception e) {\n+          log.error(e, \"Error, When collect kafka lags\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUxODgwNQ=="}, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 371}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzMyODcxOnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzowMToyN1rOH58h5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNjoyNDozNlrOH7DmQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyMjU5Nw==", "bodyText": "does this mean we have not collected enough historical lag data to decide on scale in/scale out? I think the log can be updated to be more descriptive since it may not be obvious to log reader why it matters that queue is not full", "url": "https://github.com/apache/druid/pull/10524#discussion_r530522597", "createdAt": "2020-11-25T17:01:27Z", "author": {"login": "capistrant"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -317,6 +322,157 @@ public void handle()\n     }\n   }\n \n+  // same as submit supervisor logic\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    @Override\n+    public void handle()\n+    {\n+      lock.lock();\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        long minTriggerDynamicFrequency = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"minTriggerDynamicFrequencyMillis\", 1200000)));\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        // max(minTriggerDynamicFrequency, metricsCollectionRangeMillis)\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.info(\"PendingCompletionTaskGroups is : \" + pendingCompletionTaskGroups);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [\" + pendingCompletionTaskGroups + \"]\");\n+            return;\n+          }\n+        }\n+        if (nowTime - dynamicTriggerLastRunTime < minTriggerDynamicFrequency) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [\" + (nowTime - dynamicTriggerLastRunTime) + \"]. Defined minTriggerDynamicFrequency is [\" + minTriggerDynamicFrequency + \"] , CLAM DOWN NOW !\");\n+          return;\n+        }\n+        if (!queue.isAtFullCapacity()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY4Njk3Nw==", "bodyText": "Done.", "url": "https://github.com/apache/druid/pull/10524#discussion_r531686977", "createdAt": "2020-11-27T16:24:36Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -317,6 +322,157 @@ public void handle()\n     }\n   }\n \n+  // same as submit supervisor logic\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    @Override\n+    public void handle()\n+    {\n+      lock.lock();\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        long minTriggerDynamicFrequency = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"minTriggerDynamicFrequencyMillis\", 1200000)));\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        // max(minTriggerDynamicFrequency, metricsCollectionRangeMillis)\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.info(\"PendingCompletionTaskGroups is : \" + pendingCompletionTaskGroups);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [\" + pendingCompletionTaskGroups + \"]\");\n+            return;\n+          }\n+        }\n+        if (nowTime - dynamicTriggerLastRunTime < minTriggerDynamicFrequency) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [\" + (nowTime - dynamicTriggerLastRunTime) + \"]. Defined minTriggerDynamicFrequency is [\" + minTriggerDynamicFrequency + \"] , CLAM DOWN NOW !\");\n+          return;\n+        }\n+        if (!queue.isAtFullCapacity()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyMjU5Nw=="}, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzMzNzkyOnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzowMzo1N1rOH58nrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNjoyNDo0MlrOH7DmZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNDA3OA==", "bodyText": "I think these may be spelling mistakes in variable name and config value for this and next config. triggerSale* --> triggerScale* ?", "url": "https://github.com/apache/druid/pull/10524#discussion_r530524078", "createdAt": "2020-11-25T17:03:57Z", "author": {"login": "capistrant"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -317,6 +322,157 @@ public void handle()\n     }\n   }\n \n+  // same as submit supervisor logic\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    @Override\n+    public void handle()\n+    {\n+      lock.lock();\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        long minTriggerDynamicFrequency = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"minTriggerDynamicFrequencyMillis\", 1200000)));\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        // max(minTriggerDynamicFrequency, metricsCollectionRangeMillis)\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.info(\"PendingCompletionTaskGroups is : \" + pendingCompletionTaskGroups);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [\" + pendingCompletionTaskGroups + \"]\");\n+            return;\n+          }\n+        }\n+        if (nowTime - dynamicTriggerLastRunTime < minTriggerDynamicFrequency) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [\" + (nowTime - dynamicTriggerLastRunTime) + \"]. Defined minTriggerDynamicFrequency is [\" + minTriggerDynamicFrequency + \"] , CLAM DOWN NOW !\");\n+          return;\n+        }\n+        if (!queue.isAtFullCapacity()) {\n+          log.info(\"Metrics collection is not at full capacity, skip to check dynamic allocate task : [\" + queue.size() + \" vs \" + queue.maxSize() + \"]\");\n+          return;\n+        }\n+        List<Long> lags = collectTotalLags();\n+        boolean allocationSuccess = dynamicAllocate(lags);\n+        if (allocationSuccess) {\n+          dynamicTriggerLastRunTime = nowTime;\n+          queue.clear();\n+        }\n+      }\n+      catch (Exception e) {\n+        log.error(e, \"Error, when parse DynamicAllocationTasksNotice\");\n+      }\n+      finally {\n+        lock.unlock();\n+      }\n+    }\n+  }\n+\n+  private boolean dynamicAllocate(List<Long> lags) throws InterruptedException, ExecutionException, TimeoutException\n+  {\n+    // if supervisor is not suspended, ensure required tasks are running\n+    // if suspended, ensure tasks have been requested to gracefully stop\n+    log.info(\"[%s] supervisor is running, start to check dynamic allocate task logic\", dataSource);\n+    long scaleOutThreshold = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"scaleOutThreshold\", 5000000)));\n+    long scaleInThreshold = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"scaleInThreshold\", 1000000)));\n+    double triggerSaleOutThresholdFrequency = Double.parseDouble(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"triggerSaleOutThresholdFrequency\", 0.3)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY4NzAxNA==", "bodyText": "Done.", "url": "https://github.com/apache/druid/pull/10524#discussion_r531687014", "createdAt": "2020-11-27T16:24:42Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -317,6 +322,157 @@ public void handle()\n     }\n   }\n \n+  // same as submit supervisor logic\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    @Override\n+    public void handle()\n+    {\n+      lock.lock();\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        long minTriggerDynamicFrequency = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"minTriggerDynamicFrequencyMillis\", 1200000)));\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        // max(minTriggerDynamicFrequency, metricsCollectionRangeMillis)\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.info(\"PendingCompletionTaskGroups is : \" + pendingCompletionTaskGroups);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [\" + pendingCompletionTaskGroups + \"]\");\n+            return;\n+          }\n+        }\n+        if (nowTime - dynamicTriggerLastRunTime < minTriggerDynamicFrequency) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [\" + (nowTime - dynamicTriggerLastRunTime) + \"]. Defined minTriggerDynamicFrequency is [\" + minTriggerDynamicFrequency + \"] , CLAM DOWN NOW !\");\n+          return;\n+        }\n+        if (!queue.isAtFullCapacity()) {\n+          log.info(\"Metrics collection is not at full capacity, skip to check dynamic allocate task : [\" + queue.size() + \" vs \" + queue.maxSize() + \"]\");\n+          return;\n+        }\n+        List<Long> lags = collectTotalLags();\n+        boolean allocationSuccess = dynamicAllocate(lags);\n+        if (allocationSuccess) {\n+          dynamicTriggerLastRunTime = nowTime;\n+          queue.clear();\n+        }\n+      }\n+      catch (Exception e) {\n+        log.error(e, \"Error, when parse DynamicAllocationTasksNotice\");\n+      }\n+      finally {\n+        lock.unlock();\n+      }\n+    }\n+  }\n+\n+  private boolean dynamicAllocate(List<Long> lags) throws InterruptedException, ExecutionException, TimeoutException\n+  {\n+    // if supervisor is not suspended, ensure required tasks are running\n+    // if suspended, ensure tasks have been requested to gracefully stop\n+    log.info(\"[%s] supervisor is running, start to check dynamic allocate task logic\", dataSource);\n+    long scaleOutThreshold = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"scaleOutThreshold\", 5000000)));\n+    long scaleInThreshold = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"scaleInThreshold\", 1000000)));\n+    double triggerSaleOutThresholdFrequency = Double.parseDouble(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"triggerSaleOutThresholdFrequency\", 0.3)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNDA3OA=="}, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzM0NzcwOnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzowNjoyMVrOH58tfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNjoyNDo0OVrOH7Dmmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNTU2Ng==", "bodyText": "same spelling callout as above", "url": "https://github.com/apache/druid/pull/10524#discussion_r530525566", "createdAt": "2020-11-25T17:06:21Z", "author": {"login": "capistrant"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -317,6 +322,157 @@ public void handle()\n     }\n   }\n \n+  // same as submit supervisor logic\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    @Override\n+    public void handle()\n+    {\n+      lock.lock();\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        long minTriggerDynamicFrequency = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"minTriggerDynamicFrequencyMillis\", 1200000)));\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        // max(minTriggerDynamicFrequency, metricsCollectionRangeMillis)\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.info(\"PendingCompletionTaskGroups is : \" + pendingCompletionTaskGroups);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [\" + pendingCompletionTaskGroups + \"]\");\n+            return;\n+          }\n+        }\n+        if (nowTime - dynamicTriggerLastRunTime < minTriggerDynamicFrequency) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [\" + (nowTime - dynamicTriggerLastRunTime) + \"]. Defined minTriggerDynamicFrequency is [\" + minTriggerDynamicFrequency + \"] , CLAM DOWN NOW !\");\n+          return;\n+        }\n+        if (!queue.isAtFullCapacity()) {\n+          log.info(\"Metrics collection is not at full capacity, skip to check dynamic allocate task : [\" + queue.size() + \" vs \" + queue.maxSize() + \"]\");\n+          return;\n+        }\n+        List<Long> lags = collectTotalLags();\n+        boolean allocationSuccess = dynamicAllocate(lags);\n+        if (allocationSuccess) {\n+          dynamicTriggerLastRunTime = nowTime;\n+          queue.clear();\n+        }\n+      }\n+      catch (Exception e) {\n+        log.error(e, \"Error, when parse DynamicAllocationTasksNotice\");\n+      }\n+      finally {\n+        lock.unlock();\n+      }\n+    }\n+  }\n+\n+  private boolean dynamicAllocate(List<Long> lags) throws InterruptedException, ExecutionException, TimeoutException\n+  {\n+    // if supervisor is not suspended, ensure required tasks are running\n+    // if suspended, ensure tasks have been requested to gracefully stop\n+    log.info(\"[%s] supervisor is running, start to check dynamic allocate task logic\", dataSource);\n+    long scaleOutThreshold = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"scaleOutThreshold\", 5000000)));\n+    long scaleInThreshold = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"scaleInThreshold\", 1000000)));\n+    double triggerSaleOutThresholdFrequency = Double.parseDouble(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"triggerSaleOutThresholdFrequency\", 0.3)));\n+    double triggerSaleInThresholdFrequency = Double.parseDouble(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"triggerSaleInThresholdFrequency\", 0.8)));\n+    int taskCountMax = Integer.parseInt(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"taskCountMax\", 8)));\n+    int taskCountMin = Integer.parseInt(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"taskCountMin\", 1)));\n+    int scaleInStep = Integer.parseInt(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"scaleInStep\", 1)));\n+    int scaleOutStep = Integer.parseInt(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"scaleOutStep\", 2)));\n+    int beyond = 0;\n+    int within = 0;\n+    int metricsCount = lags.size();\n+    for (Long lag : lags) {\n+      if (lag >= scaleOutThreshold) {\n+        beyond++;\n+      }\n+      if (lag <= scaleInThreshold) {\n+        within++;\n+      }\n+    }\n+    double beyondProportion = beyond * 1.0 / metricsCount;\n+    double withinProportion = within * 1.0 / metricsCount;\n+    log.info(\"triggerSaleOutThresholdFrequency is [ \" + triggerSaleOutThresholdFrequency + \" ] and triggerSaleInThresholdFrequency is [ \" + triggerSaleInThresholdFrequency + \" ]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY4NzA2Ng==", "bodyText": "Done.", "url": "https://github.com/apache/druid/pull/10524#discussion_r531687066", "createdAt": "2020-11-27T16:24:49Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -317,6 +322,157 @@ public void handle()\n     }\n   }\n \n+  // same as submit supervisor logic\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    @Override\n+    public void handle()\n+    {\n+      lock.lock();\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        long minTriggerDynamicFrequency = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"minTriggerDynamicFrequencyMillis\", 1200000)));\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        // max(minTriggerDynamicFrequency, metricsCollectionRangeMillis)\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.info(\"PendingCompletionTaskGroups is : \" + pendingCompletionTaskGroups);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [\" + pendingCompletionTaskGroups + \"]\");\n+            return;\n+          }\n+        }\n+        if (nowTime - dynamicTriggerLastRunTime < minTriggerDynamicFrequency) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [\" + (nowTime - dynamicTriggerLastRunTime) + \"]. Defined minTriggerDynamicFrequency is [\" + minTriggerDynamicFrequency + \"] , CLAM DOWN NOW !\");\n+          return;\n+        }\n+        if (!queue.isAtFullCapacity()) {\n+          log.info(\"Metrics collection is not at full capacity, skip to check dynamic allocate task : [\" + queue.size() + \" vs \" + queue.maxSize() + \"]\");\n+          return;\n+        }\n+        List<Long> lags = collectTotalLags();\n+        boolean allocationSuccess = dynamicAllocate(lags);\n+        if (allocationSuccess) {\n+          dynamicTriggerLastRunTime = nowTime;\n+          queue.clear();\n+        }\n+      }\n+      catch (Exception e) {\n+        log.error(e, \"Error, when parse DynamicAllocationTasksNotice\");\n+      }\n+      finally {\n+        lock.unlock();\n+      }\n+    }\n+  }\n+\n+  private boolean dynamicAllocate(List<Long> lags) throws InterruptedException, ExecutionException, TimeoutException\n+  {\n+    // if supervisor is not suspended, ensure required tasks are running\n+    // if suspended, ensure tasks have been requested to gracefully stop\n+    log.info(\"[%s] supervisor is running, start to check dynamic allocate task logic\", dataSource);\n+    long scaleOutThreshold = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"scaleOutThreshold\", 5000000)));\n+    long scaleInThreshold = Long.parseLong(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"scaleInThreshold\", 1000000)));\n+    double triggerSaleOutThresholdFrequency = Double.parseDouble(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"triggerSaleOutThresholdFrequency\", 0.3)));\n+    double triggerSaleInThresholdFrequency = Double.parseDouble(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"triggerSaleInThresholdFrequency\", 0.8)));\n+    int taskCountMax = Integer.parseInt(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"taskCountMax\", 8)));\n+    int taskCountMin = Integer.parseInt(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"taskCountMin\", 1)));\n+    int scaleInStep = Integer.parseInt(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"scaleInStep\", 1)));\n+    int scaleOutStep = Integer.parseInt(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"scaleOutStep\", 2)));\n+    int beyond = 0;\n+    int within = 0;\n+    int metricsCount = lags.size();\n+    for (Long lag : lags) {\n+      if (lag >= scaleOutThreshold) {\n+        beyond++;\n+      }\n+      if (lag <= scaleInThreshold) {\n+        within++;\n+      }\n+    }\n+    double beyondProportion = beyond * 1.0 / metricsCount;\n+    double withinProportion = within * 1.0 / metricsCount;\n+    log.info(\"triggerSaleOutThresholdFrequency is [ \" + triggerSaleOutThresholdFrequency + \" ] and triggerSaleInThresholdFrequency is [ \" + triggerSaleInThresholdFrequency + \" ]\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUyNTU2Ng=="}, "originalCommit": {"oid": "78cbd45577dccc3abd39fb03db6d2a9298e6c252"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwNjY3MzQyOnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwMToxNjozMFrOITLdkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwNjoyNDoxMlrOIfkdQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njk4MTY0OQ==", "bodyText": "nit: I see that concept of storing lag stats in ArrayList<Long> predates your PR, it might be simpler to define a new class like and change to..... and make related changes in other places where this ArrayList is used\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              protected abstract void collectLag(ArrayList<Long> lags);\n          \n          \n            \n              protected abstract LagStats computeLagStats();\n          \n          \n            \n              \n          \n          \n            \n              static class LagStats\n          \n          \n            \n              {\n          \n          \n            \n                private final long maxLag;\n          \n          \n            \n                private final long totalLag;\n          \n          \n            \n                private final long avgLag;\n          \n          \n            \n            \n          \n          \n            \n                public LagStats(long maxLag, long totalLag, long avgLag)\n          \n          \n            \n                {\n          \n          \n            \n                  this.maxLag = maxLag;\n          \n          \n            \n                  this.totalLag = totalLag;\n          \n          \n            \n                  this.avgLag = avgLag;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public long getMaxLag()\n          \n          \n            \n                {\n          \n          \n            \n                  return maxLag;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public long getTotalLag()\n          \n          \n            \n                {\n          \n          \n            \n                  return totalLag;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public long getAvgLag()\n          \n          \n            \n                {\n          \n          \n            \n                  return avgLag;\n          \n          \n            \n                }\n          \n          \n            \n              }", "url": "https://github.com/apache/druid/pull/10524#discussion_r556981649", "createdAt": "2021-01-14T01:16:30Z", "author": {"login": "himanshug"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -3561,4 +3874,11 @@ protected void emitLag()\n    * sequences. In Kafka, start offsets are always inclusive.\n    */\n   protected abstract boolean useExclusiveStartSequenceNumberForNonFirstSequence();\n+\n+  /**\n+   * Collect maxLag, totalLag, avgLag into ArrayList<Long> lags\n+   * Only support Kafka ingestion so far.\n+   * @param lags , Notice : The order of values is maxLag, totalLag and avgLag.\n+   */\n+  protected abstract void collectLag(ArrayList<Long> lags);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a0d706626ab82ac438cb4c7c3ba89b4b94e653b"}, "originalPosition": 511}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTk3NDA4MA==", "bodyText": "Nice idea. Changed.", "url": "https://github.com/apache/druid/pull/10524#discussion_r569974080", "createdAt": "2021-02-04T06:24:12Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -3561,4 +3874,11 @@ protected void emitLag()\n    * sequences. In Kafka, start offsets are always inclusive.\n    */\n   protected abstract boolean useExclusiveStartSequenceNumberForNonFirstSequence();\n+\n+  /**\n+   * Collect maxLag, totalLag, avgLag into ArrayList<Long> lags\n+   * Only support Kafka ingestion so far.\n+   * @param lags , Notice : The order of values is maxLag, totalLag and avgLag.\n+   */\n+  protected abstract void collectLag(ArrayList<Long> lags);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njk4MTY0OQ=="}, "originalCommit": {"oid": "4a0d706626ab82ac438cb4c7c3ba89b4b94e653b"}, "originalPosition": 511}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzNTU0OTg2OnYy", "diffSide": "RIGHT", "path": "extensions-contrib/materialized-view-maintenance/src/main/java/org/apache/druid/indexing/materializedview/MaterializedViewSupervisorSpec.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwMjowMTowNFrOIXdQLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwNjoyNDoyMVrOIfkdew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQ2NzQzNg==", "bodyText": "can this be added as default impl in SupervisorSpec interface?", "url": "https://github.com/apache/druid/pull/10524#discussion_r561467436", "createdAt": "2021-01-21T02:01:04Z", "author": {"login": "himanshug"}, "path": "extensions-contrib/materialized-view-maintenance/src/main/java/org/apache/druid/indexing/materializedview/MaterializedViewSupervisorSpec.java", "diffHunk": "@@ -361,6 +362,12 @@ public Supervisor createSupervisor()\n     );\n   }\n \n+  @Override\n+  public SupervisorTaskAutoscaler createAutoscaler(Supervisor supervisor)\n+  {\n+    return null;\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57811be4b6fb66a4cfe7e32267a5730bb7e57e48"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTk3NDEzOQ==", "bodyText": "changed.", "url": "https://github.com/apache/druid/pull/10524#discussion_r569974139", "createdAt": "2021-02-04T06:24:21Z", "author": {"login": "zhangyue19921010"}, "path": "extensions-contrib/materialized-view-maintenance/src/main/java/org/apache/druid/indexing/materializedview/MaterializedViewSupervisorSpec.java", "diffHunk": "@@ -361,6 +362,12 @@ public Supervisor createSupervisor()\n     );\n   }\n \n+  @Override\n+  public SupervisorTaskAutoscaler createAutoscaler(Supervisor supervisor)\n+  {\n+    return null;\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQ2NzQzNg=="}, "originalCommit": {"oid": "57811be4b6fb66a4cfe7e32267a5730bb7e57e48"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MDMyMDg1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/indexing/overlord/supervisor/Supervisor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwMDoyNToxNlrOId6XFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwNjo0MDozMVrOIfk0DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODIzNTc5OA==", "bodyText": "At this time, I think this is very specific to KafkaSupervisor and it seems that currently we only want to support autoscaling for kafka indexing , so I would say in this PR, we rename DefaultAutoScaler to KafkaIndexingDefaultAutoScaler and let KafkaIndexingDefaultAutoScaler cast Supervisor to KafkaSupervisor so as to use KafkaSupervisor.collectLag(..) directly and not have it in the interface.\nIf, at a later time, Kinesis starts using it in some form, then Supervisor interface can be modified at that time.", "url": "https://github.com/apache/druid/pull/10524#discussion_r568235798", "createdAt": "2021-02-02T00:25:16Z", "author": {"login": "himanshug"}, "path": "server/src/main/java/org/apache/druid/indexing/overlord/supervisor/Supervisor.java", "diffHunk": "@@ -64,4 +66,18 @@ default Boolean isHealthy()\n    * @param checkpointMetadata metadata for the sequence to currently checkpoint\n    */\n   void checkpoint(int taskGroupId, DataSourceMetadata checkpointMetadata);\n+\n+  /**\n+   * Collect maxLag, totalLag, avgLag into ArrayList<Long> lags\n+   * Only support Kafka ingestion so far.\n+   * @param lags , Notice : The order of values is maxLag, totalLag and avgLag.\n+   */\n+  void collectLag(ArrayList<Long> lags);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09d3d5d4f8374f29288994c955945cb1e33199e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTk3OTkxNg==", "bodyText": "Ya, for now, we only support Kafka autoScaler. But based on \n  \n    \n      druid/indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java\n    \n    \n         Line 3499\n      in\n      118b501\n    \n    \n    \n    \n\n        \n          \n           Map<PartitionIdType, Long> partitionTimeLags = getPartitionTimeLag(); \n        \n    \n  \n\n It   may be not hard to support kinesis autoscaler. And I'm glad to work on it soon. So maybe keep the code abstract is more meaningful and there are plenty preparation to ensure that users will not set kinesis auto scale by accident:\n\nDocs mention\nthrow new UnsupportedOperationException(\"Tasks auto scaler for kinesis is not supported yet. Please remove autoscalerConfig or set it null!\"); in KinesisSupervisorIOConfig\nset autoscalerConfig = null when super(xxx) in KinesisSupervisorIOConfig\n\nAlso we can't cast Supervisor to KafkaSupervisor directly unless add an extra dependency druid-kafka-indexing-service in indexing-service module.", "url": "https://github.com/apache/druid/pull/10524#discussion_r569979916", "createdAt": "2021-02-04T06:40:31Z", "author": {"login": "zhangyue19921010"}, "path": "server/src/main/java/org/apache/druid/indexing/overlord/supervisor/Supervisor.java", "diffHunk": "@@ -64,4 +66,18 @@ default Boolean isHealthy()\n    * @param checkpointMetadata metadata for the sequence to currently checkpoint\n    */\n   void checkpoint(int taskGroupId, DataSourceMetadata checkpointMetadata);\n+\n+  /**\n+   * Collect maxLag, totalLag, avgLag into ArrayList<Long> lags\n+   * Only support Kafka ingestion so far.\n+   * @param lags , Notice : The order of values is maxLag, totalLag and avgLag.\n+   */\n+  void collectLag(ArrayList<Long> lags);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODIzNTc5OA=="}, "originalCommit": {"oid": "f09d3d5d4f8374f29288994c955945cb1e33199e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MDMyNTcyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/indexing/overlord/supervisor/Supervisor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwMDoyNzoxMFrOId6Z7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwNjo0MzozNlrOIfk4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODIzNjUyNA==", "bodyText": "can we instead have void reconcileTaskCount() which looks at current task count in the io config, and does things to match that many number of active tasks.\nautoscale impl would be responsible for updating the task count in task io config and then calling this method.", "url": "https://github.com/apache/druid/pull/10524#discussion_r568236524", "createdAt": "2021-02-02T00:27:10Z", "author": {"login": "himanshug"}, "path": "server/src/main/java/org/apache/druid/indexing/overlord/supervisor/Supervisor.java", "diffHunk": "@@ -64,4 +66,18 @@ default Boolean isHealthy()\n    * @param checkpointMetadata metadata for the sequence to currently checkpoint\n    */\n   void checkpoint(int taskGroupId, DataSourceMetadata checkpointMetadata);\n+\n+  /**\n+   * Collect maxLag, totalLag, avgLag into ArrayList<Long> lags\n+   * Only support Kafka ingestion so far.\n+   * @param lags , Notice : The order of values is maxLag, totalLag and avgLag.\n+   */\n+  void collectLag(ArrayList<Long> lags);\n+\n+  /**\n+   * use for autoscaler\n+   */\n+  Runnable buildDynamicAllocationTask(Callable<Integer> scaleAction);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09d3d5d4f8374f29288994c955945cb1e33199e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTk4MDk4MQ==", "bodyText": "Nice catch! I review the code and find out there is no need for this buildDynamicAllocationTask  method in Supervisor.java and autoscaler can build autoscale notice itself and supervisor will do scale action.\nSo I removed buildDynamicAllocationTask func in Supervisor.java", "url": "https://github.com/apache/druid/pull/10524#discussion_r569980981", "createdAt": "2021-02-04T06:43:36Z", "author": {"login": "zhangyue19921010"}, "path": "server/src/main/java/org/apache/druid/indexing/overlord/supervisor/Supervisor.java", "diffHunk": "@@ -64,4 +66,18 @@ default Boolean isHealthy()\n    * @param checkpointMetadata metadata for the sequence to currently checkpoint\n    */\n   void checkpoint(int taskGroupId, DataSourceMetadata checkpointMetadata);\n+\n+  /**\n+   * Collect maxLag, totalLag, avgLag into ArrayList<Long> lags\n+   * Only support Kafka ingestion so far.\n+   * @param lags , Notice : The order of values is maxLag, totalLag and avgLag.\n+   */\n+  void collectLag(ArrayList<Long> lags);\n+\n+  /**\n+   * use for autoscaler\n+   */\n+  Runnable buildDynamicAllocationTask(Callable<Integer> scaleAction);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODIzNjUyNA=="}, "originalCommit": {"oid": "f09d3d5d4f8374f29288994c955945cb1e33199e"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MDMyOTg2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/indexing/overlord/supervisor/Supervisor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwMDoyODowN1rOId6cfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwNjo0Mzo0OFrOIfk4bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODIzNzE4Mw==", "bodyText": "seems we only really need the active task group count, so, can we have int getActiveTaskGroupsCount() instead ?", "url": "https://github.com/apache/druid/pull/10524#discussion_r568237183", "createdAt": "2021-02-02T00:28:07Z", "author": {"login": "himanshug"}, "path": "server/src/main/java/org/apache/druid/indexing/overlord/supervisor/Supervisor.java", "diffHunk": "@@ -64,4 +66,18 @@ default Boolean isHealthy()\n    * @param checkpointMetadata metadata for the sequence to currently checkpoint\n    */\n   void checkpoint(int taskGroupId, DataSourceMetadata checkpointMetadata);\n+\n+  /**\n+   * Collect maxLag, totalLag, avgLag into ArrayList<Long> lags\n+   * Only support Kafka ingestion so far.\n+   * @param lags , Notice : The order of values is maxLag, totalLag and avgLag.\n+   */\n+  void collectLag(ArrayList<Long> lags);\n+\n+  /**\n+   * use for autoscaler\n+   */\n+  Runnable buildDynamicAllocationTask(Callable<Integer> scaleAction);\n+\n+  Map getSupervisorTaskInfos();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09d3d5d4f8374f29288994c955945cb1e33199e"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTk4MTAzNg==", "bodyText": "Sure. Changed.", "url": "https://github.com/apache/druid/pull/10524#discussion_r569981036", "createdAt": "2021-02-04T06:43:48Z", "author": {"login": "zhangyue19921010"}, "path": "server/src/main/java/org/apache/druid/indexing/overlord/supervisor/Supervisor.java", "diffHunk": "@@ -64,4 +66,18 @@ default Boolean isHealthy()\n    * @param checkpointMetadata metadata for the sequence to currently checkpoint\n    */\n   void checkpoint(int taskGroupId, DataSourceMetadata checkpointMetadata);\n+\n+  /**\n+   * Collect maxLag, totalLag, avgLag into ArrayList<Long> lags\n+   * Only support Kafka ingestion so far.\n+   * @param lags , Notice : The order of values is maxLag, totalLag and avgLag.\n+   */\n+  void collectLag(ArrayList<Long> lags);\n+\n+  /**\n+   * use for autoscaler\n+   */\n+  Runnable buildDynamicAllocationTask(Callable<Integer> scaleAction);\n+\n+  Map getSupervisorTaskInfos();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODIzNzE4Mw=="}, "originalCommit": {"oid": "f09d3d5d4f8374f29288994c955945cb1e33199e"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MDMzNjMxOnYy", "diffSide": "RIGHT", "path": "extensions-contrib/materialized-view-maintenance/src/main/java/org/apache/druid/indexing/materializedview/MaterializedViewSupervisor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwMDozMDo0M1rOId6gPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwNjo0NDowMVrOIfk4tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODIzODE0Mw==", "bodyText": "these should throw UnSupportedOperationException instead as they are not supposed to be called", "url": "https://github.com/apache/druid/pull/10524#discussion_r568238143", "createdAt": "2021-02-02T00:30:43Z", "author": {"login": "himanshug"}, "path": "extensions-contrib/materialized-view-maintenance/src/main/java/org/apache/druid/indexing/materializedview/MaterializedViewSupervisor.java", "diffHunk": "@@ -282,6 +283,23 @@ public void checkpoint(int taskGroupId, DataSourceMetadata checkpointMetadata)\n     // do nothing\n   }\n \n+  @Override\n+  public void collectLag(ArrayList<Long> lags)\n+  {\n+  }\n+\n+  @Override\n+  public Runnable buildDynamicAllocationTask(Callable<Integer> scaleAction)\n+  {\n+    return null;\n+  }\n+\n+  @Override\n+  public Map getSupervisorTaskInfos()\n+  {\n+    return null;\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09d3d5d4f8374f29288994c955945cb1e33199e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTk4MTExMA==", "bodyText": "Sure. Done.", "url": "https://github.com/apache/druid/pull/10524#discussion_r569981110", "createdAt": "2021-02-04T06:44:01Z", "author": {"login": "zhangyue19921010"}, "path": "extensions-contrib/materialized-view-maintenance/src/main/java/org/apache/druid/indexing/materializedview/MaterializedViewSupervisor.java", "diffHunk": "@@ -282,6 +283,23 @@ public void checkpoint(int taskGroupId, DataSourceMetadata checkpointMetadata)\n     // do nothing\n   }\n \n+  @Override\n+  public void collectLag(ArrayList<Long> lags)\n+  {\n+  }\n+\n+  @Override\n+  public Runnable buildDynamicAllocationTask(Callable<Integer> scaleAction)\n+  {\n+    return null;\n+  }\n+\n+  @Override\n+  public Map getSupervisorTaskInfos()\n+  {\n+    return null;\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODIzODE0Mw=="}, "originalCommit": {"oid": "f09d3d5d4f8374f29288994c955945cb1e33199e"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MDM0MDAyOnYy", "diffSide": "RIGHT", "path": "extensions-core/kinesis-indexing-service/src/main/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisorIOConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwMDozMjozMVrOId6idg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwNzo1OTo0OVrOIfm6ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODIzODcxMA==", "bodyText": "we should actually throw exception if someone sets this on a kinesis supervisor spec ... as that is not expected.", "url": "https://github.com/apache/druid/pull/10524#discussion_r568238710", "createdAt": "2021-02-02T00:32:31Z", "author": {"login": "himanshug"}, "path": "extensions-core/kinesis-indexing-service/src/main/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisorIOConfig.java", "diffHunk": "@@ -70,6 +72,7 @@ public KinesisSupervisorIOConfig(\n       @JsonProperty(\"fetchDelayMillis\") Integer fetchDelayMillis,\n       @JsonProperty(\"awsAssumedRoleArn\") String awsAssumedRoleArn,\n       @JsonProperty(\"awsExternalId\") String awsExternalId,\n+      @JsonProperty(\"dynamicAllocationTasksProperties\") Map<String, Object> dynamicAllocationTasksProperties,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09d3d5d4f8374f29288994c955945cb1e33199e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDAxNDMwOA==", "bodyText": "Sure. Done.", "url": "https://github.com/apache/druid/pull/10524#discussion_r570014308", "createdAt": "2021-02-04T07:59:49Z", "author": {"login": "zhangyue19921010"}, "path": "extensions-core/kinesis-indexing-service/src/main/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisorIOConfig.java", "diffHunk": "@@ -70,6 +72,7 @@ public KinesisSupervisorIOConfig(\n       @JsonProperty(\"fetchDelayMillis\") Integer fetchDelayMillis,\n       @JsonProperty(\"awsAssumedRoleArn\") String awsAssumedRoleArn,\n       @JsonProperty(\"awsExternalId\") String awsExternalId,\n+      @JsonProperty(\"dynamicAllocationTasksProperties\") Map<String, Object> dynamicAllocationTasksProperties,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODIzODcxMA=="}, "originalCommit": {"oid": "f09d3d5d4f8374f29288994c955945cb1e33199e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MDM4NTA1OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwMDo0OTozMFrOId69kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwNjo1MToyM1rOIflDfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI0NTY1MQ==", "bodyText": "could we instead get a handle to SupervisorTaskAutoscaler and have SupervisorTaskAutoscaler.getMaxTaskCount() provide maximum task count ?", "url": "https://github.com/apache/druid/pull/10524#discussion_r568245651", "createdAt": "2021-02-02T00:49:30Z", "author": {"login": "himanshug"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -519,20 +636,40 @@ public SeekableStreamSupervisor(\n     this.useExclusiveStartingSequence = useExclusiveStartingSequence;\n     this.dataSource = spec.getDataSchema().getDataSource();\n     this.ioConfig = spec.getIoConfig();\n+    this.dynamicAllocationTasksProperties = ioConfig.getDynamicAllocationTasksProperties();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09d3d5d4f8374f29288994c955945cb1e33199e"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTk4Mzg3MA==", "bodyText": "Sure, It is a little strange that use map.getOrDefault() here, because default value is hard to be unified.\nI modified the way of obtaining configurations from Map to new interface AutoScalerConfig with a default impl DefaultAutoScaleConfig. So that we can use JackSon to Instantiate a Config with default values instead of map.get/parse everywhere. Also ensure consistency of default values.\nIn this way, we don't need to get a handle to SupervisorTaskAutoscaler, just autoScalerConfig.getTaskCountMax() :)", "url": "https://github.com/apache/druid/pull/10524#discussion_r569983870", "createdAt": "2021-02-04T06:51:23Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -519,20 +636,40 @@ public SeekableStreamSupervisor(\n     this.useExclusiveStartingSequence = useExclusiveStartingSequence;\n     this.dataSource = spec.getDataSchema().getDataSource();\n     this.ioConfig = spec.getIoConfig();\n+    this.dynamicAllocationTasksProperties = ioConfig.getDynamicAllocationTasksProperties();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI0NTY1MQ=="}, "originalCommit": {"oid": "f09d3d5d4f8374f29288994c955945cb1e33199e"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MDQwMDE2OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwMDo1NjowMVrOId7GiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwNzowMTozM1rOIflTqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI0Nzk0NA==", "bodyText": "this type of logic should live inside the autoscaler impl I think which should decide when to trigger the autoscaling", "url": "https://github.com/apache/druid/pull/10524#discussion_r568247944", "createdAt": "2021-02-02T00:56:01Z", "author": {"login": "himanshug"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -318,6 +322,114 @@ public void handle()\n     }\n   }\n \n+  // change taskCount without resubmitting.\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    Callable<Integer> scaleAction;\n+\n+    DynamicAllocationTasksNotice(Callable<Integer> scaleAction)\n+    {\n+      this.scaleAction = scaleAction;\n+    }\n+\n+    /**\n+     * This method will do lags points collection and check dynamic scale action is necessary or not.\n+     */\n+    @Override\n+    public void handle()\n+    {\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.debug(\"PendingCompletionTaskGroups is [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+            return;\n+          }\n+        }\n+        if (nowTime - dynamicTriggerLastRunTime < minTriggerDynamicFrequency) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09d3d5d4f8374f29288994c955945cb1e33199e"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTk4ODAwOQ==", "bodyText": "Thanks for your attention.\nActually, there are three hard conditions before do scale action:\n\nDon't scale when supervisor is suspended.\nDon't scale when previous task is handing off to avoid inconsistent state.\nDon't scale durning cool down time to avoid overly frequent scaling.\n\nAnd I think no matter what the task type is, no matter what the autoscaler impl is, it maybe better to follow these three common conditions.\nAlso users can define their own conditions like TaskCountLimitation in specific impl :)", "url": "https://github.com/apache/druid/pull/10524#discussion_r569988009", "createdAt": "2021-02-04T07:01:33Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -318,6 +322,114 @@ public void handle()\n     }\n   }\n \n+  // change taskCount without resubmitting.\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    Callable<Integer> scaleAction;\n+\n+    DynamicAllocationTasksNotice(Callable<Integer> scaleAction)\n+    {\n+      this.scaleAction = scaleAction;\n+    }\n+\n+    /**\n+     * This method will do lags points collection and check dynamic scale action is necessary or not.\n+     */\n+    @Override\n+    public void handle()\n+    {\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.debug(\"PendingCompletionTaskGroups is [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+            return;\n+          }\n+        }\n+        if (nowTime - dynamicTriggerLastRunTime < minTriggerDynamicFrequency) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI0Nzk0NA=="}, "originalCommit": {"oid": "f09d3d5d4f8374f29288994c955945cb1e33199e"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MDQwODYwOnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisorSpec.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwMDo1OTozMVrOId7LTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwNzozNTowM1rOIfmLOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI0OTE2Ng==", "bodyText": "I am not sure why we need extra property enableDynamicAllocationTasks, if user added a non-null dynamicAllocationTasksProperties that alone should mean that user wanted to enable autoscaling.", "url": "https://github.com/apache/druid/pull/10524#discussion_r568249166", "createdAt": "2021-02-02T00:59:31Z", "author": {"login": "himanshug"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisorSpec.java", "diffHunk": "@@ -151,6 +156,29 @@ public DruidMonitorSchedulerConfig getMonitorSchedulerConfig()\n   @Override\n   public abstract Supervisor createSupervisor();\n \n+  /**\n+   * need to notice that autoScaler would be null which means autoscale is dissable.\n+   * @param supervisor\n+   * @return autoScaler, disable autoscale will return dummyAutoScaler and enable autoscale wiil return defaultAutoScaler by default.\n+   */\n+  @Override\n+  @SuppressFBWarnings(value = \"RV_RETURN_VALUE_IGNORED\", justification = \"using siwtch(String)\")\n+  public SupervisorTaskAutoscaler createAutoscaler(Supervisor supervisor)\n+  {\n+    String dataSource = getId();\n+    SupervisorTaskAutoscaler autoScaler = new DummyAutoScaler(supervisor, dataSource);\n+    Map<String, Object> dynamicAllocationTasksProperties = ingestionSchema.getIOConfig().getDynamicAllocationTasksProperties();\n+    if (dynamicAllocationTasksProperties != null && !dynamicAllocationTasksProperties.isEmpty() && Boolean.parseBoolean(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"enableDynamicAllocationTasks\", false)))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09d3d5d4f8374f29288994c955945cb1e33199e"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDAwMjIzNA==", "bodyText": "The reason for designing this condition is that users can disable/enable autoscaler for a while easily using this config rather than delete all the autoscaler-related configs.\nFor examples, advertising business in Super Bowl. Traffic is much higher during the break time and lower durning Gaming(Large traffic fluctuations in the short term). If users don't set scale-related configs properly, it will trigger scale action too frequently and creates lots of small segments.\nTraffic like this we usually set a larger number of tasks temporarily and set it false to disable autoscaler for a while.\nAlso when scale algorithms become more advanced, it is better to remove this config and let autoscaler to do everything. But for now maybe it would be better if we keep this parameter :)", "url": "https://github.com/apache/druid/pull/10524#discussion_r570002234", "createdAt": "2021-02-04T07:35:03Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisorSpec.java", "diffHunk": "@@ -151,6 +156,29 @@ public DruidMonitorSchedulerConfig getMonitorSchedulerConfig()\n   @Override\n   public abstract Supervisor createSupervisor();\n \n+  /**\n+   * need to notice that autoScaler would be null which means autoscale is dissable.\n+   * @param supervisor\n+   * @return autoScaler, disable autoscale will return dummyAutoScaler and enable autoscale wiil return defaultAutoScaler by default.\n+   */\n+  @Override\n+  @SuppressFBWarnings(value = \"RV_RETURN_VALUE_IGNORED\", justification = \"using siwtch(String)\")\n+  public SupervisorTaskAutoscaler createAutoscaler(Supervisor supervisor)\n+  {\n+    String dataSource = getId();\n+    SupervisorTaskAutoscaler autoScaler = new DummyAutoScaler(supervisor, dataSource);\n+    Map<String, Object> dynamicAllocationTasksProperties = ingestionSchema.getIOConfig().getDynamicAllocationTasksProperties();\n+    if (dynamicAllocationTasksProperties != null && !dynamicAllocationTasksProperties.isEmpty() && Boolean.parseBoolean(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"enableDynamicAllocationTasks\", false)))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI0OTE2Ng=="}, "originalCommit": {"oid": "f09d3d5d4f8374f29288994c955945cb1e33199e"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MDQxMTA0OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisorSpec.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwMTowMDoyOVrOId7MuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwNzozOToyNlrOIfmTeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI0OTUyOQ==", "bodyText": "can we create the autoscaler instance using jackson ... i.e. something like jsonMapper.readValueFrom...()", "url": "https://github.com/apache/druid/pull/10524#discussion_r568249529", "createdAt": "2021-02-02T01:00:29Z", "author": {"login": "himanshug"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisorSpec.java", "diffHunk": "@@ -151,6 +156,29 @@ public DruidMonitorSchedulerConfig getMonitorSchedulerConfig()\n   @Override\n   public abstract Supervisor createSupervisor();\n \n+  /**\n+   * need to notice that autoScaler would be null which means autoscale is dissable.\n+   * @param supervisor\n+   * @return autoScaler, disable autoscale will return dummyAutoScaler and enable autoscale wiil return defaultAutoScaler by default.\n+   */\n+  @Override\n+  @SuppressFBWarnings(value = \"RV_RETURN_VALUE_IGNORED\", justification = \"using siwtch(String)\")\n+  public SupervisorTaskAutoscaler createAutoscaler(Supervisor supervisor)\n+  {\n+    String dataSource = getId();\n+    SupervisorTaskAutoscaler autoScaler = new DummyAutoScaler(supervisor, dataSource);\n+    Map<String, Object> dynamicAllocationTasksProperties = ingestionSchema.getIOConfig().getDynamicAllocationTasksProperties();\n+    if (dynamicAllocationTasksProperties != null && !dynamicAllocationTasksProperties.isEmpty() && Boolean.parseBoolean(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"enableDynamicAllocationTasks\", false)))) {\n+      String autoScalerStrategy = String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"autoScalerStrategy\", \"default\"));\n+\n+      // will thorw 'Return value of String.hashCode() ignored : RV_RETURN_VALUE_IGNORED' just Suppress it.\n+      switch (StringUtils.toLowerCase(autoScalerStrategy)) {\n+        default: autoScaler = new DefaultAutoScaler(supervisor, dataSource, dynamicAllocationTasksProperties, this);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09d3d5d4f8374f29288994c955945cb1e33199e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDAwNDM0Ng==", "bodyText": "Nice catch!  I modified the way of obtaining configurations using Jackson like I mentioned above.\nIn this way, Users can not only defined their own scale algorithms, but also can build corresponding configuration.\nAlso it is easier to ensure consistency of default values. We don't need to do map.get/parse work anymore.\nAssupervisor instance is newed in Druid everywhere. Is it necessary to create the autoscaler using Jackson which hold supervisor instance ? \ud83e\udd15", "url": "https://github.com/apache/druid/pull/10524#discussion_r570004346", "createdAt": "2021-02-04T07:39:26Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisorSpec.java", "diffHunk": "@@ -151,6 +156,29 @@ public DruidMonitorSchedulerConfig getMonitorSchedulerConfig()\n   @Override\n   public abstract Supervisor createSupervisor();\n \n+  /**\n+   * need to notice that autoScaler would be null which means autoscale is dissable.\n+   * @param supervisor\n+   * @return autoScaler, disable autoscale will return dummyAutoScaler and enable autoscale wiil return defaultAutoScaler by default.\n+   */\n+  @Override\n+  @SuppressFBWarnings(value = \"RV_RETURN_VALUE_IGNORED\", justification = \"using siwtch(String)\")\n+  public SupervisorTaskAutoscaler createAutoscaler(Supervisor supervisor)\n+  {\n+    String dataSource = getId();\n+    SupervisorTaskAutoscaler autoScaler = new DummyAutoScaler(supervisor, dataSource);\n+    Map<String, Object> dynamicAllocationTasksProperties = ingestionSchema.getIOConfig().getDynamicAllocationTasksProperties();\n+    if (dynamicAllocationTasksProperties != null && !dynamicAllocationTasksProperties.isEmpty() && Boolean.parseBoolean(String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"enableDynamicAllocationTasks\", false)))) {\n+      String autoScalerStrategy = String.valueOf(dynamicAllocationTasksProperties.getOrDefault(\"autoScalerStrategy\", \"default\"));\n+\n+      // will thorw 'Return value of String.hashCode() ignored : RV_RETURN_VALUE_IGNORED' just Suppress it.\n+      switch (StringUtils.toLowerCase(autoScalerStrategy)) {\n+        default: autoScaler = new DefaultAutoScaler(supervisor, dataSource, dynamicAllocationTasksProperties, this);\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI0OTUyOQ=="}, "originalCommit": {"oid": "f09d3d5d4f8374f29288994c955945cb1e33199e"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MDQxMjc4OnYy", "diffSide": "RIGHT", "path": "docs/development/extensions-core/kafka-ingestion.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwMTowMToyNlrOId7NyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwNzo1Nzo1NVrOIfm2gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI0OTgwMA==", "bodyText": "not sure if we need this, if user added dynamicAllocationTasksProperties  section in the supervisor spec, that alone should be enough to enable autoscaling?", "url": "https://github.com/apache/druid/pull/10524#discussion_r568249800", "createdAt": "2021-02-02T01:01:26Z", "author": {"login": "himanshug"}, "path": "docs/development/extensions-core/kafka-ingestion.md", "diffHunk": "@@ -146,6 +146,26 @@ A sample supervisor spec is shown below:\n |`lateMessageRejectionStartDateTime`|ISO8601 DateTime|Configure tasks to reject messages with timestamps earlier than this date time; for example if this is set to `2016-01-01T11:00Z` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps earlier than *2016-01-01T11:00Z* will be dropped. This may help prevent concurrency issues if your data stream has late messages and you have multiple pipelines that need to operate on the same segments (e.g. a realtime and a nightly batch ingestion pipeline).|no (default == none)|\n |`lateMessageRejectionPeriod`|ISO8601 Period|Configure tasks to reject messages with timestamps earlier than this period before the task was created; for example if this is set to `PT1H` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps earlier than *2016-01-01T11:00Z* will be dropped. This may help prevent concurrency issues if your data stream has late messages and you have multiple pipelines that need to operate on the same segments (e.g. a realtime and a nightly batch ingestion pipeline). Please note that only one of `lateMessageRejectionPeriod` or `lateMessageRejectionStartDateTime` can be specified.|no (default == none)|\n |`earlyMessageRejectionPeriod`|ISO8601 Period|Configure tasks to reject messages with timestamps later than this period after the task reached its taskDuration; for example if this is set to `PT1H`, the taskDuration is set to `PT1H` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps later than *2016-01-01T14:00Z* will be dropped. **Note:** Tasks sometimes run past their task duration, for example, in cases of supervisor failover. Setting earlyMessageRejectionPeriod too low may cause messages to be dropped unexpectedly whenever a task runs past its originally configured task duration.|no (default == none)|\n+|`dynamicAllocationTasksProperties`|Object|`dynamicAllocationTasksProperties` to specify how to auto scale the number of Kafka ingest tasks based on Lag metrics. See [Dynamic Allocation Tasks Properties](#Dynamic Allocation Tasks Properties) for details.|no (default == null)|\n+\n+#### Dynamic Allocation Tasks Properties\n+\n+| Property | Description | Default |\n+| ------------- | ------------- | ------------- |\n+| `enableDynamicAllocationTasks` | whether enable this feature or not | false |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09d3d5d4f8374f29288994c955945cb1e33199e"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDAxMzMxMw==", "bodyText": "like I mentioned above. This is an insurance and compromise. Current algorithms is relatively simple while can meet most scenarios(for examples regular traffic peak/sudden traffic peak).\nBut for extreme cases, if users don't set scale-related configs properly, it will trigger scale action too frequently and creates lots of small segments. At this time, the user needs to manually control taskCount and this config can make disable/enable work more convenient.\nWhen the algorithm is smart enough, It is better to remove this parameter.\nAs for default value false, I think it is the insurance to prevent users to enable autoscaler by accident like left \"autoscalerConfig\": {} after deleted all the autoscaler related configs.", "url": "https://github.com/apache/druid/pull/10524#discussion_r570013313", "createdAt": "2021-02-04T07:57:55Z", "author": {"login": "zhangyue19921010"}, "path": "docs/development/extensions-core/kafka-ingestion.md", "diffHunk": "@@ -146,6 +146,26 @@ A sample supervisor spec is shown below:\n |`lateMessageRejectionStartDateTime`|ISO8601 DateTime|Configure tasks to reject messages with timestamps earlier than this date time; for example if this is set to `2016-01-01T11:00Z` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps earlier than *2016-01-01T11:00Z* will be dropped. This may help prevent concurrency issues if your data stream has late messages and you have multiple pipelines that need to operate on the same segments (e.g. a realtime and a nightly batch ingestion pipeline).|no (default == none)|\n |`lateMessageRejectionPeriod`|ISO8601 Period|Configure tasks to reject messages with timestamps earlier than this period before the task was created; for example if this is set to `PT1H` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps earlier than *2016-01-01T11:00Z* will be dropped. This may help prevent concurrency issues if your data stream has late messages and you have multiple pipelines that need to operate on the same segments (e.g. a realtime and a nightly batch ingestion pipeline). Please note that only one of `lateMessageRejectionPeriod` or `lateMessageRejectionStartDateTime` can be specified.|no (default == none)|\n |`earlyMessageRejectionPeriod`|ISO8601 Period|Configure tasks to reject messages with timestamps later than this period after the task reached its taskDuration; for example if this is set to `PT1H`, the taskDuration is set to `PT1H` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps later than *2016-01-01T14:00Z* will be dropped. **Note:** Tasks sometimes run past their task duration, for example, in cases of supervisor failover. Setting earlyMessageRejectionPeriod too low may cause messages to be dropped unexpectedly whenever a task runs past its originally configured task duration.|no (default == none)|\n+|`dynamicAllocationTasksProperties`|Object|`dynamicAllocationTasksProperties` to specify how to auto scale the number of Kafka ingest tasks based on Lag metrics. See [Dynamic Allocation Tasks Properties](#Dynamic Allocation Tasks Properties) for details.|no (default == null)|\n+\n+#### Dynamic Allocation Tasks Properties\n+\n+| Property | Description | Default |\n+| ------------- | ------------- | ------------- |\n+| `enableDynamicAllocationTasks` | whether enable this feature or not | false |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI0OTgwMA=="}, "originalCommit": {"oid": "f09d3d5d4f8374f29288994c955945cb1e33199e"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MDQxNTA3OnYy", "diffSide": "RIGHT", "path": "docs/development/extensions-core/kafka-ingestion.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQwMTowMjozM1rOId7PMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwNzo1ODoxNlrOIfm3PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI1MDE2Mw==", "bodyText": "I think autoscaling better describes this feature , so maybe call it autoscalerConfig", "url": "https://github.com/apache/druid/pull/10524#discussion_r568250163", "createdAt": "2021-02-02T01:02:33Z", "author": {"login": "himanshug"}, "path": "docs/development/extensions-core/kafka-ingestion.md", "diffHunk": "@@ -146,6 +146,26 @@ A sample supervisor spec is shown below:\n |`lateMessageRejectionStartDateTime`|ISO8601 DateTime|Configure tasks to reject messages with timestamps earlier than this date time; for example if this is set to `2016-01-01T11:00Z` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps earlier than *2016-01-01T11:00Z* will be dropped. This may help prevent concurrency issues if your data stream has late messages and you have multiple pipelines that need to operate on the same segments (e.g. a realtime and a nightly batch ingestion pipeline).|no (default == none)|\n |`lateMessageRejectionPeriod`|ISO8601 Period|Configure tasks to reject messages with timestamps earlier than this period before the task was created; for example if this is set to `PT1H` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps earlier than *2016-01-01T11:00Z* will be dropped. This may help prevent concurrency issues if your data stream has late messages and you have multiple pipelines that need to operate on the same segments (e.g. a realtime and a nightly batch ingestion pipeline). Please note that only one of `lateMessageRejectionPeriod` or `lateMessageRejectionStartDateTime` can be specified.|no (default == none)|\n |`earlyMessageRejectionPeriod`|ISO8601 Period|Configure tasks to reject messages with timestamps later than this period after the task reached its taskDuration; for example if this is set to `PT1H`, the taskDuration is set to `PT1H` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps later than *2016-01-01T14:00Z* will be dropped. **Note:** Tasks sometimes run past their task duration, for example, in cases of supervisor failover. Setting earlyMessageRejectionPeriod too low may cause messages to be dropped unexpectedly whenever a task runs past its originally configured task duration.|no (default == none)|\n+|`dynamicAllocationTasksProperties`|Object|`dynamicAllocationTasksProperties` to specify how to auto scale the number of Kafka ingest tasks based on Lag metrics. See [Dynamic Allocation Tasks Properties](#Dynamic Allocation Tasks Properties) for details.|no (default == null)|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09d3d5d4f8374f29288994c955945cb1e33199e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI1MDM5Nw==", "bodyText": "be very specific that this is  ONLY supported for kafka indexing as of now.", "url": "https://github.com/apache/druid/pull/10524#discussion_r568250397", "createdAt": "2021-02-02T01:03:20Z", "author": {"login": "himanshug"}, "path": "docs/development/extensions-core/kafka-ingestion.md", "diffHunk": "@@ -146,6 +146,26 @@ A sample supervisor spec is shown below:\n |`lateMessageRejectionStartDateTime`|ISO8601 DateTime|Configure tasks to reject messages with timestamps earlier than this date time; for example if this is set to `2016-01-01T11:00Z` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps earlier than *2016-01-01T11:00Z* will be dropped. This may help prevent concurrency issues if your data stream has late messages and you have multiple pipelines that need to operate on the same segments (e.g. a realtime and a nightly batch ingestion pipeline).|no (default == none)|\n |`lateMessageRejectionPeriod`|ISO8601 Period|Configure tasks to reject messages with timestamps earlier than this period before the task was created; for example if this is set to `PT1H` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps earlier than *2016-01-01T11:00Z* will be dropped. This may help prevent concurrency issues if your data stream has late messages and you have multiple pipelines that need to operate on the same segments (e.g. a realtime and a nightly batch ingestion pipeline). Please note that only one of `lateMessageRejectionPeriod` or `lateMessageRejectionStartDateTime` can be specified.|no (default == none)|\n |`earlyMessageRejectionPeriod`|ISO8601 Period|Configure tasks to reject messages with timestamps later than this period after the task reached its taskDuration; for example if this is set to `PT1H`, the taskDuration is set to `PT1H` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps later than *2016-01-01T14:00Z* will be dropped. **Note:** Tasks sometimes run past their task duration, for example, in cases of supervisor failover. Setting earlyMessageRejectionPeriod too low may cause messages to be dropped unexpectedly whenever a task runs past its originally configured task duration.|no (default == none)|\n+|`dynamicAllocationTasksProperties`|Object|`dynamicAllocationTasksProperties` to specify how to auto scale the number of Kafka ingest tasks based on Lag metrics. See [Dynamic Allocation Tasks Properties](#Dynamic Allocation Tasks Properties) for details.|no (default == null)|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI1MDE2Mw=="}, "originalCommit": {"oid": "f09d3d5d4f8374f29288994c955945cb1e33199e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDAxMzUwMA==", "bodyText": "Make sense. Changed", "url": "https://github.com/apache/druid/pull/10524#discussion_r570013500", "createdAt": "2021-02-04T07:58:16Z", "author": {"login": "zhangyue19921010"}, "path": "docs/development/extensions-core/kafka-ingestion.md", "diffHunk": "@@ -146,6 +146,26 @@ A sample supervisor spec is shown below:\n |`lateMessageRejectionStartDateTime`|ISO8601 DateTime|Configure tasks to reject messages with timestamps earlier than this date time; for example if this is set to `2016-01-01T11:00Z` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps earlier than *2016-01-01T11:00Z* will be dropped. This may help prevent concurrency issues if your data stream has late messages and you have multiple pipelines that need to operate on the same segments (e.g. a realtime and a nightly batch ingestion pipeline).|no (default == none)|\n |`lateMessageRejectionPeriod`|ISO8601 Period|Configure tasks to reject messages with timestamps earlier than this period before the task was created; for example if this is set to `PT1H` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps earlier than *2016-01-01T11:00Z* will be dropped. This may help prevent concurrency issues if your data stream has late messages and you have multiple pipelines that need to operate on the same segments (e.g. a realtime and a nightly batch ingestion pipeline). Please note that only one of `lateMessageRejectionPeriod` or `lateMessageRejectionStartDateTime` can be specified.|no (default == none)|\n |`earlyMessageRejectionPeriod`|ISO8601 Period|Configure tasks to reject messages with timestamps later than this period after the task reached its taskDuration; for example if this is set to `PT1H`, the taskDuration is set to `PT1H` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps later than *2016-01-01T14:00Z* will be dropped. **Note:** Tasks sometimes run past their task duration, for example, in cases of supervisor failover. Setting earlyMessageRejectionPeriod too low may cause messages to be dropped unexpectedly whenever a task runs past its originally configured task duration.|no (default == none)|\n+|`dynamicAllocationTasksProperties`|Object|`dynamicAllocationTasksProperties` to specify how to auto scale the number of Kafka ingest tasks based on Lag metrics. See [Dynamic Allocation Tasks Properties](#Dynamic Allocation Tasks Properties) for details.|no (default == null)|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI1MDE2Mw=="}, "originalCommit": {"oid": "f09d3d5d4f8374f29288994c955945cb1e33199e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NzU1MzI5OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxMToxMDoxN1rOIgcj3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxNToyNzoxOVrOIgl_rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg5MzI3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @return Boolean flag, do scale action successfully or not. If true , it will take at least 'minTriggerDynamicFrequency' before next 'dynamicAllocatie'.\n          \n          \n            \n               * @return Boolean flag, do scale action successfully or not. If true, it will take at least 'minTriggerDynamicFrequency' before next 'dynamicAllocate'.", "url": "https://github.com/apache/druid/pull/10524#discussion_r570893279", "createdAt": "2021-02-05T11:10:17Z", "author": {"login": "pjain1"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -318,6 +324,114 @@ public void handle()\n     }\n   }\n \n+  // change taskCount without resubmitting.\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    Callable<Integer> scaleAction;\n+\n+    DynamicAllocationTasksNotice(Callable<Integer> scaleAction)\n+    {\n+      this.scaleAction = scaleAction;\n+    }\n+\n+    /**\n+     * This method will do lags points collection and check dynamic scale action is necessary or not.\n+     */\n+    @Override\n+    public void handle()\n+    {\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.debug(\"PendingCompletionTaskGroups is [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+            return;\n+          }\n+        }\n+        if (autoScalerConfig != null && nowTime - dynamicTriggerLastRunTime < autoScalerConfig.getMinTriggerDynamicFrequencyMillis()) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [%s]. Defined minTriggerDynamicFrequency is [%s] for dataSource [%s], CLAM DOWN NOW !\", nowTime - dynamicTriggerLastRunTime, autoScalerConfig.getMinTriggerDynamicFrequencyMillis(), dataSource);\n+          return;\n+        }\n+\n+        Integer desriedTaskCount = scaleAction.call();\n+        boolean allocationSuccess = dynamicAllocate(desriedTaskCount);\n+\n+        if (allocationSuccess) {\n+          dynamicTriggerLastRunTime = nowTime;\n+        }\n+      }\n+      catch (Exception ex) {\n+        log.warn(ex, \"Error, when parse DynamicAllocationTasksNotice\");\n+      }\n+    }\n+  }\n+\n+  /**\n+   * This method determines how to do scale actions based on collected lag points.\n+   * If scale action is triggered :\n+   *    First of all, call gracefulShutdownInternal() which will change the state of  current datasource ingest tasks from reading to publishing.\n+   *    Secondly, clear all the stateful data structures: activelyReadingTaskGroups, partitionGroups, partitionOffsets, pendingCompletionTaskGroups, partitionIds. These structures will be rebuiled next 'RunNotice'.\n+   *    Finally, change taskCount in SeekableStreamSupervisorIOConfig and sync it to MetaStorage.\n+   * After changed taskCount in SeekableStreamSupervisorIOConfig, next RunNotice will ceate scaled number of ingest tasks without resubmitting supervisors.\n+   * @param desireActiveTaskCount desire taskCount compute from autoscaler\n+   * @return Boolean flag, do scale action successfully or not. If true , it will take at least 'minTriggerDynamicFrequency' before next 'dynamicAllocatie'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5945b18155d058f6899ea68db26147c3e03015"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTA0Nzg1Mg==", "bodyText": "Changed.", "url": "https://github.com/apache/druid/pull/10524#discussion_r571047852", "createdAt": "2021-02-05T15:27:19Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -318,6 +324,114 @@ public void handle()\n     }\n   }\n \n+  // change taskCount without resubmitting.\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    Callable<Integer> scaleAction;\n+\n+    DynamicAllocationTasksNotice(Callable<Integer> scaleAction)\n+    {\n+      this.scaleAction = scaleAction;\n+    }\n+\n+    /**\n+     * This method will do lags points collection and check dynamic scale action is necessary or not.\n+     */\n+    @Override\n+    public void handle()\n+    {\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.debug(\"PendingCompletionTaskGroups is [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+            return;\n+          }\n+        }\n+        if (autoScalerConfig != null && nowTime - dynamicTriggerLastRunTime < autoScalerConfig.getMinTriggerDynamicFrequencyMillis()) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [%s]. Defined minTriggerDynamicFrequency is [%s] for dataSource [%s], CLAM DOWN NOW !\", nowTime - dynamicTriggerLastRunTime, autoScalerConfig.getMinTriggerDynamicFrequencyMillis(), dataSource);\n+          return;\n+        }\n+\n+        Integer desriedTaskCount = scaleAction.call();\n+        boolean allocationSuccess = dynamicAllocate(desriedTaskCount);\n+\n+        if (allocationSuccess) {\n+          dynamicTriggerLastRunTime = nowTime;\n+        }\n+      }\n+      catch (Exception ex) {\n+        log.warn(ex, \"Error, when parse DynamicAllocationTasksNotice\");\n+      }\n+    }\n+  }\n+\n+  /**\n+   * This method determines how to do scale actions based on collected lag points.\n+   * If scale action is triggered :\n+   *    First of all, call gracefulShutdownInternal() which will change the state of  current datasource ingest tasks from reading to publishing.\n+   *    Secondly, clear all the stateful data structures: activelyReadingTaskGroups, partitionGroups, partitionOffsets, pendingCompletionTaskGroups, partitionIds. These structures will be rebuiled next 'RunNotice'.\n+   *    Finally, change taskCount in SeekableStreamSupervisorIOConfig and sync it to MetaStorage.\n+   * After changed taskCount in SeekableStreamSupervisorIOConfig, next RunNotice will ceate scaled number of ingest tasks without resubmitting supervisors.\n+   * @param desireActiveTaskCount desire taskCount compute from autoscaler\n+   * @return Boolean flag, do scale action successfully or not. If true , it will take at least 'minTriggerDynamicFrequency' before next 'dynamicAllocatie'.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg5MzI3OQ=="}, "originalCommit": {"oid": "ce5945b18155d058f6899ea68db26147c3e03015"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NzU1NTc0OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxMToxMTowM1rOIgclXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxNToyNzoyNVrOIgmANw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg5MzY2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      log.info(\"NowTime - dynamicTriggerLastRunTime is [%s]. Defined minTriggerDynamicFrequency is [%s] for dataSource [%s], CLAM DOWN NOW !\", nowTime - dynamicTriggerLastRunTime, autoScalerConfig.getMinTriggerDynamicFrequencyMillis(), dataSource);\n          \n          \n            \n                      log.info(\"NowTime - dynamicTriggerLastRunTime is [%s]. Defined minTriggerDynamicFrequency is [%s] for dataSource [%s], CALM DOWN NOW !\", nowTime - dynamicTriggerLastRunTime, autoScalerConfig.getMinTriggerDynamicFrequencyMillis(), dataSource);", "url": "https://github.com/apache/druid/pull/10524#discussion_r570893662", "createdAt": "2021-02-05T11:11:03Z", "author": {"login": "pjain1"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -318,6 +324,114 @@ public void handle()\n     }\n   }\n \n+  // change taskCount without resubmitting.\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    Callable<Integer> scaleAction;\n+\n+    DynamicAllocationTasksNotice(Callable<Integer> scaleAction)\n+    {\n+      this.scaleAction = scaleAction;\n+    }\n+\n+    /**\n+     * This method will do lags points collection and check dynamic scale action is necessary or not.\n+     */\n+    @Override\n+    public void handle()\n+    {\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.debug(\"PendingCompletionTaskGroups is [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+            return;\n+          }\n+        }\n+        if (autoScalerConfig != null && nowTime - dynamicTriggerLastRunTime < autoScalerConfig.getMinTriggerDynamicFrequencyMillis()) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [%s]. Defined minTriggerDynamicFrequency is [%s] for dataSource [%s], CLAM DOWN NOW !\", nowTime - dynamicTriggerLastRunTime, autoScalerConfig.getMinTriggerDynamicFrequencyMillis(), dataSource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5945b18155d058f6899ea68db26147c3e03015"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTA0Nzk5MQ==", "bodyText": "Changed.", "url": "https://github.com/apache/druid/pull/10524#discussion_r571047991", "createdAt": "2021-02-05T15:27:25Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -318,6 +324,114 @@ public void handle()\n     }\n   }\n \n+  // change taskCount without resubmitting.\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    Callable<Integer> scaleAction;\n+\n+    DynamicAllocationTasksNotice(Callable<Integer> scaleAction)\n+    {\n+      this.scaleAction = scaleAction;\n+    }\n+\n+    /**\n+     * This method will do lags points collection and check dynamic scale action is necessary or not.\n+     */\n+    @Override\n+    public void handle()\n+    {\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.debug(\"PendingCompletionTaskGroups is [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+            return;\n+          }\n+        }\n+        if (autoScalerConfig != null && nowTime - dynamicTriggerLastRunTime < autoScalerConfig.getMinTriggerDynamicFrequencyMillis()) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [%s]. Defined minTriggerDynamicFrequency is [%s] for dataSource [%s], CLAM DOWN NOW !\", nowTime - dynamicTriggerLastRunTime, autoScalerConfig.getMinTriggerDynamicFrequencyMillis(), dataSource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg5MzY2Mg=="}, "originalCommit": {"oid": "ce5945b18155d058f6899ea68db26147c3e03015"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NzU1ODI1OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxMToxMjowMFrOIgcnHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxNToyNzozMFrOIgmAfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg5NDExMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    log.warn(ex, \"Error, when parse DynamicAllocationTasksNotice\");\n          \n          \n            \n                    log.warn(ex, \"Error parsing DynamicAllocationTasksNotice\");", "url": "https://github.com/apache/druid/pull/10524#discussion_r570894111", "createdAt": "2021-02-05T11:12:00Z", "author": {"login": "pjain1"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -318,6 +324,114 @@ public void handle()\n     }\n   }\n \n+  // change taskCount without resubmitting.\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    Callable<Integer> scaleAction;\n+\n+    DynamicAllocationTasksNotice(Callable<Integer> scaleAction)\n+    {\n+      this.scaleAction = scaleAction;\n+    }\n+\n+    /**\n+     * This method will do lags points collection and check dynamic scale action is necessary or not.\n+     */\n+    @Override\n+    public void handle()\n+    {\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.debug(\"PendingCompletionTaskGroups is [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+            return;\n+          }\n+        }\n+        if (autoScalerConfig != null && nowTime - dynamicTriggerLastRunTime < autoScalerConfig.getMinTriggerDynamicFrequencyMillis()) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [%s]. Defined minTriggerDynamicFrequency is [%s] for dataSource [%s], CLAM DOWN NOW !\", nowTime - dynamicTriggerLastRunTime, autoScalerConfig.getMinTriggerDynamicFrequencyMillis(), dataSource);\n+          return;\n+        }\n+\n+        Integer desriedTaskCount = scaleAction.call();\n+        boolean allocationSuccess = dynamicAllocate(desriedTaskCount);\n+\n+        if (allocationSuccess) {\n+          dynamicTriggerLastRunTime = nowTime;\n+        }\n+      }\n+      catch (Exception ex) {\n+        log.warn(ex, \"Error, when parse DynamicAllocationTasksNotice\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5945b18155d058f6899ea68db26147c3e03015"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTA0ODA2Mw==", "bodyText": "Done.", "url": "https://github.com/apache/druid/pull/10524#discussion_r571048063", "createdAt": "2021-02-05T15:27:30Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -318,6 +324,114 @@ public void handle()\n     }\n   }\n \n+  // change taskCount without resubmitting.\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    Callable<Integer> scaleAction;\n+\n+    DynamicAllocationTasksNotice(Callable<Integer> scaleAction)\n+    {\n+      this.scaleAction = scaleAction;\n+    }\n+\n+    /**\n+     * This method will do lags points collection and check dynamic scale action is necessary or not.\n+     */\n+    @Override\n+    public void handle()\n+    {\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.debug(\"PendingCompletionTaskGroups is [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+            return;\n+          }\n+        }\n+        if (autoScalerConfig != null && nowTime - dynamicTriggerLastRunTime < autoScalerConfig.getMinTriggerDynamicFrequencyMillis()) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [%s]. Defined minTriggerDynamicFrequency is [%s] for dataSource [%s], CLAM DOWN NOW !\", nowTime - dynamicTriggerLastRunTime, autoScalerConfig.getMinTriggerDynamicFrequencyMillis(), dataSource);\n+          return;\n+        }\n+\n+        Integer desriedTaskCount = scaleAction.call();\n+        boolean allocationSuccess = dynamicAllocate(desriedTaskCount);\n+\n+        if (allocationSuccess) {\n+          dynamicTriggerLastRunTime = nowTime;\n+        }\n+      }\n+      catch (Exception ex) {\n+        log.warn(ex, \"Error, when parse DynamicAllocationTasksNotice\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg5NDExMQ=="}, "originalCommit": {"oid": "ce5945b18155d058f6899ea68db26147c3e03015"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NzU2Mjc4OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxMToxMzozNVrOIgcqCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxNToyNzozNVrOIgmA4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg5NDg1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * After changed taskCount in SeekableStreamSupervisorIOConfig, next RunNotice will ceate scaled number of ingest tasks without resubmitting supervisors.\n          \n          \n            \n               * After changed taskCount in SeekableStreamSupervisorIOConfig, next RunNotice will create scaled number of ingest tasks without resubmitting supervisors.", "url": "https://github.com/apache/druid/pull/10524#discussion_r570894859", "createdAt": "2021-02-05T11:13:35Z", "author": {"login": "pjain1"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -318,6 +324,114 @@ public void handle()\n     }\n   }\n \n+  // change taskCount without resubmitting.\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    Callable<Integer> scaleAction;\n+\n+    DynamicAllocationTasksNotice(Callable<Integer> scaleAction)\n+    {\n+      this.scaleAction = scaleAction;\n+    }\n+\n+    /**\n+     * This method will do lags points collection and check dynamic scale action is necessary or not.\n+     */\n+    @Override\n+    public void handle()\n+    {\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.debug(\"PendingCompletionTaskGroups is [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+            return;\n+          }\n+        }\n+        if (autoScalerConfig != null && nowTime - dynamicTriggerLastRunTime < autoScalerConfig.getMinTriggerDynamicFrequencyMillis()) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [%s]. Defined minTriggerDynamicFrequency is [%s] for dataSource [%s], CLAM DOWN NOW !\", nowTime - dynamicTriggerLastRunTime, autoScalerConfig.getMinTriggerDynamicFrequencyMillis(), dataSource);\n+          return;\n+        }\n+\n+        Integer desriedTaskCount = scaleAction.call();\n+        boolean allocationSuccess = dynamicAllocate(desriedTaskCount);\n+\n+        if (allocationSuccess) {\n+          dynamicTriggerLastRunTime = nowTime;\n+        }\n+      }\n+      catch (Exception ex) {\n+        log.warn(ex, \"Error, when parse DynamicAllocationTasksNotice\");\n+      }\n+    }\n+  }\n+\n+  /**\n+   * This method determines how to do scale actions based on collected lag points.\n+   * If scale action is triggered :\n+   *    First of all, call gracefulShutdownInternal() which will change the state of  current datasource ingest tasks from reading to publishing.\n+   *    Secondly, clear all the stateful data structures: activelyReadingTaskGroups, partitionGroups, partitionOffsets, pendingCompletionTaskGroups, partitionIds. These structures will be rebuiled next 'RunNotice'.\n+   *    Finally, change taskCount in SeekableStreamSupervisorIOConfig and sync it to MetaStorage.\n+   * After changed taskCount in SeekableStreamSupervisorIOConfig, next RunNotice will ceate scaled number of ingest tasks without resubmitting supervisors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5945b18155d058f6899ea68db26147c3e03015"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTA0ODE2MA==", "bodyText": "Done.", "url": "https://github.com/apache/druid/pull/10524#discussion_r571048160", "createdAt": "2021-02-05T15:27:35Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -318,6 +324,114 @@ public void handle()\n     }\n   }\n \n+  // change taskCount without resubmitting.\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    Callable<Integer> scaleAction;\n+\n+    DynamicAllocationTasksNotice(Callable<Integer> scaleAction)\n+    {\n+      this.scaleAction = scaleAction;\n+    }\n+\n+    /**\n+     * This method will do lags points collection and check dynamic scale action is necessary or not.\n+     */\n+    @Override\n+    public void handle()\n+    {\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.debug(\"PendingCompletionTaskGroups is [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+            return;\n+          }\n+        }\n+        if (autoScalerConfig != null && nowTime - dynamicTriggerLastRunTime < autoScalerConfig.getMinTriggerDynamicFrequencyMillis()) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [%s]. Defined minTriggerDynamicFrequency is [%s] for dataSource [%s], CLAM DOWN NOW !\", nowTime - dynamicTriggerLastRunTime, autoScalerConfig.getMinTriggerDynamicFrequencyMillis(), dataSource);\n+          return;\n+        }\n+\n+        Integer desriedTaskCount = scaleAction.call();\n+        boolean allocationSuccess = dynamicAllocate(desriedTaskCount);\n+\n+        if (allocationSuccess) {\n+          dynamicTriggerLastRunTime = nowTime;\n+        }\n+      }\n+      catch (Exception ex) {\n+        log.warn(ex, \"Error, when parse DynamicAllocationTasksNotice\");\n+      }\n+    }\n+  }\n+\n+  /**\n+   * This method determines how to do scale actions based on collected lag points.\n+   * If scale action is triggered :\n+   *    First of all, call gracefulShutdownInternal() which will change the state of  current datasource ingest tasks from reading to publishing.\n+   *    Secondly, clear all the stateful data structures: activelyReadingTaskGroups, partitionGroups, partitionOffsets, pendingCompletionTaskGroups, partitionIds. These structures will be rebuiled next 'RunNotice'.\n+   *    Finally, change taskCount in SeekableStreamSupervisorIOConfig and sync it to MetaStorage.\n+   * After changed taskCount in SeekableStreamSupervisorIOConfig, next RunNotice will ceate scaled number of ingest tasks without resubmitting supervisors.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg5NDg1OQ=="}, "originalCommit": {"oid": "ce5945b18155d058f6899ea68db26147c3e03015"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NzU3MDMzOnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxMToxNTo0OVrOIgcumQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxNjoyMTo1N1rOIgoYOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg5NjAyNQ==", "bodyText": "We are not checking if desireActiveTaskCount is already equal to currentActiveTaskCount. If they are equal there is nothing to be done.", "url": "https://github.com/apache/druid/pull/10524#discussion_r570896025", "createdAt": "2021-02-05T11:15:49Z", "author": {"login": "pjain1"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -318,6 +324,114 @@ public void handle()\n     }\n   }\n \n+  // change taskCount without resubmitting.\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    Callable<Integer> scaleAction;\n+\n+    DynamicAllocationTasksNotice(Callable<Integer> scaleAction)\n+    {\n+      this.scaleAction = scaleAction;\n+    }\n+\n+    /**\n+     * This method will do lags points collection and check dynamic scale action is necessary or not.\n+     */\n+    @Override\n+    public void handle()\n+    {\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.debug(\"PendingCompletionTaskGroups is [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+            return;\n+          }\n+        }\n+        if (autoScalerConfig != null && nowTime - dynamicTriggerLastRunTime < autoScalerConfig.getMinTriggerDynamicFrequencyMillis()) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [%s]. Defined minTriggerDynamicFrequency is [%s] for dataSource [%s], CLAM DOWN NOW !\", nowTime - dynamicTriggerLastRunTime, autoScalerConfig.getMinTriggerDynamicFrequencyMillis(), dataSource);\n+          return;\n+        }\n+\n+        Integer desriedTaskCount = scaleAction.call();\n+        boolean allocationSuccess = dynamicAllocate(desriedTaskCount);\n+\n+        if (allocationSuccess) {\n+          dynamicTriggerLastRunTime = nowTime;\n+        }\n+      }\n+      catch (Exception ex) {\n+        log.warn(ex, \"Error, when parse DynamicAllocationTasksNotice\");\n+      }\n+    }\n+  }\n+\n+  /**\n+   * This method determines how to do scale actions based on collected lag points.\n+   * If scale action is triggered :\n+   *    First of all, call gracefulShutdownInternal() which will change the state of  current datasource ingest tasks from reading to publishing.\n+   *    Secondly, clear all the stateful data structures: activelyReadingTaskGroups, partitionGroups, partitionOffsets, pendingCompletionTaskGroups, partitionIds. These structures will be rebuiled next 'RunNotice'.\n+   *    Finally, change taskCount in SeekableStreamSupervisorIOConfig and sync it to MetaStorage.\n+   * After changed taskCount in SeekableStreamSupervisorIOConfig, next RunNotice will ceate scaled number of ingest tasks without resubmitting supervisors.\n+   * @param desireActiveTaskCount desire taskCount compute from autoscaler\n+   * @return Boolean flag, do scale action successfully or not. If true , it will take at least 'minTriggerDynamicFrequency' before next 'dynamicAllocatie'.\n+   *         If false, it will do 'dynamicAllocate' again after 'dynamicCheckPeriod'.\n+   * @throws InterruptedException\n+   * @throws ExecutionException\n+   * @throws TimeoutException\n+   */\n+  private boolean dynamicAllocate(Integer desireActiveTaskCount) throws InterruptedException, ExecutionException, TimeoutException\n+  {\n+    int currentActiveTaskCount;\n+    Collection<TaskGroup> activeTaskGroups = activelyReadingTaskGroups.values();\n+    currentActiveTaskCount = activeTaskGroups.size();\n+\n+    if (desireActiveTaskCount == -1) {\n+      return false;\n+    } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5945b18155d058f6899ea68db26147c3e03015"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTA0ODgxMA==", "bodyText": "Nice catch! It is necessary to do this check. Thanks.", "url": "https://github.com/apache/druid/pull/10524#discussion_r571048810", "createdAt": "2021-02-05T15:28:11Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -318,6 +324,114 @@ public void handle()\n     }\n   }\n \n+  // change taskCount without resubmitting.\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    Callable<Integer> scaleAction;\n+\n+    DynamicAllocationTasksNotice(Callable<Integer> scaleAction)\n+    {\n+      this.scaleAction = scaleAction;\n+    }\n+\n+    /**\n+     * This method will do lags points collection and check dynamic scale action is necessary or not.\n+     */\n+    @Override\n+    public void handle()\n+    {\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.debug(\"PendingCompletionTaskGroups is [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+            return;\n+          }\n+        }\n+        if (autoScalerConfig != null && nowTime - dynamicTriggerLastRunTime < autoScalerConfig.getMinTriggerDynamicFrequencyMillis()) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [%s]. Defined minTriggerDynamicFrequency is [%s] for dataSource [%s], CLAM DOWN NOW !\", nowTime - dynamicTriggerLastRunTime, autoScalerConfig.getMinTriggerDynamicFrequencyMillis(), dataSource);\n+          return;\n+        }\n+\n+        Integer desriedTaskCount = scaleAction.call();\n+        boolean allocationSuccess = dynamicAllocate(desriedTaskCount);\n+\n+        if (allocationSuccess) {\n+          dynamicTriggerLastRunTime = nowTime;\n+        }\n+      }\n+      catch (Exception ex) {\n+        log.warn(ex, \"Error, when parse DynamicAllocationTasksNotice\");\n+      }\n+    }\n+  }\n+\n+  /**\n+   * This method determines how to do scale actions based on collected lag points.\n+   * If scale action is triggered :\n+   *    First of all, call gracefulShutdownInternal() which will change the state of  current datasource ingest tasks from reading to publishing.\n+   *    Secondly, clear all the stateful data structures: activelyReadingTaskGroups, partitionGroups, partitionOffsets, pendingCompletionTaskGroups, partitionIds. These structures will be rebuiled next 'RunNotice'.\n+   *    Finally, change taskCount in SeekableStreamSupervisorIOConfig and sync it to MetaStorage.\n+   * After changed taskCount in SeekableStreamSupervisorIOConfig, next RunNotice will ceate scaled number of ingest tasks without resubmitting supervisors.\n+   * @param desireActiveTaskCount desire taskCount compute from autoscaler\n+   * @return Boolean flag, do scale action successfully or not. If true , it will take at least 'minTriggerDynamicFrequency' before next 'dynamicAllocatie'.\n+   *         If false, it will do 'dynamicAllocate' again after 'dynamicCheckPeriod'.\n+   * @throws InterruptedException\n+   * @throws ExecutionException\n+   * @throws TimeoutException\n+   */\n+  private boolean dynamicAllocate(Integer desireActiveTaskCount) throws InterruptedException, ExecutionException, TimeoutException\n+  {\n+    int currentActiveTaskCount;\n+    Collection<TaskGroup> activeTaskGroups = activelyReadingTaskGroups.values();\n+    currentActiveTaskCount = activeTaskGroups.size();\n+\n+    if (desireActiveTaskCount == -1) {\n+      return false;\n+    } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg5NjAyNQ=="}, "originalCommit": {"oid": "ce5945b18155d058f6899ea68db26147c3e03015"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTA4NjkwNA==", "bodyText": "Actually desireActiveTaskCount usually can't be equal to currentActiveTaskCount here. Take scale out as an example :\nHere is the logic of computing desireActiveTaskCount in autoscaler\n      if (currentActiveTaskCount == defaultAutoScalerConfig.getTaskCountMax()) {\n        log.info(\"CurrentActiveTaskCount reach task count Max limit, skip to scale out tasks for dataSource [%s].\", dataSource);\n        return -1;\n      } else {\n        desiredActiveTaskCount = Math.min(taskCount, defaultAutoScalerConfig.getTaskCountMax());\n      }\n\nCondition 1: int taskCount = currentActiveTaskCount + defaultAutoScalerConfig.getScaleOutStep()\nCondition 2: currentActiveTaskCount != defaultAutoScalerConfig.getTaskCountMax() otherwise will return -1.\nCondition 3: desiredActiveTaskCount = Math.min(taskCount, defaultAutoScalerConfig.getTaskCountMax())\nCondition 4: defaultAutoScalerConfig.getScaleOutStep() > 0\n=>  get Condition5 based on Condition 1 and Condition 3: desiredActiveTaskCount = Math.min(currentActiveTaskCount + defaultAutoScalerConfig.getScaleOutStep(), defaultAutoScalerConfig.getTaskCountMax())\nAssume desireActiveTaskCount == currentActiveTaskCount\nCombine with Condition 4, 5 and assumption => we can get desiredActiveTaskCount == defaultAutoScalerConfig.getTaskCountMax()\nThen based on Condition 2 => We can get currentActiveTaskCount != desiredActiveTaskCount\nThis conclusion conflicts with the assumption, so the assumption does not hold.\nSo that desireActiveTaskCount can't be equal to currentActiveTaskCount here\nUNLESS! Users set defaultAutoScalerConfig.getScaleOutStep() = 0 by mistake.\nSo I changed the code as you suggested to avoid this scenario.\nThanks for your suggestion!", "url": "https://github.com/apache/druid/pull/10524#discussion_r571086904", "createdAt": "2021-02-05T16:21:57Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -318,6 +324,114 @@ public void handle()\n     }\n   }\n \n+  // change taskCount without resubmitting.\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    Callable<Integer> scaleAction;\n+\n+    DynamicAllocationTasksNotice(Callable<Integer> scaleAction)\n+    {\n+      this.scaleAction = scaleAction;\n+    }\n+\n+    /**\n+     * This method will do lags points collection and check dynamic scale action is necessary or not.\n+     */\n+    @Override\n+    public void handle()\n+    {\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.debug(\"PendingCompletionTaskGroups is [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+            return;\n+          }\n+        }\n+        if (autoScalerConfig != null && nowTime - dynamicTriggerLastRunTime < autoScalerConfig.getMinTriggerDynamicFrequencyMillis()) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [%s]. Defined minTriggerDynamicFrequency is [%s] for dataSource [%s], CLAM DOWN NOW !\", nowTime - dynamicTriggerLastRunTime, autoScalerConfig.getMinTriggerDynamicFrequencyMillis(), dataSource);\n+          return;\n+        }\n+\n+        Integer desriedTaskCount = scaleAction.call();\n+        boolean allocationSuccess = dynamicAllocate(desriedTaskCount);\n+\n+        if (allocationSuccess) {\n+          dynamicTriggerLastRunTime = nowTime;\n+        }\n+      }\n+      catch (Exception ex) {\n+        log.warn(ex, \"Error, when parse DynamicAllocationTasksNotice\");\n+      }\n+    }\n+  }\n+\n+  /**\n+   * This method determines how to do scale actions based on collected lag points.\n+   * If scale action is triggered :\n+   *    First of all, call gracefulShutdownInternal() which will change the state of  current datasource ingest tasks from reading to publishing.\n+   *    Secondly, clear all the stateful data structures: activelyReadingTaskGroups, partitionGroups, partitionOffsets, pendingCompletionTaskGroups, partitionIds. These structures will be rebuiled next 'RunNotice'.\n+   *    Finally, change taskCount in SeekableStreamSupervisorIOConfig and sync it to MetaStorage.\n+   * After changed taskCount in SeekableStreamSupervisorIOConfig, next RunNotice will ceate scaled number of ingest tasks without resubmitting supervisors.\n+   * @param desireActiveTaskCount desire taskCount compute from autoscaler\n+   * @return Boolean flag, do scale action successfully or not. If true , it will take at least 'minTriggerDynamicFrequency' before next 'dynamicAllocatie'.\n+   *         If false, it will do 'dynamicAllocate' again after 'dynamicCheckPeriod'.\n+   * @throws InterruptedException\n+   * @throws ExecutionException\n+   * @throws TimeoutException\n+   */\n+  private boolean dynamicAllocate(Integer desireActiveTaskCount) throws InterruptedException, ExecutionException, TimeoutException\n+  {\n+    int currentActiveTaskCount;\n+    Collection<TaskGroup> activeTaskGroups = activelyReadingTaskGroups.values();\n+    currentActiveTaskCount = activeTaskGroups.size();\n+\n+    if (desireActiveTaskCount == -1) {\n+      return false;\n+    } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg5NjAyNQ=="}, "originalCommit": {"oid": "ce5945b18155d058f6899ea68db26147c3e03015"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5NzY2NTY3OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxMTo0MzozNVrOIgdoHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxNToyODoyNlrOIgmEbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDkxMDc0OQ==", "bodyText": "I think we should first update the count in metadata and then clear the allocation info. What if the database update fails then its not good to clear the allocation info.", "url": "https://github.com/apache/druid/pull/10524#discussion_r570910749", "createdAt": "2021-02-05T11:43:35Z", "author": {"login": "pjain1"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -318,6 +324,114 @@ public void handle()\n     }\n   }\n \n+  // change taskCount without resubmitting.\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    Callable<Integer> scaleAction;\n+\n+    DynamicAllocationTasksNotice(Callable<Integer> scaleAction)\n+    {\n+      this.scaleAction = scaleAction;\n+    }\n+\n+    /**\n+     * This method will do lags points collection and check dynamic scale action is necessary or not.\n+     */\n+    @Override\n+    public void handle()\n+    {\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.debug(\"PendingCompletionTaskGroups is [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+            return;\n+          }\n+        }\n+        if (autoScalerConfig != null && nowTime - dynamicTriggerLastRunTime < autoScalerConfig.getMinTriggerDynamicFrequencyMillis()) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [%s]. Defined minTriggerDynamicFrequency is [%s] for dataSource [%s], CLAM DOWN NOW !\", nowTime - dynamicTriggerLastRunTime, autoScalerConfig.getMinTriggerDynamicFrequencyMillis(), dataSource);\n+          return;\n+        }\n+\n+        Integer desriedTaskCount = scaleAction.call();\n+        boolean allocationSuccess = dynamicAllocate(desriedTaskCount);\n+\n+        if (allocationSuccess) {\n+          dynamicTriggerLastRunTime = nowTime;\n+        }\n+      }\n+      catch (Exception ex) {\n+        log.warn(ex, \"Error, when parse DynamicAllocationTasksNotice\");\n+      }\n+    }\n+  }\n+\n+  /**\n+   * This method determines how to do scale actions based on collected lag points.\n+   * If scale action is triggered :\n+   *    First of all, call gracefulShutdownInternal() which will change the state of  current datasource ingest tasks from reading to publishing.\n+   *    Secondly, clear all the stateful data structures: activelyReadingTaskGroups, partitionGroups, partitionOffsets, pendingCompletionTaskGroups, partitionIds. These structures will be rebuiled next 'RunNotice'.\n+   *    Finally, change taskCount in SeekableStreamSupervisorIOConfig and sync it to MetaStorage.\n+   * After changed taskCount in SeekableStreamSupervisorIOConfig, next RunNotice will ceate scaled number of ingest tasks without resubmitting supervisors.\n+   * @param desireActiveTaskCount desire taskCount compute from autoscaler\n+   * @return Boolean flag, do scale action successfully or not. If true , it will take at least 'minTriggerDynamicFrequency' before next 'dynamicAllocatie'.\n+   *         If false, it will do 'dynamicAllocate' again after 'dynamicCheckPeriod'.\n+   * @throws InterruptedException\n+   * @throws ExecutionException\n+   * @throws TimeoutException\n+   */\n+  private boolean dynamicAllocate(Integer desireActiveTaskCount) throws InterruptedException, ExecutionException, TimeoutException\n+  {\n+    int currentActiveTaskCount;\n+    Collection<TaskGroup> activeTaskGroups = activelyReadingTaskGroups.values();\n+    currentActiveTaskCount = activeTaskGroups.size();\n+\n+    if (desireActiveTaskCount == -1) {\n+      return false;\n+    } else {\n+      log.debug(\"Start to scale action tasks, current active task number [%s] and desire task number is [%s] for dataSource [%s].\", currentActiveTaskCount, desireActiveTaskCount, dataSource);\n+      gracefulShutdownInternal();\n+      // clear everything\n+      clearAllocationInfos();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5945b18155d058f6899ea68db26147c3e03015"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTA0OTA3MA==", "bodyText": "Make sense. Changed!", "url": "https://github.com/apache/druid/pull/10524#discussion_r571049070", "createdAt": "2021-02-05T15:28:26Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -318,6 +324,114 @@ public void handle()\n     }\n   }\n \n+  // change taskCount without resubmitting.\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    Callable<Integer> scaleAction;\n+\n+    DynamicAllocationTasksNotice(Callable<Integer> scaleAction)\n+    {\n+      this.scaleAction = scaleAction;\n+    }\n+\n+    /**\n+     * This method will do lags points collection and check dynamic scale action is necessary or not.\n+     */\n+    @Override\n+    public void handle()\n+    {\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.debug(\"PendingCompletionTaskGroups is [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+            return;\n+          }\n+        }\n+        if (autoScalerConfig != null && nowTime - dynamicTriggerLastRunTime < autoScalerConfig.getMinTriggerDynamicFrequencyMillis()) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [%s]. Defined minTriggerDynamicFrequency is [%s] for dataSource [%s], CLAM DOWN NOW !\", nowTime - dynamicTriggerLastRunTime, autoScalerConfig.getMinTriggerDynamicFrequencyMillis(), dataSource);\n+          return;\n+        }\n+\n+        Integer desriedTaskCount = scaleAction.call();\n+        boolean allocationSuccess = dynamicAllocate(desriedTaskCount);\n+\n+        if (allocationSuccess) {\n+          dynamicTriggerLastRunTime = nowTime;\n+        }\n+      }\n+      catch (Exception ex) {\n+        log.warn(ex, \"Error, when parse DynamicAllocationTasksNotice\");\n+      }\n+    }\n+  }\n+\n+  /**\n+   * This method determines how to do scale actions based on collected lag points.\n+   * If scale action is triggered :\n+   *    First of all, call gracefulShutdownInternal() which will change the state of  current datasource ingest tasks from reading to publishing.\n+   *    Secondly, clear all the stateful data structures: activelyReadingTaskGroups, partitionGroups, partitionOffsets, pendingCompletionTaskGroups, partitionIds. These structures will be rebuiled next 'RunNotice'.\n+   *    Finally, change taskCount in SeekableStreamSupervisorIOConfig and sync it to MetaStorage.\n+   * After changed taskCount in SeekableStreamSupervisorIOConfig, next RunNotice will ceate scaled number of ingest tasks without resubmitting supervisors.\n+   * @param desireActiveTaskCount desire taskCount compute from autoscaler\n+   * @return Boolean flag, do scale action successfully or not. If true , it will take at least 'minTriggerDynamicFrequency' before next 'dynamicAllocatie'.\n+   *         If false, it will do 'dynamicAllocate' again after 'dynamicCheckPeriod'.\n+   * @throws InterruptedException\n+   * @throws ExecutionException\n+   * @throws TimeoutException\n+   */\n+  private boolean dynamicAllocate(Integer desireActiveTaskCount) throws InterruptedException, ExecutionException, TimeoutException\n+  {\n+    int currentActiveTaskCount;\n+    Collection<TaskGroup> activeTaskGroups = activelyReadingTaskGroups.values();\n+    currentActiveTaskCount = activeTaskGroups.size();\n+\n+    if (desireActiveTaskCount == -1) {\n+      return false;\n+    } else {\n+      log.debug(\"Start to scale action tasks, current active task number [%s] and desire task number is [%s] for dataSource [%s].\", currentActiveTaskCount, desireActiveTaskCount, dataSource);\n+      gracefulShutdownInternal();\n+      // clear everything\n+      clearAllocationInfos();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDkxMDc0OQ=="}, "originalCommit": {"oid": "ce5945b18155d058f6899ea68db26147c3e03015"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5ODI4MzI3OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxNDoyOTo0NlrOIgjbEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxNTozMToyMVrOIgmOcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTAwNTcxMg==", "bodyText": "desireActiveTaskCount -> desiredActiveTaskCount", "url": "https://github.com/apache/druid/pull/10524#discussion_r571005712", "createdAt": "2021-02-05T14:29:46Z", "author": {"login": "pjain1"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -318,6 +324,114 @@ public void handle()\n     }\n   }\n \n+  // change taskCount without resubmitting.\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    Callable<Integer> scaleAction;\n+\n+    DynamicAllocationTasksNotice(Callable<Integer> scaleAction)\n+    {\n+      this.scaleAction = scaleAction;\n+    }\n+\n+    /**\n+     * This method will do lags points collection and check dynamic scale action is necessary or not.\n+     */\n+    @Override\n+    public void handle()\n+    {\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.debug(\"PendingCompletionTaskGroups is [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+            return;\n+          }\n+        }\n+        if (autoScalerConfig != null && nowTime - dynamicTriggerLastRunTime < autoScalerConfig.getMinTriggerDynamicFrequencyMillis()) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [%s]. Defined minTriggerDynamicFrequency is [%s] for dataSource [%s], CLAM DOWN NOW !\", nowTime - dynamicTriggerLastRunTime, autoScalerConfig.getMinTriggerDynamicFrequencyMillis(), dataSource);\n+          return;\n+        }\n+\n+        Integer desriedTaskCount = scaleAction.call();\n+        boolean allocationSuccess = dynamicAllocate(desriedTaskCount);\n+\n+        if (allocationSuccess) {\n+          dynamicTriggerLastRunTime = nowTime;\n+        }\n+      }\n+      catch (Exception ex) {\n+        log.warn(ex, \"Error, when parse DynamicAllocationTasksNotice\");\n+      }\n+    }\n+  }\n+\n+  /**\n+   * This method determines how to do scale actions based on collected lag points.\n+   * If scale action is triggered :\n+   *    First of all, call gracefulShutdownInternal() which will change the state of  current datasource ingest tasks from reading to publishing.\n+   *    Secondly, clear all the stateful data structures: activelyReadingTaskGroups, partitionGroups, partitionOffsets, pendingCompletionTaskGroups, partitionIds. These structures will be rebuiled next 'RunNotice'.\n+   *    Finally, change taskCount in SeekableStreamSupervisorIOConfig and sync it to MetaStorage.\n+   * After changed taskCount in SeekableStreamSupervisorIOConfig, next RunNotice will ceate scaled number of ingest tasks without resubmitting supervisors.\n+   * @param desireActiveTaskCount desire taskCount compute from autoscaler\n+   * @return Boolean flag, do scale action successfully or not. If true , it will take at least 'minTriggerDynamicFrequency' before next 'dynamicAllocatie'.\n+   *         If false, it will do 'dynamicAllocate' again after 'dynamicCheckPeriod'.\n+   * @throws InterruptedException\n+   * @throws ExecutionException\n+   * @throws TimeoutException\n+   */\n+  private boolean dynamicAllocate(Integer desireActiveTaskCount) throws InterruptedException, ExecutionException, TimeoutException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5945b18155d058f6899ea68db26147c3e03015"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTA1MTYzNA==", "bodyText": "All changed.", "url": "https://github.com/apache/druid/pull/10524#discussion_r571051634", "createdAt": "2021-02-05T15:31:21Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -318,6 +324,114 @@ public void handle()\n     }\n   }\n \n+  // change taskCount without resubmitting.\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    Callable<Integer> scaleAction;\n+\n+    DynamicAllocationTasksNotice(Callable<Integer> scaleAction)\n+    {\n+      this.scaleAction = scaleAction;\n+    }\n+\n+    /**\n+     * This method will do lags points collection and check dynamic scale action is necessary or not.\n+     */\n+    @Override\n+    public void handle()\n+    {\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.debug(\"PendingCompletionTaskGroups is [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+            return;\n+          }\n+        }\n+        if (autoScalerConfig != null && nowTime - dynamicTriggerLastRunTime < autoScalerConfig.getMinTriggerDynamicFrequencyMillis()) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [%s]. Defined minTriggerDynamicFrequency is [%s] for dataSource [%s], CLAM DOWN NOW !\", nowTime - dynamicTriggerLastRunTime, autoScalerConfig.getMinTriggerDynamicFrequencyMillis(), dataSource);\n+          return;\n+        }\n+\n+        Integer desriedTaskCount = scaleAction.call();\n+        boolean allocationSuccess = dynamicAllocate(desriedTaskCount);\n+\n+        if (allocationSuccess) {\n+          dynamicTriggerLastRunTime = nowTime;\n+        }\n+      }\n+      catch (Exception ex) {\n+        log.warn(ex, \"Error, when parse DynamicAllocationTasksNotice\");\n+      }\n+    }\n+  }\n+\n+  /**\n+   * This method determines how to do scale actions based on collected lag points.\n+   * If scale action is triggered :\n+   *    First of all, call gracefulShutdownInternal() which will change the state of  current datasource ingest tasks from reading to publishing.\n+   *    Secondly, clear all the stateful data structures: activelyReadingTaskGroups, partitionGroups, partitionOffsets, pendingCompletionTaskGroups, partitionIds. These structures will be rebuiled next 'RunNotice'.\n+   *    Finally, change taskCount in SeekableStreamSupervisorIOConfig and sync it to MetaStorage.\n+   * After changed taskCount in SeekableStreamSupervisorIOConfig, next RunNotice will ceate scaled number of ingest tasks without resubmitting supervisors.\n+   * @param desireActiveTaskCount desire taskCount compute from autoscaler\n+   * @return Boolean flag, do scale action successfully or not. If true , it will take at least 'minTriggerDynamicFrequency' before next 'dynamicAllocatie'.\n+   *         If false, it will do 'dynamicAllocate' again after 'dynamicCheckPeriod'.\n+   * @throws InterruptedException\n+   * @throws ExecutionException\n+   * @throws TimeoutException\n+   */\n+  private boolean dynamicAllocate(Integer desireActiveTaskCount) throws InterruptedException, ExecutionException, TimeoutException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTAwNTcxMg=="}, "originalCommit": {"oid": "ce5945b18155d058f6899ea68db26147c3e03015"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1OTE1ODAzOnYy", "diffSide": "RIGHT", "path": "docs/development/extensions-core/kafka-ingestion.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQwOTozMzowOVrOIpOi5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwNjoxMToyM1rOIp4klQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDEwMDgzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |`autoscalerConfig`|Object|`autoscalerConfig` to specify how to auto scale the number of Kafka ingest tasks based on Lag metrics. ONLY supported for Kafka indexing as of now. See [Tasks Autoscaler Properties](#Tasks Autoscaler Properties) for details.|no (default == null)|\n          \n          \n            \n            \n          \n          \n            \n            #### Tasks Autoscaler Properties\n          \n          \n            \n            \n          \n          \n            \n            | Property | Description | Default |\n          \n          \n            \n            | ------------- | ------------- | ------------- |\n          \n          \n            \n            | `enableTaskAutoscaler` | whether enable this feature or not. Set false or ignored here will disable `autoscaler` even though `autoscalerConfig` is not null| false |\n          \n          \n            \n            | `metricsCollectionIntervalMillis` | Define the frequency of lag points collection.  | 30000 |\n          \n          \n            \n            | `metricsCollectionRangeMillis` | The total time window of lag collection, Use with `metricsCollectionIntervalMillis`\uff0cit means that in the recent `metricsCollectionRangeMill`, collect lag metric points every `metricsCollectionIntervalMillis`. | 600000 |\n          \n          \n            \n            | `scaleOutThreshold` | The Threshold of scale out action | 6000000 |\n          \n          \n            \n            | `triggerScaleOutThresholdFrequency` | If `triggerScaleOutThresholdFrequency` percent of lag points are higher than `scaleOutThreshold`, then do scale out action. | 0.3 |\n          \n          \n            \n            | `scaleInThreshold` | The Threshold of scale in action | 1000000 |\n          \n          \n            \n            | `triggerScaleInThresholdFrequency` | If `triggerScaleInThresholdFrequency` percent of lag points are lower than `scaleOutThreshold`, then do scale in action. | 0.9 |\n          \n          \n            \n            | `dynamicCheckStartDelayMillis` | Number of milliseconds after supervisor starts when first check scale logic. | 300000 |\n          \n          \n            \n            | `dynamicCheckPeriod` | the frequency of checking whether to do scale action | 60000 |\n          \n          \n            \n            |`autoscalerConfig`|Object|`autoscalerConfig` to specify how to auto scale the number of Kafka ingest tasks based on Lag metrics. ONLY supported for Kafka indexing as of now. See [Tasks Autoscaler Properties](#task-autoscaler-properties) for details.|no (default == null)|\n          \n          \n            \n            \n          \n          \n            \n            ### Task Autoscaler Properties\n          \n          \n            \n            \n          \n          \n            \n            | Property | Description | Default |\n          \n          \n            \n            | ------------- | ------------- | ------------- |\n          \n          \n            \n            | `enableTaskAutoscaler` | Whether enable this feature or not. Not setting ot setting to false will disable `autoscaler` even though `autoscalerConfig` is not null| false |\n          \n          \n            \n            | `metricsCollectionIntervalMillis` | Define the frequency of lag points collection.  | 30000 |\n          \n          \n            \n            | `metricsCollectionRangeMillis` | The total time window of lag collection, Use with `metricsCollectionIntervalMillis`\uff0cit means that in the recent `metricsCollectionRangeMillis`, collect lag metric points every `metricsCollectionIntervalMillis`. | 600000 |\n          \n          \n            \n            | `scaleOutThreshold` | The Threshold of scale out action | 6000000 |\n          \n          \n            \n            | `triggerScaleOutThresholdFrequency` | If `triggerScaleOutThresholdFrequency` percent of lag points are higher than `scaleOutThreshold`, then do scale out action. | 0.3 |\n          \n          \n            \n            | `scaleInThreshold` | The Threshold of scale in action | 1000000 |\n          \n          \n            \n            | `triggerScaleInThresholdFrequency` | If `triggerScaleInThresholdFrequency` percent of lag points are lower than `scaleOutThreshold`, then do scale in action. | 0.9 |\n          \n          \n            \n            | `dynamicCheckStartDelayMillis` | Number of milliseconds after supervisor starts when first check scale logic. | 300000 |\n          \n          \n            \n            | `dynamicCheckPeriod` | The frequency of checking whether to do scale action in millis | 60000 |", "url": "https://github.com/apache/druid/pull/10524#discussion_r580100838", "createdAt": "2021-02-22T09:33:09Z", "author": {"login": "pjain1"}, "path": "docs/development/extensions-core/kafka-ingestion.md", "diffHunk": "@@ -146,6 +146,26 @@ A sample supervisor spec is shown below:\n |`lateMessageRejectionStartDateTime`|ISO8601 DateTime|Configure tasks to reject messages with timestamps earlier than this date time; for example if this is set to `2016-01-01T11:00Z` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps earlier than *2016-01-01T11:00Z* will be dropped. This may help prevent concurrency issues if your data stream has late messages and you have multiple pipelines that need to operate on the same segments (e.g. a realtime and a nightly batch ingestion pipeline).|no (default == none)|\n |`lateMessageRejectionPeriod`|ISO8601 Period|Configure tasks to reject messages with timestamps earlier than this period before the task was created; for example if this is set to `PT1H` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps earlier than *2016-01-01T11:00Z* will be dropped. This may help prevent concurrency issues if your data stream has late messages and you have multiple pipelines that need to operate on the same segments (e.g. a realtime and a nightly batch ingestion pipeline). Please note that only one of `lateMessageRejectionPeriod` or `lateMessageRejectionStartDateTime` can be specified.|no (default == none)|\n |`earlyMessageRejectionPeriod`|ISO8601 Period|Configure tasks to reject messages with timestamps later than this period after the task reached its taskDuration; for example if this is set to `PT1H`, the taskDuration is set to `PT1H` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps later than *2016-01-01T14:00Z* will be dropped. **Note:** Tasks sometimes run past their task duration, for example, in cases of supervisor failover. Setting earlyMessageRejectionPeriod too low may cause messages to be dropped unexpectedly whenever a task runs past its originally configured task duration.|no (default == none)|\n+|`autoscalerConfig`|Object|`autoscalerConfig` to specify how to auto scale the number of Kafka ingest tasks based on Lag metrics. ONLY supported for Kafka indexing as of now. See [Tasks Autoscaler Properties](#Tasks Autoscaler Properties) for details.|no (default == null)|\n+\n+#### Tasks Autoscaler Properties\n+\n+| Property | Description | Default |\n+| ------------- | ------------- | ------------- |\n+| `enableTaskAutoscaler` | whether enable this feature or not. Set false or ignored here will disable `autoscaler` even though `autoscalerConfig` is not null| false |\n+| `metricsCollectionIntervalMillis` | Define the frequency of lag points collection.  | 30000 |\n+| `metricsCollectionRangeMillis` | The total time window of lag collection, Use with `metricsCollectionIntervalMillis`\uff0cit means that in the recent `metricsCollectionRangeMill`, collect lag metric points every `metricsCollectionIntervalMillis`. | 600000 |\n+| `scaleOutThreshold` | The Threshold of scale out action | 6000000 |\n+| `triggerScaleOutThresholdFrequency` | If `triggerScaleOutThresholdFrequency` percent of lag points are higher than `scaleOutThreshold`, then do scale out action. | 0.3 |\n+| `scaleInThreshold` | The Threshold of scale in action | 1000000 |\n+| `triggerScaleInThresholdFrequency` | If `triggerScaleInThresholdFrequency` percent of lag points are lower than `scaleOutThreshold`, then do scale in action. | 0.9 |\n+| `dynamicCheckStartDelayMillis` | Number of milliseconds after supervisor starts when first check scale logic. | 300000 |\n+| `dynamicCheckPeriod` | the frequency of checking whether to do scale action | 60000 |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb3e1e88f68aed4f3ce8a3459d14caf85b663d6"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDc4OTM5Nw==", "bodyText": "Thanks && Changed.", "url": "https://github.com/apache/druid/pull/10524#discussion_r580789397", "createdAt": "2021-02-23T06:11:23Z", "author": {"login": "zhangyue19921010"}, "path": "docs/development/extensions-core/kafka-ingestion.md", "diffHunk": "@@ -146,6 +146,26 @@ A sample supervisor spec is shown below:\n |`lateMessageRejectionStartDateTime`|ISO8601 DateTime|Configure tasks to reject messages with timestamps earlier than this date time; for example if this is set to `2016-01-01T11:00Z` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps earlier than *2016-01-01T11:00Z* will be dropped. This may help prevent concurrency issues if your data stream has late messages and you have multiple pipelines that need to operate on the same segments (e.g. a realtime and a nightly batch ingestion pipeline).|no (default == none)|\n |`lateMessageRejectionPeriod`|ISO8601 Period|Configure tasks to reject messages with timestamps earlier than this period before the task was created; for example if this is set to `PT1H` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps earlier than *2016-01-01T11:00Z* will be dropped. This may help prevent concurrency issues if your data stream has late messages and you have multiple pipelines that need to operate on the same segments (e.g. a realtime and a nightly batch ingestion pipeline). Please note that only one of `lateMessageRejectionPeriod` or `lateMessageRejectionStartDateTime` can be specified.|no (default == none)|\n |`earlyMessageRejectionPeriod`|ISO8601 Period|Configure tasks to reject messages with timestamps later than this period after the task reached its taskDuration; for example if this is set to `PT1H`, the taskDuration is set to `PT1H` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps later than *2016-01-01T14:00Z* will be dropped. **Note:** Tasks sometimes run past their task duration, for example, in cases of supervisor failover. Setting earlyMessageRejectionPeriod too low may cause messages to be dropped unexpectedly whenever a task runs past its originally configured task duration.|no (default == none)|\n+|`autoscalerConfig`|Object|`autoscalerConfig` to specify how to auto scale the number of Kafka ingest tasks based on Lag metrics. ONLY supported for Kafka indexing as of now. See [Tasks Autoscaler Properties](#Tasks Autoscaler Properties) for details.|no (default == null)|\n+\n+#### Tasks Autoscaler Properties\n+\n+| Property | Description | Default |\n+| ------------- | ------------- | ------------- |\n+| `enableTaskAutoscaler` | whether enable this feature or not. Set false or ignored here will disable `autoscaler` even though `autoscalerConfig` is not null| false |\n+| `metricsCollectionIntervalMillis` | Define the frequency of lag points collection.  | 30000 |\n+| `metricsCollectionRangeMillis` | The total time window of lag collection, Use with `metricsCollectionIntervalMillis`\uff0cit means that in the recent `metricsCollectionRangeMill`, collect lag metric points every `metricsCollectionIntervalMillis`. | 600000 |\n+| `scaleOutThreshold` | The Threshold of scale out action | 6000000 |\n+| `triggerScaleOutThresholdFrequency` | If `triggerScaleOutThresholdFrequency` percent of lag points are higher than `scaleOutThreshold`, then do scale out action. | 0.3 |\n+| `scaleInThreshold` | The Threshold of scale in action | 1000000 |\n+| `triggerScaleInThresholdFrequency` | If `triggerScaleInThresholdFrequency` percent of lag points are lower than `scaleOutThreshold`, then do scale in action. | 0.9 |\n+| `dynamicCheckStartDelayMillis` | Number of milliseconds after supervisor starts when first check scale logic. | 300000 |\n+| `dynamicCheckPeriod` | the frequency of checking whether to do scale action | 60000 |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDEwMDgzOA=="}, "originalCommit": {"oid": "feb3e1e88f68aed4f3ce8a3459d14caf85b663d6"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1OTE4ODA3OnYy", "diffSide": "RIGHT", "path": "indexing-service/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQwOTozOTozN1rOIpO0fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwNjoxMzoxN1rOIp4mrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDEwNTM0Mw==", "bodyText": "what is this used for ? lets move this to parent pom as done for other dependencies and just declare it here.", "url": "https://github.com/apache/druid/pull/10524#discussion_r580105343", "createdAt": "2021-02-22T09:39:37Z", "author": {"login": "pjain1"}, "path": "indexing-service/pom.xml", "diffHunk": "@@ -62,7 +62,11 @@\n             <artifactId>druid-hll</artifactId>\n             <version>${project.parent.version}</version>\n         </dependency>\n-\n+        <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb3e1e88f68aed4f3ce8a3459d14caf85b663d6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDc4OTkzMw==", "bodyText": "Used for  private final CircularFifoQueue<Long> lagMetricsQueue; to collect lag points. Moved this to parent pom.", "url": "https://github.com/apache/druid/pull/10524#discussion_r580789933", "createdAt": "2021-02-23T06:13:17Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/pom.xml", "diffHunk": "@@ -62,7 +62,11 @@\n             <artifactId>druid-hll</artifactId>\n             <version>${project.parent.version}</version>\n         </dependency>\n-\n+        <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDEwNTM0Mw=="}, "originalCommit": {"oid": "feb3e1e88f68aed4f3ce8a3459d14caf85b663d6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1OTc3NTQ4OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxMTo1ODozNFrOIpUQGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwNjoxMzoyN1rOIp4m2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDE5NDMzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  log.info(\"enableTaskAutoscaler for datasource [%s]\", dataSource);\n          \n          \n            \n                  log.info(\"Running Task autoscaler for datasource [%s]\", dataSource);", "url": "https://github.com/apache/druid/pull/10524#discussion_r580194331", "createdAt": "2021-02-22T11:58:34Z", "author": {"login": "pjain1"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -519,20 +635,42 @@ public SeekableStreamSupervisor(\n     this.useExclusiveStartingSequence = useExclusiveStartingSequence;\n     this.dataSource = spec.getDataSchema().getDataSource();\n     this.ioConfig = spec.getIoConfig();\n+    this.autoScalerConfig = ioConfig.getAutoscalerConfig();\n     this.tuningConfig = spec.getTuningConfig();\n     this.taskTuningConfig = this.tuningConfig.convertToTaskTuningConfig();\n     this.supervisorId = supervisorId;\n     this.exec = Execs.singleThreaded(StringUtils.encodeForFormat(supervisorId));\n     this.scheduledExec = Execs.scheduledSingleThreaded(StringUtils.encodeForFormat(supervisorId) + \"-Scheduler-%d\");\n     this.reportingExec = Execs.scheduledSingleThreaded(StringUtils.encodeForFormat(supervisorId) + \"-Reporting-%d\");\n+\n     this.stateManager = new SeekableStreamSupervisorStateManager(\n         spec.getSupervisorStateManagerConfig(),\n         spec.isSuspended()\n     );\n \n-    int workerThreads = (this.tuningConfig.getWorkerThreads() != null\n-                         ? this.tuningConfig.getWorkerThreads()\n-                         : Math.min(10, this.ioConfig.getTaskCount()));\n+    int workerThreads;\n+    int chatThreads;\n+    if (autoScalerConfig != null && autoScalerConfig.getEnableTaskAutoscaler()) {\n+      log.info(\"enableTaskAutoscaler for datasource [%s]\", dataSource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb3e1e88f68aed4f3ce8a3459d14caf85b663d6"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDc4OTk3OA==", "bodyText": "Thanks && Changed.", "url": "https://github.com/apache/druid/pull/10524#discussion_r580789978", "createdAt": "2021-02-23T06:13:27Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -519,20 +635,42 @@ public SeekableStreamSupervisor(\n     this.useExclusiveStartingSequence = useExclusiveStartingSequence;\n     this.dataSource = spec.getDataSchema().getDataSource();\n     this.ioConfig = spec.getIoConfig();\n+    this.autoScalerConfig = ioConfig.getAutoscalerConfig();\n     this.tuningConfig = spec.getTuningConfig();\n     this.taskTuningConfig = this.tuningConfig.convertToTaskTuningConfig();\n     this.supervisorId = supervisorId;\n     this.exec = Execs.singleThreaded(StringUtils.encodeForFormat(supervisorId));\n     this.scheduledExec = Execs.scheduledSingleThreaded(StringUtils.encodeForFormat(supervisorId) + \"-Scheduler-%d\");\n     this.reportingExec = Execs.scheduledSingleThreaded(StringUtils.encodeForFormat(supervisorId) + \"-Reporting-%d\");\n+\n     this.stateManager = new SeekableStreamSupervisorStateManager(\n         spec.getSupervisorStateManagerConfig(),\n         spec.isSuspended()\n     );\n \n-    int workerThreads = (this.tuningConfig.getWorkerThreads() != null\n-                         ? this.tuningConfig.getWorkerThreads()\n-                         : Math.min(10, this.ioConfig.getTaskCount()));\n+    int workerThreads;\n+    int chatThreads;\n+    if (autoScalerConfig != null && autoScalerConfig.getEnableTaskAutoscaler()) {\n+      log.info(\"enableTaskAutoscaler for datasource [%s]\", dataSource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDE5NDMzMQ=="}, "originalCommit": {"oid": "feb3e1e88f68aed4f3ce8a3459d14caf85b663d6"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1OTc3Nzk1OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxMTo1OTowN1rOIpURcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwNjoxMzozMVrOIp4m6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDE5NDY3Mw==", "bodyText": "IMO this log is not required as this is the default behaviour", "url": "https://github.com/apache/druid/pull/10524#discussion_r580194673", "createdAt": "2021-02-22T11:59:07Z", "author": {"login": "pjain1"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -519,20 +635,42 @@ public SeekableStreamSupervisor(\n     this.useExclusiveStartingSequence = useExclusiveStartingSequence;\n     this.dataSource = spec.getDataSchema().getDataSource();\n     this.ioConfig = spec.getIoConfig();\n+    this.autoScalerConfig = ioConfig.getAutoscalerConfig();\n     this.tuningConfig = spec.getTuningConfig();\n     this.taskTuningConfig = this.tuningConfig.convertToTaskTuningConfig();\n     this.supervisorId = supervisorId;\n     this.exec = Execs.singleThreaded(StringUtils.encodeForFormat(supervisorId));\n     this.scheduledExec = Execs.scheduledSingleThreaded(StringUtils.encodeForFormat(supervisorId) + \"-Scheduler-%d\");\n     this.reportingExec = Execs.scheduledSingleThreaded(StringUtils.encodeForFormat(supervisorId) + \"-Reporting-%d\");\n+\n     this.stateManager = new SeekableStreamSupervisorStateManager(\n         spec.getSupervisorStateManagerConfig(),\n         spec.isSuspended()\n     );\n \n-    int workerThreads = (this.tuningConfig.getWorkerThreads() != null\n-                         ? this.tuningConfig.getWorkerThreads()\n-                         : Math.min(10, this.ioConfig.getTaskCount()));\n+    int workerThreads;\n+    int chatThreads;\n+    if (autoScalerConfig != null && autoScalerConfig.getEnableTaskAutoscaler()) {\n+      log.info(\"enableTaskAutoscaler for datasource [%s]\", dataSource);\n+\n+      workerThreads = (this.tuningConfig.getWorkerThreads() != null\n+              ? this.tuningConfig.getWorkerThreads()\n+              : Math.min(10, autoScalerConfig.getTaskCountMax()));\n+\n+      chatThreads = (this.tuningConfig.getChatThreads() != null\n+              ? this.tuningConfig.getChatThreads()\n+              : Math.min(10, autoScalerConfig.getTaskCountMax() * this.ioConfig.getReplicas()));\n+    } else {\n+      log.info(\"Disable dynamic allocate tasks for [%s]\", dataSource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb3e1e88f68aed4f3ce8a3459d14caf85b663d6"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDc4OTk5NA==", "bodyText": "Thanks && Changed.", "url": "https://github.com/apache/druid/pull/10524#discussion_r580789994", "createdAt": "2021-02-23T06:13:31Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -519,20 +635,42 @@ public SeekableStreamSupervisor(\n     this.useExclusiveStartingSequence = useExclusiveStartingSequence;\n     this.dataSource = spec.getDataSchema().getDataSource();\n     this.ioConfig = spec.getIoConfig();\n+    this.autoScalerConfig = ioConfig.getAutoscalerConfig();\n     this.tuningConfig = spec.getTuningConfig();\n     this.taskTuningConfig = this.tuningConfig.convertToTaskTuningConfig();\n     this.supervisorId = supervisorId;\n     this.exec = Execs.singleThreaded(StringUtils.encodeForFormat(supervisorId));\n     this.scheduledExec = Execs.scheduledSingleThreaded(StringUtils.encodeForFormat(supervisorId) + \"-Scheduler-%d\");\n     this.reportingExec = Execs.scheduledSingleThreaded(StringUtils.encodeForFormat(supervisorId) + \"-Reporting-%d\");\n+\n     this.stateManager = new SeekableStreamSupervisorStateManager(\n         spec.getSupervisorStateManagerConfig(),\n         spec.isSuspended()\n     );\n \n-    int workerThreads = (this.tuningConfig.getWorkerThreads() != null\n-                         ? this.tuningConfig.getWorkerThreads()\n-                         : Math.min(10, this.ioConfig.getTaskCount()));\n+    int workerThreads;\n+    int chatThreads;\n+    if (autoScalerConfig != null && autoScalerConfig.getEnableTaskAutoscaler()) {\n+      log.info(\"enableTaskAutoscaler for datasource [%s]\", dataSource);\n+\n+      workerThreads = (this.tuningConfig.getWorkerThreads() != null\n+              ? this.tuningConfig.getWorkerThreads()\n+              : Math.min(10, autoScalerConfig.getTaskCountMax()));\n+\n+      chatThreads = (this.tuningConfig.getChatThreads() != null\n+              ? this.tuningConfig.getChatThreads()\n+              : Math.min(10, autoScalerConfig.getTaskCountMax() * this.ioConfig.getReplicas()));\n+    } else {\n+      log.info(\"Disable dynamic allocate tasks for [%s]\", dataSource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDE5NDY3Mw=="}, "originalCommit": {"oid": "feb3e1e88f68aed4f3ce8a3459d14caf85b663d6"}, "originalPosition": 206}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1OTgyNjQ5OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxMjoxMTo1NVrOIpUugg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwNjoxMzozNlrOIp4m9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDIwMjExNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  try {\n          \n          \n            \n                    long nowTime = System.currentTimeMillis();\n          \n          \n            \n                    // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n          \n          \n            \n                    if (spec.isSuspended()) {\n          \n          \n            \n                      log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n          \n          \n            \n                      return;\n          \n          \n            \n                    }\n          \n          \n            \n                    log.debug(\"PendingCompletionTaskGroups is [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n          \n          \n            \n                    for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n          \n          \n            \n                      if (!list.isEmpty()) {\n          \n          \n            \n                        log.info(\"Still hand off tasks unfinished, skip to do scale action [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n          \n          \n            \n                        return;\n          \n          \n            \n                      }\n          \n          \n            \n                    }\n          \n          \n            \n                    if (autoScalerConfig != null && nowTime - dynamicTriggerLastRunTime < autoScalerConfig.getMinTriggerDynamicFrequencyMillis()) {\n          \n          \n            \n                      log.info(\"NowTime - dynamicTriggerLastRunTime is [%s]. Defined minTriggerDynamicFrequency is [%s] for dataSource [%s], CALM DOWN NOW !\", nowTime - dynamicTriggerLastRunTime, autoScalerConfig.getMinTriggerDynamicFrequencyMillis(), dataSource);\n          \n          \n            \n                      return;\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    Integer desriedTaskCount = scaleAction.call();\n          \n          \n            \n                    boolean allocationSuccess = dynamicAllocate(desriedTaskCount);\n          \n          \n            \n            \n          \n          \n            \n                    if (allocationSuccess) {\n          \n          \n            \n                      dynamicTriggerLastRunTime = nowTime;\n          \n          \n            \n                    }\n          \n          \n            \n                  }\n          \n          \n            \n                  catch (Exception ex) {\n          \n          \n            \n                    log.warn(ex, \"Error parsing DynamicAllocationTasksNotice\");\n          \n          \n            \n                  }\n          \n          \n            \n                }\n          \n          \n            \n                  if (autoScalerConfig == null) {\n          \n          \n            \n                    log.warn(\"autoScalerConfig is null but dynamic allocation notice is submitted, how can it be ?\");\n          \n          \n            \n                  } else {\n          \n          \n            \n                    try {\n          \n          \n            \n                      long nowTime = System.currentTimeMillis();\n          \n          \n            \n                      if (spec.isSuspended()) {\n          \n          \n            \n                        log.info(\"Skipping DynamicAllocationTasksNotice execution because [%s] supervisor is suspended\",\n          \n          \n            \n                            dataSource\n          \n          \n            \n                        );\n          \n          \n            \n                        return;\n          \n          \n            \n                      }\n          \n          \n            \n                      log.debug(\"PendingCompletionTaskGroups is [%s] for dataSource [%s]\", pendingCompletionTaskGroups,\n          \n          \n            \n                          dataSource\n          \n          \n            \n                      );\n          \n          \n            \n                      for (CopyOnWriteArrayList<TaskGroup> list : pendingCompletionTaskGroups.values()) {\n          \n          \n            \n                        if (!list.isEmpty()) {\n          \n          \n            \n                          log.info(\n          \n          \n            \n                              \"Skipping DynamicAllocationTasksNotice execution for datasource [%s] because following tasks are pending [%s]\",\n          \n          \n            \n                              dataSource, pendingCompletionTaskGroups\n          \n          \n            \n                          );\n          \n          \n            \n                          return;\n          \n          \n            \n                        }\n          \n          \n            \n                      }\n          \n          \n            \n                      if (nowTime - dynamicTriggerLastRunTime < autoScalerConfig.getMinTriggerDynamicFrequencyMillis()) {\n          \n          \n            \n                        log.info(\n          \n          \n            \n                            \"DynamicAllocationTasksNotice submitted again in [%d] millis, minTriggerDynamicFrequency is [%s] for dataSource [%s], skipping it!\",\n          \n          \n            \n                            nowTime - dynamicTriggerLastRunTime, autoScalerConfig.getMinTriggerDynamicFrequencyMillis(), dataSource\n          \n          \n            \n                        );\n          \n          \n            \n                        return;\n          \n          \n            \n                      }\n          \n          \n            \n            \n          \n          \n            \n                      Integer desriedTaskCount = scaleAction.call();\n          \n          \n            \n                      boolean allocationSuccess = dynamicAllocate(desriedTaskCount);\n          \n          \n            \n            \n          \n          \n            \n                      if (allocationSuccess) {\n          \n          \n            \n                        dynamicTriggerLastRunTime = nowTime;\n          \n          \n            \n                      }\n          \n          \n            \n                    } catch (Exception ex) {\n          \n          \n            \n                      log.warn(ex, \"Error parsing DynamicAllocationTasksNotice\");\n          \n          \n            \n                    }\n          \n          \n            \n                  }", "url": "https://github.com/apache/druid/pull/10524#discussion_r580202114", "createdAt": "2021-02-22T12:11:55Z", "author": {"login": "pjain1"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -318,6 +324,114 @@ public void handle()\n     }\n   }\n \n+  // change taskCount without resubmitting.\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    Callable<Integer> scaleAction;\n+\n+    DynamicAllocationTasksNotice(Callable<Integer> scaleAction)\n+    {\n+      this.scaleAction = scaleAction;\n+    }\n+\n+    /**\n+     * This method will do lags points collection and check dynamic scale action is necessary or not.\n+     */\n+    @Override\n+    public void handle()\n+    {\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.debug(\"PendingCompletionTaskGroups is [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+            return;\n+          }\n+        }\n+        if (autoScalerConfig != null && nowTime - dynamicTriggerLastRunTime < autoScalerConfig.getMinTriggerDynamicFrequencyMillis()) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [%s]. Defined minTriggerDynamicFrequency is [%s] for dataSource [%s], CALM DOWN NOW !\", nowTime - dynamicTriggerLastRunTime, autoScalerConfig.getMinTriggerDynamicFrequencyMillis(), dataSource);\n+          return;\n+        }\n+\n+        Integer desriedTaskCount = scaleAction.call();\n+        boolean allocationSuccess = dynamicAllocate(desriedTaskCount);\n+\n+        if (allocationSuccess) {\n+          dynamicTriggerLastRunTime = nowTime;\n+        }\n+      }\n+      catch (Exception ex) {\n+        log.warn(ex, \"Error parsing DynamicAllocationTasksNotice\");\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb3e1e88f68aed4f3ce8a3459d14caf85b663d6"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDc5MDAwNw==", "bodyText": "Thanks && Changed.", "url": "https://github.com/apache/druid/pull/10524#discussion_r580790007", "createdAt": "2021-02-23T06:13:36Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -318,6 +324,114 @@ public void handle()\n     }\n   }\n \n+  // change taskCount without resubmitting.\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    Callable<Integer> scaleAction;\n+\n+    DynamicAllocationTasksNotice(Callable<Integer> scaleAction)\n+    {\n+      this.scaleAction = scaleAction;\n+    }\n+\n+    /**\n+     * This method will do lags points collection and check dynamic scale action is necessary or not.\n+     */\n+    @Override\n+    public void handle()\n+    {\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.debug(\"PendingCompletionTaskGroups is [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+            return;\n+          }\n+        }\n+        if (autoScalerConfig != null && nowTime - dynamicTriggerLastRunTime < autoScalerConfig.getMinTriggerDynamicFrequencyMillis()) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [%s]. Defined minTriggerDynamicFrequency is [%s] for dataSource [%s], CALM DOWN NOW !\", nowTime - dynamicTriggerLastRunTime, autoScalerConfig.getMinTriggerDynamicFrequencyMillis(), dataSource);\n+          return;\n+        }\n+\n+        Integer desriedTaskCount = scaleAction.call();\n+        boolean allocationSuccess = dynamicAllocate(desriedTaskCount);\n+\n+        if (allocationSuccess) {\n+          dynamicTriggerLastRunTime = nowTime;\n+        }\n+      }\n+      catch (Exception ex) {\n+        log.warn(ex, \"Error parsing DynamicAllocationTasksNotice\");\n+      }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDIwMjExNA=="}, "originalCommit": {"oid": "feb3e1e88f68aed4f3ce8a3459d14caf85b663d6"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1OTg1OTUzOnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxMjoyMDoyN1rOIpVCBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwNjoxMzo0MFrOIp4nBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDIwNzExMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               *    First of all, call gracefulShutdownInternal() which will change the state of  current datasource ingest tasks from reading to publishing.\n          \n          \n            \n               *    Secondly, clear all the stateful data structures: activelyReadingTaskGroups, partitionGroups, partitionOffsets, pendingCompletionTaskGroups, partitionIds. These structures will be rebuiled next 'RunNotice'.\n          \n          \n            \n               *    Finally, change taskCount in SeekableStreamSupervisorIOConfig and sync it to MetaStorage.\n          \n          \n            \n               * After changed taskCount in SeekableStreamSupervisorIOConfig, next RunNotice will create scaled number of ingest tasks without resubmitting supervisors.\n          \n          \n            \n               * @param desiredActiveTaskCount desired taskCount compute from autoscaler\n          \n          \n            \n               * @return Boolean flag, do scale action successfully or not. If true , it will take at least 'minTriggerDynamicFrequency' before next 'dynamicAllocate'.\n          \n          \n            \n               *         If false, it will do 'dynamicAllocate' again after 'dynamicCheckPeriod'.\n          \n          \n            \n               *    First of all, call gracefulShutdownInternal() which will change the state of current datasource ingest tasks from reading to publishing.\n          \n          \n            \n               *    Secondly, clear all the stateful data structures: activelyReadingTaskGroups, partitionGroups, partitionOffsets, pendingCompletionTaskGroups, partitionIds. These structures will be rebuild in the next 'RunNotice'.\n          \n          \n            \n               *    Finally, change the taskCount in SeekableStreamSupervisorIOConfig and sync it to MetadataStorage.\n          \n          \n            \n               * After the taskCount is changed in SeekableStreamSupervisorIOConfig, next RunNotice will create scaled number of ingest tasks without resubmitting the supervisor.\n          \n          \n            \n               * @param desiredActiveTaskCount desired taskCount compute from autoscaler\n          \n          \n            \n               * @return Boolean flag indicating if scale action was executed or not. If true, it will wait at least 'minTriggerDynamicFrequency' before next 'dynamicAllocate'.\n          \n          \n            \n               *         If false, it will do 'dynamicAllocate' again after 'dynamicCheckPeriod' millis.", "url": "https://github.com/apache/druid/pull/10524#discussion_r580207110", "createdAt": "2021-02-22T12:20:27Z", "author": {"login": "pjain1"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -318,6 +324,114 @@ public void handle()\n     }\n   }\n \n+  // change taskCount without resubmitting.\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    Callable<Integer> scaleAction;\n+\n+    DynamicAllocationTasksNotice(Callable<Integer> scaleAction)\n+    {\n+      this.scaleAction = scaleAction;\n+    }\n+\n+    /**\n+     * This method will do lags points collection and check dynamic scale action is necessary or not.\n+     */\n+    @Override\n+    public void handle()\n+    {\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.debug(\"PendingCompletionTaskGroups is [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+            return;\n+          }\n+        }\n+        if (autoScalerConfig != null && nowTime - dynamicTriggerLastRunTime < autoScalerConfig.getMinTriggerDynamicFrequencyMillis()) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [%s]. Defined minTriggerDynamicFrequency is [%s] for dataSource [%s], CALM DOWN NOW !\", nowTime - dynamicTriggerLastRunTime, autoScalerConfig.getMinTriggerDynamicFrequencyMillis(), dataSource);\n+          return;\n+        }\n+\n+        Integer desriedTaskCount = scaleAction.call();\n+        boolean allocationSuccess = dynamicAllocate(desriedTaskCount);\n+\n+        if (allocationSuccess) {\n+          dynamicTriggerLastRunTime = nowTime;\n+        }\n+      }\n+      catch (Exception ex) {\n+        log.warn(ex, \"Error parsing DynamicAllocationTasksNotice\");\n+      }\n+    }\n+  }\n+\n+  /**\n+   * This method determines how to do scale actions based on collected lag points.\n+   * If scale action is triggered :\n+   *    First of all, call gracefulShutdownInternal() which will change the state of  current datasource ingest tasks from reading to publishing.\n+   *    Secondly, clear all the stateful data structures: activelyReadingTaskGroups, partitionGroups, partitionOffsets, pendingCompletionTaskGroups, partitionIds. These structures will be rebuiled next 'RunNotice'.\n+   *    Finally, change taskCount in SeekableStreamSupervisorIOConfig and sync it to MetaStorage.\n+   * After changed taskCount in SeekableStreamSupervisorIOConfig, next RunNotice will create scaled number of ingest tasks without resubmitting supervisors.\n+   * @param desiredActiveTaskCount desired taskCount compute from autoscaler\n+   * @return Boolean flag, do scale action successfully or not. If true , it will take at least 'minTriggerDynamicFrequency' before next 'dynamicAllocate'.\n+   *         If false, it will do 'dynamicAllocate' again after 'dynamicCheckPeriod'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb3e1e88f68aed4f3ce8a3459d14caf85b663d6"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDc5MDAyMw==", "bodyText": "Thanks && Changed.", "url": "https://github.com/apache/druid/pull/10524#discussion_r580790023", "createdAt": "2021-02-23T06:13:40Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -318,6 +324,114 @@ public void handle()\n     }\n   }\n \n+  // change taskCount without resubmitting.\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    Callable<Integer> scaleAction;\n+\n+    DynamicAllocationTasksNotice(Callable<Integer> scaleAction)\n+    {\n+      this.scaleAction = scaleAction;\n+    }\n+\n+    /**\n+     * This method will do lags points collection and check dynamic scale action is necessary or not.\n+     */\n+    @Override\n+    public void handle()\n+    {\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.debug(\"PendingCompletionTaskGroups is [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+            return;\n+          }\n+        }\n+        if (autoScalerConfig != null && nowTime - dynamicTriggerLastRunTime < autoScalerConfig.getMinTriggerDynamicFrequencyMillis()) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [%s]. Defined minTriggerDynamicFrequency is [%s] for dataSource [%s], CALM DOWN NOW !\", nowTime - dynamicTriggerLastRunTime, autoScalerConfig.getMinTriggerDynamicFrequencyMillis(), dataSource);\n+          return;\n+        }\n+\n+        Integer desriedTaskCount = scaleAction.call();\n+        boolean allocationSuccess = dynamicAllocate(desriedTaskCount);\n+\n+        if (allocationSuccess) {\n+          dynamicTriggerLastRunTime = nowTime;\n+        }\n+      }\n+      catch (Exception ex) {\n+        log.warn(ex, \"Error parsing DynamicAllocationTasksNotice\");\n+      }\n+    }\n+  }\n+\n+  /**\n+   * This method determines how to do scale actions based on collected lag points.\n+   * If scale action is triggered :\n+   *    First of all, call gracefulShutdownInternal() which will change the state of  current datasource ingest tasks from reading to publishing.\n+   *    Secondly, clear all the stateful data structures: activelyReadingTaskGroups, partitionGroups, partitionOffsets, pendingCompletionTaskGroups, partitionIds. These structures will be rebuiled next 'RunNotice'.\n+   *    Finally, change taskCount in SeekableStreamSupervisorIOConfig and sync it to MetaStorage.\n+   * After changed taskCount in SeekableStreamSupervisorIOConfig, next RunNotice will create scaled number of ingest tasks without resubmitting supervisors.\n+   * @param desiredActiveTaskCount desired taskCount compute from autoscaler\n+   * @return Boolean flag, do scale action successfully or not. If true , it will take at least 'minTriggerDynamicFrequency' before next 'dynamicAllocate'.\n+   *         If false, it will do 'dynamicAllocate' again after 'dynamicCheckPeriod'.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDIwNzExMA=="}, "originalCommit": {"oid": "feb3e1e88f68aed4f3ce8a3459d14caf85b663d6"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1OTg2Mjg0OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxMjoyMToyMlrOIpVEIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwNjoxMzo0M1rOIp4nDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDIwNzY0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  log.debug(\"Start to scale action tasks, current active task number [%s] and desired task number is [%s] for dataSource [%s].\", currentActiveTaskCount, desiredActiveTaskCount, dataSource);\n          \n          \n            \n                  log.debug(\n          \n          \n            \n                      \"Starting scale action, current active task count is [%d] and desired task count is [%d] for dataSource [%s].\",\n          \n          \n            \n                      currentActiveTaskCount, desiredActiveTaskCount, dataSource\n          \n          \n            \n                  );", "url": "https://github.com/apache/druid/pull/10524#discussion_r580207649", "createdAt": "2021-02-22T12:21:22Z", "author": {"login": "pjain1"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -318,6 +324,114 @@ public void handle()\n     }\n   }\n \n+  // change taskCount without resubmitting.\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    Callable<Integer> scaleAction;\n+\n+    DynamicAllocationTasksNotice(Callable<Integer> scaleAction)\n+    {\n+      this.scaleAction = scaleAction;\n+    }\n+\n+    /**\n+     * This method will do lags points collection and check dynamic scale action is necessary or not.\n+     */\n+    @Override\n+    public void handle()\n+    {\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.debug(\"PendingCompletionTaskGroups is [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+            return;\n+          }\n+        }\n+        if (autoScalerConfig != null && nowTime - dynamicTriggerLastRunTime < autoScalerConfig.getMinTriggerDynamicFrequencyMillis()) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [%s]. Defined minTriggerDynamicFrequency is [%s] for dataSource [%s], CALM DOWN NOW !\", nowTime - dynamicTriggerLastRunTime, autoScalerConfig.getMinTriggerDynamicFrequencyMillis(), dataSource);\n+          return;\n+        }\n+\n+        Integer desriedTaskCount = scaleAction.call();\n+        boolean allocationSuccess = dynamicAllocate(desriedTaskCount);\n+\n+        if (allocationSuccess) {\n+          dynamicTriggerLastRunTime = nowTime;\n+        }\n+      }\n+      catch (Exception ex) {\n+        log.warn(ex, \"Error parsing DynamicAllocationTasksNotice\");\n+      }\n+    }\n+  }\n+\n+  /**\n+   * This method determines how to do scale actions based on collected lag points.\n+   * If scale action is triggered :\n+   *    First of all, call gracefulShutdownInternal() which will change the state of  current datasource ingest tasks from reading to publishing.\n+   *    Secondly, clear all the stateful data structures: activelyReadingTaskGroups, partitionGroups, partitionOffsets, pendingCompletionTaskGroups, partitionIds. These structures will be rebuiled next 'RunNotice'.\n+   *    Finally, change taskCount in SeekableStreamSupervisorIOConfig and sync it to MetaStorage.\n+   * After changed taskCount in SeekableStreamSupervisorIOConfig, next RunNotice will create scaled number of ingest tasks without resubmitting supervisors.\n+   * @param desiredActiveTaskCount desired taskCount compute from autoscaler\n+   * @return Boolean flag, do scale action successfully or not. If true , it will take at least 'minTriggerDynamicFrequency' before next 'dynamicAllocate'.\n+   *         If false, it will do 'dynamicAllocate' again after 'dynamicCheckPeriod'.\n+   * @throws InterruptedException\n+   * @throws ExecutionException\n+   * @throws TimeoutException\n+   */\n+  private boolean dynamicAllocate(Integer desiredActiveTaskCount) throws InterruptedException, ExecutionException, TimeoutException\n+  {\n+    int currentActiveTaskCount;\n+    Collection<TaskGroup> activeTaskGroups = activelyReadingTaskGroups.values();\n+    currentActiveTaskCount = activeTaskGroups.size();\n+\n+    if (desiredActiveTaskCount == -1 || desiredActiveTaskCount == currentActiveTaskCount) {\n+      return false;\n+    } else {\n+      log.debug(\"Start to scale action tasks, current active task number [%s] and desired task number is [%s] for dataSource [%s].\", currentActiveTaskCount, desiredActiveTaskCount, dataSource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb3e1e88f68aed4f3ce8a3459d14caf85b663d6"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDc5MDAyOQ==", "bodyText": "Thanks && Changed.", "url": "https://github.com/apache/druid/pull/10524#discussion_r580790029", "createdAt": "2021-02-23T06:13:43Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -318,6 +324,114 @@ public void handle()\n     }\n   }\n \n+  // change taskCount without resubmitting.\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    Callable<Integer> scaleAction;\n+\n+    DynamicAllocationTasksNotice(Callable<Integer> scaleAction)\n+    {\n+      this.scaleAction = scaleAction;\n+    }\n+\n+    /**\n+     * This method will do lags points collection and check dynamic scale action is necessary or not.\n+     */\n+    @Override\n+    public void handle()\n+    {\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.debug(\"PendingCompletionTaskGroups is [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+            return;\n+          }\n+        }\n+        if (autoScalerConfig != null && nowTime - dynamicTriggerLastRunTime < autoScalerConfig.getMinTriggerDynamicFrequencyMillis()) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [%s]. Defined minTriggerDynamicFrequency is [%s] for dataSource [%s], CALM DOWN NOW !\", nowTime - dynamicTriggerLastRunTime, autoScalerConfig.getMinTriggerDynamicFrequencyMillis(), dataSource);\n+          return;\n+        }\n+\n+        Integer desriedTaskCount = scaleAction.call();\n+        boolean allocationSuccess = dynamicAllocate(desriedTaskCount);\n+\n+        if (allocationSuccess) {\n+          dynamicTriggerLastRunTime = nowTime;\n+        }\n+      }\n+      catch (Exception ex) {\n+        log.warn(ex, \"Error parsing DynamicAllocationTasksNotice\");\n+      }\n+    }\n+  }\n+\n+  /**\n+   * This method determines how to do scale actions based on collected lag points.\n+   * If scale action is triggered :\n+   *    First of all, call gracefulShutdownInternal() which will change the state of  current datasource ingest tasks from reading to publishing.\n+   *    Secondly, clear all the stateful data structures: activelyReadingTaskGroups, partitionGroups, partitionOffsets, pendingCompletionTaskGroups, partitionIds. These structures will be rebuiled next 'RunNotice'.\n+   *    Finally, change taskCount in SeekableStreamSupervisorIOConfig and sync it to MetaStorage.\n+   * After changed taskCount in SeekableStreamSupervisorIOConfig, next RunNotice will create scaled number of ingest tasks without resubmitting supervisors.\n+   * @param desiredActiveTaskCount desired taskCount compute from autoscaler\n+   * @return Boolean flag, do scale action successfully or not. If true , it will take at least 'minTriggerDynamicFrequency' before next 'dynamicAllocate'.\n+   *         If false, it will do 'dynamicAllocate' again after 'dynamicCheckPeriod'.\n+   * @throws InterruptedException\n+   * @throws ExecutionException\n+   * @throws TimeoutException\n+   */\n+  private boolean dynamicAllocate(Integer desiredActiveTaskCount) throws InterruptedException, ExecutionException, TimeoutException\n+  {\n+    int currentActiveTaskCount;\n+    Collection<TaskGroup> activeTaskGroups = activelyReadingTaskGroups.values();\n+    currentActiveTaskCount = activeTaskGroups.size();\n+\n+    if (desiredActiveTaskCount == -1 || desiredActiveTaskCount == currentActiveTaskCount) {\n+      return false;\n+    } else {\n+      log.debug(\"Start to scale action tasks, current active task number [%s] and desired task number is [%s] for dataSource [%s].\", currentActiveTaskCount, desiredActiveTaskCount, dataSource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDIwNzY0OQ=="}, "originalCommit": {"oid": "feb3e1e88f68aed4f3ce8a3459d14caf85b663d6"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1OTg2NzEzOnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxMjoyMjoyM1rOIpVGnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwNjoxMzo0OFrOIp4nHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDIwODI4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    log.warn(\"supervisorManager is null in taskMaster, skip to do scale action for dataSource [%s].\", dataSource);\n          \n          \n            \n                    log.warn(\"supervisorManager is null in taskMaster, skipping scale action for dataSource [%s].\", dataSource);", "url": "https://github.com/apache/druid/pull/10524#discussion_r580208287", "createdAt": "2021-02-22T12:22:23Z", "author": {"login": "pjain1"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -318,6 +324,114 @@ public void handle()\n     }\n   }\n \n+  // change taskCount without resubmitting.\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    Callable<Integer> scaleAction;\n+\n+    DynamicAllocationTasksNotice(Callable<Integer> scaleAction)\n+    {\n+      this.scaleAction = scaleAction;\n+    }\n+\n+    /**\n+     * This method will do lags points collection and check dynamic scale action is necessary or not.\n+     */\n+    @Override\n+    public void handle()\n+    {\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.debug(\"PendingCompletionTaskGroups is [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+            return;\n+          }\n+        }\n+        if (autoScalerConfig != null && nowTime - dynamicTriggerLastRunTime < autoScalerConfig.getMinTriggerDynamicFrequencyMillis()) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [%s]. Defined minTriggerDynamicFrequency is [%s] for dataSource [%s], CALM DOWN NOW !\", nowTime - dynamicTriggerLastRunTime, autoScalerConfig.getMinTriggerDynamicFrequencyMillis(), dataSource);\n+          return;\n+        }\n+\n+        Integer desriedTaskCount = scaleAction.call();\n+        boolean allocationSuccess = dynamicAllocate(desriedTaskCount);\n+\n+        if (allocationSuccess) {\n+          dynamicTriggerLastRunTime = nowTime;\n+        }\n+      }\n+      catch (Exception ex) {\n+        log.warn(ex, \"Error parsing DynamicAllocationTasksNotice\");\n+      }\n+    }\n+  }\n+\n+  /**\n+   * This method determines how to do scale actions based on collected lag points.\n+   * If scale action is triggered :\n+   *    First of all, call gracefulShutdownInternal() which will change the state of  current datasource ingest tasks from reading to publishing.\n+   *    Secondly, clear all the stateful data structures: activelyReadingTaskGroups, partitionGroups, partitionOffsets, pendingCompletionTaskGroups, partitionIds. These structures will be rebuiled next 'RunNotice'.\n+   *    Finally, change taskCount in SeekableStreamSupervisorIOConfig and sync it to MetaStorage.\n+   * After changed taskCount in SeekableStreamSupervisorIOConfig, next RunNotice will create scaled number of ingest tasks without resubmitting supervisors.\n+   * @param desiredActiveTaskCount desired taskCount compute from autoscaler\n+   * @return Boolean flag, do scale action successfully or not. If true , it will take at least 'minTriggerDynamicFrequency' before next 'dynamicAllocate'.\n+   *         If false, it will do 'dynamicAllocate' again after 'dynamicCheckPeriod'.\n+   * @throws InterruptedException\n+   * @throws ExecutionException\n+   * @throws TimeoutException\n+   */\n+  private boolean dynamicAllocate(Integer desiredActiveTaskCount) throws InterruptedException, ExecutionException, TimeoutException\n+  {\n+    int currentActiveTaskCount;\n+    Collection<TaskGroup> activeTaskGroups = activelyReadingTaskGroups.values();\n+    currentActiveTaskCount = activeTaskGroups.size();\n+\n+    if (desiredActiveTaskCount == -1 || desiredActiveTaskCount == currentActiveTaskCount) {\n+      return false;\n+    } else {\n+      log.debug(\"Start to scale action tasks, current active task number [%s] and desired task number is [%s] for dataSource [%s].\", currentActiveTaskCount, desiredActiveTaskCount, dataSource);\n+      gracefulShutdownInternal();\n+      changeTaskCountInIOConfig(desiredActiveTaskCount);\n+      // clear everything\n+      clearAllocationInfos();\n+      log.info(\"Changed taskCount to [%s] for dataSource [%s].\", desiredActiveTaskCount, dataSource);\n+      return true;\n+    }\n+  }\n+\n+  private void changeTaskCountInIOConfig(int desiredActiveTaskCount)\n+  {\n+    ioConfig.setTaskCount(desiredActiveTaskCount);\n+    try {\n+      Optional<SupervisorManager> supervisorManager = taskMaster.getSupervisorManager();\n+      if (supervisorManager.isPresent()) {\n+        MetadataSupervisorManager metadataSupervisorManager = supervisorManager.get().getMetadataSupervisorManager();\n+        metadataSupervisorManager.insert(dataSource, spec);\n+      } else {\n+        log.warn(\"supervisorManager is null in taskMaster, skip to do scale action for dataSource [%s].\", dataSource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb3e1e88f68aed4f3ce8a3459d14caf85b663d6"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDc5MDA0Nw==", "bodyText": "Thanks && Changed.", "url": "https://github.com/apache/druid/pull/10524#discussion_r580790047", "createdAt": "2021-02-23T06:13:48Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -318,6 +324,114 @@ public void handle()\n     }\n   }\n \n+  // change taskCount without resubmitting.\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    Callable<Integer> scaleAction;\n+\n+    DynamicAllocationTasksNotice(Callable<Integer> scaleAction)\n+    {\n+      this.scaleAction = scaleAction;\n+    }\n+\n+    /**\n+     * This method will do lags points collection and check dynamic scale action is necessary or not.\n+     */\n+    @Override\n+    public void handle()\n+    {\n+      try {\n+        long nowTime = System.currentTimeMillis();\n+        // Only queue is full and over minTriggerDynamicFrequency can trigger scale out/in\n+        if (spec.isSuspended()) {\n+          log.info(\"[%s] supervisor is suspended, skip to check dynamic allocate task logic\", dataSource);\n+          return;\n+        }\n+        log.debug(\"PendingCompletionTaskGroups is [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+        for (CopyOnWriteArrayList list : pendingCompletionTaskGroups.values()) {\n+          if (!list.isEmpty()) {\n+            log.info(\"Still hand off tasks unfinished, skip to do scale action [%s] for dataSource [%s].\", pendingCompletionTaskGroups, dataSource);\n+            return;\n+          }\n+        }\n+        if (autoScalerConfig != null && nowTime - dynamicTriggerLastRunTime < autoScalerConfig.getMinTriggerDynamicFrequencyMillis()) {\n+          log.info(\"NowTime - dynamicTriggerLastRunTime is [%s]. Defined minTriggerDynamicFrequency is [%s] for dataSource [%s], CALM DOWN NOW !\", nowTime - dynamicTriggerLastRunTime, autoScalerConfig.getMinTriggerDynamicFrequencyMillis(), dataSource);\n+          return;\n+        }\n+\n+        Integer desriedTaskCount = scaleAction.call();\n+        boolean allocationSuccess = dynamicAllocate(desriedTaskCount);\n+\n+        if (allocationSuccess) {\n+          dynamicTriggerLastRunTime = nowTime;\n+        }\n+      }\n+      catch (Exception ex) {\n+        log.warn(ex, \"Error parsing DynamicAllocationTasksNotice\");\n+      }\n+    }\n+  }\n+\n+  /**\n+   * This method determines how to do scale actions based on collected lag points.\n+   * If scale action is triggered :\n+   *    First of all, call gracefulShutdownInternal() which will change the state of  current datasource ingest tasks from reading to publishing.\n+   *    Secondly, clear all the stateful data structures: activelyReadingTaskGroups, partitionGroups, partitionOffsets, pendingCompletionTaskGroups, partitionIds. These structures will be rebuiled next 'RunNotice'.\n+   *    Finally, change taskCount in SeekableStreamSupervisorIOConfig and sync it to MetaStorage.\n+   * After changed taskCount in SeekableStreamSupervisorIOConfig, next RunNotice will create scaled number of ingest tasks without resubmitting supervisors.\n+   * @param desiredActiveTaskCount desired taskCount compute from autoscaler\n+   * @return Boolean flag, do scale action successfully or not. If true , it will take at least 'minTriggerDynamicFrequency' before next 'dynamicAllocate'.\n+   *         If false, it will do 'dynamicAllocate' again after 'dynamicCheckPeriod'.\n+   * @throws InterruptedException\n+   * @throws ExecutionException\n+   * @throws TimeoutException\n+   */\n+  private boolean dynamicAllocate(Integer desiredActiveTaskCount) throws InterruptedException, ExecutionException, TimeoutException\n+  {\n+    int currentActiveTaskCount;\n+    Collection<TaskGroup> activeTaskGroups = activelyReadingTaskGroups.values();\n+    currentActiveTaskCount = activeTaskGroups.size();\n+\n+    if (desiredActiveTaskCount == -1 || desiredActiveTaskCount == currentActiveTaskCount) {\n+      return false;\n+    } else {\n+      log.debug(\"Start to scale action tasks, current active task number [%s] and desired task number is [%s] for dataSource [%s].\", currentActiveTaskCount, desiredActiveTaskCount, dataSource);\n+      gracefulShutdownInternal();\n+      changeTaskCountInIOConfig(desiredActiveTaskCount);\n+      // clear everything\n+      clearAllocationInfos();\n+      log.info(\"Changed taskCount to [%s] for dataSource [%s].\", desiredActiveTaskCount, dataSource);\n+      return true;\n+    }\n+  }\n+\n+  private void changeTaskCountInIOConfig(int desiredActiveTaskCount)\n+  {\n+    ioConfig.setTaskCount(desiredActiveTaskCount);\n+    try {\n+      Optional<SupervisorManager> supervisorManager = taskMaster.getSupervisorManager();\n+      if (supervisorManager.isPresent()) {\n+        MetadataSupervisorManager metadataSupervisorManager = supervisorManager.get().getMetadataSupervisorManager();\n+        metadataSupervisorManager.insert(dataSource, spec);\n+      } else {\n+        log.warn(\"supervisorManager is null in taskMaster, skip to do scale action for dataSource [%s].\", dataSource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDIwODI4Nw=="}, "originalCommit": {"oid": "feb3e1e88f68aed4f3ce8a3459d14caf85b663d6"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1OTg4Mzc1OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxMjoyNzowM1rOIpVQvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwNjoxMzo1NFrOIp4nQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDIxMDg3OQ==", "bodyText": "Not sure what you mean by fill in 'lags'\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * This method compute maxLag, totalLag and avgLag then fill in 'lags'\n          \n          \n            \n               * This method computes maxLag, totalLag and avgLag", "url": "https://github.com/apache/druid/pull/10524#discussion_r580210879", "createdAt": "2021-02-22T12:27:03Z", "author": {"login": "pjain1"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -3543,6 +3682,24 @@ protected void emitLag()\n     }\n   }\n \n+\n+  /**\n+   * This method compute maxLag, totalLag and avgLag then fill in 'lags'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb3e1e88f68aed4f3ce8a3459d14caf85b663d6"}, "originalPosition": 311}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDc5MDA4MQ==", "bodyText": "Thanks && Changed.", "url": "https://github.com/apache/druid/pull/10524#discussion_r580790081", "createdAt": "2021-02-23T06:13:54Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -3543,6 +3682,24 @@ protected void emitLag()\n     }\n   }\n \n+\n+  /**\n+   * This method compute maxLag, totalLag and avgLag then fill in 'lags'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDIxMDg3OQ=="}, "originalCommit": {"oid": "feb3e1e88f68aed4f3ce8a3459d14caf85b663d6"}, "originalPosition": 311}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY2MDAyMDcxOnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisorSpec.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMlQxMzowMTowNVrOIpWheA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QwNjoxNDoyNFrOIp4oIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDIzMTU0NA==", "bodyText": "if by mistake one submits autoScalerConfig for kinesis supervisor then seems like DefaultAutoScaler  is created for kinesis also ?", "url": "https://github.com/apache/druid/pull/10524#discussion_r580231544", "createdAt": "2021-02-22T13:01:05Z", "author": {"login": "pjain1"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisorSpec.java", "diffHunk": "@@ -151,6 +157,37 @@ public DruidMonitorSchedulerConfig getMonitorSchedulerConfig()\n   @Override\n   public abstract Supervisor createSupervisor();\n \n+  /**\n+   * need to notice that autoScaler would be null which means autoscale is dissable.\n+   * @param supervisor\n+   * @return autoScaler, disable autoscale will return dummyAutoScaler and enable autoscale wiil return defaultAutoScaler by default.\n+   */\n+  @Override\n+  @SuppressFBWarnings(value = \"RV_RETURN_VALUE_IGNORED\", justification = \"using siwtch(String)\")\n+  public SupervisorTaskAutoscaler createAutoscaler(Supervisor supervisor)\n+  {\n+    String dataSource = getId();\n+    SupervisorTaskAutoscaler autoScaler = new DummyAutoScaler(supervisor, dataSource);\n+    AutoScalerConfig autoScalerConfig = ingestionSchema.getIOConfig().getAutoscalerConfig();\n+\n+    // kinesis'autoscalerConfig is always null for now, So that kinesis will hold a DummyAutoScaler.\n+    // only SeekableStreamSupervisor is supported here.\n+    if (autoScalerConfig != null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb3e1e88f68aed4f3ce8a3459d14caf85b663d6"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDIzMzg3Ng==", "bodyText": "I see null is being passed from KinesisSupervisorIOConfig so it will be null", "url": "https://github.com/apache/druid/pull/10524#discussion_r580233876", "createdAt": "2021-02-22T13:05:20Z", "author": {"login": "pjain1"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisorSpec.java", "diffHunk": "@@ -151,6 +157,37 @@ public DruidMonitorSchedulerConfig getMonitorSchedulerConfig()\n   @Override\n   public abstract Supervisor createSupervisor();\n \n+  /**\n+   * need to notice that autoScaler would be null which means autoscale is dissable.\n+   * @param supervisor\n+   * @return autoScaler, disable autoscale will return dummyAutoScaler and enable autoscale wiil return defaultAutoScaler by default.\n+   */\n+  @Override\n+  @SuppressFBWarnings(value = \"RV_RETURN_VALUE_IGNORED\", justification = \"using siwtch(String)\")\n+  public SupervisorTaskAutoscaler createAutoscaler(Supervisor supervisor)\n+  {\n+    String dataSource = getId();\n+    SupervisorTaskAutoscaler autoScaler = new DummyAutoScaler(supervisor, dataSource);\n+    AutoScalerConfig autoScalerConfig = ingestionSchema.getIOConfig().getAutoscalerConfig();\n+\n+    // kinesis'autoscalerConfig is always null for now, So that kinesis will hold a DummyAutoScaler.\n+    // only SeekableStreamSupervisor is supported here.\n+    if (autoScalerConfig != null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDIzMTU0NA=="}, "originalCommit": {"oid": "feb3e1e88f68aed4f3ce8a3459d14caf85b663d6"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDI4MDYzNg==", "bodyText": "reviewed till here", "url": "https://github.com/apache/druid/pull/10524#discussion_r580280636", "createdAt": "2021-02-22T14:14:25Z", "author": {"login": "pjain1"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisorSpec.java", "diffHunk": "@@ -151,6 +157,37 @@ public DruidMonitorSchedulerConfig getMonitorSchedulerConfig()\n   @Override\n   public abstract Supervisor createSupervisor();\n \n+  /**\n+   * need to notice that autoScaler would be null which means autoscale is dissable.\n+   * @param supervisor\n+   * @return autoScaler, disable autoscale will return dummyAutoScaler and enable autoscale wiil return defaultAutoScaler by default.\n+   */\n+  @Override\n+  @SuppressFBWarnings(value = \"RV_RETURN_VALUE_IGNORED\", justification = \"using siwtch(String)\")\n+  public SupervisorTaskAutoscaler createAutoscaler(Supervisor supervisor)\n+  {\n+    String dataSource = getId();\n+    SupervisorTaskAutoscaler autoScaler = new DummyAutoScaler(supervisor, dataSource);\n+    AutoScalerConfig autoScalerConfig = ingestionSchema.getIOConfig().getAutoscalerConfig();\n+\n+    // kinesis'autoscalerConfig is always null for now, So that kinesis will hold a DummyAutoScaler.\n+    // only SeekableStreamSupervisor is supported here.\n+    if (autoScalerConfig != null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDIzMTU0NA=="}, "originalCommit": {"oid": "feb3e1e88f68aed4f3ce8a3459d14caf85b663d6"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDc5MDMwNw==", "bodyText": "Thanks.", "url": "https://github.com/apache/druid/pull/10524#discussion_r580790307", "createdAt": "2021-02-23T06:14:24Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisorSpec.java", "diffHunk": "@@ -151,6 +157,37 @@ public DruidMonitorSchedulerConfig getMonitorSchedulerConfig()\n   @Override\n   public abstract Supervisor createSupervisor();\n \n+  /**\n+   * need to notice that autoScaler would be null which means autoscale is dissable.\n+   * @param supervisor\n+   * @return autoScaler, disable autoscale will return dummyAutoScaler and enable autoscale wiil return defaultAutoScaler by default.\n+   */\n+  @Override\n+  @SuppressFBWarnings(value = \"RV_RETURN_VALUE_IGNORED\", justification = \"using siwtch(String)\")\n+  public SupervisorTaskAutoscaler createAutoscaler(Supervisor supervisor)\n+  {\n+    String dataSource = getId();\n+    SupervisorTaskAutoscaler autoScaler = new DummyAutoScaler(supervisor, dataSource);\n+    AutoScalerConfig autoScalerConfig = ingestionSchema.getIOConfig().getAutoscalerConfig();\n+\n+    // kinesis'autoscalerConfig is always null for now, So that kinesis will hold a DummyAutoScaler.\n+    // only SeekableStreamSupervisor is supported here.\n+    if (autoScalerConfig != null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MDIzMTU0NA=="}, "originalCommit": {"oid": "feb3e1e88f68aed4f3ce8a3459d14caf85b663d6"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY3MDgwMTUxOnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisorSpec.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNFQxMjoyMTozNVrOIq9LiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNVQwOToxMzoxOFrOIrq_hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTkxMzQ4MQ==", "bodyText": "The way autoScaler instance is created here does not support custom autoScaler implementation in extensions as switch statement is used to create the instance. If a new strategy is implemented for autoScaler in an extension, this class needs to be changed to support it which is not ideal as its a change in core Druid. I have raised a PR on your branch on how we can fix this - zhangyue19921010#1\nThe changes are -\n\nAdd SupervisorTaskAutoScaler createAutoScaler(Supervisor supervisor, SupervisorSpec spec); method in AutoScalerConfig that will be called from SeekableStreamSupervisorSpec to create autoScaler.\nI don't think getAutoScalerStrategy method is needed in AutoScalerConfig as implementation of AutoScalerConfig can return instance of AutoScaler directly on call to createAutoScaler.", "url": "https://github.com/apache/druid/pull/10524#discussion_r581913481", "createdAt": "2021-02-24T12:21:35Z", "author": {"login": "pjain1"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisorSpec.java", "diffHunk": "@@ -151,6 +157,37 @@ public DruidMonitorSchedulerConfig getMonitorSchedulerConfig()\n   @Override\n   public abstract Supervisor createSupervisor();\n \n+  /**\n+   * need to notice that autoScaler would be null which means autoscale is dissable.\n+   * @param supervisor\n+   * @return autoScaler, disable autoscale will return dummyAutoScaler and enable autoscale wiil return defaultAutoScaler by default.\n+   */\n+  @Override\n+  @SuppressFBWarnings(value = \"RV_RETURN_VALUE_IGNORED\", justification = \"using siwtch(String)\")\n+  public SupervisorTaskAutoscaler createAutoscaler(Supervisor supervisor)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688b9c4b4ff1841477d8139a7c83e54d36ccb986"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjY2NDA3MA==", "bodyText": "Nice Coding! changed.", "url": "https://github.com/apache/druid/pull/10524#discussion_r582664070", "createdAt": "2021-02-25T09:13:18Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisorSpec.java", "diffHunk": "@@ -151,6 +157,37 @@ public DruidMonitorSchedulerConfig getMonitorSchedulerConfig()\n   @Override\n   public abstract Supervisor createSupervisor();\n \n+  /**\n+   * need to notice that autoScaler would be null which means autoscale is dissable.\n+   * @param supervisor\n+   * @return autoScaler, disable autoscale will return dummyAutoScaler and enable autoscale wiil return defaultAutoScaler by default.\n+   */\n+  @Override\n+  @SuppressFBWarnings(value = \"RV_RETURN_VALUE_IGNORED\", justification = \"using siwtch(String)\")\n+  public SupervisorTaskAutoscaler createAutoscaler(Supervisor supervisor)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTkxMzQ4MQ=="}, "originalCommit": {"oid": "688b9c4b4ff1841477d8139a7c83e54d36ccb986"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY3MDgwNDE5OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/AutoScalerConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNFQxMjoyMjoxNVrOIq9NOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNVQwOToxMzoyMlrOIrq_qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTkxMzkxMg==", "bodyText": "This is not required as mentioned above and add another method to create auto scaler as mentioned in above comment.", "url": "https://github.com/apache/druid/pull/10524#discussion_r581913912", "createdAt": "2021-02-24T12:22:15Z", "author": {"login": "pjain1"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/AutoScalerConfig.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.seekablestream.supervisor.autoscaler;\n+\n+import com.fasterxml.jackson.annotation.JsonSubTypes;\n+import com.fasterxml.jackson.annotation.JsonSubTypes.Type;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import org.apache.druid.guice.annotations.UnstableApi;\n+\n+@UnstableApi\n+@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"autoScalerStrategy\", defaultImpl = DefaultAutoScalerConfig.class)\n+@JsonSubTypes(value = {\n+        @Type(name = \"default\", value = DefaultAutoScalerConfig.class)\n+})\n+public interface AutoScalerConfig\n+{\n+  boolean getEnableTaskAutoscaler();\n+  long getMinTriggerDynamicFrequencyMillis();\n+  String getAutoScalerStrategy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688b9c4b4ff1841477d8139a7c83e54d36ccb986"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjY2NDEwNA==", "bodyText": "Changed.", "url": "https://github.com/apache/druid/pull/10524#discussion_r582664104", "createdAt": "2021-02-25T09:13:22Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/AutoScalerConfig.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.seekablestream.supervisor.autoscaler;\n+\n+import com.fasterxml.jackson.annotation.JsonSubTypes;\n+import com.fasterxml.jackson.annotation.JsonSubTypes.Type;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import org.apache.druid.guice.annotations.UnstableApi;\n+\n+@UnstableApi\n+@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"autoScalerStrategy\", defaultImpl = DefaultAutoScalerConfig.class)\n+@JsonSubTypes(value = {\n+        @Type(name = \"default\", value = DefaultAutoScalerConfig.class)\n+})\n+public interface AutoScalerConfig\n+{\n+  boolean getEnableTaskAutoscaler();\n+  long getMinTriggerDynamicFrequencyMillis();\n+  String getAutoScalerStrategy();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTkxMzkxMg=="}, "originalCommit": {"oid": "688b9c4b4ff1841477d8139a7c83e54d36ccb986"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY3MDgwOTY5OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/AutoScalerConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNFQxMjoyMzo0MlrOIq9Qjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNVQwOToxMzozMFrOIrrAAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTkxNDc2Nw==", "bodyText": "I think we should change the name of this to LagBasedAutoScalerConfig as it is using lag to make decisions about auto scaling. Also we should not use default as type names as it is confusing. See zhangyue19921010#1", "url": "https://github.com/apache/druid/pull/10524#discussion_r581914767", "createdAt": "2021-02-24T12:23:42Z", "author": {"login": "pjain1"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/AutoScalerConfig.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.seekablestream.supervisor.autoscaler;\n+\n+import com.fasterxml.jackson.annotation.JsonSubTypes;\n+import com.fasterxml.jackson.annotation.JsonSubTypes.Type;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import org.apache.druid.guice.annotations.UnstableApi;\n+\n+@UnstableApi\n+@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"autoScalerStrategy\", defaultImpl = DefaultAutoScalerConfig.class)\n+@JsonSubTypes(value = {\n+        @Type(name = \"default\", value = DefaultAutoScalerConfig.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688b9c4b4ff1841477d8139a7c83e54d36ccb986"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjY2NDE5Mw==", "bodyText": "Changed.", "url": "https://github.com/apache/druid/pull/10524#discussion_r582664193", "createdAt": "2021-02-25T09:13:30Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/AutoScalerConfig.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.seekablestream.supervisor.autoscaler;\n+\n+import com.fasterxml.jackson.annotation.JsonSubTypes;\n+import com.fasterxml.jackson.annotation.JsonSubTypes.Type;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import org.apache.druid.guice.annotations.UnstableApi;\n+\n+@UnstableApi\n+@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"autoScalerStrategy\", defaultImpl = DefaultAutoScalerConfig.class)\n+@JsonSubTypes(value = {\n+        @Type(name = \"default\", value = DefaultAutoScalerConfig.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTkxNDc2Nw=="}, "originalCommit": {"oid": "688b9c4b4ff1841477d8139a7c83e54d36ccb986"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY3MDgxNjgzOnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/DefaultAutoScaler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNFQxMjoyNTozMVrOIq9VAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNVQwOToxMzozNVrOIrrAQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTkxNTkwNA==", "bodyText": "See https://github.com/zhangyue19921010/druid/pull/1/files#diff-f1b33808bb841d1e71e1f5ec3fbaeb3f94899066277b75e192942b66371667ce for suggestions on log lines, method and variable names.", "url": "https://github.com/apache/druid/pull/10524#discussion_r581915904", "createdAt": "2021-02-24T12:25:31Z", "author": {"login": "pjain1"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/DefaultAutoScaler.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.seekablestream.supervisor.autoscaler;\n+\n+import org.apache.commons.collections4.queue.CircularFifoQueue;\n+import org.apache.druid.indexing.overlord.supervisor.Supervisor;\n+import org.apache.druid.indexing.overlord.supervisor.SupervisorSpec;\n+import org.apache.druid.indexing.overlord.supervisor.autoscaler.LagStats;\n+import org.apache.druid.indexing.overlord.supervisor.autoscaler.SupervisorTaskAutoscaler;\n+import org.apache.druid.indexing.seekablestream.supervisor.SeekableStreamSupervisor;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.concurrent.Execs;\n+import org.apache.druid.java.util.emitter.EmittingLogger;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+public class DefaultAutoScaler implements SupervisorTaskAutoscaler", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688b9c4b4ff1841477d8139a7c83e54d36ccb986"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjY2NDI1Ng==", "bodyText": "Changed.", "url": "https://github.com/apache/druid/pull/10524#discussion_r582664256", "createdAt": "2021-02-25T09:13:35Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/DefaultAutoScaler.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.seekablestream.supervisor.autoscaler;\n+\n+import org.apache.commons.collections4.queue.CircularFifoQueue;\n+import org.apache.druid.indexing.overlord.supervisor.Supervisor;\n+import org.apache.druid.indexing.overlord.supervisor.SupervisorSpec;\n+import org.apache.druid.indexing.overlord.supervisor.autoscaler.LagStats;\n+import org.apache.druid.indexing.overlord.supervisor.autoscaler.SupervisorTaskAutoscaler;\n+import org.apache.druid.indexing.seekablestream.supervisor.SeekableStreamSupervisor;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.concurrent.Execs;\n+import org.apache.druid.java.util.emitter.EmittingLogger;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+public class DefaultAutoScaler implements SupervisorTaskAutoscaler", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTkxNTkwNA=="}, "originalCommit": {"oid": "688b9c4b4ff1841477d8139a7c83e54d36ccb986"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY3MDgyMDQyOnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/DefaultAutoScaler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNFQxMjoyNjozMVrOIq9XPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNVQxNTowNTowN1rOIr520Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTkxNjQ3OA==", "bodyText": "not sure why we are encoding supervisorId, its already a constant string from line 56. Not sure why this is needed.", "url": "https://github.com/apache/druid/pull/10524#discussion_r581916478", "createdAt": "2021-02-24T12:26:31Z", "author": {"login": "pjain1"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/DefaultAutoScaler.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.seekablestream.supervisor.autoscaler;\n+\n+import org.apache.commons.collections4.queue.CircularFifoQueue;\n+import org.apache.druid.indexing.overlord.supervisor.Supervisor;\n+import org.apache.druid.indexing.overlord.supervisor.SupervisorSpec;\n+import org.apache.druid.indexing.overlord.supervisor.autoscaler.LagStats;\n+import org.apache.druid.indexing.overlord.supervisor.autoscaler.SupervisorTaskAutoscaler;\n+import org.apache.druid.indexing.seekablestream.supervisor.SeekableStreamSupervisor;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.concurrent.Execs;\n+import org.apache.druid.java.util.emitter.EmittingLogger;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+public class DefaultAutoScaler implements SupervisorTaskAutoscaler\n+{\n+  private static final EmittingLogger log = new EmittingLogger(DefaultAutoScaler.class);\n+  private final String dataSource;\n+  private final CircularFifoQueue<Long> lagMetricsQueue;\n+  private final ScheduledExecutorService lagComputationExec;\n+  private final ScheduledExecutorService allocationExec;\n+  private final SupervisorSpec spec;\n+  private final SeekableStreamSupervisor supervisor;\n+  private final DefaultAutoScalerConfig defaultAutoScalerConfig;\n+\n+  private static ReentrantLock lock = new ReentrantLock(true);\n+\n+\n+  public DefaultAutoScaler(Supervisor supervisor, String dataSource, AutoScalerConfig autoScalerConfig, SupervisorSpec spec)\n+  {\n+    this.defaultAutoScalerConfig = (DefaultAutoScalerConfig) autoScalerConfig;\n+    String supervisorId = StringUtils.format(\"KafkaSupervisor-%s\", dataSource);\n+    this.dataSource = dataSource;\n+    int slots = (int) (defaultAutoScalerConfig.getMetricsCollectionRangeMillis() / defaultAutoScalerConfig.getMetricsCollectionIntervalMillis()) + 1;\n+    log.debug(\" The interval of metrics collection is [%s], [%s] timeRange will collect [%s] data points for dataSource [%s].\", defaultAutoScalerConfig.getMetricsCollectionIntervalMillis(), defaultAutoScalerConfig.getMetricsCollectionRangeMillis(), slots, dataSource);\n+    this.lagMetricsQueue = new CircularFifoQueue<>(slots);\n+    this.allocationExec = Execs.scheduledSingleThreaded(StringUtils.encodeForFormat(supervisorId) + \"-Allocation-%d\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688b9c4b4ff1841477d8139a7c83e54d36ccb986"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjY2NDY4OA==", "bodyText": "no need actually, removed. Thanks.", "url": "https://github.com/apache/druid/pull/10524#discussion_r582664688", "createdAt": "2021-02-25T09:14:10Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/DefaultAutoScaler.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.seekablestream.supervisor.autoscaler;\n+\n+import org.apache.commons.collections4.queue.CircularFifoQueue;\n+import org.apache.druid.indexing.overlord.supervisor.Supervisor;\n+import org.apache.druid.indexing.overlord.supervisor.SupervisorSpec;\n+import org.apache.druid.indexing.overlord.supervisor.autoscaler.LagStats;\n+import org.apache.druid.indexing.overlord.supervisor.autoscaler.SupervisorTaskAutoscaler;\n+import org.apache.druid.indexing.seekablestream.supervisor.SeekableStreamSupervisor;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.concurrent.Execs;\n+import org.apache.druid.java.util.emitter.EmittingLogger;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+public class DefaultAutoScaler implements SupervisorTaskAutoscaler\n+{\n+  private static final EmittingLogger log = new EmittingLogger(DefaultAutoScaler.class);\n+  private final String dataSource;\n+  private final CircularFifoQueue<Long> lagMetricsQueue;\n+  private final ScheduledExecutorService lagComputationExec;\n+  private final ScheduledExecutorService allocationExec;\n+  private final SupervisorSpec spec;\n+  private final SeekableStreamSupervisor supervisor;\n+  private final DefaultAutoScalerConfig defaultAutoScalerConfig;\n+\n+  private static ReentrantLock lock = new ReentrantLock(true);\n+\n+\n+  public DefaultAutoScaler(Supervisor supervisor, String dataSource, AutoScalerConfig autoScalerConfig, SupervisorSpec spec)\n+  {\n+    this.defaultAutoScalerConfig = (DefaultAutoScalerConfig) autoScalerConfig;\n+    String supervisorId = StringUtils.format(\"KafkaSupervisor-%s\", dataSource);\n+    this.dataSource = dataSource;\n+    int slots = (int) (defaultAutoScalerConfig.getMetricsCollectionRangeMillis() / defaultAutoScalerConfig.getMetricsCollectionIntervalMillis()) + 1;\n+    log.debug(\" The interval of metrics collection is [%s], [%s] timeRange will collect [%s] data points for dataSource [%s].\", defaultAutoScalerConfig.getMetricsCollectionIntervalMillis(), defaultAutoScalerConfig.getMetricsCollectionRangeMillis(), slots, dataSource);\n+    this.lagMetricsQueue = new CircularFifoQueue<>(slots);\n+    this.allocationExec = Execs.scheduledSingleThreaded(StringUtils.encodeForFormat(supervisorId) + \"-Allocation-%d\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTkxNjQ3OA=="}, "originalCommit": {"oid": "688b9c4b4ff1841477d8139a7c83e54d36ccb986"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjkwNzYwMQ==", "bodyText": "Sorry. I just found it is necessary to do encoding for supervisorId.\nIf supervisorID itself contains special characters %s like \"dataSource\": \"kafka_transactional_parallelized_indexing_service_test_2ec894f4-3bb4-4909-91ca-8f934e14bc84 %\u0420\u043e\u0441\u0441\u0438\u044f \ud55c\uad6d \u4e2d\u56fd!?\" mentioned in Job 41, It will throw Caused by: java.util.UnknownFormatConversionException: Conversion = &apos;?&apos; exception without encoding(https://travis-ci.com/github/apache/druid/jobs/486176708)\nSo I revert this change here.", "url": "https://github.com/apache/druid/pull/10524#discussion_r582907601", "createdAt": "2021-02-25T15:05:07Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/DefaultAutoScaler.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.seekablestream.supervisor.autoscaler;\n+\n+import org.apache.commons.collections4.queue.CircularFifoQueue;\n+import org.apache.druid.indexing.overlord.supervisor.Supervisor;\n+import org.apache.druid.indexing.overlord.supervisor.SupervisorSpec;\n+import org.apache.druid.indexing.overlord.supervisor.autoscaler.LagStats;\n+import org.apache.druid.indexing.overlord.supervisor.autoscaler.SupervisorTaskAutoscaler;\n+import org.apache.druid.indexing.seekablestream.supervisor.SeekableStreamSupervisor;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.concurrent.Execs;\n+import org.apache.druid.java.util.emitter.EmittingLogger;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+public class DefaultAutoScaler implements SupervisorTaskAutoscaler\n+{\n+  private static final EmittingLogger log = new EmittingLogger(DefaultAutoScaler.class);\n+  private final String dataSource;\n+  private final CircularFifoQueue<Long> lagMetricsQueue;\n+  private final ScheduledExecutorService lagComputationExec;\n+  private final ScheduledExecutorService allocationExec;\n+  private final SupervisorSpec spec;\n+  private final SeekableStreamSupervisor supervisor;\n+  private final DefaultAutoScalerConfig defaultAutoScalerConfig;\n+\n+  private static ReentrantLock lock = new ReentrantLock(true);\n+\n+\n+  public DefaultAutoScaler(Supervisor supervisor, String dataSource, AutoScalerConfig autoScalerConfig, SupervisorSpec spec)\n+  {\n+    this.defaultAutoScalerConfig = (DefaultAutoScalerConfig) autoScalerConfig;\n+    String supervisorId = StringUtils.format(\"KafkaSupervisor-%s\", dataSource);\n+    this.dataSource = dataSource;\n+    int slots = (int) (defaultAutoScalerConfig.getMetricsCollectionRangeMillis() / defaultAutoScalerConfig.getMetricsCollectionIntervalMillis()) + 1;\n+    log.debug(\" The interval of metrics collection is [%s], [%s] timeRange will collect [%s] data points for dataSource [%s].\", defaultAutoScalerConfig.getMetricsCollectionIntervalMillis(), defaultAutoScalerConfig.getMetricsCollectionRangeMillis(), slots, dataSource);\n+    this.lagMetricsQueue = new CircularFifoQueue<>(slots);\n+    this.allocationExec = Execs.scheduledSingleThreaded(StringUtils.encodeForFormat(supervisorId) + \"-Allocation-%d\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTkxNjQ3OA=="}, "originalCommit": {"oid": "688b9c4b4ff1841477d8139a7c83e54d36ccb986"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY3MDgyODEyOnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/DefaultAutoScalerConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNFQxMjoyODoxNFrOIq9bxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNVQwOToxNDoxN1rOIrrCMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTkxNzYzOA==", "bodyText": "See https://github.com/zhangyue19921010/druid/pull/1/files#diff-943c4b0695e902cb2a3465b69f593a584dac7308037288db0f9fd97054efb12b for suggestions on log lines, method and variable names.", "url": "https://github.com/apache/druid/pull/10524#discussion_r581917638", "createdAt": "2021-02-24T12:28:14Z", "author": {"login": "pjain1"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/DefaultAutoScalerConfig.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.seekablestream.supervisor.autoscaler;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import javax.annotation.Nullable;\n+\n+public class DefaultAutoScalerConfig implements AutoScalerConfig", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688b9c4b4ff1841477d8139a7c83e54d36ccb986"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjY2NDc1NQ==", "bodyText": "Changed.", "url": "https://github.com/apache/druid/pull/10524#discussion_r582664755", "createdAt": "2021-02-25T09:14:17Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/DefaultAutoScalerConfig.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.seekablestream.supervisor.autoscaler;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import javax.annotation.Nullable;\n+\n+public class DefaultAutoScalerConfig implements AutoScalerConfig", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTkxNzYzOA=="}, "originalCommit": {"oid": "688b9c4b4ff1841477d8139a7c83e54d36ccb986"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY3MDgzMDYyOnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/DummyAutoScaler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNFQxMjoyODo1M1rOIq9dVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNVQwOToxNjowNVrOIrrHaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTkxODAzOQ==", "bodyText": "I think we can call this NoopAutoScaler.", "url": "https://github.com/apache/druid/pull/10524#discussion_r581918039", "createdAt": "2021-02-24T12:28:53Z", "author": {"login": "pjain1"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/DummyAutoScaler.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.seekablestream.supervisor.autoscaler;\n+\n+import org.apache.druid.indexing.overlord.supervisor.Supervisor;\n+import org.apache.druid.indexing.overlord.supervisor.autoscaler.SupervisorTaskAutoscaler;\n+\n+public class DummyAutoScaler implements SupervisorTaskAutoscaler", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688b9c4b4ff1841477d8139a7c83e54d36ccb986"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTkxODQzNw==", "bodyText": "https://github.com/zhangyue19921010/druid/pull/1/files#diff-0621db18fa2257d0cd499178c842d96ae73df2264038ccc7de23d7a7ed5235a5", "url": "https://github.com/apache/druid/pull/10524#discussion_r581918437", "createdAt": "2021-02-24T12:29:26Z", "author": {"login": "pjain1"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/DummyAutoScaler.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.seekablestream.supervisor.autoscaler;\n+\n+import org.apache.druid.indexing.overlord.supervisor.Supervisor;\n+import org.apache.druid.indexing.overlord.supervisor.autoscaler.SupervisorTaskAutoscaler;\n+\n+public class DummyAutoScaler implements SupervisorTaskAutoscaler", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTkxODAzOQ=="}, "originalCommit": {"oid": "688b9c4b4ff1841477d8139a7c83e54d36ccb986"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjY2NjA5MQ==", "bodyText": "NoopAutoScaler is used for mm autoscale. I just renamed it to NoopTaskAutoScaler :)", "url": "https://github.com/apache/druid/pull/10524#discussion_r582666091", "createdAt": "2021-02-25T09:16:05Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/DummyAutoScaler.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.seekablestream.supervisor.autoscaler;\n+\n+import org.apache.druid.indexing.overlord.supervisor.Supervisor;\n+import org.apache.druid.indexing.overlord.supervisor.autoscaler.SupervisorTaskAutoscaler;\n+\n+public class DummyAutoScaler implements SupervisorTaskAutoscaler", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTkxODAzOQ=="}, "originalCommit": {"oid": "688b9c4b4ff1841477d8139a7c83e54d36ccb986"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY3MDgzMTUxOnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/DummyAutoScaler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNFQxMjoyOTowM1rOIq9d5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNVQwOToxNjoxMVrOIrrHtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTkxODE4MQ==", "bodyText": "This can be no-arg constructor.", "url": "https://github.com/apache/druid/pull/10524#discussion_r581918181", "createdAt": "2021-02-24T12:29:03Z", "author": {"login": "pjain1"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/DummyAutoScaler.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.seekablestream.supervisor.autoscaler;\n+\n+import org.apache.druid.indexing.overlord.supervisor.Supervisor;\n+import org.apache.druid.indexing.overlord.supervisor.autoscaler.SupervisorTaskAutoscaler;\n+\n+public class DummyAutoScaler implements SupervisorTaskAutoscaler\n+{\n+  public DummyAutoScaler(Supervisor supervisor, String dataSource)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688b9c4b4ff1841477d8139a7c83e54d36ccb986"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjY2NjE2Nw==", "bodyText": "Changed.", "url": "https://github.com/apache/druid/pull/10524#discussion_r582666167", "createdAt": "2021-02-25T09:16:11Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/DummyAutoScaler.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.seekablestream.supervisor.autoscaler;\n+\n+import org.apache.druid.indexing.overlord.supervisor.Supervisor;\n+import org.apache.druid.indexing.overlord.supervisor.autoscaler.SupervisorTaskAutoscaler;\n+\n+public class DummyAutoScaler implements SupervisorTaskAutoscaler\n+{\n+  public DummyAutoScaler(Supervisor supervisor, String dataSource)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTkxODE4MQ=="}, "originalCommit": {"oid": "688b9c4b4ff1841477d8139a7c83e54d36ccb986"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY3MDgzOTc2OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/resources/stream/data/supervisor_with_autoscaler_spec_template.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNFQxMjozMToxMFrOIq9jJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNVQwOToxNjoxNVrOIrrH7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTkxOTUyNA==", "bodyText": "Variable names will need to be changed here, if these suggestions are implemented -https://github.com/zhangyue19921010/druid/pull/1/files#diff-943c4b0695e902cb2a3465b69f593a584dac7308037288db0f9fd97054efb12b", "url": "https://github.com/apache/druid/pull/10524#discussion_r581919524", "createdAt": "2021-02-24T12:31:10Z", "author": {"login": "pjain1"}, "path": "integration-tests/src/test/resources/stream/data/supervisor_with_autoscaler_spec_template.json", "diffHunk": "@@ -0,0 +1,73 @@\n+{\n+  \"type\": \"%%STREAM_TYPE%%\",\n+  \"dataSchema\": {\n+    \"dataSource\": \"%%DATASOURCE%%\",\n+    \"parser\": %%PARSER%%,\n+    \"timestampSpec\": {\n+      \"column\": \"timestamp\",\n+      \"format\": \"auto\"\n+    },\n+    \"dimensionsSpec\": {\n+      \"dimensions\": [\"page\", \"language\", \"user\", \"unpatrolled\", \"newPage\", \"robot\", \"anonymous\", \"namespace\", \"continent\", \"country\", \"region\", \"city\"],\n+      \"dimensionExclusions\": [],\n+      \"spatialDimensions\": []\n+    },\n+    \"metricsSpec\": [\n+      {\n+        \"type\": \"count\",\n+        \"name\": \"count\"\n+      },\n+      {\n+        \"type\": \"doubleSum\",\n+        \"name\": \"added\",\n+        \"fieldName\": \"added\"\n+      },\n+      {\n+        \"type\": \"doubleSum\",\n+        \"name\": \"deleted\",\n+        \"fieldName\": \"deleted\"\n+      },\n+      {\n+        \"type\": \"doubleSum\",\n+        \"name\": \"delta\",\n+        \"fieldName\": \"delta\"\n+      }\n+    ],\n+    \"granularitySpec\": {\n+      \"type\": \"uniform\",\n+      \"segmentGranularity\": \"MINUTE\",\n+      \"queryGranularity\": \"NONE\"\n+    }\n+  },\n+  \"tuningConfig\": {\n+    \"type\": \"%%STREAM_TYPE%%\",\n+    \"intermediatePersistPeriod\": \"PT30S\",\n+    \"maxRowsPerSegment\": 5000000,\n+    \"maxRowsInMemory\": 500000\n+  },\n+  \"ioConfig\": {\n+    \"%%TOPIC_KEY%%\": \"%%TOPIC_VALUE%%\",\n+    \"%%STREAM_PROPERTIES_KEY%%\": %%STREAM_PROPERTIES_VALUE%%,\n+    \"autoscalerConfig\": {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688b9c4b4ff1841477d8139a7c83e54d36ccb986"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjY2NjIyMw==", "bodyText": "Changed.", "url": "https://github.com/apache/druid/pull/10524#discussion_r582666223", "createdAt": "2021-02-25T09:16:15Z", "author": {"login": "zhangyue19921010"}, "path": "integration-tests/src/test/resources/stream/data/supervisor_with_autoscaler_spec_template.json", "diffHunk": "@@ -0,0 +1,73 @@\n+{\n+  \"type\": \"%%STREAM_TYPE%%\",\n+  \"dataSchema\": {\n+    \"dataSource\": \"%%DATASOURCE%%\",\n+    \"parser\": %%PARSER%%,\n+    \"timestampSpec\": {\n+      \"column\": \"timestamp\",\n+      \"format\": \"auto\"\n+    },\n+    \"dimensionsSpec\": {\n+      \"dimensions\": [\"page\", \"language\", \"user\", \"unpatrolled\", \"newPage\", \"robot\", \"anonymous\", \"namespace\", \"continent\", \"country\", \"region\", \"city\"],\n+      \"dimensionExclusions\": [],\n+      \"spatialDimensions\": []\n+    },\n+    \"metricsSpec\": [\n+      {\n+        \"type\": \"count\",\n+        \"name\": \"count\"\n+      },\n+      {\n+        \"type\": \"doubleSum\",\n+        \"name\": \"added\",\n+        \"fieldName\": \"added\"\n+      },\n+      {\n+        \"type\": \"doubleSum\",\n+        \"name\": \"deleted\",\n+        \"fieldName\": \"deleted\"\n+      },\n+      {\n+        \"type\": \"doubleSum\",\n+        \"name\": \"delta\",\n+        \"fieldName\": \"delta\"\n+      }\n+    ],\n+    \"granularitySpec\": {\n+      \"type\": \"uniform\",\n+      \"segmentGranularity\": \"MINUTE\",\n+      \"queryGranularity\": \"NONE\"\n+    }\n+  },\n+  \"tuningConfig\": {\n+    \"type\": \"%%STREAM_TYPE%%\",\n+    \"intermediatePersistPeriod\": \"PT30S\",\n+    \"maxRowsPerSegment\": 5000000,\n+    \"maxRowsInMemory\": 500000\n+  },\n+  \"ioConfig\": {\n+    \"%%TOPIC_KEY%%\": \"%%TOPIC_VALUE%%\",\n+    \"%%STREAM_PROPERTIES_KEY%%\": %%STREAM_PROPERTIES_VALUE%%,\n+    \"autoscalerConfig\": {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTkxOTUyNA=="}, "originalCommit": {"oid": "688b9c4b4ff1841477d8139a7c83e54d36ccb986"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY3MDg0MzAyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/indexing/overlord/supervisor/Supervisor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNFQxMjozMjowN1rOIq9lPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNVQwOToxNjoxOVrOIrrIKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTkyMDA2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /**\n          \n          \n            \n               * Collect maxLag, totalLag, avgLag\n          \n          \n            \n               * Only support Kafka ingestion so far.\n          \n          \n            \n               */\n          \n          \n            \n              /**\n          \n          \n            \n               * Computes maxLag, totalLag and avgLag\n          \n          \n            \n               * Only supports Kafka ingestion so far.\n          \n          \n            \n               */", "url": "https://github.com/apache/druid/pull/10524#discussion_r581920061", "createdAt": "2021-02-24T12:32:07Z", "author": {"login": "pjain1"}, "path": "server/src/main/java/org/apache/druid/indexing/overlord/supervisor/Supervisor.java", "diffHunk": "@@ -64,4 +65,12 @@ default Boolean isHealthy()\n    * @param checkpointMetadata metadata for the sequence to currently checkpoint\n    */\n   void checkpoint(int taskGroupId, DataSourceMetadata checkpointMetadata);\n+\n+  /**\n+   * Collect maxLag, totalLag, avgLag\n+   * Only support Kafka ingestion so far.\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688b9c4b4ff1841477d8139a7c83e54d36ccb986"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjY2NjI4Mw==", "bodyText": "Changed.", "url": "https://github.com/apache/druid/pull/10524#discussion_r582666283", "createdAt": "2021-02-25T09:16:19Z", "author": {"login": "zhangyue19921010"}, "path": "server/src/main/java/org/apache/druid/indexing/overlord/supervisor/Supervisor.java", "diffHunk": "@@ -64,4 +65,12 @@ default Boolean isHealthy()\n    * @param checkpointMetadata metadata for the sequence to currently checkpoint\n    */\n   void checkpoint(int taskGroupId, DataSourceMetadata checkpointMetadata);\n+\n+  /**\n+   * Collect maxLag, totalLag, avgLag\n+   * Only support Kafka ingestion so far.\n+   */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTkyMDA2MQ=="}, "originalCommit": {"oid": "688b9c4b4ff1841477d8139a7c83e54d36ccb986"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY3MDg4ODM1OnYy", "diffSide": "RIGHT", "path": "extensions-core/kinesis-indexing-service/src/main/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisorIOConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNFQxMjo0MzozNFrOIq-BKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNVQwOToxNjozMFrOIrrIqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTkyNzIxMA==", "bodyText": "We can just pass autoscalerConfig here and it will be null because if its not null then exception will be thrown at line 96.", "url": "https://github.com/apache/druid/pull/10524#discussion_r581927210", "createdAt": "2021-02-24T12:43:34Z", "author": {"login": "pjain1"}, "path": "extensions-core/kinesis-indexing-service/src/main/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisorIOConfig.java", "diffHunk": "@@ -85,8 +87,16 @@ public KinesisSupervisorIOConfig(\n         completionTimeout,\n         lateMessageRejectionPeriod,\n         earlyMessageRejectionPeriod,\n+        null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688b9c4b4ff1841477d8139a7c83e54d36ccb986"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjY2NjQwOQ==", "bodyText": "changed.", "url": "https://github.com/apache/druid/pull/10524#discussion_r582666409", "createdAt": "2021-02-25T09:16:30Z", "author": {"login": "zhangyue19921010"}, "path": "extensions-core/kinesis-indexing-service/src/main/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisorIOConfig.java", "diffHunk": "@@ -85,8 +87,16 @@ public KinesisSupervisorIOConfig(\n         completionTimeout,\n         lateMessageRejectionPeriod,\n         earlyMessageRejectionPeriod,\n+        null,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTkyNzIxMA=="}, "originalCommit": {"oid": "688b9c4b4ff1841477d8139a7c83e54d36ccb986"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY3NTYxNjE2OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNVQwOToyMToxOVrOIrrWJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNVQxNTowNTozNFrOIr54jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjY2OTg2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  log.error(\"supervisorManager is null in taskMaster, skipping scale action for dataSource [%s].\", dataSource);\n          \n          \n            \n                  log.error(e, \"Failed to sync taskCount to MetaStorage for dataSource [%s].\", dataSource);\n          \n      \n    \n    \n  \n\nprobably you copied the above one by mistake", "url": "https://github.com/apache/druid/pull/10524#discussion_r582669862", "createdAt": "2021-02-25T09:21:19Z", "author": {"login": "pjain1"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -318,6 +323,127 @@ public void handle()\n     }\n   }\n \n+  // change taskCount without resubmitting.\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    Callable<Integer> scaleAction;\n+\n+    DynamicAllocationTasksNotice(Callable<Integer> scaleAction)\n+    {\n+      this.scaleAction = scaleAction;\n+    }\n+\n+    /**\n+     * This method will do lag points collection and check dynamic scale action is necessary or not.\n+     */\n+    @Override\n+    public void handle()\n+    {\n+      if (autoScalerConfig == null) {\n+        log.warn(\"autoScalerConfig is null but dynamic allocation notice is submitted, how can it be ?\");\n+      } else {\n+        try {\n+          long nowTime = System.currentTimeMillis();\n+          if (spec.isSuspended()) {\n+            log.info(\"Skipping DynamicAllocationTasksNotice execution because [%s] supervisor is suspended\",\n+                    dataSource\n+            );\n+            return;\n+          }\n+          log.debug(\"PendingCompletionTaskGroups is [%s] for dataSource [%s]\", pendingCompletionTaskGroups,\n+                  dataSource\n+          );\n+          for (CopyOnWriteArrayList<TaskGroup> list : pendingCompletionTaskGroups.values()) {\n+            if (!list.isEmpty()) {\n+              log.info(\n+                      \"Skipping DynamicAllocationTasksNotice execution for datasource [%s] because following tasks are pending [%s]\",\n+                      dataSource, pendingCompletionTaskGroups\n+              );\n+              return;\n+            }\n+          }\n+          if (nowTime - dynamicTriggerLastRunTime < autoScalerConfig.getMinTriggerScaleActionFrequencyMillis()) {\n+            log.info(\n+                    \"DynamicAllocationTasksNotice submitted again in [%d] millis, minTriggerDynamicFrequency is [%s] for dataSource [%s], skipping it!\",\n+                    nowTime - dynamicTriggerLastRunTime, autoScalerConfig.getMinTriggerScaleActionFrequencyMillis(), dataSource\n+            );\n+            return;\n+          }\n+          final Integer desriedTaskCount = scaleAction.call();\n+          boolean allocationSuccess = changeTaskCount(desriedTaskCount);\n+          if (allocationSuccess) {\n+            dynamicTriggerLastRunTime = nowTime;\n+          }\n+        }\n+        catch (Exception ex) {\n+          log.warn(ex, \"Error parsing DynamicAllocationTasksNotice\");\n+        }\n+      }\n+    }\n+  }\n+\n+  /**\n+   * This method determines how to do scale actions based on collected lag points.\n+   * If scale action is triggered :\n+   *    First of all, call gracefulShutdownInternal() which will change the state of current datasource ingest tasks from reading to publishing.\n+   *    Secondly, clear all the stateful data structures: activelyReadingTaskGroups, partitionGroups, partitionOffsets, pendingCompletionTaskGroups, partitionIds. These structures will be rebuiled in the next 'RunNotice'.\n+   *    Finally, change the taskCount in SeekableStreamSupervisorIOConfig and sync it to MetadataStorage.\n+   * After the taskCount is changed in SeekableStreamSupervisorIOConfig, next RunNotice will create scaled number of ingest tasks without resubmitting the supervisor.\n+   * @param desiredActiveTaskCount desired taskCount computed from AutoScaler\n+   * @return Boolean flag indicating if scale action was executed or not. If true, it will wait at least 'minTriggerScaleActionFrequencyMillis' before next 'changeTaskCount'.\n+   *         If false, it will do 'changeTaskCount' again after 'scaleActionPeriodMillis' millis.\n+   * @throws InterruptedException\n+   * @throws ExecutionException\n+   * @throws TimeoutException\n+   */\n+  private boolean changeTaskCount(Integer desiredActiveTaskCount) throws InterruptedException, ExecutionException, TimeoutException\n+  {\n+    int currentActiveTaskCount;\n+    Collection<TaskGroup> activeTaskGroups = activelyReadingTaskGroups.values();\n+    currentActiveTaskCount = activeTaskGroups.size();\n+\n+    if (desiredActiveTaskCount == -1 || desiredActiveTaskCount == currentActiveTaskCount) {\n+      return false;\n+    } else {\n+      log.info(\n+              \"Starting scale action, current active task count is [%d] and desired task count is [%d] for dataSource [%s].\",\n+              currentActiveTaskCount, desiredActiveTaskCount, dataSource\n+      );\n+      gracefulShutdownInternal();\n+      changeTaskCountInIOConfig(desiredActiveTaskCount);\n+      clearAllocationInfo();\n+      log.info(\"Changed taskCount to [%s] for dataSource [%s].\", desiredActiveTaskCount, dataSource);\n+      return true;\n+    }\n+  }\n+\n+  private void changeTaskCountInIOConfig(int desiredActiveTaskCount)\n+  {\n+    ioConfig.setTaskCount(desiredActiveTaskCount);\n+    try {\n+      Optional<SupervisorManager> supervisorManager = taskMaster.getSupervisorManager();\n+      if (supervisorManager.isPresent()) {\n+        MetadataSupervisorManager metadataSupervisorManager = supervisorManager.get().getMetadataSupervisorManager();\n+        metadataSupervisorManager.insert(dataSource, spec);\n+      } else {\n+        log.error(\"supervisorManager is null in taskMaster, skipping scale action for dataSource [%s].\", dataSource);\n+      }\n+    }\n+    catch (Exception e) {\n+      log.error(\"supervisorManager is null in taskMaster, skipping scale action for dataSource [%s].\", dataSource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00758e647c7137166b3e149607305a54db284dfb"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjkwODA0NA==", "bodyText": "Woooo.. Changed.", "url": "https://github.com/apache/druid/pull/10524#discussion_r582908044", "createdAt": "2021-02-25T15:05:34Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -318,6 +323,127 @@ public void handle()\n     }\n   }\n \n+  // change taskCount without resubmitting.\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    Callable<Integer> scaleAction;\n+\n+    DynamicAllocationTasksNotice(Callable<Integer> scaleAction)\n+    {\n+      this.scaleAction = scaleAction;\n+    }\n+\n+    /**\n+     * This method will do lag points collection and check dynamic scale action is necessary or not.\n+     */\n+    @Override\n+    public void handle()\n+    {\n+      if (autoScalerConfig == null) {\n+        log.warn(\"autoScalerConfig is null but dynamic allocation notice is submitted, how can it be ?\");\n+      } else {\n+        try {\n+          long nowTime = System.currentTimeMillis();\n+          if (spec.isSuspended()) {\n+            log.info(\"Skipping DynamicAllocationTasksNotice execution because [%s] supervisor is suspended\",\n+                    dataSource\n+            );\n+            return;\n+          }\n+          log.debug(\"PendingCompletionTaskGroups is [%s] for dataSource [%s]\", pendingCompletionTaskGroups,\n+                  dataSource\n+          );\n+          for (CopyOnWriteArrayList<TaskGroup> list : pendingCompletionTaskGroups.values()) {\n+            if (!list.isEmpty()) {\n+              log.info(\n+                      \"Skipping DynamicAllocationTasksNotice execution for datasource [%s] because following tasks are pending [%s]\",\n+                      dataSource, pendingCompletionTaskGroups\n+              );\n+              return;\n+            }\n+          }\n+          if (nowTime - dynamicTriggerLastRunTime < autoScalerConfig.getMinTriggerScaleActionFrequencyMillis()) {\n+            log.info(\n+                    \"DynamicAllocationTasksNotice submitted again in [%d] millis, minTriggerDynamicFrequency is [%s] for dataSource [%s], skipping it!\",\n+                    nowTime - dynamicTriggerLastRunTime, autoScalerConfig.getMinTriggerScaleActionFrequencyMillis(), dataSource\n+            );\n+            return;\n+          }\n+          final Integer desriedTaskCount = scaleAction.call();\n+          boolean allocationSuccess = changeTaskCount(desriedTaskCount);\n+          if (allocationSuccess) {\n+            dynamicTriggerLastRunTime = nowTime;\n+          }\n+        }\n+        catch (Exception ex) {\n+          log.warn(ex, \"Error parsing DynamicAllocationTasksNotice\");\n+        }\n+      }\n+    }\n+  }\n+\n+  /**\n+   * This method determines how to do scale actions based on collected lag points.\n+   * If scale action is triggered :\n+   *    First of all, call gracefulShutdownInternal() which will change the state of current datasource ingest tasks from reading to publishing.\n+   *    Secondly, clear all the stateful data structures: activelyReadingTaskGroups, partitionGroups, partitionOffsets, pendingCompletionTaskGroups, partitionIds. These structures will be rebuiled in the next 'RunNotice'.\n+   *    Finally, change the taskCount in SeekableStreamSupervisorIOConfig and sync it to MetadataStorage.\n+   * After the taskCount is changed in SeekableStreamSupervisorIOConfig, next RunNotice will create scaled number of ingest tasks without resubmitting the supervisor.\n+   * @param desiredActiveTaskCount desired taskCount computed from AutoScaler\n+   * @return Boolean flag indicating if scale action was executed or not. If true, it will wait at least 'minTriggerScaleActionFrequencyMillis' before next 'changeTaskCount'.\n+   *         If false, it will do 'changeTaskCount' again after 'scaleActionPeriodMillis' millis.\n+   * @throws InterruptedException\n+   * @throws ExecutionException\n+   * @throws TimeoutException\n+   */\n+  private boolean changeTaskCount(Integer desiredActiveTaskCount) throws InterruptedException, ExecutionException, TimeoutException\n+  {\n+    int currentActiveTaskCount;\n+    Collection<TaskGroup> activeTaskGroups = activelyReadingTaskGroups.values();\n+    currentActiveTaskCount = activeTaskGroups.size();\n+\n+    if (desiredActiveTaskCount == -1 || desiredActiveTaskCount == currentActiveTaskCount) {\n+      return false;\n+    } else {\n+      log.info(\n+              \"Starting scale action, current active task count is [%d] and desired task count is [%d] for dataSource [%s].\",\n+              currentActiveTaskCount, desiredActiveTaskCount, dataSource\n+      );\n+      gracefulShutdownInternal();\n+      changeTaskCountInIOConfig(desiredActiveTaskCount);\n+      clearAllocationInfo();\n+      log.info(\"Changed taskCount to [%s] for dataSource [%s].\", desiredActiveTaskCount, dataSource);\n+      return true;\n+    }\n+  }\n+\n+  private void changeTaskCountInIOConfig(int desiredActiveTaskCount)\n+  {\n+    ioConfig.setTaskCount(desiredActiveTaskCount);\n+    try {\n+      Optional<SupervisorManager> supervisorManager = taskMaster.getSupervisorManager();\n+      if (supervisorManager.isPresent()) {\n+        MetadataSupervisorManager metadataSupervisorManager = supervisorManager.get().getMetadataSupervisorManager();\n+        metadataSupervisorManager.insert(dataSource, spec);\n+      } else {\n+        log.error(\"supervisorManager is null in taskMaster, skipping scale action for dataSource [%s].\", dataSource);\n+      }\n+    }\n+    catch (Exception e) {\n+      log.error(\"supervisorManager is null in taskMaster, skipping scale action for dataSource [%s].\", dataSource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjY2OTg2Mg=="}, "originalCommit": {"oid": "00758e647c7137166b3e149607305a54db284dfb"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY3NTY1MzA3OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisorSpec.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNVQwOToyOTowNVrOIrrslw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNVQxNTowNTo0NlrOIr55Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjY3NTYwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /**\n          \n          \n            \n               * need to notice that autoScaler would be null which means autoscale is dissable.\n          \n          \n            \n               * @param supervisor\n          \n          \n            \n               * @return autoScaler, disable autoscale will return dummyAutoScaler and enable autoscale wiil return defaultAutoScaler by default.\n          \n          \n            \n               */\n          \n          \n            \n              /**\n          \n          \n            \n               * An autoScaler instance will be returned depending on the autoScalerConfig. In case autoScalerConfig is null or autoScaler is disabled then NoopTaskAutoScaler will be returned.\n          \n          \n            \n               * @param supervisor\n          \n          \n            \n               * @return autoScaler\n          \n          \n            \n               */", "url": "https://github.com/apache/druid/pull/10524#discussion_r582675607", "createdAt": "2021-02-25T09:29:05Z", "author": {"login": "pjain1"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisorSpec.java", "diffHunk": "@@ -151,6 +154,21 @@ public DruidMonitorSchedulerConfig getMonitorSchedulerConfig()\n   @Override\n   public abstract Supervisor createSupervisor();\n \n+  /**\n+   * need to notice that autoScaler would be null which means autoscale is dissable.\n+   * @param supervisor\n+   * @return autoScaler, disable autoscale will return dummyAutoScaler and enable autoscale wiil return defaultAutoScaler by default.\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00758e647c7137166b3e149607305a54db284dfb"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjkwODI2Mw==", "bodyText": "Done. Thanks for your review!", "url": "https://github.com/apache/druid/pull/10524#discussion_r582908263", "createdAt": "2021-02-25T15:05:46Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisorSpec.java", "diffHunk": "@@ -151,6 +154,21 @@ public DruidMonitorSchedulerConfig getMonitorSchedulerConfig()\n   @Override\n   public abstract Supervisor createSupervisor();\n \n+  /**\n+   * need to notice that autoScaler would be null which means autoscale is dissable.\n+   * @param supervisor\n+   * @return autoScaler, disable autoscale will return dummyAutoScaler and enable autoscale wiil return defaultAutoScaler by default.\n+   */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjY3NTYwNw=="}, "originalCommit": {"oid": "00758e647c7137166b3e149607305a54db284dfb"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY5MjIwODQ0OnYy", "diffSide": "RIGHT", "path": "docs/development/extensions-core/kafka-ingestion.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQwMDozMTo0MFrOIuDHgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQwNzozNDowMlrOIuNQDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTE1NjQ4Mw==", "bodyText": "Can we make the distinction that, following properties are common to any autoscaler and rest are specific to lagBased autoscaler , maybe have two tables.\nautoScalerStrategy\nenableTaskAutoScaler\ntaskCountMin\ntaskCountMax\nminTriggerScaleActionFrequencyMillis", "url": "https://github.com/apache/druid/pull/10524#discussion_r585156483", "createdAt": "2021-03-02T00:31:40Z", "author": {"login": "himanshug"}, "path": "docs/development/extensions-core/kafka-ingestion.md", "diffHunk": "@@ -146,6 +146,26 @@ A sample supervisor spec is shown below:\n |`lateMessageRejectionStartDateTime`|ISO8601 DateTime|Configure tasks to reject messages with timestamps earlier than this date time; for example if this is set to `2016-01-01T11:00Z` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps earlier than *2016-01-01T11:00Z* will be dropped. This may help prevent concurrency issues if your data stream has late messages and you have multiple pipelines that need to operate on the same segments (e.g. a realtime and a nightly batch ingestion pipeline).|no (default == none)|\n |`lateMessageRejectionPeriod`|ISO8601 Period|Configure tasks to reject messages with timestamps earlier than this period before the task was created; for example if this is set to `PT1H` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps earlier than *2016-01-01T11:00Z* will be dropped. This may help prevent concurrency issues if your data stream has late messages and you have multiple pipelines that need to operate on the same segments (e.g. a realtime and a nightly batch ingestion pipeline). Please note that only one of `lateMessageRejectionPeriod` or `lateMessageRejectionStartDateTime` can be specified.|no (default == none)|\n |`earlyMessageRejectionPeriod`|ISO8601 Period|Configure tasks to reject messages with timestamps later than this period after the task reached its taskDuration; for example if this is set to `PT1H`, the taskDuration is set to `PT1H` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps later than *2016-01-01T14:00Z* will be dropped. **Note:** Tasks sometimes run past their task duration, for example, in cases of supervisor failover. Setting earlyMessageRejectionPeriod too low may cause messages to be dropped unexpectedly whenever a task runs past its originally configured task duration.|no (default == none)|\n+|`autoScalerConfig`|Object|`autoScalerConfig` to specify how to auto scale the number of Kafka ingest tasks based on Lag metrics. ONLY supported for Kafka indexing as of now. See [Tasks Autoscaler Properties](#Task Autoscaler Properties) for details.|no (default == null)|\n+\n+### Task Autoscaler Properties\n+| Property | Description | Required |\n+| ------------- | ------------- | ------------- |\n+| `enableTaskAutoScaler` | Whether enable this feature or not. Set false or ignored here will disable `autoScaler` even though `autoScalerConfig` is not null| no (default == false) |\n+| `lagCollectionIntervalMillis` | Define the frequency of lag points collection.  | no (default == 30000) |\n+| `lagCollectionRangeMillis` | The total time window of lag collection, Use with `lagCollectionIntervalMillis`\uff0cit means that in the recent `lagCollectionRangeMillis`, collect lag metric points every `lagCollectionIntervalMillis`. | no (default == 600000) |\n+| `scaleOutThreshold` | The Threshold of scale out action | no (default == 6000000) |\n+| `triggerScaleOutThresholdFrequency` | If `triggerScaleOutThresholdFrequency` percent of lag points are higher than `scaleOutThreshold`, then do scale out action. | no (default == 0.3) |\n+| `scaleInThreshold` | The Threshold of scale in action | no (default == 1000000) |\n+| `triggerScaleInThresholdFrequency` | If `triggerScaleInThresholdFrequency` percent of lag points are lower than `scaleOutThreshold`, then do scale in action. | no (default == 0.9) |\n+| `scaleActionStartDelayMillis` | Number of milliseconds after supervisor starts when first check scale logic. | no (default == 300000) |\n+| `scaleActionPeriodMillis` | The frequency of checking whether to do scale action in millis | no (default == 60000) |\n+| `taskCountMax` | Maximum value of task count. Make Sure `taskCountMax >= taskCountMin` | yes |\n+| `taskCountMin` | Minimum value of task count. When enable autoscaler, the value of taskCount in `IOConfig` will be ignored, and `taskCountMin` will be the number of tasks that ingestion starts going up to `taskCountMax`| yes |\n+| `scaleInStep` | How many tasks to reduce at a time | no (default == 1) |\n+| `scaleOutStep` | How many tasks to add at a time | no (default == 2) |\n+| `minTriggerScaleActionFrequencyMillis` | Minimum time interval between two scale actions | no (default == 600000) |\n+| `autoScalerStrategy` | The algorithm of `autoScaler`. ONLY `lagBased` is supported for now. | no (default == `lagBased`) |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6334e2ba0ddf48ddfd884fcdfe9361cee1431e6b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTMyMjUwOQ==", "bodyText": "Sure. Done", "url": "https://github.com/apache/druid/pull/10524#discussion_r585322509", "createdAt": "2021-03-02T07:34:02Z", "author": {"login": "zhangyue19921010"}, "path": "docs/development/extensions-core/kafka-ingestion.md", "diffHunk": "@@ -146,6 +146,26 @@ A sample supervisor spec is shown below:\n |`lateMessageRejectionStartDateTime`|ISO8601 DateTime|Configure tasks to reject messages with timestamps earlier than this date time; for example if this is set to `2016-01-01T11:00Z` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps earlier than *2016-01-01T11:00Z* will be dropped. This may help prevent concurrency issues if your data stream has late messages and you have multiple pipelines that need to operate on the same segments (e.g. a realtime and a nightly batch ingestion pipeline).|no (default == none)|\n |`lateMessageRejectionPeriod`|ISO8601 Period|Configure tasks to reject messages with timestamps earlier than this period before the task was created; for example if this is set to `PT1H` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps earlier than *2016-01-01T11:00Z* will be dropped. This may help prevent concurrency issues if your data stream has late messages and you have multiple pipelines that need to operate on the same segments (e.g. a realtime and a nightly batch ingestion pipeline). Please note that only one of `lateMessageRejectionPeriod` or `lateMessageRejectionStartDateTime` can be specified.|no (default == none)|\n |`earlyMessageRejectionPeriod`|ISO8601 Period|Configure tasks to reject messages with timestamps later than this period after the task reached its taskDuration; for example if this is set to `PT1H`, the taskDuration is set to `PT1H` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps later than *2016-01-01T14:00Z* will be dropped. **Note:** Tasks sometimes run past their task duration, for example, in cases of supervisor failover. Setting earlyMessageRejectionPeriod too low may cause messages to be dropped unexpectedly whenever a task runs past its originally configured task duration.|no (default == none)|\n+|`autoScalerConfig`|Object|`autoScalerConfig` to specify how to auto scale the number of Kafka ingest tasks based on Lag metrics. ONLY supported for Kafka indexing as of now. See [Tasks Autoscaler Properties](#Task Autoscaler Properties) for details.|no (default == null)|\n+\n+### Task Autoscaler Properties\n+| Property | Description | Required |\n+| ------------- | ------------- | ------------- |\n+| `enableTaskAutoScaler` | Whether enable this feature or not. Set false or ignored here will disable `autoScaler` even though `autoScalerConfig` is not null| no (default == false) |\n+| `lagCollectionIntervalMillis` | Define the frequency of lag points collection.  | no (default == 30000) |\n+| `lagCollectionRangeMillis` | The total time window of lag collection, Use with `lagCollectionIntervalMillis`\uff0cit means that in the recent `lagCollectionRangeMillis`, collect lag metric points every `lagCollectionIntervalMillis`. | no (default == 600000) |\n+| `scaleOutThreshold` | The Threshold of scale out action | no (default == 6000000) |\n+| `triggerScaleOutThresholdFrequency` | If `triggerScaleOutThresholdFrequency` percent of lag points are higher than `scaleOutThreshold`, then do scale out action. | no (default == 0.3) |\n+| `scaleInThreshold` | The Threshold of scale in action | no (default == 1000000) |\n+| `triggerScaleInThresholdFrequency` | If `triggerScaleInThresholdFrequency` percent of lag points are lower than `scaleOutThreshold`, then do scale in action. | no (default == 0.9) |\n+| `scaleActionStartDelayMillis` | Number of milliseconds after supervisor starts when first check scale logic. | no (default == 300000) |\n+| `scaleActionPeriodMillis` | The frequency of checking whether to do scale action in millis | no (default == 60000) |\n+| `taskCountMax` | Maximum value of task count. Make Sure `taskCountMax >= taskCountMin` | yes |\n+| `taskCountMin` | Minimum value of task count. When enable autoscaler, the value of taskCount in `IOConfig` will be ignored, and `taskCountMin` will be the number of tasks that ingestion starts going up to `taskCountMax`| yes |\n+| `scaleInStep` | How many tasks to reduce at a time | no (default == 1) |\n+| `scaleOutStep` | How many tasks to add at a time | no (default == 2) |\n+| `minTriggerScaleActionFrequencyMillis` | Minimum time interval between two scale actions | no (default == 600000) |\n+| `autoScalerStrategy` | The algorithm of `autoScaler`. ONLY `lagBased` is supported for now. | no (default == `lagBased`) |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTE1NjQ4Mw=="}, "originalCommit": {"oid": "6334e2ba0ddf48ddfd884fcdfe9361cee1431e6b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY5MjIxMTgwOnYy", "diffSide": "RIGHT", "path": "docs/development/extensions-core/kafka-ingestion.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQwMDozMzowOVrOIuDJig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQwNzozNDoxNlrOIuNQcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTE1NzAwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | `lagCollectionIntervalMillis` | Define the frequency of lag points collection.  | no (default == 30000) |\n          \n          \n            \n            | `lagCollectionIntervalMillis` | Period of lag points collection.  | no (default == 30000) |", "url": "https://github.com/apache/druid/pull/10524#discussion_r585157002", "createdAt": "2021-03-02T00:33:09Z", "author": {"login": "himanshug"}, "path": "docs/development/extensions-core/kafka-ingestion.md", "diffHunk": "@@ -146,6 +146,26 @@ A sample supervisor spec is shown below:\n |`lateMessageRejectionStartDateTime`|ISO8601 DateTime|Configure tasks to reject messages with timestamps earlier than this date time; for example if this is set to `2016-01-01T11:00Z` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps earlier than *2016-01-01T11:00Z* will be dropped. This may help prevent concurrency issues if your data stream has late messages and you have multiple pipelines that need to operate on the same segments (e.g. a realtime and a nightly batch ingestion pipeline).|no (default == none)|\n |`lateMessageRejectionPeriod`|ISO8601 Period|Configure tasks to reject messages with timestamps earlier than this period before the task was created; for example if this is set to `PT1H` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps earlier than *2016-01-01T11:00Z* will be dropped. This may help prevent concurrency issues if your data stream has late messages and you have multiple pipelines that need to operate on the same segments (e.g. a realtime and a nightly batch ingestion pipeline). Please note that only one of `lateMessageRejectionPeriod` or `lateMessageRejectionStartDateTime` can be specified.|no (default == none)|\n |`earlyMessageRejectionPeriod`|ISO8601 Period|Configure tasks to reject messages with timestamps later than this period after the task reached its taskDuration; for example if this is set to `PT1H`, the taskDuration is set to `PT1H` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps later than *2016-01-01T14:00Z* will be dropped. **Note:** Tasks sometimes run past their task duration, for example, in cases of supervisor failover. Setting earlyMessageRejectionPeriod too low may cause messages to be dropped unexpectedly whenever a task runs past its originally configured task duration.|no (default == none)|\n+|`autoScalerConfig`|Object|`autoScalerConfig` to specify how to auto scale the number of Kafka ingest tasks based on Lag metrics. ONLY supported for Kafka indexing as of now. See [Tasks Autoscaler Properties](#Task Autoscaler Properties) for details.|no (default == null)|\n+\n+### Task Autoscaler Properties\n+| Property | Description | Required |\n+| ------------- | ------------- | ------------- |\n+| `enableTaskAutoScaler` | Whether enable this feature or not. Set false or ignored here will disable `autoScaler` even though `autoScalerConfig` is not null| no (default == false) |\n+| `lagCollectionIntervalMillis` | Define the frequency of lag points collection.  | no (default == 30000) |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6334e2ba0ddf48ddfd884fcdfe9361cee1431e6b"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTMyMjYwOQ==", "bodyText": "Thanks && changed.", "url": "https://github.com/apache/druid/pull/10524#discussion_r585322609", "createdAt": "2021-03-02T07:34:16Z", "author": {"login": "zhangyue19921010"}, "path": "docs/development/extensions-core/kafka-ingestion.md", "diffHunk": "@@ -146,6 +146,26 @@ A sample supervisor spec is shown below:\n |`lateMessageRejectionStartDateTime`|ISO8601 DateTime|Configure tasks to reject messages with timestamps earlier than this date time; for example if this is set to `2016-01-01T11:00Z` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps earlier than *2016-01-01T11:00Z* will be dropped. This may help prevent concurrency issues if your data stream has late messages and you have multiple pipelines that need to operate on the same segments (e.g. a realtime and a nightly batch ingestion pipeline).|no (default == none)|\n |`lateMessageRejectionPeriod`|ISO8601 Period|Configure tasks to reject messages with timestamps earlier than this period before the task was created; for example if this is set to `PT1H` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps earlier than *2016-01-01T11:00Z* will be dropped. This may help prevent concurrency issues if your data stream has late messages and you have multiple pipelines that need to operate on the same segments (e.g. a realtime and a nightly batch ingestion pipeline). Please note that only one of `lateMessageRejectionPeriod` or `lateMessageRejectionStartDateTime` can be specified.|no (default == none)|\n |`earlyMessageRejectionPeriod`|ISO8601 Period|Configure tasks to reject messages with timestamps later than this period after the task reached its taskDuration; for example if this is set to `PT1H`, the taskDuration is set to `PT1H` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps later than *2016-01-01T14:00Z* will be dropped. **Note:** Tasks sometimes run past their task duration, for example, in cases of supervisor failover. Setting earlyMessageRejectionPeriod too low may cause messages to be dropped unexpectedly whenever a task runs past its originally configured task duration.|no (default == none)|\n+|`autoScalerConfig`|Object|`autoScalerConfig` to specify how to auto scale the number of Kafka ingest tasks based on Lag metrics. ONLY supported for Kafka indexing as of now. See [Tasks Autoscaler Properties](#Task Autoscaler Properties) for details.|no (default == null)|\n+\n+### Task Autoscaler Properties\n+| Property | Description | Required |\n+| ------------- | ------------- | ------------- |\n+| `enableTaskAutoScaler` | Whether enable this feature or not. Set false or ignored here will disable `autoScaler` even though `autoScalerConfig` is not null| no (default == false) |\n+| `lagCollectionIntervalMillis` | Define the frequency of lag points collection.  | no (default == 30000) |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTE1NzAwMg=="}, "originalCommit": {"oid": "6334e2ba0ddf48ddfd884fcdfe9361cee1431e6b"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY5MjIzNjIwOnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/LagBasedAutoScaler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQwMDo0MzowMFrOIuDYBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQwNzozOTo1NlrOIuNcdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTE2MDcxMQ==", "bodyText": "why shouldn't we expect lagStats.getTotalLag() to return a value >= 0 ?", "url": "https://github.com/apache/druid/pull/10524#discussion_r585160711", "createdAt": "2021-03-02T00:43:00Z", "author": {"login": "himanshug"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/LagBasedAutoScaler.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.seekablestream.supervisor.autoscaler;\n+\n+import org.apache.commons.collections4.queue.CircularFifoQueue;\n+import org.apache.druid.indexing.overlord.supervisor.SupervisorSpec;\n+import org.apache.druid.indexing.overlord.supervisor.autoscaler.LagStats;\n+import org.apache.druid.indexing.overlord.supervisor.autoscaler.SupervisorTaskAutoScaler;\n+import org.apache.druid.indexing.seekablestream.supervisor.SeekableStreamSupervisor;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.concurrent.Execs;\n+import org.apache.druid.java.util.emitter.EmittingLogger;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+public class LagBasedAutoScaler implements SupervisorTaskAutoScaler\n+{\n+  private static final EmittingLogger log = new EmittingLogger(LagBasedAutoScaler.class);\n+  private final String dataSource;\n+  private final CircularFifoQueue<Long> lagMetricsQueue;\n+  private final ScheduledExecutorService lagComputationExec;\n+  private final ScheduledExecutorService allocationExec;\n+  private final SupervisorSpec spec;\n+  private final SeekableStreamSupervisor supervisor;\n+  private final LagBasedAutoScalerConfig lagBasedAutoScalerConfig;\n+\n+  private static final ReentrantLock LOCK = new ReentrantLock(true);\n+\n+  public LagBasedAutoScaler(SeekableStreamSupervisor supervisor, String dataSource,\n+      LagBasedAutoScalerConfig autoScalerConfig, SupervisorSpec spec\n+  )\n+  {\n+    this.lagBasedAutoScalerConfig = autoScalerConfig;\n+    final String supervisorId = StringUtils.format(\"Supervisor-%s\", dataSource);\n+    this.dataSource = dataSource;\n+    final int slots = (int) (lagBasedAutoScalerConfig.getLagCollectionRangeMillis() / lagBasedAutoScalerConfig\n+        .getLagCollectionIntervalMillis()) + 1;\n+    this.lagMetricsQueue = new CircularFifoQueue<>(slots);\n+    this.allocationExec = Execs.scheduledSingleThreaded(StringUtils.encodeForFormat(supervisorId) + \"-Allocation-%d\");\n+    this.lagComputationExec = Execs.scheduledSingleThreaded(StringUtils.encodeForFormat(supervisorId) + \"-Computation-%d\");\n+    this.spec = spec;\n+    this.supervisor = supervisor;\n+  }\n+\n+  @Override\n+  public void start()\n+  {\n+    Callable<Integer> scaleAction = () -> {\n+      LOCK.lock();\n+      int desiredTaskCount = -1;\n+      try {\n+        desiredTaskCount = computeDesiredTaskCount(new ArrayList<>(lagMetricsQueue));\n+\n+        if (desiredTaskCount != -1) {\n+          lagMetricsQueue.clear();\n+        }\n+      }\n+      catch (Exception ex) {\n+        log.warn(ex, \"Exception while computing desired task count for [%s]\", dataSource);\n+      }\n+      finally {\n+        LOCK.unlock();\n+      }\n+      return desiredTaskCount;\n+    };\n+\n+    lagComputationExec.scheduleAtFixedRate(\n+        computeAndCollectLag(),\n+        lagBasedAutoScalerConfig.getScaleActionStartDelayMillis(), // wait for tasks to start up\n+        lagBasedAutoScalerConfig.getLagCollectionIntervalMillis(),\n+        TimeUnit.MILLISECONDS\n+    );\n+    allocationExec.scheduleAtFixedRate(\n+        supervisor.buildDynamicAllocationTask(scaleAction),\n+        lagBasedAutoScalerConfig.getScaleActionStartDelayMillis() + lagBasedAutoScalerConfig\n+            .getLagCollectionRangeMillis(),\n+        lagBasedAutoScalerConfig.getScaleActionPeriodMillis(),\n+        TimeUnit.MILLISECONDS\n+    );\n+    log.info(\n+        \"LagBasedAutoScaler will collect lag every [%d] millis and will keep [%d] data points for the last [%d] millis for dataSource [%s]\",\n+        lagBasedAutoScalerConfig.getLagCollectionIntervalMillis(), lagMetricsQueue.size(),\n+        lagBasedAutoScalerConfig.getLagCollectionRangeMillis(), dataSource\n+    );\n+  }\n+\n+  @Override\n+  public void stop()\n+  {\n+    allocationExec.shutdownNow();\n+    lagComputationExec.shutdownNow();\n+  }\n+\n+  @Override\n+  public void reset()\n+  {\n+    // clear queue for kafka lags\n+    if (lagMetricsQueue != null) {\n+      try {\n+        LOCK.lock();\n+        lagMetricsQueue.clear();\n+      }\n+      catch (Exception e) {\n+        log.warn(e, \"Error,when clear queue in rest action\");\n+      }\n+      finally {\n+        LOCK.unlock();\n+      }\n+    }\n+  }\n+\n+  /**\n+   * This method computes current consumer lag. Gets the total lag of all partitions and fill in the lagMetricsQueue\n+   *\n+   * @return a Runnbale object to compute and collect lag.\n+   */\n+  private Runnable computeAndCollectLag()\n+  {\n+    return () -> {\n+      LOCK.lock();\n+      try {\n+        if (!spec.isSuspended()) {\n+          LagStats lagStats = supervisor.computeLagStats();\n+          if (lagStats == null) {\n+            lagMetricsQueue.offer(0L);\n+          } else {\n+            long totalLags = lagStats.getTotalLag();\n+            lagMetricsQueue.offer(totalLags > 0 ? totalLags : 0L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6334e2ba0ddf48ddfd884fcdfe9361cee1431e6b"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTMyNTY4Nw==", "bodyText": "Because we can occasionally get negative lags in our practice. Something like https://stackoverflow.com/questions/60847952/how-to-get-rid-of-negative-consumer-lag-in-kafka\nNegative lag values is un-necessary and a poison into our lag metrics. So just filter it here.", "url": "https://github.com/apache/druid/pull/10524#discussion_r585325687", "createdAt": "2021-03-02T07:39:56Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/LagBasedAutoScaler.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.seekablestream.supervisor.autoscaler;\n+\n+import org.apache.commons.collections4.queue.CircularFifoQueue;\n+import org.apache.druid.indexing.overlord.supervisor.SupervisorSpec;\n+import org.apache.druid.indexing.overlord.supervisor.autoscaler.LagStats;\n+import org.apache.druid.indexing.overlord.supervisor.autoscaler.SupervisorTaskAutoScaler;\n+import org.apache.druid.indexing.seekablestream.supervisor.SeekableStreamSupervisor;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.concurrent.Execs;\n+import org.apache.druid.java.util.emitter.EmittingLogger;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+public class LagBasedAutoScaler implements SupervisorTaskAutoScaler\n+{\n+  private static final EmittingLogger log = new EmittingLogger(LagBasedAutoScaler.class);\n+  private final String dataSource;\n+  private final CircularFifoQueue<Long> lagMetricsQueue;\n+  private final ScheduledExecutorService lagComputationExec;\n+  private final ScheduledExecutorService allocationExec;\n+  private final SupervisorSpec spec;\n+  private final SeekableStreamSupervisor supervisor;\n+  private final LagBasedAutoScalerConfig lagBasedAutoScalerConfig;\n+\n+  private static final ReentrantLock LOCK = new ReentrantLock(true);\n+\n+  public LagBasedAutoScaler(SeekableStreamSupervisor supervisor, String dataSource,\n+      LagBasedAutoScalerConfig autoScalerConfig, SupervisorSpec spec\n+  )\n+  {\n+    this.lagBasedAutoScalerConfig = autoScalerConfig;\n+    final String supervisorId = StringUtils.format(\"Supervisor-%s\", dataSource);\n+    this.dataSource = dataSource;\n+    final int slots = (int) (lagBasedAutoScalerConfig.getLagCollectionRangeMillis() / lagBasedAutoScalerConfig\n+        .getLagCollectionIntervalMillis()) + 1;\n+    this.lagMetricsQueue = new CircularFifoQueue<>(slots);\n+    this.allocationExec = Execs.scheduledSingleThreaded(StringUtils.encodeForFormat(supervisorId) + \"-Allocation-%d\");\n+    this.lagComputationExec = Execs.scheduledSingleThreaded(StringUtils.encodeForFormat(supervisorId) + \"-Computation-%d\");\n+    this.spec = spec;\n+    this.supervisor = supervisor;\n+  }\n+\n+  @Override\n+  public void start()\n+  {\n+    Callable<Integer> scaleAction = () -> {\n+      LOCK.lock();\n+      int desiredTaskCount = -1;\n+      try {\n+        desiredTaskCount = computeDesiredTaskCount(new ArrayList<>(lagMetricsQueue));\n+\n+        if (desiredTaskCount != -1) {\n+          lagMetricsQueue.clear();\n+        }\n+      }\n+      catch (Exception ex) {\n+        log.warn(ex, \"Exception while computing desired task count for [%s]\", dataSource);\n+      }\n+      finally {\n+        LOCK.unlock();\n+      }\n+      return desiredTaskCount;\n+    };\n+\n+    lagComputationExec.scheduleAtFixedRate(\n+        computeAndCollectLag(),\n+        lagBasedAutoScalerConfig.getScaleActionStartDelayMillis(), // wait for tasks to start up\n+        lagBasedAutoScalerConfig.getLagCollectionIntervalMillis(),\n+        TimeUnit.MILLISECONDS\n+    );\n+    allocationExec.scheduleAtFixedRate(\n+        supervisor.buildDynamicAllocationTask(scaleAction),\n+        lagBasedAutoScalerConfig.getScaleActionStartDelayMillis() + lagBasedAutoScalerConfig\n+            .getLagCollectionRangeMillis(),\n+        lagBasedAutoScalerConfig.getScaleActionPeriodMillis(),\n+        TimeUnit.MILLISECONDS\n+    );\n+    log.info(\n+        \"LagBasedAutoScaler will collect lag every [%d] millis and will keep [%d] data points for the last [%d] millis for dataSource [%s]\",\n+        lagBasedAutoScalerConfig.getLagCollectionIntervalMillis(), lagMetricsQueue.size(),\n+        lagBasedAutoScalerConfig.getLagCollectionRangeMillis(), dataSource\n+    );\n+  }\n+\n+  @Override\n+  public void stop()\n+  {\n+    allocationExec.shutdownNow();\n+    lagComputationExec.shutdownNow();\n+  }\n+\n+  @Override\n+  public void reset()\n+  {\n+    // clear queue for kafka lags\n+    if (lagMetricsQueue != null) {\n+      try {\n+        LOCK.lock();\n+        lagMetricsQueue.clear();\n+      }\n+      catch (Exception e) {\n+        log.warn(e, \"Error,when clear queue in rest action\");\n+      }\n+      finally {\n+        LOCK.unlock();\n+      }\n+    }\n+  }\n+\n+  /**\n+   * This method computes current consumer lag. Gets the total lag of all partitions and fill in the lagMetricsQueue\n+   *\n+   * @return a Runnbale object to compute and collect lag.\n+   */\n+  private Runnable computeAndCollectLag()\n+  {\n+    return () -> {\n+      LOCK.lock();\n+      try {\n+        if (!spec.isSuspended()) {\n+          LagStats lagStats = supervisor.computeLagStats();\n+          if (lagStats == null) {\n+            lagMetricsQueue.offer(0L);\n+          } else {\n+            long totalLags = lagStats.getTotalLag();\n+            lagMetricsQueue.offer(totalLags > 0 ? totalLags : 0L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTE2MDcxMQ=="}, "originalCommit": {"oid": "6334e2ba0ddf48ddfd884fcdfe9361cee1431e6b"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY5MjI0NzAxOnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/LagBasedAutoScaler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQwMDo0NzowN1rOIuDeIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQwNzo0MDowOVrOIuNc6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTE2MjI3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private Integer computeDesiredTaskCount(List<Long> lags)\n          \n          \n            \n              private int computeDesiredTaskCount(List<Long> lags)", "url": "https://github.com/apache/druid/pull/10524#discussion_r585162274", "createdAt": "2021-03-02T00:47:07Z", "author": {"login": "himanshug"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/LagBasedAutoScaler.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.seekablestream.supervisor.autoscaler;\n+\n+import org.apache.commons.collections4.queue.CircularFifoQueue;\n+import org.apache.druid.indexing.overlord.supervisor.SupervisorSpec;\n+import org.apache.druid.indexing.overlord.supervisor.autoscaler.LagStats;\n+import org.apache.druid.indexing.overlord.supervisor.autoscaler.SupervisorTaskAutoScaler;\n+import org.apache.druid.indexing.seekablestream.supervisor.SeekableStreamSupervisor;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.concurrent.Execs;\n+import org.apache.druid.java.util.emitter.EmittingLogger;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+public class LagBasedAutoScaler implements SupervisorTaskAutoScaler\n+{\n+  private static final EmittingLogger log = new EmittingLogger(LagBasedAutoScaler.class);\n+  private final String dataSource;\n+  private final CircularFifoQueue<Long> lagMetricsQueue;\n+  private final ScheduledExecutorService lagComputationExec;\n+  private final ScheduledExecutorService allocationExec;\n+  private final SupervisorSpec spec;\n+  private final SeekableStreamSupervisor supervisor;\n+  private final LagBasedAutoScalerConfig lagBasedAutoScalerConfig;\n+\n+  private static final ReentrantLock LOCK = new ReentrantLock(true);\n+\n+  public LagBasedAutoScaler(SeekableStreamSupervisor supervisor, String dataSource,\n+      LagBasedAutoScalerConfig autoScalerConfig, SupervisorSpec spec\n+  )\n+  {\n+    this.lagBasedAutoScalerConfig = autoScalerConfig;\n+    final String supervisorId = StringUtils.format(\"Supervisor-%s\", dataSource);\n+    this.dataSource = dataSource;\n+    final int slots = (int) (lagBasedAutoScalerConfig.getLagCollectionRangeMillis() / lagBasedAutoScalerConfig\n+        .getLagCollectionIntervalMillis()) + 1;\n+    this.lagMetricsQueue = new CircularFifoQueue<>(slots);\n+    this.allocationExec = Execs.scheduledSingleThreaded(StringUtils.encodeForFormat(supervisorId) + \"-Allocation-%d\");\n+    this.lagComputationExec = Execs.scheduledSingleThreaded(StringUtils.encodeForFormat(supervisorId) + \"-Computation-%d\");\n+    this.spec = spec;\n+    this.supervisor = supervisor;\n+  }\n+\n+  @Override\n+  public void start()\n+  {\n+    Callable<Integer> scaleAction = () -> {\n+      LOCK.lock();\n+      int desiredTaskCount = -1;\n+      try {\n+        desiredTaskCount = computeDesiredTaskCount(new ArrayList<>(lagMetricsQueue));\n+\n+        if (desiredTaskCount != -1) {\n+          lagMetricsQueue.clear();\n+        }\n+      }\n+      catch (Exception ex) {\n+        log.warn(ex, \"Exception while computing desired task count for [%s]\", dataSource);\n+      }\n+      finally {\n+        LOCK.unlock();\n+      }\n+      return desiredTaskCount;\n+    };\n+\n+    lagComputationExec.scheduleAtFixedRate(\n+        computeAndCollectLag(),\n+        lagBasedAutoScalerConfig.getScaleActionStartDelayMillis(), // wait for tasks to start up\n+        lagBasedAutoScalerConfig.getLagCollectionIntervalMillis(),\n+        TimeUnit.MILLISECONDS\n+    );\n+    allocationExec.scheduleAtFixedRate(\n+        supervisor.buildDynamicAllocationTask(scaleAction),\n+        lagBasedAutoScalerConfig.getScaleActionStartDelayMillis() + lagBasedAutoScalerConfig\n+            .getLagCollectionRangeMillis(),\n+        lagBasedAutoScalerConfig.getScaleActionPeriodMillis(),\n+        TimeUnit.MILLISECONDS\n+    );\n+    log.info(\n+        \"LagBasedAutoScaler will collect lag every [%d] millis and will keep [%d] data points for the last [%d] millis for dataSource [%s]\",\n+        lagBasedAutoScalerConfig.getLagCollectionIntervalMillis(), lagMetricsQueue.size(),\n+        lagBasedAutoScalerConfig.getLagCollectionRangeMillis(), dataSource\n+    );\n+  }\n+\n+  @Override\n+  public void stop()\n+  {\n+    allocationExec.shutdownNow();\n+    lagComputationExec.shutdownNow();\n+  }\n+\n+  @Override\n+  public void reset()\n+  {\n+    // clear queue for kafka lags\n+    if (lagMetricsQueue != null) {\n+      try {\n+        LOCK.lock();\n+        lagMetricsQueue.clear();\n+      }\n+      catch (Exception e) {\n+        log.warn(e, \"Error,when clear queue in rest action\");\n+      }\n+      finally {\n+        LOCK.unlock();\n+      }\n+    }\n+  }\n+\n+  /**\n+   * This method computes current consumer lag. Gets the total lag of all partitions and fill in the lagMetricsQueue\n+   *\n+   * @return a Runnbale object to compute and collect lag.\n+   */\n+  private Runnable computeAndCollectLag()\n+  {\n+    return () -> {\n+      LOCK.lock();\n+      try {\n+        if (!spec.isSuspended()) {\n+          LagStats lagStats = supervisor.computeLagStats();\n+          if (lagStats == null) {\n+            lagMetricsQueue.offer(0L);\n+          } else {\n+            long totalLags = lagStats.getTotalLag();\n+            lagMetricsQueue.offer(totalLags > 0 ? totalLags : 0L);\n+          }\n+          log.debug(\"Current lags [%s] for dataSource [%s].\", new ArrayList<>(lagMetricsQueue), dataSource);\n+        } else {\n+          log.warn(\"[%s] supervisor is suspended, skipping lag collection\", dataSource);\n+        }\n+      }\n+      catch (Exception e) {\n+        log.error(e, \"Error while collecting lags\");\n+      }\n+      finally {\n+        LOCK.unlock();\n+      }\n+    };\n+  }\n+\n+  /**\n+   * This method determines whether to do scale actions based on collected lag points.\n+   * Current algorithm of scale is simple:\n+   * First of all, compute the proportion of lag points higher/lower than scaleOutThreshold/scaleInThreshold, getting scaleOutThreshold/scaleInThreshold.\n+   * Secondly, compare scaleOutThreshold/scaleInThreshold with triggerScaleOutThresholdFrequency/triggerScaleInThresholdFrequency. P.S. Scale out action has higher priority than scale in action.\n+   * Finaly, if scaleOutThreshold/scaleInThreshold is higher than triggerScaleOutThresholdFrequency/triggerScaleInThresholdFrequency, scale out/in action would be triggered.\n+   *\n+   * @param lags the lag metrics of Stream(Kafka/Kinesis)\n+   * @return Integer. target number of tasksCount, -1 means skip scale action.\n+   */\n+  private Integer computeDesiredTaskCount(List<Long> lags)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6334e2ba0ddf48ddfd884fcdfe9361cee1431e6b"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTMyNTgwMw==", "bodyText": "Thanks && changed.", "url": "https://github.com/apache/druid/pull/10524#discussion_r585325803", "createdAt": "2021-03-02T07:40:09Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/LagBasedAutoScaler.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.seekablestream.supervisor.autoscaler;\n+\n+import org.apache.commons.collections4.queue.CircularFifoQueue;\n+import org.apache.druid.indexing.overlord.supervisor.SupervisorSpec;\n+import org.apache.druid.indexing.overlord.supervisor.autoscaler.LagStats;\n+import org.apache.druid.indexing.overlord.supervisor.autoscaler.SupervisorTaskAutoScaler;\n+import org.apache.druid.indexing.seekablestream.supervisor.SeekableStreamSupervisor;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.concurrent.Execs;\n+import org.apache.druid.java.util.emitter.EmittingLogger;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+public class LagBasedAutoScaler implements SupervisorTaskAutoScaler\n+{\n+  private static final EmittingLogger log = new EmittingLogger(LagBasedAutoScaler.class);\n+  private final String dataSource;\n+  private final CircularFifoQueue<Long> lagMetricsQueue;\n+  private final ScheduledExecutorService lagComputationExec;\n+  private final ScheduledExecutorService allocationExec;\n+  private final SupervisorSpec spec;\n+  private final SeekableStreamSupervisor supervisor;\n+  private final LagBasedAutoScalerConfig lagBasedAutoScalerConfig;\n+\n+  private static final ReentrantLock LOCK = new ReentrantLock(true);\n+\n+  public LagBasedAutoScaler(SeekableStreamSupervisor supervisor, String dataSource,\n+      LagBasedAutoScalerConfig autoScalerConfig, SupervisorSpec spec\n+  )\n+  {\n+    this.lagBasedAutoScalerConfig = autoScalerConfig;\n+    final String supervisorId = StringUtils.format(\"Supervisor-%s\", dataSource);\n+    this.dataSource = dataSource;\n+    final int slots = (int) (lagBasedAutoScalerConfig.getLagCollectionRangeMillis() / lagBasedAutoScalerConfig\n+        .getLagCollectionIntervalMillis()) + 1;\n+    this.lagMetricsQueue = new CircularFifoQueue<>(slots);\n+    this.allocationExec = Execs.scheduledSingleThreaded(StringUtils.encodeForFormat(supervisorId) + \"-Allocation-%d\");\n+    this.lagComputationExec = Execs.scheduledSingleThreaded(StringUtils.encodeForFormat(supervisorId) + \"-Computation-%d\");\n+    this.spec = spec;\n+    this.supervisor = supervisor;\n+  }\n+\n+  @Override\n+  public void start()\n+  {\n+    Callable<Integer> scaleAction = () -> {\n+      LOCK.lock();\n+      int desiredTaskCount = -1;\n+      try {\n+        desiredTaskCount = computeDesiredTaskCount(new ArrayList<>(lagMetricsQueue));\n+\n+        if (desiredTaskCount != -1) {\n+          lagMetricsQueue.clear();\n+        }\n+      }\n+      catch (Exception ex) {\n+        log.warn(ex, \"Exception while computing desired task count for [%s]\", dataSource);\n+      }\n+      finally {\n+        LOCK.unlock();\n+      }\n+      return desiredTaskCount;\n+    };\n+\n+    lagComputationExec.scheduleAtFixedRate(\n+        computeAndCollectLag(),\n+        lagBasedAutoScalerConfig.getScaleActionStartDelayMillis(), // wait for tasks to start up\n+        lagBasedAutoScalerConfig.getLagCollectionIntervalMillis(),\n+        TimeUnit.MILLISECONDS\n+    );\n+    allocationExec.scheduleAtFixedRate(\n+        supervisor.buildDynamicAllocationTask(scaleAction),\n+        lagBasedAutoScalerConfig.getScaleActionStartDelayMillis() + lagBasedAutoScalerConfig\n+            .getLagCollectionRangeMillis(),\n+        lagBasedAutoScalerConfig.getScaleActionPeriodMillis(),\n+        TimeUnit.MILLISECONDS\n+    );\n+    log.info(\n+        \"LagBasedAutoScaler will collect lag every [%d] millis and will keep [%d] data points for the last [%d] millis for dataSource [%s]\",\n+        lagBasedAutoScalerConfig.getLagCollectionIntervalMillis(), lagMetricsQueue.size(),\n+        lagBasedAutoScalerConfig.getLagCollectionRangeMillis(), dataSource\n+    );\n+  }\n+\n+  @Override\n+  public void stop()\n+  {\n+    allocationExec.shutdownNow();\n+    lagComputationExec.shutdownNow();\n+  }\n+\n+  @Override\n+  public void reset()\n+  {\n+    // clear queue for kafka lags\n+    if (lagMetricsQueue != null) {\n+      try {\n+        LOCK.lock();\n+        lagMetricsQueue.clear();\n+      }\n+      catch (Exception e) {\n+        log.warn(e, \"Error,when clear queue in rest action\");\n+      }\n+      finally {\n+        LOCK.unlock();\n+      }\n+    }\n+  }\n+\n+  /**\n+   * This method computes current consumer lag. Gets the total lag of all partitions and fill in the lagMetricsQueue\n+   *\n+   * @return a Runnbale object to compute and collect lag.\n+   */\n+  private Runnable computeAndCollectLag()\n+  {\n+    return () -> {\n+      LOCK.lock();\n+      try {\n+        if (!spec.isSuspended()) {\n+          LagStats lagStats = supervisor.computeLagStats();\n+          if (lagStats == null) {\n+            lagMetricsQueue.offer(0L);\n+          } else {\n+            long totalLags = lagStats.getTotalLag();\n+            lagMetricsQueue.offer(totalLags > 0 ? totalLags : 0L);\n+          }\n+          log.debug(\"Current lags [%s] for dataSource [%s].\", new ArrayList<>(lagMetricsQueue), dataSource);\n+        } else {\n+          log.warn(\"[%s] supervisor is suspended, skipping lag collection\", dataSource);\n+        }\n+      }\n+      catch (Exception e) {\n+        log.error(e, \"Error while collecting lags\");\n+      }\n+      finally {\n+        LOCK.unlock();\n+      }\n+    };\n+  }\n+\n+  /**\n+   * This method determines whether to do scale actions based on collected lag points.\n+   * Current algorithm of scale is simple:\n+   * First of all, compute the proportion of lag points higher/lower than scaleOutThreshold/scaleInThreshold, getting scaleOutThreshold/scaleInThreshold.\n+   * Secondly, compare scaleOutThreshold/scaleInThreshold with triggerScaleOutThresholdFrequency/triggerScaleInThresholdFrequency. P.S. Scale out action has higher priority than scale in action.\n+   * Finaly, if scaleOutThreshold/scaleInThreshold is higher than triggerScaleOutThresholdFrequency/triggerScaleInThresholdFrequency, scale out/in action would be triggered.\n+   *\n+   * @param lags the lag metrics of Stream(Kafka/Kinesis)\n+   * @return Integer. target number of tasksCount, -1 means skip scale action.\n+   */\n+  private Integer computeDesiredTaskCount(List<Long> lags)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTE2MjI3NA=="}, "originalCommit": {"oid": "6334e2ba0ddf48ddfd884fcdfe9361cee1431e6b"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY5MjI1NjAzOnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/LagBasedAutoScaler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQwMDo1MDoxNVrOIuDjMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQwNzo0MDoyN1rOIuNdfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTE2MzU3MA==", "bodyText": "is it legitimate for supervisor.getActiveTaskGroupsCount() to return a negative value? if not, then supervisor.getActiveTaskGroupsCount() should always return a value >= 0 and this check shouldn't be needed.", "url": "https://github.com/apache/druid/pull/10524#discussion_r585163570", "createdAt": "2021-03-02T00:50:15Z", "author": {"login": "himanshug"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/LagBasedAutoScaler.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.seekablestream.supervisor.autoscaler;\n+\n+import org.apache.commons.collections4.queue.CircularFifoQueue;\n+import org.apache.druid.indexing.overlord.supervisor.SupervisorSpec;\n+import org.apache.druid.indexing.overlord.supervisor.autoscaler.LagStats;\n+import org.apache.druid.indexing.overlord.supervisor.autoscaler.SupervisorTaskAutoScaler;\n+import org.apache.druid.indexing.seekablestream.supervisor.SeekableStreamSupervisor;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.concurrent.Execs;\n+import org.apache.druid.java.util.emitter.EmittingLogger;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+public class LagBasedAutoScaler implements SupervisorTaskAutoScaler\n+{\n+  private static final EmittingLogger log = new EmittingLogger(LagBasedAutoScaler.class);\n+  private final String dataSource;\n+  private final CircularFifoQueue<Long> lagMetricsQueue;\n+  private final ScheduledExecutorService lagComputationExec;\n+  private final ScheduledExecutorService allocationExec;\n+  private final SupervisorSpec spec;\n+  private final SeekableStreamSupervisor supervisor;\n+  private final LagBasedAutoScalerConfig lagBasedAutoScalerConfig;\n+\n+  private static final ReentrantLock LOCK = new ReentrantLock(true);\n+\n+  public LagBasedAutoScaler(SeekableStreamSupervisor supervisor, String dataSource,\n+      LagBasedAutoScalerConfig autoScalerConfig, SupervisorSpec spec\n+  )\n+  {\n+    this.lagBasedAutoScalerConfig = autoScalerConfig;\n+    final String supervisorId = StringUtils.format(\"Supervisor-%s\", dataSource);\n+    this.dataSource = dataSource;\n+    final int slots = (int) (lagBasedAutoScalerConfig.getLagCollectionRangeMillis() / lagBasedAutoScalerConfig\n+        .getLagCollectionIntervalMillis()) + 1;\n+    this.lagMetricsQueue = new CircularFifoQueue<>(slots);\n+    this.allocationExec = Execs.scheduledSingleThreaded(StringUtils.encodeForFormat(supervisorId) + \"-Allocation-%d\");\n+    this.lagComputationExec = Execs.scheduledSingleThreaded(StringUtils.encodeForFormat(supervisorId) + \"-Computation-%d\");\n+    this.spec = spec;\n+    this.supervisor = supervisor;\n+  }\n+\n+  @Override\n+  public void start()\n+  {\n+    Callable<Integer> scaleAction = () -> {\n+      LOCK.lock();\n+      int desiredTaskCount = -1;\n+      try {\n+        desiredTaskCount = computeDesiredTaskCount(new ArrayList<>(lagMetricsQueue));\n+\n+        if (desiredTaskCount != -1) {\n+          lagMetricsQueue.clear();\n+        }\n+      }\n+      catch (Exception ex) {\n+        log.warn(ex, \"Exception while computing desired task count for [%s]\", dataSource);\n+      }\n+      finally {\n+        LOCK.unlock();\n+      }\n+      return desiredTaskCount;\n+    };\n+\n+    lagComputationExec.scheduleAtFixedRate(\n+        computeAndCollectLag(),\n+        lagBasedAutoScalerConfig.getScaleActionStartDelayMillis(), // wait for tasks to start up\n+        lagBasedAutoScalerConfig.getLagCollectionIntervalMillis(),\n+        TimeUnit.MILLISECONDS\n+    );\n+    allocationExec.scheduleAtFixedRate(\n+        supervisor.buildDynamicAllocationTask(scaleAction),\n+        lagBasedAutoScalerConfig.getScaleActionStartDelayMillis() + lagBasedAutoScalerConfig\n+            .getLagCollectionRangeMillis(),\n+        lagBasedAutoScalerConfig.getScaleActionPeriodMillis(),\n+        TimeUnit.MILLISECONDS\n+    );\n+    log.info(\n+        \"LagBasedAutoScaler will collect lag every [%d] millis and will keep [%d] data points for the last [%d] millis for dataSource [%s]\",\n+        lagBasedAutoScalerConfig.getLagCollectionIntervalMillis(), lagMetricsQueue.size(),\n+        lagBasedAutoScalerConfig.getLagCollectionRangeMillis(), dataSource\n+    );\n+  }\n+\n+  @Override\n+  public void stop()\n+  {\n+    allocationExec.shutdownNow();\n+    lagComputationExec.shutdownNow();\n+  }\n+\n+  @Override\n+  public void reset()\n+  {\n+    // clear queue for kafka lags\n+    if (lagMetricsQueue != null) {\n+      try {\n+        LOCK.lock();\n+        lagMetricsQueue.clear();\n+      }\n+      catch (Exception e) {\n+        log.warn(e, \"Error,when clear queue in rest action\");\n+      }\n+      finally {\n+        LOCK.unlock();\n+      }\n+    }\n+  }\n+\n+  /**\n+   * This method computes current consumer lag. Gets the total lag of all partitions and fill in the lagMetricsQueue\n+   *\n+   * @return a Runnbale object to compute and collect lag.\n+   */\n+  private Runnable computeAndCollectLag()\n+  {\n+    return () -> {\n+      LOCK.lock();\n+      try {\n+        if (!spec.isSuspended()) {\n+          LagStats lagStats = supervisor.computeLagStats();\n+          if (lagStats == null) {\n+            lagMetricsQueue.offer(0L);\n+          } else {\n+            long totalLags = lagStats.getTotalLag();\n+            lagMetricsQueue.offer(totalLags > 0 ? totalLags : 0L);\n+          }\n+          log.debug(\"Current lags [%s] for dataSource [%s].\", new ArrayList<>(lagMetricsQueue), dataSource);\n+        } else {\n+          log.warn(\"[%s] supervisor is suspended, skipping lag collection\", dataSource);\n+        }\n+      }\n+      catch (Exception e) {\n+        log.error(e, \"Error while collecting lags\");\n+      }\n+      finally {\n+        LOCK.unlock();\n+      }\n+    };\n+  }\n+\n+  /**\n+   * This method determines whether to do scale actions based on collected lag points.\n+   * Current algorithm of scale is simple:\n+   * First of all, compute the proportion of lag points higher/lower than scaleOutThreshold/scaleInThreshold, getting scaleOutThreshold/scaleInThreshold.\n+   * Secondly, compare scaleOutThreshold/scaleInThreshold with triggerScaleOutThresholdFrequency/triggerScaleInThresholdFrequency. P.S. Scale out action has higher priority than scale in action.\n+   * Finaly, if scaleOutThreshold/scaleInThreshold is higher than triggerScaleOutThresholdFrequency/triggerScaleInThresholdFrequency, scale out/in action would be triggered.\n+   *\n+   * @param lags the lag metrics of Stream(Kafka/Kinesis)\n+   * @return Integer. target number of tasksCount, -1 means skip scale action.\n+   */\n+  private Integer computeDesiredTaskCount(List<Long> lags)\n+  {\n+    // if supervisor is not suspended, ensure required tasks are running\n+    // if suspended, ensure tasks have been requested to gracefully stop\n+    log.debug(\"Computing desired task count for [%s], based on following lags : [%s]\", dataSource, lags);\n+    int beyond = 0;\n+    int within = 0;\n+    int metricsCount = lags.size();\n+    for (Long lag : lags) {\n+      if (lag >= lagBasedAutoScalerConfig.getScaleOutThreshold()) {\n+        beyond++;\n+      }\n+      if (lag <= lagBasedAutoScalerConfig.getScaleInThreshold()) {\n+        within++;\n+      }\n+    }\n+    double beyondProportion = beyond * 1.0 / metricsCount;\n+    double withinProportion = within * 1.0 / metricsCount;\n+\n+    log.debug(\"Calculated beyondProportion is [%s] and withinProportion is [%s] for dataSource [%s].\", beyondProportion,\n+        withinProportion, dataSource\n+    );\n+\n+    int currentActiveTaskCount = supervisor.getActiveTaskGroupsCount();\n+    if (currentActiveTaskCount < 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6334e2ba0ddf48ddfd884fcdfe9361cee1431e6b"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTMyNTk1MA==", "bodyText": "Thanks && removed.", "url": "https://github.com/apache/druid/pull/10524#discussion_r585325950", "createdAt": "2021-03-02T07:40:27Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/LagBasedAutoScaler.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.seekablestream.supervisor.autoscaler;\n+\n+import org.apache.commons.collections4.queue.CircularFifoQueue;\n+import org.apache.druid.indexing.overlord.supervisor.SupervisorSpec;\n+import org.apache.druid.indexing.overlord.supervisor.autoscaler.LagStats;\n+import org.apache.druid.indexing.overlord.supervisor.autoscaler.SupervisorTaskAutoScaler;\n+import org.apache.druid.indexing.seekablestream.supervisor.SeekableStreamSupervisor;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.concurrent.Execs;\n+import org.apache.druid.java.util.emitter.EmittingLogger;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+public class LagBasedAutoScaler implements SupervisorTaskAutoScaler\n+{\n+  private static final EmittingLogger log = new EmittingLogger(LagBasedAutoScaler.class);\n+  private final String dataSource;\n+  private final CircularFifoQueue<Long> lagMetricsQueue;\n+  private final ScheduledExecutorService lagComputationExec;\n+  private final ScheduledExecutorService allocationExec;\n+  private final SupervisorSpec spec;\n+  private final SeekableStreamSupervisor supervisor;\n+  private final LagBasedAutoScalerConfig lagBasedAutoScalerConfig;\n+\n+  private static final ReentrantLock LOCK = new ReentrantLock(true);\n+\n+  public LagBasedAutoScaler(SeekableStreamSupervisor supervisor, String dataSource,\n+      LagBasedAutoScalerConfig autoScalerConfig, SupervisorSpec spec\n+  )\n+  {\n+    this.lagBasedAutoScalerConfig = autoScalerConfig;\n+    final String supervisorId = StringUtils.format(\"Supervisor-%s\", dataSource);\n+    this.dataSource = dataSource;\n+    final int slots = (int) (lagBasedAutoScalerConfig.getLagCollectionRangeMillis() / lagBasedAutoScalerConfig\n+        .getLagCollectionIntervalMillis()) + 1;\n+    this.lagMetricsQueue = new CircularFifoQueue<>(slots);\n+    this.allocationExec = Execs.scheduledSingleThreaded(StringUtils.encodeForFormat(supervisorId) + \"-Allocation-%d\");\n+    this.lagComputationExec = Execs.scheduledSingleThreaded(StringUtils.encodeForFormat(supervisorId) + \"-Computation-%d\");\n+    this.spec = spec;\n+    this.supervisor = supervisor;\n+  }\n+\n+  @Override\n+  public void start()\n+  {\n+    Callable<Integer> scaleAction = () -> {\n+      LOCK.lock();\n+      int desiredTaskCount = -1;\n+      try {\n+        desiredTaskCount = computeDesiredTaskCount(new ArrayList<>(lagMetricsQueue));\n+\n+        if (desiredTaskCount != -1) {\n+          lagMetricsQueue.clear();\n+        }\n+      }\n+      catch (Exception ex) {\n+        log.warn(ex, \"Exception while computing desired task count for [%s]\", dataSource);\n+      }\n+      finally {\n+        LOCK.unlock();\n+      }\n+      return desiredTaskCount;\n+    };\n+\n+    lagComputationExec.scheduleAtFixedRate(\n+        computeAndCollectLag(),\n+        lagBasedAutoScalerConfig.getScaleActionStartDelayMillis(), // wait for tasks to start up\n+        lagBasedAutoScalerConfig.getLagCollectionIntervalMillis(),\n+        TimeUnit.MILLISECONDS\n+    );\n+    allocationExec.scheduleAtFixedRate(\n+        supervisor.buildDynamicAllocationTask(scaleAction),\n+        lagBasedAutoScalerConfig.getScaleActionStartDelayMillis() + lagBasedAutoScalerConfig\n+            .getLagCollectionRangeMillis(),\n+        lagBasedAutoScalerConfig.getScaleActionPeriodMillis(),\n+        TimeUnit.MILLISECONDS\n+    );\n+    log.info(\n+        \"LagBasedAutoScaler will collect lag every [%d] millis and will keep [%d] data points for the last [%d] millis for dataSource [%s]\",\n+        lagBasedAutoScalerConfig.getLagCollectionIntervalMillis(), lagMetricsQueue.size(),\n+        lagBasedAutoScalerConfig.getLagCollectionRangeMillis(), dataSource\n+    );\n+  }\n+\n+  @Override\n+  public void stop()\n+  {\n+    allocationExec.shutdownNow();\n+    lagComputationExec.shutdownNow();\n+  }\n+\n+  @Override\n+  public void reset()\n+  {\n+    // clear queue for kafka lags\n+    if (lagMetricsQueue != null) {\n+      try {\n+        LOCK.lock();\n+        lagMetricsQueue.clear();\n+      }\n+      catch (Exception e) {\n+        log.warn(e, \"Error,when clear queue in rest action\");\n+      }\n+      finally {\n+        LOCK.unlock();\n+      }\n+    }\n+  }\n+\n+  /**\n+   * This method computes current consumer lag. Gets the total lag of all partitions and fill in the lagMetricsQueue\n+   *\n+   * @return a Runnbale object to compute and collect lag.\n+   */\n+  private Runnable computeAndCollectLag()\n+  {\n+    return () -> {\n+      LOCK.lock();\n+      try {\n+        if (!spec.isSuspended()) {\n+          LagStats lagStats = supervisor.computeLagStats();\n+          if (lagStats == null) {\n+            lagMetricsQueue.offer(0L);\n+          } else {\n+            long totalLags = lagStats.getTotalLag();\n+            lagMetricsQueue.offer(totalLags > 0 ? totalLags : 0L);\n+          }\n+          log.debug(\"Current lags [%s] for dataSource [%s].\", new ArrayList<>(lagMetricsQueue), dataSource);\n+        } else {\n+          log.warn(\"[%s] supervisor is suspended, skipping lag collection\", dataSource);\n+        }\n+      }\n+      catch (Exception e) {\n+        log.error(e, \"Error while collecting lags\");\n+      }\n+      finally {\n+        LOCK.unlock();\n+      }\n+    };\n+  }\n+\n+  /**\n+   * This method determines whether to do scale actions based on collected lag points.\n+   * Current algorithm of scale is simple:\n+   * First of all, compute the proportion of lag points higher/lower than scaleOutThreshold/scaleInThreshold, getting scaleOutThreshold/scaleInThreshold.\n+   * Secondly, compare scaleOutThreshold/scaleInThreshold with triggerScaleOutThresholdFrequency/triggerScaleInThresholdFrequency. P.S. Scale out action has higher priority than scale in action.\n+   * Finaly, if scaleOutThreshold/scaleInThreshold is higher than triggerScaleOutThresholdFrequency/triggerScaleInThresholdFrequency, scale out/in action would be triggered.\n+   *\n+   * @param lags the lag metrics of Stream(Kafka/Kinesis)\n+   * @return Integer. target number of tasksCount, -1 means skip scale action.\n+   */\n+  private Integer computeDesiredTaskCount(List<Long> lags)\n+  {\n+    // if supervisor is not suspended, ensure required tasks are running\n+    // if suspended, ensure tasks have been requested to gracefully stop\n+    log.debug(\"Computing desired task count for [%s], based on following lags : [%s]\", dataSource, lags);\n+    int beyond = 0;\n+    int within = 0;\n+    int metricsCount = lags.size();\n+    for (Long lag : lags) {\n+      if (lag >= lagBasedAutoScalerConfig.getScaleOutThreshold()) {\n+        beyond++;\n+      }\n+      if (lag <= lagBasedAutoScalerConfig.getScaleInThreshold()) {\n+        within++;\n+      }\n+    }\n+    double beyondProportion = beyond * 1.0 / metricsCount;\n+    double withinProportion = within * 1.0 / metricsCount;\n+\n+    log.debug(\"Calculated beyondProportion is [%s] and withinProportion is [%s] for dataSource [%s].\", beyondProportion,\n+        withinProportion, dataSource\n+    );\n+\n+    int currentActiveTaskCount = supervisor.getActiveTaskGroupsCount();\n+    if (currentActiveTaskCount < 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTE2MzU3MA=="}, "originalCommit": {"oid": "6334e2ba0ddf48ddfd884fcdfe9361cee1431e6b"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY5MjI3OTU5OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQwMDo1OToxN1rOIuDw5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQwNzo0MDozNVrOIuNdwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTE2NzA3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private boolean changeTaskCount(Integer desiredActiveTaskCount) throws InterruptedException, ExecutionException, TimeoutException\n          \n          \n            \n              private boolean changeTaskCount(int desiredActiveTaskCount) throws InterruptedException, ExecutionException, TimeoutException", "url": "https://github.com/apache/druid/pull/10524#discussion_r585167079", "createdAt": "2021-03-02T00:59:17Z", "author": {"login": "himanshug"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -318,6 +323,127 @@ public void handle()\n     }\n   }\n \n+  // change taskCount without resubmitting.\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    Callable<Integer> scaleAction;\n+\n+    DynamicAllocationTasksNotice(Callable<Integer> scaleAction)\n+    {\n+      this.scaleAction = scaleAction;\n+    }\n+\n+    /**\n+     * This method will do lag points collection and check dynamic scale action is necessary or not.\n+     */\n+    @Override\n+    public void handle()\n+    {\n+      if (autoScalerConfig == null) {\n+        log.warn(\"autoScalerConfig is null but dynamic allocation notice is submitted, how can it be ?\");\n+      } else {\n+        try {\n+          long nowTime = System.currentTimeMillis();\n+          if (spec.isSuspended()) {\n+            log.info(\"Skipping DynamicAllocationTasksNotice execution because [%s] supervisor is suspended\",\n+                    dataSource\n+            );\n+            return;\n+          }\n+          log.debug(\"PendingCompletionTaskGroups is [%s] for dataSource [%s]\", pendingCompletionTaskGroups,\n+                  dataSource\n+          );\n+          for (CopyOnWriteArrayList<TaskGroup> list : pendingCompletionTaskGroups.values()) {\n+            if (!list.isEmpty()) {\n+              log.info(\n+                      \"Skipping DynamicAllocationTasksNotice execution for datasource [%s] because following tasks are pending [%s]\",\n+                      dataSource, pendingCompletionTaskGroups\n+              );\n+              return;\n+            }\n+          }\n+          if (nowTime - dynamicTriggerLastRunTime < autoScalerConfig.getMinTriggerScaleActionFrequencyMillis()) {\n+            log.info(\n+                    \"DynamicAllocationTasksNotice submitted again in [%d] millis, minTriggerDynamicFrequency is [%s] for dataSource [%s], skipping it!\",\n+                    nowTime - dynamicTriggerLastRunTime, autoScalerConfig.getMinTriggerScaleActionFrequencyMillis(), dataSource\n+            );\n+            return;\n+          }\n+          final Integer desriedTaskCount = scaleAction.call();\n+          boolean allocationSuccess = changeTaskCount(desriedTaskCount);\n+          if (allocationSuccess) {\n+            dynamicTriggerLastRunTime = nowTime;\n+          }\n+        }\n+        catch (Exception ex) {\n+          log.warn(ex, \"Error parsing DynamicAllocationTasksNotice\");\n+        }\n+      }\n+    }\n+  }\n+\n+  /**\n+   * This method determines how to do scale actions based on collected lag points.\n+   * If scale action is triggered :\n+   *    First of all, call gracefulShutdownInternal() which will change the state of current datasource ingest tasks from reading to publishing.\n+   *    Secondly, clear all the stateful data structures: activelyReadingTaskGroups, partitionGroups, partitionOffsets, pendingCompletionTaskGroups, partitionIds. These structures will be rebuiled in the next 'RunNotice'.\n+   *    Finally, change the taskCount in SeekableStreamSupervisorIOConfig and sync it to MetadataStorage.\n+   * After the taskCount is changed in SeekableStreamSupervisorIOConfig, next RunNotice will create scaled number of ingest tasks without resubmitting the supervisor.\n+   * @param desiredActiveTaskCount desired taskCount computed from AutoScaler\n+   * @return Boolean flag indicating if scale action was executed or not. If true, it will wait at least 'minTriggerScaleActionFrequencyMillis' before next 'changeTaskCount'.\n+   *         If false, it will do 'changeTaskCount' again after 'scaleActionPeriodMillis' millis.\n+   * @throws InterruptedException\n+   * @throws ExecutionException\n+   * @throws TimeoutException\n+   */\n+  private boolean changeTaskCount(Integer desiredActiveTaskCount) throws InterruptedException, ExecutionException, TimeoutException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6334e2ba0ddf48ddfd884fcdfe9361cee1431e6b"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTMyNjAxNw==", "bodyText": "changed.", "url": "https://github.com/apache/druid/pull/10524#discussion_r585326017", "createdAt": "2021-03-02T07:40:35Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -318,6 +323,127 @@ public void handle()\n     }\n   }\n \n+  // change taskCount without resubmitting.\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    Callable<Integer> scaleAction;\n+\n+    DynamicAllocationTasksNotice(Callable<Integer> scaleAction)\n+    {\n+      this.scaleAction = scaleAction;\n+    }\n+\n+    /**\n+     * This method will do lag points collection and check dynamic scale action is necessary or not.\n+     */\n+    @Override\n+    public void handle()\n+    {\n+      if (autoScalerConfig == null) {\n+        log.warn(\"autoScalerConfig is null but dynamic allocation notice is submitted, how can it be ?\");\n+      } else {\n+        try {\n+          long nowTime = System.currentTimeMillis();\n+          if (spec.isSuspended()) {\n+            log.info(\"Skipping DynamicAllocationTasksNotice execution because [%s] supervisor is suspended\",\n+                    dataSource\n+            );\n+            return;\n+          }\n+          log.debug(\"PendingCompletionTaskGroups is [%s] for dataSource [%s]\", pendingCompletionTaskGroups,\n+                  dataSource\n+          );\n+          for (CopyOnWriteArrayList<TaskGroup> list : pendingCompletionTaskGroups.values()) {\n+            if (!list.isEmpty()) {\n+              log.info(\n+                      \"Skipping DynamicAllocationTasksNotice execution for datasource [%s] because following tasks are pending [%s]\",\n+                      dataSource, pendingCompletionTaskGroups\n+              );\n+              return;\n+            }\n+          }\n+          if (nowTime - dynamicTriggerLastRunTime < autoScalerConfig.getMinTriggerScaleActionFrequencyMillis()) {\n+            log.info(\n+                    \"DynamicAllocationTasksNotice submitted again in [%d] millis, minTriggerDynamicFrequency is [%s] for dataSource [%s], skipping it!\",\n+                    nowTime - dynamicTriggerLastRunTime, autoScalerConfig.getMinTriggerScaleActionFrequencyMillis(), dataSource\n+            );\n+            return;\n+          }\n+          final Integer desriedTaskCount = scaleAction.call();\n+          boolean allocationSuccess = changeTaskCount(desriedTaskCount);\n+          if (allocationSuccess) {\n+            dynamicTriggerLastRunTime = nowTime;\n+          }\n+        }\n+        catch (Exception ex) {\n+          log.warn(ex, \"Error parsing DynamicAllocationTasksNotice\");\n+        }\n+      }\n+    }\n+  }\n+\n+  /**\n+   * This method determines how to do scale actions based on collected lag points.\n+   * If scale action is triggered :\n+   *    First of all, call gracefulShutdownInternal() which will change the state of current datasource ingest tasks from reading to publishing.\n+   *    Secondly, clear all the stateful data structures: activelyReadingTaskGroups, partitionGroups, partitionOffsets, pendingCompletionTaskGroups, partitionIds. These structures will be rebuiled in the next 'RunNotice'.\n+   *    Finally, change the taskCount in SeekableStreamSupervisorIOConfig and sync it to MetadataStorage.\n+   * After the taskCount is changed in SeekableStreamSupervisorIOConfig, next RunNotice will create scaled number of ingest tasks without resubmitting the supervisor.\n+   * @param desiredActiveTaskCount desired taskCount computed from AutoScaler\n+   * @return Boolean flag indicating if scale action was executed or not. If true, it will wait at least 'minTriggerScaleActionFrequencyMillis' before next 'changeTaskCount'.\n+   *         If false, it will do 'changeTaskCount' again after 'scaleActionPeriodMillis' millis.\n+   * @throws InterruptedException\n+   * @throws ExecutionException\n+   * @throws TimeoutException\n+   */\n+  private boolean changeTaskCount(Integer desiredActiveTaskCount) throws InterruptedException, ExecutionException, TimeoutException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTE2NzA3OQ=="}, "originalCommit": {"oid": "6334e2ba0ddf48ddfd884fcdfe9361cee1431e6b"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY5MjI4MTAzOnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQwMDo1OTo0MFrOIuDxpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQwNzo1Mjo0MVrOIuN2ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTE2NzI3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (desiredActiveTaskCount == -1 || desiredActiveTaskCount == currentActiveTaskCount) {\n          \n          \n            \n                if (desiredActiveTaskCount < 0 || desiredActiveTaskCount == currentActiveTaskCount) {", "url": "https://github.com/apache/druid/pull/10524#discussion_r585167271", "createdAt": "2021-03-02T00:59:40Z", "author": {"login": "himanshug"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -318,6 +323,127 @@ public void handle()\n     }\n   }\n \n+  // change taskCount without resubmitting.\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    Callable<Integer> scaleAction;\n+\n+    DynamicAllocationTasksNotice(Callable<Integer> scaleAction)\n+    {\n+      this.scaleAction = scaleAction;\n+    }\n+\n+    /**\n+     * This method will do lag points collection and check dynamic scale action is necessary or not.\n+     */\n+    @Override\n+    public void handle()\n+    {\n+      if (autoScalerConfig == null) {\n+        log.warn(\"autoScalerConfig is null but dynamic allocation notice is submitted, how can it be ?\");\n+      } else {\n+        try {\n+          long nowTime = System.currentTimeMillis();\n+          if (spec.isSuspended()) {\n+            log.info(\"Skipping DynamicAllocationTasksNotice execution because [%s] supervisor is suspended\",\n+                    dataSource\n+            );\n+            return;\n+          }\n+          log.debug(\"PendingCompletionTaskGroups is [%s] for dataSource [%s]\", pendingCompletionTaskGroups,\n+                  dataSource\n+          );\n+          for (CopyOnWriteArrayList<TaskGroup> list : pendingCompletionTaskGroups.values()) {\n+            if (!list.isEmpty()) {\n+              log.info(\n+                      \"Skipping DynamicAllocationTasksNotice execution for datasource [%s] because following tasks are pending [%s]\",\n+                      dataSource, pendingCompletionTaskGroups\n+              );\n+              return;\n+            }\n+          }\n+          if (nowTime - dynamicTriggerLastRunTime < autoScalerConfig.getMinTriggerScaleActionFrequencyMillis()) {\n+            log.info(\n+                    \"DynamicAllocationTasksNotice submitted again in [%d] millis, minTriggerDynamicFrequency is [%s] for dataSource [%s], skipping it!\",\n+                    nowTime - dynamicTriggerLastRunTime, autoScalerConfig.getMinTriggerScaleActionFrequencyMillis(), dataSource\n+            );\n+            return;\n+          }\n+          final Integer desriedTaskCount = scaleAction.call();\n+          boolean allocationSuccess = changeTaskCount(desriedTaskCount);\n+          if (allocationSuccess) {\n+            dynamicTriggerLastRunTime = nowTime;\n+          }\n+        }\n+        catch (Exception ex) {\n+          log.warn(ex, \"Error parsing DynamicAllocationTasksNotice\");\n+        }\n+      }\n+    }\n+  }\n+\n+  /**\n+   * This method determines how to do scale actions based on collected lag points.\n+   * If scale action is triggered :\n+   *    First of all, call gracefulShutdownInternal() which will change the state of current datasource ingest tasks from reading to publishing.\n+   *    Secondly, clear all the stateful data structures: activelyReadingTaskGroups, partitionGroups, partitionOffsets, pendingCompletionTaskGroups, partitionIds. These structures will be rebuiled in the next 'RunNotice'.\n+   *    Finally, change the taskCount in SeekableStreamSupervisorIOConfig and sync it to MetadataStorage.\n+   * After the taskCount is changed in SeekableStreamSupervisorIOConfig, next RunNotice will create scaled number of ingest tasks without resubmitting the supervisor.\n+   * @param desiredActiveTaskCount desired taskCount computed from AutoScaler\n+   * @return Boolean flag indicating if scale action was executed or not. If true, it will wait at least 'minTriggerScaleActionFrequencyMillis' before next 'changeTaskCount'.\n+   *         If false, it will do 'changeTaskCount' again after 'scaleActionPeriodMillis' millis.\n+   * @throws InterruptedException\n+   * @throws ExecutionException\n+   * @throws TimeoutException\n+   */\n+  private boolean changeTaskCount(Integer desiredActiveTaskCount) throws InterruptedException, ExecutionException, TimeoutException\n+  {\n+    int currentActiveTaskCount;\n+    Collection<TaskGroup> activeTaskGroups = activelyReadingTaskGroups.values();\n+    currentActiveTaskCount = activeTaskGroups.size();\n+\n+    if (desiredActiveTaskCount == -1 || desiredActiveTaskCount == currentActiveTaskCount) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6334e2ba0ddf48ddfd884fcdfe9361cee1431e6b"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTMzMjM4Mg==", "bodyText": "Thanks && changed.", "url": "https://github.com/apache/druid/pull/10524#discussion_r585332382", "createdAt": "2021-03-02T07:52:41Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -318,6 +323,127 @@ public void handle()\n     }\n   }\n \n+  // change taskCount without resubmitting.\n+  private class DynamicAllocationTasksNotice implements Notice\n+  {\n+    Callable<Integer> scaleAction;\n+\n+    DynamicAllocationTasksNotice(Callable<Integer> scaleAction)\n+    {\n+      this.scaleAction = scaleAction;\n+    }\n+\n+    /**\n+     * This method will do lag points collection and check dynamic scale action is necessary or not.\n+     */\n+    @Override\n+    public void handle()\n+    {\n+      if (autoScalerConfig == null) {\n+        log.warn(\"autoScalerConfig is null but dynamic allocation notice is submitted, how can it be ?\");\n+      } else {\n+        try {\n+          long nowTime = System.currentTimeMillis();\n+          if (spec.isSuspended()) {\n+            log.info(\"Skipping DynamicAllocationTasksNotice execution because [%s] supervisor is suspended\",\n+                    dataSource\n+            );\n+            return;\n+          }\n+          log.debug(\"PendingCompletionTaskGroups is [%s] for dataSource [%s]\", pendingCompletionTaskGroups,\n+                  dataSource\n+          );\n+          for (CopyOnWriteArrayList<TaskGroup> list : pendingCompletionTaskGroups.values()) {\n+            if (!list.isEmpty()) {\n+              log.info(\n+                      \"Skipping DynamicAllocationTasksNotice execution for datasource [%s] because following tasks are pending [%s]\",\n+                      dataSource, pendingCompletionTaskGroups\n+              );\n+              return;\n+            }\n+          }\n+          if (nowTime - dynamicTriggerLastRunTime < autoScalerConfig.getMinTriggerScaleActionFrequencyMillis()) {\n+            log.info(\n+                    \"DynamicAllocationTasksNotice submitted again in [%d] millis, minTriggerDynamicFrequency is [%s] for dataSource [%s], skipping it!\",\n+                    nowTime - dynamicTriggerLastRunTime, autoScalerConfig.getMinTriggerScaleActionFrequencyMillis(), dataSource\n+            );\n+            return;\n+          }\n+          final Integer desriedTaskCount = scaleAction.call();\n+          boolean allocationSuccess = changeTaskCount(desriedTaskCount);\n+          if (allocationSuccess) {\n+            dynamicTriggerLastRunTime = nowTime;\n+          }\n+        }\n+        catch (Exception ex) {\n+          log.warn(ex, \"Error parsing DynamicAllocationTasksNotice\");\n+        }\n+      }\n+    }\n+  }\n+\n+  /**\n+   * This method determines how to do scale actions based on collected lag points.\n+   * If scale action is triggered :\n+   *    First of all, call gracefulShutdownInternal() which will change the state of current datasource ingest tasks from reading to publishing.\n+   *    Secondly, clear all the stateful data structures: activelyReadingTaskGroups, partitionGroups, partitionOffsets, pendingCompletionTaskGroups, partitionIds. These structures will be rebuiled in the next 'RunNotice'.\n+   *    Finally, change the taskCount in SeekableStreamSupervisorIOConfig and sync it to MetadataStorage.\n+   * After the taskCount is changed in SeekableStreamSupervisorIOConfig, next RunNotice will create scaled number of ingest tasks without resubmitting the supervisor.\n+   * @param desiredActiveTaskCount desired taskCount computed from AutoScaler\n+   * @return Boolean flag indicating if scale action was executed or not. If true, it will wait at least 'minTriggerScaleActionFrequencyMillis' before next 'changeTaskCount'.\n+   *         If false, it will do 'changeTaskCount' again after 'scaleActionPeriodMillis' millis.\n+   * @throws InterruptedException\n+   * @throws ExecutionException\n+   * @throws TimeoutException\n+   */\n+  private boolean changeTaskCount(Integer desiredActiveTaskCount) throws InterruptedException, ExecutionException, TimeoutException\n+  {\n+    int currentActiveTaskCount;\n+    Collection<TaskGroup> activeTaskGroups = activelyReadingTaskGroups.values();\n+    currentActiveTaskCount = activeTaskGroups.size();\n+\n+    if (desiredActiveTaskCount == -1 || desiredActiveTaskCount == currentActiveTaskCount) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTE2NzI3MQ=="}, "originalCommit": {"oid": "6334e2ba0ddf48ddfd884fcdfe9361cee1431e6b"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY5MjI5MjIwOnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/LagBasedAutoScaler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQwMTowMzo1MFrOIuD4Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQwNzo0MDo0MVrOIuNd_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTE2ODk0Ng==", "bodyText": "not sure why lagCollectionRangeMillis was added to scaleActionStartDelayMillis .", "url": "https://github.com/apache/druid/pull/10524#discussion_r585168946", "createdAt": "2021-03-02T01:03:50Z", "author": {"login": "himanshug"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/LagBasedAutoScaler.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.seekablestream.supervisor.autoscaler;\n+\n+import org.apache.commons.collections4.queue.CircularFifoQueue;\n+import org.apache.druid.indexing.overlord.supervisor.SupervisorSpec;\n+import org.apache.druid.indexing.overlord.supervisor.autoscaler.LagStats;\n+import org.apache.druid.indexing.overlord.supervisor.autoscaler.SupervisorTaskAutoScaler;\n+import org.apache.druid.indexing.seekablestream.supervisor.SeekableStreamSupervisor;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.concurrent.Execs;\n+import org.apache.druid.java.util.emitter.EmittingLogger;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+public class LagBasedAutoScaler implements SupervisorTaskAutoScaler\n+{\n+  private static final EmittingLogger log = new EmittingLogger(LagBasedAutoScaler.class);\n+  private final String dataSource;\n+  private final CircularFifoQueue<Long> lagMetricsQueue;\n+  private final ScheduledExecutorService lagComputationExec;\n+  private final ScheduledExecutorService allocationExec;\n+  private final SupervisorSpec spec;\n+  private final SeekableStreamSupervisor supervisor;\n+  private final LagBasedAutoScalerConfig lagBasedAutoScalerConfig;\n+\n+  private static final ReentrantLock LOCK = new ReentrantLock(true);\n+\n+  public LagBasedAutoScaler(SeekableStreamSupervisor supervisor, String dataSource,\n+      LagBasedAutoScalerConfig autoScalerConfig, SupervisorSpec spec\n+  )\n+  {\n+    this.lagBasedAutoScalerConfig = autoScalerConfig;\n+    final String supervisorId = StringUtils.format(\"Supervisor-%s\", dataSource);\n+    this.dataSource = dataSource;\n+    final int slots = (int) (lagBasedAutoScalerConfig.getLagCollectionRangeMillis() / lagBasedAutoScalerConfig\n+        .getLagCollectionIntervalMillis()) + 1;\n+    this.lagMetricsQueue = new CircularFifoQueue<>(slots);\n+    this.allocationExec = Execs.scheduledSingleThreaded(StringUtils.encodeForFormat(supervisorId) + \"-Allocation-%d\");\n+    this.lagComputationExec = Execs.scheduledSingleThreaded(StringUtils.encodeForFormat(supervisorId) + \"-Computation-%d\");\n+    this.spec = spec;\n+    this.supervisor = supervisor;\n+  }\n+\n+  @Override\n+  public void start()\n+  {\n+    Callable<Integer> scaleAction = () -> {\n+      LOCK.lock();\n+      int desiredTaskCount = -1;\n+      try {\n+        desiredTaskCount = computeDesiredTaskCount(new ArrayList<>(lagMetricsQueue));\n+\n+        if (desiredTaskCount != -1) {\n+          lagMetricsQueue.clear();\n+        }\n+      }\n+      catch (Exception ex) {\n+        log.warn(ex, \"Exception while computing desired task count for [%s]\", dataSource);\n+      }\n+      finally {\n+        LOCK.unlock();\n+      }\n+      return desiredTaskCount;\n+    };\n+\n+    lagComputationExec.scheduleAtFixedRate(\n+        computeAndCollectLag(),\n+        lagBasedAutoScalerConfig.getScaleActionStartDelayMillis(), // wait for tasks to start up\n+        lagBasedAutoScalerConfig.getLagCollectionIntervalMillis(),\n+        TimeUnit.MILLISECONDS\n+    );\n+    allocationExec.scheduleAtFixedRate(\n+        supervisor.buildDynamicAllocationTask(scaleAction),\n+        lagBasedAutoScalerConfig.getScaleActionStartDelayMillis() + lagBasedAutoScalerConfig\n+            .getLagCollectionRangeMillis(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6334e2ba0ddf48ddfd884fcdfe9361cee1431e6b"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTMyNjA3OQ==", "bodyText": "When scaleActionStartDelayMillis meets, lagComputationExec start to work to collect metrics. And allocationExec need to wait for another lagCollectionRangeMillis which means wait for lagComputationExec to collect enough lag metrics.", "url": "https://github.com/apache/druid/pull/10524#discussion_r585326079", "createdAt": "2021-03-02T07:40:41Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/autoscaler/LagBasedAutoScaler.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.seekablestream.supervisor.autoscaler;\n+\n+import org.apache.commons.collections4.queue.CircularFifoQueue;\n+import org.apache.druid.indexing.overlord.supervisor.SupervisorSpec;\n+import org.apache.druid.indexing.overlord.supervisor.autoscaler.LagStats;\n+import org.apache.druid.indexing.overlord.supervisor.autoscaler.SupervisorTaskAutoScaler;\n+import org.apache.druid.indexing.seekablestream.supervisor.SeekableStreamSupervisor;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.concurrent.Execs;\n+import org.apache.druid.java.util.emitter.EmittingLogger;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+public class LagBasedAutoScaler implements SupervisorTaskAutoScaler\n+{\n+  private static final EmittingLogger log = new EmittingLogger(LagBasedAutoScaler.class);\n+  private final String dataSource;\n+  private final CircularFifoQueue<Long> lagMetricsQueue;\n+  private final ScheduledExecutorService lagComputationExec;\n+  private final ScheduledExecutorService allocationExec;\n+  private final SupervisorSpec spec;\n+  private final SeekableStreamSupervisor supervisor;\n+  private final LagBasedAutoScalerConfig lagBasedAutoScalerConfig;\n+\n+  private static final ReentrantLock LOCK = new ReentrantLock(true);\n+\n+  public LagBasedAutoScaler(SeekableStreamSupervisor supervisor, String dataSource,\n+      LagBasedAutoScalerConfig autoScalerConfig, SupervisorSpec spec\n+  )\n+  {\n+    this.lagBasedAutoScalerConfig = autoScalerConfig;\n+    final String supervisorId = StringUtils.format(\"Supervisor-%s\", dataSource);\n+    this.dataSource = dataSource;\n+    final int slots = (int) (lagBasedAutoScalerConfig.getLagCollectionRangeMillis() / lagBasedAutoScalerConfig\n+        .getLagCollectionIntervalMillis()) + 1;\n+    this.lagMetricsQueue = new CircularFifoQueue<>(slots);\n+    this.allocationExec = Execs.scheduledSingleThreaded(StringUtils.encodeForFormat(supervisorId) + \"-Allocation-%d\");\n+    this.lagComputationExec = Execs.scheduledSingleThreaded(StringUtils.encodeForFormat(supervisorId) + \"-Computation-%d\");\n+    this.spec = spec;\n+    this.supervisor = supervisor;\n+  }\n+\n+  @Override\n+  public void start()\n+  {\n+    Callable<Integer> scaleAction = () -> {\n+      LOCK.lock();\n+      int desiredTaskCount = -1;\n+      try {\n+        desiredTaskCount = computeDesiredTaskCount(new ArrayList<>(lagMetricsQueue));\n+\n+        if (desiredTaskCount != -1) {\n+          lagMetricsQueue.clear();\n+        }\n+      }\n+      catch (Exception ex) {\n+        log.warn(ex, \"Exception while computing desired task count for [%s]\", dataSource);\n+      }\n+      finally {\n+        LOCK.unlock();\n+      }\n+      return desiredTaskCount;\n+    };\n+\n+    lagComputationExec.scheduleAtFixedRate(\n+        computeAndCollectLag(),\n+        lagBasedAutoScalerConfig.getScaleActionStartDelayMillis(), // wait for tasks to start up\n+        lagBasedAutoScalerConfig.getLagCollectionIntervalMillis(),\n+        TimeUnit.MILLISECONDS\n+    );\n+    allocationExec.scheduleAtFixedRate(\n+        supervisor.buildDynamicAllocationTask(scaleAction),\n+        lagBasedAutoScalerConfig.getScaleActionStartDelayMillis() + lagBasedAutoScalerConfig\n+            .getLagCollectionRangeMillis(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTE2ODk0Ng=="}, "originalCommit": {"oid": "6334e2ba0ddf48ddfd884fcdfe9361cee1431e6b"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY5MjMxMDk2OnYy", "diffSide": "RIGHT", "path": "docs/development/extensions-core/kafka-ingestion.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQwMToxMDowNlrOIuEDwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQwNzo1MjowMlrOIuN1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTE3MTkwNA==", "bodyText": "wouldn't time interval between two scale actions be always greater/equal to scaleActionPeriodMillis ?", "url": "https://github.com/apache/druid/pull/10524#discussion_r585171904", "createdAt": "2021-03-02T01:10:06Z", "author": {"login": "himanshug"}, "path": "docs/development/extensions-core/kafka-ingestion.md", "diffHunk": "@@ -146,6 +146,26 @@ A sample supervisor spec is shown below:\n |`lateMessageRejectionStartDateTime`|ISO8601 DateTime|Configure tasks to reject messages with timestamps earlier than this date time; for example if this is set to `2016-01-01T11:00Z` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps earlier than *2016-01-01T11:00Z* will be dropped. This may help prevent concurrency issues if your data stream has late messages and you have multiple pipelines that need to operate on the same segments (e.g. a realtime and a nightly batch ingestion pipeline).|no (default == none)|\n |`lateMessageRejectionPeriod`|ISO8601 Period|Configure tasks to reject messages with timestamps earlier than this period before the task was created; for example if this is set to `PT1H` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps earlier than *2016-01-01T11:00Z* will be dropped. This may help prevent concurrency issues if your data stream has late messages and you have multiple pipelines that need to operate on the same segments (e.g. a realtime and a nightly batch ingestion pipeline). Please note that only one of `lateMessageRejectionPeriod` or `lateMessageRejectionStartDateTime` can be specified.|no (default == none)|\n |`earlyMessageRejectionPeriod`|ISO8601 Period|Configure tasks to reject messages with timestamps later than this period after the task reached its taskDuration; for example if this is set to `PT1H`, the taskDuration is set to `PT1H` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps later than *2016-01-01T14:00Z* will be dropped. **Note:** Tasks sometimes run past their task duration, for example, in cases of supervisor failover. Setting earlyMessageRejectionPeriod too low may cause messages to be dropped unexpectedly whenever a task runs past its originally configured task duration.|no (default == none)|\n+|`autoScalerConfig`|Object|`autoScalerConfig` to specify how to auto scale the number of Kafka ingest tasks based on Lag metrics. ONLY supported for Kafka indexing as of now. See [Tasks Autoscaler Properties](#Task Autoscaler Properties) for details.|no (default == null)|\n+\n+### Task Autoscaler Properties\n+| Property | Description | Required |\n+| ------------- | ------------- | ------------- |\n+| `enableTaskAutoScaler` | Whether enable this feature or not. Set false or ignored here will disable `autoScaler` even though `autoScalerConfig` is not null| no (default == false) |\n+| `lagCollectionIntervalMillis` | Define the frequency of lag points collection.  | no (default == 30000) |\n+| `lagCollectionRangeMillis` | The total time window of lag collection, Use with `lagCollectionIntervalMillis`\uff0cit means that in the recent `lagCollectionRangeMillis`, collect lag metric points every `lagCollectionIntervalMillis`. | no (default == 600000) |\n+| `scaleOutThreshold` | The Threshold of scale out action | no (default == 6000000) |\n+| `triggerScaleOutThresholdFrequency` | If `triggerScaleOutThresholdFrequency` percent of lag points are higher than `scaleOutThreshold`, then do scale out action. | no (default == 0.3) |\n+| `scaleInThreshold` | The Threshold of scale in action | no (default == 1000000) |\n+| `triggerScaleInThresholdFrequency` | If `triggerScaleInThresholdFrequency` percent of lag points are lower than `scaleOutThreshold`, then do scale in action. | no (default == 0.9) |\n+| `scaleActionStartDelayMillis` | Number of milliseconds after supervisor starts when first check scale logic. | no (default == 300000) |\n+| `scaleActionPeriodMillis` | The frequency of checking whether to do scale action in millis | no (default == 60000) |\n+| `taskCountMax` | Maximum value of task count. Make Sure `taskCountMax >= taskCountMin` | yes |\n+| `taskCountMin` | Minimum value of task count. When enable autoscaler, the value of taskCount in `IOConfig` will be ignored, and `taskCountMin` will be the number of tasks that ingestion starts going up to `taskCountMax`| yes |\n+| `scaleInStep` | How many tasks to reduce at a time | no (default == 1) |\n+| `scaleOutStep` | How many tasks to add at a time | no (default == 2) |\n+| `minTriggerScaleActionFrequencyMillis` | Minimum time interval between two scale actions | no (default == 600000) |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6334e2ba0ddf48ddfd884fcdfe9361cee1431e6b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTMzMjAyNQ==", "bodyText": "Actually, scaleActionPeriodMillis is to control the frequency of detection and minTriggerScaleActionFrequencyMillis is to set a cool-down time between two scale actions. There is no hard association between the two parameters. For example users can set scaleActionPeriodMillis == 10min and minTriggerScaleActionFrequencyMillis == 5min. It means Druid will check lags every 10mins. If triggered scale action, then could not scale again within 5 minutes.", "url": "https://github.com/apache/druid/pull/10524#discussion_r585332025", "createdAt": "2021-03-02T07:52:02Z", "author": {"login": "zhangyue19921010"}, "path": "docs/development/extensions-core/kafka-ingestion.md", "diffHunk": "@@ -146,6 +146,26 @@ A sample supervisor spec is shown below:\n |`lateMessageRejectionStartDateTime`|ISO8601 DateTime|Configure tasks to reject messages with timestamps earlier than this date time; for example if this is set to `2016-01-01T11:00Z` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps earlier than *2016-01-01T11:00Z* will be dropped. This may help prevent concurrency issues if your data stream has late messages and you have multiple pipelines that need to operate on the same segments (e.g. a realtime and a nightly batch ingestion pipeline).|no (default == none)|\n |`lateMessageRejectionPeriod`|ISO8601 Period|Configure tasks to reject messages with timestamps earlier than this period before the task was created; for example if this is set to `PT1H` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps earlier than *2016-01-01T11:00Z* will be dropped. This may help prevent concurrency issues if your data stream has late messages and you have multiple pipelines that need to operate on the same segments (e.g. a realtime and a nightly batch ingestion pipeline). Please note that only one of `lateMessageRejectionPeriod` or `lateMessageRejectionStartDateTime` can be specified.|no (default == none)|\n |`earlyMessageRejectionPeriod`|ISO8601 Period|Configure tasks to reject messages with timestamps later than this period after the task reached its taskDuration; for example if this is set to `PT1H`, the taskDuration is set to `PT1H` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps later than *2016-01-01T14:00Z* will be dropped. **Note:** Tasks sometimes run past their task duration, for example, in cases of supervisor failover. Setting earlyMessageRejectionPeriod too low may cause messages to be dropped unexpectedly whenever a task runs past its originally configured task duration.|no (default == none)|\n+|`autoScalerConfig`|Object|`autoScalerConfig` to specify how to auto scale the number of Kafka ingest tasks based on Lag metrics. ONLY supported for Kafka indexing as of now. See [Tasks Autoscaler Properties](#Task Autoscaler Properties) for details.|no (default == null)|\n+\n+### Task Autoscaler Properties\n+| Property | Description | Required |\n+| ------------- | ------------- | ------------- |\n+| `enableTaskAutoScaler` | Whether enable this feature or not. Set false or ignored here will disable `autoScaler` even though `autoScalerConfig` is not null| no (default == false) |\n+| `lagCollectionIntervalMillis` | Define the frequency of lag points collection.  | no (default == 30000) |\n+| `lagCollectionRangeMillis` | The total time window of lag collection, Use with `lagCollectionIntervalMillis`\uff0cit means that in the recent `lagCollectionRangeMillis`, collect lag metric points every `lagCollectionIntervalMillis`. | no (default == 600000) |\n+| `scaleOutThreshold` | The Threshold of scale out action | no (default == 6000000) |\n+| `triggerScaleOutThresholdFrequency` | If `triggerScaleOutThresholdFrequency` percent of lag points are higher than `scaleOutThreshold`, then do scale out action. | no (default == 0.3) |\n+| `scaleInThreshold` | The Threshold of scale in action | no (default == 1000000) |\n+| `triggerScaleInThresholdFrequency` | If `triggerScaleInThresholdFrequency` percent of lag points are lower than `scaleOutThreshold`, then do scale in action. | no (default == 0.9) |\n+| `scaleActionStartDelayMillis` | Number of milliseconds after supervisor starts when first check scale logic. | no (default == 300000) |\n+| `scaleActionPeriodMillis` | The frequency of checking whether to do scale action in millis | no (default == 60000) |\n+| `taskCountMax` | Maximum value of task count. Make Sure `taskCountMax >= taskCountMin` | yes |\n+| `taskCountMin` | Minimum value of task count. When enable autoscaler, the value of taskCount in `IOConfig` will be ignored, and `taskCountMin` will be the number of tasks that ingestion starts going up to `taskCountMax`| yes |\n+| `scaleInStep` | How many tasks to reduce at a time | no (default == 1) |\n+| `scaleOutStep` | How many tasks to add at a time | no (default == 2) |\n+| `minTriggerScaleActionFrequencyMillis` | Minimum time interval between two scale actions | no (default == 600000) |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTE3MTkwNA=="}, "originalCommit": {"oid": "6334e2ba0ddf48ddfd884fcdfe9361cee1431e6b"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY5MjMxMzYzOnYy", "diffSide": "RIGHT", "path": "docs/development/extensions-core/kafka-ingestion.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQwMToxMToyMVrOIuEFZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQwNzo1MjoyMlrOIuN2Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTE3MjMyNQ==", "bodyText": "not sure if it is a \"frequency\". maybe triggerScaleOutFractionThreshold", "url": "https://github.com/apache/druid/pull/10524#discussion_r585172325", "createdAt": "2021-03-02T01:11:21Z", "author": {"login": "himanshug"}, "path": "docs/development/extensions-core/kafka-ingestion.md", "diffHunk": "@@ -146,6 +146,26 @@ A sample supervisor spec is shown below:\n |`lateMessageRejectionStartDateTime`|ISO8601 DateTime|Configure tasks to reject messages with timestamps earlier than this date time; for example if this is set to `2016-01-01T11:00Z` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps earlier than *2016-01-01T11:00Z* will be dropped. This may help prevent concurrency issues if your data stream has late messages and you have multiple pipelines that need to operate on the same segments (e.g. a realtime and a nightly batch ingestion pipeline).|no (default == none)|\n |`lateMessageRejectionPeriod`|ISO8601 Period|Configure tasks to reject messages with timestamps earlier than this period before the task was created; for example if this is set to `PT1H` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps earlier than *2016-01-01T11:00Z* will be dropped. This may help prevent concurrency issues if your data stream has late messages and you have multiple pipelines that need to operate on the same segments (e.g. a realtime and a nightly batch ingestion pipeline). Please note that only one of `lateMessageRejectionPeriod` or `lateMessageRejectionStartDateTime` can be specified.|no (default == none)|\n |`earlyMessageRejectionPeriod`|ISO8601 Period|Configure tasks to reject messages with timestamps later than this period after the task reached its taskDuration; for example if this is set to `PT1H`, the taskDuration is set to `PT1H` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps later than *2016-01-01T14:00Z* will be dropped. **Note:** Tasks sometimes run past their task duration, for example, in cases of supervisor failover. Setting earlyMessageRejectionPeriod too low may cause messages to be dropped unexpectedly whenever a task runs past its originally configured task duration.|no (default == none)|\n+|`autoScalerConfig`|Object|`autoScalerConfig` to specify how to auto scale the number of Kafka ingest tasks based on Lag metrics. ONLY supported for Kafka indexing as of now. See [Tasks Autoscaler Properties](#Task Autoscaler Properties) for details.|no (default == null)|\n+\n+### Task Autoscaler Properties\n+| Property | Description | Required |\n+| ------------- | ------------- | ------------- |\n+| `enableTaskAutoScaler` | Whether enable this feature or not. Set false or ignored here will disable `autoScaler` even though `autoScalerConfig` is not null| no (default == false) |\n+| `lagCollectionIntervalMillis` | Define the frequency of lag points collection.  | no (default == 30000) |\n+| `lagCollectionRangeMillis` | The total time window of lag collection, Use with `lagCollectionIntervalMillis`\uff0cit means that in the recent `lagCollectionRangeMillis`, collect lag metric points every `lagCollectionIntervalMillis`. | no (default == 600000) |\n+| `scaleOutThreshold` | The Threshold of scale out action | no (default == 6000000) |\n+| `triggerScaleOutThresholdFrequency` | If `triggerScaleOutThresholdFrequency` percent of lag points are higher than `scaleOutThreshold`, then do scale out action. | no (default == 0.3) |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6334e2ba0ddf48ddfd884fcdfe9361cee1431e6b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTMzMjI1MQ==", "bodyText": "Thanks && changed.", "url": "https://github.com/apache/druid/pull/10524#discussion_r585332251", "createdAt": "2021-03-02T07:52:22Z", "author": {"login": "zhangyue19921010"}, "path": "docs/development/extensions-core/kafka-ingestion.md", "diffHunk": "@@ -146,6 +146,26 @@ A sample supervisor spec is shown below:\n |`lateMessageRejectionStartDateTime`|ISO8601 DateTime|Configure tasks to reject messages with timestamps earlier than this date time; for example if this is set to `2016-01-01T11:00Z` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps earlier than *2016-01-01T11:00Z* will be dropped. This may help prevent concurrency issues if your data stream has late messages and you have multiple pipelines that need to operate on the same segments (e.g. a realtime and a nightly batch ingestion pipeline).|no (default == none)|\n |`lateMessageRejectionPeriod`|ISO8601 Period|Configure tasks to reject messages with timestamps earlier than this period before the task was created; for example if this is set to `PT1H` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps earlier than *2016-01-01T11:00Z* will be dropped. This may help prevent concurrency issues if your data stream has late messages and you have multiple pipelines that need to operate on the same segments (e.g. a realtime and a nightly batch ingestion pipeline). Please note that only one of `lateMessageRejectionPeriod` or `lateMessageRejectionStartDateTime` can be specified.|no (default == none)|\n |`earlyMessageRejectionPeriod`|ISO8601 Period|Configure tasks to reject messages with timestamps later than this period after the task reached its taskDuration; for example if this is set to `PT1H`, the taskDuration is set to `PT1H` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps later than *2016-01-01T14:00Z* will be dropped. **Note:** Tasks sometimes run past their task duration, for example, in cases of supervisor failover. Setting earlyMessageRejectionPeriod too low may cause messages to be dropped unexpectedly whenever a task runs past its originally configured task duration.|no (default == none)|\n+|`autoScalerConfig`|Object|`autoScalerConfig` to specify how to auto scale the number of Kafka ingest tasks based on Lag metrics. ONLY supported for Kafka indexing as of now. See [Tasks Autoscaler Properties](#Task Autoscaler Properties) for details.|no (default == null)|\n+\n+### Task Autoscaler Properties\n+| Property | Description | Required |\n+| ------------- | ------------- | ------------- |\n+| `enableTaskAutoScaler` | Whether enable this feature or not. Set false or ignored here will disable `autoScaler` even though `autoScalerConfig` is not null| no (default == false) |\n+| `lagCollectionIntervalMillis` | Define the frequency of lag points collection.  | no (default == 30000) |\n+| `lagCollectionRangeMillis` | The total time window of lag collection, Use with `lagCollectionIntervalMillis`\uff0cit means that in the recent `lagCollectionRangeMillis`, collect lag metric points every `lagCollectionIntervalMillis`. | no (default == 600000) |\n+| `scaleOutThreshold` | The Threshold of scale out action | no (default == 6000000) |\n+| `triggerScaleOutThresholdFrequency` | If `triggerScaleOutThresholdFrequency` percent of lag points are higher than `scaleOutThreshold`, then do scale out action. | no (default == 0.3) |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTE3MjMyNQ=="}, "originalCommit": {"oid": "6334e2ba0ddf48ddfd884fcdfe9361cee1431e6b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY5MjMxNDQ5OnYy", "diffSide": "RIGHT", "path": "docs/development/extensions-core/kafka-ingestion.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQwMToxMTo0MVrOIuEF7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQwNzo1MjoyNlrOIuN2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTE3MjQ2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | `triggerScaleInThresholdFrequency` | If `triggerScaleInThresholdFrequency` percent of lag points are lower than `scaleOutThreshold`, then do scale in action. | no (default == 0.9) |\n          \n          \n            \n            | `triggerScaleInFractionThreshold` | If `triggerScaleInThresholdFrequency` percent of lag points are lower than `scaleOutThreshold`, then do scale in action. | no (default == 0.9) |", "url": "https://github.com/apache/druid/pull/10524#discussion_r585172462", "createdAt": "2021-03-02T01:11:41Z", "author": {"login": "himanshug"}, "path": "docs/development/extensions-core/kafka-ingestion.md", "diffHunk": "@@ -146,6 +146,26 @@ A sample supervisor spec is shown below:\n |`lateMessageRejectionStartDateTime`|ISO8601 DateTime|Configure tasks to reject messages with timestamps earlier than this date time; for example if this is set to `2016-01-01T11:00Z` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps earlier than *2016-01-01T11:00Z* will be dropped. This may help prevent concurrency issues if your data stream has late messages and you have multiple pipelines that need to operate on the same segments (e.g. a realtime and a nightly batch ingestion pipeline).|no (default == none)|\n |`lateMessageRejectionPeriod`|ISO8601 Period|Configure tasks to reject messages with timestamps earlier than this period before the task was created; for example if this is set to `PT1H` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps earlier than *2016-01-01T11:00Z* will be dropped. This may help prevent concurrency issues if your data stream has late messages and you have multiple pipelines that need to operate on the same segments (e.g. a realtime and a nightly batch ingestion pipeline). Please note that only one of `lateMessageRejectionPeriod` or `lateMessageRejectionStartDateTime` can be specified.|no (default == none)|\n |`earlyMessageRejectionPeriod`|ISO8601 Period|Configure tasks to reject messages with timestamps later than this period after the task reached its taskDuration; for example if this is set to `PT1H`, the taskDuration is set to `PT1H` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps later than *2016-01-01T14:00Z* will be dropped. **Note:** Tasks sometimes run past their task duration, for example, in cases of supervisor failover. Setting earlyMessageRejectionPeriod too low may cause messages to be dropped unexpectedly whenever a task runs past its originally configured task duration.|no (default == none)|\n+|`autoScalerConfig`|Object|`autoScalerConfig` to specify how to auto scale the number of Kafka ingest tasks based on Lag metrics. ONLY supported for Kafka indexing as of now. See [Tasks Autoscaler Properties](#Task Autoscaler Properties) for details.|no (default == null)|\n+\n+### Task Autoscaler Properties\n+| Property | Description | Required |\n+| ------------- | ------------- | ------------- |\n+| `enableTaskAutoScaler` | Whether enable this feature or not. Set false or ignored here will disable `autoScaler` even though `autoScalerConfig` is not null| no (default == false) |\n+| `lagCollectionIntervalMillis` | Define the frequency of lag points collection.  | no (default == 30000) |\n+| `lagCollectionRangeMillis` | The total time window of lag collection, Use with `lagCollectionIntervalMillis`\uff0cit means that in the recent `lagCollectionRangeMillis`, collect lag metric points every `lagCollectionIntervalMillis`. | no (default == 600000) |\n+| `scaleOutThreshold` | The Threshold of scale out action | no (default == 6000000) |\n+| `triggerScaleOutThresholdFrequency` | If `triggerScaleOutThresholdFrequency` percent of lag points are higher than `scaleOutThreshold`, then do scale out action. | no (default == 0.3) |\n+| `scaleInThreshold` | The Threshold of scale in action | no (default == 1000000) |\n+| `triggerScaleInThresholdFrequency` | If `triggerScaleInThresholdFrequency` percent of lag points are lower than `scaleOutThreshold`, then do scale in action. | no (default == 0.9) |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6334e2ba0ddf48ddfd884fcdfe9361cee1431e6b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTMzMjI3Nw==", "bodyText": "Thanks && changed.", "url": "https://github.com/apache/druid/pull/10524#discussion_r585332277", "createdAt": "2021-03-02T07:52:26Z", "author": {"login": "zhangyue19921010"}, "path": "docs/development/extensions-core/kafka-ingestion.md", "diffHunk": "@@ -146,6 +146,26 @@ A sample supervisor spec is shown below:\n |`lateMessageRejectionStartDateTime`|ISO8601 DateTime|Configure tasks to reject messages with timestamps earlier than this date time; for example if this is set to `2016-01-01T11:00Z` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps earlier than *2016-01-01T11:00Z* will be dropped. This may help prevent concurrency issues if your data stream has late messages and you have multiple pipelines that need to operate on the same segments (e.g. a realtime and a nightly batch ingestion pipeline).|no (default == none)|\n |`lateMessageRejectionPeriod`|ISO8601 Period|Configure tasks to reject messages with timestamps earlier than this period before the task was created; for example if this is set to `PT1H` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps earlier than *2016-01-01T11:00Z* will be dropped. This may help prevent concurrency issues if your data stream has late messages and you have multiple pipelines that need to operate on the same segments (e.g. a realtime and a nightly batch ingestion pipeline). Please note that only one of `lateMessageRejectionPeriod` or `lateMessageRejectionStartDateTime` can be specified.|no (default == none)|\n |`earlyMessageRejectionPeriod`|ISO8601 Period|Configure tasks to reject messages with timestamps later than this period after the task reached its taskDuration; for example if this is set to `PT1H`, the taskDuration is set to `PT1H` and the supervisor creates a task at *2016-01-01T12:00Z*, messages with timestamps later than *2016-01-01T14:00Z* will be dropped. **Note:** Tasks sometimes run past their task duration, for example, in cases of supervisor failover. Setting earlyMessageRejectionPeriod too low may cause messages to be dropped unexpectedly whenever a task runs past its originally configured task duration.|no (default == none)|\n+|`autoScalerConfig`|Object|`autoScalerConfig` to specify how to auto scale the number of Kafka ingest tasks based on Lag metrics. ONLY supported for Kafka indexing as of now. See [Tasks Autoscaler Properties](#Task Autoscaler Properties) for details.|no (default == null)|\n+\n+### Task Autoscaler Properties\n+| Property | Description | Required |\n+| ------------- | ------------- | ------------- |\n+| `enableTaskAutoScaler` | Whether enable this feature or not. Set false or ignored here will disable `autoScaler` even though `autoScalerConfig` is not null| no (default == false) |\n+| `lagCollectionIntervalMillis` | Define the frequency of lag points collection.  | no (default == 30000) |\n+| `lagCollectionRangeMillis` | The total time window of lag collection, Use with `lagCollectionIntervalMillis`\uff0cit means that in the recent `lagCollectionRangeMillis`, collect lag metric points every `lagCollectionIntervalMillis`. | no (default == 600000) |\n+| `scaleOutThreshold` | The Threshold of scale out action | no (default == 6000000) |\n+| `triggerScaleOutThresholdFrequency` | If `triggerScaleOutThresholdFrequency` percent of lag points are higher than `scaleOutThreshold`, then do scale out action. | no (default == 0.3) |\n+| `scaleInThreshold` | The Threshold of scale in action | no (default == 1000000) |\n+| `triggerScaleInThresholdFrequency` | If `triggerScaleInThresholdFrequency` percent of lag points are lower than `scaleOutThreshold`, then do scale in action. | no (default == 0.9) |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTE3MjQ2Mg=="}, "originalCommit": {"oid": "6334e2ba0ddf48ddfd884fcdfe9361cee1431e6b"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcwOTI2NDIyOnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNFQyMDoxMDo1MlrOIwkA5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNVQwNDo1Nzo0MVrOIwyuTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Nzc5MjYxMw==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public int getPartitionNumbers()\n          \n          \n            \n              public int getPartitionsCount()", "url": "https://github.com/apache/druid/pull/10524#discussion_r587792613", "createdAt": "2021-03-04T20:10:52Z", "author": {"login": "himanshug"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -1901,6 +2058,11 @@ protected boolean supportsPartitionExpiration()\n     return false;\n   }\n \n+  public int getPartitionNumbers()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644e7320ce2f51521b470b022f3406395054bd60"}, "originalPosition": 279}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODAzMzYxMw==", "bodyText": "Done. Thanks a lot for your review and approval!", "url": "https://github.com/apache/druid/pull/10524#discussion_r588033613", "createdAt": "2021-03-05T04:57:41Z", "author": {"login": "zhangyue19921010"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/supervisor/SeekableStreamSupervisor.java", "diffHunk": "@@ -1901,6 +2058,11 @@ protected boolean supportsPartitionExpiration()\n     return false;\n   }\n \n+  public int getPartitionNumbers()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Nzc5MjYxMw=="}, "originalCommit": {"oid": "644e7320ce2f51521b470b022f3406395054bd60"}, "originalPosition": 279}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcwOTk3NDEwOnYy", "diffSide": "RIGHT", "path": "extensions-core/kafka-indexing-service/src/main/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorIOConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNFQyMzoyMDo1NlrOIwqyzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNVQwNDo0OTowNlrOIwylDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzkwMzY5NA==", "bodyText": "Should this be included in toString below?", "url": "https://github.com/apache/druid/pull/10524#discussion_r587903694", "createdAt": "2021-03-04T23:20:56Z", "author": {"login": "capistrant"}, "path": "extensions-core/kafka-indexing-service/src/main/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorIOConfig.java", "diffHunk": "@@ -51,6 +53,7 @@ public KafkaSupervisorIOConfig(\n       @JsonProperty(\"taskCount\") Integer taskCount,\n       @JsonProperty(\"taskDuration\") Period taskDuration,\n       @JsonProperty(\"consumerProperties\") Map<String, Object> consumerProperties,\n+      @Nullable @JsonProperty(\"autoScalerConfig\") AutoScalerConfig autoScalerConfig,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644e7320ce2f51521b470b022f3406395054bd60"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODAzMTI0NQ==", "bodyText": "Sure && Done.", "url": "https://github.com/apache/druid/pull/10524#discussion_r588031245", "createdAt": "2021-03-05T04:49:06Z", "author": {"login": "zhangyue19921010"}, "path": "extensions-core/kafka-indexing-service/src/main/java/org/apache/druid/indexing/kafka/supervisor/KafkaSupervisorIOConfig.java", "diffHunk": "@@ -51,6 +53,7 @@ public KafkaSupervisorIOConfig(\n       @JsonProperty(\"taskCount\") Integer taskCount,\n       @JsonProperty(\"taskDuration\") Period taskDuration,\n       @JsonProperty(\"consumerProperties\") Map<String, Object> consumerProperties,\n+      @Nullable @JsonProperty(\"autoScalerConfig\") AutoScalerConfig autoScalerConfig,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzkwMzY5NA=="}, "originalCommit": {"oid": "644e7320ce2f51521b470b022f3406395054bd60"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcwOTk3NzMxOnYy", "diffSide": "RIGHT", "path": "extensions-core/kinesis-indexing-service/src/main/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNFQyMzoyMjoyMVrOIwq0zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNVQwNDo0OToxMFrOIwylIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzkwNDIwNA==", "bodyText": "Not sure if UnsupportedOperationException would be better here or if null is fine.", "url": "https://github.com/apache/druid/pull/10524#discussion_r587904204", "createdAt": "2021-03-04T23:22:21Z", "author": {"login": "capistrant"}, "path": "extensions-core/kinesis-indexing-service/src/main/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisor.java", "diffHunk": "@@ -378,6 +379,13 @@ protected boolean useExclusiveStartSequenceNumberForNonFirstSequence()\n     return true;\n   }\n \n+  // not yet supported, will be implemented in the future maybe? need to find a proper way to measure kinesis lag.\n+  @Override\n+  public LagStats computeLagStats()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644e7320ce2f51521b470b022f3406395054bd60"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODAzMTI2NA==", "bodyText": "Sure && Done.", "url": "https://github.com/apache/druid/pull/10524#discussion_r588031264", "createdAt": "2021-03-05T04:49:10Z", "author": {"login": "zhangyue19921010"}, "path": "extensions-core/kinesis-indexing-service/src/main/java/org/apache/druid/indexing/kinesis/supervisor/KinesisSupervisor.java", "diffHunk": "@@ -378,6 +379,13 @@ protected boolean useExclusiveStartSequenceNumberForNonFirstSequence()\n     return true;\n   }\n \n+  // not yet supported, will be implemented in the future maybe? need to find a proper way to measure kinesis lag.\n+  @Override\n+  public LagStats computeLagStats()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzkwNDIwNA=="}, "originalCommit": {"oid": "644e7320ce2f51521b470b022f3406395054bd60"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcxMDAwNzk4OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNFQyMzozMzozOFrOIwrG3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNVQwNDo1MTo0OFrOIwynzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzkwODgyOA==", "bodyText": "does this need to be added added to licesnses.yaml? https://github.com/apache/druid/blob/master/dev/license.md#when-you-add-a-new-library-dependency-into-druid", "url": "https://github.com/apache/druid/pull/10524#discussion_r587908828", "createdAt": "2021-03-04T23:33:38Z", "author": {"login": "capistrant"}, "path": "pom.xml", "diffHunk": "@@ -957,6 +957,11 @@\n                 <artifactId>jna</artifactId>\n                 <version>4.5.1</version>\n             </dependency>\n+            <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644e7320ce2f51521b470b022f3406395054bd60"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODAzMTk0OQ==", "bodyText": "It looks like this dependency is already added in licenses.yaml before according to \n  \n    \n      druid/licenses.yaml\n    \n    \n         Line 596\n      in\n      6040c30\n    \n    \n    \n    \n\n        \n          \n           - org.apache.commons: commons-collections4", "url": "https://github.com/apache/druid/pull/10524#discussion_r588031949", "createdAt": "2021-03-05T04:51:48Z", "author": {"login": "zhangyue19921010"}, "path": "pom.xml", "diffHunk": "@@ -957,6 +957,11 @@\n                 <artifactId>jna</artifactId>\n                 <version>4.5.1</version>\n             </dependency>\n+            <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzkwODgyOA=="}, "originalCommit": {"oid": "644e7320ce2f51521b470b022f3406395054bd60"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3065, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}