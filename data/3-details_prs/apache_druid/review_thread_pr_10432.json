{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMjgzNTE1", "number": 10432, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODo0NDoxMFrOEnLJSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMDowNDo0MVrOEoPULQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTEyNTIyOnYy", "diffSide": "RIGHT", "path": "docs/querying/query-context.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODo0NDoxMFrOHXoHVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzoxODo0OFrOHYxPmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUzNjUzNA==", "bodyText": "There's only one built-in virtual column: \"expression\". So, we should mention when that specific type of virtual column can be vectorized. (Does it depend on the type of expression? Types of input? Functions used? etc)", "url": "https://github.com/apache/druid/pull/10432#discussion_r494536534", "createdAt": "2020-09-24T18:44:10Z", "author": {"login": "gianm"}, "path": "docs/querying/query-context.md", "diffHunk": "@@ -92,7 +92,7 @@ include \"selector\", \"bound\", \"in\", \"like\", \"regex\", \"search\", \"and\", \"or\", and \"\n - All aggregators must offer vectorized implementations. These include \"count\", \"doubleSum\", \"floatSum\", \"longSum\", \"longMin\",\n  \"longMax\", \"doubleMin\", \"doubleMax\", \"floatMin\", \"floatMax\", \"longAny\", \"doubleAny\", \"floatAny\", \"stringAny\",\n  \"hyperUnique\", \"filtered\", \"approxHistogram\", \"approxHistogramFold\", and \"fixedBucketsHistogram\" (with numerical input). \n-- No virtual columns.\n+- All virtual columns must offer vectorized implementations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e0b97a62ece12eca34ba46672f792956f509508"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc1MjYwNg==", "bodyText": "Ah, I was planning on filling out a list of supported expressions but figured the list was sort of volatile since I have a few PRs and branches in flight and was originally going to do this later. I was planning to wait for #10429 to go in before I fixup this PR (to make sure changing the default to false doesn't cause any ill effects to tests) so I can go ahead and fill out this list to include the stuff from #10401 and #10429 in this PR at least.", "url": "https://github.com/apache/druid/pull/10432#discussion_r494752606", "createdAt": "2020-09-25T05:18:31Z", "author": {"login": "clintropolis"}, "path": "docs/querying/query-context.md", "diffHunk": "@@ -92,7 +92,7 @@ include \"selector\", \"bound\", \"in\", \"like\", \"regex\", \"search\", \"and\", \"or\", and \"\n - All aggregators must offer vectorized implementations. These include \"count\", \"doubleSum\", \"floatSum\", \"longSum\", \"longMin\",\n  \"longMax\", \"doubleMin\", \"doubleMax\", \"floatMin\", \"floatMax\", \"longAny\", \"doubleAny\", \"floatAny\", \"stringAny\",\n  \"hyperUnique\", \"filtered\", \"approxHistogram\", \"approxHistogramFold\", and \"fixedBucketsHistogram\" (with numerical input). \n-- No virtual columns.\n+- All virtual columns must offer vectorized implementations.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUzNjUzNA=="}, "originalCommit": {"oid": "0e0b97a62ece12eca34ba46672f792956f509508"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczNDY4Mg==", "bodyText": "added docs explaining what is currently supported", "url": "https://github.com/apache/druid/pull/10432#discussion_r495734682", "createdAt": "2020-09-28T07:18:48Z", "author": {"login": "clintropolis"}, "path": "docs/querying/query-context.md", "diffHunk": "@@ -92,7 +92,7 @@ include \"selector\", \"bound\", \"in\", \"like\", \"regex\", \"search\", \"and\", \"or\", and \"\n - All aggregators must offer vectorized implementations. These include \"count\", \"doubleSum\", \"floatSum\", \"longSum\", \"longMin\",\n  \"longMax\", \"doubleMin\", \"doubleMax\", \"floatMin\", \"floatMax\", \"longAny\", \"doubleAny\", \"floatAny\", \"stringAny\",\n  \"hyperUnique\", \"filtered\", \"approxHistogram\", \"approxHistogramFold\", and \"fixedBucketsHistogram\" (with numerical input). \n-- No virtual columns.\n+- All virtual columns must offer vectorized implementations.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUzNjUzNA=="}, "originalCommit": {"oid": "0e0b97a62ece12eca34ba46672f792956f509508"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTEyNTU1OnYy", "diffSide": "RIGHT", "path": "docs/querying/query-context.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODo0NDoxM1rOHXoHgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzoxOTozMVrOHYxQ7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUzNjU3Ng==", "bodyText": "IMO, it'd be best to set it to false now, then change it to true for the next release. It'll lower the risk around upgrading, and we want upgrades to be really low risk so people feel comfortable just dropping in the newest version.\nThe specific risks here are:\n\nBugs in vectorized expressions.\nSituations where vectorized expressions perform worse than non-vectorized ones (perhaps some optimizations are implemented for the non-vectorized case, but not the vectorized case).\nSituations where there is a bug in the vectorized query engines in general, but a specific user isn't hitting it, because they're using expressions and so the query wouldn't vectorize anyway.", "url": "https://github.com/apache/druid/pull/10432#discussion_r494536576", "createdAt": "2020-09-24T18:44:13Z", "author": {"login": "gianm"}, "path": "docs/querying/query-context.md", "diffHunk": "@@ -106,3 +106,4 @@ vectorization. These query types will ignore the \"vectorize\" parameter even if i\n |--------|-------|------------|\n |vectorize|`true`|Enables or disables vectorized query execution. Possible values are `false` (disabled), `true` (enabled if possible, disabled otherwise, on a per-segment basis), and `force` (enabled, and groupBy or timeseries queries that cannot be vectorized will fail). The `\"force\"` setting is meant to aid in testing, and is not generally useful in production (since real-time segments can never be processed with vectorized execution, any queries on real-time data will fail). This will override `druid.query.default.context.vectorize` if it's set.|\n |vectorSize|`512`|Sets the row batching size for a particular query. This will override `druid.query.default.context.vectorSize` if it's set.|\n+|vectorizeVirtualColumns|`true`|Enables or disables vectorized query processing of queries with virtual columns, layered on top of `vectorize` (`vectorize` must also be set to true for a query to utilize vectorization). Possible values are `false` (disabled), `true` (enabled if possible, disabled otherwise, on a per-segment basis), and `force` (enabled, and groupBy or timeseries queries with virtual columns that cannot be vectorized will fail). The `\"force\"` setting is meant to aid in testing, and is not generally useful in production. This will override `druid.query.default.context.vectorizeVirtualColumns` if it's set.|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e0b97a62ece12eca34ba46672f792956f509508"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc1MTY3Nw==", "bodyText": "Given that #10429 has uncovered a bug with vectorized group by engine when grouping on numeric columns with null values in sql compatible null handling mode that isn't related to expressions/virtual columns, I guess this seems prudent and I've come around to being in the 'false by default' camp.", "url": "https://github.com/apache/druid/pull/10432#discussion_r494751677", "createdAt": "2020-09-25T05:14:51Z", "author": {"login": "clintropolis"}, "path": "docs/querying/query-context.md", "diffHunk": "@@ -106,3 +106,4 @@ vectorization. These query types will ignore the \"vectorize\" parameter even if i\n |--------|-------|------------|\n |vectorize|`true`|Enables or disables vectorized query execution. Possible values are `false` (disabled), `true` (enabled if possible, disabled otherwise, on a per-segment basis), and `force` (enabled, and groupBy or timeseries queries that cannot be vectorized will fail). The `\"force\"` setting is meant to aid in testing, and is not generally useful in production (since real-time segments can never be processed with vectorized execution, any queries on real-time data will fail). This will override `druid.query.default.context.vectorize` if it's set.|\n |vectorSize|`512`|Sets the row batching size for a particular query. This will override `druid.query.default.context.vectorSize` if it's set.|\n+|vectorizeVirtualColumns|`true`|Enables or disables vectorized query processing of queries with virtual columns, layered on top of `vectorize` (`vectorize` must also be set to true for a query to utilize vectorization). Possible values are `false` (disabled), `true` (enabled if possible, disabled otherwise, on a per-segment basis), and `force` (enabled, and groupBy or timeseries queries with virtual columns that cannot be vectorized will fail). The `\"force\"` setting is meant to aid in testing, and is not generally useful in production. This will override `druid.query.default.context.vectorizeVirtualColumns` if it's set.|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUzNjU3Ng=="}, "originalCommit": {"oid": "0e0b97a62ece12eca34ba46672f792956f509508"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczNTAyMQ==", "bodyText": "updated to default to false. I modified the tests to also set this parameter to force whenever vectorize is set to force so that we can keep the test coverage", "url": "https://github.com/apache/druid/pull/10432#discussion_r495735021", "createdAt": "2020-09-28T07:19:31Z", "author": {"login": "clintropolis"}, "path": "docs/querying/query-context.md", "diffHunk": "@@ -106,3 +106,4 @@ vectorization. These query types will ignore the \"vectorize\" parameter even if i\n |--------|-------|------------|\n |vectorize|`true`|Enables or disables vectorized query execution. Possible values are `false` (disabled), `true` (enabled if possible, disabled otherwise, on a per-segment basis), and `force` (enabled, and groupBy or timeseries queries that cannot be vectorized will fail). The `\"force\"` setting is meant to aid in testing, and is not generally useful in production (since real-time segments can never be processed with vectorized execution, any queries on real-time data will fail). This will override `druid.query.default.context.vectorize` if it's set.|\n |vectorSize|`512`|Sets the row batching size for a particular query. This will override `druid.query.default.context.vectorSize` if it's set.|\n+|vectorizeVirtualColumns|`true`|Enables or disables vectorized query processing of queries with virtual columns, layered on top of `vectorize` (`vectorize` must also be set to true for a query to utilize vectorization). Possible values are `false` (disabled), `true` (enabled if possible, disabled otherwise, on a per-segment basis), and `force` (enabled, and groupBy or timeseries queries with virtual columns that cannot be vectorized will fail). The `\"force\"` setting is meant to aid in testing, and is not generally useful in production. This will override `druid.query.default.context.vectorizeVirtualColumns` if it's set.|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUzNjU3Ng=="}, "originalCommit": {"oid": "0e0b97a62ece12eca34ba46672f792956f509508"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTE1MzkzOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/vector/VectorGroupByEngine.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODo1MjowMlrOHXoYuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzoyMDo0OFrOHYxTeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU0MDk4NA==", "bodyText": "There's some duplication here between the query engines \u2014 how about creating a helper that takes the query and the virtual columns and creates a Vectorize instance that synthesizes both?", "url": "https://github.com/apache/druid/pull/10432#discussion_r494540984", "createdAt": "2020-09-24T18:52:02Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/vector/VectorGroupByEngine.java", "diffHunk": "@@ -76,10 +76,18 @@ public static boolean canVectorize(\n     Function<String, ColumnCapabilities> capabilitiesFunction = name ->\n         query.getVirtualColumns().getColumnCapabilitiesWithFallback(adapter, name);\n \n+    final boolean adapterCanVectorize = adapter.canVectorize(filter, query.getVirtualColumns(), false);\n+    final boolean virtualColumnsCanVectorize;\n+    if (query.getVirtualColumns().getVirtualColumns().length > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e0b97a62ece12eca34ba46672f792956f509508"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc1MTc3Mw==", "bodyText": "I'll see if I can clean this up a bit", "url": "https://github.com/apache/druid/pull/10432#discussion_r494751773", "createdAt": "2020-09-25T05:15:11Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/vector/VectorGroupByEngine.java", "diffHunk": "@@ -76,10 +76,18 @@ public static boolean canVectorize(\n     Function<String, ColumnCapabilities> capabilitiesFunction = name ->\n         query.getVirtualColumns().getColumnCapabilitiesWithFallback(adapter, name);\n \n+    final boolean adapterCanVectorize = adapter.canVectorize(filter, query.getVirtualColumns(), false);\n+    final boolean virtualColumnsCanVectorize;\n+    if (query.getVirtualColumns().getVirtualColumns().length > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU0MDk4NA=="}, "originalCommit": {"oid": "0e0b97a62ece12eca34ba46672f792956f509508"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczNTY3Mg==", "bodyText": "moved into a static method VirtualColumns.shouldVectorize which I'm not sure is the best place or not, but at least consolidates the logic", "url": "https://github.com/apache/druid/pull/10432#discussion_r495735672", "createdAt": "2020-09-28T07:20:48Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/vector/VectorGroupByEngine.java", "diffHunk": "@@ -76,10 +76,18 @@ public static boolean canVectorize(\n     Function<String, ColumnCapabilities> capabilitiesFunction = name ->\n         query.getVirtualColumns().getColumnCapabilitiesWithFallback(adapter, name);\n \n+    final boolean adapterCanVectorize = adapter.canVectorize(filter, query.getVirtualColumns(), false);\n+    final boolean virtualColumnsCanVectorize;\n+    if (query.getVirtualColumns().getVirtualColumns().length > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU0MDk4NA=="}, "originalCommit": {"oid": "0e0b97a62ece12eca34ba46672f792956f509508"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjI5NDIxOnYy", "diffSide": "RIGHT", "path": "docs/misc/math-expr.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMDowNDo0MVrOHZNtxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMDowNTowMVrOHZNuZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIwMTE1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * comparison operators: `=`, `!=`, >`, `>=`, `<`, `<=` are supported for numeric types\n          \n          \n            \n            * comparison operators: `=`, `!=`, `>`, `>=`, `<`, `<=` are supported for numeric types", "url": "https://github.com/apache/druid/pull/10432#discussion_r496201157", "createdAt": "2020-09-28T20:04:41Z", "author": {"login": "ccaominh"}, "path": "docs/misc/math-expr.md", "diffHunk": "@@ -214,3 +214,16 @@ For the IPv4 address functions, the `address` argument can either be an IPv4 dot\n | ipv4_match(address, subnet) | Returns 1 if the `address` belongs to the `subnet` literal, else 0. If `address` is not a valid IPv4 address, then 0 is returned. This function is more efficient if `address` is a long instead of a string.|\n | ipv4_parse(address) | Parses `address` into an IPv4 address stored as a long. If `address` is a long that is a valid IPv4 address, then it is passed through. Returns null if `address` cannot be represented as an IPv4 address. |\n | ipv4_stringify(address) | Converts `address` into an IPv4 address dotted-decimal string. If `address` is a string that is a valid IPv4 address, then it is passed through. Returns null if `address` cannot be represented as an IPv4 address.|\n+\n+\n+## Vectorization Support\n+A number of expressions support ['vectorized' query engines](../querying/query-context.md#vectorization-parameters)\n+\n+supported features:\n+* constants and identifiers are supported for any column type\n+* `cast` is supported for numeric and string types\n+* math operators: `+`,`-`,`*`,`/`,`%`,`^` are supported for numeric types\n+* comparison operators: `=`, `!=`, >`, `>=`, `<`, `<=` are supported for numeric types", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95d93af023625f98f3a1cfd2a98595dd4c1daf50"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIwMTMxNg==", "bodyText": "I think that should fix the spellcheck failure", "url": "https://github.com/apache/druid/pull/10432#discussion_r496201316", "createdAt": "2020-09-28T20:05:01Z", "author": {"login": "ccaominh"}, "path": "docs/misc/math-expr.md", "diffHunk": "@@ -214,3 +214,16 @@ For the IPv4 address functions, the `address` argument can either be an IPv4 dot\n | ipv4_match(address, subnet) | Returns 1 if the `address` belongs to the `subnet` literal, else 0. If `address` is not a valid IPv4 address, then 0 is returned. This function is more efficient if `address` is a long instead of a string.|\n | ipv4_parse(address) | Parses `address` into an IPv4 address stored as a long. If `address` is a long that is a valid IPv4 address, then it is passed through. Returns null if `address` cannot be represented as an IPv4 address. |\n | ipv4_stringify(address) | Converts `address` into an IPv4 address dotted-decimal string. If `address` is a string that is a valid IPv4 address, then it is passed through. Returns null if `address` cannot be represented as an IPv4 address.|\n+\n+\n+## Vectorization Support\n+A number of expressions support ['vectorized' query engines](../querying/query-context.md#vectorization-parameters)\n+\n+supported features:\n+* constants and identifiers are supported for any column type\n+* `cast` is supported for numeric and string types\n+* math operators: `+`,`-`,`*`,`/`,`%`,`^` are supported for numeric types\n+* comparison operators: `=`, `!=`, >`, `>=`, `<`, `<=` are supported for numeric types", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIwMTE1Nw=="}, "originalCommit": {"oid": "95d93af023625f98f3a1cfd2a98595dd4c1daf50"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2974, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}