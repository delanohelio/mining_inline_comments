{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NzA0NjAx", "number": 9367, "title": "string -> expression -> string -> expression", "bodyText": "Description\nThis PR adds a new method to the Expr interface, Expr.stringify(). which produces parseable expression strings so that any Expr tree can be converted back into a String which can later be parsed into an equivalent expression.\nPrior to this PR, not all Expr which could exist at evaluation time were actually parseable, specifically empty numeric arrays and arrays with null elements. To make all Expr able to satisfy the stringify contract, the grammar has been updated to support these constructs. Empty arrays may now be defined like so: <STRING>[], <DOUBLE>[], <LONG>[], and arrays like [null, 1, 2] are now able to be correctly parsed from an expression string. The explicit typing syntax for arrays extends beyond empty arrays, so things like <LONG>[1, 2, 3] are also valid (and equivalent to [1, 2, 3]).\nFor testing, I modified the majority of expression unit tests assertions to also ensure that parsing the stringified form of a parsed expression produces the same results with and without flattening, so that nearly every expression that is tested also tests round tripping back to string.\nTagged with design review to discuss syntax for the empty arrays.\n\nThis PR has:\n\n been self-reviewed.\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added unit tests or modified existing tests to cover new code paths.\n added integration tests.\n been tested in a test Druid cluster.\n\n\nKey changed/added classes in this PR\n\nExpr.java\nExpr.g4\nExprListenerImpl.java", "createdAt": "2020-02-15T11:02:17Z", "url": "https://github.com/apache/druid/pull/9367", "merged": true, "mergeCommit": {"oid": "6d8dd5ec10042a827aca20429b3ea19dd39b5827"}, "closed": true, "closedAt": "2020-02-21T23:43:02Z", "author": {"login": "clintropolis"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcEh3BsgH2gAyMzc1NzA0NjAxOmJiYzU4MDBlYThiZTU3MjZlMDZiYTI5ZjNlNmJjNjkxMjg5ZTk1M2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGoh6GAFqTM2Mjk3OTEwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bbc5800ea8be5726e06ba29f3e6bc691289e953c", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/bbc5800ea8be5726e06ba29f3e6bc691289e953c", "committedDate": "2020-02-15T10:48:45Z", "message": "add Expr.stringify which produces parseable expression strings, parser support for null values in arrays, and parser support for empty numeric arrays"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f35b8f6025f2d3f583393f82d1a90d20bd23966", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/7f35b8f6025f2d3f583393f82d1a90d20bd23966", "committedDate": "2020-02-15T13:40:51Z", "message": "oops, macros are expressions too"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6745c34f3b875e4c9be82e9d2ab2e6b9bcd9f6df", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/6745c34f3b875e4c9be82e9d2ab2e6b9bcd9f6df", "committedDate": "2020-02-16T00:16:25Z", "message": "style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a8e23e0549112c2628feef6c3b409f53940df4d", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/9a8e23e0549112c2628feef6c3b409f53940df4d", "committedDate": "2020-02-16T04:48:17Z", "message": "spotbugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7389deddf9e138f3ca502498eaf95cdda7af453f", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/7389deddf9e138f3ca502498eaf95cdda7af453f", "committedDate": "2020-02-18T22:53:05Z", "message": "qualified type arrays"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNDY1OTcw", "url": "https://github.com/apache/druid/pull/9367#pullrequestreview-361465970", "createdAt": "2020-02-19T21:53:54Z", "commit": {"oid": "7389deddf9e138f3ca502498eaf95cdda7af453f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTo1Mzo1NFrOFr5BjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTo1NzoxMFrOFr5HjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2NzM3Mw==", "bodyText": "Can you add a comment about why escapeJavaScript is used (or escapeJava for IdentifierExpr )?", "url": "https://github.com/apache/druid/pull/9367#discussion_r381567373", "createdAt": "2020-02-19T21:53:54Z", "author": {"login": "jon-wei"}, "path": "core/src/main/java/org/apache/druid/math/expr/Expr.java", "diffHunk": "@@ -571,6 +596,12 @@ public ExprEval eval(ObjectBinding bindings)\n   {\n     return ExprEval.of(value);\n   }\n+\n+  @Override\n+  public String stringify()\n+  {\n+    return value == null ? NULL_LITERAL : StringUtils.format(\"'%s'\", StringEscapeUtils.escapeJavaScript(value));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7389deddf9e138f3ca502498eaf95cdda7af453f"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2ODkwOQ==", "bodyText": "This and similar blocks could use the NULL_LITERAL constant", "url": "https://github.com/apache/druid/pull/9367#discussion_r381568909", "createdAt": "2020-02-19T21:57:10Z", "author": {"login": "jon-wei"}, "path": "core/src/main/java/org/apache/druid/math/expr/ExprListenerImpl.java", "diffHunk": "@@ -109,9 +110,13 @@ public void exitDoubleExpr(ExprParser.DoubleExprContext ctx)\n   @Override\n   public void exitDoubleArray(ExprParser.DoubleArrayContext ctx)\n   {\n-    Double[] values = new Double[ctx.DOUBLE().size()];\n+    Double[] values = new Double[ctx.doubleElement().size()];\n     for (int i = 0; i < values.length; i++) {\n-      values[i] = Double.parseDouble(ctx.DOUBLE(i).getText());\n+      if (ctx.doubleElement(i).getText().equalsIgnoreCase(\"null\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7389deddf9e138f3ca502498eaf95cdda7af453f"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a84920f59616b10b8b17482532ce7c181875e76", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/9a84920f59616b10b8b17482532ce7c181875e76", "committedDate": "2020-02-19T23:17:41Z", "message": "Merge remote-tracking branch 'upstream/master' into reversible-expressions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8aafe2ea0bccfe16f459069adf9e8aae8792d2f6", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/8aafe2ea0bccfe16f459069adf9e8aae8792d2f6", "committedDate": "2020-02-19T23:24:29Z", "message": "review stuffs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNTIzMTA0", "url": "https://github.com/apache/druid/pull/9367#pullrequestreview-361523104", "createdAt": "2020-02-19T23:52:03Z", "commit": {"oid": "8aafe2ea0bccfe16f459069adf9e8aae8792d2f6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad0b01fa430a16cbfcc55ded91f9224252ec783e", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/ad0b01fa430a16cbfcc55ded91f9224252ec783e", "committedDate": "2020-02-20T23:51:19Z", "message": "simplify grammar"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMzE3NTYy", "url": "https://github.com/apache/druid/pull/9367#pullrequestreview-362317562", "createdAt": "2020-02-20T23:50:57Z", "commit": {"oid": "8aafe2ea0bccfe16f459069adf9e8aae8792d2f6"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzo1MDo1N1rOFsnPhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMDoxMDoyMFrOFsnmRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMyNDYxNA==", "bodyText": "nit: should it use Expr.ARG_JOINER?", "url": "https://github.com/apache/druid/pull/9367#discussion_r382324614", "createdAt": "2020-02-20T23:50:57Z", "author": {"login": "jihoonson"}, "path": "core/src/main/java/org/apache/druid/math/expr/ExprMacroTable.java", "diffHunk": "@@ -132,17 +141,29 @@ private BindingDetails supplyAnalyzeInputs()\n    */\n   public abstract static class BaseScalarMacroFunctionExpr implements Expr\n   {\n+    protected final String name;\n     protected final List<Expr> args;\n \n     // Use Supplier to memoize values as ExpressionSelectors#makeExprEvalSelector() can make repeated calls for them\n     private final Supplier<BindingDetails> analyzeInputsSupplier;\n \n-    public BaseScalarMacroFunctionExpr(final List<Expr> args)\n+    public BaseScalarMacroFunctionExpr(String name, final List<Expr> args)\n     {\n+      this.name = name;\n       this.args = args;\n       analyzeInputsSupplier = Suppliers.memoize(this::supplyAnalyzeInputs);\n     }\n \n+    @Override\n+    public String stringify()\n+    {\n+      return StringUtils.format(\n+          \"%s(%s)\",\n+          name,\n+          Joiner.on(\", \").join(args.stream().map(Expr::stringify).iterator())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8aafe2ea0bccfe16f459069adf9e8aae8792d2f6"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMyNDg5NQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/druid/pull/9367#discussion_r382324895", "createdAt": "2020-02-20T23:51:42Z", "author": {"login": "jihoonson"}, "path": "core/src/test/java/org/apache/druid/math/expr/ApplyFunctionTest.java", "diffHunk": "@@ -102,7 +102,7 @@ public void testFold()\n     assertExpr(\"fold((b, acc) -> b * acc, map((b) -> b * 2, filter(b -> b > 3, b)), 1)\", 80L);\n     assertExpr(\"fold((a, acc) -> concat(a, acc), a, '')\", \"foobarbazbarfoo\");\n     assertExpr(\"fold((a, acc) -> array_append(acc, a), a, [])\", new String[]{\"foo\", \"bar\", \"baz\", \"foobar\"});\n-    assertExpr(\"fold((a, acc) -> array_append(acc, a), b, cast([], 'LONG_ARRAY'))\", new Long[]{1L, 2L, 3L, 4L, 5L});\n+    assertExpr(\"fold((a, acc) -> array_append(acc, a), b, <LONG>[])\", new Long[]{1L, 2L, 3L, 4L, 5L});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8aafe2ea0bccfe16f459069adf9e8aae8792d2f6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMzMDQzNw==", "bodyText": "Wondering if the array elements should be casted if they are not longs.", "url": "https://github.com/apache/druid/pull/9367#discussion_r382330437", "createdAt": "2020-02-21T00:10:20Z", "author": {"login": "jihoonson"}, "path": "core/src/main/java/org/apache/druid/math/expr/ExprListenerImpl.java", "diffHunk": "@@ -188,9 +195,15 @@ public void exitLogicalAndOrExpr(ExprParser.LogicalAndOrExprContext ctx)\n   @Override\n   public void exitLongArray(ExprParser.LongArrayContext ctx)\n   {\n-    Long[] values = new Long[ctx.LONG().size()];\n+    Long[] values = ctx.longArrayBody() == null\n+                    ? new Long[0]\n+                    : new Long[ctx.longArrayBody().longElement().size()];\n     for (int i = 0; i < values.length; i++) {\n-      values[i] = Long.parseLong(ctx.LONG(i).getText());\n+      if (ctx.longArrayBody().longElement(i).getText().equalsIgnoreCase(Expr.NULL_LITERAL)) {\n+        values[i] = null;\n+      } else {\n+        values[i] = Long.parseLong(ctx.longArrayBody().longElement(i).getText());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad0b01fa430a16cbfcc55ded91f9224252ec783e"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "276a4c56b4743ebb1d24230ba0416d388b662623", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/276a4c56b4743ebb1d24230ba0416d388b662623", "committedDate": "2020-02-21T10:39:46Z", "message": "more permissive array parsing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7efa7d616fb97e0c67e254ff2a174205acf85ad5", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/7efa7d616fb97e0c67e254ff2a174205acf85ad5", "committedDate": "2020-02-21T10:43:52Z", "message": "reuse expr joiner"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56bf7c38762be0a26cbd7748d9d684ded93c1f38", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/56bf7c38762be0a26cbd7748d9d684ded93c1f38", "committedDate": "2020-02-21T11:58:35Z", "message": "fix it"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTcwNzUw", "url": "https://github.com/apache/druid/pull/9367#pullrequestreview-362970750", "createdAt": "2020-02-21T23:12:06Z", "commit": {"oid": "56bf7c38762be0a26cbd7748d9d684ded93c1f38"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTc5MTA1", "url": "https://github.com/apache/druid/pull/9367#pullrequestreview-362979105", "createdAt": "2020-02-21T23:42:52Z", "commit": {"oid": "56bf7c38762be0a26cbd7748d9d684ded93c1f38"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2913, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}