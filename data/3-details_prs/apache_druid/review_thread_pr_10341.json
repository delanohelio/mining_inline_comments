{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3NTcyMTE3", "number": 10341, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMjoyOTo0OFrOEfy-VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMjoyOTo0OFrOEfy-VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNzc2NDY4OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/druid/query/ResultLevelCachingQueryRunnerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMjoyOTo0OFrOHMTesg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNToyMjo1OVrOHMWWBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY2NDExNA==", "bodyText": "Would it make sense to add another test to verify if the cache isn't getting populated in case of a query failure maybe due to missing segments?", "url": "https://github.com/apache/druid/pull/10341#discussion_r482664114", "createdAt": "2020-09-03T02:29:48Z", "author": {"login": "a2l007"}, "path": "server/src/test/java/org/apache/druid/query/ResultLevelCachingQueryRunnerTest.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query;\n+\n+import org.apache.druid.client.cache.Cache;\n+import org.apache.druid.client.cache.CacheConfig;\n+import org.apache.druid.client.cache.MapCache;\n+import org.apache.druid.java.util.common.guava.Sequence;\n+import org.apache.druid.query.timeseries.TimeseriesResultValue;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+public class ResultLevelCachingQueryRunnerTest extends QueryRunnerBasedOnClusteredClientTestBase\n+{\n+  private Cache cache;\n+\n+  @Before\n+  public void setup()\n+  {\n+    cache = MapCache.create(1024);\n+  }\n+\n+  @After\n+  public void tearDown() throws IOException\n+  {\n+    cache.close();\n+  }\n+\n+  @Test\n+  public void testNotPopulateAndNotUse()\n+  {\n+    prepareCluster(10);\n+    final Query<Result<TimeseriesResultValue>> query = timeseriesQuery(BASE_SCHEMA_INFO.getDataInterval());\n+    final ResultLevelCachingQueryRunner<Result<TimeseriesResultValue>> queryRunner1 = createQueryRunner(\n+        newCacheConfig(false, true),\n+        query\n+    );\n+\n+    final Sequence<Result<TimeseriesResultValue>> sequence1 = queryRunner1.run(\n+        QueryPlus.wrap(query),\n+        responseContext()\n+    );\n+    final List<Result<TimeseriesResultValue>> results1 = sequence1.toList();\n+    Assert.assertEquals(0, cache.getStats().getNumHits());\n+\n+    final ResultLevelCachingQueryRunner<Result<TimeseriesResultValue>> queryRunner2 = createQueryRunner(\n+        newCacheConfig(false, true),\n+        query\n+    );\n+\n+    final Sequence<Result<TimeseriesResultValue>> sequence2 = queryRunner2.run(\n+        QueryPlus.wrap(query),\n+        responseContext()\n+    );\n+    final List<Result<TimeseriesResultValue>> results2 = sequence2.toList();\n+    Assert.assertEquals(results1, results2);\n+    Assert.assertEquals(0, cache.getStats().getNumHits());\n+  }\n+\n+  @Test\n+  public void testPopulateAndNotUse()\n+  {\n+    prepareCluster(10);\n+    final Query<Result<TimeseriesResultValue>> query = timeseriesQuery(BASE_SCHEMA_INFO.getDataInterval());\n+    final ResultLevelCachingQueryRunner<Result<TimeseriesResultValue>> queryRunner1 = createQueryRunner(\n+        newCacheConfig(true, true),\n+        query\n+    );\n+\n+    final Sequence<Result<TimeseriesResultValue>> sequence1 = queryRunner1.run(\n+        QueryPlus.wrap(query),\n+        responseContext()\n+    );\n+    final List<Result<TimeseriesResultValue>> results1 = sequence1.toList();\n+    Assert.assertEquals(0, cache.getStats().getNumHits());\n+\n+    final ResultLevelCachingQueryRunner<Result<TimeseriesResultValue>> queryRunner2 = createQueryRunner(\n+        newCacheConfig(true, false),\n+        query\n+    );\n+\n+    final Sequence<Result<TimeseriesResultValue>> sequence2 = queryRunner2.run(\n+        QueryPlus.wrap(query),\n+        responseContext()\n+    );\n+    final List<Result<TimeseriesResultValue>> results2 = sequence2.toList();\n+    Assert.assertEquals(results1, results2);\n+    Assert.assertEquals(0, cache.getStats().getNumHits());\n+  }\n+\n+  @Test\n+  public void testNotPopulateAndUse()\n+  {\n+    prepareCluster(10);\n+    final Query<Result<TimeseriesResultValue>> query = timeseriesQuery(BASE_SCHEMA_INFO.getDataInterval());\n+    final ResultLevelCachingQueryRunner<Result<TimeseriesResultValue>> queryRunner1 = createQueryRunner(\n+        newCacheConfig(false, true),\n+        query\n+    );\n+\n+    final Sequence<Result<TimeseriesResultValue>> sequence1 = queryRunner1.run(\n+        QueryPlus.wrap(query),\n+        responseContext()\n+    );\n+    final List<Result<TimeseriesResultValue>> results1 = sequence1.toList();\n+    Assert.assertEquals(0, cache.getStats().getNumHits());\n+\n+    final ResultLevelCachingQueryRunner<Result<TimeseriesResultValue>> queryRunner2 = createQueryRunner(\n+        newCacheConfig(true, true),\n+        query\n+    );\n+\n+    final Sequence<Result<TimeseriesResultValue>> sequence2 = queryRunner2.run(\n+        QueryPlus.wrap(query),\n+        responseContext()\n+    );\n+    final List<Result<TimeseriesResultValue>> results2 = sequence2.toList();\n+    Assert.assertEquals(results1, results2);\n+    Assert.assertEquals(0, cache.getStats().getNumHits());\n+  }\n+\n+  @Test\n+  public void testPopulateAndUse()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ff019032208c7fa349c827e276fb52cbb23948"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcxMTA0Nw==", "bodyText": "Good idea. Added one.", "url": "https://github.com/apache/druid/pull/10341#discussion_r482711047", "createdAt": "2020-09-03T05:22:59Z", "author": {"login": "jihoonson"}, "path": "server/src/test/java/org/apache/druid/query/ResultLevelCachingQueryRunnerTest.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query;\n+\n+import org.apache.druid.client.cache.Cache;\n+import org.apache.druid.client.cache.CacheConfig;\n+import org.apache.druid.client.cache.MapCache;\n+import org.apache.druid.java.util.common.guava.Sequence;\n+import org.apache.druid.query.timeseries.TimeseriesResultValue;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+public class ResultLevelCachingQueryRunnerTest extends QueryRunnerBasedOnClusteredClientTestBase\n+{\n+  private Cache cache;\n+\n+  @Before\n+  public void setup()\n+  {\n+    cache = MapCache.create(1024);\n+  }\n+\n+  @After\n+  public void tearDown() throws IOException\n+  {\n+    cache.close();\n+  }\n+\n+  @Test\n+  public void testNotPopulateAndNotUse()\n+  {\n+    prepareCluster(10);\n+    final Query<Result<TimeseriesResultValue>> query = timeseriesQuery(BASE_SCHEMA_INFO.getDataInterval());\n+    final ResultLevelCachingQueryRunner<Result<TimeseriesResultValue>> queryRunner1 = createQueryRunner(\n+        newCacheConfig(false, true),\n+        query\n+    );\n+\n+    final Sequence<Result<TimeseriesResultValue>> sequence1 = queryRunner1.run(\n+        QueryPlus.wrap(query),\n+        responseContext()\n+    );\n+    final List<Result<TimeseriesResultValue>> results1 = sequence1.toList();\n+    Assert.assertEquals(0, cache.getStats().getNumHits());\n+\n+    final ResultLevelCachingQueryRunner<Result<TimeseriesResultValue>> queryRunner2 = createQueryRunner(\n+        newCacheConfig(false, true),\n+        query\n+    );\n+\n+    final Sequence<Result<TimeseriesResultValue>> sequence2 = queryRunner2.run(\n+        QueryPlus.wrap(query),\n+        responseContext()\n+    );\n+    final List<Result<TimeseriesResultValue>> results2 = sequence2.toList();\n+    Assert.assertEquals(results1, results2);\n+    Assert.assertEquals(0, cache.getStats().getNumHits());\n+  }\n+\n+  @Test\n+  public void testPopulateAndNotUse()\n+  {\n+    prepareCluster(10);\n+    final Query<Result<TimeseriesResultValue>> query = timeseriesQuery(BASE_SCHEMA_INFO.getDataInterval());\n+    final ResultLevelCachingQueryRunner<Result<TimeseriesResultValue>> queryRunner1 = createQueryRunner(\n+        newCacheConfig(true, true),\n+        query\n+    );\n+\n+    final Sequence<Result<TimeseriesResultValue>> sequence1 = queryRunner1.run(\n+        QueryPlus.wrap(query),\n+        responseContext()\n+    );\n+    final List<Result<TimeseriesResultValue>> results1 = sequence1.toList();\n+    Assert.assertEquals(0, cache.getStats().getNumHits());\n+\n+    final ResultLevelCachingQueryRunner<Result<TimeseriesResultValue>> queryRunner2 = createQueryRunner(\n+        newCacheConfig(true, false),\n+        query\n+    );\n+\n+    final Sequence<Result<TimeseriesResultValue>> sequence2 = queryRunner2.run(\n+        QueryPlus.wrap(query),\n+        responseContext()\n+    );\n+    final List<Result<TimeseriesResultValue>> results2 = sequence2.toList();\n+    Assert.assertEquals(results1, results2);\n+    Assert.assertEquals(0, cache.getStats().getNumHits());\n+  }\n+\n+  @Test\n+  public void testNotPopulateAndUse()\n+  {\n+    prepareCluster(10);\n+    final Query<Result<TimeseriesResultValue>> query = timeseriesQuery(BASE_SCHEMA_INFO.getDataInterval());\n+    final ResultLevelCachingQueryRunner<Result<TimeseriesResultValue>> queryRunner1 = createQueryRunner(\n+        newCacheConfig(false, true),\n+        query\n+    );\n+\n+    final Sequence<Result<TimeseriesResultValue>> sequence1 = queryRunner1.run(\n+        QueryPlus.wrap(query),\n+        responseContext()\n+    );\n+    final List<Result<TimeseriesResultValue>> results1 = sequence1.toList();\n+    Assert.assertEquals(0, cache.getStats().getNumHits());\n+\n+    final ResultLevelCachingQueryRunner<Result<TimeseriesResultValue>> queryRunner2 = createQueryRunner(\n+        newCacheConfig(true, true),\n+        query\n+    );\n+\n+    final Sequence<Result<TimeseriesResultValue>> sequence2 = queryRunner2.run(\n+        QueryPlus.wrap(query),\n+        responseContext()\n+    );\n+    final List<Result<TimeseriesResultValue>> results2 = sequence2.toList();\n+    Assert.assertEquals(results1, results2);\n+    Assert.assertEquals(0, cache.getStats().getNumHits());\n+  }\n+\n+  @Test\n+  public void testPopulateAndUse()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY2NDExNA=="}, "originalCommit": {"oid": "99ff019032208c7fa349c827e276fb52cbb23948"}, "originalPosition": 145}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3155, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}