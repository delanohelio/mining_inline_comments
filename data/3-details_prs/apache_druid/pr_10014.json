{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMjkzNzQy", "number": 10014, "title": "ROUND and having comparators correctly handle special double values", "bodyText": "Description\nDouble.NaN, Double.POSITIVE_INFINITY and Double.NEGATIVE_INFINITY are not real\nnumbers. Because of this, they can not be converted to BigDecimal and instead\nthrow a NumberFormatException.\nThis change adds support for calculations that produce these numbers either\nfor use in the ROUND function or the HavingSpecMetricComparator by not\nattempting to convert the number to a BigDecimal.\nThe bug in ROUND was first introduced in #7224 where we added the ability to\nround to any decimal place. This PR changes the behavior to treat Double.NaN as 0,\nDouble.POSITIVE_INFINITY as DOUBLE.MAX_VALUE and Double.NEGATIVE_INFINITY as\n-1 * Double.MAX_VALUE.\nThis behavior deviates from Postrges which throws an exception.\n\nThis PR has:\n\n been self-reviewed.\n added documentation for new or modified features or behaviors.\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-06-10T08:33:26Z", "url": "https://github.com/apache/druid/pull/10014", "merged": true, "mergeCommit": {"oid": "4e483a70b452e50eb11d4cdb5b099854800913e4"}, "closed": true, "closedAt": "2020-06-16T23:09:48Z", "author": {"login": "suneet-s"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcp1SmsAH2gAyNDMyMjkzNzQyOmJlYTMyMTAxOWFlODcyOTZiM2ZlMWU1M2FjZTRiM2I1NzYwMTJhNWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcr9OdtAFqTQzMTk0MjU5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bea321019ae87296b3fe1e53ace4b3b576012a5b", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/bea321019ae87296b3fe1e53ace4b3b576012a5b", "committedDate": "2020-06-10T08:22:16Z", "message": "ROUND and having comparators correctly handle doubles\n\nDouble.NaN, Double.POSITIVE_INFINITY and Double.NEGATIVE_INFINITY are not real\nnumbers. Because of this, they can not be converted to BigDecimal and instead\nthrow a NumberFormatException.\n\nThis change adds support for calculations that produce these numbers either\nfor use in the `ROUND` function or the HavingSpecMetricComparator by not\nattempting to convert the number to a BigDecimal.\n\nThe bug in ROUND was first introduced in #7224 where we added the ability to\nround to any decimal place. This PR changes the behavior back to using\n`Math.round` if we recognize a number that can not be converted to a\nBigDecimal."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3ODM0ODgw", "url": "https://github.com/apache/druid/pull/10014#pullrequestreview-427834880", "createdAt": "2020-06-10T08:37:21Z", "commit": {"oid": "bea321019ae87296b3fe1e53ace4b3b576012a5b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODozNzoyMVrOGhqxQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODozNzoyMVrOGhqxQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1NjkyOA==", "bodyText": "I wasn't sure how to deal with non numbers here, so I decided to leave the behavior as is and let it fail. It's unclear to me if Calcite will allow us to get here. In my local testing, I've seen NumberFormatExceptions thrown in Calcite when I tried to write sql expressions that would compute to Nan or infinity (like 0D / 0).\nMy thoughts were this is an edge case so it's ok to leave this behavior as is.", "url": "https://github.com/apache/druid/pull/10014#discussion_r437956928", "createdAt": "2020-06-10T08:37:21Z", "author": {"login": "suneet-s"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/planner/DruidRexExecutor.java", "diffHunk": "@@ -122,6 +122,7 @@ public void reduce(\n             if (exprResult.type() == ExprType.LONG) {\n               bigDecimal = BigDecimal.valueOf(exprResult.asLong());\n             } else {\n+              // if exprResult evaluates to Nan or infinity, this will throw a NumberFormatException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea321019ae87296b3fe1e53ace4b3b576012a5b"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac09d884279cbc3eb366504c3492c067a6d177e6", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/ac09d884279cbc3eb366504c3492c067a6d177e6", "committedDate": "2020-06-10T14:41:21Z", "message": "Add tests and fix spellcheck"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "526964cc2fad25cce996a475825f2f80f83b6bab", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/526964cc2fad25cce996a475825f2f80f83b6bab", "committedDate": "2020-06-10T15:52:12Z", "message": "update error message in ExpressionsTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MzcxNjA5", "url": "https://github.com/apache/druid/pull/10014#pullrequestreview-429371609", "createdAt": "2020-06-11T23:57:26Z", "commit": {"oid": "526964cc2fad25cce996a475825f2f80f83b6bab"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMzo1NzoyN1rOGiygog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMDowNDowN1rOGiyncw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzMjMyMg==", "bodyText": "explicitly mention positive and negative infinity", "url": "https://github.com/apache/druid/pull/10014#discussion_r439132322", "createdAt": "2020-06-11T23:57:27Z", "author": {"login": "maytasm"}, "path": "docs/misc/math-expr.md", "diffHunk": "@@ -141,7 +141,7 @@ See javadoc of java.lang.Math for detailed explanation for each function.\n |pow|pow(x, y) would return the value of the x raised to the power of y|\n |remainder|remainder(x, y) would return the remainder operation on two arguments as prescribed by the IEEE 754 standard|\n |rint|rint(x) would return value that is closest in value to x and is equal to a mathematical integer|\n-|round|round(x, y) would return the value of the x rounded to the y decimal places. While x can be an integer or floating-point number, y must be an integer. The type of the return value is specified by that of x. y defaults to 0 if omitted. When y is negative, x is rounded on the left side of the y decimal points.|\n+|round|round(x, y) would return the value of the x rounded to the y decimal places. While x can be an integer or floating-point number, y must be an integer. The type of the return value is specified by that of x. y defaults to 0 if omitted. When y is negative, x is rounded on the left side of the y decimal points. If x is either `NaN` or infinity, this will return 0. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "526964cc2fad25cce996a475825f2f80f83b6bab"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzMjM1Ng==", "bodyText": "explicitly mention positive and negative infinity", "url": "https://github.com/apache/druid/pull/10014#discussion_r439132356", "createdAt": "2020-06-11T23:57:34Z", "author": {"login": "maytasm"}, "path": "docs/querying/sql.md", "diffHunk": "@@ -287,7 +287,7 @@ to FLOAT. At runtime, Druid will widen 32-bit floats to 64-bit for most expressi\n |`SQRT(expr)`|Square root.|\n |`TRUNCATE(expr[, digits])`|Truncate expr to a specific number of decimal digits. If digits is negative, then this truncates that many places to the left of the decimal point. Digits defaults to zero if not specified.|\n |`TRUNC(expr[, digits])`|Synonym for `TRUNCATE`.|\n-|`ROUND(expr[, digits])`|`ROUND(x, y)` would return the value of the x rounded to the y decimal places. While x can be an integer or floating-point number, y must be an integer. The type of the return value is specified by that of x. y defaults to 0 if omitted. When y is negative, x is rounded on the left side of the y decimal points.|\n+|`ROUND(expr[, digits])`|`ROUND(x, y)` would return the value of the x rounded to the y decimal places. While x can be an integer or floating-point number, y must be an integer. The type of the return value is specified by that of x. y defaults to 0 if omitted. When y is negative, x is rounded on the left side of the y decimal points. If `expr` evaluates to either `NaN` or infinity, this will return 0. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "526964cc2fad25cce996a475825f2f80f83b6bab"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzMzAwNA==", "bodyText": "Should we use Math.round(val) here instead of hard-code to 0?", "url": "https://github.com/apache/druid/pull/10014#discussion_r439133004", "createdAt": "2020-06-12T00:00:03Z", "author": {"login": "maytasm"}, "path": "core/src/main/java/org/apache/druid/math/expr/Function.java", "diffHunk": "@@ -737,7 +745,12 @@ private ExprEval eval(ExprEval param, int scale)\n       if (param.type() == ExprType.LONG) {\n         return ExprEval.of(BigDecimal.valueOf(param.asLong()).setScale(scale, RoundingMode.HALF_UP).longValue());\n       } else if (param.type() == ExprType.DOUBLE) {\n-        return ExprEval.of(BigDecimal.valueOf(param.asDouble()).setScale(scale, RoundingMode.HALF_UP).doubleValue());\n+        double val = param.asDouble();\n+        if (Double.isNaN(val) || val == Double.POSITIVE_INFINITY || val == Double.NEGATIVE_INFINITY) {\n+          // This is the behavior of Math.round()\n+          return ExprEval.of(0L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "526964cc2fad25cce996a475825f2f80f83b6bab"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzNDA2Nw==", "bodyText": "Wondering what is your thought on making this reduce to value of 0 (same as the other stuff)", "url": "https://github.com/apache/druid/pull/10014#discussion_r439134067", "createdAt": "2020-06-12T00:04:07Z", "author": {"login": "maytasm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/planner/DruidRexExecutor.java", "diffHunk": "@@ -122,6 +122,7 @@ public void reduce(\n             if (exprResult.type() == ExprType.LONG) {\n               bigDecimal = BigDecimal.valueOf(exprResult.asLong());\n             } else {\n+              // if exprResult evaluates to Nan or infinity, this will throw a NumberFormatException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1NjkyOA=="}, "originalCommit": {"oid": "bea321019ae87296b3fe1e53ace4b3b576012a5b"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "643d4fd24f6bed18f183254068da0492aa2cc8a5", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/643d4fd24f6bed18f183254068da0492aa2cc8a5", "committedDate": "2020-06-15T22:53:50Z", "message": "Merge remote-tracking branch 'upstream/master' into bigDecimal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c3f405b83dd9b1c9cc04cd5e96adf53c934868d", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/2c3f405b83dd9b1c9cc04cd5e96adf53c934868d", "committedDate": "2020-06-16T01:15:22Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMDk3NTA1", "url": "https://github.com/apache/druid/pull/10014#pullrequestreview-431097505", "createdAt": "2020-06-16T01:26:24Z", "commit": {"oid": "2c3f405b83dd9b1c9cc04cd5e96adf53c934868d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7199359cfb938f79cd1d640faefd50d74eb3a078", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/7199359cfb938f79cd1d640faefd50d74eb3a078", "committedDate": "2020-06-16T15:21:51Z", "message": "fix up round for infinity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81fd9e80020eb483867a45e2505986354537b11a", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/81fd9e80020eb483867a45e2505986354537b11a", "committedDate": "2020-06-16T18:08:32Z", "message": "round non numeric doubles returns a double"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac481ec18ca09a3670e18cacb7aa0f793a786baa", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/ac481ec18ca09a3670e18cacb7aa0f793a786baa", "committedDate": "2020-06-16T18:09:10Z", "message": "Merge remote-tracking branch 'upstream/master' into bigDecimal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb8fb51e1a637b04ac794f4ed82e357a0797b96e", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/eb8fb51e1a637b04ac794f4ed82e357a0797b96e", "committedDate": "2020-06-16T19:32:13Z", "message": "fix spotbugs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxOTEwMDE4", "url": "https://github.com/apache/druid/pull/10014#pullrequestreview-431910018", "createdAt": "2020-06-16T21:36:48Z", "commit": {"oid": "eb8fb51e1a637b04ac794f4ed82e357a0797b96e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTozNjo0OFrOGkuDkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTozODowMFrOGkuFew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1NjQ5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |round|round(x, y) would return the value of the x rounded to the y decimal places. While x can be an integer or floating-point number, y must be an integer. The type of the return value is specified by that of x. y defaults to 0 if omitted. When y is negative, x is rounded on the left side of the y decimal points. If x is `NaN`, this will return 0. |\n          \n          \n            \n            |round|round(x, y) would return the value of the x rounded to the y decimal places. While x can be an integer or floating-point number, y must be an integer. The type of the return value is specified by that of x. y defaults to 0 if omitted. When y is negative, x is rounded on the left side of the y decimal points. If x is `NaN`, x will return 0. If x is infinity, x will be converted to the nearest finite double. |", "url": "https://github.com/apache/druid/pull/10014#discussion_r441156498", "createdAt": "2020-06-16T21:36:48Z", "author": {"login": "suneet-s"}, "path": "docs/misc/math-expr.md", "diffHunk": "@@ -141,7 +141,7 @@ See javadoc of java.lang.Math for detailed explanation for each function.\n |pow|pow(x, y) would return the value of the x raised to the power of y|\n |remainder|remainder(x, y) would return the remainder operation on two arguments as prescribed by the IEEE 754 standard|\n |rint|rint(x) would return value that is closest in value to x and is equal to a mathematical integer|\n-|round|round(x, y) would return the value of the x rounded to the y decimal places. While x can be an integer or floating-point number, y must be an integer. The type of the return value is specified by that of x. y defaults to 0 if omitted. When y is negative, x is rounded on the left side of the y decimal points.|\n+|round|round(x, y) would return the value of the x rounded to the y decimal places. While x can be an integer or floating-point number, y must be an integer. The type of the return value is specified by that of x. y defaults to 0 if omitted. When y is negative, x is rounded on the left side of the y decimal points. If x is `NaN`, this will return 0. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb8fb51e1a637b04ac794f4ed82e357a0797b96e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1Njk4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |`ROUND(expr[, digits])`|`ROUND(x, y)` would return the value of the x rounded to the y decimal places. While x can be an integer or floating-point number, y must be an integer. The type of the return value is specified by that of x. y defaults to 0 if omitted. When y is negative, x is rounded on the left side of the y decimal points. If `expr` evaluates to either `NaN`, this will return 0. |\n          \n          \n            \n            |`ROUND(expr[, digits])`|`ROUND(x, y)` would return the value of the x rounded to the y decimal places. While x can be an integer or floating-point number, y must be an integer. The type of the return value is specified by that of x. y defaults to 0 if omitted. When y is negative, x is rounded on the left side of the y decimal points. If `expr` evaluates to either `NaN`, `expr` will be converted to 0. If `expr` is infinity, `expr` will be converted to the nearest finite double. |", "url": "https://github.com/apache/druid/pull/10014#discussion_r441156987", "createdAt": "2020-06-16T21:38:00Z", "author": {"login": "suneet-s"}, "path": "docs/querying/sql.md", "diffHunk": "@@ -287,7 +287,7 @@ to FLOAT. At runtime, Druid will widen 32-bit floats to 64-bit for most expressi\n |`SQRT(expr)`|Square root.|\n |`TRUNCATE(expr[, digits])`|Truncate expr to a specific number of decimal digits. If digits is negative, then this truncates that many places to the left of the decimal point. Digits defaults to zero if not specified.|\n |`TRUNC(expr[, digits])`|Synonym for `TRUNCATE`.|\n-|`ROUND(expr[, digits])`|`ROUND(x, y)` would return the value of the x rounded to the y decimal places. While x can be an integer or floating-point number, y must be an integer. The type of the return value is specified by that of x. y defaults to 0 if omitted. When y is negative, x is rounded on the left side of the y decimal points.|\n+|`ROUND(expr[, digits])`|`ROUND(x, y)` would return the value of the x rounded to the y decimal places. While x can be an integer or floating-point number, y must be an integer. The type of the return value is specified by that of x. y defaults to 0 if omitted. When y is negative, x is rounded on the left side of the y decimal points. If `expr` evaluates to either `NaN`, this will return 0. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb8fb51e1a637b04ac794f4ed82e357a0797b96e"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75c3581bf297319b8b05e24f403db47da4275db9", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/75c3581bf297319b8b05e24f403db47da4275db9", "committedDate": "2020-06-16T21:38:48Z", "message": "Update docs/misc/math-expr.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d69625603f5eff7a1a4f83b4d98b1450a58b967", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/1d69625603f5eff7a1a4f83b4d98b1450a58b967", "committedDate": "2020-06-16T21:38:55Z", "message": "Update docs/querying/sql.md"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxOTQyNTkw", "url": "https://github.com/apache/druid/pull/10014#pullrequestreview-431942590", "createdAt": "2020-06-16T22:44:50Z", "commit": {"oid": "eb8fb51e1a637b04ac794f4ed82e357a0797b96e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2059, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}