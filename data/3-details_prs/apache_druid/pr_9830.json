{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzOTIyNTg5", "number": 9830, "title": "Fail incorrectly constructed join queries", "bodyText": "Description\nThis change validates an assumption made HashJoinSegmentStorageAdapter. It was assumed that the filter used during join filter pre-analysis is the same as the filter passed to the HashJoinSegmentStorageAdapter to make a cursor. As pointed out in #9792, this is not always the case. This change makes it so that any query that violates this assumption fails rather than showing incorrect results.\nThe issue is surfaced when nested groupby queries operate on a non-table datasource. This is because the GroupByQueryQueryToolChest has optimizations built in to it that pushes down the filters from the outer group by to the inner query when making the cursor. So the pre-join analysis is invalid. The result of this bug is that as of 0.18 filters in the outer groupBy are ignored.\nThis PR fails the query rather than providing the user with invalid results. A follow up PR is needed to address #9792 so that the query executes correctly.\nKey changes\nThis PR introduces an annotation SubclassesMustOverrideEqualsAndHashCode to indicate that the default implementation of equals and hashcode on a class is insufficient because it may be used in equals comparisons elsewhere.\nA test SubclassesMustOverrideEqualsAndHashCodeTest is implemented to find any implementations that violate this constraint.\nThis PR also adds EqualsVerifier tests for all implementations that required a custom equals and hashcode implementation.\nAs a result of this dependence, some annonymous inner classes needed to be implemented as static inner classes.\nThis PR has:\n\n been self-reviewed.\n added unit tests or modified existing tests to cover new code paths.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-05-06T07:24:39Z", "url": "https://github.com/apache/druid/pull/9830", "merged": true, "mergeCommit": {"oid": "b0167295d7c621bfa9722b7203bc7ca08fc76495"}, "closed": true, "closedAt": "2020-05-13T21:23:05Z", "author": {"login": "suneet-s"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcejWA8AH2gAyNDEzOTIyNTg5OjYyYjRkZTViNWQzZGQ4MzkwYjU5NzIwY2NkNzk4ZDEyZjRkZWI3MjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcg_bYRgFqTQxMTI5ODk1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "62b4de5b5d3dd8390b59720ccd798d12f4deb724", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/62b4de5b5d3dd8390b59720ccd798d12f4deb724", "committedDate": "2020-05-06T07:14:32Z", "message": "Fail incorrectly constructed join queries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb8b2b265fd6e5fd0ee68e9f413d8c5e0b8f289e", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/cb8b2b265fd6e5fd0ee68e9f413d8c5e0b8f289e", "committedDate": "2020-05-06T22:11:54Z", "message": "wip annotation for equals implementations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MTA5OTkw", "url": "https://github.com/apache/druid/pull/9830#pullrequestreview-407109990", "createdAt": "2020-05-07T02:28:01Z", "commit": {"oid": "62b4de5b5d3dd8390b59720ccd798d12f4deb724"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "150f785df162b61526eae2e1036bda61b66e49e8", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/150f785df162b61526eae2e1036bda61b66e49e8", "committedDate": "2020-05-08T16:19:52Z", "message": "Merge remote-tracking branch 'upstream/master' into groupByBug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa223780f067778a5fdf106adeab0c7e72d7059e", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/aa223780f067778a5fdf106adeab0c7e72d7059e", "committedDate": "2020-05-11T22:49:53Z", "message": "Add equals tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d11d48742ed7cfcae08b3a300815b62dd4bab71e", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/d11d48742ed7cfcae08b3a300815b62dd4bab71e", "committedDate": "2020-05-11T23:05:17Z", "message": "Merge remote-tracking branch 'upstream/master' into groupByBug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a7697794301cd1c278cd294f4c6e6317f0ac450", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/5a7697794301cd1c278cd294f4c6e6317f0ac450", "committedDate": "2020-05-12T01:14:22Z", "message": "fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "077710eadad760b334586f93ee1fb929911af78e", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/077710eadad760b334586f93ee1fb929911af78e", "committedDate": "2020-05-12T15:47:54Z", "message": "Actually fix the tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNTQzNzU3", "url": "https://github.com/apache/druid/pull/9830#pullrequestreview-410543757", "createdAt": "2020-05-13T02:21:20Z", "commit": {"oid": "077710eadad760b334586f93ee1fb929911af78e"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMjoyMToyMVrOGUfOXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMjo1Nzo0N1rOGUfyEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEzNjI4Nw==", "bodyText": "A reasonable default for Expr could be to use the stringified form for hashCode and equals:\n  /**\n   * Convert the {@link Expr} back into parseable string that when parsed with\n   * {@link Parser#parse(String, ExprMacroTable)} will produce an equivalent {@link Expr}.\n   */\n  String stringify();", "url": "https://github.com/apache/druid/pull/9830#discussion_r424136287", "createdAt": "2020-05-13T02:21:21Z", "author": {"login": "jon-wei"}, "path": "core/src/main/java/org/apache/druid/math/expr/Expr.java", "diffHunk": "@@ -494,6 +496,18 @@ public String toString()\n   {\n     return NULL_LITERAL;\n   }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    return getClass().hashCode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "077710eadad760b334586f93ee1fb929911af78e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEzOTYyNA==", "bodyText": "This should compare value instead", "url": "https://github.com/apache/druid/pull/9830#discussion_r424139624", "createdAt": "2020-05-13T02:34:27Z", "author": {"login": "jon-wei"}, "path": "processing/src/main/java/org/apache/druid/query/filter/SelectorPredicateFactory.java", "diffHunk": "@@ -147,4 +148,23 @@ private void initDoublePredicate()\n       }\n     }\n   }\n+\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    SelectorPredicateFactory that = (SelectorPredicateFactory) o;\n+    return Objects.equals(initLock, that.initLock);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "077710eadad760b334586f93ee1fb929911af78e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0NTQyNQ==", "bodyText": "Pattern doesn't implement equals(), you could use Pattern.toString() here and elsewhere", "url": "https://github.com/apache/druid/pull/9830#discussion_r424145425", "createdAt": "2020-05-13T02:57:47Z", "author": {"login": "jon-wei"}, "path": "processing/src/main/java/org/apache/druid/query/filter/LikeDimFilter.java", "diffHunk": "@@ -364,6 +328,79 @@ public SuffixMatch getSuffixMatch()\n       return suffixMatch;\n     }\n \n+    @VisibleForTesting\n+    static class PatternDruidPredicateFactory implements DruidPredicateFactory\n+    {\n+      private final ExtractionFn extractionFn;\n+      private final Pattern pattern;\n+\n+      PatternDruidPredicateFactory(ExtractionFn extractionFn, Pattern pattern)\n+      {\n+        this.extractionFn = extractionFn;\n+        this.pattern = pattern;\n+      }\n+\n+      @Override\n+      public Predicate<String> makeStringPredicate()\n+      {\n+        if (extractionFn != null) {\n+          return input -> matches(extractionFn.apply(input), pattern);\n+        } else {\n+          return input -> matches(input, pattern);\n+        }\n+      }\n+\n+      @Override\n+      public DruidLongPredicate makeLongPredicate()\n+      {\n+        if (extractionFn != null) {\n+          return input -> matches(extractionFn.apply(input), pattern);\n+        } else {\n+          return input -> matches(String.valueOf(input), pattern);\n+        }\n+      }\n+\n+      @Override\n+      public DruidFloatPredicate makeFloatPredicate()\n+      {\n+        if (extractionFn != null) {\n+          return input -> matches(extractionFn.apply(input), pattern);\n+        } else {\n+          return input -> matches(String.valueOf(input), pattern);\n+        }\n+      }\n+\n+      @Override\n+      public DruidDoublePredicate makeDoublePredicate()\n+      {\n+        if (extractionFn != null) {\n+          return input -> matches(extractionFn.apply(input), pattern);\n+        } else {\n+          return input -> matches(String.valueOf(input), pattern);\n+        }\n+      }\n+\n+      @Override\n+      public boolean equals(Object o)\n+      {\n+        if (this == o) {\n+          return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+          return false;\n+        }\n+        PatternDruidPredicateFactory that = (PatternDruidPredicateFactory) o;\n+        return Objects.equals(extractionFn, that.extractionFn) &&\n+               Objects.equals(pattern, that.pattern);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "077710eadad760b334586f93ee1fb929911af78e"}, "originalPosition": 129}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e9e2ce7bc9b8a3e405574b79182029ef211cc2a", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/9e9e2ce7bc9b8a3e405574b79182029ef211cc2a", "committedDate": "2020-05-13T04:12:59Z", "message": "Merge remote-tracking branch 'upstream/master' into groupByBug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fa929deb3cb66d46e7b4e8996c326f26878f3ef", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/6fa929deb3cb66d46e7b4e8996c326f26878f3ef", "committedDate": "2020-05-13T04:43:23Z", "message": "Address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a5fbc8f4a9f5e0eb5492881508757121ae8266f", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/4a5fbc8f4a9f5e0eb5492881508757121ae8266f", "committedDate": "2020-05-13T16:19:05Z", "message": "Merge remote-tracking branch 'upstream/master' into groupByBug"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMjI1Mzcw", "url": "https://github.com/apache/druid/pull/9830#pullrequestreview-411225370", "createdAt": "2020-05-13T19:16:26Z", "commit": {"oid": "6fa929deb3cb66d46e7b4e8996c326f26878f3ef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOToxNjoyN1rOGU__wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOToxNjoyN1rOGU__wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3MzIxNg==", "bodyText": "I think the hashCode should use the toString as well", "url": "https://github.com/apache/druid/pull/9830#discussion_r424673216", "createdAt": "2020-05-13T19:16:27Z", "author": {"login": "jon-wei"}, "path": "processing/src/main/java/org/apache/druid/segment/filter/RegexFilter.java", "diffHunk": "@@ -100,7 +100,7 @@ public boolean equals(Object o)\n         return false;\n       }\n       PatternDruidPredicateFactory that = (PatternDruidPredicateFactory) o;\n-      return Objects.equals(pattern, that.pattern);\n+      return Objects.equals(pattern.toString(), that.pattern.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fa929deb3cb66d46e7b4e8996c326f26878f3ef"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6dea2dcb9cb2a117254d163319868b1d6ea3836a", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/6dea2dcb9cb2a117254d163319868b1d6ea3836a", "committedDate": "2020-05-13T20:10:42Z", "message": "prohibit Pattern.hashCode()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMjk4OTUy", "url": "https://github.com/apache/druid/pull/9830#pullrequestreview-411298952", "createdAt": "2020-05-13T21:05:35Z", "commit": {"oid": "6dea2dcb9cb2a117254d163319868b1d6ea3836a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2302, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}