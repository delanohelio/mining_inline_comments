{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNjkxNDI5", "number": 10318, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzo1Mjo1N1rOEcdNMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDowMDo1MlrOEculXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4Mjc0MDk5OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/UnionQueryRunner.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzo1Mjo1N1rOHHAKDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDo0NzozMVrOHHdJ6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEwNDY1NQ==", "bodyText": "can we use more explicit condition such as analysis.getBaseDataSource() instanceof UnionDataSource than this analysis.getBaseTableDataSources().get().size() != 1?  May be the assumption around number of tables will not be valid in future.", "url": "https://github.com/apache/druid/pull/10318#discussion_r477104655", "createdAt": "2020-08-26T07:52:57Z", "author": {"login": "abhishekagarwal87"}, "path": "processing/src/main/java/org/apache/druid/query/UnionQueryRunner.java", "diffHunk": "@@ -41,30 +42,27 @@ public UnionQueryRunner(\n   public Sequence<T> run(final QueryPlus<T> queryPlus, final ResponseContext responseContext)\n   {\n     Query<T> query = queryPlus.getQuery();\n-    DataSource dataSource = query.getDataSource();\n-    if (dataSource instanceof UnionDataSource) {\n+\n+    final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(query.getDataSource());\n+\n+    if (analysis.isConcreteTableBased() && analysis.getBaseTableDataSources().get().size() != 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bc0c3b4b585afab4865057245a7d0266fa4a94b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ0MzA4MQ==", "bodyText": "Hmm, I was trying to avoid using instanceof checks outside of the DataSourceAnalysis class, and instead stick to cleanly defined interfaces as much as possible. So, I designed dataSourceAnalysis.getBaseTableDataSources() to encapsulate this logic (it has the instanceof check you're talking about).\nDo you think it'd be better to instead move the logic to UnionQueryRunner?", "url": "https://github.com/apache/druid/pull/10318#discussion_r477443081", "createdAt": "2020-08-26T16:46:53Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/UnionQueryRunner.java", "diffHunk": "@@ -41,30 +42,27 @@ public UnionQueryRunner(\n   public Sequence<T> run(final QueryPlus<T> queryPlus, final ResponseContext responseContext)\n   {\n     Query<T> query = queryPlus.getQuery();\n-    DataSource dataSource = query.getDataSource();\n-    if (dataSource instanceof UnionDataSource) {\n+\n+    final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(query.getDataSource());\n+\n+    if (analysis.isConcreteTableBased() && analysis.getBaseTableDataSources().get().size() != 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEwNDY1NQ=="}, "originalCommit": {"oid": "2bc0c3b4b585afab4865057245a7d0266fa4a94b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2Mjc2OQ==", "bodyText": "In that case, It would also be fine to have a static method isUnionDataSource(DataSource) within DataSourceAnalysis class itself that can be used here as well as in dataSourceAnalysis.getBaseTableDataSources()", "url": "https://github.com/apache/druid/pull/10318#discussion_r477462769", "createdAt": "2020-08-26T17:19:17Z", "author": {"login": "abhishekagarwal87"}, "path": "processing/src/main/java/org/apache/druid/query/UnionQueryRunner.java", "diffHunk": "@@ -41,30 +42,27 @@ public UnionQueryRunner(\n   public Sequence<T> run(final QueryPlus<T> queryPlus, final ResponseContext responseContext)\n   {\n     Query<T> query = queryPlus.getQuery();\n-    DataSource dataSource = query.getDataSource();\n-    if (dataSource instanceof UnionDataSource) {\n+\n+    final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(query.getDataSource());\n+\n+    if (analysis.isConcreteTableBased() && analysis.getBaseTableDataSources().get().size() != 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEwNDY1NQ=="}, "originalCommit": {"oid": "2bc0c3b4b585afab4865057245a7d0266fa4a94b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4NTUwOA==", "bodyText": "Hmm, in thinking about your comment I realized there is a bug here. The code doesn't work right if you have a UnionDataSource of a single TableDataSource. I'll fix it and add a test for this, and while doing so, I'll consider your comments about how to structure the code.\nThanks for the comments!", "url": "https://github.com/apache/druid/pull/10318#discussion_r477485508", "createdAt": "2020-08-26T17:58:12Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/UnionQueryRunner.java", "diffHunk": "@@ -41,30 +42,27 @@ public UnionQueryRunner(\n   public Sequence<T> run(final QueryPlus<T> queryPlus, final ResponseContext responseContext)\n   {\n     Query<T> query = queryPlus.getQuery();\n-    DataSource dataSource = query.getDataSource();\n-    if (dataSource instanceof UnionDataSource) {\n+\n+    final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(query.getDataSource());\n+\n+    if (analysis.isConcreteTableBased() && analysis.getBaseTableDataSources().get().size() != 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEwNDY1NQ=="}, "originalCommit": {"oid": "2bc0c3b4b585afab4865057245a7d0266fa4a94b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwMjI5NQ==", "bodyText": "I pushed up a new commit that changes the approach a bit; let me know what you think. The getBaseTableDataSources() concept is gone and replaced by two separate methods, getBaseTableDataSource() and getBaseUnionDataSource().", "url": "https://github.com/apache/druid/pull/10318#discussion_r477502295", "createdAt": "2020-08-26T18:28:10Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/UnionQueryRunner.java", "diffHunk": "@@ -41,30 +42,27 @@ public UnionQueryRunner(\n   public Sequence<T> run(final QueryPlus<T> queryPlus, final ResponseContext responseContext)\n   {\n     Query<T> query = queryPlus.getQuery();\n-    DataSource dataSource = query.getDataSource();\n-    if (dataSource instanceof UnionDataSource) {\n+\n+    final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(query.getDataSource());\n+\n+    if (analysis.isConcreteTableBased() && analysis.getBaseTableDataSources().get().size() != 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEwNDY1NQ=="}, "originalCommit": {"oid": "2bc0c3b4b585afab4865057245a7d0266fa4a94b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU1NTk0MA==", "bodyText": "Looks good now.", "url": "https://github.com/apache/druid/pull/10318#discussion_r477555940", "createdAt": "2020-08-26T20:01:14Z", "author": {"login": "abhishekagarwal87"}, "path": "processing/src/main/java/org/apache/druid/query/UnionQueryRunner.java", "diffHunk": "@@ -41,30 +42,27 @@ public UnionQueryRunner(\n   public Sequence<T> run(final QueryPlus<T> queryPlus, final ResponseContext responseContext)\n   {\n     Query<T> query = queryPlus.getQuery();\n-    DataSource dataSource = query.getDataSource();\n-    if (dataSource instanceof UnionDataSource) {\n+\n+    final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(query.getDataSource());\n+\n+    if (analysis.isConcreteTableBased() && analysis.getBaseTableDataSources().get().size() != 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEwNDY1NQ=="}, "originalCommit": {"oid": "2bc0c3b4b585afab4865057245a7d0266fa4a94b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU3OTc1NA==", "bodyText": "Great!", "url": "https://github.com/apache/druid/pull/10318#discussion_r477579754", "createdAt": "2020-08-26T20:47:31Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/UnionQueryRunner.java", "diffHunk": "@@ -41,30 +42,27 @@ public UnionQueryRunner(\n   public Sequence<T> run(final QueryPlus<T> queryPlus, final ResponseContext responseContext)\n   {\n     Query<T> query = queryPlus.getQuery();\n-    DataSource dataSource = query.getDataSource();\n-    if (dataSource instanceof UnionDataSource) {\n+\n+    final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(query.getDataSource());\n+\n+    if (analysis.isConcreteTableBased() && analysis.getBaseTableDataSources().get().size() != 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEwNDY1NQ=="}, "originalCommit": {"oid": "2bc0c3b4b585afab4865057245a7d0266fa4a94b"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTU4ODE0OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/UnionQueryRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDowMDo1MlrOHHbsKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDo0ODowMVrOHHdK7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU1NTc1Mg==", "bodyText": "is it optimization because of which this else if is not folded into else?", "url": "https://github.com/apache/druid/pull/10318#discussion_r477555752", "createdAt": "2020-08-26T20:00:52Z", "author": {"login": "abhishekagarwal87"}, "path": "processing/src/main/java/org/apache/druid/query/UnionQueryRunner.java", "diffHunk": "@@ -41,34 +44,51 @@ public UnionQueryRunner(\n   public Sequence<T> run(final QueryPlus<T> queryPlus, final ResponseContext responseContext)\n   {\n     Query<T> query = queryPlus.getQuery();\n-    DataSource dataSource = query.getDataSource();\n-    if (dataSource instanceof UnionDataSource) {\n \n-      return new MergeSequence<>(\n-          query.getResultOrdering(),\n-          Sequences.simple(\n-              Lists.transform(\n-                  ((UnionDataSource) dataSource).getDataSources(),\n-                  new Function<DataSource, Sequence<T>>()\n-                  {\n-                    @Override\n-                    public Sequence<T> apply(DataSource singleSource)\n-                    {\n-                      return baseRunner.run(\n-                          queryPlus.withQuery(\n-                              query.withDataSource(singleSource)\n-                                   // assign the subqueryId. this will be used to validate that every query servers\n-                                   // have responded per subquery in RetryQueryRunner\n-                                   .withDefaultSubQueryId()\n-                          ),\n-                          responseContext\n-                      );\n-                    }\n-                  }\n-              )\n-          )\n-      );\n+    final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(query.getDataSource());\n+\n+    if (analysis.isConcreteTableBased() && analysis.getBaseUnionDataSource().isPresent()) {\n+      // Union of tables.\n+\n+      final UnionDataSource unionDataSource = analysis.getBaseUnionDataSource().get();\n+\n+      if (unionDataSource.getDataSources().isEmpty()) {\n+        // Shouldn't happen, because UnionDataSource doesn't allow empty unions.\n+        throw new ISE(\"Unexpectedly received empty union\");\n+      } else if (unionDataSource.getDataSources().size() == 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "575b30d63e601d7b395161da0e9d3ceeb60f2806"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU4MDAxMg==", "bodyText": "Yeah, the idea is let's not create a MergeSequence if there's only going to be 1 thing.", "url": "https://github.com/apache/druid/pull/10318#discussion_r477580012", "createdAt": "2020-08-26T20:48:01Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/UnionQueryRunner.java", "diffHunk": "@@ -41,34 +44,51 @@ public UnionQueryRunner(\n   public Sequence<T> run(final QueryPlus<T> queryPlus, final ResponseContext responseContext)\n   {\n     Query<T> query = queryPlus.getQuery();\n-    DataSource dataSource = query.getDataSource();\n-    if (dataSource instanceof UnionDataSource) {\n \n-      return new MergeSequence<>(\n-          query.getResultOrdering(),\n-          Sequences.simple(\n-              Lists.transform(\n-                  ((UnionDataSource) dataSource).getDataSources(),\n-                  new Function<DataSource, Sequence<T>>()\n-                  {\n-                    @Override\n-                    public Sequence<T> apply(DataSource singleSource)\n-                    {\n-                      return baseRunner.run(\n-                          queryPlus.withQuery(\n-                              query.withDataSource(singleSource)\n-                                   // assign the subqueryId. this will be used to validate that every query servers\n-                                   // have responded per subquery in RetryQueryRunner\n-                                   .withDefaultSubQueryId()\n-                          ),\n-                          responseContext\n-                      );\n-                    }\n-                  }\n-              )\n-          )\n-      );\n+    final DataSourceAnalysis analysis = DataSourceAnalysis.forDataSource(query.getDataSource());\n+\n+    if (analysis.isConcreteTableBased() && analysis.getBaseUnionDataSource().isPresent()) {\n+      // Union of tables.\n+\n+      final UnionDataSource unionDataSource = analysis.getBaseUnionDataSource().get();\n+\n+      if (unionDataSource.getDataSources().isEmpty()) {\n+        // Shouldn't happen, because UnionDataSource doesn't allow empty unions.\n+        throw new ISE(\"Unexpectedly received empty union\");\n+      } else if (unionDataSource.getDataSources().size() == 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU1NTc1Mg=="}, "originalCommit": {"oid": "575b30d63e601d7b395161da0e9d3ceeb60f2806"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3119, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}