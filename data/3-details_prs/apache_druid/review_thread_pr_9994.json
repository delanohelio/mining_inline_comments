{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4NzYyNTY1", "number": 9994, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjo1NToxN1rOEDihyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMToyMToxOVrOEED69g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTQ2ODg4OnYy", "diffSide": "LEFT", "path": "processing/src/main/java/org/apache/druid/query/filter/vector/BooleanVectorValueMatcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjo1NToxN1rOGgnZ9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjo1NToxN1rOGgnZ9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg1MzIzNw==", "bodyText": "nit: maybe good to have unit tests for future proof.", "url": "https://github.com/apache/druid/pull/9994#discussion_r436853237", "createdAt": "2020-06-08T16:55:17Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/filter/vector/BooleanVectorValueMatcher.java", "diffHunk": "@@ -38,18 +36,6 @@ public static BooleanVectorValueMatcher of(final VectorSizeInspector selector, f\n     return new BooleanVectorValueMatcher(selector, matches);\n   }\n \n-  @Override\n-  public int getCurrentVectorSize()\n-  {\n-    return selector.getCurrentVectorSize();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a098d828504c48484837ab7a0447c786991815"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjk0MDA2OnYy", "diffSide": "RIGHT", "path": "processing/src/test/java/org/apache/druid/query/filter/vector/VectorValueMatcherColumnProcessorFactoryTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMToyMToxOVrOGhc6Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMjo1OTo1N1rOGhfPRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyOTgyMg==", "bodyText": "If value cardinality == 0, shouldn't it return this thing...\n      return new BaseVectorValueMatcher(selector)\n      {\n        final VectorMatch match = VectorMatch.wrap(new int[selector.getMaxVectorSize()]);\n\n        @Override\n        public ReadableVectorMatch match(final ReadableVectorMatch mask)\n        {\n          final int[] vector = selector.getRowVector();\n          final int[] selection = match.getSelection();\n\n          int numRows = 0;\n\n          for (int i = 0; i < mask.getSelectionSize(); i++) {\n            final int rowNum = mask.getSelection()[i];\n            if (predicate.apply(selector.lookupName(vector[rowNum]))) {\n              selection[numRows++] = rowNum;\n            }\n          }\n\n          match.setSelectionSize(numRows);\n          assert match.isValid(mask);\n          return match;\n        }\n      };", "url": "https://github.com/apache/druid/pull/9994#discussion_r437729822", "createdAt": "2020-06-09T21:21:19Z", "author": {"login": "maytasm"}, "path": "processing/src/test/java/org/apache/druid/query/filter/vector/VectorValueMatcherColumnProcessorFactoryTest.java", "diffHunk": "@@ -0,0 +1,277 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.filter.vector;\n+\n+import org.apache.druid.common.config.NullHandling;\n+import org.apache.druid.segment.IdLookup;\n+import org.apache.druid.segment.vector.MultiValueDimensionVectorSelector;\n+import org.apache.druid.segment.vector.SingleValueDimensionVectorSelector;\n+import org.apache.druid.segment.vector.VectorValueSelector;\n+import org.apache.druid.testing.InitializedNullHandlingTest;\n+import org.easymock.EasyMock;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class VectorValueMatcherColumnProcessorFactoryTest extends InitializedNullHandlingTest\n+{\n+  private static final int VECTOR_SIZE = 128;\n+  private static final int CURRENT_SIZE = 24;\n+  private VectorValueSelector vectorValueSelector;\n+\n+  @Before\n+  public void setup()\n+  {\n+    vectorValueSelector = EasyMock.createMock(VectorValueSelector.class);\n+    EasyMock.expect(vectorValueSelector.getCurrentVectorSize()).andReturn(CURRENT_SIZE).anyTimes();\n+    EasyMock.expect(vectorValueSelector.getMaxVectorSize()).andReturn(VECTOR_SIZE).anyTimes();\n+    EasyMock.replay(vectorValueSelector);\n+  }\n+\n+  @Test\n+  public void testFloat()\n+  {\n+    VectorValueMatcherFactory matcherFactory =\n+        VectorValueMatcherColumnProcessorFactory.instance().makeFloatProcessor(vectorValueSelector);\n+\n+    Assert.assertTrue(matcherFactory instanceof FloatVectorValueMatcher);\n+\n+    VectorValueMatcher matcher = matcherFactory.makeMatcher(\"2.0\");\n+    Assert.assertFalse(matcher instanceof BooleanVectorValueMatcher);\n+    Assert.assertEquals(VECTOR_SIZE, matcher.getMaxVectorSize());\n+    Assert.assertEquals(CURRENT_SIZE, matcher.getCurrentVectorSize());\n+\n+    // in default mode, matching null produces a boolean matcher\n+    VectorValueMatcher booleanMatcher = matcherFactory.makeMatcher((String) null);\n+    if (NullHandling.replaceWithDefault()) {\n+      Assert.assertTrue(booleanMatcher instanceof BooleanVectorValueMatcher);\n+    } else {\n+      Assert.assertFalse(booleanMatcher instanceof BooleanVectorValueMatcher);\n+    }\n+    Assert.assertEquals(VECTOR_SIZE, booleanMatcher.getMaxVectorSize());\n+    Assert.assertEquals(CURRENT_SIZE, booleanMatcher.getCurrentVectorSize());\n+    EasyMock.verify(vectorValueSelector);\n+  }\n+\n+  @Test\n+  public void testDouble()\n+  {\n+    VectorValueMatcherFactory matcherFactory =\n+        VectorValueMatcherColumnProcessorFactory.instance().makeDoubleProcessor(vectorValueSelector);\n+\n+    Assert.assertTrue(matcherFactory instanceof DoubleVectorValueMatcher);\n+\n+\n+    VectorValueMatcher matcher = matcherFactory.makeMatcher(\"1.0\");\n+    Assert.assertFalse(matcher instanceof BooleanVectorValueMatcher);\n+    Assert.assertEquals(VECTOR_SIZE, matcher.getMaxVectorSize());\n+    Assert.assertEquals(CURRENT_SIZE, matcher.getCurrentVectorSize());\n+\n+    // in default mode, matching null produces a boolean matcher\n+    VectorValueMatcher booleanMatcher = matcherFactory.makeMatcher((String) null);\n+    if (NullHandling.replaceWithDefault()) {\n+      Assert.assertTrue(booleanMatcher instanceof BooleanVectorValueMatcher);\n+    } else {\n+      Assert.assertFalse(booleanMatcher instanceof BooleanVectorValueMatcher);\n+    }\n+    Assert.assertEquals(VECTOR_SIZE, booleanMatcher.getMaxVectorSize());\n+    Assert.assertEquals(CURRENT_SIZE, booleanMatcher.getCurrentVectorSize());\n+    EasyMock.verify(vectorValueSelector);\n+  }\n+\n+  @Test\n+  public void testLong()\n+  {\n+    VectorValueMatcherFactory matcherFactory =\n+        VectorValueMatcherColumnProcessorFactory.instance().makeLongProcessor(vectorValueSelector);\n+\n+    Assert.assertTrue(matcherFactory instanceof LongVectorValueMatcher);\n+\n+    VectorValueMatcher matcher = matcherFactory.makeMatcher(\"1\");\n+    Assert.assertFalse(matcher instanceof BooleanVectorValueMatcher);\n+    Assert.assertEquals(VECTOR_SIZE, matcher.getMaxVectorSize());\n+    Assert.assertEquals(CURRENT_SIZE, matcher.getCurrentVectorSize());\n+\n+    // in default mode, matching null produces a boolean matcher\n+    VectorValueMatcher booleanMatcher = matcherFactory.makeMatcher((String) null);\n+    if (NullHandling.replaceWithDefault()) {\n+      Assert.assertTrue(booleanMatcher instanceof BooleanVectorValueMatcher);\n+    } else {\n+      Assert.assertFalse(booleanMatcher instanceof BooleanVectorValueMatcher);\n+    }\n+    Assert.assertEquals(VECTOR_SIZE, booleanMatcher.getMaxVectorSize());\n+    Assert.assertEquals(CURRENT_SIZE, booleanMatcher.getCurrentVectorSize());\n+    EasyMock.verify(vectorValueSelector);\n+  }\n+\n+  @Test\n+  public void testSingleValueString()\n+  {\n+    IdLookup lookup = EasyMock.createMock(IdLookup.class);\n+    SingleValueDimensionVectorSelector selector =\n+        EasyMock.createMock(SingleValueDimensionVectorSelector.class);\n+    EasyMock.expect(selector.getCurrentVectorSize()).andReturn(CURRENT_SIZE).anyTimes();\n+    EasyMock.expect(selector.getMaxVectorSize()).andReturn(VECTOR_SIZE).anyTimes();\n+    EasyMock.expect(selector.getValueCardinality()).andReturn(1024).anyTimes();\n+    EasyMock.expect(selector.nameLookupPossibleInAdvance()).andReturn(false).anyTimes();\n+    EasyMock.expect(selector.idLookup()).andReturn(lookup).anyTimes();\n+    EasyMock.expect(lookup.lookupId(\"any value\")).andReturn(1).anyTimes();\n+    EasyMock.expect(lookup.lookupId(\"another value\")).andReturn(-1).anyTimes();\n+    EasyMock.replay(selector, lookup);\n+\n+    VectorValueMatcherFactory matcherFactory =\n+        VectorValueMatcherColumnProcessorFactory.instance().makeSingleValueDimensionProcessor(selector);\n+\n+    Assert.assertTrue(matcherFactory instanceof SingleValueStringVectorValueMatcher);\n+\n+    // value exists in column nonboolean matcher\n+    VectorValueMatcher matcher = matcherFactory.makeMatcher(\"any value\");\n+    Assert.assertFalse(matcher instanceof BooleanVectorValueMatcher);\n+    Assert.assertEquals(VECTOR_SIZE, matcher.getMaxVectorSize());\n+    Assert.assertEquals(CURRENT_SIZE, matcher.getCurrentVectorSize());\n+\n+    // value not exist in dictionary uses boolean matcher\n+    VectorValueMatcher booleanMatcher = matcherFactory.makeMatcher(\"another value\");\n+    Assert.assertTrue(booleanMatcher instanceof BooleanVectorValueMatcher);\n+    Assert.assertEquals(VECTOR_SIZE, booleanMatcher.getMaxVectorSize());\n+    Assert.assertEquals(CURRENT_SIZE, booleanMatcher.getCurrentVectorSize());\n+    EasyMock.verify(selector, lookup);\n+  }\n+\n+  @Test\n+  public void testSingleValueStringZeroCardinalityAlwaysBooleanMatcher()\n+  {\n+    // cardinality 0 has special path to always use boolean matcher\n+    SingleValueDimensionVectorSelector selector =\n+        EasyMock.createMock(SingleValueDimensionVectorSelector.class);\n+    EasyMock.expect(selector.getCurrentVectorSize()).andReturn(CURRENT_SIZE).anyTimes();\n+    EasyMock.expect(selector.getMaxVectorSize()).andReturn(VECTOR_SIZE).anyTimes();\n+    EasyMock.expect(selector.getValueCardinality()).andReturn(0).anyTimes();\n+    EasyMock.replay(selector);\n+\n+    VectorValueMatcherFactory matcherFactory =\n+        VectorValueMatcherColumnProcessorFactory.instance().makeSingleValueDimensionProcessor(selector);\n+\n+    Assert.assertTrue(matcherFactory instanceof SingleValueStringVectorValueMatcher);\n+\n+    VectorValueMatcher matcher = matcherFactory.makeMatcher(\"any value\");\n+    Assert.assertTrue(matcher instanceof BooleanVectorValueMatcher);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "278d20c741cfd12b8efbb29fdfd993b8650bfb90"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzczNTkwMw==", "bodyText": "With cardinality of 0, ValueMatchers.toBooleanIfPossible will return 'false' from the path from \n  \n    \n      druid/processing/src/main/java/org/apache/druid/query/filter/vector/SingleValueStringVectorValueMatcher.java\n    \n    \n         Line 62\n      in\n      17cf8ea\n    \n    \n    \n    \n\n        \n          \n           final VectorValueMatcher booleanMatcher = toBooleanMatcherIfPossible(selector, s -> Objects.equals(s, etnValue)); \n        \n    \n  \n\n, which will make a false boolean matcher, so the current test is correct afaict.", "url": "https://github.com/apache/druid/pull/9994#discussion_r437735903", "createdAt": "2020-06-09T21:34:41Z", "author": {"login": "clintropolis"}, "path": "processing/src/test/java/org/apache/druid/query/filter/vector/VectorValueMatcherColumnProcessorFactoryTest.java", "diffHunk": "@@ -0,0 +1,277 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.filter.vector;\n+\n+import org.apache.druid.common.config.NullHandling;\n+import org.apache.druid.segment.IdLookup;\n+import org.apache.druid.segment.vector.MultiValueDimensionVectorSelector;\n+import org.apache.druid.segment.vector.SingleValueDimensionVectorSelector;\n+import org.apache.druid.segment.vector.VectorValueSelector;\n+import org.apache.druid.testing.InitializedNullHandlingTest;\n+import org.easymock.EasyMock;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class VectorValueMatcherColumnProcessorFactoryTest extends InitializedNullHandlingTest\n+{\n+  private static final int VECTOR_SIZE = 128;\n+  private static final int CURRENT_SIZE = 24;\n+  private VectorValueSelector vectorValueSelector;\n+\n+  @Before\n+  public void setup()\n+  {\n+    vectorValueSelector = EasyMock.createMock(VectorValueSelector.class);\n+    EasyMock.expect(vectorValueSelector.getCurrentVectorSize()).andReturn(CURRENT_SIZE).anyTimes();\n+    EasyMock.expect(vectorValueSelector.getMaxVectorSize()).andReturn(VECTOR_SIZE).anyTimes();\n+    EasyMock.replay(vectorValueSelector);\n+  }\n+\n+  @Test\n+  public void testFloat()\n+  {\n+    VectorValueMatcherFactory matcherFactory =\n+        VectorValueMatcherColumnProcessorFactory.instance().makeFloatProcessor(vectorValueSelector);\n+\n+    Assert.assertTrue(matcherFactory instanceof FloatVectorValueMatcher);\n+\n+    VectorValueMatcher matcher = matcherFactory.makeMatcher(\"2.0\");\n+    Assert.assertFalse(matcher instanceof BooleanVectorValueMatcher);\n+    Assert.assertEquals(VECTOR_SIZE, matcher.getMaxVectorSize());\n+    Assert.assertEquals(CURRENT_SIZE, matcher.getCurrentVectorSize());\n+\n+    // in default mode, matching null produces a boolean matcher\n+    VectorValueMatcher booleanMatcher = matcherFactory.makeMatcher((String) null);\n+    if (NullHandling.replaceWithDefault()) {\n+      Assert.assertTrue(booleanMatcher instanceof BooleanVectorValueMatcher);\n+    } else {\n+      Assert.assertFalse(booleanMatcher instanceof BooleanVectorValueMatcher);\n+    }\n+    Assert.assertEquals(VECTOR_SIZE, booleanMatcher.getMaxVectorSize());\n+    Assert.assertEquals(CURRENT_SIZE, booleanMatcher.getCurrentVectorSize());\n+    EasyMock.verify(vectorValueSelector);\n+  }\n+\n+  @Test\n+  public void testDouble()\n+  {\n+    VectorValueMatcherFactory matcherFactory =\n+        VectorValueMatcherColumnProcessorFactory.instance().makeDoubleProcessor(vectorValueSelector);\n+\n+    Assert.assertTrue(matcherFactory instanceof DoubleVectorValueMatcher);\n+\n+\n+    VectorValueMatcher matcher = matcherFactory.makeMatcher(\"1.0\");\n+    Assert.assertFalse(matcher instanceof BooleanVectorValueMatcher);\n+    Assert.assertEquals(VECTOR_SIZE, matcher.getMaxVectorSize());\n+    Assert.assertEquals(CURRENT_SIZE, matcher.getCurrentVectorSize());\n+\n+    // in default mode, matching null produces a boolean matcher\n+    VectorValueMatcher booleanMatcher = matcherFactory.makeMatcher((String) null);\n+    if (NullHandling.replaceWithDefault()) {\n+      Assert.assertTrue(booleanMatcher instanceof BooleanVectorValueMatcher);\n+    } else {\n+      Assert.assertFalse(booleanMatcher instanceof BooleanVectorValueMatcher);\n+    }\n+    Assert.assertEquals(VECTOR_SIZE, booleanMatcher.getMaxVectorSize());\n+    Assert.assertEquals(CURRENT_SIZE, booleanMatcher.getCurrentVectorSize());\n+    EasyMock.verify(vectorValueSelector);\n+  }\n+\n+  @Test\n+  public void testLong()\n+  {\n+    VectorValueMatcherFactory matcherFactory =\n+        VectorValueMatcherColumnProcessorFactory.instance().makeLongProcessor(vectorValueSelector);\n+\n+    Assert.assertTrue(matcherFactory instanceof LongVectorValueMatcher);\n+\n+    VectorValueMatcher matcher = matcherFactory.makeMatcher(\"1\");\n+    Assert.assertFalse(matcher instanceof BooleanVectorValueMatcher);\n+    Assert.assertEquals(VECTOR_SIZE, matcher.getMaxVectorSize());\n+    Assert.assertEquals(CURRENT_SIZE, matcher.getCurrentVectorSize());\n+\n+    // in default mode, matching null produces a boolean matcher\n+    VectorValueMatcher booleanMatcher = matcherFactory.makeMatcher((String) null);\n+    if (NullHandling.replaceWithDefault()) {\n+      Assert.assertTrue(booleanMatcher instanceof BooleanVectorValueMatcher);\n+    } else {\n+      Assert.assertFalse(booleanMatcher instanceof BooleanVectorValueMatcher);\n+    }\n+    Assert.assertEquals(VECTOR_SIZE, booleanMatcher.getMaxVectorSize());\n+    Assert.assertEquals(CURRENT_SIZE, booleanMatcher.getCurrentVectorSize());\n+    EasyMock.verify(vectorValueSelector);\n+  }\n+\n+  @Test\n+  public void testSingleValueString()\n+  {\n+    IdLookup lookup = EasyMock.createMock(IdLookup.class);\n+    SingleValueDimensionVectorSelector selector =\n+        EasyMock.createMock(SingleValueDimensionVectorSelector.class);\n+    EasyMock.expect(selector.getCurrentVectorSize()).andReturn(CURRENT_SIZE).anyTimes();\n+    EasyMock.expect(selector.getMaxVectorSize()).andReturn(VECTOR_SIZE).anyTimes();\n+    EasyMock.expect(selector.getValueCardinality()).andReturn(1024).anyTimes();\n+    EasyMock.expect(selector.nameLookupPossibleInAdvance()).andReturn(false).anyTimes();\n+    EasyMock.expect(selector.idLookup()).andReturn(lookup).anyTimes();\n+    EasyMock.expect(lookup.lookupId(\"any value\")).andReturn(1).anyTimes();\n+    EasyMock.expect(lookup.lookupId(\"another value\")).andReturn(-1).anyTimes();\n+    EasyMock.replay(selector, lookup);\n+\n+    VectorValueMatcherFactory matcherFactory =\n+        VectorValueMatcherColumnProcessorFactory.instance().makeSingleValueDimensionProcessor(selector);\n+\n+    Assert.assertTrue(matcherFactory instanceof SingleValueStringVectorValueMatcher);\n+\n+    // value exists in column nonboolean matcher\n+    VectorValueMatcher matcher = matcherFactory.makeMatcher(\"any value\");\n+    Assert.assertFalse(matcher instanceof BooleanVectorValueMatcher);\n+    Assert.assertEquals(VECTOR_SIZE, matcher.getMaxVectorSize());\n+    Assert.assertEquals(CURRENT_SIZE, matcher.getCurrentVectorSize());\n+\n+    // value not exist in dictionary uses boolean matcher\n+    VectorValueMatcher booleanMatcher = matcherFactory.makeMatcher(\"another value\");\n+    Assert.assertTrue(booleanMatcher instanceof BooleanVectorValueMatcher);\n+    Assert.assertEquals(VECTOR_SIZE, booleanMatcher.getMaxVectorSize());\n+    Assert.assertEquals(CURRENT_SIZE, booleanMatcher.getCurrentVectorSize());\n+    EasyMock.verify(selector, lookup);\n+  }\n+\n+  @Test\n+  public void testSingleValueStringZeroCardinalityAlwaysBooleanMatcher()\n+  {\n+    // cardinality 0 has special path to always use boolean matcher\n+    SingleValueDimensionVectorSelector selector =\n+        EasyMock.createMock(SingleValueDimensionVectorSelector.class);\n+    EasyMock.expect(selector.getCurrentVectorSize()).andReturn(CURRENT_SIZE).anyTimes();\n+    EasyMock.expect(selector.getMaxVectorSize()).andReturn(VECTOR_SIZE).anyTimes();\n+    EasyMock.expect(selector.getValueCardinality()).andReturn(0).anyTimes();\n+    EasyMock.replay(selector);\n+\n+    VectorValueMatcherFactory matcherFactory =\n+        VectorValueMatcherColumnProcessorFactory.instance().makeSingleValueDimensionProcessor(selector);\n+\n+    Assert.assertTrue(matcherFactory instanceof SingleValueStringVectorValueMatcher);\n+\n+    VectorValueMatcher matcher = matcherFactory.makeMatcher(\"any value\");\n+    Assert.assertTrue(matcher instanceof BooleanVectorValueMatcher);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyOTgyMg=="}, "originalCommit": {"oid": "278d20c741cfd12b8efbb29fdfd993b8650bfb90"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc2ODAwNQ==", "bodyText": "Ahh I see. Got it.", "url": "https://github.com/apache/druid/pull/9994#discussion_r437768005", "createdAt": "2020-06-09T22:59:57Z", "author": {"login": "maytasm"}, "path": "processing/src/test/java/org/apache/druid/query/filter/vector/VectorValueMatcherColumnProcessorFactoryTest.java", "diffHunk": "@@ -0,0 +1,277 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.filter.vector;\n+\n+import org.apache.druid.common.config.NullHandling;\n+import org.apache.druid.segment.IdLookup;\n+import org.apache.druid.segment.vector.MultiValueDimensionVectorSelector;\n+import org.apache.druid.segment.vector.SingleValueDimensionVectorSelector;\n+import org.apache.druid.segment.vector.VectorValueSelector;\n+import org.apache.druid.testing.InitializedNullHandlingTest;\n+import org.easymock.EasyMock;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class VectorValueMatcherColumnProcessorFactoryTest extends InitializedNullHandlingTest\n+{\n+  private static final int VECTOR_SIZE = 128;\n+  private static final int CURRENT_SIZE = 24;\n+  private VectorValueSelector vectorValueSelector;\n+\n+  @Before\n+  public void setup()\n+  {\n+    vectorValueSelector = EasyMock.createMock(VectorValueSelector.class);\n+    EasyMock.expect(vectorValueSelector.getCurrentVectorSize()).andReturn(CURRENT_SIZE).anyTimes();\n+    EasyMock.expect(vectorValueSelector.getMaxVectorSize()).andReturn(VECTOR_SIZE).anyTimes();\n+    EasyMock.replay(vectorValueSelector);\n+  }\n+\n+  @Test\n+  public void testFloat()\n+  {\n+    VectorValueMatcherFactory matcherFactory =\n+        VectorValueMatcherColumnProcessorFactory.instance().makeFloatProcessor(vectorValueSelector);\n+\n+    Assert.assertTrue(matcherFactory instanceof FloatVectorValueMatcher);\n+\n+    VectorValueMatcher matcher = matcherFactory.makeMatcher(\"2.0\");\n+    Assert.assertFalse(matcher instanceof BooleanVectorValueMatcher);\n+    Assert.assertEquals(VECTOR_SIZE, matcher.getMaxVectorSize());\n+    Assert.assertEquals(CURRENT_SIZE, matcher.getCurrentVectorSize());\n+\n+    // in default mode, matching null produces a boolean matcher\n+    VectorValueMatcher booleanMatcher = matcherFactory.makeMatcher((String) null);\n+    if (NullHandling.replaceWithDefault()) {\n+      Assert.assertTrue(booleanMatcher instanceof BooleanVectorValueMatcher);\n+    } else {\n+      Assert.assertFalse(booleanMatcher instanceof BooleanVectorValueMatcher);\n+    }\n+    Assert.assertEquals(VECTOR_SIZE, booleanMatcher.getMaxVectorSize());\n+    Assert.assertEquals(CURRENT_SIZE, booleanMatcher.getCurrentVectorSize());\n+    EasyMock.verify(vectorValueSelector);\n+  }\n+\n+  @Test\n+  public void testDouble()\n+  {\n+    VectorValueMatcherFactory matcherFactory =\n+        VectorValueMatcherColumnProcessorFactory.instance().makeDoubleProcessor(vectorValueSelector);\n+\n+    Assert.assertTrue(matcherFactory instanceof DoubleVectorValueMatcher);\n+\n+\n+    VectorValueMatcher matcher = matcherFactory.makeMatcher(\"1.0\");\n+    Assert.assertFalse(matcher instanceof BooleanVectorValueMatcher);\n+    Assert.assertEquals(VECTOR_SIZE, matcher.getMaxVectorSize());\n+    Assert.assertEquals(CURRENT_SIZE, matcher.getCurrentVectorSize());\n+\n+    // in default mode, matching null produces a boolean matcher\n+    VectorValueMatcher booleanMatcher = matcherFactory.makeMatcher((String) null);\n+    if (NullHandling.replaceWithDefault()) {\n+      Assert.assertTrue(booleanMatcher instanceof BooleanVectorValueMatcher);\n+    } else {\n+      Assert.assertFalse(booleanMatcher instanceof BooleanVectorValueMatcher);\n+    }\n+    Assert.assertEquals(VECTOR_SIZE, booleanMatcher.getMaxVectorSize());\n+    Assert.assertEquals(CURRENT_SIZE, booleanMatcher.getCurrentVectorSize());\n+    EasyMock.verify(vectorValueSelector);\n+  }\n+\n+  @Test\n+  public void testLong()\n+  {\n+    VectorValueMatcherFactory matcherFactory =\n+        VectorValueMatcherColumnProcessorFactory.instance().makeLongProcessor(vectorValueSelector);\n+\n+    Assert.assertTrue(matcherFactory instanceof LongVectorValueMatcher);\n+\n+    VectorValueMatcher matcher = matcherFactory.makeMatcher(\"1\");\n+    Assert.assertFalse(matcher instanceof BooleanVectorValueMatcher);\n+    Assert.assertEquals(VECTOR_SIZE, matcher.getMaxVectorSize());\n+    Assert.assertEquals(CURRENT_SIZE, matcher.getCurrentVectorSize());\n+\n+    // in default mode, matching null produces a boolean matcher\n+    VectorValueMatcher booleanMatcher = matcherFactory.makeMatcher((String) null);\n+    if (NullHandling.replaceWithDefault()) {\n+      Assert.assertTrue(booleanMatcher instanceof BooleanVectorValueMatcher);\n+    } else {\n+      Assert.assertFalse(booleanMatcher instanceof BooleanVectorValueMatcher);\n+    }\n+    Assert.assertEquals(VECTOR_SIZE, booleanMatcher.getMaxVectorSize());\n+    Assert.assertEquals(CURRENT_SIZE, booleanMatcher.getCurrentVectorSize());\n+    EasyMock.verify(vectorValueSelector);\n+  }\n+\n+  @Test\n+  public void testSingleValueString()\n+  {\n+    IdLookup lookup = EasyMock.createMock(IdLookup.class);\n+    SingleValueDimensionVectorSelector selector =\n+        EasyMock.createMock(SingleValueDimensionVectorSelector.class);\n+    EasyMock.expect(selector.getCurrentVectorSize()).andReturn(CURRENT_SIZE).anyTimes();\n+    EasyMock.expect(selector.getMaxVectorSize()).andReturn(VECTOR_SIZE).anyTimes();\n+    EasyMock.expect(selector.getValueCardinality()).andReturn(1024).anyTimes();\n+    EasyMock.expect(selector.nameLookupPossibleInAdvance()).andReturn(false).anyTimes();\n+    EasyMock.expect(selector.idLookup()).andReturn(lookup).anyTimes();\n+    EasyMock.expect(lookup.lookupId(\"any value\")).andReturn(1).anyTimes();\n+    EasyMock.expect(lookup.lookupId(\"another value\")).andReturn(-1).anyTimes();\n+    EasyMock.replay(selector, lookup);\n+\n+    VectorValueMatcherFactory matcherFactory =\n+        VectorValueMatcherColumnProcessorFactory.instance().makeSingleValueDimensionProcessor(selector);\n+\n+    Assert.assertTrue(matcherFactory instanceof SingleValueStringVectorValueMatcher);\n+\n+    // value exists in column nonboolean matcher\n+    VectorValueMatcher matcher = matcherFactory.makeMatcher(\"any value\");\n+    Assert.assertFalse(matcher instanceof BooleanVectorValueMatcher);\n+    Assert.assertEquals(VECTOR_SIZE, matcher.getMaxVectorSize());\n+    Assert.assertEquals(CURRENT_SIZE, matcher.getCurrentVectorSize());\n+\n+    // value not exist in dictionary uses boolean matcher\n+    VectorValueMatcher booleanMatcher = matcherFactory.makeMatcher(\"another value\");\n+    Assert.assertTrue(booleanMatcher instanceof BooleanVectorValueMatcher);\n+    Assert.assertEquals(VECTOR_SIZE, booleanMatcher.getMaxVectorSize());\n+    Assert.assertEquals(CURRENT_SIZE, booleanMatcher.getCurrentVectorSize());\n+    EasyMock.verify(selector, lookup);\n+  }\n+\n+  @Test\n+  public void testSingleValueStringZeroCardinalityAlwaysBooleanMatcher()\n+  {\n+    // cardinality 0 has special path to always use boolean matcher\n+    SingleValueDimensionVectorSelector selector =\n+        EasyMock.createMock(SingleValueDimensionVectorSelector.class);\n+    EasyMock.expect(selector.getCurrentVectorSize()).andReturn(CURRENT_SIZE).anyTimes();\n+    EasyMock.expect(selector.getMaxVectorSize()).andReturn(VECTOR_SIZE).anyTimes();\n+    EasyMock.expect(selector.getValueCardinality()).andReturn(0).anyTimes();\n+    EasyMock.replay(selector);\n+\n+    VectorValueMatcherFactory matcherFactory =\n+        VectorValueMatcherColumnProcessorFactory.instance().makeSingleValueDimensionProcessor(selector);\n+\n+    Assert.assertTrue(matcherFactory instanceof SingleValueStringVectorValueMatcher);\n+\n+    VectorValueMatcher matcher = matcherFactory.makeMatcher(\"any value\");\n+    Assert.assertTrue(matcher instanceof BooleanVectorValueMatcher);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyOTgyMg=="}, "originalCommit": {"oid": "278d20c741cfd12b8efbb29fdfd993b8650bfb90"}, "originalPosition": 175}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2295, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}