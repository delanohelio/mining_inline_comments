{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMjgzNTE1", "number": 10432, "title": "add vectorizeVirtualColumns query context parameter", "bodyText": "Description\nFollow-up to #10401, this PR adds an a new query context parameter, vectorizeVirtualColumns, which follows the same pattern as vectorize with options false, true, force.\nThis context parameter is layered on top of vectorize, which also must be set to true (the default) for a query to use vectorized engines, but by default is set to false to disable vectorization selectively for only queries with virtual columns by default.\nVectorizing virtual columns can be enabled by default by adding\ndruid.query.default.context.vectorizeVirtualColumns=true\n\nto the runtime.properties.\n\nThis PR has:\n\n been self-reviewed.\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths, ensuring the threshold for code coverage is met.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-09-24T08:38:44Z", "url": "https://github.com/apache/druid/pull/10432", "merged": true, "mergeCommit": {"oid": "1d6cb624f4a455f45f41ef4b773cf21859a09ef4"}, "closed": true, "closedAt": "2020-09-29T01:48:35Z", "author": {"login": "clintropolis"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdL86IWAH2gAyNDkyMjgzNTE1OmUwZjJhODk0ODAxYTdkZGI5N2FhNmY0YTJlMTRiNWM1ZTQyNWFhMDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdNZ0mkAFqTQ5Nzg4MTA3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e0f2a894801a7ddb97aa6f4a2e14b5c5e425aa08", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/e0f2a894801a7ddb97aa6f4a2e14b5c5e425aa08", "committedDate": "2020-09-24T08:28:12Z", "message": "add vectorizeVirtualColumns query context parameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "570cb0a55c62eacb266048a988e227b51f7936ad", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/570cb0a55c62eacb266048a988e227b51f7936ad", "committedDate": "2020-09-24T12:27:37Z", "message": "oops"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e0b97a62ece12eca34ba46672f792956f509508", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/0e0b97a62ece12eca34ba46672f792956f509508", "committedDate": "2020-09-24T18:40:02Z", "message": "spelling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1ODU3MDg0", "url": "https://github.com/apache/druid/pull/10432#pullrequestreview-495857084", "createdAt": "2020-09-24T18:44:10Z", "commit": {"oid": "0e0b97a62ece12eca34ba46672f792956f509508"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODo0NDoxMFrOHXoHVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODo1MjowMlrOHXoYuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUzNjUzNA==", "bodyText": "There's only one built-in virtual column: \"expression\". So, we should mention when that specific type of virtual column can be vectorized. (Does it depend on the type of expression? Types of input? Functions used? etc)", "url": "https://github.com/apache/druid/pull/10432#discussion_r494536534", "createdAt": "2020-09-24T18:44:10Z", "author": {"login": "gianm"}, "path": "docs/querying/query-context.md", "diffHunk": "@@ -92,7 +92,7 @@ include \"selector\", \"bound\", \"in\", \"like\", \"regex\", \"search\", \"and\", \"or\", and \"\n - All aggregators must offer vectorized implementations. These include \"count\", \"doubleSum\", \"floatSum\", \"longSum\", \"longMin\",\n  \"longMax\", \"doubleMin\", \"doubleMax\", \"floatMin\", \"floatMax\", \"longAny\", \"doubleAny\", \"floatAny\", \"stringAny\",\n  \"hyperUnique\", \"filtered\", \"approxHistogram\", \"approxHistogramFold\", and \"fixedBucketsHistogram\" (with numerical input). \n-- No virtual columns.\n+- All virtual columns must offer vectorized implementations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e0b97a62ece12eca34ba46672f792956f509508"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUzNjU3Ng==", "bodyText": "IMO, it'd be best to set it to false now, then change it to true for the next release. It'll lower the risk around upgrading, and we want upgrades to be really low risk so people feel comfortable just dropping in the newest version.\nThe specific risks here are:\n\nBugs in vectorized expressions.\nSituations where vectorized expressions perform worse than non-vectorized ones (perhaps some optimizations are implemented for the non-vectorized case, but not the vectorized case).\nSituations where there is a bug in the vectorized query engines in general, but a specific user isn't hitting it, because they're using expressions and so the query wouldn't vectorize anyway.", "url": "https://github.com/apache/druid/pull/10432#discussion_r494536576", "createdAt": "2020-09-24T18:44:13Z", "author": {"login": "gianm"}, "path": "docs/querying/query-context.md", "diffHunk": "@@ -106,3 +106,4 @@ vectorization. These query types will ignore the \"vectorize\" parameter even if i\n |--------|-------|------------|\n |vectorize|`true`|Enables or disables vectorized query execution. Possible values are `false` (disabled), `true` (enabled if possible, disabled otherwise, on a per-segment basis), and `force` (enabled, and groupBy or timeseries queries that cannot be vectorized will fail). The `\"force\"` setting is meant to aid in testing, and is not generally useful in production (since real-time segments can never be processed with vectorized execution, any queries on real-time data will fail). This will override `druid.query.default.context.vectorize` if it's set.|\n |vectorSize|`512`|Sets the row batching size for a particular query. This will override `druid.query.default.context.vectorSize` if it's set.|\n+|vectorizeVirtualColumns|`true`|Enables or disables vectorized query processing of queries with virtual columns, layered on top of `vectorize` (`vectorize` must also be set to true for a query to utilize vectorization). Possible values are `false` (disabled), `true` (enabled if possible, disabled otherwise, on a per-segment basis), and `force` (enabled, and groupBy or timeseries queries with virtual columns that cannot be vectorized will fail). The `\"force\"` setting is meant to aid in testing, and is not generally useful in production. This will override `druid.query.default.context.vectorizeVirtualColumns` if it's set.|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e0b97a62ece12eca34ba46672f792956f509508"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU0MDk4NA==", "bodyText": "There's some duplication here between the query engines \u2014 how about creating a helper that takes the query and the virtual columns and creates a Vectorize instance that synthesizes both?", "url": "https://github.com/apache/druid/pull/10432#discussion_r494540984", "createdAt": "2020-09-24T18:52:02Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/vector/VectorGroupByEngine.java", "diffHunk": "@@ -76,10 +76,18 @@ public static boolean canVectorize(\n     Function<String, ColumnCapabilities> capabilitiesFunction = name ->\n         query.getVirtualColumns().getColumnCapabilitiesWithFallback(adapter, name);\n \n+    final boolean adapterCanVectorize = adapter.canVectorize(filter, query.getVirtualColumns(), false);\n+    final boolean virtualColumnsCanVectorize;\n+    if (query.getVirtualColumns().getVirtualColumns().length > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e0b97a62ece12eca34ba46672f792956f509508"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ca210866a0905500ea97ed57f6faf968525a6e6", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/2ca210866a0905500ea97ed57f6faf968525a6e6", "committedDate": "2020-09-27T10:45:55Z", "message": "Merge remote-tracking branch 'upstream/master' into vector-expr-escape-hatch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3cb684b607d6ceb42ec3117b213db458b8b6a3d", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/d3cb684b607d6ceb42ec3117b213db458b8b6a3d", "committedDate": "2020-09-28T03:53:46Z", "message": "default to false, more docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95d93af023625f98f3a1cfd2a98595dd4c1daf50", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/95d93af023625f98f3a1cfd2a98595dd4c1daf50", "committedDate": "2020-09-28T06:49:46Z", "message": "fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4396dc814fc2e7a4303e396819703bfb5c06c2c", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/f4396dc814fc2e7a4303e396819703bfb5c06c2c", "committedDate": "2020-09-28T20:04:20Z", "message": "fix spelling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3ODU1ODIw", "url": "https://github.com/apache/druid/pull/10432#pullrequestreview-497855820", "createdAt": "2020-09-28T20:04:41Z", "commit": {"oid": "95d93af023625f98f3a1cfd2a98595dd4c1daf50"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMDowNDo0MVrOHZNtxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMDowNDo0MVrOHZNtxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIwMTE1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * comparison operators: `=`, `!=`, >`, `>=`, `<`, `<=` are supported for numeric types\n          \n          \n            \n            * comparison operators: `=`, `!=`, `>`, `>=`, `<`, `<=` are supported for numeric types", "url": "https://github.com/apache/druid/pull/10432#discussion_r496201157", "createdAt": "2020-09-28T20:04:41Z", "author": {"login": "ccaominh"}, "path": "docs/misc/math-expr.md", "diffHunk": "@@ -214,3 +214,16 @@ For the IPv4 address functions, the `address` argument can either be an IPv4 dot\n | ipv4_match(address, subnet) | Returns 1 if the `address` belongs to the `subnet` literal, else 0. If `address` is not a valid IPv4 address, then 0 is returned. This function is more efficient if `address` is a long instead of a string.|\n | ipv4_parse(address) | Parses `address` into an IPv4 address stored as a long. If `address` is a long that is a valid IPv4 address, then it is passed through. Returns null if `address` cannot be represented as an IPv4 address. |\n | ipv4_stringify(address) | Converts `address` into an IPv4 address dotted-decimal string. If `address` is a string that is a valid IPv4 address, then it is passed through. Returns null if `address` cannot be represented as an IPv4 address.|\n+\n+\n+## Vectorization Support\n+A number of expressions support ['vectorized' query engines](../querying/query-context.md#vectorization-parameters)\n+\n+supported features:\n+* constants and identifiers are supported for any column type\n+* `cast` is supported for numeric and string types\n+* math operators: `+`,`-`,`*`,`/`,`%`,`^` are supported for numeric types\n+* comparison operators: `=`, `!=`, >`, `>=`, `<`, `<=` are supported for numeric types", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95d93af023625f98f3a1cfd2a98595dd4c1daf50"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3ODgxMDc5", "url": "https://github.com/apache/druid/pull/10432#pullrequestreview-497881079", "createdAt": "2020-09-28T20:43:20Z", "commit": {"oid": "f4396dc814fc2e7a4303e396819703bfb5c06c2c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3283, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}