{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3NDE1NTU0", "number": 9262, "title": "add docker tutorial, friendlier docker-compose.yml, experimental java 11 dockerfile", "bodyText": "Description\nThis PR updates the example docker-compose.yml file to be more 'quickstart' friendly, opting to configure it to mount a local directory to share between containers as deep storage so that it can potentially run out of the box, as well as run all of the services on the default port. I also removed the overlord since the coordinator was also configured to be an overlord.\nAdditionally, it adds Java 11 version of the Dockerfile, and I updated the Docker README.md to include reference to it, though mentioning it as experimental. I ran some tests with it and everything appeared to function for me, though I only ran through the native batch quick-start and ran several queries.\nTry it out and let me know what you find:\ndocker build -t apache/druid:0.18.0-SNAPSHOT-java11 -f distribution/docker/Dockerfile.java11 .\n\nand modify the docker-compose.yml to use the 0.18.0-SNAPSHOT-java11 or whatever you call your tag.\nFinally, it adds a rough 'getting started' with Docker page to the website documentation:\n\nSome of the content was stolen from tutorials/index.md, but maybe is a good enough start to elaborate on in future PRs.", "createdAt": "2020-01-27T10:29:38Z", "url": "https://github.com/apache/druid/pull/9262", "merged": true, "mergeCommit": {"oid": "2e54755a03635d24cb78e893946988110a8fe2b5"}, "closed": true, "closedAt": "2020-02-14T05:24:46Z", "author": {"login": "clintropolis"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-aIZMAH2gAyMzY3NDE1NTU0OjhmODE5MGFjMDFjMmY3MTNjMTA0NTkwMjFmNzBhMjMzZjg0Yjk4ZDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcEFnFsAFqTM1ODY3MDY3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8f8190ac01c2f713c10459021f70a233f84b98d9", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/8f8190ac01c2f713c10459021f70a233f84b98d9", "committedDate": "2020-01-27T10:24:56Z", "message": "add docker tutorial, experimental java 11 dockerfile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10696bf7c0a0bc9d4aa1f356a27d6ef013d01dca", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/10696bf7c0a0bc9d4aa1f356a27d6ef013d01dca", "committedDate": "2020-01-27T10:52:20Z", "message": "Merge remote-tracking branch 'upstream/master' into docker-stuff"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67a43cd085c6717d047b2261fc4de6b38017cc8c", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/67a43cd085c6717d047b2261fc4de6b38017cc8c", "committedDate": "2020-01-27T10:53:03Z", "message": "fix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8786c8a61804768fedf4d94b1699fa267bfbec73", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/8786c8a61804768fedf4d94b1699fa267bfbec73", "committedDate": "2020-01-28T21:19:41Z", "message": "Merge remote-tracking branch 'upstream/master' into docker-stuff"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5b85a10cf72f6644eed870b5f5d4169c0e4a713", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/f5b85a10cf72f6644eed870b5f5d4169c0e4a713", "committedDate": "2020-01-28T21:50:26Z", "message": "spelling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNTQxMjY0", "url": "https://github.com/apache/druid/pull/9262#pullrequestreview-350541264", "createdAt": "2020-01-30T01:52:56Z", "commit": {"oid": "f5b85a10cf72f6644eed870b5f5d4169c0e4a713"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMTo1Mjo1N1rOFjdVhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMjowNToxOVrOFjdfUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcyNTEyNw==", "bodyText": "Capitalize Docker? So \"Druid docker image\" > \"Druid Docker image\" ... or maybe just \"Druid image\"", "url": "https://github.com/apache/druid/pull/9262#discussion_r372725127", "createdAt": "2020-01-30T01:52:57Z", "author": {"login": "sthetland"}, "path": "docs/tutorials/docker.md", "diffHunk": "@@ -0,0 +1,81 @@\n+---\n+id: docker\n+title: \"Docker\"\n+---\n+\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+  \n+In this quickstart, we will download the Druid docker image from [Apache Druid on Docker Hub](https://hub.docker.com/r/apache/druid) and set it up on a single machine using [Docker](https://www.docker.com/get-started) and [Docker Compose](https://docs.docker.com/compose/). The cluster will be ready to load data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5b85a10cf72f6644eed870b5f5d4169c0e4a713"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcyNjY2Ng==", "bodyText": "A nit, but i suggest splitting this long sentence, maybe using a semi-colon, with a few other punctuation adjustments:\nThe Druid docker-compose.yml example utilizes a single environment file to specify the complete Druid configuration; however, in production use cases we suggest using either DRUID_COMMON_CONFIG and DRUID_CONFIG_${service} or specially tailored, service-specific environment files.", "url": "https://github.com/apache/druid/pull/9262#discussion_r372726666", "createdAt": "2020-01-30T02:00:22Z", "author": {"login": "sthetland"}, "path": "docs/tutorials/docker.md", "diffHunk": "@@ -0,0 +1,81 @@\n+---\n+id: docker\n+title: \"Docker\"\n+---\n+\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+  \n+In this quickstart, we will download the Druid docker image from [Apache Druid on Docker Hub](https://hub.docker.com/r/apache/druid) and set it up on a single machine using [Docker](https://www.docker.com/get-started) and [Docker Compose](https://docs.docker.com/compose/). The cluster will be ready to load data\n+after completing this initial setup.\n+\n+Before beginning the quickstart, it is helpful to read the [general Druid overview](../design/index.md) and the\n+[ingestion overview](../ingestion/index.md), as the tutorials will refer to concepts discussed on those pages. Additionally, familiarity with Docker is recommended.\n+\n+## Prerequisites\n+\n+* Docker\n+\n+## Getting started\n+\n+The Druid source code contains [an example `docker-compose.yml`](https://github.com/apache/druid/blob/master/distribution/docker/docker-compose.yml) which can pull an image from Docker Hub and is suited to be used as an example environment and to experiment with Docker based Druid configuration and deployments.\n+\n+### Compose file\n+\n+The example `docker-compose.yml` will create a container for each Druid service, as well as Zookeeper and a PostgreSQL container as the metadata store. Deep storage will be a local directory, by default configured as `./storage` relative to your `docker-compose.yml` file, and will be mounted as `/opt/data` and shared between Druid containers which require access to deep storage. The Druid containers are configured via an [environment file](https://github.com/apache/druid/blob/master/distribution/docker/environment).\n+\n+### Configuration\n+\n+Configuration of the Druid Docker container is done via environment variables, which may additionally specify paths to [the standard Druid configuration files](../configuration/index.md)\n+\n+Special environment variables:\n+\n+* `JAVA_OPTS` -- set java options\n+* `DRUID_LOG4J` -- set the entire `log4j.xml` verbatim\n+* `DRUID_LOG_LEVEL` -- override the default log level in default log4j\n+* `DRUID_XMX` -- set Java `Xmx`\n+* `DRUID_XMS` -- set Java `Xms`\n+* `DRUID_MAXNEWSIZE` -- set Java max new size\n+* `DRUID_NEWSIZE` -- set Java new size\n+* `DRUID_MAXDIRECTMEMORYSIZE` -- set Java max direct memory size\n+* `DRUID_CONFIG_COMMON` -- full path to a file for druid 'common' properties\n+* `DRUID_CONFIG_${service}` -- full path to a file for druid 'service' properties\n+\n+In addition to the special environment variables, the script which launches Druid in the container will also attempt to use any environment variable starting with the `druid_` prefix as a command-line configuration. For example, an environment variable\n+ \n+```druid_metadata_storage_type=postgresql```\n+ \n+would be translated into \n+\n+```-Ddruid.metadata.storage.type=postgresql```\n+ \n+for the Druid process in the container.\n+\n+The Druid `docker-compose.yml` example utilizes a single environment file to specify the complete Druid configuration, however in production use cases we suggest using either `DRUID_COMMON_CONFIG` and `DRUID_CONFIG_${service}` or specially tailored service specific environment files.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5b85a10cf72f6644eed870b5f5d4169c0e4a713"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcyNjgyMA==", "bodyText": "\"cluster will\" -> \" cluster with\"", "url": "https://github.com/apache/druid/pull/9262#discussion_r372726820", "createdAt": "2020-01-30T02:00:58Z", "author": {"login": "sthetland"}, "path": "docs/tutorials/docker.md", "diffHunk": "@@ -0,0 +1,81 @@\n+---\n+id: docker\n+title: \"Docker\"\n+---\n+\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+  \n+In this quickstart, we will download the Druid docker image from [Apache Druid on Docker Hub](https://hub.docker.com/r/apache/druid) and set it up on a single machine using [Docker](https://www.docker.com/get-started) and [Docker Compose](https://docs.docker.com/compose/). The cluster will be ready to load data\n+after completing this initial setup.\n+\n+Before beginning the quickstart, it is helpful to read the [general Druid overview](../design/index.md) and the\n+[ingestion overview](../ingestion/index.md), as the tutorials will refer to concepts discussed on those pages. Additionally, familiarity with Docker is recommended.\n+\n+## Prerequisites\n+\n+* Docker\n+\n+## Getting started\n+\n+The Druid source code contains [an example `docker-compose.yml`](https://github.com/apache/druid/blob/master/distribution/docker/docker-compose.yml) which can pull an image from Docker Hub and is suited to be used as an example environment and to experiment with Docker based Druid configuration and deployments.\n+\n+### Compose file\n+\n+The example `docker-compose.yml` will create a container for each Druid service, as well as Zookeeper and a PostgreSQL container as the metadata store. Deep storage will be a local directory, by default configured as `./storage` relative to your `docker-compose.yml` file, and will be mounted as `/opt/data` and shared between Druid containers which require access to deep storage. The Druid containers are configured via an [environment file](https://github.com/apache/druid/blob/master/distribution/docker/environment).\n+\n+### Configuration\n+\n+Configuration of the Druid Docker container is done via environment variables, which may additionally specify paths to [the standard Druid configuration files](../configuration/index.md)\n+\n+Special environment variables:\n+\n+* `JAVA_OPTS` -- set java options\n+* `DRUID_LOG4J` -- set the entire `log4j.xml` verbatim\n+* `DRUID_LOG_LEVEL` -- override the default log level in default log4j\n+* `DRUID_XMX` -- set Java `Xmx`\n+* `DRUID_XMS` -- set Java `Xms`\n+* `DRUID_MAXNEWSIZE` -- set Java max new size\n+* `DRUID_NEWSIZE` -- set Java new size\n+* `DRUID_MAXDIRECTMEMORYSIZE` -- set Java max direct memory size\n+* `DRUID_CONFIG_COMMON` -- full path to a file for druid 'common' properties\n+* `DRUID_CONFIG_${service}` -- full path to a file for druid 'service' properties\n+\n+In addition to the special environment variables, the script which launches Druid in the container will also attempt to use any environment variable starting with the `druid_` prefix as a command-line configuration. For example, an environment variable\n+ \n+```druid_metadata_storage_type=postgresql```\n+ \n+would be translated into \n+\n+```-Ddruid.metadata.storage.type=postgresql```\n+ \n+for the Druid process in the container.\n+\n+The Druid `docker-compose.yml` example utilizes a single environment file to specify the complete Druid configuration, however in production use cases we suggest using either `DRUID_COMMON_CONFIG` and `DRUID_CONFIG_${service}` or specially tailored service specific environment files.\n+\n+## Launching the cluster\n+\n+Run `docker-compose up` to launch the cluster will a shell attached, or `docker-compose up -d` to run the cluster in the background. Once the cluster has started, you can navigate to [http://localhost:8888](http://localhost:8888).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5b85a10cf72f6644eed870b5f5d4169c0e4a713"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcyNzYzMg==", "bodyText": "Also, maybe others would know, because the path is in a section above, but it wasn't obvious to me to run the command from druid_repo_home/distribution/docker. So optionally, could mention, i.e., \"Run docker-compose up from the distribution/docker directory to launch....\"\nOne more thing, do they need to do the docker commands that are in the druid_repo_home/distribution/docker/README.md ? I did, but wasn't sure I had to.", "url": "https://github.com/apache/druid/pull/9262#discussion_r372727632", "createdAt": "2020-01-30T02:05:19Z", "author": {"login": "sthetland"}, "path": "docs/tutorials/docker.md", "diffHunk": "@@ -0,0 +1,81 @@\n+---\n+id: docker\n+title: \"Docker\"\n+---\n+\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+  \n+In this quickstart, we will download the Druid docker image from [Apache Druid on Docker Hub](https://hub.docker.com/r/apache/druid) and set it up on a single machine using [Docker](https://www.docker.com/get-started) and [Docker Compose](https://docs.docker.com/compose/). The cluster will be ready to load data\n+after completing this initial setup.\n+\n+Before beginning the quickstart, it is helpful to read the [general Druid overview](../design/index.md) and the\n+[ingestion overview](../ingestion/index.md), as the tutorials will refer to concepts discussed on those pages. Additionally, familiarity with Docker is recommended.\n+\n+## Prerequisites\n+\n+* Docker\n+\n+## Getting started\n+\n+The Druid source code contains [an example `docker-compose.yml`](https://github.com/apache/druid/blob/master/distribution/docker/docker-compose.yml) which can pull an image from Docker Hub and is suited to be used as an example environment and to experiment with Docker based Druid configuration and deployments.\n+\n+### Compose file\n+\n+The example `docker-compose.yml` will create a container for each Druid service, as well as Zookeeper and a PostgreSQL container as the metadata store. Deep storage will be a local directory, by default configured as `./storage` relative to your `docker-compose.yml` file, and will be mounted as `/opt/data` and shared between Druid containers which require access to deep storage. The Druid containers are configured via an [environment file](https://github.com/apache/druid/blob/master/distribution/docker/environment).\n+\n+### Configuration\n+\n+Configuration of the Druid Docker container is done via environment variables, which may additionally specify paths to [the standard Druid configuration files](../configuration/index.md)\n+\n+Special environment variables:\n+\n+* `JAVA_OPTS` -- set java options\n+* `DRUID_LOG4J` -- set the entire `log4j.xml` verbatim\n+* `DRUID_LOG_LEVEL` -- override the default log level in default log4j\n+* `DRUID_XMX` -- set Java `Xmx`\n+* `DRUID_XMS` -- set Java `Xms`\n+* `DRUID_MAXNEWSIZE` -- set Java max new size\n+* `DRUID_NEWSIZE` -- set Java new size\n+* `DRUID_MAXDIRECTMEMORYSIZE` -- set Java max direct memory size\n+* `DRUID_CONFIG_COMMON` -- full path to a file for druid 'common' properties\n+* `DRUID_CONFIG_${service}` -- full path to a file for druid 'service' properties\n+\n+In addition to the special environment variables, the script which launches Druid in the container will also attempt to use any environment variable starting with the `druid_` prefix as a command-line configuration. For example, an environment variable\n+ \n+```druid_metadata_storage_type=postgresql```\n+ \n+would be translated into \n+\n+```-Ddruid.metadata.storage.type=postgresql```\n+ \n+for the Druid process in the container.\n+\n+The Druid `docker-compose.yml` example utilizes a single environment file to specify the complete Druid configuration, however in production use cases we suggest using either `DRUID_COMMON_CONFIG` and `DRUID_CONFIG_${service}` or specially tailored service specific environment files.\n+\n+## Launching the cluster\n+\n+Run `docker-compose up` to launch the cluster will a shell attached, or `docker-compose up -d` to run the cluster in the background. Once the cluster has started, you can navigate to [http://localhost:8888](http://localhost:8888).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcyNjgyMA=="}, "originalCommit": {"oid": "f5b85a10cf72f6644eed870b5f5d4169c0e4a713"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "986224339a4c8940a03c6783af66b698c9e49194", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/986224339a4c8940a03c6783af66b698c9e49194", "committedDate": "2020-02-07T22:51:34Z", "message": "doc adjustments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NjcwNjc0", "url": "https://github.com/apache/druid/pull/9262#pullrequestreview-358670674", "createdAt": "2020-02-14T01:54:00Z", "commit": {"oid": "986224339a4c8940a03c6783af66b698c9e49194"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3809, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}