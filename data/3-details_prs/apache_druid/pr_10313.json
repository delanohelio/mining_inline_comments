{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyMjgxMzY0", "number": 10313, "title": "Remove NUMERIC_HASHING_THRESHOLD", "bodyText": "Description\nChange the default numeric hashing threshold to 1 and make it configurable.\nBenchmarks attached to this PR show that binary searches are not faster\nthan doing a set contains check. The attached flamegraph shows the amount of\ntime a query spent in the binary search. Given the benchmarks, we can expect\nto see roughly a 2x speed up in this part of the query which works out to\n~ a 20% faster query in this instance.\n\nIn this flamegraph, a query is taking ~40% of the time doing a binary search on 4 numbers. The query I used\nis not very selective, so it has to do the binary search many times.\nI see a comment on NUMERIC_HASHING_THRESHOLD that talks about benchmarks, but I couldn't find any\nin the codebase, so I wrote my own hacky ones, just to get a sense for the breaking points. The benchmarks\nprobably need a lot of work, and the results should be taken with a grain of salt because I ran most of them\nonly 10 times to calculate the average time.\nI tried 3 algorithms: binary search, set contains and a linear search (using LongArraySet as a proxy)\nHere's a summary of the results. The results are in ns / operation with a 20% match rate with the match being chosen at random within the list of filter values.\n\n\n\nAlgorithm\n16\n8\n4\n2\n\n\n\n\nBinarySearch\n7.883\n4.451\n3.750\n4.71\n\n\nLongOpenHashSet\n3.086\n3.142\n3.071\n4.02\n\n\nLongArraySet\n9.856\n6.077\n4.151\n3.28\n\n\n\nI then ran the benchmarks to compare the worst and best case match times for 16 elements in the set. For the worst case, I picked an element at the start of the list (LongArraySet starts iterating from the end of the list) and for the best case, I picked the middle element for the binary search and the last element for the linear search.\n\n\n\nAlgorithm\nWorst\nBest\n\n\n\n\nBinarySearch\n5.401\n2.991\n\n\nLongArraySet\n10.985\n2.908\n\n\n\nThese numbers seem to indicate that the performance gain of not using a set contains is minimal, even with very small sets and will depend on the number of elements in the dataset that will match the filter.\nThese numbers seem to indicate that the contains time is relatively consistent at ~ 3.1 ns / op whereas a binary search operation is almost 2ns per op slower.\nBased on these numbers, I suspect the query above would see ~ 10% gain by switching to using the LongOpenHashSet instead of a binary search, while queries with in filters closer to 16 values would see a bigger benefit.\n\nThis PR has:\n\n been self-reviewed.\n\n using the concurrency checklist (Remove this item if the PR doesn't have any relation to concurrency.)\n\n\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths, ensuring the threshold for code coverage is met.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-08-24T06:08:28Z", "url": "https://github.com/apache/druid/pull/10313", "merged": true, "mergeCommit": {"oid": "a9de00d43ab34f6d9c5c1ba749617b7f2e1f1559"}, "closed": true, "closedAt": "2020-08-26T03:05:40Z", "author": {"login": "suneet-s"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdB7MQqgH2gAyNDcyMjgxMzY0OjY5YTJkYmZiNDMxOWMwNWYwNjNlYzA1ZTgyZWIyZTY2ZWNhYjU1ZjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCd99-gFqTQ3NDkyMTIyNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "69a2dbfb4319c05f063ec05e82eb2e66ecab55f3", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/69a2dbfb4319c05f063ec05e82eb2e66ecab55f3", "committedDate": "2020-08-24T04:48:57Z", "message": "Make NUMERIC_HASHING_THRESHOLD configurable\n\nChange the default numeric hashing threshold to 1 and make it configurable.\n\nBenchmarks attached to this PR show that binary searches are not more faster\nthan doing a set contains check. The attached flamegraph shows the amount of\ntime a query spent in the binary search. Given the benchmarks, we can expect\nto see roughly a 2x speed up in this part of the query which works out to\n~ a 10% faster query in this instance."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MTUyNzgx", "url": "https://github.com/apache/druid/pull/10313#pullrequestreview-474152781", "createdAt": "2020-08-25T05:49:59Z", "commit": {"oid": "69a2dbfb4319c05f063ec05e82eb2e66ecab55f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNTo0OTo1OVrOHGIgfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNTo0OTo1OVrOHGIgfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE5Mjg5NQ==", "bodyText": "I don't think we should have a property for this, but if we did, it should be set through Guice injection rather than through System.getProperty. That way, it'd work in either a runtime props file or a system property.\nWe won't actually see \"1\" in practice AFAIK, since optimize() will get run, and that'll turn the In filter into a Selector filter.\nSo if this is the right default, I think it'd be better to remove the code.", "url": "https://github.com/apache/druid/pull/10313#discussion_r476192895", "createdAt": "2020-08-25T05:49:59Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -80,7 +80,8 @@\n {\n   // determined through benchmark that binary search on long[] is faster than HashSet until ~16 elements\n   // Hashing threshold is not applied to String for now, String still uses ImmutableSortedSet\n-  public static final int NUMERIC_HASHING_THRESHOLD = 16;\n+  public static final int NUMERIC_HASHING_THRESHOLD =\n+      Integer.parseInt(System.getProperty(\"druid.query.filter.inDimFilter.numericHashingThreshold\", \"1\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69a2dbfb4319c05f063ec05e82eb2e66ecab55f3"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eabcbce8b40b5845c1e115f4cee63609a6e80e92", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/eabcbce8b40b5845c1e115f4cee63609a6e80e92", "committedDate": "2020-08-25T17:36:18Z", "message": "Remove NUMERIC_HASHING_THRESHOLD"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c6b6abcdc7d06ee490ecfac1d7ee0492bcbc81a", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/1c6b6abcdc7d06ee490ecfac1d7ee0492bcbc81a", "committedDate": "2020-08-25T21:09:21Z", "message": "Remove stale docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0OTIxMjI0", "url": "https://github.com/apache/druid/pull/10313#pullrequestreview-474921224", "createdAt": "2020-08-25T21:20:01Z", "commit": {"oid": "1c6b6abcdc7d06ee490ecfac1d7ee0492bcbc81a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3465, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}