{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxMDUzMDI5", "number": 10505, "title": "Avro union support", "bodyText": "Fixes #10493\nDescription\nImplements better support for Avro unions in the Avro extensions.\nCurrently when ingesting data that contains unions unless the union is always the same value it will return mixed type results.\nThis PR addresses the problem by exploding union fields into maps keyed by the union member type or type name in the case of named types (enums, fixed, records).\nThe method was chosen as it's similar to what is done on other systems that support ingesting Avro data, such as Google BigQuery which details their Avro compatibility here: https://cloud.google.com/bigquery/docs/loading-data-cloud-storage-avro#avro_conversions\n\nThis PR has:\n\n been self-reviewed.\n added documentation for new or modified features or behaviors.\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths, ensuring the threshold for code coverage is met.\n added integration tests.\n been tested in a test Druid cluster.\n\n\nKey changed/added classes in this PR\n\nAvroFlattenerMaker\nGenericAvroJsonProvider", "createdAt": "2020-10-10T23:45:27Z", "url": "https://github.com/apache/druid/pull/10505", "merged": true, "mergeCommit": {"oid": "d5e8d4d68007899df17f390a756422d511d746d5"}, "closed": true, "closedAt": "2021-07-07T05:05:41Z", "author": {"login": "josephglanville"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABeFmSgcgBqjQ0ODkzOTU3Njk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABekxRdkgH2gAyNTAxMDUzMDI5OmMxN2FhMWYzNzljMDJlZTQ4NGY4YjE3OWY3NTAwYzI2NDE5YmM1MDE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc0OTE2OTYx", "url": "https://github.com/apache/druid/pull/10505#pullrequestreview-674916961", "createdAt": "2021-06-03T06:27:57Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjgwMzExMTY2", "url": "https://github.com/apache/druid/pull/10505#pullrequestreview-680311166", "createdAt": "2021-06-10T03:27:22Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xMFQwMzoyNzoyMlrOJqw_ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xMFQwNDoxNjoxMlrOJqx1bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODgyMjY5MQ==", "bodyText": "super nit: i think it's -> its", "url": "https://github.com/apache/druid/pull/10505#discussion_r648822691", "createdAt": "2021-06-10T03:27:22Z", "author": {"login": "clintropolis"}, "path": "docs/development/extensions-core/avro.md", "diffHunk": "@@ -39,13 +39,24 @@ Make sure to [include](../../development/extensions.md#loading-extensions) `drui\n \n Druid supports most Avro types natively, there are however some exceptions which are detailed here.\n \n-`union` types which aren't of the form `[null, otherType]` aren't supported at this time.\n+#### Unions\n+Druid has two modes for supporting `union` types. The original legacy mode can only support unions of the form `[null, otherType]`.\n+The newer mode can be enabled by setting `extractUnions` on the Avro parser in which case unions will be expanded according to the following rules:\n+* Primitive types and unnamed complex types are keyed their type name. i.e `int`, `string`\n+* Complex named types are keyed by their names, this includes `record`, `fixed` and `enum`.\n+* The Avro null type is elided as it's value can only ever be null", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODgyMjg0OQ==", "bodyText": "nit: still using explode terminology", "url": "https://github.com/apache/druid/pull/10505#discussion_r648822849", "createdAt": "2021-06-10T03:27:49Z", "author": {"login": "clintropolis"}, "path": "extensions-core/avro-extensions/src/main/java/org/apache/druid/data/input/avro/GenericAvroJsonProvider.java", "diffHunk": "@@ -195,4 +210,46 @@ public Object unwrap(final Object o)\n   {\n     return o;\n   }\n+\n+  private boolean isExplodableUnion(final Schema.Field field)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODgzNjQ2MA==", "bodyText": "Hmm, I looked a lot closer at this than I did on a previous pass, and I think the old docs were sort of wrong. Using the example someMultiMemberUnion type in this PR, I can still use a flatten spec to extract the values of any type with the existing code, apparently even including for record types, where the extraction path is $.someMultiMemberUnion.subString (instead of $.someMultiMemberUnion.UnionSubRecord.subString as in the mode added in this PR).\nAs such, with my better understanding I think it makes sense to instead call this new property extractUnionsByType or something similar, and clarify that this new mode requires using a flatten spec to extract the values, but with the benefit that you can selectively extract values of only a certain type so that they can be mapped to separate Druid columns or whatever. I also don't think it necessarily makes sense to refer to the other mode as legacy, since I guess it still has a use if the union is composed mainly of primitive types and all are able to be coerced into a common Druid type, or if it is a simple union type of the legacy form, which the new mode does not effect (since the isUnion code checks for more than 1 non-null type).\nSorry I didn't look closer into this previously and for the review churn, my bad.\nAlso because the new mode needs to be link to the flatten spec docs, maybe it makes sense to just move the unions description entirely into the complex types section, which also seems to mirror the Avro specification docs https://avro.apache.org/docs/current/spec.html#schema_complex", "url": "https://github.com/apache/druid/pull/10505#discussion_r648836460", "createdAt": "2021-06-10T04:16:12Z", "author": {"login": "clintropolis"}, "path": "docs/development/extensions-core/avro.md", "diffHunk": "@@ -39,13 +39,24 @@ Make sure to [include](../../development/extensions.md#loading-extensions) `drui\n \n Druid supports most Avro types natively, there are however some exceptions which are detailed here.\n \n-`union` types which aren't of the form `[null, otherType]` aren't supported at this time.\n+#### Unions\n+Druid has two modes for supporting `union` types. The original legacy mode can only support unions of the form `[null, otherType]`.\n+The newer mode can be enabled by setting `extractUnions` on the Avro parser in which case unions will be expanded according to the following rules:", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0878f252ae6047ca3d6584317ae6ce7176e28dd7", "author": {"user": {"login": "josephglanville", "name": "Joseph Glanville"}}, "url": "https://github.com/apache/druid/commit/0878f252ae6047ca3d6584317ae6ce7176e28dd7", "committedDate": "2021-06-10T23:07:58Z", "message": "Avro union support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1bbd4a99a42bd3e482c20f7ab1d5ac306adb882", "author": {"user": {"login": "josephglanville", "name": "Joseph Glanville"}}, "url": "https://github.com/apache/druid/commit/b1bbd4a99a42bd3e482c20f7ab1d5ac306adb882", "committedDate": "2021-06-10T23:07:58Z", "message": "Document new union support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe3d3a1ac25fc7332bbb691e06f49bd7b8a4e394", "author": {"user": {"login": "josephglanville", "name": "Joseph Glanville"}}, "url": "https://github.com/apache/druid/commit/fe3d3a1ac25fc7332bbb691e06f49bd7b8a4e394", "committedDate": "2021-06-10T23:07:58Z", "message": "Add support for AvroStreamInputFormat and fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5335b8a9f84ee29b92655f81769de5a45966e5c5", "author": {"user": {"login": "josephglanville", "name": "Joseph Glanville"}}, "url": "https://github.com/apache/druid/commit/5335b8a9f84ee29b92655f81769de5a45966e5c5", "committedDate": "2021-06-10T23:07:58Z", "message": "Extend multi-member union test schema and format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cde6041505b7701aa2ca7d7a3253f82e46edba9f", "author": {"user": {"login": "josephglanville", "name": "Joseph Glanville"}}, "url": "https://github.com/apache/druid/commit/cde6041505b7701aa2ca7d7a3253f82e46edba9f", "committedDate": "2021-06-10T23:07:58Z", "message": "Some additional docs and add Enums to spelling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79c1fbfe0f0882d7e33f680e3d03f96b62a26b6f", "author": {"user": {"login": "josephglanville", "name": "Joseph Glanville"}}, "url": "https://github.com/apache/druid/commit/79c1fbfe0f0882d7e33f680e3d03f96b62a26b6f", "committedDate": "2021-06-10T23:07:58Z", "message": "Rename explodeUnions -> extractUnions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "438722e42333701ab044e971109aa291f50f5743", "author": {"user": {"login": "josephglanville", "name": "Joseph Glanville"}}, "url": "https://github.com/apache/druid/commit/438722e42333701ab044e971109aa291f50f5743", "committedDate": "2021-06-10T23:11:16Z", "message": "explode -> extract"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ebd657d19191c8f55542a797fb5f230b026a22d", "author": {"user": {"login": "josephglanville", "name": "Joseph Glanville"}}, "url": "https://github.com/apache/druid/commit/3ebd657d19191c8f55542a797fb5f230b026a22d", "committedDate": "2021-06-11T00:41:45Z", "message": "ByType"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "3ebd657d19191c8f55542a797fb5f230b026a22d", "author": {"user": {"login": "josephglanville", "name": "Joseph Glanville"}}, "url": "https://github.com/apache/druid/commit/3ebd657d19191c8f55542a797fb5f230b026a22d", "committedDate": "2021-06-11T00:41:45Z", "message": "ByType"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg5MzA3ODA3", "url": "https://github.com/apache/druid/pull/10505#pullrequestreview-689307807", "createdAt": "2021-06-22T10:01:45Z", "commit": {"oid": "3ebd657d19191c8f55542a797fb5f230b026a22d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c17aa1f379c02ee484f8b179f7500c26419bc501", "author": {"user": {"login": "josephglanville", "name": "Joseph Glanville"}}, "url": "https://github.com/apache/druid/commit/c17aa1f379c02ee484f8b179f7500c26419bc501", "committedDate": "2021-06-27T07:14:05Z", "message": "Correct spelling error"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3370, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}