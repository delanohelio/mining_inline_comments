{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNzk2MjA5", "number": 10499, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMzo1NjozMlrOEvlq_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMzo1OTo1N1rOEw_IDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzM1NzQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/math/expr/ExprTypeConversion.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMzo1NjozMlrOHkpuIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNDoyMzowNFrOHm7p0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE5NDMzOQ==", "bodyText": "What do result and other mean?", "url": "https://github.com/apache/druid/pull/10499#discussion_r508194339", "createdAt": "2020-10-20T03:56:32Z", "author": {"login": "jihoonson"}, "path": "core/src/main/java/org/apache/druid/math/expr/ExprTypeConversion.java", "diffHunk": "@@ -31,22 +31,40 @@\n    * Infer the output type of a list of possible 'conditional' expression outputs (where any of these could be the\n    * output expression if the corresponding case matching expression evaluates to true)\n    */\n-  static ExprType conditional(Expr.InputBindingTypes inputTypes, List<Expr> args)\n+  static ExprType conditional(Expr.InputBindingInspector inspector, List<Expr> args)\n   {\n     ExprType type = null;\n     for (Expr arg : args) {\n       if (arg.isNullLiteral()) {\n         continue;\n       }\n       if (type == null) {\n-        type = arg.getOutputType(inputTypes);\n+        type = arg.getOutputType(inspector);\n       } else {\n-        type = doubleMathFunction(type, arg.getOutputType(inputTypes));\n+        type = function(type, arg.getOutputType(inspector));\n       }\n     }\n     return type;\n   }\n \n+  /**\n+   * Given 2 'input' types, which might not be fully trustable, choose the most appropriate combined type for\n+   * non-vectorized, per-row type detection. In this mode, null values are {@link ExprType#STRING} typed, despite\n+   * potentially coming from an underlying numeric column. This method is not well suited for array handling\n+   */\n+  public static ExprType autoDetect(ExprEval result, ExprEval other)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24a0bebcdf7ab346dc8930e058eb7a552312297c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODgwMDA5MA==", "bodyText": "ah those are not very good variable names, eval and otherEval probably would've been better", "url": "https://github.com/apache/druid/pull/10499#discussion_r508800090", "createdAt": "2020-10-20T19:56:36Z", "author": {"login": "clintropolis"}, "path": "core/src/main/java/org/apache/druid/math/expr/ExprTypeConversion.java", "diffHunk": "@@ -31,22 +31,40 @@\n    * Infer the output type of a list of possible 'conditional' expression outputs (where any of these could be the\n    * output expression if the corresponding case matching expression evaluates to true)\n    */\n-  static ExprType conditional(Expr.InputBindingTypes inputTypes, List<Expr> args)\n+  static ExprType conditional(Expr.InputBindingInspector inspector, List<Expr> args)\n   {\n     ExprType type = null;\n     for (Expr arg : args) {\n       if (arg.isNullLiteral()) {\n         continue;\n       }\n       if (type == null) {\n-        type = arg.getOutputType(inputTypes);\n+        type = arg.getOutputType(inspector);\n       } else {\n-        type = doubleMathFunction(type, arg.getOutputType(inputTypes));\n+        type = function(type, arg.getOutputType(inspector));\n       }\n     }\n     return type;\n   }\n \n+  /**\n+   * Given 2 'input' types, which might not be fully trustable, choose the most appropriate combined type for\n+   * non-vectorized, per-row type detection. In this mode, null values are {@link ExprType#STRING} typed, despite\n+   * potentially coming from an underlying numeric column. This method is not well suited for array handling\n+   */\n+  public static ExprType autoDetect(ExprEval result, ExprEval other)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE5NDMzOQ=="}, "originalCommit": {"oid": "24a0bebcdf7ab346dc8930e058eb7a552312297c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUxNDY3OQ==", "bodyText": "Can you add a part to the javadoc about when the input types would not be trustable (is it because of the string nulls from numeric columns, or are there other cases)?", "url": "https://github.com/apache/druid/pull/10499#discussion_r510514679", "createdAt": "2020-10-22T23:35:29Z", "author": {"login": "jon-wei"}, "path": "core/src/main/java/org/apache/druid/math/expr/ExprTypeConversion.java", "diffHunk": "@@ -31,22 +31,40 @@\n    * Infer the output type of a list of possible 'conditional' expression outputs (where any of these could be the\n    * output expression if the corresponding case matching expression evaluates to true)\n    */\n-  static ExprType conditional(Expr.InputBindingTypes inputTypes, List<Expr> args)\n+  static ExprType conditional(Expr.InputBindingInspector inspector, List<Expr> args)\n   {\n     ExprType type = null;\n     for (Expr arg : args) {\n       if (arg.isNullLiteral()) {\n         continue;\n       }\n       if (type == null) {\n-        type = arg.getOutputType(inputTypes);\n+        type = arg.getOutputType(inspector);\n       } else {\n-        type = doubleMathFunction(type, arg.getOutputType(inputTypes));\n+        type = function(type, arg.getOutputType(inspector));\n       }\n     }\n     return type;\n   }\n \n+  /**\n+   * Given 2 'input' types, which might not be fully trustable, choose the most appropriate combined type for\n+   * non-vectorized, per-row type detection. In this mode, null values are {@link ExprType#STRING} typed, despite\n+   * potentially coming from an underlying numeric column. This method is not well suited for array handling\n+   */\n+  public static ExprType autoDetect(ExprEval result, ExprEval other)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE5NDMzOQ=="}, "originalCommit": {"oid": "24a0bebcdf7ab346dc8930e058eb7a552312297c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU4NTI5OQ==", "bodyText": "Can you add a part to the javadoc about when the input types would not be trustable (is it because of the string nulls from numeric columns, or are there other cases)?\n\nI have this blurb:\n\nIn this mode, null values are {@link ExprType#STRING} typed, despite potentially coming from an underlying numeric column\n\nbut I have added the missing column case too", "url": "https://github.com/apache/druid/pull/10499#discussion_r510585299", "createdAt": "2020-10-23T04:23:04Z", "author": {"login": "clintropolis"}, "path": "core/src/main/java/org/apache/druid/math/expr/ExprTypeConversion.java", "diffHunk": "@@ -31,22 +31,40 @@\n    * Infer the output type of a list of possible 'conditional' expression outputs (where any of these could be the\n    * output expression if the corresponding case matching expression evaluates to true)\n    */\n-  static ExprType conditional(Expr.InputBindingTypes inputTypes, List<Expr> args)\n+  static ExprType conditional(Expr.InputBindingInspector inspector, List<Expr> args)\n   {\n     ExprType type = null;\n     for (Expr arg : args) {\n       if (arg.isNullLiteral()) {\n         continue;\n       }\n       if (type == null) {\n-        type = arg.getOutputType(inputTypes);\n+        type = arg.getOutputType(inspector);\n       } else {\n-        type = doubleMathFunction(type, arg.getOutputType(inputTypes));\n+        type = function(type, arg.getOutputType(inspector));\n       }\n     }\n     return type;\n   }\n \n+  /**\n+   * Given 2 'input' types, which might not be fully trustable, choose the most appropriate combined type for\n+   * non-vectorized, per-row type detection. In this mode, null values are {@link ExprType#STRING} typed, despite\n+   * potentially coming from an underlying numeric column. This method is not well suited for array handling\n+   */\n+  public static ExprType autoDetect(ExprEval result, ExprEval other)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE5NDMzOQ=="}, "originalCommit": {"oid": "24a0bebcdf7ab346dc8930e058eb7a552312297c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Nzk0OTU2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/math/expr/ExprTypeConversion.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMzozMzo1NVrOHm3UIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNDoyMjozOFrOHm7pdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUxNDIxMA==", "bodyText": "Can you update the javadoc for this method with the mixed type case and the reasoning behind preferring the non-string type?", "url": "https://github.com/apache/druid/pull/10499#discussion_r510514210", "createdAt": "2020-10-22T23:33:55Z", "author": {"login": "jon-wei"}, "path": "core/src/main/java/org/apache/druid/math/expr/ExprTypeConversion.java", "diffHunk": "@@ -74,6 +93,15 @@ public static ExprType operator(@Nullable ExprType type, @Nullable ExprType othe\n       return ExprType.STRING;\n     }\n \n+    // non-vectorized expressions\n+    if (type == ExprType.STRING) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24a0bebcdf7ab346dc8930e058eb7a552312297c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU4NTIwNw==", "bodyText": "Oh, this check isn't actually necessary anymore, it was from an intermediary state this branch was in prior to adding the autoDetect function when I was instead trying to use this in the eval of operator expressions.", "url": "https://github.com/apache/druid/pull/10499#discussion_r510585207", "createdAt": "2020-10-23T04:22:38Z", "author": {"login": "clintropolis"}, "path": "core/src/main/java/org/apache/druid/math/expr/ExprTypeConversion.java", "diffHunk": "@@ -74,6 +93,15 @@ public static ExprType operator(@Nullable ExprType type, @Nullable ExprType othe\n       return ExprType.STRING;\n     }\n \n+    // non-vectorized expressions\n+    if (type == ExprType.STRING) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUxNDIxMA=="}, "originalCommit": {"oid": "24a0bebcdf7ab346dc8930e058eb7a552312297c"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODAxMzU2OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/virtual/ExpressionPlanner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMzo1OTo1N1rOHm361A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMzo1OTo1N1rOHm361A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUyNDExNg==", "bodyText": "shoulComputeOutput -> shouldComputeOutput", "url": "https://github.com/apache/druid/pull/10499#discussion_r510524116", "createdAt": "2020-10-22T23:59:57Z", "author": {"login": "jon-wei"}, "path": "processing/src/main/java/org/apache/druid/segment/virtual/ExpressionPlanner.java", "diffHunk": "@@ -135,18 +137,29 @@ public static ExpressionPlan plan(ColumnInspector inspector, Expr expression)\n         traits.add(ExpressionPlan.Trait.NON_SCALAR_INPUTS);\n       }\n \n-      if (!maybeMultiValued.isEmpty()) {\n+      if (!noCapabilities.isEmpty()) {\n         traits.add(ExpressionPlan.Trait.UNKNOWN_INPUTS);\n       }\n \n+      if (!maybeMultiValued.isEmpty()) {\n+        traits.add(ExpressionPlan.Trait.INCOMPLETE_INPUTS);\n+      }\n+\n       // if expression needs transformed, lets do it\n       if (!needsApplied.isEmpty()) {\n         traits.add(ExpressionPlan.Trait.NEEDS_APPLIED);\n       }\n     }\n \n-    // only set output type\n-    if (ExpressionPlan.none(traits, ExpressionPlan.Trait.UNKNOWN_INPUTS, ExpressionPlan.Trait.NEEDS_APPLIED)) {\n+    // only set output type if we are pretty confident about input types\n+    final boolean shoulComputeOutput = ExpressionPlan.none(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24a0bebcdf7ab346dc8930e058eb7a552312297c"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3016, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}