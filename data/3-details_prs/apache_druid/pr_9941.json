{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MjA1NDQ4", "number": 9941, "title": "Prevent JOIN reducing to a JOIN with constant in the ON condition", "bodyText": "Prevent Join reducing to a Join with constant in the condition\nDescription\nWe have already documented that JOIN do not support joining on constant (for example SELECT t1.cityName from wikipedia as t1 LEFT join wikipedia as t2 on t1.cityName = 'Buenos Aires'). However, some valid JOIN SQL gets optimize by Calcite into a JOIN with constant in the ON condition. For example, with abc as ( SELECT cityName, \"__time\", sum_added from wikipedia WHERE \"cityName\" = 'Buenos Aires' ) SELECT t1.cityName, t1.\"__time\" from abc as t1 LEFT join abc as t2 on t1.cityName = t2.cityName WHERE t1.cityName = 'Buenos Aires' gets reduce to a JOIN with the condition =($0, 'Buenos Aires'). This then fails to plan as we do not support JOIN with constant in the ON condition. The above SQL was optimized into JOIN with constant in the ON condition due to the ReduceExpressionsRule.JOIN_INSTANCE. This PR disable the ReduceExpressionsRule.JOIN_INSTANCE rule. This will prevent valid join query that we supports (such as with abc as ( SELECT cityName, \"__time\", sum_added from wikipedia WHERE \"cityName\" = 'Buenos Aires' ) SELECT t1.cityName, t1.\"__time\" from abc as t1 LEFT join abc as t2 on t1.cityName = t2.cityName WHERE t1.cityName = 'Buenos Aires') from transforming into a dead end that we cannot plan (join on constant). We are taking this approach as we do not see a strong demand for join on constant and we have already mention that we do not support join on constant.\nPlease see issue #9942 for follow up work on supporting JOIN with constant in the ON condition. Once the follow up work is done, the ReduceExpressionsRule.JOIN_INSTANCE can be added back. The tests added in CalciteQueryTest here will also make sure there is no regression introduce by the follow up work.\nThis PR has:\n\n been self-reviewed.\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-05-28T02:10:56Z", "url": "https://github.com/apache/druid/pull/9941", "merged": true, "mergeCommit": {"oid": "821c5d5a5cf7e70b501a57e2ff1901f2ec7f6404"}, "closed": true, "closedAt": "2020-06-01T16:39:07Z", "author": {"login": "maytasm"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclkFriAH2gAyNDI0MjA1NDQ4OjhiMTc0MmY5N2UwNzA3ZGI4ODk2ZmNjM2QxZWU5NzU0MTFkM2YyZWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnDAERgFqTQyMjAwMzk1NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8b1742f97e0707db8896fcc3d1ee975411d3f2ed", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/8b1742f97e0707db8896fcc3d1ee975411d3f2ed", "committedDate": "2020-05-28T02:04:04Z", "message": "Prevent Join reducing to on constant condition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2600c3f2d778c26533fc707a571ddf888fa5b170", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/2600c3f2d778c26533fc707a571ddf888fa5b170", "committedDate": "2020-05-28T03:31:38Z", "message": "Prevent Join reducing to on constant condition"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMTcwMDE2", "url": "https://github.com/apache/druid/pull/9941#pullrequestreview-420170016", "createdAt": "2020-05-28T14:28:25Z", "commit": {"oid": "2600c3f2d778c26533fc707a571ddf888fa5b170"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDoyODoyNlrOGb3wFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDozNDoxNlrOGb4HMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg3ODE2Nw==", "bodyText": "What are your thoughts on having a list of rules that are excluded in the codebase somewhere (maybe just commented out in here). That way we can add documentation in the code about why each rule was excluded.\nIf any of the reasoning for why a rule was removed from this list changes, it would be easy to add back the rules to transform to more efficient queries.", "url": "https://github.com/apache/druid/pull/9941#discussion_r431878167", "createdAt": "2020-05-28T14:28:26Z", "author": {"login": "suneet-s"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/planner/Rules.java", "diffHunk": "@@ -130,7 +130,6 @@\n           ReduceExpressionsRule.FILTER_INSTANCE,\n           ReduceExpressionsRule.CALC_INSTANCE,\n           ReduceExpressionsRule.WINDOW_INSTANCE,\n-          ReduceExpressionsRule.JOIN_INSTANCE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2600c3f2d778c26533fc707a571ddf888fa5b170"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg4NDA4MQ==", "bodyText": "Can you add a test that fails a query with the shape defined in #9942", "url": "https://github.com/apache/druid/pull/9941#discussion_r431884081", "createdAt": "2020-05-28T14:34:16Z", "author": {"login": "suneet-s"}, "path": "sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java", "diffHunk": "@@ -13884,6 +13885,318 @@ public void testQueryContextOuterLimit() throws Exception\n     );\n   }\n \n+  @Test\n+  public void testCountOnSemiJoinSingleColumn() throws Exception\n+  {\n+    testQuery(\n+        \"SELECT dim1 FROM foo WHERE dim1 IN (SELECT dim1 FROM foo WHERE dim1 = '10.1')\\n\",\n+        ImmutableList.of(\n+            newScanQueryBuilder()\n+                .dataSource(\n+                    join(\n+                        new TableDataSource(CalciteTests.DATASOURCE1),\n+                        new QueryDataSource(\n+                            GroupByQuery.builder()\n+                                        .setDataSource(CalciteTests.DATASOURCE1)\n+                                        .setInterval(querySegmentSpec(Filtration.eternity()))\n+                                        .setDimFilter(\n+                                            selector(\"dim1\", \"10.1\", null)\n+                                        )\n+                                        .setGranularity(Granularities.ALL)\n+                                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\", \"d0\")))\n+                                        .setContext(QUERY_CONTEXT_DEFAULT)\n+                                        .build()\n+                        ),\n+                        \"j0.\",\n+                        equalsCondition(DruidExpression.fromColumn(\"dim1\"), DruidExpression.fromColumn(\"j0.d0\")),\n+                        JoinType.INNER\n+                    )\n+                )\n+                .intervals(querySegmentSpec(Filtration.eternity()))\n+                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                .columns(\"v0\")\n+                .context(QUERY_CONTEXT_DEFAULT)\n+                .build()\n+        ),\n+        ImmutableList.of(\n+            new Object[]{\"10.1\"}\n+        )\n+    );\n+  }\n+\n+  @Test\n+  public void testLeftJoinOnTwoInlineDataSourcesWithTimeFilter() throws Exception\n+  {\n+    testQuery(\n+        \"with abc as\\n\"\n+        + \"(\\n\"\n+        + \"  SELECT dim1, \\\"__time\\\", m1 from foo WHERE \\\"dim1\\\" = '10.1' AND \\\"__time\\\" >= '1999'\\n\"\n+        + \")\\n\"\n+        + \"SELECT t1.dim1, t1.\\\"__time\\\" from abc as t1 LEFT JOIN abc as t2 on t1.dim1 = t2.dim1 WHERE t1.dim1 = '10.1'\\n\",\n+        ImmutableList.of(\n+            newScanQueryBuilder()\n+                .dataSource(\n+                    join(\n+                        new QueryDataSource(\n+                            newScanQueryBuilder()\n+                                .dataSource(CalciteTests.DATASOURCE1)\n+                                .intervals(\n+                                    querySegmentSpec(\n+                                        Intervals.utc(\n+                                            DateTimes.of(\"1999-01-01\").getMillis(),\n+                                            JodaUtils.MAX_INSTANT\n+                                        )\n+                                    )\n+                                )\n+                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n+                                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                                .columns(ImmutableList.of(\"__time\", \"v0\"))\n+                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n+                                .context(QUERY_CONTEXT_DEFAULT)\n+                                .build()\n+                        ),\n+                        new QueryDataSource(\n+                            newScanQueryBuilder()\n+                                .dataSource(CalciteTests.DATASOURCE1)\n+                                .intervals(\n+                                    querySegmentSpec(\n+                                        Intervals.utc(\n+                                            DateTimes.of(\"1999-01-01\").getMillis(),\n+                                            JodaUtils.MAX_INSTANT\n+                                        )\n+                                    )\n+                                )\n+                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n+                                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                                .columns(ImmutableList.of(\"v0\"))\n+                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n+                                .context(QUERY_CONTEXT_DEFAULT)\n+                                .build()\n+                        ),\n+                        \"j0.\",\n+                        equalsCondition(DruidExpression.fromColumn(\"v0\"), DruidExpression.fromColumn(\"j0.v0\")),\n+                        JoinType.LEFT\n+                    )\n+                )\n+                .intervals(querySegmentSpec(Filtration.eternity()))\n+                .virtualColumns(expressionVirtualColumn(\"_v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                .columns(\"__time\", \"_v0\")\n+                .filters(new SelectorDimFilter(\"v0\", \"10.1\", null))\n+                .context(QUERY_CONTEXT_DEFAULT)\n+                .build()\n+        ),\n+        ImmutableList.of(\n+            new Object[]{\"10.1\", 946771200000L}\n+        )\n+    );\n+  }\n+\n+  @Test\n+  public void testLeftJoinOnTwoInlineDataSourcesWithOuterWhere() throws Exception\n+  {\n+    testQuery(\n+        \"with abc as\\n\"\n+        + \"(\\n\"\n+        + \"  SELECT dim1, \\\"__time\\\", m1 from foo WHERE \\\"dim1\\\" = '10.1'\\n\"\n+        + \")\\n\"\n+        + \"SELECT t1.dim1, t1.\\\"__time\\\" from abc as t1 LEFT JOIN abc as t2 on t1.dim1 = t2.dim1 WHERE t1.dim1 = '10.1'\\n\",\n+        ImmutableList.of(\n+            newScanQueryBuilder()\n+                .dataSource(\n+                    join(\n+                        new QueryDataSource(\n+                            newScanQueryBuilder()\n+                                .dataSource(CalciteTests.DATASOURCE1)\n+                                .intervals(querySegmentSpec(Filtration.eternity()))\n+                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n+                                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                                .columns(ImmutableList.of(\"__time\", \"v0\"))\n+                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n+                                .context(QUERY_CONTEXT_DEFAULT)\n+                                .build()\n+                        ),\n+                        new QueryDataSource(\n+                            newScanQueryBuilder()\n+                                .dataSource(CalciteTests.DATASOURCE1)\n+                                .intervals(querySegmentSpec(Filtration.eternity()))\n+                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n+                                .columns(ImmutableList.of(\"dim1\"))\n+                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n+                                .context(QUERY_CONTEXT_DEFAULT)\n+                                .build()\n+                        ),\n+                        \"j0.\",\n+                        equalsCondition(DruidExpression.fromColumn(\"v0\"), DruidExpression.fromColumn(\"j0.dim1\")),\n+                        JoinType.LEFT\n+                    )\n+                )\n+                .intervals(querySegmentSpec(Filtration.eternity()))\n+                .virtualColumns(expressionVirtualColumn(\"_v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                .columns(\"__time\", \"_v0\")\n+                .filters(new SelectorDimFilter(\"v0\", \"10.1\", null))\n+                .context(QUERY_CONTEXT_DEFAULT)\n+                .build()\n+        ),\n+        ImmutableList.of(\n+            new Object[]{\"10.1\", 946771200000L}\n+        )\n+    );\n+  }\n+\n+  @Test\n+  public void testLeftJoinOnTwoInlineDataSources() throws Exception\n+  {\n+    testQuery(\n+        \"with abc as\\n\"\n+        + \"(\\n\"\n+        + \"  SELECT dim1, \\\"__time\\\", m1 from foo WHERE \\\"dim1\\\" = '10.1'\\n\"\n+        + \")\\n\"\n+        + \"SELECT t1.dim1, t1.\\\"__time\\\" from abc as t1 LEFT JOIN abc as t2 on t1.dim1 = t2.dim1\\n\",\n+        ImmutableList.of(\n+            newScanQueryBuilder()\n+                .dataSource(\n+                    join(\n+                        new QueryDataSource(\n+                            newScanQueryBuilder()\n+                                .dataSource(CalciteTests.DATASOURCE1)\n+                                .intervals(querySegmentSpec(Filtration.eternity()))\n+                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n+                                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                                .columns(ImmutableList.of(\"__time\", \"v0\"))\n+                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n+                                .context(QUERY_CONTEXT_DEFAULT)\n+                                .build()\n+                        ),\n+                        new QueryDataSource(\n+                            newScanQueryBuilder()\n+                                .dataSource(CalciteTests.DATASOURCE1)\n+                                .intervals(querySegmentSpec(Filtration.eternity()))\n+                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n+                                .columns(ImmutableList.of(\"dim1\"))\n+                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n+                                .context(QUERY_CONTEXT_DEFAULT)\n+                                .build()\n+                        ),\n+                        \"j0.\",\n+                        equalsCondition(DruidExpression.fromColumn(\"v0\"), DruidExpression.fromColumn(\"j0.dim1\")),\n+                        JoinType.LEFT\n+                    )\n+                )\n+                .intervals(querySegmentSpec(Filtration.eternity()))\n+                .virtualColumns(expressionVirtualColumn(\"_v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                .columns(\"__time\", \"_v0\")\n+                .context(QUERY_CONTEXT_DEFAULT)\n+                .build()\n+        ),\n+        ImmutableList.of(\n+            new Object[]{\"10.1\", 946771200000L}\n+        )\n+    );\n+  }\n+\n+  @Test\n+  public void testInnerJoinOnTwoInlineDataSourcesWithOuterWhere() throws Exception\n+  {\n+    testQuery(\n+        \"with abc as\\n\"\n+        + \"(\\n\"\n+        + \"  SELECT dim1, \\\"__time\\\", m1 from foo WHERE \\\"dim1\\\" = '10.1'\\n\"\n+        + \")\\n\"\n+        + \"SELECT t1.dim1, t1.\\\"__time\\\" from abc as t1 INNER JOIN abc as t2 on t1.dim1 = t2.dim1 WHERE t1.dim1 = '10.1'\\n\",\n+        ImmutableList.of(\n+            newScanQueryBuilder()\n+                .dataSource(\n+                    join(\n+                        new QueryDataSource(\n+                            newScanQueryBuilder()\n+                                .dataSource(CalciteTests.DATASOURCE1)\n+                                .intervals(querySegmentSpec(Filtration.eternity()))\n+                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n+                                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                                .columns(ImmutableList.of(\"__time\", \"v0\"))\n+                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n+                                .context(QUERY_CONTEXT_DEFAULT)\n+                                .build()\n+                        ),\n+                        new QueryDataSource(\n+                            newScanQueryBuilder()\n+                                .dataSource(CalciteTests.DATASOURCE1)\n+                                .intervals(querySegmentSpec(Filtration.eternity()))\n+                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n+                                .columns(ImmutableList.of(\"dim1\"))\n+                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n+                                .context(QUERY_CONTEXT_DEFAULT)\n+                                .build()\n+                        ),\n+                        \"j0.\",\n+                        equalsCondition(DruidExpression.fromColumn(\"v0\"), DruidExpression.fromColumn(\"j0.dim1\")),\n+                        JoinType.INNER\n+                    )\n+                )\n+                .intervals(querySegmentSpec(Filtration.eternity()))\n+                .virtualColumns(expressionVirtualColumn(\"_v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                .columns(\"__time\", \"_v0\")\n+                .filters(new NotDimFilter(new SelectorDimFilter(\"v0\", null, null)))\n+                .context(QUERY_CONTEXT_DEFAULT)\n+                .build()\n+        ),\n+        ImmutableList.of(\n+            new Object[]{\"10.1\", 946771200000L}\n+        )\n+    );\n+  }\n+\n+  @Test\n+  public void testInnerJoinOnTwoInlineDataSources() throws Exception\n+  {\n+    testQuery(\n+        \"with abc as\\n\"\n+        + \"(\\n\"\n+        + \"  SELECT dim1, \\\"__time\\\", m1 from foo WHERE \\\"dim1\\\" = '10.1'\\n\"\n+        + \")\\n\"\n+        + \"SELECT t1.dim1, t1.\\\"__time\\\" from abc as t1 INNER JOIN abc as t2 on t1.dim1 = t2.dim1\\n\",\n+        ImmutableList.of(\n+            newScanQueryBuilder()\n+                .dataSource(\n+                    join(\n+                        new QueryDataSource(\n+                            newScanQueryBuilder()\n+                                .dataSource(CalciteTests.DATASOURCE1)\n+                                .intervals(querySegmentSpec(Filtration.eternity()))\n+                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n+                                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                                .columns(ImmutableList.of(\"__time\", \"v0\"))\n+                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n+                                .context(QUERY_CONTEXT_DEFAULT)\n+                                .build()\n+                        ),\n+                        new QueryDataSource(\n+                            newScanQueryBuilder()\n+                                .dataSource(CalciteTests.DATASOURCE1)\n+                                .intervals(querySegmentSpec(Filtration.eternity()))\n+                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n+                                .columns(ImmutableList.of(\"dim1\"))\n+                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n+                                .context(QUERY_CONTEXT_DEFAULT)\n+                                .build()\n+                        ),\n+                        \"j0.\",\n+                        equalsCondition(DruidExpression.fromColumn(\"v0\"), DruidExpression.fromColumn(\"j0.dim1\")),\n+                        JoinType.INNER\n+                    )\n+                )\n+                .intervals(querySegmentSpec(Filtration.eternity()))\n+                .virtualColumns(expressionVirtualColumn(\"_v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                .columns(\"__time\", \"_v0\")\n+                .context(QUERY_CONTEXT_DEFAULT)\n+                .build()\n+        ),\n+        ImmutableList.of(\n+            new Object[]{\"10.1\", 946771200000L}\n+        )\n+    );\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2600c3f2d778c26533fc707a571ddf888fa5b170"}, "originalPosition": 332}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7dd9197e5c22b7523de7461a2ec7b69c9f2bb73", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/e7dd9197e5c22b7523de7461a2ec7b69c9f2bb73", "committedDate": "2020-05-29T03:08:20Z", "message": "addreess comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3d57113ea8c30149abaf042814991e728446214", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/b3d57113ea8c30149abaf042814991e728446214", "committedDate": "2020-05-29T03:21:01Z", "message": "Resolve merge conflict"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNjI4NjIx", "url": "https://github.com/apache/druid/pull/9941#pullrequestreview-420628621", "createdAt": "2020-05-29T03:26:09Z", "commit": {"oid": "b3d57113ea8c30149abaf042814991e728446214"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b78f93aa575cd881f846802c48f06f9eb723f0dd", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/b78f93aa575cd881f846802c48f06f9eb723f0dd", "committedDate": "2020-05-29T03:33:12Z", "message": "set queryContext in tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMDgxNzUy", "url": "https://github.com/apache/druid/pull/9941#pullrequestreview-421081752", "createdAt": "2020-05-29T15:54:59Z", "commit": {"oid": "b78f93aa575cd881f846802c48f06f9eb723f0dd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMDAzOTU0", "url": "https://github.com/apache/druid/pull/9941#pullrequestreview-422003954", "createdAt": "2020-06-01T16:38:55Z", "commit": {"oid": "b78f93aa575cd881f846802c48f06f9eb723f0dd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2413, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}