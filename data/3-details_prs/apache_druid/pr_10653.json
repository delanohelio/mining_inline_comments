{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0NDA2MDkx", "number": 10653, "title": "Fix post-aggregator computation when used with subtotals", "bodyText": "Description\nPost-aggregators, when used with subtotals, errors if the post-aggregator depends on a dimension that is absent in one of the subtotal. An example query is as follows\nSELECT dim2, SUM(cnt), GROUPING(dim2), \nCASE WHEN GROUPING(dim2) = 1 THEN 'ALL' ELSE dim2 END\nFROM druid.foo\nGROUP BY GROUPING SETS ( (dim2), () )\n\nThe exception is\njava.lang.IllegalArgumentException: Missing fields [[d0]] for postAggregator [p0]\n\n\tat com.google.common.base.Preconditions.checkArgument(Preconditions.java:148)\n\tat org.apache.druid.query.Queries.prepareAggregations(Queries.java:118)\n\tat org.apache.druid.query.groupby.GroupByQuery.<init>(GroupByQuery.java:210)\n\tat org.apache.druid.query.groupby.GroupByQuery.<init>(GroupByQuery.java:88)\n\tat org.apache.druid.query.groupby.GroupByQuery$Builder.build(GroupByQuery.java:1175)\n\tat org.apache.druid.query.groupby.GroupByQuery.withDimensionSpecs(GroupByQuery.java:804)\n\tat org.apache.druid.query.groupby.strategy.GroupByStrategyV2.processSubtotalsSpec(GroupByStrategyV2.java:446)\n\tat org.apache.druid.query.groupby.GroupByQueryQueryToolChest.mergeGroupByResultsWithoutPushDown(GroupByQueryQueryToolChest.java:250)\n\tat org.apache.druid.query.groupby.GroupByQueryQueryToolChest.mergeGroupByResults(GroupByQueryQueryToolChest.java:177)\n\tat org.apache.druid.query.groupby.GroupByQueryQueryToolChest.initAndMergeGroupByResults(GroupByQueryQueryToolChest.java:149)\n\tat org.apache.druid.query.groupby.GroupByQueryQueryToolChest.lambda$mergeResults$0(GroupByQueryQueryToolChest.java:122)\n\tat org.apache.druid.query.FinalizeResultsQueryRunner.run(FinalizeResultsQueryRunner.java:110)\n\nI have removed the dimension renaming. We only carry over the dimensions included in the subtotal spec while generating results for any subtotal.\n\nThis PR has:\n\n been self-reviewed.\n added unit tests or modified existing tests to cover new code paths, ensuring the threshold for code coverage is met.\n been tested in a test Druid cluster.\n\n\nKey changed/added classes in this PR\n\nGroupyByStrategyV2", "createdAt": "2020-12-08T12:08:03Z", "url": "https://github.com/apache/druid/pull/10653", "merged": true, "mergeCommit": {"oid": "796c25532ede771c6b9b6dbadfcec030a70084d0"}, "closed": true, "closedAt": "2020-12-18T04:10:27Z", "author": {"login": "abhishekagarwal87"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkEPqNAH2gAyNTM0NDA2MDkxOmM2OTM2MWI5MmZiZGM3OGM1ZTM3ZDlkNjI1ZWQ2YTRjYmRlNzUxNGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdnQKk_gFqTU1NTE2MDc0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c69361b92fbdc78c5e37d9d625ed6a4cbde7514e", "author": {"user": {"login": "abhishekagarwal87", "name": "Abhishek Agarwal"}}, "url": "https://github.com/apache/druid/commit/c69361b92fbdc78c5e37d9d625ed6a4cbde7514e", "committedDate": "2020-12-08T06:35:14Z", "message": "Fix post-aggregator computation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7847a16944e2360956c40882c9209e6ec5252b6", "author": {"user": {"login": "abhishekagarwal87", "name": "Abhishek Agarwal"}}, "url": "https://github.com/apache/druid/commit/a7847a16944e2360956c40882c9209e6ec5252b6", "committedDate": "2020-12-08T11:21:10Z", "message": "remove commented code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NDIyNjkw", "url": "https://github.com/apache/druid/pull/10653#pullrequestreview-547422690", "createdAt": "2020-12-08T16:46:09Z", "commit": {"oid": "c69361b92fbdc78c5e37d9d625ed6a4cbde7514e"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjo0NjowOVrOIBowdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjo0OTozMlrOIBo_Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU4NzI1Mg==", "bodyText": "Why did you change this test case? (As opposed to introducing a new test case.)", "url": "https://github.com/apache/druid/pull/10653#discussion_r538587252", "createdAt": "2020-12-08T16:46:09Z", "author": {"login": "gianm"}, "path": "sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java", "diffHunk": "@@ -12159,23 +12159,23 @@ public void testGroupingAggregatorWithPostAggregator() throws Exception\n     List<Object[]> resultList;\n     if (NullHandling.sqlCompatible()) {\n       resultList = ImmutableList.of(\n-          new Object[]{NULL_STRING, 2L, 0L, \"INDIVIDUAL\"},\n-          new Object[]{\"\", 1L, 0L, \"INDIVIDUAL\"},\n-          new Object[]{\"a\", 2L, 0L, \"INDIVIDUAL\"},\n-          new Object[]{\"abc\", 1L, 0L, \"INDIVIDUAL\"},\n+          new Object[]{NULL_STRING, 2L, 0L, NULL_STRING},\n+          new Object[]{\"\", 1L, 0L, \"\"},\n+          new Object[]{\"a\", 2L, 0L, \"a\"},\n+          new Object[]{\"abc\", 1L, 0L, \"abc\"},\n           new Object[]{NULL_STRING, 6L, 1L, \"ALL\"}\n       );\n     } else {\n       resultList = ImmutableList.of(\n-          new Object[]{\"\", 3L, 0L, \"INDIVIDUAL\"},\n-          new Object[]{\"a\", 2L, 0L, \"INDIVIDUAL\"},\n-          new Object[]{\"abc\", 1L, 0L, \"INDIVIDUAL\"},\n+          new Object[]{\"\", 3L, 0L, \"\"},\n+          new Object[]{\"a\", 2L, 0L, \"a\"},\n+          new Object[]{\"abc\", 1L, 0L, \"abc\"},\n           new Object[]{NULL_STRING, 6L, 1L, \"ALL\"}\n       );\n     }\n     testQuery(\n         \"SELECT dim2, SUM(cnt), GROUPING(dim2), \\n\"\n-        + \"CASE WHEN GROUPING(dim2) = 1 THEN 'ALL' ELSE 'INDIVIDUAL' END\\n\"\n+        + \"CASE WHEN GROUPING(dim2) = 1 THEN 'ALL' ELSE dim2 END\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c69361b92fbdc78c5e37d9d625ed6a4cbde7514e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU4NzQ2NA==", "bodyText": "Please don't include commented-out code.", "url": "https://github.com/apache/druid/pull/10653#discussion_r538587464", "createdAt": "2020-12-08T16:46:22Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/groupby/strategy/GroupByStrategyV2.java", "diffHunk": "@@ -442,8 +425,8 @@ public boolean doMergeResults(final GroupByQuery query)\n         }\n \n         GroupByQuery subtotalQuery = baseSubtotalQuery\n-            .withLimitSpec(subtotalQueryLimitSpec)\n-            .withDimensionSpecs(newDimensions);\n+            .withLimitSpec(subtotalQueryLimitSpec);\n+            //.withDimensionSpecs(newDimensions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c69361b92fbdc78c5e37d9d625ed6a4cbde7514e"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU5MTA2Ng==", "bodyText": "Is this concern no longer valid?\nIIRC, it was necessary because otherwise the ResultRows would be different lengths and so the final results wouldn't be correct.", "url": "https://github.com/apache/druid/pull/10653#discussion_r538591066", "createdAt": "2020-12-08T16:49:32Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/groupby/strategy/GroupByStrategyV2.java", "diffHunk": "@@ -408,27 +408,10 @@ public boolean doMergeResults(final GroupByQuery query)\n         // Dimension spec including dimension name and output name\n         final List<DimensionSpec> subTotalDimensionSpec = new ArrayList<>(dimsInSubtotalSpec.size());\n         final List<DimensionSpec> dimensions = query.getDimensions();\n-        final List<DimensionSpec> newDimensions = new ArrayList<>();\n \n-        for (int i = 0; i < dimensions.size(); i++) {\n-          DimensionSpec dimensionSpec = dimensions.get(i);\n+        for (DimensionSpec dimensionSpec : dimensions) {\n           if (dimsInSubtotalSpec.contains(dimensionSpec.getOutputName())) {\n-            newDimensions.add(\n-                new DefaultDimensionSpec(\n-                    dimensionSpec.getOutputName(),\n-                    dimensionSpec.getOutputName(),\n-                    dimensionSpec.getOutputType()\n-                )\n-            );\n             subTotalDimensionSpec.add(dimensionSpec);\n-          } else {\n-            // Insert dummy dimension so all subtotals queries have ResultRows with the same shape.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c69361b92fbdc78c5e37d9d625ed6a4cbde7514e"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNjI3OTQx", "url": "https://github.com/apache/druid/pull/10653#pullrequestreview-550627941", "createdAt": "2020-12-11T22:49:30Z", "commit": {"oid": "a7847a16944e2360956c40882c9209e6ec5252b6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a21e287cc745caa957437e8bfee5b0ceba9ed025", "author": {"user": {"login": "abhishekagarwal87", "name": "Abhishek Agarwal"}}, "url": "https://github.com/apache/druid/commit/a21e287cc745caa957437e8bfee5b0ceba9ed025", "committedDate": "2020-12-14T19:53:12Z", "message": "Fix numeric null handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbd6526ebef123b947d00207a697ddd5b927ddbc", "author": {"user": {"login": "abhishekagarwal87", "name": "Abhishek Agarwal"}}, "url": "https://github.com/apache/druid/commit/dbd6526ebef123b947d00207a697ddd5b927ddbc", "committedDate": "2020-12-15T08:13:20Z", "message": "Add test when subquery returns null long"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0NDMxNDEy", "url": "https://github.com/apache/druid/pull/10653#pullrequestreview-554431412", "createdAt": "2020-12-17T09:41:56Z", "commit": {"oid": "dbd6526ebef123b947d00207a697ddd5b927ddbc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwOTo0MTo1NlrOIHs8OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwOTo0MTo1NlrOIHs8OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk0NzI1Nw==", "bodyText": "FYI, this change could cause a dip in performance when columns are actually strings and being read as a number. Since the parsing first happens in  isNull function and then again in getLong", "url": "https://github.com/apache/druid/pull/10653#discussion_r544947257", "createdAt": "2020-12-17T09:41:56Z", "author": {"login": "abhishekagarwal87"}, "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/RowBasedGrouperHelper.java", "diffHunk": "@@ -712,13 +712,13 @@ public InputRawSupplierColumnSelectorStrategy makeColumnSelectorStrategy(\n           return new StringInputRawSupplierColumnSelectorStrategy();\n         case LONG:\n           return (InputRawSupplierColumnSelectorStrategy<BaseLongColumnValueSelector>)\n-              columnSelector -> columnSelector::getLong;\n+              columnSelector -> () -> columnSelector.isNull() ? null : columnSelector.getLong();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd6526ebef123b947d00207a697ddd5b927ddbc"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1MTYwNzQx", "url": "https://github.com/apache/druid/pull/10653#pullrequestreview-555160741", "createdAt": "2020-12-18T04:10:19Z", "commit": {"oid": "dbd6526ebef123b947d00207a697ddd5b927ddbc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3151, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}