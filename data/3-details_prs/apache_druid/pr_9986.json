{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NzQyMzkw", "number": 9986, "title": "Fix groupBy with literal in subquery grouping", "bodyText": "Fix groupBy with literal in subquery grouping\nDescription\nI believe this is a regression/bug caused by #9122\nWhen we have a query such as:\nSELECT \n\tt1, t2\nFROM\n\t( SELECT\n\t\t'm' as t1,\n\t\tCASE\n\t  \tWHEN \n\t  \t\tcityName = 'Egypt'\n\t  \tTHEN cityName\n      \tELSE NULL\n    END AS t2\n\t  FROM\n\t\twikipedia\n\t  GROUP BY\n\t\tcityName\n\t)\nGROUP BY\n\tt1,t2\n\nCalcite will creates a Rel 2020-06-04T08:59:34,977 TRACE [sql[0840a1a8-ff59-4986-ad69-be2ce27a5e68]] org.apache.calcite.plan.RelOptPlanner - Register rel#5424:DruidQueryRel.NONE.[](query={\"queryType\":\"groupBy\",\"dataSource\":{\"type\":\"table\",\"name\":\"wikipedia\"},\"intervals\":{\"type\":\"intervals\",\"intervals\":[\"-146136543-09-08T08:23:32.096Z/146140482-04-24T15:36:27.903Z\"]},\"virtualColumns\":[],\"filter\":null,\"granularity\":{\"type\":\"all\"},\"dimensions\":[{\"type\":\"default\",\"dimension\":\"cityName\",\"outputName\":\"d0\",\"outputType\":\"STRING\"}],\"aggregations\":[],\"postAggregations\":[],\"having\":null,\"limitSpec\":{\"type\":\"NoopLimitSpec\"},\"context\":{\"populateCache\":false,\"sqlQueryId\":\"0840a1a8-ff59-4986-ad69-be2ce27a5e68\",\"useCache\":false},\"descending\":false},signature={d0:STRING}) in rel#5415:Subset#2.NONE.[] for part of the subquery. This Rel signature is only a single field. The other field which is a literal is not part of the groupBy and is part of the projection on top of this.\nNow the problem is when we try to build new Rel, in computeSubtotals with the above Rel as the sourceRel and a partialQuery with aggregate looking like aggregate=rel#5418:LogicalAggregate.NONE.[](input=RelSubset#5417,group={0, 1}), havingFilter=null, aggregateProject=null, sort=null, sortProject=null}. This aggregate has two bits in the groupSet. This fails without taking into account the projection mentioned above. Hence, we should skip and not build this new Rel and handle this case with CannotBuildQueryException so that we can move on to other Rels.\nThis PR has:\n\n been self-reviewed.\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-06-04T10:33:26Z", "url": "https://github.com/apache/druid/pull/9986", "merged": true, "mergeCommit": {"oid": "9738a03c833ee6e7ba421413b811c2522a01d873"}, "closed": true, "closedAt": "2020-06-04T23:28:06Z", "author": {"login": "maytasm"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcn7WBhgH2gAyNDI3NzQyMzkwOjMyZWUyNTU3MDMxYWRlZTllOGRkNzljY2M4MWViZmVjNDk3OTZkNTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcoGKXGAFqTQyNDg4ODc2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "32ee2557031adee9e8dd79ccc81ebfec49796d58", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/32ee2557031adee9e8dd79ccc81ebfec49796d58", "committedDate": "2020-06-04T10:17:35Z", "message": "fix groupBy with literal in subquery grouping"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "777a92230df7e5ab3890df4cefe285792f571aba", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/777a92230df7e5ab3890df4cefe285792f571aba", "committedDate": "2020-06-04T20:21:50Z", "message": "fix groupBy with literal in subquery grouping"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3e15fd2c021bbe3fa0869c61b80cebad0338bae", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/a3e15fd2c021bbe3fa0869c61b80cebad0338bae", "committedDate": "2020-06-04T20:28:37Z", "message": "fix groupBy with literal in subquery grouping"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0ODA0MzM4", "url": "https://github.com/apache/druid/pull/9986#pullrequestreview-424804338", "createdAt": "2020-06-04T20:29:57Z", "commit": {"oid": "777a92230df7e5ab3890df4cefe285792f571aba"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMDoyOTo1OFrOGfWrTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMDozNjoyMVrOGfW33g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUzMDU3NA==", "bodyText": "FYI: You could simplify this by using NULL_STRING for the null / \"\" and avoiding the ternary.", "url": "https://github.com/apache/druid/pull/9986#discussion_r435530574", "createdAt": "2020-06-04T20:29:58Z", "author": {"login": "gianm"}, "path": "sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java", "diffHunk": "@@ -13419,6 +13420,73 @@ public void testNvlColumns() throws Exception\n     );\n   }\n \n+  @Test\n+  public void testGroupByWithLiteralInSubqueryGrouping() throws Exception\n+  {\n+    testQuery(\n+        \"SELECT \\n\"\n+        + \"   t1, t2\\n\"\n+        + \"  FROM\\n\"\n+        + \"   ( SELECT\\n\"\n+        + \"     'dummy' as t1,\\n\"\n+        + \"     CASE\\n\"\n+        + \"       WHEN \\n\"\n+        + \"         dim4 = 'b'\\n\"\n+        + \"       THEN dim4\\n\"\n+        + \"       ELSE NULL\\n\"\n+        + \"     END AS t2\\n\"\n+        + \"     FROM\\n\"\n+        + \"       numfoo\\n\"\n+        + \"     GROUP BY\\n\"\n+        + \"       dim4\\n\"\n+        + \"   )\\n\"\n+        + \" GROUP BY\\n\"\n+        + \"   t1,t2\\n\",\n+        ImmutableList.of(\n+            GroupByQuery.builder()\n+                        .setDataSource(\n+                            GroupByQuery.builder()\n+                                        .setDataSource(CalciteTests.DATASOURCE3)\n+                                        .setInterval(querySegmentSpec(Filtration.eternity()))\n+                                        .setGranularity(Granularities.ALL)\n+                                        .setDimensions(new DefaultDimensionSpec(\"dim4\", \"_d0\", ValueType.STRING))\n+                                        .setContext(QUERY_CONTEXT_DEFAULT)\n+                                        .build()\n+                        )\n+                        .setVirtualColumns(\n+                            expressionVirtualColumn(\n+                                \"v0\",\n+                                \"\\'dummy\\'\",\n+                                ValueType.STRING\n+                            ),\n+                            expressionVirtualColumn(\n+                                \"v1\",\n+                                \"case_searched((\\\"_d0\\\" == 'b'),\\\"_d0\\\",null)\",\n+                                ValueType.STRING\n+                            )\n+                        )                        .setInterval(querySegmentSpec(Filtration.eternity()))\n+                        .setDimensions(\n+                            dimensions(\n+                                new DefaultDimensionSpec(\"v0\", \"d0\", ValueType.STRING),\n+                                new DefaultDimensionSpec(\"v1\", \"d1\", ValueType.STRING)\n+                            )\n+                        )\n+                        .setGranularity(Granularities.ALL)\n+                        .setContext(QUERY_CONTEXT_DEFAULT)\n+                        .build()\n+        ),\n+        NullHandling.replaceWithDefault() ?\n+        ImmutableList.of(\n+            new Object[]{\"dummy\", \"\"},\n+            new Object[]{\"dummy\", \"b\"}\n+        ) :\n+        ImmutableList.of(\n+            new Object[]{\"dummy\", null},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "777a92230df7e5ab3890df4cefe285792f571aba"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUzMTEwMg==", "bodyText": "This indentation is kind of weird. I'm not sure if checkstyle will flag it, but watch out.", "url": "https://github.com/apache/druid/pull/9986#discussion_r435531102", "createdAt": "2020-06-04T20:31:04Z", "author": {"login": "gianm"}, "path": "sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java", "diffHunk": "@@ -13419,6 +13420,73 @@ public void testNvlColumns() throws Exception\n     );\n   }\n \n+  @Test\n+  public void testGroupByWithLiteralInSubqueryGrouping() throws Exception\n+  {\n+    testQuery(\n+        \"SELECT \\n\"\n+        + \"   t1, t2\\n\"\n+        + \"  FROM\\n\"\n+        + \"   ( SELECT\\n\"\n+        + \"     'dummy' as t1,\\n\"\n+        + \"     CASE\\n\"\n+        + \"       WHEN \\n\"\n+        + \"         dim4 = 'b'\\n\"\n+        + \"       THEN dim4\\n\"\n+        + \"       ELSE NULL\\n\"\n+        + \"     END AS t2\\n\"\n+        + \"     FROM\\n\"\n+        + \"       numfoo\\n\"\n+        + \"     GROUP BY\\n\"\n+        + \"       dim4\\n\"\n+        + \"   )\\n\"\n+        + \" GROUP BY\\n\"\n+        + \"   t1,t2\\n\",\n+        ImmutableList.of(\n+            GroupByQuery.builder()\n+                        .setDataSource(\n+                            GroupByQuery.builder()\n+                                        .setDataSource(CalciteTests.DATASOURCE3)\n+                                        .setInterval(querySegmentSpec(Filtration.eternity()))\n+                                        .setGranularity(Granularities.ALL)\n+                                        .setDimensions(new DefaultDimensionSpec(\"dim4\", \"_d0\", ValueType.STRING))\n+                                        .setContext(QUERY_CONTEXT_DEFAULT)\n+                                        .build()\n+                        )\n+                        .setVirtualColumns(\n+                            expressionVirtualColumn(\n+                                \"v0\",\n+                                \"\\'dummy\\'\",\n+                                ValueType.STRING\n+                            ),\n+                            expressionVirtualColumn(\n+                                \"v1\",\n+                                \"case_searched((\\\"_d0\\\" == 'b'),\\\"_d0\\\",null)\",\n+                                ValueType.STRING\n+                            )\n+                        )                        .setInterval(querySegmentSpec(Filtration.eternity()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3e15fd2c021bbe3fa0869c61b80cebad0338bae"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUzMzc5MA==", "bodyText": "I think there's no need to do this check, because it isn't needed to build the Subtotals object, and computeDimensions will handle the case where we're grouping on something where dimensions are based on expressions that are not translatable.", "url": "https://github.com/apache/druid/pull/9986#discussion_r435533790", "createdAt": "2020-06-04T20:36:21Z", "author": {"login": "gianm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/rel/DruidQuery.java", "diffHunk": "@@ -424,16 +425,39 @@ private static Grouping computeGrouping(\n \n   /**\n    * Builds a {@link Subtotals} object based on {@link Aggregate#getGroupSets()}.\n+   *\n+   * @throws CannotBuildQueryException if subtotals cannot be computed\n    */\n   private static Subtotals computeSubtotals(\n       final PartialDruidQuery partialQuery,\n+      final PlannerContext plannerContext,\n       final RowSignature rowSignature\n   )\n   {\n     final Aggregate aggregate = partialQuery.getAggregate();\n \n     // dimBitMapping maps from input field position to group set position (dimension number).\n-    final int[] dimBitMapping = new int[rowSignature.size()];\n+    final int[] dimBitMapping;\n+    if (partialQuery.getSelectProject() != null) {\n+      int fieldCount = 0;\n+      for (final RexNode rexNode : partialQuery.getSelectProject().getChildExps()) {\n+        final DruidExpression expression = Expressions.toDruidExpression(\n+            plannerContext,\n+            rowSignature,\n+            rexNode\n+        );\n+\n+        if (expression == null) {\n+          throw new CannotBuildQueryException(partialQuery.getSelectProject(), rexNode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3e15fd2c021bbe3fa0869c61b80cebad0338bae"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19dd058230dd222d2f236ccd9e3fe386f6121b6a", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/19dd058230dd222d2f236ccd9e3fe386f6121b6a", "committedDate": "2020-06-04T20:47:53Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0ODIzMjY3", "url": "https://github.com/apache/druid/pull/9986#pullrequestreview-424823267", "createdAt": "2020-06-04T20:58:50Z", "commit": {"oid": "19dd058230dd222d2f236ccd9e3fe386f6121b6a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0ODYyMjE5", "url": "https://github.com/apache/druid/pull/9986#pullrequestreview-424862219", "createdAt": "2020-06-04T21:53:40Z", "commit": {"oid": "19dd058230dd222d2f236ccd9e3fe386f6121b6a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTo1Mzo0MFrOGfZVUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTo1Mzo0MFrOGfZVUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3NDA5OA==", "bodyText": "stale javadoc. remove?", "url": "https://github.com/apache/druid/pull/9986#discussion_r435574098", "createdAt": "2020-06-04T21:53:40Z", "author": {"login": "suneet-s"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/rel/DruidQuery.java", "diffHunk": "@@ -424,6 +424,8 @@ private static Grouping computeGrouping(\n \n   /**\n    * Builds a {@link Subtotals} object based on {@link Aggregate#getGroupSets()}.\n+   *\n+   * @throws CannotBuildQueryException if subtotals cannot be computed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19dd058230dd222d2f236ccd9e3fe386f6121b6a"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8efcb5b725207875b147b4ae62e149c7b09c5932", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/8efcb5b725207875b147b4ae62e149c7b09c5932", "committedDate": "2020-06-04T22:02:30Z", "message": "update javadocs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0ODg4NzY1", "url": "https://github.com/apache/druid/pull/9986#pullrequestreview-424888765", "createdAt": "2020-06-04T22:53:48Z", "commit": {"oid": "8efcb5b725207875b147b4ae62e149c7b09c5932"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2016, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}