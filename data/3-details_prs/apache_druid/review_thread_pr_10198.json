{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUxNjYzNjc4", "number": 10198, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDo0NTozNlrOEQyhwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDo0NTozNlrOEQyhwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDQwNTE0OnYy", "diffSide": "RIGHT", "path": "docs/querying/sql.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDo0NTozNlrOG1JHMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxODoxNjozNlrOG25PcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3NzAwOA==", "bodyText": "Hmm, I'm not sure that this additional content about timestampResultField is adding anything to the docs, really\u2026\nI'm in favor of removing it for now, for the following reasons:\n\nThis doesn't tell people much (it isn't clear what the parameter does, exactly).\nThe parameter is an internal thing that we don't expect people to use directly.\nMentioning it here distracts people from what they really need to know in this doc section, namely: learning what Druid SQL uses Timeseries queries for.\n\nIt could make sense to include some content in the \"Interpreting EXPLAIN PLAN output\" section, though. But I'm not sure if it's worth it.", "url": "https://github.com/apache/druid/pull/10198#discussion_r458377008", "createdAt": "2020-07-21T20:45:36Z", "author": {"login": "gianm"}, "path": "docs/querying/sql.md", "diffHunk": "@@ -629,7 +629,9 @@ Druid SQL uses four different native query types.\n period)`, have no other grouping expressions, no HAVING or LIMIT clauses, no nesting, and either no ORDER BY, or an\n ORDER BY that orders by same expression as present in GROUP BY. It also uses Timeseries for \"grand total\" queries that\n have aggregation functions but no GROUP BY. This query type takes advantage of the fact that Druid segments are sorted\n-by time.\n+by time. The SQL planner can inject `timestampResultField` in the query context when there is a grouping key. This", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "912b8798b7f18482f001072749465ab67bee5979"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAzOTU1MA==", "bodyText": "Btw, the rest of this patch LGTM, other than the doc stuff mentioned here.", "url": "https://github.com/apache/druid/pull/10198#discussion_r459039550", "createdAt": "2020-07-22T19:43:16Z", "author": {"login": "gianm"}, "path": "docs/querying/sql.md", "diffHunk": "@@ -629,7 +629,9 @@ Druid SQL uses four different native query types.\n period)`, have no other grouping expressions, no HAVING or LIMIT clauses, no nesting, and either no ORDER BY, or an\n ORDER BY that orders by same expression as present in GROUP BY. It also uses Timeseries for \"grand total\" queries that\n have aggregation functions but no GROUP BY. This query type takes advantage of the fact that Druid segments are sorted\n-by time.\n+by time. The SQL planner can inject `timestampResultField` in the query context when there is a grouping key. This", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3NzAwOA=="}, "originalCommit": {"oid": "912b8798b7f18482f001072749465ab67bee5979"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIxNDEyOA==", "bodyText": "OK, I agree. It could be better to make it as a user-facing configuration before documenting it. I think it can be more structured such as an explicit field in timeseries query spec to access timestamp instead of query context field if it should be a user-facing configuration.", "url": "https://github.com/apache/druid/pull/10198#discussion_r460214128", "createdAt": "2020-07-24T18:16:36Z", "author": {"login": "jihoonson"}, "path": "docs/querying/sql.md", "diffHunk": "@@ -629,7 +629,9 @@ Druid SQL uses four different native query types.\n period)`, have no other grouping expressions, no HAVING or LIMIT clauses, no nesting, and either no ORDER BY, or an\n ORDER BY that orders by same expression as present in GROUP BY. It also uses Timeseries for \"grand total\" queries that\n have aggregation functions but no GROUP BY. This query type takes advantage of the fact that Druid segments are sorted\n-by time.\n+by time. The SQL planner can inject `timestampResultField` in the query context when there is a grouping key. This", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3NzAwOA=="}, "originalCommit": {"oid": "912b8798b7f18482f001072749465ab67bee5979"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2232, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}