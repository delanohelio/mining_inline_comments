{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMTc5MTA2", "number": 9638, "title": "refactor internal type system", "bodyText": "Description\nThis PR begins to refactor the Druid internal column type system in an effort to one day live in a world where we can have complete information about the types of all columns taking part in a query - at all layers, i.e. a complete RowSignature and ColumnCapabilities.\ntl;dr this PR consolidates ValueType enums, adds type information to PostAggregator, and adds finalized type information to AggregatorFactory.\nThe 2 separate ValueType enumerations have been consolidated, and now live in druid-core. The methods in ValueType which required druid-processing have been migrated into static methods in a new ValueTypes static class, which takes a ValueType and produces a makeNumericWrappingDimensionSelector or makeNewSettableColumnValueSelector as appropriate. There might be a better home for this, perhaps RowSignature or .. somewhere?\nPostAggregator now has a new method:\n  ValueType getType();\n\nand will now correctly populate a RowSignature instead of setting the type to null.\nTo support type information on PostAggregator, AggregatorFactory also has 2 new methods:\n  public abstract ValueType getType();\n\n  public abstract ValueType getFinalizedType();\n\nso that finalized type information is available to correctly compute the output type of FinalizingFieldAccessPostAggregator. This also means that finalized type information for aggregators could be available in a finalized view of a RowSignature, but I have not made this modification yet. AggregatorFactory.getTypeName has been renamed to getComplexTypeName and transitioned to be exclusively used for complex type serde lookup.\nBecause a lot of postaggs produce double typed arrays in their results, and in anticipation of what I think might be a good idea to do next which is merge ValueType and ExprType, I went ahead and added array types to the new and improved ValueType enumeration. The complete set is now:\n  DOUBLE,\n  FLOAT,\n  LONG,\n  STRING,\n  COMPLEX,\n  DOUBLE_ARRAY,\n  LONG_ARRAY,\n  STRING_ARRAY\n\nThis is perhaps controversial and worth discussion, but it also doesn't seem to introduce any ill effects as far as I can tell.\nSince this PR adds types for almost every other type of column, we should now be able to have nearly complete type information for all inputs when we are constructing an Expr for ExpressionVirtualColumn and ExpressionPostAggregator and ExpressionFilter and anything else using Expr. This means that as a follow-up we should also be able to allow an Expr to compute it's output ValueType based on its inputs, making explicit user specification no longer necessary. I suspect we could also use it for type specific optimizations to help make expressions faster, and more.\n\nThis PR has:\n\n been self-reviewed.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths.\n been tested in a test Druid cluster.\n\n\nKey changed/added classes in this PR\n\nValueType + ValueType = ValueType\nRowSignature\nlike every PostAggregator and AggregatorFactory", "createdAt": "2020-04-07T10:27:15Z", "url": "https://github.com/apache/druid/pull/9638", "merged": true, "mergeCommit": {"oid": "ab606610089f7bb9b4b1b68ac488764f394723fd"}, "closed": true, "closedAt": "2020-08-26T17:53:45Z", "author": {"login": "clintropolis"}, "timelineItems": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVM64aAH2gAyNDAwMTc5MTA2OjI2MmFhMGU1ZmY5NTMzYzUyYjZiYjI2ODhlZmJiYzQwOWM1NjNjZWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCvSQpAFqTQ3NTcwNzk0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "262aa0e5ff9533c52b6bb2688efbbc409c563cea", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/262aa0e5ff9533c52b6bb2688efbbc409c563cea", "committedDate": "2020-04-07T06:01:40Z", "message": "better type tracking: add typed postaggs, finalized types for agg factories"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a27a4c8004bc391fdde7baf64dbc9e2375167741", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/a27a4c8004bc391fdde7baf64dbc9e2375167741", "committedDate": "2020-04-07T11:07:14Z", "message": "more javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2aa12f64a8291e256ac58e039837057f289822e", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/f2aa12f64a8291e256ac58e039837057f289822e", "committedDate": "2020-04-08T19:39:52Z", "message": "adjustments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMzAzNTgx", "url": "https://github.com/apache/druid/pull/9638#pullrequestreview-390303581", "createdAt": "2020-04-08T20:23:17Z", "commit": {"oid": "f2aa12f64a8291e256ac58e039837057f289822e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDoyMzoxN1rOGC_i_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDoyMzoxN1rOGC_i_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc5MTQ4Ng==", "bodyText": "why do we need this one ?", "url": "https://github.com/apache/druid/pull/9638#discussion_r405791486", "createdAt": "2020-04-08T20:23:17Z", "author": {"login": "himanshug"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/PostAggregator.java", "diffHunk": "@@ -43,6 +45,13 @@\n   @Nullable\n   String getName();\n \n+  String getTypeName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2aa12f64a8291e256ac58e039837057f289822e"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMzExMTUz", "url": "https://github.com/apache/druid/pull/9638#pullrequestreview-390311153", "createdAt": "2020-04-08T20:34:39Z", "commit": {"oid": "f2aa12f64a8291e256ac58e039837057f289822e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDozNDo0MFrOGC_7Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDozNDo0MFrOGC_7Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc5NzcxNA==", "bodyText": "can we add a blurb recommending this method be explicitly overridden by complex AggregatorFactory impls as the default here is likely wrong for those.", "url": "https://github.com/apache/druid/pull/9638#discussion_r405797714", "createdAt": "2020-04-08T20:34:40Z", "author": {"login": "himanshug"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/AggregatorFactory.java", "diffHunk": "@@ -214,19 +216,42 @@ public AggregatorFactory getMergingFactory(AggregatorFactory other) throws Aggre\n    * {@link #deserialize} and the type accepted by {@link #combine}. However, it is *not* necessarily the same type\n    * returned by {@link #finalizeComputation}.\n    *\n-   * If the type is complex (i.e. not a simple, numeric {@link org.apache.druid.segment.column.ValueType}) then there\n+   * If the type is complex (i.e. not a simple, numeric {@link ValueType}) then there\n    * must be a corresponding {@link org.apache.druid.segment.serde.ComplexMetricSerde} which was registered with\n    * {@link org.apache.druid.segment.serde.ComplexMetrics#registerSerde} using this type name.\n    *\n-   * If you need a ValueType enum corresponding to this aggregator, a good way to do that is:\n-   *\n-   * <pre>\n-   *   Optional.ofNullable(GuavaUtils.getEnumIfPresent(ValueType.class, aggregator.getTypeName()))\n-   *           .orElse(ValueType.COMPLEX);\n-   * </pre>\n+   * If you need a ValueType enum corresponding to this aggregator, use {@link #getTypeName} instead.\n    */\n   public abstract String getTypeName();\n \n+  /**\n+   * Get the type name for the 'finalized' type for this aggregator, i.e. the type of the value returned by\n+   * {@link #finalizeComputation}. This may be the same as or different than the types expected in {@link #deserialize}\n+   * and {@link #combine}.\n+   *\n+   * If you need a ValueType enum corresponding to this aggregator, use {@link #getFinalizedType} instead.\n+   */\n+  public String getFinalizedTypeName()\n+  {\n+    return getTypeName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2aa12f64a8291e256ac58e039837057f289822e"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMzIwNjQw", "url": "https://github.com/apache/druid/pull/9638#pullrequestreview-390320640", "createdAt": "2020-04-08T20:48:51Z", "commit": {"oid": "f2aa12f64a8291e256ac58e039837057f289822e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDo0ODo1MVrOGDAaOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDo0ODo1MVrOGDAaOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNTYyNA==", "bodyText": "nit: these can be  moved to else clause. also aggFactory.getTypeName() can just be inlined for complex clause.", "url": "https://github.com/apache/druid/pull/9638#discussion_r405805624", "createdAt": "2020-04-08T20:48:51Z", "author": {"login": "himanshug"}, "path": "indexing-hadoop/src/main/java/org/apache/druid/indexer/InputRowSerde.java", "diffHunk": "@@ -340,22 +340,25 @@ public static SerializeResult toBytes(\n             parseExceptionMessages.add(e.getMessage());\n           }\n \n-          String t = aggFactory.getTypeName();\n+          final ValueType type = aggFactory.getType();\n+          final String typeName = aggFactory.getTypeName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2aa12f64a8291e256ac58e039837057f289822e"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMzIyMzM3", "url": "https://github.com/apache/druid/pull/9638#pullrequestreview-390322337", "createdAt": "2020-04-08T20:51:22Z", "commit": {"oid": "f2aa12f64a8291e256ac58e039837057f289822e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDo1MToyMlrOGDAfrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDo1MToyMlrOGDAfrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNzAyMQ==", "bodyText": "nit: same", "url": "https://github.com/apache/druid/pull/9638#discussion_r405807021", "createdAt": "2020-04-08T20:51:22Z", "author": {"login": "himanshug"}, "path": "indexing-hadoop/src/main/java/org/apache/druid/indexer/InputRowSerde.java", "diffHunk": "@@ -467,21 +470,24 @@ public static InputRow fromBytes(\n       //Read metrics\n       int metricSize = WritableUtils.readVInt(in);\n       for (int i = 0; i < metricSize; i++) {\n-        String metric = readString(in);\n-        String type = getType(metric, aggs, i);\n-        byte metricNullability = in.readByte();\n+        final String metric = readString(in);\n+        final AggregatorFactory agg = getAggregator(metric, aggs, i);\n+        final ValueType type = agg.getType();\n+        final String typeName = agg.getTypeName();\n+        final byte metricNullability = in.readByte();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2aa12f64a8291e256ac58e039837057f289822e"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a59a1f662d3c166989ba2fc8c9a2df3aeba82b3", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/8a59a1f662d3c166989ba2fc8c9a2df3aeba82b3", "committedDate": "2020-04-19T07:39:15Z", "message": "Merge remote-tracking branch 'upstream/master' into there-can-be-only-one"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c81ba6a1002864e56314ffeecb480957b2a2073d", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/c81ba6a1002864e56314ffeecb480957b2a2073d", "committedDate": "2020-04-19T21:08:43Z", "message": "transition to getTypeName to be used exclusively for complex types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "702b548ec41b41173f846308f092f7327e83c83d", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/702b548ec41b41173f846308f092f7327e83c83d", "committedDate": "2020-04-19T21:12:24Z", "message": "remove unused fn"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21067bc05b08b180f435ff523e1a90a89d33a43d", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/21067bc05b08b180f435ff523e1a90a89d33a43d", "committedDate": "2020-04-19T21:20:53Z", "message": "adjust"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMjAzMDg2", "url": "https://github.com/apache/druid/pull/9638#pullrequestreview-403203086", "createdAt": "2020-04-30T05:08:47Z", "commit": {"oid": "21067bc05b08b180f435ff523e1a90a89d33a43d"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNTowODo0N1rOGOZ0KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNToxOToxMVrOGOZ-zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc1NjIwMA==", "bodyText": "Please add javadocs.", "url": "https://github.com/apache/druid/pull/9638#discussion_r417756200", "createdAt": "2020-04-30T05:08:47Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/PostAggregator.java", "diffHunk": "@@ -43,6 +44,8 @@\n   @Nullable\n   String getName();\n \n+  ValueType getType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21067bc05b08b180f435ff523e1a90a89d33a43d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc1NjU2Mw==", "bodyText": "Why STRING? (Instead of COMPLEX or whatever.)\nWhat bad things could potentially happen if the type returned by this method is wrong? (The javadoc should explain this, ideally.)", "url": "https://github.com/apache/druid/pull/9638#discussion_r417756563", "createdAt": "2020-04-30T05:09:59Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/post/ExpressionPostAggregator.java", "diffHunk": "@@ -179,6 +169,14 @@ public String getName()\n     return name;\n   }\n \n+  @Override\n+  public ValueType getType()\n+  {\n+    // this is wrong, replace with Expr output type based on the input types once it is available\n+    // but treat as string for now\n+    return ValueType.STRING;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21067bc05b08b180f435ff523e1a90a89d33a43d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc1NzA4MA==", "bodyText": "Add a @throws IllegalStateException if getType() != ValueType.COMPLEX", "url": "https://github.com/apache/druid/pull/9638#discussion_r417757080", "createdAt": "2020-04-30T05:12:07Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/AggregatorFactory.java", "diffHunk": "@@ -210,22 +212,36 @@ public AggregatorFactory getMergingFactory(AggregatorFactory other) throws Aggre\n   public abstract List<String> requiredFields();\n \n   /**\n-   * Get the type name of the intermediate type for this aggregator. This is the same as the type returned by\n+   * Get the \"intermediate\" {@link ValueType} for this aggregator. This is the same as the type returned by\n    * {@link #deserialize} and the type accepted by {@link #combine}. However, it is *not* necessarily the same type\n    * returned by {@link #finalizeComputation}.\n+   */\n+  public abstract ValueType getType();\n+\n+  /**\n+   * Get the type for the final form of this this aggregator, i.e. the type of the value returned by\n+   * {@link #finalizeComputation}. This may be the same as or different than the types expected in {@link #deserialize}\n+   * and {@link #combine}.\n+   * @return\n+   */\n+  public ValueType getFinalizedType()\n+  {\n+    return getType();\n+  }\n+\n+  /**\n+   * Get the complex type name of the intermediate type for this aggregator.\n    *\n-   * If the type is complex (i.e. not a simple, numeric {@link org.apache.druid.segment.column.ValueType}) then there\n+   * This should ONLY be implemented if the type is complex (i.e. not a simple, numeric {@link ValueType}), and there\n    * must be a corresponding {@link org.apache.druid.segment.serde.ComplexMetricSerde} which was registered with\n    * {@link org.apache.druid.segment.serde.ComplexMetrics#registerSerde} using this type name.\n    *\n-   * If you need a ValueType enum corresponding to this aggregator, a good way to do that is:\n-   *\n-   * <pre>\n-   *   Optional.ofNullable(GuavaUtils.getEnumIfPresent(ValueType.class, aggregator.getTypeName()))\n-   *           .orElse(ValueType.COMPLEX);\n-   * </pre>\n+   * If you need a ValueType enum corresponding to this aggregator, use {@link #getTypeName} instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21067bc05b08b180f435ff523e1a90a89d33a43d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc1NzE4MQ==", "bodyText": "IMO, it would be better for this to be abstract, since this makes it too easy for people to forget to override it.", "url": "https://github.com/apache/druid/pull/9638#discussion_r417757181", "createdAt": "2020-04-30T05:12:37Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/AggregatorFactory.java", "diffHunk": "@@ -210,22 +212,36 @@ public AggregatorFactory getMergingFactory(AggregatorFactory other) throws Aggre\n   public abstract List<String> requiredFields();\n \n   /**\n-   * Get the type name of the intermediate type for this aggregator. This is the same as the type returned by\n+   * Get the \"intermediate\" {@link ValueType} for this aggregator. This is the same as the type returned by\n    * {@link #deserialize} and the type accepted by {@link #combine}. However, it is *not* necessarily the same type\n    * returned by {@link #finalizeComputation}.\n+   */\n+  public abstract ValueType getType();\n+\n+  /**\n+   * Get the type for the final form of this this aggregator, i.e. the type of the value returned by\n+   * {@link #finalizeComputation}. This may be the same as or different than the types expected in {@link #deserialize}\n+   * and {@link #combine}.\n+   * @return\n+   */\n+  public ValueType getFinalizedType()\n+  {\n+    return getType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21067bc05b08b180f435ff523e1a90a89d33a43d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc1Nzc5NA==", "bodyText": "Please add javadocs documenting these types.\nEspecially important things to document include:\n\nWhen do we use STRING and when do we use STRING_ARRAY? (Multivalue strings are type STRING, even though they behave kind of like arrays. How do we explain this coherently?)\nWhat does COMPLEX mean and how can you get more information about something that is COMPLEX?", "url": "https://github.com/apache/druid/pull/9638#discussion_r417757794", "createdAt": "2020-04-30T05:14:53Z", "author": {"login": "gianm"}, "path": "core/src/main/java/org/apache/druid/segment/column/ValueType.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.column;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import org.apache.druid.java.util.common.StringUtils;\n+\n+import javax.annotation.Nullable;\n+\n+public enum ValueType\n+{\n+  DOUBLE,\n+  FLOAT,\n+  LONG,\n+  STRING,\n+  COMPLEX,\n+  DOUBLE_ARRAY,\n+  LONG_ARRAY,\n+  STRING_ARRAY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21067bc05b08b180f435ff523e1a90a89d33a43d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc1ODAzNg==", "bodyText": "With this logic, DOUBLE_ARRAY.isComplex() is true. This seems weird. I would think only COMPLEX is complex. Please add javadocs to the method and maybe consider renaming it.", "url": "https://github.com/apache/druid/pull/9638#discussion_r417758036", "createdAt": "2020-04-30T05:15:50Z", "author": {"login": "gianm"}, "path": "core/src/main/java/org/apache/druid/segment/column/ValueType.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.column;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import org.apache.druid.java.util.common.StringUtils;\n+\n+import javax.annotation.Nullable;\n+\n+public enum ValueType\n+{\n+  DOUBLE,\n+  FLOAT,\n+  LONG,\n+  STRING,\n+  COMPLEX,\n+  DOUBLE_ARRAY,\n+  LONG_ARRAY,\n+  STRING_ARRAY;\n+\n+\n+  public boolean isNumeric()\n+  {\n+    return isNumeric(this);\n+  }\n+\n+  public boolean isPrimitiveScalar()\n+  {\n+    return this.equals(ValueType.STRING) || isNumeric(this);\n+  }\n+\n+  public boolean isComplex()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21067bc05b08b180f435ff523e1a90a89d33a43d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc1ODkyNQ==", "bodyText": "Instead of using null here, we should have different signatures for finalized and nonfinalized rows. Perhaps the row signature builder should have addAggregators(List<AggregatorFactory> aggregators, boolean finalize) and the things that call it should be given knowledge about whether they're going to be finalizing or not.", "url": "https://github.com/apache/druid/pull/9638#discussion_r417758925", "createdAt": "2020-04-30T05:19:11Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/column/RowSignature.java", "diffHunk": "@@ -237,21 +235,14 @@ public Builder addDimensions(final List<DimensionSpec> dimensions)\n     public Builder addAggregators(final List<AggregatorFactory> aggregators)\n     {\n       for (final AggregatorFactory aggregator : aggregators) {\n-        final ValueType type = GuavaUtils.getEnumIfPresent(\n-            ValueType.class,\n-            StringUtils.toUpperCase(aggregator.getTypeName())\n-        );\n-\n-        // Use null instead of COMPLEX for nonnumeric types, since in that case, the type depends on whether or not\n-        // the aggregator is finalized, and we don't know (a) if it will be finalized, or even (b) what the type would\n-        // be if it were finalized. So null (i.e. unknown) is the proper thing to do.\n-        //\n-        // Another note: technically, we don't know what the finalized type will be even if the type here is numeric,\n-        // but we're assuming that it doesn't change upon finalization. All builtin aggregators work this way.\n+        final ValueType type = aggregator.getType();\n \n-        if (type != null && type.isNumeric()) {\n+        if (type.equals(aggregator.getFinalizedType())) {\n           add(aggregator.getName(), type);\n         } else {\n+          // Use null if the type depends on whether or not the aggregator is finalized, since", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21067bc05b08b180f435ff523e1a90a89d33a43d"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da0936c688591abd0eadb3f565e78c86853259fb", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/da0936c688591abd0eadb3f565e78c86853259fb", "committedDate": "2020-08-14T11:42:44Z", "message": "Merge remote-tracking branch 'upstream/master' into there-can-be-only-one"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "051f53fad51dbf501a58f1eeff33fab85b117ea9", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/051f53fad51dbf501a58f1eeff33fab85b117ea9", "committedDate": "2020-08-17T18:39:14Z", "message": "Merge remote-tracking branch 'upstream/master' into there-can-be-only-one"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d01fb3627b504202421c642ba2d7ac89927d38c3", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/d01fb3627b504202421c642ba2d7ac89927d38c3", "committedDate": "2020-08-17T22:01:30Z", "message": "Merge remote-tracking branch 'upstream/master' into there-can-be-only-one"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3aa9958ae3af08598dc76c251b4a656985140652", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/3aa9958ae3af08598dc76c251b4a656985140652", "committedDate": "2020-08-18T18:14:05Z", "message": "more better"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbf60e2862c9cd85f13bccb41e610324e4430c2c", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/bbf60e2862c9cd85f13bccb41e610324e4430c2c", "committedDate": "2020-08-18T19:31:50Z", "message": "rename getTypeName to getComplexTypeName"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwMTc1MzM0", "url": "https://github.com/apache/druid/pull/9638#pullrequestreview-470175334", "createdAt": "2020-08-19T07:00:43Z", "commit": {"oid": "bbf60e2862c9cd85f13bccb41e610324e4430c2c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNzowMDo0NFrOHC4QEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNzowMDo0NFrOHC4QEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc4MDgxNg==", "bodyText": "thinking out loud. how about having a class such as AggregatorOutputType which can contain combine and finalize types. Aggregators just override one method which can be AggregatorOutputType getType()", "url": "https://github.com/apache/druid/pull/9638#discussion_r472780816", "createdAt": "2020-08-19T07:00:44Z", "author": {"login": "abhishekagarwal87"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/AggregatorFactory.java", "diffHunk": "@@ -211,22 +213,35 @@ public AggregatorFactory getMergingFactory(AggregatorFactory other) throws Aggre\n   public abstract List<String> requiredFields();\n \n   /**\n-   * Get the type name of the intermediate type for this aggregator. This is the same as the type returned by\n+   * Get the \"intermediate\" {@link ValueType} for this aggregator. This is the same as the type returned by\n    * {@link #deserialize} and the type accepted by {@link #combine}. However, it is *not* necessarily the same type\n    * returned by {@link #finalizeComputation}.\n+   */\n+  public abstract ValueType getType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbf60e2862c9cd85f13bccb41e610324e4430c2c"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cbb602e88ca403dbbfc6ac764125ded25be49c4", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/9cbb602e88ca403dbbfc6ac764125ded25be49c4", "committedDate": "2020-08-19T20:48:06Z", "message": "setup expression post agg for type inference existing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c8173515aee54e738a0a5bca0cb8a0b40810d07", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/0c8173515aee54e738a0a5bca0cb8a0b40810d07", "committedDate": "2020-08-19T23:24:42Z", "message": "more javadocs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyODcwNTIw", "url": "https://github.com/apache/druid/pull/9638#pullrequestreview-472870520", "createdAt": "2020-08-21T23:55:43Z", "commit": {"oid": "0c8173515aee54e738a0a5bca0cb8a0b40810d07"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMDoxMzozNFrOHFA1HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMTowNzozNVrOHFBWiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxODUyNQ==", "bodyText": "Should it be round ? ValueType.LONG : ValueType.DOUBLE?", "url": "https://github.com/apache/druid/pull/9638#discussion_r475018525", "createdAt": "2020-08-22T00:13:34Z", "author": {"login": "jihoonson"}, "path": "extensions-core/datasketches/src/main/java/org/apache/druid/query/aggregation/datasketches/hll/HllSketchToEstimatePostAggregator.java", "diffHunk": "@@ -62,6 +63,12 @@ public String getName()\n     return name;\n   }\n \n+  @Override\n+  public ValueType getType()\n+  {\n+    return ValueType.DOUBLE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c8173515aee54e738a0a5bca0cb8a0b40810d07"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyMDM1NQ==", "bodyText": "Should this be DOUBLE_ARRAY?", "url": "https://github.com/apache/druid/pull/9638#discussion_r475020355", "createdAt": "2020-08-22T00:25:30Z", "author": {"login": "jihoonson"}, "path": "extensions-core/datasketches/src/main/java/org/apache/druid/query/aggregation/datasketches/quantiles/DoublesSketchToHistogramPostAggregator.java", "diffHunk": "@@ -102,6 +103,15 @@ public String getName()\n     return name;\n   }\n \n+  /**\n+   * actual type is {@link DoublesSketch}\n+   */\n+  @Override\n+  public ValueType getType()\n+  {\n+    return ValueType.COMPLEX;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c8173515aee54e738a0a5bca0cb8a0b40810d07"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyMDY2MA==", "bodyText": "errorBoundsStdDev != null ? ValueType.COMPLEX : ValueType.DOUBLE?", "url": "https://github.com/apache/druid/pull/9638#discussion_r475020660", "createdAt": "2020-08-22T00:28:00Z", "author": {"login": "jihoonson"}, "path": "extensions-core/datasketches/src/main/java/org/apache/druid/query/aggregation/datasketches/theta/SketchEstimatePostAggregator.java", "diffHunk": "@@ -100,6 +101,12 @@ public String getName()\n     return name;\n   }\n \n+  @Override\n+  public ValueType getType()\n+  {\n+    return ValueType.DOUBLE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c8173515aee54e738a0a5bca0cb8a0b40810d07"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyNDExMg==", "bodyText": "Should outputType be in here, equals() and getCacheKey()?", "url": "https://github.com/apache/druid/pull/9638#discussion_r475024112", "createdAt": "2020-08-22T00:54:09Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/post/ExpressionPostAggregator.java", "diffHunk": "@@ -287,10 +295,6 @@ public boolean equals(Object o)\n   @Override\n   public int hashCode()\n   {\n-    int result = name != null ? name.hashCode() : 0;\n-    result = 31 * result + expression.hashCode();\n-    result = 31 * result + comparator.hashCode();\n-    result = 31 * result + (ordering != null ? ordering.hashCode() : 0);\n-    return result;\n+    return Objects.hash(name, expression, comparator, ordering);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c8173515aee54e738a0a5bca0cb8a0b40810d07"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyNDQ2Nw==", "bodyText": "Doesn't seem nullable.", "url": "https://github.com/apache/druid/pull/9638#discussion_r475024467", "createdAt": "2020-08-22T00:56:43Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/post/FieldAccessPostAggregator.java", "diffHunk": "@@ -40,16 +41,24 @@\n   @Nullable\n   private final String name;\n   private final String fieldName;\n+  @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c8173515aee54e738a0a5bca0cb8a0b40810d07"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyNDU0OQ==", "bodyText": "type is missing in getCacheKey(), equals(), and hashCode().", "url": "https://github.com/apache/druid/pull/9638#discussion_r475024549", "createdAt": "2020-08-22T00:57:19Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/post/FieldAccessPostAggregator.java", "diffHunk": "@@ -40,16 +41,24 @@\n   @Nullable\n   private final String name;\n   private final String fieldName;\n+  @Nullable\n+  private final ValueType type;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c8173515aee54e738a0a5bca0cb8a0b40810d07"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyNDY4NQ==", "bodyText": "This is nullable. Also missing in getCacheKey(), equals(), and hashCode().", "url": "https://github.com/apache/druid/pull/9638#discussion_r475024685", "createdAt": "2020-08-22T00:58:46Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/post/FinalizingFieldAccessPostAggregator.java", "diffHunk": "@@ -26,16 +26,20 @@\n import org.apache.druid.query.aggregation.AggregatorFactory;\n import org.apache.druid.query.aggregation.PostAggregator;\n import org.apache.druid.query.cache.CacheKeyBuilder;\n+import org.apache.druid.segment.column.ValueType;\n+import org.apache.druid.segment.column.ValueTypes;\n \n import java.util.Comparator;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Set;\n import java.util.function.Function;\n \n public class FinalizingFieldAccessPostAggregator implements PostAggregator\n {\n   private final String name;\n   private final String fieldName;\n+  private final ValueType finalizedType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c8173515aee54e738a0a5bca0cb8a0b40810d07"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyNTI0Nw==", "bodyText": "\ud83d\ude05", "url": "https://github.com/apache/druid/pull/9638#discussion_r475025247", "createdAt": "2020-08-22T01:03:19Z", "author": {"login": "jihoonson"}, "path": "processing/src/test/java/org/apache/druid/query/aggregation/AggregatorFactoryTest.java", "diffHunk": "@@ -77,4 +103,168 @@ public void testMergeAggregators()\n     Assert.assertNull(AggregatorFactory.mergeAggregators(ImmutableList.of(af1, af2))\n     );\n   }\n+\n+  @Test\n+  public void testResultArraySignature()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c8173515aee54e738a0a5bca0cb8a0b40810d07"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyNzA4MQ==", "bodyText": "getType() seems too broad even though it is actually an intermediate type. Maybe getIntermediateType() is a better name?", "url": "https://github.com/apache/druid/pull/9638#discussion_r475027081", "createdAt": "2020-08-22T01:07:35Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/AggregatorFactory.java", "diffHunk": "@@ -211,22 +213,38 @@ public AggregatorFactory getMergingFactory(AggregatorFactory other) throws Aggre\n   public abstract List<String> requiredFields();\n \n   /**\n-   * Get the type name of the intermediate type for this aggregator. This is the same as the type returned by\n+   * Get the \"intermediate\" {@link ValueType} for this aggregator. This is the same as the type returned by\n    * {@link #deserialize} and the type accepted by {@link #combine}. However, it is *not* necessarily the same type\n    * returned by {@link #finalizeComputation}.\n    *\n-   * If the type is complex (i.e. not a simple, numeric {@link org.apache.druid.segment.column.ValueType}) then there\n+   * Refer to the {@link ValueType} javadocs for details on the implications of choosing a type.\n+   */\n+  public abstract ValueType getType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c8173515aee54e738a0a5bca0cb8a0b40810d07"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c0347f54c373ad7ffeb02daed73fe29e505e556", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/2c0347f54c373ad7ffeb02daed73fe29e505e556", "committedDate": "2020-08-24T17:55:17Z", "message": "Merge remote-tracking branch 'upstream/master' into there-can-be-only-one"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4371c86ddfa8a8b478b1dbaff453410cdf1f307", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/c4371c86ddfa8a8b478b1dbaff453410cdf1f307", "committedDate": "2020-08-24T20:58:29Z", "message": "fixup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e686d80c846aadfc2aee57966d1e2ed9b070cb4", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/1e686d80c846aadfc2aee57966d1e2ed9b070cb4", "committedDate": "2020-08-24T20:59:21Z", "message": "oops"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "881954fc59d5dc219a962e4d25ea41a659fa550e", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/881954fc59d5dc219a962e4d25ea41a659fa550e", "committedDate": "2020-08-24T21:07:16Z", "message": "more test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc27526a18f3378f15031f035dee9b90f54a832a", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/dc27526a18f3378f15031f035dee9b90f54a832a", "committedDate": "2020-08-24T21:14:15Z", "message": "more test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6eee25a2579eae9f6450a0a4ce315006ee6027a0", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/6eee25a2579eae9f6450a0a4ce315006ee6027a0", "committedDate": "2020-08-25T04:24:27Z", "message": "more comments/javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MTQyMDQ1", "url": "https://github.com/apache/druid/pull/9638#pullrequestreview-474142045", "createdAt": "2020-08-25T05:20:33Z", "commit": {"oid": "6eee25a2579eae9f6450a0a4ce315006ee6027a0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MjQzOTE5", "url": "https://github.com/apache/druid/pull/9638#pullrequestreview-474243919", "createdAt": "2020-08-25T08:17:58Z", "commit": {"oid": "6eee25a2579eae9f6450a0a4ce315006ee6027a0"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODoxNzo1OVrOHGM5YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODozNDo1NVrOHGNjFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI2NDgwMQ==", "bodyText": "Previously this only did createSimpleNumericColumnCapabilities if the type was numeric, now it includes strings too. Is that intentional?", "url": "https://github.com/apache/druid/pull/9638#discussion_r476264801", "createdAt": "2020-08-25T08:17:59Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/incremental/IncrementalIndex.java", "diffHunk": "@@ -1135,21 +1117,21 @@ public MetricDesc(int index, AggregatorFactory factory)\n       this.index = index;\n       this.name = factory.getName();\n \n-      String typeInfo = factory.getTypeName();\n-      if (\"float\".equalsIgnoreCase(typeInfo)) {\n-        capabilities = ColumnCapabilitiesImpl.createSimpleNumericColumnCapabilities(ValueType.FLOAT);\n-        this.type = typeInfo;\n-      } else if (\"long\".equalsIgnoreCase(typeInfo)) {\n-        capabilities = ColumnCapabilitiesImpl.createSimpleNumericColumnCapabilities(ValueType.LONG);\n-        this.type = typeInfo;\n-      } else if (\"double\".equalsIgnoreCase(typeInfo)) {\n-        capabilities = ColumnCapabilitiesImpl.createSimpleNumericColumnCapabilities(ValueType.DOUBLE);\n-        this.type = typeInfo;\n+      ValueType valueType = factory.getType();\n+\n+      if (valueType.isPrimitive()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eee25a2579eae9f6450a0a4ce315006ee6027a0"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI3MTgzNg==", "bodyText": "Why not keep it null here? What are the pros and cons of null vs ValueTypes.defaultAggregationType()?", "url": "https://github.com/apache/druid/pull/9638#discussion_r476271836", "createdAt": "2020-08-25T08:29:07Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/post/FieldAccessPostAggregator.java", "diffHunk": "@@ -78,10 +89,28 @@ public String getName()\n     return name;\n   }\n \n+  @Override\n+  public ValueType getType()\n+  {\n+    return type;\n+  }\n+\n   @Override\n   public FieldAccessPostAggregator decorate(Map<String, AggregatorFactory> aggregators)\n   {\n-    return this;\n+    final ValueType type;\n+\n+    if (aggregators != null && aggregators.containsKey(fieldName)) {\n+      type = aggregators.get(fieldName).getType();\n+    } else {\n+      type = ValueTypes.defaultAggregationType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eee25a2579eae9f6450a0a4ce315006ee6027a0"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI3NTQ3OA==", "bodyText": "Similar comment to FieldAccessPostAggregator: why not keep it null here? What are the pros and cons of null vs ValueTypes.defaultAggregationType()?", "url": "https://github.com/apache/druid/pull/9638#discussion_r476275478", "createdAt": "2020-08-25T08:34:55Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/post/FinalizingFieldAccessPostAggregator.java", "diffHunk": "@@ -94,29 +104,35 @@ public String getName()\n     return name;\n   }\n \n+  @Override\n+  public ValueType getType()\n+  {\n+    return finalizedType;\n+  }\n+\n   @Override\n   public FinalizingFieldAccessPostAggregator decorate(final Map<String, AggregatorFactory> aggregators)\n   {\n     final Comparator<Object> theComparator;\n     final Function<Object, Object> theFinalizer;\n+    final ValueType finalizedType;\n \n     if (aggregators != null && aggregators.containsKey(fieldName)) {\n       //noinspection unchecked\n       theComparator = aggregators.get(fieldName).getComparator();\n+      theFinalizer = aggregators.get(fieldName)::finalizeComputation;\n+      finalizedType = aggregators.get(fieldName).getFinalizedType();\n     } else {\n       //noinspection unchecked\n       theComparator = (Comparator) Comparators.naturalNullsFirst();\n-    }\n-\n-    if (aggregators != null && aggregators.containsKey(fieldName)) {\n-      theFinalizer = aggregators.get(fieldName)::finalizeComputation;\n-    } else {\n       theFinalizer = Function.identity();\n+      finalizedType = ValueTypes.defaultAggregationType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eee25a2579eae9f6450a0a4ce315006ee6027a0"}, "originalPosition": 78}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c7ba70f4c768d27d2f34f1c3ea8fb779025a5ab", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/0c7ba70f4c768d27d2f34f1c3ea8fb779025a5ab", "committedDate": "2020-08-25T11:13:55Z", "message": "nulls"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "376728ad761ac78633b9db137fe1dc065a4b1acc", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/376728ad761ac78633b9db137fe1dc065a4b1acc", "committedDate": "2020-08-25T19:37:12Z", "message": "explicitly handle only numeric and complex aggregators for incremental index"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59515b488bd845ee198fa14fc98aa4f2bba08e1c", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/59515b488bd845ee198fa14fc98aa4f2bba08e1c", "committedDate": "2020-08-25T20:46:03Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d709aceee41deaecb64ffa15e4c9865732f6294", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/0d709aceee41deaecb64ffa15e4c9865732f6294", "committedDate": "2020-08-25T21:53:07Z", "message": "more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "207f44846b80c3ebd1bb4d245c200792100d1ad2", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/207f44846b80c3ebd1bb4d245c200792100d1ad2", "committedDate": "2020-08-25T21:58:27Z", "message": "adjust"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10e2f3ef1f4ed62c6c4445cf45a8f063c2552642", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/10e2f3ef1f4ed62c6c4445cf45a8f063c2552642", "committedDate": "2020-08-26T01:22:44Z", "message": "more tests to showcase difference in behavior"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16882b5d8a0cadf19a60e54f4622f14cd1bf05f9", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/16882b5d8a0cadf19a60e54f4622f14cd1bf05f9", "committedDate": "2020-08-26T01:42:03Z", "message": "timeseries longsum array"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NzA3OTQx", "url": "https://github.com/apache/druid/pull/9638#pullrequestreview-475707941", "createdAt": "2020-08-26T17:30:35Z", "commit": {"oid": "16882b5d8a0cadf19a60e54f4622f14cd1bf05f9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2459, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}