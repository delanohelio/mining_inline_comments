{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NTkxOTA2", "number": 9247, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNTo0Nzo1NlrODahyvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNzozNTo1N1rODajyAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTQzMjI4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/utils/JvmUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNTo0Nzo1NlrOFhh6Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjoyNDowMFrOFhjCeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcwMjg4Mw==", "bodyText": "javadocs for utility function please :)", "url": "https://github.com/apache/druid/pull/9247#discussion_r370702883", "createdAt": "2020-01-24T15:47:56Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/utils/JvmUtils.java", "diffHunk": "@@ -80,13 +82,25 @@ public static long safeGetThreadCpuTime()\n    * @return total CPU time for the current thread in nanoseconds.\n    *\n    * @throws UnsupportedOperationException if the Java virtual machine does not support CPU time measurement for\n-   * the current thread.\n+   *                                       the current thread.\n    */\n   public static long getCurrentThreadCpuTime()\n   {\n     return THREAD_MX_BEAN.getCurrentThreadCpuTime();\n   }\n \n+  public static <T> T safeAccumulateThreadCpuTime(final AtomicLong accumulator, final Supplier<T> function)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b954a64cdefbd88aabecead3ce4408755bce8019"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcyMTQwMg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/druid/pull/9247#discussion_r370721402", "createdAt": "2020-01-24T16:24:00Z", "author": {"login": "gianm"}, "path": "core/src/main/java/org/apache/druid/utils/JvmUtils.java", "diffHunk": "@@ -80,13 +82,25 @@ public static long safeGetThreadCpuTime()\n    * @return total CPU time for the current thread in nanoseconds.\n    *\n    * @throws UnsupportedOperationException if the Java virtual machine does not support CPU time measurement for\n-   * the current thread.\n+   *                                       the current thread.\n    */\n   public static long getCurrentThreadCpuTime()\n   {\n     return THREAD_MX_BEAN.getCurrentThreadCpuTime();\n   }\n \n+  public static <T> T safeAccumulateThreadCpuTime(final AtomicLong accumulator, final Supplier<T> function)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcwMjg4Mw=="}, "originalCommit": {"oid": "b954a64cdefbd88aabecead3ce4408755bce8019"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTQ2NzQ3OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/SeekableStreamIndexTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNTo1ODozMFrOFhiQng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjoyNDo0OFrOFhjECw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcwODYzOA==", "bodyText": "Just noticed this pattern in a few files. It would be nice if this was abstracted away from the IndexTask and there was some factory that knew which fields to use from the toolbox to build the Appenderator.\nObviously this doesn't need to be part of your change. Do  you usually create issues in github to track refactoring like this that would be nice to have?", "url": "https://github.com/apache/druid/pull/9247#discussion_r370708638", "createdAt": "2020-01-24T15:58:30Z", "author": {"login": "suneet-s"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/SeekableStreamIndexTask.java", "diffHunk": "@@ -206,6 +206,7 @@ public Appenderator newAppenderator(FireDepartmentMetrics metrics, TaskToolbox t\n         toolbox.getSegmentAnnouncer(),\n         toolbox.getEmitter(),\n         toolbox.getQueryExecutorService(),\n+        toolbox.getJoinableFactory(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b954a64cdefbd88aabecead3ce4408755bce8019"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcyMTgwMw==", "bodyText": "Yes, GitHub issues are a good place to put stuff like this. I think there's even a 'refactoring' label so the ideas can be searched.", "url": "https://github.com/apache/druid/pull/9247#discussion_r370721803", "createdAt": "2020-01-24T16:24:48Z", "author": {"login": "gianm"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/seekablestream/SeekableStreamIndexTask.java", "diffHunk": "@@ -206,6 +206,7 @@ public Appenderator newAppenderator(FireDepartmentMetrics metrics, TaskToolbox t\n         toolbox.getSegmentAnnouncer(),\n         toolbox.getEmitter(),\n         toolbox.getQueryExecutorService(),\n+        toolbox.getJoinableFactory(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcwODYzOA=="}, "originalCommit": {"oid": "b954a64cdefbd88aabecead3ce4408755bce8019"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTQ3MTU2OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/test/java/org/apache/druid/indexing/common/task/TestAppenderatorsManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNTo1OTo0NFrOFhiTOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjoyNToxNFrOFhjEuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcwOTMwNw==", "bodyText": "I think you want to use the joinableFactory here?", "url": "https://github.com/apache/druid/pull/9247#discussion_r370709307", "createdAt": "2020-01-24T15:59:44Z", "author": {"login": "suneet-s"}, "path": "indexing-service/src/test/java/org/apache/druid/indexing/common/task/TestAppenderatorsManager.java", "diffHunk": "@@ -78,6 +81,7 @@ public Appenderator createRealtimeAppenderatorForTask(\n         segmentAnnouncer,\n         emitter,\n         queryExecutorService,\n+        NoopJoinableFactory.INSTANCE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b954a64cdefbd88aabecead3ce4408755bce8019"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcyMTk3Ng==", "bodyText": "Oops, yes, you're right.", "url": "https://github.com/apache/druid/pull/9247#discussion_r370721976", "createdAt": "2020-01-24T16:25:14Z", "author": {"login": "gianm"}, "path": "indexing-service/src/test/java/org/apache/druid/indexing/common/task/TestAppenderatorsManager.java", "diffHunk": "@@ -78,6 +81,7 @@ public Appenderator createRealtimeAppenderatorForTask(\n         segmentAnnouncer,\n         emitter,\n         queryExecutorService,\n+        NoopJoinableFactory.INSTANCE,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcwOTMwNw=="}, "originalCommit": {"oid": "b954a64cdefbd88aabecead3ce4408755bce8019"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTQ3NDc2OnYy", "diffSide": "RIGHT", "path": "integration-tests/docker/broker.conf", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjowMDo0NlrOFhiVUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjozMjozNlrOFhjTmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcwOTg0MQ==", "bodyText": "Why was this change needed?", "url": "https://github.com/apache/druid/pull/9247#discussion_r370709841", "createdAt": "2020-01-24T16:00:46Z", "author": {"login": "suneet-s"}, "path": "integration-tests/docker/broker.conf", "diffHunk": "@@ -11,6 +11,7 @@ command=java\n   -Ddruid.host=%(ENV_HOST_IP)s\n   -Ddruid.zk.service.host=druid-zookeeper-kafka\n   -Ddruid.processing.buffer.sizeBytes=25000000\n+  -Ddruid.query.groupBy.maxOnDiskStorage=300000000", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b954a64cdefbd88aabecead3ce4408755bce8019"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcyNTc4Nw==", "bodyText": "Because the new integration tests I added needed more aggregation space than the 25MB of memory allocated by the previous line. I didn't want to allocate more memory (and therefore raise the memory requirements of integration tests) so instead I am configuring it to use disk for the spillover.", "url": "https://github.com/apache/druid/pull/9247#discussion_r370725787", "createdAt": "2020-01-24T16:32:36Z", "author": {"login": "gianm"}, "path": "integration-tests/docker/broker.conf", "diffHunk": "@@ -11,6 +11,7 @@ command=java\n   -Ddruid.host=%(ENV_HOST_IP)s\n   -Ddruid.zk.service.host=druid-zookeeper-kafka\n   -Ddruid.processing.buffer.sizeBytes=25000000\n+  -Ddruid.query.groupBy.maxOnDiskStorage=300000000", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcwOTg0MQ=="}, "originalCommit": {"oid": "b954a64cdefbd88aabecead3ce4408755bce8019"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTQ5NjcwOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/ReferenceCounter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjowODoxMFrOFhijRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1NzowNVrOFhkDuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcxMzQxNA==", "bodyText": "Does this need to be thread safe?", "url": "https://github.com/apache/druid/pull/9247#discussion_r370713414", "createdAt": "2020-01-24T16:08:10Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/ReferenceCounter.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment;\n+\n+import java.io.Closeable;\n+\n+/**\n+ * An interface to reference-counted objects. Used by {@link ReferenceCountingSegment}.\n+ */\n+public interface ReferenceCounter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b954a64cdefbd88aabecead3ce4408755bce8019"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczODEwNQ==", "bodyText": "Yes, it does. I'll add some comments for it.", "url": "https://github.com/apache/druid/pull/9247#discussion_r370738105", "createdAt": "2020-01-24T16:57:05Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/ReferenceCounter.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment;\n+\n+import java.io.Closeable;\n+\n+/**\n+ * An interface to reference-counted objects. Used by {@link ReferenceCountingSegment}.\n+ */\n+public interface ReferenceCounter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcxMzQxNA=="}, "originalCommit": {"oid": "b954a64cdefbd88aabecead3ce4408755bce8019"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTUwOTUxOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/ReferenceCountingSegment.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjoxMjoxMlrOFhirUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1Nzo1OFrOFhkFXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcxNTQ3NA==", "bodyText": "Make ReferenceCountingSegment implement ReferenceCounter. Then this function can just be return this;\nWhich also means less inner classes and less lines of code to read in a delta \ud83d\ude43", "url": "https://github.com/apache/druid/pull/9247#discussion_r370715474", "createdAt": "2020-01-24T16:12:12Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/ReferenceCountingSegment.java", "diffHunk": "@@ -167,6 +166,30 @@ public void close()\n     }\n   }\n \n+  public ReferenceCounter referenceCounter()\n+  {\n+    return new ReferenceCounter()\n+    {\n+      @Override\n+      public boolean increment()\n+      {\n+        return ReferenceCountingSegment.this.increment();\n+      }\n+\n+      @Override\n+      public Closeable decrementOnceCloseable()\n+      {\n+        return ReferenceCountingSegment.this.decrementOnceCloseable();\n+      }\n+\n+      @Override\n+      public void decrement()\n+      {\n+        ReferenceCountingSegment.this.decrement();\n+      }\n+    };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b954a64cdefbd88aabecead3ce4408755bce8019"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczODUyNQ==", "bodyText": "Oh, great idea!", "url": "https://github.com/apache/druid/pull/9247#discussion_r370738525", "createdAt": "2020-01-24T16:57:58Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/ReferenceCountingSegment.java", "diffHunk": "@@ -167,6 +166,30 @@ public void close()\n     }\n   }\n \n+  public ReferenceCounter referenceCounter()\n+  {\n+    return new ReferenceCounter()\n+    {\n+      @Override\n+      public boolean increment()\n+      {\n+        return ReferenceCountingSegment.this.increment();\n+      }\n+\n+      @Override\n+      public Closeable decrementOnceCloseable()\n+      {\n+        return ReferenceCountingSegment.this.decrementOnceCloseable();\n+      }\n+\n+      @Override\n+      public void decrement()\n+      {\n+        ReferenceCountingSegment.this.decrement();\n+      }\n+    };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcxNTQ3NA=="}, "originalCommit": {"oid": "b954a64cdefbd88aabecead3ce4408755bce8019"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTUxNDkyOnYy", "diffSide": "LEFT", "path": "processing/src/main/java/org/apache/druid/segment/join/HashJoinSegment.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjoxMzo1OFrOFhiu1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1OToxOVrOFhkH-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcxNjM3NA==", "bodyText": "Does this mean we now allow joins on the time column?", "url": "https://github.com/apache/druid/pull/9247#discussion_r370716374", "createdAt": "2020-01-24T16:13:58Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/join/HashJoinSegment.java", "diffHunk": "@@ -50,15 +49,9 @@ public HashJoinSegment(\n     this.baseSegment = baseSegment;\n     this.clauses = clauses;\n \n-    // Verify no clauses would shadow the special __time field.\n-    for (JoinableClause clause : clauses) {\n-      if (clause.includesColumn(ColumnHolder.TIME_COLUMN_NAME)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b954a64cdefbd88aabecead3ce4408755bce8019"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczOTE5NQ==", "bodyText": "Yes, we do, although that's not what this means. This same check is still being applied, but in the constructor of JoinableClause (it calls Joinables.validatePrefix).", "url": "https://github.com/apache/druid/pull/9247#discussion_r370739195", "createdAt": "2020-01-24T16:59:19Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/join/HashJoinSegment.java", "diffHunk": "@@ -50,15 +49,9 @@ public HashJoinSegment(\n     this.baseSegment = baseSegment;\n     this.clauses = clauses;\n \n-    // Verify no clauses would shadow the special __time field.\n-    for (JoinableClause clause : clauses) {\n-      if (clause.includesColumn(ColumnHolder.TIME_COLUMN_NAME)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcxNjM3NA=="}, "originalCommit": {"oid": "b954a64cdefbd88aabecead3ce4408755bce8019"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTUyOTA2OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/ReferenceCountingSegmentQueryRunner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjoxODoxNlrOFhi3eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjoxODoxNlrOFhi3eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcxODU4NQ==", "bodyText": "note to self: Do these 2 need to be tightly coupled? DIg in a little more here", "url": "https://github.com/apache/druid/pull/9247#discussion_r370718585", "createdAt": "2020-01-24T16:18:16Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/ReferenceCountingSegmentQueryRunner.java", "diffHunk": "@@ -22,39 +22,41 @@\n import org.apache.druid.java.util.common.guava.Sequence;\n import org.apache.druid.java.util.common.guava.Sequences;\n import org.apache.druid.query.context.ResponseContext;\n-import org.apache.druid.segment.ReferenceCountingSegment;\n+import org.apache.druid.segment.ReferenceCounter;\n+import org.apache.druid.segment.Segment;\n \n-/**\n- */\n public class ReferenceCountingSegmentQueryRunner<T> implements QueryRunner<T>\n {\n   private final QueryRunnerFactory<T, Query<T>> factory;\n-  private final ReferenceCountingSegment adapter;\n+  private final Segment segment;\n+  private final ReferenceCounter segmentReferenceCounter;\n   private final SegmentDescriptor descriptor;\n \n   public ReferenceCountingSegmentQueryRunner(\n       QueryRunnerFactory<T, Query<T>> factory,\n-      ReferenceCountingSegment adapter,\n+      Segment segment,\n+      ReferenceCounter segmentReferenceCounter,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b954a64cdefbd88aabecead3ce4408755bce8019"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTUzMDk0OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/join/Joinables.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjoxODo1NVrOFhi4sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNzo0MjozNlrOFhlSfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcxODg5Nw==", "bodyText": "missing unit tests?", "url": "https://github.com/apache/druid/pull/9247#discussion_r370718897", "createdAt": "2020-01-24T16:18:55Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/join/Joinables.java", "diffHunk": "@@ -52,4 +61,56 @@ public static boolean isPrefixedBy(final String columnName, final String prefix)\n   {\n     return columnName.startsWith(prefix) && columnName.length() > prefix.length();\n   }\n+\n+  /**\n+   * Creates a Function that maps base segments to {@link HashJoinSegment} if needed (i.e. if the number of join\n+   * clauses is > 0). If mapping is not needed, this method will return {@link Function#identity()}.\n+   *\n+   * @param clauses            pre-joinable clauses\n+   * @param joinableFactory    factory for joinables\n+   * @param cpuTimeAccumulator an accumulator that we will add CPU nanos to; this is part of the function to encourage\n+   *                           callers to remember to track metrics on CPU time required for creation of Joinables\n+   */\n+  public static Function<Segment, Segment> createSegmentMapFn(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b954a64cdefbd88aabecead3ce4408755bce8019"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1ODI3MQ==", "bodyText": "I'll add some. I'm thinking of adding tests that are a bit on the basic side, because full-on tests require a lot of scaffolding similar to HashJoinSegmentTest. I'm not sure if adding that here adds much value over the tests that are already in HashJoinSegmentTest. So I'm planning to focus on testing the functionality that HashJoinSegmentTest doesn't test (error conditions, special cases).\nLet me know what you think. If you think I should add more tests beyond the ones I'm about to add, please let me know.", "url": "https://github.com/apache/druid/pull/9247#discussion_r370758271", "createdAt": "2020-01-24T17:42:36Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/join/Joinables.java", "diffHunk": "@@ -52,4 +61,56 @@ public static boolean isPrefixedBy(final String columnName, final String prefix)\n   {\n     return columnName.startsWith(prefix) && columnName.length() > prefix.length();\n   }\n+\n+  /**\n+   * Creates a Function that maps base segments to {@link HashJoinSegment} if needed (i.e. if the number of join\n+   * clauses is > 0). If mapping is not needed, this method will return {@link Function#identity()}.\n+   *\n+   * @param clauses            pre-joinable clauses\n+   * @param joinableFactory    factory for joinables\n+   * @param cpuTimeAccumulator an accumulator that we will add CPU nanos to; this is part of the function to encourage\n+   *                           callers to remember to track metrics on CPU time required for creation of Joinables\n+   */\n+  public static Function<Segment, Segment> createSegmentMapFn(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcxODg5Nw=="}, "originalCommit": {"oid": "b954a64cdefbd88aabecead3ce4408755bce8019"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTc1ODEwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/segment/join/DefaultJoinableFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNzozNTo1N1rOFhlGxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNzozNTo1N1rOFhlGxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1NTI3MQ==", "bodyText": "javadocs please.\nI'm a little confused why this is the \"Default\" and not just a delegating factory. Also since this is just one delegate, I think it would be easier to follow if there was just one factory instead of factories.\nWhen we add support for multiple factories, we can change this and think about how to decide precedence if more than one factory can build a joinable.", "url": "https://github.com/apache/druid/pull/9247#discussion_r370755271", "createdAt": "2020-01-24T17:35:57Z", "author": {"login": "suneet-s"}, "path": "server/src/main/java/org/apache/druid/segment/join/DefaultJoinableFactory.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.join;\n+\n+import com.google.inject.Inject;\n+import org.apache.druid.query.DataSource;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+public class DefaultJoinableFactory implements JoinableFactory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b954a64cdefbd88aabecead3ce4408755bce8019"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2152, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}