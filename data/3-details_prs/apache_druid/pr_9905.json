{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMTEzMzky", "number": 9905, "title": "Fix compact partially overlapping segments", "bodyText": "Description\nthis PR fixes #9904 by unifying overlapping intervals to ensure overlapping segments compacting in the same indexSpec.\nThis PR has:\n\n been self-reviewed.\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths.\n added integration tests.\n been tested in a test Druid cluster.\n\n\n\nKey changed/added classes in this PR\n\nCompactionTask", "createdAt": "2020-05-21T02:27:55Z", "url": "https://github.com/apache/druid/pull/9905", "merged": true, "mergeCommit": {"oid": "ee7bda5d8a7e68692cf29182bdbb5dcbe29400f4"}, "closed": true, "closedAt": "2020-06-08T16:54:40Z", "author": {"login": "yuanlihan"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjTYAdgH2gAyNDIxMTEzMzkyOjA1MmU1NzllNzVkZjc4YTY1YzVlYjM5NDEyZjY1ZjE4MTAyODk1YTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpTa4UAFqTQyNjQzMTUwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "052e579e75df78a65c5eb39412f65f18102895a9", "author": {"user": {"login": "yuanlihan", "name": "Yuanli Han"}}, "url": "https://github.com/apache/druid/commit/052e579e75df78a65c5eb39412f65f18102895a9", "committedDate": "2020-05-21T01:27:51Z", "message": "fix compact overlapping segments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0OTM4OTM3", "url": "https://github.com/apache/druid/pull/9905#pullrequestreview-424938937", "createdAt": "2020-06-05T01:26:36Z", "commit": {"oid": "052e579e75df78a65c5eb39412f65f18102895a9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMToyNjozNlrOGfdc8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMTozMDozNFrOGfdgyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0MTU4Ng==", "bodyText": "Would you explain why you changed this? The intention here was to make some unit tests failed when the timeline somehow returns unsorted intervals which is supposed to be a bug.", "url": "https://github.com/apache/druid/pull/9905#discussion_r435641586", "createdAt": "2020-06-05T01:26:36Z", "author": {"login": "jihoonson"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/common/task/CompactionTask.java", "diffHunk": "@@ -710,20 +728,8 @@ private static DimensionsSpec createDimensionsSpec(List<Pair<QueryableIndex, Dat\n     // Dimensions are extracted from the recent segments to olders because recent segments are likely to be queried more\n     // frequently, and thus the performance should be optimized for recent ones rather than old ones.\n \n-    // timelineSegments are sorted in order of interval, but we do a sanity check here.\n-    final Comparator<Interval> intervalComparator = Comparators.intervalsByStartThenEnd();\n-    for (int i = 0; i < queryableIndices.size() - 1; i++) {\n-      final Interval shouldBeSmaller = queryableIndices.get(i).lhs.getDataInterval();\n-      final Interval shouldBeLarger = queryableIndices.get(i + 1).lhs.getDataInterval();\n-      Preconditions.checkState(\n-          intervalComparator.compare(shouldBeSmaller, shouldBeLarger) <= 0,\n-          \"QueryableIndexes are not sorted! Interval[%s] of segment[%s] is laster than interval[%s] of segment[%s]\",\n-          shouldBeSmaller,\n-          queryableIndices.get(i).rhs.getId(),\n-          shouldBeLarger,\n-          queryableIndices.get(i + 1).rhs.getId()\n-      );\n-    }\n+    // sort timelineSegments in order of interval.\n+    queryableIndices.sort((o1, o2) -> Comparators.intervalsByStartThenEnd().compare(o1.rhs.getInterval(), o2.rhs.getInterval()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "052e579e75df78a65c5eb39412f65f18102895a9"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0MjU3MQ==", "bodyText": "Could you use a more intuitive name such as numUmbrellaIntervals?", "url": "https://github.com/apache/druid/pull/9905#discussion_r435642571", "createdAt": "2020-06-05T01:30:34Z", "author": {"login": "jihoonson"}, "path": "indexing-service/src/test/java/org/apache/druid/indexing/common/task/CompactionTaskTest.java", "diffHunk": "@@ -191,28 +194,33 @@ public static void setupClass()\n     MIXED_TYPE_COLUMN_MAP.put(Intervals.of(\"2017-05-01/2017-06-01\"), new DoubleDimensionSchema(MIXED_TYPE_COLUMN));\n     MIXED_TYPE_COLUMN_MAP.put(Intervals.of(\"2017-06-01/2017-07-01\"), new DoubleDimensionSchema(MIXED_TYPE_COLUMN));\n \n+    MIXED_TYPE_COLUMN_MAP.put(Intervals.of(\"2017-06-01/2017-06-02\"), new DoubleDimensionSchema(MIXED_TYPE_COLUMN));\n+    MIXED_TYPE_COLUMN_MAP.put(Intervals.of(\"2017-06-15/2017-06-16\"), new DoubleDimensionSchema(MIXED_TYPE_COLUMN));\n+    MIXED_TYPE_COLUMN_MAP.put(Intervals.of(\"2017-06-30/2017-07-01\"), new DoubleDimensionSchema(MIXED_TYPE_COLUMN));\n+\n     DIMENSIONS = new HashMap<>();\n     AGGREGATORS = new ArrayList<>();\n \n     DIMENSIONS.put(ColumnHolder.TIME_COLUMN_NAME, new LongDimensionSchema(ColumnHolder.TIME_COLUMN_NAME));\n     DIMENSIONS.put(TIMESTAMP_COLUMN, new LongDimensionSchema(TIMESTAMP_COLUMN));\n-    for (int i = 0; i < SEGMENT_INTERVALS.size(); i++) {\n+    int num = 6;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "052e579e75df78a65c5eb39412f65f18102895a9"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce51e7d25119f2f8fcbc1ea5936ff410c4e5e8d0", "author": {"user": {"login": "yuanlihan", "name": "Yuanli Han"}}, "url": "https://github.com/apache/druid/commit/ce51e7d25119f2f8fcbc1ea5936ff410c4e5e8d0", "committedDate": "2020-06-05T07:10:14Z", "message": "fix comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NTA3MzQ3", "url": "https://github.com/apache/druid/pull/9905#pullrequestreview-425507347", "createdAt": "2020-06-05T17:55:56Z", "commit": {"oid": "ce51e7d25119f2f8fcbc1ea5936ff410c4e5e8d0"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNzo1NTo1N1rOGf39FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNzo1NTo1N1rOGf39FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3NTc5Nw==", "bodyText": "@yuanlihan thanks for the explanation! What this method does is finding the most reasonable order of dimensions when input segments have mixed orders. The current algorithm is assuming that more recent segments will likely have the order what you want more (there would be some reason if you have changed the dimension order at some point). Maybe a potential improvement can be considering the segment version as well if some segment intervals are overlapped, but I think this could be done in a separate PR.\n\nAlso I found that now timeline already has unit tests about sorting timelineObjectHolders and the sanity check will pass in most case.\n\nBTW, out of curiosity, can you point me out where this test is?", "url": "https://github.com/apache/druid/pull/9905#discussion_r436075797", "createdAt": "2020-06-05T17:55:57Z", "author": {"login": "jihoonson"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/common/task/CompactionTask.java", "diffHunk": "@@ -710,20 +728,8 @@ private static DimensionsSpec createDimensionsSpec(List<Pair<QueryableIndex, Dat\n     // Dimensions are extracted from the recent segments to olders because recent segments are likely to be queried more\n     // frequently, and thus the performance should be optimized for recent ones rather than old ones.\n \n-    // timelineSegments are sorted in order of interval, but we do a sanity check here.\n-    final Comparator<Interval> intervalComparator = Comparators.intervalsByStartThenEnd();\n-    for (int i = 0; i < queryableIndices.size() - 1; i++) {\n-      final Interval shouldBeSmaller = queryableIndices.get(i).lhs.getDataInterval();\n-      final Interval shouldBeLarger = queryableIndices.get(i + 1).lhs.getDataInterval();\n-      Preconditions.checkState(\n-          intervalComparator.compare(shouldBeSmaller, shouldBeLarger) <= 0,\n-          \"QueryableIndexes are not sorted! Interval[%s] of segment[%s] is laster than interval[%s] of segment[%s]\",\n-          shouldBeSmaller,\n-          queryableIndices.get(i).rhs.getId(),\n-          shouldBeLarger,\n-          queryableIndices.get(i + 1).rhs.getId()\n-      );\n-    }\n+    // sort timelineSegments in order of interval.\n+    queryableIndices.sort((o1, o2) -> Comparators.intervalsByStartThenEnd().compare(o1.rhs.getInterval(), o2.rhs.getInterval()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0MTU4Ng=="}, "originalCommit": {"oid": "052e579e75df78a65c5eb39412f65f18102895a9"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NTA5NDE4", "url": "https://github.com/apache/druid/pull/9905#pullrequestreview-425509418", "createdAt": "2020-06-05T17:58:57Z", "commit": {"oid": "ce51e7d25119f2f8fcbc1ea5936ff410c4e5e8d0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNzo1ODo1N1rOGf4Dug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNzo1ODo1N1rOGf4Dug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3NzQ5OA==", "bodyText": "Oops, sorry I missed the CI failure.\n[ERROR] org.apache.druid.indexing.common.task.CompactionTask.createIngestionSchema(TaskToolbox, CompactionTask$SegmentProvider, CompactionTask$PartitionConfigurationManager, DimensionsSpec, AggregatorFactory[], Granularity, ObjectMapper, CoordinatorClient, SegmentLoaderFactory, RetryPolicyFactory) makes inefficient use of keySet iterator instead of entrySet iterator [org.apache.druid.indexing.common.task.CompactionTask] At CompactionTask.java:[line 531] WMI_WRONG_MAP_ITERATOR\n\nThis means you are calling HashMap.get() even though you can iterate the Entry set. Would you fix this please?", "url": "https://github.com/apache/druid/pull/9905#discussion_r436077498", "createdAt": "2020-06-05T17:58:57Z", "author": {"login": "jihoonson"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/common/task/CompactionTask.java", "diffHunk": "@@ -524,10 +524,28 @@ private String createIndexTaskSpecId(int i)\n                                  .add(p)\n       );\n \n-      final List<ParallelIndexIngestionSpec> specs = new ArrayList<>(intervalToSegments.size());\n-      for (Entry<Interval, List<Pair<QueryableIndex, DataSegment>>> entry : intervalToSegments.entrySet()) {\n-        final Interval interval = entry.getKey();\n-        final List<Pair<QueryableIndex, DataSegment>> segmentsToCompact = entry.getValue();\n+      // unify overlapping intervals to ensure overlapping segments compacting in the same indexSpec\n+      List<Pair<Interval, List<Pair<QueryableIndex, DataSegment>>>> intervalToSegmentsUnified = new ArrayList<>();\n+      Iterator<Interval> iterator = intervalToSegments.keySet().iterator();\n+      Interval union = iterator.next();\n+      List<Pair<QueryableIndex, DataSegment>> segments = new ArrayList<>(intervalToSegments.get(union));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce51e7d25119f2f8fcbc1ea5936ff410c4e5e8d0"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b1aa6444b1920ca3995b1bc019326b695562ed4", "author": {"user": {"login": "yuanlihan", "name": "Yuanli Han"}}, "url": "https://github.com/apache/druid/commit/0b1aa6444b1920ca3995b1bc019326b695562ed4", "committedDate": "2020-06-06T08:05:15Z", "message": "fix CI failure"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NDMxNTAz", "url": "https://github.com/apache/druid/pull/9905#pullrequestreview-426431503", "createdAt": "2020-06-08T16:54:32Z", "commit": {"oid": "0b1aa6444b1920ca3995b1bc019326b695562ed4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2383, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}