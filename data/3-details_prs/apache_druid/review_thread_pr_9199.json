{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzODk2MTc4", "number": 9199, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMzozODozNFrODYrNLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMzo0ODoyN1rODYrTuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjAwMzAwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/data/input/impl/CSVParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMzozODozNFrOFeq7Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMzo1Nzo0NlrOFerPBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcwNDkxMQ==", "bodyText": "SEPERATOR -> SEPARATOR", "url": "https://github.com/apache/druid/pull/9199#discussion_r367704911", "createdAt": "2020-01-16T23:38:34Z", "author": {"login": "jon-wei"}, "path": "core/src/main/java/org/apache/druid/data/input/impl/CSVParser.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.impl;\n+\n+import com.opencsv.RFC4180Parser;\n+import com.opencsv.RFC4180ParserBuilder;\n+import com.opencsv.enums.CSVReaderNullFieldIndicator;\n+import org.apache.druid.common.config.NullHandling;\n+import org.apache.druid.data.input.impl.DelimitedValueReader.DelimitedValueParser;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class CSVParser implements DelimitedValueParser\n+{\n+  private static final char SEPERATOR = ',';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b2da156bbd2f175d95035bf8ad6d687e550f2eb"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcwOTk1OQ==", "bodyText": "Thanks, fixed.", "url": "https://github.com/apache/druid/pull/9199#discussion_r367709959", "createdAt": "2020-01-16T23:57:46Z", "author": {"login": "jihoonson"}, "path": "core/src/main/java/org/apache/druid/data/input/impl/CSVParser.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.impl;\n+\n+import com.opencsv.RFC4180Parser;\n+import com.opencsv.RFC4180ParserBuilder;\n+import com.opencsv.enums.CSVReaderNullFieldIndicator;\n+import org.apache.druid.common.config.NullHandling;\n+import org.apache.druid.data.input.impl.DelimitedValueReader.DelimitedValueParser;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class CSVParser implements DelimitedValueParser\n+{\n+  private static final char SEPERATOR = ',';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcwNDkxMQ=="}, "originalCommit": {"oid": "1b2da156bbd2f175d95035bf8ad6d687e550f2eb"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjAxOTc5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/data/input/impl/FlatTextInputFormat.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMzo0ODoyN1rOFerFgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMzo1ODozMVrOFerP8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcwNzUyMQ==", "bodyText": "Does this need to check for listDelimiter in the column names as well?", "url": "https://github.com/apache/druid/pull/9199#discussion_r367707521", "createdAt": "2020-01-16T23:48:27Z", "author": {"login": "jon-wei"}, "path": "core/src/main/java/org/apache/druid/data/input/impl/FlatTextInputFormat.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.impl;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.druid.data.input.InputFormat;\n+import org.apache.druid.indexer.Checks;\n+import org.apache.druid.indexer.Property;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public abstract class FlatTextInputFormat implements InputFormat\n+{\n+  private final List<String> columns;\n+  private final String listDelimiter;\n+  private final String delimiter;\n+  private final boolean findColumnsFromHeader;\n+  private final int skipHeaderRows;\n+\n+  FlatTextInputFormat(\n+      @Nullable List<String> columns,\n+      @Nullable String listDelimiter,\n+      String delimiter,\n+      @Nullable Boolean hasHeaderRow,\n+      @Nullable Boolean findColumnsFromHeader,\n+      int skipHeaderRows\n+  )\n+  {\n+    this.columns = columns == null ? Collections.emptyList() : columns;\n+    this.listDelimiter = listDelimiter;\n+    this.delimiter = Preconditions.checkNotNull(delimiter, \"delimiter\");\n+    //noinspection ConstantConditions\n+    if (columns == null || columns.isEmpty()) {\n+      this.findColumnsFromHeader = Checks.checkOneNotNullOrEmpty(\n+          ImmutableList.of(\n+              new Property<>(\"hasHeaderRow\", hasHeaderRow),\n+              new Property<>(\"findColumnsFromHeader\", findColumnsFromHeader)\n+          )\n+      ).getValue();\n+    } else {\n+      this.findColumnsFromHeader = false;\n+    }\n+    this.skipHeaderRows = skipHeaderRows;\n+    Preconditions.checkArgument(\n+        !delimiter.equals(listDelimiter),\n+        \"Cannot have same delimiter and list delimiter of [%s]\",\n+        delimiter\n+    );\n+    if (!this.columns.isEmpty()) {\n+      for (String column : this.columns) {\n+        Preconditions.checkArgument(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b2da156bbd2f175d95035bf8ad6d687e550f2eb"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcxMDE5NQ==", "bodyText": "Hmm, I'm not sure why we do this check.. I guess it wouldn't harm anything if the column name contains the delimiter. Maybe we can remove this check later.", "url": "https://github.com/apache/druid/pull/9199#discussion_r367710195", "createdAt": "2020-01-16T23:58:31Z", "author": {"login": "jihoonson"}, "path": "core/src/main/java/org/apache/druid/data/input/impl/FlatTextInputFormat.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.impl;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import org.apache.druid.data.input.InputFormat;\n+import org.apache.druid.indexer.Checks;\n+import org.apache.druid.indexer.Property;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+public abstract class FlatTextInputFormat implements InputFormat\n+{\n+  private final List<String> columns;\n+  private final String listDelimiter;\n+  private final String delimiter;\n+  private final boolean findColumnsFromHeader;\n+  private final int skipHeaderRows;\n+\n+  FlatTextInputFormat(\n+      @Nullable List<String> columns,\n+      @Nullable String listDelimiter,\n+      String delimiter,\n+      @Nullable Boolean hasHeaderRow,\n+      @Nullable Boolean findColumnsFromHeader,\n+      int skipHeaderRows\n+  )\n+  {\n+    this.columns = columns == null ? Collections.emptyList() : columns;\n+    this.listDelimiter = listDelimiter;\n+    this.delimiter = Preconditions.checkNotNull(delimiter, \"delimiter\");\n+    //noinspection ConstantConditions\n+    if (columns == null || columns.isEmpty()) {\n+      this.findColumnsFromHeader = Checks.checkOneNotNullOrEmpty(\n+          ImmutableList.of(\n+              new Property<>(\"hasHeaderRow\", hasHeaderRow),\n+              new Property<>(\"findColumnsFromHeader\", findColumnsFromHeader)\n+          )\n+      ).getValue();\n+    } else {\n+      this.findColumnsFromHeader = false;\n+    }\n+    this.skipHeaderRows = skipHeaderRows;\n+    Preconditions.checkArgument(\n+        !delimiter.equals(listDelimiter),\n+        \"Cannot have same delimiter and list delimiter of [%s]\",\n+        delimiter\n+    );\n+    if (!this.columns.isEmpty()) {\n+      for (String column : this.columns) {\n+        Preconditions.checkArgument(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcwNzUyMQ=="}, "originalCommit": {"oid": "1b2da156bbd2f175d95035bf8ad6d687e550f2eb"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2133, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}