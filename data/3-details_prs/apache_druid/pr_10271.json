{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3MDk2NDky", "number": 10271, "title": "Web console: fix json input", "bodyText": "Fixed and improved the JSON Input component (as seen in the Edit Spec step of the data loader)\nSpecifically fixed the issue with the JSON input sometimes moving the cursor when editing, fixed the undo stack.\nThe fix is based around maintaining the state of the JSON Input in a single state variable (InternalValue) and thus not letting it get desynchronized.\nWhile at it I also added a nice error display in case there is an issue with the JSON\n\nClicking on it takes your cursor to the place with the error which is sweet - doing this required me to nest the Ace editor inside a div which causes a lot of snapshot diffs.\nAlso updated the snapshots for all the users of JSON Input to shallow render so in the future they would be immune to JSON Input structure changes.\nThis PR has:\n\n been self-reviewed.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links\n added unit tests or modified existing tests to cover new code paths\n been tested in a test Druid cluster.", "createdAt": "2020-08-13T01:41:54Z", "url": "https://github.com/apache/druid/pull/10271", "merged": true, "mergeCommit": {"oid": "748a83cb78832f098cac6ab24c9db6713509d38e"}, "closed": true, "closedAt": "2020-08-13T19:20:59Z", "author": {"login": "vogievetsky"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-VuMdgH2gAyNDY3MDk2NDkyOjc4YTAzNWRlMjg0Yzk0MGFhNThhMmZhYTUwM2M1YTAyZjZjMjM2OTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-lElggFqTQ2NzA2MjQ5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "78a035de284c940aa58a2faa503c5a02f6c23690", "author": {"user": {"login": "vogievetsky", "name": "Vadim Ogievetsky"}}, "url": "https://github.com/apache/druid/commit/78a035de284c940aa58a2faa503c5a02f6c23690", "committedDate": "2020-08-13T01:27:51Z", "message": "fix json input"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eff2956d828290e8ec02f6b8fb08569a8c7fdf91", "author": {"user": {"login": "vogievetsky", "name": "Vadim Ogievetsky"}}, "url": "https://github.com/apache/druid/commit/eff2956d828290e8ec02f6b8fb08569a8c7fdf91", "committedDate": "2020-08-13T01:41:29Z", "message": "tidy up"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2NzQ5MjA3", "url": "https://github.com/apache/druid/pull/10271#pullrequestreview-466749207", "createdAt": "2020-08-13T13:15:11Z", "commit": {"oid": "eff2956d828290e8ec02f6b8fb08569a8c7fdf91"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzoxNToxMVrOHAK-6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNDowNDo0MFrOHANEWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk0MTk5Mg==", "bodyText": "What's not the best about it and why is it good enough?", "url": "https://github.com/apache/druid/pull/10271#discussion_r469941992", "createdAt": "2020-08-13T13:15:11Z", "author": {"login": "gianm"}, "path": "web-console/src/components/json-input/json-input.tsx", "diffHunk": "@@ -37,6 +38,17 @@ function stringifyJson(item: any): string {\n   }\n }\n \n+// Not the best way to check for deep equality but good enough for what we need", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eff2956d828290e8ec02f6b8fb08569a8c7fdf91"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk0MjYxNw==", "bodyText": "My understanding is that these __snapshot__ files are automatically generated for testing purposes. @vogievetsky how would you suggest reviewing them?", "url": "https://github.com/apache/druid/pull/10271#discussion_r469942617", "createdAt": "2020-08-13T13:16:08Z", "author": {"login": "gianm"}, "path": "web-console/src/components/auto-form/__snapshots__/auto-form.spec.tsx.snap", "diffHunk": "@@ -2,521 +2,135 @@\n \n exports[`auto-form snapshot matches snapshot 1`] = `\n <div\n-  class=\"auto-form\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eff2956d828290e8ec02f6b8fb08569a8c7fdf91"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk0MzA1Mw==", "bodyText": "Is this also test code?", "url": "https://github.com/apache/druid/pull/10271#discussion_r469943053", "createdAt": "2020-08-13T13:16:50Z", "author": {"login": "gianm"}, "path": "web-console/src/components/auto-form/auto-form.spec.tsx", "diffHunk": "@@ -16,14 +16,14 @@\n  * limitations under the License.\n  */\n \n-import { render } from '@testing-library/react';\n+import { shallow } from 'enzyme';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eff2956d828290e8ec02f6b8fb08569a8c7fdf91"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk2MTA3Mw==", "bodyText": "\ud83d\ude31", "url": "https://github.com/apache/druid/pull/10271#discussion_r469961073", "createdAt": "2020-08-13T13:43:28Z", "author": {"login": "gianm"}, "path": "web-console/src/components/json-input/json-input.tsx", "diffHunk": "@@ -48,52 +60,93 @@ interface JsonInputProps {\n \n export const JsonInput = React.memo(function JsonInput(props: JsonInputProps) {\n   const { onChange, placeholder, focus, width, height, value } = props;\n-  const stringifiedValue = stringifyJson(value);\n-  const [stringValue, setStringValue] = useState(stringifiedValue);\n-  const [blurred, setBlurred] = useState(false);\n-\n-  let parsedValue: any;\n-  try {\n-    parsedValue = parseHjson(stringValue);\n-  } catch {}\n-  if (typeof parsedValue !== 'object') parsedValue = undefined;\n+  const [internalValue, setInternalValue] = useState<InternalValue>(() => ({\n+    value,\n+    stringified: stringifyJson(value),\n+  }));\n+  const [showErrorIfNeeded, setShowErrorIfNeeded] = useState(false);\n+  const aceEditor = useRef<Editor | undefined>();\n \n-  if (parsedValue !== undefined && stringifyJson(parsedValue) !== stringifiedValue) {\n-    setStringValue(stringifiedValue);\n-  }\n+  useEffect(() => {\n+    if (!deepEqual(value, internalValue.value)) {\n+      setInternalValue({\n+        value,\n+        stringified: stringifyJson(value),\n+      });\n+    }\n+  }, [value]);\n \n+  const internalValueError = internalValue.error;\n   return (\n-    <AceEditor\n-      className={classNames('json-input', { invalid: parsedValue === undefined && blurred })}\n-      mode=\"hjson\"\n-      theme=\"solarized_dark\"\n-      onChange={(inputJson: string) => {\n-        try {\n-          const value = parseHjson(inputJson);\n-          onChange(value);\n-        } catch {}\n-        setStringValue(inputJson);\n-      }}\n-      onFocus={() => setBlurred(false)}\n-      onBlur={() => setBlurred(true)}\n-      focus={focus}\n-      fontSize={12}\n-      width={width || '100%'}\n-      height={height || '8vh'}\n-      showPrintMargin={false}\n-      showGutter={false}\n-      value={stringValue}\n-      placeholder={placeholder}\n-      editorProps={{\n-        $blockScrolling: Infinity,\n-      }}\n-      setOptions={{\n-        enableBasicAutocompletion: false,\n-        enableLiveAutocompletion: false,\n-        showLineNumbers: false,\n-        tabSize: 2,\n-      }}\n-      style={{}}\n-    />\n+    <div className={classNames('json-input', { invalid: showErrorIfNeeded && internalValueError })}>\n+      <AceEditor\n+        mode=\"hjson\"\n+        theme=\"solarized_dark\"\n+        onChange={(inputJson: string) => {\n+          let value: any;\n+          let error: Error | undefined;\n+          try {\n+            value = parseHjson(inputJson);\n+          } catch (e) {\n+            error = e;\n+          }\n+\n+          setInternalValue({\n+            value,\n+            error,\n+            stringified: inputJson,\n+          });\n+\n+          if (!error) {\n+            onChange(value);\n+          }\n+\n+          if (showErrorIfNeeded) {\n+            setShowErrorIfNeeded(false);\n+          }\n+        }}\n+        onBlur={() => setShowErrorIfNeeded(true)}\n+        focus={focus}\n+        fontSize={12}\n+        width={width || '100%'}\n+        height={height || '8vh'}\n+        showPrintMargin={false}\n+        showGutter={false}\n+        value={internalValue.stringified}\n+        placeholder={placeholder}\n+        editorProps={{\n+          $blockScrolling: Infinity,\n+        }}\n+        setOptions={{\n+          enableBasicAutocompletion: false,\n+          enableLiveAutocompletion: false,\n+          showLineNumbers: false,\n+          tabSize: 2,\n+        }}\n+        style={{}}\n+        onLoad={(editor: any) => {\n+          aceEditor.current = editor;\n+        }}\n+      />\n+      {showErrorIfNeeded && internalValueError && (\n+        <div\n+          className=\"json-error\"\n+          onClick={() => {\n+            if (!aceEditor.current || !internalValueError) return;\n+\n+            // Message would be something like:\n+            // `Found '}' where a key name was expected at line 26,7`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eff2956d828290e8ec02f6b8fb08569a8c7fdf91"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk3NjE1Mw==", "bodyText": "I suppose this won't always work; is that ok?", "url": "https://github.com/apache/druid/pull/10271#discussion_r469976153", "createdAt": "2020-08-13T14:04:40Z", "author": {"login": "gianm"}, "path": "web-console/src/components/json-input/json-input.tsx", "diffHunk": "@@ -48,52 +60,93 @@ interface JsonInputProps {\n \n export const JsonInput = React.memo(function JsonInput(props: JsonInputProps) {\n   const { onChange, placeholder, focus, width, height, value } = props;\n-  const stringifiedValue = stringifyJson(value);\n-  const [stringValue, setStringValue] = useState(stringifiedValue);\n-  const [blurred, setBlurred] = useState(false);\n-\n-  let parsedValue: any;\n-  try {\n-    parsedValue = parseHjson(stringValue);\n-  } catch {}\n-  if (typeof parsedValue !== 'object') parsedValue = undefined;\n+  const [internalValue, setInternalValue] = useState<InternalValue>(() => ({\n+    value,\n+    stringified: stringifyJson(value),\n+  }));\n+  const [showErrorIfNeeded, setShowErrorIfNeeded] = useState(false);\n+  const aceEditor = useRef<Editor | undefined>();\n \n-  if (parsedValue !== undefined && stringifyJson(parsedValue) !== stringifiedValue) {\n-    setStringValue(stringifiedValue);\n-  }\n+  useEffect(() => {\n+    if (!deepEqual(value, internalValue.value)) {\n+      setInternalValue({\n+        value,\n+        stringified: stringifyJson(value),\n+      });\n+    }\n+  }, [value]);\n \n+  const internalValueError = internalValue.error;\n   return (\n-    <AceEditor\n-      className={classNames('json-input', { invalid: parsedValue === undefined && blurred })}\n-      mode=\"hjson\"\n-      theme=\"solarized_dark\"\n-      onChange={(inputJson: string) => {\n-        try {\n-          const value = parseHjson(inputJson);\n-          onChange(value);\n-        } catch {}\n-        setStringValue(inputJson);\n-      }}\n-      onFocus={() => setBlurred(false)}\n-      onBlur={() => setBlurred(true)}\n-      focus={focus}\n-      fontSize={12}\n-      width={width || '100%'}\n-      height={height || '8vh'}\n-      showPrintMargin={false}\n-      showGutter={false}\n-      value={stringValue}\n-      placeholder={placeholder}\n-      editorProps={{\n-        $blockScrolling: Infinity,\n-      }}\n-      setOptions={{\n-        enableBasicAutocompletion: false,\n-        enableLiveAutocompletion: false,\n-        showLineNumbers: false,\n-        tabSize: 2,\n-      }}\n-      style={{}}\n-    />\n+    <div className={classNames('json-input', { invalid: showErrorIfNeeded && internalValueError })}>\n+      <AceEditor\n+        mode=\"hjson\"\n+        theme=\"solarized_dark\"\n+        onChange={(inputJson: string) => {\n+          let value: any;\n+          let error: Error | undefined;\n+          try {\n+            value = parseHjson(inputJson);\n+          } catch (e) {\n+            error = e;\n+          }\n+\n+          setInternalValue({\n+            value,\n+            error,\n+            stringified: inputJson,\n+          });\n+\n+          if (!error) {\n+            onChange(value);\n+          }\n+\n+          if (showErrorIfNeeded) {\n+            setShowErrorIfNeeded(false);\n+          }\n+        }}\n+        onBlur={() => setShowErrorIfNeeded(true)}\n+        focus={focus}\n+        fontSize={12}\n+        width={width || '100%'}\n+        height={height || '8vh'}\n+        showPrintMargin={false}\n+        showGutter={false}\n+        value={internalValue.stringified}\n+        placeholder={placeholder}\n+        editorProps={{\n+          $blockScrolling: Infinity,\n+        }}\n+        setOptions={{\n+          enableBasicAutocompletion: false,\n+          enableLiveAutocompletion: false,\n+          showLineNumbers: false,\n+          tabSize: 2,\n+        }}\n+        style={{}}\n+        onLoad={(editor: any) => {\n+          aceEditor.current = editor;\n+        }}\n+      />\n+      {showErrorIfNeeded && internalValueError && (\n+        <div\n+          className=\"json-error\"\n+          onClick={() => {\n+            if (!aceEditor.current || !internalValueError) return;\n+\n+            // Message would be something like:\n+            // `Found '}' where a key name was expected at line 26,7`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk2MTA3Mw=="}, "originalCommit": {"oid": "eff2956d828290e8ec02f6b8fb08569a8c7fdf91"}, "originalPosition": 154}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8eb77e92e23487a0c391e770bcec010545758c6e", "author": {"user": {"login": "vogievetsky", "name": "Vadim Ogievetsky"}}, "url": "https://github.com/apache/druid/commit/8eb77e92e23487a0c391e770bcec010545758c6e", "committedDate": "2020-08-13T16:48:08Z", "message": "add error extraction test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MDYyNDk2", "url": "https://github.com/apache/druid/pull/10271#pullrequestreview-467062496", "createdAt": "2020-08-13T19:20:53Z", "commit": {"oid": "8eb77e92e23487a0c391e770bcec010545758c6e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1951, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}