{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExMjE1NDg0", "number": 9800, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNDo0ODoyMFrOD42dIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMDo0OToxNVrOD5kseA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTM5MDQzOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNDo0ODoyMFrOGPyrnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzozMDozMlrOGQKmUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIxMjE4OA==", "bodyText": "I don't think we have any usages right now where this would be an issue, but maybe it's good to have a comment somewhere noting that the set passed in to InDimFilter shouldn't be modified afterwards since it can be reused", "url": "https://github.com/apache/druid/pull/9800#discussion_r419212188", "createdAt": "2020-05-04T04:48:20Z", "author": {"login": "jon-wei"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -84,9 +90,11 @@ public InDimFilter(\n     Preconditions.checkNotNull(dimension, \"dimension can not be null\");\n     Preconditions.checkArgument(values != null, \"values can not be null\");\n \n-    this.values = new TreeSet<>(Comparators.naturalNullsFirst());\n-    for (String value : values) {\n-      this.values.add(NullHandling.emptyToNullIfNeeded(value));\n+    // The values set can be huge. Try to avoid copying the set if possible.\n+    if (values instanceof Set && values.stream().noneMatch(NullHandling::needsEmptyToNull)) {\n+      this.values = (Set<String>) values;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e67d9cb7bd60bf9d36104371e45c0f97968b285"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwNDA1MQ==", "bodyText": "Added a comment on the constructor.", "url": "https://github.com/apache/druid/pull/9800#discussion_r419604051", "createdAt": "2020-05-04T17:30:32Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -84,9 +90,11 @@ public InDimFilter(\n     Preconditions.checkNotNull(dimension, \"dimension can not be null\");\n     Preconditions.checkArgument(values != null, \"values can not be null\");\n \n-    this.values = new TreeSet<>(Comparators.naturalNullsFirst());\n-    for (String value : values) {\n-      this.values.add(NullHandling.emptyToNullIfNeeded(value));\n+    // The values set can be huge. Try to avoid copying the set if possible.\n+    if (values instanceof Set && values.stream().noneMatch(NullHandling::needsEmptyToNull)) {\n+      this.values = (Set<String>) values;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIxMjE4OA=="}, "originalCommit": {"oid": "5e67d9cb7bd60bf9d36104371e45c0f97968b285"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTQwODQwOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNTowMzowMFrOGPy1jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzo0NjoxMVrOGQLLLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIxNDczNA==", "bodyText": "If values is a set, I think you could determine hasNull beforehand if you've already scanned values for empty/nulls, and avoid scanning again", "url": "https://github.com/apache/druid/pull/9800#discussion_r419214734", "createdAt": "2020-05-04T05:03:00Z", "author": {"login": "jon-wei"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -132,31 +141,43 @@ public FilterTuning getFilterTuning()\n   @Override\n   public byte[] getCacheKey()\n   {\n-    boolean hasNull = false;\n-    for (String value : values) {\n-      if (value == null) {\n-        hasNull = true;\n-        break;\n-      }\n+    if (cacheKey == null) {\n+      final boolean hasNull = values.stream().anyMatch(Objects::isNull);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e67d9cb7bd60bf9d36104371e45c0f97968b285"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYxMzQ4Nw==", "bodyText": "Hmm, this value doesn't seem necessary. Removed and added a unit test for it", "url": "https://github.com/apache/druid/pull/9800#discussion_r419613487", "createdAt": "2020-05-04T17:46:11Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -132,31 +141,43 @@ public FilterTuning getFilterTuning()\n   @Override\n   public byte[] getCacheKey()\n   {\n-    boolean hasNull = false;\n-    for (String value : values) {\n-      if (value == null) {\n-        hasNull = true;\n-        break;\n-      }\n+    if (cacheKey == null) {\n+      final boolean hasNull = values.stream().anyMatch(Objects::isNull);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIxNDczNA=="}, "originalCommit": {"oid": "5e67d9cb7bd60bf9d36104371e45c0f97968b285"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTQxNTEyOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNTowODo1MVrOGPy5Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzozMTo0N1rOGQKpYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIxNTcwMg==", "bodyText": "If NullHandling.replaceWithDefault() returns false, I think you can skip the scan here and just reuse the set", "url": "https://github.com/apache/druid/pull/9800#discussion_r419215702", "createdAt": "2020-05-04T05:08:51Z", "author": {"login": "jon-wei"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -84,9 +90,11 @@ public InDimFilter(\n     Preconditions.checkNotNull(dimension, \"dimension can not be null\");\n     Preconditions.checkArgument(values != null, \"values can not be null\");\n \n-    this.values = new TreeSet<>(Comparators.naturalNullsFirst());\n-    for (String value : values) {\n-      this.values.add(NullHandling.emptyToNullIfNeeded(value));\n+    // The values set can be huge. Try to avoid copying the set if possible.\n+    if (values instanceof Set && values.stream().noneMatch(NullHandling::needsEmptyToNull)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e67d9cb7bd60bf9d36104371e45c0f97968b285"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwNDgzNQ==", "bodyText": "Good point. Added a check for it.", "url": "https://github.com/apache/druid/pull/9800#discussion_r419604835", "createdAt": "2020-05-04T17:31:47Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -84,9 +90,11 @@ public InDimFilter(\n     Preconditions.checkNotNull(dimension, \"dimension can not be null\");\n     Preconditions.checkArgument(values != null, \"values can not be null\");\n \n-    this.values = new TreeSet<>(Comparators.naturalNullsFirst());\n-    for (String value : values) {\n-      this.values.add(NullHandling.emptyToNullIfNeeded(value));\n+    // The values set can be huge. Try to avoid copying the set if possible.\n+    if (values instanceof Set && values.stream().noneMatch(NullHandling::needsEmptyToNull)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIxNTcwMg=="}, "originalCommit": {"oid": "5e67d9cb7bd60bf9d36104371e45c0f97968b285"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzIwODEzOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMDo0MToyNVrOGQXDOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMToxODozOFrOGQXnrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwODA1OQ==", "bodyText": "There's an extra STRING_SEPARATOR now", "url": "https://github.com/apache/druid/pull/9800#discussion_r419808059", "createdAt": "2020-05-05T00:41:25Z", "author": {"login": "jon-wei"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -132,31 +145,41 @@ public FilterTuning getFilterTuning()\n   @Override\n   public byte[] getCacheKey()\n   {\n-    boolean hasNull = false;\n-    for (String value : values) {\n-      if (value == null) {\n-        hasNull = true;\n-        break;\n+    if (cacheKey == null) {\n+      final List<String> sortedValues = new ArrayList<>(values);\n+      sortedValues.sort(Comparator.nullsFirst(Ordering.natural()));\n+      final Hasher hasher = Hashing.sha256().newHasher();\n+      for (String v : sortedValues) {\n+        if (v == null) {\n+          hasher.putInt(0);\n+        } else {\n+          hasher.putString(v, StandardCharsets.UTF_8);\n+        }\n       }\n+      cacheKey = new CacheKeyBuilder(DimFilterUtils.IN_CACHE_ID)\n+          .appendString(dimension)\n+          .appendByte(DimFilterUtils.STRING_SEPARATOR)\n+          .appendByteArray(extractionFn == null ? new byte[0] : extractionFn.getCacheKey())\n+          .appendByte(DimFilterUtils.STRING_SEPARATOR)\n+          .appendByte(DimFilterUtils.STRING_SEPARATOR)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ce40f929347443c17ca15a3143f40417ce5324c"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgxNzM5MQ==", "bodyText": "Oops", "url": "https://github.com/apache/druid/pull/9800#discussion_r419817391", "createdAt": "2020-05-05T01:18:38Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -132,31 +145,41 @@ public FilterTuning getFilterTuning()\n   @Override\n   public byte[] getCacheKey()\n   {\n-    boolean hasNull = false;\n-    for (String value : values) {\n-      if (value == null) {\n-        hasNull = true;\n-        break;\n+    if (cacheKey == null) {\n+      final List<String> sortedValues = new ArrayList<>(values);\n+      sortedValues.sort(Comparator.nullsFirst(Ordering.natural()));\n+      final Hasher hasher = Hashing.sha256().newHasher();\n+      for (String v : sortedValues) {\n+        if (v == null) {\n+          hasher.putInt(0);\n+        } else {\n+          hasher.putString(v, StandardCharsets.UTF_8);\n+        }\n       }\n+      cacheKey = new CacheKeyBuilder(DimFilterUtils.IN_CACHE_ID)\n+          .appendString(dimension)\n+          .appendByte(DimFilterUtils.STRING_SEPARATOR)\n+          .appendByteArray(extractionFn == null ? new byte[0] : extractionFn.getCacheKey())\n+          .appendByte(DimFilterUtils.STRING_SEPARATOR)\n+          .appendByte(DimFilterUtils.STRING_SEPARATOR)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwODA1OQ=="}, "originalCommit": {"oid": "9ce40f929347443c17ca15a3143f40417ce5324c"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjQyMzMyOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/filter/AndDimFilter.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoxMjo0MFrOGQ1q9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODozMjo0M1rOGRgIkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMwOTc0OA==", "bodyText": "AndDimFilterTest is missing branch coverage for this and line 88", "url": "https://github.com/apache/druid/pull/9800#discussion_r420309748", "createdAt": "2020-05-05T18:12:40Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/AndDimFilter.java", "diffHunk": "@@ -72,8 +73,20 @@ public AndDimFilter(DimFilter... fields)\n   @Override\n   public DimFilter optimize()\n   {\n-    List<DimFilter> elements = DimFilters.optimize(fields);\n-    return elements.size() == 1 ? elements.get(0) : new AndDimFilter(elements);\n+    List<DimFilter> elements = DimFilters.optimize(fields)\n+                                         .stream()\n+                                         .filter(filter -> !(filter instanceof TrueDimFilter))\n+                                         .collect(Collectors.toList());\n+    if (elements.isEmpty()) {\n+      // All elements were TrueDimFilter after optimization\n+      return TrueDimFilter.instance();\n+    } else if (elements.size() == 1) {\n+      return elements.get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxOTc0Nw==", "bodyText": "Looks like this code is hit by other tests in druid-processing, but I'm not sure which ones", "url": "https://github.com/apache/druid/pull/9800#discussion_r420319747", "createdAt": "2020-05-05T18:29:17Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/AndDimFilter.java", "diffHunk": "@@ -72,8 +73,20 @@ public AndDimFilter(DimFilter... fields)\n   @Override\n   public DimFilter optimize()\n   {\n-    List<DimFilter> elements = DimFilters.optimize(fields);\n-    return elements.size() == 1 ? elements.get(0) : new AndDimFilter(elements);\n+    List<DimFilter> elements = DimFilters.optimize(fields)\n+                                         .stream()\n+                                         .filter(filter -> !(filter instanceof TrueDimFilter))\n+                                         .collect(Collectors.toList());\n+    if (elements.isEmpty()) {\n+      // All elements were TrueDimFilter after optimization\n+      return TrueDimFilter.instance();\n+    } else if (elements.size() == 1) {\n+      return elements.get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMwOTc0OA=="}, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM0NDM5Mw==", "bodyText": "The use of this and OrDimFilter are prevalent in unit tests so I believe they are being tested somewhere (I didn't change the logic of the lines you mentioned). But I can add some more tests.", "url": "https://github.com/apache/druid/pull/9800#discussion_r420344393", "createdAt": "2020-05-05T19:11:49Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/filter/AndDimFilter.java", "diffHunk": "@@ -72,8 +73,20 @@ public AndDimFilter(DimFilter... fields)\n   @Override\n   public DimFilter optimize()\n   {\n-    List<DimFilter> elements = DimFilters.optimize(fields);\n-    return elements.size() == 1 ? elements.get(0) : new AndDimFilter(elements);\n+    List<DimFilter> elements = DimFilters.optimize(fields)\n+                                         .stream()\n+                                         .filter(filter -> !(filter instanceof TrueDimFilter))\n+                                         .collect(Collectors.toList());\n+    if (elements.isEmpty()) {\n+      // All elements were TrueDimFilter after optimization\n+      return TrueDimFilter.instance();\n+    } else if (elements.size() == 1) {\n+      return elements.get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMwOTc0OA=="}, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwNTQ1Ng==", "bodyText": "Added.", "url": "https://github.com/apache/druid/pull/9800#discussion_r421005456", "createdAt": "2020-05-06T18:32:43Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/filter/AndDimFilter.java", "diffHunk": "@@ -72,8 +73,20 @@ public AndDimFilter(DimFilter... fields)\n   @Override\n   public DimFilter optimize()\n   {\n-    List<DimFilter> elements = DimFilters.optimize(fields);\n-    return elements.size() == 1 ? elements.get(0) : new AndDimFilter(elements);\n+    List<DimFilter> elements = DimFilters.optimize(fields)\n+                                         .stream()\n+                                         .filter(filter -> !(filter instanceof TrueDimFilter))\n+                                         .collect(Collectors.toList());\n+    if (elements.isEmpty()) {\n+      // All elements were TrueDimFilter after optimization\n+      return TrueDimFilter.instance();\n+    } else if (elements.size() == 1) {\n+      return elements.get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMwOTc0OA=="}, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjQzNTE3OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/filter/FalseDimFilter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoxNjowMFrOGQ1ymQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODozMjo0N1rOGRgIrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxMTcwNQ==", "bodyText": "nit: should this be a static instance", "url": "https://github.com/apache/druid/pull/9800#discussion_r420311705", "createdAt": "2020-05-05T18:16:00Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/FalseDimFilter.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.filter;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.google.common.collect.ImmutableRangeSet;\n+import com.google.common.collect.RangeSet;\n+import org.apache.druid.query.cache.CacheKeyBuilder;\n+import org.apache.druid.segment.filter.FalseFilter;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+public class FalseDimFilter implements DimFilter\n+{\n+  private static final FalseDimFilter INSTANCE = new FalseDimFilter();\n+\n+  @JsonCreator\n+  public static FalseDimFilter instance()\n+  {\n+    return INSTANCE;\n+  }\n+\n+  private FalseDimFilter()\n+  {\n+  }\n+\n+  @Override\n+  public DimFilter optimize()\n+  {\n+    return this;\n+  }\n+\n+  @Override\n+  public Filter toFilter()\n+  {\n+    return FalseFilter.instance();\n+  }\n+\n+  @Nullable\n+  @Override\n+  public RangeSet<String> getDimensionRangeSet(String dimension)\n+  {\n+    return ImmutableRangeSet.of();\n+  }\n+\n+  @Override\n+  public Set<String> getRequiredColumns()\n+  {\n+    return Collections.emptySet();\n+  }\n+\n+  @Override\n+  public byte[] getCacheKey()\n+  {\n+    return new CacheKeyBuilder(DimFilterUtils.FALSE_CACHE_ID).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM0NDQ5Mg==", "bodyText": "Good point. Will add it.", "url": "https://github.com/apache/druid/pull/9800#discussion_r420344492", "createdAt": "2020-05-05T19:12:02Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/filter/FalseDimFilter.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.filter;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.google.common.collect.ImmutableRangeSet;\n+import com.google.common.collect.RangeSet;\n+import org.apache.druid.query.cache.CacheKeyBuilder;\n+import org.apache.druid.segment.filter.FalseFilter;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+public class FalseDimFilter implements DimFilter\n+{\n+  private static final FalseDimFilter INSTANCE = new FalseDimFilter();\n+\n+  @JsonCreator\n+  public static FalseDimFilter instance()\n+  {\n+    return INSTANCE;\n+  }\n+\n+  private FalseDimFilter()\n+  {\n+  }\n+\n+  @Override\n+  public DimFilter optimize()\n+  {\n+    return this;\n+  }\n+\n+  @Override\n+  public Filter toFilter()\n+  {\n+    return FalseFilter.instance();\n+  }\n+\n+  @Nullable\n+  @Override\n+  public RangeSet<String> getDimensionRangeSet(String dimension)\n+  {\n+    return ImmutableRangeSet.of();\n+  }\n+\n+  @Override\n+  public Set<String> getRequiredColumns()\n+  {\n+    return Collections.emptySet();\n+  }\n+\n+  @Override\n+  public byte[] getCacheKey()\n+  {\n+    return new CacheKeyBuilder(DimFilterUtils.FALSE_CACHE_ID).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxMTcwNQ=="}, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwNTQ4Nw==", "bodyText": "Done.", "url": "https://github.com/apache/druid/pull/9800#discussion_r421005487", "createdAt": "2020-05-06T18:32:47Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/filter/FalseDimFilter.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.filter;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.google.common.collect.ImmutableRangeSet;\n+import com.google.common.collect.RangeSet;\n+import org.apache.druid.query.cache.CacheKeyBuilder;\n+import org.apache.druid.segment.filter.FalseFilter;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+public class FalseDimFilter implements DimFilter\n+{\n+  private static final FalseDimFilter INSTANCE = new FalseDimFilter();\n+\n+  @JsonCreator\n+  public static FalseDimFilter instance()\n+  {\n+    return INSTANCE;\n+  }\n+\n+  private FalseDimFilter()\n+  {\n+  }\n+\n+  @Override\n+  public DimFilter optimize()\n+  {\n+    return this;\n+  }\n+\n+  @Override\n+  public Filter toFilter()\n+  {\n+    return FalseFilter.instance();\n+  }\n+\n+  @Nullable\n+  @Override\n+  public RangeSet<String> getDimensionRangeSet(String dimension)\n+  {\n+    return ImmutableRangeSet.of();\n+  }\n+\n+  @Override\n+  public Set<String> getRequiredColumns()\n+  {\n+    return Collections.emptySet();\n+  }\n+\n+  @Override\n+  public byte[] getCacheKey()\n+  {\n+    return new CacheKeyBuilder(DimFilterUtils.FALSE_CACHE_ID).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxMTcwNQ=="}, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjQzOTYwOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/filter/FalseDimFilter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoxNzoxMVrOGQ11gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODozMjo0OVrOGRgI1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxMjQ0OA==", "bodyText": "EqualsVerifierTest for this?", "url": "https://github.com/apache/druid/pull/9800#discussion_r420312448", "createdAt": "2020-05-05T18:17:11Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/FalseDimFilter.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.filter;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.google.common.collect.ImmutableRangeSet;\n+import com.google.common.collect.RangeSet;\n+import org.apache.druid.query.cache.CacheKeyBuilder;\n+import org.apache.druid.segment.filter.FalseFilter;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+public class FalseDimFilter implements DimFilter\n+{\n+  private static final FalseDimFilter INSTANCE = new FalseDimFilter();\n+\n+  @JsonCreator\n+  public static FalseDimFilter instance()\n+  {\n+    return INSTANCE;\n+  }\n+\n+  private FalseDimFilter()\n+  {\n+  }\n+\n+  @Override\n+  public DimFilter optimize()\n+  {\n+    return this;\n+  }\n+\n+  @Override\n+  public Filter toFilter()\n+  {\n+    return FalseFilter.instance();\n+  }\n+\n+  @Nullable\n+  @Override\n+  public RangeSet<String> getDimensionRangeSet(String dimension)\n+  {\n+    return ImmutableRangeSet.of();\n+  }\n+\n+  @Override\n+  public Set<String> getRequiredColumns()\n+  {\n+    return Collections.emptySet();\n+  }\n+\n+  @Override\n+  public byte[] getCacheKey()\n+  {\n+    return new CacheKeyBuilder(DimFilterUtils.FALSE_CACHE_ID).build();\n+  }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    return DimFilterUtils.FALSE_CACHE_ID;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    return o == this;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM0NDU1NA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/druid/pull/9800#discussion_r420344554", "createdAt": "2020-05-05T19:12:08Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/filter/FalseDimFilter.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.filter;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.google.common.collect.ImmutableRangeSet;\n+import com.google.common.collect.RangeSet;\n+import org.apache.druid.query.cache.CacheKeyBuilder;\n+import org.apache.druid.segment.filter.FalseFilter;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+public class FalseDimFilter implements DimFilter\n+{\n+  private static final FalseDimFilter INSTANCE = new FalseDimFilter();\n+\n+  @JsonCreator\n+  public static FalseDimFilter instance()\n+  {\n+    return INSTANCE;\n+  }\n+\n+  private FalseDimFilter()\n+  {\n+  }\n+\n+  @Override\n+  public DimFilter optimize()\n+  {\n+    return this;\n+  }\n+\n+  @Override\n+  public Filter toFilter()\n+  {\n+    return FalseFilter.instance();\n+  }\n+\n+  @Nullable\n+  @Override\n+  public RangeSet<String> getDimensionRangeSet(String dimension)\n+  {\n+    return ImmutableRangeSet.of();\n+  }\n+\n+  @Override\n+  public Set<String> getRequiredColumns()\n+  {\n+    return Collections.emptySet();\n+  }\n+\n+  @Override\n+  public byte[] getCacheKey()\n+  {\n+    return new CacheKeyBuilder(DimFilterUtils.FALSE_CACHE_ID).build();\n+  }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    return DimFilterUtils.FALSE_CACHE_ID;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    return o == this;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxMjQ0OA=="}, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwNTUyNA==", "bodyText": "Done.", "url": "https://github.com/apache/druid/pull/9800#discussion_r421005524", "createdAt": "2020-05-06T18:32:49Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/filter/FalseDimFilter.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.filter;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.google.common.collect.ImmutableRangeSet;\n+import com.google.common.collect.RangeSet;\n+import org.apache.druid.query.cache.CacheKeyBuilder;\n+import org.apache.druid.segment.filter.FalseFilter;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+public class FalseDimFilter implements DimFilter\n+{\n+  private static final FalseDimFilter INSTANCE = new FalseDimFilter();\n+\n+  @JsonCreator\n+  public static FalseDimFilter instance()\n+  {\n+    return INSTANCE;\n+  }\n+\n+  private FalseDimFilter()\n+  {\n+  }\n+\n+  @Override\n+  public DimFilter optimize()\n+  {\n+    return this;\n+  }\n+\n+  @Override\n+  public Filter toFilter()\n+  {\n+    return FalseFilter.instance();\n+  }\n+\n+  @Nullable\n+  @Override\n+  public RangeSet<String> getDimensionRangeSet(String dimension)\n+  {\n+    return ImmutableRangeSet.of();\n+  }\n+\n+  @Override\n+  public Set<String> getRequiredColumns()\n+  {\n+    return Collections.emptySet();\n+  }\n+\n+  @Override\n+  public byte[] getCacheKey()\n+  {\n+    return new CacheKeyBuilder(DimFilterUtils.FALSE_CACHE_ID).build();\n+  }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    return DimFilterUtils.FALSE_CACHE_ID;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    return o == this;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxMjQ0OA=="}, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjQ4MzI0OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoyODo0NVrOGQ2Qng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODozMjo1M1rOGRgI9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxOTM5MA==", "bodyText": "Can we pass in a Set<String> instead of Collection<String> so jackson can do the de-dupe for us?", "url": "https://github.com/apache/druid/pull/9800#discussion_r420319390", "createdAt": "2020-05-05T18:28:45Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -73,9 +77,14 @@\n   private final Supplier<DruidFloatPredicate> floatPredicateSupplier;\n   private final Supplier<DruidDoublePredicate> doublePredicateSupplier;\n \n+  @JsonIgnore\n+  private byte[] cacheKey;\n+\n   @JsonCreator\n   public InDimFilter(\n       @JsonProperty(\"dimension\") String dimension,\n+      // This 'values' collection instance can be reused if possible to avoid copying a big collection.\n+      // Callers should _not_ modify the collection after it is passed to this constructor.\n       @JsonProperty(\"values\") Collection<String> values,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM0NTIyNQ==", "bodyText": "To be honest, I was lazy and haven't checked how many callers call this constructor before. It seems small enough, I guess I can.", "url": "https://github.com/apache/druid/pull/9800#discussion_r420345225", "createdAt": "2020-05-05T19:13:18Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -73,9 +77,14 @@\n   private final Supplier<DruidFloatPredicate> floatPredicateSupplier;\n   private final Supplier<DruidDoublePredicate> doublePredicateSupplier;\n \n+  @JsonIgnore\n+  private byte[] cacheKey;\n+\n   @JsonCreator\n   public InDimFilter(\n       @JsonProperty(\"dimension\") String dimension,\n+      // This 'values' collection instance can be reused if possible to avoid copying a big collection.\n+      // Callers should _not_ modify the collection after it is passed to this constructor.\n       @JsonProperty(\"values\") Collection<String> values,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxOTM5MA=="}, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwNTU1OQ==", "bodyText": "Done.", "url": "https://github.com/apache/druid/pull/9800#discussion_r421005559", "createdAt": "2020-05-06T18:32:53Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -73,9 +77,14 @@\n   private final Supplier<DruidFloatPredicate> floatPredicateSupplier;\n   private final Supplier<DruidDoublePredicate> doublePredicateSupplier;\n \n+  @JsonIgnore\n+  private byte[] cacheKey;\n+\n   @JsonCreator\n   public InDimFilter(\n       @JsonProperty(\"dimension\") String dimension,\n+      // This 'values' collection instance can be reused if possible to avoid copying a big collection.\n+      // Callers should _not_ modify the collection after it is passed to this constructor.\n       @JsonProperty(\"values\") Collection<String> values,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxOTM5MA=="}, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjUzNTY3OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODo0MzowNlrOGQ2yBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODozMjo1OFrOGRgJLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMyNzk0MQ==", "bodyText": "Does this negate your comment on line 96?\nWe'd be copying all the values here to a list so that we can sort the list.", "url": "https://github.com/apache/druid/pull/9800#discussion_r420327941", "createdAt": "2020-05-05T18:43:06Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -132,31 +145,40 @@ public FilterTuning getFilterTuning()\n   @Override\n   public byte[] getCacheKey()\n   {\n-    boolean hasNull = false;\n-    for (String value : values) {\n-      if (value == null) {\n-        hasNull = true;\n-        break;\n+    if (cacheKey == null) {\n+      final List<String> sortedValues = new ArrayList<>(values);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzOTkzMA==", "bodyText": "This method is not called if populateCache = false and useCache = false. Will add some comments about it.", "url": "https://github.com/apache/druid/pull/9800#discussion_r420339930", "createdAt": "2020-05-05T19:03:59Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -132,31 +145,40 @@ public FilterTuning getFilterTuning()\n   @Override\n   public byte[] getCacheKey()\n   {\n-    boolean hasNull = false;\n-    for (String value : values) {\n-      if (value == null) {\n-        hasNull = true;\n-        break;\n+    if (cacheKey == null) {\n+      final List<String> sortedValues = new ArrayList<>(values);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMyNzk0MQ=="}, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwNTYxMg==", "bodyText": "Added.", "url": "https://github.com/apache/druid/pull/9800#discussion_r421005612", "createdAt": "2020-05-06T18:32:58Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -132,31 +145,40 @@ public FilterTuning getFilterTuning()\n   @Override\n   public byte[] getCacheKey()\n   {\n-    boolean hasNull = false;\n-    for (String value : values) {\n-      if (value == null) {\n-        hasNull = true;\n-        break;\n+    if (cacheKey == null) {\n+      final List<String> sortedValues = new ArrayList<>(values);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMyNzk0MQ=="}, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjU0MzI5OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODo0NTowMVrOGQ220w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOTowNDo1MFrOGQ3jBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMyOTE3MQ==", "bodyText": "Can multiple threads call getCacheKey at the same time?\nWhat happens if 2 threads try to build sortedValues?", "url": "https://github.com/apache/druid/pull/9800#discussion_r420329171", "createdAt": "2020-05-05T18:45:01Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -132,31 +145,40 @@ public FilterTuning getFilterTuning()\n   @Override\n   public byte[] getCacheKey()\n   {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM0MDQ4NQ==", "bodyText": "All DimFilters are not thread-safe. It should be never called by two threads at the same time.", "url": "https://github.com/apache/druid/pull/9800#discussion_r420340485", "createdAt": "2020-05-05T19:04:50Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -132,31 +145,40 @@ public FilterTuning getFilterTuning()\n   @Override\n   public byte[] getCacheKey()\n   {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMyOTE3MQ=="}, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjU1ODk3OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODo0OToxOFrOGQ3Azw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODozMzo1MFrOGRgLNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzMTcyNw==", "bodyText": "Why did you choose a sha256 hasher? Is it fast to construct a new hasher? or to perform a sha256 hash?\nI wrote a test here which fails to produce the same cacheKey even though the values are sorted\n@Test\n  public void testCacheKey()\n  {\n    final InDimFilter dimFilter1 = new InDimFilter(\"dim\", ImmutableList.of(\"v1\", \"v2\", \"v3\"), null);\n    final InDimFilter dimFilter2 = new InDimFilter(\"dim\", ImmutableList.of(\"v3\", \"v2\", \"v1\"), null);\n    Assert.assertEquals(dimFilter1.getCacheKey(), dimFilter2.getCacheKey());\n  }", "url": "https://github.com/apache/druid/pull/9800#discussion_r420331727", "createdAt": "2020-05-05T18:49:18Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -132,31 +145,40 @@ public FilterTuning getFilterTuning()\n   @Override\n   public byte[] getCacheKey()\n   {\n-    boolean hasNull = false;\n-    for (String value : values) {\n-      if (value == null) {\n-        hasNull = true;\n-        break;\n+    if (cacheKey == null) {\n+      final List<String> sortedValues = new ArrayList<>(values);\n+      sortedValues.sort(Comparator.nullsFirst(Ordering.natural()));\n+      final Hasher hasher = Hashing.sha256().newHasher();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM0MTk2OA==", "bodyText": "Sorry about the false alarm. I just realized it's failing because we're comparing 2 byte arrays, but they are in fact equivalent\n  @Test\n  public void testCacheKey()\n  {\n    final InDimFilter dimFilter1 = new InDimFilter(\"dim\", ImmutableList.of(\"v1\", \"v2\", \"v3\"), null);\n    final InDimFilter dimFilter2 = new InDimFilter(\"dim\", ImmutableList.of(\"v3\", \"v2\", \"v1\"), null);\n    byte[] cacheKey1 = dimFilter1.getCacheKey();\n    byte[] cacheKey2 = dimFilter2.getCacheKey();\n    Assert.assertEquals(Arrays.toString(cacheKey1), Arrays.toString(cacheKey2));\n  }", "url": "https://github.com/apache/druid/pull/9800#discussion_r420341968", "createdAt": "2020-05-05T19:07:27Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -132,31 +145,40 @@ public FilterTuning getFilterTuning()\n   @Override\n   public byte[] getCacheKey()\n   {\n-    boolean hasNull = false;\n-    for (String value : values) {\n-      if (value == null) {\n-        hasNull = true;\n-        break;\n+    if (cacheKey == null) {\n+      final List<String> sortedValues = new ArrayList<>(values);\n+      sortedValues.sort(Comparator.nullsFirst(Ordering.natural()));\n+      final Hasher hasher = Hashing.sha256().newHasher();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzMTcyNw=="}, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM0Mjc0MA==", "bodyText": "I believe your test will pass if you use Assert.assertArrayEquals() (getCacheKey() returns a byte array).\n\nWhy did you choose a sha256 hasher? Is it fast to construct a new hasher? or to perform a sha256 hash?\n\nI chose sha256 since it is long enough to distinguish different values sets even though I haven't really tested. I will do some tests.", "url": "https://github.com/apache/druid/pull/9800#discussion_r420342740", "createdAt": "2020-05-05T19:08:50Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -132,31 +145,40 @@ public FilterTuning getFilterTuning()\n   @Override\n   public byte[] getCacheKey()\n   {\n-    boolean hasNull = false;\n-    for (String value : values) {\n-      if (value == null) {\n-        hasNull = true;\n-        break;\n+    if (cacheKey == null) {\n+      final List<String> sortedValues = new ArrayList<>(values);\n+      sortedValues.sort(Comparator.nullsFirst(Ordering.natural()));\n+      final Hasher hasher = Hashing.sha256().newHasher();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzMTcyNw=="}, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM0NTk1MA==", "bodyText": "Oh sorry, didn't see your last comment. \ud83d\udc4d", "url": "https://github.com/apache/druid/pull/9800#discussion_r420345950", "createdAt": "2020-05-05T19:14:37Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -132,31 +145,40 @@ public FilterTuning getFilterTuning()\n   @Override\n   public byte[] getCacheKey()\n   {\n-    boolean hasNull = false;\n-    for (String value : values) {\n-      if (value == null) {\n-        hasNull = true;\n-        break;\n+    if (cacheKey == null) {\n+      final List<String> sortedValues = new ArrayList<>(values);\n+      sortedValues.sort(Comparator.nullsFirst(Ordering.natural()));\n+      final Hasher hasher = Hashing.sha256().newHasher();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzMTcyNw=="}, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM2MDg5OA==", "bodyText": "I chose sha256 since it is long enough to distinguish different values sets even though I haven't really tested. I will do some tests.\n\n\ud83d\udc4d\nI think a simpler solution would be to revert back to the previous way of building a cacheKey, but use .appendStringsIgnoringOrder() instead of .appendStrings() This way the sort is done once for the list and we don't add any new memory overhead from the current implementation.\nMaybe consider creating a new utility function to the CacheKeyBuilder that sorts the list and writes whether or not any nulls existed in the list. This way we can do one pass over the list of values to build the cacheKey, but even at 10k entries in the list, this might be a micro optimization.", "url": "https://github.com/apache/druid/pull/9800#discussion_r420360898", "createdAt": "2020-05-05T19:41:51Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -132,31 +145,40 @@ public FilterTuning getFilterTuning()\n   @Override\n   public byte[] getCacheKey()\n   {\n-    boolean hasNull = false;\n-    for (String value : values) {\n-      if (value == null) {\n-        hasNull = true;\n-        break;\n+    if (cacheKey == null) {\n+      final List<String> sortedValues = new ArrayList<>(values);\n+      sortedValues.sort(Comparator.nullsFirst(Ordering.natural()));\n+      final Hasher hasher = Hashing.sha256().newHasher();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzMTcyNw=="}, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwNjEzMw==", "bodyText": "The issue with storing all values in the cacheKey is that the cache key can become huge as the size of values grows which can result in pollution in the cache.\nRegarding using SHA-256, I believe academical research is more trustable than my testing. According to the probability table, the required number of hashed elements such that probability of at least one hash collision >= 10^\u221218 is 4.8\u00d710^29 under assumption that the hash function is perfect. This is negligible when it comes to practice even though the SHA-256 hash function is not proven to be perfect.", "url": "https://github.com/apache/druid/pull/9800#discussion_r421006133", "createdAt": "2020-05-06T18:33:50Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -132,31 +145,40 @@ public FilterTuning getFilterTuning()\n   @Override\n   public byte[] getCacheKey()\n   {\n-    boolean hasNull = false;\n-    for (String value : values) {\n-      if (value == null) {\n-        hasNull = true;\n-        break;\n+    if (cacheKey == null) {\n+      final List<String> sortedValues = new ArrayList<>(values);\n+      sortedValues.sort(Comparator.nullsFirst(Ordering.natural()));\n+      final Hasher hasher = Hashing.sha256().newHasher();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzMTcyNw=="}, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjc2MjUwOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/filter/NotDimFilter.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOTo0ODozMlrOGQ5BCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMDoyMzozOVrOGRkBTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM2NDU1NA==", "bodyText": "Why not use the recommended resolution\nFalseDimFilter.instance().equals(optimized)", "url": "https://github.com/apache/druid/pull/9800#discussion_r420364554", "createdAt": "2020-05-05T19:48:32Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/NotDimFilter.java", "diffHunk": "@@ -60,10 +60,17 @@ public DimFilter getField()\n     return ByteBuffer.allocate(1 + subKey.length).put(DimFilterUtils.NOT_CACHE_ID).put(subKey).array();\n   }\n \n+  @SuppressWarnings(\"ObjectEquality\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwNjY0MQ==", "bodyText": "Why is it better?", "url": "https://github.com/apache/druid/pull/9800#discussion_r421006641", "createdAt": "2020-05-06T18:34:30Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/filter/NotDimFilter.java", "diffHunk": "@@ -60,10 +60,17 @@ public DimFilter getField()\n     return ByteBuffer.allocate(1 + subKey.length).put(DimFilterUtils.NOT_CACHE_ID).put(subKey).array();\n   }\n \n+  @SuppressWarnings(\"ObjectEquality\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM2NDU1NA=="}, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxMTU1NA==", "bodyText": "This suppression is only correct as long as TrueDimFilter and FalseDimFilter are singletons. If in the future that assumption changes, this will break, and nothing will notify us of this incorrect behavior if we don't catch it in code review. That's usually why I try to limit any suppressions, because it takes a lot of reasoning power to justify why the suppression was made.\nAnyways, I'm ok with this as currently written.", "url": "https://github.com/apache/druid/pull/9800#discussion_r421011554", "createdAt": "2020-05-06T18:42:39Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/NotDimFilter.java", "diffHunk": "@@ -60,10 +60,17 @@ public DimFilter getField()\n     return ByteBuffer.allocate(1 + subKey.length).put(DimFilterUtils.NOT_CACHE_ID).put(subKey).array();\n   }\n \n+  @SuppressWarnings(\"ObjectEquality\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM2NDU1NA=="}, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA2OTEzMw==", "bodyText": "Thanks. I think this is fine since I don't see any reason to change them to be not singletons in the near future. Also, we should be able to notice that this method is not valid anymore if the assumption did change because we would remove instance() methods and therefore modify this method.", "url": "https://github.com/apache/druid/pull/9800#discussion_r421069133", "createdAt": "2020-05-06T20:23:39Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/filter/NotDimFilter.java", "diffHunk": "@@ -60,10 +60,17 @@ public DimFilter getField()\n     return ByteBuffer.allocate(1 + subKey.length).put(DimFilterUtils.NOT_CACHE_ID).put(subKey).array();\n   }\n \n+  @SuppressWarnings(\"ObjectEquality\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM2NDU1NA=="}, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjk2NjMyOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/filter/vector/FalseVectorMatcher.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMDo0OToxNVrOGQ6_9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo0MzoyMFrOGRgh-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM5NzA0Ng==", "bodyText": "Should the max size / current size of these be 1 since VectorMatch.allFalse() is an empty array?\nNot really sure how the vector sizes are used", "url": "https://github.com/apache/druid/pull/9800#discussion_r420397046", "createdAt": "2020-05-05T20:49:15Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/vector/FalseVectorMatcher.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.filter.vector;\n+\n+import org.apache.druid.segment.vector.VectorSizeInspector;\n+\n+public class FalseVectorMatcher implements VectorValueMatcher\n+{\n+  private final VectorSizeInspector vectorSizeInspector;\n+\n+  public FalseVectorMatcher(VectorSizeInspector vectorSizeInspector)\n+  {\n+    this.vectorSizeInspector = vectorSizeInspector;\n+  }\n+\n+  @Override\n+  public ReadableVectorMatch match(ReadableVectorMatch mask)\n+  {\n+    return VectorMatch.allFalse();\n+  }\n+\n+  @Override\n+  public int getMaxVectorSize()\n+  {\n+    return vectorSizeInspector.getMaxVectorSize();\n+  }\n+\n+  @Override\n+  public int getCurrentVectorSize()\n+  {\n+    return vectorSizeInspector.getCurrentVectorSize();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwNjI5OA==", "bodyText": "The max vector size is the maximum number of values in a column you can read per iteration. The current vector size can be different depending on the remaining number of values to read.\nThe max and current vector sizes are irrelevant to the size of backing array in VectorMatcher, although the array usually has the same size with the max vector size. The allFalse vectorMatch has an empty array because it always returns false no matter what value you evaluate in a vector.", "url": "https://github.com/apache/druid/pull/9800#discussion_r421006298", "createdAt": "2020-05-06T18:33:59Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/filter/vector/FalseVectorMatcher.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.filter.vector;\n+\n+import org.apache.druid.segment.vector.VectorSizeInspector;\n+\n+public class FalseVectorMatcher implements VectorValueMatcher\n+{\n+  private final VectorSizeInspector vectorSizeInspector;\n+\n+  public FalseVectorMatcher(VectorSizeInspector vectorSizeInspector)\n+  {\n+    this.vectorSizeInspector = vectorSizeInspector;\n+  }\n+\n+  @Override\n+  public ReadableVectorMatch match(ReadableVectorMatch mask)\n+  {\n+    return VectorMatch.allFalse();\n+  }\n+\n+  @Override\n+  public int getMaxVectorSize()\n+  {\n+    return vectorSizeInspector.getMaxVectorSize();\n+  }\n+\n+  @Override\n+  public int getCurrentVectorSize()\n+  {\n+    return vectorSizeInspector.getCurrentVectorSize();\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM5NzA0Ng=="}, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxMTk2MQ==", "bodyText": "ah cool. Thanks for the explanation!", "url": "https://github.com/apache/druid/pull/9800#discussion_r421011961", "createdAt": "2020-05-06T18:43:20Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/vector/FalseVectorMatcher.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.filter.vector;\n+\n+import org.apache.druid.segment.vector.VectorSizeInspector;\n+\n+public class FalseVectorMatcher implements VectorValueMatcher\n+{\n+  private final VectorSizeInspector vectorSizeInspector;\n+\n+  public FalseVectorMatcher(VectorSizeInspector vectorSizeInspector)\n+  {\n+    this.vectorSizeInspector = vectorSizeInspector;\n+  }\n+\n+  @Override\n+  public ReadableVectorMatch match(ReadableVectorMatch mask)\n+  {\n+    return VectorMatch.allFalse();\n+  }\n+\n+  @Override\n+  public int getMaxVectorSize()\n+  {\n+    return vectorSizeInspector.getMaxVectorSize();\n+  }\n+\n+  @Override\n+  public int getCurrentVectorSize()\n+  {\n+    return vectorSizeInspector.getCurrentVectorSize();\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM5NzA0Ng=="}, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2406, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}