{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3MDk2NDky", "number": 10271, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzoxNToxMVrOEYDCrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzo0MzoyOFrOEYDysw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjUxMTE5OnYy", "diffSide": "RIGHT", "path": "web-console/src/components/json-input/json-input.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzoxNToxMVrOHAK-6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNjoyMTowNVrOHAS4mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk0MTk5Mg==", "bodyText": "What's not the best about it and why is it good enough?", "url": "https://github.com/apache/druid/pull/10271#discussion_r469941992", "createdAt": "2020-08-13T13:15:11Z", "author": {"login": "gianm"}, "path": "web-console/src/components/json-input/json-input.tsx", "diffHunk": "@@ -37,6 +38,17 @@ function stringifyJson(item: any): string {\n   }\n }\n \n+// Not the best way to check for deep equality but good enough for what we need", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eff2956d828290e8ec02f6b8fb08569a8c7fdf91"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA3MTQ1MA==", "bodyText": "Here is an in depth look at it https://www.mattzeunert.com/2016/01/28/javascript-deep-equal.html\nTL;DR the method implemented here would not work for this case for example:\nJSON.stringify({a: 1, b: 2}) !== JSON.stringify({b: 2, a: 1})\nBut that is ok because in practice the object output from the JSON input will be the same it later gets back. And if that check fails the worst that will happen is that the cursor would jump. It is also hard to find a decent object deep-equals library that does not come with a bunch of dependencies (as it tries to do a 100% thorough job) and a lot of file size.", "url": "https://github.com/apache/druid/pull/10271#discussion_r470071450", "createdAt": "2020-08-13T16:21:05Z", "author": {"login": "vogievetsky"}, "path": "web-console/src/components/json-input/json-input.tsx", "diffHunk": "@@ -37,6 +38,17 @@ function stringifyJson(item: any): string {\n   }\n }\n \n+// Not the best way to check for deep equality but good enough for what we need", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk0MTk5Mg=="}, "originalCommit": {"oid": "eff2956d828290e8ec02f6b8fb08569a8c7fdf91"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjUxNDk5OnYy", "diffSide": "LEFT", "path": "web-console/src/components/auto-form/__snapshots__/auto-form.spec.tsx.snap", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzoxNjowOFrOHALBWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNjoyODo0OVrOHATLfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk0MjYxNw==", "bodyText": "My understanding is that these __snapshot__ files are automatically generated for testing purposes. @vogievetsky how would you suggest reviewing them?", "url": "https://github.com/apache/druid/pull/10271#discussion_r469942617", "createdAt": "2020-08-13T13:16:08Z", "author": {"login": "gianm"}, "path": "web-console/src/components/auto-form/__snapshots__/auto-form.spec.tsx.snap", "diffHunk": "@@ -2,521 +2,135 @@\n \n exports[`auto-form snapshot matches snapshot 1`] = `\n <div\n-  class=\"auto-form\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eff2956d828290e8ec02f6b8fb08569a8c7fdf91"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA3NjI4NA==", "bodyText": "That is correct.\nHere is how I review them:\nThe snapshot change is either tiny or structural (huge) there is no in between.\n\nIf the change is tiny:\n  Review the changed lines and understand what caused that change. Was a class or some other property added / removed? Does it make sense?\n\nIf the change is structural:\n  Do not review the individual lines, only review which snapshot files changed. Does it make sense that the snapshot of this component changed so drastically?\n\nIn this case all the changes are structural. I have wrapped the JSON Input in an extra div (for good reason) which causes all the snapshots of its inner workings to be indented by an extra level. This causes huge diffs. Seeing as I will have huge changed in these snapshots anyway I changed them to be shallow rendered (which they should have been from the start - but better late than never). This explains the structural nature of the change. You are free to comment on whether or not you think it is a good idea. (see below)", "url": "https://github.com/apache/druid/pull/10271#discussion_r470076284", "createdAt": "2020-08-13T16:28:49Z", "author": {"login": "vogievetsky"}, "path": "web-console/src/components/auto-form/__snapshots__/auto-form.spec.tsx.snap", "diffHunk": "@@ -2,521 +2,135 @@\n \n exports[`auto-form snapshot matches snapshot 1`] = `\n <div\n-  class=\"auto-form\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk0MjYxNw=="}, "originalCommit": {"oid": "eff2956d828290e8ec02f6b8fb08569a8c7fdf91"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjUxNzYzOnYy", "diffSide": "RIGHT", "path": "web-console/src/components/auto-form/auto-form.spec.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzoxNjo1MFrOHALDDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNjozMToxN1rOHATRoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk0MzA1Mw==", "bodyText": "Is this also test code?", "url": "https://github.com/apache/druid/pull/10271#discussion_r469943053", "createdAt": "2020-08-13T13:16:50Z", "author": {"login": "gianm"}, "path": "web-console/src/components/auto-form/auto-form.spec.tsx", "diffHunk": "@@ -16,14 +16,14 @@\n  * limitations under the License.\n  */\n \n-import { render } from '@testing-library/react';\n+import { shallow } from 'enzyme';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eff2956d828290e8ec02f6b8fb08569a8c7fdf91"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA3Nzg1Nw==", "bodyText": "Yup, this changes the virtual rendered from a DOM renderer import { render } from '@testing-library/react'; to a shallow react component level renderer import { shallow } from 'enzyme'; for the snapshots.\nThis change makes sense because the auto-form does not really make any of its own cool DOM it only assembles other components so testing their deep structure should not be its concern - otherwise it will have structural changes in the snapshots every-time someone changes the JSON Input", "url": "https://github.com/apache/druid/pull/10271#discussion_r470077857", "createdAt": "2020-08-13T16:31:17Z", "author": {"login": "vogievetsky"}, "path": "web-console/src/components/auto-form/auto-form.spec.tsx", "diffHunk": "@@ -16,14 +16,14 @@\n  * limitations under the License.\n  */\n \n-import { render } from '@testing-library/react';\n+import { shallow } from 'enzyme';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk0MzA1Mw=="}, "originalCommit": {"oid": "eff2956d828290e8ec02f6b8fb08569a8c7fdf91"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjYzNDExOnYy", "diffSide": "RIGHT", "path": "web-console/src/components/json-input/json-input.tsx", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzo0MzoyOFrOHAMJcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNjo0ODo0N1rOHAT6Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk2MTA3Mw==", "bodyText": "\ud83d\ude31", "url": "https://github.com/apache/druid/pull/10271#discussion_r469961073", "createdAt": "2020-08-13T13:43:28Z", "author": {"login": "gianm"}, "path": "web-console/src/components/json-input/json-input.tsx", "diffHunk": "@@ -48,52 +60,93 @@ interface JsonInputProps {\n \n export const JsonInput = React.memo(function JsonInput(props: JsonInputProps) {\n   const { onChange, placeholder, focus, width, height, value } = props;\n-  const stringifiedValue = stringifyJson(value);\n-  const [stringValue, setStringValue] = useState(stringifiedValue);\n-  const [blurred, setBlurred] = useState(false);\n-\n-  let parsedValue: any;\n-  try {\n-    parsedValue = parseHjson(stringValue);\n-  } catch {}\n-  if (typeof parsedValue !== 'object') parsedValue = undefined;\n+  const [internalValue, setInternalValue] = useState<InternalValue>(() => ({\n+    value,\n+    stringified: stringifyJson(value),\n+  }));\n+  const [showErrorIfNeeded, setShowErrorIfNeeded] = useState(false);\n+  const aceEditor = useRef<Editor | undefined>();\n \n-  if (parsedValue !== undefined && stringifyJson(parsedValue) !== stringifiedValue) {\n-    setStringValue(stringifiedValue);\n-  }\n+  useEffect(() => {\n+    if (!deepEqual(value, internalValue.value)) {\n+      setInternalValue({\n+        value,\n+        stringified: stringifyJson(value),\n+      });\n+    }\n+  }, [value]);\n \n+  const internalValueError = internalValue.error;\n   return (\n-    <AceEditor\n-      className={classNames('json-input', { invalid: parsedValue === undefined && blurred })}\n-      mode=\"hjson\"\n-      theme=\"solarized_dark\"\n-      onChange={(inputJson: string) => {\n-        try {\n-          const value = parseHjson(inputJson);\n-          onChange(value);\n-        } catch {}\n-        setStringValue(inputJson);\n-      }}\n-      onFocus={() => setBlurred(false)}\n-      onBlur={() => setBlurred(true)}\n-      focus={focus}\n-      fontSize={12}\n-      width={width || '100%'}\n-      height={height || '8vh'}\n-      showPrintMargin={false}\n-      showGutter={false}\n-      value={stringValue}\n-      placeholder={placeholder}\n-      editorProps={{\n-        $blockScrolling: Infinity,\n-      }}\n-      setOptions={{\n-        enableBasicAutocompletion: false,\n-        enableLiveAutocompletion: false,\n-        showLineNumbers: false,\n-        tabSize: 2,\n-      }}\n-      style={{}}\n-    />\n+    <div className={classNames('json-input', { invalid: showErrorIfNeeded && internalValueError })}>\n+      <AceEditor\n+        mode=\"hjson\"\n+        theme=\"solarized_dark\"\n+        onChange={(inputJson: string) => {\n+          let value: any;\n+          let error: Error | undefined;\n+          try {\n+            value = parseHjson(inputJson);\n+          } catch (e) {\n+            error = e;\n+          }\n+\n+          setInternalValue({\n+            value,\n+            error,\n+            stringified: inputJson,\n+          });\n+\n+          if (!error) {\n+            onChange(value);\n+          }\n+\n+          if (showErrorIfNeeded) {\n+            setShowErrorIfNeeded(false);\n+          }\n+        }}\n+        onBlur={() => setShowErrorIfNeeded(true)}\n+        focus={focus}\n+        fontSize={12}\n+        width={width || '100%'}\n+        height={height || '8vh'}\n+        showPrintMargin={false}\n+        showGutter={false}\n+        value={internalValue.stringified}\n+        placeholder={placeholder}\n+        editorProps={{\n+          $blockScrolling: Infinity,\n+        }}\n+        setOptions={{\n+          enableBasicAutocompletion: false,\n+          enableLiveAutocompletion: false,\n+          showLineNumbers: false,\n+          tabSize: 2,\n+        }}\n+        style={{}}\n+        onLoad={(editor: any) => {\n+          aceEditor.current = editor;\n+        }}\n+      />\n+      {showErrorIfNeeded && internalValueError && (\n+        <div\n+          className=\"json-error\"\n+          onClick={() => {\n+            if (!aceEditor.current || !internalValueError) return;\n+\n+            // Message would be something like:\n+            // `Found '}' where a key name was expected at line 26,7`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eff2956d828290e8ec02f6b8fb08569a8c7fdf91"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk3NjE1Mw==", "bodyText": "I suppose this won't always work; is that ok?", "url": "https://github.com/apache/druid/pull/10271#discussion_r469976153", "createdAt": "2020-08-13T14:04:40Z", "author": {"login": "gianm"}, "path": "web-console/src/components/json-input/json-input.tsx", "diffHunk": "@@ -48,52 +60,93 @@ interface JsonInputProps {\n \n export const JsonInput = React.memo(function JsonInput(props: JsonInputProps) {\n   const { onChange, placeholder, focus, width, height, value } = props;\n-  const stringifiedValue = stringifyJson(value);\n-  const [stringValue, setStringValue] = useState(stringifiedValue);\n-  const [blurred, setBlurred] = useState(false);\n-\n-  let parsedValue: any;\n-  try {\n-    parsedValue = parseHjson(stringValue);\n-  } catch {}\n-  if (typeof parsedValue !== 'object') parsedValue = undefined;\n+  const [internalValue, setInternalValue] = useState<InternalValue>(() => ({\n+    value,\n+    stringified: stringifyJson(value),\n+  }));\n+  const [showErrorIfNeeded, setShowErrorIfNeeded] = useState(false);\n+  const aceEditor = useRef<Editor | undefined>();\n \n-  if (parsedValue !== undefined && stringifyJson(parsedValue) !== stringifiedValue) {\n-    setStringValue(stringifiedValue);\n-  }\n+  useEffect(() => {\n+    if (!deepEqual(value, internalValue.value)) {\n+      setInternalValue({\n+        value,\n+        stringified: stringifyJson(value),\n+      });\n+    }\n+  }, [value]);\n \n+  const internalValueError = internalValue.error;\n   return (\n-    <AceEditor\n-      className={classNames('json-input', { invalid: parsedValue === undefined && blurred })}\n-      mode=\"hjson\"\n-      theme=\"solarized_dark\"\n-      onChange={(inputJson: string) => {\n-        try {\n-          const value = parseHjson(inputJson);\n-          onChange(value);\n-        } catch {}\n-        setStringValue(inputJson);\n-      }}\n-      onFocus={() => setBlurred(false)}\n-      onBlur={() => setBlurred(true)}\n-      focus={focus}\n-      fontSize={12}\n-      width={width || '100%'}\n-      height={height || '8vh'}\n-      showPrintMargin={false}\n-      showGutter={false}\n-      value={stringValue}\n-      placeholder={placeholder}\n-      editorProps={{\n-        $blockScrolling: Infinity,\n-      }}\n-      setOptions={{\n-        enableBasicAutocompletion: false,\n-        enableLiveAutocompletion: false,\n-        showLineNumbers: false,\n-        tabSize: 2,\n-      }}\n-      style={{}}\n-    />\n+    <div className={classNames('json-input', { invalid: showErrorIfNeeded && internalValueError })}>\n+      <AceEditor\n+        mode=\"hjson\"\n+        theme=\"solarized_dark\"\n+        onChange={(inputJson: string) => {\n+          let value: any;\n+          let error: Error | undefined;\n+          try {\n+            value = parseHjson(inputJson);\n+          } catch (e) {\n+            error = e;\n+          }\n+\n+          setInternalValue({\n+            value,\n+            error,\n+            stringified: inputJson,\n+          });\n+\n+          if (!error) {\n+            onChange(value);\n+          }\n+\n+          if (showErrorIfNeeded) {\n+            setShowErrorIfNeeded(false);\n+          }\n+        }}\n+        onBlur={() => setShowErrorIfNeeded(true)}\n+        focus={focus}\n+        fontSize={12}\n+        width={width || '100%'}\n+        height={height || '8vh'}\n+        showPrintMargin={false}\n+        showGutter={false}\n+        value={internalValue.stringified}\n+        placeholder={placeholder}\n+        editorProps={{\n+          $blockScrolling: Infinity,\n+        }}\n+        setOptions={{\n+          enableBasicAutocompletion: false,\n+          enableLiveAutocompletion: false,\n+          showLineNumbers: false,\n+          tabSize: 2,\n+        }}\n+        style={{}}\n+        onLoad={(editor: any) => {\n+          aceEditor.current = editor;\n+        }}\n+      />\n+      {showErrorIfNeeded && internalValueError && (\n+        <div\n+          className=\"json-error\"\n+          onClick={() => {\n+            if (!aceEditor.current || !internalValueError) return;\n+\n+            // Message would be something like:\n+            // `Found '}' where a key name was expected at line 26,7`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk2MTA3Mw=="}, "originalCommit": {"oid": "eff2956d828290e8ec02f6b8fb08569a8c7fdf91"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA4MDU4NA==", "bodyText": "Yeah, it it does not find /line (\\d+),(\\d+)/ it would just not do anything due to the if (!m) return; which is cool I think. But as I write this I realize it would be great to add a test to make sure that if the error format changes in the Hjson library in a future version we catch that - will do.", "url": "https://github.com/apache/druid/pull/10271#discussion_r470080584", "createdAt": "2020-08-13T16:35:47Z", "author": {"login": "vogievetsky"}, "path": "web-console/src/components/json-input/json-input.tsx", "diffHunk": "@@ -48,52 +60,93 @@ interface JsonInputProps {\n \n export const JsonInput = React.memo(function JsonInput(props: JsonInputProps) {\n   const { onChange, placeholder, focus, width, height, value } = props;\n-  const stringifiedValue = stringifyJson(value);\n-  const [stringValue, setStringValue] = useState(stringifiedValue);\n-  const [blurred, setBlurred] = useState(false);\n-\n-  let parsedValue: any;\n-  try {\n-    parsedValue = parseHjson(stringValue);\n-  } catch {}\n-  if (typeof parsedValue !== 'object') parsedValue = undefined;\n+  const [internalValue, setInternalValue] = useState<InternalValue>(() => ({\n+    value,\n+    stringified: stringifyJson(value),\n+  }));\n+  const [showErrorIfNeeded, setShowErrorIfNeeded] = useState(false);\n+  const aceEditor = useRef<Editor | undefined>();\n \n-  if (parsedValue !== undefined && stringifyJson(parsedValue) !== stringifiedValue) {\n-    setStringValue(stringifiedValue);\n-  }\n+  useEffect(() => {\n+    if (!deepEqual(value, internalValue.value)) {\n+      setInternalValue({\n+        value,\n+        stringified: stringifyJson(value),\n+      });\n+    }\n+  }, [value]);\n \n+  const internalValueError = internalValue.error;\n   return (\n-    <AceEditor\n-      className={classNames('json-input', { invalid: parsedValue === undefined && blurred })}\n-      mode=\"hjson\"\n-      theme=\"solarized_dark\"\n-      onChange={(inputJson: string) => {\n-        try {\n-          const value = parseHjson(inputJson);\n-          onChange(value);\n-        } catch {}\n-        setStringValue(inputJson);\n-      }}\n-      onFocus={() => setBlurred(false)}\n-      onBlur={() => setBlurred(true)}\n-      focus={focus}\n-      fontSize={12}\n-      width={width || '100%'}\n-      height={height || '8vh'}\n-      showPrintMargin={false}\n-      showGutter={false}\n-      value={stringValue}\n-      placeholder={placeholder}\n-      editorProps={{\n-        $blockScrolling: Infinity,\n-      }}\n-      setOptions={{\n-        enableBasicAutocompletion: false,\n-        enableLiveAutocompletion: false,\n-        showLineNumbers: false,\n-        tabSize: 2,\n-      }}\n-      style={{}}\n-    />\n+    <div className={classNames('json-input', { invalid: showErrorIfNeeded && internalValueError })}>\n+      <AceEditor\n+        mode=\"hjson\"\n+        theme=\"solarized_dark\"\n+        onChange={(inputJson: string) => {\n+          let value: any;\n+          let error: Error | undefined;\n+          try {\n+            value = parseHjson(inputJson);\n+          } catch (e) {\n+            error = e;\n+          }\n+\n+          setInternalValue({\n+            value,\n+            error,\n+            stringified: inputJson,\n+          });\n+\n+          if (!error) {\n+            onChange(value);\n+          }\n+\n+          if (showErrorIfNeeded) {\n+            setShowErrorIfNeeded(false);\n+          }\n+        }}\n+        onBlur={() => setShowErrorIfNeeded(true)}\n+        focus={focus}\n+        fontSize={12}\n+        width={width || '100%'}\n+        height={height || '8vh'}\n+        showPrintMargin={false}\n+        showGutter={false}\n+        value={internalValue.stringified}\n+        placeholder={placeholder}\n+        editorProps={{\n+          $blockScrolling: Infinity,\n+        }}\n+        setOptions={{\n+          enableBasicAutocompletion: false,\n+          enableLiveAutocompletion: false,\n+          showLineNumbers: false,\n+          tabSize: 2,\n+        }}\n+        style={{}}\n+        onLoad={(editor: any) => {\n+          aceEditor.current = editor;\n+        }}\n+      />\n+      {showErrorIfNeeded && internalValueError && (\n+        <div\n+          className=\"json-error\"\n+          onClick={() => {\n+            if (!aceEditor.current || !internalValueError) return;\n+\n+            // Message would be something like:\n+            // `Found '}' where a key name was expected at line 26,7`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk2MTA3Mw=="}, "originalCommit": {"oid": "eff2956d828290e8ec02f6b8fb08569a8c7fdf91"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA4ODI1OA==", "bodyText": "Done 8eb77e9", "url": "https://github.com/apache/druid/pull/10271#discussion_r470088258", "createdAt": "2020-08-13T16:48:47Z", "author": {"login": "vogievetsky"}, "path": "web-console/src/components/json-input/json-input.tsx", "diffHunk": "@@ -48,52 +60,93 @@ interface JsonInputProps {\n \n export const JsonInput = React.memo(function JsonInput(props: JsonInputProps) {\n   const { onChange, placeholder, focus, width, height, value } = props;\n-  const stringifiedValue = stringifyJson(value);\n-  const [stringValue, setStringValue] = useState(stringifiedValue);\n-  const [blurred, setBlurred] = useState(false);\n-\n-  let parsedValue: any;\n-  try {\n-    parsedValue = parseHjson(stringValue);\n-  } catch {}\n-  if (typeof parsedValue !== 'object') parsedValue = undefined;\n+  const [internalValue, setInternalValue] = useState<InternalValue>(() => ({\n+    value,\n+    stringified: stringifyJson(value),\n+  }));\n+  const [showErrorIfNeeded, setShowErrorIfNeeded] = useState(false);\n+  const aceEditor = useRef<Editor | undefined>();\n \n-  if (parsedValue !== undefined && stringifyJson(parsedValue) !== stringifiedValue) {\n-    setStringValue(stringifiedValue);\n-  }\n+  useEffect(() => {\n+    if (!deepEqual(value, internalValue.value)) {\n+      setInternalValue({\n+        value,\n+        stringified: stringifyJson(value),\n+      });\n+    }\n+  }, [value]);\n \n+  const internalValueError = internalValue.error;\n   return (\n-    <AceEditor\n-      className={classNames('json-input', { invalid: parsedValue === undefined && blurred })}\n-      mode=\"hjson\"\n-      theme=\"solarized_dark\"\n-      onChange={(inputJson: string) => {\n-        try {\n-          const value = parseHjson(inputJson);\n-          onChange(value);\n-        } catch {}\n-        setStringValue(inputJson);\n-      }}\n-      onFocus={() => setBlurred(false)}\n-      onBlur={() => setBlurred(true)}\n-      focus={focus}\n-      fontSize={12}\n-      width={width || '100%'}\n-      height={height || '8vh'}\n-      showPrintMargin={false}\n-      showGutter={false}\n-      value={stringValue}\n-      placeholder={placeholder}\n-      editorProps={{\n-        $blockScrolling: Infinity,\n-      }}\n-      setOptions={{\n-        enableBasicAutocompletion: false,\n-        enableLiveAutocompletion: false,\n-        showLineNumbers: false,\n-        tabSize: 2,\n-      }}\n-      style={{}}\n-    />\n+    <div className={classNames('json-input', { invalid: showErrorIfNeeded && internalValueError })}>\n+      <AceEditor\n+        mode=\"hjson\"\n+        theme=\"solarized_dark\"\n+        onChange={(inputJson: string) => {\n+          let value: any;\n+          let error: Error | undefined;\n+          try {\n+            value = parseHjson(inputJson);\n+          } catch (e) {\n+            error = e;\n+          }\n+\n+          setInternalValue({\n+            value,\n+            error,\n+            stringified: inputJson,\n+          });\n+\n+          if (!error) {\n+            onChange(value);\n+          }\n+\n+          if (showErrorIfNeeded) {\n+            setShowErrorIfNeeded(false);\n+          }\n+        }}\n+        onBlur={() => setShowErrorIfNeeded(true)}\n+        focus={focus}\n+        fontSize={12}\n+        width={width || '100%'}\n+        height={height || '8vh'}\n+        showPrintMargin={false}\n+        showGutter={false}\n+        value={internalValue.stringified}\n+        placeholder={placeholder}\n+        editorProps={{\n+          $blockScrolling: Infinity,\n+        }}\n+        setOptions={{\n+          enableBasicAutocompletion: false,\n+          enableLiveAutocompletion: false,\n+          showLineNumbers: false,\n+          tabSize: 2,\n+        }}\n+        style={{}}\n+        onLoad={(editor: any) => {\n+          aceEditor.current = editor;\n+        }}\n+      />\n+      {showErrorIfNeeded && internalValueError && (\n+        <div\n+          className=\"json-error\"\n+          onClick={() => {\n+            if (!aceEditor.current || !internalValueError) return;\n+\n+            // Message would be something like:\n+            // `Found '}' where a key name was expected at line 26,7`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk2MTA3Mw=="}, "originalCommit": {"oid": "eff2956d828290e8ec02f6b8fb08569a8c7fdf91"}, "originalPosition": 154}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2271, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}