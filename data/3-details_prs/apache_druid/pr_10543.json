{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMTE5OTQy", "number": 10543, "title": "Avatica protobuf", "bodyText": "Description\nDruid hadn't implemented the AvaticaProtobufHandler and only supported Json serialisation for Avatica connections. Protocol buffers have much less overhead than Json and thus I would expect the transfer rate to be increased when using it. I'll try to build some benchmarking tools to test this, circumstantial evidence from test suites seems to indicate a speed increase:\n... Time elapsed: 14.753 s - in org.apache.druid.sql.avatica.DruidAvaticaJsonHandlerTest\n... Time elapsed: 11.482 s - in org.apache.druid.sql.avatica.DruidAvaticaProtobufHandlerTest\n\nAs a side note, for the officially supported Avatica Golang driver there isn't any Json serialisation support and thus will only work with this patch.\nI was forced to add org.apache.calcite.avatica to druid-server in order to parse the pb messages and retrieve the connection id. The connection id is used to stabilise the choice of brokers when the request goes through the router.\nOne further note, I've chosen to add another url (/druid/v2/sql/avatica-pb/) for protocol buffers, ideally it would simply be controlled with a content-type, that is unfortunately not implemented in the JDBC driver so it will not work for the time being, however, the aforementioned golang driver does send content-type as application/x-google-protobuf.\nFixed the bug ...\nRenamed the class ...\nAdded a forbidden-apis entry ...\n\n\n\n\n\nThis PR has:\n\n been self-reviewed.\n\n using the concurrency checklist (Remove this item if the PR doesn't have any relation to concurrency.)\n\n\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths, ensuring the threshold for code coverage is met.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-10-30T16:22:33Z", "url": "https://github.com/apache/druid/pull/10543", "merged": true, "mergeCommit": {"oid": "782a1d4e6ca53076cfe100e391f3b77ab39a055f"}, "closed": true, "closedAt": "2021-03-31T19:46:25Z", "author": {"login": "lkm"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXpTVPgBqjM5NDIwNTgyNzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABeIiL_TgBqjQ1MzQ4ODEyMjY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMTg3OTU0", "url": "https://github.com/apache/druid/pull/10543#pullrequestreview-543187954", "createdAt": "2020-12-02T19:55:30Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOTo1NTozMFrOH9rvpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMDowMzozMFrOH9sBoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0MTg5Mw==", "bodyText": "What is this variable for?", "url": "https://github.com/apache/druid/pull/10543#discussion_r534441893", "createdAt": "2020-12-02T19:55:30Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/server/AsyncQueryForwardingServlet.java", "diffHunk": "@@ -88,6 +92,7 @@\n   private static final String OBJECTMAPPER_ATTRIBUTE = \"org.apache.druid.proxy.objectMapper\";\n \n   private static final int CANCELLATION_TIMEOUT_MILLIS = 500;\n+  private static final long serialVersionUID = 2026655693637894524L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0MjA3Mw==", "bodyText": "What is transient keyword for?", "url": "https://github.com/apache/druid/pull/10543#discussion_r534442073", "createdAt": "2020-12-02T19:55:51Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/server/AsyncQueryForwardingServlet.java", "diffHunk": "@@ -119,6 +124,7 @@ private static void handleException(HttpServletResponse response, ObjectMapper o\n   private final RequestLogger requestLogger;\n   private final GenericQueryMetricsFactory queryMetricsFactory;\n   private final AuthenticatorMapper authenticatorMapper;\n+  private final transient ProtobufTranslation protobufTranslation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0NTA1OA==", "bodyText": "These if clause seems fragile from changes on Avatica request types (such as new request type), but I'm not sure if there is a better way..", "url": "https://github.com/apache/druid/pull/10543#discussion_r534445058", "createdAt": "2020-12-02T20:01:07Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/server/AsyncQueryForwardingServlet.java", "diffHunk": "@@ -449,6 +463,95 @@ static String getAvaticaConnectionId(Map<String, Object> requestMap)\n     return (String) connectionIdObj;\n   }\n \n+  static String getAvaticaProtobufConnectionId(Service.Request request)\n+  {\n+    if (request instanceof Service.CatalogsRequest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0NjQ5Nw==", "bodyText": "I'm wondering if we can use the same path for both Avatica and Json, but accept a query parameter to choose one of them. I think it could be better in terms of maintenance. In AsyncQueryForwardingServlet, it seems that you can check the query string. In DruidAvaticaHandler, it can have two delegates for JSON and protobuf and calls one of them based on query string in the request.", "url": "https://github.com/apache/druid/pull/10543#discussion_r534446497", "createdAt": "2020-12-02T20:03:30Z", "author": {"login": "jihoonson"}, "path": "sql/src/main/java/org/apache/druid/sql/avatica/DruidAvaticaProtobufHandler.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.avatica;\n+\n+import com.google.inject.Inject;\n+import org.apache.calcite.avatica.remote.LocalService;\n+import org.apache.calcite.avatica.remote.Service;\n+import org.apache.calcite.avatica.server.AvaticaProtobufHandler;\n+import org.apache.druid.guice.annotations.Self;\n+import org.apache.druid.server.DruidNode;\n+import org.eclipse.jetty.server.Request;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+\n+public class DruidAvaticaProtobufHandler extends AvaticaProtobufHandler\n+{\n+  public static final String AVATICA_PATH = \"/druid/v2/sql/avatica-pb/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NDQ2MDY3", "url": "https://github.com/apache/druid/pull/10543#pullrequestreview-557446067", "createdAt": "2020-12-23T00:48:48Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxNDg5NjU5", "url": "https://github.com/apache/druid/pull/10543#pullrequestreview-561489659", "createdAt": "2021-01-05T03:17:35Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMzoxNzozNVrOIOIwxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMzozNDozNFrOIOJAhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY5NDUzMw==", "bodyText": "side note, since we now have avatica stuff as dependencies to this project, it probably makes sense in a follow-up to modify the JSON version to use the types like this is doing instead of deserializing to a map.", "url": "https://github.com/apache/druid/pull/10543#discussion_r551694533", "createdAt": "2021-01-05T03:17:35Z", "author": {"login": "clintropolis"}, "path": "server/src/main/java/org/apache/druid/server/AsyncQueryForwardingServlet.java", "diffHunk": "@@ -457,6 +470,95 @@ static String getAvaticaConnectionId(Map<String, Object> requestMap)\n     return (String) connectionIdObj;\n   }\n \n+  static String getAvaticaProtobufConnectionId(Service.Request request)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY5NjkwMQ==", "bodyText": "super nitpick: I think it might be nicer to spell out the endpoint e.g. /druid/v2/sql/avatica-protobuf/ instead of /druid/v2/sql/avatica-pb/, but I don't feel super strongly about this and is also ok as it is", "url": "https://github.com/apache/druid/pull/10543#discussion_r551696901", "createdAt": "2021-01-05T03:27:29Z", "author": {"login": "clintropolis"}, "path": "sql/src/main/java/org/apache/druid/sql/avatica/DruidAvaticaProtobufHandler.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.avatica;\n+\n+import com.google.inject.Inject;\n+import org.apache.calcite.avatica.remote.LocalService;\n+import org.apache.calcite.avatica.remote.Service;\n+import org.apache.calcite.avatica.server.AvaticaProtobufHandler;\n+import org.apache.druid.guice.annotations.Self;\n+import org.apache.druid.server.DruidNode;\n+import org.eclipse.jetty.server.Request;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+\n+public class DruidAvaticaProtobufHandler extends AvaticaProtobufHandler\n+{\n+  public static final String AVATICA_PATH = \"/druid/v2/sql/avatica-pb/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY5NzkyMA==", "bodyText": "i wonder if this was causing some problem before... looking at other implementations some do check for null on this field, \ud83d\udc4d", "url": "https://github.com/apache/druid/pull/10543#discussion_r551697920", "createdAt": "2021-01-05T03:32:03Z", "author": {"login": "clintropolis"}, "path": "sql/src/main/java/org/apache/druid/sql/avatica/DruidMeta.java", "diffHunk": "@@ -104,8 +104,10 @@ public void openConnection(final ConnectionHandle ch, final Map<String, String>\n   {\n     // Build connection context.\n     final ImmutableMap.Builder<String, Object> context = ImmutableMap.builder();\n-    for (Map.Entry<String, String> entry : info.entrySet()) {\n-      context.put(entry);\n+    if (info != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY5ODU2NQ==", "bodyText": "nit: I wonder if this test would be better using @RunWith(JUnitParamsRunner.class)  with the different handler implementations instead of making it an abstract class", "url": "https://github.com/apache/druid/pull/10543#discussion_r551698565", "createdAt": "2021-01-05T03:34:34Z", "author": {"login": "clintropolis"}, "path": "sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java", "diffHunk": "@@ -101,7 +101,7 @@\n import java.util.concurrent.Executors;\n import java.util.concurrent.ThreadLocalRandom;\n \n-public class DruidAvaticaHandlerTest extends CalciteTestBase\n+public abstract class DruidAvaticaHandlerTest extends CalciteTestBase", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAyNjU5MTA0", "url": "https://github.com/apache/druid/pull/10543#pullrequestreview-602659104", "createdAt": "2021-03-03T09:02:24Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "35a4fb31a7889134825443e0f1713239b78a4383", "author": {"user": {"login": "lkm", "name": "Lasse Krogh Mammen"}}, "url": "https://github.com/apache/druid/commit/35a4fb31a7889134825443e0f1713239b78a4383", "committedDate": "2021-03-31T13:49:24Z", "message": "Add Calcite Avatica protobuf handler"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "35a4fb31a7889134825443e0f1713239b78a4383", "author": {"user": {"login": "lkm", "name": "Lasse Krogh Mammen"}}, "url": "https://github.com/apache/druid/commit/35a4fb31a7889134825443e0f1713239b78a4383", "committedDate": "2021-03-31T13:49:24Z", "message": "Add Calcite Avatica protobuf handler"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3422, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}