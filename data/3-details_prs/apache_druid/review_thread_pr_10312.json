{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyMjY0Mzkw", "number": 10312, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNTozODoxOVrOEbacbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNTozODoxOVrOEbacbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTgwMjcwOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNTozODoxOVrOHFVP3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzozOToyMVrOHFvnNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM1MzA1Mw==", "bodyText": "Nice finding, but this can lead to incorrect result in default mode since null will be always added no matter whether an empty string is in values or not.", "url": "https://github.com/apache/druid/pull/10312#discussion_r475353053", "createdAt": "2020-08-24T05:38:19Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -143,10 +142,11 @@ private InDimFilter(\n \n     // The values set can be huge. Try to avoid copying the set if possible.\n     // Note that we may still need to copy values to a list for caching. See getCacheKey().\n-    if ((NullHandling.sqlCompatible() || values.stream().noneMatch(NullHandling::needsEmptyToNull))) {\n+    if (NullHandling.sqlCompatible() || !values.remove(\"\")) {\n       this.values = values;\n     } else {\n-      this.values = values.stream().map(NullHandling::emptyToNullIfNeeded).collect(Collectors.toSet());\n+      values.add(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a14f3807d34edd0a0e22c3e01b4fc69164d634e7"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM1NDczNA==", "bodyText": "I think the if condition on line 145 works such that it only enters this else block if there was an empty string already in the set. I should add unit tests here, because I had to think a lot about how the ordering of the if statements affected the code flow \ud83d\ude05 and how nulls and empty strings work in the different modes...\nWhat I want to happen here is:\n\nIf it's sqlCompatible mode, just use the values as is\nIf it's default mode (ie not sql compatible mode) attempt to remove empty string\nIf an empty string was removed add null\nIf no empty  string was removed, use values as is", "url": "https://github.com/apache/druid/pull/10312#discussion_r475354734", "createdAt": "2020-08-24T05:44:35Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -143,10 +142,11 @@ private InDimFilter(\n \n     // The values set can be huge. Try to avoid copying the set if possible.\n     // Note that we may still need to copy values to a list for caching. See getCacheKey().\n-    if ((NullHandling.sqlCompatible() || values.stream().noneMatch(NullHandling::needsEmptyToNull))) {\n+    if (NullHandling.sqlCompatible() || !values.remove(\"\")) {\n       this.values = values;\n     } else {\n-      this.values = values.stream().map(NullHandling::emptyToNullIfNeeded).collect(Collectors.toSet());\n+      values.add(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM1MzA1Mw=="}, "originalCommit": {"oid": "a14f3807d34edd0a0e22c3e01b4fc69164d634e7"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM1OTczMA==", "bodyText": "Oh sorry, you're right. I misread the code. It would be nice to add some comment about what we want to do here since it's not much intuitive.", "url": "https://github.com/apache/druid/pull/10312#discussion_r475359730", "createdAt": "2020-08-24T06:01:39Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -143,10 +142,11 @@ private InDimFilter(\n \n     // The values set can be huge. Try to avoid copying the set if possible.\n     // Note that we may still need to copy values to a list for caching. See getCacheKey().\n-    if ((NullHandling.sqlCompatible() || values.stream().noneMatch(NullHandling::needsEmptyToNull))) {\n+    if (NullHandling.sqlCompatible() || !values.remove(\"\")) {\n       this.values = values;\n     } else {\n-      this.values = values.stream().map(NullHandling::emptyToNullIfNeeded).collect(Collectors.toSet());\n+      values.add(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM1MzA1Mw=="}, "originalCommit": {"oid": "a14f3807d34edd0a0e22c3e01b4fc69164d634e7"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2MTUwOQ==", "bodyText": "In most likelihood, the values is a HashSet which is internally backed by a HashMap and hence remove, contains will be much faster than linear scan.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  values.add(null);\n          \n          \n            \n                  if ((NullHandling.sqlCompatible()) {\n          \n          \n            \n                  this.values = values;\n          \n          \n            \n                } else if (values.remove(\"\")) {\n          \n          \n            \n                    values.add(null);\n          \n          \n            \n                }", "url": "https://github.com/apache/druid/pull/10312#discussion_r475361509", "createdAt": "2020-08-24T06:07:22Z", "author": {"login": "abhishekagarwal87"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -143,10 +142,11 @@ private InDimFilter(\n \n     // The values set can be huge. Try to avoid copying the set if possible.\n     // Note that we may still need to copy values to a list for caching. See getCacheKey().\n-    if ((NullHandling.sqlCompatible() || values.stream().noneMatch(NullHandling::needsEmptyToNull))) {\n+    if (NullHandling.sqlCompatible() || !values.remove(\"\")) {\n       this.values = values;\n     } else {\n-      this.values = values.stream().map(NullHandling::emptyToNullIfNeeded).collect(Collectors.toSet());\n+      values.add(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM1MzA1Mw=="}, "originalCommit": {"oid": "a14f3807d34edd0a0e22c3e01b4fc69164d634e7"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc4NTAxMw==", "bodyText": "I've re-written the if statement to hopefully be easier to follow.", "url": "https://github.com/apache/druid/pull/10312#discussion_r475785013", "createdAt": "2020-08-24T17:39:21Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -143,10 +142,11 @@ private InDimFilter(\n \n     // The values set can be huge. Try to avoid copying the set if possible.\n     // Note that we may still need to copy values to a list for caching. See getCacheKey().\n-    if ((NullHandling.sqlCompatible() || values.stream().noneMatch(NullHandling::needsEmptyToNull))) {\n+    if (NullHandling.sqlCompatible() || !values.remove(\"\")) {\n       this.values = values;\n     } else {\n-      this.values = values.stream().map(NullHandling::emptyToNullIfNeeded).collect(Collectors.toSet());\n+      values.add(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM1MzA1Mw=="}, "originalCommit": {"oid": "a14f3807d34edd0a0e22c3e01b4fc69164d634e7"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3105, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}