{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3Mzk4MzM5", "number": 10340, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMTo1OToxMVrOEftbbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjowMzoxNVrOEfti0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNjg1NjE0OnYy", "diffSide": "RIGHT", "path": "extensions-core/stats/src/main/java/org/apache/druid/query/aggregation/variance/VarianceAggregatorFactory.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMTo1OToxMVrOHMKbFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODoxMDoyMVrOHMyB6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUxNTczMw==", "bodyText": "Hmm, I wonder if this should be NullHandling.defaultDoubleValue().\nWill this just happen if nothing gets read?", "url": "https://github.com/apache/druid/pull/10340#discussion_r482515733", "createdAt": "2020-09-02T21:59:11Z", "author": {"login": "gianm"}, "path": "extensions-core/stats/src/main/java/org/apache/druid/query/aggregation/variance/VarianceAggregatorFactory.java", "diffHunk": "@@ -239,7 +240,9 @@ public Comparator getComparator()\n   @Override\n   public Object finalizeComputation(@Nullable Object object)\n   {\n-    return object == null ? null : ((VarianceAggregatorCollector) object).getVariance(isVariancePop);\n+    return object == null || ((VarianceAggregatorCollector) object).count == 0\n+           ? null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68e50474d047c1510faca2debc7280c77b362d4d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA2MzY5MA==", "bodyText": "I think so. I was able to hit this bug because of VarianceSqlAggregatorTest#testVarianceOrderBy One of the columns had no value for a row that was being grouped on.\nI then read this comment in getVariance(...)\n// in SQL standard, we should return null for zero elements. But druid there should not be such a case\n\nwhich is why I returned null.\nI guess it could be nicer to return NullHandling.defaultDoubleValue() instead", "url": "https://github.com/apache/druid/pull/10340#discussion_r483063690", "createdAt": "2020-09-03T15:24:40Z", "author": {"login": "suneet-s"}, "path": "extensions-core/stats/src/main/java/org/apache/druid/query/aggregation/variance/VarianceAggregatorFactory.java", "diffHunk": "@@ -239,7 +240,9 @@ public Comparator getComparator()\n   @Override\n   public Object finalizeComputation(@Nullable Object object)\n   {\n-    return object == null ? null : ((VarianceAggregatorCollector) object).getVariance(isVariancePop);\n+    return object == null || ((VarianceAggregatorCollector) object).count == 0\n+           ? null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUxNTczMw=="}, "originalCommit": {"oid": "68e50474d047c1510faca2debc7280c77b362d4d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE1ODc3Ng==", "bodyText": "Ah, that comment is out of date. It used to be true but now timeseries queries can return a single row, SQL-style, even if there's no input data. There's a test for it in TImeseriesQueryRunnerTest -> testEmptyTimeseries. It looks like it's expecting NullHandling.defaultDoubleValue() for the aggregators it tests.", "url": "https://github.com/apache/druid/pull/10340#discussion_r483158776", "createdAt": "2020-09-03T17:59:08Z", "author": {"login": "gianm"}, "path": "extensions-core/stats/src/main/java/org/apache/druid/query/aggregation/variance/VarianceAggregatorFactory.java", "diffHunk": "@@ -239,7 +240,9 @@ public Comparator getComparator()\n   @Override\n   public Object finalizeComputation(@Nullable Object object)\n   {\n-    return object == null ? null : ((VarianceAggregatorCollector) object).getVariance(isVariancePop);\n+    return object == null || ((VarianceAggregatorCollector) object).count == 0\n+           ? null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUxNTczMw=="}, "originalCommit": {"oid": "68e50474d047c1510faca2debc7280c77b362d4d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE2MDIyNA==", "bodyText": "I approved the patch, but please also change the comment to become accurate. Perhaps also include a test like the empty timeseries one I mentioned.", "url": "https://github.com/apache/druid/pull/10340#discussion_r483160224", "createdAt": "2020-09-03T18:01:55Z", "author": {"login": "gianm"}, "path": "extensions-core/stats/src/main/java/org/apache/druid/query/aggregation/variance/VarianceAggregatorFactory.java", "diffHunk": "@@ -239,7 +240,9 @@ public Comparator getComparator()\n   @Override\n   public Object finalizeComputation(@Nullable Object object)\n   {\n-    return object == null ? null : ((VarianceAggregatorCollector) object).getVariance(isVariancePop);\n+    return object == null || ((VarianceAggregatorCollector) object).count == 0\n+           ? null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUxNTczMw=="}, "originalCommit": {"oid": "68e50474d047c1510faca2debc7280c77b362d4d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE2NDY0OA==", "bodyText": "\ud83d\udc4d I'll add the test and push up a new patch", "url": "https://github.com/apache/druid/pull/10340#discussion_r483164648", "createdAt": "2020-09-03T18:10:21Z", "author": {"login": "suneet-s"}, "path": "extensions-core/stats/src/main/java/org/apache/druid/query/aggregation/variance/VarianceAggregatorFactory.java", "diffHunk": "@@ -239,7 +240,9 @@ public Comparator getComparator()\n   @Override\n   public Object finalizeComputation(@Nullable Object object)\n   {\n-    return object == null ? null : ((VarianceAggregatorCollector) object).getVariance(isVariancePop);\n+    return object == null || ((VarianceAggregatorCollector) object).count == 0\n+           ? null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUxNTczMw=="}, "originalCommit": {"oid": "68e50474d047c1510faca2debc7280c77b362d4d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNjg3NTA1OnYy", "diffSide": "RIGHT", "path": "extensions-core/stats/src/main/java/org/apache/druid/query/aggregation/variance/VarianceAggregatorCollector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjowMzoxNVrOHMKnZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNToyMToxNlrOHMruMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUxODg4NQ==", "bodyText": "Will this sort the same way as getVariance(isVariancePop) in finalizeComputation?", "url": "https://github.com/apache/druid/pull/10340#discussion_r482518885", "createdAt": "2020-09-02T22:03:15Z", "author": {"login": "gianm"}, "path": "extensions-core/stats/src/main/java/org/apache/druid/query/aggregation/variance/VarianceAggregatorCollector.java", "diffHunk": "@@ -60,11 +60,11 @@ public static VarianceAggregatorCollector from(ByteBuffer buffer)\n   }\n \n   public static final Comparator<VarianceAggregatorCollector> COMPARATOR = (o1, o2) -> {\n-    int compare = Longs.compare(o1.count, o2.count);\n+    int compare = Doubles.compare(o1.nvariance, o2.nvariance);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68e50474d047c1510faca2debc7280c77b362d4d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA2MTI5Ng==", "bodyText": "I think so. I based this on the comment against the nvariance variable\ndouble nvariance; // sum[x-avg^2] (this is actually n times of the variance)\n\ngetVariance(isVariancePop) looks like it divides by the count to get variance instead of n * variance.", "url": "https://github.com/apache/druid/pull/10340#discussion_r483061296", "createdAt": "2020-09-03T15:21:16Z", "author": {"login": "suneet-s"}, "path": "extensions-core/stats/src/main/java/org/apache/druid/query/aggregation/variance/VarianceAggregatorCollector.java", "diffHunk": "@@ -60,11 +60,11 @@ public static VarianceAggregatorCollector from(ByteBuffer buffer)\n   }\n \n   public static final Comparator<VarianceAggregatorCollector> COMPARATOR = (o1, o2) -> {\n-    int compare = Longs.compare(o1.count, o2.count);\n+    int compare = Doubles.compare(o1.nvariance, o2.nvariance);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUxODg4NQ=="}, "originalCommit": {"oid": "68e50474d047c1510faca2debc7280c77b362d4d"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3152, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}