{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzOTMwNTA5", "number": 10248, "title": "fix bug with expressions on sparse string realtime columns without explicit null valued rows", "bodyText": "Description\nThis PR fixes an issue caused by #9731 when using ExpressionVirtualColumn with a single realtime string column input, which is sparsely populated and has not encountered explicit null values (to ensure that they are encoded in the dictionary).\nIn the code there is a gentleman's agreement that if ColumnCapabilities.isDictionaryEncoded is true then DimensionSelector.nameLookupPossibleInAdvance is also true, and isDictionaryEncoded appears to be checked primarily in cases where this should also be true. The refactoring done in #9731 broke this loose contract however, since the latter method was modified to return the state of the indexer, but the former value was set as the expected final state.\nTo fix this, a getColumnCapabilites method has been added to DimensionIndexer, to allow the thing processing all the column values to be the single state of truth about the details of the column. It also frees IncrementalIndex from having to track and evolve changes to the capabilities, since it can now be handled within the indexers, though it still maintains a map of static capabilities for the time and aggregator columns.\nPrior to this fix the added tests would explode with an error in the form:\nSelector of class[org.apache.druid.segment.StringDimensionIndexer$1IndexerDimensionSelector] does not have a dictionary, cannot use it.\n\nbecause of this check.\nWhile I was at it, I made isDictionaryEncoded be a Capable enum, reworked the snapshot method to take a new type, CoercionLogic which is responsible for determining how each Capable.UNKNOWN will be converted to true or false when calling snapshot. merge is now a static method that internally calls snapshot on each ColumnCapabilities, also using a CoercionLogic.\n\nThis PR has:\n\n been self-reviewed.\n\n using the concurrency checklist (Remove this item if the PR doesn't have any relation to concurrency.)\n\n\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths, ensuring the threshold for code coverage is met.\n added integration tests.\n been tested in a test Druid cluster.\n\n\nKey changed/added classes in this PR\n\nIncrementalIndex\nDimensionIndexer implementations, especially StringDimensionIndexer\nExpressionSelectors", "createdAt": "2020-08-06T10:13:57Z", "url": "https://github.com/apache/druid/pull/10248", "merged": true, "mergeCommit": {"oid": "c72f96a4babdf5055912bb0fb5eb2236cfe0ef23"}, "closed": true, "closedAt": "2020-08-11T18:07:18Z", "author": {"login": "clintropolis"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8M7SAgH2gAyNDYzOTMwNTA5OjBhOTNkYWRhMjJhOGQzZWFmMWQwZmU0MmZhOThkZTVhZjA5MjFlYzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc960WOAFqTQ2NTMwNzY5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0a93dada22a8d3eaf1d0fe42fa98de5af0921ec0", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/0a93dada22a8d3eaf1d0fe42fa98de5af0921ec0", "committedDate": "2020-08-06T10:05:09Z", "message": "fix bug with realtime expressions on sparse string columns"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcedf207ebaef2d9066859b19dd2c181fb09ca6a", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/bcedf207ebaef2d9066859b19dd2c181fb09ca6a", "committedDate": "2020-08-06T10:18:34Z", "message": "fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3c6e73284d2eb60fbcfe691260c3b32756da679", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/e3c6e73284d2eb60fbcfe691260c3b32756da679", "committedDate": "2020-08-06T10:25:14Z", "message": "add comment back"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3951eb3b9946f19afa541530c9ed4989ce15a59f", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/3951eb3b9946f19afa541530c9ed4989ce15a59f", "committedDate": "2020-08-06T12:13:23Z", "message": "push capabilities for dimensions to dimension indexers since they know things"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96f19350716fa9de7c9cb7f402cbbf112f53daef", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/96f19350716fa9de7c9cb7f402cbbf112f53daef", "committedDate": "2020-08-06T12:15:35Z", "message": "style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf8e34efc700910165a8a3a6e1f773f804a03cc0", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/cf8e34efc700910165a8a3a6e1f773f804a03cc0", "committedDate": "2020-08-06T12:31:10Z", "message": "style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8be87df0b22371bb1241d4d2705c4243b5519a40", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/8be87df0b22371bb1241d4d2705c4243b5519a40", "committedDate": "2020-08-06T21:43:59Z", "message": "fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "366a1c74953efb07a2b9ede134c274e2b79384a2", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/366a1c74953efb07a2b9ede134c274e2b79384a2", "committedDate": "2020-08-07T02:18:42Z", "message": "getting a bit carried away"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c0c2ad3207e782e101dd942bbdfbab3f3398cf4", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/5c0c2ad3207e782e101dd942bbdfbab3f3398cf4", "committedDate": "2020-08-07T02:26:13Z", "message": "missed one"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dee4293c31a6b8488c455c4a27f8f7fdb4aced98", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/dee4293c31a6b8488c455c4a27f8f7fdb4aced98", "committedDate": "2020-08-07T02:53:46Z", "message": "fix it"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fffcd58695a516072b9274bd05fc90a9109c5a3", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/9fffcd58695a516072b9274bd05fc90a9109c5a3", "committedDate": "2020-08-07T04:55:15Z", "message": "benchmark build fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMDU5NjUy", "url": "https://github.com/apache/druid/pull/10248#pullrequestreview-463059652", "createdAt": "2020-08-07T06:18:01Z", "commit": {"oid": "9fffcd58695a516072b9274bd05fc90a9109c5a3"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjoxODowMVrOG9N0_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzowMjoyMFrOG9O0Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg0Mjg3OQ==", "bodyText": "Negative maybe makes me do a double-take when reading. Is this equivalent to capabilities.isDictionaryEncoded.isFalse()?\nAlso, that has the effect of making this check lax (it will pass if the dictionary-encodedness is unknown). That doesn't seem correct. Shouldn't it be strict, if it relies on dictionary-encodedness? Or if it doesn't rely on it, then the check should be removed.", "url": "https://github.com/apache/druid/pull/10248#discussion_r466842879", "createdAt": "2020-08-07T06:18:01Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/DimensionHandlerUtils.java", "diffHunk": "@@ -73,16 +73,16 @@ private DimensionHandlerUtils()\n   )\n   {\n     if (capabilities == null) {\n-      return new StringDimensionHandler(dimensionName, multiValueHandling, true);\n+      return new StringDimensionHandler(dimensionName, multiValueHandling, true, false);\n     }\n \n     multiValueHandling = multiValueHandling == null ? MultiValueHandling.ofDefault() : multiValueHandling;\n \n     if (capabilities.getType() == ValueType.STRING) {\n-      if (!capabilities.isDictionaryEncoded()) {\n+      if (!capabilities.isDictionaryEncoded().isMaybeTrue()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fffcd58695a516072b9274bd05fc90a9109c5a3"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1MDc3OQ==", "bodyText": "ColumnCapabilities is a more typical return value (the Impl is an impl but we should generally return an interface).", "url": "https://github.com/apache/druid/pull/10248#discussion_r466850779", "createdAt": "2020-08-07T06:40:43Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/DimensionIndexer.java", "diffHunk": "@@ -236,6 +237,7 @@ DimensionSelector makeDimensionSelector(\n       IncrementalIndex.DimensionDesc desc\n   );\n \n+  ColumnCapabilitiesImpl getColumnCapabilities();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fffcd58695a516072b9274bd05fc90a9109c5a3"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1MTY1OA==", "bodyText": "Can this be private? Looks like it isn't used outside of this class.", "url": "https://github.com/apache/druid/pull/10248#discussion_r466851658", "createdAt": "2020-08-07T06:43:08Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/StringDimensionIndexer.java", "diffHunk": "@@ -400,6 +404,17 @@ public int getCardinality()\n     return dimLookup.size();\n   }\n \n+  /**\n+   * returns true if all values are encoded in {@link #dimLookup}\n+   */\n+  public boolean dictionaryEncodesAllValues()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fffcd58695a516072b9274bd05fc90a9109c5a3"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1MTk3MQ==", "bodyText": "Please add some punctuation to this multiline comment \ud83d\ude42\nI think I parsed it correctly, but it wasn't effortless.", "url": "https://github.com/apache/druid/pull/10248#discussion_r466851971", "createdAt": "2020-08-07T06:44:01Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/StringDimensionIndexer.java", "diffHunk": "@@ -456,6 +471,30 @@ public int getUnsortedEncodedKeyComponentHashCode(int[] key)\n     return Arrays.hashCode(key);\n   }\n \n+  @Override\n+  public ColumnCapabilitiesImpl getColumnCapabilities()\n+  {\n+    ColumnCapabilitiesImpl capabilites = new ColumnCapabilitiesImpl().setType(ValueType.STRING)\n+                                                                     .setHasBitmapIndexes(hasBitmapIndexes)\n+                                                                     .setHasSpatialIndexes(hasSpatialIndexes)\n+                                                                     .setDictionaryValuesUnique(true)\n+                                                                     .setDictionaryValuesSorted(false);\n+\n+    // strings are only single valued, until they are not...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fffcd58695a516072b9274bd05fc90a9109c5a3"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1MzAxNg==", "bodyText": "It looks like this is only used in the tests. If so, it should be moved there.", "url": "https://github.com/apache/druid/pull/10248#discussion_r466853016", "createdAt": "2020-08-07T06:46:48Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilities.java", "diffHunk": "@@ -105,4 +104,46 @@ public String toString()\n       return StringUtils.toLowerCase(super.toString());\n     }\n   }\n+\n+  interface CoercionLogic\n+  {\n+    boolean dictionaryEncoded();\n+    boolean dictionaryValuesSorted();\n+    boolean dictionaryValuesUnique();\n+    boolean multipleValues();\n+  }\n+\n+  class AllCoercionLogic implements CoercionLogic", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fffcd58695a516072b9274bd05fc90a9109c5a3"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1MzA3Nw==", "bodyText": "Please add some javadocs. The purpose of this interface isn't immediately obvious.", "url": "https://github.com/apache/druid/pull/10248#discussion_r466853077", "createdAt": "2020-08-07T06:47:00Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilities.java", "diffHunk": "@@ -105,4 +104,46 @@ public String toString()\n       return StringUtils.toLowerCase(super.toString());\n     }\n   }\n+\n+  interface CoercionLogic", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fffcd58695a516072b9274bd05fc90a9109c5a3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1ODUzNQ==", "bodyText": "Why does this test need to be deleted?", "url": "https://github.com/apache/druid/pull/10248#discussion_r466858535", "createdAt": "2020-08-07T07:01:12Z", "author": {"login": "gianm"}, "path": "processing/src/test/java/org/apache/druid/segment/IndexMergerTestBase.java", "diffHunk": "@@ -2012,32 +2011,6 @@ public void testDictIdSeeker()\n     Assert.assertEquals(-1, dictIdSeeker.seek(5));\n   }\n \n-  @Test(expected = IllegalArgumentException.class)\n-  public void testCloser() throws Exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fffcd58695a516072b9274bd05fc90a9109c5a3"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg1OTAzNQ==", "bodyText": "Is this the regression test? If so could you add a comment that this is a regression test for whichever the issue number is?", "url": "https://github.com/apache/druid/pull/10248#discussion_r466859035", "createdAt": "2020-08-07T07:02:20Z", "author": {"login": "gianm"}, "path": "processing/src/test/java/org/apache/druid/segment/virtual/ExpressionSelectorsTest.java", "diffHunk": "@@ -231,6 +252,80 @@ public void testCoerceExprToValue()\n     );\n   }\n \n+  @Test\n+  public void testIncrementIndexStringSelector() throws IndexSizeExceededException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fffcd58695a516072b9274bd05fc90a9109c5a3"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49f7cea16a1a9c03cb7b7f89d114c084043e5fe0", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/49f7cea16a1a9c03cb7b7f89d114c084043e5fe0", "committedDate": "2020-08-07T11:48:46Z", "message": "review stuffs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "626fbb43b12ce1656f37483fbdb8c73cbb9fcb09", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/626fbb43b12ce1656f37483fbdb8c73cbb9fcb09", "committedDate": "2020-08-08T02:22:22Z", "message": "javadoc and comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b46811abe0f7917274a4b8af645ddea10a7ef7f", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/0b46811abe0f7917274a4b8af645ddea10a7ef7f", "committedDate": "2020-08-11T00:18:20Z", "message": "add comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09abd38e2d2e94e5f572fa213cea901c519665ac", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/09abd38e2d2e94e5f572fa213cea901c519665ac", "committedDate": "2020-08-11T02:58:45Z", "message": "more strict check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ecefc2309863f313a6c91531455d89e9eac797a", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/9ecefc2309863f313a6c91531455d89e9eac797a", "committedDate": "2020-08-11T11:21:32Z", "message": "fix missed usaged of impl instead of interface"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MzA3Njk2", "url": "https://github.com/apache/druid/pull/10248#pullrequestreview-465307696", "createdAt": "2020-08-11T18:07:08Z", "commit": {"oid": "9ecefc2309863f313a6c91531455d89e9eac797a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1927, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}