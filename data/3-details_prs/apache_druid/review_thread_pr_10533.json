{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwNDMzOTA0", "number": 10533, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOTo0MTo1OVrOEz71Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOTo0MTo1OVrOEz71Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODkzMTUwOnYy", "diffSide": "RIGHT", "path": "web-console/src/druid-models/input-format.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOTo0MTo1OVrOHrdpjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMTozNDowNVrOHrhE5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMzNjU4OQ==", "bodyText": "does this info text always display 'parquet' column even when shown for orc and avro_ocf?", "url": "https://github.com/apache/druid/pull/10533#discussion_r515336589", "createdAt": "2020-10-30T19:41:59Z", "author": {"login": "clintropolis"}, "path": "web-console/src/druid-models/input-format.tsx", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import React from 'react';\n+\n+import { AutoForm, ExternalLink, Field } from '../components';\n+import { getLink } from '../links';\n+import { oneOf } from '../utils';\n+\n+import { FlattenSpec } from './flatten-spec';\n+\n+export interface InputFormat {\n+  type: string;\n+  findColumnsFromHeader?: boolean;\n+  skipHeaderRows?: number;\n+  columns?: string[];\n+  listDelimiter?: string;\n+  pattern?: string;\n+  function?: string;\n+  flattenSpec?: FlattenSpec;\n+  keepNullColumns?: boolean;\n+}\n+\n+export const INPUT_FORMAT_FIELDS: Field<InputFormat>[] = [\n+  {\n+    name: 'type',\n+    label: 'Input format',\n+    type: 'string',\n+    suggestions: ['json', 'csv', 'tsv', 'regex', 'parquet', 'orc', 'avro_ocf'],\n+    required: true,\n+    info: (\n+      <>\n+        <p>The parser used to parse the data.</p>\n+        <p>\n+          For more information see{' '}\n+          <ExternalLink href={`${getLink('DOCS')}/ingestion/data-formats.html`}>\n+            the documentation\n+          </ExternalLink>\n+          .\n+        </p>\n+      </>\n+    ),\n+  },\n+  {\n+    name: 'pattern',\n+    type: 'string',\n+    required: true,\n+    defined: (p: InputFormat) => p.type === 'regex',\n+  },\n+  {\n+    name: 'function',\n+    type: 'string',\n+    required: true,\n+    defined: (p: InputFormat) => p.type === 'javascript',\n+  },\n+  {\n+    name: 'findColumnsFromHeader',\n+    type: 'boolean',\n+    required: true,\n+    defined: (p: InputFormat) => oneOf(p.type, 'csv', 'tsv'),\n+  },\n+  {\n+    name: 'skipHeaderRows',\n+    type: 'number',\n+    defaultValue: 0,\n+    defined: (p: InputFormat) => oneOf(p.type, 'csv', 'tsv'),\n+    min: 0,\n+    info: (\n+      <>\n+        If both skipHeaderRows and hasHeaderRow options are set, skipHeaderRows is first applied.\n+        For example, if you set skipHeaderRows to 2 and hasHeaderRow to true, Druid will skip the\n+        first two lines and then extract column information from the third line.\n+      </>\n+    ),\n+  },\n+  {\n+    name: 'columns',\n+    type: 'string-array',\n+    required: (p: InputFormat) =>\n+      (oneOf(p.type, 'csv', 'tsv') && !p.findColumnsFromHeader) || p.type === 'regex',\n+    defined: (p: InputFormat) =>\n+      (oneOf(p.type, 'csv', 'tsv') && !p.findColumnsFromHeader) || p.type === 'regex',\n+  },\n+  {\n+    name: 'delimiter',\n+    type: 'string',\n+    defaultValue: '\\t',\n+    defined: (p: InputFormat) => p.type === 'tsv',\n+    info: <>A custom delimiter for data values.</>,\n+  },\n+  {\n+    name: 'listDelimiter',\n+    type: 'string',\n+    defined: (p: InputFormat) => oneOf(p.type, 'csv', 'tsv', 'regex'),\n+    info: <>A custom delimiter for multi-value dimensions.</>,\n+  },\n+  {\n+    name: 'binaryAsString',\n+    type: 'boolean',\n+    defaultValue: false,\n+    defined: (p: InputFormat) => oneOf(p.type, 'parquet', 'orc', 'avro_ocf'),\n+    info: (\n+      <>\n+        Specifies if the bytes parquet column which is not logically marked as a string or enum type\n+        should be treated as a UTF-8 encoded string.\n+      </>\n+    ),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50f7a55778174aee775337f4302884087b47e5bb"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5Mjc0Mg==", "bodyText": "yup, that should be fixed", "url": "https://github.com/apache/druid/pull/10533#discussion_r515392742", "createdAt": "2020-10-30T21:34:05Z", "author": {"login": "vogievetsky"}, "path": "web-console/src/druid-models/input-format.tsx", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import React from 'react';\n+\n+import { AutoForm, ExternalLink, Field } from '../components';\n+import { getLink } from '../links';\n+import { oneOf } from '../utils';\n+\n+import { FlattenSpec } from './flatten-spec';\n+\n+export interface InputFormat {\n+  type: string;\n+  findColumnsFromHeader?: boolean;\n+  skipHeaderRows?: number;\n+  columns?: string[];\n+  listDelimiter?: string;\n+  pattern?: string;\n+  function?: string;\n+  flattenSpec?: FlattenSpec;\n+  keepNullColumns?: boolean;\n+}\n+\n+export const INPUT_FORMAT_FIELDS: Field<InputFormat>[] = [\n+  {\n+    name: 'type',\n+    label: 'Input format',\n+    type: 'string',\n+    suggestions: ['json', 'csv', 'tsv', 'regex', 'parquet', 'orc', 'avro_ocf'],\n+    required: true,\n+    info: (\n+      <>\n+        <p>The parser used to parse the data.</p>\n+        <p>\n+          For more information see{' '}\n+          <ExternalLink href={`${getLink('DOCS')}/ingestion/data-formats.html`}>\n+            the documentation\n+          </ExternalLink>\n+          .\n+        </p>\n+      </>\n+    ),\n+  },\n+  {\n+    name: 'pattern',\n+    type: 'string',\n+    required: true,\n+    defined: (p: InputFormat) => p.type === 'regex',\n+  },\n+  {\n+    name: 'function',\n+    type: 'string',\n+    required: true,\n+    defined: (p: InputFormat) => p.type === 'javascript',\n+  },\n+  {\n+    name: 'findColumnsFromHeader',\n+    type: 'boolean',\n+    required: true,\n+    defined: (p: InputFormat) => oneOf(p.type, 'csv', 'tsv'),\n+  },\n+  {\n+    name: 'skipHeaderRows',\n+    type: 'number',\n+    defaultValue: 0,\n+    defined: (p: InputFormat) => oneOf(p.type, 'csv', 'tsv'),\n+    min: 0,\n+    info: (\n+      <>\n+        If both skipHeaderRows and hasHeaderRow options are set, skipHeaderRows is first applied.\n+        For example, if you set skipHeaderRows to 2 and hasHeaderRow to true, Druid will skip the\n+        first two lines and then extract column information from the third line.\n+      </>\n+    ),\n+  },\n+  {\n+    name: 'columns',\n+    type: 'string-array',\n+    required: (p: InputFormat) =>\n+      (oneOf(p.type, 'csv', 'tsv') && !p.findColumnsFromHeader) || p.type === 'regex',\n+    defined: (p: InputFormat) =>\n+      (oneOf(p.type, 'csv', 'tsv') && !p.findColumnsFromHeader) || p.type === 'regex',\n+  },\n+  {\n+    name: 'delimiter',\n+    type: 'string',\n+    defaultValue: '\\t',\n+    defined: (p: InputFormat) => p.type === 'tsv',\n+    info: <>A custom delimiter for data values.</>,\n+  },\n+  {\n+    name: 'listDelimiter',\n+    type: 'string',\n+    defined: (p: InputFormat) => oneOf(p.type, 'csv', 'tsv', 'regex'),\n+    info: <>A custom delimiter for multi-value dimensions.</>,\n+  },\n+  {\n+    name: 'binaryAsString',\n+    type: 'boolean',\n+    defaultValue: false,\n+    defined: (p: InputFormat) => oneOf(p.type, 'parquet', 'orc', 'avro_ocf'),\n+    info: (\n+      <>\n+        Specifies if the bytes parquet column which is not logically marked as a string or enum type\n+        should be treated as a UTF-8 encoded string.\n+      </>\n+    ),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMzNjU4OQ=="}, "originalCommit": {"oid": "50f7a55778174aee775337f4302884087b47e5bb"}, "originalPosition": 122}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3070, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}