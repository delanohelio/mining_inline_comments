{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MDkwNDQx", "number": 9579, "title": "Add Apache Ranger Authorization", "bodyText": "Description\nThis adds support for Apache Ranger authorization. Apache Ranger provides comprehensive support for authorization.\nDocumentation to be added after agreeing upon design. I would like to add this to the \"core extensions\" as this is a feature for enterprises and Apache Ranger is part of CDH/HDP (merged) distribution.\nI would prefer to be able to do Row Filtering and Column Masking in a follow up PR.\n\nThis PR has:\n\n been self-reviewed.\n added documentation for new or modified features or behaviors.\n added unit tests or modified existing tests to cover new code paths.\n added integration tests.\n been tested in a test Druid cluster.\n\ncc @Fokko", "createdAt": "2020-03-28T12:37:56Z", "url": "https://github.com/apache/druid/pull/9579", "merged": true, "mergeCommit": {"oid": "2d999669333fc7bd344e5bec0d74f0fbcd916272"}, "closed": true, "closedAt": "2020-04-04T16:02:25Z", "author": {"login": "bolkedebruin"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcSW_axAFqTM4MzM5MTg5OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcUWaEOgH2gAyMzk1MDkwNDQxOmY0NGYxZDJkZDZiNzhjYjg2NTRhMTVhZTk3MDE4OTVhOGRiOTI5NTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMzkxODk5", "url": "https://github.com/apache/druid/pull/9579#pullrequestreview-383391899", "createdAt": "2020-03-29T09:46:41Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQwOTo0Njo0MVrOF9QLxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxMDowMzozMFrOF9QS9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc3MjYxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final Logger LOG = new Logger(RangerAuthorizer.class);\n          \n          \n            \n              private static final Logger log = new Logger(RangerAuthorizer.class);", "url": "https://github.com/apache/druid/pull/9579#discussion_r399772615", "createdAt": "2020-03-29T09:46:41Z", "author": {"login": "Fokko"}, "path": "extensions-core/druid-ranger-security/src/main/java/org/apache/druid/security/ranger/authorizer/RangerAuthorizer.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.security.ranger.authorizer;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonTypeName;\n+import org.apache.druid.java.util.common.IAE;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.server.security.Access;\n+import org.apache.druid.server.security.Action;\n+import org.apache.druid.server.security.AuthenticationResult;\n+import org.apache.druid.server.security.Authorizer;\n+import org.apache.druid.server.security.Resource;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.security.UserGroupInformation;\n+import org.apache.ranger.plugin.audit.RangerDefaultAuditHandler;\n+import org.apache.ranger.plugin.policyengine.RangerAccessRequestImpl;\n+import org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl;\n+import org.apache.ranger.plugin.policyengine.RangerAccessResult;\n+import org.apache.ranger.plugin.service.RangerBasePlugin;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Set;\n+\n+@JsonTypeName(\"ranger\")\n+public class RangerAuthorizer implements Authorizer\n+{\n+  private static final Logger LOG = new Logger(RangerAuthorizer.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc3MjY4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOG.warn(\"Hadoop config \" + hadoopConfig + \" not found\");\n          \n          \n            \n                    LOG.warn(\"Hadoop config %s not found\", hadoopConfig);", "url": "https://github.com/apache/druid/pull/9579#discussion_r399772685", "createdAt": "2020-03-29T09:47:23Z", "author": {"login": "Fokko"}, "path": "extensions-core/druid-ranger-security/src/main/java/org/apache/druid/security/ranger/authorizer/RangerAuthorizer.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.security.ranger.authorizer;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonTypeName;\n+import org.apache.druid.java.util.common.IAE;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.server.security.Access;\n+import org.apache.druid.server.security.Action;\n+import org.apache.druid.server.security.AuthenticationResult;\n+import org.apache.druid.server.security.Authorizer;\n+import org.apache.druid.server.security.Resource;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.security.UserGroupInformation;\n+import org.apache.ranger.plugin.audit.RangerDefaultAuditHandler;\n+import org.apache.ranger.plugin.policyengine.RangerAccessRequestImpl;\n+import org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl;\n+import org.apache.ranger.plugin.policyengine.RangerAccessResult;\n+import org.apache.ranger.plugin.service.RangerBasePlugin;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Set;\n+\n+@JsonTypeName(\"ranger\")\n+public class RangerAuthorizer implements Authorizer\n+{\n+  private static final Logger LOG = new Logger(RangerAuthorizer.class);\n+\n+  public static final String RANGER_DRUID_SERVICETYPE = \"druid\";\n+  public static final String RANGER_DRUID_APPID = \"druid\";\n+\n+  public static final String RANGER_DRUID_DEFAULT_HADOOP_CONF = \"druid-ranger-site.xml\";\n+\n+  private RangerBasePlugin rangerPlugin;\n+  private boolean useUgi;\n+\n+  @JsonCreator\n+  public RangerAuthorizer(\n+      @JsonProperty(\"keytab\") String keytab,\n+      @JsonProperty(\"principal\") String principal,\n+      @JsonProperty(\"use_ugi\") boolean useUgi,\n+      @JsonProperty(\"hadoop_config\") String hadoopConfig)\n+  {\n+    Configuration configuration = new Configuration();\n+\n+    this.useUgi = useUgi;\n+\n+    if (hadoopConfig != null) {\n+      URL url = configuration.getResource(hadoopConfig);\n+      if (url == null) {\n+        LOG.warn(\"Hadoop config \" + hadoopConfig + \" not found\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc3Mjc3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOG.debug(\"Trying to load Hadoop config from \" + url + \" (can be null)\");\n          \n          \n            \n                    LOG.debug(\"Trying to load Hadoop config from %s (can be null) from %s\", url, RANGER_DRUID_DEFAULT_HADOOP_CONF);", "url": "https://github.com/apache/druid/pull/9579#discussion_r399772774", "createdAt": "2020-03-29T09:48:09Z", "author": {"login": "Fokko"}, "path": "extensions-core/druid-ranger-security/src/main/java/org/apache/druid/security/ranger/authorizer/RangerAuthorizer.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.security.ranger.authorizer;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonTypeName;\n+import org.apache.druid.java.util.common.IAE;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.server.security.Access;\n+import org.apache.druid.server.security.Action;\n+import org.apache.druid.server.security.AuthenticationResult;\n+import org.apache.druid.server.security.Authorizer;\n+import org.apache.druid.server.security.Resource;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.security.UserGroupInformation;\n+import org.apache.ranger.plugin.audit.RangerDefaultAuditHandler;\n+import org.apache.ranger.plugin.policyengine.RangerAccessRequestImpl;\n+import org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl;\n+import org.apache.ranger.plugin.policyengine.RangerAccessResult;\n+import org.apache.ranger.plugin.service.RangerBasePlugin;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Set;\n+\n+@JsonTypeName(\"ranger\")\n+public class RangerAuthorizer implements Authorizer\n+{\n+  private static final Logger LOG = new Logger(RangerAuthorizer.class);\n+\n+  public static final String RANGER_DRUID_SERVICETYPE = \"druid\";\n+  public static final String RANGER_DRUID_APPID = \"druid\";\n+\n+  public static final String RANGER_DRUID_DEFAULT_HADOOP_CONF = \"druid-ranger-site.xml\";\n+\n+  private RangerBasePlugin rangerPlugin;\n+  private boolean useUgi;\n+\n+  @JsonCreator\n+  public RangerAuthorizer(\n+      @JsonProperty(\"keytab\") String keytab,\n+      @JsonProperty(\"principal\") String principal,\n+      @JsonProperty(\"use_ugi\") boolean useUgi,\n+      @JsonProperty(\"hadoop_config\") String hadoopConfig)\n+  {\n+    Configuration configuration = new Configuration();\n+\n+    this.useUgi = useUgi;\n+\n+    if (hadoopConfig != null) {\n+      URL url = configuration.getResource(hadoopConfig);\n+      if (url == null) {\n+        LOG.warn(\"Hadoop config \" + hadoopConfig + \" not found\");\n+      } else {\n+        configuration.addResource(url);\n+      }\n+    } else {\n+      URL url = configuration.getResource(RANGER_DRUID_DEFAULT_HADOOP_CONF);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Trying to load Hadoop config from \" + url + \" (can be null)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc3MjkzOA==", "bodyText": "I would structure it a bit differently:\nfinal URL url;\nif (hadoopConfig != null) {\n  url = configuration.getResource(hadoopConfig);\n  if (url == null) {\n    LOG.warn(\"Hadoop config %s not found\", hadoopConfig);\n  }\n} else {\n  url = configuration.getResource(RANGER_DRUID_DEFAULT_HADOOP_CONF);\n  if (LOG.isDebugEnabled()) {\n    LOG.debug(\"Trying to load Hadoop config from %s (can be null) from %s\", url, RANGER_DRUID_DEFAULT_HADOOP_CONF);\n  }\n}\nif (url != null) {\n  configuration.addResource(url);\n}", "url": "https://github.com/apache/druid/pull/9579#discussion_r399772938", "createdAt": "2020-03-29T09:49:31Z", "author": {"login": "Fokko"}, "path": "extensions-core/druid-ranger-security/src/main/java/org/apache/druid/security/ranger/authorizer/RangerAuthorizer.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.security.ranger.authorizer;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonTypeName;\n+import org.apache.druid.java.util.common.IAE;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.server.security.Access;\n+import org.apache.druid.server.security.Action;\n+import org.apache.druid.server.security.AuthenticationResult;\n+import org.apache.druid.server.security.Authorizer;\n+import org.apache.druid.server.security.Resource;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.security.UserGroupInformation;\n+import org.apache.ranger.plugin.audit.RangerDefaultAuditHandler;\n+import org.apache.ranger.plugin.policyengine.RangerAccessRequestImpl;\n+import org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl;\n+import org.apache.ranger.plugin.policyengine.RangerAccessResult;\n+import org.apache.ranger.plugin.service.RangerBasePlugin;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Set;\n+\n+@JsonTypeName(\"ranger\")\n+public class RangerAuthorizer implements Authorizer\n+{\n+  private static final Logger LOG = new Logger(RangerAuthorizer.class);\n+\n+  public static final String RANGER_DRUID_SERVICETYPE = \"druid\";\n+  public static final String RANGER_DRUID_APPID = \"druid\";\n+\n+  public static final String RANGER_DRUID_DEFAULT_HADOOP_CONF = \"druid-ranger-site.xml\";\n+\n+  private RangerBasePlugin rangerPlugin;\n+  private boolean useUgi;\n+\n+  @JsonCreator\n+  public RangerAuthorizer(\n+      @JsonProperty(\"keytab\") String keytab,\n+      @JsonProperty(\"principal\") String principal,\n+      @JsonProperty(\"use_ugi\") boolean useUgi,\n+      @JsonProperty(\"hadoop_config\") String hadoopConfig)\n+  {\n+    Configuration configuration = new Configuration();\n+\n+    this.useUgi = useUgi;\n+\n+    if (hadoopConfig != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc3MzY0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private RangerBasePlugin rangerPlugin;\n          \n          \n            \n              private final RangerBasePlugin rangerPlugin;", "url": "https://github.com/apache/druid/pull/9579#discussion_r399773640", "createdAt": "2020-03-29T09:55:53Z", "author": {"login": "Fokko"}, "path": "extensions-core/druid-ranger-security/src/main/java/org/apache/druid/security/ranger/authorizer/RangerAuthorizer.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.security.ranger.authorizer;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonTypeName;\n+import org.apache.druid.java.util.common.IAE;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.server.security.Access;\n+import org.apache.druid.server.security.Action;\n+import org.apache.druid.server.security.AuthenticationResult;\n+import org.apache.druid.server.security.Authorizer;\n+import org.apache.druid.server.security.Resource;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.security.UserGroupInformation;\n+import org.apache.ranger.plugin.audit.RangerDefaultAuditHandler;\n+import org.apache.ranger.plugin.policyengine.RangerAccessRequestImpl;\n+import org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl;\n+import org.apache.ranger.plugin.policyengine.RangerAccessResult;\n+import org.apache.ranger.plugin.service.RangerBasePlugin;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Set;\n+\n+@JsonTypeName(\"ranger\")\n+public class RangerAuthorizer implements Authorizer\n+{\n+  private static final Logger LOG = new Logger(RangerAuthorizer.class);\n+\n+  public static final String RANGER_DRUID_SERVICETYPE = \"druid\";\n+  public static final String RANGER_DRUID_APPID = \"druid\";\n+\n+  public static final String RANGER_DRUID_DEFAULT_HADOOP_CONF = \"druid-ranger-site.xml\";\n+\n+  private RangerBasePlugin rangerPlugin;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc3MzY1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private boolean useUgi;\n          \n          \n            \n              private final boolean useUgi;", "url": "https://github.com/apache/druid/pull/9579#discussion_r399773658", "createdAt": "2020-03-29T09:56:08Z", "author": {"login": "Fokko"}, "path": "extensions-core/druid-ranger-security/src/main/java/org/apache/druid/security/ranger/authorizer/RangerAuthorizer.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.security.ranger.authorizer;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonTypeName;\n+import org.apache.druid.java.util.common.IAE;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.server.security.Access;\n+import org.apache.druid.server.security.Action;\n+import org.apache.druid.server.security.AuthenticationResult;\n+import org.apache.druid.server.security.Authorizer;\n+import org.apache.druid.server.security.Resource;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.security.UserGroupInformation;\n+import org.apache.ranger.plugin.audit.RangerDefaultAuditHandler;\n+import org.apache.ranger.plugin.policyengine.RangerAccessRequestImpl;\n+import org.apache.ranger.plugin.policyengine.RangerAccessResourceImpl;\n+import org.apache.ranger.plugin.policyengine.RangerAccessResult;\n+import org.apache.ranger.plugin.service.RangerBasePlugin;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Set;\n+\n+@JsonTypeName(\"ranger\")\n+public class RangerAuthorizer implements Authorizer\n+{\n+  private static final Logger LOG = new Logger(RangerAuthorizer.class);\n+\n+  public static final String RANGER_DRUID_SERVICETYPE = \"druid\";\n+  public static final String RANGER_DRUID_APPID = \"druid\";\n+\n+  public static final String RANGER_DRUID_DEFAULT_HADOOP_CONF = \"druid-ranger-site.xml\";\n+\n+  private RangerBasePlugin rangerPlugin;\n+  private boolean useUgi;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc3NDExMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            in Apache Druid, configuring the connection the Apache Ranger and providing the service definition for Druid to Apache Ranger. \n          \n          \n            \n            in Apache Druid, configuring the connection to Apache Ranger and providing the service definition for Druid to Apache Ranger.", "url": "https://github.com/apache/druid/pull/9579#discussion_r399774111", "createdAt": "2020-03-29T10:00:21Z", "author": {"login": "Fokko"}, "path": "docs/development/extensions-core/druid-ranger-security.md", "diffHunk": "@@ -0,0 +1,86 @@\n+---\n+id: druid-ranger-security\n+title: \"Apache Ranger Security\"\n+---\n+\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+  \n+This Apache Druid extension adds:\n+\n+- an Authorizer which implements access control for the Druid metastore against Apache Ranger\n+\n+Make sure to [include](../../development/extensions.md#loading-extensions) `druid-ranger-security` as an extension.\n+\n+Please see [Authentication and Authorization](../../design/auth.md) for more information on the extension interfaces being implemented.\n+\n+## Configuration\n+\n+Support for Apache Ranger authorization consists of three elements: configuration of the extension \n+in Apache Druid, configuring the connection the Apache Ranger and providing the service definition for Druid to Apache Ranger. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc3NDE4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            the contents of those files is beyond the scope of this document. Depending your needs you will \n          \n          \n            \n            the contents of those files are beyond the scope of this document. Depending on your needs you will", "url": "https://github.com/apache/druid/pull/9579#discussion_r399774184", "createdAt": "2020-03-29T10:00:54Z", "author": {"login": "Fokko"}, "path": "docs/development/extensions-core/druid-ranger-security.md", "diffHunk": "@@ -0,0 +1,86 @@\n+---\n+id: druid-ranger-security\n+title: \"Apache Ranger Security\"\n+---\n+\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+  \n+This Apache Druid extension adds:\n+\n+- an Authorizer which implements access control for the Druid metastore against Apache Ranger\n+\n+Make sure to [include](../../development/extensions.md#loading-extensions) `druid-ranger-security` as an extension.\n+\n+Please see [Authentication and Authorization](../../design/auth.md) for more information on the extension interfaces being implemented.\n+\n+## Configuration\n+\n+Support for Apache Ranger authorization consists of three elements: configuration of the extension \n+in Apache Druid, configuring the connection the Apache Ranger and providing the service definition for Druid to Apache Ranger. \n+\n+### Properties to configure the extension in Apache Druid\n+|Property|Description|Default|required|\n+|--------|-----------|-------|--------|\n+|`druid.auth.ranger.keytab`|Defines the keytab to be used while authenticating against Apache Ranger to obtain policies and provide auditing|null|No|\n+|`druid.auth.ranger.principal`|Defines the principal to be used while authenticating against Apache Ranger to obtain policies and provide auditing|null|No|\n+|`druid.auth.ranger.use_ugi`|Determines if groups that the authenticated user belongs to should be obtained from Hadoop's UserGroupInformation|null|No|\n+|`druid.auth.ranger.hadoop_config`|If defined, loads extra configuration for Hadoop's UserGroupInformation from this file|ranger-druid-site.xml|No|\n+\n+### Configuring the connection to Apache Ranger\n+\n+The Apache Ranger authorization extension will read several configuration files. Discussing the\n+the contents of those files is beyond the scope of this document. Depending your needs you will ", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc3NDIxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            that you will need to put in the classpath. For auditing the configuration is in `ranger-druid-audit.xml`.\n          \n          \n            \n            that you will need to put in the classpath. For auditing, the configuration is in `ranger-druid-audit.xml`.", "url": "https://github.com/apache/druid/pull/9579#discussion_r399774215", "createdAt": "2020-03-29T10:01:25Z", "author": {"login": "Fokko"}, "path": "docs/development/extensions-core/druid-ranger-security.md", "diffHunk": "@@ -0,0 +1,86 @@\n+---\n+id: druid-ranger-security\n+title: \"Apache Ranger Security\"\n+---\n+\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+  \n+This Apache Druid extension adds:\n+\n+- an Authorizer which implements access control for the Druid metastore against Apache Ranger\n+\n+Make sure to [include](../../development/extensions.md#loading-extensions) `druid-ranger-security` as an extension.\n+\n+Please see [Authentication and Authorization](../../design/auth.md) for more information on the extension interfaces being implemented.\n+\n+## Configuration\n+\n+Support for Apache Ranger authorization consists of three elements: configuration of the extension \n+in Apache Druid, configuring the connection the Apache Ranger and providing the service definition for Druid to Apache Ranger. \n+\n+### Properties to configure the extension in Apache Druid\n+|Property|Description|Default|required|\n+|--------|-----------|-------|--------|\n+|`druid.auth.ranger.keytab`|Defines the keytab to be used while authenticating against Apache Ranger to obtain policies and provide auditing|null|No|\n+|`druid.auth.ranger.principal`|Defines the principal to be used while authenticating against Apache Ranger to obtain policies and provide auditing|null|No|\n+|`druid.auth.ranger.use_ugi`|Determines if groups that the authenticated user belongs to should be obtained from Hadoop's UserGroupInformation|null|No|\n+|`druid.auth.ranger.hadoop_config`|If defined, loads extra configuration for Hadoop's UserGroupInformation from this file|ranger-druid-site.xml|No|\n+\n+### Configuring the connection to Apache Ranger\n+\n+The Apache Ranger authorization extension will read several configuration files. Discussing the\n+the contents of those files is beyond the scope of this document. Depending your needs you will \n+need to create them. The minimum you will need to have is a `ranger-druid-security.xml` file \n+that you will need to put in the classpath. For auditing the configuration is in `ranger-druid-audit.xml`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc3NDM5MQ==", "bodyText": "I think we can remove this line.", "url": "https://github.com/apache/druid/pull/9579#discussion_r399774391", "createdAt": "2020-03-29T10:03:01Z", "author": {"login": "Fokko"}, "path": "extensions-core/druid-ranger-security/src/test/java/org/apache/druid/security/ranger/authorizer/RangerAuthorizerTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.security.ranger.authorizer;\n+\n+import org.apache.druid.server.security.Action;\n+import org.apache.druid.server.security.AuthenticationResult;\n+import org.apache.druid.server.security.Resource;\n+import org.apache.druid.server.security.ResourceType;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class RangerAuthorizerTest\n+{\n+  static RangerAuthorizer rangerAuthorizer = null;\n+\n+  private static final AuthenticationResult alice = new AuthenticationResult(\"alice\", null, null, null);\n+  private static final AuthenticationResult bob = new AuthenticationResult(\"bob\", null, null, null);\n+\n+  private static final Resource aliceDatasource = new Resource(\"alice-datasource\", ResourceType.DATASOURCE);\n+  private static final Resource aliceConfig = new Resource(\"config\", ResourceType.CONFIG);\n+  private static final Resource aliceState = new Resource(\"state\", ResourceType.STATE);\n+\n+  @BeforeClass\n+  public static void setupBeforeClass()\n+  {\n+    Map<String, String> config = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc3NDQ1Mw==", "bodyText": "Can we also check if something isn't allowed? :)", "url": "https://github.com/apache/druid/pull/9579#discussion_r399774453", "createdAt": "2020-03-29T10:03:30Z", "author": {"login": "Fokko"}, "path": "extensions-core/druid-ranger-security/src/test/java/org/apache/druid/security/ranger/authorizer/RangerAuthorizerTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.security.ranger.authorizer;\n+\n+import org.apache.druid.server.security.Action;\n+import org.apache.druid.server.security.AuthenticationResult;\n+import org.apache.druid.server.security.Resource;\n+import org.apache.druid.server.security.ResourceType;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class RangerAuthorizerTest\n+{\n+  static RangerAuthorizer rangerAuthorizer = null;\n+\n+  private static final AuthenticationResult alice = new AuthenticationResult(\"alice\", null, null, null);\n+  private static final AuthenticationResult bob = new AuthenticationResult(\"bob\", null, null, null);\n+\n+  private static final Resource aliceDatasource = new Resource(\"alice-datasource\", ResourceType.DATASOURCE);\n+  private static final Resource aliceConfig = new Resource(\"config\", ResourceType.CONFIG);\n+  private static final Resource aliceState = new Resource(\"state\", ResourceType.STATE);\n+\n+  @BeforeClass\n+  public static void setupBeforeClass()\n+  {\n+    Map<String, String> config = new HashMap<>();\n+    rangerAuthorizer = new RangerAuthorizer(null, null, false, null);\n+  }\n+\n+  @Test\n+  public void testOperations()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MzAyNjk3", "url": "https://github.com/apache/druid/pull/9579#pullrequestreview-384302697", "createdAt": "2020-03-30T23:28:09Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzoyODowOVrOF9_54w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzoyODowOVrOF9_54w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU1NDQ2Nw==", "bodyText": "Would you please update the version to 0.19.0-SNAPSHOT?", "url": "https://github.com/apache/druid/pull/9579#discussion_r400554467", "createdAt": "2020-03-30T23:28:09Z", "author": {"login": "jihoonson"}, "path": "extensions-core/druid-ranger-security/pom.xml", "diffHunk": "@@ -0,0 +1,389 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <groupId>org.apache.druid.extensions</groupId>\n+    <artifactId>druid-ranger-security</artifactId>\n+    <name>druid-ranger-security</name>\n+    <description>druid-ranger-security</description>\n+\n+    <parent>\n+        <groupId>org.apache.druid</groupId>\n+        <artifactId>druid</artifactId>\n+        <version>0.18.0-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0787e48238a2ebf61f90f1cb12996310623960a", "author": {"user": {"login": "bolkedebruin", "name": null}}, "url": "https://github.com/apache/druid/commit/e0787e48238a2ebf61f90f1cb12996310623960a", "committedDate": "2020-03-31T17:24:57Z", "message": "Add Apache Ranger Authorization\n\nThis adds support for Apache Ranger authorization."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bf6599d7e7a2fe5ba5bd48fb0057737ff8d46df", "author": {"user": {"login": "bolkedebruin", "name": null}}, "url": "https://github.com/apache/druid/commit/5bf6599d7e7a2fe5ba5bd48fb0057737ff8d46df", "committedDate": "2020-03-31T17:24:57Z", "message": "Fix documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56082a53b1bacb23d20e52beb47a593b3d7e229a", "author": {"user": {"login": "bolkedebruin", "name": null}}, "url": "https://github.com/apache/druid/commit/56082a53b1bacb23d20e52beb47a593b3d7e229a", "committedDate": "2020-03-31T17:24:57Z", "message": "Spelling fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89bdcb098263f0693e915c9fa30cde3c58e4c8fa", "author": {"user": {"login": "bolkedebruin", "name": null}}, "url": "https://github.com/apache/druid/commit/89bdcb098263f0693e915c9fa30cde3c58e4c8fa", "committedDate": "2020-03-31T17:24:57Z", "message": "Fix license check issue and set to 0.19-SNAPSHOT"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "89bdcb098263f0693e915c9fa30cde3c58e4c8fa", "author": {"user": {"login": "bolkedebruin", "name": null}}, "url": "https://github.com/apache/druid/commit/89bdcb098263f0693e915c9fa30cde3c58e4c8fa", "committedDate": "2020-03-31T17:24:57Z", "message": "Fix license check issue and set to 0.19-SNAPSHOT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbbbf2473a2b00434b36168696c0e5ec6086b8f0", "author": {"user": {"login": "bolkedebruin", "name": null}}, "url": "https://github.com/apache/druid/commit/cbbbf2473a2b00434b36168696c0e5ec6086b8f0", "committedDate": "2020-03-31T18:27:39Z", "message": "More license fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bc8813b92819e3861815a209ee871231e49fb08", "author": {"user": {"login": "bolkedebruin", "name": null}}, "url": "https://github.com/apache/druid/commit/6bc8813b92819e3861815a209ee871231e49fb08", "committedDate": "2020-03-31T20:18:32Z", "message": "More license fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cc1252a4368244aa7cad787975d9ac08bbf8e83", "author": {"user": {"login": "bolkedebruin", "name": null}}, "url": "https://github.com/apache/druid/commit/0cc1252a4368244aa7cad787975d9ac08bbf8e83", "committedDate": "2020-03-31T20:22:43Z", "message": "Fix transient dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af887747b6af47751e9a9e9d945f10cb346e3e39", "author": {"user": {"login": "bolkedebruin", "name": null}}, "url": "https://github.com/apache/druid/commit/af887747b6af47751e9a9e9d945f10cb346e3e39", "committedDate": "2020-04-01T09:24:50Z", "message": "Fix dependencies and licenses"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f3ac420258a7812e093388e16c2c9e43bb71521", "author": {"user": {"login": "bolkedebruin", "name": null}}, "url": "https://github.com/apache/druid/commit/3f3ac420258a7812e093388e16c2c9e43bb71521", "committedDate": "2020-04-02T10:52:43Z", "message": "Fix licenses"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95b5e9618944a070af2d153dafc09c629bc7f7c5", "author": {"user": {"login": "bolkedebruin", "name": null}}, "url": "https://github.com/apache/druid/commit/95b5e9618944a070af2d153dafc09c629bc7f7c5", "committedDate": "2020-04-02T11:02:32Z", "message": "Fix small license issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b9042f64f2111980cea5d9792964e45dbea8ead", "author": {"user": {"login": "bolkedebruin", "name": null}}, "url": "https://github.com/apache/druid/commit/9b9042f64f2111980cea5d9792964e45dbea8ead", "committedDate": "2020-04-02T11:03:06Z", "message": "Fix double item"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MzI4ODQ0", "url": "https://github.com/apache/druid/pull/9579#pullrequestreview-387328844", "createdAt": "2020-04-03T14:52:24Z", "commit": {"oid": "9b9042f64f2111980cea5d9792964e45dbea8ead"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a536044c4081e7030a312596d6da4fff6a331360", "author": {"user": {"login": "bolkedebruin", "name": null}}, "url": "https://github.com/apache/druid/commit/a536044c4081e7030a312596d6da4fff6a331360", "committedDate": "2020-04-04T08:29:31Z", "message": "Small usability improvement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "206bb41d72ff0aab027f072a17b21054c4673965", "author": {"user": {"login": "bolkedebruin", "name": null}}, "url": "https://github.com/apache/druid/commit/206bb41d72ff0aab027f072a17b21054c4673965", "committedDate": "2020-04-04T13:28:01Z", "message": "Remove possible NPE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b6ce1a3df05a6eda06296da868934863b5b730b", "author": {"user": {"login": "bolkedebruin", "name": null}}, "url": "https://github.com/apache/druid/commit/0b6ce1a3df05a6eda06296da868934863b5b730b", "committedDate": "2020-04-04T14:24:44Z", "message": "Fix identation. *sigh* intellij"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f44f1d2dd6b78cb8654a15ae9701895a8db92951", "author": {"user": {"login": "bolkedebruin", "name": null}}, "url": "https://github.com/apache/druid/commit/f44f1d2dd6b78cb8654a15ae9701895a8db92951", "committedDate": "2020-04-04T14:30:57Z", "message": "Spelling fix"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2752, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}