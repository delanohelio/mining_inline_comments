{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxODE2MjM3", "number": 10307, "title": "Add support for all partitioing schemes for auto compaction ", "bodyText": "Description\nThis PR allows using all supported partitioning schemes in auto compaction. In addition to that, all tuningConfigs in ParallelIndexTuningConfig are now available for auto compaction except for forceGuaranteedRollup and configurations related to parse exceptions. forceGuaranteedRollup can be computed based on the type of partitionsSpec and the configurations related to parse exceptions are not supported by parallel index task yet. These changes can be found in ClientCompactionTaskQueryTuningConfig.\nNewestSegmentFirstIterator is now modified to allow all partitioning schemes. Before, it always triggered compactions if it finds a segment compacted with non-dynamic partitioning.\nParallelIndexSupervisorTask is also now able to annotate the lastCompactionState properly with non-dynamic partitioning. Before, the lastCompactionState wasn't stored properly when it runs with multiple subtasks for hash/range partitioning.\nThe web console change is not fixed in this PR.\n\nThis PR has:\n\n been self-reviewed.\n\n using the concurrency checklist (Remove this item if the PR doesn't have any relation to concurrency.)\n\n\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths, ensuring the threshold for code coverage is met.\n added integration tests.\n been tested in a test Druid cluster.\n\n\nKey changed/added classes in this PR\n\nClientCompactionTaskQueryTuningConfig\nNewestSegmentFirstIterator\nParallelIndexSupervisorTask\nTransactionalSegmentPublisher", "createdAt": "2020-08-21T19:20:23Z", "url": "https://github.com/apache/druid/pull/10307", "merged": true, "mergeCommit": {"oid": "b9ff3483ac353c4c7098d5caa1802befa5943ef0"}, "closed": true, "closedAt": "2020-08-26T20:19:19Z", "author": {"login": "jihoonson"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdA_j_dAH2gAyNDcxODE2MjM3OmQ3Y2VlNGUxYzczMzk2YWExYTNmYjA5ODE0YTY1YTQzMjRhMjMwZjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCepl-AFqTQ3NDk0NzEwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d7cee4e1c73396aa1a3fb09814a65a4324a230f5", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/d7cee4e1c73396aa1a3fb09814a65a4324a230f5", "committedDate": "2020-08-21T07:20:34Z", "message": "Add support for all partitioing schemes for auto compaction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3853ed3a8f4689ba06b8e252a3a03abe183abe9a", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/3853ed3a8f4689ba06b8e252a3a03abe183abe9a", "committedDate": "2020-08-21T19:05:22Z", "message": "annotate last compaction state for multi phase parallel indexing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d091e6a1dd239bc424b1f84deae9dd91391b3c42", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/d091e6a1dd239bc424b1f84deae9dd91391b3c42", "committedDate": "2020-08-21T19:07:19Z", "message": "Merge branch 'master' of github.com:apache/druid into repartitioning-auto-compaction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb0eafb47f5545fe28c2f8b63e9ffa593d6f177e", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/eb0eafb47f5545fe28c2f8b63e9ffa593d6f177e", "committedDate": "2020-08-21T21:09:35Z", "message": "fix build and tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4c491b1ae54f366df100451e8ba749abed3e6eb", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/d4c491b1ae54f366df100451e8ba749abed3e6eb", "committedDate": "2020-08-21T22:42:23Z", "message": "test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyOTM5Njcz", "url": "https://github.com/apache/druid/pull/10307#pullrequestreview-472939673", "createdAt": "2020-08-22T17:21:18Z", "commit": {"oid": "d4c491b1ae54f366df100451e8ba749abed3e6eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQxNzoyMToxOFrOHFGgrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQxNzoyMToxOFrOHFGgrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExMTU5OQ==", "bodyText": "should this rather stay inside AbstractBatchIndexTask so that concrete Task classes remain unaware of each other?", "url": "https://github.com/apache/druid/pull/10307#discussion_r475111599", "createdAt": "2020-08-22T17:21:18Z", "author": {"login": "abhishekagarwal87"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTask.java", "diffHunk": "@@ -764,7 +765,28 @@ private PartitionBoundaries determineRangePartition(Collection<StringDistributio\n     return Pair.of(start, stop);\n   }\n \n-  private static void publishSegments(TaskToolbox toolbox, Map<String, PushedSegmentsReport> reportsMap)\n+  public static Function<Set<DataSegment>, Set<DataSegment>> compactionStateAnnotateFunction(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4c491b1ae54f366df100451e8ba749abed3e6eb"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyOTQwNTE2", "url": "https://github.com/apache/druid/pull/10307#pullrequestreview-472940516", "createdAt": "2020-08-22T17:36:02Z", "commit": {"oid": "d4c491b1ae54f366df100451e8ba749abed3e6eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQxNzozNjowMlrOHFGl2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQxNzozNjowMlrOHFGl2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExMjkyMA==", "bodyText": "should this be marked JsonProperty?", "url": "https://github.com/apache/druid/pull/10307#discussion_r475112920", "createdAt": "2020-08-22T17:36:02Z", "author": {"login": "abhishekagarwal87"}, "path": "server/src/main/java/org/apache/druid/client/indexing/ClientCompactionTaskQueryTuningConfig.java", "diffHunk": "@@ -158,27 +222,90 @@ public IndexSpec getIndexSpec()\n     return indexSpec;\n   }\n \n+  @JsonProperty\n+  @Nullable\n+  public IndexSpec getIndexSpecForIntermediatePersists()\n+  {\n+    return indexSpecForIntermediatePersists;\n+  }\n+\n   @JsonProperty\n   @Nullable\n   public Integer getMaxPendingPersists()\n   {\n     return maxPendingPersists;\n   }\n \n+  @JsonProperty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4c491b1ae54f366df100451e8ba749abed3e6eb"}, "originalPosition": 197}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyOTQyNDA2", "url": "https://github.com/apache/druid/pull/10307#pullrequestreview-472942406", "createdAt": "2020-08-22T18:09:23Z", "commit": {"oid": "d4c491b1ae54f366df100451e8ba749abed3e6eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQxODowOToyM1rOHFGxYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQxODowOToyM1rOHFGxYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExNTg3Mw==", "bodyText": "so if the partition spec is defined in compaction config and is dynamic partition spec, MaxRowsPerSegment is taken from partition spec. if its not dynamic partition and single dimension for example, then MaxRowsPerSegment is taken from tuning config?\nand it the same for MaxTotalRows?", "url": "https://github.com/apache/druid/pull/10307#discussion_r475115873", "createdAt": "2020-08-22T18:09:23Z", "author": {"login": "abhishekagarwal87"}, "path": "server/src/main/java/org/apache/druid/server/coordinator/duty/NewestSegmentFirstIterator.java", "diffHunk": "@@ -247,17 +248,30 @@ public boolean hasNext()\n     }\n   }\n \n-  private boolean needsCompaction(DataSourceCompactionConfig config, SegmentsToCompact candidates)\n+  @VisibleForTesting\n+  static PartitionsSpec findPartitinosSpecFromConfig(ClientCompactionTaskQueryTuningConfig tuningConfig)\n+  {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4c491b1ae54f366df100451e8ba749abed3e6eb"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59c15caf5f9854e64c34a364e98372d6893c9b93", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/59c15caf5f9854e64c34a364e98372d6893c9b93", "committedDate": "2020-08-24T20:40:38Z", "message": "better home"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0OTQ3MTAw", "url": "https://github.com/apache/druid/pull/10307#pullrequestreview-474947100", "createdAt": "2020-08-25T22:07:40Z", "commit": {"oid": "59c15caf5f9854e64c34a364e98372d6893c9b93"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3450, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}