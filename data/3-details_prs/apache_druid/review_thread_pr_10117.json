{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNDk0MTMx", "number": 10117, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzowOTowOFrOEKl-2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzowOTowOFrOEKl-2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTQzNTEyOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/druid/java/util/common/guava/ParallelMergeCombiningSequenceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzowOTowOFrOGrub8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzowOTowOFrOGrub8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwMjc2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                } catch (RuntimeException rex) {\n          \n          \n            \n                }\n          \n          \n            \n                catch (RuntimeException rex) {", "url": "https://github.com/apache/druid/pull/10117#discussion_r448502768", "createdAt": "2020-07-01T17:09:08Z", "author": {"login": "jihoonson"}, "path": "core/src/test/java/org/apache/druid/java/util/common/guava/ParallelMergeCombiningSequenceTest.java", "diffHunk": "@@ -611,6 +637,86 @@ private void assertResult(\n     Assert.assertEquals(0, pool.getRunningThreadCount());\n     combiningYielder.close();\n     parallelMergeCombineYielder.close();\n+    // cancellation trigger should not be set if sequence was fully yielded and close is called\n+    // (though shouldn't actually matter even if it was...)\n+    Assert.assertFalse(parallelMergeCombineSequence.getCancellationGizmo().isCancelled());\n+  }\n+\n+  private void assertResultWithEarlyClose(\n+      List<Sequence<IntPair>> sequences,\n+      int batchSize,\n+      int yieldAfter,\n+      int closeYielderAfter,\n+      Consumer<ParallelMergeCombiningSequence.MergeCombineMetrics> reporter\n+  )\n+      throws InterruptedException, IOException\n+  {\n+    final CombiningSequence<IntPair> combiningSequence = CombiningSequence.create(\n+        new MergeSequence<>(INT_PAIR_ORDERING, Sequences.simple(sequences)),\n+        INT_PAIR_ORDERING,\n+        INT_PAIR_MERGE_FN\n+    );\n+\n+    final ParallelMergeCombiningSequence<IntPair> parallelMergeCombineSequence = new ParallelMergeCombiningSequence<>(\n+        pool,\n+        sequences,\n+        INT_PAIR_ORDERING,\n+        INT_PAIR_MERGE_FN,\n+        true,\n+        5000,\n+        0,\n+        TEST_POOL_SIZE,\n+        yieldAfter,\n+        batchSize,\n+        ParallelMergeCombiningSequence.DEFAULT_TASK_TARGET_RUN_TIME_MILLIS,\n+        reporter\n+    );\n+\n+    Yielder<IntPair> combiningYielder = Yielders.each(combiningSequence);\n+    Yielder<IntPair> parallelMergeCombineYielder = Yielders.each(parallelMergeCombineSequence);\n+\n+    IntPair prev = null;\n+\n+    int yields = 0;\n+    while (!combiningYielder.isDone() && !parallelMergeCombineYielder.isDone()) {\n+      if (yields >= closeYielderAfter) {\n+        parallelMergeCombineYielder.close();\n+        combiningYielder.close();\n+        break;\n+      } else {\n+        yields++;\n+        Assert.assertEquals(combiningYielder.get(), parallelMergeCombineYielder.get());\n+        Assert.assertNotEquals(parallelMergeCombineYielder.get(), prev);\n+        prev = parallelMergeCombineYielder.get();\n+        combiningYielder = combiningYielder.next(combiningYielder.get());\n+        parallelMergeCombineYielder = parallelMergeCombineYielder.next(parallelMergeCombineYielder.get());\n+      }\n+    }\n+    // trying to next the yielder creates sadness for you\n+    final String expectedExceptionMsg = \"Already closed\";\n+    try {\n+      Assert.assertEquals(combiningYielder.get(), parallelMergeCombineYielder.get());\n+      parallelMergeCombineYielder.next(parallelMergeCombineYielder.get());\n+      // this should explode so the contradictory next statement should not be reached\n+      Assert.assertTrue(false);\n+    } catch (RuntimeException rex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ea92e66fe75099f7b802266a27b4ef846018fc9"}, "originalPosition": 99}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2392, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}