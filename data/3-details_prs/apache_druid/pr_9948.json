{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0ODcyMDc0", "number": 9948, "title": "Document unsupported Join on multi-value column", "bodyText": "Document unsupported Join on multi-value column\nDescription\nThis is in response to the issue #9924\nSince we currently do not support Join on multi-value column (such as SELECT dim3, l.v, count(*) from druid.foo f inner join lookup.lookyloo l on f.dim3 = l.k group by 1, 2 ), we should make this clear in the docs. Moreover, we should fail query that tries to join on multi-value column rather than silently ignoring multi-valued column and returning results back to user. This is because user may not be aware that Druid actually do not support join on multi-value column and thinking that the result is because nothing match join condition.\nThis PR has:\n\n been self-reviewed.\n\n using the concurrency checklist (Remove this item if the PR doesn't have any relation to concurrency.)\n\n\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-05-29T04:06:28Z", "url": "https://github.com/apache/druid/pull/9948", "merged": true, "mergeCommit": {"oid": "0d22462e07bef0d162a81c4f1a061c83c6f733d0"}, "closed": true, "closedAt": "2020-06-03T19:55:53Z", "author": {"login": "maytasm"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcl6XhcAH2gAyNDI0ODcyMDc0Ojk5YzJjNjFmMzI3ODliYmM5MmYyMzlmZjBhOWRjNmE3NGU2MmU3ZTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnnBkCAH2gAyNDI0ODcyMDc0OmY3NDgzYTg5Mzg1ZWZkMzI5MmM3NGI4ZWNjMGE3OTc5MDQzNGE2N2Q=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "99c2c61f32789bbc92f239ff0a9dc6a74e62e7e0", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/99c2c61f32789bbc92f239ff0a9dc6a74e62e7e0", "committedDate": "2020-05-29T04:01:28Z", "message": "Document Unsupported Join on multi-value column"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "528e8e994568b7d8becff3214f5a278dd65f04ae", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/528e8e994568b7d8becff3214f5a278dd65f04ae", "committedDate": "2020-05-29T04:14:06Z", "message": "Document Unsupported Join on multi-value column"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMTU1NzY5", "url": "https://github.com/apache/druid/pull/9948#pullrequestreview-421155769", "createdAt": "2020-05-29T17:36:59Z", "commit": {"oid": "528e8e994568b7d8becff3214f5a278dd65f04ae"}, "state": "APPROVED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzozNjo1OVrOGcmF6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzo1MzoyM1rOGcmnMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzNzQxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                 \"Unsupported query on multi-valued column\",\n          \n          \n            \n                                                 \"Joining against a multi-value dimension is not supported.\",", "url": "https://github.com/apache/druid/pull/9948#discussion_r432637419", "createdAt": "2020-05-29T17:36:59Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/join/table/IndexedTableJoinMatcher.java", "diffHunk": "@@ -342,8 +347,12 @@ public ValueType defaultType()\n             IntList rowNumbers = getAndCacheRowNumbers(selector, dimensionId);\n             return rowNumbers.iterator();\n           } else {\n-            // Multi-valued rows are not handled by the join system right now; treat them as nulls.\n-            return IntIterators.EMPTY_ITERATOR;\n+            // Multi-valued rows are not handled by the join system right now\n+            // TODO: Remove when https://github.com/apache/druid/issues/9924 is done\n+            throw new QueryException(\"Unsupported query\",\n+                                     \"Unsupported query on multi-valued column\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "528e8e994568b7d8becff3214f5a278dd65f04ae"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzODI0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                 \"Unsupported query on multi-valued column\",\n          \n          \n            \n                                                 \"Joining against a multi-value dimension is not supported.\",", "url": "https://github.com/apache/druid/pull/9948#discussion_r432638241", "createdAt": "2020-05-29T17:38:35Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/join/table/IndexedTableJoinMatcher.java", "diffHunk": "@@ -327,8 +328,12 @@ public ValueType defaultType()\n             IntList rowNumbers = getRowNumbers(selector, dimensionId);\n             return rowNumbers.iterator();\n           } else {\n-            // Multi-valued rows are not handled by the join system right now; treat them as nulls.\n-            return IntIterators.EMPTY_ITERATOR;\n+            // Multi-valued rows are not handled by the join system right now\n+            // TODO: Remove when https://github.com/apache/druid/issues/9924 is done\n+            throw new QueryException(\"Unsupported query\",\n+                                     \"Unsupported query on multi-valued column\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "528e8e994568b7d8becff3214f5a278dd65f04ae"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzODM3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                   \"Unsupported query on multi-valued column\",\n          \n          \n            \n                                                 \"Joining against a multi-value dimension is not supported.\",", "url": "https://github.com/apache/druid/pull/9948#discussion_r432638378", "createdAt": "2020-05-29T17:38:50Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/join/lookup/LookupJoinMatcher.java", "diffHunk": "@@ -72,8 +73,12 @@ public ValueType defaultType()\n             if (row.size() == 1) {\n               return selector.lookupName(row.get(0));\n             } else {\n-              // Multi-valued rows are not handled by the join system right now; treat them as nulls.\n-              return null;\n+              // Multi-valued rows are not handled by the join system right now\n+              // TODO: Remove when https://github.com/apache/druid/issues/9924 is done\n+              throw new QueryException(\"Unsupported query\",\n+                                       \"Unsupported query on multi-valued column\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "528e8e994568b7d8becff3214f5a278dd65f04ae"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0MDAyMg==", "bodyText": "super nit: Do you think it's worth adding an UnsupportedQueryException class that other parts of the query stack can re-use for query operations that are unsupported? I don't know of any of these places of the top of my head, so feel free to ignore this comment. I think this is ok for now.", "url": "https://github.com/apache/druid/pull/9948#discussion_r432640022", "createdAt": "2020-05-29T17:41:54Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/join/lookup/LookupJoinMatcher.java", "diffHunk": "@@ -72,8 +73,12 @@ public ValueType defaultType()\n             if (row.size() == 1) {\n               return selector.lookupName(row.get(0));\n             } else {\n-              // Multi-valued rows are not handled by the join system right now; treat them as nulls.\n-              return null;\n+              // Multi-valued rows are not handled by the join system right now\n+              // TODO: Remove when https://github.com/apache/druid/issues/9924 is done\n+              throw new QueryException(\"Unsupported query\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "528e8e994568b7d8becff3214f5a278dd65f04ae"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0MzMyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - JOIN containing constant value inside the condition\n          \n          \n            \n            - Join condition on a column compared to a constant value.", "url": "https://github.com/apache/druid/pull/9948#discussion_r432643328", "createdAt": "2020-05-29T17:48:13Z", "author": {"login": "suneet-s"}, "path": "docs/querying/datasource.md", "diffHunk": "@@ -348,3 +348,5 @@ future versions:\n always be correct.\n - Performance-related optimizations as mentioned in the [previous section](#join-performance).\n - Join algorithms other than broadcast hash-joins.\n+- JOIN containing constant value inside the condition", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "528e8e994568b7d8becff3214f5a278dd65f04ae"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0MzUzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - JOIN on multi-valued column\n          \n          \n            \n            - Join conditions on a column containing a multi-value dimension.", "url": "https://github.com/apache/druid/pull/9948#discussion_r432643539", "createdAt": "2020-05-29T17:48:39Z", "author": {"login": "suneet-s"}, "path": "docs/querying/datasource.md", "diffHunk": "@@ -348,3 +348,5 @@ future versions:\n always be correct.\n - Performance-related optimizations as mentioned in the [previous section](#join-performance).\n - Join algorithms other than broadcast hash-joins.\n+- JOIN containing constant value inside the condition\n+- JOIN on multi-valued column", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "528e8e994568b7d8becff3214f5a278dd65f04ae"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0NTI0OQ==", "bodyText": "I think this limitation is implied from the above limitation. Slight grammar re-wording if you want to keep the warning.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - JOIN containing constant value inside the condition\n          \n          \n            \n            - JOIN conditions containing a constant value inside the condition.", "url": "https://github.com/apache/druid/pull/9948#discussion_r432645249", "createdAt": "2020-05-29T17:52:05Z", "author": {"login": "suneet-s"}, "path": "docs/querying/sql.md", "diffHunk": "@@ -709,6 +709,8 @@ Druid does not support all SQL features. In particular, the following features a\n \n - JOIN between native datasources (table, lookup, subquery) and system tables.\n - JOIN conditions that are not an equality between expressions from the left- and right-hand sides.\n+- JOIN containing constant value inside the condition", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "528e8e994568b7d8becff3214f5a278dd65f04ae"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0NTkzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - JOIN on multi-valued column\n          \n          \n            \n            - JOIN conditions on a column which contains a multi-value dimension.", "url": "https://github.com/apache/druid/pull/9948#discussion_r432645936", "createdAt": "2020-05-29T17:53:23Z", "author": {"login": "suneet-s"}, "path": "docs/querying/sql.md", "diffHunk": "@@ -709,6 +709,8 @@ Druid does not support all SQL features. In particular, the following features a\n \n - JOIN between native datasources (table, lookup, subquery) and system tables.\n - JOIN conditions that are not an equality between expressions from the left- and right-hand sides.\n+- JOIN containing constant value inside the condition\n+- JOIN on multi-valued column", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "528e8e994568b7d8becff3214f5a278dd65f04ae"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bcc70efaf6d5ac3c91be8f1c97d8d51c8439dc4", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/7bcc70efaf6d5ac3c91be8f1c97d8d51c8439dc4", "committedDate": "2020-06-01T03:46:01Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8a3d2aac6eb10a9b69384175bf74a28f9942f41", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/a8a3d2aac6eb10a9b69384175bf74a28f9942f41", "committedDate": "2020-06-01T04:14:01Z", "message": "Add unit tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxOTEwNzIy", "url": "https://github.com/apache/druid/pull/9948#pullrequestreview-421910722", "createdAt": "2020-06-01T14:53:49Z", "commit": {"oid": "a8a3d2aac6eb10a9b69384175bf74a28f9942f41"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDo1Mzo0OVrOGdNelw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNTowNTo0MFrOGdN6Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4MjcxMQ==", "bodyText": "javadocs please. Details about who should use this and when; may be helpful to future devs.\nI think the key fact here is that this error message will be propagated back to the user. Providing guidance on using this error vs a ISE or RE for example would be useful.", "url": "https://github.com/apache/druid/pull/9948#discussion_r433282711", "createdAt": "2020-06-01T14:53:49Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/UnsupportedQueryException.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query;\n+\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+public class UnsupportedQueryException extends QueryException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a3d2aac6eb10a9b69384175bf74a28f9942f41"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4NjA1NQ==", "bodyText": "Do you think we should provide the host as part of the exception? For cases where an issue only happens on a subset of segments (for example: a multi-value dimension is only present in a segment on host abc) this would be very helpful debugging information.", "url": "https://github.com/apache/druid/pull/9948#discussion_r433286055", "createdAt": "2020-06-01T14:59:13Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/UnsupportedQueryException.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query;\n+\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+public class UnsupportedQueryException extends QueryException\n+{\n+  private static final String ERROR_CLASS = UnsupportedQueryException.class.getName();\n+  public static final String ERROR_CODE = \"Unsupported query\";\n+\n+  public UnsupportedQueryException(String errorMessage)\n+  {\n+    super(ERROR_CODE, errorMessage, ERROR_CLASS, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a3d2aac6eb10a9b69384175bf74a28f9942f41"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4ODEzOA==", "bodyText": "nit:since this error message is user facing - do you think we should modify the constructor take in an error code, and generate the message in this class?\nThat would make it less error prone for another dev to pass in sensitive information as part of the error message.\nThis suggestion might be over-engineering. Feel free to ignore.", "url": "https://github.com/apache/druid/pull/9948#discussion_r433288138", "createdAt": "2020-06-01T15:02:40Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/UnsupportedQueryException.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query;\n+\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+public class UnsupportedQueryException extends QueryException\n+{\n+  private static final String ERROR_CLASS = UnsupportedQueryException.class.getName();\n+  public static final String ERROR_CODE = \"Unsupported query\";\n+\n+  public UnsupportedQueryException(String errorMessage)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a3d2aac6eb10a9b69384175bf74a28f9942f41"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4OTc4Nw==", "bodyText": "CI is complaining about an un-used return value \ud83e\udd14 Same on line 99", "url": "https://github.com/apache/druid/pull/9948#discussion_r433289787", "createdAt": "2020-06-01T15:05:40Z", "author": {"login": "suneet-s"}, "path": "processing/src/test/java/org/apache/druid/segment/join/table/IndexedTableJoinMatcherTest.java", "diffHunk": "@@ -48,12 +54,51 @@\n   {\n     public static class MakeDimensionProcessorTest\n     {\n+      @Mock\n+      private DimensionSelector dimensionSelector;\n+\n       private static final String KEY = \"key\";\n \n       static {\n         NullHandling.initializeForTests();\n       }\n \n+      @Test(expected = UnsupportedQueryException.class)\n+      public void testMatchMultiValuedRowCardinalityUnknownShouldThrowException()\n+      {\n+        MockitoAnnotations.initMocks(this);\n+        ArrayBasedIndexedInts row = new ArrayBasedIndexedInts(new int[]{2, 4, 6});\n+        Mockito.doReturn(row).when(dimensionSelector).getRow();\n+        Mockito.doReturn(DimensionDictionarySelector.CARDINALITY_UNKNOWN).when(dimensionSelector).getValueCardinality();\n+\n+        IndexedTableJoinMatcher.ConditionMatcherFactory conditionMatcherFactory =\n+            new IndexedTableJoinMatcher.ConditionMatcherFactory(\n+                ValueType.STRING,\n+                IndexedTableJoinMatcherTest::createSingletonIntList\n+            );\n+        Supplier<IntIterator> dimensionProcessor = conditionMatcherFactory.makeDimensionProcessor(dimensionSelector, false);\n+        // Test match should throw exception\n+        dimensionProcessor.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a3d2aac6eb10a9b69384175bf74a28f9942f41"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8321856945404896f77ff7d3df8129d3798d87f8", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/8321856945404896f77ff7d3df8129d3798d87f8", "committedDate": "2020-06-03T00:57:09Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMTUzNDM2", "url": "https://github.com/apache/druid/pull/9948#pullrequestreview-423153436", "createdAt": "2020-06-03T01:05:18Z", "commit": {"oid": "8321856945404896f77ff7d3df8129d3798d87f8"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMTowNToxOFrOGeIzDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMTowNToxOFrOGeIzDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1NDYwNQ==", "bodyText": "nit: grammar\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * following reasons: 1) The query is not supported yet. 2) The query is not something Druid would ever supports.\n          \n          \n            \n             * following reasons: 1) The query is not supported yet. 2) The query is not something Druid would ever support.", "url": "https://github.com/apache/druid/pull/9948#discussion_r434254605", "createdAt": "2020-06-03T01:05:18Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/QueryUnsupportedException.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query;\n+\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import javax.annotation.Nullable;\n+import java.net.InetAddress;\n+\n+/**\n+ * This exception is for the query engine to surface when a query cannot be run. This can be due to the\n+ * following reasons: 1) The query is not supported yet. 2) The query is not something Druid would ever supports.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8321856945404896f77ff7d3df8129d3798d87f8"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7483a89385efd3292c74b8ecc0a79790434a67d", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/f7483a89385efd3292c74b8ecc0a79790434a67d", "committedDate": "2020-06-03T10:37:08Z", "message": "add tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2423, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}