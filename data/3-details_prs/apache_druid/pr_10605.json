{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3MzQwNTg3", "number": 10605, "title": "bitwise math function expressions", "bodyText": "Description\nThis PR picks up the commit from #10230, which adds bitwise math functions (bitwiseAnd, bitwiseComplement , bitwiseOr, bitwiseShiftLeft, bitwiseShiftRight, bitwiseXor) to the Druid native expression system, and adds bitwiseConvertDoubleToLongBits and bitwiseConvertLongBitsToDouble to allow use with double typed columns.\nFinally, I've added vectorization support so these expressions can be utilized in vectorized query engines, as well as tests.\nI'll save adding SQL support as a follow-up PR.\nRelated #8560\n\nThis PR has:\n\n been self-reviewed.\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths, ensuring the threshold for code coverage is met.\n added integration tests.\n been tested in a test Druid cluster.\n\n\nKey changed/added classes in this PR\n\nFunction\nVectorMathProcessors", "createdAt": "2020-11-25T10:27:16Z", "url": "https://github.com/apache/druid/pull/10605", "merged": true, "mergeCommit": {"oid": "2ce7b3dcf47f1991616df51227e1a13a82ace66a"}, "closed": true, "closedAt": "2021-01-28T19:16:54Z", "author": {"login": "clintropolis"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc6xKdqAH2gAyNTI3MzQwNTg3OmI5NDA0NjcwMjNhODk1NTI5ZjgyOGY4OGY1MjA4NTMyYmI3N2VmNzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd0psv-gFqTU3ODY2MDUxOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b940467023a895529f828f88f5208532bb77ef70", "author": {"user": {"login": "kaplanmaxe", "name": "Max Kaplan"}}, "url": "https://github.com/apache/druid/commit/b940467023a895529f828f88f5208532bb77ef70", "committedDate": "2020-08-01T23:10:28Z", "message": "expressions: adding bitwise expressions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8e08e0e090b56580a81f35d2179ec3d6a996a6e", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/a8e08e0e090b56580a81f35d2179ec3d6a996a6e", "committedDate": "2020-11-24T08:16:08Z", "message": "Merge remote-tracking branch 'upstream/master' into bitwise-math-functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88529c0b70997eae17089498fbe5326d39d2f924", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/88529c0b70997eae17089498fbe5326d39d2f924", "committedDate": "2020-11-25T09:58:03Z", "message": "double handling and vectorization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecc103ade747d4212f775777efb4c1e3a0e2fc19", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/ecc103ade747d4212f775777efb4c1e3a0e2fc19", "committedDate": "2020-11-25T10:13:06Z", "message": "move conversion to Evals"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b5269b3892105463d516855b535dc427adbc8d7", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/1b5269b3892105463d516855b535dc427adbc8d7", "committedDate": "2020-11-25T10:24:01Z", "message": "revert unintended changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0MDQyMTEx", "url": "https://github.com/apache/druid/pull/10605#pullrequestreview-564042111", "createdAt": "2021-01-08T07:04:51Z", "commit": {"oid": "1b5269b3892105463d516855b535dc427adbc8d7"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwNzowNDo1MVrOIQHx0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwNzoyMDoxNlrOIQIDRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc3NTU3MQ==", "bodyText": "Why add this instead of calling the thing in Double?", "url": "https://github.com/apache/druid/pull/10605#discussion_r553775571", "createdAt": "2021-01-08T07:04:51Z", "author": {"login": "gianm"}, "path": "core/src/main/java/org/apache/druid/math/expr/Evals.java", "diffHunk": "@@ -71,4 +71,14 @@ public static boolean asBoolean(@Nullable String x)\n   {\n     return !NullHandling.isNullOrEquivalent(x) && Boolean.parseBoolean(x);\n   }\n+\n+  public static long doubleToLongBits(double x)\n+  {\n+    return Double.doubleToLongBits(x);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b5269b3892105463d516855b535dc427adbc8d7"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc3Njc1Mg==", "bodyText": "Why convert doubles to their bit representations instead of casting them to longs? Casting to long would, I think, make more sense since we can think of it as an implicit cast of double-typed arguments to a function that only accepts longs.", "url": "https://github.com/apache/druid/pull/10605#discussion_r553776752", "createdAt": "2021-01-08T07:08:38Z", "author": {"login": "gianm"}, "path": "docs/misc/math-expr.md", "diffHunk": "@@ -119,6 +119,13 @@ See javadoc of java.lang.Math for detailed explanation for each function.\n |acos|acos(x) would return the arc cosine of x|\n |asin|asin(x) would return the arc sine of x|\n |atan|atan(x) would return the arc tangent of x|\n+|bitwiseAnd|bitwiseAnd(x,y) would return the result of x & y. Double values will be converted to their bit representation|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b5269b3892105463d516855b535dc427adbc8d7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc3ODE3OA==", "bodyText": "This function is kind of weird because it doesn't have a fixpoint. I'd think that bitwiseConvertDouble(bitwiseConvertDouble(x)) would be identical to bitwiseConvertDouble(x). The lack of fixpoint makes it hard to reason about what the result of this function is going to be. Is there a specific reason it's designed this way? If not, I'd suggest splitting into two functions for each direction of the conversion.", "url": "https://github.com/apache/druid/pull/10605#discussion_r553778178", "createdAt": "2021-01-08T07:14:00Z", "author": {"login": "gianm"}, "path": "docs/misc/math-expr.md", "diffHunk": "@@ -119,6 +119,13 @@ See javadoc of java.lang.Math for detailed explanation for each function.\n |acos|acos(x) would return the arc cosine of x|\n |asin|asin(x) would return the arc sine of x|\n |atan|atan(x) would return the arc tangent of x|\n+|bitwiseAnd|bitwiseAnd(x,y) would return the result of x & y. Double values will be converted to their bit representation|\n+|bitwiseComplement|bitwiseComplement(x) would return the result of ~x. Double values will be converted to their bit representation|\n+|bitwiseConvertDouble|bitwiseConvertDouble(x) would convert the IEEE 754 floating-point \"double\" bits stored in a long into a double value if the input is a long, or the copy bits of a double value into a long if the input is a double.|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b5269b3892105463d516855b535dc427adbc8d7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc4MDAzNg==", "bodyText": "Please include (double, double) and (long, double) in addition to (double, long) args.", "url": "https://github.com/apache/druid/pull/10605#discussion_r553780036", "createdAt": "2021-01-08T07:20:16Z", "author": {"login": "gianm"}, "path": "core/src/test/java/org/apache/druid/math/expr/FunctionTest.java", "diffHunk": "@@ -519,6 +519,31 @@ public void testLeast()\n     assertExpr(\"least(1, null, 'A')\", \"1\");\n   }\n \n+  @Test\n+  public void testBitwise()\n+  {\n+    assertExpr(\"bitwiseAnd(3, 1)\", 1L);\n+    assertExpr(\"bitwiseAnd(2, 1)\", 0L);\n+    assertExpr(\"bitwiseOr(3, 1)\", 3L);\n+    assertExpr(\"bitwiseOr(2, 1)\", 3L);\n+    assertExpr(\"bitwiseXor(3, 1)\", 2L);\n+    assertExpr(\"bitwiseXor(2, 1)\", 3L);\n+    assertExpr(\"bitwiseShiftLeft(2, 1)\", 4L);\n+    assertExpr(\"bitwiseShiftRight(2, 1)\", 1L);\n+    assertExpr(\"bitwiseAnd(bitwiseComplement(1), 7)\", 6L);\n+    assertExpr(\"bitwiseAnd('2', '1')\", null);\n+    assertExpr(\"bitwiseAnd(2, '1')\", 0L);\n+\n+    assertExpr(\"bitwiseOr(2.345, 1)\", 4612462889363109315L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b5269b3892105463d516855b535dc427adbc8d7"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55e0a84318e41ac196a997a112a8255872a4dd0e", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/55e0a84318e41ac196a997a112a8255872a4dd0e", "committedDate": "2021-01-08T12:16:55Z", "message": "Merge remote-tracking branch 'upstream/master' into bitwise-math-functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61d31182d010cd3b73f41703a97eab9f613da92a", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/61d31182d010cd3b73f41703a97eab9f613da92a", "committedDate": "2021-01-08T21:39:49Z", "message": "Merge remote-tracking branch 'upstream/master' into bitwise-math-functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85e30745167b02585a00a378635102c42db49573", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/85e30745167b02585a00a378635102c42db49573", "committedDate": "2021-01-09T02:15:00Z", "message": "less magic, split convert functions, fix parser for funny exponent doubles"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f16026aa0a89b9fbf9e54c9df15b45df0a537fef", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/f16026aa0a89b9fbf9e54c9df15b45df0a537fef", "committedDate": "2021-01-12T02:12:58Z", "message": "Merge remote-tracking branch 'upstream/master' into bitwise-math-functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d988512555c145cff650a8325e4f7616b273dbae", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/d988512555c145cff650a8325e4f7616b273dbae", "committedDate": "2021-01-12T02:14:37Z", "message": "fix spelling exceptions list"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72a452a2a1884cd9cfad998a23723040b9eac70e", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/72a452a2a1884cd9cfad998a23723040b9eac70e", "committedDate": "2021-01-12T20:36:25Z", "message": "more spelling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY5MDgzMjQ0", "url": "https://github.com/apache/druid/pull/10605#pullrequestreview-569083244", "createdAt": "2021-01-15T09:13:42Z", "commit": {"oid": "72a452a2a1884cd9cfad998a23723040b9eac70e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwOToxMzo0MlrOIUPpeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwOToxNzoyNlrOIUP-Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODA5ODgwOQ==", "bodyText": "This used to allow 10. as a double, but now it doesn't. I think we should add that back. (with tests \ud83d\ude42)", "url": "https://github.com/apache/druid/pull/10605#discussion_r558098809", "createdAt": "2021-01-15T09:13:42Z", "author": {"login": "gianm"}, "path": "core/src/main/antlr4/org/apache/druid/math/expr/antlr/Expr.g4", "diffHunk": "@@ -51,9 +51,12 @@ numericElement : (LONG | DOUBLE | NULL);\n literalElement : (STRING | LONG | DOUBLE | NULL);\n \n NULL : 'null';\n+LONG : [0-9]+;\n+EXP: [eE] [-]? LONG;\n+// DOUBLE provides partial support for java double format\n+// see: https://docs.oracle.com/javase/8/docs/api/java/lang/Double.html#valueOf-java.lang.String-\n+DOUBLE : 'NaN' | 'Infinity' | (LONG '.' LONG) | (LONG EXP) | (LONG '.' LONG EXP);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72a452a2a1884cd9cfad998a23723040b9eac70e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODEwNDEwNg==", "bodyText": "Are these docs for bitwiseConvertDoubleToLongBits correct? It doesn't sound like something that the function should do.", "url": "https://github.com/apache/druid/pull/10605#discussion_r558104106", "createdAt": "2021-01-15T09:17:26Z", "author": {"login": "gianm"}, "path": "docs/misc/math-expr.md", "diffHunk": "@@ -119,13 +119,14 @@ See javadoc of java.lang.Math for detailed explanation for each function.\n |acos|acos(x) would return the arc cosine of x|\n |asin|asin(x) would return the arc sine of x|\n |atan|atan(x) would return the arc tangent of x|\n-|bitwiseAnd|bitwiseAnd(x,y) would return the result of x & y. Double values will be converted to their bit representation|\n-|bitwiseComplement|bitwiseComplement(x) would return the result of ~x. Double values will be converted to their bit representation|\n-|bitwiseConvertDouble|bitwiseConvertDouble(x) would convert the IEEE 754 floating-point \"double\" bits stored in a long into a double value if the input is a long, or the copy bits of a double value into a long if the input is a double.|\n-|bitwiseOr|bitwiseOr(x,y) would return the result of x [PIPE] y. Double values will be converted to their bit representation |\n-|bitwiseShiftLeft|bitwiseShiftLeft(x,y) would return the result of x << y. Double values will be converted to their bit representation|\n-|bitwiseShiftRight|bitwiseShiftRight(x,y) would return the result of x >> y. Double values will be converted to their bit representation|\n-|bitwiseXor|bitwiseXor(x,y) would return the result of x ^ y. Double values will be converted to their bit representation|\n+|bitwiseAnd|bitwiseAnd(x,y) would return the result of x & y. Double values will be implicitly cast to longs, use `bitwiseConvertDoubleToLongBits` to perform bitwise operations directly with doubles|\n+|bitwiseComplement|bitwiseComplement(x) would return the result of ~x. Double values will be implicitly cast to longs, use `bitwiseConvertDoubleToLongBits` to perform bitwise operations directly with doubles|\n+|bitwiseConvertDoubleToLongBits|bitwiseConvertDoubleToLongBits(x) would convert the IEEE 754 floating-point \"double\" bits stored in a long into a double value if the input is a long, or implicitly cast the value to a long if the input is a double|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72a452a2a1884cd9cfad998a23723040b9eac70e"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58fb61757ca7b24f5e09d61048771dc84545f473", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/58fb61757ca7b24f5e09d61048771dc84545f473", "committedDate": "2021-01-20T12:45:02Z", "message": "fix grammar, add more test, fix docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcyNDY0OTE5", "url": "https://github.com/apache/druid/pull/10605#pullrequestreview-572464919", "createdAt": "2021-01-20T17:32:27Z", "commit": {"oid": "58fb61757ca7b24f5e09d61048771dc84545f473"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxNzozMjoyOFrOIXJuNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxNzozMjoyOFrOIXJuNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTE0NzQ0NQ==", "bodyText": "This still doesn't seem right; surely, if the input is a long, the function will cast the value to a double and then convert those double bits back to a long. The description doesn't make it sound like that's what happens.", "url": "https://github.com/apache/druid/pull/10605#discussion_r561147445", "createdAt": "2021-01-20T17:32:28Z", "author": {"login": "gianm"}, "path": "docs/misc/math-expr.md", "diffHunk": "@@ -115,53 +115,53 @@ See javadoc of java.lang.Math for detailed explanation for each function.\n \n |name|description|\n |----|-----------|\n-|abs|abs(x) would return the absolute value of x|\n-|acos|acos(x) would return the arc cosine of x|\n-|asin|asin(x) would return the arc sine of x|\n-|atan|atan(x) would return the arc tangent of x|\n-|bitwiseAnd|bitwiseAnd(x,y) would return the result of x & y. Double values will be implicitly cast to longs, use `bitwiseConvertDoubleToLongBits` to perform bitwise operations directly with doubles|\n-|bitwiseComplement|bitwiseComplement(x) would return the result of ~x. Double values will be implicitly cast to longs, use `bitwiseConvertDoubleToLongBits` to perform bitwise operations directly with doubles|\n-|bitwiseConvertDoubleToLongBits|bitwiseConvertDoubleToLongBits(x) would convert the IEEE 754 floating-point \"double\" bits stored in a long into a double value if the input is a long, or implicitly cast the value to a long if the input is a double|\n-|bitwiseConvertLongBitsToDouble|bitwiseConvertLongBitsToDouble(x) would convert a long to the IEEE 754 floating-point \"double\" specified by the bits stored in the long. A double input will be implicitly cast to a long|\n-|bitwiseOr|bitwiseOr(x,y) would return the result of x [PIPE] y. Double values will be implicitly cast to longs, use `bitwiseConvertDoubleToLongBits` to perform bitwise operations directly with doubles|\n-|bitwiseShiftLeft|bitwiseShiftLeft(x,y) would return the result of x << y. Double values will be implicitly cast to longs, use `bitwiseConvertDoubleToLongBits` to perform bitwise operations directly with doubles|\n-|bitwiseShiftRight|bitwiseShiftRight(x,y) would return the result of x >> y. Double values will be implicitly cast to longs, use `bitwiseConvertDoubleToLongBits` to perform bitwise operations directly with doubles|\n-|bitwiseXor|bitwiseXor(x,y) would return the result of x ^ y. Double values will be implicitly cast to longs, use `bitwiseConvertDoubleToLongBits` to perform bitwise operations directly with doubles|\n-|atan2|atan2(y, x) would return the angle theta from the conversion of rectangular coordinates (x, y) to polar * coordinates (r, theta)|\n-|cbrt|cbrt(x) would return the cube root of x|\n-|ceil|ceil(x) would return the smallest (closest to negative infinity) double value that is greater than or equal to x and is equal to a mathematical integer|\n-|copysign|copysign(x) would return the first floating-point argument with the sign of the second floating-point argument|\n-|cos|cos(x) would return the trigonometric cosine of x|\n-|cosh|cosh(x) would return the hyperbolic cosine of x|\n-|cot|cot(x) would return the trigonometric cotangent of an angle x|\n+|abs|abs(x) returns the absolute value of x|\n+|acos|acos(x) returns the arc cosine of x|\n+|asin|asin(x) returns the arc sine of x|\n+|atan|atan(x) returns the arc tangent of x|\n+|bitwiseAnd|bitwiseAnd(x,y) returns the result of x & y. Double values will be implicitly cast to longs, use `bitwiseConvertDoubleToLongBits` to perform bitwise operations directly with doubles|\n+|bitwiseComplement|bitwiseComplement(x) returns the result of ~x. Double values will be implicitly cast to longs, use `bitwiseConvertDoubleToLongBits` to perform bitwise operations directly with doubles|\n+|bitwiseConvertDoubleToLongBits|bitwiseConvertDoubleToLongBits(x) will convert the IEEE 754 floating-point \"double\" bits of a double value into a long, or implicitly cast the value to a double if the input is a long.|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58fb61757ca7b24f5e09d61048771dc84545f473"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "623e0b78ff3779e4a4941886d3a5176bf9ff845d", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/623e0b78ff3779e4a4941886d3a5176bf9ff845d", "committedDate": "2021-01-20T21:29:33Z", "message": "fix docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc4NjYwNTE5", "url": "https://github.com/apache/druid/pull/10605#pullrequestreview-578660519", "createdAt": "2021-01-28T19:16:17Z", "commit": {"oid": "623e0b78ff3779e4a4941886d3a5176bf9ff845d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3100, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}