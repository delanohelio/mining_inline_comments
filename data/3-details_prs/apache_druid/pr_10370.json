{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyNDE3Mzgw", "number": 10370, "title": "add computed Expr output types", "bodyText": "Description\nThis PR adds the ability to compute the output type for a given expression, given the types of the input bindings. It is worth mentioning that nothing is currently using or taking advantage of this, and that this PR is scaffolding for follow-up work which will introduce vectorized expressions (and could potentially be used to optimize non-vectorized expressions as well).\nAnyway, the main changes in this PR have been added to Expr:\n  @Nullable\n  default ExprType getOutputType(InputBindingTypes inputTypes)\n  {\n    return null;\n  }\n\n  interface InputBindingTypes\n  {\n    @Nullable\n    ExprType getType(String name);\n  }\nwith similar methods added to Function and ApplyFunction so that the output types of functions can be computed.\nI think there is a lot of room for further improvement, for example this could potentially be combined with the input analysis, or maybe be transitioned into a sort of optimize call that can potentially produce a new Expr which already knows its output type, allowing for a ExprType getOutputType() with no arguments. Some of the function abstract classes feel a bit messy as well, however, I leave all that as work for another day.\nIt also includes a minor refactor salvaged from #10355 for shorthand of producing long typed boolean values.\n\nThis PR has:\n\n been self-reviewed.\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths, ensuring the threshold for code coverage is met.\n added integration tests.\n been tested in a test Druid cluster.\n\n\nKey changed/added classes in this PR\n\nExpr\nExprType\nall implementations of Expr, Function, and ApplyFunction can now produce type information.", "createdAt": "2020-09-09T01:45:37Z", "url": "https://github.com/apache/druid/pull/10370", "merged": true, "mergeCommit": {"oid": "184b202411ffe6d04037e6b670985a58c3bf53e5"}, "closed": true, "closedAt": "2020-09-15T01:18:57Z", "author": {"login": "clintropolis"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdGyuieAH2gAyNDgyNDE3MzgwOjgzNGNiMTNhZWI1MzFhNjA2ODVjZTllYjI3MDg5NGU3NGE1MjAxYzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdI7kLugFqTQ4ODIxNjY4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "834cb13aeb531a60685ce9eb270894e74a5201c3", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/834cb13aeb531a60685ce9eb270894e74a5201c3", "committedDate": "2020-09-08T07:46:52Z", "message": "push down ValueType to ExprType conversion, tidy up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "472918e282c5787dbaa801d85ea6c052e2e29c8a", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/472918e282c5787dbaa801d85ea6c052e2e29c8a", "committedDate": "2020-09-09T00:57:36Z", "message": "determine expr output type for given input types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28c058816d50d40c90222d93a937257fafc72f1b", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/28c058816d50d40c90222d93a937257fafc72f1b", "committedDate": "2020-09-09T01:01:08Z", "message": "revert unintended name change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57282df134152becec26e1ae964f28b6159bdedb", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/57282df134152becec26e1ae964f28b6159bdedb", "committedDate": "2020-09-09T01:26:21Z", "message": "add nullable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b5a1fe7deb737304ad242605193c6ea3d884ae6", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/3b5a1fe7deb737304ad242605193c6ea3d884ae6", "committedDate": "2020-09-09T01:32:08Z", "message": "tidy up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fc125358d0f894b9d124414b464c4e212cef92d", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/8fc125358d0f894b9d124414b464c4e212cef92d", "committedDate": "2020-09-09T01:36:21Z", "message": "fixup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c6fc87c5a0361363914a8f1ea1ef46403fd4e6e", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/2c6fc87c5a0361363914a8f1ea1ef46403fd4e6e", "committedDate": "2020-09-09T02:27:50Z", "message": "more better"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c36afdfea33cdffc6182ecf07f7317ad7c21b870", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/c36afdfea33cdffc6182ecf07f7317ad7c21b870", "committedDate": "2020-09-09T02:32:41Z", "message": "fix signatures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2d7f9ad249d1189c121958726fa9b38d87ca886", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/d2d7f9ad249d1189c121958726fa9b38d87ca886", "committedDate": "2020-09-09T03:52:39Z", "message": "naming things is hard"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d64ecce0e8cc4a683c81cfbaf78b4aedcf2cbdb", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/8d64ecce0e8cc4a683c81cfbaf78b4aedcf2cbdb", "committedDate": "2020-09-09T06:57:25Z", "message": "fix inspection"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NzY1NjUz", "url": "https://github.com/apache/druid/pull/10370#pullrequestreview-484765653", "createdAt": "2020-09-09T08:14:43Z", "commit": {"oid": "8d64ecce0e8cc4a683c81cfbaf78b4aedcf2cbdb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODoxNDo0NFrOHO74jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODoxNDo0NFrOHO74jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQyMzI0NQ==", "bodyText": "shouldn't it instead throw an exception?", "url": "https://github.com/apache/druid/pull/10370#discussion_r485423245", "createdAt": "2020-09-09T08:14:44Z", "author": {"login": "abhishekagarwal87"}, "path": "core/src/main/java/org/apache/druid/math/expr/ExprType.java", "diffHunk": "@@ -29,5 +35,116 @@\n   STRING,\n   DOUBLE_ARRAY,\n   LONG_ARRAY,\n-  STRING_ARRAY\n+  STRING_ARRAY;\n+\n+  public boolean isNumeric()\n+  {\n+    return isNumeric(this);\n+  }\n+\n+  /**\n+   * The expression system does not distinguish between {@link ValueType#FLOAT} and {@link ValueType#DOUBLE}, and\n+   * cannot currently handle {@link ValueType#COMPLEX} inputs. This method will convert {@link ValueType#FLOAT} to\n+   * {@link #DOUBLE}, or throw an exception if a {@link ValueType#COMPLEX} is encountered.\n+   *\n+   * @throws IllegalStateException\n+   */\n+  public static ExprType fromValueType(@Nullable ValueType valueType)\n+  {\n+    if (valueType == null) {\n+      throw new IllegalStateException(\"Unsupported unknown value type\");\n+    }\n+    switch (valueType) {\n+      case LONG:\n+        return LONG;\n+      case LONG_ARRAY:\n+        return LONG_ARRAY;\n+      case FLOAT:\n+      case DOUBLE:\n+        return DOUBLE;\n+      case DOUBLE_ARRAY:\n+        return DOUBLE_ARRAY;\n+      case STRING:\n+        return STRING;\n+      case STRING_ARRAY:\n+        return STRING_ARRAY;\n+      case COMPLEX:\n+      default:\n+        throw new ISE(\"Unsupported value type[%s]\", valueType);\n+    }\n+  }\n+\n+  public static boolean isNumeric(ExprType type)\n+  {\n+    return LONG.equals(type) || DOUBLE.equals(type);\n+  }\n+\n+  public static boolean isArray(@Nullable ExprType type)\n+  {\n+    return LONG_ARRAY.equals(type) || DOUBLE_ARRAY.equals(type) || STRING_ARRAY.equals(type);\n+  }\n+\n+  @Nullable\n+  public static ExprType elementType(@Nullable ExprType type)\n+  {\n+    if (type != null && isArray(type)) {\n+      switch (type) {\n+        case STRING_ARRAY:\n+          return STRING;\n+        case LONG_ARRAY:\n+          return LONG;\n+        case DOUBLE_ARRAY:\n+          return DOUBLE;\n+      }\n+    }\n+    return type;\n+  }\n+\n+  @Nullable\n+  public static ExprType asArrayType(@Nullable ExprType elementType)\n+  {\n+    if (elementType != null && !isArray(elementType)) {\n+      switch (elementType) {\n+        case STRING:\n+          return STRING_ARRAY;\n+        case LONG:\n+          return LONG_ARRAY;\n+        case DOUBLE:\n+          return DOUBLE_ARRAY;\n+      }\n+    }\n+    return elementType;\n+  }\n+\n+  @Nullable\n+  public static ExprType implicitCast(@Nullable ExprType type, @Nullable ExprType other)\n+  {\n+    if (type == null || other == null) {\n+      // cannot implicitly cast unknown types\n+      return null;\n+    }\n+    // arrays cannot be implicitly cast\n+    if (isArray(type)) {\n+      if (!type.equals(other)) {\n+        throw new IAE(\"Cannot implicitly cast %s to %s\", type, other);\n+      }\n+      return type;\n+    }\n+    // if either argument is a string, type becomes a string\n+    if (STRING.equals(type) || STRING.equals(other)) {\n+      return STRING;\n+    }\n+\n+    if (isNumeric(type) && isNumeric(other)) {\n+      // all numbers win over longs\n+      if (LONG.equals(type)) {\n+        return other;\n+      }\n+      // floats vs longs would be handled here, but we currently only support doubles...\n+      return type;\n+    }\n+\n+    // unhandled is unknown\n+    return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d64ecce0e8cc4a683c81cfbaf78b4aedcf2cbdb"}, "originalPosition": 128}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NTQ4NDQ4", "url": "https://github.com/apache/druid/pull/10370#pullrequestreview-485548448", "createdAt": "2020-09-10T03:59:43Z", "commit": {"oid": "8d64ecce0e8cc4a683c81cfbaf78b4aedcf2cbdb"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMzo1OTo0M1rOHPiC6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNDoyNzowOFrOHPidBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA0ODQ5MA==", "bodyText": "javadocs please", "url": "https://github.com/apache/druid/pull/10370#discussion_r486048490", "createdAt": "2020-09-10T03:59:43Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/math/expr/ApplyFunction.java", "diffHunk": "@@ -74,6 +75,9 @@ default boolean hasArrayOutput(LambdaExpr lambdaExpr)\n    */\n   void validateArguments(LambdaExpr lambdaExpr, List<Expr> args);\n \n+  @Nullable\n+  ExprType getOutputType(Expr.InputBindingTypes inputTypes, LambdaExpr expr, List<Expr> args);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d64ecce0e8cc4a683c81cfbaf78b4aedcf2cbdb"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1MDUxOQ==", "bodyText": "javadocs please", "url": "https://github.com/apache/druid/pull/10370#discussion_r486050519", "createdAt": "2020-09-10T04:08:04Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/math/expr/ApplyFunction.java", "diffHunk": "@@ -848,4 +882,32 @@ public CartesianFoldLambdaBinding accumulateWithIndex(int index, Object acc)\n       return this;\n     }\n   }\n+\n+  class LambdaInputBindingTypes implements Expr.InputBindingTypes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d64ecce0e8cc4a683c81cfbaf78b4aedcf2cbdb"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1MjAwNA==", "bodyText": "nit: Willl getType be called in a loop anywhere? It might be better to use getOrDefault(..) instead to avoid 2 hashcode computations here (for containsKey and getInt)", "url": "https://github.com/apache/druid/pull/10370#discussion_r486052004", "createdAt": "2020-09-10T04:14:09Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/math/expr/ApplyFunction.java", "diffHunk": "@@ -848,4 +882,32 @@ public CartesianFoldLambdaBinding accumulateWithIndex(int index, Object acc)\n       return this;\n     }\n   }\n+\n+  class LambdaInputBindingTypes implements Expr.InputBindingTypes\n+  {\n+    private final Object2IntMap<String> lambdaIdentifiers;\n+    private final Expr.InputBindingTypes inputTypes;\n+    private final List<Expr> args;\n+\n+    public LambdaInputBindingTypes(Expr.InputBindingTypes inputTypes, LambdaExpr expr, List<Expr> args)\n+    {\n+      this.inputTypes = inputTypes;\n+      this.args = args;\n+      List<String> identifiers = expr.getIdentifiers();\n+      this.lambdaIdentifiers = new Object2IntOpenHashMap<>(args.size());\n+      for (int i = 0; i < args.size(); i++) {\n+        lambdaIdentifiers.put(identifiers.get(i), i);\n+      }\n+    }\n+\n+    @Nullable\n+    @Override\n+    public ExprType getType(String name)\n+    {\n+      if (lambdaIdentifiers.containsKey(name)) {\n+        return ExprType.elementType(args.get(lambdaIdentifiers.getInt(name)).getOutputType(inputTypes));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d64ecce0e8cc4a683c81cfbaf78b4aedcf2cbdb"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1NTE3NQ==", "bodyText": "Looking at how this function works got me thinking about some stuff... Does this function need to be in sync with the behavior in BinaryEvalOpExprBase#eval (I think so \ud83e\udd14) Since the eval method isn't implemented here, would it be better to implement it in BinaryEvalOpExprBase?\nCan you explain how getOutputType would deal with default null handling mode.\nAlso, what does it mean to have an output type of null?", "url": "https://github.com/apache/druid/pull/10370#discussion_r486055175", "createdAt": "2020-09-10T04:27:08Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/math/expr/BinaryLogicalOperatorExpr.java", "diffHunk": "@@ -57,6 +57,17 @@ protected final double evalDouble(double left, double right)\n     // Use Double.compare for more consistent NaN handling.\n     return Evals.asDouble(Double.compare(left, right) < 0);\n   }\n+\n+  @Nullable\n+  @Override\n+  public ExprType getOutputType(InputBindingTypes inputTypes)\n+  {\n+    ExprType implicitCast = super.getOutputType(inputTypes);\n+    if (ExprType.STRING.equals(implicitCast)) {\n+      return ExprType.LONG;\n+    }\n+    return implicitCast;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d64ecce0e8cc4a683c81cfbaf78b4aedcf2cbdb"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee4306cfecf643fe2a7d3fce4d8386b41b1af785", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/ee4306cfecf643fe2a7d3fce4d8386b41b1af785", "committedDate": "2020-09-10T21:50:12Z", "message": "javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b09b24d9ff6addcb0bb6dab22c83a72cd85c8969", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/b09b24d9ff6addcb0bb6dab22c83a72cd85c8969", "committedDate": "2020-09-10T22:18:22Z", "message": "make default implementation of Expr.getOutputType that returns null"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ff744b360de695535cd76010120d3091bb572ad", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/9ff744b360de695535cd76010120d3091bb572ad", "committedDate": "2020-09-10T23:20:25Z", "message": "rename method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NDM0NzMx", "url": "https://github.com/apache/druid/pull/10370#pullrequestreview-486434731", "createdAt": "2020-09-11T02:38:07Z", "commit": {"oid": "9ff744b360de695535cd76010120d3091bb572ad"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMjozODowN1rOHQMNVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzoyMTowNlrOHQM4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjczOTI4NA==", "bodyText": "nit: Add @NonNull since the super class says this is Nullable, I'm not actually sure which takes precedence in this case when the package is annotated with EverythingIsNonNullByDefault", "url": "https://github.com/apache/druid/pull/10370#discussion_r486739284", "createdAt": "2020-09-11T02:38:07Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/math/expr/ConstantExpr.java", "diffHunk": "@@ -35,6 +35,19 @@\n  */\n abstract class ConstantExpr implements Expr\n {\n+  final ExprType outputType;\n+\n+  protected ConstantExpr(ExprType outputType)\n+  {\n+    this.outputType = outputType;\n+  }\n+\n+  @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ff744b360de695535cd76010120d3091bb572ad"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjczOTczMw==", "bodyText": "note to self: Do we want null to mean 2 things?", "url": "https://github.com/apache/druid/pull/10370#discussion_r486739733", "createdAt": "2020-09-11T02:39:33Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/math/expr/Expr.java", "diffHunk": "@@ -116,16 +116,39 @@ default String getBindingIfIdentifier()\n   void visit(Visitor visitor);\n \n   /**\n-   * Programatically rewrite the {@link Expr} tree with a {@link Shuttle}.Each {@link Expr} is responsible for\n+   * Programatically rewrite the {@link Expr} tree with a {@link Shuttle}. Each {@link Expr} is responsible for\n    * ensuring the {@link Shuttle} can visit all of its {@link Expr} children, as well as updating its children\n    * {@link Expr} with the results from the {@link Shuttle}, before finally visiting an updated form of itself.\n    */\n   Expr visit(Shuttle shuttle);\n \n   /**\n-   * Examine the usage of {@link IdentifierExpr} children of an {@link Expr}, constructing a {@link BindingDetails}\n+   * Examine the usage of {@link IdentifierExpr} children of an {@link Expr}, constructing a {@link BindingAnalysis}\n    */\n-  BindingDetails analyzeInputs();\n+  BindingAnalysis analyzeInputs();\n+\n+  /**\n+   * Given an {@link InputBindingTypes}, compute what the output {@link ExprType} will be for this expression. A return\n+   * value of null indicates that the given type information was not enough to resolve the output type, so the\n+   * expression must be evaluated using default {@link #eval} handling where types are only known after evaluation,\n+   * through {@link ExprEval#type}.\n+   */\n+  @Nullable\n+  default ExprType getOutputType(InputBindingTypes inputTypes)\n+  {\n+    return null;\n+  }\n+\n+  /**\n+   * Mechanism to supply input types for the bindings which will back {@link IdentifierExpr}, to use in the aid of\n+   * inferring the output type of an expression with {@link #getOutputType}. A null value means that either the binding", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ff744b360de695535cd76010120d3091bb572ad"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0MDcxMA==", "bodyText": "nit: I don't think the isArray check is needed\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (elementType != null && !isArray(elementType)) {\n          \n          \n            \n                if (elementType != null) {", "url": "https://github.com/apache/druid/pull/10370#discussion_r486740710", "createdAt": "2020-09-11T02:43:04Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/math/expr/ExprType.java", "diffHunk": "@@ -29,5 +35,119 @@\n   STRING,\n   DOUBLE_ARRAY,\n   LONG_ARRAY,\n-  STRING_ARRAY\n+  STRING_ARRAY;\n+\n+  public boolean isNumeric()\n+  {\n+    return isNumeric(this);\n+  }\n+\n+  /**\n+   * The expression system does not distinguish between {@link ValueType#FLOAT} and {@link ValueType#DOUBLE}, and\n+   * cannot currently handle {@link ValueType#COMPLEX} inputs. This method will convert {@link ValueType#FLOAT} to\n+   * {@link #DOUBLE}, or throw an exception if a {@link ValueType#COMPLEX} is encountered.\n+   *\n+   * @throws IllegalStateException\n+   */\n+  public static ExprType fromValueType(@Nullable ValueType valueType)\n+  {\n+    if (valueType == null) {\n+      throw new IllegalStateException(\"Unsupported unknown value type\");\n+    }\n+    switch (valueType) {\n+      case LONG:\n+        return LONG;\n+      case LONG_ARRAY:\n+        return LONG_ARRAY;\n+      case FLOAT:\n+      case DOUBLE:\n+        return DOUBLE;\n+      case DOUBLE_ARRAY:\n+        return DOUBLE_ARRAY;\n+      case STRING:\n+        return STRING;\n+      case STRING_ARRAY:\n+        return STRING_ARRAY;\n+      case COMPLEX:\n+      default:\n+        throw new ISE(\"Unsupported value type[%s]\", valueType);\n+    }\n+  }\n+\n+  public static boolean isNumeric(ExprType type)\n+  {\n+    return LONG.equals(type) || DOUBLE.equals(type);\n+  }\n+\n+  public static boolean isArray(@Nullable ExprType type)\n+  {\n+    return LONG_ARRAY.equals(type) || DOUBLE_ARRAY.equals(type) || STRING_ARRAY.equals(type);\n+  }\n+\n+  @Nullable\n+  public static ExprType elementType(@Nullable ExprType type)\n+  {\n+    if (type != null && isArray(type)) {\n+      switch (type) {\n+        case STRING_ARRAY:\n+          return STRING;\n+        case LONG_ARRAY:\n+          return LONG;\n+        case DOUBLE_ARRAY:\n+          return DOUBLE;\n+      }\n+    }\n+    return type;\n+  }\n+\n+  @Nullable\n+  public static ExprType asArrayType(@Nullable ExprType elementType)\n+  {\n+    if (elementType != null && !isArray(elementType)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ff744b360de695535cd76010120d3091bb572ad"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0MTAxOA==", "bodyText": "I think we should add a unit test to make sure we cover all the different branches for this. There looks like there's a lot of subtlety in the ordering of the if conditions and It sounds like an important function that many others will rely on working correctly. I think this function should have 100% branch coverage\nI think all the static functions in this class should be unit tested.", "url": "https://github.com/apache/druid/pull/10370#discussion_r486741018", "createdAt": "2020-09-11T02:44:21Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/math/expr/ExprType.java", "diffHunk": "@@ -29,5 +35,119 @@\n   STRING,\n   DOUBLE_ARRAY,\n   LONG_ARRAY,\n-  STRING_ARRAY\n+  STRING_ARRAY;\n+\n+  public boolean isNumeric()\n+  {\n+    return isNumeric(this);\n+  }\n+\n+  /**\n+   * The expression system does not distinguish between {@link ValueType#FLOAT} and {@link ValueType#DOUBLE}, and\n+   * cannot currently handle {@link ValueType#COMPLEX} inputs. This method will convert {@link ValueType#FLOAT} to\n+   * {@link #DOUBLE}, or throw an exception if a {@link ValueType#COMPLEX} is encountered.\n+   *\n+   * @throws IllegalStateException\n+   */\n+  public static ExprType fromValueType(@Nullable ValueType valueType)\n+  {\n+    if (valueType == null) {\n+      throw new IllegalStateException(\"Unsupported unknown value type\");\n+    }\n+    switch (valueType) {\n+      case LONG:\n+        return LONG;\n+      case LONG_ARRAY:\n+        return LONG_ARRAY;\n+      case FLOAT:\n+      case DOUBLE:\n+        return DOUBLE;\n+      case DOUBLE_ARRAY:\n+        return DOUBLE_ARRAY;\n+      case STRING:\n+        return STRING;\n+      case STRING_ARRAY:\n+        return STRING_ARRAY;\n+      case COMPLEX:\n+      default:\n+        throw new ISE(\"Unsupported value type[%s]\", valueType);\n+    }\n+  }\n+\n+  public static boolean isNumeric(ExprType type)\n+  {\n+    return LONG.equals(type) || DOUBLE.equals(type);\n+  }\n+\n+  public static boolean isArray(@Nullable ExprType type)\n+  {\n+    return LONG_ARRAY.equals(type) || DOUBLE_ARRAY.equals(type) || STRING_ARRAY.equals(type);\n+  }\n+\n+  @Nullable\n+  public static ExprType elementType(@Nullable ExprType type)\n+  {\n+    if (type != null && isArray(type)) {\n+      switch (type) {\n+        case STRING_ARRAY:\n+          return STRING;\n+        case LONG_ARRAY:\n+          return LONG;\n+        case DOUBLE_ARRAY:\n+          return DOUBLE;\n+      }\n+    }\n+    return type;\n+  }\n+\n+  @Nullable\n+  public static ExprType asArrayType(@Nullable ExprType elementType)\n+  {\n+    if (elementType != null && !isArray(elementType)) {\n+      switch (elementType) {\n+        case STRING:\n+          return STRING_ARRAY;\n+        case LONG:\n+          return LONG_ARRAY;\n+        case DOUBLE:\n+          return DOUBLE_ARRAY;\n+      }\n+    }\n+    return elementType;\n+  }\n+\n+  /**\n+   * Given 2 'input' types, choose the most appropriate combined type, if possible\n+   */\n+  @Nullable\n+  public static ExprType autoTypeConversion(@Nullable ExprType type, @Nullable ExprType other)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ff744b360de695535cd76010120d3091bb572ad"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0NDkzOQ==", "bodyText": "Why does the not operator need to translate a string to a long?", "url": "https://github.com/apache/druid/pull/10370#discussion_r486744939", "createdAt": "2020-09-11T02:59:32Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/math/expr/UnaryOperatorExpr.java", "diffHunk": "@@ -163,4 +171,15 @@ public String toString()\n   {\n     return StringUtils.format(\"!%s\", expr);\n   }\n+\n+  @Nullable\n+  @Override\n+  public ExprType getOutputType(InputBindingTypes inputTypes)\n+  {\n+    ExprType implicitCast = super.getOutputType(inputTypes);\n+    if (ExprType.STRING.equals(implicitCast)) {\n+      return ExprType.LONG;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ff744b360de695535cd76010120d3091bb572ad"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0ODU4Mg==", "bodyText": "The eval function returns ExprEval.of(null) if the value is a numeric null. It looks like in that case the output type should be ExprType.STRING", "url": "https://github.com/apache/druid/pull/10370#discussion_r486748582", "createdAt": "2020-09-11T03:14:28Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/expression/TimestampCeilExprMacro.java", "diffHunk": "@@ -93,6 +95,13 @@ public Expr visit(Shuttle shuttle)\n       return shuttle.visit(new TimestampCeilExpr(newArgs));\n     }\n \n+    @Nullable\n+    @Override\n+    public ExprType getOutputType(InputBindingTypes inputTypes)\n+    {\n+      return ExprType.LONG;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ff744b360de695535cd76010120d3091bb572ad"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0OTA5Ng==", "bodyText": "nit: You can delete this now that this is the default behavior.", "url": "https://github.com/apache/druid/pull/10370#discussion_r486749096", "createdAt": "2020-09-11T03:16:22Z", "author": {"login": "suneet-s"}, "path": "processing/src/test/java/org/apache/druid/query/expression/IPv4AddressMatchExprMacroTest.java", "diffHunk": "@@ -203,5 +205,12 @@ public Expr visit(Shuttle shuttle)\n     {\n       return null;\n     }\n+\n+    @Nullable\n+    @Override\n+    public ExprType getOutputType(InputBindingTypes inputTypes)\n+    {\n+      return null;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ff744b360de695535cd76010120d3091bb572ad"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0OTMwNA==", "bodyText": "I think this is an accidental change", "url": "https://github.com/apache/druid/pull/10370#discussion_r486749304", "createdAt": "2020-09-11T03:17:15Z", "author": {"login": "suneet-s"}, "path": "server/src/main/java/org/apache/druid/server/lookup/cache/LookupCoordinatorManager.java", "diffHunk": "@@ -518,7 +518,7 @@ private void initializeLookupsConfigWatcher()\n         configManager.set(\n             LOOKUP_CONFIG_KEY,\n             converted,\n-            new AuditInfo(\"autoConversion\", \"autoConversion\", \"127.0.0.1\")\n+            new AuditInfo(\"autoTypeConversion\", \"autoTypeConversion\", \"127.0.0.1\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ff744b360de695535cd76010120d3091bb572ad"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1MDI1Ng==", "bodyText": "Similar problem with ExprEval.of(null)", "url": "https://github.com/apache/druid/pull/10370#discussion_r486750256", "createdAt": "2020-09-11T03:21:06Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/expression/TimestampParseExprMacro.java", "diffHunk": "@@ -100,6 +102,13 @@ public Expr visit(Shuttle shuttle)\n         return shuttle.visit(new TimestampParseExpr(newArg));\n       }\n \n+      @Nullable\n+      @Override\n+      public ExprType getOutputType(InputBindingTypes inputTypes)\n+      {\n+        return ExprType.LONG;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ff744b360de695535cd76010120d3091bb572ad"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NDQ5NTY4", "url": "https://github.com/apache/druid/pull/10370#pullrequestreview-486449568", "createdAt": "2020-09-11T03:30:36Z", "commit": {"oid": "9ff744b360de695535cd76010120d3091bb572ad"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40d0913bc0c44b35bc2cd1dee8bf5bbd660aeecb", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/40d0913bc0c44b35bc2cd1dee8bf5bbd660aeecb", "committedDate": "2020-09-11T05:05:01Z", "message": "more test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MTU2Nzg3", "url": "https://github.com/apache/druid/pull/10370#pullrequestreview-487156787", "createdAt": "2020-09-11T22:26:45Z", "commit": {"oid": "40d0913bc0c44b35bc2cd1dee8bf5bbd660aeecb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d99b3d50cb6f1d851495e3a0aaef1f1caa9bf80", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/5d99b3d50cb6f1d851495e3a0aaef1f1caa9bf80", "committedDate": "2020-09-14T17:04:46Z", "message": "Merge remote-tracking branch 'upstream/master' into expr-output-type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0b76aacee80065622ed04dd857d406a9d45d655", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/b0b76aacee80065622ed04dd857d406a9d45d655", "committedDate": "2020-09-14T19:31:33Z", "message": "add output for contains expr macro, split operation and function auto conversion"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MjE2Njg5", "url": "https://github.com/apache/druid/pull/10370#pullrequestreview-488216689", "createdAt": "2020-09-14T23:12:33Z", "commit": {"oid": "b0b76aacee80065622ed04dd857d406a9d45d655"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3593, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}