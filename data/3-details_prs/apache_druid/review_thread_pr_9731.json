{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NDk4Njc1", "number": 9731, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoyODowM1rOD5huvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMTo1NTowNVrOECysyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjQ4MDYxOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/DimensionIndexer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoyODowM1rOGQ2O7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTo0MzoxOFrOGfZD7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxODk1Ng==", "bodyText": "This javadoc doesn't make a ton of sense to me. Specifically it's not clear to me what \"known dimension is absent in a row\" means or what \"account for any missing rows\" might refer to. I wonder if you could find an improved wording.\nIMO it'd be better to not have this method be default. It makes it too easy to forget to override it when necessary.", "url": "https://github.com/apache/druid/pull/9731#discussion_r420318956", "createdAt": "2020-05-05T18:28:03Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/DimensionIndexer.java", "diffHunk": "@@ -127,6 +127,19 @@\n    */\n   EncodedKeyComponentType processRowValsToUnsortedEncodedKeyComponent(@Nullable Object dimValues, boolean reportParseExceptions);\n \n+  /**\n+   * This method will be called whenever a known dimension is absent in a row to allow an indexer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa4d9dea1252a15878f5d91428d994f2a0a9d4cb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2OTY0Nw==", "bodyText": "I modified the javadocs, hopefully they are a bit clearer, and removed the default implementation", "url": "https://github.com/apache/druid/pull/9731#discussion_r435569647", "createdAt": "2020-06-04T21:43:18Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/DimensionIndexer.java", "diffHunk": "@@ -127,6 +127,19 @@\n    */\n   EncodedKeyComponentType processRowValsToUnsortedEncodedKeyComponent(@Nullable Object dimValues, boolean reportParseExceptions);\n \n+  /**\n+   * This method will be called whenever a known dimension is absent in a row to allow an indexer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxODk1Ng=="}, "originalCommit": {"oid": "fa4d9dea1252a15878f5d91428d994f2a0a9d4cb"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjU2ODU0OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilities.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODo1MjowMlrOGQ3G0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDoyODoyNlrOGavKaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzMzI2Ng==", "bodyText": "The boolean here is tough for me to wrap my head around: when looking at method calls like .complete(true) and .complete(false), it looks like it's describing whether or not things are complete. I think it would be better to use a two-valued enum, so the call would be .makeComplete(UNKNOWN_TO_FALSE) or .makeComplete(UNKNOWN_TO_TRUE).", "url": "https://github.com/apache/druid/pull/9731#discussion_r420333266", "createdAt": "2020-05-05T18:52:02Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilities.java", "diffHunk": "@@ -57,6 +50,21 @@ public boolean isTrue()\n       return this == TRUE;\n     }\n \n+    public boolean isMaybeTrue()\n+    {\n+      return isTrue() || isUnknown();\n+    }\n+\n+    public boolean isUnknown()\n+    {\n+      return this == UNKNOWN;\n+    }\n+\n+    public Capable complete(boolean convertUnknownToTrue)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa4d9dea1252a15878f5d91428d994f2a0a9d4cb"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4ODg3Mg==", "bodyText": "I don't think it needs another enum, if anything it could just accept a Capable to use for the default value, though I should enforce that it cannot be unknown. If i rename to coerceIfUnknown or something maybe it would also be more obvious what the purpose is.", "url": "https://github.com/apache/druid/pull/9731#discussion_r430688872", "createdAt": "2020-05-26T20:28:26Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilities.java", "diffHunk": "@@ -57,6 +50,21 @@ public boolean isTrue()\n       return this == TRUE;\n     }\n \n+    public boolean isMaybeTrue()\n+    {\n+      return isTrue() || isUnknown();\n+    }\n+\n+    public boolean isUnknown()\n+    {\n+      return this == UNKNOWN;\n+    }\n+\n+    public Capable complete(boolean convertUnknownToTrue)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzMzI2Ng=="}, "originalCommit": {"oid": "fa4d9dea1252a15878f5d91428d994f2a0a9d4cb"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjU4NjE0OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilitiesImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODo1NzoyNlrOGQ3SaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTo0NDo1OVrOGfZGrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzNjIzMg==", "bodyText": "createSimpleNumericCapabilities?", "url": "https://github.com/apache/druid/pull/9731#discussion_r420336232", "createdAt": "2020-05-05T18:57:26Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilitiesImpl.java", "diffHunk": "@@ -31,23 +31,66 @@\n  */\n public class ColumnCapabilitiesImpl implements ColumnCapabilities\n {\n-  public static ColumnCapabilitiesImpl copyOf(final ColumnCapabilities other)\n+  public static ColumnCapabilitiesImpl copyOf(@Nullable final ColumnCapabilities other)\n   {\n     final ColumnCapabilitiesImpl capabilities = new ColumnCapabilitiesImpl();\n-    capabilities.merge(other);\n-    capabilities.setFilterable(other.isFilterable());\n-    capabilities.setIsComplete(other.isComplete());\n+    if (other != null) {\n+      capabilities.type = other.getType();\n+      capabilities.dictionaryEncoded = other.isDictionaryEncoded();\n+      capabilities.runLengthEncoded = other.isRunLengthEncoded();\n+      capabilities.hasInvertedIndexes = other.hasBitmapIndexes();\n+      capabilities.hasSpatialIndexes = other.hasSpatialIndexes();\n+      capabilities.hasMultipleValues = other.hasMultipleValues();\n+      capabilities.dictionaryValuesSorted = other.areDictionaryValuesSorted();\n+      capabilities.dictionaryValuesUnique = other.areDictionaryValuesUnique();\n+      capabilities.filterable = other.isFilterable();\n+    }\n     return capabilities;\n   }\n \n+  /**\n+   * Used at indexing time to finalize all {@link ColumnCapabilities.Capable#UNKNOWN} values to\n+   * {@link ColumnCapabilities.Capable#FALSE}, in order to present a snapshot of the state of the this column\n+   */\n+  @Nullable\n+  public static ColumnCapabilitiesImpl complete(\n+      @Nullable final ColumnCapabilities capabilities,\n+      boolean convertUnknownToTrue\n+  )\n+  {\n+    if (capabilities == null) {\n+      return null;\n+    }\n+    ColumnCapabilitiesImpl copy = copyOf(capabilities);\n+    copy.hasMultipleValues = copy.hasMultipleValues.complete(convertUnknownToTrue);\n+    copy.dictionaryValuesSorted = copy.dictionaryValuesSorted.complete(convertUnknownToTrue);\n+    copy.dictionaryValuesUnique = copy.dictionaryValuesUnique.complete(convertUnknownToTrue);\n+    return copy;\n+  }\n+\n+\n+  /**\n+   * Create a no frills, simple column with {@link ValueType} set and everything else false\n+   */\n+  public static ColumnCapabilitiesImpl createSimpleNumericColumn(ValueType valueType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa4d9dea1252a15878f5d91428d994f2a0a9d4cb"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3MDM1MQ==", "bodyText": "renamed, except to createSimpleNumericColumnCapabilities because i wasn't paying enough attention to the suggestion i guess, but also ok i think \ud83e\udd37", "url": "https://github.com/apache/druid/pull/9731#discussion_r435570351", "createdAt": "2020-06-04T21:44:59Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilitiesImpl.java", "diffHunk": "@@ -31,23 +31,66 @@\n  */\n public class ColumnCapabilitiesImpl implements ColumnCapabilities\n {\n-  public static ColumnCapabilitiesImpl copyOf(final ColumnCapabilities other)\n+  public static ColumnCapabilitiesImpl copyOf(@Nullable final ColumnCapabilities other)\n   {\n     final ColumnCapabilitiesImpl capabilities = new ColumnCapabilitiesImpl();\n-    capabilities.merge(other);\n-    capabilities.setFilterable(other.isFilterable());\n-    capabilities.setIsComplete(other.isComplete());\n+    if (other != null) {\n+      capabilities.type = other.getType();\n+      capabilities.dictionaryEncoded = other.isDictionaryEncoded();\n+      capabilities.runLengthEncoded = other.isRunLengthEncoded();\n+      capabilities.hasInvertedIndexes = other.hasBitmapIndexes();\n+      capabilities.hasSpatialIndexes = other.hasSpatialIndexes();\n+      capabilities.hasMultipleValues = other.hasMultipleValues();\n+      capabilities.dictionaryValuesSorted = other.areDictionaryValuesSorted();\n+      capabilities.dictionaryValuesUnique = other.areDictionaryValuesUnique();\n+      capabilities.filterable = other.isFilterable();\n+    }\n     return capabilities;\n   }\n \n+  /**\n+   * Used at indexing time to finalize all {@link ColumnCapabilities.Capable#UNKNOWN} values to\n+   * {@link ColumnCapabilities.Capable#FALSE}, in order to present a snapshot of the state of the this column\n+   */\n+  @Nullable\n+  public static ColumnCapabilitiesImpl complete(\n+      @Nullable final ColumnCapabilities capabilities,\n+      boolean convertUnknownToTrue\n+  )\n+  {\n+    if (capabilities == null) {\n+      return null;\n+    }\n+    ColumnCapabilitiesImpl copy = copyOf(capabilities);\n+    copy.hasMultipleValues = copy.hasMultipleValues.complete(convertUnknownToTrue);\n+    copy.dictionaryValuesSorted = copy.dictionaryValuesSorted.complete(convertUnknownToTrue);\n+    copy.dictionaryValuesUnique = copy.dictionaryValuesUnique.complete(convertUnknownToTrue);\n+    return copy;\n+  }\n+\n+\n+  /**\n+   * Create a no frills, simple column with {@link ValueType} set and everything else false\n+   */\n+  public static ColumnCapabilitiesImpl createSimpleNumericColumn(ValueType valueType)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzNjIzMg=="}, "originalCommit": {"oid": "fa4d9dea1252a15878f5d91428d994f2a0a9d4cb"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjc0NjQwOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/ColumnProcessors.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOTo0Mzo1MFrOGQ428A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOTo0Mzo1MFrOGQ428A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM2MTk2OA==", "bodyText": "Nice.", "url": "https://github.com/apache/druid/pull/9731#discussion_r420361968", "createdAt": "2020-05-05T19:43:50Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/ColumnProcessors.java", "diffHunk": "@@ -197,6 +197,6 @@\n    */\n   private static boolean mayBeMultiValue(@Nullable final ColumnCapabilities capabilities)\n   {\n-    return capabilities == null || !capabilities.isComplete() || capabilities.hasMultipleValues();\n+    return capabilities == null || capabilities.hasMultipleValues().isMaybeTrue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa4d9dea1252a15878f5d91428d994f2a0a9d4cb"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjc1MDE0OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/ColumnSelectorBitmapIndexSelector.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOTo0NDo0NVrOGQ45Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzoyNzoyN1rOGfbSZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM2MjUzOA==", "bodyText": "IMO, better if this returns a Capable. Then the caller can decide what to do with unknowns.", "url": "https://github.com/apache/druid/pull/9731#discussion_r420362538", "createdAt": "2020-05-05T19:44:45Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/ColumnSelectorBitmapIndexSelector.java", "diffHunk": "@@ -160,11 +160,11 @@ public void close() throws IOException\n   public boolean hasMultipleValues(final String dimension)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa4d9dea1252a15878f5d91428d994f2a0a9d4cb"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI1NTMzNQ==", "bodyText": "This appears to only be used in ExpressionFilter currently, which is one of the few things that has to deal with unknowns, but if we want to do this maybe we should pull the definition of Capable outside of the ColumnCapabilities class to be standalone.", "url": "https://github.com/apache/druid/pull/9731#discussion_r428255335", "createdAt": "2020-05-20T19:24:32Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/ColumnSelectorBitmapIndexSelector.java", "diffHunk": "@@ -160,11 +160,11 @@ public void close() throws IOException\n   public boolean hasMultipleValues(final String dimension)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM2MjUzOA=="}, "originalCommit": {"oid": "fa4d9dea1252a15878f5d91428d994f2a0a9d4cb"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3NTA0Mw==", "bodyText": "IMO, it's ok to return a Capable without it being a standalone class. Like, calling it ColumnCapabilities.Capable isn't that weird and is ok I think.\nAnother alternative is to clarify the behavior of the function through javadocs and, perhaps, changing its name to be more explicit about what it does.", "url": "https://github.com/apache/druid/pull/9731#discussion_r435575043", "createdAt": "2020-06-04T21:56:17Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/ColumnSelectorBitmapIndexSelector.java", "diffHunk": "@@ -160,11 +160,11 @@ public void close() throws IOException\n   public boolean hasMultipleValues(final String dimension)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM2MjUzOA=="}, "originalCommit": {"oid": "fa4d9dea1252a15878f5d91428d994f2a0a9d4cb"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwNjExOQ==", "bodyText": "Modified to return ColumnCapabilities.Capable", "url": "https://github.com/apache/druid/pull/9731#discussion_r435606119", "createdAt": "2020-06-04T23:27:27Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/ColumnSelectorBitmapIndexSelector.java", "diffHunk": "@@ -160,11 +160,11 @@ public void close() throws IOException\n   public boolean hasMultipleValues(final String dimension)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM2MjUzOA=="}, "originalCommit": {"oid": "fa4d9dea1252a15878f5d91428d994f2a0a9d4cb"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzI3MzU4OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/DimensionHandlerUtils.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMjoyOToyMFrOGQ95Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjozMToxOVrOGfaLYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ0NDQ4Mg==", "bodyText": "Why this change?\nAs I understand it, the previous behavior is roughly equivalent to returning unknown for HMV. (Because it would return false, but complete is also false.)", "url": "https://github.com/apache/druid/pull/9731#discussion_r420444482", "createdAt": "2020-05-05T22:29:20Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/DimensionHandlerUtils.java", "diffHunk": "@@ -60,7 +60,8 @@\n                                   .setDictionaryEncoded(false)\n                                   .setDictionaryValuesUnique(false)\n                                   .setDictionaryValuesSorted(false)\n-                                  .setHasBitmapIndexes(false);\n+                                  .setHasBitmapIndexes(false)\n+                                  .setHasMultipleValues(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa4d9dea1252a15878f5d91428d994f2a0a9d4cb"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUyODgwNw==", "bodyText": "The issue with this is that it is used when column capabilities don't exist by getEffectiveCapabilities, and makeVectorProcessor was not in fact checking if it was complete, so the other change in this file to check isMaybeTrue causes a ton of test failures because it now it tries to make multi-value dimension processors/selectors for these columns. We could leave it as unknown, but change makeVectorProcessor to isTrue, but that doesn't seem correct either. Ideally, we remove these default capabilities entirely, but we aren't quite there yet I think.", "url": "https://github.com/apache/druid/pull/9731#discussion_r435528807", "createdAt": "2020-06-04T20:26:32Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/DimensionHandlerUtils.java", "diffHunk": "@@ -60,7 +60,8 @@\n                                   .setDictionaryEncoded(false)\n                                   .setDictionaryValuesUnique(false)\n                                   .setDictionaryValuesSorted(false)\n-                                  .setHasBitmapIndexes(false);\n+                                  .setHasBitmapIndexes(false)\n+                                  .setHasMultipleValues(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ0NDQ4Mg=="}, "originalCommit": {"oid": "fa4d9dea1252a15878f5d91428d994f2a0a9d4cb"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2Njk3MA==", "bodyText": "Since null capabilities for vector selectors means unambiguously that the column doesn't exist, I changed this back to leaving multi-value as unknown in favor of checking for this condition in makeVectorProcessor, which I think is the best thing to do for now", "url": "https://github.com/apache/druid/pull/9731#discussion_r435566970", "createdAt": "2020-06-04T21:36:49Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/DimensionHandlerUtils.java", "diffHunk": "@@ -60,7 +60,8 @@\n                                   .setDictionaryEncoded(false)\n                                   .setDictionaryValuesUnique(false)\n                                   .setDictionaryValuesSorted(false)\n-                                  .setHasBitmapIndexes(false);\n+                                  .setHasBitmapIndexes(false)\n+                                  .setHasMultipleValues(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ0NDQ4Mg=="}, "originalCommit": {"oid": "fa4d9dea1252a15878f5d91428d994f2a0a9d4cb"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4NzkzNg==", "bodyText": "OK, that makes sense.", "url": "https://github.com/apache/druid/pull/9731#discussion_r435587936", "createdAt": "2020-06-04T22:31:19Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/DimensionHandlerUtils.java", "diffHunk": "@@ -60,7 +60,8 @@\n                                   .setDictionaryEncoded(false)\n                                   .setDictionaryValuesUnique(false)\n                                   .setDictionaryValuesSorted(false)\n-                                  .setHasBitmapIndexes(false);\n+                                  .setHasBitmapIndexes(false)\n+                                  .setHasMultipleValues(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ0NDQ4Mg=="}, "originalCommit": {"oid": "fa4d9dea1252a15878f5d91428d994f2a0a9d4cb"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU5NzY3OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilitiesImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo1ODo0OVrOGRA0og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTo0MTowOFrOGfZAfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5MjQ1MA==", "bodyText": "Is this ever called with convertUnknownToTrue == true? If not, it could be named better.", "url": "https://github.com/apache/druid/pull/9731#discussion_r420492450", "createdAt": "2020-05-06T00:58:49Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilitiesImpl.java", "diffHunk": "@@ -31,23 +31,66 @@\n  */\n public class ColumnCapabilitiesImpl implements ColumnCapabilities\n {\n-  public static ColumnCapabilitiesImpl copyOf(final ColumnCapabilities other)\n+  public static ColumnCapabilitiesImpl copyOf(@Nullable final ColumnCapabilities other)\n   {\n     final ColumnCapabilitiesImpl capabilities = new ColumnCapabilitiesImpl();\n-    capabilities.merge(other);\n-    capabilities.setFilterable(other.isFilterable());\n-    capabilities.setIsComplete(other.isComplete());\n+    if (other != null) {\n+      capabilities.type = other.getType();\n+      capabilities.dictionaryEncoded = other.isDictionaryEncoded();\n+      capabilities.runLengthEncoded = other.isRunLengthEncoded();\n+      capabilities.hasInvertedIndexes = other.hasBitmapIndexes();\n+      capabilities.hasSpatialIndexes = other.hasSpatialIndexes();\n+      capabilities.hasMultipleValues = other.hasMultipleValues();\n+      capabilities.dictionaryValuesSorted = other.areDictionaryValuesSorted();\n+      capabilities.dictionaryValuesUnique = other.areDictionaryValuesUnique();\n+      capabilities.filterable = other.isFilterable();\n+    }\n     return capabilities;\n   }\n \n+  /**\n+   * Used at indexing time to finalize all {@link ColumnCapabilities.Capable#UNKNOWN} values to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa4d9dea1252a15878f5d91428d994f2a0a9d4cb"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2ODc2Nw==", "bodyText": "It wasn't when you left this comment, but is now, I renamed the method to snapshot and the Capable enum method to coerceUnknownToBoolean to better relay it's usage", "url": "https://github.com/apache/druid/pull/9731#discussion_r435568767", "createdAt": "2020-06-04T21:41:08Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilitiesImpl.java", "diffHunk": "@@ -31,23 +31,66 @@\n  */\n public class ColumnCapabilitiesImpl implements ColumnCapabilities\n {\n-  public static ColumnCapabilitiesImpl copyOf(final ColumnCapabilities other)\n+  public static ColumnCapabilitiesImpl copyOf(@Nullable final ColumnCapabilities other)\n   {\n     final ColumnCapabilitiesImpl capabilities = new ColumnCapabilitiesImpl();\n-    capabilities.merge(other);\n-    capabilities.setFilterable(other.isFilterable());\n-    capabilities.setIsComplete(other.isComplete());\n+    if (other != null) {\n+      capabilities.type = other.getType();\n+      capabilities.dictionaryEncoded = other.isDictionaryEncoded();\n+      capabilities.runLengthEncoded = other.isRunLengthEncoded();\n+      capabilities.hasInvertedIndexes = other.hasBitmapIndexes();\n+      capabilities.hasSpatialIndexes = other.hasSpatialIndexes();\n+      capabilities.hasMultipleValues = other.hasMultipleValues();\n+      capabilities.dictionaryValuesSorted = other.areDictionaryValuesSorted();\n+      capabilities.dictionaryValuesUnique = other.areDictionaryValuesUnique();\n+      capabilities.filterable = other.isFilterable();\n+    }\n     return capabilities;\n   }\n \n+  /**\n+   * Used at indexing time to finalize all {@link ColumnCapabilities.Capable#UNKNOWN} values to", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5MjQ1MA=="}, "originalCommit": {"oid": "fa4d9dea1252a15878f5d91428d994f2a0a9d4cb"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU5ODk5OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/incremental/IncrementalIndexStorageAdapter.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo1OToyNlrOGRA1Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDozNTo1MFrOGavakw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5MjYxOQ==", "bodyText": "Why false here instead of true?\nMy understanding is that the HMV capability in the IncrementalIndex is now either going to be UNKNOWN (where it starts) or TRUE (if there are actually MVs). So UNKNOWN means we haven't seen any MV inputs yet.\nBut for the reason mentioned in the comment you deleted (the behavior of StringDimensionIndexer.IndexerDimensionSelector's getRow method), can't we get empty arrays from dimension selectors when querying IncrementalIndexes, even if the capability is UNKNOWN? So shouldn't we treat an unknown here as true rather than false?\nI must be missing something, since the tests are passing, assuming we have tests for this\u2026", "url": "https://github.com/apache/druid/pull/9731#discussion_r420492619", "createdAt": "2020-05-06T00:59:26Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/incremental/IncrementalIndexStorageAdapter.java", "diffHunk": "@@ -142,24 +141,8 @@ public Comparable getMaxValue(String column)\n   @Override\n   public ColumnCapabilities getColumnCapabilities(String column)\n   {\n-    // Different from index.getCapabilities because, in a way, IncrementalIndex's string-typed dimensions\n-    // are always potentially multi-valued at query time. (Missing / null values for a row can potentially be\n-    // represented by an empty array; see StringDimensionIndexer.IndexerDimensionSelector's getRow method.)\n-    //\n-    // We don't want to represent this as having-multiple-values in index.getCapabilities, because that's used\n-    // at index-persisting time to determine if we need a multi-value column or not. However, that means we\n-    // need to tweak the capabilities here in the StorageAdapter (a query-time construct), so at query time\n-    // they appear multi-valued.\n-\n-    final ColumnCapabilities capabilitiesFromIndex = index.getCapabilities(column);\n-    final IncrementalIndex.DimensionDesc dimensionDesc = index.getDimension(column);\n-    if (dimensionDesc != null && dimensionDesc.getCapabilities().getType() == ValueType.STRING) {\n-      final ColumnCapabilitiesImpl retVal = ColumnCapabilitiesImpl.copyOf(capabilitiesFromIndex);\n-      retVal.setHasMultipleValues(true);\n-      return retVal;\n-    } else {\n-      return capabilitiesFromIndex;\n-    }\n+    // snapshot the current state\n+    return ColumnCapabilitiesImpl.complete(index.getCapabilities(column), false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa4d9dea1252a15878f5d91428d994f2a0a9d4cb"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI1NDg5NQ==", "bodyText": "StringDimensionIndexer.IndexerDimensionSelector will not have hasMultipleValues set until it processes a multi-value row, is there a potential race between the time we look at capabilities that it doesn't yet have a multi-value row, but at execution time the row has appeared and so it will be set and will return an empty array instead of an array with a null?", "url": "https://github.com/apache/druid/pull/9731#discussion_r428254895", "createdAt": "2020-05-20T19:23:37Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/incremental/IncrementalIndexStorageAdapter.java", "diffHunk": "@@ -142,24 +141,8 @@ public Comparable getMaxValue(String column)\n   @Override\n   public ColumnCapabilities getColumnCapabilities(String column)\n   {\n-    // Different from index.getCapabilities because, in a way, IncrementalIndex's string-typed dimensions\n-    // are always potentially multi-valued at query time. (Missing / null values for a row can potentially be\n-    // represented by an empty array; see StringDimensionIndexer.IndexerDimensionSelector's getRow method.)\n-    //\n-    // We don't want to represent this as having-multiple-values in index.getCapabilities, because that's used\n-    // at index-persisting time to determine if we need a multi-value column or not. However, that means we\n-    // need to tweak the capabilities here in the StorageAdapter (a query-time construct), so at query time\n-    // they appear multi-valued.\n-\n-    final ColumnCapabilities capabilitiesFromIndex = index.getCapabilities(column);\n-    final IncrementalIndex.DimensionDesc dimensionDesc = index.getDimension(column);\n-    if (dimensionDesc != null && dimensionDesc.getCapabilities().getType() == ValueType.STRING) {\n-      final ColumnCapabilitiesImpl retVal = ColumnCapabilitiesImpl.copyOf(capabilitiesFromIndex);\n-      retVal.setHasMultipleValues(true);\n-      return retVal;\n-    } else {\n-      return capabilitiesFromIndex;\n-    }\n+    // snapshot the current state\n+    return ColumnCapabilitiesImpl.complete(index.getCapabilities(column), false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5MjYxOQ=="}, "originalCommit": {"oid": "fa4d9dea1252a15878f5d91428d994f2a0a9d4cb"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg0MDU3MA==", "bodyText": "Yes, that's what I was thinking: HMV could be set at any time, including between cap-fetch and selector-creation.\nBy the way, it looks like StringDimensionIndexer's handling of hasMultipleValues is not thread-safe (it's updated by the indexing thread and read by querying threads without locking). It'd be good to fix that too.", "url": "https://github.com/apache/druid/pull/9731#discussion_r428840570", "createdAt": "2020-05-21T18:39:32Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/incremental/IncrementalIndexStorageAdapter.java", "diffHunk": "@@ -142,24 +141,8 @@ public Comparable getMaxValue(String column)\n   @Override\n   public ColumnCapabilities getColumnCapabilities(String column)\n   {\n-    // Different from index.getCapabilities because, in a way, IncrementalIndex's string-typed dimensions\n-    // are always potentially multi-valued at query time. (Missing / null values for a row can potentially be\n-    // represented by an empty array; see StringDimensionIndexer.IndexerDimensionSelector's getRow method.)\n-    //\n-    // We don't want to represent this as having-multiple-values in index.getCapabilities, because that's used\n-    // at index-persisting time to determine if we need a multi-value column or not. However, that means we\n-    // need to tweak the capabilities here in the StorageAdapter (a query-time construct), so at query time\n-    // they appear multi-valued.\n-\n-    final ColumnCapabilities capabilitiesFromIndex = index.getCapabilities(column);\n-    final IncrementalIndex.DimensionDesc dimensionDesc = index.getDimension(column);\n-    if (dimensionDesc != null && dimensionDesc.getCapabilities().getType() == ValueType.STRING) {\n-      final ColumnCapabilitiesImpl retVal = ColumnCapabilitiesImpl.copyOf(capabilitiesFromIndex);\n-      retVal.setHasMultipleValues(true);\n-      return retVal;\n-    } else {\n-      return capabilitiesFromIndex;\n-    }\n+    // snapshot the current state\n+    return ColumnCapabilitiesImpl.complete(index.getCapabilities(column), false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5MjYxOQ=="}, "originalCommit": {"oid": "fa4d9dea1252a15878f5d91428d994f2a0a9d4cb"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5MzAxMQ==", "bodyText": "Ok, given the race condition I guess I have to revert this behavior so queries use the fake capabilities and to fix the bug for segment metadata based schema discovery to plumb special the actual capabilities to segment metadata queries. Maybe longer term it would be better if we could snapshot the capabilities at the time we query and make a cursor to only read the rows that were available at the time the capabilities were fetched and give those to the string indexer so that we can have more performant queries on incremental indexes at the cost of missing a few rows.", "url": "https://github.com/apache/druid/pull/9731#discussion_r430693011", "createdAt": "2020-05-26T20:35:50Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/incremental/IncrementalIndexStorageAdapter.java", "diffHunk": "@@ -142,24 +141,8 @@ public Comparable getMaxValue(String column)\n   @Override\n   public ColumnCapabilities getColumnCapabilities(String column)\n   {\n-    // Different from index.getCapabilities because, in a way, IncrementalIndex's string-typed dimensions\n-    // are always potentially multi-valued at query time. (Missing / null values for a row can potentially be\n-    // represented by an empty array; see StringDimensionIndexer.IndexerDimensionSelector's getRow method.)\n-    //\n-    // We don't want to represent this as having-multiple-values in index.getCapabilities, because that's used\n-    // at index-persisting time to determine if we need a multi-value column or not. However, that means we\n-    // need to tweak the capabilities here in the StorageAdapter (a query-time construct), so at query time\n-    // they appear multi-valued.\n-\n-    final ColumnCapabilities capabilitiesFromIndex = index.getCapabilities(column);\n-    final IncrementalIndex.DimensionDesc dimensionDesc = index.getDimension(column);\n-    if (dimensionDesc != null && dimensionDesc.getCapabilities().getType() == ValueType.STRING) {\n-      final ColumnCapabilitiesImpl retVal = ColumnCapabilitiesImpl.copyOf(capabilitiesFromIndex);\n-      retVal.setHasMultipleValues(true);\n-      return retVal;\n-    } else {\n-      return capabilitiesFromIndex;\n-    }\n+    // snapshot the current state\n+    return ColumnCapabilitiesImpl.complete(index.getCapabilities(column), false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5MjYxOQ=="}, "originalCommit": {"oid": "fa4d9dea1252a15878f5d91428d994f2a0a9d4cb"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzYzMjcyOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/ColumnSelectorBitmapIndexSelector.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMTo1NTowNVrOGfd4QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNTo0NTo1MlrOGfhIqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0ODU3Ng==", "bodyText": "If the column holder is null then we should be able to safely return Capable.TRUE, because getBitmapIndex will return a bitmap index as if the column were full of nulls. This will enable optimizations in ExpressionFilter when the expression is based on a nonexistent column.", "url": "https://github.com/apache/druid/pull/9731#discussion_r435648576", "createdAt": "2020-06-05T01:55:05Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/ColumnSelectorBitmapIndexSelector.java", "diffHunk": "@@ -157,14 +158,16 @@ public void close() throws IOException\n   }\n \n   @Override\n-  public boolean hasMultipleValues(final String dimension)\n+  public ColumnCapabilities.Capable hasMultipleValues(final String dimension)\n   {\n     if (isVirtualColumn(dimension)) {\n       return virtualColumns.getVirtualColumn(dimension).capabilities(dimension).hasMultipleValues();\n     }\n \n     final ColumnHolder columnHolder = index.getColumnHolder(dimension);\n-    return columnHolder != null && columnHolder.getCapabilities().hasMultipleValues();\n+    return columnHolder != null\n+           ? columnHolder.getCapabilities().hasMultipleValues()\n+           : ColumnCapabilities.Capable.UNKNOWN;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dc8754d4363e276b5502f355357a039a5b769b6"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY2Njg0Nw==", "bodyText": "Ah, I changed ExpressionFilter to check isMaybeTrue to handle unknown, so i think unknown is fine here.", "url": "https://github.com/apache/druid/pull/9731#discussion_r435666847", "createdAt": "2020-06-05T03:10:36Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/ColumnSelectorBitmapIndexSelector.java", "diffHunk": "@@ -157,14 +158,16 @@ public void close() throws IOException\n   }\n \n   @Override\n-  public boolean hasMultipleValues(final String dimension)\n+  public ColumnCapabilities.Capable hasMultipleValues(final String dimension)\n   {\n     if (isVirtualColumn(dimension)) {\n       return virtualColumns.getVirtualColumn(dimension).capabilities(dimension).hasMultipleValues();\n     }\n \n     final ColumnHolder columnHolder = index.getColumnHolder(dimension);\n-    return columnHolder != null && columnHolder.getCapabilities().hasMultipleValues();\n+    return columnHolder != null\n+           ? columnHolder.getCapabilities().hasMultipleValues()\n+           : ColumnCapabilities.Capable.UNKNOWN;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0ODU3Ng=="}, "originalCommit": {"oid": "7dc8754d4363e276b5502f355357a039a5b769b6"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY2OTIzMg==", "bodyText": "I think the code you have is correct, but it's not going to do the optimized path (return supportsBitmapIndex = true) for a missing column, even though it would be okay to do it.", "url": "https://github.com/apache/druid/pull/9731#discussion_r435669232", "createdAt": "2020-06-05T03:20:56Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/ColumnSelectorBitmapIndexSelector.java", "diffHunk": "@@ -157,14 +158,16 @@ public void close() throws IOException\n   }\n \n   @Override\n-  public boolean hasMultipleValues(final String dimension)\n+  public ColumnCapabilities.Capable hasMultipleValues(final String dimension)\n   {\n     if (isVirtualColumn(dimension)) {\n       return virtualColumns.getVirtualColumn(dimension).capabilities(dimension).hasMultipleValues();\n     }\n \n     final ColumnHolder columnHolder = index.getColumnHolder(dimension);\n-    return columnHolder != null && columnHolder.getCapabilities().hasMultipleValues();\n+    return columnHolder != null\n+           ? columnHolder.getCapabilities().hasMultipleValues()\n+           : ColumnCapabilities.Capable.UNKNOWN;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0ODU3Ng=="}, "originalCommit": {"oid": "7dc8754d4363e276b5502f355357a039a5b769b6"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3NzU5MA==", "bodyText": "Ah, I see what you are saying, but in your first comment you meant Capable.FALSE, so that this code path is taken to use the empty bitmap. Updated the PR and left a comment in the code to explain what is going on there", "url": "https://github.com/apache/druid/pull/9731#discussion_r435677590", "createdAt": "2020-06-05T04:00:42Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/ColumnSelectorBitmapIndexSelector.java", "diffHunk": "@@ -157,14 +158,16 @@ public void close() throws IOException\n   }\n \n   @Override\n-  public boolean hasMultipleValues(final String dimension)\n+  public ColumnCapabilities.Capable hasMultipleValues(final String dimension)\n   {\n     if (isVirtualColumn(dimension)) {\n       return virtualColumns.getVirtualColumn(dimension).capabilities(dimension).hasMultipleValues();\n     }\n \n     final ColumnHolder columnHolder = index.getColumnHolder(dimension);\n-    return columnHolder != null && columnHolder.getCapabilities().hasMultipleValues();\n+    return columnHolder != null\n+           ? columnHolder.getCapabilities().hasMultipleValues()\n+           : ColumnCapabilities.Capable.UNKNOWN;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0ODU3Ng=="}, "originalCommit": {"oid": "7dc8754d4363e276b5502f355357a039a5b769b6"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcwMTkyOQ==", "bodyText": "Sorry, you're right, I meant Capable.FALSE. Thanks.", "url": "https://github.com/apache/druid/pull/9731#discussion_r435701929", "createdAt": "2020-06-05T05:45:52Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/ColumnSelectorBitmapIndexSelector.java", "diffHunk": "@@ -157,14 +158,16 @@ public void close() throws IOException\n   }\n \n   @Override\n-  public boolean hasMultipleValues(final String dimension)\n+  public ColumnCapabilities.Capable hasMultipleValues(final String dimension)\n   {\n     if (isVirtualColumn(dimension)) {\n       return virtualColumns.getVirtualColumn(dimension).capabilities(dimension).hasMultipleValues();\n     }\n \n     final ColumnHolder columnHolder = index.getColumnHolder(dimension);\n-    return columnHolder != null && columnHolder.getCapabilities().hasMultipleValues();\n+    return columnHolder != null\n+           ? columnHolder.getCapabilities().hasMultipleValues()\n+           : ColumnCapabilities.Capable.UNKNOWN;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0ODU3Ng=="}, "originalCommit": {"oid": "7dc8754d4363e276b5502f355357a039a5b769b6"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2578, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}