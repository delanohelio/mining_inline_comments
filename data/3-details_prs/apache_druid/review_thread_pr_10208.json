{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MTQ4OTY5", "number": 10208, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODo0Mjo1MFrOESgugA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjoxODoxMlrOETBX1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODQ2MDE2OnYy", "diffSide": "RIGHT", "path": "docs/configuration/index.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODo0Mjo1MFrOG3u8YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzoyNToxNVrOG33C4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5Mzk4NQ==", "bodyText": "Suggest adding a description of the precedence chain here, like what you have in the PR description:\n\nThe order of precedence is as follow: hard_coded_default_value <- runtime_properties <- query_context_parameter", "url": "https://github.com/apache/druid/pull/10208#discussion_r461093985", "createdAt": "2020-07-27T18:42:50Z", "author": {"login": "jon-wei"}, "path": "docs/configuration/index.md", "diffHunk": "@@ -1769,14 +1769,11 @@ If there is an L1 miss and L2 hit, it will also populate L1.\n \n This section describes configurations that control behavior of Druid's query types, applicable to Broker, Historical, and MiddleManager processes.\n \n-### Query vectorization config\n+### Overriding default query context values\n \n-The following configurations are to set the default behavior for query vectorization.\n-\n-|Property|Description|Default|\n-|--------|-----------|-------|\n-|`druid.query.vectorize`|See [Vectorization parameters](../querying/query-context.html#vectorization-parameters) for details. This value can be overridden by `vectorize` in the query contexts.|`true`|\n-|`druid.query.vectorSize`|See [Vectorization parameters](../querying/query-context.html#vectorization-parameters) for details. This value can be overridden by `vectorSize` in the query contexts.|`512`|\n+Any [Query Context General Parameter](../querying/query-context.html#general-parameters) default value \n+can be overridden by setting runtime property in the format of `druid.query.override.default.context.{query_context_key}`. \n+Note that the runtime property value can be overridden if value for the same key is explicitly specify in the query contexts.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d8771adc84e9a81416004f01595189c1484a460"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNjcyMw==", "bodyText": "Done", "url": "https://github.com/apache/druid/pull/10208#discussion_r461226723", "createdAt": "2020-07-27T23:25:15Z", "author": {"login": "maytasm"}, "path": "docs/configuration/index.md", "diffHunk": "@@ -1769,14 +1769,11 @@ If there is an L1 miss and L2 hit, it will also populate L1.\n \n This section describes configurations that control behavior of Druid's query types, applicable to Broker, Historical, and MiddleManager processes.\n \n-### Query vectorization config\n+### Overriding default query context values\n \n-The following configurations are to set the default behavior for query vectorization.\n-\n-|Property|Description|Default|\n-|--------|-----------|-------|\n-|`druid.query.vectorize`|See [Vectorization parameters](../querying/query-context.html#vectorization-parameters) for details. This value can be overridden by `vectorize` in the query contexts.|`true`|\n-|`druid.query.vectorSize`|See [Vectorization parameters](../querying/query-context.html#vectorization-parameters) for details. This value can be overridden by `vectorSize` in the query contexts.|`512`|\n+Any [Query Context General Parameter](../querying/query-context.html#general-parameters) default value \n+can be overridden by setting runtime property in the format of `druid.query.override.default.context.{query_context_key}`. \n+Note that the runtime property value can be overridden if value for the same key is explicitly specify in the query contexts.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5Mzk4NQ=="}, "originalCommit": {"oid": "8d8771adc84e9a81416004f01595189c1484a460"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODQ2MzA3OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/OverrideDefaultQueryContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODo0Mzo0M1rOG3u-RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzoyOToxMFrOG33HjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NDQ2OA==", "bodyText": "mergeing -> merging", "url": "https://github.com/apache/druid/pull/10208#discussion_r461094468", "createdAt": "2020-07-27T18:43:43Z", "author": {"login": "jon-wei"}, "path": "processing/src/main/java/org/apache/druid/query/OverrideDefaultQueryContext.java", "diffHunk": "@@ -19,43 +19,50 @@\n \n package org.apache.druid.query;\n \n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import org.apache.druid.query.QueryContexts.Vectorize;\n-import org.apache.druid.segment.QueryableIndexStorageAdapter;\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n \n /**\n  * A user configuration holder for all query types.\n  * Any query-specific configurations should go to their own configuration.\n- *\n  * @see org.apache.druid.query.groupby.GroupByQueryConfig\n  * @see org.apache.druid.query.search.SearchQueryConfig\n  * @see org.apache.druid.query.topn.TopNQueryConfig\n  * @see org.apache.druid.query.metadata.SegmentMetadataQueryConfig\n  * @see org.apache.druid.query.scan.ScanQueryConfig\n+ *\n+ * This class config map is populated by any runtime property prefixed with druid.query.override.default.context\n+ * Note that config values should not be directly retrieved from this class but instead should\n+ * be read through {@link QueryContexts}. This class contains configs from runtime property which is then merged with\n+ * configs passed in query context. The result of the merge is subsequently stored in the query context.\n+ * The order of precedence in mergeing of the configs is as follow:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d8771adc84e9a81416004f01595189c1484a460"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNzkxNw==", "bodyText": "Done", "url": "https://github.com/apache/druid/pull/10208#discussion_r461227917", "createdAt": "2020-07-27T23:29:10Z", "author": {"login": "maytasm"}, "path": "processing/src/main/java/org/apache/druid/query/OverrideDefaultQueryContext.java", "diffHunk": "@@ -19,43 +19,50 @@\n \n package org.apache.druid.query;\n \n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import org.apache.druid.query.QueryContexts.Vectorize;\n-import org.apache.druid.segment.QueryableIndexStorageAdapter;\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n \n /**\n  * A user configuration holder for all query types.\n  * Any query-specific configurations should go to their own configuration.\n- *\n  * @see org.apache.druid.query.groupby.GroupByQueryConfig\n  * @see org.apache.druid.query.search.SearchQueryConfig\n  * @see org.apache.druid.query.topn.TopNQueryConfig\n  * @see org.apache.druid.query.metadata.SegmentMetadataQueryConfig\n  * @see org.apache.druid.query.scan.ScanQueryConfig\n+ *\n+ * This class config map is populated by any runtime property prefixed with druid.query.override.default.context\n+ * Note that config values should not be directly retrieved from this class but instead should\n+ * be read through {@link QueryContexts}. This class contains configs from runtime property which is then merged with\n+ * configs passed in query context. The result of the merge is subsequently stored in the query context.\n+ * The order of precedence in mergeing of the configs is as follow:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NDQ2OA=="}, "originalCommit": {"oid": "8d8771adc84e9a81416004f01595189c1484a460"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODQ2MzQ0OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/OverrideDefaultQueryContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODo0Mzo1MFrOG3u-gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzoyOTo1NFrOG33IdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NDUyOA==", "bodyText": "codeded -> coded", "url": "https://github.com/apache/druid/pull/10208#discussion_r461094528", "createdAt": "2020-07-27T18:43:50Z", "author": {"login": "jon-wei"}, "path": "processing/src/main/java/org/apache/druid/query/OverrideDefaultQueryContext.java", "diffHunk": "@@ -19,43 +19,50 @@\n \n package org.apache.druid.query;\n \n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import org.apache.druid.query.QueryContexts.Vectorize;\n-import org.apache.druid.segment.QueryableIndexStorageAdapter;\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n \n /**\n  * A user configuration holder for all query types.\n  * Any query-specific configurations should go to their own configuration.\n- *\n  * @see org.apache.druid.query.groupby.GroupByQueryConfig\n  * @see org.apache.druid.query.search.SearchQueryConfig\n  * @see org.apache.druid.query.topn.TopNQueryConfig\n  * @see org.apache.druid.query.metadata.SegmentMetadataQueryConfig\n  * @see org.apache.druid.query.scan.ScanQueryConfig\n+ *\n+ * This class config map is populated by any runtime property prefixed with druid.query.override.default.context\n+ * Note that config values should not be directly retrieved from this class but instead should\n+ * be read through {@link QueryContexts}. This class contains configs from runtime property which is then merged with\n+ * configs passed in query context. The result of the merge is subsequently stored in the query context.\n+ * The order of precedence in mergeing of the configs is as follow:\n+ * Hard codeded default values (from {@link QueryContexts} can be override by", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d8771adc84e9a81416004f01595189c1484a460"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyODE0OQ==", "bodyText": "Re-wrote this point", "url": "https://github.com/apache/druid/pull/10208#discussion_r461228149", "createdAt": "2020-07-27T23:29:54Z", "author": {"login": "maytasm"}, "path": "processing/src/main/java/org/apache/druid/query/OverrideDefaultQueryContext.java", "diffHunk": "@@ -19,43 +19,50 @@\n \n package org.apache.druid.query;\n \n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import org.apache.druid.query.QueryContexts.Vectorize;\n-import org.apache.druid.segment.QueryableIndexStorageAdapter;\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n \n /**\n  * A user configuration holder for all query types.\n  * Any query-specific configurations should go to their own configuration.\n- *\n  * @see org.apache.druid.query.groupby.GroupByQueryConfig\n  * @see org.apache.druid.query.search.SearchQueryConfig\n  * @see org.apache.druid.query.topn.TopNQueryConfig\n  * @see org.apache.druid.query.metadata.SegmentMetadataQueryConfig\n  * @see org.apache.druid.query.scan.ScanQueryConfig\n+ *\n+ * This class config map is populated by any runtime property prefixed with druid.query.override.default.context\n+ * Note that config values should not be directly retrieved from this class but instead should\n+ * be read through {@link QueryContexts}. This class contains configs from runtime property which is then merged with\n+ * configs passed in query context. The result of the merge is subsequently stored in the query context.\n+ * The order of precedence in mergeing of the configs is as follow:\n+ * Hard codeded default values (from {@link QueryContexts} can be override by", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NDUyOA=="}, "originalCommit": {"oid": "8d8771adc84e9a81416004f01595189c1484a460"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODQ2ODMxOnYy", "diffSide": "RIGHT", "path": "docs/querying/query-context.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODo0NTowNVrOG3vBXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzozMTozN1rOG33KoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NTI2Mw==", "bodyText": "Suggest referring to the exact runtime property names that this overrides like druid.query.override.default.context.vectorSize, same for vectorize above", "url": "https://github.com/apache/druid/pull/10208#discussion_r461095263", "createdAt": "2020-07-27T18:45:05Z", "author": {"login": "jon-wei"}, "path": "docs/querying/query-context.md", "diffHunk": "@@ -100,5 +103,5 @@ vectorization. These query types will ignore the \"vectorize\" parameter even if i\n \n |property|default| description|\n |--------|-------|------------|\n-|vectorize|`true`|Enables or disables vectorized query execution. Possible values are `false` (disabled), `true` (enabled if possible, disabled otherwise, on a per-segment basis), and `force` (enabled, and groupBy or timeseries queries that cannot be vectorized will fail). The `\"force\"` setting is meant to aid in testing, and is not generally useful in production (since real-time segments can never be processed with vectorized execution, any queries on real-time data will fail). This will override `druid.query.vectorize` if it's set.|\n-|vectorSize|`512`|Sets the row batching size for a particular query. This will override `druid.query.vectorSize` if it's set.|\n+|vectorize|`true`|Enables or disables vectorized query execution. Possible values are `false` (disabled), `true` (enabled if possible, disabled otherwise, on a per-segment basis), and `force` (enabled, and groupBy or timeseries queries that cannot be vectorized will fail). The `\"force\"` setting is meant to aid in testing, and is not generally useful in production (since real-time segments can never be processed with vectorized execution, any queries on real-time data will fail). This will override runtime property value if it's set.|\n+|vectorSize|`512`|Sets the row batching size for a particular query. This will override runtime property value if it's set.|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d8771adc84e9a81416004f01595189c1484a460"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyODcwNA==", "bodyText": "Done", "url": "https://github.com/apache/druid/pull/10208#discussion_r461228704", "createdAt": "2020-07-27T23:31:37Z", "author": {"login": "maytasm"}, "path": "docs/querying/query-context.md", "diffHunk": "@@ -100,5 +103,5 @@ vectorization. These query types will ignore the \"vectorize\" parameter even if i\n \n |property|default| description|\n |--------|-------|------------|\n-|vectorize|`true`|Enables or disables vectorized query execution. Possible values are `false` (disabled), `true` (enabled if possible, disabled otherwise, on a per-segment basis), and `force` (enabled, and groupBy or timeseries queries that cannot be vectorized will fail). The `\"force\"` setting is meant to aid in testing, and is not generally useful in production (since real-time segments can never be processed with vectorized execution, any queries on real-time data will fail). This will override `druid.query.vectorize` if it's set.|\n-|vectorSize|`512`|Sets the row batching size for a particular query. This will override `druid.query.vectorSize` if it's set.|\n+|vectorize|`true`|Enables or disables vectorized query execution. Possible values are `false` (disabled), `true` (enabled if possible, disabled otherwise, on a per-segment basis), and `force` (enabled, and groupBy or timeseries queries that cannot be vectorized will fail). The `\"force\"` setting is meant to aid in testing, and is not generally useful in production (since real-time segments can never be processed with vectorized execution, any queries on real-time data will fail). This will override runtime property value if it's set.|\n+|vectorSize|`512`|Sets the row batching size for a particular query. This will override runtime property value if it's set.|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5NTI2Mw=="}, "originalCommit": {"oid": "8d8771adc84e9a81416004f01595189c1484a460"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MzQ3OTg5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/guice/QueryToolChestModule.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMDo1ODozOFrOG4emxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNToyNDoyOVrOG4pCXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg3NDg4NQ==", "bodyText": "I think .override.default. is sort of redundant and overly nested, please either make this druid.query.default.context or maybe druid.query.override.context, but I think the default works a little better.", "url": "https://github.com/apache/druid/pull/10208#discussion_r461874885", "createdAt": "2020-07-28T20:58:38Z", "author": {"login": "clintropolis"}, "path": "server/src/main/java/org/apache/druid/guice/QueryToolChestModule.java", "diffHunk": "@@ -97,7 +97,7 @@ public void configure(Binder binder)\n \n     binder.bind(QueryToolChestWarehouse.class).to(MapQueryToolChestWarehouse.class);\n \n-    JsonConfigProvider.bind(binder, \"druid.query\", QueryConfig.class);\n+    JsonConfigProvider.bind(binder, \"druid.query.override.default.context\", OverrideDefaultQueryContext.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca5d4ef785c77db090c941ad435ba39cd842adf"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA0NTc5MQ==", "bodyText": "Changed to druid.query.default.context", "url": "https://github.com/apache/druid/pull/10208#discussion_r462045791", "createdAt": "2020-07-29T05:24:29Z", "author": {"login": "maytasm"}, "path": "server/src/main/java/org/apache/druid/guice/QueryToolChestModule.java", "diffHunk": "@@ -97,7 +97,7 @@ public void configure(Binder binder)\n \n     binder.bind(QueryToolChestWarehouse.class).to(MapQueryToolChestWarehouse.class);\n \n-    JsonConfigProvider.bind(binder, \"druid.query\", QueryConfig.class);\n+    JsonConfigProvider.bind(binder, \"druid.query.override.default.context\", OverrideDefaultQueryContext.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg3NDg4NQ=="}, "originalCommit": {"oid": "bca5d4ef785c77db090c941ad435ba39cd842adf"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MzUxNjE1OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/OverrideDefaultQueryContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMTowODoyM1rOG4e8zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNzoyMTo1MlrOG4r0CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4MDUyNQ==", "bodyText": "This doesn't seem very flexible or future proof, what if we ever want to add any defaults that are not context parameters? The way this currently is we would need to add another config class that either has this as a property and remove the binding to this, or we ensure that doesn't itself have a context property and just have bindings for both. Why not just making this @JsonProperty(\"context\") and binding the class itself to the parent path? Is there some benefit to doing it this way that I'm missing?", "url": "https://github.com/apache/druid/pull/10208#discussion_r461880525", "createdAt": "2020-07-28T21:08:23Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/query/OverrideDefaultQueryContext.java", "diffHunk": "@@ -19,43 +19,48 @@\n \n package org.apache.druid.query;\n \n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import org.apache.druid.query.QueryContexts.Vectorize;\n-import org.apache.druid.segment.QueryableIndexStorageAdapter;\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n \n /**\n  * A user configuration holder for all query types.\n  * Any query-specific configurations should go to their own configuration.\n- *\n  * @see org.apache.druid.query.groupby.GroupByQueryConfig\n  * @see org.apache.druid.query.search.SearchQueryConfig\n  * @see org.apache.druid.query.topn.TopNQueryConfig\n  * @see org.apache.druid.query.metadata.SegmentMetadataQueryConfig\n  * @see org.apache.druid.query.scan.ScanQueryConfig\n+ *\n+ * This class config map is populated by any runtime property prefixed with druid.query.override.default.context\n+ * Note that config values should not be directly retrieved from this class but instead should\n+ * be read through {@link QueryContexts}. This class contains configs from runtime property which is then merged with\n+ * configs passed in query context. The result of the merge is subsequently stored in the query context.\n+ * The order of precedence in merging of the configs is as follow:\n+ * runtime property values (store in this class) override by query context parameter passed in with the query\n+ *\n+\n  */\n-public class QueryConfig\n+public class OverrideDefaultQueryContext\n {\n-  @JsonProperty\n-  private Vectorize vectorize = QueryContexts.DEFAULT_VECTORIZE;\n-\n-  @JsonProperty\n-  private int vectorSize = QueryableIndexStorageAdapter.DEFAULT_VECTOR_SIZE;\n+  private Map<String, Object> configs = new HashMap<>();\n \n-  public Vectorize getVectorize()\n+  @JsonAnyGetter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca5d4ef785c77db090c941ad435ba39cd842adf"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA5MTI3Mw==", "bodyText": "Done.", "url": "https://github.com/apache/druid/pull/10208#discussion_r462091273", "createdAt": "2020-07-29T07:21:52Z", "author": {"login": "maytasm"}, "path": "processing/src/main/java/org/apache/druid/query/OverrideDefaultQueryContext.java", "diffHunk": "@@ -19,43 +19,48 @@\n \n package org.apache.druid.query;\n \n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import org.apache.druid.query.QueryContexts.Vectorize;\n-import org.apache.druid.segment.QueryableIndexStorageAdapter;\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n \n /**\n  * A user configuration holder for all query types.\n  * Any query-specific configurations should go to their own configuration.\n- *\n  * @see org.apache.druid.query.groupby.GroupByQueryConfig\n  * @see org.apache.druid.query.search.SearchQueryConfig\n  * @see org.apache.druid.query.topn.TopNQueryConfig\n  * @see org.apache.druid.query.metadata.SegmentMetadataQueryConfig\n  * @see org.apache.druid.query.scan.ScanQueryConfig\n+ *\n+ * This class config map is populated by any runtime property prefixed with druid.query.override.default.context\n+ * Note that config values should not be directly retrieved from this class but instead should\n+ * be read through {@link QueryContexts}. This class contains configs from runtime property which is then merged with\n+ * configs passed in query context. The result of the merge is subsequently stored in the query context.\n+ * The order of precedence in merging of the configs is as follow:\n+ * runtime property values (store in this class) override by query context parameter passed in with the query\n+ *\n+\n  */\n-public class QueryConfig\n+public class OverrideDefaultQueryContext\n {\n-  @JsonProperty\n-  private Vectorize vectorize = QueryContexts.DEFAULT_VECTORIZE;\n-\n-  @JsonProperty\n-  private int vectorSize = QueryableIndexStorageAdapter.DEFAULT_VECTOR_SIZE;\n+  private Map<String, Object> configs = new HashMap<>();\n \n-  public Vectorize getVectorize()\n+  @JsonAnyGetter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4MDUyNQ=="}, "originalCommit": {"oid": "bca5d4ef785c77db090c941ad435ba39cd842adf"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Mzc3Nzc2OnYy", "diffSide": "RIGHT", "path": "docs/configuration/index.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjoxMTozMlrOG4hYog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNzowMjoyOVrOG4rPGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyMDQxOA==", "bodyText": "Please add some example in this section.", "url": "https://github.com/apache/druid/pull/10208#discussion_r461920418", "createdAt": "2020-07-28T22:11:32Z", "author": {"login": "jihoonson"}, "path": "docs/configuration/index.md", "diffHunk": "@@ -1769,14 +1769,23 @@ If there is an L1 miss and L2 hit, it will also populate L1.\n \n This section describes configurations that control behavior of Druid's query types, applicable to Broker, Historical, and MiddleManager processes.\n \n-### Query vectorization config\n+### Overriding default query context values", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca5d4ef785c77db090c941ad435ba39cd842adf"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA4MTgxNw==", "bodyText": "Done", "url": "https://github.com/apache/druid/pull/10208#discussion_r462081817", "createdAt": "2020-07-29T07:02:29Z", "author": {"login": "maytasm"}, "path": "docs/configuration/index.md", "diffHunk": "@@ -1769,14 +1769,23 @@ If there is an L1 miss and L2 hit, it will also populate L1.\n \n This section describes configurations that control behavior of Druid's query types, applicable to Broker, Historical, and MiddleManager processes.\n \n-### Query vectorization config\n+### Overriding default query context values", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyMDQxOA=="}, "originalCommit": {"oid": "bca5d4ef785c77db090c941ad435ba39cd842adf"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MzgwODg2OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/OverrideDefaultQueryContext.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjoxODoxMlrOG4hrsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODowNjoyMlrOG5EF1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyNTI5OQ==", "bodyText": "I'm wondering if it's possible to initialize configs with the default values in QueryContexts if they are missing and remove those defaults from QueryContexts. In this way, we can keep all default values in a single place and compute query context values in a more structured way. I think it's possible by keeping all default values in a map somewhere and overriding them with user-provided default values when initializing this class.", "url": "https://github.com/apache/druid/pull/10208#discussion_r461925299", "createdAt": "2020-07-28T22:18:12Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/OverrideDefaultQueryContext.java", "diffHunk": "@@ -19,43 +19,48 @@\n \n package org.apache.druid.query;\n \n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import org.apache.druid.query.QueryContexts.Vectorize;\n-import org.apache.druid.segment.QueryableIndexStorageAdapter;\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n \n /**\n  * A user configuration holder for all query types.\n  * Any query-specific configurations should go to their own configuration.\n- *\n  * @see org.apache.druid.query.groupby.GroupByQueryConfig\n  * @see org.apache.druid.query.search.SearchQueryConfig\n  * @see org.apache.druid.query.topn.TopNQueryConfig\n  * @see org.apache.druid.query.metadata.SegmentMetadataQueryConfig\n  * @see org.apache.druid.query.scan.ScanQueryConfig\n+ *\n+ * This class config map is populated by any runtime property prefixed with druid.query.override.default.context\n+ * Note that config values should not be directly retrieved from this class but instead should\n+ * be read through {@link QueryContexts}. This class contains configs from runtime property which is then merged with\n+ * configs passed in query context. The result of the merge is subsequently stored in the query context.\n+ * The order of precedence in merging of the configs is as follow:\n+ * runtime property values (store in this class) override by query context parameter passed in with the query\n+ *\n+\n  */\n-public class QueryConfig\n+public class OverrideDefaultQueryContext\n {\n-  @JsonProperty\n-  private Vectorize vectorize = QueryContexts.DEFAULT_VECTORIZE;\n-\n-  @JsonProperty\n-  private int vectorSize = QueryableIndexStorageAdapter.DEFAULT_VECTOR_SIZE;\n+  private Map<String, Object> configs = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca5d4ef785c77db090c941ad435ba39cd842adf"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA4Mjc1Ng==", "bodyText": "Yes. That is definitely possible and is a good point. I think that will just be moving things around from QueryContexts into this class (into the constructor). Since that does not impact the end-user (meaning that the defaults will remains the same, the way user specify the override are the same, etc.), I think we can do it in a separate PR.", "url": "https://github.com/apache/druid/pull/10208#discussion_r462082756", "createdAt": "2020-07-29T07:04:30Z", "author": {"login": "maytasm"}, "path": "processing/src/main/java/org/apache/druid/query/OverrideDefaultQueryContext.java", "diffHunk": "@@ -19,43 +19,48 @@\n \n package org.apache.druid.query;\n \n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import org.apache.druid.query.QueryContexts.Vectorize;\n-import org.apache.druid.segment.QueryableIndexStorageAdapter;\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n \n /**\n  * A user configuration holder for all query types.\n  * Any query-specific configurations should go to their own configuration.\n- *\n  * @see org.apache.druid.query.groupby.GroupByQueryConfig\n  * @see org.apache.druid.query.search.SearchQueryConfig\n  * @see org.apache.druid.query.topn.TopNQueryConfig\n  * @see org.apache.druid.query.metadata.SegmentMetadataQueryConfig\n  * @see org.apache.druid.query.scan.ScanQueryConfig\n+ *\n+ * This class config map is populated by any runtime property prefixed with druid.query.override.default.context\n+ * Note that config values should not be directly retrieved from this class but instead should\n+ * be read through {@link QueryContexts}. This class contains configs from runtime property which is then merged with\n+ * configs passed in query context. The result of the merge is subsequently stored in the query context.\n+ * The order of precedence in merging of the configs is as follow:\n+ * runtime property values (store in this class) override by query context parameter passed in with the query\n+ *\n+\n  */\n-public class QueryConfig\n+public class OverrideDefaultQueryContext\n {\n-  @JsonProperty\n-  private Vectorize vectorize = QueryContexts.DEFAULT_VECTORIZE;\n-\n-  @JsonProperty\n-  private int vectorSize = QueryableIndexStorageAdapter.DEFAULT_VECTOR_SIZE;\n+  private Map<String, Object> configs = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyNTI5OQ=="}, "originalCommit": {"oid": "bca5d4ef785c77db090c941ad435ba39cd842adf"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4OTA0Nw==", "bodyText": "I'm OK with doing it as a follow-up.", "url": "https://github.com/apache/druid/pull/10208#discussion_r462489047", "createdAt": "2020-07-29T18:06:22Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/OverrideDefaultQueryContext.java", "diffHunk": "@@ -19,43 +19,48 @@\n \n package org.apache.druid.query;\n \n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import org.apache.druid.query.QueryContexts.Vectorize;\n-import org.apache.druid.segment.QueryableIndexStorageAdapter;\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n \n /**\n  * A user configuration holder for all query types.\n  * Any query-specific configurations should go to their own configuration.\n- *\n  * @see org.apache.druid.query.groupby.GroupByQueryConfig\n  * @see org.apache.druid.query.search.SearchQueryConfig\n  * @see org.apache.druid.query.topn.TopNQueryConfig\n  * @see org.apache.druid.query.metadata.SegmentMetadataQueryConfig\n  * @see org.apache.druid.query.scan.ScanQueryConfig\n+ *\n+ * This class config map is populated by any runtime property prefixed with druid.query.override.default.context\n+ * Note that config values should not be directly retrieved from this class but instead should\n+ * be read through {@link QueryContexts}. This class contains configs from runtime property which is then merged with\n+ * configs passed in query context. The result of the merge is subsequently stored in the query context.\n+ * The order of precedence in merging of the configs is as follow:\n+ * runtime property values (store in this class) override by query context parameter passed in with the query\n+ *\n+\n  */\n-public class QueryConfig\n+public class OverrideDefaultQueryContext\n {\n-  @JsonProperty\n-  private Vectorize vectorize = QueryContexts.DEFAULT_VECTORIZE;\n-\n-  @JsonProperty\n-  private int vectorSize = QueryableIndexStorageAdapter.DEFAULT_VECTOR_SIZE;\n+  private Map<String, Object> configs = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyNTI5OQ=="}, "originalCommit": {"oid": "bca5d4ef785c77db090c941ad435ba39cd842adf"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2237, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}