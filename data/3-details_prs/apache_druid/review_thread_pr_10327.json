{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1MDA2NDMx", "number": 10327, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTo0MzowMFrOEecrRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTo0MzowMFrOEecrRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzYyNTY2OnYy", "diffSide": "RIGHT", "path": "benchmarks/src/test/java/org/apache/druid/benchmark/IndexedTableLoadingBenchmark.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTo0MzowMFrOHKGwOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjo0OToxOFrOHRd_AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM1ODQ1OQ==", "bodyText": "This includes benchmarking closing the table. I'm not sure how much of a difference that would make. Do you want this benchmark to measure just makeTable?", "url": "https://github.com/apache/druid/pull/10327#discussion_r480358459", "createdAt": "2020-08-31T19:43:00Z", "author": {"login": "suneet-s"}, "path": "benchmarks/src/test/java/org/apache/druid/benchmark/IndexedTableLoadingBenchmark.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.benchmark;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.druid.java.util.common.io.Closer;\n+import org.apache.druid.segment.QueryableIndexSegment;\n+import org.apache.druid.segment.join.table.IndexedTable;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+@State(Scope.Benchmark)\n+@Fork(value = 1)\n+@Warmup(iterations = 3)\n+@Measurement(iterations = 5)\n+public class IndexedTableLoadingBenchmark\n+{\n+  private static List<Set<String>> KEY_COLUMN_SETS = ImmutableList.of(\n+      ImmutableSet.of(\"stringKey\", \"longKey\")\n+  );\n+\n+  @Param({\"0\"})\n+  int keyColumns;\n+\n+  @Param({\"50000\", \"500000\", \"5000000\"})\n+  int rowsPerSegment;\n+\n+  @Param({\"segment\"})\n+  String indexedTableType;\n+\n+  Closer closer = Closer.create();\n+\n+  QueryableIndexSegment tableSegment = null;\n+\n+  @Setup(Level.Trial)\n+  public void setup()\n+  {\n+    tableSegment = IndexedTableJoinCursorBenchmark.makeQueryableIndexSegment(closer, \"join\", rowsPerSegment);\n+  }\n+\n+  @TearDown\n+  public void tearDown() throws IOException\n+  {\n+    closer.close();\n+  }\n+\n+  @Benchmark\n+  @BenchmarkMode(Mode.AverageTime)\n+  @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+  public void loadTable(Blackhole blackhole)\n+  {\n+    try (\n+        IndexedTable table =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cafb389edbfaa5ae52d10de167c9f2b2fe151b24"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3OTEwNA==", "bodyText": "yeah, that makes sense, modified to close in a teardown method that runs after each iteration", "url": "https://github.com/apache/druid/pull/10327#discussion_r488079104", "createdAt": "2020-09-14T16:49:18Z", "author": {"login": "clintropolis"}, "path": "benchmarks/src/test/java/org/apache/druid/benchmark/IndexedTableLoadingBenchmark.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.benchmark;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import org.apache.druid.java.util.common.io.Closer;\n+import org.apache.druid.segment.QueryableIndexSegment;\n+import org.apache.druid.segment.join.table.IndexedTable;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+@State(Scope.Benchmark)\n+@Fork(value = 1)\n+@Warmup(iterations = 3)\n+@Measurement(iterations = 5)\n+public class IndexedTableLoadingBenchmark\n+{\n+  private static List<Set<String>> KEY_COLUMN_SETS = ImmutableList.of(\n+      ImmutableSet.of(\"stringKey\", \"longKey\")\n+  );\n+\n+  @Param({\"0\"})\n+  int keyColumns;\n+\n+  @Param({\"50000\", \"500000\", \"5000000\"})\n+  int rowsPerSegment;\n+\n+  @Param({\"segment\"})\n+  String indexedTableType;\n+\n+  Closer closer = Closer.create();\n+\n+  QueryableIndexSegment tableSegment = null;\n+\n+  @Setup(Level.Trial)\n+  public void setup()\n+  {\n+    tableSegment = IndexedTableJoinCursorBenchmark.makeQueryableIndexSegment(closer, \"join\", rowsPerSegment);\n+  }\n+\n+  @TearDown\n+  public void tearDown() throws IOException\n+  {\n+    closer.close();\n+  }\n+\n+  @Benchmark\n+  @BenchmarkMode(Mode.AverageTime)\n+  @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+  public void loadTable(Blackhole blackhole)\n+  {\n+    try (\n+        IndexedTable table =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM1ODQ1OQ=="}, "originalCommit": {"oid": "cafb389edbfaa5ae52d10de167c9f2b2fe151b24"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3129, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}