{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxMDUzMDI5", "number": 10505, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xMFQwMzoyNzoyMlrOGIsbpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xMFQwNDoxNjoxMlrOGItA0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDExNzY5NzY1OnYy", "diffSide": "RIGHT", "path": "docs/development/extensions-core/avro.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xMFQwMzoyNzoyMlrOJqw_ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xMFQwMzoyNzoyMlrOJqw_ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODgyMjY5MQ==", "bodyText": "super nit: i think it's -> its", "url": "https://github.com/apache/druid/pull/10505#discussion_r648822691", "createdAt": "2021-06-10T03:27:22Z", "author": {"login": "clintropolis"}, "path": "docs/development/extensions-core/avro.md", "diffHunk": "@@ -39,13 +39,24 @@ Make sure to [include](../../development/extensions.md#loading-extensions) `drui\n \n Druid supports most Avro types natively, there are however some exceptions which are detailed here.\n \n-`union` types which aren't of the form `[null, otherType]` aren't supported at this time.\n+#### Unions\n+Druid has two modes for supporting `union` types. The original legacy mode can only support unions of the form `[null, otherType]`.\n+The newer mode can be enabled by setting `extractUnions` on the Avro parser in which case unions will be expanded according to the following rules:\n+* Primitive types and unnamed complex types are keyed their type name. i.e `int`, `string`\n+* Complex named types are keyed by their names, this includes `record`, `fixed` and `enum`.\n+* The Avro null type is elided as it's value can only ever be null", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDExNzY5ODgxOnYy", "diffSide": "RIGHT", "path": "extensions-core/avro-extensions/src/main/java/org/apache/druid/data/input/avro/GenericAvroJsonProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xMFQwMzoyNzo0OVrOJqxAQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xMFQwMzoyNzo0OVrOJqxAQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODgyMjg0OQ==", "bodyText": "nit: still using explode terminology", "url": "https://github.com/apache/druid/pull/10505#discussion_r648822849", "createdAt": "2021-06-10T03:27:49Z", "author": {"login": "clintropolis"}, "path": "extensions-core/avro-extensions/src/main/java/org/apache/druid/data/input/avro/GenericAvroJsonProvider.java", "diffHunk": "@@ -195,4 +210,46 @@ public Object unwrap(final Object o)\n   {\n     return o;\n   }\n+\n+  private boolean isExplodableUnion(final Schema.Field field)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDExNzc5MjgxOnYy", "diffSide": "RIGHT", "path": "docs/development/extensions-core/avro.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xMFQwNDoxNjoxMlrOJqx1bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xMFQyMToxNTozOFrOJrco7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODgzNjQ2MA==", "bodyText": "Hmm, I looked a lot closer at this than I did on a previous pass, and I think the old docs were sort of wrong. Using the example someMultiMemberUnion type in this PR, I can still use a flatten spec to extract the values of any type with the existing code, apparently even including for record types, where the extraction path is $.someMultiMemberUnion.subString (instead of $.someMultiMemberUnion.UnionSubRecord.subString as in the mode added in this PR).\nAs such, with my better understanding I think it makes sense to instead call this new property extractUnionsByType or something similar, and clarify that this new mode requires using a flatten spec to extract the values, but with the benefit that you can selectively extract values of only a certain type so that they can be mapped to separate Druid columns or whatever. I also don't think it necessarily makes sense to refer to the other mode as legacy, since I guess it still has a use if the union is composed mainly of primitive types and all are able to be coerced into a common Druid type, or if it is a simple union type of the legacy form, which the new mode does not effect (since the isUnion code checks for more than 1 non-null type).\nSorry I didn't look closer into this previously and for the review churn, my bad.\nAlso because the new mode needs to be link to the flatten spec docs, maybe it makes sense to just move the unions description entirely into the complex types section, which also seems to mirror the Avro specification docs https://avro.apache.org/docs/current/spec.html#schema_complex", "url": "https://github.com/apache/druid/pull/10505#discussion_r648836460", "createdAt": "2021-06-10T04:16:12Z", "author": {"login": "clintropolis"}, "path": "docs/development/extensions-core/avro.md", "diffHunk": "@@ -39,13 +39,24 @@ Make sure to [include](../../development/extensions.md#loading-extensions) `drui\n \n Druid supports most Avro types natively, there are however some exceptions which are detailed here.\n \n-`union` types which aren't of the form `[null, otherType]` aren't supported at this time.\n+#### Unions\n+Druid has two modes for supporting `union` types. The original legacy mode can only support unions of the form `[null, otherType]`.\n+The newer mode can be enabled by setting `extractUnions` on the Avro parser in which case unions will be expanded according to the following rules:", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0OTUzNzc3NA==", "bodyText": "No problem, I think you are right and I will make these changes next week.", "url": "https://github.com/apache/druid/pull/10505#discussion_r649537774", "createdAt": "2021-06-10T21:15:38Z", "author": {"login": "josephglanville"}, "path": "docs/development/extensions-core/avro.md", "diffHunk": "@@ -39,13 +39,24 @@ Make sure to [include](../../development/extensions.md#loading-extensions) `drui\n \n Druid supports most Avro types natively, there are however some exceptions which are detailed here.\n \n-`union` types which aren't of the form `[null, otherType]` aren't supported at this time.\n+#### Unions\n+Druid has two modes for supporting `union` types. The original legacy mode can only support unions of the form `[null, otherType]`.\n+The newer mode can be enabled by setting `extractUnions` on the Avro parser in which case unions will be expanded according to the following rules:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODgzNjQ2MA=="}, "originalCommit": null, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3022, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}