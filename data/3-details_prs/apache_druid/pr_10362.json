{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwNzg2MDg0", "number": 10362, "title": "Fix negative queuedSize problem in CuratorLoadQueuePeon", "bodyText": "Description\n\n\n\nThis PR try to fix the negative queueSize problem. When we upgrade our clusters to version 0.18.0, after running for a while, queuedSize of the loadQueuePeon will be negative.\n\nThis can be reproduce by adding the following codes to the tail of testFailAssign method in LoadQueuePeonTest.\n    curator.delete().guaranteed().forPath(loadRequestPath);\n    while (null != curator.checkExists().forPath(loadRequestPath)) {\n      Thread.sleep(5);\n    }\n    Assert.assertEquals(0, loadQueuePeon.getSegmentsToLoad().size());\n    Assert.assertEquals(0L, loadQueuePeon.getLoadQueueSize());\n\nAnd the full testFailAssign method will be:\npublic void testFailAssign() throws Exception\n  {\n    final DataSegment segment = dataSegmentWithInterval(\"2014-10-22T00:00:00Z/P1D\");\n\n    final CountDownLatch loadRequestSignal = new CountDownLatch(1);\n    final CountDownLatch segmentLoadedSignal = new CountDownLatch(1);\n\n    loadQueuePeon = new CuratorLoadQueuePeon(\n        curator,\n        LOAD_QUEUE_PATH,\n        jsonMapper,\n        Execs.scheduledSingleThreaded(\"test_load_queue_peon_scheduled-%d\"),\n        Execs.singleThreaded(\"test_load_queue_peon-%d\"),\n        // set time-out to 1 ms so that LoadQueuePeon will fail the assignment quickly\n        new TestDruidCoordinatorConfig(\n            null,\n            null,\n            null,\n            new Duration(1),\n            null,\n            null,\n            10,\n            new Duration(\"PT1s\")\n        )\n    );\n\n    loadQueuePeon.start();\n\n    loadQueueCache.getListenable().addListener(\n        new PathChildrenCacheListener()\n        {\n          @Override\n          public void childEvent(CuratorFramework client, PathChildrenCacheEvent event)\n          {\n            if (event.getType() == PathChildrenCacheEvent.Type.CHILD_ADDED) {\n              loadRequestSignal.countDown();\n            }\n          }\n        }\n    );\n    loadQueueCache.start();\n\n    loadQueuePeon.loadSegment(\n        segment,\n        new LoadPeonCallback()\n        {\n          @Override\n          public void execute()\n          {\n            segmentLoadedSignal.countDown();\n          }\n        }\n    );\n\n    String loadRequestPath = ZKPaths.makePath(LOAD_QUEUE_PATH, segment.getId().toString());\n    Assert.assertTrue(timing.forWaiting().awaitLatch(loadRequestSignal));\n    Assert.assertNotNull(curator.checkExists().forPath(loadRequestPath));\n    Assert.assertEquals(\n        segment,\n        ((SegmentChangeRequestLoad) jsonMapper\n            .readValue(curator.getData().decompressed().forPath(loadRequestPath), DataSegmentChangeRequest.class))\n            .getSegment()\n    );\n\n    // don't simulate completion of load request here\n    Assert.assertTrue(timing.forWaiting().awaitLatch(segmentLoadedSignal));\n    Assert.assertEquals(0, loadQueuePeon.getSegmentsToLoad().size());\n    Assert.assertEquals(0L, loadQueuePeon.getLoadQueueSize());\n    curator.delete().guaranteed().forPath(loadRequestPath);\n    while (null != curator.checkExists().forPath(loadRequestPath)) {\n      Thread.sleep(5);\n    }\n    Assert.assertEquals(0, loadQueuePeon.getSegmentsToLoad().size());\n    Assert.assertEquals(0L, loadQueuePeon.getLoadQueueSize());\n  }\n\nAfter running the above method, we got the following logs:\n...\n2020-09-06T22:22:38,377 DEBUG [main] org.apache.druid.server.coordinator.CuratorLoadQueuePeon - Asking server peon[/druid/loadqueue/localhost:1234] to load segment[test_load_queue_peon_2014-10-22T00:00:00.000Z_2014-10-23T00:00:00.000Z_2015-05-27T03:38:35.683Z]\n2020-09-06T22:22:38,519 DEBUG [test_load_queue_peon_scheduled-0] org.apache.druid.server.coordinator.CuratorLoadQueuePeon - ZKNode created for server to [/druid/loadqueue/localhost:1234] load [test_load_queue_peon_2014-10-22T00:00:00.000Z_2014-10-23T00:00:00.000Z_2015-05-27T03:38:35.683Z]\n2020-09-06T22:22:38,529 ERROR [test_load_queue_peon_scheduled-0] org.apache.druid.server.coordinator.CuratorLoadQueuePeon - Server[/druid/loadqueue/localhost:1234], throwable caught when submitting [SegmentChangeRequestLoad{segment=DataSegment{binaryVersion=9, id=test_load_queue_peon_2014-10-22T00:00:00.000Z_2014-10-23T00:00:00.000Z_2015-05-27T03:38:35.683Z, loadSpec={}, dimensions=[], metrics=[], shardSpec=NoneShardSpec, lastCompactionState=null, size=1200}}].\norg.apache.druid.java.util.common.ISE: /druid/loadqueue/localhost:1234/test_load_queue_peon_2014-10-22T00:00:00.000Z_2014-10-23T00:00:00.000Z_2015-05-27T03:38:35.683Z was never removed! Failing this operation!\n\tat org.apache.druid.server.coordinator.CuratorLoadQueuePeon$SegmentChangeProcessor.lambda$scheduleNodeDeletedCheck$1(CuratorLoadQueuePeon.java:285) ~[classes/:?]\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_212]\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_212]\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_212]\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_212]\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_212]\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_212]\n\tat java.lang.Thread.run(Thread.java:748) [?:1.8.0_212]\n2020-09-06T22:22:38,627 DEBUG [main-EventThread] org.apache.druid.server.coordinator.CuratorLoadQueuePeon - Server[/druid/loadqueue/localhost:1234] done processing load of segment [/druid/loadqueue/localhost:1234/test_load_queue_peon_2014-10-22T00:00:00.000Z_2014-10-23T00:00:00.000Z_2015-05-27T03:38:35.683Z]\n2020-09-06T22:22:38,628 INFO [Curator-Framework-0] org.apache.curator.framework.imps.CuratorFrameworkImpl - backgroundOperationsLoop exiting\n2020-09-06T22:22:38,632 INFO [ProcessThread(sid:0 cport:59826):] org.apache.zookeeper.server.PrepRequestProcessor - Processed session termination for sessionid: 0x1003a64174e0000\n2020-09-06T22:22:38,632 INFO [main] org.apache.zookeeper.ZooKeeper - Session: 0x1003a64174e0000 closed\n2020-09-06T22:22:38,632 INFO [main-EventThread] org.apache.zookeeper.ClientCnxn - EventThread shut down for session: 0x1003a64174e0000\n2020-09-06T22:22:38,633 INFO [NIOServerCxn.Factory:0.0.0.0/0.0.0.0:59826] org.apache.zookeeper.server.NIOServerCnxn - Closed socket connection for client /127.0.0.1:59843 which had sessionid 0x1003a64174e0000\n2020-09-06T22:22:38,636 INFO [NIOServerCxn.Factory:0.0.0.0/0.0.0.0:59826] org.apache.zookeeper.server.NIOServerCnxnFactory - NIOServerCnxn factory exited run method\n2020-09-06T22:22:38,638 INFO [main] org.apache.zookeeper.server.ZooKeeperServer - shutting down\n2020-09-06T22:22:38,638 INFO [main] org.apache.zookeeper.server.SessionTrackerImpl - Shutting down\n2020-09-06T22:22:38,638 INFO [main] org.apache.zookeeper.server.PrepRequestProcessor - Shutting down\n2020-09-06T22:22:38,638 INFO [main] org.apache.zookeeper.server.SyncRequestProcessor - Shutting down\n2020-09-06T22:22:38,639 INFO [ProcessThread(sid:0 cport:59826):] org.apache.zookeeper.server.PrepRequestProcessor - PrepRequestProcessor exited loop!\n2020-09-06T22:22:38,639 INFO [SyncThread:0] org.apache.zookeeper.server.SyncRequestProcessor - SyncRequestProcessor exited!\n2020-09-06T22:22:38,639 INFO [main] org.apache.zookeeper.server.FinalRequestProcessor - shutdown of request processor complete\n\njava.lang.AssertionError: \nExpected :0\nActual   :-1200\n<Click to see difference>\n\n\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:645)\n\tat org.junit.Assert.assertEquals(Assert.java:631)\n\tat org.apache.druid.server.coordinator.LoadQueuePeonTest.testFailAssign(LoadQueuePeonTest.java:344)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)\n\n\nProcess finished with exit code 255\n\nFinally, we found that the cause is actionCompleted method in CuratorLoadQueuePeon may be executed twice when failed loading happened and queuedSize will minus 2 * segment size.\nprivate void actionCompleted(SegmentHolder segmentHolder)\n  {\n    switch (segmentHolder.getType()) {\n      case LOAD:\n        segmentsToLoad.remove(segmentHolder.getSegment());\n        queuedSize.addAndGet(-segmentHolder.getSegmentSize());\n        break;\n      case DROP:\n        segmentsToDrop.remove(segmentHolder.getSegment());\n        break;\n      default:\n        throw new UnsupportedOperationException();\n    }\n    executeCallbacks(segmentHolder);\n  }\n\nWe need to check the returned value of segmentsToLoad.remove method, if null returned queuedSize.addAndGet(-segmentHolder.getSegmentSize()) will skipped!\n\n\n\n\n\nThis PR has:\n\n been self-reviewed.\n added unit tests or modified existing tests to cover new code paths, ensuring the threshold for code coverage is met.\n been tested in a test Druid cluster.\n\n\n\nKey changed/added classes in this PR\n\nCuratorLoadQueuePeon\nLoadQueuePeonTest", "createdAt": "2020-09-06T14:37:42Z", "url": "https://github.com/apache/druid/pull/10362", "merged": true, "mergeCommit": {"oid": "bbe23c652c5810325b1c6b6daa30d8b02244b351"}, "closed": true, "closedAt": "2020-10-16T20:38:50Z", "author": {"login": "viongpanzi"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdGO4NjgH2gAyNDgwNzg2MDg0OjlhYTU3YTFlMGU0M2E2YmM1MTM0MDU3NjVlM2Q4NDQyMWVjMjY5YTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdTMitRAFqTUxMDc4NDI4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9aa57a1e0e43a6bc513405765e3d84421ec269a0", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/9aa57a1e0e43a6bc513405765e3d84421ec269a0", "committedDate": "2020-09-06T14:00:51Z", "message": "fix negative queuedSize problem in CuratorLoadQueuePeon"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNjA4MjIx", "url": "https://github.com/apache/druid/pull/10362#pullrequestreview-491608221", "createdAt": "2020-09-18T16:19:49Z", "commit": {"oid": "9aa57a1e0e43a6bc513405765e3d84421ec269a0"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjoxOTo0OVrOHUTudA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjoyMDowNlrOHUTvDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1Njc1Ng==", "bodyText": "Instead of this, would it be better to have a separate countdown latch of size 2 and decrement it in the CuratorLoadQueuePeon callback and do an Assert with awaitLatch?", "url": "https://github.com/apache/druid/pull/10362#discussion_r491056756", "createdAt": "2020-09-18T16:19:49Z", "author": {"login": "a2l007"}, "path": "server/src/test/java/org/apache/druid/server/coordinator/LoadQueuePeonTest.java", "diffHunk": "@@ -336,6 +336,12 @@ public void execute()\n     Assert.assertTrue(timing.forWaiting().awaitLatch(segmentLoadedSignal));\n     Assert.assertEquals(0, loadQueuePeon.getSegmentsToLoad().size());\n     Assert.assertEquals(0L, loadQueuePeon.getLoadQueueSize());\n+    curator.delete().guaranteed().forPath(loadRequestPath);\n+    while (null != curator.checkExists().forPath(loadRequestPath)) {\n+      Thread.sleep(5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9aa57a1e0e43a6bc513405765e3d84421ec269a0"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1NjkxMQ==", "bodyText": "Could you please add a comment here?", "url": "https://github.com/apache/druid/pull/10362#discussion_r491056911", "createdAt": "2020-09-18T16:20:06Z", "author": {"login": "a2l007"}, "path": "server/src/main/java/org/apache/druid/server/coordinator/CuratorLoadQueuePeon.java", "diffHunk": "@@ -302,8 +302,9 @@ private void actionCompleted(SegmentHolder segmentHolder)\n   {\n     switch (segmentHolder.getType()) {\n       case LOAD:\n-        segmentsToLoad.remove(segmentHolder.getSegment());\n-        queuedSize.addAndGet(-segmentHolder.getSegmentSize());\n+        if (null != segmentsToLoad.remove(segmentHolder.getSegment())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9aa57a1e0e43a6bc513405765e3d84421ec269a0"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a75ad49546242efd9bf8aa0b9d9023fb0b11135", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/6a75ad49546242efd9bf8aa0b9d9023fb0b11135", "committedDate": "2020-09-21T10:17:13Z", "message": "add comment and optimize test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8d9d1d0c25031b2fa66e92a6ee2e1efd30961ed", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/e8d9d1d0c25031b2fa66e92a6ee2e1efd30961ed", "committedDate": "2020-09-21T12:10:09Z", "message": "Merge remote-tracking branch 'upstream/master' into bug-fix-coordinator-negative-queue-size"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NjY0OTcz", "url": "https://github.com/apache/druid/pull/10362#pullrequestreview-494664973", "createdAt": "2020-09-23T13:34:13Z", "commit": {"oid": "e8d9d1d0c25031b2fa66e92a6ee2e1efd30961ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzozNDoxM1rOHWul4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMzozNDoxM1rOHWul4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzU5NDA4MA==", "bodyText": "Typo for negative", "url": "https://github.com/apache/druid/pull/10362#discussion_r493594080", "createdAt": "2020-09-23T13:34:13Z", "author": {"login": "a2l007"}, "path": "server/src/main/java/org/apache/druid/server/coordinator/CuratorLoadQueuePeon.java", "diffHunk": "@@ -302,8 +302,12 @@ private void actionCompleted(SegmentHolder segmentHolder)\n   {\n     switch (segmentHolder.getType()) {\n       case LOAD:\n-        segmentsToLoad.remove(segmentHolder.getSegment());\n-        queuedSize.addAndGet(-segmentHolder.getSegmentSize());\n+        // When load failed a segment will be removed from the segmentsToLoad twice and\n+        // null value will be returned at the second time in which case queueSize may be negitive.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8d9d1d0c25031b2fa66e92a6ee2e1efd30961ed"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NjY1MjY1", "url": "https://github.com/apache/druid/pull/10362#pullrequestreview-494665265", "createdAt": "2020-09-23T13:34:29Z", "commit": {"oid": "e8d9d1d0c25031b2fa66e92a6ee2e1efd30961ed"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "271fc0bfa931200edb481367c9cb0ecba4a4b8fb", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/271fc0bfa931200edb481367c9cb0ecba4a4b8fb", "committedDate": "2020-09-24T06:48:00Z", "message": "fix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18cb5123031a534d483dc034c6b5c1054500b58a", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/18cb5123031a534d483dc034c6b5c1054500b58a", "committedDate": "2020-09-24T06:48:46Z", "message": "Merge remote-tracking branch 'upstream/master' into bug-fix-coordinator-negative-queue-size"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c469dae4d232749ae1ad2a7b1c05c2f3f339098", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/0c469dae4d232749ae1ad2a7b1c05c2f3f339098", "committedDate": "2020-09-26T12:06:07Z", "message": "Merge remote-tracking branch 'upstream/master' into bug-fix-coordinator-negative-queue-size"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNzg0Mjg5", "url": "https://github.com/apache/druid/pull/10362#pullrequestreview-510784289", "createdAt": "2020-10-16T20:38:34Z", "commit": {"oid": "0c469dae4d232749ae1ad2a7b1c05c2f3f339098"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3575, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}