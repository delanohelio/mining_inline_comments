{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNDU3MTUx", "number": 10026, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMDo0Mjo0OFrOEFvimQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMjozMDo1N1rOEGLALQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDU3MjQxOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/QueryContexts.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMDo0Mjo0OFrOGkHXIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMToxMToyNVrOGktU_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyMjUzMQ==", "bodyText": "Setting this to TRUE to see if any other tests fail.", "url": "https://github.com/apache/druid/pull/10026#discussion_r440522531", "createdAt": "2020-06-16T00:42:48Z", "author": {"login": "maytasm"}, "path": "processing/src/main/java/org/apache/druid/query/QueryContexts.java", "diffHunk": "@@ -59,7 +59,7 @@\n   public static final boolean DEFAULT_USE_CACHE = true;\n   public static final boolean DEFAULT_POPULATE_RESULTLEVEL_CACHE = true;\n   public static final boolean DEFAULT_USE_RESULTLEVEL_CACHE = true;\n-  public static final Vectorize DEFAULT_VECTORIZE = Vectorize.FALSE;\n+  public static final Vectorize DEFAULT_VECTORIZE = Vectorize.TRUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de92e3cad6d6f31d7f442537819e74ed49ff5266"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE0NDU3NQ==", "bodyText": "Reverting to false since TimeseriesQueryRunnerTest.testTimeseriesWithTimestampResultFieldContextForArrayResponse is failing. Will look at it separately.", "url": "https://github.com/apache/druid/pull/10026#discussion_r441144575", "createdAt": "2020-06-16T21:11:25Z", "author": {"login": "maytasm"}, "path": "processing/src/main/java/org/apache/druid/query/QueryContexts.java", "diffHunk": "@@ -59,7 +59,7 @@\n   public static final boolean DEFAULT_USE_CACHE = true;\n   public static final boolean DEFAULT_POPULATE_RESULTLEVEL_CACHE = true;\n   public static final boolean DEFAULT_USE_RESULTLEVEL_CACHE = true;\n-  public static final Vectorize DEFAULT_VECTORIZE = Vectorize.FALSE;\n+  public static final Vectorize DEFAULT_VECTORIZE = Vectorize.TRUE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyMjUzMQ=="}, "originalCommit": {"oid": "de92e3cad6d6f31d7f442537819e74ed49ff5266"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzgxMTc1OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/ColumnCapabilitiesProvider.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODowODoyOVrOGknPkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNzowMToyN1rOGk4PpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA0NDg4Mg==", "bodyText": "I really really (really really) think this needs a better name that doesn't include Provider, seeing that in a class name makes me expect this implements Provider<ColumnCapabilities> from com.google.inject.Provider. I'll try to think of some alternatives and get back to you on this.", "url": "https://github.com/apache/druid/pull/10026#discussion_r441044882", "createdAt": "2020-06-16T18:08:29Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/ColumnCapabilitiesProvider.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment;\n+\n+import org.apache.druid.segment.column.ColumnCapabilities;\n+\n+import javax.annotation.Nullable;\n+\n+public interface ColumnCapabilitiesProvider", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de92e3cad6d6f31d7f442537819e74ed49ff5266"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMwMjMyOQ==", "bodyText": "How about ColumnDescriptions - segment columns are written to and loaded from a segment via a ColumnDescriptor which populates the ColumnCapabilities for segments, so it sort of makes sense I guess, and is generic enough to apply to things that aren't actual segments too. idk, naming things is the hardest part. AdapterCapabilities? Something with the word schema in it?", "url": "https://github.com/apache/druid/pull/10026#discussion_r441302329", "createdAt": "2020-06-17T06:11:20Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/ColumnCapabilitiesProvider.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment;\n+\n+import org.apache.druid.segment.column.ColumnCapabilities;\n+\n+import javax.annotation.Nullable;\n+\n+public interface ColumnCapabilitiesProvider", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA0NDg4Mg=="}, "originalCommit": {"oid": "de92e3cad6d6f31d7f442537819e74ed49ff5266"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxOTA3NA==", "bodyText": "ColumnInspector since it's sort of like VectorSizeInspector, a shared interface for a common pattern to collect information from things that aren't really exactly the same thing but all have the same information?", "url": "https://github.com/apache/druid/pull/10026#discussion_r441319074", "createdAt": "2020-06-17T06:52:37Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/ColumnCapabilitiesProvider.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment;\n+\n+import org.apache.druid.segment.column.ColumnCapabilities;\n+\n+import javax.annotation.Nullable;\n+\n+public interface ColumnCapabilitiesProvider", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA0NDg4Mg=="}, "originalCommit": {"oid": "de92e3cad6d6f31d7f442537819e74ed49ff5266"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMyMzQyOQ==", "bodyText": "ColumnInspector sounds good to me.", "url": "https://github.com/apache/druid/pull/10026#discussion_r441323429", "createdAt": "2020-06-17T07:01:27Z", "author": {"login": "maytasm"}, "path": "processing/src/main/java/org/apache/druid/segment/ColumnCapabilitiesProvider.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment;\n+\n+import org.apache.druid.segment.column.ColumnCapabilities;\n+\n+import javax.annotation.Nullable;\n+\n+public interface ColumnCapabilitiesProvider", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA0NDg4Mg=="}, "originalCommit": {"oid": "de92e3cad6d6f31d7f442537819e74ed49ff5266"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODY1ODE1OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/aggregation/DoubleSumAggregatorFactory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMjozOToxOFrOGkvkbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMzo1Njo1OVrOGkxCNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4MTI5NA==", "bodyText": "ColumnCapabilities#type is annotated as nullable. originalCapabilities.getType().isNumeric() could throw an NPE.\nSame comment in Float and Long SumAggregatorFactories", "url": "https://github.com/apache/druid/pull/10026#discussion_r441181294", "createdAt": "2020-06-16T22:39:18Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/DoubleSumAggregatorFactory.java", "diffHunk": "@@ -79,8 +81,12 @@ protected VectorValueSelector vectorSelector(VectorColumnSelectorFactory columnS\n   }\n \n   @Override\n-  public boolean canVectorize()\n+  public boolean canVectorize(ColumnCapabilitiesProvider columnCapabilitiesProvider)\n   {\n+    if (fieldName != null) {\n+      final ColumnCapabilities originalCapabilities = columnCapabilitiesProvider.getColumnCapabilities(fieldName);\n+      return expression == null && (originalCapabilities == null || originalCapabilities.getType().isNumeric());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bae6784f7154abba0e2ce8628dcd87ccc76d49a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4Njk3MQ==", "bodyText": "Changed to ValueType.isNumeric(originalCapabilities.getType())", "url": "https://github.com/apache/druid/pull/10026#discussion_r441186971", "createdAt": "2020-06-16T22:56:00Z", "author": {"login": "maytasm"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/DoubleSumAggregatorFactory.java", "diffHunk": "@@ -79,8 +81,12 @@ protected VectorValueSelector vectorSelector(VectorColumnSelectorFactory columnS\n   }\n \n   @Override\n-  public boolean canVectorize()\n+  public boolean canVectorize(ColumnCapabilitiesProvider columnCapabilitiesProvider)\n   {\n+    if (fieldName != null) {\n+      final ColumnCapabilities originalCapabilities = columnCapabilitiesProvider.getColumnCapabilities(fieldName);\n+      return expression == null && (originalCapabilities == null || originalCapabilities.getType().isNumeric());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4MTI5NA=="}, "originalCommit": {"oid": "6bae6784f7154abba0e2ce8628dcd87ccc76d49a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIwNTMwMQ==", "bodyText": "Btw I think ColumnCapabilities#type is never actually null. Segment metadata queries, which make sql work, do this to make the sql schema capabilities.getType().name().\nAnyway, changed to ValueType.isNumeric(originalCapabilities.getType()) to be same and consistent with other places that use originalCapabilities.getType().", "url": "https://github.com/apache/druid/pull/10026#discussion_r441205301", "createdAt": "2020-06-16T23:56:59Z", "author": {"login": "maytasm"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/DoubleSumAggregatorFactory.java", "diffHunk": "@@ -79,8 +81,12 @@ protected VectorValueSelector vectorSelector(VectorColumnSelectorFactory columnS\n   }\n \n   @Override\n-  public boolean canVectorize()\n+  public boolean canVectorize(ColumnCapabilitiesProvider columnCapabilitiesProvider)\n   {\n+    if (fieldName != null) {\n+      final ColumnCapabilities originalCapabilities = columnCapabilitiesProvider.getColumnCapabilities(fieldName);\n+      return expression == null && (originalCapabilities == null || originalCapabilities.getType().isNumeric());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4MTI5NA=="}, "originalCommit": {"oid": "6bae6784f7154abba0e2ce8628dcd87ccc76d49a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODkyNzM3OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/aggregation/LongSumAggregatorFactory.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMTowMzoxM1rOGkyHcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMjo0NTo0NlrOGkzt7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzAyNw==", "bodyText": "Which tests validate these conditions? Similar comments for the other AggregatorFactories. I see DoubleMeanAggregator is being tested", "url": "https://github.com/apache/druid/pull/10026#discussion_r441223027", "createdAt": "2020-06-17T01:03:13Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/LongSumAggregatorFactory.java", "diffHunk": "@@ -87,8 +89,12 @@ protected VectorAggregator factorizeVector(\n   }\n \n   @Override\n-  public boolean canVectorize()\n+  public boolean canVectorize(ColumnCapabilitiesProvider columnCapabilitiesProvider)\n   {\n+    if (fieldName != null) {\n+      final ColumnCapabilities originalCapabilities = columnCapabilitiesProvider.getColumnCapabilities(fieldName);\n+      return expression == null && (originalCapabilities == null || originalCapabilities.getType().isNumeric());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c764b66176796d08d01d0a13d54ec8460ff01e01"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzU0NQ==", "bodyText": "SchemaEvolutionTest and DoubleMeanAggregationTest with Vectorize.TRUE triggers the bug case (where the column is not numeric and cannot be vectorized). I have made these tests run in both Vectorize.TRUE and Vectorize.FALSE mode to verify this fix. There are some other existing tests that are happy path (where the column is numeric and can be vectorized)", "url": "https://github.com/apache/druid/pull/10026#discussion_r441223545", "createdAt": "2020-06-17T01:05:31Z", "author": {"login": "maytasm"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/LongSumAggregatorFactory.java", "diffHunk": "@@ -87,8 +89,12 @@ protected VectorAggregator factorizeVector(\n   }\n \n   @Override\n-  public boolean canVectorize()\n+  public boolean canVectorize(ColumnCapabilitiesProvider columnCapabilitiesProvider)\n   {\n+    if (fieldName != null) {\n+      final ColumnCapabilities originalCapabilities = columnCapabilitiesProvider.getColumnCapabilities(fieldName);\n+      return expression == null && (originalCapabilities == null || originalCapabilities.getType().isNumeric());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzAyNw=="}, "originalCommit": {"oid": "c764b66176796d08d01d0a13d54ec8460ff01e01"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIzMTIyMw==", "bodyText": "\ud83d\udc4d\nJust read SchemaEvolutionTest more closely, looks like it covers LongSum, DoubleSum and Count. I didn;t see a test that covers FloatSumAggregatorFactory", "url": "https://github.com/apache/druid/pull/10026#discussion_r441231223", "createdAt": "2020-06-17T01:35:47Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/LongSumAggregatorFactory.java", "diffHunk": "@@ -87,8 +89,12 @@ protected VectorAggregator factorizeVector(\n   }\n \n   @Override\n-  public boolean canVectorize()\n+  public boolean canVectorize(ColumnCapabilitiesProvider columnCapabilitiesProvider)\n   {\n+    if (fieldName != null) {\n+      final ColumnCapabilities originalCapabilities = columnCapabilitiesProvider.getColumnCapabilities(fieldName);\n+      return expression == null && (originalCapabilities == null || originalCapabilities.getType().isNumeric());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzAyNw=="}, "originalCommit": {"oid": "c764b66176796d08d01d0a13d54ec8460ff01e01"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI0OTI2MQ==", "bodyText": "Done. Added FloatSumAggregatorFactory", "url": "https://github.com/apache/druid/pull/10026#discussion_r441249261", "createdAt": "2020-06-17T02:45:46Z", "author": {"login": "maytasm"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/LongSumAggregatorFactory.java", "diffHunk": "@@ -87,8 +89,12 @@ protected VectorAggregator factorizeVector(\n   }\n \n   @Override\n-  public boolean canVectorize()\n+  public boolean canVectorize(ColumnCapabilitiesProvider columnCapabilitiesProvider)\n   {\n+    if (fieldName != null) {\n+      final ColumnCapabilities originalCapabilities = columnCapabilitiesProvider.getColumnCapabilities(fieldName);\n+      return expression == null && (originalCapabilities == null || originalCapabilities.getType().isNumeric());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIyMzAyNw=="}, "originalCommit": {"oid": "c764b66176796d08d01d0a13d54ec8460ff01e01"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTA3MTgxOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/aggregation/mean/DoubleMeanAggregatorFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMjozMDo1N1rOGkzfvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMjo0MjozNVrOGkzq-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI0NTYyOQ==", "bodyText": "fieldName cannot be null for this one, there is a precondition in the constructor", "url": "https://github.com/apache/druid/pull/10026#discussion_r441245629", "createdAt": "2020-06-17T02:30:57Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/mean/DoubleMeanAggregatorFactory.java", "diffHunk": "@@ -106,8 +108,12 @@ public VectorAggregator factorizeVector(final VectorColumnSelectorFactory select\n   }\n \n   @Override\n-  public boolean canVectorize()\n+  public boolean canVectorize(ColumnCapabilitiesProvider columnCapabilitiesProvider)\n   {\n+    if (fieldName != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c764b66176796d08d01d0a13d54ec8460ff01e01"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI0ODUwNA==", "bodyText": "Done", "url": "https://github.com/apache/druid/pull/10026#discussion_r441248504", "createdAt": "2020-06-17T02:42:35Z", "author": {"login": "maytasm"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/mean/DoubleMeanAggregatorFactory.java", "diffHunk": "@@ -106,8 +108,12 @@ public VectorAggregator factorizeVector(final VectorColumnSelectorFactory select\n   }\n \n   @Override\n-  public boolean canVectorize()\n+  public boolean canVectorize(ColumnCapabilitiesProvider columnCapabilitiesProvider)\n   {\n+    if (fieldName != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI0NTYyOQ=="}, "originalCommit": {"oid": "c764b66176796d08d01d0a13d54ec8460ff01e01"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2326, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}