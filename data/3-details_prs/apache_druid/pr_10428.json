{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMDQ1NTAw", "number": 10428, "title": "allow server selection to be aware of query", "bodyText": "Description\nThis PR supports #10294 where an issue is discussed that queries with lookups may sometimes fail unnecessarily due to the lookup only being available on some historicals. The query can succeed by avoiding those historicals. In this PR is an extension that tracks lookup status on the broker and adds a new ServerSelectorStrategy to avoid historicals that are missing required lookups.\nThis PR #10427 is a small change to make server selection aware of the Query and would allow this extension so solve this issue without any other changes in core Druid.\nThis change just adds Query as a parameter to the ServerSelectorStratey and TierSelectorStrategy and provides this parameter in CachingClusteredClient, after segments  are found for a query and they are being fanned out across the cluster. A default method was added to the interface so existing implementations would not need to change.\n\nThis PR has:\n\n been self-reviewed.\n added unit tests or modified existing tests to cover new code paths, ensuring the threshold for code coverage is met.\n been tested in a test Druid cluster.\n\n\nKey changed/added classes in this PR\n\nServerSelectorStrategy\nTierSelectorStrategy\nCachingClusteredClient", "createdAt": "2020-09-23T21:17:34Z", "url": "https://github.com/apache/druid/pull/10428", "merged": true, "mergeCommit": {"oid": "ca3b925133dac9c2855e61100f97d8de7dc5cf7d"}, "closed": true, "closedAt": "2020-12-18T21:56:19Z", "author": {"login": "kroeders"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdMBDzRgBqjM4MDMxODAwNDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdnNE8jgFqTU1NTA5MzY4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MjQ5MjY0", "url": "https://github.com/apache/druid/pull/10428#pullrequestreview-529249264", "createdAt": "2020-11-12T16:13:06Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMTQ3Mjg1", "url": "https://github.com/apache/druid/pull/10428#pullrequestreview-543147285", "createdAt": "2020-12-02T19:00:27Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOTowMDoyN1rOH9pxTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOTowNjoxOFrOH9p_BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQwOTU0OA==", "bodyText": "Any reason to keep the old interfaces? If this is for backward-compatibility, it maybe make sense. But please annotate them as @Deprecated.", "url": "https://github.com/apache/druid/pull/10428#discussion_r534409548", "createdAt": "2020-12-02T19:00:27Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/client/selector/TierSelectorStrategy.java", "diffHunk": "@@ -47,6 +49,22 @@\n   List<QueryableDruidServer> pick(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQxMDQyMA==", "bodyText": "If you want to keep old interfaces, I think the old ones should have a default implementation that calls this new interface with null query. Then we can remove the implementations of old interfaces in AbstractTierSelectorStrategy.", "url": "https://github.com/apache/druid/pull/10428#discussion_r534410420", "createdAt": "2020-12-02T19:01:54Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/client/selector/TierSelectorStrategy.java", "diffHunk": "@@ -47,6 +49,22 @@\n   List<QueryableDruidServer> pick(\n       Int2ObjectRBTreeMap<Set<QueryableDruidServer>> prioritizedServers,\n       DataSegment segment,\n-      int numServersToPick\n-  );\n+      int numServersToPick);\n+\n+  @Nullable\n+  default <T> QueryableDruidServer pick(Query<T> query,\n+      Int2ObjectRBTreeMap<Set<QueryableDruidServer>> prioritizedServers,\n+      DataSegment segment)\n+  {\n+    return pick(prioritizedServers, segment);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQxMDc0OQ==", "bodyText": "Please annotate query with @Nullable.", "url": "https://github.com/apache/druid/pull/10428#discussion_r534410749", "createdAt": "2020-12-02T19:02:26Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/client/selector/TierSelectorStrategy.java", "diffHunk": "@@ -47,6 +49,22 @@\n   List<QueryableDruidServer> pick(\n       Int2ObjectRBTreeMap<Set<QueryableDruidServer>> prioritizedServers,\n       DataSegment segment,\n-      int numServersToPick\n-  );\n+      int numServersToPick);\n+\n+  @Nullable\n+  default <T> QueryableDruidServer pick(Query<T> query,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQxMDkzNg==", "bodyText": "Please add @Nullable.", "url": "https://github.com/apache/druid/pull/10428#discussion_r534410936", "createdAt": "2020-12-02T19:02:48Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/client/selector/TierSelectorStrategy.java", "diffHunk": "@@ -47,6 +49,22 @@\n   List<QueryableDruidServer> pick(\n       Int2ObjectRBTreeMap<Set<QueryableDruidServer>> prioritizedServers,\n       DataSegment segment,\n-      int numServersToPick\n-  );\n+      int numServersToPick);\n+\n+  @Nullable\n+  default <T> QueryableDruidServer pick(Query<T> query,\n+      Int2ObjectRBTreeMap<Set<QueryableDruidServer>> prioritizedServers,\n+      DataSegment segment)\n+  {\n+    return pick(prioritizedServers, segment);\n+  }\n+\n+  default <T> List<QueryableDruidServer> pick(\n+      Query<T> query,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQxMTYyMg==", "bodyText": "Similarly, I think it would be better that old interfaces have a default implementation that calls new interfaces with null query. Also please annotate query with @Nullable.", "url": "https://github.com/apache/druid/pull/10428#discussion_r534411622", "createdAt": "2020-12-02T19:03:57Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/client/selector/ServerSelectorStrategy.java", "diffHunk": "@@ -33,6 +35,17 @@\n })\n public interface ServerSelectorStrategy\n {\n+  default <T> QueryableDruidServer pick(Query<T> query, Set<QueryableDruidServer> servers, DataSegment segment)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQxMzA2MA==", "bodyText": "It seems that pick() is no longer in use. I think we can remove pick() but keep only this new one if ServerSelector doesn't implement DiscoverySelector.", "url": "https://github.com/apache/druid/pull/10428#discussion_r534413060", "createdAt": "2020-12-02T19:06:18Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/client/selector/ServerSelector.java", "diffHunk": "@@ -162,12 +163,20 @@ public boolean isEmpty()\n   @Nullable\n   @Override\n   public QueryableDruidServer pick()\n+  {\n+    if (!historicalServers.isEmpty()) {\n+      return strategy.pick(historicalServers, segment.get());\n+    }\n+    return strategy.pick(realtimeServers, segment.get());\n+  }\n+\n+  public <T> QueryableDruidServer pick(Query<T> query)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzOTg5MTE0", "url": "https://github.com/apache/druid/pull/10428#pullrequestreview-543989114", "createdAt": "2020-12-03T14:10:23Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNDoxMDoyM1rOH-dfPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNDoxMDoyM1rOH-dfPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI1Njg5NQ==", "bodyText": "this was the only functional place that the parameterless pick() was called that I mentioned in the other comment @jihoonson , the Query is available inside of SpecificQueryRunnable where this is called, so I could alternatively pass the query into computeResultLevelCachingEtag and add a null check on this line, what do you think?", "url": "https://github.com/apache/druid/pull/10428#discussion_r535256895", "createdAt": "2020-12-03T14:10:23Z", "author": {"login": "kroeders"}, "path": "server/src/main/java/org/apache/druid/client/CachingClusteredClient.java", "diffHunk": "@@ -812,7 +812,7 @@ String computeResultLevelCachingEtag(\n       Hasher hasher = Hashing.sha1().newHasher();\n       boolean hasOnlyHistoricalSegments = true;\n       for (SegmentServerSelector p : segments) {\n-        if (!p.getServer().pick().getServer().isSegmentReplicationTarget()) {\n+        if (!p.getServer().pick(null).getServer().isSegmentReplicationTarget()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1Mzk2NTM2", "url": "https://github.com/apache/druid/pull/10428#pullrequestreview-545396536", "createdAt": "2020-12-05T02:54:24Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwMjo1NDoyNFrOH_ouBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwMzowMjoxMVrOH_oyvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ4OTQ3OA==", "bodyText": "It seems that this can still return null?", "url": "https://github.com/apache/druid/pull/10428#discussion_r536489478", "createdAt": "2020-12-05T02:54:24Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/client/selector/ServerSelector.java", "diffHunk": "@@ -159,15 +160,13 @@ public boolean isEmpty()\n     return servers;\n   }\n \n-  @Nullable\n-  @Override\n-  public QueryableDruidServer pick()\n+  public <T> QueryableDruidServer pick(@Nullable Query<T> query)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ4OTU0Mw==", "bodyText": "It sounds good to me. For the null check, do you mean a null check on the query? If so, it doesn't seem ncessary because query cannot be null in CachingClusteredClient.", "url": "https://github.com/apache/druid/pull/10428#discussion_r536489543", "createdAt": "2020-12-05T02:54:50Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/client/CachingClusteredClient.java", "diffHunk": "@@ -812,7 +812,7 @@ String computeResultLevelCachingEtag(\n       Hasher hasher = Hashing.sha1().newHasher();\n       boolean hasOnlyHistoricalSegments = true;\n       for (SegmentServerSelector p : segments) {\n-        if (!p.getServer().pick().getServer().isSegmentReplicationTarget()) {\n+        if (!p.getServer().pick(null).getServer().isSegmentReplicationTarget()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI1Njg5NQ=="}, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ5MDY4NQ==", "bodyText": "I don't have strong opinion here. The current one looks good to me.", "url": "https://github.com/apache/druid/pull/10428#discussion_r536490685", "createdAt": "2020-12-05T03:02:11Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/client/selector/TierSelectorStrategy.java", "diffHunk": "@@ -47,6 +49,22 @@\n   List<QueryableDruidServer> pick(\n       Int2ObjectRBTreeMap<Set<QueryableDruidServer>> prioritizedServers,\n       DataSegment segment,\n-      int numServersToPick\n-  );\n+      int numServersToPick);\n+\n+  @Nullable\n+  default <T> QueryableDruidServer pick(Query<T> query,\n+      Int2ObjectRBTreeMap<Set<QueryableDruidServer>> prioritizedServers,\n+      DataSegment segment)\n+  {\n+    return pick(prioritizedServers, segment);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQxMDQyMA=="}, "originalCommit": null, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c98cbb232c8cb83c47b72818133bdc7da8a1f455", "author": {"user": {"login": "kroeders", "name": "keefe roedersheimer"}}, "url": "https://github.com/apache/druid/commit/c98cbb232c8cb83c47b72818133bdc7da8a1f455", "committedDate": "2020-12-07T20:57:18Z", "message": "add query through to server selector"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d48fdb072b232d3ba852b20c969eda8d64420bf", "author": {"user": {"login": "kroeders", "name": "keefe roedersheimer"}}, "url": "https://github.com/apache/druid/commit/6d48fdb072b232d3ba852b20c969eda8d64420bf", "committedDate": "2020-12-07T20:57:18Z", "message": "add nullable extensions, deprecate old methods with defaults"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1685caded690252839651353854142344193a63b", "author": {"user": {"login": "kroeders", "name": "keefe roedersheimer"}}, "url": "https://github.com/apache/druid/commit/1685caded690252839651353854142344193a63b", "committedDate": "2020-12-07T20:57:18Z", "message": "style changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "682359cf34f744c4debe00ac1a9deb7c6956bb6c", "author": {"user": {"login": "kroeders", "name": "keefe roedersheimer"}}, "url": "https://github.com/apache/druid/commit/682359cf34f744c4debe00ac1a9deb7c6956bb6c", "committedDate": "2020-12-07T20:57:18Z", "message": "add nullable to ServerSelectorStrategy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e1e66066840a93bfdcd104d31944d49855986db", "author": {"user": {"login": "kroeders", "name": "keefe roedersheimer"}}, "url": "https://github.com/apache/druid/commit/3e1e66066840a93bfdcd104d31944d49855986db", "committedDate": "2020-12-07T20:57:18Z", "message": "fix test coverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "660aaec66140739c0c4feedc18b7272e760b63a6", "author": {"user": {"login": "kroeders", "name": "keefe roedersheimer"}}, "url": "https://github.com/apache/druid/commit/660aaec66140739c0c4feedc18b7272e760b63a6", "committedDate": "2020-12-07T20:57:18Z", "message": "missing override in test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "660aaec66140739c0c4feedc18b7272e760b63a6", "author": {"user": {"login": "kroeders", "name": "keefe roedersheimer"}}, "url": "https://github.com/apache/druid/commit/660aaec66140739c0c4feedc18b7272e760b63a6", "committedDate": "2020-12-07T20:57:18Z", "message": "missing override in test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1MDQ2NDU5", "url": "https://github.com/apache/druid/pull/10428#pullrequestreview-555046459", "createdAt": "2020-12-17T22:44:25Z", "commit": {"oid": "660aaec66140739c0c4feedc18b7272e760b63a6"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f26ded57e2f1c795f19ed2c6334041d9e48b250", "author": {"user": {"login": "kroeders", "name": "keefe roedersheimer"}}, "url": "https://github.com/apache/druid/commit/6f26ded57e2f1c795f19ed2c6334041d9e48b250", "committedDate": "2020-12-17T23:16:19Z", "message": "add null check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1MDkzNjgw", "url": "https://github.com/apache/druid/pull/10428#pullrequestreview-555093680", "createdAt": "2020-12-18T00:33:09Z", "commit": {"oid": "6f26ded57e2f1c795f19ed2c6334041d9e48b250"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDozMzowOVrOIIOarw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMDozMzowOVrOIIOarw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ5NTcyNw==", "bodyText": "nit: I think it should ideally fail if queryableServer is null, because it means there is no server to process this segment. However, this seems OK because this method will return immediately when it's null and fail at here.", "url": "https://github.com/apache/druid/pull/10428#discussion_r545495727", "createdAt": "2020-12-18T00:33:09Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/client/CachingClusteredClient.java", "diffHunk": "@@ -812,7 +812,8 @@ String computeResultLevelCachingEtag(\n       Hasher hasher = Hashing.sha1().newHasher();\n       boolean hasOnlyHistoricalSegments = true;\n       for (SegmentServerSelector p : segments) {\n-        if (!p.getServer().pick().getServer().isSegmentReplicationTarget()) {\n+        QueryableDruidServer queryableServer = p.getServer().pick(query);\n+        if (queryableServer == null || !queryableServer.getServer().isSegmentReplicationTarget()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f26ded57e2f1c795f19ed2c6334041d9e48b250"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3274, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}