{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1NjYxNzg0", "number": 10332, "title": "Fix stringFirst/stringLast rollup during ingestion", "bodyText": "Fixes #7243 .\nDescription\nThis PR fixes the issues with stringFirst/stringLast rollup during ingestion, based on the suggestions described in #7243. A test is added to trigger the rollup code path for stringFirst/stringLast.\nThis PR also enables earliest/latest aggregator to operate on these columns during query time.\nFixed the bug ...\nRenamed the class ...\nAdded a forbidden-apis entry ...\n\nThis PR has:\n\n been self-reviewed.\n\n using the concurrency checklist (Remove this item if the PR doesn't have any relation to concurrency.)\n\n\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths, ensuring the threshold for code coverage is met.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-08-28T22:08:11Z", "url": "https://github.com/apache/druid/pull/10332", "merged": true, "mergeCommit": {"oid": "e5f0da30ae15369f66c7e9ecc05a41c3d49eb2e6"}, "closed": true, "closedAt": "2020-09-09T00:36:05Z", "author": {"login": "joykent99"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdDeKoFAH2gAyNDc1NjYxNzg0OjVhMjk0MDRjN2MzODA0NzgyNWRhYTI4ZDNkNmMwZDNjZGYxOGU2MzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHBJudAFqTQ4NDU4MDk1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5a29404c7c38047825daa28d3d6c0d3cdf18e634", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/5a29404c7c38047825daa28d3d6c0d3cdf18e634", "committedDate": "2020-08-29T00:07:46Z", "message": "Add IndexMergerRollupTest\n\nThis changelist adds a test to merge indexes with StringFirst/StringLast aggregator."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a883363489346a5f6ea12a0185f10b1e83c5a2d7", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/a883363489346a5f6ea12a0185f10b1e83c5a2d7", "committedDate": "2020-08-29T00:07:53Z", "message": "Fix StringFirstAggregateCombiner/StringLastAggregateCombiner\n\nThe segment-level type for stringFirst/stringLast is SerializablePairLongString,\nnot String. This changelist fixes it."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cd4a205aabbd0eceb574fbd414ef348909166a0", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/1cd4a205aabbd0eceb574fbd414ef348909166a0", "committedDate": "2020-08-29T00:07:53Z", "message": "Fix EarliestLatestAnySqlAggregator to handle COMPLEX type\n\nThis changelist allows EarliestLatestAnySqlAggregator to accept COMPLEX\ntype as an operand. For its return type, we set it to VARCHAR, since\nCOMPLEX column is only generated by stringFirst/stringLast during ingestion\nrollup."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "1cd4a205aabbd0eceb574fbd414ef348909166a0", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/1cd4a205aabbd0eceb574fbd414ef348909166a0", "committedDate": "2020-08-29T00:07:53Z", "message": "Fix EarliestLatestAnySqlAggregator to handle COMPLEX type\n\nThis changelist allows EarliestLatestAnySqlAggregator to accept COMPLEX\ntype as an operand. For its return type, we set it to VARCHAR, since\nCOMPLEX column is only generated by stringFirst/stringLast during ingestion\nrollup."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c00cea00c294f09b79f57af7ae1fc67f9993b95", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/6c00cea00c294f09b79f57af7ae1fc67f9993b95", "committedDate": "2020-09-02T03:26:56Z", "message": "Return value with smaller timestamp in StringFirstAggregatorFactory.combine function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f14dd8aef85d51c4d574cc555f9749cfa6215c3c", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/f14dd8aef85d51c4d574cc555f9749cfa6215c3c", "committedDate": "2020-09-02T05:15:11Z", "message": "Add integration tests for stringFirst/stringLast during ingestion"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMzYxNTMy", "url": "https://github.com/apache/druid/pull/10332#pullrequestreview-481361532", "createdAt": "2020-09-02T22:37:53Z", "commit": {"oid": "f14dd8aef85d51c4d574cc555f9749cfa6215c3c"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjozNzo1M1rOHMMq8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjo1MjoyMlrOHMNvcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU1MjU2MQ==", "bodyText": "Can we add these to wikipedia_index_task.json instead. This way we don't need to run another integration test which can be quite slow\nYou will probably want to do something very similar to #9277", "url": "https://github.com/apache/druid/pull/10332#discussion_r482552561", "createdAt": "2020-09-02T22:37:53Z", "author": {"login": "suneet-s"}, "path": "integration-tests/src/test/resources/indexer/wikipedia_merge_index_task.json", "diffHunk": "@@ -0,0 +1,70 @@\n+{\n+    \"type\": \"index\",\n+    \"spec\": {\n+        \"dataSchema\": {\n+            \"dataSource\": \"%%DATASOURCE%%\",\n+            \"metricsSpec\": [\n+                {\n+                    \"type\": \"count\",\n+                    \"name\": \"count\"\n+                },\n+                {\n+                    \"type\": \"doubleSum\",\n+                    \"name\": \"added\",\n+                    \"fieldName\": \"added\"\n+                },\n+                {\n+                    \"type\": \"doubleSum\",\n+                    \"name\": \"deleted\",\n+                    \"fieldName\": \"deleted\"\n+                },\n+                {\n+                    \"type\": \"doubleSum\",\n+                    \"name\": \"delta\",\n+                    \"fieldName\": \"delta\"\n+                },\n+                {\n+                    \"type\": \"stringFirst\",\n+                    \"name\": \"first_user\",\n+                    \"fieldName\": \"user\"\n+                },\n+                {\n+                    \"type\": \"stringLast\",\n+                    \"name\": \"last_user\",\n+                    \"fieldName\": \"user\"\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f14dd8aef85d51c4d574cc555f9749cfa6215c3c"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU2NjcwMg==", "bodyText": "wow! Is there a test for this somewhere?", "url": "https://github.com/apache/druid/pull/10332#discussion_r482566702", "createdAt": "2020-09-02T22:49:33Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/first/StringFirstAggregatorFactory.java", "diffHunk": "@@ -188,7 +188,7 @@ public Comparator getComparator()\n   @Override\n   public Object combine(Object lhs, Object rhs)\n   {\n-    return TIME_COMPARATOR.compare(lhs, rhs) > 0 ? lhs : rhs;\n+    return TIME_COMPARATOR.compare(lhs, rhs) < 0 ? lhs : rhs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f14dd8aef85d51c4d574cc555f9749cfa6215c3c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU2OTMxNA==", "bodyText": "We should reuse this instance across all calls to toDruidAggregation", "url": "https://github.com/apache/druid/pull/10332#discussion_r482569314", "createdAt": "2020-09-02T22:51:43Z", "author": {"login": "suneet-s"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/aggregation/builtin/EarliestLatestAnySqlAggregator.java", "diffHunk": "@@ -227,14 +257,14 @@ public Aggregation toDruidAggregation(\n           aggregatorType.name(),\n           null,\n           SqlKind.OTHER_FUNCTION,\n-          ReturnTypes.ARG0,\n+          new EarliestLatestReturnTypeInference(0),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f14dd8aef85d51c4d574cc555f9749cfa6215c3c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU3MDA5OA==", "bodyText": "shouldn't this remain STRING ?", "url": "https://github.com/apache/druid/pull/10332#discussion_r482570098", "createdAt": "2020-09-02T22:52:22Z", "author": {"login": "suneet-s"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/aggregation/builtin/EarliestLatestAnySqlAggregator.java", "diffHunk": "@@ -227,14 +257,14 @@ public Aggregation toDruidAggregation(\n           aggregatorType.name(),\n           null,\n           SqlKind.OTHER_FUNCTION,\n-          ReturnTypes.ARG0,\n+          new EarliestLatestReturnTypeInference(0),\n           InferTypes.RETURN_TYPE,\n           OperandTypes.or(\n               OperandTypes.NUMERIC,\n               OperandTypes.BOOLEAN,\n               OperandTypes.sequence(\n                   \"'\" + aggregatorType.name() + \"(expr, maxBytesPerString)'\\n\",\n-                  OperandTypes.STRING,\n+                  OperandTypes.ANY,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f14dd8aef85d51c4d574cc555f9749cfa6215c3c"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMzc5ODI2", "url": "https://github.com/apache/druid/pull/10332#pullrequestreview-481379826", "createdAt": "2020-09-02T23:26:44Z", "commit": {"oid": "f14dd8aef85d51c4d574cc555f9749cfa6215c3c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzoyNjo0NFrOHMPaTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzoyNjo0NFrOHMPaTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5NzQ1NA==", "bodyText": "This is the fix to the existing test for StringFirstAggregatorFactory.combine() fixes.", "url": "https://github.com/apache/druid/pull/10332#discussion_r482597454", "createdAt": "2020-09-02T23:26:44Z", "author": {"login": "joykent99"}, "path": "processing/src/test/java/org/apache/druid/query/aggregation/first/StringFirstAggregationTest.java", "diffHunk": "@@ -115,7 +117,7 @@ public void testCombine()\n   {\n     SerializablePairLongString pair1 = new SerializablePairLongString(1467225000L, \"AAAA\");\n     SerializablePairLongString pair2 = new SerializablePairLongString(1467240000L, \"BBBB\");\n-    Assert.assertEquals(pair2, stringFirstAggFactory.combine(pair1, pair2));\n+    Assert.assertEquals(pair1, stringFirstAggFactory.combine(pair1, pair2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f14dd8aef85d51c4d574cc555f9749cfa6215c3c"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9699955e3f731443558379ef15843133794e11b", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/f9699955e3f731443558379ef15843133794e11b", "committedDate": "2020-09-03T00:27:00Z", "message": "Use one EarliestLatestReturnTypeInference instance"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NDIwMDM4", "url": "https://github.com/apache/druid/pull/10332#pullrequestreview-484420038", "createdAt": "2020-09-08T19:09:44Z", "commit": {"oid": "f9699955e3f731443558379ef15843133794e11b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxOTowOTo0NVrOHOqdgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxOTowOTo0NVrOHOqdgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEzNzc5Mg==", "bodyText": "Usually I sql add tests to CalciteQueryTest You can see testEarliestAggregators as an example. You could write a test in here to validate the SQL translation works, but I think you need to update CalciteTests#INDEX_SCHEMA_DIFFERENT_DIM3_M1_TYPES to add an earliest / latest aggregator. Then you should be able to test a SQL test in CalciteQueryTest - hope this helps", "url": "https://github.com/apache/druid/pull/10332#discussion_r485137792", "createdAt": "2020-09-08T19:09:45Z", "author": {"login": "suneet-s"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/aggregation/builtin/EarliestLatestAnySqlAggregator.java", "diffHunk": "@@ -227,14 +257,14 @@ public Aggregation toDruidAggregation(\n           aggregatorType.name(),\n           null,\n           SqlKind.OTHER_FUNCTION,\n-          ReturnTypes.ARG0,\n+          new EarliestLatestReturnTypeInference(0),\n           InferTypes.RETURN_TYPE,\n           OperandTypes.or(\n               OperandTypes.NUMERIC,\n               OperandTypes.BOOLEAN,\n               OperandTypes.sequence(\n                   \"'\" + aggregatorType.name() + \"(expr, maxBytesPerString)'\\n\",\n-                  OperandTypes.STRING,\n+                  OperandTypes.ANY,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU3MDA5OA=="}, "originalCommit": {"oid": "f14dd8aef85d51c4d574cc555f9749cfa6215c3c"}, "originalPosition": 77}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c8c7e98f94f5cbf60f28f5d4536607d367042c1", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/1c8c7e98f94f5cbf60f28f5d4536607d367042c1", "committedDate": "2020-09-08T20:34:47Z", "message": "Merge remote-tracking branch 'upstream/master' into feature-fix-stringfirstlast-ingestion"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NTgwOTUy", "url": "https://github.com/apache/druid/pull/10332#pullrequestreview-484580952", "createdAt": "2020-09-09T00:35:14Z", "commit": {"oid": "1c8c7e98f94f5cbf60f28f5d4536607d367042c1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3509, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}