{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4OTczNDQ1", "number": 9995, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNToyNzo1NVrOEDgSnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMzoyMjoxMVrOEEfZ4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTEwMjM2OnYy", "diffSide": "RIGHT", "path": "dev/intellij-setup.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNToyNzo1NVrOGgj3zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMTo0NTo0NVrOGiLxNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5NTM0Mg==", "bodyText": "Can you add screenshots to this section to make it easier for devs to follow along", "url": "https://github.com/apache/druid/pull/9995#discussion_r436795342", "createdAt": "2020-06-08T15:27:55Z", "author": {"login": "suneet-s"}, "path": "dev/intellij-setup.md", "diffHunk": "@@ -34,6 +34,14 @@ an alias name. You can do this in Using `File` -> `Project Structure...` -> `Pla\n ## Code Style\n The Code Style is available in XML format at [druid_intellij_formatting.xml](druid_intellij_formatting.xml) and can be [imported into IntelliJ](https://www.jetbrains.com/help/idea/2017.1/copying-code-style-settings.html).\n \n+## Set Code Coverage Runner\n+Druid CI checks are configured to enforce code coverage using JaCoCo. The checks will prevent PR from being merged \n+if test coverage of new added code is below the set threshold. You should run the tests locally to make sure that\n+your code pass the coverage threshold. In IntelliJ, edit the template of JUnit tests in \"Run Configurations...\" \n+to use Jacoco for code coverage (this provides branch coverage instead of the default which is only line coverage).\n+You can then right click src/test/java folder of the modules you are modifying and click run with coverage. This\n+will generate a report to show the current code coverage on the code (not just your change).\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c285aa5f0a329ebb68695a04d72fab730422ba61"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5NzU5MA==", "bodyText": "Done", "url": "https://github.com/apache/druid/pull/9995#discussion_r438497590", "createdAt": "2020-06-11T01:45:45Z", "author": {"login": "maytasm"}, "path": "dev/intellij-setup.md", "diffHunk": "@@ -34,6 +34,14 @@ an alias name. You can do this in Using `File` -> `Project Structure...` -> `Pla\n ## Code Style\n The Code Style is available in XML format at [druid_intellij_formatting.xml](druid_intellij_formatting.xml) and can be [imported into IntelliJ](https://www.jetbrains.com/help/idea/2017.1/copying-code-style-settings.html).\n \n+## Set Code Coverage Runner\n+Druid CI checks are configured to enforce code coverage using JaCoCo. The checks will prevent PR from being merged \n+if test coverage of new added code is below the set threshold. You should run the tests locally to make sure that\n+your code pass the coverage threshold. In IntelliJ, edit the template of JUnit tests in \"Run Configurations...\" \n+to use Jacoco for code coverage (this provides branch coverage instead of the default which is only line coverage).\n+You can then right click src/test/java folder of the modules you are modifying and click run with coverage. This\n+will generate a report to show the current code coverage on the code (not just your change).\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5NTM0Mg=="}, "originalCommit": {"oid": "c285aa5f0a329ebb68695a04d72fab730422ba61"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTExNTg0OnYy", "diffSide": "RIGHT", "path": "dev/code-review/code-coverage.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTozMDo1NVrOGgkARg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMTozNDozMVrOGiLmag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5NzUxMA==", "bodyText": "I think we should call out that our current code coverage checks are merely smoke tests.\nThey only verify that a line/ branch of code has been called during the test, but not that the functionality has been tested sufficiently. Reviewers should still verify that all the different branches are sufficiently tested by reviewing the tests.", "url": "https://github.com/apache/druid/pull/9995#discussion_r436797510", "createdAt": "2020-06-08T15:30:55Z", "author": {"login": "suneet-s"}, "path": "dev/code-review/code-coverage.md", "diffHunk": "@@ -0,0 +1,33 @@\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+# Druid's Code Coverage Enforcement\n+\n+Druid has an automated way of checking if new code has adequate unit tests. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c285aa5f0a329ebb68695a04d72fab730422ba61"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5NDgyNg==", "bodyText": "Done", "url": "https://github.com/apache/druid/pull/9995#discussion_r438494826", "createdAt": "2020-06-11T01:34:31Z", "author": {"login": "maytasm"}, "path": "dev/code-review/code-coverage.md", "diffHunk": "@@ -0,0 +1,33 @@\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+# Druid's Code Coverage Enforcement\n+\n+Druid has an automated way of checking if new code has adequate unit tests. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5NzUxMA=="}, "originalCommit": {"oid": "c285aa5f0a329ebb68695a04d72fab730422ba61"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTQ0MjMzOnYy", "diffSide": "RIGHT", "path": "dev/code-review/code-coverage.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMzoyMTo0OFrOGiJcFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMTo0Nzo1OVrOGiLzZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1OTQxMg==", "bodyText": "We can also mention that this creates an HTML report in target/site/jacoco/index.html.", "url": "https://github.com/apache/druid/pull/9995#discussion_r438459412", "createdAt": "2020-06-10T23:21:48Z", "author": {"login": "ccaominh"}, "path": "dev/code-review/code-coverage.md", "diffHunk": "@@ -0,0 +1,33 @@\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+# Druid's Code Coverage Enforcement\n+\n+Druid has an automated way of checking if new code has adequate unit tests. \n+Druid CI checks are configured to enforce code coverage using JaCoCo. The CI checks will prevent PR from being merged \n+if test coverage of new added code is below the set threshold. The CI checks filters test coverage based on a diff from\n+your PR and make sure that the thresholds are met. Druid currently enforce branch and line code coverage.\n+\n+## Running code coverage locally\n+Code coverage should be run locally to make sure the PR will pass Druid CI checks. \n+1. Code coverage on the codebase can be generated directly in [Intellij](../intellij-setup.md#Set-Code-Coverage-Runner). \n+2. Code coverage on just the diff of your PR can be generated in your terminal. First, you will have to install\n+diff-test-coverage by running `npm install @connectis/diff-test-coverage`. Next, run the unit tests\n+for the module you are working on `mvn -pl <MODULE_TO_CHECK> test jacoco:report`. Finally, run ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c285aa5f0a329ebb68695a04d72fab730422ba61"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5ODE1MA==", "bodyText": "Done", "url": "https://github.com/apache/druid/pull/9995#discussion_r438498150", "createdAt": "2020-06-11T01:47:59Z", "author": {"login": "maytasm"}, "path": "dev/code-review/code-coverage.md", "diffHunk": "@@ -0,0 +1,33 @@\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+# Druid's Code Coverage Enforcement\n+\n+Druid has an automated way of checking if new code has adequate unit tests. \n+Druid CI checks are configured to enforce code coverage using JaCoCo. The CI checks will prevent PR from being merged \n+if test coverage of new added code is below the set threshold. The CI checks filters test coverage based on a diff from\n+your PR and make sure that the thresholds are met. Druid currently enforce branch and line code coverage.\n+\n+## Running code coverage locally\n+Code coverage should be run locally to make sure the PR will pass Druid CI checks. \n+1. Code coverage on the codebase can be generated directly in [Intellij](../intellij-setup.md#Set-Code-Coverage-Runner). \n+2. Code coverage on just the diff of your PR can be generated in your terminal. First, you will have to install\n+diff-test-coverage by running `npm install @connectis/diff-test-coverage`. Next, run the unit tests\n+for the module you are working on `mvn -pl <MODULE_TO_CHECK> test jacoco:report`. Finally, run ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1OTQxMg=="}, "originalCommit": {"oid": "c285aa5f0a329ebb68695a04d72fab730422ba61"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTQ0Mjg4OnYy", "diffSide": "RIGHT", "path": "dev/intellij-setup.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMzoyMjoxMVrOGiJccw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMTo0OToyMVrOGiL08g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1OTUwNw==", "bodyText": "typo: prevent RR -> prevent a PR", "url": "https://github.com/apache/druid/pull/9995#discussion_r438459507", "createdAt": "2020-06-10T23:22:11Z", "author": {"login": "ccaominh"}, "path": "dev/intellij-setup.md", "diffHunk": "@@ -34,6 +34,14 @@ an alias name. You can do this in Using `File` -> `Project Structure...` -> `Pla\n ## Code Style\n The Code Style is available in XML format at [druid_intellij_formatting.xml](druid_intellij_formatting.xml) and can be [imported into IntelliJ](https://www.jetbrains.com/help/idea/2017.1/copying-code-style-settings.html).\n \n+## Set Code Coverage Runner\n+Druid CI checks are configured to enforce code coverage using JaCoCo. The checks will prevent PR from being merged ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c285aa5f0a329ebb68695a04d72fab730422ba61"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5ODU0Ng==", "bodyText": "done", "url": "https://github.com/apache/druid/pull/9995#discussion_r438498546", "createdAt": "2020-06-11T01:49:21Z", "author": {"login": "maytasm"}, "path": "dev/intellij-setup.md", "diffHunk": "@@ -34,6 +34,14 @@ an alias name. You can do this in Using `File` -> `Project Structure...` -> `Pla\n ## Code Style\n The Code Style is available in XML format at [druid_intellij_formatting.xml](druid_intellij_formatting.xml) and can be [imported into IntelliJ](https://www.jetbrains.com/help/idea/2017.1/copying-code-style-settings.html).\n \n+## Set Code Coverage Runner\n+Druid CI checks are configured to enforce code coverage using JaCoCo. The checks will prevent PR from being merged ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1OTUwNw=="}, "originalCommit": {"oid": "c285aa5f0a329ebb68695a04d72fab730422ba61"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2298, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}