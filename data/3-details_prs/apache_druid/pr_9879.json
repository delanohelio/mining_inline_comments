{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4ODc5NTQw", "number": 9879, "title": "Querying doc refresh tutorial", "bodyText": "Updated the querying doc with steps and fresh screenshots. Reduced the emphasis on native queries relative to Druid SQL, by mostly moving discussion of it out of the tutorial. The overarching goal is to improve usability for new users by increasing the visibility of DSQL.", "createdAt": "2020-05-15T23:46:22Z", "url": "https://github.com/apache/druid/pull/9879", "merged": true, "mergeCommit": {"oid": "a33705f0e3a74e30be4e247335253ca7b8d9327b"}, "closed": true, "closedAt": "2020-05-29T21:32:22Z", "author": {"login": "sthetland"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcevvVZgH2gAyNDE4ODc5NTQwOjQ1ODg0MzgyN2M4ZDY2Yzc0M2U5ZTE0NzI0MGZlNjg5OWU2MTcyYmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcmJZhzAFqTQyMTI5OTkwNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "458843827c8d66c743e9e147240fe6899e6172ba", "author": {"user": {"login": "sthetland", "name": null}}, "url": "https://github.com/apache/druid/commit/458843827c8d66c743e9e147240fe6899e6172ba", "committedDate": "2020-05-06T21:41:03Z", "message": "Update tutorial-query.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "757a5f037abb8a9798c038f6b9acc51bc187a2e4", "author": {"user": {"login": "sthetland", "name": null}}, "url": "https://github.com/apache/druid/commit/757a5f037abb8a9798c038f6b9acc51bc187a2e4", "committedDate": "2020-05-13T23:11:56Z", "message": "First full pass complete"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "169cf3316ce37ff1f3dfa1dae0da8eeeeaf462ac", "author": {"user": {"login": "sthetland", "name": null}}, "url": "https://github.com/apache/druid/commit/169cf3316ce37ff1f3dfa1dae0da8eeeeaf462ac", "committedDate": "2020-05-15T23:24:12Z", "message": "Smoothing over, a bit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ebb430c62b869932dbdc1480cda8e82dfbbe2ad", "author": {"user": {"login": "sthetland", "name": null}}, "url": "https://github.com/apache/druid/commit/7ebb430c62b869932dbdc1480cda8e82dfbbe2ad", "committedDate": "2020-05-15T23:40:25Z", "message": "link and spell checking"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NzQ5Nzg3", "url": "https://github.com/apache/druid/pull/9879#pullrequestreview-415749787", "createdAt": "2020-05-20T22:09:56Z", "commit": {"oid": "7ebb430c62b869932dbdc1480cda8e82dfbbe2ad"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMjowOTo1NlrOGYfk5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMjoxMDo0M1rOGYfmFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMzNjM1OQ==", "bodyText": "sum_deleted should  be deleted here", "url": "https://github.com/apache/druid/pull/9879#discussion_r428336359", "createdAt": "2020-05-20T22:09:56Z", "author": {"login": "jon-wei"}, "path": "docs/tutorials/tutorial-query.md", "diffHunk": "@@ -24,56 +24,165 @@ sidebar_label: \"Querying data\"\n   -->\n \n \n-This tutorial will demonstrate how to query data in Apache Druid, with examples for Druid SQL and Druid's native query format.\n+This tutorial demonstrates how to query data in Apache Druid using Druid SQL, a SQL-like language\n+for querying data in Druid.   \n \n-The tutorial assumes that you've already completed one of the 4 ingestion tutorials, as we will be querying the sample Wikipedia edits data.\n+It assumes that you've completed the [Quickstart](../tutorials/index.md) \n+or one of the following tutorials, since we'll query datasources that you would have created\n+by following one of them:\n \n * [Tutorial: Loading a file](../tutorials/tutorial-batch.md)\n * [Tutorial: Loading stream data from Kafka](../tutorials/tutorial-kafka.md)\n * [Tutorial: Loading a file using Hadoop](../tutorials/tutorial-batch-hadoop.md)\n \n-Druid queries are sent over HTTP.\n-The Druid console includes a view to issue queries to Druid and nicely format the results.\n+There are various ways to run Druid SQL queries: from the Druid console, using a command line utility\n+and by posting the query by HTTP. We'll look at each of these. \n \n-## Druid SQL queries\n \n-Druid supports a dialect of SQL for querying.\n+## Query SQL from the Druid console\n \n-This query retrieves the 10 Wikipedia pages with the most page edits on 2015-09-12.\n+The Druid console includes a view that makes it easier to build and test queries, and \n+view their results. \n \n-```sql\n-SELECT page, COUNT(*) AS Edits\n-FROM wikipedia\n-WHERE TIMESTAMP '2015-09-12 00:00:00' <= \"__time\" AND \"__time\" < TIMESTAMP '2015-09-13 00:00:00'\n-GROUP BY page\n-ORDER BY Edits DESC\n-LIMIT 10\n-```\n+1. Start up the Druid cluster, if it's not already running, and open the Druid console in your web\n+browser. \n+\n+2. Click **Query** from the header to open the Query view:  \n+\n+   ![Query view](../assets/tutorial-query-01.png \"Query view\")\n+\n+   You can write queries directly in the edit pane, but we'll generate a starter query \n+   using query builder controls. \n+\n+3. Expand the wikipedia datasource tree in the left pane. We'll\n+create a query for the page dimension.  \n+\n+4. Click `page` and then **Show:page** from the menu: \n+\n+   ![Query select page](../assets/tutorial-query-02.png \"Query select page\")\n+\n+   A SELECT query appears in the query edit pane and immediately runs. However, in this case, the query \n+   returns no data, since by default the query filters for data from the last day, while our data is considerably\n+   older than that. Let's remove the filter.  \n+\n+5. In the datasource tree, click `__time` and **Remove Filter**. \n+\n+   ![Clear WHERE filter](../assets/tutorial-query-03.png \"Clear WHERE filter\")\n+\n+6. Click **Run** to run the query.   \n+\n+   You should now see two columns of data, a page name and the count:\n+\n+   ![Query results](../assets/tutorial-query-04.png \"Query results\")\n+\n+   Notice that the results are limited in the console to about a hundred, by default, due to the **Smart query limit** \n+   feature. This helps users avoid inadvertently running queries that return an excessive amount of data, possibly\n+   overwhelming their system. \n+\n+7. Let's edit the query directly and take a look at a few more query building features in the editor. \n+   Click in the query edit pane and make the following changes: \n+\n+   1.  Add a line after the first column, `\"page\"` and Start typing the name of a new column, `\"countryName\"`. Notice that the autocomplete menu suggests column names, functions, keywords, and more. Choose \"countryName\" and \n+add the new column to the GROUP BY clause as well, either by name or by reference to its position, `2`.  \n+\n+   2. For readability, replace `Count` column name with `Edits`, since the `COUNT()` function actually\n+returns the number of edits for the page. Make the same column name change in the ORDER BY clause as well. \n+\n+      The `COUNT()` function is one of many functions available for use in Druid SQL queries. You can mouse over a function name\n+      in the autocomplete menu to see a brief description of a function. Also, you can find more information in the Druid \n+      documentation; for example, the `COUNT()` function is documented in \n+      [Aggregation functions](../querying/sql.md#aggregation-functions). \n+\n+   The query should now be:\n+\n+   ```sql\n+   SELECT\n+     \"page\",\n+     \"countryName\",\n+     COUNT(*) AS \"Edits\"\n+   FROM \"wikipedia\"\n+   GROUP BY 1, 2\n+   ORDER BY \"Edits\" DESC\n+   ``` \n+\n+   When you run the query again, notice that we're getting the new dimension,`countryName`, but for most of the rows, its value \n+   is null. Let's \n+   show only rows with a `countryName` value.\n+\n+8. Click the countryName dimension in the left pane and choose the first filtering option. It's not exactly what we want, but\n+we'll edit it by hand. The new WHERE clause should appear in your query. \n+\n+8. Modify the WHERE clause to exclude results that do not have a value for countryName: \n+\n+   ```sql\n+   WHERE \"countryName\" IS NOT NULL\n+   ``` \n+   Run the query again. You should now see the top edits by country:  \n+\n+   ![Finished query](../assets/tutorial-query-035.png \"Finished query\")\n \n-Let's look at the different ways to issue this query.\n+9. Under the covers, every Druid SQL query is translated into a query in the JSON-based _Druid native query_ format before it runs\n+ on data nodes. You can view the native query for this query by clicking `...` and **Explain SQL Query**. \n \n-### Query SQL via the console\n+   While you can use Druid SQL for most purposes, familiarity with native query is useful for composing complex queries and for troubleshooting \n+performance issues. For more information, see [Native queries](../querying/querying.md). \n \n-You can issue the above query from the console.\n+   ![Explain query](../assets/tutorial-query-06.png \"Explain query\")\n \n-![Query autocomplete](../assets/tutorial-query-01.png \"Query autocomplete\")\n+    > Another way to view the explain plan is by adding EXPLAIN PLAN FOR to the front of your query, as follows:\n+    >\n+    >```sql\n+    >EXPLAIN PLAN FOR\n+    >SELECT\n+    >  \"page\",\n+    >  \"countryName\",\n+    >  COUNT(*) AS \"Edits\"\n+    >FROM \"wikipedia\"\n+    >WHERE \"countryName\" IS NOT NULL\n+    >GROUP BY 1, 2\n+    >ORDER BY \"Edits\" DESC\n+    >```\n+    >This is particularly useful when running queries \n+    from the command line or over HTTP.\n \n-The console query view provides autocomplete functionality with inline documentation.\n \n-![Query options](../assets/tutorial-query-02.png \"Query options\")\n+9. Finally, click  `...`  and **Edit context** to see how you can add additional parameters controlling the execution of the query execution. In the field, enter query context options as JSON key-value pairs, as described in [Context flags](../querying/query-context.md).  \n \n-You can also configure extra [context flags](../querying/query-context.md) to be sent with the query from the `...` options menu.\n+That's it! We've built a simple query using some of the query builder features built into the Druid Console. The following\n+sections provide a few more example queries you can try. Also, see [Other ways to invoke SQL queries](#other-ways-to-invoke-sql-queries) to learn how\n+to run Druid SQL from the command line or over HTTP. \n \n-Note that the console will (by default) wrap your SQL queries in a limit where appropriate so that queries such as `SELECT * FROM wikipedia` can complete.\n-You can turn off this behavior from the `Smart query limit` toggle.\n+## More Druid SQL examples\n \n-![Query actions](../assets/tutorial-query-03.png \"Query actions\")\n+Here is a collection of queries to try out:\n+\n+### Query over time\n+\n+```sql\n+SELECT FLOOR(__time to HOUR) AS HourTime, SUM(sum_deleted) AS LinesDeleted", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ebb430c62b869932dbdc1480cda8e82dfbbe2ad"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMzNjQ1NA==", "bodyText": "sum_added should be added here", "url": "https://github.com/apache/druid/pull/9879#discussion_r428336454", "createdAt": "2020-05-20T22:10:09Z", "author": {"login": "jon-wei"}, "path": "docs/tutorials/tutorial-query.md", "diffHunk": "@@ -24,56 +24,165 @@ sidebar_label: \"Querying data\"\n   -->\n \n \n-This tutorial will demonstrate how to query data in Apache Druid, with examples for Druid SQL and Druid's native query format.\n+This tutorial demonstrates how to query data in Apache Druid using Druid SQL, a SQL-like language\n+for querying data in Druid.   \n \n-The tutorial assumes that you've already completed one of the 4 ingestion tutorials, as we will be querying the sample Wikipedia edits data.\n+It assumes that you've completed the [Quickstart](../tutorials/index.md) \n+or one of the following tutorials, since we'll query datasources that you would have created\n+by following one of them:\n \n * [Tutorial: Loading a file](../tutorials/tutorial-batch.md)\n * [Tutorial: Loading stream data from Kafka](../tutorials/tutorial-kafka.md)\n * [Tutorial: Loading a file using Hadoop](../tutorials/tutorial-batch-hadoop.md)\n \n-Druid queries are sent over HTTP.\n-The Druid console includes a view to issue queries to Druid and nicely format the results.\n+There are various ways to run Druid SQL queries: from the Druid console, using a command line utility\n+and by posting the query by HTTP. We'll look at each of these. \n \n-## Druid SQL queries\n \n-Druid supports a dialect of SQL for querying.\n+## Query SQL from the Druid console\n \n-This query retrieves the 10 Wikipedia pages with the most page edits on 2015-09-12.\n+The Druid console includes a view that makes it easier to build and test queries, and \n+view their results. \n \n-```sql\n-SELECT page, COUNT(*) AS Edits\n-FROM wikipedia\n-WHERE TIMESTAMP '2015-09-12 00:00:00' <= \"__time\" AND \"__time\" < TIMESTAMP '2015-09-13 00:00:00'\n-GROUP BY page\n-ORDER BY Edits DESC\n-LIMIT 10\n-```\n+1. Start up the Druid cluster, if it's not already running, and open the Druid console in your web\n+browser. \n+\n+2. Click **Query** from the header to open the Query view:  \n+\n+   ![Query view](../assets/tutorial-query-01.png \"Query view\")\n+\n+   You can write queries directly in the edit pane, but we'll generate a starter query \n+   using query builder controls. \n+\n+3. Expand the wikipedia datasource tree in the left pane. We'll\n+create a query for the page dimension.  \n+\n+4. Click `page` and then **Show:page** from the menu: \n+\n+   ![Query select page](../assets/tutorial-query-02.png \"Query select page\")\n+\n+   A SELECT query appears in the query edit pane and immediately runs. However, in this case, the query \n+   returns no data, since by default the query filters for data from the last day, while our data is considerably\n+   older than that. Let's remove the filter.  \n+\n+5. In the datasource tree, click `__time` and **Remove Filter**. \n+\n+   ![Clear WHERE filter](../assets/tutorial-query-03.png \"Clear WHERE filter\")\n+\n+6. Click **Run** to run the query.   \n+\n+   You should now see two columns of data, a page name and the count:\n+\n+   ![Query results](../assets/tutorial-query-04.png \"Query results\")\n+\n+   Notice that the results are limited in the console to about a hundred, by default, due to the **Smart query limit** \n+   feature. This helps users avoid inadvertently running queries that return an excessive amount of data, possibly\n+   overwhelming their system. \n+\n+7. Let's edit the query directly and take a look at a few more query building features in the editor. \n+   Click in the query edit pane and make the following changes: \n+\n+   1.  Add a line after the first column, `\"page\"` and Start typing the name of a new column, `\"countryName\"`. Notice that the autocomplete menu suggests column names, functions, keywords, and more. Choose \"countryName\" and \n+add the new column to the GROUP BY clause as well, either by name or by reference to its position, `2`.  \n+\n+   2. For readability, replace `Count` column name with `Edits`, since the `COUNT()` function actually\n+returns the number of edits for the page. Make the same column name change in the ORDER BY clause as well. \n+\n+      The `COUNT()` function is one of many functions available for use in Druid SQL queries. You can mouse over a function name\n+      in the autocomplete menu to see a brief description of a function. Also, you can find more information in the Druid \n+      documentation; for example, the `COUNT()` function is documented in \n+      [Aggregation functions](../querying/sql.md#aggregation-functions). \n+\n+   The query should now be:\n+\n+   ```sql\n+   SELECT\n+     \"page\",\n+     \"countryName\",\n+     COUNT(*) AS \"Edits\"\n+   FROM \"wikipedia\"\n+   GROUP BY 1, 2\n+   ORDER BY \"Edits\" DESC\n+   ``` \n+\n+   When you run the query again, notice that we're getting the new dimension,`countryName`, but for most of the rows, its value \n+   is null. Let's \n+   show only rows with a `countryName` value.\n+\n+8. Click the countryName dimension in the left pane and choose the first filtering option. It's not exactly what we want, but\n+we'll edit it by hand. The new WHERE clause should appear in your query. \n+\n+8. Modify the WHERE clause to exclude results that do not have a value for countryName: \n+\n+   ```sql\n+   WHERE \"countryName\" IS NOT NULL\n+   ``` \n+   Run the query again. You should now see the top edits by country:  \n+\n+   ![Finished query](../assets/tutorial-query-035.png \"Finished query\")\n \n-Let's look at the different ways to issue this query.\n+9. Under the covers, every Druid SQL query is translated into a query in the JSON-based _Druid native query_ format before it runs\n+ on data nodes. You can view the native query for this query by clicking `...` and **Explain SQL Query**. \n \n-### Query SQL via the console\n+   While you can use Druid SQL for most purposes, familiarity with native query is useful for composing complex queries and for troubleshooting \n+performance issues. For more information, see [Native queries](../querying/querying.md). \n \n-You can issue the above query from the console.\n+   ![Explain query](../assets/tutorial-query-06.png \"Explain query\")\n \n-![Query autocomplete](../assets/tutorial-query-01.png \"Query autocomplete\")\n+    > Another way to view the explain plan is by adding EXPLAIN PLAN FOR to the front of your query, as follows:\n+    >\n+    >```sql\n+    >EXPLAIN PLAN FOR\n+    >SELECT\n+    >  \"page\",\n+    >  \"countryName\",\n+    >  COUNT(*) AS \"Edits\"\n+    >FROM \"wikipedia\"\n+    >WHERE \"countryName\" IS NOT NULL\n+    >GROUP BY 1, 2\n+    >ORDER BY \"Edits\" DESC\n+    >```\n+    >This is particularly useful when running queries \n+    from the command line or over HTTP.\n \n-The console query view provides autocomplete functionality with inline documentation.\n \n-![Query options](../assets/tutorial-query-02.png \"Query options\")\n+9. Finally, click  `...`  and **Edit context** to see how you can add additional parameters controlling the execution of the query execution. In the field, enter query context options as JSON key-value pairs, as described in [Context flags](../querying/query-context.md).  \n \n-You can also configure extra [context flags](../querying/query-context.md) to be sent with the query from the `...` options menu.\n+That's it! We've built a simple query using some of the query builder features built into the Druid Console. The following\n+sections provide a few more example queries you can try. Also, see [Other ways to invoke SQL queries](#other-ways-to-invoke-sql-queries) to learn how\n+to run Druid SQL from the command line or over HTTP. \n \n-Note that the console will (by default) wrap your SQL queries in a limit where appropriate so that queries such as `SELECT * FROM wikipedia` can complete.\n-You can turn off this behavior from the `Smart query limit` toggle.\n+## More Druid SQL examples\n \n-![Query actions](../assets/tutorial-query-03.png \"Query actions\")\n+Here is a collection of queries to try out:\n+\n+### Query over time\n+\n+```sql\n+SELECT FLOOR(__time to HOUR) AS HourTime, SUM(sum_deleted) AS LinesDeleted\n+FROM wikipedia WHERE \"__time\" BETWEEN TIMESTAMP '2015-09-12 00:00:00' AND TIMESTAMP '2015-09-13 00:00:00'\n+GROUP BY 1\n+```\n+\n+![Query example](../assets/tutorial-query-03.png \"Query example\")\n+\n+### General group by\n+\n+```sql\n+SELECT channel, page, SUM(sum_added)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ebb430c62b869932dbdc1480cda8e82dfbbe2ad"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMzNjYwNQ==", "bodyText": "tutorial-query-03.png should be updated to show the query above", "url": "https://github.com/apache/druid/pull/9879#discussion_r428336605", "createdAt": "2020-05-20T22:10:34Z", "author": {"login": "jon-wei"}, "path": "docs/tutorials/tutorial-query.md", "diffHunk": "@@ -24,56 +24,165 @@ sidebar_label: \"Querying data\"\n   -->\n \n \n-This tutorial will demonstrate how to query data in Apache Druid, with examples for Druid SQL and Druid's native query format.\n+This tutorial demonstrates how to query data in Apache Druid using Druid SQL, a SQL-like language\n+for querying data in Druid.   \n \n-The tutorial assumes that you've already completed one of the 4 ingestion tutorials, as we will be querying the sample Wikipedia edits data.\n+It assumes that you've completed the [Quickstart](../tutorials/index.md) \n+or one of the following tutorials, since we'll query datasources that you would have created\n+by following one of them:\n \n * [Tutorial: Loading a file](../tutorials/tutorial-batch.md)\n * [Tutorial: Loading stream data from Kafka](../tutorials/tutorial-kafka.md)\n * [Tutorial: Loading a file using Hadoop](../tutorials/tutorial-batch-hadoop.md)\n \n-Druid queries are sent over HTTP.\n-The Druid console includes a view to issue queries to Druid and nicely format the results.\n+There are various ways to run Druid SQL queries: from the Druid console, using a command line utility\n+and by posting the query by HTTP. We'll look at each of these. \n \n-## Druid SQL queries\n \n-Druid supports a dialect of SQL for querying.\n+## Query SQL from the Druid console\n \n-This query retrieves the 10 Wikipedia pages with the most page edits on 2015-09-12.\n+The Druid console includes a view that makes it easier to build and test queries, and \n+view their results. \n \n-```sql\n-SELECT page, COUNT(*) AS Edits\n-FROM wikipedia\n-WHERE TIMESTAMP '2015-09-12 00:00:00' <= \"__time\" AND \"__time\" < TIMESTAMP '2015-09-13 00:00:00'\n-GROUP BY page\n-ORDER BY Edits DESC\n-LIMIT 10\n-```\n+1. Start up the Druid cluster, if it's not already running, and open the Druid console in your web\n+browser. \n+\n+2. Click **Query** from the header to open the Query view:  \n+\n+   ![Query view](../assets/tutorial-query-01.png \"Query view\")\n+\n+   You can write queries directly in the edit pane, but we'll generate a starter query \n+   using query builder controls. \n+\n+3. Expand the wikipedia datasource tree in the left pane. We'll\n+create a query for the page dimension.  \n+\n+4. Click `page` and then **Show:page** from the menu: \n+\n+   ![Query select page](../assets/tutorial-query-02.png \"Query select page\")\n+\n+   A SELECT query appears in the query edit pane and immediately runs. However, in this case, the query \n+   returns no data, since by default the query filters for data from the last day, while our data is considerably\n+   older than that. Let's remove the filter.  \n+\n+5. In the datasource tree, click `__time` and **Remove Filter**. \n+\n+   ![Clear WHERE filter](../assets/tutorial-query-03.png \"Clear WHERE filter\")\n+\n+6. Click **Run** to run the query.   \n+\n+   You should now see two columns of data, a page name and the count:\n+\n+   ![Query results](../assets/tutorial-query-04.png \"Query results\")\n+\n+   Notice that the results are limited in the console to about a hundred, by default, due to the **Smart query limit** \n+   feature. This helps users avoid inadvertently running queries that return an excessive amount of data, possibly\n+   overwhelming their system. \n+\n+7. Let's edit the query directly and take a look at a few more query building features in the editor. \n+   Click in the query edit pane and make the following changes: \n+\n+   1.  Add a line after the first column, `\"page\"` and Start typing the name of a new column, `\"countryName\"`. Notice that the autocomplete menu suggests column names, functions, keywords, and more. Choose \"countryName\" and \n+add the new column to the GROUP BY clause as well, either by name or by reference to its position, `2`.  \n+\n+   2. For readability, replace `Count` column name with `Edits`, since the `COUNT()` function actually\n+returns the number of edits for the page. Make the same column name change in the ORDER BY clause as well. \n+\n+      The `COUNT()` function is one of many functions available for use in Druid SQL queries. You can mouse over a function name\n+      in the autocomplete menu to see a brief description of a function. Also, you can find more information in the Druid \n+      documentation; for example, the `COUNT()` function is documented in \n+      [Aggregation functions](../querying/sql.md#aggregation-functions). \n+\n+   The query should now be:\n+\n+   ```sql\n+   SELECT\n+     \"page\",\n+     \"countryName\",\n+     COUNT(*) AS \"Edits\"\n+   FROM \"wikipedia\"\n+   GROUP BY 1, 2\n+   ORDER BY \"Edits\" DESC\n+   ``` \n+\n+   When you run the query again, notice that we're getting the new dimension,`countryName`, but for most of the rows, its value \n+   is null. Let's \n+   show only rows with a `countryName` value.\n+\n+8. Click the countryName dimension in the left pane and choose the first filtering option. It's not exactly what we want, but\n+we'll edit it by hand. The new WHERE clause should appear in your query. \n+\n+8. Modify the WHERE clause to exclude results that do not have a value for countryName: \n+\n+   ```sql\n+   WHERE \"countryName\" IS NOT NULL\n+   ``` \n+   Run the query again. You should now see the top edits by country:  \n+\n+   ![Finished query](../assets/tutorial-query-035.png \"Finished query\")\n \n-Let's look at the different ways to issue this query.\n+9. Under the covers, every Druid SQL query is translated into a query in the JSON-based _Druid native query_ format before it runs\n+ on data nodes. You can view the native query for this query by clicking `...` and **Explain SQL Query**. \n \n-### Query SQL via the console\n+   While you can use Druid SQL for most purposes, familiarity with native query is useful for composing complex queries and for troubleshooting \n+performance issues. For more information, see [Native queries](../querying/querying.md). \n \n-You can issue the above query from the console.\n+   ![Explain query](../assets/tutorial-query-06.png \"Explain query\")\n \n-![Query autocomplete](../assets/tutorial-query-01.png \"Query autocomplete\")\n+    > Another way to view the explain plan is by adding EXPLAIN PLAN FOR to the front of your query, as follows:\n+    >\n+    >```sql\n+    >EXPLAIN PLAN FOR\n+    >SELECT\n+    >  \"page\",\n+    >  \"countryName\",\n+    >  COUNT(*) AS \"Edits\"\n+    >FROM \"wikipedia\"\n+    >WHERE \"countryName\" IS NOT NULL\n+    >GROUP BY 1, 2\n+    >ORDER BY \"Edits\" DESC\n+    >```\n+    >This is particularly useful when running queries \n+    from the command line or over HTTP.\n \n-The console query view provides autocomplete functionality with inline documentation.\n \n-![Query options](../assets/tutorial-query-02.png \"Query options\")\n+9. Finally, click  `...`  and **Edit context** to see how you can add additional parameters controlling the execution of the query execution. In the field, enter query context options as JSON key-value pairs, as described in [Context flags](../querying/query-context.md).  \n \n-You can also configure extra [context flags](../querying/query-context.md) to be sent with the query from the `...` options menu.\n+That's it! We've built a simple query using some of the query builder features built into the Druid Console. The following\n+sections provide a few more example queries you can try. Also, see [Other ways to invoke SQL queries](#other-ways-to-invoke-sql-queries) to learn how\n+to run Druid SQL from the command line or over HTTP. \n \n-Note that the console will (by default) wrap your SQL queries in a limit where appropriate so that queries such as `SELECT * FROM wikipedia` can complete.\n-You can turn off this behavior from the `Smart query limit` toggle.\n+## More Druid SQL examples\n \n-![Query actions](../assets/tutorial-query-03.png \"Query actions\")\n+Here is a collection of queries to try out:\n+\n+### Query over time\n+\n+```sql\n+SELECT FLOOR(__time to HOUR) AS HourTime, SUM(sum_deleted) AS LinesDeleted\n+FROM wikipedia WHERE \"__time\" BETWEEN TIMESTAMP '2015-09-12 00:00:00' AND TIMESTAMP '2015-09-13 00:00:00'\n+GROUP BY 1\n+```\n+\n+![Query example](../assets/tutorial-query-03.png \"Query example\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ebb430c62b869932dbdc1480cda8e82dfbbe2ad"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMzNjY2MQ==", "bodyText": "tutorial-query-04.png should be updated to show the query above", "url": "https://github.com/apache/druid/pull/9879#discussion_r428336661", "createdAt": "2020-05-20T22:10:43Z", "author": {"login": "jon-wei"}, "path": "docs/tutorials/tutorial-query.md", "diffHunk": "@@ -24,56 +24,165 @@ sidebar_label: \"Querying data\"\n   -->\n \n \n-This tutorial will demonstrate how to query data in Apache Druid, with examples for Druid SQL and Druid's native query format.\n+This tutorial demonstrates how to query data in Apache Druid using Druid SQL, a SQL-like language\n+for querying data in Druid.   \n \n-The tutorial assumes that you've already completed one of the 4 ingestion tutorials, as we will be querying the sample Wikipedia edits data.\n+It assumes that you've completed the [Quickstart](../tutorials/index.md) \n+or one of the following tutorials, since we'll query datasources that you would have created\n+by following one of them:\n \n * [Tutorial: Loading a file](../tutorials/tutorial-batch.md)\n * [Tutorial: Loading stream data from Kafka](../tutorials/tutorial-kafka.md)\n * [Tutorial: Loading a file using Hadoop](../tutorials/tutorial-batch-hadoop.md)\n \n-Druid queries are sent over HTTP.\n-The Druid console includes a view to issue queries to Druid and nicely format the results.\n+There are various ways to run Druid SQL queries: from the Druid console, using a command line utility\n+and by posting the query by HTTP. We'll look at each of these. \n \n-## Druid SQL queries\n \n-Druid supports a dialect of SQL for querying.\n+## Query SQL from the Druid console\n \n-This query retrieves the 10 Wikipedia pages with the most page edits on 2015-09-12.\n+The Druid console includes a view that makes it easier to build and test queries, and \n+view their results. \n \n-```sql\n-SELECT page, COUNT(*) AS Edits\n-FROM wikipedia\n-WHERE TIMESTAMP '2015-09-12 00:00:00' <= \"__time\" AND \"__time\" < TIMESTAMP '2015-09-13 00:00:00'\n-GROUP BY page\n-ORDER BY Edits DESC\n-LIMIT 10\n-```\n+1. Start up the Druid cluster, if it's not already running, and open the Druid console in your web\n+browser. \n+\n+2. Click **Query** from the header to open the Query view:  \n+\n+   ![Query view](../assets/tutorial-query-01.png \"Query view\")\n+\n+   You can write queries directly in the edit pane, but we'll generate a starter query \n+   using query builder controls. \n+\n+3. Expand the wikipedia datasource tree in the left pane. We'll\n+create a query for the page dimension.  \n+\n+4. Click `page` and then **Show:page** from the menu: \n+\n+   ![Query select page](../assets/tutorial-query-02.png \"Query select page\")\n+\n+   A SELECT query appears in the query edit pane and immediately runs. However, in this case, the query \n+   returns no data, since by default the query filters for data from the last day, while our data is considerably\n+   older than that. Let's remove the filter.  \n+\n+5. In the datasource tree, click `__time` and **Remove Filter**. \n+\n+   ![Clear WHERE filter](../assets/tutorial-query-03.png \"Clear WHERE filter\")\n+\n+6. Click **Run** to run the query.   \n+\n+   You should now see two columns of data, a page name and the count:\n+\n+   ![Query results](../assets/tutorial-query-04.png \"Query results\")\n+\n+   Notice that the results are limited in the console to about a hundred, by default, due to the **Smart query limit** \n+   feature. This helps users avoid inadvertently running queries that return an excessive amount of data, possibly\n+   overwhelming their system. \n+\n+7. Let's edit the query directly and take a look at a few more query building features in the editor. \n+   Click in the query edit pane and make the following changes: \n+\n+   1.  Add a line after the first column, `\"page\"` and Start typing the name of a new column, `\"countryName\"`. Notice that the autocomplete menu suggests column names, functions, keywords, and more. Choose \"countryName\" and \n+add the new column to the GROUP BY clause as well, either by name or by reference to its position, `2`.  \n+\n+   2. For readability, replace `Count` column name with `Edits`, since the `COUNT()` function actually\n+returns the number of edits for the page. Make the same column name change in the ORDER BY clause as well. \n+\n+      The `COUNT()` function is one of many functions available for use in Druid SQL queries. You can mouse over a function name\n+      in the autocomplete menu to see a brief description of a function. Also, you can find more information in the Druid \n+      documentation; for example, the `COUNT()` function is documented in \n+      [Aggregation functions](../querying/sql.md#aggregation-functions). \n+\n+   The query should now be:\n+\n+   ```sql\n+   SELECT\n+     \"page\",\n+     \"countryName\",\n+     COUNT(*) AS \"Edits\"\n+   FROM \"wikipedia\"\n+   GROUP BY 1, 2\n+   ORDER BY \"Edits\" DESC\n+   ``` \n+\n+   When you run the query again, notice that we're getting the new dimension,`countryName`, but for most of the rows, its value \n+   is null. Let's \n+   show only rows with a `countryName` value.\n+\n+8. Click the countryName dimension in the left pane and choose the first filtering option. It's not exactly what we want, but\n+we'll edit it by hand. The new WHERE clause should appear in your query. \n+\n+8. Modify the WHERE clause to exclude results that do not have a value for countryName: \n+\n+   ```sql\n+   WHERE \"countryName\" IS NOT NULL\n+   ``` \n+   Run the query again. You should now see the top edits by country:  \n+\n+   ![Finished query](../assets/tutorial-query-035.png \"Finished query\")\n \n-Let's look at the different ways to issue this query.\n+9. Under the covers, every Druid SQL query is translated into a query in the JSON-based _Druid native query_ format before it runs\n+ on data nodes. You can view the native query for this query by clicking `...` and **Explain SQL Query**. \n \n-### Query SQL via the console\n+   While you can use Druid SQL for most purposes, familiarity with native query is useful for composing complex queries and for troubleshooting \n+performance issues. For more information, see [Native queries](../querying/querying.md). \n \n-You can issue the above query from the console.\n+   ![Explain query](../assets/tutorial-query-06.png \"Explain query\")\n \n-![Query autocomplete](../assets/tutorial-query-01.png \"Query autocomplete\")\n+    > Another way to view the explain plan is by adding EXPLAIN PLAN FOR to the front of your query, as follows:\n+    >\n+    >```sql\n+    >EXPLAIN PLAN FOR\n+    >SELECT\n+    >  \"page\",\n+    >  \"countryName\",\n+    >  COUNT(*) AS \"Edits\"\n+    >FROM \"wikipedia\"\n+    >WHERE \"countryName\" IS NOT NULL\n+    >GROUP BY 1, 2\n+    >ORDER BY \"Edits\" DESC\n+    >```\n+    >This is particularly useful when running queries \n+    from the command line or over HTTP.\n \n-The console query view provides autocomplete functionality with inline documentation.\n \n-![Query options](../assets/tutorial-query-02.png \"Query options\")\n+9. Finally, click  `...`  and **Edit context** to see how you can add additional parameters controlling the execution of the query execution. In the field, enter query context options as JSON key-value pairs, as described in [Context flags](../querying/query-context.md).  \n \n-You can also configure extra [context flags](../querying/query-context.md) to be sent with the query from the `...` options menu.\n+That's it! We've built a simple query using some of the query builder features built into the Druid Console. The following\n+sections provide a few more example queries you can try. Also, see [Other ways to invoke SQL queries](#other-ways-to-invoke-sql-queries) to learn how\n+to run Druid SQL from the command line or over HTTP. \n \n-Note that the console will (by default) wrap your SQL queries in a limit where appropriate so that queries such as `SELECT * FROM wikipedia` can complete.\n-You can turn off this behavior from the `Smart query limit` toggle.\n+## More Druid SQL examples\n \n-![Query actions](../assets/tutorial-query-03.png \"Query actions\")\n+Here is a collection of queries to try out:\n+\n+### Query over time\n+\n+```sql\n+SELECT FLOOR(__time to HOUR) AS HourTime, SUM(sum_deleted) AS LinesDeleted\n+FROM wikipedia WHERE \"__time\" BETWEEN TIMESTAMP '2015-09-12 00:00:00' AND TIMESTAMP '2015-09-13 00:00:00'\n+GROUP BY 1\n+```\n+\n+![Query example](../assets/tutorial-query-03.png \"Query example\")\n+\n+### General group by\n+\n+```sql\n+SELECT channel, page, SUM(sum_added)\n+FROM wikipedia WHERE \"__time\" BETWEEN TIMESTAMP '2015-09-12 00:00:00' AND TIMESTAMP '2015-09-13 00:00:00'\n+GROUP BY channel, page\n+ORDER BY SUM(added) DESC\n+```\n \n-The query view provides contextual actions that can write and modify the query for you. \n+![Query example](../assets/tutorial-query-04.png \"Query example\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ebb430c62b869932dbdc1480cda8e82dfbbe2ad"}, "originalPosition": 181}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NjQzNzUx", "url": "https://github.com/apache/druid/pull/9879#pullrequestreview-416643751", "createdAt": "2020-05-22T04:42:32Z", "commit": {"oid": "7ebb430c62b869932dbdc1480cda8e82dfbbe2ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDo0MjozMlrOGZKekg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDo0MjozMlrOGZKekg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzOTI1MA==", "bodyText": "Maybe add in a sentence here:\n\"If you are running quick start, you should replace <queryable_host>: with localhost: 8082\"\nSometimes I find it frustrating when reading tutorials but can't find the default parameter.", "url": "https://github.com/apache/druid/pull/9879#discussion_r429039250", "createdAt": "2020-05-22T04:42:32Z", "author": {"login": "2bethere"}, "path": "docs/querying/querying.md", "diffHunk": "@@ -44,7 +49,7 @@ The Content-Type/Accept Headers can also take 'application/x-jackson-smile'.\n curl -X POST '<queryable_host>:<port>/druid/v2/?pretty' -H 'Content-Type:application/json' -H 'Accept:application/x-jackson-smile' -d @<query_json_file>\n ```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ebb430c62b869932dbdc1480cda8e82dfbbe2ad"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b101baba20286aaa9e102bb8bd0e0e653ba447b", "author": {"user": {"login": "sthetland", "name": null}}, "url": "https://github.com/apache/druid/commit/1b101baba20286aaa9e102bb8bd0e0e653ba447b", "committedDate": "2020-05-22T23:48:20Z", "message": "Update querying.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5af85fd28768ec8b00601670dbd40e8a902e78c8", "author": {"user": {"login": "sthetland", "name": null}}, "url": "https://github.com/apache/druid/commit/5af85fd28768ec8b00601670dbd40e8a902e78c8", "committedDate": "2020-05-22T23:51:03Z", "message": "Review comments; screenshot fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1aa8e17aa08a8af57e2b66099021f07928f4c750", "author": {"user": {"login": "sthetland", "name": null}}, "url": "https://github.com/apache/druid/commit/1aa8e17aa08a8af57e2b66099021f07928f4c750", "committedDate": "2020-05-22T23:51:36Z", "message": "Merge branch 'querying-doc-refresh-tutorial' of https://github.com/sthetland/druid into querying-doc-refresh-tutorial"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dba4063fd1615ff80b694f0234abb80faf74bbff", "author": {"user": {"login": "sthetland", "name": null}}, "url": "https://github.com/apache/druid/commit/dba4063fd1615ff80b694f0234abb80faf74bbff", "committedDate": "2020-05-22T23:59:17Z", "message": "Making ports consistent, pending confirmation \n\nSwitching to the Router port, to make this be consistent with the tutorial ports, but can switch back here and there if it should be 8082 instead."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95fc9690717cbb131e08a4d763b3e79cd7415682", "author": {"user": {"login": "sthetland", "name": null}}, "url": "https://github.com/apache/druid/commit/95fc9690717cbb131e08a4d763b3e79cd7415682", "committedDate": "2020-05-23T00:08:01Z", "message": "Resizing screenshot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0c39179741240850e0af5c451c2b68b6b57e7da", "author": {"user": {"login": "sthetland", "name": null}}, "url": "https://github.com/apache/druid/commit/b0c39179741240850e0af5c451c2b68b6b57e7da", "committedDate": "2020-05-23T00:09:03Z", "message": "Merge branch 'querying-doc-refresh-tutorial' of https://github.com/sthetland/druid into querying-doc-refresh-tutorial"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a887f8ab9cfcd61c09fd5caf166b6796c7ad5879", "author": {"user": {"login": "sthetland", "name": null}}, "url": "https://github.com/apache/druid/commit/a887f8ab9cfcd61c09fd5caf166b6796c7ad5879", "committedDate": "2020-05-25T18:25:31Z", "message": "Update querying.md"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NzExMDk1", "url": "https://github.com/apache/druid/pull/9879#pullrequestreview-418711095", "createdAt": "2020-05-26T22:03:58Z", "commit": {"oid": "7ebb430c62b869932dbdc1480cda8e82dfbbe2ad"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1ODY4ODg1", "url": "https://github.com/apache/druid/pull/9879#pullrequestreview-415868885", "createdAt": "2020-05-21T04:21:32Z", "commit": {"oid": "7ebb430c62b869932dbdc1480cda8e82dfbbe2ad"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNDoyMTozM1rOGYltrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOToyNjowNFrOGbaA1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzNjkxMQ==", "bodyText": "imo maybe this should just be\n\nThis tutorial demonstrates how to query data in Apache Druid using SQL.", "url": "https://github.com/apache/druid/pull/9879#discussion_r428436911", "createdAt": "2020-05-21T04:21:33Z", "author": {"login": "clintropolis"}, "path": "docs/tutorials/tutorial-query.md", "diffHunk": "@@ -24,56 +24,165 @@ sidebar_label: \"Querying data\"\n   -->\n \n \n-This tutorial will demonstrate how to query data in Apache Druid, with examples for Druid SQL and Druid's native query format.\n+This tutorial demonstrates how to query data in Apache Druid using Druid SQL, a SQL-like language", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ebb430c62b869932dbdc1480cda8e82dfbbe2ad"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQzOTM3MA==", "bodyText": "\"query builder controls\" isn't super obvious I think, suggestion:\n\nYou can always write queries directly in the edit pane, but the Query view also provides facilities to help you construct SQL queries, which we will use to generate a starter query.", "url": "https://github.com/apache/druid/pull/9879#discussion_r428439370", "createdAt": "2020-05-21T04:33:20Z", "author": {"login": "clintropolis"}, "path": "docs/tutorials/tutorial-query.md", "diffHunk": "@@ -24,56 +24,165 @@ sidebar_label: \"Querying data\"\n   -->\n \n \n-This tutorial will demonstrate how to query data in Apache Druid, with examples for Druid SQL and Druid's native query format.\n+This tutorial demonstrates how to query data in Apache Druid using Druid SQL, a SQL-like language\n+for querying data in Druid.   \n \n-The tutorial assumes that you've already completed one of the 4 ingestion tutorials, as we will be querying the sample Wikipedia edits data.\n+It assumes that you've completed the [Quickstart](../tutorials/index.md) \n+or one of the following tutorials, since we'll query datasources that you would have created\n+by following one of them:\n \n * [Tutorial: Loading a file](../tutorials/tutorial-batch.md)\n * [Tutorial: Loading stream data from Kafka](../tutorials/tutorial-kafka.md)\n * [Tutorial: Loading a file using Hadoop](../tutorials/tutorial-batch-hadoop.md)\n \n-Druid queries are sent over HTTP.\n-The Druid console includes a view to issue queries to Druid and nicely format the results.\n+There are various ways to run Druid SQL queries: from the Druid console, using a command line utility\n+and by posting the query by HTTP. We'll look at each of these. \n \n-## Druid SQL queries\n \n-Druid supports a dialect of SQL for querying.\n+## Query SQL from the Druid console\n \n-This query retrieves the 10 Wikipedia pages with the most page edits on 2015-09-12.\n+The Druid console includes a view that makes it easier to build and test queries, and \n+view their results. \n \n-```sql\n-SELECT page, COUNT(*) AS Edits\n-FROM wikipedia\n-WHERE TIMESTAMP '2015-09-12 00:00:00' <= \"__time\" AND \"__time\" < TIMESTAMP '2015-09-13 00:00:00'\n-GROUP BY page\n-ORDER BY Edits DESC\n-LIMIT 10\n-```\n+1. Start up the Druid cluster, if it's not already running, and open the Druid console in your web\n+browser. \n+\n+2. Click **Query** from the header to open the Query view:  \n+\n+   ![Query view](../assets/tutorial-query-01.png \"Query view\")\n+\n+   You can write queries directly in the edit pane, but we'll generate a starter query ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ebb430c62b869932dbdc1480cda8e82dfbbe2ad"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5MDczOA==", "bodyText": "nit: '.. Druid native queries.'", "url": "https://github.com/apache/druid/pull/9879#discussion_r431390738", "createdAt": "2020-05-27T19:25:41Z", "author": {"login": "clintropolis"}, "path": "docs/tutorials/tutorial-query.md", "diffHunk": "@@ -162,150 +272,8 @@ The following results should be returned:\n ]\n ```\n \n-### More Druid SQL examples\n-\n-Here is a collection of queries to try out:\n-\n-#### Query over time\n-\n-```sql\n-SELECT FLOOR(__time to HOUR) AS HourTime, SUM(deleted) AS LinesDeleted\n-FROM wikipedia WHERE \"__time\" BETWEEN TIMESTAMP '2015-09-12 00:00:00' AND TIMESTAMP '2015-09-13 00:00:00'\n-GROUP BY 1\n-```\n-\n-![Query example](../assets/tutorial-query-03.png \"Query example\")\n-\n-#### General group by\n-\n-```sql\n-SELECT channel, page, SUM(added)\n-FROM wikipedia WHERE \"__time\" BETWEEN TIMESTAMP '2015-09-12 00:00:00' AND TIMESTAMP '2015-09-13 00:00:00'\n-GROUP BY channel, page\n-ORDER BY SUM(added) DESC\n-```\n-\n-![Query example](../assets/tutorial-query-04.png \"Query example\")\n-\n-#### Select raw data\n-\n-```sql\n-SELECT user, page\n-FROM wikipedia WHERE \"__time\" BETWEEN TIMESTAMP '2015-09-12 02:00:00' AND TIMESTAMP '2015-09-12 03:00:00'\n-LIMIT 5\n-```\n-\n-![Query example](../assets/tutorial-query-05.png \"Query example\")\n-\n-### Explain query plan\n-\n-Druid SQL has the ability to explain the query plan for a given query.\n-In the console this functionality is accessible from the `...` button.\n-\n-![Explain query](../assets/tutorial-query-06.png \"Explain query\")\n-\n-If you are querying in other ways you can get the plan by prepending `EXPLAIN PLAN FOR ` to a Druid SQL query.\n-\n-Using a query from an example above:\n-\n-`EXPLAIN PLAN FOR SELECT page, COUNT(*) AS Edits FROM wikipedia WHERE \"__time\" BETWEEN TIMESTAMP '2015-09-12 00:00:00' AND TIMESTAMP '2015-09-13 00:00:00' GROUP BY page ORDER BY Edits DESC LIMIT 10;`\n-\n-```bash\n-dsql> EXPLAIN PLAN FOR SELECT page, COUNT(*) AS Edits FROM wikipedia WHERE \"__time\" BETWEEN TIMESTAMP '2015-09-12 00:00:00' AND TIMESTAMP '2015-09-13 00:00:00' GROUP BY page ORDER BY Edits DESC LIMIT 10;\n-\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n-\uu2502\n-\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n-\u2502 DruidQueryRel(query=[{\"queryType\":\"topN\",\"dataSource\":{\"type\":\"table\",\"name\":\"wikipedia\"},\"virtualColumns\":[],\"dimension\":{\"type\":\"default\",\"dimension\":\"page\",\"outputName\":\"d0\",\"outputType\":\"STRING\"},\"metric\":{\"type\":\"numeric\",\"metric\":\"a0\"},\"threshold\":10,\"intervals\":{\"type\":\"intervals\",\"intervals\":[\"2015-09-12T00:00:00.000Z/2015-09-13T00:00:00.001Z\"]},\"filter\":null,\"granularity\":{\"type\":\"all\"},\"aggregations\":[{\"type\":\"count\",\"name\":\"a0\"}],\"postAggregations\":[],\"context\":{},\"descending\":false}], signature=[{d0:STRING, a0:LONG}]) \u2502\n-\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n-Retrieved 1 row in 0.03s.\n-```\n-\n-\n-## Native JSON queries\n-\n-Druid's native query format is expressed in JSON.\n-\n-### Native query via the console\n-\n-You can issue native Druid queries from the console's Query view.\n-\n-Here is a query that retrieves the 10 Wikipedia pages with the most page edits on 2015-09-12.\n-\n-```json\n-{\n-  \"queryType\" : \"topN\",\n-  \"dataSource\" : \"wikipedia\",\n-  \"intervals\" : [\"2015-09-12/2015-09-13\"],\n-  \"granularity\" : \"all\",\n-  \"dimension\" : \"page\",\n-  \"metric\" : \"count\",\n-  \"threshold\" : 10,\n-  \"aggregations\" : [\n-    {\n-      \"type\" : \"count\",\n-      \"name\" : \"count\"\n-    }\n-  ]\n-}\n-```\n-\n-Simply paste it into the console to switch the editor into JSON mode.\n-\n-![Native query](../assets/tutorial-query-07.png \"Native query\")\n-\n-\n-### Native queries over HTTP\n-\n-We have included a sample native TopN query under `quickstart/tutorial/wikipedia-top-pages.json`:\n-\n-Let's submit this query to Druid:\n-\n-```bash\n-curl -X 'POST' -H 'Content-Type:application/json' -d @quickstart/tutorial/wikipedia-top-pages.json http://localhost:8888/druid/v2?pretty\n-```\n-\n-You should see the following query results:\n-\n-```json\n-[ {\n-  \"timestamp\" : \"2015-09-12T00:46:58.771Z\",\n-  \"result\" : [ {\n-    \"count\" : 33,\n-    \"page\" : \"Wikipedia:Vandalismusmeldung\"\n-  }, {\n-    \"count\" : 28,\n-    \"page\" : \"User:Cyde/List of candidates for speedy deletion/Subpage\"\n-  }, {\n-    \"count\" : 27,\n-    \"page\" : \"Jeremy Corbyn\"\n-  }, {\n-    \"count\" : 21,\n-    \"page\" : \"Wikipedia:Administrators' noticeboard/Incidents\"\n-  }, {\n-    \"count\" : 20,\n-    \"page\" : \"Flavia Pennetta\"\n-  }, {\n-    \"count\" : 18,\n-    \"page\" : \"Total Drama Presents: The Ridonculous Race\"\n-  }, {\n-    \"count\" : 18,\n-    \"page\" : \"User talk:Dudeperson176123\"\n-  }, {\n-    \"count\" : 18,\n-    \"page\" : \"Wikip\u00e9dia:Le Bistro/12 septembre 2015\"\n-  }, {\n-    \"count\" : 17,\n-    \"page\" : \"Wikipedia:In the news/Candidates\"\n-  }, {\n-    \"count\" : 17,\n-    \"page\" : \"Wikipedia:Requests for page protection\"\n-  } ]\n-} ]\n-```\n-\n-\n ## Further reading\n \n-The [Queries documentation](../querying/querying.md) has more information on Druid's native JSON queries.\n+See the [Queries documentation](../querying/querying.md) for more information on Druid native query.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a887f8ab9cfcd61c09fd5caf166b6796c7ad5879"}, "originalPosition": 352}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5MDkzMg==", "bodyText": "Should the order of these links be flipped since it makes SQL more prominent than native queries?", "url": "https://github.com/apache/druid/pull/9879#discussion_r431390932", "createdAt": "2020-05-27T19:26:04Z", "author": {"login": "clintropolis"}, "path": "docs/tutorials/tutorial-query.md", "diffHunk": "@@ -162,150 +272,8 @@ The following results should be returned:\n ]\n ```\n \n-### More Druid SQL examples\n-\n-Here is a collection of queries to try out:\n-\n-#### Query over time\n-\n-```sql\n-SELECT FLOOR(__time to HOUR) AS HourTime, SUM(deleted) AS LinesDeleted\n-FROM wikipedia WHERE \"__time\" BETWEEN TIMESTAMP '2015-09-12 00:00:00' AND TIMESTAMP '2015-09-13 00:00:00'\n-GROUP BY 1\n-```\n-\n-![Query example](../assets/tutorial-query-03.png \"Query example\")\n-\n-#### General group by\n-\n-```sql\n-SELECT channel, page, SUM(added)\n-FROM wikipedia WHERE \"__time\" BETWEEN TIMESTAMP '2015-09-12 00:00:00' AND TIMESTAMP '2015-09-13 00:00:00'\n-GROUP BY channel, page\n-ORDER BY SUM(added) DESC\n-```\n-\n-![Query example](../assets/tutorial-query-04.png \"Query example\")\n-\n-#### Select raw data\n-\n-```sql\n-SELECT user, page\n-FROM wikipedia WHERE \"__time\" BETWEEN TIMESTAMP '2015-09-12 02:00:00' AND TIMESTAMP '2015-09-12 03:00:00'\n-LIMIT 5\n-```\n-\n-![Query example](../assets/tutorial-query-05.png \"Query example\")\n-\n-### Explain query plan\n-\n-Druid SQL has the ability to explain the query plan for a given query.\n-In the console this functionality is accessible from the `...` button.\n-\n-![Explain query](../assets/tutorial-query-06.png \"Explain query\")\n-\n-If you are querying in other ways you can get the plan by prepending `EXPLAIN PLAN FOR ` to a Druid SQL query.\n-\n-Using a query from an example above:\n-\n-`EXPLAIN PLAN FOR SELECT page, COUNT(*) AS Edits FROM wikipedia WHERE \"__time\" BETWEEN TIMESTAMP '2015-09-12 00:00:00' AND TIMESTAMP '2015-09-13 00:00:00' GROUP BY page ORDER BY Edits DESC LIMIT 10;`\n-\n-```bash\n-dsql> EXPLAIN PLAN FOR SELECT page, COUNT(*) AS Edits FROM wikipedia WHERE \"__time\" BETWEEN TIMESTAMP '2015-09-12 00:00:00' AND TIMESTAMP '2015-09-13 00:00:00' GROUP BY page ORDER BY Edits DESC LIMIT 10;\n-\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n-\uu2502\n-\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n-\u2502 DruidQueryRel(query=[{\"queryType\":\"topN\",\"dataSource\":{\"type\":\"table\",\"name\":\"wikipedia\"},\"virtualColumns\":[],\"dimension\":{\"type\":\"default\",\"dimension\":\"page\",\"outputName\":\"d0\",\"outputType\":\"STRING\"},\"metric\":{\"type\":\"numeric\",\"metric\":\"a0\"},\"threshold\":10,\"intervals\":{\"type\":\"intervals\",\"intervals\":[\"2015-09-12T00:00:00.000Z/2015-09-13T00:00:00.001Z\"]},\"filter\":null,\"granularity\":{\"type\":\"all\"},\"aggregations\":[{\"type\":\"count\",\"name\":\"a0\"}],\"postAggregations\":[],\"context\":{},\"descending\":false}], signature=[{d0:STRING, a0:LONG}]) \u2502\n-\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n-Retrieved 1 row in 0.03s.\n-```\n-\n-\n-## Native JSON queries\n-\n-Druid's native query format is expressed in JSON.\n-\n-### Native query via the console\n-\n-You can issue native Druid queries from the console's Query view.\n-\n-Here is a query that retrieves the 10 Wikipedia pages with the most page edits on 2015-09-12.\n-\n-```json\n-{\n-  \"queryType\" : \"topN\",\n-  \"dataSource\" : \"wikipedia\",\n-  \"intervals\" : [\"2015-09-12/2015-09-13\"],\n-  \"granularity\" : \"all\",\n-  \"dimension\" : \"page\",\n-  \"metric\" : \"count\",\n-  \"threshold\" : 10,\n-  \"aggregations\" : [\n-    {\n-      \"type\" : \"count\",\n-      \"name\" : \"count\"\n-    }\n-  ]\n-}\n-```\n-\n-Simply paste it into the console to switch the editor into JSON mode.\n-\n-![Native query](../assets/tutorial-query-07.png \"Native query\")\n-\n-\n-### Native queries over HTTP\n-\n-We have included a sample native TopN query under `quickstart/tutorial/wikipedia-top-pages.json`:\n-\n-Let's submit this query to Druid:\n-\n-```bash\n-curl -X 'POST' -H 'Content-Type:application/json' -d @quickstart/tutorial/wikipedia-top-pages.json http://localhost:8888/druid/v2?pretty\n-```\n-\n-You should see the following query results:\n-\n-```json\n-[ {\n-  \"timestamp\" : \"2015-09-12T00:46:58.771Z\",\n-  \"result\" : [ {\n-    \"count\" : 33,\n-    \"page\" : \"Wikipedia:Vandalismusmeldung\"\n-  }, {\n-    \"count\" : 28,\n-    \"page\" : \"User:Cyde/List of candidates for speedy deletion/Subpage\"\n-  }, {\n-    \"count\" : 27,\n-    \"page\" : \"Jeremy Corbyn\"\n-  }, {\n-    \"count\" : 21,\n-    \"page\" : \"Wikipedia:Administrators' noticeboard/Incidents\"\n-  }, {\n-    \"count\" : 20,\n-    \"page\" : \"Flavia Pennetta\"\n-  }, {\n-    \"count\" : 18,\n-    \"page\" : \"Total Drama Presents: The Ridonculous Race\"\n-  }, {\n-    \"count\" : 18,\n-    \"page\" : \"User talk:Dudeperson176123\"\n-  }, {\n-    \"count\" : 18,\n-    \"page\" : \"Wikip\u00e9dia:Le Bistro/12 septembre 2015\"\n-  }, {\n-    \"count\" : 17,\n-    \"page\" : \"Wikipedia:In the news/Candidates\"\n-  }, {\n-    \"count\" : 17,\n-    \"page\" : \"Wikipedia:Requests for page protection\"\n-  } ]\n-} ]\n-```\n-\n-\n ## Further reading\n \n-The [Queries documentation](../querying/querying.md) has more information on Druid's native JSON queries.\n+See the [Queries documentation](../querying/querying.md) for more information on Druid native query.\n \n-The [Druid SQL documentation](../querying/sql.md) has more information on using Druid SQL queries.\n+See the [Druid SQL documentation](../querying/sql.md) for more information on using Druid SQL queries.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a887f8ab9cfcd61c09fd5caf166b6796c7ad5879"}, "originalPosition": 355}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "738f08af6ea078650a58a8e0f75c4fad2a93fe47", "author": {"user": {"login": "sthetland", "name": null}}, "url": "https://github.com/apache/druid/commit/738f08af6ea078650a58a8e0f75c4fad2a93fe47", "committedDate": "2020-05-27T20:57:05Z", "message": "Review feedback incorporated."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMjk5OTA3", "url": "https://github.com/apache/druid/pull/9879#pullrequestreview-421299907", "createdAt": "2020-05-29T21:32:14Z", "commit": {"oid": "738f08af6ea078650a58a8e0f75c4fad2a93fe47"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2346, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}