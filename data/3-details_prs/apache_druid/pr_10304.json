{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwOTE3NDky", "number": 10304, "title": "Add vectorization for druid-histogram extension", "bodyText": "Description\nThis PR adds vectorization support for Aggregators in the druid-histogram extension. While these changes are unlikely to result in the usage of SIMD instructions, they can still help gain performance in two ways I can think of\n\nBeing more cache-friendly and less number of function calls\nEnable vectorization for the whole query when one of the participating aggregator is Approximate Histogram assuming other aggregators in query support vectorization.\n\nThe code is refactored to reduce duplicate code. Much of the buffer manipulations are now called from *HistogramBufferAggregatorInternal classes which are in-turn used by *HistogramBufferAggregator and *HistogramVectorAggregator\n\nThis PR has:\n\n been self-reviewed.\n\n using the concurrency checklist (Remove this item if the PR doesn't have any relation to concurrency.)\n\n\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths, ensuring the threshold for code coverage is met.\n added integration tests.\n been tested in a test Druid cluster.\n\n\n\nKey changed/added classes in this PR\n\nApproximateHistogramVectorAggregator\nApproximateHistogramFoldingVectorAggregator\nFixedBucketsHistogramVectorAggregator", "createdAt": "2020-08-20T13:39:07Z", "url": "https://github.com/apache/druid/pull/10304", "merged": true, "mergeCommit": {"oid": "a5c46dc84b903ffd934c312a51f53dac74227e57"}, "closed": true, "closedAt": "2020-09-09T20:56:34Z", "author": {"login": "abhishekagarwal87"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAfwungH2gAyNDcwOTE3NDkyOmNjMzhlY2M1NDU0ZDA5Yjc5NjZiODdiOWMxNTY5YWM5MzBkNjk3ZTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHR8T5AFqTQ4NTM2NjMwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "cc38ecc5454d09b7966b87b9c1569ac930d697e6", "author": {"user": {"login": "abhishekagarwal87", "name": "Abhishek Agarwal"}}, "url": "https://github.com/apache/druid/commit/cc38ecc5454d09b7966b87b9c1569ac930d697e6", "committedDate": "2020-08-19T18:17:31Z", "message": "First draft"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55401cde3715db3baec2d617cbcef7131713fee2", "author": {"user": {"login": "abhishekagarwal87", "name": "Abhishek Agarwal"}}, "url": "https://github.com/apache/druid/commit/55401cde3715db3baec2d617cbcef7131713fee2", "committedDate": "2020-08-20T13:05:10Z", "message": "Merge branch 'master' of github.com:apache/druid into histogram-vectorization"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNjkwNzU5", "url": "https://github.com/apache/druid/pull/10304#pullrequestreview-471690759", "createdAt": "2020-08-20T14:47:53Z", "commit": {"oid": "55401cde3715db3baec2d617cbcef7131713fee2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNDo0Nzo1M1rOHEFJgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNDo0Nzo1M1rOHEFJgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA0MDcwNQ==", "bodyText": "I might have carried forward a bug here. This if/else should most likely be inverted. cc @jon-wei", "url": "https://github.com/apache/druid/pull/10304#discussion_r474040705", "createdAt": "2020-08-20T14:47:53Z", "author": {"login": "abhishekagarwal87"}, "path": "extensions-core/histogram/src/main/java/org/apache/druid/query/aggregation/histogram/FixedBucketsHistogramBufferAggregatorInternal.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.aggregation.histogram;\n+\n+import org.apache.druid.common.config.NullHandling;\n+\n+import javax.annotation.Nullable;\n+import java.nio.ByteBuffer;\n+\n+public class FixedBucketsHistogramBufferAggregatorInternal\n+{\n+  private final double lowerLimit;\n+  private final double upperLimit;\n+  private final int numBuckets;\n+  private final FixedBucketsHistogram.OutlierHandlingMode outlierHandlingMode;\n+\n+  public FixedBucketsHistogramBufferAggregatorInternal(\n+      double lowerLimit,\n+      double upperLimit,\n+      int numBuckets,\n+      FixedBucketsHistogram.OutlierHandlingMode outlierHandlingMode\n+  )\n+  {\n+\n+    this.lowerLimit = lowerLimit;\n+    this.upperLimit = upperLimit;\n+    this.numBuckets = numBuckets;\n+    this.outlierHandlingMode = outlierHandlingMode;\n+  }\n+\n+  public void init(ByteBuffer buf, int position)\n+  {\n+    ByteBuffer mutationBuffer = buf.duplicate();\n+    mutationBuffer.position(position);\n+    FixedBucketsHistogram histogram = new FixedBucketsHistogram(\n+        lowerLimit,\n+        upperLimit,\n+        numBuckets,\n+        outlierHandlingMode\n+    );\n+    mutationBuffer.put(histogram.toBytesFull(false));\n+  }\n+\n+  public void aggregate(ByteBuffer buf, int position, @Nullable Object val)\n+  {\n+    ByteBuffer mutationBuffer = buf.duplicate();\n+    mutationBuffer.position(position);\n+\n+    FixedBucketsHistogram h0 = FixedBucketsHistogram.fromByteBufferFullNoSerdeHeader(mutationBuffer);\n+    combine(h0, val);\n+\n+    mutationBuffer.position(position);\n+    mutationBuffer.put(h0.toBytesFull(false));\n+  }\n+\n+  public void combine(FixedBucketsHistogram histogram, @Nullable Object next)\n+  {\n+    if (next == null) {\n+      if (NullHandling.replaceWithDefault()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55401cde3715db3baec2d617cbcef7131713fee2"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30aa2515ad0efe45d598b871f596063e9d24dfc7", "author": {"user": {"login": "abhishekagarwal87", "name": "Abhishek Agarwal"}}, "url": "https://github.com/apache/druid/commit/30aa2515ad0efe45d598b871f596063e9d24dfc7", "committedDate": "2020-08-20T15:30:18Z", "message": "Remove redundant code from FixedBucketsHistogramAggregator classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b47c90634c746d66812736b6202a976ea7dc7cb2", "author": {"user": {"login": "abhishekagarwal87", "name": "Abhishek Agarwal"}}, "url": "https://github.com/apache/druid/commit/b47c90634c746d66812736b6202a976ea7dc7cb2", "committedDate": "2020-08-21T15:23:01Z", "message": "Add test cases for new classes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNjAwMjI2", "url": "https://github.com/apache/druid/pull/10304#pullrequestreview-472600226", "createdAt": "2020-08-21T15:45:57Z", "commit": {"oid": "b47c90634c746d66812736b6202a976ea7dc7cb2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTo0NTo1OFrOHEyS7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTo0NTo1OFrOHEyS7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4MDM5OA==", "bodyText": "this looks unnecessary", "url": "https://github.com/apache/druid/pull/10304#discussion_r474780398", "createdAt": "2020-08-21T15:45:58Z", "author": {"login": "abhishekagarwal87"}, "path": "extensions-core/histogram/src/main/java/org/apache/druid/query/aggregation/histogram/ApproximateHistogramFoldingBufferAggregatorInternal.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.aggregation.histogram;\n+\n+import javax.annotation.Nullable;\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * A helper class used by {@link ApproximateHistogramFoldingBufferAggregator} and\n+ * {@link ApproximateHistogramFoldingVectorAggregator} for aggregation operations on byte buffers.\n+ * Getting the object from value selectors is outside this class.\n+ */\n+final class ApproximateHistogramFoldingBufferAggregatorInternal\n+{\n+  private final int resolution;\n+  private final float upperLimit;\n+  private final float lowerLimit;\n+\n+  private float[] tmpBufferA;\n+  private long[] tmpBufferB;\n+\n+  public ApproximateHistogramFoldingBufferAggregatorInternal(\n+      int resolution,\n+      float lowerLimit,\n+      float upperLimit\n+  )\n+  {\n+    this.resolution = resolution;\n+    this.lowerLimit = lowerLimit;\n+    this.upperLimit = upperLimit;\n+\n+    tmpBufferA = new float[resolution];\n+    tmpBufferB = new long[resolution];\n+  }\n+\n+  public void init(ByteBuffer buf, int position)\n+  {\n+    ApproximateHistogram h = new ApproximateHistogram(resolution, lowerLimit, upperLimit);\n+\n+    ByteBuffer mutationBuffer = buf.duplicate();\n+    mutationBuffer.position(position);\n+    // use dense storage for aggregation\n+    h.toBytesDense(mutationBuffer);\n+  }\n+\n+  public void aggregate(ByteBuffer buf, int position, @Nullable ApproximateHistogram hNext)\n+  {\n+    if (hNext == null) {\n+      return;\n+    }\n+    ByteBuffer mutationBuffer = buf.duplicate();\n+    mutationBuffer.position(position);\n+\n+    ApproximateHistogram h0 = ApproximateHistogram.fromBytesDense(mutationBuffer);\n+    foldFast(h0, hNext);\n+\n+    mutationBuffer.position(position);\n+    h0.toBytesDense(mutationBuffer);\n+  }\n+\n+  public void foldFast(ApproximateHistogram left, ApproximateHistogram right)\n+  {\n+    //TODO: do these have to set in every call\n+    left.setLowerLimit(lowerLimit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b47c90634c746d66812736b6202a976ea7dc7cb2"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNjAyNjM0", "url": "https://github.com/apache/druid/pull/10304#pullrequestreview-472602634", "createdAt": "2020-08-21T15:49:31Z", "commit": {"oid": "b47c90634c746d66812736b6202a976ea7dc7cb2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTo0OTozMVrOHEyaRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTo0OTozMVrOHEyaRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4MjI3Ng==", "bodyText": "This is a copy of old implementation. However, I noticed that ApproximateHistogramAggregator has the following implementation instead which looks more correct. calling foldFast with inadequate space results in an exception.\n if (left.binCount() + right.binCount() <= tmpBufferB.length) {\n      left.foldFast(right, tmpBufferA, tmpBufferB);\n    } else {\n      left.foldFast(right);\n    }", "url": "https://github.com/apache/druid/pull/10304#discussion_r474782276", "createdAt": "2020-08-21T15:49:31Z", "author": {"login": "abhishekagarwal87"}, "path": "extensions-core/histogram/src/main/java/org/apache/druid/query/aggregation/histogram/ApproximateHistogramFoldingBufferAggregatorInternal.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.aggregation.histogram;\n+\n+import javax.annotation.Nullable;\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * A helper class used by {@link ApproximateHistogramFoldingBufferAggregator} and\n+ * {@link ApproximateHistogramFoldingVectorAggregator} for aggregation operations on byte buffers.\n+ * Getting the object from value selectors is outside this class.\n+ */\n+final class ApproximateHistogramFoldingBufferAggregatorInternal\n+{\n+  private final int resolution;\n+  private final float upperLimit;\n+  private final float lowerLimit;\n+\n+  private float[] tmpBufferA;\n+  private long[] tmpBufferB;\n+\n+  public ApproximateHistogramFoldingBufferAggregatorInternal(\n+      int resolution,\n+      float lowerLimit,\n+      float upperLimit\n+  )\n+  {\n+    this.resolution = resolution;\n+    this.lowerLimit = lowerLimit;\n+    this.upperLimit = upperLimit;\n+\n+    tmpBufferA = new float[resolution];\n+    tmpBufferB = new long[resolution];\n+  }\n+\n+  public void init(ByteBuffer buf, int position)\n+  {\n+    ApproximateHistogram h = new ApproximateHistogram(resolution, lowerLimit, upperLimit);\n+\n+    ByteBuffer mutationBuffer = buf.duplicate();\n+    mutationBuffer.position(position);\n+    // use dense storage for aggregation\n+    h.toBytesDense(mutationBuffer);\n+  }\n+\n+  public void aggregate(ByteBuffer buf, int position, @Nullable ApproximateHistogram hNext)\n+  {\n+    if (hNext == null) {\n+      return;\n+    }\n+    ByteBuffer mutationBuffer = buf.duplicate();\n+    mutationBuffer.position(position);\n+\n+    ApproximateHistogram h0 = ApproximateHistogram.fromBytesDense(mutationBuffer);\n+    foldFast(h0, hNext);\n+\n+    mutationBuffer.position(position);\n+    h0.toBytesDense(mutationBuffer);\n+  }\n+\n+  public void foldFast(ApproximateHistogram left, ApproximateHistogram right)\n+  {\n+    //TODO: do these have to set in every call\n+    left.setLowerLimit(lowerLimit);\n+    left.setUpperLimit(upperLimit);\n+    left.foldFast(right, tmpBufferA, tmpBufferB);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b47c90634c746d66812736b6202a976ea7dc7cb2"}, "originalPosition": 83}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81e72a51acadeebf324ee133f22b15ce5d63e5d4", "author": {"user": {"login": "abhishekagarwal87", "name": "Abhishek Agarwal"}}, "url": "https://github.com/apache/druid/commit/81e72a51acadeebf324ee133f22b15ce5d63e5d4", "committedDate": "2020-08-25T12:49:03Z", "message": "Fix tests in sql compatible mode"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MzU3Mzk2", "url": "https://github.com/apache/druid/pull/10304#pullrequestreview-475357396", "createdAt": "2020-08-26T10:28:01Z", "commit": {"oid": "81e72a51acadeebf324ee133f22b15ce5d63e5d4"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDoyODowMVrOHHF5_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMTowNDoyMVrOHHG_bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE5ODg0Nw==", "bodyText": "Did you consider making the shared functionality just be static methods to be more consistent with how HyperUniquesBufferAggregator and HyperUniquesVectorAggregator are implemented? This is totally nitpicking, but something just seems off about these things having a thing called 'innerAggregator' that doesn't implement any of the aggregator interfaces.", "url": "https://github.com/apache/druid/pull/10304#discussion_r477198847", "createdAt": "2020-08-26T10:28:01Z", "author": {"login": "clintropolis"}, "path": "extensions-core/histogram/src/main/java/org/apache/druid/query/aggregation/histogram/ApproximateHistogramBufferAggregator.java", "diffHunk": "@@ -28,54 +28,30 @@\n public class ApproximateHistogramBufferAggregator implements BufferAggregator\n {\n   private final BaseFloatColumnValueSelector selector;\n-  private final int resolution;\n+  private final ApproximateHistogramBufferAggregatorInternal innerAggregator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81e72a51acadeebf324ee133f22b15ce5d63e5d4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIwMDQ5Mg==", "bodyText": "typo: 'datapoin' -> 'datapoint'", "url": "https://github.com/apache/druid/pull/10304#discussion_r477200492", "createdAt": "2020-08-26T10:31:12Z", "author": {"login": "clintropolis"}, "path": "extensions-core/histogram/src/main/java/org/apache/druid/query/aggregation/histogram/FixedBucketsHistogram.java", "diffHunk": "@@ -431,6 +433,33 @@ public void incrementMissing()\n     }\n   }\n \n+  /**\n+   * Merge another datapoint into this one. The other datapoin could be", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81e72a51acadeebf324ee133f22b15ce5d63e5d4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIwMDg2Nw==", "bodyText": "I think this isn't possible since canVectorize checks that capabilities isn't null", "url": "https://github.com/apache/druid/pull/10304#discussion_r477200867", "createdAt": "2020-08-26T10:31:55Z", "author": {"login": "clintropolis"}, "path": "extensions-core/histogram/src/main/java/org/apache/druid/query/aggregation/histogram/FixedBucketsHistogramAggregatorFactory.java", "diffHunk": "@@ -99,6 +105,34 @@ public BufferAggregator factorizeBuffered(ColumnSelectorFactory metricFactory)\n     );\n   }\n \n+  @Override\n+  public VectorAggregator factorizeVector(VectorColumnSelectorFactory columnSelectorFactory)\n+  {\n+    ColumnCapabilities capabilities = columnSelectorFactory.getColumnCapabilities(fieldName);\n+    if (null == capabilities) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81e72a51acadeebf324ee133f22b15ce5d63e5d4"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIwMzYyMg==", "bodyText": "I'm not sure this function should be shared between the vectorized and non-vectorized aggregator. For the vector aggregator the if should probably be outside of the for loop i think, because the contents of the vector will be consistent throughout the loop.\nAlso, I think you might need different selectors depending on if the inputs to the aggregator are numeric primitives (value selector to get double vector and null boolean vector), or if the input is other fixed bucket histogram sketches (object selector to get array of histogram objects). The fixed bucket histogram aggregator is a combined primitive and sketch merging aggregator, unlike the approximate histogram aggregators which are split and handles the sketch inputs and result merges with the 'fold' aggregators.", "url": "https://github.com/apache/druid/pull/10304#discussion_r477203622", "createdAt": "2020-08-26T10:37:27Z", "author": {"login": "clintropolis"}, "path": "extensions-core/histogram/src/main/java/org/apache/druid/query/aggregation/histogram/FixedBucketsHistogram.java", "diffHunk": "@@ -431,6 +433,33 @@ public void incrementMissing()\n     }\n   }\n \n+  /**\n+   * Merge another datapoint into this one. The other datapoin could be\n+   *  - base64 encoded string of {@code FixedBucketsHistogram}\n+   *  - {@code FixedBucketsHistogram} object\n+   *  - Numeric value\n+   *\n+   * @param val\n+   */\n+  void combine(@Nullable Object val)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81e72a51acadeebf324ee133f22b15ce5d63e5d4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIwODQ3Mw==", "bodyText": "you can also ignore null checks entirely if NullHandling.sqlCompatible() is true, would suggest saving it as a private final field in the constructor and then maybe add something like final boolean checkNulls = hasNulls && isValueNull != null", "url": "https://github.com/apache/druid/pull/10304#discussion_r477208473", "createdAt": "2020-08-26T10:47:43Z", "author": {"login": "clintropolis"}, "path": "extensions-core/histogram/src/main/java/org/apache/druid/query/aggregation/histogram/ApproximateHistogramVectorAggregator.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.aggregation.histogram;\n+\n+import org.apache.druid.query.aggregation.VectorAggregator;\n+import org.apache.druid.segment.vector.VectorValueSelector;\n+\n+import javax.annotation.Nullable;\n+import java.nio.ByteBuffer;\n+\n+public class ApproximateHistogramVectorAggregator implements VectorAggregator\n+{\n+\n+  private final VectorValueSelector selector;\n+  private final ApproximateHistogramBufferAggregatorInternal innerAggregator;\n+\n+  public ApproximateHistogramVectorAggregator(\n+      VectorValueSelector selector,\n+      int resolution\n+  )\n+  {\n+    this.selector = selector;\n+    this.innerAggregator = new ApproximateHistogramBufferAggregatorInternal(resolution);\n+  }\n+\n+  @Override\n+  public void init(final ByteBuffer buf, final int position)\n+  {\n+    innerAggregator.init(buf, position);\n+  }\n+\n+  @Override\n+  public void aggregate(final ByteBuffer buf, final int position, final int startRow, final int endRow)\n+  {\n+    final boolean[] isValueNull = selector.getNullVector();\n+    final float[] vector = selector.getFloatVector();\n+    ApproximateHistogram histogram = innerAggregator.get(buf, position);\n+\n+    for (int i = startRow; i < endRow; i++) {\n+      if (isValueNull != null && isValueNull[i]) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81e72a51acadeebf324ee133f22b15ce5d63e5d4"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIwOTM5MQ==", "bodyText": "A quick look and I think I agree, but am not totally certain. Can you try to find out if it is needed so we can remove this TODO and either remove the code, or add a comment on why it needs to be here?", "url": "https://github.com/apache/druid/pull/10304#discussion_r477209391", "createdAt": "2020-08-26T10:49:34Z", "author": {"login": "clintropolis"}, "path": "extensions-core/histogram/src/main/java/org/apache/druid/query/aggregation/histogram/ApproximateHistogramFoldingBufferAggregatorInternal.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.aggregation.histogram;\n+\n+import javax.annotation.Nullable;\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * A helper class used by {@link ApproximateHistogramFoldingBufferAggregator} and\n+ * {@link ApproximateHistogramFoldingVectorAggregator} for aggregation operations on byte buffers.\n+ * Getting the object from value selectors is outside this class.\n+ */\n+final class ApproximateHistogramFoldingBufferAggregatorInternal\n+{\n+  private final int resolution;\n+  private final float upperLimit;\n+  private final float lowerLimit;\n+\n+  private float[] tmpBufferA;\n+  private long[] tmpBufferB;\n+\n+  public ApproximateHistogramFoldingBufferAggregatorInternal(\n+      int resolution,\n+      float lowerLimit,\n+      float upperLimit\n+  )\n+  {\n+    this.resolution = resolution;\n+    this.lowerLimit = lowerLimit;\n+    this.upperLimit = upperLimit;\n+\n+    tmpBufferA = new float[resolution];\n+    tmpBufferB = new long[resolution];\n+  }\n+\n+  public void init(ByteBuffer buf, int position)\n+  {\n+    ApproximateHistogram h = new ApproximateHistogram(resolution, lowerLimit, upperLimit);\n+\n+    ByteBuffer mutationBuffer = buf.duplicate();\n+    mutationBuffer.position(position);\n+    // use dense storage for aggregation\n+    h.toBytesDense(mutationBuffer);\n+  }\n+\n+  public void aggregate(ByteBuffer buf, int position, @Nullable ApproximateHistogram hNext)\n+  {\n+    if (hNext == null) {\n+      return;\n+    }\n+    ByteBuffer mutationBuffer = buf.duplicate();\n+    mutationBuffer.position(position);\n+\n+    ApproximateHistogram h0 = ApproximateHistogram.fromBytesDense(mutationBuffer);\n+    foldFast(h0, hNext);\n+\n+    mutationBuffer.position(position);\n+    h0.toBytesDense(mutationBuffer);\n+  }\n+\n+  public void foldFast(ApproximateHistogram left, ApproximateHistogram right)\n+  {\n+    //TODO: do these have to set in every call\n+    left.setLowerLimit(lowerLimit);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4MDM5OA=="}, "originalCommit": {"oid": "b47c90634c746d66812736b6202a976ea7dc7cb2"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIxMTY2Nw==", "bodyText": "Did you mean to only handle numeric primitive inputs? The input type could also be complex if you handle fixed bucket histogram inputs, but you would need another vector aggregator implementation I think that takes an object selector instead of value selector", "url": "https://github.com/apache/druid/pull/10304#discussion_r477211667", "createdAt": "2020-08-26T10:54:11Z", "author": {"login": "clintropolis"}, "path": "extensions-core/histogram/src/main/java/org/apache/druid/query/aggregation/histogram/FixedBucketsHistogramAggregatorFactory.java", "diffHunk": "@@ -99,6 +105,34 @@ public BufferAggregator factorizeBuffered(ColumnSelectorFactory metricFactory)\n     );\n   }\n \n+  @Override\n+  public VectorAggregator factorizeVector(VectorColumnSelectorFactory columnSelectorFactory)\n+  {\n+    ColumnCapabilities capabilities = columnSelectorFactory.getColumnCapabilities(fieldName);\n+    if (null == capabilities) {\n+      throw new IAE(\"could not find the column type for column %s\", fieldName);\n+    }\n+    ValueType type = capabilities.getType();\n+    if (type.isNumeric()) {\n+      return new FixedBucketsHistogramVectorAggregator(\n+          columnSelectorFactory.makeValueSelector(fieldName),\n+          lowerLimit,\n+          upperLimit,\n+          numBuckets,\n+          outlierHandlingMode\n+      );\n+    } else {\n+      throw new IAE(\"cannot vectorize fixed bucket histogram aggregation for type %s\", type);\n+    }\n+  }\n+\n+  @Override\n+  public boolean canVectorize(ColumnInspector columnInspector)\n+  {\n+    ColumnCapabilities capabilities = columnInspector.getColumnCapabilities(fieldName);\n+    return (capabilities != null) && capabilities.getType().isNumeric();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81e72a51acadeebf324ee133f22b15ce5d63e5d4"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIxNDUzOA==", "bodyText": "nit: suggest ColumnCapabilitiesImpl.createSimpleNumericColumnCapabilities(ValueType.DOUBLE) since it will create realistic double capabilities (numbers are not dictionary encoded for example)", "url": "https://github.com/apache/druid/pull/10304#discussion_r477214538", "createdAt": "2020-08-26T10:59:56Z", "author": {"login": "clintropolis"}, "path": "extensions-core/histogram/src/test/java/org/apache/druid/query/aggregation/histogram/ApproximateHistogramVectorAggregatorTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.aggregation.histogram;\n+\n+import org.apache.druid.common.config.NullHandling;\n+import org.apache.druid.query.aggregation.VectorAggregator;\n+import org.apache.druid.segment.column.ColumnCapabilities;\n+import org.apache.druid.segment.column.ColumnCapabilitiesImpl;\n+import org.apache.druid.segment.column.ValueType;\n+import org.apache.druid.segment.vector.VectorColumnSelectorFactory;\n+import org.apache.druid.segment.vector.VectorValueSelector;\n+import org.easymock.EasyMock;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.nio.ByteBuffer;\n+\n+import static org.easymock.EasyMock.createMock;\n+import static org.easymock.EasyMock.expect;\n+\n+public class ApproximateHistogramVectorAggregatorTest\n+{\n+  private static final float[] FLOATS = {23, 19, 10, 16, 36, 2, 9, 32, 30, 45, 33};   // Last value is never included\n+  private static final boolean[] NULL_VECTOR =\n+      {false, false, false, false, false, false, false, false, false, false, true};\n+  private VectorColumnSelectorFactory vectorColumnSelectorFactory;\n+\n+  @Before\n+  public void setup()\n+  {\n+    NullHandling.initializeForTests();\n+    VectorValueSelector vectorValueSelector_1 = createMock(VectorValueSelector.class);\n+    expect(vectorValueSelector_1.getFloatVector()).andReturn(FLOATS).anyTimes();\n+    expect(vectorValueSelector_1.getNullVector()).andReturn(NULL_VECTOR).anyTimes();\n+\n+    VectorValueSelector vectorValueSelector_2 = createMock(VectorValueSelector.class);\n+    expect(vectorValueSelector_2.getFloatVector()).andReturn(FLOATS).anyTimes();\n+    expect(vectorValueSelector_2.getNullVector()).andReturn(null).anyTimes();\n+\n+    EasyMock.replay(vectorValueSelector_1);\n+    EasyMock.replay(vectorValueSelector_2);\n+\n+    ColumnCapabilities columnCapabilities\n+        = new ColumnCapabilitiesImpl().setType(ValueType.DOUBLE).setDictionaryEncoded(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81e72a51acadeebf324ee133f22b15ce5d63e5d4"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIxNDgxMQ==", "bodyText": "nit: same comment about capabilities", "url": "https://github.com/apache/druid/pull/10304#discussion_r477214811", "createdAt": "2020-08-26T11:00:33Z", "author": {"login": "clintropolis"}, "path": "extensions-core/histogram/src/test/java/org/apache/druid/query/aggregation/histogram/FixedBucketsHistogramVectorAggregatorTest.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.aggregation.histogram;\n+\n+import org.apache.druid.common.config.NullHandling;\n+import org.apache.druid.query.aggregation.VectorAggregator;\n+import org.apache.druid.segment.column.ColumnCapabilities;\n+import org.apache.druid.segment.column.ColumnCapabilitiesImpl;\n+import org.apache.druid.segment.column.ValueType;\n+import org.apache.druid.segment.vector.VectorColumnSelectorFactory;\n+import org.apache.druid.segment.vector.VectorValueSelector;\n+import org.easymock.EasyMock;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.nio.ByteBuffer;\n+\n+import static org.easymock.EasyMock.createMock;\n+import static org.easymock.EasyMock.expect;\n+\n+public class FixedBucketsHistogramVectorAggregatorTest\n+{\n+  private static final double[] DOUBLES = {1.0, 12.0, 3.0, 14.0, 15.0, 16.0};\n+  private static final boolean[] NULL_VECTOR = {false, false, false, false, true, false};\n+  private VectorColumnSelectorFactory vectorColumnSelectorFactory;\n+\n+  @Before\n+  public void setup()\n+  {\n+    NullHandling.initializeForTests();\n+    VectorValueSelector vectorValueSelector_1 = createMock(VectorValueSelector.class);\n+    expect(vectorValueSelector_1.getDoubleVector()).andReturn(DOUBLES).anyTimes();\n+    expect(vectorValueSelector_1.getNullVector()).andReturn(NULL_VECTOR).anyTimes();\n+\n+    VectorValueSelector vectorValueSelector_2 = createMock(VectorValueSelector.class);\n+    expect(vectorValueSelector_2.getDoubleVector()).andReturn(DOUBLES).anyTimes();\n+    expect(vectorValueSelector_2.getNullVector()).andReturn(null).anyTimes();\n+\n+    EasyMock.replay(vectorValueSelector_1);\n+    EasyMock.replay(vectorValueSelector_2);\n+\n+    ColumnCapabilities columnCapabilities\n+        = new ColumnCapabilitiesImpl().setType(ValueType.DOUBLE).setDictionaryEncoded(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81e72a51acadeebf324ee133f22b15ce5d63e5d4"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIxNjYyMQ==", "bodyText": "should this check if the column is numeric or complex similar to the fixed buckets aggregator factory? I don't think we have a good way for aggregators to handle string inputs in vectorized engine yet either, unless you use SingleValueDimensionVectorSelector or MultiValueDimensionVectorSelector and lookup the string values for the int arrays yourself, so should probably exclude strings at least (not that they make much sense as an input anyway).", "url": "https://github.com/apache/druid/pull/10304#discussion_r477216621", "createdAt": "2020-08-26T11:04:21Z", "author": {"login": "clintropolis"}, "path": "extensions-core/histogram/src/main/java/org/apache/druid/query/aggregation/histogram/ApproximateHistogramAggregatorFactory.java", "diffHunk": "@@ -102,6 +105,21 @@ public BufferAggregator factorizeBuffered(ColumnSelectorFactory metricFactory)\n     );\n   }\n \n+  @Override\n+  public VectorAggregator factorizeVector(VectorColumnSelectorFactory metricVectorFactory)\n+  {\n+    return new ApproximateHistogramVectorAggregator(\n+        metricVectorFactory.makeValueSelector(fieldName),\n+        resolution\n+    );\n+  }\n+\n+  @Override\n+  public boolean canVectorize(ColumnInspector columnInspector)\n+  {\n+    return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81e72a51acadeebf324ee133f22b15ce5d63e5d4"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a294a91caa28adb7df949de86ea2d6ff5b91b51c", "author": {"user": {"login": "abhishekagarwal87", "name": "Abhishek Agarwal"}}, "url": "https://github.com/apache/druid/commit/a294a91caa28adb7df949de86ea2d6ff5b91b51c", "committedDate": "2020-08-27T14:08:07Z", "message": "Typo fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19b2b72f061c0373dc7910e201999a62b557b2c5", "author": {"user": {"login": "abhishekagarwal87", "name": "Abhishek Agarwal"}}, "url": "https://github.com/apache/druid/commit/19b2b72f061c0373dc7910e201999a62b557b2c5", "committedDate": "2020-08-27T14:23:19Z", "message": "Typo fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db59ddd104cd2fed2e82db5780bf9d54d4a6b188", "author": {"user": {"login": "abhishekagarwal87", "name": "Abhishek Agarwal"}}, "url": "https://github.com/apache/druid/commit/db59ddd104cd2fed2e82db5780bf9d54d4a6b188", "committedDate": "2020-08-28T06:57:22Z", "message": "Fix comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "182b6102d774eddb1ef06383ae79c1c30c9df115", "author": {"user": {"login": "abhishekagarwal87", "name": "Abhishek Agarwal"}}, "url": "https://github.com/apache/druid/commit/182b6102d774eddb1ef06383ae79c1c30c9df115", "committedDate": "2020-08-28T08:59:20Z", "message": "Add spelling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwNjcwMTE1", "url": "https://github.com/apache/druid/pull/10304#pullrequestreview-480670115", "createdAt": "2020-09-02T10:04:30Z", "commit": {"oid": "182b6102d774eddb1ef06383ae79c1c30c9df115"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMDowNDozMFrOHLoFeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMTo1NTozMVrOHLrpgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk1MzE0NQ==", "bodyText": "We need to handle it somehow because if not it will fail when making the value selector (because there is no string value selector) org.apache.druid.query.QueryInterruptedException: Cannot make VectorValueSelector for column with class[org.apache.druid.segment.column.StringDictionaryEncodedColumn]. This is inconsistent with the non-vectorized behavior, which treats the input as 0 from the dimension selectors.\nThe ways it can be handled are with either the canVectorize method checking explicitly for numeric types, or special handling in factorizeVector to use a nil vector selector instead of trying to make a value selector. You probably want similar checks for other agg factories, as is appropriate for the types they handle.", "url": "https://github.com/apache/druid/pull/10304#discussion_r481953145", "createdAt": "2020-09-02T10:04:30Z", "author": {"login": "clintropolis"}, "path": "extensions-core/histogram/src/main/java/org/apache/druid/query/aggregation/histogram/ApproximateHistogramAggregatorFactory.java", "diffHunk": "@@ -102,6 +105,21 @@ public BufferAggregator factorizeBuffered(ColumnSelectorFactory metricFactory)\n     );\n   }\n \n+  @Override\n+  public VectorAggregator factorizeVector(VectorColumnSelectorFactory metricVectorFactory)\n+  {\n+    return new ApproximateHistogramVectorAggregator(\n+        metricVectorFactory.makeValueSelector(fieldName),\n+        resolution\n+    );\n+  }\n+\n+  @Override\n+  public boolean canVectorize(ColumnInspector columnInspector)\n+  {\n+    return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIxNjYyMQ=="}, "originalCommit": {"oid": "81e72a51acadeebf324ee133f22b15ce5d63e5d4"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk1MzkzNQ==", "bodyText": "super nitpick, feel free to ignore, but maybe consider naming this (and similar classes) to something like ApproximateHistogramBufferAggregatorHelper instead of ApproximateHistogramBufferAggregatorInternal to be more consistent with the naming of this style of class with the rest of the codebase. I looked around and this PR has the only classes with an Internal suffix but there are many with the Helper suffix, and is consistent with the javadoc for this class.", "url": "https://github.com/apache/druid/pull/10304#discussion_r481953935", "createdAt": "2020-09-02T10:05:59Z", "author": {"login": "clintropolis"}, "path": "extensions-core/histogram/src/main/java/org/apache/druid/query/aggregation/histogram/ApproximateHistogramBufferAggregatorInternal.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.aggregation.histogram;\n+\n+import java.nio.ByteBuffer;\n+\n+/**\n+ * A helper class used by {@link ApproximateHistogramBufferAggregator} and {@link ApproximateHistogramVectorAggregator}\n+ * for aggregation operations on byte buffers. Getting the object from value selectors is outside this class.\n+ */\n+final class ApproximateHistogramBufferAggregatorInternal", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "182b6102d774eddb1ef06383ae79c1c30c9df115"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk1NTg3Ng==", "bodyText": "Ah yeah i wasn't imagining checking all the conditions in the loop, the checkNulls value I was thinking of would be in the loop, similar to hasNulls in your example. Thinking further about it though, there is no real need/advantage to checking NullHandling.sqlCompatible().", "url": "https://github.com/apache/druid/pull/10304#discussion_r481955876", "createdAt": "2020-09-02T10:09:39Z", "author": {"login": "clintropolis"}, "path": "extensions-core/histogram/src/main/java/org/apache/druid/query/aggregation/histogram/ApproximateHistogramVectorAggregator.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.aggregation.histogram;\n+\n+import org.apache.druid.query.aggregation.VectorAggregator;\n+import org.apache.druid.segment.vector.VectorValueSelector;\n+\n+import javax.annotation.Nullable;\n+import java.nio.ByteBuffer;\n+\n+public class ApproximateHistogramVectorAggregator implements VectorAggregator\n+{\n+\n+  private final VectorValueSelector selector;\n+  private final ApproximateHistogramBufferAggregatorInternal innerAggregator;\n+\n+  public ApproximateHistogramVectorAggregator(\n+      VectorValueSelector selector,\n+      int resolution\n+  )\n+  {\n+    this.selector = selector;\n+    this.innerAggregator = new ApproximateHistogramBufferAggregatorInternal(resolution);\n+  }\n+\n+  @Override\n+  public void init(final ByteBuffer buf, final int position)\n+  {\n+    innerAggregator.init(buf, position);\n+  }\n+\n+  @Override\n+  public void aggregate(final ByteBuffer buf, final int position, final int startRow, final int endRow)\n+  {\n+    final boolean[] isValueNull = selector.getNullVector();\n+    final float[] vector = selector.getFloatVector();\n+    ApproximateHistogram histogram = innerAggregator.get(buf, position);\n+\n+    for (int i = startRow; i < endRow; i++) {\n+      if (isValueNull != null && isValueNull[i]) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIwODQ3Mw=="}, "originalCommit": {"oid": "81e72a51acadeebf324ee133f22b15ce5d63e5d4"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjAxMTUyMw==", "bodyText": "it isn't obvious from this PR, but out of curiosity are there any tests which confirm that the vectorized aggregator results match the non-vectorized output?", "url": "https://github.com/apache/druid/pull/10304#discussion_r482011523", "createdAt": "2020-09-02T11:55:31Z", "author": {"login": "clintropolis"}, "path": "extensions-core/histogram/src/test/java/org/apache/druid/query/aggregation/histogram/ApproximateHistogramVectorAggregatorTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.aggregation.histogram;\n+\n+import org.apache.druid.common.config.NullHandling;\n+import org.apache.druid.query.aggregation.VectorAggregator;\n+import org.apache.druid.segment.column.ColumnCapabilities;\n+import org.apache.druid.segment.column.ColumnCapabilitiesImpl;\n+import org.apache.druid.segment.column.ValueType;\n+import org.apache.druid.segment.vector.VectorColumnSelectorFactory;\n+import org.apache.druid.segment.vector.VectorValueSelector;\n+import org.easymock.EasyMock;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.nio.ByteBuffer;\n+\n+import static org.easymock.EasyMock.createMock;\n+import static org.easymock.EasyMock.expect;\n+\n+public class ApproximateHistogramVectorAggregatorTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "182b6102d774eddb1ef06383ae79c1c30c9df115"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44f276f3e4c74a755a0e28ee4c5d560d03fc6ac6", "author": {"user": {"login": "abhishekagarwal87", "name": "Abhishek Agarwal"}}, "url": "https://github.com/apache/druid/commit/44f276f3e4c74a755a0e28ee4c5d560d03fc6ac6", "committedDate": "2020-09-03T09:57:06Z", "message": "Vectorize only for supported types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09ace2d0b9aaf40082891b7f34e2b4420a3c8a3d", "author": {"user": {"login": "abhishekagarwal87", "name": "Abhishek Agarwal"}}, "url": "https://github.com/apache/druid/commit/09ace2d0b9aaf40082891b7f34e2b4420a3c8a3d", "committedDate": "2020-09-03T09:58:29Z", "message": "Rename internal aggregator files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adfb1353cb2b0fb7c8f52232f5c14e06b74f3496", "author": {"user": {"login": "abhishekagarwal87", "name": "Abhishek Agarwal"}}, "url": "https://github.com/apache/druid/commit/adfb1353cb2b0fb7c8f52232f5c14e06b74f3496", "committedDate": "2020-09-03T11:32:56Z", "message": "Fix tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NjU3MDIx", "url": "https://github.com/apache/druid/pull/10304#pullrequestreview-484657021", "createdAt": "2020-09-09T04:45:09Z", "commit": {"oid": "adfb1353cb2b0fb7c8f52232f5c14e06b74f3496"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MzY2MzA2", "url": "https://github.com/apache/druid/pull/10304#pullrequestreview-485366306", "createdAt": "2020-09-09T20:08:58Z", "commit": {"oid": "adfb1353cb2b0fb7c8f52232f5c14e06b74f3496"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3440, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}