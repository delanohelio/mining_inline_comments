{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NzQzNzA2", "number": 9251, "title": "fix some issues with filters on numeric columns with nulls", "bodyText": "Description\nThis PR fixes an issue with predicate filters, such as a bound filter, on long columns with numeric nulls, where it will incorrectly compare 0 instead of calling predicate.applyNull(). The correct code is actually in place already in LongValueMatcherColumnSelectorStrategy, but this was getting pre-empted by Filters.makeValueMatcher which had it's own predicate defined specifically handling long columns, along with a code comment:\n// This should be folded into the ValueMatcherColumnSelectorStrategy once that can handle LONG typed columns.\n\nUnfortunately, it just hadn't been done yet.\nPrior to this PR, the added testLongPredicateFilterNulls in CalciteQueryTest would fail with an error of the form:\njava.lang.AssertionError\n\tat org.apache.druid.segment.data.ColumnarLongs$1HistoricalLongColumnSelectorWithNulls.getLong(ColumnarLongs.java:124)\n\tat org.apache.druid.segment.filter.Filters$4.matches(Filters.java:467)\n\tat org.apache.druid.segment.FilteredOffset.increment(FilteredOffset.java:75)\n\tat org.apache.druid.segment.QueryableIndexCursorSequenceBuilder$QueryableIndexCursor.advance(QueryableIndexCursorSequenceBuilder.java:417)\n\tat org.apache.druid.query.timeseries.TimeseriesQueryEngine.lambda$processNonVectorized$2(TimeseriesQueryEngine.java:288)\n\nWhile adding tests for this fix, I also encountered an issue with the JavascriptDimFilter, which did not implement applyNull for it's predicate, causing it to be unable to feed null values into javascript filter functions.\nI also ran into some issues with vectorized value and predicate matchers on numeric null columns. The initial issue is that the matchers were not checking the null vector, however once that was in place I bumped into another issue that the null vector could be incorrectly polluted with the wrong null information in the case where the null bitmap ran out of values before the end of the column (likely) because it was breaking from the loop instead of writing false values until the end vector offset.\n\nThis PR has:\n\n been self-reviewed.\n added unit tests or modified existing tests to cover new code paths.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-01-24T09:19:23Z", "url": "https://github.com/apache/druid/pull/9251", "merged": true, "mergeCommit": {"oid": "36c5efe2ab88e03b804eb20bf1f138fae2ef1cf9"}, "closed": true, "closedAt": "2020-01-28T02:01:02Z", "author": {"login": "clintropolis"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9bRBGAH2gAyMzY2NzQzNzA2OjRiYWZlZmYwMGU3M2YyNDY3OWM0N2RjOTQ1NDQwZGFjYzIwZGZjYjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb-mh6WAFqTM0OTA3NDM1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4bafeff00e73f24679c47dc945440dacc20dfcb1", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/4bafeff00e73f24679c47dc945440dacc20dfcb1", "committedDate": "2020-01-24T09:10:20Z", "message": "fix issue with long column predicate filters and nulls"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4Mjg3ODU3", "url": "https://github.com/apache/druid/pull/9251#pullrequestreview-348287857", "createdAt": "2020-01-25T00:08:49Z", "commit": {"oid": "4bafeff00e73f24679c47dc945440dacc20dfcb1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQwMDowODo0OVrOFhtgMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQwMDowODo0OVrOFhtgMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5Mjg0OA==", "bodyText": "How about moving these three tests to BoundFilterTest? I suggest this for two reasons:\n\nThis test isn't adding much to coverage of the SQL layer.\nBoundFilterTest extends from BaseFilterTest which tests a whole big matrix of configurations, so coverage of the lower level stuff will be better vs. using CalciteQueryTest.", "url": "https://github.com/apache/druid/pull/9251#discussion_r370892848", "createdAt": "2020-01-25T00:08:49Z", "author": {"login": "gianm"}, "path": "sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java", "diffHunk": "@@ -3198,6 +3198,69 @@ public void testNullLongTopN() throws Exception\n     );\n   }\n \n+  @Test\n+  public void testLongPredicateFilterNulls() throws Exception\n+  {\n+    testQuery(\n+        \"SELECT COUNT(*)\\n\"\n+        + \"FROM druid.numfoo\\n\"\n+        + \"WHERE l1 > 3\",\n+        ImmutableList.of(\n+            Druids.newTimeseriesQueryBuilder()\n+                  .dataSource(CalciteTests.DATASOURCE3)\n+                  .intervals(querySegmentSpec(Filtration.eternity()))\n+                  .granularity(Granularities.ALL)\n+                  .filters(bound(\"l1\", \"3\", null, true, false, null, StringComparators.NUMERIC))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bafeff00e73f24679c47dc945440dacc20dfcb1"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db5da9929429321672e208234f6064df28c6c6e8", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/db5da9929429321672e208234f6064df28c6c6e8", "committedDate": "2020-01-26T01:20:12Z", "message": "dang"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9a427e630ce42d1ff80ef28db22ac227eeba869", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/c9a427e630ce42d1ff80ef28db22ac227eeba869", "committedDate": "2020-01-26T01:23:47Z", "message": "uncomment a thing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e84c0c720ec0a03b61d2bdbee39962512a20e20c", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/e84c0c720ec0a03b61d2bdbee39962512a20e20c", "committedDate": "2020-01-26T02:26:50Z", "message": "styles"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d841e9f273ffad65b18fb17d8ac667975ad3c37", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/1d841e9f273ffad65b18fb17d8ac667975ad3c37", "committedDate": "2020-01-26T03:35:07Z", "message": "oops"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67b5a08b6a6729da258c71c092eacfb282404b4e", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/67b5a08b6a6729da258c71c092eacfb282404b4e", "committedDate": "2020-01-26T12:51:22Z", "message": "allcaps"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDQyODky", "url": "https://github.com/apache/druid/pull/9251#pullrequestreview-349042892", "createdAt": "2020-01-27T23:17:56Z", "commit": {"oid": "67b5a08b6a6729da258c71c092eacfb282404b4e"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzoxNzo1NlrOFiUy9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzoxODozNlrOFiUzzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzNjYzMQ==", "bodyText": "How about using Arrays.fill to fill the rest with falses, and then break? Should be somewhat more efficient.", "url": "https://github.com/apache/druid/pull/9251#discussion_r371536631", "createdAt": "2020-01-27T23:17:56Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/vector/VectorSelectorUtils.java", "diffHunk": "@@ -57,7 +57,8 @@\n         final int row = i + startOffset;\n         nullIterator.advanceIfNeeded(row);\n         if (!nullIterator.hasNext()) {\n-          break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67b5a08b6a6729da258c71c092eacfb282404b4e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzNjY2NQ==", "bodyText": "Same comment.", "url": "https://github.com/apache/druid/pull/9251#discussion_r371536665", "createdAt": "2020-01-27T23:18:03Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/vector/VectorSelectorUtils.java", "diffHunk": "@@ -71,7 +72,8 @@\n         final int row = currentOffsets[i];\n         nullIterator.advanceIfNeeded(row);\n         if (!nullIterator.hasNext()) {\n-          break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67b5a08b6a6729da258c71c092eacfb282404b4e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUzNjg0NA==", "bodyText": "Did you mean javax.annotation.Nullable?", "url": "https://github.com/apache/druid/pull/9251#discussion_r371536844", "createdAt": "2020-01-27T23:18:36Z", "author": {"login": "gianm"}, "path": "processing/src/test/java/org/apache/druid/segment/filter/BaseFilterTest.java", "diffHunk": "@@ -24,8 +24,20 @@\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.Iterables;\n+import junitparams.converters.Nullable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67b5a08b6a6729da258c71c092eacfb282404b4e"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDQ0MzI3", "url": "https://github.com/apache/druid/pull/9251#pullrequestreview-349044327", "createdAt": "2020-01-27T23:21:45Z", "commit": {"oid": "67b5a08b6a6729da258c71c092eacfb282404b4e"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c6bbb255fa373285ee70ee7dd673c2f27af5233", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/7c6bbb255fa373285ee70ee7dd673c2f27af5233", "committedDate": "2020-01-27T23:55:45Z", "message": "review stuff"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDc0MzUw", "url": "https://github.com/apache/druid/pull/9251#pullrequestreview-349074350", "createdAt": "2020-01-28T00:51:40Z", "commit": {"oid": "7c6bbb255fa373285ee70ee7dd673c2f27af5233"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3795, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}