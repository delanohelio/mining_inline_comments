{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwODQ1NDAx", "number": 10088, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxMzowMTozOVrOEJWPsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwMTo0Njo1NVrOEJgfuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MjM3MTA0OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/org/apache/druid/tests/parallelized/ITLocalInputSourceAllInputFormatTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxMzowMTozOVrOGp1sww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QyMTowMToyMFrOGp4STQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyNDYxMQ==", "bodyText": "Are these named around the wrong way? This one seems to be without whilst the one above seems to be supplying a schema.", "url": "https://github.com/apache/druid/pull/10088#discussion_r446524611", "createdAt": "2020-06-27T13:01:39Z", "author": {"login": "josephglanville"}, "path": "integration-tests/src/test/java/org/apache/druid/tests/parallelized/ITLocalInputSourceAllInputFormatTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.tests.parallelized;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.druid.testing.guice.DruidTestModuleFactory;\n+import org.apache.druid.tests.TestNGGroup;\n+import org.apache.druid.tests.indexer.AbstractLocalInputSourceParallelIndexTest;\n+import org.testng.annotations.Guice;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Test(groups = TestNGGroup.BATCH_INDEX)\n+@Guice(moduleFactory = DruidTestModuleFactory.class)\n+public class ITLocalInputSourceAllInputFormatTest extends AbstractLocalInputSourceParallelIndexTest\n+{\n+  @Test\n+  public void testAvroInputFormatIndexDataIngestionSpecWithoutSchema() throws Exception\n+  {\n+    List fieldList = ImmutableList.of(\n+        ImmutableMap.of(\"name\", \"timestamp\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"page\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"language\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"user\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"unpatrolled\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"newPage\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"robot\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"anonymous\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"namespace\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"continent\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"country\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"region\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"city\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"added\", \"type\", \"int\"),\n+        ImmutableMap.of(\"name\", \"deleted\", \"type\", \"int\"),\n+        ImmutableMap.of(\"name\", \"delta\", \"type\", \"int\")\n+    );\n+    Map schema = ImmutableMap.of(\"namespace\", \"org.apache.druid.data.input\",\n+                                 \"type\", \"record\",\n+                                 \"name\", \"wikipedia\",\n+                                 \"fields\", fieldList);\n+    doIndexTest(InputFormatDetails.AVRO, ImmutableMap.of(\"schema\", schema));\n+  }\n+\n+  @Test\n+  public void testAvroInputFormatIndexDataIngestionSpecWithSchema() throws Exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb12d6c5ec50d487865716757183ad05b71020a9"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU2Njk4OQ==", "bodyText": "Yea, you are right. Fixed.", "url": "https://github.com/apache/druid/pull/10088#discussion_r446566989", "createdAt": "2020-06-27T21:01:20Z", "author": {"login": "maytasm"}, "path": "integration-tests/src/test/java/org/apache/druid/tests/parallelized/ITLocalInputSourceAllInputFormatTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.tests.parallelized;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.druid.testing.guice.DruidTestModuleFactory;\n+import org.apache.druid.tests.TestNGGroup;\n+import org.apache.druid.tests.indexer.AbstractLocalInputSourceParallelIndexTest;\n+import org.testng.annotations.Guice;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Test(groups = TestNGGroup.BATCH_INDEX)\n+@Guice(moduleFactory = DruidTestModuleFactory.class)\n+public class ITLocalInputSourceAllInputFormatTest extends AbstractLocalInputSourceParallelIndexTest\n+{\n+  @Test\n+  public void testAvroInputFormatIndexDataIngestionSpecWithoutSchema() throws Exception\n+  {\n+    List fieldList = ImmutableList.of(\n+        ImmutableMap.of(\"name\", \"timestamp\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"page\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"language\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"user\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"unpatrolled\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"newPage\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"robot\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"anonymous\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"namespace\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"continent\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"country\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"region\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"city\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"added\", \"type\", \"int\"),\n+        ImmutableMap.of(\"name\", \"deleted\", \"type\", \"int\"),\n+        ImmutableMap.of(\"name\", \"delta\", \"type\", \"int\")\n+    );\n+    Map schema = ImmutableMap.of(\"namespace\", \"org.apache.druid.data.input\",\n+                                 \"type\", \"record\",\n+                                 \"name\", \"wikipedia\",\n+                                 \"fields\", fieldList);\n+    doIndexTest(InputFormatDetails.AVRO, ImmutableMap.of(\"schema\", schema));\n+  }\n+\n+  @Test\n+  public void testAvroInputFormatIndexDataIngestionSpecWithSchema() throws Exception", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyNDYxMQ=="}, "originalCommit": {"oid": "cb12d6c5ec50d487865716757183ad05b71020a9"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDAyMTMzOnYy", "diffSide": "RIGHT", "path": "extensions-core/datasketches/src/main/java/org/apache/druid/query/aggregation/datasketches/quantiles/DoublesSketchComplexMetricSerde.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwMToyNDo0NlrOGqCERA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxOTozOToxMFrOGqfZHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcyNzIzNg==", "bodyText": "Since this method is going to look at every character of the string to check if it's a number, I wonder if it's better to just try to parse it to a double and then use it if it's not null, maybe\n...\n          final Double doubleValue;\n          if (objectString.isEmpty()) {\n            return DoublesSketchOperations.EMPTY_SKETCH;\n          } else if ((doubleValue = Doubles.tryParse(objectString)) != null) {\n            UpdateDoublesSketch sketch = DoublesSketch.builder().setK(MIN_K).build();\n            sketch.update(doubleValue);\n            return sketch;\n          }\n...", "url": "https://github.com/apache/druid/pull/10088#discussion_r446727236", "createdAt": "2020-06-29T01:24:46Z", "author": {"login": "clintropolis"}, "path": "extensions-core/datasketches/src/main/java/org/apache/druid/query/aggregation/datasketches/quantiles/DoublesSketchComplexMetricSerde.java", "diffHunk": "@@ -77,7 +78,7 @@ public Object extractValue(final InputRow inputRow, final String metricName)\n           // This corresponds to \"A\" in base64, so it is not a digit\n           if (objectString.isEmpty()) {\n             return DoublesSketchOperations.EMPTY_SKETCH;\n-          } else if (Character.isDigit(objectString.charAt(0))) {\n+          } else if (NumberUtils.isParsable(objectString)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf2ccd1ffa9cceb63ad8862adbd71678f7958868"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIwNzcxMA==", "bodyText": "Sounds good to me.", "url": "https://github.com/apache/druid/pull/10088#discussion_r447207710", "createdAt": "2020-06-29T19:39:10Z", "author": {"login": "maytasm"}, "path": "extensions-core/datasketches/src/main/java/org/apache/druid/query/aggregation/datasketches/quantiles/DoublesSketchComplexMetricSerde.java", "diffHunk": "@@ -77,7 +78,7 @@ public Object extractValue(final InputRow inputRow, final String metricName)\n           // This corresponds to \"A\" in base64, so it is not a digit\n           if (objectString.isEmpty()) {\n             return DoublesSketchOperations.EMPTY_SKETCH;\n-          } else if (Character.isDigit(objectString.charAt(0))) {\n+          } else if (NumberUtils.isParsable(objectString)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcyNzIzNg=="}, "originalCommit": {"oid": "cf2ccd1ffa9cceb63ad8862adbd71678f7958868"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDA1MDUxOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/org/apache/druid/tests/parallelized/ITLocalInputSourceAllInputFormatTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwMTo0Njo1NVrOGqCUag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxOTo0MTozOVrOGqfesg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjczMTM3MA==", "bodyText": "I wonder if these could all run in parallel in a single test?", "url": "https://github.com/apache/druid/pull/10088#discussion_r446731370", "createdAt": "2020-06-29T01:46:55Z", "author": {"login": "clintropolis"}, "path": "integration-tests/src/test/java/org/apache/druid/tests/parallelized/ITLocalInputSourceAllInputFormatTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.tests.parallelized;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.druid.testing.guice.DruidTestModuleFactory;\n+import org.apache.druid.tests.TestNGGroup;\n+import org.apache.druid.tests.indexer.AbstractLocalInputSourceParallelIndexTest;\n+import org.testng.annotations.Guice;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Test(groups = TestNGGroup.INPUT_FORMAT)\n+@Guice(moduleFactory = DruidTestModuleFactory.class)\n+public class ITLocalInputSourceAllInputFormatTest extends AbstractLocalInputSourceParallelIndexTest\n+{\n+  @Test\n+  public void testAvroInputFormatIndexDataIngestionSpecWithSchema() throws Exception\n+  {\n+    List fieldList = ImmutableList.of(\n+        ImmutableMap.of(\"name\", \"timestamp\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"page\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"language\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"user\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"unpatrolled\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"newPage\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"robot\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"anonymous\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"namespace\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"continent\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"country\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"region\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"city\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"added\", \"type\", \"int\"),\n+        ImmutableMap.of(\"name\", \"deleted\", \"type\", \"int\"),\n+        ImmutableMap.of(\"name\", \"delta\", \"type\", \"int\")\n+    );\n+    Map schema = ImmutableMap.of(\"namespace\", \"org.apache.druid.data.input\",\n+                                 \"type\", \"record\",\n+                                 \"name\", \"wikipedia\",\n+                                 \"fields\", fieldList);\n+    doIndexTest(InputFormatDetails.AVRO, ImmutableMap.of(\"schema\", schema));\n+  }\n+\n+  @Test\n+  public void testAvroInputFormatIndexDataIngestionSpecWithoutSchema() throws Exception\n+  {\n+    doIndexTest(InputFormatDetails.AVRO);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf2ccd1ffa9cceb63ad8862adbd71678f7958868"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIwOTEzOA==", "bodyText": "This should already be running in parallel (2 at a time). Let me double check.", "url": "https://github.com/apache/druid/pull/10088#discussion_r447209138", "createdAt": "2020-06-29T19:41:39Z", "author": {"login": "maytasm"}, "path": "integration-tests/src/test/java/org/apache/druid/tests/parallelized/ITLocalInputSourceAllInputFormatTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.tests.parallelized;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.druid.testing.guice.DruidTestModuleFactory;\n+import org.apache.druid.tests.TestNGGroup;\n+import org.apache.druid.tests.indexer.AbstractLocalInputSourceParallelIndexTest;\n+import org.testng.annotations.Guice;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Test(groups = TestNGGroup.INPUT_FORMAT)\n+@Guice(moduleFactory = DruidTestModuleFactory.class)\n+public class ITLocalInputSourceAllInputFormatTest extends AbstractLocalInputSourceParallelIndexTest\n+{\n+  @Test\n+  public void testAvroInputFormatIndexDataIngestionSpecWithSchema() throws Exception\n+  {\n+    List fieldList = ImmutableList.of(\n+        ImmutableMap.of(\"name\", \"timestamp\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"page\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"language\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"user\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"unpatrolled\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"newPage\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"robot\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"anonymous\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"namespace\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"continent\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"country\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"region\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"city\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"added\", \"type\", \"int\"),\n+        ImmutableMap.of(\"name\", \"deleted\", \"type\", \"int\"),\n+        ImmutableMap.of(\"name\", \"delta\", \"type\", \"int\")\n+    );\n+    Map schema = ImmutableMap.of(\"namespace\", \"org.apache.druid.data.input\",\n+                                 \"type\", \"record\",\n+                                 \"name\", \"wikipedia\",\n+                                 \"fields\", fieldList);\n+    doIndexTest(InputFormatDetails.AVRO, ImmutableMap.of(\"schema\", schema));\n+  }\n+\n+  @Test\n+  public void testAvroInputFormatIndexDataIngestionSpecWithoutSchema() throws Exception\n+  {\n+    doIndexTest(InputFormatDetails.AVRO);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjczMTM3MA=="}, "originalCommit": {"oid": "cf2ccd1ffa9cceb63ad8862adbd71678f7958868"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2376, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}