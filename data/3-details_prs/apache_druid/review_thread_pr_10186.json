{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5MjQ1MjAw", "number": 10186, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNjo0ODoyM1rOEPmtQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNjo0ODoyM1rOEPmtQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0Nzk4MjcyOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/org/apache/druid/tests/indexer/ITAppendBatchIndexTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNjo0ODoyM1rOGzaC-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOToyOToyM1rOGzevpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU1NzMwNA==", "bodyText": "Maybe non_perfect_rollup is a better name than without_roll_up.", "url": "https://github.com/apache/druid/pull/10186#discussion_r456557304", "createdAt": "2020-07-17T16:48:23Z", "author": {"login": "jihoonson"}, "path": "integration-tests/src/test/java/org/apache/druid/tests/indexer/ITAppendBatchIndexTest.java", "diffHunk": "@@ -0,0 +1,245 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.tests.indexer;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.druid.indexer.partitions.DynamicPartitionsSpec;\n+import org.apache.druid.indexer.partitions.HashedPartitionsSpec;\n+import org.apache.druid.indexer.partitions.PartitionsSpec;\n+import org.apache.druid.indexer.partitions.SecondaryPartitionType;\n+import org.apache.druid.indexer.partitions.SingleDimensionPartitionsSpec;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.testing.guice.DruidTestModuleFactory;\n+import org.apache.druid.testing.utils.ITRetryUtil;\n+import org.apache.druid.tests.TestNGGroup;\n+import org.apache.druid.timeline.DataSegment;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Guice;\n+import org.testng.annotations.Test;\n+\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.function.Function;\n+\n+@Test(groups = {TestNGGroup.OTHER_INDEX})\n+@Guice(moduleFactory = DruidTestModuleFactory.class)\n+public class ITAppendBatchIndexTest extends AbstractITBatchIndexTest\n+{\n+  private static final Logger LOG = new Logger(ITAppendBatchIndexTest.class);\n+  private static final String INDEX_TASK = \"/indexer/wikipedia_local_input_source_index_task.json\";\n+  private static final String INDEX_QUERIES_INITIAL_INGESTION_RESOURCE = \"/indexer/wikipedia_index_queries.json\";\n+  private static final String INDEX_QUERIES_POST_APPEND_PRE_COMPACT_RESOURCE = \"/indexer/wikipedia_double_without_roll_up_index_queries.json\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc878da5e433ce05efdbcf9bfd1b9f60575d763e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU1ODEwNQ==", "bodyText": "Also, would you please add some comments for each queries about what non-perfect-rollup or perfect-rollup mean?", "url": "https://github.com/apache/druid/pull/10186#discussion_r456558105", "createdAt": "2020-07-17T16:50:05Z", "author": {"login": "jihoonson"}, "path": "integration-tests/src/test/java/org/apache/druid/tests/indexer/ITAppendBatchIndexTest.java", "diffHunk": "@@ -0,0 +1,245 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.tests.indexer;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.druid.indexer.partitions.DynamicPartitionsSpec;\n+import org.apache.druid.indexer.partitions.HashedPartitionsSpec;\n+import org.apache.druid.indexer.partitions.PartitionsSpec;\n+import org.apache.druid.indexer.partitions.SecondaryPartitionType;\n+import org.apache.druid.indexer.partitions.SingleDimensionPartitionsSpec;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.testing.guice.DruidTestModuleFactory;\n+import org.apache.druid.testing.utils.ITRetryUtil;\n+import org.apache.druid.tests.TestNGGroup;\n+import org.apache.druid.timeline.DataSegment;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Guice;\n+import org.testng.annotations.Test;\n+\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.function.Function;\n+\n+@Test(groups = {TestNGGroup.OTHER_INDEX})\n+@Guice(moduleFactory = DruidTestModuleFactory.class)\n+public class ITAppendBatchIndexTest extends AbstractITBatchIndexTest\n+{\n+  private static final Logger LOG = new Logger(ITAppendBatchIndexTest.class);\n+  private static final String INDEX_TASK = \"/indexer/wikipedia_local_input_source_index_task.json\";\n+  private static final String INDEX_QUERIES_INITIAL_INGESTION_RESOURCE = \"/indexer/wikipedia_index_queries.json\";\n+  private static final String INDEX_QUERIES_POST_APPEND_PRE_COMPACT_RESOURCE = \"/indexer/wikipedia_double_without_roll_up_index_queries.json\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU1NzMwNA=="}, "originalCommit": {"oid": "fc878da5e433ce05efdbcf9bfd1b9f60575d763e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzNDI3Ng==", "bodyText": "Done", "url": "https://github.com/apache/druid/pull/10186#discussion_r456634276", "createdAt": "2020-07-17T19:29:23Z", "author": {"login": "maytasm"}, "path": "integration-tests/src/test/java/org/apache/druid/tests/indexer/ITAppendBatchIndexTest.java", "diffHunk": "@@ -0,0 +1,245 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.tests.indexer;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.druid.indexer.partitions.DynamicPartitionsSpec;\n+import org.apache.druid.indexer.partitions.HashedPartitionsSpec;\n+import org.apache.druid.indexer.partitions.PartitionsSpec;\n+import org.apache.druid.indexer.partitions.SecondaryPartitionType;\n+import org.apache.druid.indexer.partitions.SingleDimensionPartitionsSpec;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.testing.guice.DruidTestModuleFactory;\n+import org.apache.druid.testing.utils.ITRetryUtil;\n+import org.apache.druid.tests.TestNGGroup;\n+import org.apache.druid.timeline.DataSegment;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Guice;\n+import org.testng.annotations.Test;\n+\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.function.Function;\n+\n+@Test(groups = {TestNGGroup.OTHER_INDEX})\n+@Guice(moduleFactory = DruidTestModuleFactory.class)\n+public class ITAppendBatchIndexTest extends AbstractITBatchIndexTest\n+{\n+  private static final Logger LOG = new Logger(ITAppendBatchIndexTest.class);\n+  private static final String INDEX_TASK = \"/indexer/wikipedia_local_input_source_index_task.json\";\n+  private static final String INDEX_QUERIES_INITIAL_INGESTION_RESOURCE = \"/indexer/wikipedia_index_queries.json\";\n+  private static final String INDEX_QUERIES_POST_APPEND_PRE_COMPACT_RESOURCE = \"/indexer/wikipedia_double_without_roll_up_index_queries.json\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU1NzMwNA=="}, "originalCommit": {"oid": "fc878da5e433ce05efdbcf9bfd1b9f60575d763e"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2230, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}