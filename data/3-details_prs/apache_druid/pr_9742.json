{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3MDMwNTA3", "number": 9742, "title": "Adjust string comparators used for ingestion", "bodyText": "This PR fixes a bug where rollup can fail to happen during segment merging when multivalue string dimensions are used.\nThe included unit test shows how to trigger the bug:\nIn one segment, I have the following two rows:\n{dimA=leek, dimMultiVal=[1, 2, 4]} | {sumCount=1}\n{dimA=leek, dimMultiVal=[1, 2, 3, 5]} | {sumCount=1}\n\nIn a second segment, I have the following two rows:\n{dimA=leek, dimMultiVal=[1, 2, 4]} | {sumCount=1}\n{dimA=potato, dimMultiVal=[0, 1, 4]} | {sumCount=1}\n\nPrior to this patch, merging these two segments with rollup enabled results in a segment with 4 rows:\n{dimA=leek, dimMultiVal=[1, 2, 4]} | {sumCount=1}\n{dimA=leek, dimMultiVal=[1, 2, 3, 5]} | {sumCount=1}\n{dimA=leek, dimMultiVal=[1, 2, 4]} | {sumCount=1}\n{dimA=potato, dimMultiVal=[0, 1, 4]} | {sumCount=1}\n\nThis bug occurs because the comparator used by TimeAndDimsPointer during segment merging (from DimensionHandler::getEncodedValueSelectorComparator which is StringDimensionHandler.DIMENSION_SELECTOR_COMPARATOR for String dimensions) has different logic from the comparator used in OnHeapIncrementaIndex. The latter uses StringDimensionIndexer.compareUnsortedEncodedKeyComponents.\nAs a result, using the example rows above, the priority queue in MergingRowIterator would first return {dimA=leek, dimMultiVal=[1, 2, 4]} | {sumCount=1} from the first segment. Afterwards, the first segment's iterator would present the row {dimA=leek, dimMultiVal=[1, 2, 3, 5]} | {sumCount=1}, and the second segment's iterator would present the row {dimA=leek, dimMultiVal=[1, 2, 4]} | {sumCount=1}.\nStringDimensionHandler.DIMENSION_SELECTOR_COMPARATOR before this PR considers {dimA=leek, dimMultiVal=[1, 2, 3, 5]} to precede dimA=leek, dimMultiVal=[1, 2, 4]} | {sumCount=1}, so rollup fails to happen for the dimA=leek, dimMultiVal=[1, 2, 4]} | {sumCount=1} row.\nThis PR takes the approach of adjusting StringDimensionHandler.DIMENSION_SELECTOR_COMPARATOR to follow how StringDimensionIndexer.getUnsortedEncodedValueFromSorted behaves. The two comparison methods are also updated to specifically have a check that considers null and empty list to be equal.\nThis PR has:\n\n been self-reviewed.\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-04-22T04:00:34Z", "url": "https://github.com/apache/druid/pull/9742", "merged": true, "mergeCommit": {"oid": "fe000a9e4bf1d2681760f72e9c593bd2aa5a1416"}, "closed": true, "closedAt": "2020-04-25T20:47:09Z", "author": {"login": "jon-wei"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaSdJ9gBqjMyNjMwMDM0MjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcbzK5hAFqTQwMTE5NDE4Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a6fb13d5d81bf3ebb19bf0d5ff8a1a22d821fbad", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/a6fb13d5d81bf3ebb19bf0d5ff8a1a22d821fbad", "committedDate": "2020-04-22T04:26:17Z", "message": "Also check metrics in test"}, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "f74daa571ad877a9e072168d4496f537d2c5c8bf", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/f74daa571ad877a9e072168d4496f537d2c5c8bf", "committedDate": "2020-04-24T00:16:48Z", "message": "Adjust string comparators used for ingestion"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "f74daa571ad877a9e072168d4496f537d2c5c8bf", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/f74daa571ad877a9e072168d4496f537d2c5c8bf", "committedDate": "2020-04-24T00:16:48Z", "message": "Adjust string comparators used for ingestion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "841c55d01a5896e8922a62f803c990e18b15a6ae", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/841c55d01a5896e8922a62f803c990e18b15a6ae", "committedDate": "2020-04-24T00:22:54Z", "message": "Small tweak"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79cb14f3d1c1cdc74d34cff20682fd9ca185b32f", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/79cb14f3d1c1cdc74d34cff20682fd9ca185b32f", "committedDate": "2020-04-24T01:34:48Z", "message": "Fix inspection, more javadocs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NjQxNjA1", "url": "https://github.com/apache/druid/pull/9742#pullrequestreview-399641605", "createdAt": "2020-04-24T05:04:31Z", "commit": {"oid": "79cb14f3d1c1cdc74d34cff20682fd9ca185b32f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTowNDozMVrOGLGkCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMDozMTo1N1rOGLoKug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5NTA0OQ==", "bodyText": "Thanks for adding this comment \ud83d\udc4d, would it also be worth adding the implications of this, e.g. it can result in imperfect rollup?", "url": "https://github.com/apache/druid/pull/9742#discussion_r414295049", "createdAt": "2020-04-24T05:04:31Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/DimensionHandler.java", "diffHunk": "@@ -122,6 +122,10 @@ DimensionMergerV9 makeMerger(\n    * Returns a comparator that knows how to compare {@link ColumnValueSelector} of the assumed dimension type,\n    * corresponding to this DimensionHandler. E. g. {@link StringDimensionHandler} returns a comparator, that compares\n    * {@link ColumnValueSelector}s as {@link DimensionSelector}s.\n+   *\n+   * The comparison rules used by this method should match the rules used by", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79cb14f3d1c1cdc74d34cff20682fd9ca185b32f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg0NTYyNg==", "bodyText": "Hmm, this sort seems to behave quite a bit differently than the intended function of the previous sort; this one ordering by row length then lexicographically element by element, while the previous ordering lexicographically element by element then by length.\n[\"a\", \"b\"],\n[\"a\", \"c\"],\n[\"d\", \"e\"],\n[\"a\", \"b\", \"c\"]\n\ncompared to\n[\"a\", \"b\"],\n[\"a\", \"b\", \"c\"],\n[\"a\", \"c\"],\n[\"d\", \"e\"]\n\nIt might be more prudent to adjust the other sort to be more like this one is intended to be, though I imagine in practice that most of the time this doesn't make much difference except when all the times are the same (so less query granularity) and this is the prominent ordering column, and even then might not make much difference in practice, so don't make this change probably if it is a major hassle and instead we just put in release notes that there is a behavior change.", "url": "https://github.com/apache/druid/pull/9742#discussion_r414845626", "createdAt": "2020-04-24T20:31:57Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/StringDimensionHandler.java", "diffHunk": "@@ -33,61 +33,44 @@\n \n public class StringDimensionHandler implements DimensionHandler<Integer, int[], String>\n {\n-\n   /**\n-   * Compares {@link IndexedInts} lexicographically, with the exception that if a row contains only zeros (that's the\n-   * index of null) at all positions, it is considered \"null\" as a whole and is \"less\" than any \"non-null\" row. Empty\n-   * row (size is zero) is also considered \"null\".\n-   *\n-   * The implementation is a bit complicated because it tries to check each position of both rows only once.\n+   * This comparator uses the following rules:\n+   * - If the value arrays have different lengths, the shorter value array is considered smaller\n+   *   - The single exception to this is null and the empty list, which are considered equal\n+   * - If the value arrays are the same length, compare value by value until a difference is reached\n    */\n   private static final Comparator<ColumnValueSelector> DIMENSION_SELECTOR_COMPARATOR = (s1, s2) -> {\n     IndexedInts row1 = getRow(s1);\n     IndexedInts row2 = getRow(s2);\n     int len1 = row1.size();\n     int len2 = row2.size();\n-    boolean row1IsNull = true;\n-    boolean row2IsNull = true;\n-    for (int i = 0; i < Math.min(len1, len2); i++) {\n-      int v1 = row1.get(i);\n-      row1IsNull &= v1 == 0;\n-      int v2 = row2.get(i);\n-      row2IsNull &= v2 == 0;\n-      int valueDiff = Integer.compare(v1, v2);\n-      if (valueDiff != 0) {\n-        return valueDiff;\n-      }\n-    }\n-    //noinspection SubtractionInCompareTo -- substraction is safe here, because lengths or rows are small numbers.\n-    int lenDiff = len1 - len2;\n-    if (lenDiff == 0) {\n-      return 0;\n-    } else {\n-      if (!row1IsNull || !row2IsNull) {\n-        return lenDiff;\n-      } else {\n-        return compareRestNulls(row1, len1, row2, len2);\n+    int retVal = Integer.compare(len1, len2);\n+    int valsIndex = 0;\n+\n+    if (retVal != 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79cb14f3d1c1cdc74d34cff20682fd9ca185b32f"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d785f21542ac294c46d5e72705cfb1d1afb22a90", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/d785f21542ac294c46d5e72705cfb1d1afb22a90", "committedDate": "2020-04-24T21:28:30Z", "message": "Address PR comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23a89ee910f7a84281dbe4800a90cfc6b8a54538", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/23a89ee910f7a84281dbe4800a90cfc6b8a54538", "committedDate": "2020-04-24T21:30:21Z", "message": "Add rollup comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMzE1NzQw", "url": "https://github.com/apache/druid/pull/9742#pullrequestreview-400315740", "createdAt": "2020-04-24T23:01:18Z", "commit": {"oid": "23a89ee910f7a84281dbe4800a90cfc6b8a54538"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88403ca8955abbae37a5cf94c0b2b31c013ca844", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/88403ca8955abbae37a5cf94c0b2b31c013ca844", "committedDate": "2020-04-25T01:07:05Z", "message": "Add ordering test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMzUzMDcw", "url": "https://github.com/apache/druid/pull/9742#pullrequestreview-400353070", "createdAt": "2020-04-25T03:43:23Z", "commit": {"oid": "88403ca8955abbae37a5cf94c0b2b31c013ca844"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13b60c0eb4e7567b4ffb56486dfb00f7e15fa189", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/13b60c0eb4e7567b4ffb56486dfb00f7e15fa189", "committedDate": "2020-04-25T04:17:43Z", "message": "Fix IncrementaIndexRowCompTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMTk0MTgz", "url": "https://github.com/apache/druid/pull/9742#pullrequestreview-401194183", "createdAt": "2020-04-27T17:59:05Z", "commit": {"oid": "13b60c0eb4e7567b4ffb56486dfb00f7e15fa189"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzo1OTowNVrOGMwb5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzo1OTowNVrOGMwb5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAyOTY3MA==", "bodyText": "@jon-wei Should [1] and [1, null] not be equivalent?", "url": "https://github.com/apache/druid/pull/9742#discussion_r416029670", "createdAt": "2020-04-27T17:59:05Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/StringDimensionIndexer.java", "diffHunk": "@@ -399,23 +399,42 @@ public int compareUnsortedEncodedKeyComponents(int[] lhs, int[] rhs)\n     int lhsLen = lhs.length;\n     int rhsLen = rhs.length;\n \n-    int retVal = Ints.compare(lhsLen, rhsLen);\n+    int lenCompareResult = Ints.compare(lhsLen, rhsLen);\n+    if (lenCompareResult != 0) {\n+      // if the values don't have the same length, check if we're comparing [] and [null], which are equivalent", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13b60c0eb4e7567b4ffb56486dfb00f7e15fa189"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2570, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}