{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0NDA2MDkx", "number": 10653, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjo0NjowOVrOFCdq_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwOTo0MTo1NlrOFGnYkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTI3NjEyOnYy", "diffSide": "RIGHT", "path": "sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjo0NjowOVrOIBowdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzowODozMVrOIBqUmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU4NzI1Mg==", "bodyText": "Why did you change this test case? (As opposed to introducing a new test case.)", "url": "https://github.com/apache/druid/pull/10653#discussion_r538587252", "createdAt": "2020-12-08T16:46:09Z", "author": {"login": "gianm"}, "path": "sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java", "diffHunk": "@@ -12159,23 +12159,23 @@ public void testGroupingAggregatorWithPostAggregator() throws Exception\n     List<Object[]> resultList;\n     if (NullHandling.sqlCompatible()) {\n       resultList = ImmutableList.of(\n-          new Object[]{NULL_STRING, 2L, 0L, \"INDIVIDUAL\"},\n-          new Object[]{\"\", 1L, 0L, \"INDIVIDUAL\"},\n-          new Object[]{\"a\", 2L, 0L, \"INDIVIDUAL\"},\n-          new Object[]{\"abc\", 1L, 0L, \"INDIVIDUAL\"},\n+          new Object[]{NULL_STRING, 2L, 0L, NULL_STRING},\n+          new Object[]{\"\", 1L, 0L, \"\"},\n+          new Object[]{\"a\", 2L, 0L, \"a\"},\n+          new Object[]{\"abc\", 1L, 0L, \"abc\"},\n           new Object[]{NULL_STRING, 6L, 1L, \"ALL\"}\n       );\n     } else {\n       resultList = ImmutableList.of(\n-          new Object[]{\"\", 3L, 0L, \"INDIVIDUAL\"},\n-          new Object[]{\"a\", 2L, 0L, \"INDIVIDUAL\"},\n-          new Object[]{\"abc\", 1L, 0L, \"INDIVIDUAL\"},\n+          new Object[]{\"\", 3L, 0L, \"\"},\n+          new Object[]{\"a\", 2L, 0L, \"a\"},\n+          new Object[]{\"abc\", 1L, 0L, \"abc\"},\n           new Object[]{NULL_STRING, 6L, 1L, \"ALL\"}\n       );\n     }\n     testQuery(\n         \"SELECT dim2, SUM(cnt), GROUPING(dim2), \\n\"\n-        + \"CASE WHEN GROUPING(dim2) = 1 THEN 'ALL' ELSE 'INDIVIDUAL' END\\n\"\n+        + \"CASE WHEN GROUPING(dim2) = 1 THEN 'ALL' ELSE dim2 END\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c69361b92fbdc78c5e37d9d625ed6a4cbde7514e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYxMjg4OA==", "bodyText": "I wrote this test when I submitted the patch for the grouping function. I had wanted to write it this way (as is in PR) but couldn't because of the post-aggregation bug. Now changing it as I am fixing the bug. BTW There are two more tests for the grouping function.", "url": "https://github.com/apache/druid/pull/10653#discussion_r538612888", "createdAt": "2020-12-08T17:08:31Z", "author": {"login": "abhishekagarwal87"}, "path": "sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java", "diffHunk": "@@ -12159,23 +12159,23 @@ public void testGroupingAggregatorWithPostAggregator() throws Exception\n     List<Object[]> resultList;\n     if (NullHandling.sqlCompatible()) {\n       resultList = ImmutableList.of(\n-          new Object[]{NULL_STRING, 2L, 0L, \"INDIVIDUAL\"},\n-          new Object[]{\"\", 1L, 0L, \"INDIVIDUAL\"},\n-          new Object[]{\"a\", 2L, 0L, \"INDIVIDUAL\"},\n-          new Object[]{\"abc\", 1L, 0L, \"INDIVIDUAL\"},\n+          new Object[]{NULL_STRING, 2L, 0L, NULL_STRING},\n+          new Object[]{\"\", 1L, 0L, \"\"},\n+          new Object[]{\"a\", 2L, 0L, \"a\"},\n+          new Object[]{\"abc\", 1L, 0L, \"abc\"},\n           new Object[]{NULL_STRING, 6L, 1L, \"ALL\"}\n       );\n     } else {\n       resultList = ImmutableList.of(\n-          new Object[]{\"\", 3L, 0L, \"INDIVIDUAL\"},\n-          new Object[]{\"a\", 2L, 0L, \"INDIVIDUAL\"},\n-          new Object[]{\"abc\", 1L, 0L, \"INDIVIDUAL\"},\n+          new Object[]{\"\", 3L, 0L, \"\"},\n+          new Object[]{\"a\", 2L, 0L, \"a\"},\n+          new Object[]{\"abc\", 1L, 0L, \"abc\"},\n           new Object[]{NULL_STRING, 6L, 1L, \"ALL\"}\n       );\n     }\n     testQuery(\n         \"SELECT dim2, SUM(cnt), GROUPING(dim2), \\n\"\n-        + \"CASE WHEN GROUPING(dim2) = 1 THEN 'ALL' ELSE 'INDIVIDUAL' END\\n\"\n+        + \"CASE WHEN GROUPING(dim2) = 1 THEN 'ALL' ELSE dim2 END\\n\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU4NzI1Mg=="}, "originalCommit": {"oid": "c69361b92fbdc78c5e37d9d625ed6a4cbde7514e"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTI3NzM2OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/groupby/strategy/GroupByStrategyV2.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjo0NjoyMlrOIBoxSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjo1OTowMFrOIBpsBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU4NzQ2NA==", "bodyText": "Please don't include commented-out code.", "url": "https://github.com/apache/druid/pull/10653#discussion_r538587464", "createdAt": "2020-12-08T16:46:22Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/groupby/strategy/GroupByStrategyV2.java", "diffHunk": "@@ -442,8 +425,8 @@ public boolean doMergeResults(final GroupByQuery query)\n         }\n \n         GroupByQuery subtotalQuery = baseSubtotalQuery\n-            .withLimitSpec(subtotalQueryLimitSpec)\n-            .withDimensionSpecs(newDimensions);\n+            .withLimitSpec(subtotalQueryLimitSpec);\n+            //.withDimensionSpecs(newDimensions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c69361b92fbdc78c5e37d9d625ed6a4cbde7514e"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYwMjUwMA==", "bodyText": "Yup. I had removed it on my local but forgot to push.", "url": "https://github.com/apache/druid/pull/10653#discussion_r538602500", "createdAt": "2020-12-08T16:59:00Z", "author": {"login": "abhishekagarwal87"}, "path": "processing/src/main/java/org/apache/druid/query/groupby/strategy/GroupByStrategyV2.java", "diffHunk": "@@ -442,8 +425,8 @@ public boolean doMergeResults(final GroupByQuery query)\n         }\n \n         GroupByQuery subtotalQuery = baseSubtotalQuery\n-            .withLimitSpec(subtotalQueryLimitSpec)\n-            .withDimensionSpecs(newDimensions);\n+            .withLimitSpec(subtotalQueryLimitSpec);\n+            //.withDimensionSpecs(newDimensions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU4NzQ2NA=="}, "originalCommit": {"oid": "c69361b92fbdc78c5e37d9d625ed6a4cbde7514e"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTI5OTE3OnYy", "diffSide": "LEFT", "path": "processing/src/main/java/org/apache/druid/query/groupby/strategy/GroupByStrategyV2.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNjo0OTozMlrOIBo_Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNzoxNTo1M1rOIBqz1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU5MTA2Ng==", "bodyText": "Is this concern no longer valid?\nIIRC, it was necessary because otherwise the ResultRows would be different lengths and so the final results wouldn't be correct.", "url": "https://github.com/apache/druid/pull/10653#discussion_r538591066", "createdAt": "2020-12-08T16:49:32Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/groupby/strategy/GroupByStrategyV2.java", "diffHunk": "@@ -408,27 +408,10 @@ public boolean doMergeResults(final GroupByQuery query)\n         // Dimension spec including dimension name and output name\n         final List<DimensionSpec> subTotalDimensionSpec = new ArrayList<>(dimsInSubtotalSpec.size());\n         final List<DimensionSpec> dimensions = query.getDimensions();\n-        final List<DimensionSpec> newDimensions = new ArrayList<>();\n \n-        for (int i = 0; i < dimensions.size(); i++) {\n-          DimensionSpec dimensionSpec = dimensions.get(i);\n+        for (DimensionSpec dimensionSpec : dimensions) {\n           if (dimsInSubtotalSpec.contains(dimensionSpec.getOutputName())) {\n-            newDimensions.add(\n-                new DefaultDimensionSpec(\n-                    dimensionSpec.getOutputName(),\n-                    dimensionSpec.getOutputName(),\n-                    dimensionSpec.getOutputType()\n-                )\n-            );\n             subTotalDimensionSpec.add(dimensionSpec);\n-          } else {\n-            // Insert dummy dimension so all subtotals queries have ResultRows with the same shape.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c69361b92fbdc78c5e37d9d625ed6a4cbde7514e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODYyMDg4NQ==", "bodyText": "https://github.com/apache/druid/blob/master/processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/RowBasedGrouperHelper.java#L581\nWe are still keeping all the original dimensions in the query. So result row size should be the same. I think you were concerned that the result should be null for dimensions not part of the subtotal. We are not carrying over the result for those dimensions so it should work out.\nhttps://github.com/apache/druid/blob/master/processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/RowBasedGrouperHelper.java#L593", "url": "https://github.com/apache/druid/pull/10653#discussion_r538620885", "createdAt": "2020-12-08T17:15:53Z", "author": {"login": "abhishekagarwal87"}, "path": "processing/src/main/java/org/apache/druid/query/groupby/strategy/GroupByStrategyV2.java", "diffHunk": "@@ -408,27 +408,10 @@ public boolean doMergeResults(final GroupByQuery query)\n         // Dimension spec including dimension name and output name\n         final List<DimensionSpec> subTotalDimensionSpec = new ArrayList<>(dimsInSubtotalSpec.size());\n         final List<DimensionSpec> dimensions = query.getDimensions();\n-        final List<DimensionSpec> newDimensions = new ArrayList<>();\n \n-        for (int i = 0; i < dimensions.size(); i++) {\n-          DimensionSpec dimensionSpec = dimensions.get(i);\n+        for (DimensionSpec dimensionSpec : dimensions) {\n           if (dimsInSubtotalSpec.contains(dimensionSpec.getOutputName())) {\n-            newDimensions.add(\n-                new DefaultDimensionSpec(\n-                    dimensionSpec.getOutputName(),\n-                    dimensionSpec.getOutputName(),\n-                    dimensionSpec.getOutputType()\n-                )\n-            );\n             subTotalDimensionSpec.add(dimensionSpec);\n-          } else {\n-            // Insert dummy dimension so all subtotals queries have ResultRows with the same shape.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODU5MTA2Ng=="}, "originalCommit": {"oid": "c69361b92fbdc78c5e37d9d625ed6a4cbde7514e"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNDgxMDQzOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/RowBasedGrouperHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwOTo0MTo1NlrOIHs8OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxOToxMDowOVrOIIErkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk0NzI1Nw==", "bodyText": "FYI, this change could cause a dip in performance when columns are actually strings and being read as a number. Since the parsing first happens in  isNull function and then again in getLong", "url": "https://github.com/apache/druid/pull/10653#discussion_r544947257", "createdAt": "2020-12-17T09:41:56Z", "author": {"login": "abhishekagarwal87"}, "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/RowBasedGrouperHelper.java", "diffHunk": "@@ -712,13 +712,13 @@ public InputRawSupplierColumnSelectorStrategy makeColumnSelectorStrategy(\n           return new StringInputRawSupplierColumnSelectorStrategy();\n         case LONG:\n           return (InputRawSupplierColumnSelectorStrategy<BaseLongColumnValueSelector>)\n-              columnSelector -> columnSelector::getLong;\n+              columnSelector -> () -> columnSelector.isNull() ? null : columnSelector.getLong();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd6526ebef123b947d00207a697ddd5b927ddbc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMzNjIxMQ==", "bodyText": "IMO, the selectors themselves should ideally cache this computation, similar to the changes being made in #10614. Therefore, I think this change is OK, and if there are any issues it should be fixed at the selector level.", "url": "https://github.com/apache/druid/pull/10653#discussion_r545336211", "createdAt": "2020-12-17T19:10:09Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/RowBasedGrouperHelper.java", "diffHunk": "@@ -712,13 +712,13 @@ public InputRawSupplierColumnSelectorStrategy makeColumnSelectorStrategy(\n           return new StringInputRawSupplierColumnSelectorStrategy();\n         case LONG:\n           return (InputRawSupplierColumnSelectorStrategy<BaseLongColumnValueSelector>)\n-              columnSelector -> columnSelector::getLong;\n+              columnSelector -> () -> columnSelector.isNull() ? null : columnSelector.getLong();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk0NzI1Nw=="}, "originalCommit": {"oid": "dbd6526ebef123b947d00207a697ddd5b927ddbc"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2896, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}