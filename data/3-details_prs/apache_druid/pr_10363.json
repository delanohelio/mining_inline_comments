{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxMzA4MjY5", "number": 10363, "title": "fix injection failure of StorageLocationSelectorStrategy objects", "bodyText": "This PR fixes #10348 , which is caused by injection failure of storage selector strategy.\nDescription\nCurrently, all 4 implementations of StorageLocationSelectorStrategy requires a list of StorageLocation objects during construction. And StorageLocation differs from StorageLocationConfig deserialized from configuration file, and the former is instantiated by SegmentLoaderLocalCacheManager. This also means StorageLocation could not be injected into StorageLocationSelectorStrategy when they are being constructed.\nIn this PR,\n\n\nthe ctor of implementations of StorageLocationSelectorStrategy are removed, instead, a setter of storage location method is provided in this interface so that SegmentLoaderLocalCacheManager could pass the objects to the strategy object\n\n\nbased on the original code, configuration property should be druid.segmentCache.locationSelectorStrategy.type, related docs are also updated\n\n\nsome unit test cases are added to check whether these strategy objects are correctly instantiated from configuration properties.\n\n\n\n\nThis PR has:\n\n been self-reviewed.\n\n using the concurrency checklist (Remove this item if the PR doesn't have any relation to concurrency.)\n\n\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths, ensuring the threshold for code coverage is met.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-09-07T11:30:35Z", "url": "https://github.com/apache/druid/pull/10363", "merged": true, "mergeCommit": {"oid": "c4106486306df6fadf92994f7d33a88c6d952551"}, "closed": true, "closedAt": "2020-12-08T17:48:32Z", "author": {"login": "FrankChen021"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdGvr-UgFqTQ4Mzc4MDk3Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdj_7K5ABqjQwODI0MzI4ODI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNzgwOTc3", "url": "https://github.com/apache/druid/pull/10363#pullrequestreview-483780977", "createdAt": "2020-09-08T04:03:51Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNDowMzo1MVrOHOL9Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNDoxMzo0OVrOHOMFEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYzNzk1OA==", "bodyText": "Please roll back useless code formatting.", "url": "https://github.com/apache/druid/pull/10363#discussion_r484637958", "createdAt": "2020-09-08T04:03:51Z", "author": {"login": "asdf2014"}, "path": "server/src/main/java/org/apache/druid/segment/loading/LeastBytesUsedStorageLocationSelectorStrategy.java", "diffHunk": "@@ -32,11 +34,17 @@\n public class LeastBytesUsedStorageLocationSelectorStrategy implements StorageLocationSelectorStrategy\n {\n   private static final Ordering<StorageLocation> ORDERING = Ordering.from(Comparator\n-      .comparingLong(StorageLocation::currSizeBytes));\n+                                                                              .comparingLong(StorageLocation::currSizeBytes));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYzODAzMw==", "bodyText": "Please roll back useless code formatting.", "url": "https://github.com/apache/druid/pull/10363#discussion_r484638033", "createdAt": "2020-09-08T04:04:13Z", "author": {"login": "asdf2014"}, "path": "server/src/main/java/org/apache/druid/segment/loading/MostAvailableSizeStorageLocationSelectorStrategy.java", "diffHunk": "@@ -32,12 +34,18 @@\n public class MostAvailableSizeStorageLocationSelectorStrategy implements StorageLocationSelectorStrategy\n {\n   private static final Ordering<StorageLocation> ORDERING = Ordering.from(Comparator\n-      .comparingLong(StorageLocation::availableSizeBytes)\n-      .reversed());\n+                                                                              .comparingLong(StorageLocation::availableSizeBytes)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYzODM2Mg==", "bodyText": "The default values \u200b\u200bof reference types in Java are all null, so assigning null here should be meaningless.", "url": "https://github.com/apache/druid/pull/10363#discussion_r484638362", "createdAt": "2020-09-08T04:05:49Z", "author": {"login": "asdf2014"}, "path": "server/src/main/java/org/apache/druid/segment/loading/RandomStorageLocationSelectorStrategy.java", "diffHunk": "@@ -31,9 +34,15 @@\n public class RandomStorageLocationSelectorStrategy implements StorageLocationSelectorStrategy\n {\n \n-  private final List<StorageLocation> storageLocations;\n+  private List<StorageLocation> storageLocations = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYzODM5Mw==", "bodyText": "The default values \u200b\u200bof reference types in Java are all null, so assigning null here should be meaningless.", "url": "https://github.com/apache/druid/pull/10363#discussion_r484638393", "createdAt": "2020-09-08T04:05:58Z", "author": {"login": "asdf2014"}, "path": "server/src/main/java/org/apache/druid/segment/loading/RoundRobinStorageLocationSelectorStrategy.java", "diffHunk": "@@ -32,19 +35,25 @@\n  */\n public class RoundRobinStorageLocationSelectorStrategy implements StorageLocationSelectorStrategy\n {\n-\n-  private final List<StorageLocation> storageLocations;\n+  private List<StorageLocation> storageLocations = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYzODc0MQ==", "bodyText": "In the newly added test cases, the throw Exception statement needs to be removed to pass the travis CI.", "url": "https://github.com/apache/druid/pull/10363#discussion_r484638741", "createdAt": "2020-09-08T04:07:40Z", "author": {"login": "asdf2014"}, "path": "server/src/test/java/org/apache/druid/segment/loading/StorageLocationSelectorStrategyTest.java", "diffHunk": "@@ -256,4 +269,75 @@ public void testMostAvailableSizeLocationSelectorStrategy() throws Exception\n     Assert.assertEquals(\"The next element of the iterator should point to path local_storage_folder_1\",\n         localStorageFolder1, loc3.getPath());\n   }\n+\n+  @Test\n+  public void testDefaultSelectorStrategyConfig() throws Exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDYzOTQ0Mg==", "bodyText": "Although Properties inherits from Hashtable and can call the put method, it is recommended to use the setProperty method. In this way, you can forcibly restrict the incoming Key and Value of the String type to avoid an error when you call store or save again after passing in non-String data.", "url": "https://github.com/apache/druid/pull/10363#discussion_r484639442", "createdAt": "2020-09-08T04:11:03Z", "author": {"login": "asdf2014"}, "path": "server/src/test/java/org/apache/druid/segment/loading/StorageLocationSelectorStrategyTest.java", "diffHunk": "@@ -256,4 +269,75 @@ public void testMostAvailableSizeLocationSelectorStrategy() throws Exception\n     Assert.assertEquals(\"The next element of the iterator should point to path local_storage_folder_1\",\n         localStorageFolder1, loc3.getPath());\n   }\n+\n+  @Test\n+  public void testDefaultSelectorStrategyConfig() throws Exception\n+  {\n+    //no druid.segmentCache.locationSelectorStrategy.type specified\n+    final Properties props = new Properties();\n+    SegmentLoaderConfig loaderConfig = makeInjectorWithProperties(props).getInstance(SegmentLoaderConfig.class);\n+    Assert.assertEquals(LeastBytesUsedStorageLocationSelectorStrategy.class,\n+                        loaderConfig.getStorageLocationSelectorStrategy().getClass());\n+  }\n+\n+  @Test\n+  public void testRoundRobinSelectorStrategyConfig() throws Exception\n+  {\n+    final Properties props = new Properties();\n+    props.put(\"druid.segmentCache.locationSelectorStrategy.type\", \"roundRobin\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY0MDAxOA==", "bodyText": "Generally, the first letter of the exception information needs to be capitalized. In addition, %s needs to be surrounded by square brackets. So please use Using storage location strategy: [%s].", "url": "https://github.com/apache/druid/pull/10363#discussion_r484640018", "createdAt": "2020-09-08T04:13:49Z", "author": {"login": "asdf2014"}, "path": "server/src/main/java/org/apache/druid/segment/loading/SegmentLoaderLocalCacheManager.java", "diffHunk": "@@ -99,7 +99,10 @@ public SegmentLoaderLocalCacheManager(\n           )\n       );\n     }\n-    this.strategy = config.getStorageLocationSelectorStrategy(locations);\n+\n+    this.strategy = config.getStorageLocationSelectorStrategy();\n+    this.strategy.setLocations(locations);\n+    log.info(\"using storage location strategy: %s\", this.strategy.getClass().getSimpleName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NDc2OTcx", "url": "https://github.com/apache/druid/pull/10363#pullrequestreview-484476971", "createdAt": "2020-09-08T20:40:10Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDo1MDozMlrOHOtjyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDo1MDozMlrOHOtjyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE4ODU1Mg==", "bodyText": "I think this approach is brittle and might break when a new implementation of StorageLocationSelectorStrategy is added. Instead, I think we should make List<StorageLocation> storageLocations injectable instead via a module, something like\n@Provides\n@Singleton\npublic List<StorageLocation> provideStorageLocations(SegmentLoaderConfig config)\n{\n  this.locations = new ArrayList<>();\n  for (StorageLocationConfig locationConfig : config.getLocations()) {\n    locations.add(\n        new StorageLocation(\n            locationConfig.getPath(),\n            locationConfig.getMaxSize(),\n            locationConfig.getFreeSpacePercent()\n        )\n    );\nreturn locations;\n}", "url": "https://github.com/apache/druid/pull/10363#discussion_r485188552", "createdAt": "2020-09-08T20:50:32Z", "author": {"login": "suneet-s"}, "path": "server/src/main/java/org/apache/druid/segment/loading/LeastBytesUsedStorageLocationSelectorStrategy.java", "diffHunk": "@@ -36,7 +38,13 @@\n \n   private List<StorageLocation> storageLocations;\n \n-  public LeastBytesUsedStorageLocationSelectorStrategy(List<StorageLocation> storageLocations)\n+  @JsonCreator\n+  public LeastBytesUsedStorageLocationSelectorStrategy()\n+  {\n+  }\n+\n+  @VisibleForTesting\n+  LeastBytesUsedStorageLocationSelectorStrategy(List<StorageLocation> storageLocations)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NDg1NDc2", "url": "https://github.com/apache/druid/pull/10363#pullrequestreview-484485476", "createdAt": "2020-09-08T20:53:55Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDo1Mzo1NVrOHOtqGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMDo1Mzo1NVrOHOtqGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE5MDE3MQ==", "bodyText": "Is this a doc fix? I don't see an associated change in the code. Am I missing something?", "url": "https://github.com/apache/druid/pull/10363#discussion_r485190171", "createdAt": "2020-09-08T20:53:55Z", "author": {"login": "suneet-s"}, "path": "docs/configuration/index.md", "diffHunk": "@@ -1379,7 +1379,7 @@ These Historical configurations can be defined in the `historical/runtime.proper\n |Property|Description|Default|\n |--------|-----------|-------|\n |`druid.segmentCache.locations`|Segments assigned to a Historical process are first stored on the local file system (in a disk cache) and then served by the Historical process. These locations define where that local cache resides. This value cannot be NULL or EMPTY. Here is an example `druid.segmentCache.locations=[{\"path\": \"/mnt/druidSegments\", \"maxSize\": \"10k\", \"freeSpacePercent\": 1.0}]`. \"freeSpacePercent\" is optional, if provided then enforces that much of free disk partition space while storing segments. But, it depends on File.getTotalSpace() and File.getFreeSpace() methods, so enable if only if they work for your File System.| none |\n-|`druid.segmentCache.locationSelectorStrategy`|The strategy used to select a location from the configured `druid.segmentCache.locations` for segment distribution. Possible values are `leastBytesUsed`, `roundRobin`, `random`, or `mostAvailableSize`. |leastBytesUsed|\n+|`druid.segmentCache.locationSelectorStrategy.type`|The strategy used to select a location from the configured `druid.segmentCache.locations` for segment distribution. Possible values are `leastBytesUsed`, `roundRobin`, `random`, or `mostAvailableSize`. |leastBytesUsed|", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMjYxNjAw", "url": "https://github.com/apache/druid/pull/10363#pullrequestreview-490261600", "createdAt": "2020-09-17T05:52:28Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNTo1MjoyOVrOHTSaGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNTo1MjoyOVrOHTSaGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTk4NjU4Ng==", "bodyText": "I think the previous implementation is better since you can use the configuration name druid.segmentCache.locationSelectorStrategy without type. Is there a reason that locationSelectorStrategy cannot be here?", "url": "https://github.com/apache/druid/pull/10363#discussion_r489986586", "createdAt": "2020-09-17T05:52:29Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/segment/loading/SegmentLoaderConfig.java", "diffHunk": "@@ -54,9 +54,6 @@\n   @JsonProperty(\"numBootstrapThreads\")\n   private Integer numBootstrapThreads = null;\n \n-  @JsonProperty(\"locationSelectorStrategy\")\n-  private StorageLocationSelectorStrategy locationSelectorStrategy;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMjAwMTUw", "url": "https://github.com/apache/druid/pull/10363#pullrequestreview-503200150", "createdAt": "2020-10-06T17:29:27Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzNDYxMDE0", "url": "https://github.com/apache/druid/pull/10363#pullrequestreview-503461014", "createdAt": "2020-10-07T01:14:44Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMToxNDo0NFrOHdfKhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMToxODo1MlrOHdfOxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY4MTM1MA==", "bodyText": "Should this be druid.segmentCache.locationSelector instead?", "url": "https://github.com/apache/druid/pull/10363#discussion_r500681350", "createdAt": "2020-10-07T01:14:44Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/guice/StorageNodeModule.java", "diffHunk": "@@ -52,6 +55,7 @@ public void configure(Binder binder)\n   {\n     JsonConfigProvider.bind(binder, \"druid.server\", DruidServerConfig.class);\n     JsonConfigProvider.bind(binder, \"druid.segmentCache\", SegmentLoaderConfig.class);\n+    JsonConfigProvider.bind(binder, \"druid.segmentCache.locationSelector.strategy\", StorageLocationSelectorStrategy.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY4MjQzNg==", "bodyText": "This binding is different from what actual module binds. I think this is why we missed the wrong binding. Can we use the same StorageNodeModule here? Or can we add a helper method which does the proper binding for both StorageNodeModule and tests?", "url": "https://github.com/apache/druid/pull/10363#discussion_r500682436", "createdAt": "2020-10-07T01:18:52Z", "author": {"login": "jihoonson"}, "path": "server/src/test/java/org/apache/druid/segment/loading/StorageLocationSelectorStrategyTest.java", "diffHunk": "@@ -256,4 +270,107 @@ public void testMostAvailableSizeLocationSelectorStrategy() throws Exception\n     Assert.assertEquals(\"The next element of the iterator should point to path local_storage_folder_1\",\n         localStorageFolder1, loc3.getPath());\n   }\n+\n+  @Test\n+  public void testDefaultSelectorStrategyConfig()\n+  {\n+    //no druid.segmentCache.locationSelector.strategy specified, the default will be used\n+    final Properties props = new Properties();\n+    props.setProperty(\"druid.segmentCache.locations\", \"[{\\\"path\\\": \\\"/tmp/druid/indexCache\\\"}]\");\n+\n+    StorageLocationSelectorStrategy strategy = makeInjectorWithProperties(props).getInstance(StorageLocationSelectorStrategy.class);\n+    Assert.assertEquals(LeastBytesUsedStorageLocationSelectorStrategy.class,\n+                        strategy.getClass());\n+    Assert.assertEquals(\"/tmp/druid/indexCache\", strategy.getLocations().next().getPath().getAbsolutePath());\n+  }\n+\n+  @Test\n+  public void testRoundRobinSelectorStrategyConfig()\n+  {\n+    final Properties props = new Properties();\n+    props.setProperty(\"druid.segmentCache.locations\", \"[{\\\"path\\\": \\\"/tmp/druid/indexCache\\\"}]\");\n+    props.setProperty(\"druid.segmentCache.locationSelector.strategy\", \"roundRobin\");\n+\n+    Injector injector = makeInjectorWithProperties(props);\n+    StorageLocationSelectorStrategy strategy = injector.getInstance(StorageLocationSelectorStrategy.class);\n+\n+    Assert.assertEquals(RoundRobinStorageLocationSelectorStrategy.class,\n+                        strategy.getClass());\n+    Assert.assertEquals(\"/tmp/druid/indexCache\", strategy.getLocations().next().getPath().getAbsolutePath());\n+  }\n+\n+  @Test\n+  public void testLeastBytesUsedSelectorStrategyConfig()\n+  {\n+    final Properties props = new Properties();\n+    props.setProperty(\"druid.segmentCache.locations\", \"[{\\\"path\\\": \\\"/tmp/druid/indexCache\\\"}]\");\n+    props.setProperty(\"druid.segmentCache.locationSelector.strategy\", \"leastBytesUsed\");\n+\n+    Injector injector = makeInjectorWithProperties(props);\n+    StorageLocationSelectorStrategy strategy = injector.getInstance(StorageLocationSelectorStrategy.class);\n+\n+    Assert.assertEquals(LeastBytesUsedStorageLocationSelectorStrategy.class,\n+                        strategy.getClass());\n+    Assert.assertEquals(\"/tmp/druid/indexCache\", strategy.getLocations().next().getPath().getAbsolutePath());\n+  }\n+\n+  @Test\n+  public void testRandomSelectorStrategyConfig()\n+  {\n+    final Properties props = new Properties();\n+    props.setProperty(\"druid.segmentCache.locations\", \"[{\\\"path\\\": \\\"/tmp/druid/indexCache\\\"}]\");\n+    props.setProperty(\"druid.segmentCache.locationSelector.strategy\", \"random\");\n+\n+    Injector injector = makeInjectorWithProperties(props);\n+    StorageLocationSelectorStrategy strategy = injector.getInstance(StorageLocationSelectorStrategy.class);\n+\n+    Assert.assertEquals(RandomStorageLocationSelectorStrategy.class,\n+                        strategy.getClass());\n+    Assert.assertEquals(\"/tmp/druid/indexCache\", strategy.getLocations().next().getPath().getAbsolutePath());\n+  }\n+\n+  @Test\n+  public void testMostAvailableSizeSelectorStrategyConfig()\n+  {\n+    final Properties props = new Properties();\n+    props.setProperty(\"druid.segmentCache.locationSelector.strategy\", \"mostAvailableSize\");\n+    props.setProperty(\"druid.segmentCache.locations\", \"[{\\\"path\\\": \\\"/tmp/druid/indexCache\\\"}]\");\n+\n+    Injector injector = makeInjectorWithProperties(props);\n+    StorageLocationSelectorStrategy strategy = injector.getInstance(StorageLocationSelectorStrategy.class);\n+\n+    Assert.assertEquals(MostAvailableSizeStorageLocationSelectorStrategy.class,\n+                        strategy.getClass());\n+    Assert.assertEquals(\"/tmp/druid/indexCache\", strategy.getLocations().next().getPath().getAbsolutePath());\n+  }\n+\n+  private Injector makeInjectorWithProperties(final Properties props)\n+  {\n+    return Guice.createInjector(\n+        new Module()\n+          {\n+            @Override\n+            public void configure(Binder binder)\n+            {\n+              //ObjectMapperModule introduce Guice injector for jackson\n+              binder.install(new ObjectMapperModule()\n+                                 .withObjectMapper(new DefaultObjectMapper()));\n+              binder.install(new DruidGuiceExtensions());\n+\n+              binder.bind(Validator.class).toInstance(Validation.buildDefaultValidatorFactory().getValidator());\n+              binder.bind(JsonConfigurator.class).in(LazySingleton.class);\n+              binder.bind(Properties.class).toInstance(props);\n+\n+              JsonConfigProvider.bind(binder, \"druid.segmentCache\", SegmentLoaderConfig.class);\n+              JsonConfigProvider.bind(binder, \"druid.segmentCache.locationSelector\", StorageLocationSelectorStrategy.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 127}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MDE5NjYz", "url": "https://github.com/apache/druid/pull/10363#pullrequestreview-506019663", "createdAt": "2020-10-09T22:32:58Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NDEzNzk0", "url": "https://github.com/apache/druid/pull/10363#pullrequestreview-546413794", "createdAt": "2020-12-07T18:19:38Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65583aa045c7fb48812ceb3d49b60bd11ea3df2d", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/65583aa045c7fb48812ceb3d49b60bd11ea3df2d", "committedDate": "2020-12-08T01:31:11Z", "message": "fix to allow customer storage location selector strategy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a24ae6ead065af7f83b3ae9a30fb782b1af9a793", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/a24ae6ead065af7f83b3ae9a30fb782b1af9a793", "committedDate": "2020-12-08T01:31:11Z", "message": "add test cases to check instance of selector strategy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a6e163c28fb04b57733d4362ae7a8ea2bc2620c", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/0a6e163c28fb04b57733d4362ae7a8ea2bc2620c", "committedDate": "2020-12-08T01:31:11Z", "message": "update doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67aaf0894b3b5d0ea3d7200586061fb06ef8414c", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/67aaf0894b3b5d0ea3d7200586061fb06ef8414c", "committedDate": "2020-12-08T01:31:11Z", "message": "code format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "154d7c508a86b05ae9c5ce0ab429afedf1df25ff", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/154d7c508a86b05ae9c5ce0ab429afedf1df25ff", "committedDate": "2020-12-08T01:31:11Z", "message": "resolve code review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "402571b8bbfcf9f4cea68498ac3ccbc933f39fb6", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/402571b8bbfcf9f4cea68498ac3ccbc933f39fb6", "committedDate": "2020-12-08T01:31:12Z", "message": "inject StorageLocation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26a98fb10193791189f98dae3d713fde9158c361", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/26a98fb10193791189f98dae3d713fde9158c361", "committedDate": "2020-12-08T01:32:15Z", "message": "fix CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71b416ee7cdd403a557dabe342910fddab5acaa3", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/71b416ee7cdd403a557dabe342910fddab5acaa3", "committedDate": "2020-12-08T01:32:21Z", "message": "fix mismatched license item reported by CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fae9a79b54cf599729c33233d98f962fadaa1171", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/fae9a79b54cf599729c33233d98f962fadaa1171", "committedDate": "2020-12-08T01:32:22Z", "message": "change property path from druid.segmentCache.locationSelectorStrategy.type to druid.segmentCache.locationSelector.strategy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90dfa73ae0b9caed9fdbe3748d0e01094e9c2595", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/90dfa73ae0b9caed9fdbe3748d0e01094e9c2595", "committedDate": "2020-12-08T01:32:22Z", "message": "using a helper method to bind to correct property path"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "90dfa73ae0b9caed9fdbe3748d0e01094e9c2595", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/90dfa73ae0b9caed9fdbe3748d0e01094e9c2595", "committedDate": "2020-12-08T01:32:22Z", "message": "using a helper method to bind to correct property path"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3579, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}