{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwOTA3ODUy", "number": 10503, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMjozODoyN1rOEtP9AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxNjoyOTo0N1rOEu1RSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODgyNzUyOnYy", "diffSide": "LEFT", "path": "docs/querying/datasource.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMjozODoyN1rOHg77bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMjozODoyN1rOHg77bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI5ODM1MQ==", "bodyText": "Nice catch. Please add a SQL query example as in https://github.com/apache/druid/pull/10503/files#diff-dae1ec2a726a9b89dfdf6eb74b7d7c4d9397e02eb95cf4ec5ef3ee440fdefd4dR75-R79.", "url": "https://github.com/apache/druid/pull/10503#discussion_r504298351", "createdAt": "2020-10-13T22:38:27Z", "author": {"login": "jihoonson"}, "path": "docs/querying/datasource.md", "diffHunk": "@@ -134,8 +134,6 @@ another will be treated as if they contained all null values in the tables where\n The list of \"dataSources\" must be nonempty. If you want to query an empty dataset, use an [`inline` datasource](#inline)\n instead.\n \n-Union datasources are not available in Druid SQL.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04112f3940a291cd5b160c6bddfe7e3eee5b5b49"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODgzMzc1OnYy", "diffSide": "RIGHT", "path": "docs/querying/caching.md", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMjo0MDo1M1rOHg7-6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNzoyNDowNVrOHkZOvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI5OTI0Mg==", "bodyText": "Suggest union operation -> union datasource.", "url": "https://github.com/apache/druid/pull/10503#discussion_r504299242", "createdAt": "2020-10-13T22:40:53Z", "author": {"login": "jihoonson"}, "path": "docs/querying/caching.md", "diffHunk": "@@ -82,3 +82,12 @@ Note that the task executor processes only support caches that keep their data l\n This restriction exists because the cache stores results at the level of intermediate partial segments generated by the\n ingestion tasks. These intermediate partial segments will not necessarily be identical across task replicas, so\n remote cache types such as `memcached` will be ignored by task executor processes.\n+\n+## Unsupported queries\n+\n+Query caching is not available for following\n+- queries, that have a union operation, do not support result-level caching - [More details](https://github.com/apache/druid/issues/8713)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04112f3940a291cd5b160c6bddfe7e3eee5b5b49"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQzNTE0Mw==", "bodyText": "I was deliberate in avoiding datasource term since SQL users don't define datasource as such. For them, its just union operator.", "url": "https://github.com/apache/druid/pull/10503#discussion_r504435143", "createdAt": "2020-10-14T06:38:09Z", "author": {"login": "abhishekagarwal87"}, "path": "docs/querying/caching.md", "diffHunk": "@@ -82,3 +82,12 @@ Note that the task executor processes only support caches that keep their data l\n This restriction exists because the cache stores results at the level of intermediate partial segments generated by the\n ingestion tasks. These intermediate partial segments will not necessarily be identical across task replicas, so\n remote cache types such as `memcached` will be ignored by task executor processes.\n+\n+## Unsupported queries\n+\n+Query caching is not available for following\n+- queries, that have a union operation, do not support result-level caching - [More details](https://github.com/apache/druid/issues/8713)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI5OTI0Mg=="}, "originalCommit": {"oid": "04112f3940a291cd5b160c6bddfe7e3eee5b5b49"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQ0MzEwMg==", "bodyText": "Though I think Top Level Union queries may still be cached since they are not translated into a Union datasource. @gianm is that correct?", "url": "https://github.com/apache/druid/pull/10503#discussion_r504443102", "createdAt": "2020-10-14T06:56:20Z", "author": {"login": "abhishekagarwal87"}, "path": "docs/querying/caching.md", "diffHunk": "@@ -82,3 +82,12 @@ Note that the task executor processes only support caches that keep their data l\n This restriction exists because the cache stores results at the level of intermediate partial segments generated by the\n ingestion tasks. These intermediate partial segments will not necessarily be identical across task replicas, so\n remote cache types such as `memcached` will be ignored by task executor processes.\n+\n+## Unsupported queries\n+\n+Query caching is not available for following\n+- queries, that have a union operation, do not support result-level caching - [More details](https://github.com/apache/druid/issues/8713)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI5OTI0Mg=="}, "originalCommit": {"oid": "04112f3940a291cd5b160c6bddfe7e3eee5b5b49"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjczOTA2NQ==", "bodyText": "I was deliberate in avoiding datasource term since SQL users don't define datasource as such. For them, its just union operator.\n\nEven they don't define datasource by themselves, their query will be translated into native queries, which will determine whether it will be cached or not. I think it will be better to be precise so that users don't get confused.\n\nThough I think Top Level Union queries may still be cached since they are not translated into a Union datasource.\n\nGood point, I'm not sure what you mean by \"Top Level Union queries\" though. In SQL, the union operator can be translated to either DruidUnionDataSourceRule or DruidUnionRule. The former is converted to a union datasource while the later is executed sequentially by the sql layer. AFAIT, the former can be used when it's UNION ALL of flat scan subqueries. The later can be used otherwise (still only for UNION ALL). So, the result-level cache cannot be used for the former, but can for the later. Maybe it could say, \"Queries, that have a union datasource, do not support result-level caching. For SQL, a union SQL query can be translated to a native query with a union datasource when it is a UNION ALL of flat scan subqueries. These queries cannot be cached at the result-level.\"", "url": "https://github.com/apache/druid/pull/10503#discussion_r506739065", "createdAt": "2020-10-16T21:58:44Z", "author": {"login": "jihoonson"}, "path": "docs/querying/caching.md", "diffHunk": "@@ -82,3 +82,12 @@ Note that the task executor processes only support caches that keep their data l\n This restriction exists because the cache stores results at the level of intermediate partial segments generated by the\n ingestion tasks. These intermediate partial segments will not necessarily be identical across task replicas, so\n remote cache types such as `memcached` will be ignored by task executor processes.\n+\n+## Unsupported queries\n+\n+Query caching is not available for following\n+- queries, that have a union operation, do not support result-level caching - [More details](https://github.com/apache/druid/issues/8713)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI5OTI0Mg=="}, "originalCommit": {"oid": "04112f3940a291cd5b160c6bddfe7e3eee5b5b49"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4MTE5Mw==", "bodyText": "Top Level and Table level terminologies were added recently to the documentation that I have linked here as well.\nhttps://druid.apache.org/docs/latest/querying/sql.html#union-all", "url": "https://github.com/apache/druid/pull/10503#discussion_r506981193", "createdAt": "2020-10-17T20:32:38Z", "author": {"login": "abhishekagarwal87"}, "path": "docs/querying/caching.md", "diffHunk": "@@ -82,3 +82,12 @@ Note that the task executor processes only support caches that keep their data l\n This restriction exists because the cache stores results at the level of intermediate partial segments generated by the\n ingestion tasks. These intermediate partial segments will not necessarily be identical across task replicas, so\n remote cache types such as `memcached` will be ignored by task executor processes.\n+\n+## Unsupported queries\n+\n+Query caching is not available for following\n+- queries, that have a union operation, do not support result-level caching - [More details](https://github.com/apache/druid/issues/8713)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI5OTI0Mg=="}, "originalCommit": {"oid": "04112f3940a291cd5b160c6bddfe7e3eee5b5b49"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyNDE1Nw==", "bodyText": "Cool, thank you for adding the link.", "url": "https://github.com/apache/druid/pull/10503#discussion_r507924157", "createdAt": "2020-10-19T17:24:05Z", "author": {"login": "jihoonson"}, "path": "docs/querying/caching.md", "diffHunk": "@@ -82,3 +82,12 @@ Note that the task executor processes only support caches that keep their data l\n This restriction exists because the cache stores results at the level of intermediate partial segments generated by the\n ingestion tasks. These intermediate partial segments will not necessarily be identical across task replicas, so\n remote cache types such as `memcached` will be ignored by task executor processes.\n+\n+## Unsupported queries\n+\n+Query caching is not available for following\n+- queries, that have a union operation, do not support result-level caching - [More details](https://github.com/apache/druid/issues/8713)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI5OTI0Mg=="}, "originalCommit": {"oid": "04112f3940a291cd5b160c6bddfe7e3eee5b5b49"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODgzNzE5OnYy", "diffSide": "RIGHT", "path": "docs/querying/caching.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMjo0MjozMFrOHg8A4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMjo0MjozMFrOHg8A4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI5OTc0NA==", "bodyText": "Suggest inline datasource and lookup datasource. \"Datasource\" is the correct terminology to refer a datasource.", "url": "https://github.com/apache/druid/pull/10503#discussion_r504299744", "createdAt": "2020-10-13T22:42:30Z", "author": {"login": "jihoonson"}, "path": "docs/querying/caching.md", "diffHunk": "@@ -82,3 +82,12 @@ Note that the task executor processes only support caches that keep their data l\n This restriction exists because the cache stores results at the level of intermediate partial segments generated by the\n ingestion tasks. These intermediate partial segments will not necessarily be identical across task replicas, so\n remote cache types such as `memcached` will be ignored by task executor processes.\n+\n+## Unsupported queries\n+\n+Query caching is not available for following\n+- queries, that have a union operation, do not support result-level caching - [More details](https://github.com/apache/druid/issues/8713)\n+- queries, that involve an Inline data source or a Lookup data source, do not support any caching. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04112f3940a291cd5b160c6bddfe7e3eee5b5b49"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODg0OTkzOnYy", "diffSide": "RIGHT", "path": "docs/querying/caching.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMjo0NzoyM1rOHg8IFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMjo0NzoyM1rOHg8IFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMwMTU5MA==", "bodyText": "Did you intend this line and the below sentences to be separate? If so, please add a colon or a period at the end of this sentence. Also, the below sentences should start with a capital letter.", "url": "https://github.com/apache/druid/pull/10503#discussion_r504301590", "createdAt": "2020-10-13T22:47:23Z", "author": {"login": "jihoonson"}, "path": "docs/querying/caching.md", "diffHunk": "@@ -82,3 +82,12 @@ Note that the task executor processes only support caches that keep their data l\n This restriction exists because the cache stores results at the level of intermediate partial segments generated by the\n ingestion tasks. These intermediate partial segments will not necessarily be identical across task replicas, so\n remote cache types such as `memcached` will be ignored by task executor processes.\n+\n+## Unsupported queries\n+\n+Query caching is not available for following", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04112f3940a291cd5b160c6bddfe7e3eee5b5b49"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODg5NDY5OnYy", "diffSide": "RIGHT", "path": "docs/querying/caching.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMzowNjo0OVrOHg8iag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMzowNjo0OVrOHg8iag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMwODMzMA==", "bodyText": "Some missing stuffs:\n\nDataSourceMetadataQuery is never cached.\nAny queries are not cached in brokers if bySegment is set in query context. Historicals don't seem to care about bySegment which I think is a bug. We should never cache when it's set.", "url": "https://github.com/apache/druid/pull/10503#discussion_r504308330", "createdAt": "2020-10-13T23:06:49Z", "author": {"login": "jihoonson"}, "path": "docs/querying/caching.md", "diffHunk": "@@ -82,3 +82,12 @@ Note that the task executor processes only support caches that keep their data l\n This restriction exists because the cache stores results at the level of intermediate partial segments generated by the\n ingestion tasks. These intermediate partial segments will not necessarily be identical across task replicas, so\n remote cache types such as `memcached` will be ignored by task executor processes.\n+\n+## Unsupported queries", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04112f3940a291cd5b160c6bddfe7e3eee5b5b49"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODkxMDc0OnYy", "diffSide": "RIGHT", "path": "docs/querying/caching.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMzoxNDoxNlrOHg8r1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNjoyNDoxNVrOHhD6pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMxMDc0Mg==", "bodyText": "It would be worth linking https://druid.apache.org/docs/0.19.0/querying/query-execution.html#query to help understanding since this requires to know how subquery system works in Druid.", "url": "https://github.com/apache/druid/pull/10503#discussion_r504310742", "createdAt": "2020-10-13T23:14:16Z", "author": {"login": "jihoonson"}, "path": "docs/querying/caching.md", "diffHunk": "@@ -82,3 +82,12 @@ Note that the task executor processes only support caches that keep their data l\n This restriction exists because the cache stores results at the level of intermediate partial segments generated by the\n ingestion tasks. These intermediate partial segments will not necessarily be identical across task replicas, so\n remote cache types such as `memcached` will be ignored by task executor processes.\n+\n+## Unsupported queries\n+\n+Query caching is not available for following\n+- queries, that have a union operation, do not support result-level caching - [More details](https://github.com/apache/druid/issues/8713)\n+- queries, that involve an Inline data source or a Lookup data source, do not support any caching. \n+- queries, with a sub-query in them, do not support any caching though the output of sub-queries itself may be cached.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04112f3940a291cd5b160c6bddfe7e3eee5b5b49"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQyOTIyMg==", "bodyText": "Ack", "url": "https://github.com/apache/druid/pull/10503#discussion_r504429222", "createdAt": "2020-10-14T06:24:15Z", "author": {"login": "abhishekagarwal87"}, "path": "docs/querying/caching.md", "diffHunk": "@@ -82,3 +82,12 @@ Note that the task executor processes only support caches that keep their data l\n This restriction exists because the cache stores results at the level of intermediate partial segments generated by the\n ingestion tasks. These intermediate partial segments will not necessarily be identical across task replicas, so\n remote cache types such as `memcached` will be ignored by task executor processes.\n+\n+## Unsupported queries\n+\n+Query caching is not available for following\n+- queries, that have a union operation, do not support result-level caching - [More details](https://github.com/apache/druid/issues/8713)\n+- queries, that involve an Inline data source or a Lookup data source, do not support any caching. \n+- queries, with a sub-query in them, do not support any caching though the output of sub-queries itself may be cached.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMxMDc0Mg=="}, "originalCommit": {"oid": "04112f3940a291cd5b160c6bddfe7e3eee5b5b49"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Mzg0NTIzOnYy", "diffSide": "RIGHT", "path": "docs/querying/caching.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMTowMDowMlrOHjPqZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMTowMDowMlrOHjPqZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcxODgyMA==", "bodyText": "../docs/querying/caching.md\n       90 | [related github issue](https://github.com/apa \n>> 1 spelling error found in 167 files\n\nThe CI is failing because of this line. Please add a suppression in website/.spelling. BTW, I think it should be GitHub.", "url": "https://github.com/apache/druid/pull/10503#discussion_r506718820", "createdAt": "2020-10-16T21:00:02Z", "author": {"login": "jihoonson"}, "path": "docs/querying/caching.md", "diffHunk": "@@ -82,3 +82,19 @@ Note that the task executor processes only support caches that keep their data l\n This restriction exists because the cache stores results at the level of intermediate partial segments generated by the\n ingestion tasks. These intermediate partial segments will not necessarily be identical across task replicas, so\n remote cache types such as `memcached` will be ignored by task executor processes.\n+\n+## Unsupported queries\n+\n+Query caching is not available for following:\n+- Queries, that involve a `union` datasource, do not support result-level caching. Refer to the \n+[related github issue](https://github.com/apache/druid/issues/8713) for details. Top level union SQL queries can still ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b81672e72736509d6e34bcaac6ee87860881721"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NTQyNzMxOnYy", "diffSide": "RIGHT", "path": "docs/querying/caching.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxNjoyOTo0N1rOHjeXDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QyMDoyOTo0N1rOHjfqWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk1OTYyOA==", "bodyText": "The linked issue only refers to segment-level caching.\nI could be wrong but I believe GroupBy V2 does support results-level caching?", "url": "https://github.com/apache/druid/pull/10503#discussion_r506959628", "createdAt": "2020-10-17T16:29:47Z", "author": {"login": "dylwylie"}, "path": "docs/querying/caching.md", "diffHunk": "@@ -82,3 +82,19 @@ Note that the task executor processes only support caches that keep their data l\n This restriction exists because the cache stores results at the level of intermediate partial segments generated by the\n ingestion tasks. These intermediate partial segments will not necessarily be identical across task replicas, so\n remote cache types such as `memcached` will be ignored by task executor processes.\n+\n+## Unsupported queries\n+\n+Query caching is not available for following:\n+- Queries, that involve a `union` datasource, do not support result-level caching. Refer to the \n+[related github issue](https://github.com/apache/druid/issues/8713) for details. Top level union SQL queries can still \n+be cached at result-level since they are not translated into a `union` datasource. Refer to [Union SQL](sql.md#UNION ALL) \n+for more details on how union SQL queries work.\n+- Queries, that involve an `Inline` datasource or a `Lookup` datasource, do not support any caching. \n+- Queries, with a sub-query in them, do not support any caching though the output of sub-queries itself may be cached. \n+Refer to the [Query execution](query-execution.md#query) page for more details on how sub-queries are executed.\n+- Join queries do not support any caching on the broker [More details](https://github.com/apache/druid/issues/10444).\n+- GroupBy v2 queries do not support any caching on broker [More details](https://github.com/apache/druid/issues/3820).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b81672e72736509d6e34bcaac6ee87860881721"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4MDk1Mw==", "bodyText": "It can support result level caching but right now all the caching is disabled for Group By V2 on broker. Result-level caching was introduced after disabling the broker caching for GroupBy V2. So it result-level caching remained disabled as well though there was no reason for it as such.", "url": "https://github.com/apache/druid/pull/10503#discussion_r506980953", "createdAt": "2020-10-17T20:29:47Z", "author": {"login": "abhishekagarwal87"}, "path": "docs/querying/caching.md", "diffHunk": "@@ -82,3 +82,19 @@ Note that the task executor processes only support caches that keep their data l\n This restriction exists because the cache stores results at the level of intermediate partial segments generated by the\n ingestion tasks. These intermediate partial segments will not necessarily be identical across task replicas, so\n remote cache types such as `memcached` will be ignored by task executor processes.\n+\n+## Unsupported queries\n+\n+Query caching is not available for following:\n+- Queries, that involve a `union` datasource, do not support result-level caching. Refer to the \n+[related github issue](https://github.com/apache/druid/issues/8713) for details. Top level union SQL queries can still \n+be cached at result-level since they are not translated into a `union` datasource. Refer to [Union SQL](sql.md#UNION ALL) \n+for more details on how union SQL queries work.\n+- Queries, that involve an `Inline` datasource or a `Lookup` datasource, do not support any caching. \n+- Queries, with a sub-query in them, do not support any caching though the output of sub-queries itself may be cached. \n+Refer to the [Query execution](query-execution.md#query) page for more details on how sub-queries are executed.\n+- Join queries do not support any caching on the broker [More details](https://github.com/apache/druid/issues/10444).\n+- GroupBy v2 queries do not support any caching on broker [More details](https://github.com/apache/druid/issues/3820).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk1OTYyOA=="}, "originalCommit": {"oid": "6b81672e72736509d6e34bcaac6ee87860881721"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3020, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}