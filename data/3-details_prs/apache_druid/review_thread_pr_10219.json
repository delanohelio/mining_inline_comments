{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3NzU5OTAz", "number": 10219, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNDozNzoyNFrOEVqf3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMjo1OTo1MFrOEX1APA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTUxODM5OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/metadata/SegmentAnalyzer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNDozNzoyNFrOG8i-0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMDo0NjoxMVrOG_yPNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE0MDg4MQ==", "bodyText": "I realize you just copied this code from somewhere else, but is there a way we can do this without instanceof? Maybe a new method on StorageAdapter with some nice javadocs? This code is pretty brittle otherwise.", "url": "https://github.com/apache/druid/pull/10219#discussion_r466140881", "createdAt": "2020-08-06T04:37:24Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/metadata/SegmentAnalyzer.java", "diffHunk": "@@ -100,6 +100,11 @@ public long numRows(Segment segment)\n \n     Map<String, ColumnAnalysis> columns = new TreeMap<>();\n \n+    Function<String, ColumnCapabilities> adapterCapabilitesFn =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1126f1579f4d284778aa385b0e9379df34d581d3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUzNjU2Nw==", "bodyText": "eh, I think introduced the ugly instanceof in the first place in a previous PR to fix a different bug. I have a plan to not need this, since it is only necessary for incremental index adapter, so I hope this code is rather temporary but the changes are too big to be part of this patch.\nI would rather not introduce a new method to storage adapter specifically for incremental index adapter, and would prefer to address it when I eliminate the need for it, if that is cool with you. If you disagree and feel strongly about it though, I can introduce a temporary method for it now, and just remove it in the follow-up.", "url": "https://github.com/apache/druid/pull/10219#discussion_r469536567", "createdAt": "2020-08-12T20:46:11Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/query/metadata/SegmentAnalyzer.java", "diffHunk": "@@ -100,6 +100,11 @@ public long numRows(Segment segment)\n \n     Map<String, ColumnAnalysis> columns = new TreeMap<>();\n \n+    Function<String, ColumnCapabilities> adapterCapabilitesFn =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE0MDg4MQ=="}, "originalCommit": {"oid": "1126f1579f4d284778aa385b0e9379df34d581d3"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTUyMjI2OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/metadata/SegmentAnalyzer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNDozOTo0MlrOG8jBJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMDo0ODo0NlrOG_yUKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE0MTQ3Ng==", "bodyText": "When would it be unknown if a column has nulls?\nWill bad stuff happen if we return false when it actually does have nulls, but for some reason it's marked as unknown?", "url": "https://github.com/apache/druid/pull/10219#discussion_r466141476", "createdAt": "2020-08-06T04:39:42Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/metadata/SegmentAnalyzer.java", "diffHunk": "@@ -192,6 +193,7 @@ private ColumnAnalysis analyzeNumericColumn(\n     return new ColumnAnalysis(\n         capabilities.getType().name(),\n         capabilities.hasMultipleValues().isTrue(),\n+        capabilities.isNullable().isTrue(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1126f1579f4d284778aa385b0e9379df34d581d3"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUzNzgzNA==", "bodyText": "I think maybe the only current unknowns will come from complex columns, which thinking about it should probably just report that they have nulls as true instead of unknown...\nRight now nothing bad would happen if the segment metadata falsely reports not having nulls, but in the follow-up where this is wired into DruidSchema, falsely reporting nulls would cause the SQL planner to incorrectly plan to not handle nulls, so I think this should probably be modified to check isMaybeTrue.", "url": "https://github.com/apache/druid/pull/10219#discussion_r469537834", "createdAt": "2020-08-12T20:48:46Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/query/metadata/SegmentAnalyzer.java", "diffHunk": "@@ -192,6 +193,7 @@ private ColumnAnalysis analyzeNumericColumn(\n     return new ColumnAnalysis(\n         capabilities.getType().name(),\n         capabilities.hasMultipleValues().isTrue(),\n+        capabilities.isNullable().isTrue(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE0MTQ3Ng=="}, "originalCommit": {"oid": "1126f1579f4d284778aa385b0e9379df34d581d3"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTU5NzU0OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilitiesImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNToyMzowN1rOG8juGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMDo0OToxMVrOG_yU5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1Mjk4Ng==", "bodyText": "With this addition, I'm wondering if the snapshot method still makes sense. What reason is there that callers generally want to set all these unknown things to the same boolean? They don't seem incredibly related. Maybe we should have callers explicitly resolve all the unknowns in particular directions.", "url": "https://github.com/apache/druid/pull/10219#discussion_r466152986", "createdAt": "2020-08-06T05:23:07Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilitiesImpl.java", "diffHunk": "@@ -72,22 +74,35 @@ public static ColumnCapabilitiesImpl snapshot(@Nullable final ColumnCapabilities\n     copy.hasMultipleValues = copy.hasMultipleValues.coerceUnknownToBoolean(unknownIsTrue);\n     copy.dictionaryValuesSorted = copy.dictionaryValuesSorted.coerceUnknownToBoolean(unknownIsTrue);\n     copy.dictionaryValuesUnique = copy.dictionaryValuesUnique.coerceUnknownToBoolean(unknownIsTrue);\n+    copy.nullable = copy.nullable.coerceUnknownToBoolean(unknownIsTrue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1126f1579f4d284778aa385b0e9379df34d581d3"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUzODAyMA==", "bodyText": "I agree, and have reworked this in #10248, so have added this to the CoerceLogic interface and implementations.", "url": "https://github.com/apache/druid/pull/10219#discussion_r469538020", "createdAt": "2020-08-12T20:49:11Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilitiesImpl.java", "diffHunk": "@@ -72,22 +74,35 @@ public static ColumnCapabilitiesImpl snapshot(@Nullable final ColumnCapabilities\n     copy.hasMultipleValues = copy.hasMultipleValues.coerceUnknownToBoolean(unknownIsTrue);\n     copy.dictionaryValuesSorted = copy.dictionaryValuesSorted.coerceUnknownToBoolean(unknownIsTrue);\n     copy.dictionaryValuesUnique = copy.dictionaryValuesUnique.coerceUnknownToBoolean(unknownIsTrue);\n+    copy.nullable = copy.nullable.coerceUnknownToBoolean(unknownIsTrue);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1Mjk4Ng=="}, "originalCommit": {"oid": "1126f1579f4d284778aa385b0e9379df34d581d3"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTYwNjMwOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/incremental/IncrementalIndex.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNToyNzo1M1rOG8jzWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMDo0OToyM1rOG_yVQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1NDMzMA==", "bodyText": "If it's string won't it still count as a null, even in replace-with-default mode?\nBtw, consider adding a NullHandling.isNullable(ValueType) method if seems useful.", "url": "https://github.com/apache/druid/pull/10219#discussion_r466154330", "createdAt": "2020-08-06T05:27:53Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/incremental/IncrementalIndex.java", "diffHunk": "@@ -685,6 +685,9 @@ IncrementalIndexRowResult toIncrementalIndexRow(InputRow row)\n         }\n         dimsKeySize += indexer.estimateEncodedKeyComponentSize(dimsKey);\n         // Set column capabilities as data is coming in\n+        if (dimsKey == null) {\n+          capabilities.setIsNullable(NullHandling.sqlCompatible());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1126f1579f4d284778aa385b0e9379df34d581d3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUzODExMw==", "bodyText": "This is now handled by the dimension indexers, which now can all determine if they have null values or not, so I don't think NullHandling.isNullable(ValueType) is necessary anymore.", "url": "https://github.com/apache/druid/pull/10219#discussion_r469538113", "createdAt": "2020-08-12T20:49:23Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/incremental/IncrementalIndex.java", "diffHunk": "@@ -685,6 +685,9 @@ IncrementalIndexRowResult toIncrementalIndexRow(InputRow row)\n         }\n         dimsKeySize += indexer.estimateEncodedKeyComponentSize(dimsKey);\n         // Set column capabilities as data is coming in\n+        if (dimsKey == null) {\n+          capabilities.setIsNullable(NullHandling.sqlCompatible());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1NDMzMA=="}, "originalCommit": {"oid": "1126f1579f4d284778aa385b0e9379df34d581d3"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTYzODA2OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilities.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNTo0MzozMlrOG8kFwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzoxNToxMVrOG_2ADA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1OTA0Mg==", "bodyText": "Broad comment: \"hasNulls\" would be a better name for this property, because it's meant to mean whether or not the column really has nulls in it right now.\n\"isNullable\" will make people think of the SQL sense of the term, which is a different concept: it means a column could have nulls potentially, even if it doesn't right now.", "url": "https://github.com/apache/druid/pull/10219#discussion_r466159042", "createdAt": "2020-08-06T05:43:32Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilities.java", "diffHunk": "@@ -38,6 +38,7 @@\n   boolean hasSpatialIndexes();\n   Capable hasMultipleValues();\n   boolean isFilterable();\n+  Capable isNullable();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1126f1579f4d284778aa385b0e9379df34d581d3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUzOTI2NQ==", "bodyText": "I agree, and have renamed this to hasNulls, but haven't changed the segment metadata ColumnAnalysis yet...\nI view segment metadata as the computed equivalent of an SQL schema, and have exposed in with the intention of populating the IS_NULLABLE column in the information schema columns table, and access via DruidSchema will allow the SQL planner to make better plans and skip null checking and such, so I thought it still appropriate to leave this as isNullable. I don't feel super strongly about this though, so if you disagree I can change it.", "url": "https://github.com/apache/druid/pull/10219#discussion_r469539265", "createdAt": "2020-08-12T20:51:31Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilities.java", "diffHunk": "@@ -38,6 +38,7 @@\n   boolean hasSpatialIndexes();\n   Capable hasMultipleValues();\n   boolean isFilterable();\n+  Capable isNullable();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1OTA0Mg=="}, "originalCommit": {"oid": "1126f1579f4d284778aa385b0e9379df34d581d3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU5ODIyMA==", "bodyText": "I do feel that it shouldn't be called isNullable. I think we should avoid the word \"nullable\" in core Druid to refer to this concept, because one day, we might want to introduce the SQL-style concept of nullable vs non-nullable columns. That concept is more of a definition thing than a reality thing, and will be confusing to introduce to core if we have the reality-thing using the word \"nullable\".\nAlso, if we did introduce it to core, we'd probably want to report both (a column that is nullable table-wide might not actually have nulls in a specific segment, and that's useful to know).", "url": "https://github.com/apache/druid/pull/10219#discussion_r469598220", "createdAt": "2020-08-12T23:15:11Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilities.java", "diffHunk": "@@ -38,6 +38,7 @@\n   boolean hasSpatialIndexes();\n   Capable hasMultipleValues();\n   boolean isFilterable();\n+  Capable isNullable();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1OTA0Mg=="}, "originalCommit": {"oid": "1126f1579f4d284778aa385b0e9379df34d581d3"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTY0Mzk3OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/serde/DoubleNumericColumnPartSerdeV2.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNTo0NjoxNlrOG8kJKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNTo0NjoxNlrOG8kJKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1OTkxMw==", "bodyText": "It would be better to use !bitmap.isEmpty(), because bitmap.size() isn't always cached and could potentially require walking the bitmap. Similar comment for the other serde types.", "url": "https://github.com/apache/druid/pull/10219#discussion_r466159913", "createdAt": "2020-08-06T05:46:16Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/serde/DoubleNumericColumnPartSerdeV2.java", "diffHunk": "@@ -152,13 +152,17 @@ public Deserializer getDeserializer()\n \n       buffer.position(initialPos + offset);\n       final ImmutableBitmap bitmap;\n+      final boolean isNullable;\n       if (buffer.hasRemaining()) {\n         bitmap = bitmapSerdeFactory.getObjectStrategy().fromByteBufferWithSize(buffer);\n+        isNullable = bitmap.size() > 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1126f1579f4d284778aa385b0e9379df34d581d3"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTY0NTkwOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/serde/DictionaryEncodedColumnPartSerde.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNTo0NzoxM1rOG8kKZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMDo1MjoxMFrOG_ybDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE2MDIyOQ==", "bodyText": "What if it's a multi-value column with no explicit nulls, but some empty rows? Two questions in that scenario:\n\nShould a column like that report \"yes\" or \"no\" for having nulls? I'm guessing \"yes\" makes sense, because if you filter on col is null then that should match empty rows. So it stands to reason that it has nulls in some sense, even though you won't see them if you walk through the column.\nWhat will firstDictionaryEntry be?", "url": "https://github.com/apache/druid/pull/10219#discussion_r466160229", "createdAt": "2020-08-06T05:47:13Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/serde/DictionaryEncodedColumnPartSerde.java", "diffHunk": "@@ -329,6 +331,7 @@ public void read(ByteBuffer buffer, ColumnBuilder builder, ColumnConfig columnCo\n         );\n         builder\n             .setHasMultipleValues(hasMultipleValues)\n+            .setNullable(firstDictionaryEntry == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1126f1579f4d284778aa385b0e9379df34d581d3"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUzOTU5Nw==", "bodyText": "I modified a column capabilities test to cover this condition, it still reports as having nulls if it ingests an empty list to a multi-value column.", "url": "https://github.com/apache/druid/pull/10219#discussion_r469539597", "createdAt": "2020-08-12T20:52:10Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/serde/DictionaryEncodedColumnPartSerde.java", "diffHunk": "@@ -329,6 +331,7 @@ public void read(ByteBuffer buffer, ColumnBuilder builder, ColumnConfig columnCo\n         );\n         builder\n             .setHasMultipleValues(hasMultipleValues)\n+            .setNullable(firstDictionaryEntry == null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE2MDIyOQ=="}, "originalCommit": {"oid": "1126f1579f4d284778aa385b0e9379df34d581d3"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDIwNTI4OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/metadata/SegmentAnalyzer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMjo1NzowMVrOG_1pDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMjo1NzowMVrOG_1pDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU5MjMzNQ==", "bodyText": "Could you please rename this to hasNulls, for this reason: #10219 (comment)?", "url": "https://github.com/apache/druid/pull/10219#discussion_r469592335", "createdAt": "2020-08-12T22:57:01Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/metadata/SegmentAnalyzer.java", "diffHunk": "@@ -335,6 +339,8 @@ private ColumnAnalysis analyzeComplexColumn(\n   {\n     try (final ComplexColumn complexColumn = columnHolder != null ? (ComplexColumn) columnHolder.getColumn() : null) {\n       final boolean hasMultipleValues = capabilities != null && capabilities.hasMultipleValues().isTrue();\n+      // if we don't know for sure, then we should plan to check for nulls\n+      final boolean nullable = capabilities != null && capabilities.hasNulls().isMaybeTrue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82ff3e452eae3ae1e77ce854e22f563d874bb055"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDIxMTE2OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/metadata/SegmentAnalyzer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMjo1OTo1MVrOG_1soQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMjo1OTo1MVrOG_1soQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU5MzI0OQ==", "bodyText": "This comment doesn't make a lot of sense in the context of SegmentAnalyzer. It shouldn't \"know\" what the fields are being used for, so it shouldn't \"know\" they're going to be used to check for nulls somewhere higher up the chain.\nMaybe a better thing to do would be:\n\nDefine \"hasNulls\" as meaning \"definitely has nulls, or can't determine\". This should be in the docs for the segmentMetadata query too.\nNow this comment could read: \"If we don't know for sure, return true to adhere to the definition of hasNulls\"", "url": "https://github.com/apache/druid/pull/10219#discussion_r469593249", "createdAt": "2020-08-12T22:59:51Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/metadata/SegmentAnalyzer.java", "diffHunk": "@@ -192,6 +193,7 @@ private ColumnAnalysis analyzeNumericColumn(\n     return new ColumnAnalysis(\n         capabilities.getType().name(),\n         capabilities.hasMultipleValues().isTrue(),\n+        capabilities.hasNulls().isMaybeTrue(), // if we don't know for sure, then we should plan to check for nulls", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82ff3e452eae3ae1e77ce854e22f563d874bb055"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2242, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}