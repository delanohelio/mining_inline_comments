{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwODYyNDY1", "number": 10089, "title": "Fix native batch range partition segment sizing", "bodyText": "Fixes #10057.\nDescription\nNative batch range partitioning was only considering the partition dimension value when grouping rows instead of using all of the row's partition values. Thus, for schemas with multiple dimensions, the rollup was overestimated, which would cause too many dimension values to be packed into the same range partition. The resulting segments would then be overly large (and not honor the target or max partition sizes).\n\nThis PR has:\n\n been self-reviewed.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths, ensuring the threshold for code coverage is met.\n\n\nKey changed/added classes in this PR\n\nPartialDimensionDistributionTask: Consider all dimension values when grouping row\nRangePartitionMultiPhaseParallelIndexingTest: Regression test by having input with rows that should roll up and rows that should not roll up", "createdAt": "2020-06-27T05:12:56Z", "url": "https://github.com/apache/druid/pull/10089", "merged": true, "mergeCommit": {"oid": "33a37d85d7ae3155e5f5d38814feade8e08e1d71"}, "closed": true, "closedAt": "2020-06-30T00:49:53Z", "author": {"login": "ccaominh"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcvPwT4AH2gAyNDQwODYyNDY1OmQ0MzdmZmRkZmNhOWQ1MzZlYTA3OThiYjk4NTljZTY3NDk0MWE5M2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwI7AIAFqTQzOTU0OTg2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d437ffddfca9d536ea0798bb9859ce674941a93b", "author": {"user": {"login": "ccaominh", "name": "Chi Cao Minh"}}, "url": "https://github.com/apache/druid/commit/d437ffddfca9d536ea0798bb9859ce674941a93b", "committedDate": "2020-06-27T04:01:52Z", "message": "Fix native batch range partition segment sizing\n\nFixes #10057.\n\nNative batch range partitioning was only considering the partition\ndimension value when grouping rows instead of using all of the row's\npartition values. Thus, for schemas with multiple dimensions, the rollup\nwas overestimated, which would cause too many dimension values to be\npacked into the same range partition. The resulting segments would then\nbe overly large (and not honor the target or max partition sizes).\n\nMain changes:\n\n- PartialDimensionDistributionTask: Consider all dimension values when\n  grouping row\n\n- RangePartitionMultiPhaseParallelIndexingTest: Regression test by\n  having input with rows that should roll up and rows that should not\n  roll up"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NzU4NjQ4", "url": "https://github.com/apache/druid/pull/10089#pullrequestreview-438758648", "createdAt": "2020-06-28T08:47:56Z", "commit": {"oid": "d437ffddfca9d536ea0798bb9859ce674941a93b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NDU5NjI1", "url": "https://github.com/apache/druid/pull/10089#pullrequestreview-439459625", "createdAt": "2020-06-29T20:03:22Z", "commit": {"oid": "d437ffddfca9d536ea0798bb9859ce674941a93b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDowMzoyM1rOGqgMcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDowMzoyM1rOGqgMcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIyMDg1MA==", "bodyText": "I haven't fully looked into the logic of determineDistribution, but a warning: this isn't the right way to get the list of dimension names that will end up in the finished product, since it won't work properly in schemaless dimensions mode. So determineDistribution may need to accept the DimensionsSpec itself and do the same logic that the index generator code itself would do.\nWatch out for the queryGranularity as well, which is part of the rollup key. It looks like determineDistribution isn't currently inspecting it (it comes from granularitySpec.getQueryGranularity()).", "url": "https://github.com/apache/druid/pull/10089#discussion_r447220850", "createdAt": "2020-06-29T20:03:23Z", "author": {"login": "gianm"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/common/task/batch/parallel/PartialDimensionDistributionTask.java", "diffHunk": "@@ -223,17 +224,19 @@ public TaskStatus runTask(TaskToolbox toolbox) throws Exception\n \n     try (\n         CloseableIterator<InputRow> inputRowIterator = inputSourceReader.read();\n-        HandlingInputRowIterator iterator = new RangePartitionIndexTaskInputRowIteratorBuilder(partitionDimension, SKIP_NULL)\n-            .delegate(inputRowIterator)\n-            .granularitySpec(granularitySpec)\n-            .nullRowRunnable(IndexTaskInputRowIteratorBuilder.NOOP_RUNNABLE)\n-            .absentBucketIntervalConsumer(IndexTaskInputRowIteratorBuilder.NOOP_CONSUMER)\n-            .build()\n+        HandlingInputRowIterator iterator =\n+            new RangePartitionIndexTaskInputRowIteratorBuilder(partitionDimension, SKIP_NULL)\n+                .delegate(inputRowIterator)\n+                .granularitySpec(granularitySpec)\n+                .nullRowRunnable(IndexTaskInputRowIteratorBuilder.NOOP_RUNNABLE)\n+                .absentBucketIntervalConsumer(IndexTaskInputRowIteratorBuilder.NOOP_CONSUMER)\n+                .build()\n     ) {\n       Map<Interval, StringDistribution> distribution = determineDistribution(\n           iterator,\n           granularitySpec,\n           partitionDimension,\n+          dataSchema.getDimensionsSpec().getDimensionNames(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d437ffddfca9d536ea0798bb9859ce674941a93b"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45758c8eae13ba053b09e0757aeec0a7f4b7082e", "author": {"user": {"login": "ccaominh", "name": "Chi Cao Minh"}}, "url": "https://github.com/apache/druid/commit/45758c8eae13ba053b09e0757aeec0a7f4b7082e", "committedDate": "2020-06-29T21:14:24Z", "message": "Use hadoop & native hash ingestion row group key"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NTM2OTA0", "url": "https://github.com/apache/druid/pull/10089#pullrequestreview-439536904", "createdAt": "2020-06-29T22:11:00Z", "commit": {"oid": "45758c8eae13ba053b09e0757aeec0a7f4b7082e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NTQ5ODY3", "url": "https://github.com/apache/druid/pull/10089#pullrequestreview-439549867", "createdAt": "2020-06-29T22:38:08Z", "commit": {"oid": "45758c8eae13ba053b09e0757aeec0a7f4b7082e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2185, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}