{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzODk3MzY1", "number": 9200, "title": "Optimize JoinCondition matching", "bodyText": "Description\nThe LookupJoinMatcher needs to check if a condition is always true or false\nmultiple times. This can be pre-computed to speed up the match checking\nThis change reduces the time it takes to perform a for joining on a long key\nfrom ~ 36 ms/op to 23 ms/ op\n\nThis PR has:\n\n been self-reviewed.\n\n using the concurrency checklist (Remove this item if the PR doesn't have any relation to concurrency.)\n\n\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-01-16T23:36:29Z", "url": "https://github.com/apache/druid/pull/9200", "merged": true, "mergeCommit": {"oid": "a2939bbd1acc1dbda89ca0c4d5a7d82b3c15f025"}, "closed": true, "closedAt": "2020-01-21T17:11:51Z", "author": {"login": "suneet-s"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb7CzkiAH2gAyMzYzODk3MzY1OjFmN2U3M2QxYzAwY2M0ZTI3ODNlYzM2ZTQ0NGY3N2MyYjczNThiZTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb8QwxIAH2gAyMzYzODk3MzY1OjAwNTNiZjMxYWRkZDBjMmNkNmMyN2VjOWYzMDdiN2QyZDg5NGM3ODI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1f7e73d1c00cc4e2783ec36e444f77c2b7358be9", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/1f7e73d1c00cc4e2783ec36e444f77c2b7358be9", "committedDate": "2020-01-16T23:32:36Z", "message": "Optimize JoinCondition matching\n\nThe LookupJoinMatcher needs to check if a condition is always true or false\nmultiple times. This can be pre-computed to speed up the match checking\n\nThis change reduces the time it takes to perform a for joining on a long key\nfrom ~ 36 ms/op to 23 ms/ op"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0Mjk0NzMz", "url": "https://github.com/apache/druid/pull/9200#pullrequestreview-344294733", "createdAt": "2020-01-17T00:04:02Z", "commit": {"oid": "1f7e73d1c00cc4e2783ec36e444f77c2b7358be9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MzA0NTc0", "url": "https://github.com/apache/druid/pull/9200#pullrequestreview-344304574", "createdAt": "2020-01-17T00:37:01Z", "commit": {"oid": "1f7e73d1c00cc4e2783ec36e444f77c2b7358be9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMDozNzowMVrOFerz2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMDozNzozMlrOFer0Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcxOTM4NA==", "bodyText": "It seems like allTrueLiteralNonEquiConditions is only used here; how about caching isAlwaysTrue directly?", "url": "https://github.com/apache/druid/pull/9200#discussion_r367719384", "createdAt": "2020-01-17T00:37:01Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/join/JoinConditionAnalysis.java", "diffHunk": "@@ -133,26 +142,23 @@ public String getOriginalExpression()\n    */\n   public boolean isAlwaysFalse()\n   {\n-    return nonEquiConditions.stream()\n-                            .anyMatch(expr -> expr.isLiteral() && !expr.eval(ExprUtils.nilBindings()).asBoolean());\n+    return anyFalseLiteralNonEquiConditions;\n   }\n \n   /**\n    * Return whether this condition is a constant that is always true.\n    */\n   public boolean isAlwaysTrue()\n   {\n-    return equiConditions.isEmpty() &&\n-           nonEquiConditions.stream()\n-                            .allMatch(expr -> expr.isLiteral() && expr.eval(ExprUtils.nilBindings()).asBoolean());\n+    return equiConditions.isEmpty() && allTrueLiteralNonEquiConditions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f7e73d1c00cc4e2783ec36e444f77c2b7358be9"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcxOTQ5OQ==", "bodyText": "Why not call this isAlwaysFalse? (It looks like it isn't used anywhere else, and it seems to me to be easier to understand the meaning of the field if it's named after what we want it to mean.)", "url": "https://github.com/apache/druid/pull/9200#discussion_r367719499", "createdAt": "2020-01-17T00:37:32Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/join/JoinConditionAnalysis.java", "diffHunk": "@@ -133,26 +142,23 @@ public String getOriginalExpression()\n    */\n   public boolean isAlwaysFalse()\n   {\n-    return nonEquiConditions.stream()\n-                            .anyMatch(expr -> expr.isLiteral() && !expr.eval(ExprUtils.nilBindings()).asBoolean());\n+    return anyFalseLiteralNonEquiConditions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f7e73d1c00cc4e2783ec36e444f77c2b7358be9"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cf6abbead11db90f17d0bc314e14fe11fd57b5f", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/3cf6abbead11db90f17d0bc314e14fe11fd57b5f", "committedDate": "2020-01-17T18:49:28Z", "message": "Rename variables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb386761dc60e4e3a18600fe94a166566adc9d28", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/bb386761dc60e4e3a18600fe94a166566adc9d28", "committedDate": "2020-01-17T18:50:47Z", "message": "fix typo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0NzgxNzEx", "url": "https://github.com/apache/druid/pull/9200#pullrequestreview-344781711", "createdAt": "2020-01-17T19:06:07Z", "commit": {"oid": "bb386761dc60e4e3a18600fe94a166566adc9d28"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2ae33eff21b46dc9390ec5551c50dc1592a3140", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/e2ae33eff21b46dc9390ec5551c50dc1592a3140", "committedDate": "2020-01-18T05:42:45Z", "message": "Merge remote-tracking branch 'upstream/master' into join-perf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8115975ed0690ec381aef630e1f38bb412350a6c", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/8115975ed0690ec381aef630e1f38bb412350a6c", "committedDate": "2020-01-18T05:43:02Z", "message": "Merge remote-tracking branch 'upstream/master' into join-perf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0053bf31addd0c2cd6c27ec9f307b7d2d894c782", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/0053bf31addd0c2cd6c27ec9f307b7d2d894c782", "committedDate": "2020-01-20T18:22:08Z", "message": "Merge remote-tracking branch 'upstream/master' into join-perf"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3750, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}