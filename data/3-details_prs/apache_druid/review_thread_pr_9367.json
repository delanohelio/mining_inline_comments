{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NzA0NjAx", "number": 9367, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTo1Mzo1NFrODhPGFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMDoxMDoyMFrODhuRiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTc2OTE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/math/expr/Expr.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTo1Mzo1NFrOFr5BjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTo1Mzo1NFrOFr5BjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2NzM3Mw==", "bodyText": "Can you add a comment about why escapeJavaScript is used (or escapeJava for IdentifierExpr )?", "url": "https://github.com/apache/druid/pull/9367#discussion_r381567373", "createdAt": "2020-02-19T21:53:54Z", "author": {"login": "jon-wei"}, "path": "core/src/main/java/org/apache/druid/math/expr/Expr.java", "diffHunk": "@@ -571,6 +596,12 @@ public ExprEval eval(ObjectBinding bindings)\n   {\n     return ExprEval.of(value);\n   }\n+\n+  @Override\n+  public String stringify()\n+  {\n+    return value == null ? NULL_LITERAL : StringUtils.format(\"'%s'\", StringEscapeUtils.escapeJavaScript(value));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7389deddf9e138f3ca502498eaf95cdda7af453f"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTc3ODU2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/math/expr/ExprListenerImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTo1NzoxMFrOFr5HjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTo1NzoxMFrOFr5HjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2ODkwOQ==", "bodyText": "This and similar blocks could use the NULL_LITERAL constant", "url": "https://github.com/apache/druid/pull/9367#discussion_r381568909", "createdAt": "2020-02-19T21:57:10Z", "author": {"login": "jon-wei"}, "path": "core/src/main/java/org/apache/druid/math/expr/ExprListenerImpl.java", "diffHunk": "@@ -109,9 +110,13 @@ public void exitDoubleExpr(ExprParser.DoubleExprContext ctx)\n   @Override\n   public void exitDoubleArray(ExprParser.DoubleArrayContext ctx)\n   {\n-    Double[] values = new Double[ctx.DOUBLE().size()];\n+    Double[] values = new Double[ctx.doubleElement().size()];\n     for (int i = 0; i < values.length; i++) {\n-      values[i] = Double.parseDouble(ctx.DOUBLE(i).getText());\n+      if (ctx.doubleElement(i).getText().equalsIgnoreCase(\"null\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7389deddf9e138f3ca502498eaf95cdda7af453f"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjgzOTc4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/math/expr/ExprMacroTable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzo1MDo1N1rOFsnPhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMDo0NDoyOVrOFsy1LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMyNDYxNA==", "bodyText": "nit: should it use Expr.ARG_JOINER?", "url": "https://github.com/apache/druid/pull/9367#discussion_r382324614", "createdAt": "2020-02-20T23:50:57Z", "author": {"login": "jihoonson"}, "path": "core/src/main/java/org/apache/druid/math/expr/ExprMacroTable.java", "diffHunk": "@@ -132,17 +141,29 @@ private BindingDetails supplyAnalyzeInputs()\n    */\n   public abstract static class BaseScalarMacroFunctionExpr implements Expr\n   {\n+    protected final String name;\n     protected final List<Expr> args;\n \n     // Use Supplier to memoize values as ExpressionSelectors#makeExprEvalSelector() can make repeated calls for them\n     private final Supplier<BindingDetails> analyzeInputsSupplier;\n \n-    public BaseScalarMacroFunctionExpr(final List<Expr> args)\n+    public BaseScalarMacroFunctionExpr(String name, final List<Expr> args)\n     {\n+      this.name = name;\n       this.args = args;\n       analyzeInputsSupplier = Suppliers.memoize(this::supplyAnalyzeInputs);\n     }\n \n+    @Override\n+    public String stringify()\n+    {\n+      return StringUtils.format(\n+          \"%s(%s)\",\n+          name,\n+          Joiner.on(\", \").join(args.stream().map(Expr::stringify).iterator())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8aafe2ea0bccfe16f459069adf9e8aae8792d2f6"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxNDQ3Ng==", "bodyText": "changed", "url": "https://github.com/apache/druid/pull/9367#discussion_r382514476", "createdAt": "2020-02-21T10:44:29Z", "author": {"login": "clintropolis"}, "path": "core/src/main/java/org/apache/druid/math/expr/ExprMacroTable.java", "diffHunk": "@@ -132,17 +141,29 @@ private BindingDetails supplyAnalyzeInputs()\n    */\n   public abstract static class BaseScalarMacroFunctionExpr implements Expr\n   {\n+    protected final String name;\n     protected final List<Expr> args;\n \n     // Use Supplier to memoize values as ExpressionSelectors#makeExprEvalSelector() can make repeated calls for them\n     private final Supplier<BindingDetails> analyzeInputsSupplier;\n \n-    public BaseScalarMacroFunctionExpr(final List<Expr> args)\n+    public BaseScalarMacroFunctionExpr(String name, final List<Expr> args)\n     {\n+      this.name = name;\n       this.args = args;\n       analyzeInputsSupplier = Suppliers.memoize(this::supplyAnalyzeInputs);\n     }\n \n+    @Override\n+    public String stringify()\n+    {\n+      return StringUtils.format(\n+          \"%s(%s)\",\n+          name,\n+          Joiner.on(\", \").join(args.stream().map(Expr::stringify).iterator())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMyNDYxNA=="}, "originalCommit": {"oid": "8aafe2ea0bccfe16f459069adf9e8aae8792d2f6"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2Njg0MTY4OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/druid/math/expr/ApplyFunctionTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzo1MTo0MlrOFsnQnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzo1MTo0MlrOFsnQnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMyNDg5NQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/druid/pull/9367#discussion_r382324895", "createdAt": "2020-02-20T23:51:42Z", "author": {"login": "jihoonson"}, "path": "core/src/test/java/org/apache/druid/math/expr/ApplyFunctionTest.java", "diffHunk": "@@ -102,7 +102,7 @@ public void testFold()\n     assertExpr(\"fold((b, acc) -> b * acc, map((b) -> b * 2, filter(b -> b > 3, b)), 1)\", 80L);\n     assertExpr(\"fold((a, acc) -> concat(a, acc), a, '')\", \"foobarbazbarfoo\");\n     assertExpr(\"fold((a, acc) -> array_append(acc, a), a, [])\", new String[]{\"foo\", \"bar\", \"baz\", \"foobar\"});\n-    assertExpr(\"fold((a, acc) -> array_append(acc, a), b, cast([], 'LONG_ARRAY'))\", new Long[]{1L, 2L, 3L, 4L, 5L});\n+    assertExpr(\"fold((a, acc) -> array_append(acc, a), b, <LONG>[])\", new Long[]{1L, 2L, 3L, 4L, 5L});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8aafe2ea0bccfe16f459069adf9e8aae8792d2f6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2Njg3NzU1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/math/expr/ExprListenerImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMDoxMDoyMFrOFsnmRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMzoxMjo1OFrOFtHQKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMzMDQzNw==", "bodyText": "Wondering if the array elements should be casted if they are not longs.", "url": "https://github.com/apache/druid/pull/9367#discussion_r382330437", "createdAt": "2020-02-21T00:10:20Z", "author": {"login": "jihoonson"}, "path": "core/src/main/java/org/apache/druid/math/expr/ExprListenerImpl.java", "diffHunk": "@@ -188,9 +195,15 @@ public void exitLogicalAndOrExpr(ExprParser.LogicalAndOrExprContext ctx)\n   @Override\n   public void exitLongArray(ExprParser.LongArrayContext ctx)\n   {\n-    Long[] values = new Long[ctx.LONG().size()];\n+    Long[] values = ctx.longArrayBody() == null\n+                    ? new Long[0]\n+                    : new Long[ctx.longArrayBody().longElement().size()];\n     for (int i = 0; i < values.length; i++) {\n-      values[i] = Long.parseLong(ctx.LONG(i).getText());\n+      if (ctx.longArrayBody().longElement(i).getText().equalsIgnoreCase(Expr.NULL_LITERAL)) {\n+        values[i] = null;\n+      } else {\n+        values[i] = Long.parseLong(ctx.longArrayBody().longElement(i).getText());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad0b01fa430a16cbfcc55ded91f9224252ec783e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxNjU2MA==", "bodyText": "Yeah, it seems more druidish to do that, I've modified explicitly typed numeric arrays to use a more permissive parsing with a couple of methods I've added to Numbers utility class, so <LONG>[1, 1.2, 3] and <DOUBLE>[1, 2, 3] will coerce the elements as new Long[]{1L, 1L, 3L}  and new Double[]{1.0, 2.0, 3.0} respectively, as one might hope. However, I am not converting string literals, so things like <LONG>[1, 2, '3'] are still not valid at this time.\nI also made explicit string arrays more permissive, and can accept any type of literal as an element and will convert them all to strings, <STRING>['hello', 1, 1.2] -> new String[]{\"hello\", \"1\", \"1.2\"}.\nString and long implicitly typed arrays are unchanged, but I did modify the parser to allow double implicitly typed arrays to also accept longs.", "url": "https://github.com/apache/druid/pull/9367#discussion_r382516560", "createdAt": "2020-02-21T10:49:01Z", "author": {"login": "clintropolis"}, "path": "core/src/main/java/org/apache/druid/math/expr/ExprListenerImpl.java", "diffHunk": "@@ -188,9 +195,15 @@ public void exitLogicalAndOrExpr(ExprParser.LogicalAndOrExprContext ctx)\n   @Override\n   public void exitLongArray(ExprParser.LongArrayContext ctx)\n   {\n-    Long[] values = new Long[ctx.LONG().size()];\n+    Long[] values = ctx.longArrayBody() == null\n+                    ? new Long[0]\n+                    : new Long[ctx.longArrayBody().longElement().size()];\n     for (int i = 0; i < values.length; i++) {\n-      values[i] = Long.parseLong(ctx.LONG(i).getText());\n+      if (ctx.longArrayBody().longElement(i).getText().equalsIgnoreCase(Expr.NULL_LITERAL)) {\n+        values[i] = null;\n+      } else {\n+        values[i] = Long.parseLong(ctx.longArrayBody().longElement(i).getText());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMzMDQzNw=="}, "originalCommit": {"oid": "ad0b01fa430a16cbfcc55ded91f9224252ec783e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg0OTA2Ng==", "bodyText": "Thanks, sounds good.", "url": "https://github.com/apache/druid/pull/9367#discussion_r382849066", "createdAt": "2020-02-21T23:12:58Z", "author": {"login": "jihoonson"}, "path": "core/src/main/java/org/apache/druid/math/expr/ExprListenerImpl.java", "diffHunk": "@@ -188,9 +195,15 @@ public void exitLogicalAndOrExpr(ExprParser.LogicalAndOrExprContext ctx)\n   @Override\n   public void exitLongArray(ExprParser.LongArrayContext ctx)\n   {\n-    Long[] values = new Long[ctx.LONG().size()];\n+    Long[] values = ctx.longArrayBody() == null\n+                    ? new Long[0]\n+                    : new Long[ctx.longArrayBody().longElement().size()];\n     for (int i = 0; i < values.length; i++) {\n-      values[i] = Long.parseLong(ctx.LONG(i).getText());\n+      if (ctx.longArrayBody().longElement(i).getText().equalsIgnoreCase(Expr.NULL_LITERAL)) {\n+        values[i] = null;\n+      } else {\n+        values[i] = Long.parseLong(ctx.longArrayBody().longElement(i).getText());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMzMDQzNw=="}, "originalCommit": {"oid": "ad0b01fa430a16cbfcc55ded91f9224252ec783e"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2766, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}