{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzOTM0MTAy", "number": 9831, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxOTo0MzoyN1rOD59-CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxOTo0NzowMFrOD5-DNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTEwNzI4OnYy", "diffSide": "RIGHT", "path": "processing/src/test/java/org/apache/druid/segment/join/table/LookupJoinMatcherTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxOTo0MzoyN1rOGRip_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMjowMTo1M1rOGRnBVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA0Njc4MQ==", "bodyText": "Should this have remainderNeeded set to true like it's done in testCreateConditionAlwaysTrue()?", "url": "https://github.com/apache/druid/pull/9831#discussion_r421046781", "createdAt": "2020-05-06T19:43:27Z", "author": {"login": "ccaominh"}, "path": "processing/src/test/java/org/apache/druid/segment/join/table/LookupJoinMatcherTest.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.join.table;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.math.expr.ExprMacroTable;\n+import org.apache.druid.query.dimension.DefaultDimensionSpec;\n+import org.apache.druid.query.dimension.DimensionSpec;\n+import org.apache.druid.query.lookup.LookupExtractor;\n+import org.apache.druid.segment.ColumnSelectorFactory;\n+import org.apache.druid.segment.DimensionSelector;\n+import org.apache.druid.segment.data.SingleIndexedInt;\n+import org.apache.druid.segment.join.JoinConditionAnalysis;\n+import org.apache.druid.segment.join.lookup.LookupJoinMatcher;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import java.util.Map;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class LookupJoinMatcherTest\n+{\n+  private final Map<String, String> lookupMap =\n+      ImmutableMap.of(\"foo\", \"bar\", \"null\", \"\", \"empty String\", \"\", \"\", \"empty_string\");\n+  private static final String PREFIX = \"j.\";\n+\n+  @Mock\n+  private LookupExtractor extractor;\n+\n+  @Mock\n+  private ColumnSelectorFactory leftSelectorFactory;\n+\n+  @Mock\n+  private DimensionSelector dimensionSelector;\n+\n+  private LookupJoinMatcher target;\n+\n+  @Before\n+  public void setUp()\n+  {\n+    Mockito.doReturn(true).when(extractor).canIterate();\n+    Mockito.doReturn(lookupMap.entrySet()).when(extractor).iterable();\n+  }\n+\n+  @Test\n+  public void testCreateConditionAlwaysFalse()\n+  {\n+    JoinConditionAnalysis condition = JoinConditionAnalysis.forExpression(\"0\", PREFIX, ExprMacroTable.nil());\n+    target = LookupJoinMatcher.create(extractor, leftSelectorFactory, condition, false);\n+    target = LookupJoinMatcher.create(extractor, leftSelectorFactory, condition, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f5110f8ccd5387c901d03a57981ba23c1fed1ab"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTExODI5Mw==", "bodyText": "Yes. Typo. Fixed", "url": "https://github.com/apache/druid/pull/9831#discussion_r421118293", "createdAt": "2020-05-06T22:01:53Z", "author": {"login": "maytasm"}, "path": "processing/src/test/java/org/apache/druid/segment/join/table/LookupJoinMatcherTest.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.join.table;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.math.expr.ExprMacroTable;\n+import org.apache.druid.query.dimension.DefaultDimensionSpec;\n+import org.apache.druid.query.dimension.DimensionSpec;\n+import org.apache.druid.query.lookup.LookupExtractor;\n+import org.apache.druid.segment.ColumnSelectorFactory;\n+import org.apache.druid.segment.DimensionSelector;\n+import org.apache.druid.segment.data.SingleIndexedInt;\n+import org.apache.druid.segment.join.JoinConditionAnalysis;\n+import org.apache.druid.segment.join.lookup.LookupJoinMatcher;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import java.util.Map;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class LookupJoinMatcherTest\n+{\n+  private final Map<String, String> lookupMap =\n+      ImmutableMap.of(\"foo\", \"bar\", \"null\", \"\", \"empty String\", \"\", \"\", \"empty_string\");\n+  private static final String PREFIX = \"j.\";\n+\n+  @Mock\n+  private LookupExtractor extractor;\n+\n+  @Mock\n+  private ColumnSelectorFactory leftSelectorFactory;\n+\n+  @Mock\n+  private DimensionSelector dimensionSelector;\n+\n+  private LookupJoinMatcher target;\n+\n+  @Before\n+  public void setUp()\n+  {\n+    Mockito.doReturn(true).when(extractor).canIterate();\n+    Mockito.doReturn(lookupMap.entrySet()).when(extractor).iterable();\n+  }\n+\n+  @Test\n+  public void testCreateConditionAlwaysFalse()\n+  {\n+    JoinConditionAnalysis condition = JoinConditionAnalysis.forExpression(\"0\", PREFIX, ExprMacroTable.nil());\n+    target = LookupJoinMatcher.create(extractor, leftSelectorFactory, condition, false);\n+    target = LookupJoinMatcher.create(extractor, leftSelectorFactory, condition, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA0Njc4MQ=="}, "originalCommit": {"oid": "9f5110f8ccd5387c901d03a57981ba23c1fed1ab"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTEyMDU0OnYy", "diffSide": "RIGHT", "path": "processing/src/test/java/org/apache/druid/segment/join/table/LookupJoinMatcherTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxOTo0NzowMFrOGRix5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMjowMjowOVrOGRnBvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA0ODgwNg==", "bodyText": "Is the idea that this should not throw an exception? If so, perhaps add that to the test name or add a comment.", "url": "https://github.com/apache/druid/pull/9831#discussion_r421048806", "createdAt": "2020-05-06T19:47:00Z", "author": {"login": "ccaominh"}, "path": "processing/src/test/java/org/apache/druid/segment/join/table/LookupJoinMatcherTest.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.join.table;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.math.expr.ExprMacroTable;\n+import org.apache.druid.query.dimension.DefaultDimensionSpec;\n+import org.apache.druid.query.dimension.DimensionSpec;\n+import org.apache.druid.query.lookup.LookupExtractor;\n+import org.apache.druid.segment.ColumnSelectorFactory;\n+import org.apache.druid.segment.DimensionSelector;\n+import org.apache.druid.segment.data.SingleIndexedInt;\n+import org.apache.druid.segment.join.JoinConditionAnalysis;\n+import org.apache.druid.segment.join.lookup.LookupJoinMatcher;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import java.util.Map;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class LookupJoinMatcherTest\n+{\n+  private final Map<String, String> lookupMap =\n+      ImmutableMap.of(\"foo\", \"bar\", \"null\", \"\", \"empty String\", \"\", \"\", \"empty_string\");\n+  private static final String PREFIX = \"j.\";\n+\n+  @Mock\n+  private LookupExtractor extractor;\n+\n+  @Mock\n+  private ColumnSelectorFactory leftSelectorFactory;\n+\n+  @Mock\n+  private DimensionSelector dimensionSelector;\n+\n+  private LookupJoinMatcher target;\n+\n+  @Before\n+  public void setUp()\n+  {\n+    Mockito.doReturn(true).when(extractor).canIterate();\n+    Mockito.doReturn(lookupMap.entrySet()).when(extractor).iterable();\n+  }\n+\n+  @Test\n+  public void testCreateConditionAlwaysFalse()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f5110f8ccd5387c901d03a57981ba23c1fed1ab"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTExODM5OQ==", "bodyText": "Done", "url": "https://github.com/apache/druid/pull/9831#discussion_r421118399", "createdAt": "2020-05-06T22:02:09Z", "author": {"login": "maytasm"}, "path": "processing/src/test/java/org/apache/druid/segment/join/table/LookupJoinMatcherTest.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.join.table;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.math.expr.ExprMacroTable;\n+import org.apache.druid.query.dimension.DefaultDimensionSpec;\n+import org.apache.druid.query.dimension.DimensionSpec;\n+import org.apache.druid.query.lookup.LookupExtractor;\n+import org.apache.druid.segment.ColumnSelectorFactory;\n+import org.apache.druid.segment.DimensionSelector;\n+import org.apache.druid.segment.data.SingleIndexedInt;\n+import org.apache.druid.segment.join.JoinConditionAnalysis;\n+import org.apache.druid.segment.join.lookup.LookupJoinMatcher;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import java.util.Map;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class LookupJoinMatcherTest\n+{\n+  private final Map<String, String> lookupMap =\n+      ImmutableMap.of(\"foo\", \"bar\", \"null\", \"\", \"empty String\", \"\", \"\", \"empty_string\");\n+  private static final String PREFIX = \"j.\";\n+\n+  @Mock\n+  private LookupExtractor extractor;\n+\n+  @Mock\n+  private ColumnSelectorFactory leftSelectorFactory;\n+\n+  @Mock\n+  private DimensionSelector dimensionSelector;\n+\n+  private LookupJoinMatcher target;\n+\n+  @Before\n+  public void setUp()\n+  {\n+    Mockito.doReturn(true).when(extractor).canIterate();\n+    Mockito.doReturn(lookupMap.entrySet()).when(extractor).iterable();\n+  }\n+\n+  @Test\n+  public void testCreateConditionAlwaysFalse()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA0ODgwNg=="}, "originalCommit": {"oid": "9f5110f8ccd5387c901d03a57981ba23c1fed1ab"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2422, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}