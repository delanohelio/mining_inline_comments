{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5OTc2OTY2", "number": 9302, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQxOToxMjo0M1rODce8CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQxOTo0NDo0OFrODcfBkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTkzNjA5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/server/router/CoordinatorRuleManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQxOToxMjo0M1rOFkjF1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQxOToxMjo0M1rOFkjF1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg2Nzk4OA==", "bodyText": "Please use Collections.emptyMap().", "url": "https://github.com/apache/druid/pull/9302#discussion_r373867988", "createdAt": "2020-02-02T19:12:43Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/server/router/CoordinatorRuleManager.java", "diffHunk": "@@ -80,7 +79,7 @@ public CoordinatorRuleManager(\n     this.druidLeaderClient = druidLeaderClient;\n \n     this.rules = new AtomicReference<>(\n-        new ConcurrentHashMap<String, List<Rule>>()\n+        new HashMap<String, List<Rule>>()", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTkzNjEyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/server/router/CoordinatorRuleManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQxOToxMjo0OFrOFkjF2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQxOToxMjo0OFrOFkjF2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg2Nzk5Mw==", "bodyText": "Please use Collections.emptyMap().", "url": "https://github.com/apache/druid/pull/9302#discussion_r373867993", "createdAt": "2020-02-02T19:12:48Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/server/router/CoordinatorRuleManager.java", "diffHunk": "@@ -120,7 +119,7 @@ public void stop()\n         return;\n       }\n \n-      rules.set(new ConcurrentHashMap<String, List<Rule>>());\n+      rules.set(new HashMap<String, List<Rule>>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTkzNjMxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/server/router/CoordinatorRuleManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQxOToxMzowM1rOFkjF7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQxOToyMTozM1rOFkjH3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg2ODAxMw==", "bodyText": "new HashMap() looks unnecessary.", "url": "https://github.com/apache/druid/pull/9302#discussion_r373868013", "createdAt": "2020-02-02T19:13:03Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/server/router/CoordinatorRuleManager.java", "diffHunk": "@@ -149,7 +148,7 @@ public void poll()\n         );\n       }\n \n-      ConcurrentHashMap<String, List<Rule>> newRules = new ConcurrentHashMap<>(\n+      Map<String, List<Rule>> newRules = new HashMap<>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg2ODUxMA==", "bodyText": "do you mean set rules directly, no need create newRules?", "url": "https://github.com/apache/druid/pull/9302#discussion_r373868510", "createdAt": "2020-02-02T19:21:33Z", "author": {"login": "zhenxiao"}, "path": "server/src/main/java/org/apache/druid/server/router/CoordinatorRuleManager.java", "diffHunk": "@@ -149,7 +148,7 @@ public void poll()\n         );\n       }\n \n-      ConcurrentHashMap<String, List<Rule>> newRules = new ConcurrentHashMap<>(\n+      Map<String, List<Rule>> newRules = new HashMap<>(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg2ODAxMw=="}, "originalCommit": null, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTk1MDI0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/server/router/CoordinatorRuleManager.java", "isResolved": false, "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQxOTo0NDo0OFrOFkjNIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNToyODoyNFrOFmPpcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg2OTg1Nw==", "bodyText": "I think this should be an AtomicReference of an ImmutableMap otherwise we can not guarantee that no one updates the map after it is set here.", "url": "https://github.com/apache/druid/pull/9302#discussion_r373869857", "createdAt": "2020-02-02T19:44:48Z", "author": {"login": "suneet-s"}, "path": "server/src/main/java/org/apache/druid/server/router/CoordinatorRuleManager.java", "diffHunk": "@@ -58,7 +57,7 @@\n   private final ObjectMapper jsonMapper;\n   private final Supplier<TieredBrokerConfig> config;\n \n-  private final AtomicReference<ConcurrentHashMap<String, List<Rule>>> rules;\n+  private final AtomicReference<Map<String, List<Rule>>> rules;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg3MjE2MA==", "bodyText": "Good point. The value type (List<Rule>) should be immutable as well. I'm ok with using UnmodifiableMap and UnmodifiableList.", "url": "https://github.com/apache/druid/pull/9302#discussion_r373872160", "createdAt": "2020-02-02T20:23:12Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/server/router/CoordinatorRuleManager.java", "diffHunk": "@@ -58,7 +57,7 @@\n   private final ObjectMapper jsonMapper;\n   private final Supplier<TieredBrokerConfig> config;\n \n-  private final AtomicReference<ConcurrentHashMap<String, List<Rule>>> rules;\n+  private final AtomicReference<Map<String, List<Rule>>> rules;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg2OTg1Nw=="}, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg3MjY1Nw==", "bodyText": "+1 - I missed that.\nPerhaps the best approach here is to keep the definition of the variable to AtomicReference<Map<String, List<Rule>>>\nAnd add 2 unit tests to ensure\n1 - we can not add to/ remove from the map\n2 - we can not mutate the rules for an entry in a map.\nThis way if someone changes this behavior in the future we can catch it easily, and changing the type of Map/ List is easy as well.", "url": "https://github.com/apache/druid/pull/9302#discussion_r373872657", "createdAt": "2020-02-02T20:30:22Z", "author": {"login": "suneet-s"}, "path": "server/src/main/java/org/apache/druid/server/router/CoordinatorRuleManager.java", "diffHunk": "@@ -58,7 +57,7 @@\n   private final ObjectMapper jsonMapper;\n   private final Supplier<TieredBrokerConfig> config;\n \n-  private final AtomicReference<ConcurrentHashMap<String, List<Rule>>> rules;\n+  private final AtomicReference<Map<String, List<Rule>>> rules;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg2OTg1Nw=="}, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg3NzM3NA==", "bodyText": "Oh yeah, I didn't mean the value type of rules should be UnmodifiableList<Rule>.\n@suneet-s do you regard your comment as a blocker for this PR? Those tests would be definitely nice to have, but since any tests haven't rewritten for this class, I'm fine with adding all necessary tests including the ones you mentioned in a follow-up PR at once. @zhenxiao you can do in this PR if you want though.", "url": "https://github.com/apache/druid/pull/9302#discussion_r373877374", "createdAt": "2020-02-02T21:39:32Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/server/router/CoordinatorRuleManager.java", "diffHunk": "@@ -58,7 +57,7 @@\n   private final ObjectMapper jsonMapper;\n   private final Supplier<TieredBrokerConfig> config;\n \n-  private final AtomicReference<ConcurrentHashMap<String, List<Rule>>> rules;\n+  private final AtomicReference<Map<String, List<Rule>>> rules;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg2OTg1Nw=="}, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg3ODYzNQ==", "bodyText": "@jihoonson I think we need some way to verify that this change works and will not break in the future.\nI understand it's not any worse than before, but I don't think we'll ever come back to add tests for this until we hit a bug - at which point it will be really hard to debug. It should be relatively quick to add those 2 tests so I think it's worth it. If there's a fast follow, that should be ok.\nI'll leave it to you for final decision on whether this should be a blocker or not (I'm not sure what the apache rules are), but I think debugging this if someone changes the code to mutate the map would be very tough - I'd strongly recommend we add tests here to prevent that pain in the future.", "url": "https://github.com/apache/druid/pull/9302#discussion_r373878635", "createdAt": "2020-02-02T21:58:24Z", "author": {"login": "suneet-s"}, "path": "server/src/main/java/org/apache/druid/server/router/CoordinatorRuleManager.java", "diffHunk": "@@ -58,7 +57,7 @@\n   private final ObjectMapper jsonMapper;\n   private final Supplier<TieredBrokerConfig> config;\n \n-  private final AtomicReference<ConcurrentHashMap<String, List<Rule>>> rules;\n+  private final AtomicReference<Map<String, List<Rule>>> rules;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg2OTg1Nw=="}, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4NzEzMA==", "bodyText": "@suneet-s on the second thought, I think you're right. I thought this PR simply changes the type of the map in the rules which is not the case. If this PR makes the map in the rules immutable, those tests should be added in this PR. Thanks for clarifying it.", "url": "https://github.com/apache/druid/pull/9302#discussion_r373887130", "createdAt": "2020-02-03T00:06:48Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/server/router/CoordinatorRuleManager.java", "diffHunk": "@@ -58,7 +57,7 @@\n   private final ObjectMapper jsonMapper;\n   private final Supplier<TieredBrokerConfig> config;\n \n-  private final AtomicReference<ConcurrentHashMap<String, List<Rule>>> rules;\n+  private final AtomicReference<Map<String, List<Rule>>> rules;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg2OTg1Nw=="}, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA5MjMwOA==", "bodyText": "@zhenxiao would you consider @suneet-s's comment above? I think it would be nice to have. If you want to add them in this PR, I think you may need to create a new class, CoordinatorRuleManagerTest, and expose the rules via a method annotated with @VisibleForTesting to verify that the map inside the AtomicRefence is immutable. Another option could be creating an issue for adding those tests and doing in a follow-up PR.\n@zhenxiao @suneet-s What do you think?", "url": "https://github.com/apache/druid/pull/9302#discussion_r375092308", "createdAt": "2020-02-05T07:21:21Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/server/router/CoordinatorRuleManager.java", "diffHunk": "@@ -58,7 +57,7 @@\n   private final ObjectMapper jsonMapper;\n   private final Supplier<TieredBrokerConfig> config;\n \n-  private final AtomicReference<ConcurrentHashMap<String, List<Rule>>> rules;\n+  private final AtomicReference<Map<String, List<Rule>>> rules;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg2OTg1Nw=="}, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQwNDQ0NA==", "bodyText": "@jihoonson I'm not so familiar with this area of the code, so I'm happy to defer to your judgement. I like the tests you've described and think it's ok if tests come as a fast follow\n@zhenxiao can you describe what manual testing you've done to verify this change? I'm sorry if this is coming across as nagging, I've just experienced a lot of pain trying to triage concurrency issues in the past.", "url": "https://github.com/apache/druid/pull/9302#discussion_r375404444", "createdAt": "2020-02-05T17:37:48Z", "author": {"login": "suneet-s"}, "path": "server/src/main/java/org/apache/druid/server/router/CoordinatorRuleManager.java", "diffHunk": "@@ -58,7 +57,7 @@\n   private final ObjectMapper jsonMapper;\n   private final Supplier<TieredBrokerConfig> config;\n \n-  private final AtomicReference<ConcurrentHashMap<String, List<Rule>>> rules;\n+  private final AtomicReference<Map<String, List<Rule>>> rules;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg2OTg1Nw=="}, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ5NjM2MQ==", "bodyText": "@suneet-s what kind of manual testings you think need to be done? The change in this PR looks pretty straightforward and I don't think this PR would lead to any sort of concurrency issues at least for now.", "url": "https://github.com/apache/druid/pull/9302#discussion_r375496361", "createdAt": "2020-02-05T20:41:47Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/server/router/CoordinatorRuleManager.java", "diffHunk": "@@ -58,7 +57,7 @@\n   private final ObjectMapper jsonMapper;\n   private final Supplier<TieredBrokerConfig> config;\n \n-  private final AtomicReference<ConcurrentHashMap<String, List<Rule>>> rules;\n+  private final AtomicReference<Map<String, List<Rule>>> rules;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg2OTg1Nw=="}, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUyNzI0Nw==", "bodyText": "thanks for your comments @suneet-s @jihoonson\nupdated to unmodifiableMap\nI will file an issue to add tests after this PR is merged", "url": "https://github.com/apache/druid/pull/9302#discussion_r375527247", "createdAt": "2020-02-05T21:48:50Z", "author": {"login": "zhenxiao"}, "path": "server/src/main/java/org/apache/druid/server/router/CoordinatorRuleManager.java", "diffHunk": "@@ -58,7 +57,7 @@\n   private final ObjectMapper jsonMapper;\n   private final Supplier<TieredBrokerConfig> config;\n \n-  private final AtomicReference<ConcurrentHashMap<String, List<Rule>>> rules;\n+  private final AtomicReference<Map<String, List<Rule>>> rules;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg2OTg1Nw=="}, "originalCommit": null, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0NjU3Ng==", "bodyText": "I raised #9318.", "url": "https://github.com/apache/druid/pull/9302#discussion_r375646576", "createdAt": "2020-02-06T05:28:24Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/server/router/CoordinatorRuleManager.java", "diffHunk": "@@ -58,7 +57,7 @@\n   private final ObjectMapper jsonMapper;\n   private final Supplier<TieredBrokerConfig> config;\n \n-  private final AtomicReference<ConcurrentHashMap<String, List<Rule>>> rules;\n+  private final AtomicReference<Map<String, List<Rule>>> rules;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg2OTg1Nw=="}, "originalCommit": null, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2725, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}