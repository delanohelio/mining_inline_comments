{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5ODU1NDI1", "number": 9893, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNTozNjoxOVrOD-EIqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1MzoxMVrOEB7sag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDA2MDU3OnYy", "diffSide": "RIGHT", "path": "docs/querying/sql.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNTozNjoxOVrOGX76UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNjoxMzowNlrOGY5WRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc1MjAxNg==", "bodyText": "Should this mention that it is like LIKE but with 100% more regex? Maybe it's obvious enough since it is in the function name. Regardless, we should add docs to math-expr.md as well?", "url": "https://github.com/apache/druid/pull/9893#discussion_r427752016", "createdAt": "2020-05-20T05:36:19Z", "author": {"login": "clintropolis"}, "path": "docs/querying/sql.md", "diffHunk": "@@ -322,17 +322,18 @@ String functions accept strings, and return a type appropriate to the function.\n |`LOWER(expr)`|Returns expr in all lowercase.|\n |`PARSE_LONG(string[, radix])`|Parses a string into a long (BIGINT) with the given radix, or 10 (decimal) if a radix is not provided.|\n |`POSITION(needle IN haystack [FROM fromIndex])`|Returns the index of needle within haystack, with indexes starting from 1. The search will begin at fromIndex, or 1 if fromIndex is not specified. If the needle is not found, returns 0.|\n-|`REGEXP_EXTRACT(expr, pattern, [index])`|Apply regular expression pattern and extract a capture group, or null if there is no match. If index is unspecified or zero, returns the substring that matched the pattern.|\n+|`REGEXP_EXTRACT(expr, pattern, [index])`|Apply regular expression `pattern` to `expr` and extract a capture group, or `NULL` if there is no match. If index is unspecified or zero, returns the substring that matched the pattern. The pattern must match starting at the beginning of `expr`, but does not need to match the entire string. Note: when `druid.generic.useDefaultValueForNull = true`, it is not possible to differentiate an empty-string match from a non-match (both will return `NULL`).|\n+|`REGEXP_LIKE(expr, pattern)`|Returns whether `expr` matches regular expression `pattern`. The pattern must match starting at the beginning of `expr`, but does not need to match the entire string. Especially useful in WHERE clauses.|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8fd11e6e39a09393c9b38717db2e5c36fae44"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc1ODU5Nw==", "bodyText": "Added both notes.", "url": "https://github.com/apache/druid/pull/9893#discussion_r428758597", "createdAt": "2020-05-21T16:13:06Z", "author": {"login": "gianm"}, "path": "docs/querying/sql.md", "diffHunk": "@@ -322,17 +322,18 @@ String functions accept strings, and return a type appropriate to the function.\n |`LOWER(expr)`|Returns expr in all lowercase.|\n |`PARSE_LONG(string[, radix])`|Parses a string into a long (BIGINT) with the given radix, or 10 (decimal) if a radix is not provided.|\n |`POSITION(needle IN haystack [FROM fromIndex])`|Returns the index of needle within haystack, with indexes starting from 1. The search will begin at fromIndex, or 1 if fromIndex is not specified. If the needle is not found, returns 0.|\n-|`REGEXP_EXTRACT(expr, pattern, [index])`|Apply regular expression pattern and extract a capture group, or null if there is no match. If index is unspecified or zero, returns the substring that matched the pattern.|\n+|`REGEXP_EXTRACT(expr, pattern, [index])`|Apply regular expression `pattern` to `expr` and extract a capture group, or `NULL` if there is no match. If index is unspecified or zero, returns the substring that matched the pattern. The pattern must match starting at the beginning of `expr`, but does not need to match the entire string. Note: when `druid.generic.useDefaultValueForNull = true`, it is not possible to differentiate an empty-string match from a non-match (both will return `NULL`).|\n+|`REGEXP_LIKE(expr, pattern)`|Returns whether `expr` matches regular expression `pattern`. The pattern must match starting at the beginning of `expr`, but does not need to match the entire string. Especially useful in WHERE clauses.|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc1MjAxNg=="}, "originalCommit": {"oid": "73d8fd11e6e39a09393c9b38717db2e5c36fae44"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDA4MDAyOnYy", "diffSide": "LEFT", "path": "sql/src/main/java/org/apache/druid/sql/calcite/expression/OperatorConversions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNTo0NzowM1rOGX8GeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNjoxMDo1MVrOGY5Rhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc1NTEyOA==", "bodyText": "hmm, I forget why I added this function, but it appears at least now that nothing is calling it.. It was added with #6974, specifically to be able to set this as non-null. I guess with this change that block will always be null, so the if can probably be removed, though I wish I could remember why I added it. However, that PR was open for over a year so .. maybe over that lifetime of fixing it up for conflicts it's purpose was lost to time...", "url": "https://github.com/apache/druid/pull/9893#discussion_r427755128", "createdAt": "2020-05-20T05:47:03Z", "author": {"login": "clintropolis"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/expression/OperatorConversions.java", "diffHunk": "@@ -291,15 +294,15 @@ public OperatorBuilder operandTypes(final SqlTypeFamily... operandTypes)\n       return this;\n     }\n \n-    public OperatorBuilder operandTypeInference(final SqlOperandTypeInference operandTypeInference)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8fd11e6e39a09393c9b38717db2e5c36fae44"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc1NzM4Mw==", "bodyText": "Ah, yeah, I removed it because it wasn't being used; I suppose we could add it back if needed in the future.", "url": "https://github.com/apache/druid/pull/9893#discussion_r428757383", "createdAt": "2020-05-21T16:10:51Z", "author": {"login": "gianm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/expression/OperatorConversions.java", "diffHunk": "@@ -291,15 +294,15 @@ public OperatorBuilder operandTypes(final SqlTypeFamily... operandTypes)\n       return this;\n     }\n \n-    public OperatorBuilder operandTypeInference(final SqlOperandTypeInference operandTypeInference)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc1NTEyOA=="}, "originalCommit": {"oid": "73d8fd11e6e39a09393c9b38717db2e5c36fae44"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDA4NzAzOnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/org/apache/druid/sql/calcite/expression/OperatorConversions.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNTo1MDo0OVrOGX8Kyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMzoxNDozMlrOGazXUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc1NjIzNA==", "bodyText": "this seems handy to have \ud83e\udd18, but (nit) could you add javadoc indicating that these are the positions of the operands that are required to be literals? bonus points if you add javadocs to other methods, but also, since nothing else has them don't feel obligated to add them even for this unless there are other changes to make", "url": "https://github.com/apache/druid/pull/9893#discussion_r427756234", "createdAt": "2020-05-20T05:50:49Z", "author": {"login": "clintropolis"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/expression/OperatorConversions.java", "diffHunk": "@@ -291,15 +294,15 @@ public OperatorBuilder operandTypes(final SqlTypeFamily... operandTypes)\n       return this;\n     }\n \n-    public OperatorBuilder operandTypeInference(final SqlOperandTypeInference operandTypeInference)\n+    public OperatorBuilder requiredOperands(final int requiredOperands)\n     {\n-      this.operandTypeInference = operandTypeInference;\n+      this.requiredOperands = requiredOperands;\n       return this;\n     }\n \n-    public OperatorBuilder requiredOperands(final int requiredOperands)\n+    public OperatorBuilder literalOperands(final int... literalOperands)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8fd11e6e39a09393c9b38717db2e5c36fae44"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc4MDQxMg==", "bodyText": "I added javadocs to all these methods.", "url": "https://github.com/apache/druid/pull/9893#discussion_r428780412", "createdAt": "2020-05-21T16:50:40Z", "author": {"login": "gianm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/expression/OperatorConversions.java", "diffHunk": "@@ -291,15 +294,15 @@ public OperatorBuilder operandTypes(final SqlTypeFamily... operandTypes)\n       return this;\n     }\n \n-    public OperatorBuilder operandTypeInference(final SqlOperandTypeInference operandTypeInference)\n+    public OperatorBuilder requiredOperands(final int requiredOperands)\n     {\n-      this.operandTypeInference = operandTypeInference;\n+      this.requiredOperands = requiredOperands;\n       return this;\n     }\n \n-    public OperatorBuilder requiredOperands(final int requiredOperands)\n+    public OperatorBuilder literalOperands(final int... literalOperands)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc1NjIzNA=="}, "originalCommit": {"oid": "73d8fd11e6e39a09393c9b38717db2e5c36fae44"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc4MjM0Mw==", "bodyText": "By the way, I also renamed returnType to returnTypeNonNull to make it clearer.", "url": "https://github.com/apache/druid/pull/9893#discussion_r428782343", "createdAt": "2020-05-21T16:54:01Z", "author": {"login": "gianm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/expression/OperatorConversions.java", "diffHunk": "@@ -291,15 +294,15 @@ public OperatorBuilder operandTypes(final SqlTypeFamily... operandTypes)\n       return this;\n     }\n \n-    public OperatorBuilder operandTypeInference(final SqlOperandTypeInference operandTypeInference)\n+    public OperatorBuilder requiredOperands(final int requiredOperands)\n     {\n-      this.operandTypeInference = operandTypeInference;\n+      this.requiredOperands = requiredOperands;\n       return this;\n     }\n \n-    public OperatorBuilder requiredOperands(final int requiredOperands)\n+    public OperatorBuilder literalOperands(final int... literalOperands)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc1NjIzNA=="}, "originalCommit": {"oid": "73d8fd11e6e39a09393c9b38717db2e5c36fae44"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc1NzcxMg==", "bodyText": "rad thanks!", "url": "https://github.com/apache/druid/pull/9893#discussion_r430757712", "createdAt": "2020-05-26T23:14:32Z", "author": {"login": "clintropolis"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/expression/OperatorConversions.java", "diffHunk": "@@ -291,15 +294,15 @@ public OperatorBuilder operandTypes(final SqlTypeFamily... operandTypes)\n       return this;\n     }\n \n-    public OperatorBuilder operandTypeInference(final SqlOperandTypeInference operandTypeInference)\n+    public OperatorBuilder requiredOperands(final int requiredOperands)\n     {\n-      this.operandTypeInference = operandTypeInference;\n+      this.requiredOperands = requiredOperands;\n       return this;\n     }\n \n-    public OperatorBuilder requiredOperands(final int requiredOperands)\n+    public OperatorBuilder literalOperands(final int... literalOperands)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc1NjIzNA=="}, "originalCommit": {"oid": "73d8fd11e6e39a09393c9b38717db2e5c36fae44"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDExMTM0OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/org/apache/druid/sql/calcite/expression/OperatorConversions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNjowMjo1MVrOGX8Zpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNjo1MzozM1rOGY6yBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc2MDAzOQ==", "bodyText": "Would it make sense for this null part of the check be consolidated with the else if (operandType.getSqlTypeName() == SqlTypeName.NULL) branch by putting the can be null check first in the if/else chain? I guess SqlUtil.isNullLiteral, is slightly more expensive of a check than just checking that the type name is null, but is also maybe more correct since casting a null is still probably null?", "url": "https://github.com/apache/druid/pull/9893#discussion_r427760039", "createdAt": "2020-05-20T06:02:51Z", "author": {"login": "clintropolis"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/expression/OperatorConversions.java", "diffHunk": "@@ -430,36 +434,64 @@ public void inferOperandTypes(\n \n   /**\n    * Operand type checker that is used in 'simple' situations: there are a particular number of operands, with\n-   * particular types, some of which may be optional or nullable.\n+   * particular types, some of which may be optional or nullable, and some of which may be required to be literals.\n    */\n   private static class DefaultOperandTypeChecker implements SqlOperandTypeChecker\n   {\n     private final List<SqlTypeFamily> operandTypes;\n     private final int requiredOperands;\n     private final IntSet nullableOperands;\n+    private final IntSet literalOperands;\n \n     DefaultOperandTypeChecker(\n         final List<SqlTypeFamily> operandTypes,\n         final int requiredOperands,\n-        final IntSet nullableOperands\n+        final IntSet nullableOperands,\n+        @Nullable final int[] literalOperands\n     )\n     {\n       Preconditions.checkArgument(requiredOperands <= operandTypes.size() && requiredOperands >= 0);\n       this.operandTypes = Preconditions.checkNotNull(operandTypes, \"operandTypes\");\n       this.requiredOperands = requiredOperands;\n       this.nullableOperands = Preconditions.checkNotNull(nullableOperands, \"nullableOperands\");\n+\n+      if (literalOperands == null) {\n+        this.literalOperands = IntSets.EMPTY_SET;\n+      } else {\n+        this.literalOperands = new IntArraySet();\n+        Arrays.stream(literalOperands).forEach(this.literalOperands::add);\n+      }\n     }\n \n     @Override\n     public boolean checkOperandTypes(SqlCallBinding callBinding, boolean throwOnFailure)\n     {\n-      if (operandTypes.size() != callBinding.getOperandCount()) {\n-        // Just like FamilyOperandTypeChecker: assume this is an inapplicable sub-rule of a composite rule; don't throw\n-        return false;\n-      }\n-\n       for (int i = 0; i < callBinding.operands().size(); i++) {\n         final SqlNode operand = callBinding.operands().get(i);\n+\n+        if (literalOperands.contains(i)) {\n+          // Verify that 'operand' is a literal.\n+          if (!SqlUtil.isLiteral(operand)) {\n+            return throwOrReturn(\n+                throwOnFailure,\n+                callBinding,\n+                cb -> cb.getValidator()\n+                        .newValidationError(\n+                            operand,\n+                            Static.RESOURCE.argumentMustBeLiteral(callBinding.getOperator().getName())\n+                        )\n+            );\n+          }\n+\n+          if (!nullableOperands.contains(i) && SqlUtil.isNullLiteral(operand, true)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8fd11e6e39a09393c9b38717db2e5c36fae44"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc4MjA4Nw==", "bodyText": "Sure, I think this makes sense. I changed it.", "url": "https://github.com/apache/druid/pull/9893#discussion_r428782087", "createdAt": "2020-05-21T16:53:33Z", "author": {"login": "gianm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/expression/OperatorConversions.java", "diffHunk": "@@ -430,36 +434,64 @@ public void inferOperandTypes(\n \n   /**\n    * Operand type checker that is used in 'simple' situations: there are a particular number of operands, with\n-   * particular types, some of which may be optional or nullable.\n+   * particular types, some of which may be optional or nullable, and some of which may be required to be literals.\n    */\n   private static class DefaultOperandTypeChecker implements SqlOperandTypeChecker\n   {\n     private final List<SqlTypeFamily> operandTypes;\n     private final int requiredOperands;\n     private final IntSet nullableOperands;\n+    private final IntSet literalOperands;\n \n     DefaultOperandTypeChecker(\n         final List<SqlTypeFamily> operandTypes,\n         final int requiredOperands,\n-        final IntSet nullableOperands\n+        final IntSet nullableOperands,\n+        @Nullable final int[] literalOperands\n     )\n     {\n       Preconditions.checkArgument(requiredOperands <= operandTypes.size() && requiredOperands >= 0);\n       this.operandTypes = Preconditions.checkNotNull(operandTypes, \"operandTypes\");\n       this.requiredOperands = requiredOperands;\n       this.nullableOperands = Preconditions.checkNotNull(nullableOperands, \"nullableOperands\");\n+\n+      if (literalOperands == null) {\n+        this.literalOperands = IntSets.EMPTY_SET;\n+      } else {\n+        this.literalOperands = new IntArraySet();\n+        Arrays.stream(literalOperands).forEach(this.literalOperands::add);\n+      }\n     }\n \n     @Override\n     public boolean checkOperandTypes(SqlCallBinding callBinding, boolean throwOnFailure)\n     {\n-      if (operandTypes.size() != callBinding.getOperandCount()) {\n-        // Just like FamilyOperandTypeChecker: assume this is an inapplicable sub-rule of a composite rule; don't throw\n-        return false;\n-      }\n-\n       for (int i = 0; i < callBinding.operands().size(); i++) {\n         final SqlNode operand = callBinding.operands().get(i);\n+\n+        if (literalOperands.contains(i)) {\n+          // Verify that 'operand' is a literal.\n+          if (!SqlUtil.isLiteral(operand)) {\n+            return throwOrReturn(\n+                throwOnFailure,\n+                callBinding,\n+                cb -> cb.getValidator()\n+                        .newValidationError(\n+                            operand,\n+                            Static.RESOURCE.argumentMustBeLiteral(callBinding.getOperator().getName())\n+                        )\n+            );\n+          }\n+\n+          if (!nullableOperands.contains(i) && SqlUtil.isNullLiteral(operand, true)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc2MDAzOQ=="}, "originalCommit": {"oid": "73d8fd11e6e39a09393c9b38717db2e5c36fae44"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDUwNTcxOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/expression/RegexpLikeExprMacro.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNzoxMjoyNFrOGY7blQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxODoyMjowNFrOGY9ycw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc5MjcyNQ==", "bodyText": "what is the 3rd argument for? I only see the first 2 being used in this expr\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (args.size() < 2 || args.size() > 3) {\n          \n          \n            \n                if (args.size() != 2) {", "url": "https://github.com/apache/druid/pull/9893#discussion_r428792725", "createdAt": "2020-05-21T17:12:24Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/expression/RegexpLikeExprMacro.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.expression;\n+\n+import org.apache.druid.common.config.NullHandling;\n+import org.apache.druid.java.util.common.IAE;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.math.expr.Expr;\n+import org.apache.druid.math.expr.ExprEval;\n+import org.apache.druid.math.expr.ExprMacroTable;\n+import org.apache.druid.math.expr.ExprType;\n+\n+import javax.annotation.Nonnull;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class RegexpLikeExprMacro implements ExprMacroTable.ExprMacro\n+{\n+  private static final String FN_NAME = \"regexp_like\";\n+\n+  @Override\n+  public String name()\n+  {\n+    return FN_NAME;\n+  }\n+\n+  @Override\n+  public Expr apply(final List<Expr> args)\n+  {\n+    if (args.size() < 2 || args.size() > 3) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "215971a097bd6f8d80dde17a178f372cc8a6863b"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgzMTM0Nw==", "bodyText": "Good catch. I'll fix it.", "url": "https://github.com/apache/druid/pull/9893#discussion_r428831347", "createdAt": "2020-05-21T18:22:04Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/expression/RegexpLikeExprMacro.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.expression;\n+\n+import org.apache.druid.common.config.NullHandling;\n+import org.apache.druid.java.util.common.IAE;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.math.expr.Expr;\n+import org.apache.druid.math.expr.ExprEval;\n+import org.apache.druid.math.expr.ExprMacroTable;\n+import org.apache.druid.math.expr.ExprType;\n+\n+import javax.annotation.Nonnull;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class RegexpLikeExprMacro implements ExprMacroTable.ExprMacro\n+{\n+  private static final String FN_NAME = \"regexp_like\";\n+\n+  @Override\n+  public String name()\n+  {\n+    return FN_NAME;\n+  }\n+\n+  @Override\n+  public Expr apply(final List<Expr> args)\n+  {\n+    if (args.size() < 2 || args.size() > 3) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc5MjcyNQ=="}, "originalCommit": {"oid": "215971a097bd6f8d80dde17a178f372cc8a6863b"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDU5ODUwOnYy", "diffSide": "RIGHT", "path": "sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNzozOTo1NFrOGY8XYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxODo1MToxMlrOGY-uRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwODAzMg==", "bodyText": "Do we have tests that check how the function performs against\n\na multi-value column\na numeric column\nmatching against null", "url": "https://github.com/apache/druid/pull/9893#discussion_r428808032", "createdAt": "2020-05-21T17:39:54Z", "author": {"login": "suneet-s"}, "path": "sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java", "diffHunk": "@@ -7300,6 +7301,74 @@ public void testRegexpExtract() throws Exception\n     );\n   }\n \n+  @Test\n+  public void testRegexpExtractFilterViaNotNullCheck() throws Exception\n+  {\n+    // Cannot vectorize due to extractionFn in dimension spec.\n+    cannotVectorize();\n+\n+    testQuery(\n+        \"SELECT COUNT(*)\\n\"\n+        + \"FROM foo\\n\"\n+        + \"WHERE REGEXP_EXTRACT(dim1, '^1') IS NOT NULL OR REGEXP_EXTRACT('Z' || dim1, '^Z2') IS NOT NULL\",\n+        ImmutableList.of(\n+            Druids.newTimeseriesQueryBuilder()\n+                  .dataSource(CalciteTests.DATASOURCE1)\n+                  .intervals(querySegmentSpec(Filtration.eternity()))\n+                  .granularity(Granularities.ALL)\n+                  .virtualColumns(\n+                      expressionVirtualColumn(\"v0\", \"regexp_extract(concat('Z',\\\"dim1\\\"),'^Z2')\", ValueType.STRING)\n+                  )\n+                  .filters(\n+                      or(\n+                          not(selector(\"dim1\", null, new RegexDimExtractionFn(\"^1\", 0, true, null))),\n+                          not(selector(\"v0\", null, null))\n+                      )\n+                  )\n+                  .aggregators(new CountAggregatorFactory(\"a0\"))\n+                  .context(TIMESERIES_CONTEXT_DEFAULT)\n+                  .build()\n+        ),\n+        ImmutableList.of(\n+            new Object[]{3L}\n+        )\n+    );\n+  }\n+\n+  @Test\n+  public void testRegexpLikeFilter() throws Exception\n+  {\n+    // Cannot vectorize due to usage of regex filter.\n+    cannotVectorize();\n+\n+    testQuery(\n+        \"SELECT COUNT(*)\\n\"\n+        + \"FROM foo\\n\"\n+        + \"WHERE REGEXP_LIKE(dim1, '^1') OR REGEXP_LIKE('Z' || dim1, '^Z2')\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "215971a097bd6f8d80dde17a178f372cc8a6863b"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwOTQ4NQ==", "bodyText": "The docs say that \"The pattern must match starting at the beginning of expr\" but it looks like the regex pattern you are passing in is asking that it start at the beginning of the string via ^ in the pattern string. Can I use a $ in my regex to ask that it matches the end of the expr?", "url": "https://github.com/apache/druid/pull/9893#discussion_r428809485", "createdAt": "2020-05-21T17:42:31Z", "author": {"login": "suneet-s"}, "path": "sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java", "diffHunk": "@@ -7300,6 +7301,74 @@ public void testRegexpExtract() throws Exception\n     );\n   }\n \n+  @Test\n+  public void testRegexpExtractFilterViaNotNullCheck() throws Exception\n+  {\n+    // Cannot vectorize due to extractionFn in dimension spec.\n+    cannotVectorize();\n+\n+    testQuery(\n+        \"SELECT COUNT(*)\\n\"\n+        + \"FROM foo\\n\"\n+        + \"WHERE REGEXP_EXTRACT(dim1, '^1') IS NOT NULL OR REGEXP_EXTRACT('Z' || dim1, '^Z2') IS NOT NULL\",\n+        ImmutableList.of(\n+            Druids.newTimeseriesQueryBuilder()\n+                  .dataSource(CalciteTests.DATASOURCE1)\n+                  .intervals(querySegmentSpec(Filtration.eternity()))\n+                  .granularity(Granularities.ALL)\n+                  .virtualColumns(\n+                      expressionVirtualColumn(\"v0\", \"regexp_extract(concat('Z',\\\"dim1\\\"),'^Z2')\", ValueType.STRING)\n+                  )\n+                  .filters(\n+                      or(\n+                          not(selector(\"dim1\", null, new RegexDimExtractionFn(\"^1\", 0, true, null))),\n+                          not(selector(\"v0\", null, null))\n+                      )\n+                  )\n+                  .aggregators(new CountAggregatorFactory(\"a0\"))\n+                  .context(TIMESERIES_CONTEXT_DEFAULT)\n+                  .build()\n+        ),\n+        ImmutableList.of(\n+            new Object[]{3L}\n+        )\n+    );\n+  }\n+\n+  @Test\n+  public void testRegexpLikeFilter() throws Exception\n+  {\n+    // Cannot vectorize due to usage of regex filter.\n+    cannotVectorize();\n+\n+    testQuery(\n+        \"SELECT COUNT(*)\\n\"\n+        + \"FROM foo\\n\"\n+        + \"WHERE REGEXP_LIKE(dim1, '^1') OR REGEXP_LIKE('Z' || dim1, '^Z2')\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwODAzMg=="}, "originalCommit": {"oid": "215971a097bd6f8d80dde17a178f372cc8a6863b"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgyNzg3Mg==", "bodyText": "a multi-value column\n\nThere aren't tests for multi-value columns for this specific expression, nor for other functions that aren't multi-value-aware. (There is a separate system that handles mapping over non-multi-value-aware functions.) I could see having a systematic way to test for this (a query generator, maybe) but I don't think adding one just for this function would make sense.\n\na numeric column\n\nThere aren't tests for a numeric column. It should be a validation error but we don't currently have very comprehensive tests for the validator. I could add one in an ad-hoc way right now, and that would make sense. But I was actually hoping to add more systematic tests in a future patch, so could do it then too.\n\nmatching against null\n\nI added a test for matching against null to ExpressionsTest.\n\nThe docs say that \"The pattern must match starting at the beginning of expr\" but it looks like the regex pattern you are passing in is asking that it start at the beginning of the string via ^ in the pattern string. Can I use a $ in my regex to ask that it matches the end of the expr?\n\nWow! After looking into your comment, I realized that I totally screwed up the docs here. I actually have a test in this patch for what happens when you skip the ^, and it does match substrings that are in the middle of the string, and the test expects that to happen, all in contradiction of what the docs say. I'll fix the docs. Thanks for calling this to my attention.\nAnd yes, you can use $ to ask that it match the end. There are tests for this too.", "url": "https://github.com/apache/druid/pull/9893#discussion_r428827872", "createdAt": "2020-05-21T18:15:48Z", "author": {"login": "gianm"}, "path": "sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java", "diffHunk": "@@ -7300,6 +7301,74 @@ public void testRegexpExtract() throws Exception\n     );\n   }\n \n+  @Test\n+  public void testRegexpExtractFilterViaNotNullCheck() throws Exception\n+  {\n+    // Cannot vectorize due to extractionFn in dimension spec.\n+    cannotVectorize();\n+\n+    testQuery(\n+        \"SELECT COUNT(*)\\n\"\n+        + \"FROM foo\\n\"\n+        + \"WHERE REGEXP_EXTRACT(dim1, '^1') IS NOT NULL OR REGEXP_EXTRACT('Z' || dim1, '^Z2') IS NOT NULL\",\n+        ImmutableList.of(\n+            Druids.newTimeseriesQueryBuilder()\n+                  .dataSource(CalciteTests.DATASOURCE1)\n+                  .intervals(querySegmentSpec(Filtration.eternity()))\n+                  .granularity(Granularities.ALL)\n+                  .virtualColumns(\n+                      expressionVirtualColumn(\"v0\", \"regexp_extract(concat('Z',\\\"dim1\\\"),'^Z2')\", ValueType.STRING)\n+                  )\n+                  .filters(\n+                      or(\n+                          not(selector(\"dim1\", null, new RegexDimExtractionFn(\"^1\", 0, true, null))),\n+                          not(selector(\"v0\", null, null))\n+                      )\n+                  )\n+                  .aggregators(new CountAggregatorFactory(\"a0\"))\n+                  .context(TIMESERIES_CONTEXT_DEFAULT)\n+                  .build()\n+        ),\n+        ImmutableList.of(\n+            new Object[]{3L}\n+        )\n+    );\n+  }\n+\n+  @Test\n+  public void testRegexpLikeFilter() throws Exception\n+  {\n+    // Cannot vectorize due to usage of regex filter.\n+    cannotVectorize();\n+\n+    testQuery(\n+        \"SELECT COUNT(*)\\n\"\n+        + \"FROM foo\\n\"\n+        + \"WHERE REGEXP_LIKE(dim1, '^1') OR REGEXP_LIKE('Z' || dim1, '^Z2')\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwODAzMg=="}, "originalCommit": {"oid": "215971a097bd6f8d80dde17a178f372cc8a6863b"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg0NjY2MA==", "bodyText": "Sounds good to me!\n\nI could see having a systematic way to test for this (a query generator, maybe) but I don't think adding one just for this function would make sense.\n\nI've been working on the beginnings of a query generator to match all the different rows in druid.foo table - I was kinda sneakily hoping there was already a systematic way we add tests for all these different conditions and I just hadn't seen it yet :)", "url": "https://github.com/apache/druid/pull/9893#discussion_r428846660", "createdAt": "2020-05-21T18:51:12Z", "author": {"login": "suneet-s"}, "path": "sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java", "diffHunk": "@@ -7300,6 +7301,74 @@ public void testRegexpExtract() throws Exception\n     );\n   }\n \n+  @Test\n+  public void testRegexpExtractFilterViaNotNullCheck() throws Exception\n+  {\n+    // Cannot vectorize due to extractionFn in dimension spec.\n+    cannotVectorize();\n+\n+    testQuery(\n+        \"SELECT COUNT(*)\\n\"\n+        + \"FROM foo\\n\"\n+        + \"WHERE REGEXP_EXTRACT(dim1, '^1') IS NOT NULL OR REGEXP_EXTRACT('Z' || dim1, '^Z2') IS NOT NULL\",\n+        ImmutableList.of(\n+            Druids.newTimeseriesQueryBuilder()\n+                  .dataSource(CalciteTests.DATASOURCE1)\n+                  .intervals(querySegmentSpec(Filtration.eternity()))\n+                  .granularity(Granularities.ALL)\n+                  .virtualColumns(\n+                      expressionVirtualColumn(\"v0\", \"regexp_extract(concat('Z',\\\"dim1\\\"),'^Z2')\", ValueType.STRING)\n+                  )\n+                  .filters(\n+                      or(\n+                          not(selector(\"dim1\", null, new RegexDimExtractionFn(\"^1\", 0, true, null))),\n+                          not(selector(\"v0\", null, null))\n+                      )\n+                  )\n+                  .aggregators(new CountAggregatorFactory(\"a0\"))\n+                  .context(TIMESERIES_CONTEXT_DEFAULT)\n+                  .build()\n+        ),\n+        ImmutableList.of(\n+            new Object[]{3L}\n+        )\n+    );\n+  }\n+\n+  @Test\n+  public void testRegexpLikeFilter() throws Exception\n+  {\n+    // Cannot vectorize due to usage of regex filter.\n+    cannotVectorize();\n+\n+    testQuery(\n+        \"SELECT COUNT(*)\\n\"\n+        + \"FROM foo\\n\"\n+        + \"WHERE REGEXP_LIKE(dim1, '^1') OR REGEXP_LIKE('Z' || dim1, '^Z2')\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwODAzMg=="}, "originalCommit": {"oid": "215971a097bd6f8d80dde17a178f372cc8a6863b"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYyMDU4OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/expression/RegexpLikeExprMacro.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1MzoxMlrOGeFQJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNzo0NDo1NlrOGemvbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NjUxOA==", "bodyText": "nit: Is this nullToEmptyIfNeeded still needed because of the if block on line 77 - same comment for RegexpExtractMacro\nUnclear to me if there's a performance loss from the extra function call (I'd think it's probably not measurable)", "url": "https://github.com/apache/druid/pull/9893#discussion_r434196518", "createdAt": "2020-06-02T21:53:12Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/expression/RegexpLikeExprMacro.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.expression;\n+\n+import org.apache.druid.common.config.NullHandling;\n+import org.apache.druid.java.util.common.IAE;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.math.expr.Expr;\n+import org.apache.druid.math.expr.ExprEval;\n+import org.apache.druid.math.expr.ExprMacroTable;\n+import org.apache.druid.math.expr.ExprType;\n+\n+import javax.annotation.Nonnull;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class RegexpLikeExprMacro implements ExprMacroTable.ExprMacro\n+{\n+  private static final String FN_NAME = \"regexp_like\";\n+\n+  @Override\n+  public String name()\n+  {\n+    return FN_NAME;\n+  }\n+\n+  @Override\n+  public Expr apply(final List<Expr> args)\n+  {\n+    if (args.size() != 2) {\n+      throw new IAE(\"Function[%s] must have 2 arguments\", name());\n+    }\n+\n+    final Expr arg = args.get(0);\n+    final Expr patternExpr = args.get(1);\n+\n+    if (!ExprUtils.isStringLiteral(patternExpr)) {\n+      throw new IAE(\"Function[%s] pattern must be a string literal\", name());\n+    }\n+\n+    // Precompile the pattern.\n+    final Pattern pattern = Pattern.compile(\n+        StringUtils.nullToEmptyNonDruidDataString((String) patternExpr.getLiteralValue())\n+    );\n+\n+    class RegexpLikeExpr extends ExprMacroTable.BaseScalarUnivariateMacroFunctionExpr\n+    {\n+      private RegexpLikeExpr(Expr arg)\n+      {\n+        super(FN_NAME, arg);\n+      }\n+\n+      @Nonnull\n+      @Override\n+      public ExprEval eval(final ObjectBinding bindings)\n+      {\n+        final String s = NullHandling.nullToEmptyIfNeeded(arg.eval(bindings).asString());\n+\n+        if (s == null) {\n+          // True nulls do not match anything. Note: this branch only executes in SQL-compatible null handling mode.\n+          return ExprEval.of(false, ExprType.LONG);\n+        } else {\n+          final Matcher matcher = pattern.matcher(NullHandling.nullToEmptyIfNeeded(s));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6641cab46b570ac537822e67371d9ce41f41b11d"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc0NTE5OQ==", "bodyText": "Good catch, I removed it.", "url": "https://github.com/apache/druid/pull/9893#discussion_r434745199", "createdAt": "2020-06-03T17:44:56Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/expression/RegexpLikeExprMacro.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.expression;\n+\n+import org.apache.druid.common.config.NullHandling;\n+import org.apache.druid.java.util.common.IAE;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.math.expr.Expr;\n+import org.apache.druid.math.expr.ExprEval;\n+import org.apache.druid.math.expr.ExprMacroTable;\n+import org.apache.druid.math.expr.ExprType;\n+\n+import javax.annotation.Nonnull;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class RegexpLikeExprMacro implements ExprMacroTable.ExprMacro\n+{\n+  private static final String FN_NAME = \"regexp_like\";\n+\n+  @Override\n+  public String name()\n+  {\n+    return FN_NAME;\n+  }\n+\n+  @Override\n+  public Expr apply(final List<Expr> args)\n+  {\n+    if (args.size() != 2) {\n+      throw new IAE(\"Function[%s] must have 2 arguments\", name());\n+    }\n+\n+    final Expr arg = args.get(0);\n+    final Expr patternExpr = args.get(1);\n+\n+    if (!ExprUtils.isStringLiteral(patternExpr)) {\n+      throw new IAE(\"Function[%s] pattern must be a string literal\", name());\n+    }\n+\n+    // Precompile the pattern.\n+    final Pattern pattern = Pattern.compile(\n+        StringUtils.nullToEmptyNonDruidDataString((String) patternExpr.getLiteralValue())\n+    );\n+\n+    class RegexpLikeExpr extends ExprMacroTable.BaseScalarUnivariateMacroFunctionExpr\n+    {\n+      private RegexpLikeExpr(Expr arg)\n+      {\n+        super(FN_NAME, arg);\n+      }\n+\n+      @Nonnull\n+      @Override\n+      public ExprEval eval(final ObjectBinding bindings)\n+      {\n+        final String s = NullHandling.nullToEmptyIfNeeded(arg.eval(bindings).asString());\n+\n+        if (s == null) {\n+          // True nulls do not match anything. Note: this branch only executes in SQL-compatible null handling mode.\n+          return ExprEval.of(false, ExprType.LONG);\n+        } else {\n+          final Matcher matcher = pattern.matcher(NullHandling.nullToEmptyIfNeeded(s));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NjUxOA=="}, "originalCommit": {"oid": "6641cab46b570ac537822e67371d9ce41f41b11d"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2454, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}