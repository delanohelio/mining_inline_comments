{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3Njc4ODk1", "number": 10278, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMzowMzoyMlrOEYUZRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMzoyMzozOVrOEZQUhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTM1NDMwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/client/indexing/HttpIndexingServiceClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMzowMzoyMlrOHAl8Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMTo0NjowNVrOHBEKTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM4MzcwMg==", "bodyText": "Do we pull the ID from the taskQuery anywhere except here? If not, maybe we could just pass in the ID here without adding an ID field to the task query.", "url": "https://github.com/apache/druid/pull/10278#discussion_r470383702", "createdAt": "2020-08-14T03:03:22Z", "author": {"login": "jon-wei"}, "path": "server/src/main/java/org/apache/druid/client/indexing/HttpIndexingServiceClient.java", "diffHunk": "@@ -67,7 +67,8 @@ public HttpIndexingServiceClient(\n   @Override\n   public void killUnusedSegments(String dataSource, Interval interval)\n   {\n-    runTask(new ClientKillUnusedSegmentsTaskQuery(dataSource, interval));\n+    final ClientTaskQuery taskQuery = new ClientKillUnusedSegmentsTaskQuery(null, dataSource, interval);\n+    runTask(taskQuery.getId(), taskQuery);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ba91c3dac5521606ae282f7e678c0f61739eade"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg3ODc5OA==", "bodyText": "ClientTaskQuery is used by the coordinator when it issues kill tasks or compaction tasks. The coordinator cannot use Task directly because of a dependency issue, and so ClientTaskQuery is supposed to be equivalent to Task. The id of taskQuery should be same with the id of task for that reason after it is deserialized in the overlord. I think we still need an ID field for ClientTaskQuery.\nHowever, I like the idea of passing in the ID. When the coordinator issues a task, we can generate an ID distinguishable from those issued by users. After this PR, the ID of compaction and kill tasks will be prefixed by coordinator-issued if they are submitted by coordinator. api-issued prefix will be used when a kill task is issued by calling DataSourcesResource.killUnusedSegmentsInInterval().", "url": "https://github.com/apache/druid/pull/10278#discussion_r470878798", "createdAt": "2020-08-14T21:46:05Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/client/indexing/HttpIndexingServiceClient.java", "diffHunk": "@@ -67,7 +67,8 @@ public HttpIndexingServiceClient(\n   @Override\n   public void killUnusedSegments(String dataSource, Interval interval)\n   {\n-    runTask(new ClientKillUnusedSegmentsTaskQuery(dataSource, interval));\n+    final ClientTaskQuery taskQuery = new ClientKillUnusedSegmentsTaskQuery(null, dataSource, interval);\n+    runTask(taskQuery.getId(), taskQuery);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM4MzcwMg=="}, "originalCommit": {"oid": "3ba91c3dac5521606ae282f7e678c0f61739eade"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTM1NTMxOnYy", "diffSide": "LEFT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMzowNDowNFrOHAl87g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMTo1MDoxN1rOHBEO-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM4Mzg1NA==", "bodyText": "What's the reasoning for removing the more complex logging here? Is it concern from the segment set being too large?", "url": "https://github.com/apache/druid/pull/10278#discussion_r470383854", "createdAt": "2020-08-14T03:04:04Z", "author": {"login": "jon-wei"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTask.java", "diffHunk": "@@ -788,18 +785,7 @@ private static void publishSegments(TaskToolbox toolbox, Map<String, PushedSegme\n     if (published) {\n       LOG.info(\"Published [%d] segments\", newSegments.size());\n     } else {\n-      LOG.info(\"Transaction failure while publishing segments, checking if someone else beat us to it.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ba91c3dac5521606ae282f7e678c0f61739eade"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg3OTk5NQ==", "bodyText": "Oh, I think the logging here was wrong. In parallel indexing, unlike in streaming ingestion, there is no concept of replicas which could publish the same set of segments. So, if it failed to publish segments, the task should just fail without checking if those segments were already published by another task since it cannot happen.\n\n\"Our segments really do exist, awaiting handoff.\"\n\nThis log is also misleading since batch tasks never waits for segment handoff.", "url": "https://github.com/apache/druid/pull/10278#discussion_r470879995", "createdAt": "2020-08-14T21:50:17Z", "author": {"login": "jihoonson"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/common/task/batch/parallel/ParallelIndexSupervisorTask.java", "diffHunk": "@@ -788,18 +785,7 @@ private static void publishSegments(TaskToolbox toolbox, Map<String, PushedSegme\n     if (published) {\n       LOG.info(\"Published [%d] segments\", newSegments.size());\n     } else {\n-      LOG.info(\"Transaction failure while publishing segments, checking if someone else beat us to it.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM4Mzg1NA=="}, "originalCommit": {"oid": "3ba91c3dac5521606ae282f7e678c0f61739eade"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzU5MDI2OnYy", "diffSide": "LEFT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/common/task/AbstractTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxNjoyNzoyMlrOHBMQBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMTo0Njo1N1rOHCAcvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAxMTMzMg==", "bodyText": "nit: ID_JOINER field can be removed from the class.", "url": "https://github.com/apache/druid/pull/10278#discussion_r471011332", "createdAt": "2020-08-15T16:27:22Z", "author": {"login": "abhishekagarwal87"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/common/task/AbstractTask.java", "diffHunk": "@@ -175,23 +162,6 @@ public String toString()\n            '}';\n   }\n \n-  /**\n-   * Start helper methods\n-   *\n-   * @param objects objects to join\n-   *\n-   * @return string of joined objects\n-   */\n-  static String joinId(List<Object> objects)\n-  {\n-    return ID_JOINER.join(objects);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ba91c3dac5521606ae282f7e678c0f61739eade"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg2NjU1Nw==", "bodyText": "Thanks, removed.", "url": "https://github.com/apache/druid/pull/10278#discussion_r471866557", "createdAt": "2020-08-18T01:46:57Z", "author": {"login": "jihoonson"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/common/task/AbstractTask.java", "diffHunk": "@@ -175,23 +162,6 @@ public String toString()\n            '}';\n   }\n \n-  /**\n-   * Start helper methods\n-   *\n-   * @param objects objects to join\n-   *\n-   * @return string of joined objects\n-   */\n-  static String joinId(List<Object> objects)\n-  {\n-    return ID_JOINER.join(objects);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAxMTMzMg=="}, "originalCommit": {"oid": "3ba91c3dac5521606ae282f7e678c0f61739eade"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzYyMzM0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/client/indexing/IndexingServiceClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxNzoxMjoyMlrOHBMfzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMTo0NzowMFrOHCAcxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAxNTM3Mw==", "bodyText": "naive question: can the IndexingServiceClient used outside druid code? If not, a default method may not be required. If yes, passing null instead of an empty string will be closer to past behavior.", "url": "https://github.com/apache/druid/pull/10278#discussion_r471015373", "createdAt": "2020-08-15T17:12:22Z", "author": {"login": "abhishekagarwal87"}, "path": "server/src/main/java/org/apache/druid/client/indexing/IndexingServiceClient.java", "diffHunk": "@@ -31,11 +31,27 @@\n \n public interface IndexingServiceClient\n {\n-  void killUnusedSegments(String dataSource, Interval interval);\n+  default void killUnusedSegments(String dataSource, Interval interval)\n+  {\n+    killUnusedSegments(\"\", dataSource, interval);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b18934638d32d3b61d52e87b51021e5a08e73061"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg2NjU2NQ==", "bodyText": "Oh yeah, we don't need those new default methods here. I'm not sure why I added them \ud83d\ude05. IndexingServiceClient is not a public API. We don't support backward compatibility for those APIs.", "url": "https://github.com/apache/druid/pull/10278#discussion_r471866565", "createdAt": "2020-08-18T01:47:00Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/client/indexing/IndexingServiceClient.java", "diffHunk": "@@ -31,11 +31,27 @@\n \n public interface IndexingServiceClient\n {\n-  void killUnusedSegments(String dataSource, Interval interval);\n+  default void killUnusedSegments(String dataSource, Interval interval)\n+  {\n+    killUnusedSegments(\"\", dataSource, interval);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAxNTM3Mw=="}, "originalCommit": {"oid": "b18934638d32d3b61d52e87b51021e5a08e73061"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTE3MjUzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/client/indexing/ClientCompactionTaskQuery.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMzoyMzozOVrOHB-Dvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMTo0NzowM1rOHCAczw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgyNzM5MQ==", "bodyText": "For backwards compatibility, would it be better to allow a null id as before?", "url": "https://github.com/apache/druid/pull/10278#discussion_r471827391", "createdAt": "2020-08-17T23:23:39Z", "author": {"login": "jon-wei"}, "path": "server/src/main/java/org/apache/druid/client/indexing/ClientCompactionTaskQuery.java", "diffHunk": "@@ -43,14 +42,14 @@\n \n   @JsonCreator\n   public ClientCompactionTaskQuery(\n-      @JsonProperty(\"id\") @Nullable String id,\n+      @JsonProperty(\"id\") String id,\n       @JsonProperty(\"dataSource\") String dataSource,\n       @JsonProperty(\"ioConfig\") ClientCompactionIOConfig ioConfig,\n       @JsonProperty(\"tuningConfig\") ClientCompactionTaskQueryTuningConfig tuningConfig,\n       @JsonProperty(\"context\") Map<String, Object> context\n   )\n   {\n-    this.id = id == null ? IdUtils.newTaskId(TYPE, dataSource, null) : id;\n+    this.id = Preconditions.checkNotNull(id, \"id\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "839bb47235684564225fdb80576b98dae3bb2f5d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg2NjU3NQ==", "bodyText": "Seems like you were seeing changes between commits. The id field was newly added in this PR. Before this PR, id was initialized when ClientCompactionTaskQuery is converted into CompactionTask. Since the id field in ClientCompactionTaskQuery was never accessed on the coordinator side, I think there should be no backward-compatibility issue.", "url": "https://github.com/apache/druid/pull/10278#discussion_r471866575", "createdAt": "2020-08-18T01:47:03Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/client/indexing/ClientCompactionTaskQuery.java", "diffHunk": "@@ -43,14 +42,14 @@\n \n   @JsonCreator\n   public ClientCompactionTaskQuery(\n-      @JsonProperty(\"id\") @Nullable String id,\n+      @JsonProperty(\"id\") String id,\n       @JsonProperty(\"dataSource\") String dataSource,\n       @JsonProperty(\"ioConfig\") ClientCompactionIOConfig ioConfig,\n       @JsonProperty(\"tuningConfig\") ClientCompactionTaskQueryTuningConfig tuningConfig,\n       @JsonProperty(\"context\") Map<String, Object> context\n   )\n   {\n-    this.id = id == null ? IdUtils.newTaskId(TYPE, dataSource, null) : id;\n+    this.id = Preconditions.checkNotNull(id, \"id\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgyNzM5MQ=="}, "originalCommit": {"oid": "839bb47235684564225fdb80576b98dae3bb2f5d"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2277, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}