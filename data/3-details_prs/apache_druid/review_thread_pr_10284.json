{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MTAwNjg2", "number": 10284, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODoxODo1OFrOEz6Qmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwMTozNToxMlrOFHZecQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODY3MzU1OnYy", "diffSide": "RIGHT", "path": "docs/configuration/index.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODoxODo1OFrOHrbIfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOToxNjozMFrOHrczqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI5NTM1Nw==", "bodyText": "Could you please add the default value for this property into the Default column?", "url": "https://github.com/apache/druid/pull/10284#discussion_r515295357", "createdAt": "2020-10-30T18:18:58Z", "author": {"login": "a2l007"}, "path": "docs/configuration/index.md", "diffHunk": "@@ -764,6 +765,7 @@ Issuing a GET request at the same URL will return the spec that is currently in\n |`mergeBytesLimit`|The maximum total uncompressed size in bytes of segments to merge.|524288000L|\n |`mergeSegmentsLimit`|The maximum number of segments that can be in a single [append task](../ingestion/tasks.md).|100|\n |`maxSegmentsToMove`|The maximum number of segments that can be moved at any given time.|5|\n+|`percentOfSegmentsToConsiderPerMove`|The percentage of the total number of segments in the cluster that are considered every time a segment needs to be selected for a move. Druid orders servers by available capacity ascending (the least available capacity first) and then iterates over the servers. For each server, Druid iterates over the segments on the server, considering them for moving. The default config of 100% means that every segment on every server is a candidate to be moved. This should make sense for most small to medium-sized clusters. However, an admin may find it preferable to drop this value lower if they don't think that it is worthwhile to consider every single segment in the cluster each time it is looking for a segment to move.|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85660be45588b0ac53dc3534faa2fc1937188ed6"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMyMjc5Mg==", "bodyText": "Also it would be helpful to provide some sort of recommended percentage value that operators with large clusters can use as a starting point for this property. We could either add it here or in the Basic Cluster Tuning doc.", "url": "https://github.com/apache/druid/pull/10284#discussion_r515322792", "createdAt": "2020-10-30T19:16:30Z", "author": {"login": "a2l007"}, "path": "docs/configuration/index.md", "diffHunk": "@@ -764,6 +765,7 @@ Issuing a GET request at the same URL will return the spec that is currently in\n |`mergeBytesLimit`|The maximum total uncompressed size in bytes of segments to merge.|524288000L|\n |`mergeSegmentsLimit`|The maximum number of segments that can be in a single [append task](../ingestion/tasks.md).|100|\n |`maxSegmentsToMove`|The maximum number of segments that can be moved at any given time.|5|\n+|`percentOfSegmentsToConsiderPerMove`|The percentage of the total number of segments in the cluster that are considered every time a segment needs to be selected for a move. Druid orders servers by available capacity ascending (the least available capacity first) and then iterates over the servers. For each server, Druid iterates over the segments on the server, considering them for moving. The default config of 100% means that every segment on every server is a candidate to be moved. This should make sense for most small to medium-sized clusters. However, an admin may find it preferable to drop this value lower if they don't think that it is worthwhile to consider every single segment in the cluster each time it is looking for a segment to move.|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI5NTM1Nw=="}, "originalCommit": {"oid": "85660be45588b0ac53dc3534faa2fc1937188ed6"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODcwMTQ5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/server/coordinator/ReservoirSegmentSampler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODoyNzo0M1rOHrbZtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODoyNzo0M1rOHrbZtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI5OTc2Nw==", "bodyText": "Thanks for the doc \ud83d\udc4d", "url": "https://github.com/apache/druid/pull/10284#discussion_r515299767", "createdAt": "2020-10-30T18:27:43Z", "author": {"login": "a2l007"}, "path": "server/src/main/java/org/apache/druid/server/coordinator/ReservoirSegmentSampler.java", "diffHunk": "@@ -28,15 +29,50 @@\n final class ReservoirSegmentSampler\n {\n \n+  private static final EmittingLogger log = new EmittingLogger(ReservoirSegmentSampler.class);\n+\n+  /**\n+   * Iterates over segments that live on the candidate servers passed in {@link ServerHolder} and (possibly) picks a\n+   * segment to return to caller in a {@link BalancerSegmentHolder} object.\n+   *\n+   * @param serverHolders List of {@link ServerHolder} objects containing segments who are candidates to be chosen.\n+   * @param broadcastDatasources Set of DataSource names that identify broadcast datasources. We don't want to consider\n+   *                             segments from these datasources.\n+   * @param percentOfSegmentsToConsider The % of total cluster segments to consider before short-circuiting and\n+   *                                   returning immediately.\n+   * @return\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85660be45588b0ac53dc3534faa2fc1937188ed6"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzAxMzQzOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/server/coordinator/CoordinatorDynamicConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwMTozMToyOVrOII3ooQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwNDowMTo1N1rOII4m_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE3MTA0MQ==", "bodyText": "Since this is a json configured property, I think we should throw an exception here so the user knows they've done something incorrect.\nEDIT: Something like\nPreconditions.checkArgument(percentOfSegmentsToConsiderPerMove > 0 && percentOfSegmentsToConsiderPerMove <= 100, \"percentOfSegmentsToConsiderPerMove should be between 0 and 100!\");", "url": "https://github.com/apache/druid/pull/10284#discussion_r546171041", "createdAt": "2020-12-19T01:31:29Z", "author": {"login": "suneet-s"}, "path": "server/src/main/java/org/apache/druid/server/coordinator/CoordinatorDynamicConfig.java", "diffHunk": "@@ -123,6 +125,12 @@ public CoordinatorDynamicConfig(\n     this.mergeBytesLimit = mergeBytesLimit;\n     this.mergeSegmentsLimit = mergeSegmentsLimit;\n     this.maxSegmentsToMove = maxSegmentsToMove;\n+    // This helps with ease of migration to the new config, but could confuse users. Docs explicitly state this value must be > 0\n+    if (percentOfSegmentsToConsiderPerMove <= 0 || percentOfSegmentsToConsiderPerMove > 100) {\n+      this.percentOfSegmentsToConsiderPerMove = 100;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9197bb0b1738be30f79016dab9837002a8056152"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE4NzAwNQ==", "bodyText": "I agree, it's confusing to mask an error like I was. fixed", "url": "https://github.com/apache/druid/pull/10284#discussion_r546187005", "createdAt": "2020-12-19T04:01:57Z", "author": {"login": "capistrant"}, "path": "server/src/main/java/org/apache/druid/server/coordinator/CoordinatorDynamicConfig.java", "diffHunk": "@@ -123,6 +125,12 @@ public CoordinatorDynamicConfig(\n     this.mergeBytesLimit = mergeBytesLimit;\n     this.mergeSegmentsLimit = mergeSegmentsLimit;\n     this.maxSegmentsToMove = maxSegmentsToMove;\n+    // This helps with ease of migration to the new config, but could confuse users. Docs explicitly state this value must be > 0\n+    if (percentOfSegmentsToConsiderPerMove <= 0 || percentOfSegmentsToConsiderPerMove > 100) {\n+      this.percentOfSegmentsToConsiderPerMove = 100;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE3MTA0MQ=="}, "originalCommit": {"oid": "9197bb0b1738be30f79016dab9837002a8056152"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzAxNDQ5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/server/coordinator/CoordinatorDynamicConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwMTozMjozMlrOII3pLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwNDowMjozMVrOII4nPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE3MTE4Mw==", "bodyText": "Should this be a double since we're dealing with percentages? I think it would make it less likely for someone in the future to make some math mistake by accidentally dividing by an integer.", "url": "https://github.com/apache/druid/pull/10284#discussion_r546171183", "createdAt": "2020-12-19T01:32:32Z", "author": {"login": "suneet-s"}, "path": "server/src/main/java/org/apache/druid/server/coordinator/CoordinatorDynamicConfig.java", "diffHunk": "@@ -95,6 +96,7 @@ public CoordinatorDynamicConfig(\n       @JsonProperty(\"mergeBytesLimit\") long mergeBytesLimit,\n       @JsonProperty(\"mergeSegmentsLimit\") int mergeSegmentsLimit,\n       @JsonProperty(\"maxSegmentsToMove\") int maxSegmentsToMove,\n+      @JsonProperty(\"percentOfSegmentsToConsiderPerMove\") int percentOfSegmentsToConsiderPerMove,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9197bb0b1738be30f79016dab9837002a8056152"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE4NzA2OQ==", "bodyText": "ya, this is a good point. using double up front makes things a lot more straightforward", "url": "https://github.com/apache/druid/pull/10284#discussion_r546187069", "createdAt": "2020-12-19T04:02:31Z", "author": {"login": "capistrant"}, "path": "server/src/main/java/org/apache/druid/server/coordinator/CoordinatorDynamicConfig.java", "diffHunk": "@@ -95,6 +96,7 @@ public CoordinatorDynamicConfig(\n       @JsonProperty(\"mergeBytesLimit\") long mergeBytesLimit,\n       @JsonProperty(\"mergeSegmentsLimit\") int mergeSegmentsLimit,\n       @JsonProperty(\"maxSegmentsToMove\") int maxSegmentsToMove,\n+      @JsonProperty(\"percentOfSegmentsToConsiderPerMove\") int percentOfSegmentsToConsiderPerMove,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE3MTE4Mw=="}, "originalCommit": {"oid": "9197bb0b1738be30f79016dab9837002a8056152"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzAxNjE4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/server/coordinator/CoordinatorDynamicConfig.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwMTozNDowN1rOII3qDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNjozODo0NlrOIJej9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE3MTQwNQ==", "bodyText": "Should this have a PreCondition check that it falls between 0 - 100 ?", "url": "https://github.com/apache/druid/pull/10284#discussion_r546171405", "createdAt": "2020-12-19T01:34:07Z", "author": {"login": "suneet-s"}, "path": "server/src/main/java/org/apache/druid/server/coordinator/CoordinatorDynamicConfig.java", "diffHunk": "@@ -463,6 +485,7 @@ public Builder(\n       this.mergeBytesLimit = mergeBytesLimit;\n       this.mergeSegmentsLimit = mergeSegmentsLimit;\n       this.maxSegmentsToMove = maxSegmentsToMove;\n+      this.percentOfSegmentsToConsiderPerMove = percentOfSegmentsToConsiderPerMove;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9197bb0b1738be30f79016dab9837002a8056152"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgwNTYxOQ==", "bodyText": "hmm, Since this is a Builder class that builds a CoordinatorDynamicConfig object, I think this precondition is covered by the actual constructor for the CoordinatorDynamicConfig class. IMO, having another precondition here is redundant", "url": "https://github.com/apache/druid/pull/10284#discussion_r546805619", "createdAt": "2020-12-21T16:33:04Z", "author": {"login": "capistrant"}, "path": "server/src/main/java/org/apache/druid/server/coordinator/CoordinatorDynamicConfig.java", "diffHunk": "@@ -463,6 +485,7 @@ public Builder(\n       this.mergeBytesLimit = mergeBytesLimit;\n       this.mergeSegmentsLimit = mergeSegmentsLimit;\n       this.maxSegmentsToMove = maxSegmentsToMove;\n+      this.percentOfSegmentsToConsiderPerMove = percentOfSegmentsToConsiderPerMove;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE3MTQwNQ=="}, "originalCommit": {"oid": "9197bb0b1738be30f79016dab9837002a8056152"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgwODgyMg==", "bodyText": "makes sense to me", "url": "https://github.com/apache/druid/pull/10284#discussion_r546808822", "createdAt": "2020-12-21T16:38:46Z", "author": {"login": "suneet-s"}, "path": "server/src/main/java/org/apache/druid/server/coordinator/CoordinatorDynamicConfig.java", "diffHunk": "@@ -463,6 +485,7 @@ public Builder(\n       this.mergeBytesLimit = mergeBytesLimit;\n       this.mergeSegmentsLimit = mergeSegmentsLimit;\n       this.maxSegmentsToMove = maxSegmentsToMove;\n+      this.percentOfSegmentsToConsiderPerMove = percentOfSegmentsToConsiderPerMove;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE3MTQwNQ=="}, "originalCommit": {"oid": "9197bb0b1738be30f79016dab9837002a8056152"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzAxNzQ1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/server/coordinator/ReservoirSegmentSampler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwMTozNToxMlrOII3qrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwNDowMjo1OFrOII4nUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE3MTU2Ng==", "bodyText": "IMO this should be at least a WARN since it should be impossible that percentOfSegmentsToConsider should have already been checked earlier in the system", "url": "https://github.com/apache/druid/pull/10284#discussion_r546171566", "createdAt": "2020-12-19T01:35:12Z", "author": {"login": "suneet-s"}, "path": "server/src/main/java/org/apache/druid/server/coordinator/ReservoirSegmentSampler.java", "diffHunk": "@@ -28,15 +29,51 @@\n final class ReservoirSegmentSampler\n {\n \n+  private static final EmittingLogger log = new EmittingLogger(ReservoirSegmentSampler.class);\n+\n+  /**\n+   * Iterates over segments that live on the candidate servers passed in {@link ServerHolder} and (possibly) picks a\n+   * segment to return to caller in a {@link BalancerSegmentHolder} object.\n+   *\n+   * @param serverHolders List of {@link ServerHolder} objects containing segments who are candidates to be chosen.\n+   * @param broadcastDatasources Set of DataSource names that identify broadcast datasources. We don't want to consider\n+   *                             segments from these datasources.\n+   * @param percentOfSegmentsToConsider The % of total cluster segments to consider before short-circuiting and\n+   *                                   returning immediately.\n+   * @return\n+   */\n   static BalancerSegmentHolder getRandomBalancerSegmentHolder(\n       final List<ServerHolder> serverHolders,\n-      Set<String> broadcastDatasources\n+      Set<String> broadcastDatasources,\n+      int percentOfSegmentsToConsider\n   )\n   {\n     ServerHolder fromServerHolder = null;\n     DataSegment proposalSegment = null;\n+    int calculatedSegmentLimit = Integer.MAX_VALUE;\n     int numSoFar = 0;\n \n+    // Reset a bad value of percentOfSegmentsToConsider to 100. We don't allow consideration less than or equal to\n+    // 0% of segments or greater than 100% of segments.\n+    if (percentOfSegmentsToConsider <= 0 || percentOfSegmentsToConsider > 100) {\n+      log.debug(\"Resetting percentOfSegmentsToConsider to 100 because only values from 1 to 100 are allowed.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9197bb0b1738be30f79016dab9837002a8056152"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE4NzA5MA==", "bodyText": "I'm cool with this being warn", "url": "https://github.com/apache/druid/pull/10284#discussion_r546187090", "createdAt": "2020-12-19T04:02:58Z", "author": {"login": "capistrant"}, "path": "server/src/main/java/org/apache/druid/server/coordinator/ReservoirSegmentSampler.java", "diffHunk": "@@ -28,15 +29,51 @@\n final class ReservoirSegmentSampler\n {\n \n+  private static final EmittingLogger log = new EmittingLogger(ReservoirSegmentSampler.class);\n+\n+  /**\n+   * Iterates over segments that live on the candidate servers passed in {@link ServerHolder} and (possibly) picks a\n+   * segment to return to caller in a {@link BalancerSegmentHolder} object.\n+   *\n+   * @param serverHolders List of {@link ServerHolder} objects containing segments who are candidates to be chosen.\n+   * @param broadcastDatasources Set of DataSource names that identify broadcast datasources. We don't want to consider\n+   *                             segments from these datasources.\n+   * @param percentOfSegmentsToConsider The % of total cluster segments to consider before short-circuiting and\n+   *                                   returning immediately.\n+   * @return\n+   */\n   static BalancerSegmentHolder getRandomBalancerSegmentHolder(\n       final List<ServerHolder> serverHolders,\n-      Set<String> broadcastDatasources\n+      Set<String> broadcastDatasources,\n+      int percentOfSegmentsToConsider\n   )\n   {\n     ServerHolder fromServerHolder = null;\n     DataSegment proposalSegment = null;\n+    int calculatedSegmentLimit = Integer.MAX_VALUE;\n     int numSoFar = 0;\n \n+    // Reset a bad value of percentOfSegmentsToConsider to 100. We don't allow consideration less than or equal to\n+    // 0% of segments or greater than 100% of segments.\n+    if (percentOfSegmentsToConsider <= 0 || percentOfSegmentsToConsider > 100) {\n+      log.debug(\"Resetting percentOfSegmentsToConsider to 100 because only values from 1 to 100 are allowed.\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE3MTU2Ng=="}, "originalCommit": {"oid": "9197bb0b1738be30f79016dab9837002a8056152"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2281, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}