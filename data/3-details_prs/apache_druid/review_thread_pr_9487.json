{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NzU1ODcy", "number": 9487, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMToyMjoxN1rODmd7Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMToyMjoxN1rODmd7Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjYyNzYzOnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/org/apache/druid/sql/calcite/expression/builtin/ArrayOverlapOperatorConversion.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMToyMjoxN1rOFz51Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjoyNjo1OFrOFz7crg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk2OTIyNw==", "bodyText": "nit: is it worth splitting this out into a static method on one of these classes (or a utility method somewhere) since this block looks basically shared with array_contains?", "url": "https://github.com/apache/druid/pull/9487#discussion_r389969227", "createdAt": "2020-03-09T21:22:17Z", "author": {"login": "clintropolis"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/expression/builtin/ArrayOverlapOperatorConversion.java", "diffHunk": "@@ -51,4 +67,66 @@ public ArrayOverlapOperatorConversion()\n   {\n     super(SQL_FUNCTION, EXPR_FUNCTION);\n   }\n+\n+  @Nullable\n+  @Override\n+  public DimFilter toDruidFilter(\n+      final PlannerContext plannerContext,\n+      RowSignature rowSignature,\n+      @Nullable VirtualColumnRegistry virtualColumnRegistry,\n+      final RexNode rexNode\n+  )\n+  {\n+    final List<RexNode> operands = ((RexCall) rexNode).getOperands();\n+    final List<DruidExpression> druidExpressions = Expressions.toDruidExpressions(\n+        plannerContext,\n+        rowSignature,\n+        operands\n+    );\n+    if (druidExpressions == null) {\n+      return null;\n+    }\n+\n+    // Converts array_overlaps() function into an OR of Selector filters if possible.\n+    final boolean leftSimpleExtractionExpr = druidExpressions.get(0).isSimpleExtraction();\n+    final boolean rightSimpleExtractionExpr = druidExpressions.get(1).isSimpleExtraction();\n+    final DruidExpression simpleExtractionExpr;\n+    final DruidExpression complexExpr;\n+\n+    if (leftSimpleExtractionExpr ^ rightSimpleExtractionExpr) {\n+      if (leftSimpleExtractionExpr) {\n+        simpleExtractionExpr = druidExpressions.get(0);\n+        complexExpr = druidExpressions.get(1);\n+      } else {\n+        simpleExtractionExpr = druidExpressions.get(1);\n+        complexExpr = druidExpressions.get(0);\n+      }\n+    } else {\n+      return toExpressionFilter(plannerContext, getDruidFunctionName(), druidExpressions);\n+    }\n+\n+    Expr expr = Parser.parse(complexExpr.getExpression(), plannerContext.getExprMacroTable());\n+    if (expr.isLiteral()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "203ee3d209a9bf8fb3aa5a7de196bac60542c5b0"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5NTY5NA==", "bodyText": "ah, else is different, carry on", "url": "https://github.com/apache/druid/pull/9487#discussion_r389995694", "createdAt": "2020-03-09T22:26:58Z", "author": {"login": "clintropolis"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/expression/builtin/ArrayOverlapOperatorConversion.java", "diffHunk": "@@ -51,4 +67,66 @@ public ArrayOverlapOperatorConversion()\n   {\n     super(SQL_FUNCTION, EXPR_FUNCTION);\n   }\n+\n+  @Nullable\n+  @Override\n+  public DimFilter toDruidFilter(\n+      final PlannerContext plannerContext,\n+      RowSignature rowSignature,\n+      @Nullable VirtualColumnRegistry virtualColumnRegistry,\n+      final RexNode rexNode\n+  )\n+  {\n+    final List<RexNode> operands = ((RexCall) rexNode).getOperands();\n+    final List<DruidExpression> druidExpressions = Expressions.toDruidExpressions(\n+        plannerContext,\n+        rowSignature,\n+        operands\n+    );\n+    if (druidExpressions == null) {\n+      return null;\n+    }\n+\n+    // Converts array_overlaps() function into an OR of Selector filters if possible.\n+    final boolean leftSimpleExtractionExpr = druidExpressions.get(0).isSimpleExtraction();\n+    final boolean rightSimpleExtractionExpr = druidExpressions.get(1).isSimpleExtraction();\n+    final DruidExpression simpleExtractionExpr;\n+    final DruidExpression complexExpr;\n+\n+    if (leftSimpleExtractionExpr ^ rightSimpleExtractionExpr) {\n+      if (leftSimpleExtractionExpr) {\n+        simpleExtractionExpr = druidExpressions.get(0);\n+        complexExpr = druidExpressions.get(1);\n+      } else {\n+        simpleExtractionExpr = druidExpressions.get(1);\n+        complexExpr = druidExpressions.get(0);\n+      }\n+    } else {\n+      return toExpressionFilter(plannerContext, getDruidFunctionName(), druidExpressions);\n+    }\n+\n+    Expr expr = Parser.parse(complexExpr.getExpression(), plannerContext.getExprMacroTable());\n+    if (expr.isLiteral()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk2OTIyNw=="}, "originalCommit": {"oid": "203ee3d209a9bf8fb3aa5a7de196bac60542c5b0"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2601, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}