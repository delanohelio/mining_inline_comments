{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NDk4Njc1", "number": 9731, "title": "ColumnCapabilities.hasMultipleValues refactor", "bodyText": "Description\nThis PR changes ColumnCapabilites.hasMultipleValues() to be a Capable enum added in #9662, and removes ColumnCapabilities.isComplete() which was added in #7588, along with some slight refactoring of ColumnCapabilitiesImpl, to remove the merge method, which was only setting isComplete, and replacing it with a static method ColumnCapabilities.complete which is used at index merger time to finalize Capable.UNKNOWN values.\nMany uses in the query path of ColumnCapabilites.hasMultipleValues use a new Capable method, isMaybeTrue to check for either TRUE or UNKNOWN.\nThis PR also removes the artificial, always multi-value ColumnCapabilites that currently are provided by IncrementalIndexStorageAdapter, and fixes up some of the fall-out from that. Part of this included adding a new method to DimensionIndexer to let a column indexer know if it is missing values for any row, to fix up an issue where nameLookupPossibleInAdvance would report true but the dictionary would only contain values for present rows and had not added an explicit null, which is called by IncrementalIndexer when processing a row.\nInstead of ^, this PR adds a method IncrementalIndexStorageAdapter.getSnapshotColumnCapabilities, which allows SegmentAnalyzer to get the 'at the time of asking' capabilities of the underlying IncrementalIndex. The fixes for if we used these at query time are still in place, but I opted to modify this behavior to use the correct capabilities for a future patch, which also needs to build a selector with these capabilities instead of using the 'live' state of the StringDimensionIndexer which could unexpectedly provide multi-value responses.\n  /**\n   * This method will be called whenever a known dimension is absent in a row to allow an indexer\n   * to account for any missing rows. Useful so that a {@link DimensionSelector} built on top of an\n   * {@link IncrementalIndex} may accurately report {@link DimensionSelector#nameLookupPossibleInAdvance()}.\n   *\n   * At index persist/merge time all missing columns for a row will be explicitly replaced with the value appropriate\n   * null or default value.\n   */\n  default void setSparseIndexed()\n  {\n    // no-op, only implement this if the dimension needs to perform any special handling for absent rows\n  }\n\nFinally, it fixes an issue in IndexMergerV9 where we were using computeIfAbsent instead of compute in mergeCapabilities, meaning instead of merging capabilities we were just taking the first capabilities encountered.\n\nThis PR has:\n\n been self-reviewed.\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths.\n added integration tests.\n been tested in a test Druid cluster.\n\n\nKey changed/added classes in this PR\n\nColumnCapabilities\nColumnCapabilitiesImpl\na bunch of query and ingestion path stuffs that deals with strings having multiple values or not", "createdAt": "2020-04-21T07:44:53Z", "url": "https://github.com/apache/druid/pull/9731", "merged": true, "mergeCommit": {"oid": "77dd5b06ae8fd7c81474cb03c0fc399cdf21646a"}, "closed": true, "closedAt": "2020-06-05T06:52:38Z", "author": {"login": "clintropolis"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZunYNAH2gAyNDA2NDk4Njc1OmVlYzI3NjdmYmFjZGIwMDRjN2MwYzM4NDljZjNkZjMwMWQ4Mzc0N2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcoMEI1AFqTQyNTAxMDg5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "eec2767fbacdb004c7c0c3849cf3df301d83747b", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/eec2767fbacdb004c7c0c3849cf3df301d83747b", "committedDate": "2020-04-21T07:32:50Z", "message": "transition ColumnCapabilities.hasMultipleValues to Capable enum, remove ColumnCapabilities.isComplete"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11a97132281d6bffa446a3ff0f08d7d0bfc6ccd5", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/11a97132281d6bffa446a3ff0f08d7d0bfc6ccd5", "committedDate": "2020-04-30T00:39:46Z", "message": "Merge remote-tracking branch 'upstream/master' into column-capabilities-remove-is-complete"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "825bca7a3514caab1c1e4b9661622fa9ac3ea1cd", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/825bca7a3514caab1c1e4b9661622fa9ac3ea1cd", "committedDate": "2020-04-30T18:57:20Z", "message": "remove artifical, always multi-value capabilities from IncrementalIndexStorageAdapter and fix up fallout from that, fix ColumnCapabilities merge in index merger"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "223b3e8a23af04b261186bd5db19402aff3bbed4", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/223b3e8a23af04b261186bd5db19402aff3bbed4", "committedDate": "2020-04-30T20:08:32Z", "message": "fix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8660879fc86b76c3a23cedec0287487f74357c19", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/8660879fc86b76c3a23cedec0287487f74357c19", "committedDate": "2020-04-30T21:20:21Z", "message": "remove unused method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa4d9dea1252a15878f5d91428d994f2a0a9d4cb", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/fa4d9dea1252a15878f5d91428d994f2a0a9d4cb", "committedDate": "2020-04-30T23:09:49Z", "message": "Merge remote-tracking branch 'upstream/master' into column-capabilities-remove-is-complete"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MDQ4MzYy", "url": "https://github.com/apache/druid/pull/9731#pullrequestreview-406048362", "createdAt": "2020-05-05T18:28:03Z", "commit": {"oid": "fa4d9dea1252a15878f5d91428d994f2a0a9d4cb"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoyODowM1rOGQ2O7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo1OToyNlrOGRA1Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxODk1Ng==", "bodyText": "This javadoc doesn't make a ton of sense to me. Specifically it's not clear to me what \"known dimension is absent in a row\" means or what \"account for any missing rows\" might refer to. I wonder if you could find an improved wording.\nIMO it'd be better to not have this method be default. It makes it too easy to forget to override it when necessary.", "url": "https://github.com/apache/druid/pull/9731#discussion_r420318956", "createdAt": "2020-05-05T18:28:03Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/DimensionIndexer.java", "diffHunk": "@@ -127,6 +127,19 @@\n    */\n   EncodedKeyComponentType processRowValsToUnsortedEncodedKeyComponent(@Nullable Object dimValues, boolean reportParseExceptions);\n \n+  /**\n+   * This method will be called whenever a known dimension is absent in a row to allow an indexer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa4d9dea1252a15878f5d91428d994f2a0a9d4cb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzMzI2Ng==", "bodyText": "The boolean here is tough for me to wrap my head around: when looking at method calls like .complete(true) and .complete(false), it looks like it's describing whether or not things are complete. I think it would be better to use a two-valued enum, so the call would be .makeComplete(UNKNOWN_TO_FALSE) or .makeComplete(UNKNOWN_TO_TRUE).", "url": "https://github.com/apache/druid/pull/9731#discussion_r420333266", "createdAt": "2020-05-05T18:52:02Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilities.java", "diffHunk": "@@ -57,6 +50,21 @@ public boolean isTrue()\n       return this == TRUE;\n     }\n \n+    public boolean isMaybeTrue()\n+    {\n+      return isTrue() || isUnknown();\n+    }\n+\n+    public boolean isUnknown()\n+    {\n+      return this == UNKNOWN;\n+    }\n+\n+    public Capable complete(boolean convertUnknownToTrue)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa4d9dea1252a15878f5d91428d994f2a0a9d4cb"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzNjIzMg==", "bodyText": "createSimpleNumericCapabilities?", "url": "https://github.com/apache/druid/pull/9731#discussion_r420336232", "createdAt": "2020-05-05T18:57:26Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilitiesImpl.java", "diffHunk": "@@ -31,23 +31,66 @@\n  */\n public class ColumnCapabilitiesImpl implements ColumnCapabilities\n {\n-  public static ColumnCapabilitiesImpl copyOf(final ColumnCapabilities other)\n+  public static ColumnCapabilitiesImpl copyOf(@Nullable final ColumnCapabilities other)\n   {\n     final ColumnCapabilitiesImpl capabilities = new ColumnCapabilitiesImpl();\n-    capabilities.merge(other);\n-    capabilities.setFilterable(other.isFilterable());\n-    capabilities.setIsComplete(other.isComplete());\n+    if (other != null) {\n+      capabilities.type = other.getType();\n+      capabilities.dictionaryEncoded = other.isDictionaryEncoded();\n+      capabilities.runLengthEncoded = other.isRunLengthEncoded();\n+      capabilities.hasInvertedIndexes = other.hasBitmapIndexes();\n+      capabilities.hasSpatialIndexes = other.hasSpatialIndexes();\n+      capabilities.hasMultipleValues = other.hasMultipleValues();\n+      capabilities.dictionaryValuesSorted = other.areDictionaryValuesSorted();\n+      capabilities.dictionaryValuesUnique = other.areDictionaryValuesUnique();\n+      capabilities.filterable = other.isFilterable();\n+    }\n     return capabilities;\n   }\n \n+  /**\n+   * Used at indexing time to finalize all {@link ColumnCapabilities.Capable#UNKNOWN} values to\n+   * {@link ColumnCapabilities.Capable#FALSE}, in order to present a snapshot of the state of the this column\n+   */\n+  @Nullable\n+  public static ColumnCapabilitiesImpl complete(\n+      @Nullable final ColumnCapabilities capabilities,\n+      boolean convertUnknownToTrue\n+  )\n+  {\n+    if (capabilities == null) {\n+      return null;\n+    }\n+    ColumnCapabilitiesImpl copy = copyOf(capabilities);\n+    copy.hasMultipleValues = copy.hasMultipleValues.complete(convertUnknownToTrue);\n+    copy.dictionaryValuesSorted = copy.dictionaryValuesSorted.complete(convertUnknownToTrue);\n+    copy.dictionaryValuesUnique = copy.dictionaryValuesUnique.complete(convertUnknownToTrue);\n+    return copy;\n+  }\n+\n+\n+  /**\n+   * Create a no frills, simple column with {@link ValueType} set and everything else false\n+   */\n+  public static ColumnCapabilitiesImpl createSimpleNumericColumn(ValueType valueType)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa4d9dea1252a15878f5d91428d994f2a0a9d4cb"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM2MTk2OA==", "bodyText": "Nice.", "url": "https://github.com/apache/druid/pull/9731#discussion_r420361968", "createdAt": "2020-05-05T19:43:50Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/ColumnProcessors.java", "diffHunk": "@@ -197,6 +197,6 @@\n    */\n   private static boolean mayBeMultiValue(@Nullable final ColumnCapabilities capabilities)\n   {\n-    return capabilities == null || !capabilities.isComplete() || capabilities.hasMultipleValues();\n+    return capabilities == null || capabilities.hasMultipleValues().isMaybeTrue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa4d9dea1252a15878f5d91428d994f2a0a9d4cb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM2MjUzOA==", "bodyText": "IMO, better if this returns a Capable. Then the caller can decide what to do with unknowns.", "url": "https://github.com/apache/druid/pull/9731#discussion_r420362538", "createdAt": "2020-05-05T19:44:45Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/ColumnSelectorBitmapIndexSelector.java", "diffHunk": "@@ -160,11 +160,11 @@ public void close() throws IOException\n   public boolean hasMultipleValues(final String dimension)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa4d9dea1252a15878f5d91428d994f2a0a9d4cb"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ0NDQ4Mg==", "bodyText": "Why this change?\nAs I understand it, the previous behavior is roughly equivalent to returning unknown for HMV. (Because it would return false, but complete is also false.)", "url": "https://github.com/apache/druid/pull/9731#discussion_r420444482", "createdAt": "2020-05-05T22:29:20Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/DimensionHandlerUtils.java", "diffHunk": "@@ -60,7 +60,8 @@\n                                   .setDictionaryEncoded(false)\n                                   .setDictionaryValuesUnique(false)\n                                   .setDictionaryValuesSorted(false)\n-                                  .setHasBitmapIndexes(false);\n+                                  .setHasBitmapIndexes(false)\n+                                  .setHasMultipleValues(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa4d9dea1252a15878f5d91428d994f2a0a9d4cb"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5MjQ1MA==", "bodyText": "Is this ever called with convertUnknownToTrue == true? If not, it could be named better.", "url": "https://github.com/apache/druid/pull/9731#discussion_r420492450", "createdAt": "2020-05-06T00:58:49Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilitiesImpl.java", "diffHunk": "@@ -31,23 +31,66 @@\n  */\n public class ColumnCapabilitiesImpl implements ColumnCapabilities\n {\n-  public static ColumnCapabilitiesImpl copyOf(final ColumnCapabilities other)\n+  public static ColumnCapabilitiesImpl copyOf(@Nullable final ColumnCapabilities other)\n   {\n     final ColumnCapabilitiesImpl capabilities = new ColumnCapabilitiesImpl();\n-    capabilities.merge(other);\n-    capabilities.setFilterable(other.isFilterable());\n-    capabilities.setIsComplete(other.isComplete());\n+    if (other != null) {\n+      capabilities.type = other.getType();\n+      capabilities.dictionaryEncoded = other.isDictionaryEncoded();\n+      capabilities.runLengthEncoded = other.isRunLengthEncoded();\n+      capabilities.hasInvertedIndexes = other.hasBitmapIndexes();\n+      capabilities.hasSpatialIndexes = other.hasSpatialIndexes();\n+      capabilities.hasMultipleValues = other.hasMultipleValues();\n+      capabilities.dictionaryValuesSorted = other.areDictionaryValuesSorted();\n+      capabilities.dictionaryValuesUnique = other.areDictionaryValuesUnique();\n+      capabilities.filterable = other.isFilterable();\n+    }\n     return capabilities;\n   }\n \n+  /**\n+   * Used at indexing time to finalize all {@link ColumnCapabilities.Capable#UNKNOWN} values to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa4d9dea1252a15878f5d91428d994f2a0a9d4cb"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5MjYxOQ==", "bodyText": "Why false here instead of true?\nMy understanding is that the HMV capability in the IncrementalIndex is now either going to be UNKNOWN (where it starts) or TRUE (if there are actually MVs). So UNKNOWN means we haven't seen any MV inputs yet.\nBut for the reason mentioned in the comment you deleted (the behavior of StringDimensionIndexer.IndexerDimensionSelector's getRow method), can't we get empty arrays from dimension selectors when querying IncrementalIndexes, even if the capability is UNKNOWN? So shouldn't we treat an unknown here as true rather than false?\nI must be missing something, since the tests are passing, assuming we have tests for this\u2026", "url": "https://github.com/apache/druid/pull/9731#discussion_r420492619", "createdAt": "2020-05-06T00:59:26Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/incremental/IncrementalIndexStorageAdapter.java", "diffHunk": "@@ -142,24 +141,8 @@ public Comparable getMaxValue(String column)\n   @Override\n   public ColumnCapabilities getColumnCapabilities(String column)\n   {\n-    // Different from index.getCapabilities because, in a way, IncrementalIndex's string-typed dimensions\n-    // are always potentially multi-valued at query time. (Missing / null values for a row can potentially be\n-    // represented by an empty array; see StringDimensionIndexer.IndexerDimensionSelector's getRow method.)\n-    //\n-    // We don't want to represent this as having-multiple-values in index.getCapabilities, because that's used\n-    // at index-persisting time to determine if we need a multi-value column or not. However, that means we\n-    // need to tweak the capabilities here in the StorageAdapter (a query-time construct), so at query time\n-    // they appear multi-valued.\n-\n-    final ColumnCapabilities capabilitiesFromIndex = index.getCapabilities(column);\n-    final IncrementalIndex.DimensionDesc dimensionDesc = index.getDimension(column);\n-    if (dimensionDesc != null && dimensionDesc.getCapabilities().getType() == ValueType.STRING) {\n-      final ColumnCapabilitiesImpl retVal = ColumnCapabilitiesImpl.copyOf(capabilitiesFromIndex);\n-      retVal.setHasMultipleValues(true);\n-      return retVal;\n-    } else {\n-      return capabilitiesFromIndex;\n-    }\n+    // snapshot the current state\n+    return ColumnCapabilitiesImpl.complete(index.getCapabilities(column), false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa4d9dea1252a15878f5d91428d994f2a0a9d4cb"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77624c7a3dedd9bbf99b11c3e7ae571e6ba2cd9a", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/77624c7a3dedd9bbf99b11c3e7ae571e6ba2cd9a", "committedDate": "2020-05-19T01:43:35Z", "message": "Merge remote-tracking branch 'upstream/master' into column-capabilities-remove-is-complete"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20effb45b9ee7a86ba9877e634404119dc35b4ae", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/20effb45b9ee7a86ba9877e634404119dc35b4ae", "committedDate": "2020-05-26T23:07:41Z", "message": "review stuffs, revert IncrementalIndexStorageAdapater capabilities change, plumb lame workaround to SegmentAnalyzer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "382c9ded5f9b53fb899f2660a2a638a1d3b0ed22", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/382c9ded5f9b53fb899f2660a2a638a1d3b0ed22", "committedDate": "2020-05-26T23:19:02Z", "message": "more comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b583134171df6dd7b401bbf8d1b1b37dbe43bf66", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/b583134171df6dd7b401bbf8d1b1b37dbe43bf66", "committedDate": "2020-05-26T23:43:38Z", "message": "use volatile booleans"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a11d95afbf749976dfe2c163e976e81c04fba1d9", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/a11d95afbf749976dfe2c163e976e81c04fba1d9", "committedDate": "2020-05-26T23:45:55Z", "message": "fix line length"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09ae50e2c1dda614244eb8e0adbd14343b26ae86", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/09ae50e2c1dda614244eb8e0adbd14343b26ae86", "committedDate": "2020-06-04T20:18:38Z", "message": "Merge remote-tracking branch 'upstream/master' into column-capabilities-remove-is-complete"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f639c2c860e57827ed85740fd242036c73e4dd43", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/f639c2c860e57827ed85740fd242036c73e4dd43", "committedDate": "2020-06-04T21:06:16Z", "message": "correctly handle missing columns for vector processors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dc8754d4363e276b5502f355357a039a5b769b6", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/7dc8754d4363e276b5502f355357a039a5b769b6", "committedDate": "2020-06-04T22:25:42Z", "message": "return ColumnCapabilities.Capable for BitmapIndexSelector.hasMultipleValues, fix vector processor selection for complex"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0OTQ3MTk5", "url": "https://github.com/apache/druid/pull/9731#pullrequestreview-424947199", "createdAt": "2020-06-05T01:55:05Z", "commit": {"oid": "7dc8754d4363e276b5502f355357a039a5b769b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMTo1NTowNVrOGfd4QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMTo1NTowNVrOGfd4QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0ODU3Ng==", "bodyText": "If the column holder is null then we should be able to safely return Capable.TRUE, because getBitmapIndex will return a bitmap index as if the column were full of nulls. This will enable optimizations in ExpressionFilter when the expression is based on a nonexistent column.", "url": "https://github.com/apache/druid/pull/9731#discussion_r435648576", "createdAt": "2020-06-05T01:55:05Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/ColumnSelectorBitmapIndexSelector.java", "diffHunk": "@@ -157,14 +158,16 @@ public void close() throws IOException\n   }\n \n   @Override\n-  public boolean hasMultipleValues(final String dimension)\n+  public ColumnCapabilities.Capable hasMultipleValues(final String dimension)\n   {\n     if (isVirtualColumn(dimension)) {\n       return virtualColumns.getVirtualColumn(dimension).capabilities(dimension).hasMultipleValues();\n     }\n \n     final ColumnHolder columnHolder = index.getColumnHolder(dimension);\n-    return columnHolder != null && columnHolder.getCapabilities().hasMultipleValues();\n+    return columnHolder != null\n+           ? columnHolder.getCapabilities().hasMultipleValues()\n+           : ColumnCapabilities.Capable.UNKNOWN;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dc8754d4363e276b5502f355357a039a5b769b6"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33b8313a4c6538ab158cf636a6025e05c4df1885", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/33b8313a4c6538ab158cf636a6025e05c4df1885", "committedDate": "2020-06-05T03:48:50Z", "message": "false on non-existent"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MDEwODk2", "url": "https://github.com/apache/druid/pull/9731#pullrequestreview-425010896", "createdAt": "2020-06-05T05:46:26Z", "commit": {"oid": "33b8313a4c6538ab158cf636a6025e05c4df1885"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2553, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}