{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyMzk3ODM3", "number": 10635, "title": "Add SQL functions to format numbers into human readable format", "bodyText": "This PR implements requirements described in #10584\nIn this PR, 3 SQL functions and 3 corresponding native functions are provided to format numbers to different style.\n\n\n\nSQL/Native function\nDescription\n\n\n\n\nhuman_readable_binary_byte_format(value[, precision])\nReturns the value in human-readable IEC format. Supported unit suffix: B, KiB, MiB, GiB, TiB, PiB, EiB. precision must be in the range of [0,3] (default: 2).\n\n\nhuman_readable_decimal_byte_format(value[, precision])\nReturns the value in human-readable SI format. Supported unit suffix: B, KB, MB, GB, TB, PB, EB. precision must be in the range of [0,3] (default: 2).\n\n\nhuman_readable_decimal_format(value[, precision])\nReturns the value in human-readable SI format. Supported unit suffix:  K, M, G, T, P, E. precision must be in the range of [0,3] (default: 2).\n\n\n\nThe reason why 3 functions are provided to user instead of 1 function with different argument of format is that we think it's more simpler for a user to call these function. However in internal implementation, there's only one public format function exposed for all 3 format.\nWe've tested this feature in our clusters, and it works as we expect.\n\nWeb Console now looks like\n\n\nThis PR has:\n\n been self-reviewed.\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths, ensuring the threshold for code coverage is met.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-12-04T09:13:37Z", "url": "https://github.com/apache/druid/pull/10635", "merged": true, "mergeCommit": {"oid": "e40be0ae2813722a08d185e1f69255eff87094e5"}, "closed": true, "closedAt": "2021-08-13T17:27:49Z", "author": {"login": "FrankChen021"}, "timelineItems": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdi1DFiAFqTU0NDgwODM0NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABez5NPxgH2gAyNTMyMzk3ODM3OmYzYzYyYTNhYzY5YTM4YThiODM3MmZhNWVhNjI5MTRkYzVkZWJjNTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0ODA4MzQ1", "url": "https://github.com/apache/druid/pull/10635#pullrequestreview-544808345", "createdAt": "2020-12-04T09:53:27Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwOTo1MzoyN1rOH_JRTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMDoxMjo0NFrOH_KBvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk3NDIyMg==", "bodyText": "shouldn't there be a check on precision as well?", "url": "https://github.com/apache/druid/pull/10635#discussion_r535974222", "createdAt": "2020-12-04T09:53:27Z", "author": {"login": "abhishekagarwal87"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/expression/builtin/SizeFormatOperatorConversion.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.calcite.expression.builtin;\n+\n+import org.apache.calcite.rel.type.RelDataType;\n+import org.apache.calcite.rex.RexNode;\n+import org.apache.calcite.sql.SqlCallBinding;\n+import org.apache.calcite.sql.SqlFunction;\n+import org.apache.calcite.sql.SqlFunctionCategory;\n+import org.apache.calcite.sql.SqlOperandCountRange;\n+import org.apache.calcite.sql.SqlOperator;\n+import org.apache.calcite.sql.type.SqlOperandCountRanges;\n+import org.apache.calcite.sql.type.SqlOperandTypeChecker;\n+import org.apache.calcite.sql.type.SqlTypeName;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.segment.column.RowSignature;\n+import org.apache.druid.sql.calcite.expression.DruidExpression;\n+import org.apache.druid.sql.calcite.expression.OperatorConversions;\n+import org.apache.druid.sql.calcite.expression.SqlOperatorConversion;\n+import org.apache.druid.sql.calcite.planner.PlannerContext;\n+\n+public class SizeFormatOperatorConversion implements SqlOperatorConversion\n+{\n+  public static final SqlOperatorConversion BINARY_BYTE_FORMAT = new SizeFormatOperatorConversion(\"binary_byte_format\");\n+  public static final SqlOperatorConversion DECIMAL_BYTE_FORMAT = new SizeFormatOperatorConversion(\"decimal_byte_format\");\n+  public static final SqlOperatorConversion DECIMAL_FORMAT = new SizeFormatOperatorConversion(\"decimal_format\");\n+\n+  private final String name;\n+  private final SqlFunction sqlFunction;\n+\n+  private SizeFormatOperatorConversion(String name)\n+  {\n+    this.sqlFunction = OperatorConversions\n+        .operatorBuilder(StringUtils.toUpperCase(name))\n+        .operandTypeChecker(new StringFormatOperandTypeChecker())\n+        .functionCategory(SqlFunctionCategory.STRING)\n+        .returnTypeNonNull(SqlTypeName.VARCHAR)\n+        .build();\n+\n+    this.name = name;\n+  }\n+\n+  @Override\n+  public SqlOperator calciteOperator()\n+  {\n+    return sqlFunction;\n+  }\n+\n+  @Override\n+  public DruidExpression toDruidExpression(\n+      final PlannerContext plannerContext,\n+      final RowSignature rowSignature,\n+      final RexNode rexNode\n+  )\n+  {\n+    return OperatorConversions.convertCall(plannerContext, rowSignature, rexNode, name);\n+  }\n+\n+  private static class StringFormatOperandTypeChecker implements SqlOperandTypeChecker\n+  {\n+    @Override\n+    public boolean checkOperandTypes(SqlCallBinding callBinding, boolean throwOnFailure)\n+    {\n+      final RelDataType firstArgType = callBinding.getOperandType(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk3NjY1NQ==", "bodyText": "should this be?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .virtualColumns(expressionVirtualColumn(\"v0\", \"'44.61KiB'\", ValueType.STRING),\n          \n          \n            \n                            .virtualColumns(expressionVirtualColumn(\"v0\", \"binary_date_format(45678)\", ValueType.STRING),", "url": "https://github.com/apache/druid/pull/10635#discussion_r535976655", "createdAt": "2020-12-04T09:57:11Z", "author": {"login": "abhishekagarwal87"}, "path": "sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java", "diffHunk": "@@ -16153,6 +16161,44 @@ public void testTimeStampAddConversion() throws Exception\n     );\n   }\n \n+  public void testSizeFormatFunction() throws Exception\n+  {\n+    testQuery(\n+        \"SELECT m1, \"\n+        + \"BINARY_BYTE_FORMAT(45678),\"\n+        + \"BINARY_BYTE_FORMAT(m1*12345),\"\n+        + \"BINARY_BYTE_FORMAT(m1*12345, 0), \"\n+        + \"DECIMAL_BYTE_FORMAT(m1*12345), \"\n+        + \"DECIMAL_FORMAT(m1*12345) \"\n+        + \"FROM numfoo WHERE f1 = 0.1 LIMIT 1\",\n+        ImmutableList.of(\n+            newScanQueryBuilder()\n+                .dataSource(CalciteTests.DATASOURCE3)\n+                .intervals(querySegmentSpec(Filtration.eternity()))\n+                .virtualColumns(expressionVirtualColumn(\"v0\", \"'44.61KiB'\", ValueType.STRING),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk4NTYzNQ==", "bodyText": "in this particular scenario, should space be appended?", "url": "https://github.com/apache/druid/pull/10635#discussion_r535985635", "createdAt": "2020-12-04T10:11:18Z", "author": {"login": "abhishekagarwal87"}, "path": "core/src/test/java/org/apache/druid/java/util/common/HumanReadableBytesTest.java", "diffHunk": "@@ -395,6 +395,107 @@ public void testBytesRange()\n     Assert.assertEquals(\"value must be in the range of [0, 5]\", message);\n   }\n \n+  @Test\n+  public void testFormatInBinaryByte()\n+  {\n+    Assert.assertEquals(\"-8.00 EiB\", HumanReadableBytes.format(Long.MIN_VALUE, 2, HumanReadableBytes.UnitSystem.BINARY_BYTE, true));\n+    Assert.assertEquals(\"-8.000 EiB\", HumanReadableBytes.format(Long.MIN_VALUE, 3, HumanReadableBytes.UnitSystem.BINARY_BYTE, true));\n+\n+    Assert.assertEquals(\"-2.00 GiB\", HumanReadableBytes.format(Integer.MIN_VALUE, 2, HumanReadableBytes.UnitSystem.BINARY_BYTE, true));\n+    Assert.assertEquals(\"-32.00 KiB\", HumanReadableBytes.format(Short.MIN_VALUE, 2, HumanReadableBytes.UnitSystem.BINARY_BYTE, true));\n+    Assert.assertEquals(\"-128.00 B\", HumanReadableBytes.format(Byte.MIN_VALUE, 2, HumanReadableBytes.UnitSystem.BINARY_BYTE, true));\n+    Assert.assertEquals(\"-1.00 B\", HumanReadableBytes.format(-1, 2, HumanReadableBytes.UnitSystem.BINARY_BYTE, true));\n+    Assert.assertEquals(\"0.00 B\", HumanReadableBytes.format(0, 2, HumanReadableBytes.UnitSystem.BINARY_BYTE, true));\n+    Assert.assertEquals(\"1.00 B\", HumanReadableBytes.format(1, 2, HumanReadableBytes.UnitSystem.BINARY_BYTE, true));\n+    Assert.assertEquals(\"1.00 KiB\", HumanReadableBytes.format(1024L, 2, HumanReadableBytes.UnitSystem.BINARY_BYTE, true));\n+    Assert.assertEquals(\"1.00 MiB\", HumanReadableBytes.format(1024L * 1024, 2, HumanReadableBytes.UnitSystem.BINARY_BYTE, true));\n+    Assert.assertEquals(\"1.00 GiB\", HumanReadableBytes.format(1024L * 1024 * 1024, 2, HumanReadableBytes.UnitSystem.BINARY_BYTE, true));\n+    Assert.assertEquals(\"1.00 TiB\", HumanReadableBytes.format(1024L * 1024 * 1024 * 1024, 2, HumanReadableBytes.UnitSystem.BINARY_BYTE, true));\n+    Assert.assertEquals(\"1.00 PiB\", HumanReadableBytes.format(1024L * 1024 * 1024 * 1024 * 1024, 2, HumanReadableBytes.UnitSystem.BINARY_BYTE, true));\n+    Assert.assertEquals(\"8.00 EiB\", HumanReadableBytes.format(Long.MAX_VALUE, 2, HumanReadableBytes.UnitSystem.BINARY_BYTE, true));\n+  }\n+\n+  @Test\n+  public void testPrecisionInBinaryFormat()\n+  {\n+    Assert.assertEquals(\"1 KiB\", HumanReadableBytes.format(1500, 0, HumanReadableBytes.UnitSystem.BINARY_BYTE, true));\n+    Assert.assertEquals(\"1.5 KiB\", HumanReadableBytes.format(1500, 1, HumanReadableBytes.UnitSystem.BINARY_BYTE, true));\n+    Assert.assertEquals(\"1.46 KiB\", HumanReadableBytes.format(1500, 2, HumanReadableBytes.UnitSystem.BINARY_BYTE, true));\n+    Assert.assertEquals(\"1.465 KiB\", HumanReadableBytes.format(1500, 3, HumanReadableBytes.UnitSystem.BINARY_BYTE, true));\n+  }\n+\n+  @Test\n+  public void testPrecisionInDecimalFormat()\n+  {\n+    Assert.assertEquals(\"1 KB\", HumanReadableBytes.format(1456, 0, HumanReadableBytes.UnitSystem.DECIMAL_BYTE, true));\n+    Assert.assertEquals(\"1.5 KB\", HumanReadableBytes.format(1456, 1, HumanReadableBytes.UnitSystem.DECIMAL_BYTE, true));\n+    Assert.assertEquals(\"1.46 KB\", HumanReadableBytes.format(1456, 2, HumanReadableBytes.UnitSystem.DECIMAL_BYTE, true));\n+    Assert.assertEquals(\"1.456 KB\", HumanReadableBytes.format(1456, 3, HumanReadableBytes.UnitSystem.DECIMAL_BYTE, true));\n+  }\n+\n+  @Test\n+  public void testFormatInDecimalByte()\n+  {\n+    Assert.assertEquals(\"1.00 B\", HumanReadableBytes.format(1, 2, HumanReadableBytes.UnitSystem.DECIMAL_BYTE, true));\n+    Assert.assertEquals(\"1.00 KB\", HumanReadableBytes.format(1000L, 2, HumanReadableBytes.UnitSystem.DECIMAL_BYTE, true));\n+    Assert.assertEquals(\"1.00 MB\", HumanReadableBytes.format(1000L * 1000, 2, HumanReadableBytes.UnitSystem.DECIMAL_BYTE, true));\n+    Assert.assertEquals(\"1.00 GB\", HumanReadableBytes.format(1000L * 1000 * 1000, 2, HumanReadableBytes.UnitSystem.DECIMAL_BYTE, true));\n+    Assert.assertEquals(\"1.00 TB\", HumanReadableBytes.format(1000L * 1000 * 1000 * 1000, 2, HumanReadableBytes.UnitSystem.DECIMAL_BYTE, true));\n+    Assert.assertEquals(\"1.00 PB\", HumanReadableBytes.format(1000L * 1000 * 1000 * 1000 * 1000, 2, HumanReadableBytes.UnitSystem.DECIMAL_BYTE, true));\n+    Assert.assertEquals(\"9.22 EB\", HumanReadableBytes.format(Long.MAX_VALUE, 2, HumanReadableBytes.UnitSystem.DECIMAL_BYTE, true));\n+\n+    Assert.assertEquals(\"100.00 KB\", HumanReadableBytes.format(99999, 2, HumanReadableBytes.UnitSystem.DECIMAL_BYTE, true));\n+    Assert.assertEquals(\"99.999 KB\", HumanReadableBytes.format(99999, 3, HumanReadableBytes.UnitSystem.DECIMAL_BYTE, true));\n+\n+    Assert.assertEquals(\"999.9 PB\", HumanReadableBytes.format(999_949_999_999_999_999L, 1, HumanReadableBytes.UnitSystem.DECIMAL_BYTE, true));\n+    Assert.assertEquals(\"999.95 PB\", HumanReadableBytes.format(999_949_999_999_999_999L, 2, HumanReadableBytes.UnitSystem.DECIMAL_BYTE, true));\n+    Assert.assertEquals(\"999.949 PB\", HumanReadableBytes.format(999_949_999_999_999_999L, 3, HumanReadableBytes.UnitSystem.DECIMAL_BYTE, true));\n+  }\n+\n+  @Test\n+  public void testFormatInDecimal()\n+  {\n+    Assert.assertEquals(\"1.00 \", HumanReadableBytes.format(1, 2, HumanReadableBytes.UnitSystem.DECIMAL, true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTk4NjYyMg==", "bodyText": "is the hasSpace customizable from outside? May be it can be just hard-coded to true.", "url": "https://github.com/apache/druid/pull/10635#discussion_r535986622", "createdAt": "2020-12-04T10:12:44Z", "author": {"login": "abhishekagarwal87"}, "path": "core/src/main/java/org/apache/druid/java/util/common/HumanReadableBytes.java", "diffHunk": "@@ -208,4 +208,108 @@ private static long parseInner(String rawNumber)\n       throw new IAE(\"Invalid format or out of range of long: %s\", rawNumber);\n     }\n   }\n+\n+  public enum UnitSystem\n+  {\n+    /**\n+     * also known as IEC format\n+     * eg: B, KiB, MiB, GiB ...\n+     */\n+    BINARY_BYTE,\n+\n+    /**\n+     * also known as SI format\n+     * eg: B, KB, MB ...\n+     */\n+    DECIMAL_BYTE,\n+\n+    /**\n+     * simplified SI format without 'B' indicator\n+     * eg: K, M, G ...\n+     */\n+    DECIMAL\n+  }\n+\n+  /**\n+   * Returns a human-readable string version of input value\n+   *\n+   * @param bytes      input value. Negative value is also allowed\n+   * @param precision  [0,3]\n+   * @param unitSystem which unit system is adopted to format the input value, see {@link UnitSystem}\n+   * @param hasSpace   if it's true, there's an extra space between the number and the unit suffix\n+   */\n+  public static String format(long bytes, int precision, UnitSystem unitSystem, boolean hasSpace)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NzY4ODcx", "url": "https://github.com/apache/druid/pull/10635#pullrequestreview-546768871", "createdAt": "2020-12-08T06:02:53Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNjowMjo1M1rOIBIeZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNjowNjo1N1rOIBIjqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA1ODM0Mg==", "bodyText": "Since we are calling asLong without checking isNumericNull of the ExprEval, we are ignoring the value of druid.generic.useDefaultValueForNull here, which I think is incorrect and this should return null instead.\nThinking out loud, how should this function behave with non-long inputs?\nThe way this is currently implement:\n\nInputs of ExprType.DOUBLE will be cast to a ExprType.LONG before conversion.\nFor ExprType.STRING inputs, if they are number-ish strings, they will be parsed into long values, but if not asLong will always be 0.\n\nI don't know that this behavior is incorrect, I just wanted to call it out to think about it.\nI do think we want to check for isNumericNull and return ExprEval.of(null) if NullHandling.sqlCompatible() is set, for any input types.\nI see in the SQL operator it looks like it strictly validates that the inputs are numeric, while Druid native expressions have traditionally been a bit fast and loose about the inputs they accept and tend to be rather forgiving, so perhaps this is ok that the behavior here doesn't quite match.", "url": "https://github.com/apache/druid/pull/10635#discussion_r538058342", "createdAt": "2020-12-08T06:02:53Z", "author": {"login": "clintropolis"}, "path": "core/src/main/java/org/apache/druid/math/expr/Function.java", "diffHunk": "@@ -3275,4 +3276,86 @@ public ExprEval apply(List<Expr> args, Expr.ObjectBinding bindings)\n       return l.stream();\n     }\n   }\n+\n+  abstract class SizeFormatFunc implements Function\n+  {\n+    protected abstract HumanReadableBytes.UnitSystem getUnitSystem();\n+\n+    /**\n+     * Evaluate given expression\n+     * By default, 'precision' is 2 and 'hasSpace' is false\n+     */\n+    @Override\n+    public ExprEval apply(List<Expr> args, Expr.ObjectBinding bindings)\n+    {\n+      final long bytes = args.get(0).eval(bindings).asLong();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA1OTY5MQ==", "bodyText": "Should these docs live with the 'numeric' functions? I suppose here is ok too...", "url": "https://github.com/apache/druid/pull/10635#discussion_r538059691", "createdAt": "2020-12-08T06:06:57Z", "author": {"login": "clintropolis"}, "path": "docs/querying/sql.md", "diffHunk": "@@ -563,6 +563,9 @@ The [DataSketches extension](../development/extensions-core/datasketches-extensi\n |`COALESCE(value1, value2, ...)`|Returns the first value that is neither NULL nor empty string.|\n |`NVL(expr,expr-for-null)`|Returns 'expr-for-null' if 'expr' is null (or empty string for string type).|\n |`BLOOM_FILTER_TEST(<expr>, <serialized-filter>)`|Returns true if the value is contained in a Base64-serialized bloom filter. See the [Bloom filter extension](../development/extensions-core/bloom-filter.html) documentation for additional details.|\n+|`BINARY_BYTE_FORMAT(value, [precision])`|Returns the value in human-readable [IEC](https://en.wikipedia.org/wiki/Binary_prefix) format. Supported unit suffix: `B`, `KiB`, `MiB`, `GiB`, `TiB`, `PiB`, `EiB`. `precision` must be in the range of [0,3] (default: 2).|\n+|`DECIMAL_BYTE_FORMAT(value, [precision])`|Returns the value in human-readable [SI](https://en.wikipedia.org/wiki/Binary_prefix) format. Supported unit suffix: `B`, `KB`, `MB`, `GB`, `TB`, `PB`, `EB`. `precision` must be in the range of [0,3] (default: 2).|\n+|`DECIMAL_FORMAT(value, [precision])`|Returns the value in human-readable SI format. Supported unit suffix: `K`, `M`, `G`, `T`, `P`, `E`. `precision` must be in the range of [0,3] (default: 2).|", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6dd891ef72cd782f22e02ccb9899f633f461b77d", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/6dd891ef72cd782f22e02ccb9899f633f461b77d", "committedDate": "2020-12-22T01:21:31Z", "message": "add binary_byte_format/decimal_byte_format/decimal_format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ecbbfc65776d02e32a868300b07741bd95ef4d0", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/1ecbbfc65776d02e32a868300b07741bd95ef4d0", "committedDate": "2020-12-22T01:21:31Z", "message": "clean code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6afe8521c2c49b2187a802fc4f9675a6d88455f", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/a6afe8521c2c49b2187a802fc4f9675a6d88455f", "committedDate": "2020-12-22T01:21:31Z", "message": "fix doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5fab7159fff0d21186524d74d32a61689cbef26", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/f5fab7159fff0d21186524d74d32a61689cbef26", "committedDate": "2020-12-22T01:21:31Z", "message": "fix review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be3c333612e7aad74f4b2e90b0bc25b0b33da6af", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/be3c333612e7aad74f4b2e90b0bc25b0b33da6af", "committedDate": "2020-12-22T01:21:32Z", "message": "add spelling check rules"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e02809a2a976c32328f2be86bd42533cc0c1469f", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/e02809a2a976c32328f2be86bd42533cc0c1469f", "committedDate": "2020-12-22T01:21:32Z", "message": "remove extra param"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5a3756633260a0ec55721f47f518abcaaf727f5", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/b5a3756633260a0ec55721f47f518abcaaf727f5", "committedDate": "2020-12-22T01:21:32Z", "message": "improve type handling and null handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e279c18a05c6b93246ab00a46f2d743225cad3ca", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/e279c18a05c6b93246ab00a46f2d743225cad3ca", "committedDate": "2020-12-22T01:21:32Z", "message": "remove extra zeros"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91e6a550ff8dbacae2d6da91262784df0a52d6c5", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/91e6a550ff8dbacae2d6da91262784df0a52d6c5", "committedDate": "2020-12-22T01:39:23Z", "message": "fix tests and add space between unit suffix and number as most size-format functions do"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "91e6a550ff8dbacae2d6da91262784df0a52d6c5", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/91e6a550ff8dbacae2d6da91262784df0a52d6c5", "committedDate": "2020-12-22T01:39:23Z", "message": "fix tests and add space between unit suffix and number as most size-format functions do"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d0fe124f5438e608d3d3eda1f80f39fa17a56ff", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/5d0fe124f5438e608d3d3eda1f80f39fa17a56ff", "committedDate": "2020-12-23T01:12:47Z", "message": "fix tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3Mzc3MTQ0", "url": "https://github.com/apache/druid/pull/10635#pullrequestreview-557377144", "createdAt": "2020-12-22T21:28:56Z", "commit": {"oid": "91e6a550ff8dbacae2d6da91262784df0a52d6c5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMToyODo1NlrOIKJthg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMToyODo1NlrOIKJthg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzUxNTc4Mg==", "bodyText": "All unit tests are run with both values of druid.generic.useDefaultValueForNull, so it isn't necessary to explicitly configure it. What we typically do is try to just write the test to check for the mode and adjust the expectation accordingly, e.g. to use another example from this file\nassertExpr(\"lpad(x, 2, '')\", NullHandling.replaceWithDefault() ? null : \"fo\");", "url": "https://github.com/apache/druid/pull/10635#discussion_r547515782", "createdAt": "2020-12-22T21:28:56Z", "author": {"login": "clintropolis"}, "path": "core/src/test/java/org/apache/druid/math/expr/FunctionTest.java", "diffHunk": "@@ -519,6 +525,203 @@ public void testLeast()\n     assertExpr(\"least(1, null, 'A')\", \"1\");\n   }\n \n+  @Test\n+  public void testSizeFormat()\n+  {\n+    assertExpr(\"binary_byte_format(-1024)\", \"-1.00 KiB\");\n+    assertExpr(\"binary_byte_format(1024)\", \"1.00 KiB\");\n+    assertExpr(\"binary_byte_format(1024*1024)\", \"1.00 MiB\");\n+    assertExpr(\"binary_byte_format(1024*1024*1024)\", \"1.00 GiB\");\n+    assertExpr(\"binary_byte_format(1024*1024*1024*1024)\", \"1.00 TiB\");\n+    assertExpr(\"binary_byte_format(1024*1024*1024*1024*1024)\", \"1.00 PiB\");\n+\n+    assertExpr(\"decimal_byte_format(-1000)\", \"-1.00 KB\");\n+    assertExpr(\"decimal_byte_format(1000)\", \"1.00 KB\");\n+    assertExpr(\"decimal_byte_format(1000*1000)\", \"1.00 MB\");\n+    assertExpr(\"decimal_byte_format(1000*1000*1000)\", \"1.00 GB\");\n+    assertExpr(\"decimal_byte_format(1000*1000*1000*1000)\", \"1.00 TB\");\n+\n+    assertExpr(\"decimal_format(-1000)\", \"-1.00 K\");\n+    assertExpr(\"decimal_format(1000)\", \"1.00 K\");\n+    assertExpr(\"decimal_format(1000*1000)\", \"1.00 M\");\n+    assertExpr(\"decimal_format(1000*1000*1000)\", \"1.00 G\");\n+    assertExpr(\"decimal_format(1000*1000*1000*1000)\", \"1.00 T\");\n+  }\n+\n+  @Test\n+  public void testSizeFormatWithDifferentPrecision()\n+  {\n+    assertExpr(\"binary_byte_format(1024, 0)\", \"1 KiB\");\n+    assertExpr(\"binary_byte_format(1024*1024, 1)\", \"1.0 MiB\");\n+    assertExpr(\"binary_byte_format(1024*1024*1024, 2)\", \"1.00 GiB\");\n+    assertExpr(\"binary_byte_format(1024*1024*1024*1024, 3)\", \"1.000 TiB\");\n+\n+    assertExpr(\"decimal_byte_format(1234, 0)\", \"1 KB\");\n+    assertExpr(\"decimal_byte_format(1234*1000, 1)\", \"1.2 MB\");\n+    assertExpr(\"decimal_byte_format(1234*1000*1000, 2)\", \"1.23 GB\");\n+    assertExpr(\"decimal_byte_format(1234*1000*1000*1000, 3)\", \"1.234 TB\");\n+\n+    assertExpr(\"decimal_format(1234, 0)\", \"1 K\");\n+    assertExpr(\"decimal_format(1234*1000,1)\", \"1.2 M\");\n+    assertExpr(\"decimal_format(1234*1000*1000,2)\", \"1.23 G\");\n+    assertExpr(\"decimal_format(1234*1000*1000*1000,3)\", \"1.234 T\");\n+  }\n+\n+  @Test\n+  public void testSizeFormatWithEdgeCases()\n+  {\n+    //a nonexist value is null which is treated as 0\n+    assertExpr(\"binary_byte_format(nonexist)\", \"0 B\");\n+\n+    //f = 12.34\n+    assertExpr(\"binary_byte_format(f)\", \"12 B\");\n+\n+    //nan is Double.NaN\n+    assertExpr(\"binary_byte_format(nan)\", \"0 B\");\n+\n+    //inf = Double.POSITIVE_INFINITY\n+    assertExpr(\"binary_byte_format(inf)\", \"8.00 EiB\");\n+\n+    //inf = Double.NEGATIVE_INFINITY\n+    assertExpr(\"binary_byte_format(-inf)\", \"-8.00 EiB\");\n+\n+    // o = 0\n+    assertExpr(\"binary_byte_format(o)\", \"0 B\");\n+\n+    // od = 0D\n+    assertExpr(\"binary_byte_format(od)\", \"0 B\");\n+\n+    // of = 0F\n+    assertExpr(\"binary_byte_format(of)\", \"0 B\");\n+  }\n+\n+  @Test\n+  public void testSizeForatInvalidArgumentType()\n+  {\n+    try {\n+      //x = \"foo\"\n+      Parser.parse(\"binary_byte_format(x)\", ExprMacroTable.nil())\n+            .eval(bindings);\n+\n+      //must not go to here\n+      Assert.assertTrue(false);\n+    }\n+    catch (IAE e) {\n+      Assert.assertEquals(\"Function[binary_byte_format] needs a number as its first argument\", e.getMessage());\n+    }\n+\n+    try {\n+      //x = \"foo\"\n+      Parser.parse(\"binary_byte_format(1024, x)\", ExprMacroTable.nil())\n+            .eval(bindings);\n+\n+      //must not go to here\n+      Assert.assertTrue(false);\n+    }\n+    catch (IAE e) {\n+      Assert.assertEquals(\"Function[binary_byte_format] needs an integer as its second argument\", e.getMessage());\n+    }\n+\n+    try {\n+      //of = 0F\n+      Parser.parse(\"binary_byte_format(1024, of)\", ExprMacroTable.nil())\n+            .eval(bindings);\n+\n+      //must not go to here\n+      Assert.assertTrue(false);\n+    }\n+    catch (IAE e) {\n+      Assert.assertEquals(\"Function[binary_byte_format] needs an integer as its second argument\", e.getMessage());\n+    }\n+\n+    try {\n+      //of = 0F\n+      Parser.parse(\"binary_byte_format(1024, nonexist)\", ExprMacroTable.nil())\n+            .eval(bindings);\n+\n+      //must not go to here\n+      Assert.assertTrue(false);\n+    }\n+    catch (IAE e) {\n+      Assert.assertEquals(\"Function[binary_byte_format] needs an integer as its second argument\", e.getMessage());\n+    }\n+  }\n+\n+  @Test\n+  public void testSizeFormatInvalidPrecision()\n+  {\n+    try {\n+      Parser.parse(\"binary_byte_format(1024, maxLong)\", ExprMacroTable.nil())\n+            .eval(bindings);\n+      Assert.assertTrue(false);\n+    }\n+    catch (IAE e) {\n+      Assert.assertEquals(\"Given precision[9223372036854775807] of Function[binary_byte_format] must be in the range of [0,3]\", e.getMessage());\n+    }\n+\n+    try {\n+      Parser.parse(\"binary_byte_format(1024, minLong)\", ExprMacroTable.nil())\n+            .eval(bindings);\n+      Assert.assertTrue(false);\n+    }\n+    catch (IAE e) {\n+      Assert.assertEquals(\"Given precision[-9223372036854775808] of Function[binary_byte_format] must be in the range of [0,3]\", e.getMessage());\n+    }\n+\n+    try {\n+      Parser.parse(\"binary_byte_format(1024, -1)\", ExprMacroTable.nil())\n+            .eval(bindings);\n+      Assert.assertTrue(false);\n+    }\n+    catch (IAE e) {\n+      Assert.assertEquals(\"Given precision[-1] of Function[binary_byte_format] must be in the range of [0,3]\", e.getMessage());\n+    }\n+\n+    try {\n+      Parser.parse(\"binary_byte_format(1024, 4)\", ExprMacroTable.nil())\n+            .eval(bindings);\n+      Assert.assertTrue(false);\n+    }\n+    catch (IAE e) {\n+      Assert.assertEquals(\"Given precision[4] of Function[binary_byte_format] must be in the range of [0,3]\", e.getMessage());\n+    }\n+  }\n+\n+  @Test\n+  public void testSizeFormatInvalidArgumentSize()\n+  {\n+    expectedException.expect(IAE.class);\n+    expectedException.expectMessage(\"Function[binary_byte_format] needs 1 or 2 arguments\");\n+    Parser.parse(\"binary_byte_format(1024, 2, 3)\", ExprMacroTable.nil())\n+          .eval(bindings);\n+  }\n+\n+  @Test\n+  public void testSizeFormatWithNoDefaultValueForNull()\n+  {\n+    NullHandling.updateForTests(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91e6a550ff8dbacae2d6da91262784df0a52d6c5"}, "originalPosition": 203}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e4eede275f1116ba8f2766fb014e0d6ecda600a", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/8e4eede275f1116ba8f2766fb014e0d6ecda600a", "committedDate": "2021-02-22T07:24:56Z", "message": "merge master to resolve conflicts\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94206b693ce67cf66741f340360e95268aeb3246", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/94206b693ce67cf66741f340360e95268aeb3246", "committedDate": "2021-02-22T07:39:33Z", "message": "add examples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f19e6a59ef82e4d056e05a6954b3a9203a040eec", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/f19e6a59ef82e4d056e05a6954b3a9203a040eec", "committedDate": "2021-02-22T09:09:28Z", "message": "change function names according to review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5dca644d6877d69dbc06d150f330f8fd0dcbaafa", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/5dca644d6877d69dbc06d150f330f8fd0dcbaafa", "committedDate": "2021-03-05T08:38:23Z", "message": "merge master to resolve conflicts\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47d22f9b0f479fa920a2315e1429c890859391c7", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/47d22f9b0f479fa920a2315e1429c890859391c7", "committedDate": "2021-03-05T10:24:17Z", "message": "fix merge\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad7d8312c46c22db73dada4f5e14caf894e976c0", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/ad7d8312c46c22db73dada4f5e14caf894e976c0", "committedDate": "2021-03-05T10:29:28Z", "message": "no need to configure NullHandling explicitly for tests\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3dbb1e5e0d5fabfdb116de89f0657a772605d3d", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/c3dbb1e5e0d5fabfdb116de89f0657a772605d3d", "committedDate": "2021-03-08T09:32:25Z", "message": "fix tests in SQL-Compatible mode\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f21bc878228dd68f11d2ff06afb5d543c68ad24e", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/f21bc878228dd68f11d2ff06afb5d543c68ad24e", "committedDate": "2021-05-13T02:01:15Z", "message": "Merge master to resolve conflicts\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "f21bc878228dd68f11d2ff06afb5d543c68ad24e", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/f21bc878228dd68f11d2ff06afb5d543c68ad24e", "committedDate": "2021-05-13T02:01:15Z", "message": "Merge master to resolve conflicts\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81195458fda6bb3f1ff2f1d918d5bf87568e2699", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/81195458fda6bb3f1ff2f1d918d5bf87568e2699", "committedDate": "2021-06-18T08:22:26Z", "message": "Merge branch 'master' into size-format to resolve conflicts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg5MzQ3NDM2", "url": "https://github.com/apache/druid/pull/10635#pullrequestreview-689347436", "createdAt": "2021-06-22T10:45:19Z", "commit": {"oid": "81195458fda6bb3f1ff2f1d918d5bf87568e2699"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yMlQxMDo0NToxOVrOJxtKDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yMlQxMDo0NToxOVrOJxtKDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NjA5OTg1Mg==", "bodyText": "this should use the recently added returnTypeCascadeNullable since it returns null if the input is null (see #11327)", "url": "https://github.com/apache/druid/pull/10635#discussion_r656099852", "createdAt": "2021-06-22T10:45:19Z", "author": {"login": "clintropolis"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/expression/builtin/HumanReadableFormatOperatorConversion.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.calcite.expression.builtin;\n+\n+import org.apache.calcite.rel.type.RelDataType;\n+import org.apache.calcite.rex.RexNode;\n+import org.apache.calcite.sql.SqlCallBinding;\n+import org.apache.calcite.sql.SqlFunction;\n+import org.apache.calcite.sql.SqlFunctionCategory;\n+import org.apache.calcite.sql.SqlOperandCountRange;\n+import org.apache.calcite.sql.SqlOperator;\n+import org.apache.calcite.sql.type.SqlOperandCountRanges;\n+import org.apache.calcite.sql.type.SqlOperandTypeChecker;\n+import org.apache.calcite.sql.type.SqlTypeName;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.segment.column.RowSignature;\n+import org.apache.druid.sql.calcite.expression.DruidExpression;\n+import org.apache.druid.sql.calcite.expression.OperatorConversions;\n+import org.apache.druid.sql.calcite.expression.SqlOperatorConversion;\n+import org.apache.druid.sql.calcite.planner.PlannerContext;\n+\n+public class HumanReadableFormatOperatorConversion implements SqlOperatorConversion\n+{\n+  public static final SqlOperatorConversion BINARY_BYTE_FORMAT = new HumanReadableFormatOperatorConversion(\"human_readable_binary_byte_format\");\n+  public static final SqlOperatorConversion DECIMAL_BYTE_FORMAT = new HumanReadableFormatOperatorConversion(\"human_readable_decimal_byte_format\");\n+  public static final SqlOperatorConversion DECIMAL_FORMAT = new HumanReadableFormatOperatorConversion(\"human_readable_decimal_format\");\n+\n+  private final String name;\n+  private final SqlFunction sqlFunction;\n+\n+  private HumanReadableFormatOperatorConversion(String name)\n+  {\n+    this.sqlFunction = OperatorConversions\n+        .operatorBuilder(StringUtils.toUpperCase(name))\n+        .operandTypeChecker(new HumanReadableFormatOperandTypeChecker())\n+        .functionCategory(SqlFunctionCategory.STRING)\n+        .returnTypeNonNull(SqlTypeName.VARCHAR)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81195458fda6bb3f1ff2f1d918d5bf87568e2699"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc7cc9bd95aeaab565ce1ad9b05b41c34935e7de", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/fc7cc9bd95aeaab565ce1ad9b05b41c34935e7de", "committedDate": "2021-06-23T08:47:05Z", "message": "Resolve review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa1f05795e2f829f977ed89cf10627f2727552d7", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/fa1f05795e2f829f977ed89cf10627f2727552d7", "committedDate": "2021-06-23T08:49:46Z", "message": "Update SQL test case to check null handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12edaabc96f385a2cd400f00ca71af74d0c7e160", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/12edaabc96f385a2cd400f00ca71af74d0c7e160", "committedDate": "2021-06-24T01:54:35Z", "message": "Fix intellij inspections"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjkzMjU1NTU0", "url": "https://github.com/apache/druid/pull/10635#pullrequestreview-693255554", "createdAt": "2021-06-26T00:07:22Z", "commit": {"oid": "12edaabc96f385a2cd400f00ca71af74d0c7e160"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27d9a41ade079ea807650adebf3fa5b6dbe806ba", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/27d9a41ade079ea807650adebf3fa5b6dbe806ba", "committedDate": "2021-06-26T16:02:05Z", "message": "Merge branch 'master' to resolve conflicts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "27d9a41ade079ea807650adebf3fa5b6dbe806ba", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/27d9a41ade079ea807650adebf3fa5b6dbe806ba", "committedDate": "2021-06-26T16:02:05Z", "message": "Merge branch 'master' to resolve conflicts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk0Njg3NDQx", "url": "https://github.com/apache/druid/pull/10635#pullrequestreview-694687441", "createdAt": "2021-06-29T07:35:49Z", "commit": {"oid": "27d9a41ade079ea807650adebf3fa5b6dbe806ba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yOVQwNzozNTo0OVrOJ1w-ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yOVQwNzozNTo0OVrOJ1w-ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDM1NjcxNA==", "bodyText": "@FrankChen021  can you add one example with a custom precision value? Maybe, one of these examples can be modified itself.", "url": "https://github.com/apache/druid/pull/10635#discussion_r660356714", "createdAt": "2021-06-29T07:35:49Z", "author": {"login": "abhishekagarwal87"}, "path": "docs/misc/math-expr.md", "diffHunk": "@@ -258,3 +258,12 @@ supported features:\n * math functions: `abs`, `acos`, `asin`, `atan`, `cbrt`, `ceil`, `cos`, `cosh`, `cot`, `exp`, `expm1`, `floor`, `getExponent`, `log`, `log10`, `log1p`, `nextUp`, `rint`, `signum`, `sin`, `sinh`, `sqrt`, `tan`, `tanh`, `toDegrees`, `toRadians`, `ulp`, `atan2`, `copySign`, `div`, `hypot`, `max`, `min`, `nextAfter`,  `pow`, `remainder`, `scalb` are supported for numeric types\n * time functions: `timestamp_floor` (with constant granularity argument) is supported for numeric types\n * other: `parse_long` is supported for numeric and string types\n+\n+\n+## Other functions\n+\n+| function | description |\n+| --- | --- |\n+| human_readable_binary_byte_format(value[, precision]) | Format a number in human-readable [IEC](https://en.wikipedia.org/wiki/Binary_prefix) format. For example, human_readable_binary_byte_format(1048576) returns `1.00 MiB`. `precision` must be in the range of [0,3] (default: 2). |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27d9a41ade079ea807650adebf3fa5b6dbe806ba"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30eb6eda3c521dc65bc36ef5f607332cee074bd2", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/30eb6eda3c521dc65bc36ef5f607332cee074bd2", "committedDate": "2021-06-29T09:12:31Z", "message": "Add more examples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e773dac201b3c56834ae31b88cc336b3cbf500a0", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/e773dac201b3c56834ae31b88cc336b3cbf500a0", "committedDate": "2021-06-29T09:15:33Z", "message": "Fix example"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk0NzkwMDIw", "url": "https://github.com/apache/druid/pull/10635#pullrequestreview-694790020", "createdAt": "2021-06-29T09:16:26Z", "commit": {"oid": "30eb6eda3c521dc65bc36ef5f607332cee074bd2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yOVQwOToxNjoyNlrOJ11qsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0yOVQwOToxNjoyNlrOJ11qsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MDQzMzU4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | human_readable_binary_byte_format(value[, precision]) | Format a number in human-readable [IEC](https://en.wikipedia.org/wiki/Binary_prefix) format. `precision` must be in the range of [0,3] (default: 2). For example:<li> human_readable_binary_byte_format(1048576) returns `1.00 MiB`</li><li>human_readable_binary_byte_format(1048576, 1) returns `1.000 MiB`</li> |\n          \n          \n            \n            | human_readable_binary_byte_format(value[, precision]) | Format a number in human-readable [IEC](https://en.wikipedia.org/wiki/Binary_prefix) format. `precision` must be in the range of [0,3] (default: 2). For example:<li> human_readable_binary_byte_format(1048576) returns `1.00 MiB`</li><li>human_readable_binary_byte_format(1048576, 1) returns `1.0 MiB`</li> |", "url": "https://github.com/apache/druid/pull/10635#discussion_r660433584", "createdAt": "2021-06-29T09:16:26Z", "author": {"login": "abhishekagarwal87"}, "path": "docs/misc/math-expr.md", "diffHunk": "@@ -258,3 +258,12 @@ supported features:\n * math functions: `abs`, `acos`, `asin`, `atan`, `cbrt`, `ceil`, `cos`, `cosh`, `cot`, `exp`, `expm1`, `floor`, `getExponent`, `log`, `log10`, `log1p`, `nextUp`, `rint`, `signum`, `sin`, `sinh`, `sqrt`, `tan`, `tanh`, `toDegrees`, `toRadians`, `ulp`, `atan2`, `copySign`, `div`, `hypot`, `max`, `min`, `nextAfter`,  `pow`, `remainder`, `scalb` are supported for numeric types\n * time functions: `timestamp_floor` (with constant granularity argument) is supported for numeric types\n * other: `parse_long` is supported for numeric and string types\n+\n+\n+## Other functions\n+\n+| function | description |\n+| --- | --- |\n+| human_readable_binary_byte_format(value[, precision]) | Format a number in human-readable [IEC](https://en.wikipedia.org/wiki/Binary_prefix) format. `precision` must be in the range of [0,3] (default: 2). For example:<li> human_readable_binary_byte_format(1048576) returns `1.00 MiB`</li><li>human_readable_binary_byte_format(1048576, 1) returns `1.000 MiB`</li> |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30eb6eda3c521dc65bc36ef5f607332cee074bd2"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk0NzkxNjU0", "url": "https://github.com/apache/druid/pull/10635#pullrequestreview-694791654", "createdAt": "2021-06-29T09:18:04Z", "commit": {"oid": "e773dac201b3c56834ae31b88cc336b3cbf500a0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3c62a3ac69a38a8b8372fa5ea62914dc5debc51", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/f3c62a3ac69a38a8b8372fa5ea62914dc5debc51", "committedDate": "2021-08-13T06:57:35Z", "message": "Merge branch 'master' into size-format\n\nSigned-off-by: frank chen <frank.chen021@outlook.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3133, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}