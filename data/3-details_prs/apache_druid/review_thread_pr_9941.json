{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MjA1NDQ4", "number": 9941, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDoyODoyNlrOEAiGIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDozNDoxNlrOEAiUsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTk0MDgwOnYy", "diffSide": "LEFT", "path": "sql/src/main/java/org/apache/druid/sql/calcite/planner/Rules.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDoyODoyNlrOGb3wFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMjo1NDo1MVrOGcNLFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg3ODE2Nw==", "bodyText": "What are your thoughts on having a list of rules that are excluded in the codebase somewhere (maybe just commented out in here). That way we can add documentation in the code about why each rule was excluded.\nIf any of the reasoning for why a rule was removed from this list changes, it would be easy to add back the rules to transform to more efficient queries.", "url": "https://github.com/apache/druid/pull/9941#discussion_r431878167", "createdAt": "2020-05-28T14:28:26Z", "author": {"login": "suneet-s"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/planner/Rules.java", "diffHunk": "@@ -130,7 +130,6 @@\n           ReduceExpressionsRule.FILTER_INSTANCE,\n           ReduceExpressionsRule.CALC_INSTANCE,\n           ReduceExpressionsRule.WINDOW_INSTANCE,\n-          ReduceExpressionsRule.JOIN_INSTANCE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2600c3f2d778c26533fc707a571ddf888fa5b170"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIyOTE0MA==", "bodyText": "Done. Added comments.", "url": "https://github.com/apache/druid/pull/9941#discussion_r432229140", "createdAt": "2020-05-29T02:54:51Z", "author": {"login": "maytasm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/planner/Rules.java", "diffHunk": "@@ -130,7 +130,6 @@\n           ReduceExpressionsRule.FILTER_INSTANCE,\n           ReduceExpressionsRule.CALC_INSTANCE,\n           ReduceExpressionsRule.WINDOW_INSTANCE,\n-          ReduceExpressionsRule.JOIN_INSTANCE,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg3ODE2Nw=="}, "originalCommit": {"oid": "2600c3f2d778c26533fc707a571ddf888fa5b170"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTk3ODA5OnYy", "diffSide": "RIGHT", "path": "sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDozNDoxNlrOGb4HMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMjo1NToyM1rOGcNLlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg4NDA4MQ==", "bodyText": "Can you add a test that fails a query with the shape defined in #9942", "url": "https://github.com/apache/druid/pull/9941#discussion_r431884081", "createdAt": "2020-05-28T14:34:16Z", "author": {"login": "suneet-s"}, "path": "sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java", "diffHunk": "@@ -13884,6 +13885,318 @@ public void testQueryContextOuterLimit() throws Exception\n     );\n   }\n \n+  @Test\n+  public void testCountOnSemiJoinSingleColumn() throws Exception\n+  {\n+    testQuery(\n+        \"SELECT dim1 FROM foo WHERE dim1 IN (SELECT dim1 FROM foo WHERE dim1 = '10.1')\\n\",\n+        ImmutableList.of(\n+            newScanQueryBuilder()\n+                .dataSource(\n+                    join(\n+                        new TableDataSource(CalciteTests.DATASOURCE1),\n+                        new QueryDataSource(\n+                            GroupByQuery.builder()\n+                                        .setDataSource(CalciteTests.DATASOURCE1)\n+                                        .setInterval(querySegmentSpec(Filtration.eternity()))\n+                                        .setDimFilter(\n+                                            selector(\"dim1\", \"10.1\", null)\n+                                        )\n+                                        .setGranularity(Granularities.ALL)\n+                                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\", \"d0\")))\n+                                        .setContext(QUERY_CONTEXT_DEFAULT)\n+                                        .build()\n+                        ),\n+                        \"j0.\",\n+                        equalsCondition(DruidExpression.fromColumn(\"dim1\"), DruidExpression.fromColumn(\"j0.d0\")),\n+                        JoinType.INNER\n+                    )\n+                )\n+                .intervals(querySegmentSpec(Filtration.eternity()))\n+                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                .columns(\"v0\")\n+                .context(QUERY_CONTEXT_DEFAULT)\n+                .build()\n+        ),\n+        ImmutableList.of(\n+            new Object[]{\"10.1\"}\n+        )\n+    );\n+  }\n+\n+  @Test\n+  public void testLeftJoinOnTwoInlineDataSourcesWithTimeFilter() throws Exception\n+  {\n+    testQuery(\n+        \"with abc as\\n\"\n+        + \"(\\n\"\n+        + \"  SELECT dim1, \\\"__time\\\", m1 from foo WHERE \\\"dim1\\\" = '10.1' AND \\\"__time\\\" >= '1999'\\n\"\n+        + \")\\n\"\n+        + \"SELECT t1.dim1, t1.\\\"__time\\\" from abc as t1 LEFT JOIN abc as t2 on t1.dim1 = t2.dim1 WHERE t1.dim1 = '10.1'\\n\",\n+        ImmutableList.of(\n+            newScanQueryBuilder()\n+                .dataSource(\n+                    join(\n+                        new QueryDataSource(\n+                            newScanQueryBuilder()\n+                                .dataSource(CalciteTests.DATASOURCE1)\n+                                .intervals(\n+                                    querySegmentSpec(\n+                                        Intervals.utc(\n+                                            DateTimes.of(\"1999-01-01\").getMillis(),\n+                                            JodaUtils.MAX_INSTANT\n+                                        )\n+                                    )\n+                                )\n+                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n+                                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                                .columns(ImmutableList.of(\"__time\", \"v0\"))\n+                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n+                                .context(QUERY_CONTEXT_DEFAULT)\n+                                .build()\n+                        ),\n+                        new QueryDataSource(\n+                            newScanQueryBuilder()\n+                                .dataSource(CalciteTests.DATASOURCE1)\n+                                .intervals(\n+                                    querySegmentSpec(\n+                                        Intervals.utc(\n+                                            DateTimes.of(\"1999-01-01\").getMillis(),\n+                                            JodaUtils.MAX_INSTANT\n+                                        )\n+                                    )\n+                                )\n+                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n+                                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                                .columns(ImmutableList.of(\"v0\"))\n+                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n+                                .context(QUERY_CONTEXT_DEFAULT)\n+                                .build()\n+                        ),\n+                        \"j0.\",\n+                        equalsCondition(DruidExpression.fromColumn(\"v0\"), DruidExpression.fromColumn(\"j0.v0\")),\n+                        JoinType.LEFT\n+                    )\n+                )\n+                .intervals(querySegmentSpec(Filtration.eternity()))\n+                .virtualColumns(expressionVirtualColumn(\"_v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                .columns(\"__time\", \"_v0\")\n+                .filters(new SelectorDimFilter(\"v0\", \"10.1\", null))\n+                .context(QUERY_CONTEXT_DEFAULT)\n+                .build()\n+        ),\n+        ImmutableList.of(\n+            new Object[]{\"10.1\", 946771200000L}\n+        )\n+    );\n+  }\n+\n+  @Test\n+  public void testLeftJoinOnTwoInlineDataSourcesWithOuterWhere() throws Exception\n+  {\n+    testQuery(\n+        \"with abc as\\n\"\n+        + \"(\\n\"\n+        + \"  SELECT dim1, \\\"__time\\\", m1 from foo WHERE \\\"dim1\\\" = '10.1'\\n\"\n+        + \")\\n\"\n+        + \"SELECT t1.dim1, t1.\\\"__time\\\" from abc as t1 LEFT JOIN abc as t2 on t1.dim1 = t2.dim1 WHERE t1.dim1 = '10.1'\\n\",\n+        ImmutableList.of(\n+            newScanQueryBuilder()\n+                .dataSource(\n+                    join(\n+                        new QueryDataSource(\n+                            newScanQueryBuilder()\n+                                .dataSource(CalciteTests.DATASOURCE1)\n+                                .intervals(querySegmentSpec(Filtration.eternity()))\n+                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n+                                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                                .columns(ImmutableList.of(\"__time\", \"v0\"))\n+                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n+                                .context(QUERY_CONTEXT_DEFAULT)\n+                                .build()\n+                        ),\n+                        new QueryDataSource(\n+                            newScanQueryBuilder()\n+                                .dataSource(CalciteTests.DATASOURCE1)\n+                                .intervals(querySegmentSpec(Filtration.eternity()))\n+                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n+                                .columns(ImmutableList.of(\"dim1\"))\n+                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n+                                .context(QUERY_CONTEXT_DEFAULT)\n+                                .build()\n+                        ),\n+                        \"j0.\",\n+                        equalsCondition(DruidExpression.fromColumn(\"v0\"), DruidExpression.fromColumn(\"j0.dim1\")),\n+                        JoinType.LEFT\n+                    )\n+                )\n+                .intervals(querySegmentSpec(Filtration.eternity()))\n+                .virtualColumns(expressionVirtualColumn(\"_v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                .columns(\"__time\", \"_v0\")\n+                .filters(new SelectorDimFilter(\"v0\", \"10.1\", null))\n+                .context(QUERY_CONTEXT_DEFAULT)\n+                .build()\n+        ),\n+        ImmutableList.of(\n+            new Object[]{\"10.1\", 946771200000L}\n+        )\n+    );\n+  }\n+\n+  @Test\n+  public void testLeftJoinOnTwoInlineDataSources() throws Exception\n+  {\n+    testQuery(\n+        \"with abc as\\n\"\n+        + \"(\\n\"\n+        + \"  SELECT dim1, \\\"__time\\\", m1 from foo WHERE \\\"dim1\\\" = '10.1'\\n\"\n+        + \")\\n\"\n+        + \"SELECT t1.dim1, t1.\\\"__time\\\" from abc as t1 LEFT JOIN abc as t2 on t1.dim1 = t2.dim1\\n\",\n+        ImmutableList.of(\n+            newScanQueryBuilder()\n+                .dataSource(\n+                    join(\n+                        new QueryDataSource(\n+                            newScanQueryBuilder()\n+                                .dataSource(CalciteTests.DATASOURCE1)\n+                                .intervals(querySegmentSpec(Filtration.eternity()))\n+                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n+                                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                                .columns(ImmutableList.of(\"__time\", \"v0\"))\n+                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n+                                .context(QUERY_CONTEXT_DEFAULT)\n+                                .build()\n+                        ),\n+                        new QueryDataSource(\n+                            newScanQueryBuilder()\n+                                .dataSource(CalciteTests.DATASOURCE1)\n+                                .intervals(querySegmentSpec(Filtration.eternity()))\n+                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n+                                .columns(ImmutableList.of(\"dim1\"))\n+                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n+                                .context(QUERY_CONTEXT_DEFAULT)\n+                                .build()\n+                        ),\n+                        \"j0.\",\n+                        equalsCondition(DruidExpression.fromColumn(\"v0\"), DruidExpression.fromColumn(\"j0.dim1\")),\n+                        JoinType.LEFT\n+                    )\n+                )\n+                .intervals(querySegmentSpec(Filtration.eternity()))\n+                .virtualColumns(expressionVirtualColumn(\"_v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                .columns(\"__time\", \"_v0\")\n+                .context(QUERY_CONTEXT_DEFAULT)\n+                .build()\n+        ),\n+        ImmutableList.of(\n+            new Object[]{\"10.1\", 946771200000L}\n+        )\n+    );\n+  }\n+\n+  @Test\n+  public void testInnerJoinOnTwoInlineDataSourcesWithOuterWhere() throws Exception\n+  {\n+    testQuery(\n+        \"with abc as\\n\"\n+        + \"(\\n\"\n+        + \"  SELECT dim1, \\\"__time\\\", m1 from foo WHERE \\\"dim1\\\" = '10.1'\\n\"\n+        + \")\\n\"\n+        + \"SELECT t1.dim1, t1.\\\"__time\\\" from abc as t1 INNER JOIN abc as t2 on t1.dim1 = t2.dim1 WHERE t1.dim1 = '10.1'\\n\",\n+        ImmutableList.of(\n+            newScanQueryBuilder()\n+                .dataSource(\n+                    join(\n+                        new QueryDataSource(\n+                            newScanQueryBuilder()\n+                                .dataSource(CalciteTests.DATASOURCE1)\n+                                .intervals(querySegmentSpec(Filtration.eternity()))\n+                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n+                                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                                .columns(ImmutableList.of(\"__time\", \"v0\"))\n+                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n+                                .context(QUERY_CONTEXT_DEFAULT)\n+                                .build()\n+                        ),\n+                        new QueryDataSource(\n+                            newScanQueryBuilder()\n+                                .dataSource(CalciteTests.DATASOURCE1)\n+                                .intervals(querySegmentSpec(Filtration.eternity()))\n+                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n+                                .columns(ImmutableList.of(\"dim1\"))\n+                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n+                                .context(QUERY_CONTEXT_DEFAULT)\n+                                .build()\n+                        ),\n+                        \"j0.\",\n+                        equalsCondition(DruidExpression.fromColumn(\"v0\"), DruidExpression.fromColumn(\"j0.dim1\")),\n+                        JoinType.INNER\n+                    )\n+                )\n+                .intervals(querySegmentSpec(Filtration.eternity()))\n+                .virtualColumns(expressionVirtualColumn(\"_v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                .columns(\"__time\", \"_v0\")\n+                .filters(new NotDimFilter(new SelectorDimFilter(\"v0\", null, null)))\n+                .context(QUERY_CONTEXT_DEFAULT)\n+                .build()\n+        ),\n+        ImmutableList.of(\n+            new Object[]{\"10.1\", 946771200000L}\n+        )\n+    );\n+  }\n+\n+  @Test\n+  public void testInnerJoinOnTwoInlineDataSources() throws Exception\n+  {\n+    testQuery(\n+        \"with abc as\\n\"\n+        + \"(\\n\"\n+        + \"  SELECT dim1, \\\"__time\\\", m1 from foo WHERE \\\"dim1\\\" = '10.1'\\n\"\n+        + \")\\n\"\n+        + \"SELECT t1.dim1, t1.\\\"__time\\\" from abc as t1 INNER JOIN abc as t2 on t1.dim1 = t2.dim1\\n\",\n+        ImmutableList.of(\n+            newScanQueryBuilder()\n+                .dataSource(\n+                    join(\n+                        new QueryDataSource(\n+                            newScanQueryBuilder()\n+                                .dataSource(CalciteTests.DATASOURCE1)\n+                                .intervals(querySegmentSpec(Filtration.eternity()))\n+                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n+                                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                                .columns(ImmutableList.of(\"__time\", \"v0\"))\n+                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n+                                .context(QUERY_CONTEXT_DEFAULT)\n+                                .build()\n+                        ),\n+                        new QueryDataSource(\n+                            newScanQueryBuilder()\n+                                .dataSource(CalciteTests.DATASOURCE1)\n+                                .intervals(querySegmentSpec(Filtration.eternity()))\n+                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n+                                .columns(ImmutableList.of(\"dim1\"))\n+                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n+                                .context(QUERY_CONTEXT_DEFAULT)\n+                                .build()\n+                        ),\n+                        \"j0.\",\n+                        equalsCondition(DruidExpression.fromColumn(\"v0\"), DruidExpression.fromColumn(\"j0.dim1\")),\n+                        JoinType.INNER\n+                    )\n+                )\n+                .intervals(querySegmentSpec(Filtration.eternity()))\n+                .virtualColumns(expressionVirtualColumn(\"_v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                .columns(\"__time\", \"_v0\")\n+                .context(QUERY_CONTEXT_DEFAULT)\n+                .build()\n+        ),\n+        ImmutableList.of(\n+            new Object[]{\"10.1\", 946771200000L}\n+        )\n+    );\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2600c3f2d778c26533fc707a571ddf888fa5b170"}, "originalPosition": 332}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIyOTI3MA==", "bodyText": "Done", "url": "https://github.com/apache/druid/pull/9941#discussion_r432229270", "createdAt": "2020-05-29T02:55:23Z", "author": {"login": "maytasm"}, "path": "sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java", "diffHunk": "@@ -13884,6 +13885,318 @@ public void testQueryContextOuterLimit() throws Exception\n     );\n   }\n \n+  @Test\n+  public void testCountOnSemiJoinSingleColumn() throws Exception\n+  {\n+    testQuery(\n+        \"SELECT dim1 FROM foo WHERE dim1 IN (SELECT dim1 FROM foo WHERE dim1 = '10.1')\\n\",\n+        ImmutableList.of(\n+            newScanQueryBuilder()\n+                .dataSource(\n+                    join(\n+                        new TableDataSource(CalciteTests.DATASOURCE1),\n+                        new QueryDataSource(\n+                            GroupByQuery.builder()\n+                                        .setDataSource(CalciteTests.DATASOURCE1)\n+                                        .setInterval(querySegmentSpec(Filtration.eternity()))\n+                                        .setDimFilter(\n+                                            selector(\"dim1\", \"10.1\", null)\n+                                        )\n+                                        .setGranularity(Granularities.ALL)\n+                                        .setDimensions(dimensions(new DefaultDimensionSpec(\"dim1\", \"d0\")))\n+                                        .setContext(QUERY_CONTEXT_DEFAULT)\n+                                        .build()\n+                        ),\n+                        \"j0.\",\n+                        equalsCondition(DruidExpression.fromColumn(\"dim1\"), DruidExpression.fromColumn(\"j0.d0\")),\n+                        JoinType.INNER\n+                    )\n+                )\n+                .intervals(querySegmentSpec(Filtration.eternity()))\n+                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                .columns(\"v0\")\n+                .context(QUERY_CONTEXT_DEFAULT)\n+                .build()\n+        ),\n+        ImmutableList.of(\n+            new Object[]{\"10.1\"}\n+        )\n+    );\n+  }\n+\n+  @Test\n+  public void testLeftJoinOnTwoInlineDataSourcesWithTimeFilter() throws Exception\n+  {\n+    testQuery(\n+        \"with abc as\\n\"\n+        + \"(\\n\"\n+        + \"  SELECT dim1, \\\"__time\\\", m1 from foo WHERE \\\"dim1\\\" = '10.1' AND \\\"__time\\\" >= '1999'\\n\"\n+        + \")\\n\"\n+        + \"SELECT t1.dim1, t1.\\\"__time\\\" from abc as t1 LEFT JOIN abc as t2 on t1.dim1 = t2.dim1 WHERE t1.dim1 = '10.1'\\n\",\n+        ImmutableList.of(\n+            newScanQueryBuilder()\n+                .dataSource(\n+                    join(\n+                        new QueryDataSource(\n+                            newScanQueryBuilder()\n+                                .dataSource(CalciteTests.DATASOURCE1)\n+                                .intervals(\n+                                    querySegmentSpec(\n+                                        Intervals.utc(\n+                                            DateTimes.of(\"1999-01-01\").getMillis(),\n+                                            JodaUtils.MAX_INSTANT\n+                                        )\n+                                    )\n+                                )\n+                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n+                                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                                .columns(ImmutableList.of(\"__time\", \"v0\"))\n+                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n+                                .context(QUERY_CONTEXT_DEFAULT)\n+                                .build()\n+                        ),\n+                        new QueryDataSource(\n+                            newScanQueryBuilder()\n+                                .dataSource(CalciteTests.DATASOURCE1)\n+                                .intervals(\n+                                    querySegmentSpec(\n+                                        Intervals.utc(\n+                                            DateTimes.of(\"1999-01-01\").getMillis(),\n+                                            JodaUtils.MAX_INSTANT\n+                                        )\n+                                    )\n+                                )\n+                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n+                                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                                .columns(ImmutableList.of(\"v0\"))\n+                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n+                                .context(QUERY_CONTEXT_DEFAULT)\n+                                .build()\n+                        ),\n+                        \"j0.\",\n+                        equalsCondition(DruidExpression.fromColumn(\"v0\"), DruidExpression.fromColumn(\"j0.v0\")),\n+                        JoinType.LEFT\n+                    )\n+                )\n+                .intervals(querySegmentSpec(Filtration.eternity()))\n+                .virtualColumns(expressionVirtualColumn(\"_v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                .columns(\"__time\", \"_v0\")\n+                .filters(new SelectorDimFilter(\"v0\", \"10.1\", null))\n+                .context(QUERY_CONTEXT_DEFAULT)\n+                .build()\n+        ),\n+        ImmutableList.of(\n+            new Object[]{\"10.1\", 946771200000L}\n+        )\n+    );\n+  }\n+\n+  @Test\n+  public void testLeftJoinOnTwoInlineDataSourcesWithOuterWhere() throws Exception\n+  {\n+    testQuery(\n+        \"with abc as\\n\"\n+        + \"(\\n\"\n+        + \"  SELECT dim1, \\\"__time\\\", m1 from foo WHERE \\\"dim1\\\" = '10.1'\\n\"\n+        + \")\\n\"\n+        + \"SELECT t1.dim1, t1.\\\"__time\\\" from abc as t1 LEFT JOIN abc as t2 on t1.dim1 = t2.dim1 WHERE t1.dim1 = '10.1'\\n\",\n+        ImmutableList.of(\n+            newScanQueryBuilder()\n+                .dataSource(\n+                    join(\n+                        new QueryDataSource(\n+                            newScanQueryBuilder()\n+                                .dataSource(CalciteTests.DATASOURCE1)\n+                                .intervals(querySegmentSpec(Filtration.eternity()))\n+                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n+                                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                                .columns(ImmutableList.of(\"__time\", \"v0\"))\n+                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n+                                .context(QUERY_CONTEXT_DEFAULT)\n+                                .build()\n+                        ),\n+                        new QueryDataSource(\n+                            newScanQueryBuilder()\n+                                .dataSource(CalciteTests.DATASOURCE1)\n+                                .intervals(querySegmentSpec(Filtration.eternity()))\n+                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n+                                .columns(ImmutableList.of(\"dim1\"))\n+                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n+                                .context(QUERY_CONTEXT_DEFAULT)\n+                                .build()\n+                        ),\n+                        \"j0.\",\n+                        equalsCondition(DruidExpression.fromColumn(\"v0\"), DruidExpression.fromColumn(\"j0.dim1\")),\n+                        JoinType.LEFT\n+                    )\n+                )\n+                .intervals(querySegmentSpec(Filtration.eternity()))\n+                .virtualColumns(expressionVirtualColumn(\"_v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                .columns(\"__time\", \"_v0\")\n+                .filters(new SelectorDimFilter(\"v0\", \"10.1\", null))\n+                .context(QUERY_CONTEXT_DEFAULT)\n+                .build()\n+        ),\n+        ImmutableList.of(\n+            new Object[]{\"10.1\", 946771200000L}\n+        )\n+    );\n+  }\n+\n+  @Test\n+  public void testLeftJoinOnTwoInlineDataSources() throws Exception\n+  {\n+    testQuery(\n+        \"with abc as\\n\"\n+        + \"(\\n\"\n+        + \"  SELECT dim1, \\\"__time\\\", m1 from foo WHERE \\\"dim1\\\" = '10.1'\\n\"\n+        + \")\\n\"\n+        + \"SELECT t1.dim1, t1.\\\"__time\\\" from abc as t1 LEFT JOIN abc as t2 on t1.dim1 = t2.dim1\\n\",\n+        ImmutableList.of(\n+            newScanQueryBuilder()\n+                .dataSource(\n+                    join(\n+                        new QueryDataSource(\n+                            newScanQueryBuilder()\n+                                .dataSource(CalciteTests.DATASOURCE1)\n+                                .intervals(querySegmentSpec(Filtration.eternity()))\n+                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n+                                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                                .columns(ImmutableList.of(\"__time\", \"v0\"))\n+                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n+                                .context(QUERY_CONTEXT_DEFAULT)\n+                                .build()\n+                        ),\n+                        new QueryDataSource(\n+                            newScanQueryBuilder()\n+                                .dataSource(CalciteTests.DATASOURCE1)\n+                                .intervals(querySegmentSpec(Filtration.eternity()))\n+                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n+                                .columns(ImmutableList.of(\"dim1\"))\n+                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n+                                .context(QUERY_CONTEXT_DEFAULT)\n+                                .build()\n+                        ),\n+                        \"j0.\",\n+                        equalsCondition(DruidExpression.fromColumn(\"v0\"), DruidExpression.fromColumn(\"j0.dim1\")),\n+                        JoinType.LEFT\n+                    )\n+                )\n+                .intervals(querySegmentSpec(Filtration.eternity()))\n+                .virtualColumns(expressionVirtualColumn(\"_v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                .columns(\"__time\", \"_v0\")\n+                .context(QUERY_CONTEXT_DEFAULT)\n+                .build()\n+        ),\n+        ImmutableList.of(\n+            new Object[]{\"10.1\", 946771200000L}\n+        )\n+    );\n+  }\n+\n+  @Test\n+  public void testInnerJoinOnTwoInlineDataSourcesWithOuterWhere() throws Exception\n+  {\n+    testQuery(\n+        \"with abc as\\n\"\n+        + \"(\\n\"\n+        + \"  SELECT dim1, \\\"__time\\\", m1 from foo WHERE \\\"dim1\\\" = '10.1'\\n\"\n+        + \")\\n\"\n+        + \"SELECT t1.dim1, t1.\\\"__time\\\" from abc as t1 INNER JOIN abc as t2 on t1.dim1 = t2.dim1 WHERE t1.dim1 = '10.1'\\n\",\n+        ImmutableList.of(\n+            newScanQueryBuilder()\n+                .dataSource(\n+                    join(\n+                        new QueryDataSource(\n+                            newScanQueryBuilder()\n+                                .dataSource(CalciteTests.DATASOURCE1)\n+                                .intervals(querySegmentSpec(Filtration.eternity()))\n+                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n+                                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                                .columns(ImmutableList.of(\"__time\", \"v0\"))\n+                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n+                                .context(QUERY_CONTEXT_DEFAULT)\n+                                .build()\n+                        ),\n+                        new QueryDataSource(\n+                            newScanQueryBuilder()\n+                                .dataSource(CalciteTests.DATASOURCE1)\n+                                .intervals(querySegmentSpec(Filtration.eternity()))\n+                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n+                                .columns(ImmutableList.of(\"dim1\"))\n+                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n+                                .context(QUERY_CONTEXT_DEFAULT)\n+                                .build()\n+                        ),\n+                        \"j0.\",\n+                        equalsCondition(DruidExpression.fromColumn(\"v0\"), DruidExpression.fromColumn(\"j0.dim1\")),\n+                        JoinType.INNER\n+                    )\n+                )\n+                .intervals(querySegmentSpec(Filtration.eternity()))\n+                .virtualColumns(expressionVirtualColumn(\"_v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                .columns(\"__time\", \"_v0\")\n+                .filters(new NotDimFilter(new SelectorDimFilter(\"v0\", null, null)))\n+                .context(QUERY_CONTEXT_DEFAULT)\n+                .build()\n+        ),\n+        ImmutableList.of(\n+            new Object[]{\"10.1\", 946771200000L}\n+        )\n+    );\n+  }\n+\n+  @Test\n+  public void testInnerJoinOnTwoInlineDataSources() throws Exception\n+  {\n+    testQuery(\n+        \"with abc as\\n\"\n+        + \"(\\n\"\n+        + \"  SELECT dim1, \\\"__time\\\", m1 from foo WHERE \\\"dim1\\\" = '10.1'\\n\"\n+        + \")\\n\"\n+        + \"SELECT t1.dim1, t1.\\\"__time\\\" from abc as t1 INNER JOIN abc as t2 on t1.dim1 = t2.dim1\\n\",\n+        ImmutableList.of(\n+            newScanQueryBuilder()\n+                .dataSource(\n+                    join(\n+                        new QueryDataSource(\n+                            newScanQueryBuilder()\n+                                .dataSource(CalciteTests.DATASOURCE1)\n+                                .intervals(querySegmentSpec(Filtration.eternity()))\n+                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n+                                .virtualColumns(expressionVirtualColumn(\"v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                                .columns(ImmutableList.of(\"__time\", \"v0\"))\n+                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n+                                .context(QUERY_CONTEXT_DEFAULT)\n+                                .build()\n+                        ),\n+                        new QueryDataSource(\n+                            newScanQueryBuilder()\n+                                .dataSource(CalciteTests.DATASOURCE1)\n+                                .intervals(querySegmentSpec(Filtration.eternity()))\n+                                .filters(new SelectorDimFilter(\"dim1\", \"10.1\", null))\n+                                .columns(ImmutableList.of(\"dim1\"))\n+                                .resultFormat(ScanQuery.ResultFormat.RESULT_FORMAT_COMPACTED_LIST)\n+                                .context(QUERY_CONTEXT_DEFAULT)\n+                                .build()\n+                        ),\n+                        \"j0.\",\n+                        equalsCondition(DruidExpression.fromColumn(\"v0\"), DruidExpression.fromColumn(\"j0.dim1\")),\n+                        JoinType.INNER\n+                    )\n+                )\n+                .intervals(querySegmentSpec(Filtration.eternity()))\n+                .virtualColumns(expressionVirtualColumn(\"_v0\", \"\\'10.1\\'\", ValueType.STRING))\n+                .columns(\"__time\", \"_v0\")\n+                .context(QUERY_CONTEXT_DEFAULT)\n+                .build()\n+        ),\n+        ImmutableList.of(\n+            new Object[]{\"10.1\", 946771200000L}\n+        )\n+    );\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg4NDA4MQ=="}, "originalCommit": {"oid": "2600c3f2d778c26533fc707a571ddf888fa5b170"}, "originalPosition": 332}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2482, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}