{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMTc5MTA2", "number": 9638, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDoyMzoxN1rODwJs9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODozNDo1NVrOEb9p4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODE3MjA0OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/aggregation/PostAggregator.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDoyMzoxN1rOGC_i_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDozNzo0N1rOHClzGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc5MTQ4Ng==", "bodyText": "why do we need this one ?", "url": "https://github.com/apache/druid/pull/9638#discussion_r405791486", "createdAt": "2020-04-08T20:23:17Z", "author": {"login": "himanshug"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/PostAggregator.java", "diffHunk": "@@ -43,6 +45,13 @@\n   @Nullable\n   String getName();\n \n+  String getTypeName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2aa12f64a8291e256ac58e039837057f289822e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAxMTIyMA==", "bodyText": "Ah, good point, this isn't really used currently. Initially this was the only method I added to PostAggregator in this branch, along with getFinalizedTypeName to AggregatorFactory. However since the main users of getTypeName on AggregatorFactory (besides ComplexMetricSerde) and the only usages of these new methods, are converting to ValueType, I pivoted near completion to add the additional methods that just directly return the needed thing.\nI left it in because I sort of have a dream that one day ComplexMetrics will be rebranded into ComplexTypes to spiritually decouple it from Aggregators, but will still provide a mapping of all the getTypeName strings for aggs (and now maybe postaggs, and anything else?) that have ValueType.COMPLEX for getType to a serde as is now, forming a centralized registry for all complex types. Whether this is actually useful or not I am not yet totally certain, maybe just using jackson like we do now for everything that isn't part of a segment is enough; I think I will need to think a bit more about this, and maybe get deeper into some of the follow-up work before it will become fully apparent.\nShould I remove it for now since it isn't really being used other than as a vessel to convert to ValueType? I still find it sort of useful to make it super obvious what actual type is being spit out by the PostAggregator is since its significantly more descriptive than ValueType.COMPLEX, and easier than examining the output of the compute method closely, but I guess javadocs could accomplish the same thing.\nAt minimum I was still planning to add javadocs to this interface, so could document how it isn't really used, if you're cool with leaving it in for now, or I can remove. I'll try to think about this some more as well as I try to wrap up this PR.", "url": "https://github.com/apache/druid/pull/9638#discussion_r406011220", "createdAt": "2020-04-09T07:34:53Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/PostAggregator.java", "diffHunk": "@@ -43,6 +45,13 @@\n   @Nullable\n   String getName();\n \n+  String getTypeName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc5MTQ4Ng=="}, "originalCommit": {"oid": "f2aa12f64a8291e256ac58e039837057f289822e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQxOTY0OA==", "bodyText": "I think, it could be added in the PR that starts using it so as to remove any confusion unless there is a distinct advantage to adding it now that  I missed :)", "url": "https://github.com/apache/druid/pull/9638#discussion_r406419648", "createdAt": "2020-04-09T19:12:02Z", "author": {"login": "himanshug"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/PostAggregator.java", "diffHunk": "@@ -43,6 +45,13 @@\n   @Nullable\n   String getName();\n \n+  String getTypeName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc5MTQ4Ng=="}, "originalCommit": {"oid": "f2aa12f64a8291e256ac58e039837057f289822e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ3ODQ5MA==", "bodyText": "I have removed typeName from PostAggregators since it isn't necessary.\nBetween the changes here, changes in #10277, and some other recent changes I have made, it is almost starting to look to me that perhaps aggs and postaggs should just consider supplying ColumnCapabilities of their own instead of just types, but I'll save that for future consideration.", "url": "https://github.com/apache/druid/pull/9638#discussion_r472478490", "createdAt": "2020-08-18T20:37:47Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/PostAggregator.java", "diffHunk": "@@ -43,6 +45,13 @@\n   @Nullable\n   String getName();\n \n+  String getTypeName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc5MTQ4Ng=="}, "originalCommit": {"oid": "f2aa12f64a8291e256ac58e039837057f289822e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODIxMTg1OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/aggregation/AggregatorFactory.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDozNDo0MFrOGC_7Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDozNDoxNlrOHClriQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc5NzcxNA==", "bodyText": "can we add a blurb recommending this method be explicitly overridden by complex AggregatorFactory impls as the default here is likely wrong for those.", "url": "https://github.com/apache/druid/pull/9638#discussion_r405797714", "createdAt": "2020-04-08T20:34:40Z", "author": {"login": "himanshug"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/AggregatorFactory.java", "diffHunk": "@@ -214,19 +216,42 @@ public AggregatorFactory getMergingFactory(AggregatorFactory other) throws Aggre\n    * {@link #deserialize} and the type accepted by {@link #combine}. However, it is *not* necessarily the same type\n    * returned by {@link #finalizeComputation}.\n    *\n-   * If the type is complex (i.e. not a simple, numeric {@link org.apache.druid.segment.column.ValueType}) then there\n+   * If the type is complex (i.e. not a simple, numeric {@link ValueType}) then there\n    * must be a corresponding {@link org.apache.druid.segment.serde.ComplexMetricSerde} which was registered with\n    * {@link org.apache.druid.segment.serde.ComplexMetrics#registerSerde} using this type name.\n    *\n-   * If you need a ValueType enum corresponding to this aggregator, a good way to do that is:\n-   *\n-   * <pre>\n-   *   Optional.ofNullable(GuavaUtils.getEnumIfPresent(ValueType.class, aggregator.getTypeName()))\n-   *           .orElse(ValueType.COMPLEX);\n-   * </pre>\n+   * If you need a ValueType enum corresponding to this aggregator, use {@link #getTypeName} instead.\n    */\n   public abstract String getTypeName();\n \n+  /**\n+   * Get the type name for the 'finalized' type for this aggregator, i.e. the type of the value returned by\n+   * {@link #finalizeComputation}. This may be the same as or different than the types expected in {@link #deserialize}\n+   * and {@link #combine}.\n+   *\n+   * If you need a ValueType enum corresponding to this aggregator, use {@link #getFinalizedType} instead.\n+   */\n+  public String getFinalizedTypeName()\n+  {\n+    return getTypeName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2aa12f64a8291e256ac58e039837057f289822e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAxMjA4Mw==", "bodyText": "This might actually be better as an abstract method so that all AggregatorFactory must explicitly specify the finalized type, but I was somewhat worried about it being a bit disruptive. I think it is worth discussing if abstract would be better, but yeah at least will add javadocs.", "url": "https://github.com/apache/druid/pull/9638#discussion_r406012083", "createdAt": "2020-04-09T07:36:37Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/AggregatorFactory.java", "diffHunk": "@@ -214,19 +216,42 @@ public AggregatorFactory getMergingFactory(AggregatorFactory other) throws Aggre\n    * {@link #deserialize} and the type accepted by {@link #combine}. However, it is *not* necessarily the same type\n    * returned by {@link #finalizeComputation}.\n    *\n-   * If the type is complex (i.e. not a simple, numeric {@link org.apache.druid.segment.column.ValueType}) then there\n+   * If the type is complex (i.e. not a simple, numeric {@link ValueType}) then there\n    * must be a corresponding {@link org.apache.druid.segment.serde.ComplexMetricSerde} which was registered with\n    * {@link org.apache.druid.segment.serde.ComplexMetrics#registerSerde} using this type name.\n    *\n-   * If you need a ValueType enum corresponding to this aggregator, a good way to do that is:\n-   *\n-   * <pre>\n-   *   Optional.ofNullable(GuavaUtils.getEnumIfPresent(ValueType.class, aggregator.getTypeName()))\n-   *           .orElse(ValueType.COMPLEX);\n-   * </pre>\n+   * If you need a ValueType enum corresponding to this aggregator, use {@link #getTypeName} instead.\n    */\n   public abstract String getTypeName();\n \n+  /**\n+   * Get the type name for the 'finalized' type for this aggregator, i.e. the type of the value returned by\n+   * {@link #finalizeComputation}. This may be the same as or different than the types expected in {@link #deserialize}\n+   * and {@link #combine}.\n+   *\n+   * If you need a ValueType enum corresponding to this aggregator, use {@link #getFinalizedType} instead.\n+   */\n+  public String getFinalizedTypeName()\n+  {\n+    return getTypeName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc5NzcxNA=="}, "originalCommit": {"oid": "f2aa12f64a8291e256ac58e039837057f289822e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQzNTQxMg==", "bodyText": "actually, this one can also be removed and we just need to have getFinalizedType() and it having default impl return getType()  .\nI didn't suggest making it abstract because it does work correctly for all of aggregators dealing with primitives, so default is ok specially because \"wrong\" behavior doesn't appear to cause any correctness issue for query processing.", "url": "https://github.com/apache/druid/pull/9638#discussion_r406435412", "createdAt": "2020-04-09T19:43:05Z", "author": {"login": "himanshug"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/AggregatorFactory.java", "diffHunk": "@@ -214,19 +216,42 @@ public AggregatorFactory getMergingFactory(AggregatorFactory other) throws Aggre\n    * {@link #deserialize} and the type accepted by {@link #combine}. However, it is *not* necessarily the same type\n    * returned by {@link #finalizeComputation}.\n    *\n-   * If the type is complex (i.e. not a simple, numeric {@link org.apache.druid.segment.column.ValueType}) then there\n+   * If the type is complex (i.e. not a simple, numeric {@link ValueType}) then there\n    * must be a corresponding {@link org.apache.druid.segment.serde.ComplexMetricSerde} which was registered with\n    * {@link org.apache.druid.segment.serde.ComplexMetrics#registerSerde} using this type name.\n    *\n-   * If you need a ValueType enum corresponding to this aggregator, a good way to do that is:\n-   *\n-   * <pre>\n-   *   Optional.ofNullable(GuavaUtils.getEnumIfPresent(ValueType.class, aggregator.getTypeName()))\n-   *           .orElse(ValueType.COMPLEX);\n-   * </pre>\n+   * If you need a ValueType enum corresponding to this aggregator, use {@link #getTypeName} instead.\n    */\n   public abstract String getTypeName();\n \n+  /**\n+   * Get the type name for the 'finalized' type for this aggregator, i.e. the type of the value returned by\n+   * {@link #finalizeComputation}. This may be the same as or different than the types expected in {@link #deserialize}\n+   * and {@link #combine}.\n+   *\n+   * If you need a ValueType enum corresponding to this aggregator, use {@link #getFinalizedType} instead.\n+   */\n+  public String getFinalizedTypeName()\n+  {\n+    return getTypeName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc5NzcxNA=="}, "originalCommit": {"oid": "f2aa12f64a8291e256ac58e039837057f289822e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU5MDA1Mw==", "bodyText": "I think maybe if we remove both getFinalizedTypeName from the AggregatorFactory and getTypeName from the PostAggregator, we should also maybe consider renaming AggregatorFactory.getTypeName to be AggregatorFactory.getComplexTypeName or something similar, and ensure it is only still called for getting a ComplexMetricSerde for the aggregator. I'll look into this when I get back to this branch, but a rename like that might be sort of disruptive to extension writers.", "url": "https://github.com/apache/druid/pull/9638#discussion_r406590053", "createdAt": "2020-04-10T03:48:46Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/AggregatorFactory.java", "diffHunk": "@@ -214,19 +216,42 @@ public AggregatorFactory getMergingFactory(AggregatorFactory other) throws Aggre\n    * {@link #deserialize} and the type accepted by {@link #combine}. However, it is *not* necessarily the same type\n    * returned by {@link #finalizeComputation}.\n    *\n-   * If the type is complex (i.e. not a simple, numeric {@link org.apache.druid.segment.column.ValueType}) then there\n+   * If the type is complex (i.e. not a simple, numeric {@link ValueType}) then there\n    * must be a corresponding {@link org.apache.druid.segment.serde.ComplexMetricSerde} which was registered with\n    * {@link org.apache.druid.segment.serde.ComplexMetrics#registerSerde} using this type name.\n    *\n-   * If you need a ValueType enum corresponding to this aggregator, a good way to do that is:\n-   *\n-   * <pre>\n-   *   Optional.ofNullable(GuavaUtils.getEnumIfPresent(ValueType.class, aggregator.getTypeName()))\n-   *           .orElse(ValueType.COMPLEX);\n-   * </pre>\n+   * If you need a ValueType enum corresponding to this aggregator, use {@link #getTypeName} instead.\n    */\n   public abstract String getTypeName();\n \n+  /**\n+   * Get the type name for the 'finalized' type for this aggregator, i.e. the type of the value returned by\n+   * {@link #finalizeComputation}. This may be the same as or different than the types expected in {@link #deserialize}\n+   * and {@link #combine}.\n+   *\n+   * If you need a ValueType enum corresponding to this aggregator, use {@link #getFinalizedType} instead.\n+   */\n+  public String getFinalizedTypeName()\n+  {\n+    return getTypeName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc5NzcxNA=="}, "originalCommit": {"oid": "f2aa12f64a8291e256ac58e039837057f289822e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYxOTQ5MA==", "bodyText": "ensure it is only still called for getting a ComplexMetricSerde for the aggregator.\n\nthat sounds ok, with ValueType getType() in there, AggregatorFactory.getTypeName() is only used to find  right ComplexMetricSerde object .. you are right  that changing the name might be disruptive, so adding the  right requirement in javadoc would be a good compromise.... or maybe you would find a better alternative.", "url": "https://github.com/apache/druid/pull/9638#discussion_r406619490", "createdAt": "2020-04-10T06:17:51Z", "author": {"login": "himanshug"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/AggregatorFactory.java", "diffHunk": "@@ -214,19 +216,42 @@ public AggregatorFactory getMergingFactory(AggregatorFactory other) throws Aggre\n    * {@link #deserialize} and the type accepted by {@link #combine}. However, it is *not* necessarily the same type\n    * returned by {@link #finalizeComputation}.\n    *\n-   * If the type is complex (i.e. not a simple, numeric {@link org.apache.druid.segment.column.ValueType}) then there\n+   * If the type is complex (i.e. not a simple, numeric {@link ValueType}) then there\n    * must be a corresponding {@link org.apache.druid.segment.serde.ComplexMetricSerde} which was registered with\n    * {@link org.apache.druid.segment.serde.ComplexMetrics#registerSerde} using this type name.\n    *\n-   * If you need a ValueType enum corresponding to this aggregator, a good way to do that is:\n-   *\n-   * <pre>\n-   *   Optional.ofNullable(GuavaUtils.getEnumIfPresent(ValueType.class, aggregator.getTypeName()))\n-   *           .orElse(ValueType.COMPLEX);\n-   * </pre>\n+   * If you need a ValueType enum corresponding to this aggregator, use {@link #getTypeName} instead.\n    */\n   public abstract String getTypeName();\n \n+  /**\n+   * Get the type name for the 'finalized' type for this aggregator, i.e. the type of the value returned by\n+   * {@link #finalizeComputation}. This may be the same as or different than the types expected in {@link #deserialize}\n+   * and {@link #combine}.\n+   *\n+   * If you need a ValueType enum corresponding to this aggregator, use {@link #getFinalizedType} instead.\n+   */\n+  public String getFinalizedTypeName()\n+  {\n+    return getTypeName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc5NzcxNA=="}, "originalCommit": {"oid": "f2aa12f64a8291e256ac58e039837057f289822e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk5NTIyNw==", "bodyText": "I've transitioned AggregatorFactory.getTypeName to be used exclusively for complex type serde lookup, and remove all of the other type name functions. All AggregatorFactory implementations now must explicitly implement getType instead of a default that tries to convert it into a ValueType enum from the result of getTypeName, and I removed getTypeName from all non-complex agg factories in favor of a default implementation that throws an exception (to ensure this method isn't called inappropriately).\nSince getType is now abstract, this PR is sort of disruptive to agg extensions, so it might be also ok to change getTypeName to getComplexTypeName since a code change will be required anyway.\nAlternatively, I could restore the default implementation of getType that uses the output of getTypeName to translate into a ValueType if this is too much. I removed it as much so that I would go through and provide explicit implementations for all existing aggregators using errors to hunt them all down.", "url": "https://github.com/apache/druid/pull/9638#discussion_r410995227", "createdAt": "2020-04-19T21:28:26Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/AggregatorFactory.java", "diffHunk": "@@ -214,19 +216,42 @@ public AggregatorFactory getMergingFactory(AggregatorFactory other) throws Aggre\n    * {@link #deserialize} and the type accepted by {@link #combine}. However, it is *not* necessarily the same type\n    * returned by {@link #finalizeComputation}.\n    *\n-   * If the type is complex (i.e. not a simple, numeric {@link org.apache.druid.segment.column.ValueType}) then there\n+   * If the type is complex (i.e. not a simple, numeric {@link ValueType}) then there\n    * must be a corresponding {@link org.apache.druid.segment.serde.ComplexMetricSerde} which was registered with\n    * {@link org.apache.druid.segment.serde.ComplexMetrics#registerSerde} using this type name.\n    *\n-   * If you need a ValueType enum corresponding to this aggregator, a good way to do that is:\n-   *\n-   * <pre>\n-   *   Optional.ofNullable(GuavaUtils.getEnumIfPresent(ValueType.class, aggregator.getTypeName()))\n-   *           .orElse(ValueType.COMPLEX);\n-   * </pre>\n+   * If you need a ValueType enum corresponding to this aggregator, use {@link #getTypeName} instead.\n    */\n   public abstract String getTypeName();\n \n+  /**\n+   * Get the type name for the 'finalized' type for this aggregator, i.e. the type of the value returned by\n+   * {@link #finalizeComputation}. This may be the same as or different than the types expected in {@link #deserialize}\n+   * and {@link #combine}.\n+   *\n+   * If you need a ValueType enum corresponding to this aggregator, use {@link #getFinalizedType} instead.\n+   */\n+  public String getFinalizedTypeName()\n+  {\n+    return getTypeName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc5NzcxNA=="}, "originalCommit": {"oid": "f2aa12f64a8291e256ac58e039837057f289822e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc1NTk5MA==", "bodyText": "Fwiw, I'm in favor of requiring aggregators to explicitly implement these functions \u2014 especially if 90% of people would be fine with the default! That means it would be really easy for the 10% that need to override it to forget to do so. In general it's good to make it easy to do things right, not easy to forget important stuff.", "url": "https://github.com/apache/druid/pull/9638#discussion_r417755990", "createdAt": "2020-04-30T05:07:56Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/AggregatorFactory.java", "diffHunk": "@@ -214,19 +216,42 @@ public AggregatorFactory getMergingFactory(AggregatorFactory other) throws Aggre\n    * {@link #deserialize} and the type accepted by {@link #combine}. However, it is *not* necessarily the same type\n    * returned by {@link #finalizeComputation}.\n    *\n-   * If the type is complex (i.e. not a simple, numeric {@link org.apache.druid.segment.column.ValueType}) then there\n+   * If the type is complex (i.e. not a simple, numeric {@link ValueType}) then there\n    * must be a corresponding {@link org.apache.druid.segment.serde.ComplexMetricSerde} which was registered with\n    * {@link org.apache.druid.segment.serde.ComplexMetrics#registerSerde} using this type name.\n    *\n-   * If you need a ValueType enum corresponding to this aggregator, a good way to do that is:\n-   *\n-   * <pre>\n-   *   Optional.ofNullable(GuavaUtils.getEnumIfPresent(ValueType.class, aggregator.getTypeName()))\n-   *           .orElse(ValueType.COMPLEX);\n-   * </pre>\n+   * If you need a ValueType enum corresponding to this aggregator, use {@link #getTypeName} instead.\n    */\n   public abstract String getTypeName();\n \n+  /**\n+   * Get the type name for the 'finalized' type for this aggregator, i.e. the type of the value returned by\n+   * {@link #finalizeComputation}. This may be the same as or different than the types expected in {@link #deserialize}\n+   * and {@link #combine}.\n+   *\n+   * If you need a ValueType enum corresponding to this aggregator, use {@link #getFinalizedType} instead.\n+   */\n+  public String getFinalizedTypeName()\n+  {\n+    return getTypeName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc5NzcxNA=="}, "originalCommit": {"oid": "f2aa12f64a8291e256ac58e039837057f289822e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ3NjU1Mw==", "bodyText": "I agree, getType and getFinalizedType are now both abstract, and I also have renamed getTypeName to be getComplexTypeName since it didn't seem much more disruptive to rename an existing method on top of having to implement the 2 new methods.", "url": "https://github.com/apache/druid/pull/9638#discussion_r472476553", "createdAt": "2020-08-18T20:34:16Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/AggregatorFactory.java", "diffHunk": "@@ -214,19 +216,42 @@ public AggregatorFactory getMergingFactory(AggregatorFactory other) throws Aggre\n    * {@link #deserialize} and the type accepted by {@link #combine}. However, it is *not* necessarily the same type\n    * returned by {@link #finalizeComputation}.\n    *\n-   * If the type is complex (i.e. not a simple, numeric {@link org.apache.druid.segment.column.ValueType}) then there\n+   * If the type is complex (i.e. not a simple, numeric {@link ValueType}) then there\n    * must be a corresponding {@link org.apache.druid.segment.serde.ComplexMetricSerde} which was registered with\n    * {@link org.apache.druid.segment.serde.ComplexMetrics#registerSerde} using this type name.\n    *\n-   * If you need a ValueType enum corresponding to this aggregator, a good way to do that is:\n-   *\n-   * <pre>\n-   *   Optional.ofNullable(GuavaUtils.getEnumIfPresent(ValueType.class, aggregator.getTypeName()))\n-   *           .orElse(ValueType.COMPLEX);\n-   * </pre>\n+   * If you need a ValueType enum corresponding to this aggregator, use {@link #getTypeName} instead.\n    */\n   public abstract String getTypeName();\n \n+  /**\n+   * Get the type name for the 'finalized' type for this aggregator, i.e. the type of the value returned by\n+   * {@link #finalizeComputation}. This may be the same as or different than the types expected in {@link #deserialize}\n+   * and {@link #combine}.\n+   *\n+   * If you need a ValueType enum corresponding to this aggregator, use {@link #getFinalizedType} instead.\n+   */\n+  public String getFinalizedTypeName()\n+  {\n+    return getTypeName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc5NzcxNA=="}, "originalCommit": {"oid": "f2aa12f64a8291e256ac58e039837057f289822e"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODI2MzI5OnYy", "diffSide": "RIGHT", "path": "indexing-hadoop/src/main/java/org/apache/druid/indexer/InputRowSerde.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDo0ODo1MVrOGDAaOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzozNzo1OFrOGDNDVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNTYyNA==", "bodyText": "nit: these can be  moved to else clause. also aggFactory.getTypeName() can just be inlined for complex clause.", "url": "https://github.com/apache/druid/pull/9638#discussion_r405805624", "createdAt": "2020-04-08T20:48:51Z", "author": {"login": "himanshug"}, "path": "indexing-hadoop/src/main/java/org/apache/druid/indexer/InputRowSerde.java", "diffHunk": "@@ -340,22 +340,25 @@ public static SerializeResult toBytes(\n             parseExceptionMessages.add(e.getMessage());\n           }\n \n-          String t = aggFactory.getTypeName();\n+          final ValueType type = aggFactory.getType();\n+          final String typeName = aggFactory.getTypeName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2aa12f64a8291e256ac58e039837057f289822e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAxMjc1OQ==", "bodyText": "Ah, good point, will move \ud83d\udc4d", "url": "https://github.com/apache/druid/pull/9638#discussion_r406012759", "createdAt": "2020-04-09T07:37:58Z", "author": {"login": "clintropolis"}, "path": "indexing-hadoop/src/main/java/org/apache/druid/indexer/InputRowSerde.java", "diffHunk": "@@ -340,22 +340,25 @@ public static SerializeResult toBytes(\n             parseExceptionMessages.add(e.getMessage());\n           }\n \n-          String t = aggFactory.getTypeName();\n+          final ValueType type = aggFactory.getType();\n+          final String typeName = aggFactory.getTypeName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNTYyNA=="}, "originalCommit": {"oid": "f2aa12f64a8291e256ac58e039837057f289822e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODI3MjA5OnYy", "diffSide": "RIGHT", "path": "indexing-hadoop/src/main/java/org/apache/druid/indexer/InputRowSerde.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDo1MToyMlrOGDAfrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDo1MToyMlrOGDAfrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNzAyMQ==", "bodyText": "nit: same", "url": "https://github.com/apache/druid/pull/9638#discussion_r405807021", "createdAt": "2020-04-08T20:51:22Z", "author": {"login": "himanshug"}, "path": "indexing-hadoop/src/main/java/org/apache/druid/indexer/InputRowSerde.java", "diffHunk": "@@ -467,21 +470,24 @@ public static InputRow fromBytes(\n       //Read metrics\n       int metricSize = WritableUtils.readVInt(in);\n       for (int i = 0; i < metricSize; i++) {\n-        String metric = readString(in);\n-        String type = getType(metric, aggs, i);\n-        byte metricNullability = in.readByte();\n+        final String metric = readString(in);\n+        final AggregatorFactory agg = getAggregator(metric, aggs, i);\n+        final ValueType type = agg.getType();\n+        final String typeName = agg.getTypeName();\n+        final byte metricNullability = in.readByte();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2aa12f64a8291e256ac58e039837057f289822e"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTMyNjAzOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/aggregation/PostAggregator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNTowODo0N1rOGOZ0KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNTowODo0N1rOGOZ0KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc1NjIwMA==", "bodyText": "Please add javadocs.", "url": "https://github.com/apache/druid/pull/9638#discussion_r417756200", "createdAt": "2020-04-30T05:08:47Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/PostAggregator.java", "diffHunk": "@@ -43,6 +44,8 @@\n   @Nullable\n   String getName();\n \n+  ValueType getType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21067bc05b08b180f435ff523e1a90a89d33a43d"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTMyODY0OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/aggregation/post/ExpressionPostAggregator.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNTowOTo1OVrOGOZ1kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODowNTo1MVrOHGMc4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc1NjU2Mw==", "bodyText": "Why STRING? (Instead of COMPLEX or whatever.)\nWhat bad things could potentially happen if the type returned by this method is wrong? (The javadoc should explain this, ideally.)", "url": "https://github.com/apache/druid/pull/9638#discussion_r417756563", "createdAt": "2020-04-30T05:09:59Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/post/ExpressionPostAggregator.java", "diffHunk": "@@ -179,6 +169,14 @@ public String getName()\n     return name;\n   }\n \n+  @Override\n+  public ValueType getType()\n+  {\n+    // this is wrong, replace with Expr output type based on the input types once it is available\n+    // but treat as string for now\n+    return ValueType.STRING;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21067bc05b08b180f435ff523e1a90a89d33a43d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU0NzM3Ng==", "bodyText": "Since this is a post-aggregator, probably not a lot will go wrong in most cases. We will potentially predict an incorrect query result signature as having strings instead of whatever the actual expression output type is. I guess it should technically probably return null for now since it is truly unknown, so it will appear in the signature that way. I'm going to consider making this change.\nCOMPLEX could be ok to use here in some circumstances, but would not be correct i think for example, if the row signature for a subquery is computed and then the column from the subquery post-agg is used as an input to another expression (since expression selectors do not currently handle complex inputs). There might be other cases too.", "url": "https://github.com/apache/druid/pull/9638#discussion_r472547376", "createdAt": "2020-08-18T23:25:04Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/post/ExpressionPostAggregator.java", "diffHunk": "@@ -179,6 +169,14 @@ public String getName()\n     return name;\n   }\n \n+  @Override\n+  public ValueType getType()\n+  {\n+    // this is wrong, replace with Expr output type based on the input types once it is available\n+    // but treat as string for now\n+    return ValueType.STRING;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc1NjU2Mw=="}, "originalCommit": {"oid": "21067bc05b08b180f435ff523e1a90a89d33a43d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQzNDk1NA==", "bodyText": "I've changed this to be null for now, rather than incorrectly calling it string, so it will continue to be treated as unknown, but did go ahead and wire things up for a follow-up PR to be able to add output type inference to expressions during post-agg decoration.", "url": "https://github.com/apache/druid/pull/9638#discussion_r473434954", "createdAt": "2020-08-19T23:33:27Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/post/ExpressionPostAggregator.java", "diffHunk": "@@ -179,6 +169,14 @@ public String getName()\n     return name;\n   }\n \n+  @Override\n+  public ValueType getType()\n+  {\n+    // this is wrong, replace with Expr output type based on the input types once it is available\n+    // but treat as string for now\n+    return ValueType.STRING;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc1NjU2Mw=="}, "originalCommit": {"oid": "21067bc05b08b180f435ff523e1a90a89d33a43d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQzNjQ0Mw==", "bodyText": "Also i did not explicitly change the output contract of PostAggregator.getType to @Nullable, because I don't think that long term it should be allowed to be that, but could change it to that for now while it is true, and remove in the future once the expression post-agg knows its output type.\nAlternatively, I could have added an explicit output type json property, similar to expression virtual column declaration, but I think we want to deprecate those once output type inference is in place, so decided not to do this at this time, but am open to including it if anyone thinks it is necessary.", "url": "https://github.com/apache/druid/pull/9638#discussion_r473436443", "createdAt": "2020-08-19T23:35:32Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/post/ExpressionPostAggregator.java", "diffHunk": "@@ -179,6 +169,14 @@ public String getName()\n     return name;\n   }\n \n+  @Override\n+  public ValueType getType()\n+  {\n+    // this is wrong, replace with Expr output type based on the input types once it is available\n+    // but treat as string for now\n+    return ValueType.STRING;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc1NjU2Mw=="}, "originalCommit": {"oid": "21067bc05b08b180f435ff523e1a90a89d33a43d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI1MDUzMA==", "bodyText": "I think it'd be good to make it @Nullable for now, with a note that we'd like it to stop being nullable in the future when X/Y/Z things are done. We want to make sure that in the meantime, we don't forget to check it.", "url": "https://github.com/apache/druid/pull/9638#discussion_r476250530", "createdAt": "2020-08-25T07:56:14Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/post/ExpressionPostAggregator.java", "diffHunk": "@@ -179,6 +169,14 @@ public String getName()\n     return name;\n   }\n \n+  @Override\n+  public ValueType getType()\n+  {\n+    // this is wrong, replace with Expr output type based on the input types once it is available\n+    // but treat as string for now\n+    return ValueType.STRING;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc1NjU2Mw=="}, "originalCommit": {"oid": "21067bc05b08b180f435ff523e1a90a89d33a43d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI1NzUwNQ==", "bodyText": "Ah, I did end up adding it as @Nullable, I forgot to update this comment. It is missing the note on it maybe not being like that in the future, can add.", "url": "https://github.com/apache/druid/pull/9638#discussion_r476257505", "createdAt": "2020-08-25T08:05:51Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/post/ExpressionPostAggregator.java", "diffHunk": "@@ -179,6 +169,14 @@ public String getName()\n     return name;\n   }\n \n+  @Override\n+  public ValueType getType()\n+  {\n+    // this is wrong, replace with Expr output type based on the input types once it is available\n+    // but treat as string for now\n+    return ValueType.STRING;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc1NjU2Mw=="}, "originalCommit": {"oid": "21067bc05b08b180f435ff523e1a90a89d33a43d"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTMzMjI2OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/aggregation/AggregatorFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNToxMjowN1rOGOZ3mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDo1OTo1OVrOHCmgFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc1NzA4MA==", "bodyText": "Add a @throws IllegalStateException if getType() != ValueType.COMPLEX", "url": "https://github.com/apache/druid/pull/9638#discussion_r417757080", "createdAt": "2020-04-30T05:12:07Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/AggregatorFactory.java", "diffHunk": "@@ -210,22 +212,36 @@ public AggregatorFactory getMergingFactory(AggregatorFactory other) throws Aggre\n   public abstract List<String> requiredFields();\n \n   /**\n-   * Get the type name of the intermediate type for this aggregator. This is the same as the type returned by\n+   * Get the \"intermediate\" {@link ValueType} for this aggregator. This is the same as the type returned by\n    * {@link #deserialize} and the type accepted by {@link #combine}. However, it is *not* necessarily the same type\n    * returned by {@link #finalizeComputation}.\n+   */\n+  public abstract ValueType getType();\n+\n+  /**\n+   * Get the type for the final form of this this aggregator, i.e. the type of the value returned by\n+   * {@link #finalizeComputation}. This may be the same as or different than the types expected in {@link #deserialize}\n+   * and {@link #combine}.\n+   * @return\n+   */\n+  public ValueType getFinalizedType()\n+  {\n+    return getType();\n+  }\n+\n+  /**\n+   * Get the complex type name of the intermediate type for this aggregator.\n    *\n-   * If the type is complex (i.e. not a simple, numeric {@link org.apache.druid.segment.column.ValueType}) then there\n+   * This should ONLY be implemented if the type is complex (i.e. not a simple, numeric {@link ValueType}), and there\n    * must be a corresponding {@link org.apache.druid.segment.serde.ComplexMetricSerde} which was registered with\n    * {@link org.apache.druid.segment.serde.ComplexMetrics#registerSerde} using this type name.\n    *\n-   * If you need a ValueType enum corresponding to this aggregator, a good way to do that is:\n-   *\n-   * <pre>\n-   *   Optional.ofNullable(GuavaUtils.getEnumIfPresent(ValueType.class, aggregator.getTypeName()))\n-   *           .orElse(ValueType.COMPLEX);\n-   * </pre>\n+   * If you need a ValueType enum corresponding to this aggregator, use {@link #getTypeName} instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21067bc05b08b180f435ff523e1a90a89d33a43d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ5MDAwNg==", "bodyText": "added", "url": "https://github.com/apache/druid/pull/9638#discussion_r472490006", "createdAt": "2020-08-18T20:59:59Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/AggregatorFactory.java", "diffHunk": "@@ -210,22 +212,36 @@ public AggregatorFactory getMergingFactory(AggregatorFactory other) throws Aggre\n   public abstract List<String> requiredFields();\n \n   /**\n-   * Get the type name of the intermediate type for this aggregator. This is the same as the type returned by\n+   * Get the \"intermediate\" {@link ValueType} for this aggregator. This is the same as the type returned by\n    * {@link #deserialize} and the type accepted by {@link #combine}. However, it is *not* necessarily the same type\n    * returned by {@link #finalizeComputation}.\n+   */\n+  public abstract ValueType getType();\n+\n+  /**\n+   * Get the type for the final form of this this aggregator, i.e. the type of the value returned by\n+   * {@link #finalizeComputation}. This may be the same as or different than the types expected in {@link #deserialize}\n+   * and {@link #combine}.\n+   * @return\n+   */\n+  public ValueType getFinalizedType()\n+  {\n+    return getType();\n+  }\n+\n+  /**\n+   * Get the complex type name of the intermediate type for this aggregator.\n    *\n-   * If the type is complex (i.e. not a simple, numeric {@link org.apache.druid.segment.column.ValueType}) then there\n+   * This should ONLY be implemented if the type is complex (i.e. not a simple, numeric {@link ValueType}), and there\n    * must be a corresponding {@link org.apache.druid.segment.serde.ComplexMetricSerde} which was registered with\n    * {@link org.apache.druid.segment.serde.ComplexMetrics#registerSerde} using this type name.\n    *\n-   * If you need a ValueType enum corresponding to this aggregator, a good way to do that is:\n-   *\n-   * <pre>\n-   *   Optional.ofNullable(GuavaUtils.getEnumIfPresent(ValueType.class, aggregator.getTypeName()))\n-   *           .orElse(ValueType.COMPLEX);\n-   * </pre>\n+   * If you need a ValueType enum corresponding to this aggregator, use {@link #getTypeName} instead.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc1NzA4MA=="}, "originalCommit": {"oid": "21067bc05b08b180f435ff523e1a90a89d33a43d"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTMzMjkwOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/aggregation/AggregatorFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNToxMjozN1rOGOZ3_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDo1Mjo1MFrOHCmRiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc1NzE4MQ==", "bodyText": "IMO, it would be better for this to be abstract, since this makes it too easy for people to forget to override it.", "url": "https://github.com/apache/druid/pull/9638#discussion_r417757181", "createdAt": "2020-04-30T05:12:37Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/AggregatorFactory.java", "diffHunk": "@@ -210,22 +212,36 @@ public AggregatorFactory getMergingFactory(AggregatorFactory other) throws Aggre\n   public abstract List<String> requiredFields();\n \n   /**\n-   * Get the type name of the intermediate type for this aggregator. This is the same as the type returned by\n+   * Get the \"intermediate\" {@link ValueType} for this aggregator. This is the same as the type returned by\n    * {@link #deserialize} and the type accepted by {@link #combine}. However, it is *not* necessarily the same type\n    * returned by {@link #finalizeComputation}.\n+   */\n+  public abstract ValueType getType();\n+\n+  /**\n+   * Get the type for the final form of this this aggregator, i.e. the type of the value returned by\n+   * {@link #finalizeComputation}. This may be the same as or different than the types expected in {@link #deserialize}\n+   * and {@link #combine}.\n+   * @return\n+   */\n+  public ValueType getFinalizedType()\n+  {\n+    return getType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21067bc05b08b180f435ff523e1a90a89d33a43d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4NjI4Mw==", "bodyText": "changed to abstract", "url": "https://github.com/apache/druid/pull/9638#discussion_r472486283", "createdAt": "2020-08-18T20:52:50Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/AggregatorFactory.java", "diffHunk": "@@ -210,22 +212,36 @@ public AggregatorFactory getMergingFactory(AggregatorFactory other) throws Aggre\n   public abstract List<String> requiredFields();\n \n   /**\n-   * Get the type name of the intermediate type for this aggregator. This is the same as the type returned by\n+   * Get the \"intermediate\" {@link ValueType} for this aggregator. This is the same as the type returned by\n    * {@link #deserialize} and the type accepted by {@link #combine}. However, it is *not* necessarily the same type\n    * returned by {@link #finalizeComputation}.\n+   */\n+  public abstract ValueType getType();\n+\n+  /**\n+   * Get the type for the final form of this this aggregator, i.e. the type of the value returned by\n+   * {@link #finalizeComputation}. This may be the same as or different than the types expected in {@link #deserialize}\n+   * and {@link #combine}.\n+   * @return\n+   */\n+  public ValueType getFinalizedType()\n+  {\n+    return getType();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc1NzE4MQ=="}, "originalCommit": {"oid": "21067bc05b08b180f435ff523e1a90a89d33a43d"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTMzNzEyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/segment/column/ValueType.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNToxNDo1M1rOGOZ6Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMzozNzo0NFrOHDgXQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc1Nzc5NA==", "bodyText": "Please add javadocs documenting these types.\nEspecially important things to document include:\n\nWhen do we use STRING and when do we use STRING_ARRAY? (Multivalue strings are type STRING, even though they behave kind of like arrays. How do we explain this coherently?)\nWhat does COMPLEX mean and how can you get more information about something that is COMPLEX?", "url": "https://github.com/apache/druid/pull/9638#discussion_r417757794", "createdAt": "2020-04-30T05:14:53Z", "author": {"login": "gianm"}, "path": "core/src/main/java/org/apache/druid/segment/column/ValueType.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.column;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import org.apache.druid.java.util.common.StringUtils;\n+\n+import javax.annotation.Nullable;\n+\n+public enum ValueType\n+{\n+  DOUBLE,\n+  FLOAT,\n+  LONG,\n+  STRING,\n+  COMPLEX,\n+  DOUBLE_ARRAY,\n+  LONG_ARRAY,\n+  STRING_ARRAY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21067bc05b08b180f435ff523e1a90a89d33a43d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU0OTU2Ng==", "bodyText": "I am still working on javadocs here and other modified places to provide guidance on how types are and should be used, and how to deal with array types until they are fully propagated through the codebase.\nWith regards to COMPLEX, I'm starting to think that in the future we might want to modify RowSignature to potentially have the ability to store the complex type name, similar to what is available for aggregator factory, and what #10277 adds to the ColumnCapabilities of complex type columns it creates. We might actually want a lighter weight ColumnSignature type that is a subset of ColumnCapabilities that RowSignature can be composed of, rather than it's strict ValueType mapping it currently has, but I'm not certain if it is necessary yet.", "url": "https://github.com/apache/druid/pull/9638#discussion_r472549566", "createdAt": "2020-08-18T23:31:23Z", "author": {"login": "clintropolis"}, "path": "core/src/main/java/org/apache/druid/segment/column/ValueType.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.column;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import org.apache.druid.java.util.common.StringUtils;\n+\n+import javax.annotation.Nullable;\n+\n+public enum ValueType\n+{\n+  DOUBLE,\n+  FLOAT,\n+  LONG,\n+  STRING,\n+  COMPLEX,\n+  DOUBLE_ARRAY,\n+  LONG_ARRAY,\n+  STRING_ARRAY;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc1Nzc5NA=="}, "originalCommit": {"oid": "21067bc05b08b180f435ff523e1a90a89d33a43d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc2MjA2Mg==", "bodyText": "will it be too complicated for multi value strings to have their own type different from single value string?", "url": "https://github.com/apache/druid/pull/9638#discussion_r472762062", "createdAt": "2020-08-19T06:36:50Z", "author": {"login": "abhishekagarwal87"}, "path": "core/src/main/java/org/apache/druid/segment/column/ValueType.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.column;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import org.apache.druid.java.util.common.StringUtils;\n+\n+import javax.annotation.Nullable;\n+\n+public enum ValueType\n+{\n+  DOUBLE,\n+  FLOAT,\n+  LONG,\n+  STRING,\n+  COMPLEX,\n+  DOUBLE_ARRAY,\n+  LONG_ARRAY,\n+  STRING_ARRAY;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc1Nzc5NA=="}, "originalCommit": {"oid": "21067bc05b08b180f435ff523e1a90a89d33a43d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjgyMTQwMw==", "bodyText": "Not sure yet, I'm still thinking on the best way to live in a world with the current STRING that can have single or multi values, communicated through ColumnCapabilities.hasMultipleValues, and STRING_ARRAY which is explicitly always multi-valued but can currently only be produced via expressions.\nI think it depends on how we want to encode this information for RowSignature to make available to the broker and higher layers of the query engines. There might be room for a new ValueType to use explicitly for STRING which are multi-valued if we want to keep RowSignature light (and effectively coerce it back to STRING when translating the signature back into ColumnCapabilities for things like the row selectors the broker uses), though between the changes in #10219 which also adds a want to be able to encode in the RowSignature which columns can have null values, making a richer RowSignature is probably the right way forward, which could potentially make a separate ValueType for multi-value strings not necessary.\nI don't think we want to treat the multi-value strings as STRING_ARRAY because I think we probably want to reserve it for if/when we add true array typed columns, so that engines like group by and top-n can process them separately than the funny way we handle existing multi-value strings (which aggregate on individual values, basically  equivalent to UNNEST in SQL) and instead do it in a way that is compatible with SQL array types.", "url": "https://github.com/apache/druid/pull/9638#discussion_r472821403", "createdAt": "2020-08-19T07:48:25Z", "author": {"login": "clintropolis"}, "path": "core/src/main/java/org/apache/druid/segment/column/ValueType.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.column;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import org.apache.druid.java.util.common.StringUtils;\n+\n+import javax.annotation.Nullable;\n+\n+public enum ValueType\n+{\n+  DOUBLE,\n+  FLOAT,\n+  LONG,\n+  STRING,\n+  COMPLEX,\n+  DOUBLE_ARRAY,\n+  LONG_ARRAY,\n+  STRING_ARRAY;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc1Nzc5NA=="}, "originalCommit": {"oid": "21067bc05b08b180f435ff523e1a90a89d33a43d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQzODAxOA==", "bodyText": "I've added a bunch of javadocs trying to advise on what each ValueType represents and how it may be used in the query engines, I hope it is sufficient to provide guidance for complex type/agg/post-agg implementors to think about how the thing is going to be used, but I'm sure that I'm probably leaving out a lot of details, and it might be somewhat brittle to keep in sync with reality as the engines evolve.", "url": "https://github.com/apache/druid/pull/9638#discussion_r473438018", "createdAt": "2020-08-19T23:37:44Z", "author": {"login": "clintropolis"}, "path": "core/src/main/java/org/apache/druid/segment/column/ValueType.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.column;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import org.apache.druid.java.util.common.StringUtils;\n+\n+import javax.annotation.Nullable;\n+\n+public enum ValueType\n+{\n+  DOUBLE,\n+  FLOAT,\n+  LONG,\n+  STRING,\n+  COMPLEX,\n+  DOUBLE_ARRAY,\n+  LONG_ARRAY,\n+  STRING_ARRAY;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc1Nzc5NA=="}, "originalCommit": {"oid": "21067bc05b08b180f435ff523e1a90a89d33a43d"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTMzODY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/segment/column/ValueType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNToxNTo1MFrOGOZ7VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDo1Mzo1MlrOHCmT8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc1ODAzNg==", "bodyText": "With this logic, DOUBLE_ARRAY.isComplex() is true. This seems weird. I would think only COMPLEX is complex. Please add javadocs to the method and maybe consider renaming it.", "url": "https://github.com/apache/druid/pull/9638#discussion_r417758036", "createdAt": "2020-04-30T05:15:50Z", "author": {"login": "gianm"}, "path": "core/src/main/java/org/apache/druid/segment/column/ValueType.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.column;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import org.apache.druid.java.util.common.StringUtils;\n+\n+import javax.annotation.Nullable;\n+\n+public enum ValueType\n+{\n+  DOUBLE,\n+  FLOAT,\n+  LONG,\n+  STRING,\n+  COMPLEX,\n+  DOUBLE_ARRAY,\n+  LONG_ARRAY,\n+  STRING_ARRAY;\n+\n+\n+  public boolean isNumeric()\n+  {\n+    return isNumeric(this);\n+  }\n+\n+  public boolean isPrimitiveScalar()\n+  {\n+    return this.equals(ValueType.STRING) || isNumeric(this);\n+  }\n+\n+  public boolean isComplex()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21067bc05b08b180f435ff523e1a90a89d33a43d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4Njg5OQ==", "bodyText": "I have removed this method in favor of using isPrimitive directly", "url": "https://github.com/apache/druid/pull/9638#discussion_r472486899", "createdAt": "2020-08-18T20:53:52Z", "author": {"login": "clintropolis"}, "path": "core/src/main/java/org/apache/druid/segment/column/ValueType.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.column;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import org.apache.druid.java.util.common.StringUtils;\n+\n+import javax.annotation.Nullable;\n+\n+public enum ValueType\n+{\n+  DOUBLE,\n+  FLOAT,\n+  LONG,\n+  STRING,\n+  COMPLEX,\n+  DOUBLE_ARRAY,\n+  LONG_ARRAY,\n+  STRING_ARRAY;\n+\n+\n+  public boolean isNumeric()\n+  {\n+    return isNumeric(this);\n+  }\n+\n+  public boolean isPrimitiveScalar()\n+  {\n+    return this.equals(ValueType.STRING) || isNumeric(this);\n+  }\n+\n+  public boolean isComplex()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc1ODAzNg=="}, "originalCommit": {"oid": "21067bc05b08b180f435ff523e1a90a89d33a43d"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTM0NDY1OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/column/RowSignature.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNToxOToxMVrOGOZ-zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDo1OTozN1rOHCmfUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc1ODkyNQ==", "bodyText": "Instead of using null here, we should have different signatures for finalized and nonfinalized rows. Perhaps the row signature builder should have addAggregators(List<AggregatorFactory> aggregators, boolean finalize) and the things that call it should be given knowledge about whether they're going to be finalizing or not.", "url": "https://github.com/apache/druid/pull/9638#discussion_r417758925", "createdAt": "2020-04-30T05:19:11Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/column/RowSignature.java", "diffHunk": "@@ -237,21 +235,14 @@ public Builder addDimensions(final List<DimensionSpec> dimensions)\n     public Builder addAggregators(final List<AggregatorFactory> aggregators)\n     {\n       for (final AggregatorFactory aggregator : aggregators) {\n-        final ValueType type = GuavaUtils.getEnumIfPresent(\n-            ValueType.class,\n-            StringUtils.toUpperCase(aggregator.getTypeName())\n-        );\n-\n-        // Use null instead of COMPLEX for nonnumeric types, since in that case, the type depends on whether or not\n-        // the aggregator is finalized, and we don't know (a) if it will be finalized, or even (b) what the type would\n-        // be if it were finalized. So null (i.e. unknown) is the proper thing to do.\n-        //\n-        // Another note: technically, we don't know what the finalized type will be even if the type here is numeric,\n-        // but we're assuming that it doesn't change upon finalization. All builtin aggregators work this way.\n+        final ValueType type = aggregator.getType();\n \n-        if (type != null && type.isNumeric()) {\n+        if (type.equals(aggregator.getFinalizedType())) {\n           add(aggregator.getName(), type);\n         } else {\n+          // Use null if the type depends on whether or not the aggregator is finalized, since", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21067bc05b08b180f435ff523e1a90a89d33a43d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4OTgwOA==", "bodyText": "I agree that this is a nice thing to do in the future so that we can have complete/accurate RowSignature everywhere, as I alluded to in the PR description, but it is a bit much for this PR and not especially needed at this point.", "url": "https://github.com/apache/druid/pull/9638#discussion_r472489808", "createdAt": "2020-08-18T20:59:37Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/column/RowSignature.java", "diffHunk": "@@ -237,21 +235,14 @@ public Builder addDimensions(final List<DimensionSpec> dimensions)\n     public Builder addAggregators(final List<AggregatorFactory> aggregators)\n     {\n       for (final AggregatorFactory aggregator : aggregators) {\n-        final ValueType type = GuavaUtils.getEnumIfPresent(\n-            ValueType.class,\n-            StringUtils.toUpperCase(aggregator.getTypeName())\n-        );\n-\n-        // Use null instead of COMPLEX for nonnumeric types, since in that case, the type depends on whether or not\n-        // the aggregator is finalized, and we don't know (a) if it will be finalized, or even (b) what the type would\n-        // be if it were finalized. So null (i.e. unknown) is the proper thing to do.\n-        //\n-        // Another note: technically, we don't know what the finalized type will be even if the type here is numeric,\n-        // but we're assuming that it doesn't change upon finalization. All builtin aggregators work this way.\n+        final ValueType type = aggregator.getType();\n \n-        if (type != null && type.isNumeric()) {\n+        if (type.equals(aggregator.getFinalizedType())) {\n           add(aggregator.getName(), type);\n         } else {\n+          // Use null if the type depends on whether or not the aggregator is finalized, since", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc1ODkyNQ=="}, "originalCommit": {"oid": "21067bc05b08b180f435ff523e1a90a89d33a43d"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NTE4OTY3OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/aggregation/AggregatorFactory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNzowMDo0NFrOHC4QEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNzozOTowOFrOHC6NUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc4MDgxNg==", "bodyText": "thinking out loud. how about having a class such as AggregatorOutputType which can contain combine and finalize types. Aggregators just override one method which can be AggregatorOutputType getType()", "url": "https://github.com/apache/druid/pull/9638#discussion_r472780816", "createdAt": "2020-08-19T07:00:44Z", "author": {"login": "abhishekagarwal87"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/AggregatorFactory.java", "diffHunk": "@@ -211,22 +213,35 @@ public AggregatorFactory getMergingFactory(AggregatorFactory other) throws Aggre\n   public abstract List<String> requiredFields();\n \n   /**\n-   * Get the type name of the intermediate type for this aggregator. This is the same as the type returned by\n+   * Get the \"intermediate\" {@link ValueType} for this aggregator. This is the same as the type returned by\n    * {@link #deserialize} and the type accepted by {@link #combine}. However, it is *not* necessarily the same type\n    * returned by {@link #finalizeComputation}.\n+   */\n+  public abstract ValueType getType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbf60e2862c9cd85f13bccb41e610324e4430c2c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc4MjUyMw==", "bodyText": "over time, more information can be added to this class rather than having methods in the interface. one example is complex type name.", "url": "https://github.com/apache/druid/pull/9638#discussion_r472782523", "createdAt": "2020-08-19T07:02:59Z", "author": {"login": "abhishekagarwal87"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/AggregatorFactory.java", "diffHunk": "@@ -211,22 +213,35 @@ public AggregatorFactory getMergingFactory(AggregatorFactory other) throws Aggre\n   public abstract List<String> requiredFields();\n \n   /**\n-   * Get the type name of the intermediate type for this aggregator. This is the same as the type returned by\n+   * Get the \"intermediate\" {@link ValueType} for this aggregator. This is the same as the type returned by\n    * {@link #deserialize} and the type accepted by {@link #combine}. However, it is *not* necessarily the same type\n    * returned by {@link #finalizeComputation}.\n+   */\n+  public abstract ValueType getType();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc4MDgxNg=="}, "originalCommit": {"oid": "bbf60e2862c9cd85f13bccb41e610324e4430c2c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjgxMjg4MQ==", "bodyText": "We already have ColumnCapabilities which is a richer but a bit more segment focused version of a thing that provides details about a given column, and #10277 expands that to also include complex type name, so I think if we are going to use a consolidated type we should consider using that since it is used pretty heavily throughout the engines to help determine the correct way to process columns (or a new interface that provides a subset of the functionality that ColumnCapabilities can extend as mentioned in another thread). I need to think a bit harder about what would be most useful for RowSignature to have on hand, which is currently the type used to serve similar functionality to higher levels of the engine what ColumnCapabilities provides at lower levels, before making a change like this though.\nI'm not sure if it is useful to combine the intermediary and finalized types in one place, since callers should typically only need one or the other, depending on the caller, as mentioned in PR description and this thread #9638 (comment). We currently haven't quite added enough information through for most callers to be able to provide this context quite yet though, so it also needs a bit further thought.", "url": "https://github.com/apache/druid/pull/9638#discussion_r472812881", "createdAt": "2020-08-19T07:39:08Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/AggregatorFactory.java", "diffHunk": "@@ -211,22 +213,35 @@ public AggregatorFactory getMergingFactory(AggregatorFactory other) throws Aggre\n   public abstract List<String> requiredFields();\n \n   /**\n-   * Get the type name of the intermediate type for this aggregator. This is the same as the type returned by\n+   * Get the \"intermediate\" {@link ValueType} for this aggregator. This is the same as the type returned by\n    * {@link #deserialize} and the type accepted by {@link #combine}. However, it is *not* necessarily the same type\n    * returned by {@link #finalizeComputation}.\n+   */\n+  public abstract ValueType getType();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc4MDgxNg=="}, "originalCommit": {"oid": "bbf60e2862c9cd85f13bccb41e610324e4430c2c"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTE1ODQxOnYy", "diffSide": "RIGHT", "path": "extensions-core/datasketches/src/main/java/org/apache/druid/query/aggregation/datasketches/hll/HllSketchToEstimatePostAggregator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMDoxMzozNFrOHFA1HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMTowMDoxMVrOHF2FqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxODUyNQ==", "bodyText": "Should it be round ? ValueType.LONG : ValueType.DOUBLE?", "url": "https://github.com/apache/druid/pull/9638#discussion_r475018525", "createdAt": "2020-08-22T00:13:34Z", "author": {"login": "jihoonson"}, "path": "extensions-core/datasketches/src/main/java/org/apache/druid/query/aggregation/datasketches/hll/HllSketchToEstimatePostAggregator.java", "diffHunk": "@@ -62,6 +63,12 @@ public String getName()\n     return name;\n   }\n \n+  @Override\n+  public ValueType getType()\n+  {\n+    return ValueType.DOUBLE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c8173515aee54e738a0a5bca0cb8a0b40810d07"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg5MTExMw==", "bodyText": "Oops yes, changed.", "url": "https://github.com/apache/druid/pull/9638#discussion_r475891113", "createdAt": "2020-08-24T21:00:11Z", "author": {"login": "clintropolis"}, "path": "extensions-core/datasketches/src/main/java/org/apache/druid/query/aggregation/datasketches/hll/HllSketchToEstimatePostAggregator.java", "diffHunk": "@@ -62,6 +63,12 @@ public String getName()\n     return name;\n   }\n \n+  @Override\n+  public ValueType getType()\n+  {\n+    return ValueType.DOUBLE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxODUyNQ=="}, "originalCommit": {"oid": "0c8173515aee54e738a0a5bca0cb8a0b40810d07"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTE3MjIzOnYy", "diffSide": "RIGHT", "path": "extensions-core/datasketches/src/main/java/org/apache/druid/query/aggregation/datasketches/quantiles/DoublesSketchToHistogramPostAggregator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMDoyNTozMFrOHFA8Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMTowMDoxMFrOHF2FnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyMDM1NQ==", "bodyText": "Should this be DOUBLE_ARRAY?", "url": "https://github.com/apache/druid/pull/9638#discussion_r475020355", "createdAt": "2020-08-22T00:25:30Z", "author": {"login": "jihoonson"}, "path": "extensions-core/datasketches/src/main/java/org/apache/druid/query/aggregation/datasketches/quantiles/DoublesSketchToHistogramPostAggregator.java", "diffHunk": "@@ -102,6 +103,15 @@ public String getName()\n     return name;\n   }\n \n+  /**\n+   * actual type is {@link DoublesSketch}\n+   */\n+  @Override\n+  public ValueType getType()\n+  {\n+    return ValueType.COMPLEX;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c8173515aee54e738a0a5bca0cb8a0b40810d07"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg5MTEwMQ==", "bodyText": "Oops yes, changed", "url": "https://github.com/apache/druid/pull/9638#discussion_r475891101", "createdAt": "2020-08-24T21:00:10Z", "author": {"login": "clintropolis"}, "path": "extensions-core/datasketches/src/main/java/org/apache/druid/query/aggregation/datasketches/quantiles/DoublesSketchToHistogramPostAggregator.java", "diffHunk": "@@ -102,6 +103,15 @@ public String getName()\n     return name;\n   }\n \n+  /**\n+   * actual type is {@link DoublesSketch}\n+   */\n+  @Override\n+  public ValueType getType()\n+  {\n+    return ValueType.COMPLEX;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyMDM1NQ=="}, "originalCommit": {"oid": "0c8173515aee54e738a0a5bca0cb8a0b40810d07"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTE3NDU0OnYy", "diffSide": "RIGHT", "path": "extensions-core/datasketches/src/main/java/org/apache/druid/query/aggregation/datasketches/theta/SketchEstimatePostAggregator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMDoyODowMFrOHFA9dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMTowMDowNFrOHF2Fag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyMDY2MA==", "bodyText": "errorBoundsStdDev != null ? ValueType.COMPLEX : ValueType.DOUBLE?", "url": "https://github.com/apache/druid/pull/9638#discussion_r475020660", "createdAt": "2020-08-22T00:28:00Z", "author": {"login": "jihoonson"}, "path": "extensions-core/datasketches/src/main/java/org/apache/druid/query/aggregation/datasketches/theta/SketchEstimatePostAggregator.java", "diffHunk": "@@ -100,6 +101,12 @@ public String getName()\n     return name;\n   }\n \n+  @Override\n+  public ValueType getType()\n+  {\n+    return ValueType.DOUBLE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c8173515aee54e738a0a5bca0cb8a0b40810d07"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg5MTA1MA==", "bodyText": "Oops yes, changed", "url": "https://github.com/apache/druid/pull/9638#discussion_r475891050", "createdAt": "2020-08-24T21:00:04Z", "author": {"login": "clintropolis"}, "path": "extensions-core/datasketches/src/main/java/org/apache/druid/query/aggregation/datasketches/theta/SketchEstimatePostAggregator.java", "diffHunk": "@@ -100,6 +101,12 @@ public String getName()\n     return name;\n   }\n \n+  @Override\n+  public ValueType getType()\n+  {\n+    return ValueType.DOUBLE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyMDY2MA=="}, "originalCommit": {"oid": "0c8173515aee54e738a0a5bca0cb8a0b40810d07"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTIwMDEyOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/aggregation/post/ExpressionPostAggregator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMDo1NDowOVrOHFBK8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMDo1NDowOVrOHFBK8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyNDExMg==", "bodyText": "Should outputType be in here, equals() and getCacheKey()?", "url": "https://github.com/apache/druid/pull/9638#discussion_r475024112", "createdAt": "2020-08-22T00:54:09Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/post/ExpressionPostAggregator.java", "diffHunk": "@@ -287,10 +295,6 @@ public boolean equals(Object o)\n   @Override\n   public int hashCode()\n   {\n-    int result = name != null ? name.hashCode() : 0;\n-    result = 31 * result + expression.hashCode();\n-    result = 31 * result + comparator.hashCode();\n-    result = 31 * result + (ordering != null ? ordering.hashCode() : 0);\n-    return result;\n+    return Objects.hash(name, expression, comparator, ordering);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c8173515aee54e738a0a5bca0cb8a0b40810d07"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTIwMjk5OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/aggregation/post/FieldAccessPostAggregator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMDo1Njo0M1rOHFBMUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzo1Nzo0NFrOHFwO4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyNDQ2Nw==", "bodyText": "Doesn't seem nullable.", "url": "https://github.com/apache/druid/pull/9638#discussion_r475024467", "createdAt": "2020-08-22T00:56:43Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/post/FieldAccessPostAggregator.java", "diffHunk": "@@ -40,16 +41,24 @@\n   @Nullable\n   private final String name;\n   private final String fieldName;\n+  @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c8173515aee54e738a0a5bca0cb8a0b40810d07"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5NTE2OQ==", "bodyText": "Oops, it was meant to be nullable instead of using the 'defaultAggregationType'", "url": "https://github.com/apache/druid/pull/9638#discussion_r475795169", "createdAt": "2020-08-24T17:57:44Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/post/FieldAccessPostAggregator.java", "diffHunk": "@@ -40,16 +41,24 @@\n   @Nullable\n   private final String name;\n   private final String fieldName;\n+  @Nullable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyNDQ2Nw=="}, "originalCommit": {"oid": "0c8173515aee54e738a0a5bca0cb8a0b40810d07"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTIwMzYyOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/aggregation/post/FieldAccessPostAggregator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMDo1NzoxOVrOHFBMpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMDo1NzoxOVrOHFBMpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyNDU0OQ==", "bodyText": "type is missing in getCacheKey(), equals(), and hashCode().", "url": "https://github.com/apache/druid/pull/9638#discussion_r475024549", "createdAt": "2020-08-22T00:57:19Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/post/FieldAccessPostAggregator.java", "diffHunk": "@@ -40,16 +41,24 @@\n   @Nullable\n   private final String name;\n   private final String fieldName;\n+  @Nullable\n+  private final ValueType type;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c8173515aee54e738a0a5bca0cb8a0b40810d07"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTIwNDYzOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/aggregation/post/FinalizingFieldAccessPostAggregator.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMDo1ODo0NlrOHFBNLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMToxMDoxN1rOHF2ZTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyNDY4NQ==", "bodyText": "This is nullable. Also missing in getCacheKey(), equals(), and hashCode().", "url": "https://github.com/apache/druid/pull/9638#discussion_r475024685", "createdAt": "2020-08-22T00:58:46Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/post/FinalizingFieldAccessPostAggregator.java", "diffHunk": "@@ -26,16 +26,20 @@\n import org.apache.druid.query.aggregation.AggregatorFactory;\n import org.apache.druid.query.aggregation.PostAggregator;\n import org.apache.druid.query.cache.CacheKeyBuilder;\n+import org.apache.druid.segment.column.ValueType;\n+import org.apache.druid.segment.column.ValueTypes;\n \n import java.util.Comparator;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Set;\n import java.util.function.Function;\n \n public class FinalizingFieldAccessPostAggregator implements PostAggregator\n {\n   private final String name;\n   private final String fieldName;\n+  private final ValueType finalizedType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c8173515aee54e738a0a5bca0cb8a0b40810d07"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5NjA1Mw==", "bodyText": "Hmm, I'm undecided if it should it be in equals and hashCode... Should calling decorate still be equal to the postagg before calling decorate? If so, then I think it should be ignored in these places since the value is computed. Same comment for ValueType in the other postaggs.", "url": "https://github.com/apache/druid/pull/9638#discussion_r475796053", "createdAt": "2020-08-24T17:59:20Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/post/FinalizingFieldAccessPostAggregator.java", "diffHunk": "@@ -26,16 +26,20 @@\n import org.apache.druid.query.aggregation.AggregatorFactory;\n import org.apache.druid.query.aggregation.PostAggregator;\n import org.apache.druid.query.cache.CacheKeyBuilder;\n+import org.apache.druid.segment.column.ValueType;\n+import org.apache.druid.segment.column.ValueTypes;\n \n import java.util.Comparator;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Set;\n import java.util.function.Function;\n \n public class FinalizingFieldAccessPostAggregator implements PostAggregator\n {\n   private final String name;\n   private final String fieldName;\n+  private final ValueType finalizedType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyNDY4NQ=="}, "originalCommit": {"oid": "0c8173515aee54e738a0a5bca0cb8a0b40810d07"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg4ODI3Mw==", "bodyText": "It seems ok to omit, looking at the code, the only time post-aggs exist as undecorated is for a short period in the constructors of the queries which can have post-aggregators.", "url": "https://github.com/apache/druid/pull/9638#discussion_r475888273", "createdAt": "2020-08-24T20:54:45Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/post/FinalizingFieldAccessPostAggregator.java", "diffHunk": "@@ -26,16 +26,20 @@\n import org.apache.druid.query.aggregation.AggregatorFactory;\n import org.apache.druid.query.aggregation.PostAggregator;\n import org.apache.druid.query.cache.CacheKeyBuilder;\n+import org.apache.druid.segment.column.ValueType;\n+import org.apache.druid.segment.column.ValueTypes;\n \n import java.util.Comparator;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Set;\n import java.util.function.Function;\n \n public class FinalizingFieldAccessPostAggregator implements PostAggregator\n {\n   private final String name;\n   private final String fieldName;\n+  private final ValueType finalizedType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyNDY4NQ=="}, "originalCommit": {"oid": "0c8173515aee54e738a0a5bca0cb8a0b40810d07"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg5NjE0MA==", "bodyText": "Nice finding. Would you leave a comment about why the finalizedType is not in those methods? It could be confusing otherwise.", "url": "https://github.com/apache/druid/pull/9638#discussion_r475896140", "createdAt": "2020-08-24T21:10:17Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/post/FinalizingFieldAccessPostAggregator.java", "diffHunk": "@@ -26,16 +26,20 @@\n import org.apache.druid.query.aggregation.AggregatorFactory;\n import org.apache.druid.query.aggregation.PostAggregator;\n import org.apache.druid.query.cache.CacheKeyBuilder;\n+import org.apache.druid.segment.column.ValueType;\n+import org.apache.druid.segment.column.ValueTypes;\n \n import java.util.Comparator;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Set;\n import java.util.function.Function;\n \n public class FinalizingFieldAccessPostAggregator implements PostAggregator\n {\n   private final String name;\n   private final String fieldName;\n+  private final ValueType finalizedType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyNDY4NQ=="}, "originalCommit": {"oid": "0c8173515aee54e738a0a5bca0cb8a0b40810d07"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTIwODgwOnYy", "diffSide": "RIGHT", "path": "processing/src/test/java/org/apache/druid/query/aggregation/AggregatorFactoryTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMTowMzoxOVrOHFBPXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMTowMzoxOVrOHFBPXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyNTI0Nw==", "bodyText": "\ud83d\ude05", "url": "https://github.com/apache/druid/pull/9638#discussion_r475025247", "createdAt": "2020-08-22T01:03:19Z", "author": {"login": "jihoonson"}, "path": "processing/src/test/java/org/apache/druid/query/aggregation/AggregatorFactoryTest.java", "diffHunk": "@@ -77,4 +103,168 @@ public void testMergeAggregators()\n     Assert.assertNull(AggregatorFactory.mergeAggregators(ImmutableList.of(af1, af2))\n     );\n   }\n+\n+  @Test\n+  public void testResultArraySignature()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c8173515aee54e738a0a5bca0cb8a0b40810d07"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTIyMDIxOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/aggregation/AggregatorFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMTowNzozNVrOHFBWiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMDo1MjowNFrOHF11Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyNzA4MQ==", "bodyText": "getType() seems too broad even though it is actually an intermediate type. Maybe getIntermediateType() is a better name?", "url": "https://github.com/apache/druid/pull/9638#discussion_r475027081", "createdAt": "2020-08-22T01:07:35Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/AggregatorFactory.java", "diffHunk": "@@ -211,22 +213,38 @@ public AggregatorFactory getMergingFactory(AggregatorFactory other) throws Aggre\n   public abstract List<String> requiredFields();\n \n   /**\n-   * Get the type name of the intermediate type for this aggregator. This is the same as the type returned by\n+   * Get the \"intermediate\" {@link ValueType} for this aggregator. This is the same as the type returned by\n    * {@link #deserialize} and the type accepted by {@link #combine}. However, it is *not* necessarily the same type\n    * returned by {@link #finalizeComputation}.\n    *\n-   * If the type is complex (i.e. not a simple, numeric {@link org.apache.druid.segment.column.ValueType}) then there\n+   * Refer to the {@link ValueType} javadocs for details on the implications of choosing a type.\n+   */\n+  public abstract ValueType getType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c8173515aee54e738a0a5bca0cb8a0b40810d07"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg4Njg5OQ==", "bodyText": "Naming things is the hardest \ud83d\ude05\nThat name seems correct, but need to think more if there is an even better name for it or not", "url": "https://github.com/apache/druid/pull/9638#discussion_r475886899", "createdAt": "2020-08-24T20:52:04Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/AggregatorFactory.java", "diffHunk": "@@ -211,22 +213,38 @@ public AggregatorFactory getMergingFactory(AggregatorFactory other) throws Aggre\n   public abstract List<String> requiredFields();\n \n   /**\n-   * Get the type name of the intermediate type for this aggregator. This is the same as the type returned by\n+   * Get the \"intermediate\" {@link ValueType} for this aggregator. This is the same as the type returned by\n    * {@link #deserialize} and the type accepted by {@link #combine}. However, it is *not* necessarily the same type\n    * returned by {@link #finalizeComputation}.\n    *\n-   * If the type is complex (i.e. not a simple, numeric {@link org.apache.druid.segment.column.ValueType}) then there\n+   * Refer to the {@link ValueType} javadocs for details on the implications of choosing a type.\n+   */\n+  public abstract ValueType getType();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyNzA4MQ=="}, "originalCommit": {"oid": "0c8173515aee54e738a0a5bca0cb8a0b40810d07"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzUwMTM3OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/incremental/IncrementalIndex.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODoxNzo1OVrOHGM5YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOTozNzo1NlrOHGm8YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI2NDgwMQ==", "bodyText": "Previously this only did createSimpleNumericColumnCapabilities if the type was numeric, now it includes strings too. Is that intentional?", "url": "https://github.com/apache/druid/pull/9638#discussion_r476264801", "createdAt": "2020-08-25T08:17:59Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/incremental/IncrementalIndex.java", "diffHunk": "@@ -1135,21 +1117,21 @@ public MetricDesc(int index, AggregatorFactory factory)\n       this.index = index;\n       this.name = factory.getName();\n \n-      String typeInfo = factory.getTypeName();\n-      if (\"float\".equalsIgnoreCase(typeInfo)) {\n-        capabilities = ColumnCapabilitiesImpl.createSimpleNumericColumnCapabilities(ValueType.FLOAT);\n-        this.type = typeInfo;\n-      } else if (\"long\".equalsIgnoreCase(typeInfo)) {\n-        capabilities = ColumnCapabilitiesImpl.createSimpleNumericColumnCapabilities(ValueType.LONG);\n-        this.type = typeInfo;\n-      } else if (\"double\".equalsIgnoreCase(typeInfo)) {\n-        capabilities = ColumnCapabilitiesImpl.createSimpleNumericColumnCapabilities(ValueType.DOUBLE);\n-        this.type = typeInfo;\n+      ValueType valueType = factory.getType();\n+\n+      if (valueType.isPrimitive()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eee25a2579eae9f6450a0a4ce315006ee6027a0"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwMTgwMw==", "bodyText": "Hmm, that is a good point, this should probably check isNumeric. However, should the else be an else if (ValueType.COMPLEX.equals(valueType)) to make sure it is actually is? I'm not sure the previous behavior of treating STRING as a COMPLEX was quite correct, it doesn't seem like it. Instead it should maybe handle STRING (and arrays) separately, though I'm not quite sure which capabilities it should have or if it should be an error case.", "url": "https://github.com/apache/druid/pull/9638#discussion_r476301803", "createdAt": "2020-08-25T09:13:43Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/incremental/IncrementalIndex.java", "diffHunk": "@@ -1135,21 +1117,21 @@ public MetricDesc(int index, AggregatorFactory factory)\n       this.index = index;\n       this.name = factory.getName();\n \n-      String typeInfo = factory.getTypeName();\n-      if (\"float\".equalsIgnoreCase(typeInfo)) {\n-        capabilities = ColumnCapabilitiesImpl.createSimpleNumericColumnCapabilities(ValueType.FLOAT);\n-        this.type = typeInfo;\n-      } else if (\"long\".equalsIgnoreCase(typeInfo)) {\n-        capabilities = ColumnCapabilitiesImpl.createSimpleNumericColumnCapabilities(ValueType.LONG);\n-        this.type = typeInfo;\n-      } else if (\"double\".equalsIgnoreCase(typeInfo)) {\n-        capabilities = ColumnCapabilitiesImpl.createSimpleNumericColumnCapabilities(ValueType.DOUBLE);\n-        this.type = typeInfo;\n+      ValueType valueType = factory.getType();\n+\n+      if (valueType.isPrimitive()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI2NDgwMQ=="}, "originalCommit": {"oid": "6eee25a2579eae9f6450a0a4ce315006ee6027a0"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYxMjkyOA==", "bodyText": "How about throwing an error that this kind of AggregatorFactory isn't supported at ingestion time?\nI don't think there's a use case for it with any of the builtin aggregators. So we can worry about it when one comes up.", "url": "https://github.com/apache/druid/pull/9638#discussion_r476612928", "createdAt": "2020-08-25T17:22:23Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/incremental/IncrementalIndex.java", "diffHunk": "@@ -1135,21 +1117,21 @@ public MetricDesc(int index, AggregatorFactory factory)\n       this.index = index;\n       this.name = factory.getName();\n \n-      String typeInfo = factory.getTypeName();\n-      if (\"float\".equalsIgnoreCase(typeInfo)) {\n-        capabilities = ColumnCapabilitiesImpl.createSimpleNumericColumnCapabilities(ValueType.FLOAT);\n-        this.type = typeInfo;\n-      } else if (\"long\".equalsIgnoreCase(typeInfo)) {\n-        capabilities = ColumnCapabilitiesImpl.createSimpleNumericColumnCapabilities(ValueType.LONG);\n-        this.type = typeInfo;\n-      } else if (\"double\".equalsIgnoreCase(typeInfo)) {\n-        capabilities = ColumnCapabilitiesImpl.createSimpleNumericColumnCapabilities(ValueType.DOUBLE);\n-        this.type = typeInfo;\n+      ValueType valueType = factory.getType();\n+\n+      if (valueType.isPrimitive()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI2NDgwMQ=="}, "originalCommit": {"oid": "6eee25a2579eae9f6450a0a4ce315006ee6027a0"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY5MTU1Mw==", "bodyText": "Changed to handle only numeric and complex types, and left a comment about what needs done if the new else case is encountered.", "url": "https://github.com/apache/druid/pull/9638#discussion_r476691553", "createdAt": "2020-08-25T19:37:56Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/incremental/IncrementalIndex.java", "diffHunk": "@@ -1135,21 +1117,21 @@ public MetricDesc(int index, AggregatorFactory factory)\n       this.index = index;\n       this.name = factory.getName();\n \n-      String typeInfo = factory.getTypeName();\n-      if (\"float\".equalsIgnoreCase(typeInfo)) {\n-        capabilities = ColumnCapabilitiesImpl.createSimpleNumericColumnCapabilities(ValueType.FLOAT);\n-        this.type = typeInfo;\n-      } else if (\"long\".equalsIgnoreCase(typeInfo)) {\n-        capabilities = ColumnCapabilitiesImpl.createSimpleNumericColumnCapabilities(ValueType.LONG);\n-        this.type = typeInfo;\n-      } else if (\"double\".equalsIgnoreCase(typeInfo)) {\n-        capabilities = ColumnCapabilitiesImpl.createSimpleNumericColumnCapabilities(ValueType.DOUBLE);\n-        this.type = typeInfo;\n+      ValueType valueType = factory.getType();\n+\n+      if (valueType.isPrimitive()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI2NDgwMQ=="}, "originalCommit": {"oid": "6eee25a2579eae9f6450a0a4ce315006ee6027a0"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzU0NzM5OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/aggregation/post/FieldAccessPostAggregator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODoyOTowN1rOHGNU3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOToxNDozN1rOHGPL3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI3MTgzNg==", "bodyText": "Why not keep it null here? What are the pros and cons of null vs ValueTypes.defaultAggregationType()?", "url": "https://github.com/apache/druid/pull/9638#discussion_r476271836", "createdAt": "2020-08-25T08:29:07Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/post/FieldAccessPostAggregator.java", "diffHunk": "@@ -78,10 +89,28 @@ public String getName()\n     return name;\n   }\n \n+  @Override\n+  public ValueType getType()\n+  {\n+    return type;\n+  }\n+\n   @Override\n   public FieldAccessPostAggregator decorate(Map<String, AggregatorFactory> aggregators)\n   {\n-    return this;\n+    final ValueType type;\n+\n+    if (aggregators != null && aggregators.containsKey(fieldName)) {\n+      type = aggregators.get(fieldName).getType();\n+    } else {\n+      type = ValueTypes.defaultAggregationType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eee25a2579eae9f6450a0a4ce315006ee6027a0"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMwMjMwMg==", "bodyText": "Ah, I think it should be null, this is a leftover from before i made PostAggregator.getType be annotated @Nullable.", "url": "https://github.com/apache/druid/pull/9638#discussion_r476302302", "createdAt": "2020-08-25T09:14:37Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/post/FieldAccessPostAggregator.java", "diffHunk": "@@ -78,10 +89,28 @@ public String getName()\n     return name;\n   }\n \n+  @Override\n+  public ValueType getType()\n+  {\n+    return type;\n+  }\n+\n   @Override\n   public FieldAccessPostAggregator decorate(Map<String, AggregatorFactory> aggregators)\n   {\n-    return this;\n+    final ValueType type;\n+\n+    if (aggregators != null && aggregators.containsKey(fieldName)) {\n+      type = aggregators.get(fieldName).getType();\n+    } else {\n+      type = ValueTypes.defaultAggregationType();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI3MTgzNg=="}, "originalCommit": {"oid": "6eee25a2579eae9f6450a0a4ce315006ee6027a0"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzU3MTU0OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/aggregation/post/FinalizingFieldAccessPostAggregator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODozNDo1NVrOHGNjFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwODozNDo1NVrOHGNjFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI3NTQ3OA==", "bodyText": "Similar comment to FieldAccessPostAggregator: why not keep it null here? What are the pros and cons of null vs ValueTypes.defaultAggregationType()?", "url": "https://github.com/apache/druid/pull/9638#discussion_r476275478", "createdAt": "2020-08-25T08:34:55Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/post/FinalizingFieldAccessPostAggregator.java", "diffHunk": "@@ -94,29 +104,35 @@ public String getName()\n     return name;\n   }\n \n+  @Override\n+  public ValueType getType()\n+  {\n+    return finalizedType;\n+  }\n+\n   @Override\n   public FinalizingFieldAccessPostAggregator decorate(final Map<String, AggregatorFactory> aggregators)\n   {\n     final Comparator<Object> theComparator;\n     final Function<Object, Object> theFinalizer;\n+    final ValueType finalizedType;\n \n     if (aggregators != null && aggregators.containsKey(fieldName)) {\n       //noinspection unchecked\n       theComparator = aggregators.get(fieldName).getComparator();\n+      theFinalizer = aggregators.get(fieldName)::finalizeComputation;\n+      finalizedType = aggregators.get(fieldName).getFinalizedType();\n     } else {\n       //noinspection unchecked\n       theComparator = (Comparator) Comparators.naturalNullsFirst();\n-    }\n-\n-    if (aggregators != null && aggregators.containsKey(fieldName)) {\n-      theFinalizer = aggregators.get(fieldName)::finalizeComputation;\n-    } else {\n       theFinalizer = Function.identity();\n+      finalizedType = ValueTypes.defaultAggregationType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eee25a2579eae9f6450a0a4ce315006ee6027a0"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2512, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}