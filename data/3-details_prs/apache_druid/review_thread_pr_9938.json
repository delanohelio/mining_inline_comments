{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzOTM5NTAx", "number": 9938, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNTowMDoxMVrOEEuM1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODoyMjozOFrOEq3gZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzg2NzEwOnYy", "diffSide": "RIGHT", "path": "extensions-contrib/influxdb-emitter/src/main/java/org/apache/druid/emitter/influxdb/InfluxdbEmitterConfig.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNTowMDoxMlrOGihU3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDowNToxOFrOGzUWNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg1MDc4Mw==", "bodyText": "Looks like CI is complaining about a lack of test coverage. You can add an EqualsVerifier test to fix that", "url": "https://github.com/apache/druid/pull/9938#discussion_r438850783", "createdAt": "2020-06-11T15:00:12Z", "author": {"login": "suneet-s"}, "path": "extensions-contrib/influxdb-emitter/src/main/java/org/apache/druid/emitter/influxdb/InfluxdbEmitterConfig.java", "diffHunk": "@@ -130,6 +159,10 @@ public int hashCode()\n   {\n     int result = getHostname().hashCode();\n     result = 31 * result + getPort();\n+    result = 31 * result + getProtocol().hashCode();\n+    result = 31 * result + (getTrustStorePath() != null ? getTrustStorePath().hashCode() : 0);\n+    result = 31 * result + (getTrustStoreType() != null ? getTrustStoreType().hashCode() : 0);\n+    result = 31 * result + (getTrustStorePassword() != null ? getTrustStorePassword().hashCode() : 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81260f3d171389e7272b65d40c17bca1f25a6f9b"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM0NDQxMw==", "bodyText": "How does EqualsVerifier work? The test I added is failing on\n\nNon-nullity: equals throws NullPointerException on field port.\n\nbut if port is null then it gets set to a default value in the config's constructor.", "url": "https://github.com/apache/druid/pull/9938#discussion_r456344413", "createdAt": "2020-07-17T09:57:28Z", "author": {"login": "awelsh93"}, "path": "extensions-contrib/influxdb-emitter/src/main/java/org/apache/druid/emitter/influxdb/InfluxdbEmitterConfig.java", "diffHunk": "@@ -130,6 +159,10 @@ public int hashCode()\n   {\n     int result = getHostname().hashCode();\n     result = 31 * result + getPort();\n+    result = 31 * result + getProtocol().hashCode();\n+    result = 31 * result + (getTrustStorePath() != null ? getTrustStorePath().hashCode() : 0);\n+    result = 31 * result + (getTrustStoreType() != null ? getTrustStoreType().hashCode() : 0);\n+    result = 31 * result + (getTrustStorePassword() != null ? getTrustStorePassword().hashCode() : 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg1MDc4Mw=="}, "originalCommit": {"oid": "81260f3d171389e7272b65d40c17bca1f25a6f9b"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ2MzkyNQ==", "bodyText": "EqualsVerifier doesn't know that because that field is not marked as NotNull. There's more information about that exception here - https://jqno.nl/equalsverifier/errormessages/non-nullity-equals-hashcode-tostring-throws-nullpointerexception/\nYou could also tell the test that the field is not null with .withNonnullFields(\"port\") in the EqualsVerifier test", "url": "https://github.com/apache/druid/pull/9938#discussion_r456463925", "createdAt": "2020-07-17T14:05:18Z", "author": {"login": "suneet-s"}, "path": "extensions-contrib/influxdb-emitter/src/main/java/org/apache/druid/emitter/influxdb/InfluxdbEmitterConfig.java", "diffHunk": "@@ -130,6 +159,10 @@ public int hashCode()\n   {\n     int result = getHostname().hashCode();\n     result = 31 * result + getPort();\n+    result = 31 * result + getProtocol().hashCode();\n+    result = 31 * result + (getTrustStorePath() != null ? getTrustStorePath().hashCode() : 0);\n+    result = 31 * result + (getTrustStoreType() != null ? getTrustStoreType().hashCode() : 0);\n+    result = 31 * result + (getTrustStorePassword() != null ? getTrustStorePassword().hashCode() : 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg1MDc4Mw=="}, "originalCommit": {"oid": "81260f3d171389e7272b65d40c17bca1f25a6f9b"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODc2NjM4OnYy", "diffSide": "RIGHT", "path": "extensions-contrib/influxdb-emitter/src/main/java/org/apache/druid/emitter/influxdb/InfluxdbEmitterConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNTowNDoyMVrOGpTyOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNTowNDoyMVrOGpTyOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk2ODk1NQ==", "bodyText": "Is there any reason not to use\n    return Objects.hash(\nreturn Objects.hash(\n        hostname,\n        port,\n...", "url": "https://github.com/apache/druid/pull/9938#discussion_r445968955", "createdAt": "2020-06-26T05:04:21Z", "author": {"login": "clintropolis"}, "path": "extensions-contrib/influxdb-emitter/src/main/java/org/apache/druid/emitter/influxdb/InfluxdbEmitterConfig.java", "diffHunk": "@@ -130,6 +159,10 @@ public int hashCode()\n   {\n     int result = getHostname().hashCode();\n     result = 31 * result + getPort();\n+    result = 31 * result + getProtocol().hashCode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81260f3d171389e7272b65d40c17bca1f25a6f9b"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzgzMjQ4OnYy", "diffSide": "RIGHT", "path": "extensions-contrib/influxdb-emitter/src/main/java/org/apache/druid/emitter/influxdb/InfluxdbEmitter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODoxODozNVrOHdUT5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMjo1MzowMlrOHi7I9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwMzUyNQ==", "bodyText": "It would be better to use try-with-resources. You will not have to handle the IOException thrown in close() by yourself.", "url": "https://github.com/apache/druid/pull/9938#discussion_r500503525", "createdAt": "2020-10-06T18:18:35Z", "author": {"login": "jihoonson"}, "path": "extensions-contrib/influxdb-emitter/src/main/java/org/apache/druid/emitter/influxdb/InfluxdbEmitter.java", "diffHunk": "@@ -211,4 +219,46 @@ public void transformAndSendToInfluxdb(LinkedBlockingQueue<ServiceMetricEvent> e\n     postToInflux(payload.toString());\n   }\n \n+  private HttpClient buildInfluxdbClient()\n+  {\n+    if (\"https\".equals(influxdbEmitterConfig.getProtocol())) {\n+      SSLContext sslContext;\n+      if (influxdbEmitterConfig.getTrustStorePath() == null || influxdbEmitterConfig.getTrustStorePassword() == null) {\n+        String msg = \"Can't load TrustStore. Truststore path or password is not set.\";\n+        log.error(msg);\n+        throw new IllegalStateException(msg);\n+      }\n+\n+      FileInputStream in = null;\n+\n+      try {\n+        in = new FileInputStream(new File(influxdbEmitterConfig.getTrustStorePath()));\n+        KeyStore store = KeyStore.getInstance(influxdbEmitterConfig.getTrustStoreType());\n+        store.load(in, influxdbEmitterConfig.getTrustStorePassword().toCharArray());\n+        TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+        tmf.init(store);\n+        sslContext = SSLContext.getInstance(\"TLS\");\n+        sslContext.init(null, tmf.getTrustManagers(), null);\n+      }\n+      catch (Exception ex) {\n+        String msg = \"Unable to load TrustStore\";\n+        log.error(msg);\n+        throw new IllegalStateException(msg);\n+      }\n+      finally {\n+        if (in != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bc316e6e9b5a37811b46f9a96a1c796711c6fd5"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM4MjU4MQ==", "bodyText": "Thanks for your review - I think I've addressed these comments. Can you take another look please?", "url": "https://github.com/apache/druid/pull/9938#discussion_r506382581", "createdAt": "2020-10-16T12:53:02Z", "author": {"login": "awelsh93"}, "path": "extensions-contrib/influxdb-emitter/src/main/java/org/apache/druid/emitter/influxdb/InfluxdbEmitter.java", "diffHunk": "@@ -211,4 +219,46 @@ public void transformAndSendToInfluxdb(LinkedBlockingQueue<ServiceMetricEvent> e\n     postToInflux(payload.toString());\n   }\n \n+  private HttpClient buildInfluxdbClient()\n+  {\n+    if (\"https\".equals(influxdbEmitterConfig.getProtocol())) {\n+      SSLContext sslContext;\n+      if (influxdbEmitterConfig.getTrustStorePath() == null || influxdbEmitterConfig.getTrustStorePassword() == null) {\n+        String msg = \"Can't load TrustStore. Truststore path or password is not set.\";\n+        log.error(msg);\n+        throw new IllegalStateException(msg);\n+      }\n+\n+      FileInputStream in = null;\n+\n+      try {\n+        in = new FileInputStream(new File(influxdbEmitterConfig.getTrustStorePath()));\n+        KeyStore store = KeyStore.getInstance(influxdbEmitterConfig.getTrustStoreType());\n+        store.load(in, influxdbEmitterConfig.getTrustStorePassword().toCharArray());\n+        TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+        tmf.init(store);\n+        sslContext = SSLContext.getInstance(\"TLS\");\n+        sslContext.init(null, tmf.getTrustManagers(), null);\n+      }\n+      catch (Exception ex) {\n+        String msg = \"Unable to load TrustStore\";\n+        log.error(msg);\n+        throw new IllegalStateException(msg);\n+      }\n+      finally {\n+        if (in != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwMzUyNQ=="}, "originalCommit": {"oid": "3bc316e6e9b5a37811b46f9a96a1c796711c6fd5"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzg1MDYzOnYy", "diffSide": "RIGHT", "path": "extensions-contrib/influxdb-emitter/src/main/java/org/apache/druid/emitter/influxdb/InfluxdbEmitter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODoyMjozOFrOHdUeUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODoyMjozOFrOHdUeUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwNjE5Mg==", "bodyText": "I think this should be thrown.", "url": "https://github.com/apache/druid/pull/9938#discussion_r500506192", "createdAt": "2020-10-06T18:22:38Z", "author": {"login": "jihoonson"}, "path": "extensions-contrib/influxdb-emitter/src/main/java/org/apache/druid/emitter/influxdb/InfluxdbEmitter.java", "diffHunk": "@@ -211,4 +219,46 @@ public void transformAndSendToInfluxdb(LinkedBlockingQueue<ServiceMetricEvent> e\n     postToInflux(payload.toString());\n   }\n \n+  private HttpClient buildInfluxdbClient()\n+  {\n+    if (\"https\".equals(influxdbEmitterConfig.getProtocol())) {\n+      SSLContext sslContext;\n+      if (influxdbEmitterConfig.getTrustStorePath() == null || influxdbEmitterConfig.getTrustStorePassword() == null) {\n+        String msg = \"Can't load TrustStore. Truststore path or password is not set.\";\n+        log.error(msg);\n+        throw new IllegalStateException(msg);\n+      }\n+\n+      FileInputStream in = null;\n+\n+      try {\n+        in = new FileInputStream(new File(influxdbEmitterConfig.getTrustStorePath()));\n+        KeyStore store = KeyStore.getInstance(influxdbEmitterConfig.getTrustStoreType());\n+        store.load(in, influxdbEmitterConfig.getTrustStorePassword().toCharArray());\n+        TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+        tmf.init(store);\n+        sslContext = SSLContext.getInstance(\"TLS\");\n+        sslContext.init(null, tmf.getTrustManagers(), null);\n+      }\n+      catch (Exception ex) {\n+        String msg = \"Unable to load TrustStore\";\n+        log.error(msg);\n+        throw new IllegalStateException(msg);\n+      }\n+      finally {\n+        if (in != null) {\n+          try {\n+            in.close();\n+          }\n+          catch (IOException ex) {\n+            log.error(\"Unable to load TrustStore\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bc316e6e9b5a37811b46f9a96a1c796711c6fd5"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2479, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}