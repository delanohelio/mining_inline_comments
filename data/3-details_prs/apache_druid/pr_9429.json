{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNjQzMDU1", "number": 9429, "title": "fix issue when distinct grouping dimensions are optimized into the same virtual column expression", "bodyText": "Fixes issue uncovered in #9412.\nDescription\nAs an optimization added in #6902, Druid SQL re-uses the same expression virtual column whenever possible when constructing a native query, to take advantage of things like the caching selectors, etc.\nThese virtual columns are translated into DimensionExpression when taking part in a grouping, using the virtual column name as the output name and the input dimension on the resulting DimensionSpec. However, if 2 dimensions taking part in a grouping were using the same expression, the output signature would incorrectly duplicate the expression causing an error of the form:\n...\nCaused by: org.apache.druid.java.util.common.ISE: Duplicate field name: v0\n\tat org.apache.druid.sql.calcite.rel.Grouping.<init>(Grouping.java:71)\n\tat org.apache.druid.sql.calcite.rel.Grouping.create(Grouping.java:100)\n\tat org.apache.druid.sql.calcite.rel.DruidQuery.computeGrouping(DruidQuery.java:346)\n\tat org.apache.druid.sql.calcite.rel.DruidQuery.fromPartialQuery(DruidQuery.java:193)\n\tat org.apache.druid.sql.calcite.rel.PartialDruidQuery.build(PartialDruidQuery.java:306)\n...\n\nThis PR fixes this issue by checking for repeated usage of virtual columns in dimensions, and uses normal dimension output names rather than the virtual column name in case a duplicate is encountered. The added test and modified existing tests illustrate the effects of the new behavior.\n\nThis PR has:\n\n been self-reviewed.\n added unit tests or modified existing tests to cover new code paths.\n\n\nKey changed/added classes in this PR\n\nDruidQuery\nDimensionExpression", "createdAt": "2020-02-27T05:18:45Z", "url": "https://github.com/apache/druid/pull/9429", "merged": true, "mergeCommit": {"oid": "f8b1f2f7f3fe6d49cbb5f19bfe6196a5b716b3ef"}, "closed": true, "closedAt": "2020-03-10T00:48:30Z", "author": {"login": "clintropolis"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIUSpsgH2gAyMzgwNjQzMDU1OjI5YTYzZTBlZWYwODZhYmY4MWIzYzk3ZGYxYTM4ZDhiMGYyZjMwOGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMCa2vgH2gAyMzgwNjQzMDU1OjYzM2VkYTZhOWJjNTg4YzA4YjdiYzJlOTVmMjEyYmJkNGVmMjA4NDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "29a63e0eef086abf81b3c97df1a38d8b0f2f308c", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/29a63e0eef086abf81b3c97df1a38d8b0f2f308c", "committedDate": "2020-02-27T05:15:57Z", "message": "fix issue when distinct grouping dimensions are optimized into the same virtual column expression"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e309aaeb9bc2d2647be56fdee3866835861a325", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/9e309aaeb9bc2d2647be56fdee3866835861a325", "committedDate": "2020-02-27T07:10:45Z", "message": "fix tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1ODQ3Mjkx", "url": "https://github.com/apache/druid/pull/9429#pullrequestreview-365847291", "createdAt": "2020-02-27T17:19:01Z", "commit": {"oid": "9e309aaeb9bc2d2647be56fdee3866835861a325"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzoxOTowMVrOFvaBng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzoxOTo0N1rOFvaDOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1Mzc5MA==", "bodyText": "How about inputColumn? (I think it's a bit weird to call columns in the table \"dimensions\" and would like to get away from that in new code.)\nIt would also be good to include a comment about what the relationship is between inputColumn and expression, with some examples. It might get confusing to have both. Additionally: if the expression is a simple column reference, is it required that expression.getDirectColumn().equals(inputColumn)? If so it would be good to validate that in the constructor.", "url": "https://github.com/apache/druid/pull/9429#discussion_r385253790", "createdAt": "2020-02-27T17:19:01Z", "author": {"login": "gianm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/aggregation/DimensionExpression.java", "diffHunk": "@@ -28,6 +28,7 @@\n \n public class DimensionExpression\n {\n+  private final String inputDimension;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e309aaeb9bc2d2647be56fdee3866835861a325"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1NDIwMg==", "bodyText": "It's not immediately clear when each constructor should be used. They need javadocs, or to be made private and replaced with nicely-named static factories, or (IMO ideally) both.", "url": "https://github.com/apache/druid/pull/9429#discussion_r385254202", "createdAt": "2020-02-27T17:19:47Z", "author": {"login": "gianm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/aggregation/DimensionExpression.java", "diffHunk": "@@ -38,11 +39,27 @@ public DimensionExpression(\n       final ValueType outputType\n   )\n   {\n+    this(outputName, outputName, expression, outputType);\n+  }\n+\n+  public DimensionExpression(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e309aaeb9bc2d2647be56fdee3866835861a325"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cff14aadcd6b7fa013e42e225df98eab378761f9", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/cff14aadcd6b7fa013e42e225df98eab378761f9", "committedDate": "2020-02-27T23:08:53Z", "message": "more better"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNjk2MjY1", "url": "https://github.com/apache/druid/pull/9429#pullrequestreview-370696265", "createdAt": "2020-03-07T00:10:59Z", "commit": {"oid": "cff14aadcd6b7fa013e42e225df98eab378761f9"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDoxMDo1OVrOFzK9Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDoxMTowN1rOFzK9MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMTE3OA==", "bodyText": "Missing a ,  here.", "url": "https://github.com/apache/druid/pull/9429#discussion_r389201178", "createdAt": "2020-03-07T00:10:59Z", "author": {"login": "gianm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/aggregation/DimensionExpression.java", "diffHunk": "@@ -72,21 +107,23 @@ public boolean equals(final Object o)\n       return false;\n     }\n     final DimensionExpression that = (DimensionExpression) o;\n-    return Objects.equals(outputName, that.outputName) &&\n+    return Objects.equals(virtualColumn, that.virtualColumn) &&\n+           Objects.equals(outputName, that.outputName) &&\n            Objects.equals(expression, that.expression) &&\n            outputType == that.outputType;\n   }\n \n   @Override\n   public int hashCode()\n   {\n-    return Objects.hash(outputName, expression, outputType);\n+    return Objects.hash(virtualColumn, outputName, expression, outputType);\n   }\n \n   @Override\n   public String toString()\n   {\n     return \"DimensionExpression{\" +\n+           \"virtualColumn='\" + virtualColumn + '\\'' +\n            \"outputName='\" + outputName + '\\'' +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cff14aadcd6b7fa013e42e225df98eab378761f9"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMTIwMQ==", "bodyText": "\"expression\" (spelling)", "url": "https://github.com/apache/druid/pull/9429#discussion_r389201201", "createdAt": "2020-03-07T00:11:07Z", "author": {"login": "gianm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/aggregation/DimensionExpression.java", "diffHunk": "@@ -28,21 +29,55 @@\n \n public class DimensionExpression\n {\n+  /**\n+   * Create a dimension expresison for direct column access or simple extractions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cff14aadcd6b7fa013e42e225df98eab378761f9"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "633eda6a9bc588c08b7bc2e95f212bbd4ef20847", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/633eda6a9bc588c08b7bc2e95f212bbd4ef20847", "committedDate": "2020-03-09T18:42:19Z", "message": "fixes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2961, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}