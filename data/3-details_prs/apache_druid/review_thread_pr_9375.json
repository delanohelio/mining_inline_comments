{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2ODIwOTEz", "number": 9375, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMzoyNDozMFrODhVQkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzo0MjoxOVrODiyudg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2Mjc3OTA0OnYy", "diffSide": "RIGHT", "path": "extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSource.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMzoyNDozMFrOFsBrkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNDo1Mjo1NVrOFtVrvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTcwOTIwMg==", "bodyText": "This should probably be added to https://druid.apache.org/docs/latest/ingestion/native-batch.html#s3-input-source. Similar comment for the other modified input sources.", "url": "https://github.com/apache/druid/pull/9375#discussion_r381709202", "createdAt": "2020-02-20T03:24:30Z", "author": {"login": "ccaominh"}, "path": "extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSource.java", "diffHunk": "@@ -46,13 +51,25 @@\n   @JsonCreator\n   public S3InputSource(\n       @JacksonInject ServerSideEncryptingAmazonS3 s3Client,\n+      @JacksonInject AmazonS3ClientBuilder amazonS3ClientBuilder,\n+      @JacksonInject S3StorageConfig storageConfig,\n       @JsonProperty(\"uris\") @Nullable List<URI> uris,\n       @JsonProperty(\"prefixes\") @Nullable List<URI> prefixes,\n-      @JsonProperty(\"objects\") @Nullable List<CloudObjectLocation> objects\n+      @JsonProperty(\"objects\") @Nullable List<CloudObjectLocation> objects,\n+      @JsonProperty(\"properties\") @Nullable CloudConfigProperties cloudConfigProperties", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "960fcaa0e15b23291a77ae23631240fd0bcaefe8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4MTIwNQ==", "bodyText": "I don't think the other docs should be modified yet, only s3, since the others are not wired up to anything there like it is in S3InputSource.", "url": "https://github.com/apache/druid/pull/9375#discussion_r382281205", "createdAt": "2020-02-20T21:58:54Z", "author": {"login": "clintropolis"}, "path": "extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSource.java", "diffHunk": "@@ -46,13 +51,25 @@\n   @JsonCreator\n   public S3InputSource(\n       @JacksonInject ServerSideEncryptingAmazonS3 s3Client,\n+      @JacksonInject AmazonS3ClientBuilder amazonS3ClientBuilder,\n+      @JacksonInject S3StorageConfig storageConfig,\n       @JsonProperty(\"uris\") @Nullable List<URI> uris,\n       @JsonProperty(\"prefixes\") @Nullable List<URI> prefixes,\n-      @JsonProperty(\"objects\") @Nullable List<CloudObjectLocation> objects\n+      @JsonProperty(\"objects\") @Nullable List<CloudObjectLocation> objects,\n+      @JsonProperty(\"properties\") @Nullable CloudConfigProperties cloudConfigProperties", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTcwOTIwMg=="}, "originalCommit": {"oid": "960fcaa0e15b23291a77ae23631240fd0bcaefe8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA4NTUwMA==", "bodyText": "Yep. Will only modify docs for s3", "url": "https://github.com/apache/druid/pull/9375#discussion_r383085500", "createdAt": "2020-02-24T04:52:55Z", "author": {"login": "maytasm"}, "path": "extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSource.java", "diffHunk": "@@ -46,13 +51,25 @@\n   @JsonCreator\n   public S3InputSource(\n       @JacksonInject ServerSideEncryptingAmazonS3 s3Client,\n+      @JacksonInject AmazonS3ClientBuilder amazonS3ClientBuilder,\n+      @JacksonInject S3StorageConfig storageConfig,\n       @JsonProperty(\"uris\") @Nullable List<URI> uris,\n       @JsonProperty(\"prefixes\") @Nullable List<URI> prefixes,\n-      @JsonProperty(\"objects\") @Nullable List<CloudObjectLocation> objects\n+      @JsonProperty(\"objects\") @Nullable List<CloudObjectLocation> objects,\n+      @JsonProperty(\"properties\") @Nullable CloudConfigProperties cloudConfigProperties", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTcwOTIwMg=="}, "originalCommit": {"oid": "960fcaa0e15b23291a77ae23631240fd0bcaefe8"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjA0MjkzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/data/input/impl/CloudConfigProperties.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxOTowNDoxNlrOFsffiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNDo1MzozMlrOFtVsFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE5NzY0MA==", "bodyText": "Do we want to support Azure with this too? If so Azure is a bit different; requires an account id, and secret key. Can this be extended for that easily?", "url": "https://github.com/apache/druid/pull/9375#discussion_r382197640", "createdAt": "2020-02-20T19:04:16Z", "author": {"login": "zachjsh"}, "path": "core/src/main/java/org/apache/druid/data/input/impl/CloudConfigProperties.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.impl;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Preconditions;\n+import org.apache.druid.metadata.PasswordProvider;\n+\n+import javax.annotation.Nullable;\n+import java.util.Objects;\n+\n+public class CloudConfigProperties\n+{\n+  @JsonCreator\n+  public CloudConfigProperties(\n+      @JsonProperty(\"accessKeyId\") @Nullable PasswordProvider accessKeyId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "960fcaa0e15b23291a77ae23631240fd0bcaefe8"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE5OTAxNg==", "bodyText": "Yes. Maybe we can rename the accessKeyId to something more generic. But all the cloud (s3, G, Azure) requires a \"user\" and a \"password\" which this should work for all", "url": "https://github.com/apache/druid/pull/9375#discussion_r382199016", "createdAt": "2020-02-20T19:06:45Z", "author": {"login": "maytasm"}, "path": "core/src/main/java/org/apache/druid/data/input/impl/CloudConfigProperties.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.impl;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Preconditions;\n+import org.apache.druid.metadata.PasswordProvider;\n+\n+import javax.annotation.Nullable;\n+import java.util.Objects;\n+\n+public class CloudConfigProperties\n+{\n+  @JsonCreator\n+  public CloudConfigProperties(\n+      @JsonProperty(\"accessKeyId\") @Nullable PasswordProvider accessKeyId,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE5NzY0MA=="}, "originalCommit": {"oid": "960fcaa0e15b23291a77ae23631240fd0bcaefe8"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA4NTU5MQ==", "bodyText": "Making a specific configProperties class for each cloudInputSource without sharing inheritance", "url": "https://github.com/apache/druid/pull/9375#discussion_r383085591", "createdAt": "2020-02-24T04:53:32Z", "author": {"login": "maytasm"}, "path": "core/src/main/java/org/apache/druid/data/input/impl/CloudConfigProperties.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.impl;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Preconditions;\n+import org.apache.druid.metadata.PasswordProvider;\n+\n+import javax.annotation.Nullable;\n+import java.util.Objects;\n+\n+public class CloudConfigProperties\n+{\n+  @JsonCreator\n+  public CloudConfigProperties(\n+      @JsonProperty(\"accessKeyId\") @Nullable PasswordProvider accessKeyId,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE5NzY0MA=="}, "originalCommit": {"oid": "960fcaa0e15b23291a77ae23631240fd0bcaefe8"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjU2MTQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/data/input/impl/CloudConfigProperties.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTo1Nzo0OVrOFskj_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNDo1NToyM1rOFtVtAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4MDcwMw==", "bodyText": "I wonder if this class is too synthetic, and instead should not be a shared base type, and rather be input source specific. Like I imagine it could be useful in the future to support additional properties, but beyond the 'username' and 'password' model that is common to all clouds, further stuff probably starts to get really cloud specific and probably not a lot of benefit being down here.\nIt might be better if in this PR you would add a S3InputSourceConfig or whatever directly to S3InputSource and not pass it down to the base type, since it doesn't actually seem to be of any use there, and also not modify azure and google cloud since they can add their own specific implementations when support is added for credentials override there (and use their own terminology for username/password). @maytasm3 / @jihoonson what do you think?", "url": "https://github.com/apache/druid/pull/9375#discussion_r382280703", "createdAt": "2020-02-20T21:57:49Z", "author": {"login": "clintropolis"}, "path": "core/src/main/java/org/apache/druid/data/input/impl/CloudConfigProperties.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.impl;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Preconditions;\n+import org.apache.druid.metadata.PasswordProvider;\n+\n+import javax.annotation.Nullable;\n+import java.util.Objects;\n+\n+public class CloudConfigProperties", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "960fcaa0e15b23291a77ae23631240fd0bcaefe8"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA4NTgyNg==", "bodyText": "Make sense to me. Making a specific configProperties class for each cloudInputSource without sharing inheritance. (For this PR, just the S3 stuff and Azure and G will comes in a later PR).", "url": "https://github.com/apache/druid/pull/9375#discussion_r383085826", "createdAt": "2020-02-24T04:55:23Z", "author": {"login": "maytasm"}, "path": "core/src/main/java/org/apache/druid/data/input/impl/CloudConfigProperties.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.impl;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Preconditions;\n+import org.apache.druid.metadata.PasswordProvider;\n+\n+import javax.annotation.Nullable;\n+import java.util.Objects;\n+\n+public class CloudConfigProperties", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4MDcwMw=="}, "originalCommit": {"oid": "960fcaa0e15b23291a77ae23631240fd0bcaefe8"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDc2NDE3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/data/input/impl/S3ConfigProperties.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMDo1ODoxOFrOFtvnJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDozNzo0MFrOFt05TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxMDMwOQ==", "bodyText": "This should live in the s3 extension, not in druid-core", "url": "https://github.com/apache/druid/pull/9375#discussion_r383510309", "createdAt": "2020-02-24T20:58:18Z", "author": {"login": "clintropolis"}, "path": "core/src/main/java/org/apache/druid/data/input/impl/S3ConfigProperties.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.impl;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Preconditions;\n+import org.apache.druid.metadata.PasswordProvider;\n+\n+import javax.annotation.Nullable;\n+import java.util.Objects;\n+\n+/**\n+ * Contains properties for s3 access configuration.\n+ * Properties can be specified by ingestionSpec and override system default.\n+ */\n+public class S3ConfigProperties", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64d2720829fbc7ed32a40afb3bbd36e9920370fe"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5Njg3Nw==", "bodyText": "Oops forgot that. Done.", "url": "https://github.com/apache/druid/pull/9375#discussion_r383596877", "createdAt": "2020-02-25T00:37:40Z", "author": {"login": "maytasm"}, "path": "core/src/main/java/org/apache/druid/data/input/impl/S3ConfigProperties.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.impl;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Preconditions;\n+import org.apache.druid.metadata.PasswordProvider;\n+\n+import javax.annotation.Nullable;\n+import java.util.Objects;\n+\n+/**\n+ * Contains properties for s3 access configuration.\n+ * Properties can be specified by ingestionSpec and override system default.\n+ */\n+public class S3ConfigProperties", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxMDMwOQ=="}, "originalCommit": {"oid": "64d2720829fbc7ed32a40afb3bbd36e9920370fe"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDc2ODI4OnYy", "diffSide": "RIGHT", "path": "extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSource.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMDo1OTo0M1rOFtvpsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDo0Mjo0NFrOFt0_YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxMDk2Mg==", "bodyText": "nit: formatting looks sort of funny here to me, unfortunately i think this is one of the few things style checks don't catch", "url": "https://github.com/apache/druid/pull/9375#discussion_r383510962", "createdAt": "2020-02-24T20:59:43Z", "author": {"login": "clintropolis"}, "path": "extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSource.java", "diffHunk": "@@ -76,7 +114,41 @@ protected S3Entity createEntity(InputSplit<CloudObjectLocation> split)\n   @Override\n   public SplittableInputSource<CloudObjectLocation> withSplit(InputSplit<CloudObjectLocation> split)\n   {\n-    return new S3InputSource(s3Client, inputDataConfig, null, null, ImmutableList.of(split.get()));\n+    return new S3InputSource(\n+        s3Client.get(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64d2720829fbc7ed32a40afb3bbd36e9920370fe"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5Mzk4Mw==", "bodyText": "Not sure what is the correct formatting here.\nI do see something like below in the code\n        CloudFilesObject segmentData = new CloudFilesObject(\n            segmentPath,\n            outFile,\n            objectApi.getRegion(),\n            objectApi.getContainer()\n        );\n\nand\n    return Iterables.transform(\n        supervisorSpec.getSpec().getDataSources(),\n        AuthorizationUtils.DATASOURCE_READ_RA_GENERATOR\n    );", "url": "https://github.com/apache/druid/pull/9375#discussion_r383593983", "createdAt": "2020-02-25T00:27:39Z", "author": {"login": "maytasm"}, "path": "extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSource.java", "diffHunk": "@@ -76,7 +114,41 @@ protected S3Entity createEntity(InputSplit<CloudObjectLocation> split)\n   @Override\n   public SplittableInputSource<CloudObjectLocation> withSplit(InputSplit<CloudObjectLocation> split)\n   {\n-    return new S3InputSource(s3Client, inputDataConfig, null, null, ImmutableList.of(split.get()));\n+    return new S3InputSource(\n+        s3Client.get(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxMDk2Mg=="}, "originalCommit": {"oid": "64d2720829fbc7ed32a40afb3bbd36e9920370fe"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5NDM0OQ==", "bodyText": "I think that's the same formatting.", "url": "https://github.com/apache/druid/pull/9375#discussion_r383594349", "createdAt": "2020-02-25T00:29:00Z", "author": {"login": "maytasm"}, "path": "extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSource.java", "diffHunk": "@@ -76,7 +114,41 @@ protected S3Entity createEntity(InputSplit<CloudObjectLocation> split)\n   @Override\n   public SplittableInputSource<CloudObjectLocation> withSplit(InputSplit<CloudObjectLocation> split)\n   {\n-    return new S3InputSource(s3Client, inputDataConfig, null, null, ImmutableList.of(split.get()));\n+    return new S3InputSource(\n+        s3Client.get(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxMDk2Mg=="}, "originalCommit": {"oid": "64d2720829fbc7ed32a40afb3bbd36e9920370fe"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5ODQzMg==", "bodyText": "oops. Totally didn't see the extra whitespace at the beginning of some lines. Fixed. Thanks", "url": "https://github.com/apache/druid/pull/9375#discussion_r383598432", "createdAt": "2020-02-25T00:42:44Z", "author": {"login": "maytasm"}, "path": "extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSource.java", "diffHunk": "@@ -76,7 +114,41 @@ protected S3Entity createEntity(InputSplit<CloudObjectLocation> split)\n   @Override\n   public SplittableInputSource<CloudObjectLocation> withSplit(InputSplit<CloudObjectLocation> split)\n   {\n-    return new S3InputSource(s3Client, inputDataConfig, null, null, ImmutableList.of(split.get()));\n+    return new S3InputSource(\n+        s3Client.get(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxMDk2Mg=="}, "originalCommit": {"oid": "64d2720829fbc7ed32a40afb3bbd36e9920370fe"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDc2OTc1OnYy", "diffSide": "RIGHT", "path": "extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMTowMDoxNVrOFtvqjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDozODowN1rOFt051w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxMTE4Mg==", "bodyText": "nit: this could be one line", "url": "https://github.com/apache/druid/pull/9375#discussion_r383511182", "createdAt": "2020-02-24T21:00:15Z", "author": {"login": "clintropolis"}, "path": "extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSource.java", "diffHunk": "@@ -76,7 +114,41 @@ protected S3Entity createEntity(InputSplit<CloudObjectLocation> split)\n   @Override\n   public SplittableInputSource<CloudObjectLocation> withSplit(InputSplit<CloudObjectLocation> split)\n   {\n-    return new S3InputSource(s3Client, inputDataConfig, null, null, ImmutableList.of(split.get()));\n+    return new S3InputSource(\n+        s3Client.get(),\n+       null,\n+       null,\n+        inputDataConfig,\n+       null,\n+       null,\n+       ImmutableList.of(split.get()),\n+       getS3ConfigProperties()\n+    );\n+  }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    return Objects.hash(\n+        super.hashCode(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64d2720829fbc7ed32a40afb3bbd36e9920370fe"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5NzAxNQ==", "bodyText": "done", "url": "https://github.com/apache/druid/pull/9375#discussion_r383597015", "createdAt": "2020-02-25T00:38:07Z", "author": {"login": "maytasm"}, "path": "extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSource.java", "diffHunk": "@@ -76,7 +114,41 @@ protected S3Entity createEntity(InputSplit<CloudObjectLocation> split)\n   @Override\n   public SplittableInputSource<CloudObjectLocation> withSplit(InputSplit<CloudObjectLocation> split)\n   {\n-    return new S3InputSource(s3Client, inputDataConfig, null, null, ImmutableList.of(split.get()));\n+    return new S3InputSource(\n+        s3Client.get(),\n+       null,\n+       null,\n+        inputDataConfig,\n+       null,\n+       null,\n+       ImmutableList.of(split.get()),\n+       getS3ConfigProperties()\n+    );\n+  }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    return Objects.hash(\n+        super.hashCode(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxMTE4Mg=="}, "originalCommit": {"oid": "64d2720829fbc7ed32a40afb3bbd36e9920370fe"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDgwNzIzOnYy", "diffSide": "RIGHT", "path": "extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSource.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMToxMzowOFrOFtwCXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMTozMToxOVrOFt107g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxNzI3OQ==", "bodyText": "hmm, should the check that one of s3Client or amazonS3ClientBuilder and storageConfig  are not null be done eagerly instead of in the supplier? (i'm not certain either way, just thinking out loud)", "url": "https://github.com/apache/druid/pull/9375#discussion_r383517279", "createdAt": "2020-02-24T21:13:08Z", "author": {"login": "clintropolis"}, "path": "extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSource.java", "diffHunk": "@@ -19,50 +19,88 @@\n \n package org.apache.druid.data.input.s3;\n \n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n import com.amazonaws.services.s3.model.S3ObjectSummary;\n import com.fasterxml.jackson.annotation.JacksonInject;\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.google.common.base.Preconditions;\n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n import com.google.common.collect.ImmutableList;\n import org.apache.druid.data.input.InputSplit;\n import org.apache.druid.data.input.impl.CloudObjectInputSource;\n import org.apache.druid.data.input.impl.CloudObjectLocation;\n+import org.apache.druid.data.input.impl.S3ConfigProperties;\n import org.apache.druid.data.input.impl.SplittableInputSource;\n import org.apache.druid.storage.s3.S3InputDataConfig;\n+import org.apache.druid.storage.s3.S3StorageConfig;\n import org.apache.druid.storage.s3.S3StorageDruidModule;\n import org.apache.druid.storage.s3.S3Utils;\n import org.apache.druid.storage.s3.ServerSideEncryptingAmazonS3;\n \n import javax.annotation.Nullable;\n import java.net.URI;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Stream;\n import java.util.stream.StreamSupport;\n \n public class S3InputSource extends CloudObjectInputSource<S3Entity>\n {\n-  private final ServerSideEncryptingAmazonS3 s3Client;\n+  // We lazily initialize s3Client to avoid costly s3 operation when we only need S3InputSource for stored information\n+  // (such as for task logs) and not for ingestion. (This cost only applies for new s3Client created with\n+  // s3ConfigProperties given).\n+  private final Supplier<ServerSideEncryptingAmazonS3> s3Client;\n+  @JsonProperty(\"properties\")\n+  private final S3ConfigProperties s3ConfigProperties;\n   private final S3InputDataConfig inputDataConfig;\n \n   @JsonCreator\n   public S3InputSource(\n       @JacksonInject ServerSideEncryptingAmazonS3 s3Client,\n+      @JacksonInject AmazonS3ClientBuilder amazonS3ClientBuilder,\n+      @JacksonInject S3StorageConfig storageConfig,\n       @JacksonInject S3InputDataConfig inputDataConfig,\n       @JsonProperty(\"uris\") @Nullable List<URI> uris,\n       @JsonProperty(\"prefixes\") @Nullable List<URI> prefixes,\n-      @JsonProperty(\"objects\") @Nullable List<CloudObjectLocation> objects\n+      @JsonProperty(\"objects\") @Nullable List<CloudObjectLocation> objects,\n+      @JsonProperty(\"properties\") @Nullable S3ConfigProperties s3ConfigProperties\n   )\n   {\n     super(S3StorageDruidModule.SCHEME, uris, prefixes, objects);\n-    this.s3Client = Preconditions.checkNotNull(s3Client, \"s3Client\");\n     this.inputDataConfig = Preconditions.checkNotNull(inputDataConfig, \"S3DataSegmentPusherConfig\");\n+    this.s3ConfigProperties = s3ConfigProperties;\n+    this.s3Client = Suppliers.memoize(\n+        () -> {\n+          if (amazonS3ClientBuilder != null && storageConfig != null && s3ConfigProperties != null) {\n+            if (s3ConfigProperties.isCredentialsConfigured()) {\n+              BasicAWSCredentials creds = new BasicAWSCredentials(\n+                  s3ConfigProperties.getAccessKeyId().getPassword(),\n+                  s3ConfigProperties.getSecretAccessKey().getPassword());\n+              amazonS3ClientBuilder.withCredentials(new AWSStaticCredentialsProvider(creds));\n+            }\n+            return new ServerSideEncryptingAmazonS3(amazonS3ClientBuilder.build(), storageConfig.getServerSideEncryption());\n+          } else {\n+            return Preconditions.checkNotNull(s3Client, \"s3Client\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64d2720829fbc7ed32a40afb3bbd36e9920370fe"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5OTI4MQ==", "bodyText": "I think it will be the same either way. Had it this way to keep all relevant logic for determining which s3Client to use together (inside the Suppliers.memorize(). I'm fine either way though.", "url": "https://github.com/apache/druid/pull/9375#discussion_r383599281", "createdAt": "2020-02-25T00:45:40Z", "author": {"login": "maytasm"}, "path": "extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSource.java", "diffHunk": "@@ -19,50 +19,88 @@\n \n package org.apache.druid.data.input.s3;\n \n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n import com.amazonaws.services.s3.model.S3ObjectSummary;\n import com.fasterxml.jackson.annotation.JacksonInject;\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.google.common.base.Preconditions;\n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n import com.google.common.collect.ImmutableList;\n import org.apache.druid.data.input.InputSplit;\n import org.apache.druid.data.input.impl.CloudObjectInputSource;\n import org.apache.druid.data.input.impl.CloudObjectLocation;\n+import org.apache.druid.data.input.impl.S3ConfigProperties;\n import org.apache.druid.data.input.impl.SplittableInputSource;\n import org.apache.druid.storage.s3.S3InputDataConfig;\n+import org.apache.druid.storage.s3.S3StorageConfig;\n import org.apache.druid.storage.s3.S3StorageDruidModule;\n import org.apache.druid.storage.s3.S3Utils;\n import org.apache.druid.storage.s3.ServerSideEncryptingAmazonS3;\n \n import javax.annotation.Nullable;\n import java.net.URI;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Stream;\n import java.util.stream.StreamSupport;\n \n public class S3InputSource extends CloudObjectInputSource<S3Entity>\n {\n-  private final ServerSideEncryptingAmazonS3 s3Client;\n+  // We lazily initialize s3Client to avoid costly s3 operation when we only need S3InputSource for stored information\n+  // (such as for task logs) and not for ingestion. (This cost only applies for new s3Client created with\n+  // s3ConfigProperties given).\n+  private final Supplier<ServerSideEncryptingAmazonS3> s3Client;\n+  @JsonProperty(\"properties\")\n+  private final S3ConfigProperties s3ConfigProperties;\n   private final S3InputDataConfig inputDataConfig;\n \n   @JsonCreator\n   public S3InputSource(\n       @JacksonInject ServerSideEncryptingAmazonS3 s3Client,\n+      @JacksonInject AmazonS3ClientBuilder amazonS3ClientBuilder,\n+      @JacksonInject S3StorageConfig storageConfig,\n       @JacksonInject S3InputDataConfig inputDataConfig,\n       @JsonProperty(\"uris\") @Nullable List<URI> uris,\n       @JsonProperty(\"prefixes\") @Nullable List<URI> prefixes,\n-      @JsonProperty(\"objects\") @Nullable List<CloudObjectLocation> objects\n+      @JsonProperty(\"objects\") @Nullable List<CloudObjectLocation> objects,\n+      @JsonProperty(\"properties\") @Nullable S3ConfigProperties s3ConfigProperties\n   )\n   {\n     super(S3StorageDruidModule.SCHEME, uris, prefixes, objects);\n-    this.s3Client = Preconditions.checkNotNull(s3Client, \"s3Client\");\n     this.inputDataConfig = Preconditions.checkNotNull(inputDataConfig, \"S3DataSegmentPusherConfig\");\n+    this.s3ConfigProperties = s3ConfigProperties;\n+    this.s3Client = Suppliers.memoize(\n+        () -> {\n+          if (amazonS3ClientBuilder != null && storageConfig != null && s3ConfigProperties != null) {\n+            if (s3ConfigProperties.isCredentialsConfigured()) {\n+              BasicAWSCredentials creds = new BasicAWSCredentials(\n+                  s3ConfigProperties.getAccessKeyId().getPassword(),\n+                  s3ConfigProperties.getSecretAccessKey().getPassword());\n+              amazonS3ClientBuilder.withCredentials(new AWSStaticCredentialsProvider(creds));\n+            }\n+            return new ServerSideEncryptingAmazonS3(amazonS3ClientBuilder.build(), storageConfig.getServerSideEncryption());\n+          } else {\n+            return Preconditions.checkNotNull(s3Client, \"s3Client\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxNzI3OQ=="}, "originalCommit": {"oid": "64d2720829fbc7ed32a40afb3bbd36e9920370fe"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwMDMxOQ==", "bodyText": "I guess it may not matter much here since this is just a sanity check which shouldn't happen, but it would be better to fail as early as possible. The check in the constructor will be called in the JSON deserialization while other methods will be called after the task is scheduled on a middleManager.", "url": "https://github.com/apache/druid/pull/9375#discussion_r383600319", "createdAt": "2020-02-25T00:48:58Z", "author": {"login": "jihoonson"}, "path": "extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSource.java", "diffHunk": "@@ -19,50 +19,88 @@\n \n package org.apache.druid.data.input.s3;\n \n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n import com.amazonaws.services.s3.model.S3ObjectSummary;\n import com.fasterxml.jackson.annotation.JacksonInject;\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.google.common.base.Preconditions;\n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n import com.google.common.collect.ImmutableList;\n import org.apache.druid.data.input.InputSplit;\n import org.apache.druid.data.input.impl.CloudObjectInputSource;\n import org.apache.druid.data.input.impl.CloudObjectLocation;\n+import org.apache.druid.data.input.impl.S3ConfigProperties;\n import org.apache.druid.data.input.impl.SplittableInputSource;\n import org.apache.druid.storage.s3.S3InputDataConfig;\n+import org.apache.druid.storage.s3.S3StorageConfig;\n import org.apache.druid.storage.s3.S3StorageDruidModule;\n import org.apache.druid.storage.s3.S3Utils;\n import org.apache.druid.storage.s3.ServerSideEncryptingAmazonS3;\n \n import javax.annotation.Nullable;\n import java.net.URI;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Stream;\n import java.util.stream.StreamSupport;\n \n public class S3InputSource extends CloudObjectInputSource<S3Entity>\n {\n-  private final ServerSideEncryptingAmazonS3 s3Client;\n+  // We lazily initialize s3Client to avoid costly s3 operation when we only need S3InputSource for stored information\n+  // (such as for task logs) and not for ingestion. (This cost only applies for new s3Client created with\n+  // s3ConfigProperties given).\n+  private final Supplier<ServerSideEncryptingAmazonS3> s3Client;\n+  @JsonProperty(\"properties\")\n+  private final S3ConfigProperties s3ConfigProperties;\n   private final S3InputDataConfig inputDataConfig;\n \n   @JsonCreator\n   public S3InputSource(\n       @JacksonInject ServerSideEncryptingAmazonS3 s3Client,\n+      @JacksonInject AmazonS3ClientBuilder amazonS3ClientBuilder,\n+      @JacksonInject S3StorageConfig storageConfig,\n       @JacksonInject S3InputDataConfig inputDataConfig,\n       @JsonProperty(\"uris\") @Nullable List<URI> uris,\n       @JsonProperty(\"prefixes\") @Nullable List<URI> prefixes,\n-      @JsonProperty(\"objects\") @Nullable List<CloudObjectLocation> objects\n+      @JsonProperty(\"objects\") @Nullable List<CloudObjectLocation> objects,\n+      @JsonProperty(\"properties\") @Nullable S3ConfigProperties s3ConfigProperties\n   )\n   {\n     super(S3StorageDruidModule.SCHEME, uris, prefixes, objects);\n-    this.s3Client = Preconditions.checkNotNull(s3Client, \"s3Client\");\n     this.inputDataConfig = Preconditions.checkNotNull(inputDataConfig, \"S3DataSegmentPusherConfig\");\n+    this.s3ConfigProperties = s3ConfigProperties;\n+    this.s3Client = Suppliers.memoize(\n+        () -> {\n+          if (amazonS3ClientBuilder != null && storageConfig != null && s3ConfigProperties != null) {\n+            if (s3ConfigProperties.isCredentialsConfigured()) {\n+              BasicAWSCredentials creds = new BasicAWSCredentials(\n+                  s3ConfigProperties.getAccessKeyId().getPassword(),\n+                  s3ConfigProperties.getSecretAccessKey().getPassword());\n+              amazonS3ClientBuilder.withCredentials(new AWSStaticCredentialsProvider(creds));\n+            }\n+            return new ServerSideEncryptingAmazonS3(amazonS3ClientBuilder.build(), storageConfig.getServerSideEncryption());\n+          } else {\n+            return Preconditions.checkNotNull(s3Client, \"s3Client\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxNzI3OQ=="}, "originalCommit": {"oid": "64d2720829fbc7ed32a40afb3bbd36e9920370fe"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxMjE0Mg==", "bodyText": "Moved all the Preconditions.checkNotNull outside", "url": "https://github.com/apache/druid/pull/9375#discussion_r383612142", "createdAt": "2020-02-25T01:31:19Z", "author": {"login": "maytasm"}, "path": "extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSource.java", "diffHunk": "@@ -19,50 +19,88 @@\n \n package org.apache.druid.data.input.s3;\n \n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n import com.amazonaws.services.s3.model.S3ObjectSummary;\n import com.fasterxml.jackson.annotation.JacksonInject;\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.google.common.base.Preconditions;\n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n import com.google.common.collect.ImmutableList;\n import org.apache.druid.data.input.InputSplit;\n import org.apache.druid.data.input.impl.CloudObjectInputSource;\n import org.apache.druid.data.input.impl.CloudObjectLocation;\n+import org.apache.druid.data.input.impl.S3ConfigProperties;\n import org.apache.druid.data.input.impl.SplittableInputSource;\n import org.apache.druid.storage.s3.S3InputDataConfig;\n+import org.apache.druid.storage.s3.S3StorageConfig;\n import org.apache.druid.storage.s3.S3StorageDruidModule;\n import org.apache.druid.storage.s3.S3Utils;\n import org.apache.druid.storage.s3.ServerSideEncryptingAmazonS3;\n \n import javax.annotation.Nullable;\n import java.net.URI;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Stream;\n import java.util.stream.StreamSupport;\n \n public class S3InputSource extends CloudObjectInputSource<S3Entity>\n {\n-  private final ServerSideEncryptingAmazonS3 s3Client;\n+  // We lazily initialize s3Client to avoid costly s3 operation when we only need S3InputSource for stored information\n+  // (such as for task logs) and not for ingestion. (This cost only applies for new s3Client created with\n+  // s3ConfigProperties given).\n+  private final Supplier<ServerSideEncryptingAmazonS3> s3Client;\n+  @JsonProperty(\"properties\")\n+  private final S3ConfigProperties s3ConfigProperties;\n   private final S3InputDataConfig inputDataConfig;\n \n   @JsonCreator\n   public S3InputSource(\n       @JacksonInject ServerSideEncryptingAmazonS3 s3Client,\n+      @JacksonInject AmazonS3ClientBuilder amazonS3ClientBuilder,\n+      @JacksonInject S3StorageConfig storageConfig,\n       @JacksonInject S3InputDataConfig inputDataConfig,\n       @JsonProperty(\"uris\") @Nullable List<URI> uris,\n       @JsonProperty(\"prefixes\") @Nullable List<URI> prefixes,\n-      @JsonProperty(\"objects\") @Nullable List<CloudObjectLocation> objects\n+      @JsonProperty(\"objects\") @Nullable List<CloudObjectLocation> objects,\n+      @JsonProperty(\"properties\") @Nullable S3ConfigProperties s3ConfigProperties\n   )\n   {\n     super(S3StorageDruidModule.SCHEME, uris, prefixes, objects);\n-    this.s3Client = Preconditions.checkNotNull(s3Client, \"s3Client\");\n     this.inputDataConfig = Preconditions.checkNotNull(inputDataConfig, \"S3DataSegmentPusherConfig\");\n+    this.s3ConfigProperties = s3ConfigProperties;\n+    this.s3Client = Suppliers.memoize(\n+        () -> {\n+          if (amazonS3ClientBuilder != null && storageConfig != null && s3ConfigProperties != null) {\n+            if (s3ConfigProperties.isCredentialsConfigured()) {\n+              BasicAWSCredentials creds = new BasicAWSCredentials(\n+                  s3ConfigProperties.getAccessKeyId().getPassword(),\n+                  s3ConfigProperties.getSecretAccessKey().getPassword());\n+              amazonS3ClientBuilder.withCredentials(new AWSStaticCredentialsProvider(creds));\n+            }\n+            return new ServerSideEncryptingAmazonS3(amazonS3ClientBuilder.build(), storageConfig.getServerSideEncryption());\n+          } else {\n+            return Preconditions.checkNotNull(s3Client, \"s3Client\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxNzI3OQ=="}, "originalCommit": {"oid": "64d2720829fbc7ed32a40afb3bbd36e9920370fe"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDgyMDY1OnYy", "diffSide": "RIGHT", "path": "docs/ingestion/native-batch.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMToxNzoyMlrOFtwKnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMTo1NDozM1rOFtxSSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxOTM4OA==", "bodyText": "I think these can just be shortened to S3 access key and S3 secret key", "url": "https://github.com/apache/druid/pull/9375#discussion_r383519388", "createdAt": "2020-02-24T21:17:22Z", "author": {"login": "clintropolis"}, "path": "docs/ingestion/native-batch.md", "diffHunk": "@@ -846,6 +847,15 @@ S3 Object:\n |bucket|Name of the S3 bucket|None|yes|\n |path|The path where data is located.|None|yes|\n \n+Properties Object:\n+\n+|property|description|default|required?|\n+|--------|-----------|-------|---------|\n+|accessKeyId|S3 access key for this S3 InputSource|None|yes if secretAccessKey is given|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64d2720829fbc7ed32a40afb3bbd36e9920370fe"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUyNDAzNg==", "bodyText": "What do you mean? The description or the property itself?", "url": "https://github.com/apache/druid/pull/9375#discussion_r383524036", "createdAt": "2020-02-24T21:26:40Z", "author": {"login": "maytasm"}, "path": "docs/ingestion/native-batch.md", "diffHunk": "@@ -846,6 +847,15 @@ S3 Object:\n |bucket|Name of the S3 bucket|None|yes|\n |path|The path where data is located.|None|yes|\n \n+Properties Object:\n+\n+|property|description|default|required?|\n+|--------|-----------|-------|---------|\n+|accessKeyId|S3 access key for this S3 InputSource|None|yes if secretAccessKey is given|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxOTM4OA=="}, "originalCommit": {"oid": "64d2720829fbc7ed32a40afb3bbd36e9920370fe"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzNzczOQ==", "bodyText": "Oh i see. Wanted to emphasize that these configs will only be applied to this input source (not the deep storage, etc.)", "url": "https://github.com/apache/druid/pull/9375#discussion_r383537739", "createdAt": "2020-02-24T21:54:33Z", "author": {"login": "maytasm"}, "path": "docs/ingestion/native-batch.md", "diffHunk": "@@ -846,6 +847,15 @@ S3 Object:\n |bucket|Name of the S3 bucket|None|yes|\n |path|The path where data is located.|None|yes|\n \n+Properties Object:\n+\n+|property|description|default|required?|\n+|--------|-----------|-------|---------|\n+|accessKeyId|S3 access key for this S3 InputSource|None|yes if secretAccessKey is given|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUxOTM4OA=="}, "originalCommit": {"oid": "64d2720829fbc7ed32a40afb3bbd36e9920370fe"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDg2MTYzOnYy", "diffSide": "RIGHT", "path": "docs/development/extensions-core/s3.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMTozMDoyMFrOFtwj7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDo0Nzo0NFrOFt1FUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUyNTg2OA==", "bodyText": "Not your change but..\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To connect to your S3 bucket (whether deep storage bucket or source bucket), Druid use the following credentials providers chain\n          \n          \n            \n            Druid uses the following credentials provider chain to connect to your S3 bucket (whether a deep storage bucket or source bucket).", "url": "https://github.com/apache/druid/pull/9375#discussion_r383525868", "createdAt": "2020-02-24T21:30:20Z", "author": {"login": "sthetland"}, "path": "docs/development/extensions-core/s3.md", "diffHunk": "@@ -64,6 +64,7 @@ In addition to this you need to set additional configuration, specific for [deep\n ### S3 authentication methods\n \n To connect to your S3 bucket (whether deep storage bucket or source bucket), Druid use the following credentials providers chain", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64d2720829fbc7ed32a40afb3bbd36e9920370fe"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5OTk1Mw==", "bodyText": "Done", "url": "https://github.com/apache/druid/pull/9375#discussion_r383599953", "createdAt": "2020-02-25T00:47:44Z", "author": {"login": "maytasm"}, "path": "docs/development/extensions-core/s3.md", "diffHunk": "@@ -64,6 +64,7 @@ In addition to this you need to set additional configuration, specific for [deep\n ### S3 authentication methods\n \n To connect to your S3 bucket (whether deep storage bucket or source bucket), Druid use the following credentials providers chain", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUyNTg2OA=="}, "originalCommit": {"oid": "64d2720829fbc7ed32a40afb3bbd36e9920370fe"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDg5MjUxOnYy", "diffSide": "RIGHT", "path": "docs/development/extensions-core/s3.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMTo0MDo0M1rOFtw3Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDo1NjozOFrOFt1PhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzMDgyMw==", "bodyText": "I think the doc normally uses a carrot to format note-style paragraphs, like the ones on https://druid.apache.org/docs/latest/tutorials/cluster.html#with-zookeeper-on-master for example.\nI'd use that style, or this could just be a regular second sentence in the paragraph. In either case, I'd rephrase a bit:\n\nYou can override the default credentials provider chain by specifying an access key using Properties Object parameters in the ingestionSpec.", "url": "https://github.com/apache/druid/pull/9375#discussion_r383530823", "createdAt": "2020-02-24T21:40:43Z", "author": {"login": "sthetland"}, "path": "docs/development/extensions-core/s3.md", "diffHunk": "@@ -64,6 +64,7 @@ In addition to this you need to set additional configuration, specific for [deep\n ### S3 authentication methods\n \n To connect to your S3 bucket (whether deep storage bucket or source bucket), Druid use the following credentials providers chain\n+**Note :** *Below authentication chain can be overridden for connecting to source bucket by specifying the [properties](../../ingestion/native-batch.md#s3-input-source) parameter in the ingestionSpec.*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64d2720829fbc7ed32a40afb3bbd36e9920370fe"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwMTAyNQ==", "bodyText": "This is more for like a second sentence in the paragraph. Similar to other note on this page.", "url": "https://github.com/apache/druid/pull/9375#discussion_r383601025", "createdAt": "2020-02-25T00:51:27Z", "author": {"login": "maytasm"}, "path": "docs/development/extensions-core/s3.md", "diffHunk": "@@ -64,6 +64,7 @@ In addition to this you need to set additional configuration, specific for [deep\n ### S3 authentication methods\n \n To connect to your S3 bucket (whether deep storage bucket or source bucket), Druid use the following credentials providers chain\n+**Note :** *Below authentication chain can be overridden for connecting to source bucket by specifying the [properties](../../ingestion/native-batch.md#s3-input-source) parameter in the ingestionSpec.*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzMDgyMw=="}, "originalCommit": {"oid": "64d2720829fbc7ed32a40afb3bbd36e9920370fe"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwMjU2NQ==", "bodyText": "You can override the default credentials provider chain for connecting to source bucket by specifying an access key and secret key using Properties Object parameters in the ingestionSpec.", "url": "https://github.com/apache/druid/pull/9375#discussion_r383602565", "createdAt": "2020-02-25T00:56:38Z", "author": {"login": "maytasm"}, "path": "docs/development/extensions-core/s3.md", "diffHunk": "@@ -64,6 +64,7 @@ In addition to this you need to set additional configuration, specific for [deep\n ### S3 authentication methods\n \n To connect to your S3 bucket (whether deep storage bucket or source bucket), Druid use the following credentials providers chain\n+**Note :** *Below authentication chain can be overridden for connecting to source bucket by specifying the [properties](../../ingestion/native-batch.md#s3-input-source) parameter in the ingestionSpec.*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzMDgyMw=="}, "originalCommit": {"oid": "64d2720829fbc7ed32a40afb3bbd36e9920370fe"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDkwMzEzOnYy", "diffSide": "RIGHT", "path": "docs/ingestion/native-batch.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMTo0Mzo1NVrOFtw9kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMTowMToxOVrOFt1VCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzMjQzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |properties|Properties Object for overriding default S3 configuration. See below for more information.|None|No (Default configurations will be use if not given)\n          \n          \n            \n            |properties|Properties Object for overriding the default S3 configuration. See below for more information.|None|No (defaults will be used if not given)", "url": "https://github.com/apache/druid/pull/9375#discussion_r383532435", "createdAt": "2020-02-24T21:43:55Z", "author": {"login": "sthetland"}, "path": "docs/ingestion/native-batch.md", "diffHunk": "@@ -838,6 +838,7 @@ Sample specs:\n |uris|JSON array of URIs where S3 objects to be ingested are located.|None|`uris` or `prefixes` or `objects` must be set|\n |prefixes|JSON array of URI prefixes for the locations of S3 objects to be ingested.|None|`uris` or `prefixes` or `objects` must be set|\n |objects|JSON array of S3 Objects to be ingested.|None|`uris` or `prefixes` or `objects` must be set|\n+|properties|Properties Object for overriding default S3 configuration. See below for more information.|None|No (Default configurations will be use if not given)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64d2720829fbc7ed32a40afb3bbd36e9920370fe"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwMzk3Ng==", "bodyText": "Done", "url": "https://github.com/apache/druid/pull/9375#discussion_r383603976", "createdAt": "2020-02-25T01:01:19Z", "author": {"login": "maytasm"}, "path": "docs/ingestion/native-batch.md", "diffHunk": "@@ -838,6 +838,7 @@ Sample specs:\n |uris|JSON array of URIs where S3 objects to be ingested are located.|None|`uris` or `prefixes` or `objects` must be set|\n |prefixes|JSON array of URI prefixes for the locations of S3 objects to be ingested.|None|`uris` or `prefixes` or `objects` must be set|\n |objects|JSON array of S3 Objects to be ingested.|None|`uris` or `prefixes` or `objects` must be set|\n+|properties|Properties Object for overriding default S3 configuration. See below for more information.|None|No (Default configurations will be use if not given)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzMjQzNQ=="}, "originalCommit": {"oid": "64d2720829fbc7ed32a40afb3bbd36e9920370fe"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDkyNDA3OnYy", "diffSide": "RIGHT", "path": "docs/ingestion/native-batch.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMTo1MDoyNVrOFtxKMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMTowNDoyM1rOFt1Yqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzNTY2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            **Note :** *If any property is not given in the Properties Object, then the current default server value will be use.*\n          \n          \n            \n            Default values are used for any property not overridden in the Properties Object.\n          \n      \n    \n    \n  \n\nCaveat to my edit suggestion: it says \"any property\" but really it's just S3 access key that are supported, no? To avoid the premature generalization, could say something like:\n\"If you don't provide an access key, the default S3 credentials provider chain is used.\" (With a link to the relevant section in s3.md).", "url": "https://github.com/apache/druid/pull/9375#discussion_r383535664", "createdAt": "2020-02-24T21:50:25Z", "author": {"login": "sthetland"}, "path": "docs/ingestion/native-batch.md", "diffHunk": "@@ -846,6 +847,15 @@ S3 Object:\n |bucket|Name of the S3 bucket|None|yes|\n |path|The path where data is located.|None|yes|\n \n+Properties Object:\n+\n+|property|description|default|required?|\n+|--------|-----------|-------|---------|\n+|accessKeyId|S3 access key for this S3 InputSource|None|yes if secretAccessKey is given|\n+|secretAccessKey|S3 secret key for this S3 InputSource|None|yes if accessKeyId is given|\n+\n+**Note :** *If any property is not given in the Properties Object, then the current default server value will be use.*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64d2720829fbc7ed32a40afb3bbd36e9920370fe"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwNDQyMA==", "bodyText": "That is the idea for the future when we support more than just the access key and secret key. Will changed to \"If you don't provide an access key, the default S3 credentials provider chain is used.\" for now and we can change it back in the future.", "url": "https://github.com/apache/druid/pull/9375#discussion_r383604420", "createdAt": "2020-02-25T01:02:46Z", "author": {"login": "maytasm"}, "path": "docs/ingestion/native-batch.md", "diffHunk": "@@ -846,6 +847,15 @@ S3 Object:\n |bucket|Name of the S3 bucket|None|yes|\n |path|The path where data is located.|None|yes|\n \n+Properties Object:\n+\n+|property|description|default|required?|\n+|--------|-----------|-------|---------|\n+|accessKeyId|S3 access key for this S3 InputSource|None|yes if secretAccessKey is given|\n+|secretAccessKey|S3 secret key for this S3 InputSource|None|yes if accessKeyId is given|\n+\n+**Note :** *If any property is not given in the Properties Object, then the current default server value will be use.*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzNTY2NA=="}, "originalCommit": {"oid": "64d2720829fbc7ed32a40afb3bbd36e9920370fe"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwNDkwNw==", "bodyText": "done", "url": "https://github.com/apache/druid/pull/9375#discussion_r383604907", "createdAt": "2020-02-25T01:04:23Z", "author": {"login": "maytasm"}, "path": "docs/ingestion/native-batch.md", "diffHunk": "@@ -846,6 +847,15 @@ S3 Object:\n |bucket|Name of the S3 bucket|None|yes|\n |path|The path where data is located.|None|yes|\n \n+Properties Object:\n+\n+|property|description|default|required?|\n+|--------|-----------|-------|---------|\n+|accessKeyId|S3 access key for this S3 InputSource|None|yes if secretAccessKey is given|\n+|secretAccessKey|S3 secret key for this S3 InputSource|None|yes if accessKeyId is given|\n+\n+**Note :** *If any property is not given in the Properties Object, then the current default server value will be use.*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzNTY2NA=="}, "originalCommit": {"oid": "64d2720829fbc7ed32a40afb3bbd36e9920370fe"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDk0NDcyOnYy", "diffSide": "RIGHT", "path": "extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMTo1NzowM1rOFtxW7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMTozMToyNlrOFt11Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzODkyNw==", "bodyText": "nit: suggest s3ClientSupplier.", "url": "https://github.com/apache/druid/pull/9375#discussion_r383538927", "createdAt": "2020-02-24T21:57:03Z", "author": {"login": "jihoonson"}, "path": "extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSource.java", "diffHunk": "@@ -19,50 +19,88 @@\n \n package org.apache.druid.data.input.s3;\n \n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n import com.amazonaws.services.s3.model.S3ObjectSummary;\n import com.fasterxml.jackson.annotation.JacksonInject;\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.google.common.base.Preconditions;\n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n import com.google.common.collect.ImmutableList;\n import org.apache.druid.data.input.InputSplit;\n import org.apache.druid.data.input.impl.CloudObjectInputSource;\n import org.apache.druid.data.input.impl.CloudObjectLocation;\n+import org.apache.druid.data.input.impl.S3ConfigProperties;\n import org.apache.druid.data.input.impl.SplittableInputSource;\n import org.apache.druid.storage.s3.S3InputDataConfig;\n+import org.apache.druid.storage.s3.S3StorageConfig;\n import org.apache.druid.storage.s3.S3StorageDruidModule;\n import org.apache.druid.storage.s3.S3Utils;\n import org.apache.druid.storage.s3.ServerSideEncryptingAmazonS3;\n \n import javax.annotation.Nullable;\n import java.net.URI;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Stream;\n import java.util.stream.StreamSupport;\n \n public class S3InputSource extends CloudObjectInputSource<S3Entity>\n {\n-  private final ServerSideEncryptingAmazonS3 s3Client;\n+  // We lazily initialize s3Client to avoid costly s3 operation when we only need S3InputSource for stored information\n+  // (such as for task logs) and not for ingestion. (This cost only applies for new s3Client created with\n+  // s3ConfigProperties given).\n+  private final Supplier<ServerSideEncryptingAmazonS3> s3Client;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64d2720829fbc7ed32a40afb3bbd36e9920370fe"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxMjE5MA==", "bodyText": "Done", "url": "https://github.com/apache/druid/pull/9375#discussion_r383612190", "createdAt": "2020-02-25T01:31:26Z", "author": {"login": "maytasm"}, "path": "extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSource.java", "diffHunk": "@@ -19,50 +19,88 @@\n \n package org.apache.druid.data.input.s3;\n \n+import com.amazonaws.auth.AWSStaticCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n import com.amazonaws.services.s3.model.S3ObjectSummary;\n import com.fasterxml.jackson.annotation.JacksonInject;\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.google.common.base.Preconditions;\n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n import com.google.common.collect.ImmutableList;\n import org.apache.druid.data.input.InputSplit;\n import org.apache.druid.data.input.impl.CloudObjectInputSource;\n import org.apache.druid.data.input.impl.CloudObjectLocation;\n+import org.apache.druid.data.input.impl.S3ConfigProperties;\n import org.apache.druid.data.input.impl.SplittableInputSource;\n import org.apache.druid.storage.s3.S3InputDataConfig;\n+import org.apache.druid.storage.s3.S3StorageConfig;\n import org.apache.druid.storage.s3.S3StorageDruidModule;\n import org.apache.druid.storage.s3.S3Utils;\n import org.apache.druid.storage.s3.ServerSideEncryptingAmazonS3;\n \n import javax.annotation.Nullable;\n import java.net.URI;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Stream;\n import java.util.stream.StreamSupport;\n \n public class S3InputSource extends CloudObjectInputSource<S3Entity>\n {\n-  private final ServerSideEncryptingAmazonS3 s3Client;\n+  // We lazily initialize s3Client to avoid costly s3 operation when we only need S3InputSource for stored information\n+  // (such as for task logs) and not for ingestion. (This cost only applies for new s3Client created with\n+  // s3ConfigProperties given).\n+  private final Supplier<ServerSideEncryptingAmazonS3> s3Client;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzODkyNw=="}, "originalCommit": {"oid": "64d2720829fbc7ed32a40afb3bbd36e9920370fe"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjY1ODY0OnYy", "diffSide": "RIGHT", "path": "extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSourceProperties.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMDo1NDoxMlrOFuBmJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjozOTowOVrOFuX35g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgwNDk2NQ==", "bodyText": "this maybe should be named S3InputSourceConfig or something to be more consistently named with other config-ish classes (there is not any types of the form {name}Properties.java in druid currently, and I associate the word to java.util.Properties which this isn't related to)", "url": "https://github.com/apache/druid/pull/9375#discussion_r383804965", "createdAt": "2020-02-25T10:54:12Z", "author": {"login": "clintropolis"}, "path": "extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSourceProperties.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.s3;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Preconditions;\n+import org.apache.druid.metadata.PasswordProvider;\n+\n+import javax.annotation.Nullable;\n+import java.util.Objects;\n+\n+/**\n+ * Contains properties for s3 input source.\n+ * Properties can be specified by ingestionSpec which will override system default.\n+ */\n+public class S3InputSourceProperties", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05395fde480c13f67180a92627d9bf6d82726a3c"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2OTk1OA==", "bodyText": "Done", "url": "https://github.com/apache/druid/pull/9375#discussion_r384169958", "createdAt": "2020-02-25T22:39:09Z", "author": {"login": "maytasm"}, "path": "extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSourceProperties.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.data.input.s3;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Preconditions;\n+import org.apache.druid.metadata.PasswordProvider;\n+\n+import javax.annotation.Nullable;\n+import java.util.Objects;\n+\n+/**\n+ * Contains properties for s3 input source.\n+ * Properties can be specified by ingestionSpec which will override system default.\n+ */\n+public class S3InputSourceProperties", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgwNDk2NQ=="}, "originalCommit": {"oid": "05395fde480c13f67180a92627d9bf6d82726a3c"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODA4MjE0OnYy", "diffSide": "RIGHT", "path": "extensions-core/s3-extensions/src/main/java/org/apache/druid/storage/s3/S3StorageDruidModule.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzozOTozN1rOFuPGRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjozOToxMlrOFuX3_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAyNjE4Mw==", "bodyText": "modify -> modified?", "url": "https://github.com/apache/druid/pull/9375#discussion_r384026183", "createdAt": "2020-02-25T17:39:37Z", "author": {"login": "jihoonson"}, "path": "extensions-core/s3-extensions/src/main/java/org/apache/druid/storage/s3/S3StorageDruidModule.java", "diffHunk": "@@ -166,9 +166,11 @@ public void configure(Binder binder)\n     binder.bind(S3TaskLogs.class).in(LazySingleton.class);\n   }\n \n+  // This provides ServerSideEncryptingAmazonS3.Builder with default configs from Guice injection initially set.\n+  // However, this builder can then be modify and have configuration(s) inside", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05395fde480c13f67180a92627d9bf6d82726a3c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2OTk4Mw==", "bodyText": "done", "url": "https://github.com/apache/druid/pull/9375#discussion_r384169983", "createdAt": "2020-02-25T22:39:12Z", "author": {"login": "maytasm"}, "path": "extensions-core/s3-extensions/src/main/java/org/apache/druid/storage/s3/S3StorageDruidModule.java", "diffHunk": "@@ -166,9 +166,11 @@ public void configure(Binder binder)\n     binder.bind(S3TaskLogs.class).in(LazySingleton.class);\n   }\n \n+  // This provides ServerSideEncryptingAmazonS3.Builder with default configs from Guice injection initially set.\n+  // However, this builder can then be modify and have configuration(s) inside", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAyNjE4Mw=="}, "originalCommit": {"oid": "05395fde480c13f67180a92627d9bf6d82726a3c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODA5MjcwOnYy", "diffSide": "RIGHT", "path": "extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNzo0MjoxOVrOFuPMTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjozOToxNVrOFuX4DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAyNzcyNQ==", "bodyText": "Do we still need this s3Client parameter to reuse the singleton client? If so, please leave a comment about it.", "url": "https://github.com/apache/druid/pull/9375#discussion_r384027725", "createdAt": "2020-02-25T17:42:19Z", "author": {"login": "jihoonson"}, "path": "extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSource.java", "diffHunk": "@@ -42,32 +46,66 @@\n import java.net.URI;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n public class S3InputSource extends CloudObjectInputSource\n {\n-  private final ServerSideEncryptingAmazonS3 s3Client;\n+  // We lazily initialize ServerSideEncryptingAmazonS3 to avoid costly s3 operation when we only need S3InputSource\n+  // for stored information (such as for task logs) and not for ingestion.\n+  // (This cost only applies for new ServerSideEncryptingAmazonS3 created with s3InputSourceProperties given).\n+  private final Supplier<ServerSideEncryptingAmazonS3> s3ClientSupplier;\n+  @JsonProperty(\"properties\")\n+  private final S3InputSourceProperties s3InputSourceProperties;\n   private final S3InputDataConfig inputDataConfig;\n \n   @JsonCreator\n   public S3InputSource(\n       @JacksonInject ServerSideEncryptingAmazonS3 s3Client,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05395fde480c13f67180a92627d9bf6d82726a3c"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2OTk5Ng==", "bodyText": "Yea..we still need it to use the singleton client for when the properties is not present in the JSON. This will save the cost of initializing the s3client using the s3ClientSupplier since we can reuse the  injected singleton", "url": "https://github.com/apache/druid/pull/9375#discussion_r384169996", "createdAt": "2020-02-25T22:39:15Z", "author": {"login": "maytasm"}, "path": "extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSource.java", "diffHunk": "@@ -42,32 +46,66 @@\n import java.net.URI;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n public class S3InputSource extends CloudObjectInputSource\n {\n-  private final ServerSideEncryptingAmazonS3 s3Client;\n+  // We lazily initialize ServerSideEncryptingAmazonS3 to avoid costly s3 operation when we only need S3InputSource\n+  // for stored information (such as for task logs) and not for ingestion.\n+  // (This cost only applies for new ServerSideEncryptingAmazonS3 created with s3InputSourceProperties given).\n+  private final Supplier<ServerSideEncryptingAmazonS3> s3ClientSupplier;\n+  @JsonProperty(\"properties\")\n+  private final S3InputSourceProperties s3InputSourceProperties;\n   private final S3InputDataConfig inputDataConfig;\n \n   @JsonCreator\n   public S3InputSource(\n       @JacksonInject ServerSideEncryptingAmazonS3 s3Client,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAyNzcyNQ=="}, "originalCommit": {"oid": "05395fde480c13f67180a92627d9bf6d82726a3c"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2774, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}