{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NzU1ODcy", "number": 9487, "title": "Convert array_contains() and array_overlaps() into native filters if possible", "bodyText": "Description\nThe native filter is way faster than the expression filter. Here is a ExpressionFilterBenchmark result.\nBenchmark                                   (rowsPerSegment)  Mode  Cnt    Score   Error  Units\nExpressionFilterBenchmark.expressionFilter           1000000  avgt   30  255.291 \u00b1 1.034  ms/op\nExpressionFilterBenchmark.nativeFilter               1000000  avgt   30    1.868 \u00b1 0.005  ms/op\n\nThis PR adds an optimization that transforms array_contains() and array_overlaps() into native filters if possible. For now, the optimization will be applied only when their parameters are a simple extraction and a literal. This is because the facility that traverses an Expr tree and converts it to a tree of native filters is missing. I think we could possibly add an optimization layer on the native query or between the sql layer and the native query layer, but it's not in the scope of this PR.\nI also added the behavior of the IN filter on multi-valued dimensions in the doc.\n\nThis PR has:\n\n been self-reviewed.\n added documentation for new or modified features or behaviors.\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths.\n\n\nKey changed/added classes in this PR\n\nArrayOverlapOperatorConversion\nArrayContainsOperatorConversion", "createdAt": "2020-03-09T18:42:13Z", "url": "https://github.com/apache/druid/pull/9487", "merged": true, "mergeCommit": {"oid": "75e2051195075c14171d5b8ab7f97abef79e80a0"}, "closed": true, "closedAt": "2020-03-10T05:50:39Z", "author": {"login": "jihoonson"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMCRm8gH2gAyMzg1NzU1ODcyOjIwM2VlM2QyMDlhOWJmOGZiM2FhNWE3ZGUxOTZiYWM2MDU0MmM1YjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMFjN_AH2gAyMzg1NzU1ODcyOjM1ZWRlNWJlMDQxODEwNDg2OTYyNWU0ZjA5NzE0ZjU0ZGQzZThmZWQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "203ee3d209a9bf8fb3aa5a7de196bac60542c5b0", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/203ee3d209a9bf8fb3aa5a7de196bac60542c5b0", "committedDate": "2020-03-09T18:32:13Z", "message": "Convert array_contains() and array_overlaps() into native filters if\npossible"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNTM4NDQ5", "url": "https://github.com/apache/druid/pull/9487#pullrequestreview-371538449", "createdAt": "2020-03-09T21:22:17Z", "commit": {"oid": "203ee3d209a9bf8fb3aa5a7de196bac60542c5b0"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMToyMjoxN1rOFz51Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMToyMjoxN1rOFz51Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk2OTIyNw==", "bodyText": "nit: is it worth splitting this out into a static method on one of these classes (or a utility method somewhere) since this block looks basically shared with array_contains?", "url": "https://github.com/apache/druid/pull/9487#discussion_r389969227", "createdAt": "2020-03-09T21:22:17Z", "author": {"login": "clintropolis"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/expression/builtin/ArrayOverlapOperatorConversion.java", "diffHunk": "@@ -51,4 +67,66 @@ public ArrayOverlapOperatorConversion()\n   {\n     super(SQL_FUNCTION, EXPR_FUNCTION);\n   }\n+\n+  @Nullable\n+  @Override\n+  public DimFilter toDruidFilter(\n+      final PlannerContext plannerContext,\n+      RowSignature rowSignature,\n+      @Nullable VirtualColumnRegistry virtualColumnRegistry,\n+      final RexNode rexNode\n+  )\n+  {\n+    final List<RexNode> operands = ((RexCall) rexNode).getOperands();\n+    final List<DruidExpression> druidExpressions = Expressions.toDruidExpressions(\n+        plannerContext,\n+        rowSignature,\n+        operands\n+    );\n+    if (druidExpressions == null) {\n+      return null;\n+    }\n+\n+    // Converts array_overlaps() function into an OR of Selector filters if possible.\n+    final boolean leftSimpleExtractionExpr = druidExpressions.get(0).isSimpleExtraction();\n+    final boolean rightSimpleExtractionExpr = druidExpressions.get(1).isSimpleExtraction();\n+    final DruidExpression simpleExtractionExpr;\n+    final DruidExpression complexExpr;\n+\n+    if (leftSimpleExtractionExpr ^ rightSimpleExtractionExpr) {\n+      if (leftSimpleExtractionExpr) {\n+        simpleExtractionExpr = druidExpressions.get(0);\n+        complexExpr = druidExpressions.get(1);\n+      } else {\n+        simpleExtractionExpr = druidExpressions.get(1);\n+        complexExpr = druidExpressions.get(0);\n+      }\n+    } else {\n+      return toExpressionFilter(plannerContext, getDruidFunctionName(), druidExpressions);\n+    }\n+\n+    Expr expr = Parser.parse(complexExpr.getExpression(), plannerContext.getExprMacroTable());\n+    if (expr.isLiteral()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "203ee3d209a9bf8fb3aa5a7de196bac60542c5b0"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35ede5be0418104869625e4f09714f54dd3e8fed", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/35ede5be0418104869625e4f09714f54dd3e8fed", "committedDate": "2020-03-09T22:21:10Z", "message": "make spotbugs happy and fix null results when null compatible"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2594, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}