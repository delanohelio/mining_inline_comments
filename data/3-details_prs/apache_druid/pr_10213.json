{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NDQyMjQ2", "number": 10213, "title": "Avoid deletion of load/drop entry from CuratorLoadQueuePeon in case of load timeout", "bodyText": "Fixes #10193.\nCuratorLoadQueuePeon no longer deletes segment load/drop entries in case druid.coordinator.load.timeout expires. Deleting these entries after a timeout can cause the balancer to work incorrectly, as described in the linked issue.\nWith this fix, the segment entries will remain in the load/drop queue for a peon until the ZK entry is deleted by the historical, unless a non-timeout related exception occurs. This helps the balancer to account for the actual queue size for historicals and can lead to better balancing decisions.\n\nThis PR has:\n\n been self-reviewed.\n using the concurrency checklist (Remove this item if the PR doesn't have any relation to concurrency.)\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths, ensuring the threshold for code coverage is met.\n been tested in a test Druid cluster.", "createdAt": "2020-07-24T19:03:21Z", "url": "https://github.com/apache/druid/pull/10213", "merged": true, "mergeCommit": {"oid": "3d7e7c2c836d73cb77dbd412d6eb2d61f6912a69"}, "closed": true, "closedAt": "2021-03-17T18:34:05Z", "author": {"login": "a2l007"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc4Ig1qgH2gAyNDU2NDQyMjQ2OjRlMGE5OTU1ZDAwNmI4N2RlMDNhZmQxYWJjMmZmMzllMzY2NWRlYzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABeDx1qBgFqTYxMzYzMzgyMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4e0a9955d006b87de03afd1abc2ff39e3665dec5", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/4e0a9955d006b87de03afd1abc2ff39e3665dec5", "committedDate": "2020-07-24T18:40:57Z", "message": "Skip queue removal on timeout"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk2MzE2Nzgy", "url": "https://github.com/apache/druid/pull/10213#pullrequestreview-596316782", "createdAt": "2021-02-23T13:12:52Z", "commit": {"oid": "4e0a9955d006b87de03afd1abc2ff39e3665dec5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QxMzoxMjo1M1rOIqG1DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yM1QxMzoxMjo1M1rOIqG1DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTAyMjk4OQ==", "bodyText": "I think it would be worth clarifying this log message to indicate that for load operations, that while the coordinator has given up, the historical might still process and load the requested segments. Maybe something like \"Load segments operation timed out, %s was never removed! Abandoning attempt, (but these segments might still be loaded)\". I guess it would need to adjust message based on whether it was a load or drop.", "url": "https://github.com/apache/druid/pull/10213#discussion_r581022989", "createdAt": "2021-02-23T13:12:53Z", "author": {"login": "clintropolis"}, "path": "server/src/main/java/org/apache/druid/server/coordinator/CuratorLoadQueuePeon.java", "diffHunk": "@@ -282,14 +297,14 @@ public void run()\n           () -> {\n             try {\n               if (curator.checkExists().forPath(path) != null) {\n-                failAssign(segmentHolder, new ISE(\"%s was never removed! Failing this operation!\", path));\n+                failAssign(segmentHolder, true, new ISE(\"%s was never removed! Failing this operation!\", path));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e0a9955d006b87de03afd1abc2ff39e3665dec5"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92154de91a287368521f99e498ddd2c98d6a756a", "author": {"user": {"login": "a2l007", "name": "Atul Mohan"}}, "url": "https://github.com/apache/druid/commit/92154de91a287368521f99e498ddd2c98d6a756a", "committedDate": "2021-03-03T17:49:44Z", "message": "Merge branch 'master' of https://github.com/druid-io/druid into zkerror"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c06ef2f3e6f96ca41743aacdf3dba6af0453cfd", "author": {"user": {"login": "a2l007", "name": "Atul Mohan"}}, "url": "https://github.com/apache/druid/commit/6c06ef2f3e6f96ca41743aacdf3dba6af0453cfd", "committedDate": "2021-03-03T20:48:13Z", "message": "Clarify error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjA0NjU5MTMw", "url": "https://github.com/apache/druid/pull/10213#pullrequestreview-604659130", "createdAt": "2021-03-04T23:25:11Z", "commit": {"oid": "6c06ef2f3e6f96ca41743aacdf3dba6af0453cfd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjA1OTA2NDk4", "url": "https://github.com/apache/druid/pull/10213#pullrequestreview-605906498", "createdAt": "2021-03-08T00:47:03Z", "commit": {"oid": "6c06ef2f3e6f96ca41743aacdf3dba6af0453cfd"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wOFQwMDo1MDoyMFrOIx0zqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wOFQwMToxNDozMVrOIx1C1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTExNjMzMQ==", "bodyText": "I'm not sure why we don't emit exceptions currently (using EmittingLogger.makeAlert()), but should we? At least for the segment loading timeout error, it would be nice to emit those errors so that cluster operators can notice there is something going wrong with segment loading.", "url": "https://github.com/apache/druid/pull/10213#discussion_r589116331", "createdAt": "2021-03-08T00:50:20Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/server/coordinator/CuratorLoadQueuePeon.java", "diffHunk": "@@ -361,21 +386,33 @@ private void entryRemoved(SegmentHolder segmentHolder, String path)\n     );\n   }\n \n-  private void failAssign(SegmentHolder segmentHolder)\n+  private void failAssign(SegmentHolder segmentHolder, boolean handleTimeout)\n   {\n-    failAssign(segmentHolder, null);\n+    failAssign(segmentHolder, handleTimeout, null);\n   }\n \n-  private void failAssign(SegmentHolder segmentHolder, Exception e)\n+  private void failAssign(SegmentHolder segmentHolder, boolean handleTimeout, Exception e)\n   {\n     if (e != null) {\n       log.error(e, \"Server[%s], throwable caught when submitting [%s].\", basePath, segmentHolder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c06ef2f3e6f96ca41743aacdf3dba6af0453cfd"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTExNjU1Mg==", "bodyText": "loadingSegments is not just a set of segments loading anymore. Please add some javadoc in SegmentReplicantLookup about this.", "url": "https://github.com/apache/druid/pull/10213#discussion_r589116552", "createdAt": "2021-03-08T00:51:51Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/server/coordinator/SegmentReplicantLookup.java", "diffHunk": "@@ -59,7 +59,10 @@ public static SegmentReplicantLookup make(DruidCluster cluster)\n           if (numReplicants == null) {\n             numReplicants = 0;\n           }\n-          loadingSegments.put(segment.getId(), server.getTier(), numReplicants + 1);\n+          // Timed out segments need to be replicated in another server for faster availability\n+          if (!serverHolder.getPeon().getTimedOutSegments().contains(segment)) {\n+            loadingSegments.put(segment.getId(), server.getTier(), numReplicants + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c06ef2f3e6f96ca41743aacdf3dba6af0453cfd"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTEyMDIxMg==", "bodyText": "As @himanshug pointed out in #10193 (comment), there could be two types of slow segment loading.\n\nThere are a few historicals being slow in segment loading in the cluster. This can be caused by unbalanced load queues or some intermittent failures.\nHistoricals are OK, but ingestion might outpace the ability to load segments.\n\nThis particular change in SegmentReplicantLookup could help in the former case, but make things worse in the latter case. In an extreme case, all historicals could have the same set of timed-out segments in their load queue. This might be still OK though, because, if that's the case, Druid cannot get out of that state by itself anyway. The system administrator should add more historicals or use more threads for parallel segment loading. However, we should provide relevant data so that system administrators can tell what's happening. I left another comment about emitting exceptions to provide such data.", "url": "https://github.com/apache/druid/pull/10213#discussion_r589120212", "createdAt": "2021-03-08T01:14:31Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/server/coordinator/SegmentReplicantLookup.java", "diffHunk": "@@ -59,7 +59,10 @@ public static SegmentReplicantLookup make(DruidCluster cluster)\n           if (numReplicants == null) {\n             numReplicants = 0;\n           }\n-          loadingSegments.put(segment.getId(), server.getTier(), numReplicants + 1);\n+          // Timed out segments need to be replicated in another server for faster availability\n+          if (!serverHolder.getPeon().getTimedOutSegments().contains(segment)) {\n+            loadingSegments.put(segment.getId(), server.getTier(), numReplicants + 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTExNjU1Mg=="}, "originalCommit": {"oid": "6c06ef2f3e6f96ca41743aacdf3dba6af0453cfd"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a56f5bf98ebcb35fd71f01bbfc0a7bd160c0e330", "author": {"user": {"login": "a2l007", "name": "Atul Mohan"}}, "url": "https://github.com/apache/druid/commit/a56f5bf98ebcb35fd71f01bbfc0a7bd160c0e330", "committedDate": "2021-03-09T15:09:04Z", "message": "Merge branch 'master' of https://github.com/druid-io/druid into zkerror"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99f249e3d4228a96e8d58dc6fbed97faabc28b15", "author": {"user": {"login": "a2l007", "name": "Atul Mohan"}}, "url": "https://github.com/apache/druid/commit/99f249e3d4228a96e8d58dc6fbed97faabc28b15", "committedDate": "2021-03-15T16:57:43Z", "message": "Merge branch 'master' of https://github.com/druid-io/druid into zkerror"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9dbf5b56fbfdbe36a2e5dbbb0fe037808d9b3d1f", "author": {"user": {"login": "a2l007", "name": "Atul Mohan"}}, "url": "https://github.com/apache/druid/commit/9dbf5b56fbfdbe36a2e5dbbb0fe037808d9b3d1f", "committedDate": "2021-03-16T19:06:13Z", "message": "Add new config to control replication"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjEzNjMzODIw", "url": "https://github.com/apache/druid/pull/10213#pullrequestreview-613633820", "createdAt": "2021-03-16T19:14:07Z", "commit": {"oid": "9dbf5b56fbfdbe36a2e5dbbb0fe037808d9b3d1f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1884, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}