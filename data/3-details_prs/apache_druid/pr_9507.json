{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MDYxNzYy", "number": 9507, "title": "optionally disable all of hardcoded zookeeper use", "bodyText": "Paving Path Towards #9053\nDescription\nThis patch adds a new configuration property druid.zk.service.enabled=true/false, default =  true on all nodes to disable all of zookeeper activities that get setup even if user chooses to use HTTP based segment and  task management. Some of those are....\n\nhistorical announcing itself as data server in zk\nhistoricals watching zk for segment load/drop requests\nhistoricals announcing segments in zk\nmiddle managers watching zk for task assignment requests\nmiddle managers doing task status updates in zk\n(above set of things are required, so that curator based task/segment management continues to work in rolling deployment scenario and also could be interchanged with http based task/segment management at any time)\nHttpRemoteTaskRunner periodically doing cleanup of tasks from zk because MiddleManager continues to update the status in zk\nexternal discovery announcements done via ServiceAnnouncer to keep tranquility working\n\nThis property is undocumented for now till k8s based discovery extension PR shows up, that will have all the necessary documentation including setting druid.zk.service.enabled=false .\n\nThis PR has:\n\n been self-reviewed.\n\n using the concurrency checklist (Remove this item if the PR doesn't have any relation to concurrency.)\n\n\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths.\n added integration tests.\n been tested in a test Druid cluster.\n\n\nKey changed/added classes in this PR\n\nZkEnabledmentConfig\nCliXXX\nXXXModule\nAnd few others that directly/indirectly depended on CuratorFramework", "createdAt": "2020-03-12T06:20:16Z", "url": "https://github.com/apache/druid/pull/9507", "merged": true, "mergeCommit": {"oid": "ee136303bb561d02dcfc8e4cd7f7b7af907e4e28"}, "closed": true, "closedAt": "2020-10-27T05:36:00Z", "author": {"login": "himanshug"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcM1bcVgH2gAyMzg3MDYxNzYyOjc0NmZmZWI1NTA0YzIxMjYwOTRhMjQ3MjhkMGFjYThhNDIwODY4ZGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWfvuIgFqTUxNzMwODg2Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "746ffeb5504c2126094a24728d0aca8a420868de", "author": {"user": {"login": "himanshug", "name": "Himanshu"}}, "url": "https://github.com/apache/druid/commit/746ffeb5504c2126094a24728d0aca8a420868de", "committedDate": "2020-03-12T06:08:07Z", "message": "optionally disable all of hardcoded zookeeper use"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMDA2ODE0", "url": "https://github.com/apache/druid/pull/9507#pullrequestreview-380006814", "createdAt": "2020-03-24T05:22:17Z", "commit": {"oid": "746ffeb5504c2126094a24728d0aca8a420868de"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNToyMjoxOFrOF6hV2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNTo0NjoyN1rOF6ht_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNzk5Mw==", "bodyText": "Hmm, is this actually true if still using zk segment loading? It was wrong before for the same reasons I think for http segment loading. Maybe this resource should accept either segment loader like SegmentListerResource, or we should have another http resource that we bind instead depending which mode is enabled?", "url": "https://github.com/apache/druid/pull/9507#discussion_r396907993", "createdAt": "2020-03-24T05:22:18Z", "author": {"login": "clintropolis"}, "path": "server/src/main/java/org/apache/druid/server/http/HistoricalResource.java", "diffHunk": "@@ -50,14 +50,14 @@ public HistoricalResource(\n   @Produces(MediaType.APPLICATION_JSON)\n   public Response getLoadStatus()\n   {\n-    return Response.ok(ImmutableMap.of(\"cacheInitialized\", coordinator.isStarted())).build();\n+    return Response.ok(ImmutableMap.of(\"cacheInitialized\", segmentLoadDropHandler.isStarted())).build();\n   }\n \n   @GET\n   @Path(\"/readiness\")\n   public Response getReadiness()\n   {\n-    if (coordinator.isStarted()) {\n+    if (segmentLoadDropHandler.isStarted()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "746ffeb5504c2126094a24728d0aca8a420868de"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwOTg0OQ==", "bodyText": "I haven't looked too closely yet, but I wonder if this would be better if this was marked as @Nullable and returned null instead of throwing the runtime exception, and shift the burden of validating that curator is available to the settings that do require it, such as inventory, segment loading, and task management? The other stuff might be able to be simplified a bit and not have to care about having the setting, and could probably avoid having some of the signature changes to use providers.", "url": "https://github.com/apache/druid/pull/9507#discussion_r396909849", "createdAt": "2020-03-24T05:29:26Z", "author": {"login": "clintropolis"}, "path": "server/src/main/java/org/apache/druid/curator/CuratorModule.java", "diffHunk": "@@ -63,15 +63,20 @@\n   @Override\n   public void configure(Binder binder)\n   {\n+    JsonConfigProvider.bind(binder, CURATOR_CONFIG_PREFIX, ZkEnablementConfig.class);\n     JsonConfigProvider.bind(binder, CURATOR_CONFIG_PREFIX, CuratorConfig.class);\n     JsonConfigProvider.bind(binder, EXHIBITOR_CONFIG_PREFIX, ExhibitorConfig.class);\n   }\n \n   @Provides\n   @LazySingleton\n   @SuppressForbidden(reason = \"System#err\")\n-  public CuratorFramework makeCurator(CuratorConfig config, EnsembleProvider ensembleProvider, Lifecycle lifecycle)\n+  public CuratorFramework makeCurator(ZkEnablementConfig zkEnablementConfig, CuratorConfig config, EnsembleProvider ensembleProvider, Lifecycle lifecycle)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "746ffeb5504c2126094a24728d0aca8a420868de"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxMDEwOQ==", "bodyText": "This doesn't necessarily need to change in this PR, but it seems kind of leaky that this thing has a CuratorFramework at all, it seems like the load peon should provide this check so it can just be a no-op for non-zk. and then DruidCoordinator no longer needs a curator or zk paths I think?", "url": "https://github.com/apache/druid/pull/9507#discussion_r396910109", "createdAt": "2020-03-24T05:30:39Z", "author": {"login": "clintropolis"}, "path": "server/src/main/java/org/apache/druid/server/coordinator/DruidCoordinator.java", "diffHunk": "@@ -443,7 +455,7 @@ public void moveSegment(\n             () -> {\n               try {\n                 if (serverInventoryView.isSegmentLoadedByServer(toServer.getName(), segment) &&\n-                    curator.checkExists().forPath(toLoadQueueSegPath) == null &&\n+                    (curator == null || curator.checkExists().forPath(toLoadQueueSegPath) == null) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "746ffeb5504c2126094a24728d0aca8a420868de"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxMDkxNQ==", "bodyText": "Just thinking out loud, doesn't need to be addressed in this PR, it seems like maybe LoadQueueTaskMaster maybe needs some sort of peon factory that is set by config so that it doesn't have to care about individual implementations or curators and the like", "url": "https://github.com/apache/druid/pull/9507#discussion_r396910915", "createdAt": "2020-03-24T05:33:46Z", "author": {"login": "clintropolis"}, "path": "server/src/main/java/org/apache/druid/server/coordinator/LoadQueueTaskMaster.java", "diffHunk": "@@ -67,7 +68,7 @@ public LoadQueuePeon giveMePeon(ImmutableDruidServer server)\n       return new HttpLoadQueuePeon(server.getURL(), jsonMapper, httpClient, config, peonExec, callbackExec);\n     } else {\n       return new CuratorLoadQueuePeon(\n-          curator,\n+          curatorFrameworkProvider.get(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "746ffeb5504c2126094a24728d0aca8a420868de"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNDE3Mw==", "bodyText": "It seems like this class is almost entirely to handle zk stuff, does it need to be bound and exist at all if zk is disabled?", "url": "https://github.com/apache/druid/pull/9507#discussion_r396914173", "createdAt": "2020-03-24T05:46:27Z", "author": {"login": "clintropolis"}, "path": "server/src/main/java/org/apache/druid/server/coordination/BatchDataSegmentAnnouncer.java", "diffHunk": "@@ -99,13 +107,28 @@ public BatchDataSegmentAnnouncer(\n       return rv;\n     };\n \n-    if (this.config.isSkipSegmentAnnouncementOnZk()) {\n+    isSkipSegmentAnnouncementOnZk = !zkEnablementConfig.isEnabled() || config.isSkipSegmentAnnouncementOnZk();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "746ffeb5504c2126094a24728d0aca8a420868de"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42c0c853dd92edfd2b040c764d0ba1454515f4e4", "author": {"user": {"login": "himanshug", "name": "Himanshu"}}, "url": "https://github.com/apache/druid/commit/42c0c853dd92edfd2b040c764d0ba1454515f4e4", "committedDate": "2020-05-30T00:42:20Z", "message": "Merge remote-tracking branch 'apache/master' into optional_disable_zk"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "867f624865405d8a2771a34ad9142b1a24be62f9", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/867f624865405d8a2771a34ad9142b1a24be62f9", "committedDate": "2020-10-26T18:52:13Z", "message": "Merge remote-tracking branch 'origin/master' into optional_disable_zk"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2382d1d351ec9ed3ebe03e39f678b9ade28584f4", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/2382d1d351ec9ed3ebe03e39f678b9ade28584f4", "committedDate": "2020-10-26T19:12:00Z", "message": "fix DruidCoordinatorTest compilation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ac97849bfe22d017e964b28a807ef1da034a690", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/2ac97849bfe22d017e964b28a807ef1da034a690", "committedDate": "2020-10-26T21:44:48Z", "message": "fix test in DruidCoordinatorTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02badd876adbe766d8701be5ed1fb62542a85e2f", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/02badd876adbe766d8701be5ed1fb62542a85e2f", "committedDate": "2020-10-26T22:12:14Z", "message": "fix strict compilation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MzA4ODYy", "url": "https://github.com/apache/druid/pull/9507#pullrequestreview-517308862", "createdAt": "2020-10-27T02:42:45Z", "commit": {"oid": "02badd876adbe766d8701be5ed1fb62542a85e2f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2630, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}