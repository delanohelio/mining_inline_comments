{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MjMyMDI4", "number": 9760, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMjoyOToxMlrOD1gOvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMzo0Mjo1OFrOD3bDyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDI5MTgxOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/join/PossiblyNullDimensionSelector.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMjoyOToxMlrOGK-sTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMzozNTo1OFrOGNq3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE2NjA5Mw==", "bodyText": "should this return 0 if the idLookup does not exist?", "url": "https://github.com/apache/druid/pull/9760#discussion_r414166093", "createdAt": "2020-04-23T22:29:12Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/join/PossiblyNullDimensionSelector.java", "diffHunk": "@@ -138,7 +138,8 @@ public int lookupId(@Nullable String name)\n       // id 0 is always null for this selector impl.\n       return 0;\n     } else {\n-      return baseSelector.idLookup().lookupId(name) + nullAdjustment;\n+      IdLookup idLookup = baseSelector.idLookup();\n+      return (idLookup == null ? 0 : idLookup.lookupId(name)) + nullAdjustment;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f33bbfc85bd33da048fe07d3bb4e092d4beea159"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg5ODI1Nw==", "bodyText": "It should probably fail if idLooup = null.", "url": "https://github.com/apache/druid/pull/9760#discussion_r414898257", "createdAt": "2020-04-24T22:29:32Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/segment/join/PossiblyNullDimensionSelector.java", "diffHunk": "@@ -138,7 +138,8 @@ public int lookupId(@Nullable String name)\n       // id 0 is always null for this selector impl.\n       return 0;\n     } else {\n-      return baseSelector.idLookup().lookupId(name) + nullAdjustment;\n+      IdLookup idLookup = baseSelector.idLookup();\n+      return (idLookup == null ? 0 : idLookup.lookupId(name)) + nullAdjustment;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE2NjA5Mw=="}, "originalCommit": {"oid": "f33bbfc85bd33da048fe07d3bb4e092d4beea159"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3Njc5Mg==", "bodyText": "A null idLookup there should be an error condition, since the caller should check if idLookup() returned null before calling lookupId(name) on the PossiblyNullDimensionSelector", "url": "https://github.com/apache/druid/pull/9760#discussion_r416976792", "createdAt": "2020-04-28T23:07:26Z", "author": {"login": "jon-wei"}, "path": "processing/src/main/java/org/apache/druid/segment/join/PossiblyNullDimensionSelector.java", "diffHunk": "@@ -138,7 +138,8 @@ public int lookupId(@Nullable String name)\n       // id 0 is always null for this selector impl.\n       return 0;\n     } else {\n-      return baseSelector.idLookup().lookupId(name) + nullAdjustment;\n+      IdLookup idLookup = baseSelector.idLookup();\n+      return (idLookup == null ? 0 : idLookup.lookupId(name)) + nullAdjustment;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE2NjA5Mw=="}, "originalCommit": {"oid": "f33bbfc85bd33da048fe07d3bb4e092d4beea159"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4NjkzMw==", "bodyText": "Added an assert statement with an explanation of why it should never be null in here", "url": "https://github.com/apache/druid/pull/9760#discussion_r416986933", "createdAt": "2020-04-28T23:35:58Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/join/PossiblyNullDimensionSelector.java", "diffHunk": "@@ -138,7 +138,8 @@ public int lookupId(@Nullable String name)\n       // id 0 is always null for this selector impl.\n       return 0;\n     } else {\n-      return baseSelector.idLookup().lookupId(name) + nullAdjustment;\n+      IdLookup idLookup = baseSelector.idLookup();\n+      return (idLookup == null ? 0 : idLookup.lookupId(name)) + nullAdjustment;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE2NjA5Mw=="}, "originalCommit": {"oid": "f33bbfc85bd33da048fe07d3bb4e092d4beea159"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTEzMTYwOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/join/lookup/LookupJoinMatcher.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNDoyNToyMVrOGLFzkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMzo1Mzo0OFrOGNrOWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI4MjY0MA==", "bodyText": "When can entry be null?", "url": "https://github.com/apache/druid/pull/9760#discussion_r414282640", "createdAt": "2020-04-24T04:25:21Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/segment/join/lookup/LookupJoinMatcher.java", "diffHunk": "@@ -277,7 +277,7 @@ public void matchRemainder()\n     } else {\n       currentIterator = Iterators.filter(\n           extractor.iterable().iterator(),\n-          entry -> !matchedKeys.contains(entry.getKey())\n+          entry -> entry != null && !matchedKeys.contains(entry.getKey())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f33bbfc85bd33da048fe07d3bb4e092d4beea159"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkwNTgwNA==", "bodyText": "It doesn't look like this can actually happen, I think.\nIn theory iterator.next() can return null, but MapLookupExtractor#iterable (the only implementation today that does not throw an exception) returns map.entrySet() which should never contain a null element.", "url": "https://github.com/apache/druid/pull/9760#discussion_r414905804", "createdAt": "2020-04-24T22:52:36Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/join/lookup/LookupJoinMatcher.java", "diffHunk": "@@ -277,7 +277,7 @@ public void matchRemainder()\n     } else {\n       currentIterator = Iterators.filter(\n           extractor.iterable().iterator(),\n-          entry -> !matchedKeys.contains(entry.getKey())\n+          entry -> entry != null && !matchedKeys.contains(entry.getKey())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI4MjY0MA=="}, "originalCommit": {"oid": "f33bbfc85bd33da048fe07d3bb4e092d4beea159"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4NTkzNA==", "bodyText": "Yeah. It also doesn't seem reasonable that a \"row\" can be null. I think it's a false warning because of the Predicate interface of Guava. It would be better to suppress warning instead of checking null.", "url": "https://github.com/apache/druid/pull/9760#discussion_r416985934", "createdAt": "2020-04-28T23:33:11Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/segment/join/lookup/LookupJoinMatcher.java", "diffHunk": "@@ -277,7 +277,7 @@ public void matchRemainder()\n     } else {\n       currentIterator = Iterators.filter(\n           extractor.iterable().iterator(),\n-          entry -> !matchedKeys.contains(entry.getKey())\n+          entry -> entry != null && !matchedKeys.contains(entry.getKey())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI4MjY0MA=="}, "originalCommit": {"oid": "f33bbfc85bd33da048fe07d3bb4e092d4beea159"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk5Mjg1Ng==", "bodyText": "good call. Looks like this is on a hot path too, so I've added an inspection suppression instead of an assert not null. \ud83d\udc4d", "url": "https://github.com/apache/druid/pull/9760#discussion_r416992856", "createdAt": "2020-04-28T23:53:48Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/join/lookup/LookupJoinMatcher.java", "diffHunk": "@@ -277,7 +277,7 @@ public void matchRemainder()\n     } else {\n       currentIterator = Iterators.filter(\n           extractor.iterable().iterator(),\n-          entry -> !matchedKeys.contains(entry.getKey())\n+          entry -> entry != null && !matchedKeys.contains(entry.getKey())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI4MjY0MA=="}, "originalCommit": {"oid": "f33bbfc85bd33da048fe07d3bb4e092d4beea159"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDMyMzE4OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/join/JoinConditionAnalysis.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMzowNDoyNVrOGNqK6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMzoyOTo1NVrOGNqvHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3NTU5Mw==", "bodyText": "What's the impact of removing the distinct() call (is it just unnecessary since they're being collected to a set already?)", "url": "https://github.com/apache/druid/pull/9760#discussion_r416975593", "createdAt": "2020-04-28T23:04:25Z", "author": {"login": "jon-wei"}, "path": "processing/src/main/java/org/apache/druid/segment/join/JoinConditionAnalysis.java", "diffHunk": "@@ -79,7 +79,7 @@ private JoinConditionAnalysis(\n                                                                 .allMatch(expr -> expr.isLiteral() && expr.eval(\n                                                                     ExprUtils.nilBindings()).asBoolean());\n     canHashJoin = nonEquiConditions.stream().allMatch(Expr::isLiteral);\n-    rightKeyColumns = getEquiConditions().stream().map(Equality::getRightColumn).distinct().collect(Collectors.toSet());\n+    rightKeyColumns = getEquiConditions().stream().map(Equality::getRightColumn).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79eb23832004e90ed498aa1448d3bc9513cd6b50"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4NDg2Mg==", "bodyText": "should be a no-op. intelliJ suggested it's un-necessary since we're collecting to a set", "url": "https://github.com/apache/druid/pull/9760#discussion_r416984862", "createdAt": "2020-04-28T23:29:55Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/join/JoinConditionAnalysis.java", "diffHunk": "@@ -79,7 +79,7 @@ private JoinConditionAnalysis(\n                                                                 .allMatch(expr -> expr.isLiteral() && expr.eval(\n                                                                     ExprUtils.nilBindings()).asBoolean());\n     canHashJoin = nonEquiConditions.stream().allMatch(Expr::isLiteral);\n-    rightKeyColumns = getEquiConditions().stream().map(Equality::getRightColumn).distinct().collect(Collectors.toSet());\n+    rightKeyColumns = getEquiConditions().stream().map(Equality::getRightColumn).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3NTU5Mw=="}, "originalCommit": {"oid": "79eb23832004e90ed498aa1448d3bc9513cd6b50"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDMzNjMzOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/join/lookup/LookupJoinable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMzowOToxM1rOGNqSbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMzowOToxM1rOGNqSbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk3NzUxOQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/druid/pull/9760#discussion_r416977519", "createdAt": "2020-04-28T23:09:13Z", "author": {"login": "jon-wei"}, "path": "processing/src/main/java/org/apache/druid/segment/join/lookup/LookupJoinable.java", "diffHunk": "@@ -95,18 +96,23 @@ public JoinMatcher makeJoinMatcher(\n       boolean allowNonKeyColumnSearch\n   )\n   {\n+    if (!ALL_COLUMNS.contains(searchColumnName) || !ALL_COLUMNS.contains(retrievalColumnName)) {\n+      return ImmutableSet.of();\n+    }\n     Set<String> correlatedValues;\n     if (LookupColumnSelectorFactory.KEY_COLUMN.equals(searchColumnName)) {\n       if (LookupColumnSelectorFactory.KEY_COLUMN.equals(retrievalColumnName)) {\n         correlatedValues = ImmutableSet.of(searchColumnValue);\n       } else {\n-        correlatedValues = ImmutableSet.of(extractor.apply(searchColumnName));\n+        // This should not happen in practice because the column to be joined on must be a key.\n+        correlatedValues = Collections.singleton(extractor.apply(searchColumnValue));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79eb23832004e90ed498aa1448d3bc9513cd6b50"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDQxNjA5OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/virtual/MultiValueExpressionDimensionSelector.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMzo0Mjo1OFrOGNrANQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDoyMTo1M1rOGOPhsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4OTIzNw==", "bodyText": "Does all callers need to check the returned eval? Seems there are a couple of missing places.", "url": "https://github.com/apache/druid/pull/9760#discussion_r416989237", "createdAt": "2020-04-28T23:42:58Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/segment/virtual/MultiValueExpressionDimensionSelector.java", "diffHunk": "@@ -50,11 +50,13 @@ public MultiValueExpressionDimensionSelector(ColumnValueSelector<ExprEval> baseS\n     this.baseSelector = baseSelector;\n   }\n \n+  @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79eb23832004e90ed498aa1448d3bc9513cd6b50"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAzMTUwNg==", "bodyText": "I'd like to do this in phases, there are about 600+ issues that intelliJ reports in the druid-processing sub module. I'll pick through more of them in my next PR. Once they are fixed, I will enable these warnings in the inspections job", "url": "https://github.com/apache/druid/pull/9760#discussion_r417031506", "createdAt": "2020-04-29T02:19:25Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/virtual/MultiValueExpressionDimensionSelector.java", "diffHunk": "@@ -50,11 +50,13 @@ public MultiValueExpressionDimensionSelector(ColumnValueSelector<ExprEval> baseS\n     this.baseSelector = baseSelector;\n   }\n \n+  @Nullable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4OTIzNw=="}, "originalCommit": {"oid": "79eb23832004e90ed498aa1448d3bc9513cd6b50"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAzMjU4MA==", "bodyText": "Oh I meant for this method. This method is technically private and only used in this class. Some of the callers are still not checking nulls, for example here.", "url": "https://github.com/apache/druid/pull/9760#discussion_r417032580", "createdAt": "2020-04-29T02:24:01Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/segment/virtual/MultiValueExpressionDimensionSelector.java", "diffHunk": "@@ -50,11 +50,13 @@ public MultiValueExpressionDimensionSelector(ColumnValueSelector<ExprEval> baseS\n     this.baseSelector = baseSelector;\n   }\n \n+  @Nullable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4OTIzNw=="}, "originalCommit": {"oid": "79eb23832004e90ed498aa1448d3bc9513cd6b50"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA0NzgwOQ==", "bodyText": "These are checked on the hot loop. I've removed them for now, it's hard to reason whether or not it's possible to return null here. I think it can't, but I'm not 100% sure so I'm reverting this change and the associated null check", "url": "https://github.com/apache/druid/pull/9760#discussion_r417047809", "createdAt": "2020-04-29T03:30:38Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/virtual/MultiValueExpressionDimensionSelector.java", "diffHunk": "@@ -50,11 +50,13 @@ public MultiValueExpressionDimensionSelector(ColumnValueSelector<ExprEval> baseS\n     this.baseSelector = baseSelector;\n   }\n \n+  @Nullable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4OTIzNw=="}, "originalCommit": {"oid": "79eb23832004e90ed498aa1448d3bc9513cd6b50"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4NzYzMg==", "bodyText": "Oh yeah, it doesn't seem possible to return null since ColumnValueSelector returns an ExprEval.", "url": "https://github.com/apache/druid/pull/9760#discussion_r417587632", "createdAt": "2020-04-29T20:21:53Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/segment/virtual/MultiValueExpressionDimensionSelector.java", "diffHunk": "@@ -50,11 +50,13 @@ public MultiValueExpressionDimensionSelector(ColumnValueSelector<ExprEval> baseS\n     this.baseSelector = baseSelector;\n   }\n \n+  @Nullable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk4OTIzNw=="}, "originalCommit": {"oid": "79eb23832004e90ed498aa1448d3bc9513cd6b50"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2589, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}