{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5OTQzODI2", "number": 9783, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToyMjoyOVrOD3Ytxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODoyNjoxOFrOD3hp2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDAzMjA3OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/org/apache/druid/tests/parallelized/ITKinesisIndexingServiceDataFormatTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToyMjoyOVrOGNndaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMjoxODo0MlrOGNpGbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkzMTE3Nw==", "bodyText": "Can add a new named constant to TestNGGroup for \"kinesis-data-format\"", "url": "https://github.com/apache/druid/pull/9783#discussion_r416931177", "createdAt": "2020-04-28T21:22:29Z", "author": {"login": "ccaominh"}, "path": "integration-tests/src/test/java/org/apache/druid/tests/parallelized/ITKinesisIndexingServiceDataFormatTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.tests.parallelized;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.inject.Inject;\n+import org.apache.druid.guice.annotations.Json;\n+import org.apache.druid.testing.guice.DruidTestModuleFactory;\n+import org.apache.druid.tests.TestNGGroup;\n+import org.apache.druid.tests.indexer.AbstractKinesisIndexingServiceTest;\n+import org.apache.druid.tests.indexer.AbstractStreamIndexingTest;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Guice;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Test(groups = \"kinesis-data-format\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa2af16cf96dd15e4798f5bcae604b67efef9ea1"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk0NDYwMw==", "bodyText": "Oh, I forgot to revert this change. I think it would be better to add this test to the existing kinesis-index group since we run them manually and probably want to run them all at once. What do you think?", "url": "https://github.com/apache/druid/pull/9783#discussion_r416944603", "createdAt": "2020-04-28T21:48:30Z", "author": {"login": "jihoonson"}, "path": "integration-tests/src/test/java/org/apache/druid/tests/parallelized/ITKinesisIndexingServiceDataFormatTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.tests.parallelized;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.inject.Inject;\n+import org.apache.druid.guice.annotations.Json;\n+import org.apache.druid.testing.guice.DruidTestModuleFactory;\n+import org.apache.druid.tests.TestNGGroup;\n+import org.apache.druid.tests.indexer.AbstractKinesisIndexingServiceTest;\n+import org.apache.druid.tests.indexer.AbstractStreamIndexingTest;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Guice;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Test(groups = \"kinesis-data-format\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkzMTE3Nw=="}, "originalCommit": {"oid": "aa2af16cf96dd15e4798f5bcae604b67efef9ea1"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk1NjY1NA==", "bodyText": "On second thought, it might be useful to have a different group if we run this test on some CI in the future. I added a new group to TestNGGroup. The new group is disabled on Travis.", "url": "https://github.com/apache/druid/pull/9783#discussion_r416956654", "createdAt": "2020-04-28T22:15:20Z", "author": {"login": "jihoonson"}, "path": "integration-tests/src/test/java/org/apache/druid/tests/parallelized/ITKinesisIndexingServiceDataFormatTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.tests.parallelized;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.inject.Inject;\n+import org.apache.druid.guice.annotations.Json;\n+import org.apache.druid.testing.guice.DruidTestModuleFactory;\n+import org.apache.druid.tests.TestNGGroup;\n+import org.apache.druid.tests.indexer.AbstractKinesisIndexingServiceTest;\n+import org.apache.druid.tests.indexer.AbstractStreamIndexingTest;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Guice;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Test(groups = \"kinesis-data-format\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkzMTE3Nw=="}, "originalCommit": {"oid": "aa2af16cf96dd15e4798f5bcae604b67efef9ea1"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk1ODA2Mw==", "bodyText": "Keeping it separate is nice for running the groups concurrently. Perhaps we can explore TestNG groups of groups later to simplify running multiple groups.", "url": "https://github.com/apache/druid/pull/9783#discussion_r416958063", "createdAt": "2020-04-28T22:18:42Z", "author": {"login": "ccaominh"}, "path": "integration-tests/src/test/java/org/apache/druid/tests/parallelized/ITKinesisIndexingServiceDataFormatTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.tests.parallelized;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.inject.Inject;\n+import org.apache.druid.guice.annotations.Json;\n+import org.apache.druid.testing.guice.DruidTestModuleFactory;\n+import org.apache.druid.tests.TestNGGroup;\n+import org.apache.druid.tests.indexer.AbstractKinesisIndexingServiceTest;\n+import org.apache.druid.tests.indexer.AbstractStreamIndexingTest;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Guice;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Test(groups = \"kinesis-data-format\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkzMTE3Nw=="}, "originalCommit": {"oid": "aa2af16cf96dd15e4798f5bcae604b67efef9ea1"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDQ2MDEwOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/org/apache/druid/tests/indexer/AbstractStreamIndexingTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMDowMzowMlrOGNrZ5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMDozODozOVrOGNsGlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk5NTgxMg==", "bodyText": "Kinesis does not have transaction enabled/disabled. Does it make sense to put this at Kafka layer instead of here?", "url": "https://github.com/apache/druid/pull/9783#discussion_r416995812", "createdAt": "2020-04-29T00:03:02Z", "author": {"login": "maytasm"}, "path": "integration-tests/src/test/java/org/apache/druid/tests/indexer/AbstractStreamIndexingTest.java", "diffHunk": "@@ -67,92 +92,147 @@\n   private IntegrationTestingConfig config;\n \n   private StreamAdminClient streamAdminClient;\n-  private WikipediaStreamEventStreamGenerator wikipediaStreamEventGenerator;\n \n   abstract StreamAdminClient createStreamAdminClient(IntegrationTestingConfig config) throws Exception;\n-  abstract StreamEventWriter createStreamEventWriter(IntegrationTestingConfig config) throws Exception;\n-  abstract Function<String, String> generateStreamIngestionPropsTransform(String streamName,\n-                                                                          String fullDatasourceName,\n-                                                                          IntegrationTestingConfig config);\n+\n+  abstract StreamEventWriter createStreamEventWriter(IntegrationTestingConfig config, boolean transactionEnabled)\n+      throws Exception;\n+\n+  abstract Function<String, String> generateStreamIngestionPropsTransform(\n+      String streamName,\n+      String fullDatasourceName,\n+      String parserType,\n+      String parserOrInputFormat,\n+      IntegrationTestingConfig config\n+  );\n+\n   abstract Function<String, String> generateStreamQueryPropsTransform(String streamName, String fullDatasourceName);\n+\n   public abstract String getTestNamePrefix();\n \n   protected void doBeforeClass() throws Exception\n   {\n     streamAdminClient = createStreamAdminClient(config);\n-    wikipediaStreamEventGenerator = new WikipediaStreamEventStreamGenerator(EVENTS_PER_SECOND, CYCLE_PADDING_MS);\n   }\n \n-  protected void doClassTeardown()\n+  private static String getOnlyResourcePath(String resourceRoot) throws IOException\n   {\n-    wikipediaStreamEventGenerator.shutdown();\n+    return String.join(\"/\", resourceRoot, Iterables.getOnlyElement(listResources(resourceRoot)));\n   }\n \n-  protected void doTestIndexDataWithLegacyParserStableState() throws Exception\n+  protected static List<String> listDataFormatResources() throws IOException\n   {\n-    StreamEventWriter streamEventWriter = createStreamEventWriter(config);\n-    final GeneratedTestConfig generatedTestConfig = new GeneratedTestConfig();\n-    try (\n-        final Closeable ignored1 = unloader(generatedTestConfig.getFullDatasourceName())\n-    ) {\n-      final String taskSpec = generatedTestConfig.getStreamIngestionPropsTransform().apply(getResourceAsString(INDEXER_FILE_LEGACY_PARSER));\n-      LOG.info(\"supervisorSpec: [%s]\\n\", taskSpec);\n-      // Start supervisor\n-      generatedTestConfig.setSupervisorId(indexer.submitSupervisor(taskSpec));\n-      LOG.info(\"Submitted supervisor\");\n-      // Start data generator\n-      wikipediaStreamEventGenerator.run(generatedTestConfig.getStreamName(), streamEventWriter, TOTAL_NUMBER_OF_SECOND, FIRST_EVENT_TIME);\n-      verifyIngestedData(generatedTestConfig);\n+    return listResources(DATA_RESOURCE_ROOT)\n+        .stream()\n+        .filter(resource -> !SUPERVISOR_SPEC_TEMPLATE_FILE.equals(resource))\n+        .collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * Returns a map of key to path to spec. The returned map contains at least 2 specs and one of them\n+   * should be a {@link #SERIALIZER} spec.\n+   */\n+  protected static Map<String, String> findTestSpecs(String resourceRoot) throws IOException\n+  {\n+    final List<String> specDirs = listResources(resourceRoot);\n+    final Map<String, String> map = new HashMap<>();\n+    for (String eachSpec : specDirs) {\n+      if (SERIALIZER_SPEC_DIR.equals(eachSpec)) {\n+        map.put(SERIALIZER, getOnlyResourcePath(String.join(\"/\", resourceRoot, SERIALIZER_SPEC_DIR)));\n+      } else if (INPUT_ROW_PARSER_SPEC_DIR.equals(eachSpec)) {\n+        map.put(INPUT_ROW_PARSER, getOnlyResourcePath(String.join(\"/\", resourceRoot, INPUT_ROW_PARSER_SPEC_DIR)));\n+      } else if (INPUT_FORMAT_SPEC_DIR.equals(eachSpec)) {\n+        map.put(INPUT_FORMAT, getOnlyResourcePath(String.join(\"/\", resourceRoot, INPUT_FORMAT_SPEC_DIR)));\n+      }\n     }\n-    finally {\n-      doMethodTeardown(generatedTestConfig, streamEventWriter);\n+    if (!map.containsKey(SERIALIZER_SPEC_DIR)) {\n+      throw new IAE(\"Failed to find serializer spec under [%s]. Found resources are %s\", resourceRoot, map);\n     }\n+    if (map.size() == 1) {\n+      throw new IAE(\"Failed to find input format or parser spec under [%s]. Found resources are %s\", resourceRoot, map);\n+    }\n+    return map;\n+  }\n+\n+  private Closeable createResourceCloser(GeneratedTestConfig generatedTestConfig)\n+  {\n+    return Closer.create().register(() -> doMethodTeardown(generatedTestConfig));\n   }\n \n-  protected void doTestIndexDataWithInputFormatStableState() throws Exception\n+  protected void doTestIndexDataStableState(\n+      boolean transactionEnabled,\n+      String serializerPath,\n+      String parserType,\n+      String specPath\n+  ) throws Exception\n   {\n-    StreamEventWriter streamEventWriter = createStreamEventWriter(config);\n-    final GeneratedTestConfig generatedTestConfig = new GeneratedTestConfig();\n+    final EventSerializer serializer = jsonMapper.readValue(getResourceAsStream(serializerPath), EventSerializer.class);\n+    final StreamGenerator streamGenerator = new WikipediaStreamEventStreamGenerator(\n+        serializer,\n+        EVENTS_PER_SECOND,\n+        CYCLE_PADDING_MS\n+    );\n+    final GeneratedTestConfig generatedTestConfig = new GeneratedTestConfig(parserType, getResourceAsString(specPath));\n     try (\n-        final Closeable ignored1 = unloader(generatedTestConfig.getFullDatasourceName())\n+        final Closeable closer = createResourceCloser(generatedTestConfig);\n+        final StreamEventWriter streamEventWriter = createStreamEventWriter(config, transactionEnabled)\n     ) {\n-      final String taskSpec = generatedTestConfig.getStreamIngestionPropsTransform().apply(getResourceAsString(INDEXER_FILE_INPUT_FORMAT));\n+      final String taskSpec = generatedTestConfig.getStreamIngestionPropsTransform()\n+                                                 .apply(getResourceAsString(SUPERVISOR_SPEC_TEMPLATE_PATH));\n       LOG.info(\"supervisorSpec: [%s]\\n\", taskSpec);\n       // Start supervisor\n       generatedTestConfig.setSupervisorId(indexer.submitSupervisor(taskSpec));\n       LOG.info(\"Submitted supervisor\");\n       // Start data generator\n-      wikipediaStreamEventGenerator.run(generatedTestConfig.getStreamName(), streamEventWriter, TOTAL_NUMBER_OF_SECOND, FIRST_EVENT_TIME);\n+      streamGenerator.run(\n+          generatedTestConfig.getStreamName(),\n+          streamEventWriter,\n+          TOTAL_NUMBER_OF_SECOND,\n+          FIRST_EVENT_TIME\n+      );\n       verifyIngestedData(generatedTestConfig);\n     }\n-    finally {\n-      doMethodTeardown(generatedTestConfig, streamEventWriter);\n-    }\n   }\n \n-  void doTestIndexDataWithLosingCoordinator() throws Exception\n+  void doTestIndexDataWithLosingCoordinator(boolean transactionEnabled) throws Exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88601d89b9b63abad4a8555c1d4818feb2188e6a"}, "originalPosition": 212}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwMDYwNw==", "bodyText": "Good point. Can I do it in a follow-up PR with the change for README.md you commented below?", "url": "https://github.com/apache/druid/pull/9783#discussion_r417000607", "createdAt": "2020-04-29T00:18:11Z", "author": {"login": "jihoonson"}, "path": "integration-tests/src/test/java/org/apache/druid/tests/indexer/AbstractStreamIndexingTest.java", "diffHunk": "@@ -67,92 +92,147 @@\n   private IntegrationTestingConfig config;\n \n   private StreamAdminClient streamAdminClient;\n-  private WikipediaStreamEventStreamGenerator wikipediaStreamEventGenerator;\n \n   abstract StreamAdminClient createStreamAdminClient(IntegrationTestingConfig config) throws Exception;\n-  abstract StreamEventWriter createStreamEventWriter(IntegrationTestingConfig config) throws Exception;\n-  abstract Function<String, String> generateStreamIngestionPropsTransform(String streamName,\n-                                                                          String fullDatasourceName,\n-                                                                          IntegrationTestingConfig config);\n+\n+  abstract StreamEventWriter createStreamEventWriter(IntegrationTestingConfig config, boolean transactionEnabled)\n+      throws Exception;\n+\n+  abstract Function<String, String> generateStreamIngestionPropsTransform(\n+      String streamName,\n+      String fullDatasourceName,\n+      String parserType,\n+      String parserOrInputFormat,\n+      IntegrationTestingConfig config\n+  );\n+\n   abstract Function<String, String> generateStreamQueryPropsTransform(String streamName, String fullDatasourceName);\n+\n   public abstract String getTestNamePrefix();\n \n   protected void doBeforeClass() throws Exception\n   {\n     streamAdminClient = createStreamAdminClient(config);\n-    wikipediaStreamEventGenerator = new WikipediaStreamEventStreamGenerator(EVENTS_PER_SECOND, CYCLE_PADDING_MS);\n   }\n \n-  protected void doClassTeardown()\n+  private static String getOnlyResourcePath(String resourceRoot) throws IOException\n   {\n-    wikipediaStreamEventGenerator.shutdown();\n+    return String.join(\"/\", resourceRoot, Iterables.getOnlyElement(listResources(resourceRoot)));\n   }\n \n-  protected void doTestIndexDataWithLegacyParserStableState() throws Exception\n+  protected static List<String> listDataFormatResources() throws IOException\n   {\n-    StreamEventWriter streamEventWriter = createStreamEventWriter(config);\n-    final GeneratedTestConfig generatedTestConfig = new GeneratedTestConfig();\n-    try (\n-        final Closeable ignored1 = unloader(generatedTestConfig.getFullDatasourceName())\n-    ) {\n-      final String taskSpec = generatedTestConfig.getStreamIngestionPropsTransform().apply(getResourceAsString(INDEXER_FILE_LEGACY_PARSER));\n-      LOG.info(\"supervisorSpec: [%s]\\n\", taskSpec);\n-      // Start supervisor\n-      generatedTestConfig.setSupervisorId(indexer.submitSupervisor(taskSpec));\n-      LOG.info(\"Submitted supervisor\");\n-      // Start data generator\n-      wikipediaStreamEventGenerator.run(generatedTestConfig.getStreamName(), streamEventWriter, TOTAL_NUMBER_OF_SECOND, FIRST_EVENT_TIME);\n-      verifyIngestedData(generatedTestConfig);\n+    return listResources(DATA_RESOURCE_ROOT)\n+        .stream()\n+        .filter(resource -> !SUPERVISOR_SPEC_TEMPLATE_FILE.equals(resource))\n+        .collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * Returns a map of key to path to spec. The returned map contains at least 2 specs and one of them\n+   * should be a {@link #SERIALIZER} spec.\n+   */\n+  protected static Map<String, String> findTestSpecs(String resourceRoot) throws IOException\n+  {\n+    final List<String> specDirs = listResources(resourceRoot);\n+    final Map<String, String> map = new HashMap<>();\n+    for (String eachSpec : specDirs) {\n+      if (SERIALIZER_SPEC_DIR.equals(eachSpec)) {\n+        map.put(SERIALIZER, getOnlyResourcePath(String.join(\"/\", resourceRoot, SERIALIZER_SPEC_DIR)));\n+      } else if (INPUT_ROW_PARSER_SPEC_DIR.equals(eachSpec)) {\n+        map.put(INPUT_ROW_PARSER, getOnlyResourcePath(String.join(\"/\", resourceRoot, INPUT_ROW_PARSER_SPEC_DIR)));\n+      } else if (INPUT_FORMAT_SPEC_DIR.equals(eachSpec)) {\n+        map.put(INPUT_FORMAT, getOnlyResourcePath(String.join(\"/\", resourceRoot, INPUT_FORMAT_SPEC_DIR)));\n+      }\n     }\n-    finally {\n-      doMethodTeardown(generatedTestConfig, streamEventWriter);\n+    if (!map.containsKey(SERIALIZER_SPEC_DIR)) {\n+      throw new IAE(\"Failed to find serializer spec under [%s]. Found resources are %s\", resourceRoot, map);\n     }\n+    if (map.size() == 1) {\n+      throw new IAE(\"Failed to find input format or parser spec under [%s]. Found resources are %s\", resourceRoot, map);\n+    }\n+    return map;\n+  }\n+\n+  private Closeable createResourceCloser(GeneratedTestConfig generatedTestConfig)\n+  {\n+    return Closer.create().register(() -> doMethodTeardown(generatedTestConfig));\n   }\n \n-  protected void doTestIndexDataWithInputFormatStableState() throws Exception\n+  protected void doTestIndexDataStableState(\n+      boolean transactionEnabled,\n+      String serializerPath,\n+      String parserType,\n+      String specPath\n+  ) throws Exception\n   {\n-    StreamEventWriter streamEventWriter = createStreamEventWriter(config);\n-    final GeneratedTestConfig generatedTestConfig = new GeneratedTestConfig();\n+    final EventSerializer serializer = jsonMapper.readValue(getResourceAsStream(serializerPath), EventSerializer.class);\n+    final StreamGenerator streamGenerator = new WikipediaStreamEventStreamGenerator(\n+        serializer,\n+        EVENTS_PER_SECOND,\n+        CYCLE_PADDING_MS\n+    );\n+    final GeneratedTestConfig generatedTestConfig = new GeneratedTestConfig(parserType, getResourceAsString(specPath));\n     try (\n-        final Closeable ignored1 = unloader(generatedTestConfig.getFullDatasourceName())\n+        final Closeable closer = createResourceCloser(generatedTestConfig);\n+        final StreamEventWriter streamEventWriter = createStreamEventWriter(config, transactionEnabled)\n     ) {\n-      final String taskSpec = generatedTestConfig.getStreamIngestionPropsTransform().apply(getResourceAsString(INDEXER_FILE_INPUT_FORMAT));\n+      final String taskSpec = generatedTestConfig.getStreamIngestionPropsTransform()\n+                                                 .apply(getResourceAsString(SUPERVISOR_SPEC_TEMPLATE_PATH));\n       LOG.info(\"supervisorSpec: [%s]\\n\", taskSpec);\n       // Start supervisor\n       generatedTestConfig.setSupervisorId(indexer.submitSupervisor(taskSpec));\n       LOG.info(\"Submitted supervisor\");\n       // Start data generator\n-      wikipediaStreamEventGenerator.run(generatedTestConfig.getStreamName(), streamEventWriter, TOTAL_NUMBER_OF_SECOND, FIRST_EVENT_TIME);\n+      streamGenerator.run(\n+          generatedTestConfig.getStreamName(),\n+          streamEventWriter,\n+          TOTAL_NUMBER_OF_SECOND,\n+          FIRST_EVENT_TIME\n+      );\n       verifyIngestedData(generatedTestConfig);\n     }\n-    finally {\n-      doMethodTeardown(generatedTestConfig, streamEventWriter);\n-    }\n   }\n \n-  void doTestIndexDataWithLosingCoordinator() throws Exception\n+  void doTestIndexDataWithLosingCoordinator(boolean transactionEnabled) throws Exception", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk5NTgxMg=="}, "originalCommit": {"oid": "88601d89b9b63abad4a8555c1d4818feb2188e6a"}, "originalPosition": 212}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwNzI1Mw==", "bodyText": "Sure, if you do not need further change then feel free to deferred this for separate PR", "url": "https://github.com/apache/druid/pull/9783#discussion_r417007253", "createdAt": "2020-04-29T00:38:39Z", "author": {"login": "maytasm"}, "path": "integration-tests/src/test/java/org/apache/druid/tests/indexer/AbstractStreamIndexingTest.java", "diffHunk": "@@ -67,92 +92,147 @@\n   private IntegrationTestingConfig config;\n \n   private StreamAdminClient streamAdminClient;\n-  private WikipediaStreamEventStreamGenerator wikipediaStreamEventGenerator;\n \n   abstract StreamAdminClient createStreamAdminClient(IntegrationTestingConfig config) throws Exception;\n-  abstract StreamEventWriter createStreamEventWriter(IntegrationTestingConfig config) throws Exception;\n-  abstract Function<String, String> generateStreamIngestionPropsTransform(String streamName,\n-                                                                          String fullDatasourceName,\n-                                                                          IntegrationTestingConfig config);\n+\n+  abstract StreamEventWriter createStreamEventWriter(IntegrationTestingConfig config, boolean transactionEnabled)\n+      throws Exception;\n+\n+  abstract Function<String, String> generateStreamIngestionPropsTransform(\n+      String streamName,\n+      String fullDatasourceName,\n+      String parserType,\n+      String parserOrInputFormat,\n+      IntegrationTestingConfig config\n+  );\n+\n   abstract Function<String, String> generateStreamQueryPropsTransform(String streamName, String fullDatasourceName);\n+\n   public abstract String getTestNamePrefix();\n \n   protected void doBeforeClass() throws Exception\n   {\n     streamAdminClient = createStreamAdminClient(config);\n-    wikipediaStreamEventGenerator = new WikipediaStreamEventStreamGenerator(EVENTS_PER_SECOND, CYCLE_PADDING_MS);\n   }\n \n-  protected void doClassTeardown()\n+  private static String getOnlyResourcePath(String resourceRoot) throws IOException\n   {\n-    wikipediaStreamEventGenerator.shutdown();\n+    return String.join(\"/\", resourceRoot, Iterables.getOnlyElement(listResources(resourceRoot)));\n   }\n \n-  protected void doTestIndexDataWithLegacyParserStableState() throws Exception\n+  protected static List<String> listDataFormatResources() throws IOException\n   {\n-    StreamEventWriter streamEventWriter = createStreamEventWriter(config);\n-    final GeneratedTestConfig generatedTestConfig = new GeneratedTestConfig();\n-    try (\n-        final Closeable ignored1 = unloader(generatedTestConfig.getFullDatasourceName())\n-    ) {\n-      final String taskSpec = generatedTestConfig.getStreamIngestionPropsTransform().apply(getResourceAsString(INDEXER_FILE_LEGACY_PARSER));\n-      LOG.info(\"supervisorSpec: [%s]\\n\", taskSpec);\n-      // Start supervisor\n-      generatedTestConfig.setSupervisorId(indexer.submitSupervisor(taskSpec));\n-      LOG.info(\"Submitted supervisor\");\n-      // Start data generator\n-      wikipediaStreamEventGenerator.run(generatedTestConfig.getStreamName(), streamEventWriter, TOTAL_NUMBER_OF_SECOND, FIRST_EVENT_TIME);\n-      verifyIngestedData(generatedTestConfig);\n+    return listResources(DATA_RESOURCE_ROOT)\n+        .stream()\n+        .filter(resource -> !SUPERVISOR_SPEC_TEMPLATE_FILE.equals(resource))\n+        .collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * Returns a map of key to path to spec. The returned map contains at least 2 specs and one of them\n+   * should be a {@link #SERIALIZER} spec.\n+   */\n+  protected static Map<String, String> findTestSpecs(String resourceRoot) throws IOException\n+  {\n+    final List<String> specDirs = listResources(resourceRoot);\n+    final Map<String, String> map = new HashMap<>();\n+    for (String eachSpec : specDirs) {\n+      if (SERIALIZER_SPEC_DIR.equals(eachSpec)) {\n+        map.put(SERIALIZER, getOnlyResourcePath(String.join(\"/\", resourceRoot, SERIALIZER_SPEC_DIR)));\n+      } else if (INPUT_ROW_PARSER_SPEC_DIR.equals(eachSpec)) {\n+        map.put(INPUT_ROW_PARSER, getOnlyResourcePath(String.join(\"/\", resourceRoot, INPUT_ROW_PARSER_SPEC_DIR)));\n+      } else if (INPUT_FORMAT_SPEC_DIR.equals(eachSpec)) {\n+        map.put(INPUT_FORMAT, getOnlyResourcePath(String.join(\"/\", resourceRoot, INPUT_FORMAT_SPEC_DIR)));\n+      }\n     }\n-    finally {\n-      doMethodTeardown(generatedTestConfig, streamEventWriter);\n+    if (!map.containsKey(SERIALIZER_SPEC_DIR)) {\n+      throw new IAE(\"Failed to find serializer spec under [%s]. Found resources are %s\", resourceRoot, map);\n     }\n+    if (map.size() == 1) {\n+      throw new IAE(\"Failed to find input format or parser spec under [%s]. Found resources are %s\", resourceRoot, map);\n+    }\n+    return map;\n+  }\n+\n+  private Closeable createResourceCloser(GeneratedTestConfig generatedTestConfig)\n+  {\n+    return Closer.create().register(() -> doMethodTeardown(generatedTestConfig));\n   }\n \n-  protected void doTestIndexDataWithInputFormatStableState() throws Exception\n+  protected void doTestIndexDataStableState(\n+      boolean transactionEnabled,\n+      String serializerPath,\n+      String parserType,\n+      String specPath\n+  ) throws Exception\n   {\n-    StreamEventWriter streamEventWriter = createStreamEventWriter(config);\n-    final GeneratedTestConfig generatedTestConfig = new GeneratedTestConfig();\n+    final EventSerializer serializer = jsonMapper.readValue(getResourceAsStream(serializerPath), EventSerializer.class);\n+    final StreamGenerator streamGenerator = new WikipediaStreamEventStreamGenerator(\n+        serializer,\n+        EVENTS_PER_SECOND,\n+        CYCLE_PADDING_MS\n+    );\n+    final GeneratedTestConfig generatedTestConfig = new GeneratedTestConfig(parserType, getResourceAsString(specPath));\n     try (\n-        final Closeable ignored1 = unloader(generatedTestConfig.getFullDatasourceName())\n+        final Closeable closer = createResourceCloser(generatedTestConfig);\n+        final StreamEventWriter streamEventWriter = createStreamEventWriter(config, transactionEnabled)\n     ) {\n-      final String taskSpec = generatedTestConfig.getStreamIngestionPropsTransform().apply(getResourceAsString(INDEXER_FILE_INPUT_FORMAT));\n+      final String taskSpec = generatedTestConfig.getStreamIngestionPropsTransform()\n+                                                 .apply(getResourceAsString(SUPERVISOR_SPEC_TEMPLATE_PATH));\n       LOG.info(\"supervisorSpec: [%s]\\n\", taskSpec);\n       // Start supervisor\n       generatedTestConfig.setSupervisorId(indexer.submitSupervisor(taskSpec));\n       LOG.info(\"Submitted supervisor\");\n       // Start data generator\n-      wikipediaStreamEventGenerator.run(generatedTestConfig.getStreamName(), streamEventWriter, TOTAL_NUMBER_OF_SECOND, FIRST_EVENT_TIME);\n+      streamGenerator.run(\n+          generatedTestConfig.getStreamName(),\n+          streamEventWriter,\n+          TOTAL_NUMBER_OF_SECOND,\n+          FIRST_EVENT_TIME\n+      );\n       verifyIngestedData(generatedTestConfig);\n     }\n-    finally {\n-      doMethodTeardown(generatedTestConfig, streamEventWriter);\n-    }\n   }\n \n-  void doTestIndexDataWithLosingCoordinator() throws Exception\n+  void doTestIndexDataWithLosingCoordinator(boolean transactionEnabled) throws Exception", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk5NTgxMg=="}, "originalCommit": {"oid": "88601d89b9b63abad4a8555c1d4818feb2188e6a"}, "originalPosition": 212}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NDQ3NDIyOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/resources/testng.xml", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMDowOToxM1rOGNrh5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMTo0OToyOVrOGOSTlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk5Nzg2MQ==", "bodyText": "nit: might be helpful to add what this does / how to use in README.md", "url": "https://github.com/apache/druid/pull/9783#discussion_r416997861", "createdAt": "2020-04-29T00:09:13Z", "author": {"login": "maytasm"}, "path": "integration-tests/src/test/resources/testng.xml", "diffHunk": "@@ -20,7 +20,7 @@\n <!DOCTYPE suite SYSTEM \"http://testng.org/testng-1.0.dtd\" >\n \n \n-<suite name=\"IntegrationTestSuite\">\n+<suite name=\"IntegrationTestSuite\" data-provider-thread-count=\"2\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88601d89b9b63abad4a8555c1d4818feb2188e6a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUzODI2NA==", "bodyText": "It seems Travis didn't pick up my last commit due to an outage yesterday. I added some in README.\nFor thread-count and data-provider-thread-count, they are currently fixed for IntegrationTestSuite as far as I can tell (command line parameters will be overridden by suite parameters). I think it could be better to set them via command line parameters, so that we can have more control over them when we want to run some tests locally.", "url": "https://github.com/apache/druid/pull/9783#discussion_r417538264", "createdAt": "2020-04-29T18:53:05Z", "author": {"login": "jihoonson"}, "path": "integration-tests/src/test/resources/testng.xml", "diffHunk": "@@ -20,7 +20,7 @@\n <!DOCTYPE suite SYSTEM \"http://testng.org/testng-1.0.dtd\" >\n \n \n-<suite name=\"IntegrationTestSuite\">\n+<suite name=\"IntegrationTestSuite\" data-provider-thread-count=\"2\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk5Nzg2MQ=="}, "originalCommit": {"oid": "88601d89b9b63abad4a8555c1d4818feb2188e6a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYxMzE2Nw==", "bodyText": "My thought behind this comment was to mention @DataProvider(parallel = true) and how that can be uses/works with data-provider-thread-count. Regarding, the fixed value, we can also move it to command line.", "url": "https://github.com/apache/druid/pull/9783#discussion_r417613167", "createdAt": "2020-04-29T21:09:09Z", "author": {"login": "maytasm"}, "path": "integration-tests/src/test/resources/testng.xml", "diffHunk": "@@ -20,7 +20,7 @@\n <!DOCTYPE suite SYSTEM \"http://testng.org/testng-1.0.dtd\" >\n \n \n-<suite name=\"IntegrationTestSuite\">\n+<suite name=\"IntegrationTestSuite\" data-provider-thread-count=\"2\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk5Nzg2MQ=="}, "originalCommit": {"oid": "88601d89b9b63abad4a8555c1d4818feb2188e6a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYzMzE3NA==", "bodyText": "Oh hmm, should we document those by ourselves? TestNG has already a couple of documents in their official document, Javadoc, and testng.dtd and I thought they would be enough.", "url": "https://github.com/apache/druid/pull/9783#discussion_r417633174", "createdAt": "2020-04-29T21:49:29Z", "author": {"login": "jihoonson"}, "path": "integration-tests/src/test/resources/testng.xml", "diffHunk": "@@ -20,7 +20,7 @@\n <!DOCTYPE suite SYSTEM \"http://testng.org/testng-1.0.dtd\" >\n \n \n-<suite name=\"IntegrationTestSuite\">\n+<suite name=\"IntegrationTestSuite\" data-provider-thread-count=\"2\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk5Nzg2MQ=="}, "originalCommit": {"oid": "88601d89b9b63abad4a8555c1d4818feb2188e6a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTQ5NjU2OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/org/apache/druid/tests/indexer/AbstractStreamIndexingTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODoyNjoxOFrOGN0qTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMToyMjo0NlrOGORhCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0NzQ2OA==", "bodyText": "Just to clarify on my earlier point. This should not have boolean transactionEnabled as a parameter. transactionEnabled\nis a Kafka specific parameter and should be in the Kafka layer (AbstractKafkaIndexingServiceTest). This layer (AbstractStreamIndexingTest) should just get a eventWriter and write using the writer.", "url": "https://github.com/apache/druid/pull/9783#discussion_r417147468", "createdAt": "2020-04-29T08:26:18Z", "author": {"login": "maytasm"}, "path": "integration-tests/src/test/java/org/apache/druid/tests/indexer/AbstractStreamIndexingTest.java", "diffHunk": "@@ -67,92 +92,147 @@\n   private IntegrationTestingConfig config;\n \n   private StreamAdminClient streamAdminClient;\n-  private WikipediaStreamEventStreamGenerator wikipediaStreamEventGenerator;\n \n   abstract StreamAdminClient createStreamAdminClient(IntegrationTestingConfig config) throws Exception;\n-  abstract StreamEventWriter createStreamEventWriter(IntegrationTestingConfig config) throws Exception;\n-  abstract Function<String, String> generateStreamIngestionPropsTransform(String streamName,\n-                                                                          String fullDatasourceName,\n-                                                                          IntegrationTestingConfig config);\n+\n+  abstract StreamEventWriter createStreamEventWriter(IntegrationTestingConfig config, boolean transactionEnabled)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88601d89b9b63abad4a8555c1d4818feb2188e6a"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU0NTU2NQ==", "bodyText": "Hmm, looking at again, I'm not sure how this can be implemented. Even though only KafkaEventWriter needs transactionEnabled, createStreamEventWriter() is called in AbstractStreamIndexingTest which is a super class of both AbstractKafkaIndexingServiceTest and AbstractKinesisIndexingServiceTest. That means, AbstractStreamIndexingTest needs to know about transactionEnabled parameter when it calls createStreamEventWriter(). Before this PR, you added isKafkaWriterTransactionalEnabled() to AbstractKafkaIndexingServiceTest, but this seems working only when all child classes of AbstractKafkaIndexingServiceTest run with only either transaction enabled or disabled which is not true in ITKafkaIndexingServiceDataFormatTest anymore. I prefer to parameterize this class to run with different transaction mode since it's better for code maintenance (we don't have to keep two separate test classes for each mode in sync).\nA simple workaround I can come up with is adding a javadoc for this method explaining transactionEnabled parameter works for only Kafka. I assume this is ok since the StreamEventWriter interface has methods isTransactionEnabled, initTransaction, and commitTransaction which are implemented only for Kafka properly.", "url": "https://github.com/apache/druid/pull/9783#discussion_r417545565", "createdAt": "2020-04-29T19:05:42Z", "author": {"login": "jihoonson"}, "path": "integration-tests/src/test/java/org/apache/druid/tests/indexer/AbstractStreamIndexingTest.java", "diffHunk": "@@ -67,92 +92,147 @@\n   private IntegrationTestingConfig config;\n \n   private StreamAdminClient streamAdminClient;\n-  private WikipediaStreamEventStreamGenerator wikipediaStreamEventGenerator;\n \n   abstract StreamAdminClient createStreamAdminClient(IntegrationTestingConfig config) throws Exception;\n-  abstract StreamEventWriter createStreamEventWriter(IntegrationTestingConfig config) throws Exception;\n-  abstract Function<String, String> generateStreamIngestionPropsTransform(String streamName,\n-                                                                          String fullDatasourceName,\n-                                                                          IntegrationTestingConfig config);\n+\n+  abstract StreamEventWriter createStreamEventWriter(IntegrationTestingConfig config, boolean transactionEnabled)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0NzQ2OA=="}, "originalCommit": {"oid": "88601d89b9b63abad4a8555c1d4818feb2188e6a"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYwODE0Nw==", "bodyText": "hmm. I see. We can keep it this way then. My concern is that in Kinesis test class we are passing arbitrary meaningless true/false which does not do anything and might be misleading. I think Javadoc on the Kinesis test classes (ITKinesisIndexingServiceSerializedTest, etc) will definitely help. Another idea is to make boolean into Boolean and have the Kinesis test classes pass null instead of true/false to be more explicit that this transactionEnabled flag does not apply to Kinesis.", "url": "https://github.com/apache/druid/pull/9783#discussion_r417608147", "createdAt": "2020-04-29T20:59:49Z", "author": {"login": "maytasm"}, "path": "integration-tests/src/test/java/org/apache/druid/tests/indexer/AbstractStreamIndexingTest.java", "diffHunk": "@@ -67,92 +92,147 @@\n   private IntegrationTestingConfig config;\n \n   private StreamAdminClient streamAdminClient;\n-  private WikipediaStreamEventStreamGenerator wikipediaStreamEventGenerator;\n \n   abstract StreamAdminClient createStreamAdminClient(IntegrationTestingConfig config) throws Exception;\n-  abstract StreamEventWriter createStreamEventWriter(IntegrationTestingConfig config) throws Exception;\n-  abstract Function<String, String> generateStreamIngestionPropsTransform(String streamName,\n-                                                                          String fullDatasourceName,\n-                                                                          IntegrationTestingConfig config);\n+\n+  abstract StreamEventWriter createStreamEventWriter(IntegrationTestingConfig config, boolean transactionEnabled)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0NzQ2OA=="}, "originalCommit": {"oid": "88601d89b9b63abad4a8555c1d4818feb2188e6a"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYyMDIzMw==", "bodyText": "Good idea. Raised #9795.", "url": "https://github.com/apache/druid/pull/9783#discussion_r417620233", "createdAt": "2020-04-29T21:22:46Z", "author": {"login": "jihoonson"}, "path": "integration-tests/src/test/java/org/apache/druid/tests/indexer/AbstractStreamIndexingTest.java", "diffHunk": "@@ -67,92 +92,147 @@\n   private IntegrationTestingConfig config;\n \n   private StreamAdminClient streamAdminClient;\n-  private WikipediaStreamEventStreamGenerator wikipediaStreamEventGenerator;\n \n   abstract StreamAdminClient createStreamAdminClient(IntegrationTestingConfig config) throws Exception;\n-  abstract StreamEventWriter createStreamEventWriter(IntegrationTestingConfig config) throws Exception;\n-  abstract Function<String, String> generateStreamIngestionPropsTransform(String streamName,\n-                                                                          String fullDatasourceName,\n-                                                                          IntegrationTestingConfig config);\n+\n+  abstract StreamEventWriter createStreamEventWriter(IntegrationTestingConfig config, boolean transactionEnabled)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0NzQ2OA=="}, "originalCommit": {"oid": "88601d89b9b63abad4a8555c1d4818feb2188e6a"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2403, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}