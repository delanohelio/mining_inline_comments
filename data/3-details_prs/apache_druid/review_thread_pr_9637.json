{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMTAwMjMy", "number": 9637, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMTowODowOFrODw3JJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjoyMzoyN1rODw4Cvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTYxNzAwOnYy", "diffSide": "RIGHT", "path": "docs/development/extensions-core/druid-pac4j.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMTowODowOFrOGEF9aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjoxNToyNFrOGEHM2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0NTEzMQ==", "bodyText": "I think reusing simple-client-sslcontext is good for now since the client is the same entity (a Druid server); are there any potential cases where you'd want to use a different truststore or keystore when talking to the auth server here vs. another Druid server?", "url": "https://github.com/apache/druid/pull/9637#discussion_r406945131", "createdAt": "2020-04-10T21:08:08Z", "author": {"login": "jon-wei"}, "path": "docs/development/extensions-core/druid-pac4j.md", "diffHunk": "@@ -38,8 +38,9 @@ druid.auth.authenticator.pac4j.type=pac4j\n ### Properties\n |Property|Description|Default|required|\n |--------|---------------|-----------|-------|--------|\n+|`druid.auth.pac4j.cookiePassphrase`|passphrase for encrypting the cookies used to manage authentication session with browser. It can be provided as plaintext string or The [Password Provider](../../operations/password-provider.md).|none|Yes|\n+|`druid.auth.pac4j.readTimeout`|Socket connect and read timeout duration used when communicating with authentication server|PT5S|No|\n+|`druid.auth.pac4j.enableCustomSslContext`|Whether to use custom SSLContext setup via [simple-client-sslcontext](simple-client-sslcontext.md) extension which must be added to extensions list when this property is set to true.|false|No|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec751e20ca9befd5ddd6f330207725023ccdf8d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NTQ2NQ==", "bodyText": "thanks for looking, valid question.\nI chose to go this route instead of adding separate config for a brand new ssl context to reduce amount of configuration user has. That said, I see that ldap doesn't use druid's common ssl context but builds one separately. I haven't personally seen the use cases  for this separation yet but I am not a security expert and could be wrong :)\nIf we come across such use case, then I think we should add support for another SSLContext inside druid core code  .. one  for talking to external auth services (oauth server, ldap  server etc) so  that we don't repeat this thing for all auth extensions that happen to talk to external services.", "url": "https://github.com/apache/druid/pull/9637#discussion_r406965465", "createdAt": "2020-04-10T22:15:24Z", "author": {"login": "himanshug"}, "path": "docs/development/extensions-core/druid-pac4j.md", "diffHunk": "@@ -38,8 +38,9 @@ druid.auth.authenticator.pac4j.type=pac4j\n ### Properties\n |Property|Description|Default|required|\n |--------|---------------|-----------|-------|--------|\n+|`druid.auth.pac4j.cookiePassphrase`|passphrase for encrypting the cookies used to manage authentication session with browser. It can be provided as plaintext string or The [Password Provider](../../operations/password-provider.md).|none|Yes|\n+|`druid.auth.pac4j.readTimeout`|Socket connect and read timeout duration used when communicating with authentication server|PT5S|No|\n+|`druid.auth.pac4j.enableCustomSslContext`|Whether to use custom SSLContext setup via [simple-client-sslcontext](simple-client-sslcontext.md) extension which must be added to extensions list when this property is set to true.|false|No|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0NTEzMQ=="}, "originalCommit": {"oid": "fec751e20ca9befd5ddd6f330207725023ccdf8d"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTc2NDQ3OnYy", "diffSide": "RIGHT", "path": "extensions-core/druid-pac4j/src/main/java/org/apache/druid/security/pac4j/CustomSSLResourceRetriever.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjoyMzoyN1rOGEHUaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjozOTozN1rOGEHj9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NzQwMw==", "bodyText": "I think the original class in the comment should be com.nimbusds.jose.util.DefaultResourceRetriever.", "url": "https://github.com/apache/druid/pull/9637#discussion_r406967403", "createdAt": "2020-04-10T22:23:27Z", "author": {"login": "jon-wei"}, "path": "extensions-core/druid-pac4j/src/main/java/org/apache/druid/security/pac4j/CustomSSLResourceRetriever.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.security.pac4j;\n+\n+\n+import com.google.common.primitives.Ints;\n+import com.nimbusds.jose.util.DefaultResourceRetriever;\n+\n+import javax.net.ssl.HttpsURLConnection;\n+import javax.net.ssl.SSLSocketFactory;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+\n+\n+/**\n+ * This class exists only to enable use of custom SSLSocketFactory on top of builtin class. This could be removed\n+ * when same functionality has been added to original class com.nimbusds.jose.util.CustomSSLResourceRetriever.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec751e20ca9befd5ddd6f330207725023ccdf8d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk3MTM4Mw==", "bodyText": "duh! :)\nInitially CustomSSLResourceRetriever was named DefaultResourceRetriever ... findbugs did  not like that I was overriding a class of same name, so I did a \"Refactor  -> Rename\"  in IDE which, inadvertently, changed that in comment too.\nupdated.", "url": "https://github.com/apache/druid/pull/9637#discussion_r406971383", "createdAt": "2020-04-10T22:39:37Z", "author": {"login": "himanshug"}, "path": "extensions-core/druid-pac4j/src/main/java/org/apache/druid/security/pac4j/CustomSSLResourceRetriever.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.security.pac4j;\n+\n+\n+import com.google.common.primitives.Ints;\n+import com.nimbusds.jose.util.DefaultResourceRetriever;\n+\n+import javax.net.ssl.HttpsURLConnection;\n+import javax.net.ssl.SSLSocketFactory;\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+\n+\n+/**\n+ * This class exists only to enable use of custom SSLSocketFactory on top of builtin class. This could be removed\n+ * when same functionality has been added to original class com.nimbusds.jose.util.CustomSSLResourceRetriever.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2NzQwMw=="}, "originalCommit": {"oid": "fec751e20ca9befd5ddd6f330207725023ccdf8d"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2506, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}