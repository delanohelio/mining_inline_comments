{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NDUwOTQ5", "number": 9982, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNToyNzowMlrOEDJW3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODozMToxMFrOEEAW7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzM0NDk1OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/ReferenceCountedObject.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwNToyNzowMlrOGgB_EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNDowNjoyOFrOGg4C2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0MDE0NQ==", "bodyText": "I think Closer should be Closeable here", "url": "https://github.com/apache/druid/pull/9982#discussion_r436240145", "createdAt": "2020-06-06T05:27:02Z", "author": {"login": "jon-wei"}, "path": "processing/src/main/java/org/apache/druid/segment/ReferenceCountedObject.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment;\n+\n+import org.apache.druid.java.util.common.io.Closer;\n+\n+import java.io.Closeable;\n+import java.util.Optional;\n+\n+/**\n+ * Interface for an object that may have a reference acquired in the form of a {@link Closeable}. This is intended to be\n+ * used with an implementation of {@link ReferenceCountingCloseableObject}, or anything else that wishes to provide\n+ * a method to account for the acquire and release of a reference to the object.\n+ */\n+public interface ReferenceCountedObject\n+{\n+  /**\n+   * This method is expected to increment a reference count and provide a {@link Closer} that decrements the reference", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c32c2c27aa546f1e3170c9f88f01b1094d86fd76"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyNTg1MA==", "bodyText": "Oops, thanks, was previously using Closer but changed and didn't fixup javadoc", "url": "https://github.com/apache/druid/pull/9982#discussion_r437125850", "createdAt": "2020-06-09T04:06:28Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/ReferenceCountedObject.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment;\n+\n+import org.apache.druid.java.util.common.io.Closer;\n+\n+import java.io.Closeable;\n+import java.util.Optional;\n+\n+/**\n+ * Interface for an object that may have a reference acquired in the form of a {@link Closeable}. This is intended to be\n+ * used with an implementation of {@link ReferenceCountingCloseableObject}, or anything else that wishes to provide\n+ * a method to account for the acquire and release of a reference to the object.\n+ */\n+public interface ReferenceCountedObject\n+{\n+  /**\n+   * This method is expected to increment a reference count and provide a {@link Closer} that decrements the reference", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI0MDE0NQ=="}, "originalCommit": {"oid": "c32c2c27aa546f1e3170c9f88f01b1094d86fd76"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjIwOTQ1OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/ReferenceCountingCloseableObject.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzo0OToyNVrOGhVrfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMjoyMjoxNFrOGhec7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxMTM4OA==", "bodyText": "nit: it's emitting nothing and can be a Logger.", "url": "https://github.com/apache/druid/pull/9982#discussion_r437611388", "createdAt": "2020-06-09T17:49:25Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/segment/ReferenceCountingCloseableObject.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment;\n+\n+import org.apache.druid.java.util.common.io.Closer;\n+import org.apache.druid.java.util.emitter.EmittingLogger;\n+\n+import java.io.Closeable;\n+import java.util.Optional;\n+import java.util.concurrent.Phaser;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * ReferenceCountingCloseableObject implements something like automatic reference count-based resource management,\n+ * backed by a {@link Phaser}.\n+ *\n+ * ReferenceCountingCloseableObject allows consumers to call {@link #close()} before some other \"users\", which called\n+ * {@link #increment()} or {@link #incrementReferenceAndDecrementOnceCloseable()}, but have not called\n+ * {@link #decrement()} yet or the closer for {@link #incrementReferenceAndDecrementOnceCloseable()}, and the wrapped\n+ * object won't be actually closed until that all references are released.\n+ */\n+public abstract class ReferenceCountingCloseableObject<BaseObject extends Closeable> implements Closeable\n+{\n+  private static final EmittingLogger log = new EmittingLogger(ReferenceCountingCloseableObject.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fd013520210287d8db2b56a7f1e65d62121a094"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1NTExNw==", "bodyText": "Ah, I just copied this from ReferenceCountingSegment, changed.", "url": "https://github.com/apache/druid/pull/9982#discussion_r437755117", "createdAt": "2020-06-09T22:22:14Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/ReferenceCountingCloseableObject.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment;\n+\n+import org.apache.druid.java.util.common.io.Closer;\n+import org.apache.druid.java.util.emitter.EmittingLogger;\n+\n+import java.io.Closeable;\n+import java.util.Optional;\n+import java.util.concurrent.Phaser;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * ReferenceCountingCloseableObject implements something like automatic reference count-based resource management,\n+ * backed by a {@link Phaser}.\n+ *\n+ * ReferenceCountingCloseableObject allows consumers to call {@link #close()} before some other \"users\", which called\n+ * {@link #increment()} or {@link #incrementReferenceAndDecrementOnceCloseable()}, but have not called\n+ * {@link #decrement()} yet or the closer for {@link #incrementReferenceAndDecrementOnceCloseable()}, and the wrapped\n+ * object won't be actually closed until that all references are released.\n+ */\n+public abstract class ReferenceCountingCloseableObject<BaseObject extends Closeable> implements Closeable\n+{\n+  private static final EmittingLogger log = new EmittingLogger(ReferenceCountingCloseableObject.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxMTM4OA=="}, "originalCommit": {"oid": "4fd013520210287d8db2b56a7f1e65d62121a094"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjI0MjYxOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/join/HashJoinSegment.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzo1ODo1MlrOGhWAyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMjoyMjoxOFrOGhedBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxNjg0MA==", "bodyText": "Hmm, should the contract of acquireReferences() clarify that this method should never throw an exception? Otherwise, we should make sure the closer will be safely closed on exceptions.", "url": "https://github.com/apache/druid/pull/9982#discussion_r437616840", "createdAt": "2020-06-09T17:58:52Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/segment/join/HashJoinSegment.java", "diffHunk": "@@ -98,4 +101,30 @@ public void close() throws IOException\n   {\n     baseSegment.close();\n   }\n+\n+  @Override\n+  public Optional<Closeable> acquireReferences()\n+  {\n+    Closer closer = Closer.create();\n+    boolean acquireFailed = baseSegment.acquireReferences().map(closeable -> {\n+      closer.register(closeable);\n+      return false;\n+    }).orElse(true);\n+\n+    for (JoinableClause claws : clauses) {\n+      if (acquireFailed) {\n+        break;\n+      }\n+      acquireFailed |= claws.acquireReferences().map(closeable -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fd013520210287d8db2b56a7f1e65d62121a094"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1NTE0Mg==", "bodyText": "modified javadoc to more clearly explain the contract", "url": "https://github.com/apache/druid/pull/9982#discussion_r437755142", "createdAt": "2020-06-09T22:22:18Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/join/HashJoinSegment.java", "diffHunk": "@@ -98,4 +101,30 @@ public void close() throws IOException\n   {\n     baseSegment.close();\n   }\n+\n+  @Override\n+  public Optional<Closeable> acquireReferences()\n+  {\n+    Closer closer = Closer.create();\n+    boolean acquireFailed = baseSegment.acquireReferences().map(closeable -> {\n+      closer.register(closeable);\n+      return false;\n+    }).orElse(true);\n+\n+    for (JoinableClause claws : clauses) {\n+      if (acquireFailed) {\n+        break;\n+      }\n+      acquireFailed |= claws.acquireReferences().map(closeable -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxNjg0MA=="}, "originalCommit": {"oid": "4fd013520210287d8db2b56a7f1e65d62121a094"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjI3NDUzOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/join/table/IndexedTable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODowODoxNFrOGhWVuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMjoyMjozN1rOGhedew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYyMjIwMA==", "bodyText": "nit: Javadoc?", "url": "https://github.com/apache/druid/pull/9982#discussion_r437622200", "createdAt": "2020-06-09T18:08:14Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/segment/join/table/IndexedTable.java", "diffHunk": "@@ -30,8 +31,11 @@\n  *\n  * The main user of this class is {@link IndexedTableJoinable}, and its main purpose is to participate in joins.\n  */\n-public interface IndexedTable\n+public interface IndexedTable extends ReferenceCountedObject\n {\n+  @SuppressWarnings(\"unused\")\n+  String version();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fd013520210287d8db2b56a7f1e65d62121a094"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1NTI1OQ==", "bodyText": "added", "url": "https://github.com/apache/druid/pull/9982#discussion_r437755259", "createdAt": "2020-06-09T22:22:37Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/join/table/IndexedTable.java", "diffHunk": "@@ -30,8 +31,11 @@\n  *\n  * The main user of this class is {@link IndexedTableJoinable}, and its main purpose is to participate in joins.\n  */\n-public interface IndexedTable\n+public interface IndexedTable extends ReferenceCountedObject\n {\n+  @SuppressWarnings(\"unused\")\n+  String version();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYyMjIwMA=="}, "originalCommit": {"oid": "4fd013520210287d8db2b56a7f1e65d62121a094"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjM1NjMxOnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/org/apache/druid/sql/calcite/rel/QueryMaker.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxODozMToxMFrOGhXJ9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMjoyNjozM1rOGhejCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYzNTU3NQ==", "bodyText": "Probably worth commenting why it should be lazy. Same for other orElseGet().", "url": "https://github.com/apache/druid/pull/9982#discussion_r437635575", "createdAt": "2020-06-09T18:31:10Z", "author": {"login": "jihoonson"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/rel/QueryMaker.java", "diffHunk": "@@ -126,7 +126,7 @@ public ObjectMapper getJsonMapper()\n     return DataSourceAnalysis.forDataSource(query.getDataSource())\n                              .getBaseQuerySegmentSpec()\n                              .map(QuerySegmentSpec::getIntervals)\n-                             .orElse(query.getIntervals());\n+                             .orElseGet(query::getIntervals);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fd013520210287d8db2b56a7f1e65d62121a094"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1NTgyMw==", "bodyText": "I'm not sure a comment is necessary... I think we should probably always use orElseGet if the 'else' isn't a primitive because Optional must eagerly evaluate whatever goes in there. This should maybe be done with some sort of static analysis, but I couldn't figure it out in like the 2 minutes I devoted to it so far.", "url": "https://github.com/apache/druid/pull/9982#discussion_r437755823", "createdAt": "2020-06-09T22:24:04Z", "author": {"login": "clintropolis"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/rel/QueryMaker.java", "diffHunk": "@@ -126,7 +126,7 @@ public ObjectMapper getJsonMapper()\n     return DataSourceAnalysis.forDataSource(query.getDataSource())\n                              .getBaseQuerySegmentSpec()\n                              .map(QuerySegmentSpec::getIntervals)\n-                             .orElse(query.getIntervals());\n+                             .orElseGet(query::getIntervals);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYzNTU3NQ=="}, "originalCommit": {"oid": "4fd013520210287d8db2b56a7f1e65d62121a094"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc1NjY4Mw==", "bodyText": "btw, I made the changes here after I made the mistake of not using orElseGet in ReferenceCountingSegmentQueryRunner and funny side-effects were happening causing integration tests to fail, so I looked for other usages of orElse and switched the ones that were not returning a primitive or static value to use orElseGet, of which there were only these 2 I think.", "url": "https://github.com/apache/druid/pull/9982#discussion_r437756683", "createdAt": "2020-06-09T22:26:33Z", "author": {"login": "clintropolis"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/rel/QueryMaker.java", "diffHunk": "@@ -126,7 +126,7 @@ public ObjectMapper getJsonMapper()\n     return DataSourceAnalysis.forDataSource(query.getDataSource())\n                              .getBaseQuerySegmentSpec()\n                              .map(QuerySegmentSpec::getIntervals)\n-                             .orElse(query.getIntervals());\n+                             .orElseGet(query::getIntervals);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYzNTU3NQ=="}, "originalCommit": {"oid": "4fd013520210287d8db2b56a7f1e65d62121a094"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2290, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}