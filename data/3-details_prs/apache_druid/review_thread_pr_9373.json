{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2Mjc3Njkw", "number": 9373, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzozODozNlrODhKDhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzo1NDowMVrODhKYaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDk0MzQyOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzozODozNlrOFrw5jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDoxNzowM1rOFr2JBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNDI1NQ==", "bodyText": "missing unit tests for this in HashJoinSegmentStorageAdapterTest", "url": "https://github.com/apache/druid/pull/9373#discussion_r381434255", "createdAt": "2020-02-19T17:38:36Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java", "diffHunk": "@@ -234,13 +235,17 @@ public Metadata getMetadata()\n       // Virtual columns cannot depend on each other, so we don't need to check transitive dependencies.\n       if (baseColumns.containsAll(virtualColumn.requiredColumns())) {\n         preJoinVirtualColumns.add(virtualColumn);\n+        // Since pre-join virtual columns can be computed using only base columns, we include them in the\n+        // base column set.\n+        baseColumns.add(virtualColumn.getOutputName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6263ded2278ca509ee9bd7dc4647239fd837d8a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUyMDEzNA==", "bodyText": "This case is covered by JoinFilterAnalyzerTest.test_filterPushDown_factToRegionToCountryLeftFilterOnChannelVirtualColumn", "url": "https://github.com/apache/druid/pull/9373#discussion_r381520134", "createdAt": "2020-02-19T20:17:03Z", "author": {"login": "jon-wei"}, "path": "processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java", "diffHunk": "@@ -234,13 +235,17 @@ public Metadata getMetadata()\n       // Virtual columns cannot depend on each other, so we don't need to check transitive dependencies.\n       if (baseColumns.containsAll(virtualColumn.requiredColumns())) {\n         preJoinVirtualColumns.add(virtualColumn);\n+        // Since pre-join virtual columns can be computed using only base columns, we include them in the\n+        // base column set.\n+        baseColumns.add(virtualColumn.getOutputName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNDI1NQ=="}, "originalCommit": {"oid": "c6263ded2278ca509ee9bd7dc4647239fd837d8a"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDk2NTc1OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzo0NDo1NlrOFrxH3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMToyMzoxMlrOFr4GZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNzkxOA==", "bodyText": "This is very similar to the code above in makeCursors(...) Perhaps move this into a utility function so they stay in sync. Or do you want this function to provide different functionality?", "url": "https://github.com/apache/druid/pull/9373#discussion_r381437918", "createdAt": "2020-02-19T17:44:56Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java", "diffHunk": "@@ -297,6 +302,22 @@ public boolean isEnableFilterPushDown()\n     return enableFilterPushDown;\n   }\n \n+  @VisibleForTesting\n+  public Set<String> getAdapterBaseColumnNamesWithVirtualColumns(VirtualColumns virtualColumns)\n+  {\n+    final Set<String> baseColumns = new HashSet<>();\n+    Iterables.addAll(baseColumns, baseAdapter.getAvailableDimensions());\n+    Iterables.addAll(baseColumns, baseAdapter.getAvailableMetrics());\n+\n+    for (VirtualColumn virtualColumn : virtualColumns.getVirtualColumns()) {\n+      if (baseColumns.containsAll(virtualColumn.requiredColumns())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6263ded2278ca509ee9bd7dc4647239fd837d8a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU1MjIzMA==", "bodyText": "I initially wanted it to provide different functionality (where the non-testing version also adds virtual columns to the prejoin/postjoin lists), but I collapsed them into one method", "url": "https://github.com/apache/druid/pull/9373#discussion_r381552230", "createdAt": "2020-02-19T21:23:12Z", "author": {"login": "jon-wei"}, "path": "processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java", "diffHunk": "@@ -297,6 +302,22 @@ public boolean isEnableFilterPushDown()\n     return enableFilterPushDown;\n   }\n \n+  @VisibleForTesting\n+  public Set<String> getAdapterBaseColumnNamesWithVirtualColumns(VirtualColumns virtualColumns)\n+  {\n+    final Set<String> baseColumns = new HashSet<>();\n+    Iterables.addAll(baseColumns, baseAdapter.getAvailableDimensions());\n+    Iterables.addAll(baseColumns, baseAdapter.getAvailableMetrics());\n+\n+    for (VirtualColumn virtualColumn : virtualColumns.getVirtualColumns()) {\n+      if (baseColumns.containsAll(virtualColumn.requiredColumns())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzNzkxOA=="}, "originalCommit": {"oid": "c6263ded2278ca509ee9bd7dc4647239fd837d8a"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDk3MzQ4OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzo0NzowN1rOFrxM2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMToyMzozNlrOFr4HOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzOTE5Mw==", "bodyText": "nit: public functions marked VisibleForTesting are hard to maintain, because people can accidentally call this function from another package and there's nothing that warns them they're doing something wrong.\nI also noticed this function is only called in a test, can we refactor this so that we don't need a public VisibleForTesting function", "url": "https://github.com/apache/druid/pull/9373#discussion_r381439193", "createdAt": "2020-02-19T17:47:07Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java", "diffHunk": "@@ -297,6 +302,22 @@ public boolean isEnableFilterPushDown()\n     return enableFilterPushDown;\n   }\n \n+  @VisibleForTesting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6263ded2278ca509ee9bd7dc4647239fd837d8a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU1MjQ0Mg==", "bodyText": "I collapsed this into a shared method with the block in makeCursors and removed VisibleForTesting", "url": "https://github.com/apache/druid/pull/9373#discussion_r381552442", "createdAt": "2020-02-19T21:23:36Z", "author": {"login": "jon-wei"}, "path": "processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java", "diffHunk": "@@ -297,6 +302,22 @@ public boolean isEnableFilterPushDown()\n     return enableFilterPushDown;\n   }\n \n+  @VisibleForTesting", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzOTE5Mw=="}, "originalCommit": {"oid": "c6263ded2278ca509ee9bd7dc4647239fd837d8a"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDk3NDg2OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/join/filter/JoinFilterAnalyzer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzo0NzoyOVrOFrxNtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzo0NzoyOVrOFrxNtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQzOTQxNA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/druid/pull/9373#discussion_r381439414", "createdAt": "2020-02-19T17:47:29Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/join/filter/JoinFilterAnalyzer.java", "diffHunk": "@@ -72,8 +72,21 @@\n   private static final String PUSH_DOWN_VIRTUAL_COLUMN_NAME_BASE = \"JOIN-FILTER-PUSHDOWN-VIRTUAL-COLUMN-\";\n   private static final ColumnSelectorFactory ALL_NULL_COLUMN_SELECTOR_FACTORY = new AllNullColumnSelectorFactory();\n \n+  /**\n+   * Analyze a filter and return a JoinFilterSplit indicating what parts of the filter should be applied pre-join\n+   * and post-join.\n+   *\n+   * @param hashJoinSegmentStorageAdapter The storage adapter that is being queried\n+   * @param baseColumnNames               Set of names of columns that belong to the base table,\n+   *                                      including pre-join virtual columns\n+   * @param originalFilter                Original filter from the query\n+   * @param enableFilterPushDown          Whether to enable filter push down\n+   * @return A JoinFilterSplit indicating what parts of the filter should be applied pre-join\n+   *         and post-join.\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6263ded2278ca509ee9bd7dc4647239fd837d8a"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDk4OTczOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzo1MjowMFrOFrxXZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMToyNDozM1rOFr4JDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ0MTg5Mg==", "bodyText": "what happens if one of the required columns is a virtual column?", "url": "https://github.com/apache/druid/pull/9373#discussion_r381441892", "createdAt": "2020-02-19T17:52:00Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java", "diffHunk": "@@ -234,13 +235,17 @@ public Metadata getMetadata()\n       // Virtual columns cannot depend on each other, so we don't need to check transitive dependencies.\n       if (baseColumns.containsAll(virtualColumn.requiredColumns())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6263ded2278ca509ee9bd7dc4647239fd837d8a"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU1MjkxMQ==", "bodyText": "Virtual columns currently can't use other virtual columns as input (they're each constructed independently from the base columns), if you tried I think it would just operate as if you referenced a non-existent column", "url": "https://github.com/apache/druid/pull/9373#discussion_r381552911", "createdAt": "2020-02-19T21:24:33Z", "author": {"login": "jon-wei"}, "path": "processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java", "diffHunk": "@@ -234,13 +235,17 @@ public Metadata getMetadata()\n       // Virtual columns cannot depend on each other, so we don't need to check transitive dependencies.\n       if (baseColumns.containsAll(virtualColumn.requiredColumns())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ0MTg5Mg=="}, "originalCommit": {"oid": "c6263ded2278ca509ee9bd7dc4647239fd837d8a"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDk5Njg5OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/join/filter/JoinFilterAnalyzer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzo1NDowMVrOFrxb_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzo1NDowMVrOFrxb_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ0MzA3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!requiredBindings.stream().allMatch(requiredBinding -> baseColumnNames.contains(requiredBinding))) {\n          \n          \n            \n                    if (!baseColumnNames.containsAll(requiredBindings)) {", "url": "https://github.com/apache/druid/pull/9373#discussion_r381443071", "createdAt": "2020-02-19T17:54:01Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/join/filter/JoinFilterAnalyzer.java", "diffHunk": "@@ -538,18 +562,18 @@ private static void getCorrelationForRHSColumn(\n         // We push down if the function only requires base table columns\n         Expr.BindingDetails bindingDetails = lhsExpr.analyzeInputs();\n         Set<String> requiredBindings = bindingDetails.getRequiredBindings();\n-        if (!requiredBindings.stream().allMatch(requiredBinding -> adapter.isBaseColumn(requiredBinding))) {\n+        if (!requiredBindings.stream().allMatch(requiredBinding -> baseColumnNames.contains(requiredBinding))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6263ded2278ca509ee9bd7dc4647239fd837d8a"}, "originalPosition": 228}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2771, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}