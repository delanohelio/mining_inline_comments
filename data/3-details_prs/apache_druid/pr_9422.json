{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNTY4NTQ0", "number": 9422, "title": "Handle unknown complex types", "bodyText": "Fixes #9421\nThis PR has:\n\n been self-reviewed.\n\n using the concurrency checklist (Remove this item if the PR doesn't have any relation to concurrency.)\n\n\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n been tested in a test Druid cluster.\n\nKey changed/added classes in this PR\n\nUnknownTypeComplexColumn.java", "createdAt": "2020-02-27T00:03:24Z", "url": "https://github.com/apache/druid/pull/9422", "merged": true, "mergeCommit": {"oid": "2c1b45842f1d402b22da44e8da1d53c41de96b89"}, "closed": true, "closedAt": "2020-06-30T21:06:18Z", "author": {"login": "samarthjain"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIVmDlgBqjMwNzY2MDAxNjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwcdQugFqTQ0MDM5NjUwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMjQ5OTc1", "url": "https://github.com/apache/druid/pull/9422#pullrequestreview-440249975", "createdAt": "2020-06-30T17:46:22Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c22f21419b591d534e04a1b625a8687560a38385", "author": {"user": {"login": "samarthjain", "name": "Samarth Jain"}}, "url": "https://github.com/apache/druid/commit/c22f21419b591d534e04a1b625a8687560a38385", "committedDate": "2020-06-30T18:03:44Z", "message": "Prevent unknown complex types from breaking DruidSchema refresh"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "c22f21419b591d534e04a1b625a8687560a38385", "author": {"user": {"login": "samarthjain", "name": "Samarth Jain"}}, "url": "https://github.com/apache/druid/commit/c22f21419b591d534e04a1b625a8687560a38385", "committedDate": "2020-06-30T18:03:44Z", "message": "Prevent unknown complex types from breaking DruidSchema refresh"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMzk1NzY3", "url": "https://github.com/apache/druid/pull/9422#pullrequestreview-440395767", "createdAt": "2020-06-30T21:22:32Z", "commit": {"oid": "c22f21419b591d534e04a1b625a8687560a38385"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMToyMjozMlrOGrO9Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMToyMjozMlrOGrO9Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4Njk2Ng==", "bodyText": "should this method and makeVectorObjectSelector maybe log.warn to provide evidence that this is happening? Or do you expect that would be too noisy?", "url": "https://github.com/apache/druid/pull/9422#discussion_r447986966", "createdAt": "2020-06-30T21:22:32Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/column/UnknownTypeComplexColumn.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.column;\n+\n+import org.apache.druid.segment.ColumnValueSelector;\n+import org.apache.druid.segment.NilColumnValueSelector;\n+import org.apache.druid.segment.data.ReadableOffset;\n+import org.apache.druid.segment.vector.NilVectorSelector;\n+import org.apache.druid.segment.vector.ReadableVectorOffset;\n+import org.apache.druid.segment.vector.VectorObjectSelector;\n+import org.apache.druid.segment.vector.VectorSizeInspector;\n+\n+import javax.annotation.Nullable;\n+\n+public class UnknownTypeComplexColumn implements ComplexColumn\n+{\n+  private static final UnknownTypeComplexColumn INSTANCE = new UnknownTypeComplexColumn();\n+\n+  public static UnknownTypeComplexColumn instance()\n+  {\n+    return INSTANCE;\n+  }\n+\n+  private static final NilVectorSelector NIL_VECTOR_SELECTOR_INSTANCE =\n+      NilVectorSelector.create(new VectorSizeInspector()\n+      {\n+        @Override\n+        public int getMaxVectorSize()\n+        {\n+          return 0;\n+        }\n+\n+        @Override\n+        public int getCurrentVectorSize()\n+        {\n+          return 0;\n+        }\n+      });\n+\n+  @Override\n+  public Class<?> getClazz()\n+  {\n+    return ComplexColumn.class;\n+  }\n+\n+  @Override\n+  public String getTypeName()\n+  {\n+    return \"UNKNOWN_COMPLEX_COLUMN_TYPE\";\n+  }\n+\n+  @Nullable\n+  @Override\n+  public Object getRowValue(int rowNum)\n+  {\n+    return null;\n+  }\n+\n+  @Override\n+  public int getLength()\n+  {\n+    return 0;\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+\n+  }\n+\n+  @Override\n+  public ColumnValueSelector<?> makeColumnValueSelector(ReadableOffset offset)\n+  {\n+    return NilColumnValueSelector.instance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c22f21419b591d534e04a1b625a8687560a38385"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMzk2NTA4", "url": "https://github.com/apache/druid/pull/9422#pullrequestreview-440396508", "createdAt": "2020-06-30T21:23:45Z", "commit": {"oid": "c22f21419b591d534e04a1b625a8687560a38385"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMToyMzo0NVrOGrO_aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMToyMzo0NVrOGrO_aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4NzU2MQ==", "bodyText": "I think this should I think be making a NilVectorSelector from the offset so that max vector size is set correctly", "url": "https://github.com/apache/druid/pull/9422#discussion_r447987561", "createdAt": "2020-06-30T21:23:45Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/column/UnknownTypeComplexColumn.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.column;\n+\n+import org.apache.druid.segment.ColumnValueSelector;\n+import org.apache.druid.segment.NilColumnValueSelector;\n+import org.apache.druid.segment.data.ReadableOffset;\n+import org.apache.druid.segment.vector.NilVectorSelector;\n+import org.apache.druid.segment.vector.ReadableVectorOffset;\n+import org.apache.druid.segment.vector.VectorObjectSelector;\n+import org.apache.druid.segment.vector.VectorSizeInspector;\n+\n+import javax.annotation.Nullable;\n+\n+public class UnknownTypeComplexColumn implements ComplexColumn\n+{\n+  private static final UnknownTypeComplexColumn INSTANCE = new UnknownTypeComplexColumn();\n+\n+  public static UnknownTypeComplexColumn instance()\n+  {\n+    return INSTANCE;\n+  }\n+\n+  private static final NilVectorSelector NIL_VECTOR_SELECTOR_INSTANCE =\n+      NilVectorSelector.create(new VectorSizeInspector()\n+      {\n+        @Override\n+        public int getMaxVectorSize()\n+        {\n+          return 0;\n+        }\n+\n+        @Override\n+        public int getCurrentVectorSize()\n+        {\n+          return 0;\n+        }\n+      });\n+\n+  @Override\n+  public Class<?> getClazz()\n+  {\n+    return ComplexColumn.class;\n+  }\n+\n+  @Override\n+  public String getTypeName()\n+  {\n+    return \"UNKNOWN_COMPLEX_COLUMN_TYPE\";\n+  }\n+\n+  @Nullable\n+  @Override\n+  public Object getRowValue(int rowNum)\n+  {\n+    return null;\n+  }\n+\n+  @Override\n+  public int getLength()\n+  {\n+    return 0;\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+\n+  }\n+\n+  @Override\n+  public ColumnValueSelector<?> makeColumnValueSelector(ReadableOffset offset)\n+  {\n+    return NilColumnValueSelector.instance();\n+  }\n+\n+  @Override\n+  public VectorObjectSelector makeVectorObjectSelector(ReadableVectorOffset offset)\n+  {\n+    return NIL_VECTOR_SELECTOR_INSTANCE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c22f21419b591d534e04a1b625a8687560a38385"}, "originalPosition": 97}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2956, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}