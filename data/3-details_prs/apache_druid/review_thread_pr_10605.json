{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3MzQwNTg3", "number": 10605, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwNzowNDo1MVrOFMaaCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxNzozMjoyOFrOFQ_PgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NTU5ODgyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/math/expr/Evals.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwNzowNDo1MVrOIQHx0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwODo0MDo0MFrOIQJ4Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc3NTU3MQ==", "bodyText": "Why add this instead of calling the thing in Double?", "url": "https://github.com/apache/druid/pull/10605#discussion_r553775571", "createdAt": "2021-01-08T07:04:51Z", "author": {"login": "gianm"}, "path": "core/src/main/java/org/apache/druid/math/expr/Evals.java", "diffHunk": "@@ -71,4 +71,14 @@ public static boolean asBoolean(@Nullable String x)\n   {\n     return !NullHandling.isNullOrEquivalent(x) && Boolean.parseBoolean(x);\n   }\n+\n+  public static long doubleToLongBits(double x)\n+  {\n+    return Double.doubleToLongBits(x);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b5269b3892105463d516855b535dc427adbc8d7"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzgxMDAwMw==", "bodyText": "Trying to remember.. I think i was just trying to be consistent with the other value conversion functions and put it here, but it probably could just call it directly as it seems unlike we would change the function", "url": "https://github.com/apache/druid/pull/10605#discussion_r553810003", "createdAt": "2021-01-08T08:40:40Z", "author": {"login": "clintropolis"}, "path": "core/src/main/java/org/apache/druid/math/expr/Evals.java", "diffHunk": "@@ -71,4 +71,14 @@ public static boolean asBoolean(@Nullable String x)\n   {\n     return !NullHandling.isNullOrEquivalent(x) && Boolean.parseBoolean(x);\n   }\n+\n+  public static long doubleToLongBits(double x)\n+  {\n+    return Double.doubleToLongBits(x);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc3NTU3MQ=="}, "originalCommit": {"oid": "1b5269b3892105463d516855b535dc427adbc8d7"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NTYwNjkyOnYy", "diffSide": "RIGHT", "path": "docs/misc/math-expr.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwNzowODozOFrOIQH2cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwODo0MjoxNFrOIQJ69g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc3Njc1Mg==", "bodyText": "Why convert doubles to their bit representations instead of casting them to longs? Casting to long would, I think, make more sense since we can think of it as an implicit cast of double-typed arguments to a function that only accepts longs.", "url": "https://github.com/apache/druid/pull/10605#discussion_r553776752", "createdAt": "2021-01-08T07:08:38Z", "author": {"login": "gianm"}, "path": "docs/misc/math-expr.md", "diffHunk": "@@ -119,6 +119,13 @@ See javadoc of java.lang.Math for detailed explanation for each function.\n |acos|acos(x) would return the arc cosine of x|\n |asin|asin(x) would return the arc sine of x|\n |atan|atan(x) would return the arc tangent of x|\n+|bitwiseAnd|bitwiseAnd(x,y) would return the result of x & y. Double values will be converted to their bit representation|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b5269b3892105463d516855b535dc427adbc8d7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzgxMDY3OA==", "bodyText": "thinking back, I think i originally did this behavior before I added bitwiseConvertDouble, so it was done as a way to do bitwise operations on double values. After I added the explicit function, it isn't really necessary anymore, so will revert to the behavior of casting and assuming long inputs.", "url": "https://github.com/apache/druid/pull/10605#discussion_r553810678", "createdAt": "2021-01-08T08:42:14Z", "author": {"login": "clintropolis"}, "path": "docs/misc/math-expr.md", "diffHunk": "@@ -119,6 +119,13 @@ See javadoc of java.lang.Math for detailed explanation for each function.\n |acos|acos(x) would return the arc cosine of x|\n |asin|asin(x) would return the arc sine of x|\n |atan|atan(x) would return the arc tangent of x|\n+|bitwiseAnd|bitwiseAnd(x,y) would return the result of x & y. Double values will be converted to their bit representation|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc3Njc1Mg=="}, "originalCommit": {"oid": "1b5269b3892105463d516855b535dc427adbc8d7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NTYxNjgyOnYy", "diffSide": "RIGHT", "path": "docs/misc/math-expr.md", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwNzoxNDowMFrOIQH8Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwNToxNToyNVrOISf3Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc3ODE3OA==", "bodyText": "This function is kind of weird because it doesn't have a fixpoint. I'd think that bitwiseConvertDouble(bitwiseConvertDouble(x)) would be identical to bitwiseConvertDouble(x). The lack of fixpoint makes it hard to reason about what the result of this function is going to be. Is there a specific reason it's designed this way? If not, I'd suggest splitting into two functions for each direction of the conversion.", "url": "https://github.com/apache/druid/pull/10605#discussion_r553778178", "createdAt": "2021-01-08T07:14:00Z", "author": {"login": "gianm"}, "path": "docs/misc/math-expr.md", "diffHunk": "@@ -119,6 +119,13 @@ See javadoc of java.lang.Math for detailed explanation for each function.\n |acos|acos(x) would return the arc cosine of x|\n |asin|asin(x) would return the arc sine of x|\n |atan|atan(x) would return the arc tangent of x|\n+|bitwiseAnd|bitwiseAnd(x,y) would return the result of x & y. Double values will be converted to their bit representation|\n+|bitwiseComplement|bitwiseComplement(x) would return the result of ~x. Double values will be converted to their bit representation|\n+|bitwiseConvertDouble|bitwiseConvertDouble(x) would convert the IEEE 754 floating-point \"double\" bits stored in a long into a double value if the input is a long, or the copy bits of a double value into a long if the input is a double.|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b5269b3892105463d516855b535dc427adbc8d7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzgxMDg1Nw==", "bodyText": "will split into bitwiseConvertDoubleToLongBits and bitwiseConvertLongBitsToDouble", "url": "https://github.com/apache/druid/pull/10605#discussion_r553810857", "createdAt": "2021-01-08T08:42:40Z", "author": {"login": "clintropolis"}, "path": "docs/misc/math-expr.md", "diffHunk": "@@ -119,6 +119,13 @@ See javadoc of java.lang.Math for detailed explanation for each function.\n |acos|acos(x) would return the arc cosine of x|\n |asin|asin(x) would return the arc sine of x|\n |atan|atan(x) would return the arc tangent of x|\n+|bitwiseAnd|bitwiseAnd(x,y) would return the result of x & y. Double values will be converted to their bit representation|\n+|bitwiseComplement|bitwiseComplement(x) would return the result of ~x. Double values will be converted to their bit representation|\n+|bitwiseConvertDouble|bitwiseConvertDouble(x) would convert the IEEE 754 floating-point \"double\" bits stored in a long into a double value if the input is a long, or the copy bits of a double value into a long if the input is a double.|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc3ODE3OA=="}, "originalCommit": {"oid": "1b5269b3892105463d516855b535dc427adbc8d7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDIwNjQ3Mw==", "bodyText": "I'd think that bitwiseConvertDouble(bitwiseConvertDouble(x)) would be identical to bitwiseConvertDouble(x).\n\nhmm, should the conversion just pass through if the type is already the output type or should it implicitly cast similar to the other bitwise functions?", "url": "https://github.com/apache/druid/pull/10605#discussion_r554206473", "createdAt": "2021-01-08T21:44:48Z", "author": {"login": "clintropolis"}, "path": "docs/misc/math-expr.md", "diffHunk": "@@ -119,6 +119,13 @@ See javadoc of java.lang.Math for detailed explanation for each function.\n |acos|acos(x) would return the arc cosine of x|\n |asin|asin(x) would return the arc sine of x|\n |atan|atan(x) would return the arc tangent of x|\n+|bitwiseAnd|bitwiseAnd(x,y) would return the result of x & y. Double values will be converted to their bit representation|\n+|bitwiseComplement|bitwiseComplement(x) would return the result of ~x. Double values will be converted to their bit representation|\n+|bitwiseConvertDouble|bitwiseConvertDouble(x) would convert the IEEE 754 floating-point \"double\" bits stored in a long into a double value if the input is a long, or the copy bits of a double value into a long if the input is a double.|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc3ODE3OA=="}, "originalCommit": {"oid": "1b5269b3892105463d516855b535dc427adbc8d7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDIyNDE4Mg==", "bodyText": "It should implicitly cast, I think.\nGenerally I think function behavior is easier to understand if the function implicitly casts its inputs to the type that it expects, vs. changing behavior based on its input type.", "url": "https://github.com/apache/druid/pull/10605#discussion_r554224182", "createdAt": "2021-01-08T22:18:14Z", "author": {"login": "gianm"}, "path": "docs/misc/math-expr.md", "diffHunk": "@@ -119,6 +119,13 @@ See javadoc of java.lang.Math for detailed explanation for each function.\n |acos|acos(x) would return the arc cosine of x|\n |asin|asin(x) would return the arc sine of x|\n |atan|atan(x) would return the arc tangent of x|\n+|bitwiseAnd|bitwiseAnd(x,y) would return the result of x & y. Double values will be converted to their bit representation|\n+|bitwiseComplement|bitwiseComplement(x) would return the result of ~x. Double values will be converted to their bit representation|\n+|bitwiseConvertDouble|bitwiseConvertDouble(x) would convert the IEEE 754 floating-point \"double\" bits stored in a long into a double value if the input is a long, or the copy bits of a double value into a long if the input is a double.|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc3ODE3OA=="}, "originalCommit": {"oid": "1b5269b3892105463d516855b535dc427adbc8d7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI2NzM1MQ==", "bodyText": "btw, testing bitwiseConvertLongBitsToDouble(bitwiseConvertLongBitsToDouble(..)) uncovered an issue with the parser when trying to parse the output of Expr.stringify (because unit tests cover this round trip scenario, and when flatten is true it turns it into a constant), where large doubles with exponents, e.g. 1E10 or whatever, could not be correctly parsed, so I expanded the grammar to allow it roughly according to these rules", "url": "https://github.com/apache/druid/pull/10605#discussion_r556267351", "createdAt": "2021-01-13T05:15:25Z", "author": {"login": "clintropolis"}, "path": "docs/misc/math-expr.md", "diffHunk": "@@ -119,6 +119,13 @@ See javadoc of java.lang.Math for detailed explanation for each function.\n |acos|acos(x) would return the arc cosine of x|\n |asin|asin(x) would return the arc sine of x|\n |atan|atan(x) would return the arc tangent of x|\n+|bitwiseAnd|bitwiseAnd(x,y) would return the result of x & y. Double values will be converted to their bit representation|\n+|bitwiseComplement|bitwiseComplement(x) would return the result of ~x. Double values will be converted to their bit representation|\n+|bitwiseConvertDouble|bitwiseConvertDouble(x) would convert the IEEE 754 floating-point \"double\" bits stored in a long into a double value if the input is a long, or the copy bits of a double value into a long if the input is a double.|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc3ODE3OA=="}, "originalCommit": {"oid": "1b5269b3892105463d516855b535dc427adbc8d7"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NTYyOTE2OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/druid/math/expr/FunctionTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwNzoyMDoxNlrOIQIDRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQyMjoxODo0NlrOIQjK6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc4MDAzNg==", "bodyText": "Please include (double, double) and (long, double) in addition to (double, long) args.", "url": "https://github.com/apache/druid/pull/10605#discussion_r553780036", "createdAt": "2021-01-08T07:20:16Z", "author": {"login": "gianm"}, "path": "core/src/test/java/org/apache/druid/math/expr/FunctionTest.java", "diffHunk": "@@ -519,6 +519,31 @@ public void testLeast()\n     assertExpr(\"least(1, null, 'A')\", \"1\");\n   }\n \n+  @Test\n+  public void testBitwise()\n+  {\n+    assertExpr(\"bitwiseAnd(3, 1)\", 1L);\n+    assertExpr(\"bitwiseAnd(2, 1)\", 0L);\n+    assertExpr(\"bitwiseOr(3, 1)\", 3L);\n+    assertExpr(\"bitwiseOr(2, 1)\", 3L);\n+    assertExpr(\"bitwiseXor(3, 1)\", 2L);\n+    assertExpr(\"bitwiseXor(2, 1)\", 3L);\n+    assertExpr(\"bitwiseShiftLeft(2, 1)\", 4L);\n+    assertExpr(\"bitwiseShiftRight(2, 1)\", 1L);\n+    assertExpr(\"bitwiseAnd(bitwiseComplement(1), 7)\", 6L);\n+    assertExpr(\"bitwiseAnd('2', '1')\", null);\n+    assertExpr(\"bitwiseAnd(2, '1')\", 0L);\n+\n+    assertExpr(\"bitwiseOr(2.345, 1)\", 4612462889363109315L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b5269b3892105463d516855b535dc427adbc8d7"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzgxMTcxNQ==", "bodyText": "more exhaustive coverage which should include these combinations is done in VectorExprSanityTest, where non-vectorized and vectorized evaluation results are asserted to be equal with a variety of combinations of inputs, but I can add explicit tests here since those don't necessarily confirm correctness, just self consistency between the two evaluation modes.", "url": "https://github.com/apache/druid/pull/10605#discussion_r553811715", "createdAt": "2021-01-08T08:44:35Z", "author": {"login": "clintropolis"}, "path": "core/src/test/java/org/apache/druid/math/expr/FunctionTest.java", "diffHunk": "@@ -519,6 +519,31 @@ public void testLeast()\n     assertExpr(\"least(1, null, 'A')\", \"1\");\n   }\n \n+  @Test\n+  public void testBitwise()\n+  {\n+    assertExpr(\"bitwiseAnd(3, 1)\", 1L);\n+    assertExpr(\"bitwiseAnd(2, 1)\", 0L);\n+    assertExpr(\"bitwiseOr(3, 1)\", 3L);\n+    assertExpr(\"bitwiseOr(2, 1)\", 3L);\n+    assertExpr(\"bitwiseXor(3, 1)\", 2L);\n+    assertExpr(\"bitwiseXor(2, 1)\", 3L);\n+    assertExpr(\"bitwiseShiftLeft(2, 1)\", 4L);\n+    assertExpr(\"bitwiseShiftRight(2, 1)\", 1L);\n+    assertExpr(\"bitwiseAnd(bitwiseComplement(1), 7)\", 6L);\n+    assertExpr(\"bitwiseAnd('2', '1')\", null);\n+    assertExpr(\"bitwiseAnd(2, '1')\", 0L);\n+\n+    assertExpr(\"bitwiseOr(2.345, 1)\", 4612462889363109315L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc4MDAzNg=="}, "originalCommit": {"oid": "1b5269b3892105463d516855b535dc427adbc8d7"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDIyNDM2MQ==", "bodyText": "I see, I missed that test. Sounds good.", "url": "https://github.com/apache/druid/pull/10605#discussion_r554224361", "createdAt": "2021-01-08T22:18:46Z", "author": {"login": "gianm"}, "path": "core/src/test/java/org/apache/druid/math/expr/FunctionTest.java", "diffHunk": "@@ -519,6 +519,31 @@ public void testLeast()\n     assertExpr(\"least(1, null, 'A')\", \"1\");\n   }\n \n+  @Test\n+  public void testBitwise()\n+  {\n+    assertExpr(\"bitwiseAnd(3, 1)\", 1L);\n+    assertExpr(\"bitwiseAnd(2, 1)\", 0L);\n+    assertExpr(\"bitwiseOr(3, 1)\", 3L);\n+    assertExpr(\"bitwiseOr(2, 1)\", 3L);\n+    assertExpr(\"bitwiseXor(3, 1)\", 2L);\n+    assertExpr(\"bitwiseXor(2, 1)\", 3L);\n+    assertExpr(\"bitwiseShiftLeft(2, 1)\", 4L);\n+    assertExpr(\"bitwiseShiftRight(2, 1)\", 1L);\n+    assertExpr(\"bitwiseAnd(bitwiseComplement(1), 7)\", 6L);\n+    assertExpr(\"bitwiseAnd('2', '1')\", null);\n+    assertExpr(\"bitwiseAnd(2, '1')\", 0L);\n+\n+    assertExpr(\"bitwiseOr(2.345, 1)\", 4612462889363109315L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc4MDAzNg=="}, "originalCommit": {"oid": "1b5269b3892105463d516855b535dc427adbc8d7"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMzY2NjA5OnYy", "diffSide": "RIGHT", "path": "core/src/main/antlr4/org/apache/druid/math/expr/antlr/Expr.g4", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwOToxMzo0MlrOIUPpeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMjo1MDowMFrOIW8wwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODA5ODgwOQ==", "bodyText": "This used to allow 10. as a double, but now it doesn't. I think we should add that back. (with tests \ud83d\ude42)", "url": "https://github.com/apache/druid/pull/10605#discussion_r558098809", "createdAt": "2021-01-15T09:13:42Z", "author": {"login": "gianm"}, "path": "core/src/main/antlr4/org/apache/druid/math/expr/antlr/Expr.g4", "diffHunk": "@@ -51,9 +51,12 @@ numericElement : (LONG | DOUBLE | NULL);\n literalElement : (STRING | LONG | DOUBLE | NULL);\n \n NULL : 'null';\n+LONG : [0-9]+;\n+EXP: [eE] [-]? LONG;\n+// DOUBLE provides partial support for java double format\n+// see: https://docs.oracle.com/javase/8/docs/api/java/lang/Double.html#valueOf-java.lang.String-\n+DOUBLE : 'NaN' | 'Infinity' | (LONG '.' LONG) | (LONG EXP) | (LONG '.' LONG EXP);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72a452a2a1884cd9cfad998a23723040b9eac70e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkzNTEwNA==", "bodyText": "good catch \ud83d\udc4d\nfixed, and added tests", "url": "https://github.com/apache/druid/pull/10605#discussion_r560935104", "createdAt": "2021-01-20T12:50:00Z", "author": {"login": "clintropolis"}, "path": "core/src/main/antlr4/org/apache/druid/math/expr/antlr/Expr.g4", "diffHunk": "@@ -51,9 +51,12 @@ numericElement : (LONG | DOUBLE | NULL);\n literalElement : (STRING | LONG | DOUBLE | NULL);\n \n NULL : 'null';\n+LONG : [0-9]+;\n+EXP: [eE] [-]? LONG;\n+// DOUBLE provides partial support for java double format\n+// see: https://docs.oracle.com/javase/8/docs/api/java/lang/Double.html#valueOf-java.lang.String-\n+DOUBLE : 'NaN' | 'Infinity' | (LONG '.' LONG) | (LONG EXP) | (LONG '.' LONG EXP);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODA5ODgwOQ=="}, "originalCommit": {"oid": "72a452a2a1884cd9cfad998a23723040b9eac70e"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMzY5NjI1OnYy", "diffSide": "RIGHT", "path": "docs/misc/math-expr.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwOToxNzoyNlrOIUP-Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMjo0OToxOVrOIW8vOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODEwNDEwNg==", "bodyText": "Are these docs for bitwiseConvertDoubleToLongBits correct? It doesn't sound like something that the function should do.", "url": "https://github.com/apache/druid/pull/10605#discussion_r558104106", "createdAt": "2021-01-15T09:17:26Z", "author": {"login": "gianm"}, "path": "docs/misc/math-expr.md", "diffHunk": "@@ -119,13 +119,14 @@ See javadoc of java.lang.Math for detailed explanation for each function.\n |acos|acos(x) would return the arc cosine of x|\n |asin|asin(x) would return the arc sine of x|\n |atan|atan(x) would return the arc tangent of x|\n-|bitwiseAnd|bitwiseAnd(x,y) would return the result of x & y. Double values will be converted to their bit representation|\n-|bitwiseComplement|bitwiseComplement(x) would return the result of ~x. Double values will be converted to their bit representation|\n-|bitwiseConvertDouble|bitwiseConvertDouble(x) would convert the IEEE 754 floating-point \"double\" bits stored in a long into a double value if the input is a long, or the copy bits of a double value into a long if the input is a double.|\n-|bitwiseOr|bitwiseOr(x,y) would return the result of x [PIPE] y. Double values will be converted to their bit representation |\n-|bitwiseShiftLeft|bitwiseShiftLeft(x,y) would return the result of x << y. Double values will be converted to their bit representation|\n-|bitwiseShiftRight|bitwiseShiftRight(x,y) would return the result of x >> y. Double values will be converted to their bit representation|\n-|bitwiseXor|bitwiseXor(x,y) would return the result of x ^ y. Double values will be converted to their bit representation|\n+|bitwiseAnd|bitwiseAnd(x,y) would return the result of x & y. Double values will be implicitly cast to longs, use `bitwiseConvertDoubleToLongBits` to perform bitwise operations directly with doubles|\n+|bitwiseComplement|bitwiseComplement(x) would return the result of ~x. Double values will be implicitly cast to longs, use `bitwiseConvertDoubleToLongBits` to perform bitwise operations directly with doubles|\n+|bitwiseConvertDoubleToLongBits|bitwiseConvertDoubleToLongBits(x) would convert the IEEE 754 floating-point \"double\" bits stored in a long into a double value if the input is a long, or implicitly cast the value to a long if the input is a double|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72a452a2a1884cd9cfad998a23723040b9eac70e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDkzNDcxMw==", "bodyText": "heh no, when I split the functions i deleted the wrong half of the description .. and then wrote the one i meant to delete again a different way for the function i split out \ud83d\ude43", "url": "https://github.com/apache/druid/pull/10605#discussion_r560934713", "createdAt": "2021-01-20T12:49:19Z", "author": {"login": "clintropolis"}, "path": "docs/misc/math-expr.md", "diffHunk": "@@ -119,13 +119,14 @@ See javadoc of java.lang.Math for detailed explanation for each function.\n |acos|acos(x) would return the arc cosine of x|\n |asin|asin(x) would return the arc sine of x|\n |atan|atan(x) would return the arc tangent of x|\n-|bitwiseAnd|bitwiseAnd(x,y) would return the result of x & y. Double values will be converted to their bit representation|\n-|bitwiseComplement|bitwiseComplement(x) would return the result of ~x. Double values will be converted to their bit representation|\n-|bitwiseConvertDouble|bitwiseConvertDouble(x) would convert the IEEE 754 floating-point \"double\" bits stored in a long into a double value if the input is a long, or the copy bits of a double value into a long if the input is a double.|\n-|bitwiseOr|bitwiseOr(x,y) would return the result of x [PIPE] y. Double values will be converted to their bit representation |\n-|bitwiseShiftLeft|bitwiseShiftLeft(x,y) would return the result of x << y. Double values will be converted to their bit representation|\n-|bitwiseShiftRight|bitwiseShiftRight(x,y) would return the result of x >> y. Double values will be converted to their bit representation|\n-|bitwiseXor|bitwiseXor(x,y) would return the result of x ^ y. Double values will be converted to their bit representation|\n+|bitwiseAnd|bitwiseAnd(x,y) would return the result of x & y. Double values will be implicitly cast to longs, use `bitwiseConvertDoubleToLongBits` to perform bitwise operations directly with doubles|\n+|bitwiseComplement|bitwiseComplement(x) would return the result of ~x. Double values will be implicitly cast to longs, use `bitwiseConvertDoubleToLongBits` to perform bitwise operations directly with doubles|\n+|bitwiseConvertDoubleToLongBits|bitwiseConvertDoubleToLongBits(x) would convert the IEEE 754 floating-point \"double\" bits stored in a long into a double value if the input is a long, or implicitly cast the value to a long if the input is a double|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODEwNDEwNg=="}, "originalCommit": {"oid": "72a452a2a1884cd9cfad998a23723040b9eac70e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMzU3Njk2OnYy", "diffSide": "RIGHT", "path": "docs/misc/math-expr.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxNzozMjoyOFrOIXJuNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxNzozMjoyOFrOIXJuNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTE0NzQ0NQ==", "bodyText": "This still doesn't seem right; surely, if the input is a long, the function will cast the value to a double and then convert those double bits back to a long. The description doesn't make it sound like that's what happens.", "url": "https://github.com/apache/druid/pull/10605#discussion_r561147445", "createdAt": "2021-01-20T17:32:28Z", "author": {"login": "gianm"}, "path": "docs/misc/math-expr.md", "diffHunk": "@@ -115,53 +115,53 @@ See javadoc of java.lang.Math for detailed explanation for each function.\n \n |name|description|\n |----|-----------|\n-|abs|abs(x) would return the absolute value of x|\n-|acos|acos(x) would return the arc cosine of x|\n-|asin|asin(x) would return the arc sine of x|\n-|atan|atan(x) would return the arc tangent of x|\n-|bitwiseAnd|bitwiseAnd(x,y) would return the result of x & y. Double values will be implicitly cast to longs, use `bitwiseConvertDoubleToLongBits` to perform bitwise operations directly with doubles|\n-|bitwiseComplement|bitwiseComplement(x) would return the result of ~x. Double values will be implicitly cast to longs, use `bitwiseConvertDoubleToLongBits` to perform bitwise operations directly with doubles|\n-|bitwiseConvertDoubleToLongBits|bitwiseConvertDoubleToLongBits(x) would convert the IEEE 754 floating-point \"double\" bits stored in a long into a double value if the input is a long, or implicitly cast the value to a long if the input is a double|\n-|bitwiseConvertLongBitsToDouble|bitwiseConvertLongBitsToDouble(x) would convert a long to the IEEE 754 floating-point \"double\" specified by the bits stored in the long. A double input will be implicitly cast to a long|\n-|bitwiseOr|bitwiseOr(x,y) would return the result of x [PIPE] y. Double values will be implicitly cast to longs, use `bitwiseConvertDoubleToLongBits` to perform bitwise operations directly with doubles|\n-|bitwiseShiftLeft|bitwiseShiftLeft(x,y) would return the result of x << y. Double values will be implicitly cast to longs, use `bitwiseConvertDoubleToLongBits` to perform bitwise operations directly with doubles|\n-|bitwiseShiftRight|bitwiseShiftRight(x,y) would return the result of x >> y. Double values will be implicitly cast to longs, use `bitwiseConvertDoubleToLongBits` to perform bitwise operations directly with doubles|\n-|bitwiseXor|bitwiseXor(x,y) would return the result of x ^ y. Double values will be implicitly cast to longs, use `bitwiseConvertDoubleToLongBits` to perform bitwise operations directly with doubles|\n-|atan2|atan2(y, x) would return the angle theta from the conversion of rectangular coordinates (x, y) to polar * coordinates (r, theta)|\n-|cbrt|cbrt(x) would return the cube root of x|\n-|ceil|ceil(x) would return the smallest (closest to negative infinity) double value that is greater than or equal to x and is equal to a mathematical integer|\n-|copysign|copysign(x) would return the first floating-point argument with the sign of the second floating-point argument|\n-|cos|cos(x) would return the trigonometric cosine of x|\n-|cosh|cosh(x) would return the hyperbolic cosine of x|\n-|cot|cot(x) would return the trigonometric cotangent of an angle x|\n+|abs|abs(x) returns the absolute value of x|\n+|acos|acos(x) returns the arc cosine of x|\n+|asin|asin(x) returns the arc sine of x|\n+|atan|atan(x) returns the arc tangent of x|\n+|bitwiseAnd|bitwiseAnd(x,y) returns the result of x & y. Double values will be implicitly cast to longs, use `bitwiseConvertDoubleToLongBits` to perform bitwise operations directly with doubles|\n+|bitwiseComplement|bitwiseComplement(x) returns the result of ~x. Double values will be implicitly cast to longs, use `bitwiseConvertDoubleToLongBits` to perform bitwise operations directly with doubles|\n+|bitwiseConvertDoubleToLongBits|bitwiseConvertDoubleToLongBits(x) will convert the IEEE 754 floating-point \"double\" bits of a double value into a long, or implicitly cast the value to a double if the input is a long.|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58fb61757ca7b24f5e09d61048771dc84545f473"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2872, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}