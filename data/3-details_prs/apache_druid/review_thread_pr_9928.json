{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMzk1MDUx", "number": 9928, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMTozMTo1MlrOD_57Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMTozMTo1MlrOD_57Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzM1ODk4OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/topn/PooledTopNAlgorithm.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMTozMTo1MlrOGa2V8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNDo0MzoyM1rOGa5OTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgwNjUxNQ==", "bodyText": "What line can throw an exception? Or is this more like to be safer?", "url": "https://github.com/apache/druid/pull/9928#discussion_r430806515", "createdAt": "2020-05-27T01:31:52Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/topn/PooledTopNAlgorithm.java", "diffHunk": "@@ -243,27 +240,38 @@ public PooledTopNParams makeInitParams(ColumnSelectorPlus selectorPlus, Cursor c\n       }\n     };\n \n-    final int numBytesToWorkWith = resultsBuf.remaining();\n-    final int[] aggregatorSizes = new int[query.getAggregatorSpecs().size()];\n-    int numBytesPerRecord = 0;\n+    final ResourceHolder<ByteBuffer> resultsBufHolder = bufferPool.take();\n \n-    for (int i = 0; i < query.getAggregatorSpecs().size(); ++i) {\n-      aggregatorSizes[i] = query.getAggregatorSpecs().get(i).getMaxIntermediateSizeWithNulls();\n-      numBytesPerRecord += aggregatorSizes[i];\n-    }\n+    try {\n+      final ByteBuffer resultsBuf = resultsBufHolder.get();\n+      resultsBuf.clear();\n+\n+      final int numBytesToWorkWith = resultsBuf.remaining();\n+      final int[] aggregatorSizes = new int[query.getAggregatorSpecs().size()];\n+      int numBytesPerRecord = 0;\n \n-    final int numValuesPerPass = numBytesPerRecord > 0 ? numBytesToWorkWith / numBytesPerRecord : cardinality;\n-\n-    return PooledTopNParams.builder()\n-                           .withSelectorPlus(selectorPlus)\n-                           .withCursor(cursor)\n-                           .withResultsBufHolder(resultsBufHolder)\n-                           .withResultsBuf(resultsBuf)\n-                           .withArrayProvider(arrayProvider)\n-                           .withNumBytesPerRecord(numBytesPerRecord)\n-                           .withNumValuesPerPass(numValuesPerPass)\n-                           .withAggregatorSizes(aggregatorSizes)\n-                           .build();\n+      for (int i = 0; i < query.getAggregatorSpecs().size(); ++i) {\n+        aggregatorSizes[i] = query.getAggregatorSpecs().get(i).getMaxIntermediateSizeWithNulls();\n+        numBytesPerRecord += aggregatorSizes[i];\n+      }\n+\n+      final int numValuesPerPass = numBytesPerRecord > 0 ? numBytesToWorkWith / numBytesPerRecord : cardinality;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d876365a8f83f3522eca6df3c97116fc9a1b168"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg1MzcwOQ==", "bodyText": "It's mostly for good practice (when you get a buffer, you better make sure you either free it or pass it along to someone that will free it). I don't think any lines here are very likely to throw exceptions. However, it is possible. I think the most likely is this one:\n         aggregatorSizes[i] = query.getAggregatorSpecs().get(i).getMaxIntermediateSizeWithNulls();\nAn aggregator could potentially throw an exception from that method for some reason (maybe illegal state, or something). It isn't in the control of the query engine. However, I don't have any examples of where this can actually happen.", "url": "https://github.com/apache/druid/pull/9928#discussion_r430853709", "createdAt": "2020-05-27T04:43:23Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/topn/PooledTopNAlgorithm.java", "diffHunk": "@@ -243,27 +240,38 @@ public PooledTopNParams makeInitParams(ColumnSelectorPlus selectorPlus, Cursor c\n       }\n     };\n \n-    final int numBytesToWorkWith = resultsBuf.remaining();\n-    final int[] aggregatorSizes = new int[query.getAggregatorSpecs().size()];\n-    int numBytesPerRecord = 0;\n+    final ResourceHolder<ByteBuffer> resultsBufHolder = bufferPool.take();\n \n-    for (int i = 0; i < query.getAggregatorSpecs().size(); ++i) {\n-      aggregatorSizes[i] = query.getAggregatorSpecs().get(i).getMaxIntermediateSizeWithNulls();\n-      numBytesPerRecord += aggregatorSizes[i];\n-    }\n+    try {\n+      final ByteBuffer resultsBuf = resultsBufHolder.get();\n+      resultsBuf.clear();\n+\n+      final int numBytesToWorkWith = resultsBuf.remaining();\n+      final int[] aggregatorSizes = new int[query.getAggregatorSpecs().size()];\n+      int numBytesPerRecord = 0;\n \n-    final int numValuesPerPass = numBytesPerRecord > 0 ? numBytesToWorkWith / numBytesPerRecord : cardinality;\n-\n-    return PooledTopNParams.builder()\n-                           .withSelectorPlus(selectorPlus)\n-                           .withCursor(cursor)\n-                           .withResultsBufHolder(resultsBufHolder)\n-                           .withResultsBuf(resultsBuf)\n-                           .withArrayProvider(arrayProvider)\n-                           .withNumBytesPerRecord(numBytesPerRecord)\n-                           .withNumValuesPerPass(numValuesPerPass)\n-                           .withAggregatorSizes(aggregatorSizes)\n-                           .build();\n+      for (int i = 0; i < query.getAggregatorSpecs().size(); ++i) {\n+        aggregatorSizes[i] = query.getAggregatorSpecs().get(i).getMaxIntermediateSizeWithNulls();\n+        numBytesPerRecord += aggregatorSizes[i];\n+      }\n+\n+      final int numValuesPerPass = numBytesPerRecord > 0 ? numBytesToWorkWith / numBytesPerRecord : cardinality;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgwNjUxNQ=="}, "originalCommit": {"oid": "5d876365a8f83f3522eca6df3c97116fc9a1b168"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2469, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}