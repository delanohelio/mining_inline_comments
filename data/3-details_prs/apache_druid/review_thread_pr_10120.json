{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyOTA3Mjkw", "number": 10120, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOToyNToxN1rOEKokxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOToyNToxN1rOEKokxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTg1OTg5OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/org/apache/druid/sql/calcite/planner/Rules.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOToyNToxN1rOGrylFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMDowMjoyOFrOGrzmsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3MDY0Nw==", "bodyText": "Is it possible to make this a system property? Having to restart the broker sounds like a lot less pain than having to make a new patch if this estimated HEP_DEFAULT_MATCH_LIMIT is incorrect for some edge case that we don't have tests for.", "url": "https://github.com/apache/druid/pull/10120#discussion_r448570647", "createdAt": "2020-07-01T19:25:17Z", "author": {"login": "suneet-s"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/planner/Rules.java", "diffHunk": "@@ -85,6 +88,13 @@\n   public static final int DRUID_CONVENTION_RULES = 0;\n   public static final int BINDABLE_CONVENTION_RULES = 1;\n \n+  // Due to Calcite bug (CALCITE-3845), ReduceExpressionsRule can considered expression which is the same as the\n+  // previous input expression as reduced. Basically, the expression is actually not reduced but is still considered as\n+  // reduced. Hence, this resulted in an infinite loop of Calcite trying to reducing the same expression over and over.\n+  // Calcite 1.23.0 fixes this issue by not consider expression as reduced if this case happens. However, while\n+  // we are still using Calcite 1.21.0, a workaround is to limit the number of pattern matches to avoid infinite loop.\n+  private static final int HEP_DEFAULT_MATCH_LIMIT = 1200;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2475d637e9a8e86fc000fe70c2196fe66c3804e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4NzQ0Mg==", "bodyText": "Added a override system property druid.sql.planner.hepMatchLimit that can override the default value of 1200\nThis system property is not documented though as it should not be modify by user without deep investigation into Calcite/HepProgram use by Druid. Assuming you are doing investigation on determining new value for matchLimit in Druid code, then you will see this system property anyway.", "url": "https://github.com/apache/druid/pull/10120#discussion_r448587442", "createdAt": "2020-07-01T20:02:28Z", "author": {"login": "maytasm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/planner/Rules.java", "diffHunk": "@@ -85,6 +88,13 @@\n   public static final int DRUID_CONVENTION_RULES = 0;\n   public static final int BINDABLE_CONVENTION_RULES = 1;\n \n+  // Due to Calcite bug (CALCITE-3845), ReduceExpressionsRule can considered expression which is the same as the\n+  // previous input expression as reduced. Basically, the expression is actually not reduced but is still considered as\n+  // reduced. Hence, this resulted in an infinite loop of Calcite trying to reducing the same expression over and over.\n+  // Calcite 1.23.0 fixes this issue by not consider expression as reduced if this case happens. However, while\n+  // we are still using Calcite 1.21.0, a workaround is to limit the number of pattern matches to avoid infinite loop.\n+  private static final int HEP_DEFAULT_MATCH_LIMIT = 1200;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3MDY0Nw=="}, "originalCommit": {"oid": "f2475d637e9a8e86fc000fe70c2196fe66c3804e"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2396, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}