{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMjI1MDgw", "number": 9533, "title": "Broker: Add ability to inline subqueries.", "bodyText": "Changes:\n\nClientQuerySegmentWalker: Add ability to inline queries. (This is the main change.)\nQuery: Add \"getSubQueryId\" and \"withSubQueryId\" methods.\nQueryMetrics: Add \"subQueryId\" dimension.\nServerConfig: Add new \"maxSubqueryRows\" parameter, which is used b y ClientQuerySegmentWalker to limit how many rows can be inlined per query.\nIndexedTableJoinMatcher: Allow creating keys on top of unknown types, by assuming they are strings. This is useful because not all types are known for fields in query results.\nInlineDataSource: Store RowSignature rather than component parts. Add more zealous \"equals\" and \"hashCode\" methods to ease testing.\nMoved QuerySegmentWalker test code from CalciteTests and SpecificSegmentsQueryWalker in druid-sql to QueryStackTests in druid-server. Use this to spin up a new ClientQuerySegmentWalkerTest.", "createdAt": "2020-03-18T05:24:42Z", "url": "https://github.com/apache/druid/pull/9533", "merged": true, "mergeCommit": {"oid": "1ef25a438fd9456f40f2adb36549eeaf86fef4f2"}, "closed": true, "closedAt": "2020-03-18T22:06:46Z", "author": {"login": "gianm"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOwYdhgH2gAyMzkwMjI1MDgwOjkxZWEyZTlhNzYwZTM3MjRhMDU4NGFlMTE3ZDkzNmMyMGE1MmVjMzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcO-vKZgFqTM3NzI2OTAxNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "91ea2e9a760e3724a0584ae117d936c20a52ec37", "author": {"user": {"login": "gianm", "name": "Gian Merlino"}}, "url": "https://github.com/apache/druid/commit/91ea2e9a760e3724a0584ae117d936c20a52ec37", "committedDate": "2020-03-18T05:23:11Z", "message": "Broker: Add ability to inline subqueries.\n\nThe main changes:\n\n- ClientQuerySegmentWalker: Add ability to inline queries.\n- Query: Add \"getSubQueryId\" and \"withSubQueryId\" methods.\n- QueryMetrics: Add \"subQueryId\" dimension.\n- ServerConfig: Add new \"maxSubqueryRows\" parameter, which is used by\n  ClientQuerySegmentWalker to limit how many rows can be inlined per\n  query.\n- IndexedTableJoinMatcher: Allow creating keys on top of unknown types,\n  by assuming they are strings. This is useful because not all types are\n  known for fields in query results.\n- InlineDataSource: Store RowSignature rather than component parts. Add\n  more zealous \"equals\" and \"hashCode\" methods to ease testing.\n- Moved QuerySegmentWalker test code from CalciteTests and\n  SpecificSegmentsQueryWalker in druid-sql to QueryStackTests in\n  druid-server. Use this to spin up a new ClientQuerySegmentWalkerTest."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f73c73aa1012c1f237d1e2e776e577e4e6c45d3", "author": {"user": {"login": "gianm", "name": "Gian Merlino"}}, "url": "https://github.com/apache/druid/commit/6f73c73aa1012c1f237d1e2e776e577e4e6c45d3", "committedDate": "2020-03-18T15:00:26Z", "message": "Adjustments from CI."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6461d97086ae68042d75cfc6d6ba7c916e90a8f", "author": {"user": {"login": "gianm", "name": "Gian Merlino"}}, "url": "https://github.com/apache/druid/commit/e6461d97086ae68042d75cfc6d6ba7c916e90a8f", "committedDate": "2020-03-18T16:32:28Z", "message": "Fix integration test."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NjgxNTIx", "url": "https://github.com/apache/druid/pull/9533#pullrequestreview-376681521", "createdAt": "2020-03-18T09:16:30Z", "commit": {"oid": "91ea2e9a760e3724a0584ae117d936c20a52ec37"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwOToxNjozMVrOF38IgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwOToxNjozMVrOF38IgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIwMTIxNg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/druid/pull/9533#discussion_r394201216", "createdAt": "2020-03-18T09:16:31Z", "author": {"login": "clintropolis"}, "path": "benchmarks/src/test/java/org/apache/druid/benchmark/query/SqlBenchmark.java", "diffHunk": "@@ -183,20 +183,19 @@ public void setup()\n     log.info(\"Starting benchmark setup using cacheDir[%s], rows[%,d].\", segmentGenerator.getCacheDir(), rowsPerSegment);\n     final QueryableIndex index = segmentGenerator.generate(dataSegment, schemaInfo, Granularities.NONE, rowsPerSegment);\n \n-    final Pair<QueryRunnerFactoryConglomerate, Closer> conglomerate = CalciteTests.createQueryRunnerFactoryConglomerate();\n-    closer.register(conglomerate.rhs);\n+    final QueryRunnerFactoryConglomerate conglomerate = QueryStackTests.createQueryRunnerFactoryConglomerate(closer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91ea2e9a760e3724a0584ae117d936c20a52ec37"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MTA1Mzkz", "url": "https://github.com/apache/druid/pull/9533#pullrequestreview-377105393", "createdAt": "2020-03-18T17:54:29Z", "commit": {"oid": "e6461d97086ae68042d75cfc6d6ba7c916e90a8f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzo1NDozMFrOF4Qk8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxNjowNVrOF4VSvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUzNjE3OQ==", "bodyText": "Please add @Nullable.", "url": "https://github.com/apache/druid/pull/9533#discussion_r394536179", "createdAt": "2020-03-18T17:54:30Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/InlineDataSource.java", "diffHunk": "@@ -104,13 +113,21 @@ public static InlineDataSource fromIterable(\n   @JsonProperty\n   public List<String> getColumnNames()\n   {\n-    return columnNames;\n+    return signature.getColumnNames();\n   }\n \n   @JsonProperty\n+  @JsonInclude(JsonInclude.Include.NON_NULL)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6461d97086ae68042d75cfc6d6ba7c916e90a8f"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU0NzY4NA==", "bodyText": "Maybe worth to add a javadoc explaining what is subQueryId and why we need it?", "url": "https://github.com/apache/druid/pull/9533#discussion_r394547684", "createdAt": "2020-03-18T18:13:51Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/Query.java", "diffHunk": "@@ -131,6 +131,11 @@\n   @Nullable\n   String getId();\n \n+  Query<T> withSubQueryId(String subQueryId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6461d97086ae68042d75cfc6d6ba7c916e90a8f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMzQzNg==", "bodyText": "Should this class be mentioned in ServerManager and CachingClusteredClient so that these classes are synced up?", "url": "https://github.com/apache/druid/pull/9533#discussion_r394613436", "createdAt": "2020-03-18T20:16:05Z", "author": {"login": "jihoonson"}, "path": "server/src/test/java/org/apache/druid/server/TestClusterQuerySegmentWalker.java", "diffHunk": "@@ -0,0 +1,295 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.server;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Lists;\n+import org.apache.druid.client.SegmentServerSelector;\n+import org.apache.druid.java.util.common.ISE;\n+import org.apache.druid.java.util.common.concurrent.Execs;\n+import org.apache.druid.java.util.common.guava.FunctionalIterable;\n+import org.apache.druid.java.util.common.guava.LazySequence;\n+import org.apache.druid.query.FinalizeResultsQueryRunner;\n+import org.apache.druid.query.NoopQueryRunner;\n+import org.apache.druid.query.Queries;\n+import org.apache.druid.query.Query;\n+import org.apache.druid.query.QueryContexts;\n+import org.apache.druid.query.QueryDataSource;\n+import org.apache.druid.query.QueryRunner;\n+import org.apache.druid.query.QueryRunnerFactory;\n+import org.apache.druid.query.QueryRunnerFactoryConglomerate;\n+import org.apache.druid.query.QuerySegmentWalker;\n+import org.apache.druid.query.QueryToolChest;\n+import org.apache.druid.query.SegmentDescriptor;\n+import org.apache.druid.query.TableDataSource;\n+import org.apache.druid.query.planning.DataSourceAnalysis;\n+import org.apache.druid.query.spec.SpecificSegmentQueryRunner;\n+import org.apache.druid.query.spec.SpecificSegmentSpec;\n+import org.apache.druid.segment.ReferenceCountingSegment;\n+import org.apache.druid.segment.Segment;\n+import org.apache.druid.segment.join.JoinableFactory;\n+import org.apache.druid.segment.join.Joinables;\n+import org.apache.druid.timeline.TimelineObjectHolder;\n+import org.apache.druid.timeline.VersionedIntervalTimeline;\n+import org.apache.druid.timeline.partition.PartitionChunk;\n+import org.apache.druid.timeline.partition.PartitionHolder;\n+import org.joda.time.Interval;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Function;\n+\n+/**\n+ * Mimics the behavior of {@link org.apache.druid.client.CachingClusteredClient} when it queries data servers (like\n+ * Historicals, which use {@link org.apache.druid.server.coordination.ServerManager}). Used by {@link QueryStackTests}.\n+ *\n+ * This class's logic is like a mashup of those two classes. With the right abstractions, it may be possible to get rid\n+ * of this class and replace it with the production classes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6461d97086ae68042d75cfc6d6ba7c916e90a8f"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MjAzODM0", "url": "https://github.com/apache/druid/pull/9533#pullrequestreview-377203834", "createdAt": "2020-03-18T20:17:52Z", "commit": {"oid": "e6461d97086ae68042d75cfc6d6ba7c916e90a8f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MjA0MzQ1", "url": "https://github.com/apache/druid/pull/9533#pullrequestreview-377204345", "createdAt": "2020-03-18T20:18:40Z", "commit": {"oid": "e6461d97086ae68042d75cfc6d6ba7c916e90a8f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxODo0MFrOF4VYPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxODo0MFrOF4VYPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxNDg0NQ==", "bodyText": "this should probably be added to the documentation", "url": "https://github.com/apache/druid/pull/9533#discussion_r394614845", "createdAt": "2020-03-18T20:18:40Z", "author": {"login": "clintropolis"}, "path": "server/src/main/java/org/apache/druid/server/initialization/ServerConfig.java", "diffHunk": "@@ -100,6 +103,10 @@ public ServerConfig()\n   @Min(1)\n   private long maxScatterGatherBytes = Long.MAX_VALUE;\n \n+  @JsonProperty\n+  @Min(1)\n+  private int maxSubqueryRows = 100000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6461d97086ae68042d75cfc6d6ba7c916e90a8f"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MjY5MDE2", "url": "https://github.com/apache/druid/pull/9533#pullrequestreview-377269016", "createdAt": "2020-03-18T22:06:39Z", "commit": {"oid": "e6461d97086ae68042d75cfc6d6ba7c916e90a8f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2678, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}