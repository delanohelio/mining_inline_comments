{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0NjI5MjM1", "number": 9356, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzo0OTozNVrODgyxIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOTowODoyNlrODh-23Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzEyODAzOnYy", "diffSide": "RIGHT", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureDataSegmentConfig.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzo0OTozNVrOFrMUNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMjoyOTozNlrOFr6B0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzNDg2OQ==", "bodyText": "Why Nonnull when the previous one is annotated with 'NotNull'?\nAlso is prefix a required config? Why is assigned to an empty string?\nPerhaps using a @JsonCreator constructor with Precondition checks will make it clearer what is required in each field\n @JsonCreator\n  public AzureDataSegmentConfig(\n      ...\n      @JsonProperty(\"prefix\") String prefix)\n  {\n    this.prefix = Preconditions.checkState(!StringUtils.isEmpty(prefix), \"prefix must be non empty\");\n    ...\n  }\n\nThen you don't need all the setters", "url": "https://github.com/apache/druid/pull/9356#discussion_r380834869", "createdAt": "2020-02-18T17:49:35Z", "author": {"login": "suneet-s"}, "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureDataSegmentConfig.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.storage.azure;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import javax.annotation.Nonnull;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+\n+/**\n+ * Stores the configuration for segments written to Azure deep storage\n+ */\n+public class AzureDataSegmentConfig\n+{\n+  @JsonProperty\n+  @NotNull\n+  private String container;\n+\n+  @JsonProperty\n+  @Nonnull", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dcb61e6917fad6ef0e4bd43ec7c63c6dc7c3e66"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0NDM0Nw==", "bodyText": "prefix is not required. Before adding this option segments were written to the root directory within the segment container specified, in a directory named after the datasource. Do we want to change the behavior here and specify a non empty default prefix? I'm not sure how this change would affect users already using the azure extension whose data is already written, will we not be able to find the segment data in this case?\nI will fix to @NotNull", "url": "https://github.com/apache/druid/pull/9356#discussion_r380844347", "createdAt": "2020-02-18T18:07:46Z", "author": {"login": "zachjsh"}, "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureDataSegmentConfig.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.storage.azure;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import javax.annotation.Nonnull;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+\n+/**\n+ * Stores the configuration for segments written to Azure deep storage\n+ */\n+public class AzureDataSegmentConfig\n+{\n+  @JsonProperty\n+  @NotNull\n+  private String container;\n+\n+  @JsonProperty\n+  @Nonnull", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzNDg2OQ=="}, "originalCommit": {"oid": "9dcb61e6917fad6ef0e4bd43ec7c63c6dc7c3e66"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU4MzgyNQ==", "bodyText": "fixed", "url": "https://github.com/apache/druid/pull/9356#discussion_r381583825", "createdAt": "2020-02-19T22:29:36Z", "author": {"login": "zachjsh"}, "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureDataSegmentConfig.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.storage.azure;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import javax.annotation.Nonnull;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+\n+/**\n+ * Stores the configuration for segments written to Azure deep storage\n+ */\n+public class AzureDataSegmentConfig\n+{\n+  @JsonProperty\n+  @NotNull\n+  private String container;\n+\n+  @JsonProperty\n+  @Nonnull", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzNDg2OQ=="}, "originalCommit": {"oid": "9dcb61e6917fad6ef0e4bd43ec7c63c6dc7c3e66"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzEzNTA0OnYy", "diffSide": "RIGHT", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureDataSegmentPusher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzo1MTozOFrOFrMYlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMjoyOTo0OVrOFr6CMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzNTk5MA==", "bodyText": "What if prefix ends with a / Is there a util that will build the path with only one separator at the end? Is there any harm if the path ends with two /", "url": "https://github.com/apache/druid/pull/9356#discussion_r380835990", "createdAt": "2020-02-18T17:51:38Z", "author": {"login": "suneet-s"}, "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureDataSegmentPusher.java", "diffHunk": "@@ -70,11 +73,12 @@ public String getPathForHadoop(String dataSource)\n   public String getPathForHadoop()\n   {\n     String hadoopPath = StringUtils.format(\n-        \"%s://%s@%s.%s/\",\n-        AzureDataSegmentPuller.AZURE_STORAGE_HADOOP_PROTOCOL,\n-        config.getContainer(),\n-        config.getAccount(),\n-        AzureDataSegmentPuller.AZURE_STORAGE_HOST_ADDRESS\n+        \"%s://%s@%s.%s/%s\",\n+        AzureUtils.AZURE_STORAGE_HADOOP_PROTOCOL,\n+        segmentConfig.getContainer(),\n+        accountConfig.getAccount(),\n+        AzureUtils.AZURE_STORAGE_HOST_ADDRESS,\n+        segmentConfig.getPrefix().isEmpty() ? \"\" : segmentConfig.getPrefix() + '/'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dcb61e6917fad6ef0e4bd43ec7c63c6dc7c3e66"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU4MzkyMQ==", "bodyText": "good catch! fixed", "url": "https://github.com/apache/druid/pull/9356#discussion_r381583921", "createdAt": "2020-02-19T22:29:49Z", "author": {"login": "zachjsh"}, "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureDataSegmentPusher.java", "diffHunk": "@@ -70,11 +73,12 @@ public String getPathForHadoop(String dataSource)\n   public String getPathForHadoop()\n   {\n     String hadoopPath = StringUtils.format(\n-        \"%s://%s@%s.%s/\",\n-        AzureDataSegmentPuller.AZURE_STORAGE_HADOOP_PROTOCOL,\n-        config.getContainer(),\n-        config.getAccount(),\n-        AzureDataSegmentPuller.AZURE_STORAGE_HOST_ADDRESS\n+        \"%s://%s@%s.%s/%s\",\n+        AzureUtils.AZURE_STORAGE_HADOOP_PROTOCOL,\n+        segmentConfig.getContainer(),\n+        accountConfig.getAccount(),\n+        AzureUtils.AZURE_STORAGE_HOST_ADDRESS,\n+        segmentConfig.getPrefix().isEmpty() ? \"\" : segmentConfig.getPrefix() + '/'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzNTk5MA=="}, "originalCommit": {"oid": "9dcb61e6917fad6ef0e4bd43ec7c63c6dc7c3e66"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzE0MDU4OnYy", "diffSide": "RIGHT", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureDataSegmentPusher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzo1MzoxNlrOFrMcBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMjozMDowNVrOFr6Crg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzNjg3MA==", "bodyText": "org.apache.commons.lang.StringUtils.isEmpty(prefix)", "url": "https://github.com/apache/druid/pull/9356#discussion_r380836870", "createdAt": "2020-02-18T17:53:16Z", "author": {"login": "suneet-s"}, "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureDataSegmentPusher.java", "diffHunk": "@@ -85,7 +89,10 @@ public String getPathForHadoop()\n   @Override\n   public String getStorageDir(DataSegment dataSegment, boolean useUniquePath)\n   {\n+    String prefix = segmentConfig.getPrefix();\n+    boolean prefixIsNullOrEmpty = (prefix == null || prefix.isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dcb61e6917fad6ef0e4bd43ec7c63c6dc7c3e66"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU4NDA0Ng==", "bodyText": "fixed", "url": "https://github.com/apache/druid/pull/9356#discussion_r381584046", "createdAt": "2020-02-19T22:30:05Z", "author": {"login": "zachjsh"}, "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureDataSegmentPusher.java", "diffHunk": "@@ -85,7 +89,10 @@ public String getPathForHadoop()\n   @Override\n   public String getStorageDir(DataSegment dataSegment, boolean useUniquePath)\n   {\n+    String prefix = segmentConfig.getPrefix();\n+    boolean prefixIsNullOrEmpty = (prefix == null || prefix.isEmpty());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzNjg3MA=="}, "originalCommit": {"oid": "9dcb61e6917fad6ef0e4bd43ec7c63c6dc7c3e66"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzE0ODM5OnYy", "diffSide": "RIGHT", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureUtils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzo1NTozNVrOFrMgzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMjozMDoxM1rOFr6C6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzODA5NA==", "bodyText": "test for unraveling a stacktrace. Should we check an unlimited depth?\nThis also changes the current behavior where if the top level throwable was a \"retryable\" exception, we'd retry, but with this change if a StorageException is caused by a RuntimeException we won't retry. Is this intentional?", "url": "https://github.com/apache/druid/pull/9356#discussion_r380838094", "createdAt": "2020-02-18T17:55:35Z", "author": {"login": "suneet-s"}, "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureUtils.java", "diffHunk": "@@ -39,16 +39,25 @@\n   @VisibleForTesting\n   static final String AZURE_STORAGE_HOST_ADDRESS = \"blob.core.windows.net\";\n \n+  // The azure storage hadoop access pattern is:\n+  // wasb[s]://<containername>@<accountname>.blob.core.windows.net/<path>\n+  // (from https://docs.microsoft.com/en-us/azure/hdinsight/hdinsight-hadoop-use-blob-storage)\n+  static final String AZURE_STORAGE_HADOOP_PROTOCOL = \"wasbs\";\n+\n   public static final Predicate<Throwable> AZURE_RETRY = e -> {\n-    if (e instanceof URISyntaxException) {\n+    Throwable t = e;\n+    for (Throwable t2 = e.getCause(); t2 != null; t2 = t2.getCause()) {\n+      t = t2;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dcb61e6917fad6ef0e4bd43ec7c63c6dc7c3e66"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1OTY3Mw==", "bodyText": "I think the below if clauses should be checked in the above for loop.", "url": "https://github.com/apache/druid/pull/9356#discussion_r380959673", "createdAt": "2020-02-18T21:57:17Z", "author": {"login": "jihoonson"}, "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureUtils.java", "diffHunk": "@@ -39,16 +39,25 @@\n   @VisibleForTesting\n   static final String AZURE_STORAGE_HOST_ADDRESS = \"blob.core.windows.net\";\n \n+  // The azure storage hadoop access pattern is:\n+  // wasb[s]://<containername>@<accountname>.blob.core.windows.net/<path>\n+  // (from https://docs.microsoft.com/en-us/azure/hdinsight/hdinsight-hadoop-use-blob-storage)\n+  static final String AZURE_STORAGE_HADOOP_PROTOCOL = \"wasbs\";\n+\n   public static final Predicate<Throwable> AZURE_RETRY = e -> {\n-    if (e instanceof URISyntaxException) {\n+    Throwable t = e;\n+    for (Throwable t2 = e.getCause(); t2 != null; t2 = t2.getCause()) {\n+      t = t2;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzODA5NA=="}, "originalCommit": {"oid": "9dcb61e6917fad6ef0e4bd43ec7c63c6dc7c3e66"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU4NDEwNg==", "bodyText": "fixed", "url": "https://github.com/apache/druid/pull/9356#discussion_r381584106", "createdAt": "2020-02-19T22:30:13Z", "author": {"login": "zachjsh"}, "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureUtils.java", "diffHunk": "@@ -39,16 +39,25 @@\n   @VisibleForTesting\n   static final String AZURE_STORAGE_HOST_ADDRESS = \"blob.core.windows.net\";\n \n+  // The azure storage hadoop access pattern is:\n+  // wasb[s]://<containername>@<accountname>.blob.core.windows.net/<path>\n+  // (from https://docs.microsoft.com/en-us/azure/hdinsight/hdinsight-hadoop-use-blob-storage)\n+  static final String AZURE_STORAGE_HADOOP_PROTOCOL = \"wasbs\";\n+\n   public static final Predicate<Throwable> AZURE_RETRY = e -> {\n-    if (e instanceof URISyntaxException) {\n+    Throwable t = e;\n+    for (Throwable t2 = e.getCause(); t2 != null; t2 = t2.getCause()) {\n+      t = t2;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzODA5NA=="}, "originalCommit": {"oid": "9dcb61e6917fad6ef0e4bd43ec7c63c6dc7c3e66"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzE4NjE1OnYy", "diffSide": "RIGHT", "path": "extensions-core/google-extensions/src/test/java/org/apache/druid/data/input/google/GoogleCloudStorageInputSourceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODowNzoxMFrOFrM36w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODowNzoxMFrOFrM36w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0NDAxMQ==", "bodyText": "nit: looks like this is repeated in multiple tests, maybe move to a helper function?", "url": "https://github.com/apache/druid/pull/9356#discussion_r380844011", "createdAt": "2020-02-18T18:07:10Z", "author": {"login": "suneet-s"}, "path": "extensions-core/google-extensions/src/test/java/org/apache/druid/data/input/google/GoogleCloudStorageInputSourceTest.java", "diffHunk": "@@ -169,14 +175,18 @@ public void testWithPrefixesSplit() throws IOException\n   public void testReader() throws IOException\n   {\n     EasyMock.reset(STORAGE);\n+    EasyMock.reset(CONFIG);\n     addExpectedPrefixObjects(PREFIXES.get(0), ImmutableList.of(EXPECTED_URIS.get(0)));\n     addExpectedGetObjectMock(EXPECTED_URIS.get(0));\n     addExpectedPrefixObjects(PREFIXES.get(1), ImmutableList.of(EXPECTED_URIS.get(1)));\n     addExpectedGetObjectMock(EXPECTED_URIS.get(1));\n+    EasyMock.expect(CONFIG.getMaxListingLength()).andReturn(EXPECTED_MAX_LISTING_LENGTH);\n     EasyMock.replay(STORAGE);\n+    EasyMock.replay(CONFIG);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dcb61e6917fad6ef0e4bd43ec7c63c6dc7c3e66"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzE4ODg5OnYy", "diffSide": "RIGHT", "path": "extensions-core/google-extensions/src/test/java/org/apache/druid/data/input/google/GoogleCloudStorageInputSourceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODowNzo1OFrOFrM5nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMjozMDoxOVrOFr6DHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0NDQ0Nw==", "bodyText": "nit: MAX_LISTING_LENGTH since we're mocking the maxListingLength() to this value", "url": "https://github.com/apache/druid/pull/9356#discussion_r380844447", "createdAt": "2020-02-18T18:07:58Z", "author": {"login": "suneet-s"}, "path": "extensions-core/google-extensions/src/test/java/org/apache/druid/data/input/google/GoogleCloudStorageInputSourceTest.java", "diffHunk": "@@ -66,8 +67,9 @@\n \n public class GoogleCloudStorageInputSourceTest extends InitializedNullHandlingTest\n {\n-  private static final long EXPECTED_MAX_LISTING_LENGTH = 1024L;\n+  private static final int EXPECTED_MAX_LISTING_LENGTH = 10;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dcb61e6917fad6ef0e4bd43ec7c63c6dc7c3e66"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU4NDE1OA==", "bodyText": "fixed", "url": "https://github.com/apache/druid/pull/9356#discussion_r381584158", "createdAt": "2020-02-19T22:30:19Z", "author": {"login": "zachjsh"}, "path": "extensions-core/google-extensions/src/test/java/org/apache/druid/data/input/google/GoogleCloudStorageInputSourceTest.java", "diffHunk": "@@ -66,8 +67,9 @@\n \n public class GoogleCloudStorageInputSourceTest extends InitializedNullHandlingTest\n {\n-  private static final long EXPECTED_MAX_LISTING_LENGTH = 1024L;\n+  private static final int EXPECTED_MAX_LISTING_LENGTH = 10;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0NDQ0Nw=="}, "originalCommit": {"oid": "9dcb61e6917fad6ef0e4bd43ec7c63c6dc7c3e66"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Nzg2MzY1OnYy", "diffSide": "RIGHT", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureByteSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTo0MzoxNlrOFrTgEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMjozMDozMFrOFr6DaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MjU5NQ==", "bodyText": "Should the log level be error instead of warn?", "url": "https://github.com/apache/druid/pull/9356#discussion_r380952595", "createdAt": "2020-02-18T21:43:16Z", "author": {"login": "jihoonson"}, "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureByteSource.java", "diffHunk": "@@ -63,12 +63,12 @@ public InputStream openStream(long offset) throws IOException\n       return azureStorage.getBlobInputStream(offset, containerName, blobPath);\n     }\n     catch (StorageException | URISyntaxException e) {\n-      log.warn(\"Exception when opening stream to azure resource, containerName: %s, blobPath: %s, Error: %s\",\n-               containerName, blobPath, e.getMessage()\n-      );\n       if (AzureUtils.AZURE_RETRY.apply(e)) {\n         throw new IOException(\"Recoverable exception\", e);\n       }\n+      log.warn(\"Exception when opening stream to azure resource, containerName: %s, blobPath: %s, Error: %s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dcb61e6917fad6ef0e4bd43ec7c63c6dc7c3e66"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU4NDIzMg==", "bodyText": "fixed", "url": "https://github.com/apache/druid/pull/9356#discussion_r381584232", "createdAt": "2020-02-19T22:30:30Z", "author": {"login": "zachjsh"}, "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureByteSource.java", "diffHunk": "@@ -63,12 +63,12 @@ public InputStream openStream(long offset) throws IOException\n       return azureStorage.getBlobInputStream(offset, containerName, blobPath);\n     }\n     catch (StorageException | URISyntaxException e) {\n-      log.warn(\"Exception when opening stream to azure resource, containerName: %s, blobPath: %s, Error: %s\",\n-               containerName, blobPath, e.getMessage()\n-      );\n       if (AzureUtils.AZURE_RETRY.apply(e)) {\n         throw new IOException(\"Recoverable exception\", e);\n       }\n+      log.warn(\"Exception when opening stream to azure resource, containerName: %s, blobPath: %s, Error: %s\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MjU5NQ=="}, "originalCommit": {"oid": "9dcb61e6917fad6ef0e4bd43ec7c63c6dc7c3e66"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Nzg4Mzc0OnYy", "diffSide": "RIGHT", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureDataSegmentConfig.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTo0OTowNFrOFrTr3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMjozMDozOFrOFr6DpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1NTYxNQ==", "bodyText": "I think this should be in a separate class rather than being in the class for deep storage configuration. I would suggest to add a new class AzureReadConfig (I think there could be a better name) that has the new configuration only, so that we can add more read-related configurations in the future.", "url": "https://github.com/apache/druid/pull/9356#discussion_r380955615", "createdAt": "2020-02-18T21:49:04Z", "author": {"login": "jihoonson"}, "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureDataSegmentConfig.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.storage.azure;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import javax.annotation.Nonnull;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+\n+/**\n+ * Stores the configuration for segments written to Azure deep storage\n+ */\n+public class AzureDataSegmentConfig\n+{\n+  @JsonProperty\n+  @NotNull\n+  private String container;\n+\n+  @JsonProperty\n+  @Nonnull\n+  private String prefix = \"\";\n+\n+  @JsonProperty\n+  @Min(1)\n+  private int maxListingLength = 1024;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dcb61e6917fad6ef0e4bd43ec7c63c6dc7c3e66"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk2MTQ3Mg==", "bodyText": "Same for other cloud storage types.", "url": "https://github.com/apache/druid/pull/9356#discussion_r380961472", "createdAt": "2020-02-18T22:00:58Z", "author": {"login": "jihoonson"}, "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureDataSegmentConfig.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.storage.azure;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import javax.annotation.Nonnull;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+\n+/**\n+ * Stores the configuration for segments written to Azure deep storage\n+ */\n+public class AzureDataSegmentConfig\n+{\n+  @JsonProperty\n+  @NotNull\n+  private String container;\n+\n+  @JsonProperty\n+  @Nonnull\n+  private String prefix = \"\";\n+\n+  @JsonProperty\n+  @Min(1)\n+  private int maxListingLength = 1024;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1NTYxNQ=="}, "originalCommit": {"oid": "9dcb61e6917fad6ef0e4bd43ec7c63c6dc7c3e66"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk3ODU5Nw==", "bodyText": "Also please add docs for the new configurations.", "url": "https://github.com/apache/druid/pull/9356#discussion_r380978597", "createdAt": "2020-02-18T22:40:29Z", "author": {"login": "jihoonson"}, "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureDataSegmentConfig.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.storage.azure;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import javax.annotation.Nonnull;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+\n+/**\n+ * Stores the configuration for segments written to Azure deep storage\n+ */\n+public class AzureDataSegmentConfig\n+{\n+  @JsonProperty\n+  @NotNull\n+  private String container;\n+\n+  @JsonProperty\n+  @Nonnull\n+  private String prefix = \"\";\n+\n+  @JsonProperty\n+  @Min(1)\n+  private int maxListingLength = 1024;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1NTYxNQ=="}, "originalCommit": {"oid": "9dcb61e6917fad6ef0e4bd43ec7c63c6dc7c3e66"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAwOTI0Mw==", "bodyText": "How about AzureInputDataConfig? And similar classes for AWS and Google", "url": "https://github.com/apache/druid/pull/9356#discussion_r381009243", "createdAt": "2020-02-19T00:09:41Z", "author": {"login": "zachjsh"}, "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureDataSegmentConfig.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.storage.azure;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import javax.annotation.Nonnull;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+\n+/**\n+ * Stores the configuration for segments written to Azure deep storage\n+ */\n+public class AzureDataSegmentConfig\n+{\n+  @JsonProperty\n+  @NotNull\n+  private String container;\n+\n+  @JsonProperty\n+  @Nonnull\n+  private String prefix = \"\";\n+\n+  @JsonProperty\n+  @Min(1)\n+  private int maxListingLength = 1024;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1NTYxNQ=="}, "originalCommit": {"oid": "9dcb61e6917fad6ef0e4bd43ec7c63c6dc7c3e66"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU4NDI5Mg==", "bodyText": "fixed", "url": "https://github.com/apache/druid/pull/9356#discussion_r381584292", "createdAt": "2020-02-19T22:30:38Z", "author": {"login": "zachjsh"}, "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureDataSegmentConfig.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.storage.azure;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import javax.annotation.Nonnull;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotNull;\n+\n+/**\n+ * Stores the configuration for segments written to Azure deep storage\n+ */\n+public class AzureDataSegmentConfig\n+{\n+  @JsonProperty\n+  @NotNull\n+  private String container;\n+\n+  @JsonProperty\n+  @Nonnull\n+  private String prefix = \"\";\n+\n+  @JsonProperty\n+  @Min(1)\n+  private int maxListingLength = 1024;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1NTYxNQ=="}, "originalCommit": {"oid": "9dcb61e6917fad6ef0e4bd43ec7c63c6dc7c3e66"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzkxMzQxOnYy", "diffSide": "RIGHT", "path": "extensions-core/google-extensions/src/main/java/org/apache/druid/data/input/google/GoogleCloudStorageInputSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTo1ODo1MVrOFrT-vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMjozMDo0NVrOFr6D6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk2MDQ0NQ==", "bodyText": "This variable is not used anymore.", "url": "https://github.com/apache/druid/pull/9356#discussion_r380960445", "createdAt": "2020-02-18T21:58:51Z", "author": {"login": "jihoonson"}, "path": "extensions-core/google-extensions/src/main/java/org/apache/druid/data/input/google/GoogleCloudStorageInputSource.java", "diffHunk": "@@ -43,17 +44,20 @@\n   private static final int MAX_LISTING_LENGTH = 1024;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dcb61e6917fad6ef0e4bd43ec7c63c6dc7c3e66"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU4NDM2MA==", "bodyText": "fixed", "url": "https://github.com/apache/druid/pull/9356#discussion_r381584360", "createdAt": "2020-02-19T22:30:45Z", "author": {"login": "zachjsh"}, "path": "extensions-core/google-extensions/src/main/java/org/apache/druid/data/input/google/GoogleCloudStorageInputSource.java", "diffHunk": "@@ -43,17 +44,20 @@\n   private static final int MAX_LISTING_LENGTH = 1024;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk2MDQ0NQ=="}, "originalCommit": {"oid": "9dcb61e6917fad6ef0e4bd43ec7c63c6dc7c3e66"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Nzk2OTkxOnYy", "diffSide": "RIGHT", "path": "extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMjoxNzo1NlrOFrUhbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMjozMDo1MlrOFr6ELg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk2OTMyNQ==", "bodyText": "MAX_LISTING_LENGTH is defined in the parent class (CloudObjectInputSource) and is not used anymore. Please remove it.", "url": "https://github.com/apache/druid/pull/9356#discussion_r380969325", "createdAt": "2020-02-18T22:17:56Z", "author": {"login": "jihoonson"}, "path": "extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSource.java", "diffHunk": "@@ -87,6 +91,6 @@ public String toString()\n \n   private Iterable<S3ObjectSummary> getIterableObjectsFromPrefixes()\n   {\n-    return () -> S3Utils.objectSummaryIterator(s3Client, getPrefixes(), MAX_LISTING_LENGTH);\n+    return () -> S3Utils.objectSummaryIterator(s3Client, getPrefixes(), segmentPusherConfig.getMaxListingLength());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dcb61e6917fad6ef0e4bd43ec7c63c6dc7c3e66"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU4NDQzMA==", "bodyText": "fixed", "url": "https://github.com/apache/druid/pull/9356#discussion_r381584430", "createdAt": "2020-02-19T22:30:52Z", "author": {"login": "zachjsh"}, "path": "extensions-core/s3-extensions/src/main/java/org/apache/druid/data/input/s3/S3InputSource.java", "diffHunk": "@@ -87,6 +91,6 @@ public String toString()\n \n   private Iterable<S3ObjectSummary> getIterableObjectsFromPrefixes()\n   {\n-    return () -> S3Utils.objectSummaryIterator(s3Client, getPrefixes(), MAX_LISTING_LENGTH);\n+    return () -> S3Utils.objectSummaryIterator(s3Client, getPrefixes(), segmentPusherConfig.getMaxListingLength());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk2OTMyNQ=="}, "originalCommit": {"oid": "9dcb61e6917fad6ef0e4bd43ec7c63c6dc7c3e66"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTQ0OTA2OnYy", "diffSide": "RIGHT", "path": "docs/development/extensions-contrib/azure.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODoxNzoyMFrOFtAGUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOToxMzozOFrOFtBrQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczMTg1Nw==", "bodyText": "Suggest:\n\"A prefix string that will be prepended to the blob names for the segments published to Azure deep storage\"", "url": "https://github.com/apache/druid/pull/9356#discussion_r382731857", "createdAt": "2020-02-21T18:17:20Z", "author": {"login": "jon-wei"}, "path": "docs/development/extensions-contrib/azure.md", "diffHunk": "@@ -29,68 +29,15 @@ To use this Apache Druid extension, make sure to [include](../../development/ext\n \n [Microsoft Azure Storage](http://azure.microsoft.com/en-us/services/storage/) is another option for deep storage. This requires some additional Druid configuration.\n \n-|Property|Possible Values|Description|Default|\n+|Property|Description|Possible Values|Default|\n |--------|---------------|-----------|-------|\n |`druid.storage.type`|azure||Must be set.|\n |`druid.azure.account`||Azure Storage account name.|Must be set.|\n |`druid.azure.key`||Azure Storage account key.|Must be set.|\n |`druid.azure.container`||Azure Storage container name.|Must be set.|\n-|`druid.azure.protocol`|http or https||https|\n-|`druid.azure.maxTries`||Number of tries before cancel an Azure operation.|3|\n+|`druid.azure.prefix`|prefix to use, i.e. what directory.| |\"\"|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1e46e1e0cf4520416b9e515d3becf9b4b3930b9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1NzY5Ng==", "bodyText": "fixed", "url": "https://github.com/apache/druid/pull/9356#discussion_r382757696", "createdAt": "2020-02-21T19:13:38Z", "author": {"login": "zachjsh"}, "path": "docs/development/extensions-contrib/azure.md", "diffHunk": "@@ -29,68 +29,15 @@ To use this Apache Druid extension, make sure to [include](../../development/ext\n \n [Microsoft Azure Storage](http://azure.microsoft.com/en-us/services/storage/) is another option for deep storage. This requires some additional Druid configuration.\n \n-|Property|Possible Values|Description|Default|\n+|Property|Description|Possible Values|Default|\n |--------|---------------|-----------|-------|\n |`druid.storage.type`|azure||Must be set.|\n |`druid.azure.account`||Azure Storage account name.|Must be set.|\n |`druid.azure.key`||Azure Storage account key.|Must be set.|\n |`druid.azure.container`||Azure Storage container name.|Must be set.|\n-|`druid.azure.protocol`|http or https||https|\n-|`druid.azure.maxTries`||Number of tries before cancel an Azure operation.|3|\n+|`druid.azure.prefix`|prefix to use, i.e. what directory.| |\"\"|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczMTg1Nw=="}, "originalCommit": {"oid": "b1e46e1e0cf4520416b9e515d3becf9b4b3930b9"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTQ1MTY3OnYy", "diffSide": "RIGHT", "path": "docs/development/extensions-contrib/azure.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODoxODoxN1rOFtAH9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOToxMzozNFrOFtBrIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczMjI3Nw==", "bodyText": "cancel -> canceling", "url": "https://github.com/apache/druid/pull/9356#discussion_r382732277", "createdAt": "2020-02-21T18:18:17Z", "author": {"login": "jon-wei"}, "path": "docs/development/extensions-contrib/azure.md", "diffHunk": "@@ -29,68 +29,15 @@ To use this Apache Druid extension, make sure to [include](../../development/ext\n \n [Microsoft Azure Storage](http://azure.microsoft.com/en-us/services/storage/) is another option for deep storage. This requires some additional Druid configuration.\n \n-|Property|Possible Values|Description|Default|\n+|Property|Description|Possible Values|Default|\n |--------|---------------|-----------|-------|\n |`druid.storage.type`|azure||Must be set.|\n |`druid.azure.account`||Azure Storage account name.|Must be set.|\n |`druid.azure.key`||Azure Storage account key.|Must be set.|\n |`druid.azure.container`||Azure Storage container name.|Must be set.|\n-|`druid.azure.protocol`|http or https||https|\n-|`druid.azure.maxTries`||Number of tries before cancel an Azure operation.|3|\n+|`druid.azure.prefix`|prefix to use, i.e. what directory.| |\"\"|\n+|`druid.azure.protocol`|the protocol to use|http or https|https|\n+|`druid.azure.maxTries`|Number of tries before cancel an Azure operation.| |3|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1e46e1e0cf4520416b9e515d3becf9b4b3930b9"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1NzY2NA==", "bodyText": "fixed", "url": "https://github.com/apache/druid/pull/9356#discussion_r382757664", "createdAt": "2020-02-21T19:13:34Z", "author": {"login": "zachjsh"}, "path": "docs/development/extensions-contrib/azure.md", "diffHunk": "@@ -29,68 +29,15 @@ To use this Apache Druid extension, make sure to [include](../../development/ext\n \n [Microsoft Azure Storage](http://azure.microsoft.com/en-us/services/storage/) is another option for deep storage. This requires some additional Druid configuration.\n \n-|Property|Possible Values|Description|Default|\n+|Property|Description|Possible Values|Default|\n |--------|---------------|-----------|-------|\n |`druid.storage.type`|azure||Must be set.|\n |`druid.azure.account`||Azure Storage account name.|Must be set.|\n |`druid.azure.key`||Azure Storage account key.|Must be set.|\n |`druid.azure.container`||Azure Storage container name.|Must be set.|\n-|`druid.azure.protocol`|http or https||https|\n-|`druid.azure.maxTries`||Number of tries before cancel an Azure operation.|3|\n+|`druid.azure.prefix`|prefix to use, i.e. what directory.| |\"\"|\n+|`druid.azure.protocol`|the protocol to use|http or https|https|\n+|`druid.azure.maxTries`|Number of tries before cancel an Azure operation.| |3|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczMjI3Nw=="}, "originalCommit": {"oid": "b1e46e1e0cf4520416b9e515d3becf9b4b3930b9"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTU5NDUzOnYy", "diffSide": "RIGHT", "path": "docs/development/extensions-core/google.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOTowODoyNlrOFtBiIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOToxMzo0NlrOFtBrcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1NTM2MQ==", "bodyText": "Hm, this \"Required Configuration\" and the \"Configuration\" section that starts at line 56 should probably be merged, the new wording you have is better so let's use that", "url": "https://github.com/apache/druid/pull/9356#discussion_r382755361", "createdAt": "2020-02-21T19:08:26Z", "author": {"login": "jon-wei"}, "path": "docs/development/extensions-core/google.md", "diffHunk": "@@ -34,6 +34,13 @@ To use this Apache Druid extension, make sure to [include](../../development/ext\n \n To configure connectivity to google cloud, run druid processes with `GOOGLE_APPLICATION_CREDENTIALS=/path/to/service_account_keyfile` in the environment.\n \n+|Property|Description|Possible Values|Default|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6725f96ca7bab59afae144153b4602e6d224475e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1Nzc0Ng==", "bodyText": "fixed", "url": "https://github.com/apache/druid/pull/9356#discussion_r382757746", "createdAt": "2020-02-21T19:13:46Z", "author": {"login": "zachjsh"}, "path": "docs/development/extensions-core/google.md", "diffHunk": "@@ -34,6 +34,13 @@ To use this Apache Druid extension, make sure to [include](../../development/ext\n \n To configure connectivity to google cloud, run druid processes with `GOOGLE_APPLICATION_CREDENTIALS=/path/to/service_account_keyfile` in the environment.\n \n+|Property|Description|Possible Values|Default|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1NTM2MQ=="}, "originalCommit": {"oid": "6725f96ca7bab59afae144153b4602e6d224475e"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2759, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}