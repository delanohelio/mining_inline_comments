{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMTIyNTIy", "number": 10240, "title": "Redis cache extension enhancement", "bodyText": "Description\nThis PR resolves #10192 .\nThe orignal redis cache extension is designed for standalone redis only, and does not support a couple of redis features which are widely used in production. So This PR updates the redis cache extension to:\n\nadd support for redis cluster\nallow users to customize which database of a redis they want to use through new property database\nadd support for password protected redis servers through new property password\nallow period style configuration for the existing expiration and timeout properties\n\nKey changes\n\norignal RedisCache is splitted into AbstractRedisCache and RedisStandaloneCache, the first provides a way to share  common code between standalone and cluster mode redis servers\nRedisCacheConfig is updated to support new properties\nRedisClusterCache which inherits from AbstractRedisCache is added to interact with redis clusters\n\n\nThis PR has:\n\n been self-reviewed.\n added documentation for new or modified features or behaviors.\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths, ensuring the threshold for code coverage is met.\n been tested in a test Druid cluster.", "createdAt": "2020-08-05T03:31:31Z", "url": "https://github.com/apache/druid/pull/10240", "merged": true, "mergeCommit": {"oid": "028442e75ec7ef2510d1bb8902f9b0010fe71875"}, "closed": true, "closedAt": "2020-08-24T02:29:04Z", "author": {"login": "FrankChen021"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3k4PqAH2gAyNDYzMTIyNTIyOjMwOWZiMDNhZWM0N2ZkZTA2ZTQ3NjM3NDdmZmMzZWFmM2M4NzMyMWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdBvCI3AFqTQ3MzAxNzA3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "309fb03aec47fde06e4763747ffc3eaf3c87321f", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/309fb03aec47fde06e4763747ffc3eaf3c87321f", "committedDate": "2020-07-23T01:09:56Z", "message": "support redis cluster"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e607b73aa5e86bd039506dfcf5d8c982672c62b", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/9e607b73aa5e86bd039506dfcf5d8c982672c62b", "committedDate": "2020-07-29T01:13:40Z", "message": "add 'password', 'database' properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbbc2dbcf59792670a1dc1e541d001c0c46e9b9e", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/bbbc2dbcf59792670a1dc1e541d001c0c46e9b9e", "committedDate": "2020-08-04T03:20:36Z", "message": "test cases passed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08992d098f6a2b4040720f8d32ab15a9f6ea2797", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/08992d098f6a2b4040720f8d32ab15a9f6ea2797", "committedDate": "2020-08-05T02:10:22Z", "message": "update doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50fc9fd60eedad4297e65f9f522f207234b23692", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/50fc9fd60eedad4297e65f9f522f207234b23692", "committedDate": "2020-08-05T03:27:25Z", "message": "some improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c17fde00f0cd455671d6978748a06cb34eb279f2", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/c17fde00f0cd455671d6978748a06cb34eb279f2", "committedDate": "2020-08-05T05:25:08Z", "message": "fix CI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49967c903ac83714c79bffc656447275a5acd96b", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/49967c903ac83714c79bffc656447275a5acd96b", "committedDate": "2020-08-10T03:26:29Z", "message": "add more test cases to improve branch coverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/a1e28a8e18dd79d5e9d9d9d3a5317f7588669416", "committedDate": "2020-08-10T08:07:52Z", "message": "fix dependency check for test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1ODI3MTMz", "url": "https://github.com/apache/druid/pull/10240#pullrequestreview-465827133", "createdAt": "2020-08-12T11:35:43Z", "commit": {"oid": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416"}, "state": "APPROVED", "comments": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMTozNTo0M1rOG_dTAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzo0MDo0NlrOG_hz0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE5MzQ3NA==", "bodyText": "Please specify a bash type for this block", "url": "https://github.com/apache/druid/pull/10240#discussion_r469193474", "createdAt": "2020-08-12T11:35:43Z", "author": {"login": "asdf2014"}, "path": "docs/development/extensions-contrib/redis-cache.md", "diffHunk": "@@ -22,32 +22,85 @@ title: \"Druid Redis Cache\"\n   ~ under the License.\n   -->\n \n+A cache implementation for Druid based on [Redis](https://github.com/antirez/redis).\n \n-To use this Apache Druid extension, make sure to [include](../../development/extensions.md#loading-extensions) `druid-redis-cache` extension.\n+Below are guidance and configuration options known to this module.\n \n-A cache implementation for Druid based on [Redis](https://github.com/antirez/redis).\n+## Installation\n+\n+Use [pull-deps](../../operations/pull-deps.md) tool shipped with Druid to install this [extension](../../development/extensions.md#community-extensions) on broker, historical and middle manager nodes.\n \n-Below are the configuration options known to this module.\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE5ODY4OA==", "bodyText": "Please rename this e to ignored.", "url": "https://github.com/apache/druid/pull/10240#discussion_r469198688", "createdAt": "2020-08-12T11:46:42Z", "author": {"login": "asdf2014"}, "path": "extensions-contrib/redis-cache/src/main/java/org/apache/druid/client/cache/RedisClusterCache.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.client.cache;\n+\n+import redis.clients.jedis.JedisCluster;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+public class RedisClusterCache extends AbstractRedisCache\n+{\n+  private JedisCluster cluster;\n+\n+  RedisClusterCache(JedisCluster cluster, RedisCacheConfig config)\n+  {\n+    super(config);\n+    this.cluster = cluster;\n+  }\n+\n+  @Override\n+  protected byte[] getFromRedis(byte[] key)\n+  {\n+    return cluster.get(key);\n+  }\n+\n+  @Override\n+  protected void putToRedis(byte[] key, byte[] value, RedisCacheConfig.DurationConfig expiration)\n+  {\n+    cluster.setex(key, (int) expiration.getSeconds(), value);\n+  }\n+\n+  @Override\n+  protected List<byte[]> mgetFromRedis(byte[]... keys)\n+  {\n+    return cluster.mget(keys);\n+  }\n+\n+  @Override\n+  protected void cleanup()\n+  {\n+    try {\n+      cluster.close();\n+    }\n+    catch (IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIwMDY2MQ==", "bodyText": "The fourth column Required should be filled with yes or no, not None.", "url": "https://github.com/apache/druid/pull/10240#discussion_r469200661", "createdAt": "2020-08-12T11:50:52Z", "author": {"login": "asdf2014"}, "path": "docs/development/extensions-contrib/redis-cache.md", "diffHunk": "@@ -22,32 +22,85 @@ title: \"Druid Redis Cache\"\n   ~ under the License.\n   -->\n \n+A cache implementation for Druid based on [Redis](https://github.com/antirez/redis).\n \n-To use this Apache Druid extension, make sure to [include](../../development/extensions.md#loading-extensions) `druid-redis-cache` extension.\n+Below are guidance and configuration options known to this module.\n \n-A cache implementation for Druid based on [Redis](https://github.com/antirez/redis).\n+## Installation\n+\n+Use [pull-deps](../../operations/pull-deps.md) tool shipped with Druid to install this [extension](../../development/extensions.md#community-extensions) on broker, historical and middle manager nodes.\n \n-Below are the configuration options known to this module.\n+```\n+java -classpath \"druid_dir/lib/*\" org.apache.druid.cli.Main tools pull-deps -c org.apache.druid.extensions.contrib:druid-redis-cache:{VERSION}\n+```\n \n-Note that just adding these properties does not enable the cache. You still need to add the `druid.<process-type>.cache.useCache` and `druid.<process-type>.cache.populateCache` properties for the processes you want to enable the cache on as described in the [cache configuration docs](../../configuration/index.html#cache-configuration).\n+## Enabling\n+\n+To enable this extension after installation,\n \n-A possible configuration would be to keep the properties below in your `common.runtime.properties` file (present on all processes) and then add `druid.<nodetype>.cache.useCache` and `druid.<nodetype>.cache.populateCache` in the `runtime.properties` file of the process types you want to enable caching on.\n+1. [include](../../development/extensions.md#loading-extensions) this `druid-redis-cache` extension\n+2. to enable cache on broker nodes, follow [broker caching docs](../../configuration/index.html#broker-caching) to set related properties\n+3. to enable cache on historical nodes, follow [historical caching docs](../../configuration/index.html#historical-caching) to set related properties\n+4. to enable cache on middle manager nodes, follow [peon caching docs](../../configuration/index.html#peon-caching) to set related properties\n+5. set `druid.cache.type` to `redis`\n+6. add the following properties\n \n ## Configuration\n \n-|`common.runtime.properties`|Description|Default|Required|\n+### Cluster mode \n+\n+To utilize a redis cluster, following properties must be set.\n+\n+Note: some redis cloud service providers provide redis cluster service via a redis proxy, for these clusters, please follow the [Standalone mode](#standalone-mode) configuration below.\n+\n+| Properties |Description|Default|Required|\n+|--------------------|-----------|-------|--------|\n+|`druid.cache.cluster.nodes`| Redis nodes in a cluster, represented in comma separated string. See example below | None | yes |\n+|`druid.cache.cluster.maxRedirection`| Max retry count | 5 | None |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIwMTExNQ==", "bodyText": "Is it really necessary to delete loadList?", "url": "https://github.com/apache/druid/pull/10240#discussion_r469201115", "createdAt": "2020-08-12T11:51:51Z", "author": {"login": "asdf2014"}, "path": "website/.spelling", "diffHunk": "@@ -552,7 +552,8 @@ defaultMetrics.json\n namespacePrefix\n src\n  - ../docs/development/extensions-contrib/redis-cache.md\n-loadList", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIwMjcxNQ==", "bodyText": "This instance of MockJedisPool is useless, please delete it.", "url": "https://github.com/apache/druid/pull/10240#discussion_r469202715", "createdAt": "2020-08-12T11:55:10Z", "author": {"login": "asdf2014"}, "path": "extensions-contrib/redis-cache/src/test/java/org/apache/druid/client/cache/RedisClusterCacheTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.client.cache;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fiftyonred.mock_jedis.MockJedisCluster;\n+import com.fiftyonred.mock_jedis.MockJedisPool;\n+import com.google.common.collect.Lists;\n+import com.google.common.primitives.Ints;\n+import org.apache.commons.compress.utils.Sets;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import redis.clients.jedis.HostAndPort;\n+import redis.clients.jedis.JedisPoolConfig;\n+\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class RedisClusterCacheTest\n+{\n+  private static final byte[] HI = StringUtils.toUtf8(\"hiiiiiiiiiiiiiiiiiii\");\n+  private static final byte[] HO = StringUtils.toUtf8(\"hooooooooooooooooooo\");\n+\n+  private final RedisCacheConfig cacheConfig = new RedisCacheConfig()\n+  {\n+    @Override\n+    public DurationConfig getTimeout()\n+    {\n+      return new DurationConfig(2000);\n+    }\n+\n+    @Override\n+    public DurationConfig getExpiration()\n+    {\n+      return new DurationConfig(\"PT1H\");\n+    }\n+  };\n+\n+  private RedisClusterCache cache;\n+\n+  @Before\n+  public void setUp()\n+  {\n+    JedisPoolConfig poolConfig = new JedisPoolConfig();\n+    poolConfig.setMaxTotal(cacheConfig.getMaxTotalConnections());\n+    poolConfig.setMaxIdle(cacheConfig.getMaxIdleConnections());\n+    poolConfig.setMinIdle(cacheConfig.getMinIdleConnections());\n+\n+    MockJedisPool pool = new MockJedisPool(poolConfig, \"localhost\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIwNDE5NQ==", "bodyText": "I believe that port should be passed in instead of host.", "url": "https://github.com/apache/druid/pull/10240#discussion_r469204195", "createdAt": "2020-08-12T11:58:15Z", "author": {"login": "asdf2014"}, "path": "extensions-contrib/redis-cache/src/main/java/org/apache/druid/client/cache/RedisCacheFactory.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.client.cache;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.druid.java.util.common.IAE;\n+import redis.clients.jedis.HostAndPort;\n+import redis.clients.jedis.JedisCluster;\n+import redis.clients.jedis.JedisPool;\n+import redis.clients.jedis.JedisPoolConfig;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class RedisCacheFactory\n+{\n+  public static Cache create(final RedisCacheConfig config)\n+  {\n+    if (config.getCluster() != null && StringUtils.isNotBlank(config.getCluster().getNodes())) {\n+\n+      Set<HostAndPort> nodes = Arrays.stream(config.getCluster().getNodes().split(\",\"))\n+                                     .map(String::trim)\n+                                     .filter(StringUtils::isNotBlank)\n+                                     .map(host -> {\n+                                       int index = host.indexOf(':');\n+                                       if (index <= 0 || index == host.length()) {\n+                                         throw new IAE(\"Invalid redis cluster configuration: %s\", host);\n+                                       }\n+\n+                                       int port;\n+                                       try {\n+                                         port = Integer.parseInt(host.substring(index + 1));\n+                                       }\n+                                       catch (NumberFormatException e) {\n+                                         throw new IAE(\"Invalid redis cluster configuration: invalid port %s\", host);\n+                                       }\n+                                       if (port <= 0 || port > 65535) {\n+                                         throw new IAE(\"Invalid redis cluster configuration: invalid port %s\", host);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIwODM4Ng==", "bodyText": "There is still a difference between connectionTimeout and soTimeout. If possible, please extend the soTimeout parameter.", "url": "https://github.com/apache/druid/pull/10240#discussion_r469208386", "createdAt": "2020-08-12T12:06:53Z", "author": {"login": "asdf2014"}, "path": "extensions-contrib/redis-cache/src/main/java/org/apache/druid/client/cache/RedisCacheFactory.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.client.cache;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.druid.java.util.common.IAE;\n+import redis.clients.jedis.HostAndPort;\n+import redis.clients.jedis.JedisCluster;\n+import redis.clients.jedis.JedisPool;\n+import redis.clients.jedis.JedisPoolConfig;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class RedisCacheFactory\n+{\n+  public static Cache create(final RedisCacheConfig config)\n+  {\n+    if (config.getCluster() != null && StringUtils.isNotBlank(config.getCluster().getNodes())) {\n+\n+      Set<HostAndPort> nodes = Arrays.stream(config.getCluster().getNodes().split(\",\"))\n+                                     .map(String::trim)\n+                                     .filter(StringUtils::isNotBlank)\n+                                     .map(host -> {\n+                                       int index = host.indexOf(':');\n+                                       if (index <= 0 || index == host.length()) {\n+                                         throw new IAE(\"Invalid redis cluster configuration: %s\", host);\n+                                       }\n+\n+                                       int port;\n+                                       try {\n+                                         port = Integer.parseInt(host.substring(index + 1));\n+                                       }\n+                                       catch (NumberFormatException e) {\n+                                         throw new IAE(\"Invalid redis cluster configuration: invalid port %s\", host);\n+                                       }\n+                                       if (port <= 0 || port > 65535) {\n+                                         throw new IAE(\"Invalid redis cluster configuration: invalid port %s\", host);\n+                                       }\n+\n+                                       return new HostAndPort(host.substring(0, index), port);\n+                                     }).collect(Collectors.toSet());\n+\n+      JedisPoolConfig poolConfig = new JedisPoolConfig();\n+      poolConfig.setMaxTotal(config.getMaxTotalConnections());\n+      poolConfig.setMaxIdle(config.getMaxIdleConnections());\n+      poolConfig.setMinIdle(config.getMinIdleConnections());\n+\n+      JedisCluster cluster;\n+      if (StringUtils.isNotBlank(config.getPassword())) {\n+        cluster = new JedisCluster(\n+            nodes,\n+            config.getTimeout().getMillisecondsAsInt(),\n+            config.getTimeout().getMillisecondsAsInt(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIyMzM0Mw==", "bodyText": "We need to pay attention to security and avoid exposing password information. For example, we can consider adding @JsonIgnore annotation.", "url": "https://github.com/apache/druid/pull/10240#discussion_r469223343", "createdAt": "2020-08-12T12:30:44Z", "author": {"login": "asdf2014"}, "path": "extensions-contrib/redis-cache/src/main/java/org/apache/druid/client/cache/RedisCacheConfig.java", "diffHunk": "@@ -83,4 +178,19 @@ public int getMinIdleConnections()\n   {\n     return minIdleConnections;\n   }\n+\n+  public RedisClusterConfig getCluster()\n+  {\n+    return cluster;\n+  }\n+\n+  public String getPassword()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIyNzc0OQ==", "bodyText": "The second judgment should be to avoid the lack of port. For example, 127.0.0.1:. I think it should be changed to index == host.length() - 1 instead of index == host.length().", "url": "https://github.com/apache/druid/pull/10240#discussion_r469227749", "createdAt": "2020-08-12T12:37:58Z", "author": {"login": "asdf2014"}, "path": "extensions-contrib/redis-cache/src/main/java/org/apache/druid/client/cache/RedisCacheFactory.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.client.cache;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.druid.java.util.common.IAE;\n+import redis.clients.jedis.HostAndPort;\n+import redis.clients.jedis.JedisCluster;\n+import redis.clients.jedis.JedisPool;\n+import redis.clients.jedis.JedisPoolConfig;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class RedisCacheFactory\n+{\n+  public static Cache create(final RedisCacheConfig config)\n+  {\n+    if (config.getCluster() != null && StringUtils.isNotBlank(config.getCluster().getNodes())) {\n+\n+      Set<HostAndPort> nodes = Arrays.stream(config.getCluster().getNodes().split(\",\"))\n+                                     .map(String::trim)\n+                                     .filter(StringUtils::isNotBlank)\n+                                     .map(host -> {\n+                                       int index = host.indexOf(':');\n+                                       if (index <= 0 || index == host.length()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzOTA5Ng==", "bodyText": "Emm.. Generally, we don't recommend using Sets.newHashSet to create HashSet instances, and we hope to create them directly through new. In addition, it may be more appropriate to use Collections.singleton here.", "url": "https://github.com/apache/druid/pull/10240#discussion_r469239096", "createdAt": "2020-08-12T12:58:01Z", "author": {"login": "asdf2014"}, "path": "extensions-contrib/redis-cache/src/test/java/org/apache/druid/client/cache/RedisClusterCacheTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.client.cache;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fiftyonred.mock_jedis.MockJedisCluster;\n+import com.fiftyonred.mock_jedis.MockJedisPool;\n+import com.google.common.collect.Lists;\n+import com.google.common.primitives.Ints;\n+import org.apache.commons.compress.utils.Sets;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import redis.clients.jedis.HostAndPort;\n+import redis.clients.jedis.JedisPoolConfig;\n+\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class RedisClusterCacheTest\n+{\n+  private static final byte[] HI = StringUtils.toUtf8(\"hiiiiiiiiiiiiiiiiiii\");\n+  private static final byte[] HO = StringUtils.toUtf8(\"hooooooooooooooooooo\");\n+\n+  private final RedisCacheConfig cacheConfig = new RedisCacheConfig()\n+  {\n+    @Override\n+    public DurationConfig getTimeout()\n+    {\n+      return new DurationConfig(2000);\n+    }\n+\n+    @Override\n+    public DurationConfig getExpiration()\n+    {\n+      return new DurationConfig(\"PT1H\");\n+    }\n+  };\n+\n+  private RedisClusterCache cache;\n+\n+  @Before\n+  public void setUp()\n+  {\n+    JedisPoolConfig poolConfig = new JedisPoolConfig();\n+    poolConfig.setMaxTotal(cacheConfig.getMaxTotalConnections());\n+    poolConfig.setMaxIdle(cacheConfig.getMaxIdleConnections());\n+    poolConfig.setMinIdle(cacheConfig.getMinIdleConnections());\n+\n+    MockJedisPool pool = new MockJedisPool(poolConfig, \"localhost\");\n+    // orginal MockJedis do not support 'milliseconds' in long type,\n+    // for test we override to support it\n+    cache = new RedisClusterCache(new MockJedisCluster(Sets.newHashSet(new HostAndPort(\"localhost\", 6379)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0MDg1MA==", "bodyText": "Let's use the existing tool method here: StringUtils.encodeBase64String.", "url": "https://github.com/apache/druid/pull/10240#discussion_r469240850", "createdAt": "2020-08-12T13:00:37Z", "author": {"login": "asdf2014"}, "path": "extensions-contrib/redis-cache/src/test/java/org/apache/druid/client/cache/RedisClusterCacheTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.client.cache;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fiftyonred.mock_jedis.MockJedisCluster;\n+import com.fiftyonred.mock_jedis.MockJedisPool;\n+import com.google.common.collect.Lists;\n+import com.google.common.primitives.Ints;\n+import org.apache.commons.compress.utils.Sets;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import redis.clients.jedis.HostAndPort;\n+import redis.clients.jedis.JedisPoolConfig;\n+\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class RedisClusterCacheTest\n+{\n+  private static final byte[] HI = StringUtils.toUtf8(\"hiiiiiiiiiiiiiiiiiii\");\n+  private static final byte[] HO = StringUtils.toUtf8(\"hooooooooooooooooooo\");\n+\n+  private final RedisCacheConfig cacheConfig = new RedisCacheConfig()\n+  {\n+    @Override\n+    public DurationConfig getTimeout()\n+    {\n+      return new DurationConfig(2000);\n+    }\n+\n+    @Override\n+    public DurationConfig getExpiration()\n+    {\n+      return new DurationConfig(\"PT1H\");\n+    }\n+  };\n+\n+  private RedisClusterCache cache;\n+\n+  @Before\n+  public void setUp()\n+  {\n+    JedisPoolConfig poolConfig = new JedisPoolConfig();\n+    poolConfig.setMaxTotal(cacheConfig.getMaxTotalConnections());\n+    poolConfig.setMaxIdle(cacheConfig.getMaxIdleConnections());\n+    poolConfig.setMinIdle(cacheConfig.getMinIdleConnections());\n+\n+    MockJedisPool pool = new MockJedisPool(poolConfig, \"localhost\");\n+    // orginal MockJedis do not support 'milliseconds' in long type,\n+    // for test we override to support it\n+    cache = new RedisClusterCache(new MockJedisCluster(Sets.newHashSet(new HostAndPort(\"localhost\", 6379)))\n+    {\n+      Map<String, byte[]> cacheStorage = new HashMap<>();\n+\n+      @Override\n+      public String setex(final byte[] key, final int seconds, final byte[] value)\n+      {\n+        cacheStorage.put(Base64.getEncoder().encodeToString(key), value);\n+        return null;\n+      }\n+\n+      @Override\n+      public byte[] get(final byte[] key)\n+      {\n+        return cacheStorage.get(Base64.getEncoder().encodeToString(key));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0MTA3Nw==", "bodyText": "Let's use the existing tool method here: StringUtils.encodeBase64String.", "url": "https://github.com/apache/druid/pull/10240#discussion_r469241077", "createdAt": "2020-08-12T13:01:01Z", "author": {"login": "asdf2014"}, "path": "extensions-contrib/redis-cache/src/test/java/org/apache/druid/client/cache/RedisClusterCacheTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.client.cache;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fiftyonred.mock_jedis.MockJedisCluster;\n+import com.fiftyonred.mock_jedis.MockJedisPool;\n+import com.google.common.collect.Lists;\n+import com.google.common.primitives.Ints;\n+import org.apache.commons.compress.utils.Sets;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import redis.clients.jedis.HostAndPort;\n+import redis.clients.jedis.JedisPoolConfig;\n+\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class RedisClusterCacheTest\n+{\n+  private static final byte[] HI = StringUtils.toUtf8(\"hiiiiiiiiiiiiiiiiiii\");\n+  private static final byte[] HO = StringUtils.toUtf8(\"hooooooooooooooooooo\");\n+\n+  private final RedisCacheConfig cacheConfig = new RedisCacheConfig()\n+  {\n+    @Override\n+    public DurationConfig getTimeout()\n+    {\n+      return new DurationConfig(2000);\n+    }\n+\n+    @Override\n+    public DurationConfig getExpiration()\n+    {\n+      return new DurationConfig(\"PT1H\");\n+    }\n+  };\n+\n+  private RedisClusterCache cache;\n+\n+  @Before\n+  public void setUp()\n+  {\n+    JedisPoolConfig poolConfig = new JedisPoolConfig();\n+    poolConfig.setMaxTotal(cacheConfig.getMaxTotalConnections());\n+    poolConfig.setMaxIdle(cacheConfig.getMaxIdleConnections());\n+    poolConfig.setMinIdle(cacheConfig.getMinIdleConnections());\n+\n+    MockJedisPool pool = new MockJedisPool(poolConfig, \"localhost\");\n+    // orginal MockJedis do not support 'milliseconds' in long type,\n+    // for test we override to support it\n+    cache = new RedisClusterCache(new MockJedisCluster(Sets.newHashSet(new HostAndPort(\"localhost\", 6379)))\n+    {\n+      Map<String, byte[]> cacheStorage = new HashMap<>();\n+\n+      @Override\n+      public String setex(final byte[] key, final int seconds, final byte[] value)\n+      {\n+        cacheStorage.put(Base64.getEncoder().encodeToString(key), value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0MTE0OA==", "bodyText": "Let's use the existing tool method here: StringUtils.encodeBase64String.", "url": "https://github.com/apache/druid/pull/10240#discussion_r469241148", "createdAt": "2020-08-12T13:01:07Z", "author": {"login": "asdf2014"}, "path": "extensions-contrib/redis-cache/src/test/java/org/apache/druid/client/cache/RedisClusterCacheTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.client.cache;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fiftyonred.mock_jedis.MockJedisCluster;\n+import com.fiftyonred.mock_jedis.MockJedisPool;\n+import com.google.common.collect.Lists;\n+import com.google.common.primitives.Ints;\n+import org.apache.commons.compress.utils.Sets;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import redis.clients.jedis.HostAndPort;\n+import redis.clients.jedis.JedisPoolConfig;\n+\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class RedisClusterCacheTest\n+{\n+  private static final byte[] HI = StringUtils.toUtf8(\"hiiiiiiiiiiiiiiiiiii\");\n+  private static final byte[] HO = StringUtils.toUtf8(\"hooooooooooooooooooo\");\n+\n+  private final RedisCacheConfig cacheConfig = new RedisCacheConfig()\n+  {\n+    @Override\n+    public DurationConfig getTimeout()\n+    {\n+      return new DurationConfig(2000);\n+    }\n+\n+    @Override\n+    public DurationConfig getExpiration()\n+    {\n+      return new DurationConfig(\"PT1H\");\n+    }\n+  };\n+\n+  private RedisClusterCache cache;\n+\n+  @Before\n+  public void setUp()\n+  {\n+    JedisPoolConfig poolConfig = new JedisPoolConfig();\n+    poolConfig.setMaxTotal(cacheConfig.getMaxTotalConnections());\n+    poolConfig.setMaxIdle(cacheConfig.getMaxIdleConnections());\n+    poolConfig.setMinIdle(cacheConfig.getMinIdleConnections());\n+\n+    MockJedisPool pool = new MockJedisPool(poolConfig, \"localhost\");\n+    // orginal MockJedis do not support 'milliseconds' in long type,\n+    // for test we override to support it\n+    cache = new RedisClusterCache(new MockJedisCluster(Sets.newHashSet(new HostAndPort(\"localhost\", 6379)))\n+    {\n+      Map<String, byte[]> cacheStorage = new HashMap<>();\n+\n+      @Override\n+      public String setex(final byte[] key, final int seconds, final byte[] value)\n+      {\n+        cacheStorage.put(Base64.getEncoder().encodeToString(key), value);\n+        return null;\n+      }\n+\n+      @Override\n+      public byte[] get(final byte[] key)\n+      {\n+        return cacheStorage.get(Base64.getEncoder().encodeToString(key));\n+      }\n+\n+      @Override\n+      public List<byte[]> mget(final byte[]... keys)\n+      {\n+        List<byte[]> ret = new ArrayList<>();\n+        for (byte[] key : keys) {\n+          String k = Base64.getEncoder().encodeToString(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0NDMzMg==", "bodyText": "Let's write it as \"PT2S\".", "url": "https://github.com/apache/druid/pull/10240#discussion_r469244332", "createdAt": "2020-08-12T13:06:17Z", "author": {"login": "asdf2014"}, "path": "extensions-contrib/redis-cache/src/test/java/org/apache/druid/client/cache/RedisStandaloneCacheTest.java", "diffHunk": "@@ -41,24 +42,24 @@\n import java.util.Map;\n import java.util.UUID;\n \n-public class RedisCacheTest\n+public class RedisStandaloneCacheTest\n {\n   private static final byte[] HI = StringUtils.toUtf8(\"hiiiiiiiiiiiiiiiiiii\");\n   private static final byte[] HO = StringUtils.toUtf8(\"hooooooooooooooooooo\");\n \n-  private RedisCache cache;\n+  private RedisStandaloneCache cache;\n   private final RedisCacheConfig cacheConfig = new RedisCacheConfig()\n   {\n     @Override\n-    public int getTimeout()\n+    public DurationConfig getTimeout()\n     {\n-      return 10;\n+      return new DurationConfig(2000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0NDQ0Mg==", "bodyText": "Let's write it as \"PT2S\".", "url": "https://github.com/apache/druid/pull/10240#discussion_r469244442", "createdAt": "2020-08-12T13:06:26Z", "author": {"login": "asdf2014"}, "path": "extensions-contrib/redis-cache/src/test/java/org/apache/druid/client/cache/RedisClusterCacheTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.client.cache;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fiftyonred.mock_jedis.MockJedisCluster;\n+import com.fiftyonred.mock_jedis.MockJedisPool;\n+import com.google.common.collect.Lists;\n+import com.google.common.primitives.Ints;\n+import org.apache.commons.compress.utils.Sets;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import redis.clients.jedis.HostAndPort;\n+import redis.clients.jedis.JedisPoolConfig;\n+\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class RedisClusterCacheTest\n+{\n+  private static final byte[] HI = StringUtils.toUtf8(\"hiiiiiiiiiiiiiiiiiii\");\n+  private static final byte[] HO = StringUtils.toUtf8(\"hooooooooooooooooooo\");\n+\n+  private final RedisCacheConfig cacheConfig = new RedisCacheConfig()\n+  {\n+    @Override\n+    public DurationConfig getTimeout()\n+    {\n+      return new DurationConfig(2000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0NjM4MQ==", "bodyText": "FYI, https://github.com/apache/druid/blob/master/codestyle/druid-forbidden-apis.txt#L19", "url": "https://github.com/apache/druid/pull/10240#discussion_r469246381", "createdAt": "2020-08-12T13:09:30Z", "author": {"login": "asdf2014"}, "path": "extensions-contrib/redis-cache/src/test/java/org/apache/druid/client/cache/RedisClusterCacheTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.client.cache;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fiftyonred.mock_jedis.MockJedisCluster;\n+import com.fiftyonred.mock_jedis.MockJedisPool;\n+import com.google.common.collect.Lists;\n+import com.google.common.primitives.Ints;\n+import org.apache.commons.compress.utils.Sets;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import redis.clients.jedis.HostAndPort;\n+import redis.clients.jedis.JedisPoolConfig;\n+\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class RedisClusterCacheTest\n+{\n+  private static final byte[] HI = StringUtils.toUtf8(\"hiiiiiiiiiiiiiiiiiii\");\n+  private static final byte[] HO = StringUtils.toUtf8(\"hooooooooooooooooooo\");\n+\n+  private final RedisCacheConfig cacheConfig = new RedisCacheConfig()\n+  {\n+    @Override\n+    public DurationConfig getTimeout()\n+    {\n+      return new DurationConfig(2000);\n+    }\n+\n+    @Override\n+    public DurationConfig getExpiration()\n+    {\n+      return new DurationConfig(\"PT1H\");\n+    }\n+  };\n+\n+  private RedisClusterCache cache;\n+\n+  @Before\n+  public void setUp()\n+  {\n+    JedisPoolConfig poolConfig = new JedisPoolConfig();\n+    poolConfig.setMaxTotal(cacheConfig.getMaxTotalConnections());\n+    poolConfig.setMaxIdle(cacheConfig.getMaxIdleConnections());\n+    poolConfig.setMinIdle(cacheConfig.getMinIdleConnections());\n+\n+    MockJedisPool pool = new MockJedisPool(poolConfig, \"localhost\");\n+    // orginal MockJedis do not support 'milliseconds' in long type,\n+    // for test we override to support it\n+    cache = new RedisClusterCache(new MockJedisCluster(Sets.newHashSet(new HostAndPort(\"localhost\", 6379)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzOTA5Ng=="}, "originalCommit": {"oid": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0ODAyNA==", "bodyText": "The version here does not need to be specified, it will be automatically inherited from the parent module. The others are the same.", "url": "https://github.com/apache/druid/pull/10240#discussion_r469248024", "createdAt": "2020-08-12T13:12:05Z", "author": {"login": "asdf2014"}, "path": "extensions-contrib/redis-cache/pom.xml", "diffHunk": "@@ -78,6 +78,36 @@\n             <artifactId>jackson-databind</artifactId>\n             <scope>provided</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.apache.commons</groupId>\n+            <artifactId>commons-compress</artifactId>\n+            <version>1.19</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1MTg5Mw==", "bodyText": "Please update the address to https://github.com/redis/redis by the way.", "url": "https://github.com/apache/druid/pull/10240#discussion_r469251893", "createdAt": "2020-08-12T13:18:08Z", "author": {"login": "asdf2014"}, "path": "docs/development/extensions-contrib/redis-cache.md", "diffHunk": "@@ -22,32 +22,85 @@ title: \"Druid Redis Cache\"\n   ~ under the License.\n   -->\n \n+A cache implementation for Druid based on [Redis](https://github.com/antirez/redis).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI2NzQwOQ==", "bodyText": "nit: Adding a space in the middle of \\\"port\\\":6379 will satisfy the JSON formatting requirements.", "url": "https://github.com/apache/druid/pull/10240#discussion_r469267409", "createdAt": "2020-08-12T13:40:46Z", "author": {"login": "asdf2014"}, "path": "extensions-contrib/redis-cache/src/test/java/org/apache/druid/client/cache/RedisStandaloneCacheTest.java", "diffHunk": "@@ -82,20 +83,25 @@ public String psetex(byte[] key, long milliseconds, byte[] value)\n       }\n     });\n \n-    cache = RedisCache.create(pool, cacheConfig);\n+    cache = new RedisStandaloneCache(pool, cacheConfig);\n   }\n \n   @Test\n   public void testBasicInjection() throws Exception\n   {\n-    final RedisCacheConfig config = new RedisCacheConfig();\n+    String json = \"{ \\\"host\\\": \\\"localhost\\\", \\\"port\\\":6379, \\\"expiration\\\": 3600}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1e28a8e18dd79d5e9d9d9d3a5317f7588669416"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0420d292aa7bd8978bee33b6052004d0f87c262", "author": {"user": {"login": "FrankChen021", "name": "Frank Chen"}}, "url": "https://github.com/apache/druid/commit/a0420d292aa7bd8978bee33b6052004d0f87c262", "committedDate": "2020-08-14T12:22:44Z", "message": "resolve review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3OTQyMzU2", "url": "https://github.com/apache/druid/pull/10240#pullrequestreview-467942356", "createdAt": "2020-08-15T02:57:10Z", "commit": {"oid": "a0420d292aa7bd8978bee33b6052004d0f87c262"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczMDE3MDc3", "url": "https://github.com/apache/druid/pull/10240#pullrequestreview-473017077", "createdAt": "2020-08-23T14:39:02Z", "commit": {"oid": "a0420d292aa7bd8978bee33b6052004d0f87c262"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1915, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}