{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNzM5MTA2", "number": 9450, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODoyNDo1M1rODkw92Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTozNjoyOFrODkycrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODc3NTkzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/data/input/MaxSizeSplitHintSpec.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODoyNDo1M1rOFxRU7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOToxMToyMlrOFxS54A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIwODQzMQ==", "bodyText": "Unused?", "url": "https://github.com/apache/druid/pull/9450#discussion_r387208431", "createdAt": "2020-03-03T18:24:53Z", "author": {"login": "ccaominh"}, "path": "core/src/main/java/org/apache/druid/data/input/MaxSizeSplitHintSpec.java", "diffHunk": "@@ -40,6 +42,7 @@\n public class MaxSizeSplitHintSpec implements SplitHintSpec\n {\n   public static final String TYPE = \"maxSize\";\n+  private static final Logger LOG = new Logger(MaxSizeSplitHintSpec.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02ffb9ad072b6b0732d5c7b52e00834560400673"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIzNDI3Mg==", "bodyText": "Oops. Removed.", "url": "https://github.com/apache/druid/pull/9450#discussion_r387234272", "createdAt": "2020-03-03T19:11:22Z", "author": {"login": "jihoonson"}, "path": "core/src/main/java/org/apache/druid/data/input/MaxSizeSplitHintSpec.java", "diffHunk": "@@ -40,6 +42,7 @@\n public class MaxSizeSplitHintSpec implements SplitHintSpec\n {\n   public static final String TYPE = \"maxSize\";\n+  private static final Logger LOG = new Logger(MaxSizeSplitHintSpec.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIwODQzMQ=="}, "originalCommit": {"oid": "02ffb9ad072b6b0732d5c7b52e00834560400673"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODc5NDIwOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/druid/data/input/impl/LocalInputSourceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODozMDoyOVrOFxRg5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOToxMjowMFrOFxS7Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIxMTQ5NQ==", "bodyText": "Should this be the one from guava instead? (same for MaxSizeSplitHintSpecTest)", "url": "https://github.com/apache/druid/pull/9450#discussion_r387211495", "createdAt": "2020-03-03T18:30:29Z", "author": {"login": "ccaominh"}, "path": "core/src/test/java/org/apache/druid/data/input/impl/LocalInputSourceTest.java", "diffHunk": "@@ -21,6 +21,7 @@\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import nl.jqno.equalsverifier.EqualsVerifier;\n+import org.apache.commons.compress.utils.Lists;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02ffb9ad072b6b0732d5c7b52e00834560400673"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIzNDYzNQ==", "bodyText": "Oops. Fixed.", "url": "https://github.com/apache/druid/pull/9450#discussion_r387234635", "createdAt": "2020-03-03T19:12:00Z", "author": {"login": "jihoonson"}, "path": "core/src/test/java/org/apache/druid/data/input/impl/LocalInputSourceTest.java", "diffHunk": "@@ -21,6 +21,7 @@\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import nl.jqno.equalsverifier.EqualsVerifier;\n+import org.apache.commons.compress.utils.Lists;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIxMTQ5NQ=="}, "originalCommit": {"oid": "02ffb9ad072b6b0732d5c7b52e00834560400673"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODgyMTc0OnYy", "diffSide": "RIGHT", "path": "extensions-core/google-extensions/src/main/java/org/apache/druid/storage/google/ObjectStorageIterator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODozODozM1rOFxRyUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOToxMjowNlrOFxS7hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIxNTk1Mg==", "bodyText": "This branch is not covered by unit tests", "url": "https://github.com/apache/druid/pull/9450#discussion_r387215952", "createdAt": "2020-03-03T18:38:33Z", "author": {"login": "ccaominh"}, "path": "extensions-core/google-extensions/src/main/java/org/apache/druid/storage/google/ObjectStorageIterator.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.storage.google;\n+\n+import com.google.api.services.storage.Storage;\n+import com.google.api.services.storage.model.Objects;\n+import com.google.api.services.storage.model.StorageObject;\n+import org.apache.druid.java.util.common.StringUtils;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+public class ObjectStorageIterator implements Iterator<StorageObject>\n+{\n+  private final GoogleStorage storage;\n+  private final Iterator<URI> uris;\n+  private final long maxListingLength;\n+\n+  private Storage.Objects.List listRequest;\n+  private Objects results;\n+  private URI currentUri;\n+  private String nextPageToken;\n+  private Iterator<StorageObject> storageObjectsIterator;\n+  private StorageObject currentObject;\n+\n+  public ObjectStorageIterator(GoogleStorage storage, Iterator<URI> uris, long maxListingLength)\n+  {\n+    this.storage = storage;\n+    this.uris = uris;\n+    this.maxListingLength = maxListingLength;\n+    this.nextPageToken = null;\n+\n+    prepareNextRequest();\n+    fetchNextBatch();\n+    advanceStorageObject();\n+  }\n+\n+  private void prepareNextRequest()\n+  {\n+    try {\n+      currentUri = uris.next();\n+      String currentBucket = currentUri.getAuthority();\n+      String currentPrefix = StringUtils.maybeRemoveLeadingSlash(currentUri.getPath());\n+      nextPageToken = null;\n+      listRequest = storage.list(currentBucket)\n+                           .setPrefix(currentPrefix)\n+                           .setMaxResults(maxListingLength);\n+\n+    }\n+    catch (IOException io) {\n+      throw new RuntimeException(io);\n+    }\n+  }\n+\n+  private void fetchNextBatch()\n+  {\n+    try {\n+      listRequest.setPageToken(nextPageToken);\n+      results = GoogleUtils.retryGoogleCloudStorageOperation(() -> listRequest.execute());\n+      storageObjectsIterator = results.getItems().iterator();\n+      nextPageToken = results.getNextPageToken();\n+    }\n+    catch (Exception ex) {\n+      throw new RuntimeException(ex);\n+    }\n+  }\n+\n+  @Override\n+  public boolean hasNext()\n+  {\n+    return currentObject != null;\n+  }\n+\n+  @Override\n+  public StorageObject next()\n+  {\n+    if (!hasNext()) {\n+      throw new NoSuchElementException();\n+    }\n+\n+    final StorageObject retVal = currentObject;\n+    advanceStorageObject();\n+    return retVal;\n+  }\n+\n+  private void advanceStorageObject()\n+  {\n+    while (storageObjectsIterator.hasNext() || nextPageToken != null || uris.hasNext()) {\n+      while (storageObjectsIterator.hasNext()) {\n+        final StorageObject next = storageObjectsIterator.next();\n+        // list with prefix can return directories, but they should always end with `/`, ignore them.\n+        // also skips empty objects.\n+        if (!next.getName().endsWith(\"/\") && next.getSize().signum() > 0) {\n+          currentObject = next;\n+          return;\n+        }\n+      }\n+\n+      if (nextPageToken != null) {\n+        fetchNextBatch();\n+      } else if (uris.hasNext()) {\n+        prepareNextRequest();\n+        fetchNextBatch();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02ffb9ad072b6b0732d5c7b52e00834560400673"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIzNDY5Mg==", "bodyText": "Added a test.", "url": "https://github.com/apache/druid/pull/9450#discussion_r387234692", "createdAt": "2020-03-03T19:12:06Z", "author": {"login": "jihoonson"}, "path": "extensions-core/google-extensions/src/main/java/org/apache/druid/storage/google/ObjectStorageIterator.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.storage.google;\n+\n+import com.google.api.services.storage.Storage;\n+import com.google.api.services.storage.model.Objects;\n+import com.google.api.services.storage.model.StorageObject;\n+import org.apache.druid.java.util.common.StringUtils;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+public class ObjectStorageIterator implements Iterator<StorageObject>\n+{\n+  private final GoogleStorage storage;\n+  private final Iterator<URI> uris;\n+  private final long maxListingLength;\n+\n+  private Storage.Objects.List listRequest;\n+  private Objects results;\n+  private URI currentUri;\n+  private String nextPageToken;\n+  private Iterator<StorageObject> storageObjectsIterator;\n+  private StorageObject currentObject;\n+\n+  public ObjectStorageIterator(GoogleStorage storage, Iterator<URI> uris, long maxListingLength)\n+  {\n+    this.storage = storage;\n+    this.uris = uris;\n+    this.maxListingLength = maxListingLength;\n+    this.nextPageToken = null;\n+\n+    prepareNextRequest();\n+    fetchNextBatch();\n+    advanceStorageObject();\n+  }\n+\n+  private void prepareNextRequest()\n+  {\n+    try {\n+      currentUri = uris.next();\n+      String currentBucket = currentUri.getAuthority();\n+      String currentPrefix = StringUtils.maybeRemoveLeadingSlash(currentUri.getPath());\n+      nextPageToken = null;\n+      listRequest = storage.list(currentBucket)\n+                           .setPrefix(currentPrefix)\n+                           .setMaxResults(maxListingLength);\n+\n+    }\n+    catch (IOException io) {\n+      throw new RuntimeException(io);\n+    }\n+  }\n+\n+  private void fetchNextBatch()\n+  {\n+    try {\n+      listRequest.setPageToken(nextPageToken);\n+      results = GoogleUtils.retryGoogleCloudStorageOperation(() -> listRequest.execute());\n+      storageObjectsIterator = results.getItems().iterator();\n+      nextPageToken = results.getNextPageToken();\n+    }\n+    catch (Exception ex) {\n+      throw new RuntimeException(ex);\n+    }\n+  }\n+\n+  @Override\n+  public boolean hasNext()\n+  {\n+    return currentObject != null;\n+  }\n+\n+  @Override\n+  public StorageObject next()\n+  {\n+    if (!hasNext()) {\n+      throw new NoSuchElementException();\n+    }\n+\n+    final StorageObject retVal = currentObject;\n+    advanceStorageObject();\n+    return retVal;\n+  }\n+\n+  private void advanceStorageObject()\n+  {\n+    while (storageObjectsIterator.hasNext() || nextPageToken != null || uris.hasNext()) {\n+      while (storageObjectsIterator.hasNext()) {\n+        final StorageObject next = storageObjectsIterator.next();\n+        // list with prefix can return directories, but they should always end with `/`, ignore them.\n+        // also skips empty objects.\n+        if (!next.getName().endsWith(\"/\") && next.getSize().signum() > 0) {\n+          currentObject = next;\n+          return;\n+        }\n+      }\n+\n+      if (nextPageToken != null) {\n+        fetchNextBatch();\n+      } else if (uris.hasNext()) {\n+        prepareNextRequest();\n+        fetchNextBatch();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIxNTk1Mg=="}, "originalCommit": {"oid": "02ffb9ad072b6b0732d5c7b52e00834560400673"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTAwMjE5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/druid/data/input/impl/LocalInputSourceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTozMToxNFrOFxTjnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTo0MTo0MFrOFxXjgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0NDk1Ng==", "bodyText": "The forbidden apis checks is flagging this: java.io.FileWriter [Uses default charset]", "url": "https://github.com/apache/druid/pull/9450#discussion_r387244956", "createdAt": "2020-03-03T19:31:14Z", "author": {"login": "ccaominh"}, "path": "core/src/test/java/org/apache/druid/data/input/impl/LocalInputSourceTest.java", "diffHunk": "@@ -98,11 +99,19 @@ public void testGetFileIteratorWithBothBaseDirAndDuplicateFilesIteratingFilesOnl\n     File baseDir = temporaryFolder.newFolder();\n     List<File> filesInBaseDir = new ArrayList<>();\n     for (int i = 0; i < 10; i++) {\n-      filesInBaseDir.add(File.createTempFile(\"local-input-source\", \".data\", baseDir));\n+      final File file = File.createTempFile(\"local-input-source\", \".data\", baseDir);\n+      try (FileWriter writer = new FileWriter(file)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c31efc039db8336834a390ef8f41a153635e0eb"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxMDQ2Nw==", "bodyText": "Fixed.", "url": "https://github.com/apache/druid/pull/9450#discussion_r387310467", "createdAt": "2020-03-03T21:41:40Z", "author": {"login": "jihoonson"}, "path": "core/src/test/java/org/apache/druid/data/input/impl/LocalInputSourceTest.java", "diffHunk": "@@ -98,11 +99,19 @@ public void testGetFileIteratorWithBothBaseDirAndDuplicateFilesIteratingFilesOnl\n     File baseDir = temporaryFolder.newFolder();\n     List<File> filesInBaseDir = new ArrayList<>();\n     for (int i = 0; i < 10; i++) {\n-      filesInBaseDir.add(File.createTempFile(\"local-input-source\", \".data\", baseDir));\n+      final File file = File.createTempFile(\"local-input-source\", \".data\", baseDir);\n+      try (FileWriter writer = new FileWriter(file)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0NDk1Ng=="}, "originalCommit": {"oid": "0c31efc039db8336834a390ef8f41a153635e0eb"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTAxODcxOnYy", "diffSide": "RIGHT", "path": "extensions-core/azure-extensions/src/test/java/org/apache/druid/storage/azure/AzureCloudBlobIteratorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTozNjoyOFrOFxTucg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTo0MjowNlrOFxXkXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0NzczMA==", "bodyText": "You'll need to update the pom to add this dependency:\n<dependency>\n  <groupId>com.google.http-client</groupId>\n  <artifactId>google-http-client</artifactId>\n  <scope>test</scope>\n</dependency>\n\nhttps://travis-ci.org/apache/druid/jobs/657595721#L2090", "url": "https://github.com/apache/druid/pull/9450#discussion_r387247730", "createdAt": "2020-03-03T19:36:28Z", "author": {"login": "ccaominh"}, "path": "extensions-core/azure-extensions/src/test/java/org/apache/druid/storage/azure/AzureCloudBlobIteratorTest.java", "diffHunk": "@@ -19,6 +19,7 @@\n \n package org.apache.druid.storage.azure;\n \n+import com.google.api.client.util.Lists;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c31efc039db8336834a390ef8f41a153635e0eb"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxMDY4NQ==", "bodyText": "Ah, this was a mistake. I'm not sure why the Intellij keeps adding a wrong one. Fixed it now.", "url": "https://github.com/apache/druid/pull/9450#discussion_r387310685", "createdAt": "2020-03-03T21:42:06Z", "author": {"login": "jihoonson"}, "path": "extensions-core/azure-extensions/src/test/java/org/apache/druid/storage/azure/AzureCloudBlobIteratorTest.java", "diffHunk": "@@ -19,6 +19,7 @@\n \n package org.apache.druid.storage.azure;\n \n+import com.google.api.client.util.Lists;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0NzczMA=="}, "originalCommit": {"oid": "0c31efc039db8336834a390ef8f41a153635e0eb"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2819, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}