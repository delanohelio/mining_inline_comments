{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MDM3MDkw", "number": 9861, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMDo1MToxMFrOECyGRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMDo1NzozMFrOECyKBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzUzNDE1OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMDo1MToxMFrOGfc8hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMzo0NTo0OFrOGffdUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzMzI4NQ==", "bodyText": "nit: please use Granularities.HOUR.", "url": "https://github.com/apache/druid/pull/9861#discussion_r435633285", "createdAt": "2020-06-05T00:51:10Z", "author": {"login": "jihoonson"}, "path": "indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java", "diffHunk": "@@ -1783,6 +1788,36 @@ public void testIndexTaskWithSingleDimPartitionsSpecThrowingException() throws E\n     task.isReady(createActionClient(task));\n   }\n \n+  @Test\n+  public void testShardSpecSelectionWithNullPartitionDimension()\n+  {\n+    ShardSpec spec1 = new HashBasedNumberedShardSpec(0, 2, null, jsonMapper);\n+    ShardSpec spec2 = new HashBasedNumberedShardSpec(1, 2, null, jsonMapper);\n+\n+    Map<Interval, List<ShardSpec>> shardSpecMap = new HashMap<>();\n+    shardSpecMap.put(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), Lists.newArrayList(spec1, spec2));\n+\n+    IndexTask.ShardSpecs shardSpecs = new IndexTask.ShardSpecs(shardSpecMap, Granularity.fromString(\"HOUR\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34588e6b078c50cf79e7fbd7d95d2521866e1d58"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3NDQ0OQ==", "bodyText": "Fixed", "url": "https://github.com/apache/druid/pull/9861#discussion_r435674449", "createdAt": "2020-06-05T03:45:48Z", "author": {"login": "mghosh4"}, "path": "indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java", "diffHunk": "@@ -1783,6 +1788,36 @@ public void testIndexTaskWithSingleDimPartitionsSpecThrowingException() throws E\n     task.isReady(createActionClient(task));\n   }\n \n+  @Test\n+  public void testShardSpecSelectionWithNullPartitionDimension()\n+  {\n+    ShardSpec spec1 = new HashBasedNumberedShardSpec(0, 2, null, jsonMapper);\n+    ShardSpec spec2 = new HashBasedNumberedShardSpec(1, 2, null, jsonMapper);\n+\n+    Map<Interval, List<ShardSpec>> shardSpecMap = new HashMap<>();\n+    shardSpecMap.put(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), Lists.newArrayList(spec1, spec2));\n+\n+    IndexTask.ShardSpecs shardSpecs = new IndexTask.ShardSpecs(shardSpecMap, Granularity.fromString(\"HOUR\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzMzI4NQ=="}, "originalCommit": {"oid": "34588e6b078c50cf79e7fbd7d95d2521866e1d58"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzUzNTUzOnYy", "diffSide": "RIGHT", "path": "indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMDo1MjowOVrOGfc9dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMzo0NTo1NFrOGffdZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzMzUyNQ==", "bodyText": "The Java convention is the camel case. Please rename these variables to visitorId and clientType.", "url": "https://github.com/apache/druid/pull/9861#discussion_r435633525", "createdAt": "2020-06-05T00:52:09Z", "author": {"login": "jihoonson"}, "path": "indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java", "diffHunk": "@@ -1783,6 +1788,36 @@ public void testIndexTaskWithSingleDimPartitionsSpecThrowingException() throws E\n     task.isReady(createActionClient(task));\n   }\n \n+  @Test\n+  public void testShardSpecSelectionWithNullPartitionDimension()\n+  {\n+    ShardSpec spec1 = new HashBasedNumberedShardSpec(0, 2, null, jsonMapper);\n+    ShardSpec spec2 = new HashBasedNumberedShardSpec(1, 2, null, jsonMapper);\n+\n+    Map<Interval, List<ShardSpec>> shardSpecMap = new HashMap<>();\n+    shardSpecMap.put(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), Lists.newArrayList(spec1, spec2));\n+\n+    IndexTask.ShardSpecs shardSpecs = new IndexTask.ShardSpecs(shardSpecMap, Granularity.fromString(\"HOUR\"));\n+    String visitor_id = \"visitor_id\";\n+    String client_type = \"client_type\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34588e6b078c50cf79e7fbd7d95d2521866e1d58"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3NDQ3MA==", "bodyText": "Fixed", "url": "https://github.com/apache/druid/pull/9861#discussion_r435674470", "createdAt": "2020-06-05T03:45:54Z", "author": {"login": "mghosh4"}, "path": "indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java", "diffHunk": "@@ -1783,6 +1788,36 @@ public void testIndexTaskWithSingleDimPartitionsSpecThrowingException() throws E\n     task.isReady(createActionClient(task));\n   }\n \n+  @Test\n+  public void testShardSpecSelectionWithNullPartitionDimension()\n+  {\n+    ShardSpec spec1 = new HashBasedNumberedShardSpec(0, 2, null, jsonMapper);\n+    ShardSpec spec2 = new HashBasedNumberedShardSpec(1, 2, null, jsonMapper);\n+\n+    Map<Interval, List<ShardSpec>> shardSpecMap = new HashMap<>();\n+    shardSpecMap.put(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), Lists.newArrayList(spec1, spec2));\n+\n+    IndexTask.ShardSpecs shardSpecs = new IndexTask.ShardSpecs(shardSpecMap, Granularity.fromString(\"HOUR\"));\n+    String visitor_id = \"visitor_id\";\n+    String client_type = \"client_type\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzMzUyNQ=="}, "originalCommit": {"oid": "34588e6b078c50cf79e7fbd7d95d2521866e1d58"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzUzODQyOnYy", "diffSide": "RIGHT", "path": "indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMDo1Mzo1MlrOGfc_DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMzo0NjowM1rOGffdeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzMzkzMw==", "bodyText": "Please use Assert.assertSame() instead.", "url": "https://github.com/apache/druid/pull/9861#discussion_r435633933", "createdAt": "2020-06-05T00:53:52Z", "author": {"login": "jihoonson"}, "path": "indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java", "diffHunk": "@@ -1783,6 +1788,36 @@ public void testIndexTaskWithSingleDimPartitionsSpecThrowingException() throws E\n     task.isReady(createActionClient(task));\n   }\n \n+  @Test\n+  public void testShardSpecSelectionWithNullPartitionDimension()\n+  {\n+    ShardSpec spec1 = new HashBasedNumberedShardSpec(0, 2, null, jsonMapper);\n+    ShardSpec spec2 = new HashBasedNumberedShardSpec(1, 2, null, jsonMapper);\n+\n+    Map<Interval, List<ShardSpec>> shardSpecMap = new HashMap<>();\n+    shardSpecMap.put(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), Lists.newArrayList(spec1, spec2));\n+\n+    IndexTask.ShardSpecs shardSpecs = new IndexTask.ShardSpecs(shardSpecMap, Granularity.fromString(\"HOUR\"));\n+    String visitor_id = \"visitor_id\";\n+    String client_type = \"client_type\";\n+    long timestamp1 = DateTimes.of(\"2014-01-01T00:00:00.000Z\").getMillis();\n+    InputRow row1 = new MapBasedInputRow(timestamp1,\n+        Lists.newArrayList(visitor_id, client_type),\n+        ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n+    );\n+\n+    long timestamp2 = DateTimes.of(\"2014-01-01T00:30:20.456Z\").getMillis();\n+    InputRow row2 = new MapBasedInputRow(timestamp2,\n+        Lists.newArrayList(visitor_id, client_type),\n+        ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n+    );\n+\n+    ShardSpec spec3 = shardSpecs.getShardSpec(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), row1);\n+    ShardSpec spec4 = shardSpecs.getShardSpec(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), row2);\n+\n+    Assert.assertEquals(true, spec3 == spec4);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34588e6b078c50cf79e7fbd7d95d2521866e1d58"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3NDQ5MA==", "bodyText": "Fixed", "url": "https://github.com/apache/druid/pull/9861#discussion_r435674490", "createdAt": "2020-06-05T03:46:03Z", "author": {"login": "mghosh4"}, "path": "indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java", "diffHunk": "@@ -1783,6 +1788,36 @@ public void testIndexTaskWithSingleDimPartitionsSpecThrowingException() throws E\n     task.isReady(createActionClient(task));\n   }\n \n+  @Test\n+  public void testShardSpecSelectionWithNullPartitionDimension()\n+  {\n+    ShardSpec spec1 = new HashBasedNumberedShardSpec(0, 2, null, jsonMapper);\n+    ShardSpec spec2 = new HashBasedNumberedShardSpec(1, 2, null, jsonMapper);\n+\n+    Map<Interval, List<ShardSpec>> shardSpecMap = new HashMap<>();\n+    shardSpecMap.put(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), Lists.newArrayList(spec1, spec2));\n+\n+    IndexTask.ShardSpecs shardSpecs = new IndexTask.ShardSpecs(shardSpecMap, Granularity.fromString(\"HOUR\"));\n+    String visitor_id = \"visitor_id\";\n+    String client_type = \"client_type\";\n+    long timestamp1 = DateTimes.of(\"2014-01-01T00:00:00.000Z\").getMillis();\n+    InputRow row1 = new MapBasedInputRow(timestamp1,\n+        Lists.newArrayList(visitor_id, client_type),\n+        ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n+    );\n+\n+    long timestamp2 = DateTimes.of(\"2014-01-01T00:30:20.456Z\").getMillis();\n+    InputRow row2 = new MapBasedInputRow(timestamp2,\n+        Lists.newArrayList(visitor_id, client_type),\n+        ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n+    );\n+\n+    ShardSpec spec3 = shardSpecs.getShardSpec(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), row1);\n+    ShardSpec spec4 = shardSpecs.getShardSpec(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), row2);\n+\n+    Assert.assertEquals(true, spec3 == spec4);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzMzkzMw=="}, "originalCommit": {"oid": "34588e6b078c50cf79e7fbd7d95d2521866e1d58"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzU0MDY2OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMDo1NToyMFrOGfdAXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNzozMDoyN1rOGf3InQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzNDI2OQ==", "bodyText": "Could you please add a test that shardSpecs.getShardSpec() returns different shardSpecs for two rows when they have exactly same values but different timestamps?", "url": "https://github.com/apache/druid/pull/9861#discussion_r435634269", "createdAt": "2020-06-05T00:55:20Z", "author": {"login": "jihoonson"}, "path": "indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java", "diffHunk": "@@ -1783,6 +1788,36 @@ public void testIndexTaskWithSingleDimPartitionsSpecThrowingException() throws E\n     task.isReady(createActionClient(task));\n   }\n \n+  @Test\n+  public void testShardSpecSelectionWithNullPartitionDimension()\n+  {\n+    ShardSpec spec1 = new HashBasedNumberedShardSpec(0, 2, null, jsonMapper);\n+    ShardSpec spec2 = new HashBasedNumberedShardSpec(1, 2, null, jsonMapper);\n+\n+    Map<Interval, List<ShardSpec>> shardSpecMap = new HashMap<>();\n+    shardSpecMap.put(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), Lists.newArrayList(spec1, spec2));\n+\n+    IndexTask.ShardSpecs shardSpecs = new IndexTask.ShardSpecs(shardSpecMap, Granularity.fromString(\"HOUR\"));\n+    String visitor_id = \"visitor_id\";\n+    String client_type = \"client_type\";\n+    long timestamp1 = DateTimes.of(\"2014-01-01T00:00:00.000Z\").getMillis();\n+    InputRow row1 = new MapBasedInputRow(timestamp1,\n+        Lists.newArrayList(visitor_id, client_type),\n+        ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n+    );\n+\n+    long timestamp2 = DateTimes.of(\"2014-01-01T00:30:20.456Z\").getMillis();\n+    InputRow row2 = new MapBasedInputRow(timestamp2,\n+        Lists.newArrayList(visitor_id, client_type),\n+        ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n+    );\n+\n+    ShardSpec spec3 = shardSpecs.getShardSpec(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), row1);\n+    ShardSpec spec4 = shardSpecs.getShardSpec(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), row2);\n+\n+    Assert.assertEquals(true, spec3 == spec4);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34588e6b078c50cf79e7fbd7d95d2521866e1d58"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA2MjM2NQ==", "bodyText": "Done", "url": "https://github.com/apache/druid/pull/9861#discussion_r436062365", "createdAt": "2020-06-05T17:30:27Z", "author": {"login": "mghosh4"}, "path": "indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java", "diffHunk": "@@ -1783,6 +1788,36 @@ public void testIndexTaskWithSingleDimPartitionsSpecThrowingException() throws E\n     task.isReady(createActionClient(task));\n   }\n \n+  @Test\n+  public void testShardSpecSelectionWithNullPartitionDimension()\n+  {\n+    ShardSpec spec1 = new HashBasedNumberedShardSpec(0, 2, null, jsonMapper);\n+    ShardSpec spec2 = new HashBasedNumberedShardSpec(1, 2, null, jsonMapper);\n+\n+    Map<Interval, List<ShardSpec>> shardSpecMap = new HashMap<>();\n+    shardSpecMap.put(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), Lists.newArrayList(spec1, spec2));\n+\n+    IndexTask.ShardSpecs shardSpecs = new IndexTask.ShardSpecs(shardSpecMap, Granularity.fromString(\"HOUR\"));\n+    String visitor_id = \"visitor_id\";\n+    String client_type = \"client_type\";\n+    long timestamp1 = DateTimes.of(\"2014-01-01T00:00:00.000Z\").getMillis();\n+    InputRow row1 = new MapBasedInputRow(timestamp1,\n+        Lists.newArrayList(visitor_id, client_type),\n+        ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n+    );\n+\n+    long timestamp2 = DateTimes.of(\"2014-01-01T00:30:20.456Z\").getMillis();\n+    InputRow row2 = new MapBasedInputRow(timestamp2,\n+        Lists.newArrayList(visitor_id, client_type),\n+        ImmutableMap.of(visitor_id, \"0\", client_type, \"iphone\")\n+    );\n+\n+    ShardSpec spec3 = shardSpecs.getShardSpec(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), row1);\n+    ShardSpec spec4 = shardSpecs.getShardSpec(Intervals.of(\"2014-01-01T00:00:00.000Z/2014-01-02T00:00:00.000Z\"), row2);\n+\n+    Assert.assertEquals(true, spec3 == spec4);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzNDI2OQ=="}, "originalCommit": {"oid": "34588e6b078c50cf79e7fbd7d95d2521866e1d58"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzU0Mzc0OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMDo1NzozMFrOGfdCSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMzo0NjoxMVrOGffdlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzNDc2Mg==", "bodyText": "Thank you for adding a unit test! This test doesn't seem testing the IndexTask but testing ShardSpecs. Would you please move the ShardSpecs out of IndexTask and add a new class ShardSpecsTest? Then we can move this test to ShardSpecsTest.", "url": "https://github.com/apache/druid/pull/9861#discussion_r435634762", "createdAt": "2020-06-05T00:57:30Z", "author": {"login": "jihoonson"}, "path": "indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java", "diffHunk": "@@ -1783,6 +1788,36 @@ public void testIndexTaskWithSingleDimPartitionsSpecThrowingException() throws E\n     task.isReady(createActionClient(task));\n   }\n \n+  @Test\n+  public void testShardSpecSelectionWithNullPartitionDimension()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34588e6b078c50cf79e7fbd7d95d2521866e1d58"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY3NDUxNg==", "bodyText": "Fixed", "url": "https://github.com/apache/druid/pull/9861#discussion_r435674516", "createdAt": "2020-06-05T03:46:11Z", "author": {"login": "mghosh4"}, "path": "indexing-service/src/test/java/org/apache/druid/indexing/common/task/IndexTaskTest.java", "diffHunk": "@@ -1783,6 +1788,36 @@ public void testIndexTaskWithSingleDimPartitionsSpecThrowingException() throws E\n     task.isReady(createActionClient(task));\n   }\n \n+  @Test\n+  public void testShardSpecSelectionWithNullPartitionDimension()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzNDc2Mg=="}, "originalCommit": {"oid": "34588e6b078c50cf79e7fbd7d95d2521866e1d58"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2433, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}