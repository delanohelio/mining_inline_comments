{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwMDU5Nzg2", "number": 10412, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODoyNDowNVrOEp6ILA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQwNzowNzowMVrOFgNiqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzc5NDM2OnYy", "diffSide": "RIGHT", "path": "extensions-contrib/prometheus-emitter/src/main/resources/defaultMetrics.json", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODoyNDowNVrOHb3c7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwMDo0MzoxNlrOHcEYPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4MjEyNw==", "bodyText": "Are these conversion a good idea?\nIt would mean that these metrics will be slightly different from how they are described in this documentation. https://druid.apache.org/docs/latest/operations/metrics.html", "url": "https://github.com/apache/druid/pull/10412#discussion_r498982127", "createdAt": "2020-10-02T18:24:05Z", "author": {"login": "jinfwhuang"}, "path": "extensions-contrib/prometheus-emitter/src/main/resources/defaultMetrics.json", "diffHunk": "@@ -0,0 +1,128 @@\n+{\n+  \"query/time\" : { \"dimensions\" : [\"dataSource\", \"type\"], \"type\" : \"timer\", \"conversionFactor\": 1000.0, \"help\":  \"Seconds taken to complete a query.\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE1Nzk2OQ==", "bodyText": "https://prometheus.io/docs/practices/naming/#base-units\nIt's coming from prometheus common practice.\ncc @michaelschiff", "url": "https://github.com/apache/druid/pull/10412#discussion_r499157969", "createdAt": "2020-10-03T15:39:04Z", "author": {"login": "Tiaaa"}, "path": "extensions-contrib/prometheus-emitter/src/main/resources/defaultMetrics.json", "diffHunk": "@@ -0,0 +1,128 @@\n+{\n+  \"query/time\" : { \"dimensions\" : [\"dataSource\", \"type\"], \"type\" : \"timer\", \"conversionFactor\": 1000.0, \"help\":  \"Seconds taken to complete a query.\"},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4MjEyNw=="}, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE5MzkxNg==", "bodyText": "Okay. I guess there are tradeoffs with either choices. Maybe a good way to do is that for those converted, we can just put the unit in the prometheus names. Otherwise, if we refer to the druid metrics doc, we would find the name of the metrics to be documented in a different unit.", "url": "https://github.com/apache/druid/pull/10412#discussion_r499193916", "createdAt": "2020-10-04T00:43:16Z", "author": {"login": "jinfwhuang"}, "path": "extensions-contrib/prometheus-emitter/src/main/resources/defaultMetrics.json", "diffHunk": "@@ -0,0 +1,128 @@\n+{\n+  \"query/time\" : { \"dimensions\" : [\"dataSource\", \"type\"], \"type\" : \"timer\", \"conversionFactor\": 1000.0, \"help\":  \"Seconds taken to complete a query.\"},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4MjEyNw=="}, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTAzMTA1OnYy", "diffSide": "RIGHT", "path": "extensions-contrib/prometheus-emitter/src/main/resources/defaultMetrics.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMTowMDoyMlrOHpWRGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMjoxNzo0NVrOHrylKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzExODQ4OQ==", "bodyText": "potential bug, deltas can be negative but Prometheus counter accepts only non-negative increment.", "url": "https://github.com/apache/druid/pull/10412#discussion_r513118489", "createdAt": "2020-10-28T01:00:22Z", "author": {"login": "ArvinZheng"}, "path": "extensions-contrib/prometheus-emitter/src/main/resources/defaultMetrics.json", "diffHunk": "@@ -0,0 +1,128 @@\n+{\n+  \"query/time\" : { \"dimensions\" : [\"dataSource\", \"type\"], \"type\" : \"timer\", \"conversionFactor\": 1000.0, \"help\":  \"Seconds taken to complete a query.\"},\n+  \"query/bytes\" : { \"dimensions\" : [\"dataSource\", \"type\"], \"type\" : \"count\", \"help\":  \"Number of bytes returned in query response.\"},\n+  \"query/node/time\" : { \"dimensions\" : [\"server\"], \"type\" : \"timer\", \"conversionFactor\": 1000.0, \"help\": \"Seconds taken to query individual historical/realtime processes.\"},\n+  \"query/node/ttfb\" : { \"dimensions\" : [\"server\"], \"type\" : \"timer\", \"help\":  \"Time to first byte. Seconds elapsed until Broker starts receiving the response from individual historical/realtime processes.\"},\n+  \"query/node/bytes\" : { \"dimensions\" : [\"server\"], \"type\" : \"count\", \"help\": \"Number of bytes returned from querying individual historical/realtime processes.\"},\n+  \"query/node/backpressure\": { \"dimensions\" : [\"server\"], \"type\" : \"timer\", \"help\": \"Seconds that the channel to this process has spent suspended due to backpressure.\"},\n+  \"query/intervalChunk/time\" : { \"dimensions\" : [], \"type\" : \"timer\", \"conversionFactor\": 1000.0, \"help\": \"Only emitted if interval chunking is enabled. Milliseconds required to query an interval chunk. This metric is deprecated and will be removed in the future because interval chunking is deprecated.\"},\n+\n+  \"query/segment/time\" : { \"dimensions\" : [], \"type\" : \"timer\", \"conversionFactor\": 1000.0, \"help\": \"Seconds taken to query individual segment. Includes time to page in the segment from disk.\"},\n+  \"query/wait/time\" : { \"dimensions\" : [], \"type\" : \"timer\", \"conversionFactor\": 1000.0, \"help\": \"Seconds spent waiting for a segment to be scanned.\"},\n+  \"segment/scan/pending\" : { \"dimensions\" : [], \"type\" : \"gauge\", \"help\": \"Number of segments in queue waiting to be scanned.\"},\n+  \"query/segmentAndCache/time\" : { \"dimensions\" : [], \"type\" : \"timer\", \"conversionFactor\": 1000.0, \"help\": \"Seconds taken to query individual segment or hit the cache (if it is enabled on the Historical process).\"},\n+  \"query/cpu/time\" : { \"dimensions\" : [\"dataSource\", \"type\"], \"type\" : \"timer\", \"conversionFactor\": \"1000000\", \"help\": \"Seconds of CPU time taken to complete a query\"},\n+\n+  \"query/count\" : { \"dimensions\" : [], \"type\" : \"count\", \"help\": \"Number of total queries\" },\n+  \"query/success/count\" : { \"dimensions\" : [], \"type\" : \"count\", \"help\": \"Number of queries successfully processed\"},\n+  \"query/failed/count\" : { \"dimensions\" : [], \"type\" : \"count\", \"help\": \"Number of failed queries\"},\n+  \"query/interrupted/count\" : { \"dimensions\" : [], \"type\" : \"count\", \"help\": \"Number of queries interrupted due to cancellation or timeout\"},\n+\n+  \"query/cache/delta/numEntries\" : { \"dimensions\" : [], \"type\" : \"count\", \"help\": \"Number of entries in cache\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY3OTUzMA==", "bodyText": "Will change to guage. This only happens in since last emission we got more entries evicted than added right.", "url": "https://github.com/apache/druid/pull/10412#discussion_r515679530", "createdAt": "2020-11-01T22:17:45Z", "author": {"login": "Tiaaa"}, "path": "extensions-contrib/prometheus-emitter/src/main/resources/defaultMetrics.json", "diffHunk": "@@ -0,0 +1,128 @@\n+{\n+  \"query/time\" : { \"dimensions\" : [\"dataSource\", \"type\"], \"type\" : \"timer\", \"conversionFactor\": 1000.0, \"help\":  \"Seconds taken to complete a query.\"},\n+  \"query/bytes\" : { \"dimensions\" : [\"dataSource\", \"type\"], \"type\" : \"count\", \"help\":  \"Number of bytes returned in query response.\"},\n+  \"query/node/time\" : { \"dimensions\" : [\"server\"], \"type\" : \"timer\", \"conversionFactor\": 1000.0, \"help\": \"Seconds taken to query individual historical/realtime processes.\"},\n+  \"query/node/ttfb\" : { \"dimensions\" : [\"server\"], \"type\" : \"timer\", \"help\":  \"Time to first byte. Seconds elapsed until Broker starts receiving the response from individual historical/realtime processes.\"},\n+  \"query/node/bytes\" : { \"dimensions\" : [\"server\"], \"type\" : \"count\", \"help\": \"Number of bytes returned from querying individual historical/realtime processes.\"},\n+  \"query/node/backpressure\": { \"dimensions\" : [\"server\"], \"type\" : \"timer\", \"help\": \"Seconds that the channel to this process has spent suspended due to backpressure.\"},\n+  \"query/intervalChunk/time\" : { \"dimensions\" : [], \"type\" : \"timer\", \"conversionFactor\": 1000.0, \"help\": \"Only emitted if interval chunking is enabled. Milliseconds required to query an interval chunk. This metric is deprecated and will be removed in the future because interval chunking is deprecated.\"},\n+\n+  \"query/segment/time\" : { \"dimensions\" : [], \"type\" : \"timer\", \"conversionFactor\": 1000.0, \"help\": \"Seconds taken to query individual segment. Includes time to page in the segment from disk.\"},\n+  \"query/wait/time\" : { \"dimensions\" : [], \"type\" : \"timer\", \"conversionFactor\": 1000.0, \"help\": \"Seconds spent waiting for a segment to be scanned.\"},\n+  \"segment/scan/pending\" : { \"dimensions\" : [], \"type\" : \"gauge\", \"help\": \"Number of segments in queue waiting to be scanned.\"},\n+  \"query/segmentAndCache/time\" : { \"dimensions\" : [], \"type\" : \"timer\", \"conversionFactor\": 1000.0, \"help\": \"Seconds taken to query individual segment or hit the cache (if it is enabled on the Historical process).\"},\n+  \"query/cpu/time\" : { \"dimensions\" : [\"dataSource\", \"type\"], \"type\" : \"timer\", \"conversionFactor\": \"1000000\", \"help\": \"Seconds of CPU time taken to complete a query\"},\n+\n+  \"query/count\" : { \"dimensions\" : [], \"type\" : \"count\", \"help\": \"Number of total queries\" },\n+  \"query/success/count\" : { \"dimensions\" : [], \"type\" : \"count\", \"help\": \"Number of queries successfully processed\"},\n+  \"query/failed/count\" : { \"dimensions\" : [], \"type\" : \"count\", \"help\": \"Number of failed queries\"},\n+  \"query/interrupted/count\" : { \"dimensions\" : [], \"type\" : \"count\", \"help\": \"Number of queries interrupted due to cancellation or timeout\"},\n+\n+  \"query/cache/delta/numEntries\" : { \"dimensions\" : [], \"type\" : \"count\", \"help\": \"Number of entries in cache\"},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzExODQ4OQ=="}, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTA3MjU4OnYy", "diffSide": "RIGHT", "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/PrometheusEmitterConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMToyMzowOFrOHpWo8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMToyMzowOFrOHpWo8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyNDU5Mw==", "bodyText": "final, and static maybe, so that we can reuse this object/regex in other places", "url": "https://github.com/apache/druid/pull/10412#discussion_r513124593", "createdAt": "2020-10-28T01:23:08Z", "author": {"login": "ArvinZheng"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/PrometheusEmitterConfig.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Preconditions;\n+\n+import javax.annotation.Nullable;\n+import javax.xml.ws.BindingType;\n+import java.util.regex.Pattern;\n+\n+/**\n+ *\n+ */\n+public class PrometheusEmitterConfig\n+{\n+\n+  Pattern pattern = Pattern.compile(\"[a-zA-Z_:][a-zA-Z0-9_:]*\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTA3NTU2OnYy", "diffSide": "RIGHT", "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/PrometheusEmitter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMToyNDozOFrOHpWqtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNToxMzoxMVrOHsgejw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyNTA0NQ==", "bodyText": "Reuse the pattern in PrometheusEmitterConfig", "url": "https://github.com/apache/druid/pull/10412#discussion_r513125045", "createdAt": "2020-10-28T01:24:38Z", "author": {"login": "ArvinZheng"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/PrometheusEmitter.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.exporter.HTTPServer;\n+import io.prometheus.client.exporter.PushGateway;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.java.util.emitter.core.Emitter;\n+import org.apache.druid.java.util.emitter.core.Event;\n+import org.apache.druid.java.util.emitter.service.ServiceMetricEvent;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ *\n+ */\n+public class PrometheusEmitter implements Emitter\n+{\n+\n+  private static final Logger log = new Logger(PrometheusEmitter.class);\n+  private final Metrics metrics;\n+  private final PrometheusEmitterConfig config;\n+  private final PrometheusEmitterConfig.Strategy strategy;\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z0-9_][^a-zA-Z0-9_]*\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY3OTc1MA==", "bodyText": "These two is not the same regex. The one in PromtheusEmitterConfig is for namespace regex that need to start with alphabetic character.", "url": "https://github.com/apache/druid/pull/10412#discussion_r515679750", "createdAt": "2020-11-01T22:19:53Z", "author": {"login": "Tiaaa"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/PrometheusEmitter.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.exporter.HTTPServer;\n+import io.prometheus.client.exporter.PushGateway;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.java.util.emitter.core.Emitter;\n+import org.apache.druid.java.util.emitter.core.Event;\n+import org.apache.druid.java.util.emitter.service.ServiceMetricEvent;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ *\n+ */\n+public class PrometheusEmitter implements Emitter\n+{\n+\n+  private static final Logger log = new Logger(PrometheusEmitter.class);\n+  private final Metrics metrics;\n+  private final PrometheusEmitterConfig config;\n+  private final PrometheusEmitterConfig.Strategy strategy;\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z0-9_][^a-zA-Z0-9_]*\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyNTA0NQ=="}, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMTUwMw==", "bodyText": "Oh, sorry, my bad.", "url": "https://github.com/apache/druid/pull/10412#discussion_r516431503", "createdAt": "2020-11-03T05:13:11Z", "author": {"login": "ArvinZheng"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/PrometheusEmitter.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.exporter.HTTPServer;\n+import io.prometheus.client.exporter.PushGateway;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.java.util.emitter.core.Emitter;\n+import org.apache.druid.java.util.emitter.core.Event;\n+import org.apache.druid.java.util.emitter.service.ServiceMetricEvent;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ *\n+ */\n+public class PrometheusEmitter implements Emitter\n+{\n+\n+  private static final Logger log = new Logger(PrometheusEmitter.class);\n+  private final Metrics metrics;\n+  private final PrometheusEmitterConfig config;\n+  private final PrometheusEmitterConfig.Strategy strategy;\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z0-9_][^a-zA-Z0-9_]*\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyNTA0NQ=="}, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTA3NjA2OnYy", "diffSide": "RIGHT", "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/Metrics.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMToyNDo1MVrOHpWrBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMjoyNDoxN1rOHryoEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyNTEyNQ==", "bodyText": "Reuse the pattern in PrometheusEmitterConfig", "url": "https://github.com/apache/druid/pull/10412#discussion_r513125125", "createdAt": "2020-10-28T01:24:51Z", "author": {"login": "ArvinZheng"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/Metrics.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Strings;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.SimpleCollector;\n+import org.apache.druid.java.util.common.ISE;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.SortedSet;\n+import java.util.regex.Pattern;\n+\n+public class Metrics\n+{\n+\n+  private static final Logger log = new Logger(Metrics.class);\n+  private final Map<String, DimensionsAndCollector> map = new HashMap<>();\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z_:][^a-zA-Z0-9_:]*\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MDI3Mg==", "bodyText": "used the one in PrometheusEmitter.java", "url": "https://github.com/apache/druid/pull/10412#discussion_r515680272", "createdAt": "2020-11-01T22:24:17Z", "author": {"login": "Tiaaa"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/Metrics.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Strings;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.SimpleCollector;\n+import org.apache.druid.java.util.common.ISE;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.SortedSet;\n+import java.util.regex.Pattern;\n+\n+public class Metrics\n+{\n+\n+  private static final Logger log = new Logger(Metrics.class);\n+  private final Map<String, DimensionsAndCollector> map = new HashMap<>();\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z_:][^a-zA-Z0-9_:]*\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyNTEyNQ=="}, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTM0OTM0OnYy", "diffSide": "RIGHT", "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/Metrics.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMzo1Mzo1N1rOHpZHQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMjoyNToxOFrOHryonw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NTEyMg==", "bodyText": "maybe we can rename the map to registeredMetrics and then we could rename this method to getRegisteredMetrics(), I feel like this will be easier to read", "url": "https://github.com/apache/druid/pull/10412#discussion_r513165122", "createdAt": "2020-10-28T03:53:57Z", "author": {"login": "ArvinZheng"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/Metrics.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Strings;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.SimpleCollector;\n+import org.apache.druid.java.util.common.ISE;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.SortedSet;\n+import java.util.regex.Pattern;\n+\n+public class Metrics\n+{\n+\n+  private static final Logger log = new Logger(Metrics.class);\n+  private final Map<String, DimensionsAndCollector> map = new HashMap<>();\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z_:][^a-zA-Z0-9_:]*\");\n+\n+  public DimensionsAndCollector getByName(String name, String service)\n+  {\n+    if (map.containsKey(name)) {\n+      return map.get(name);\n+    } else if (map.containsKey(service + \"_\" + name)) {\n+      return map.get(service + \"_\" + name);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public Metrics(String namespace, String path)\n+  {\n+    Map<String, Metric> metrics = readMap(path);\n+    for (Map.Entry<String, Metric> entry : metrics.entrySet()) {\n+      String name = entry.getKey();\n+      Metric metric = entry.getValue();\n+      Metric.Type type = metric.type;\n+      String[] dimensions = metric.dimensions.toArray(new String[0]);\n+      String formattedName = pattern.matcher(StringUtils.toLowerCase(name)).replaceAll(\"_\");\n+      SimpleCollector collector = null;\n+      if (Metric.Type.count.equals(type)) {\n+        collector = new Counter.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .help(metric.help)\n+            .register();\n+      } else if (Metric.Type.gauge.equals(type)) {\n+        collector = new Gauge.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .help(metric.help)\n+            .register();\n+      } else if (Metric.Type.timer.equals(type)) {\n+        collector = new Histogram.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .buckets(.1, .25, .5, .75, 1, 2.5, 5, 7.5, 10, 30, 60, 120, 300)\n+            .help(metric.help)\n+            .register();\n+      } else {\n+        log.error(\"Unrecognized metric type [%s]\", type);\n+      }\n+\n+      if (collector != null) {\n+        map.put(name, new DimensionsAndCollector(dimensions, collector, metric.conversionFactor));\n+      }\n+    }\n+\n+  }\n+\n+  private Map<String, Metric> readMap(String path)\n+  {\n+    try {\n+      InputStream is;\n+      if (Strings.isNullOrEmpty(path)) {\n+        log.info(\"Using default metric dimension and types\");\n+        is = this.getClass().getClassLoader().getResourceAsStream(\"defaultMetrics.json\");\n+      } else {\n+        log.info(\"Using metric dimensions at types at [%s]\", path);\n+        is = new FileInputStream(new File(path));\n+      }\n+      return mapper.readerFor(new TypeReference<Map<String, Metric>>()\n+      {\n+      }).readValue(is);\n+    }\n+    catch (IOException e) {\n+      throw new ISE(e, \"Failed to parse metric dimensions and types\");\n+    }\n+  }\n+\n+  public Map<String, DimensionsAndCollector> getMap()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MDQxNQ==", "bodyText": "sure", "url": "https://github.com/apache/druid/pull/10412#discussion_r515680415", "createdAt": "2020-11-01T22:25:18Z", "author": {"login": "Tiaaa"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/Metrics.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Strings;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.SimpleCollector;\n+import org.apache.druid.java.util.common.ISE;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.SortedSet;\n+import java.util.regex.Pattern;\n+\n+public class Metrics\n+{\n+\n+  private static final Logger log = new Logger(Metrics.class);\n+  private final Map<String, DimensionsAndCollector> map = new HashMap<>();\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z_:][^a-zA-Z0-9_:]*\");\n+\n+  public DimensionsAndCollector getByName(String name, String service)\n+  {\n+    if (map.containsKey(name)) {\n+      return map.get(name);\n+    } else if (map.containsKey(service + \"_\" + name)) {\n+      return map.get(service + \"_\" + name);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public Metrics(String namespace, String path)\n+  {\n+    Map<String, Metric> metrics = readMap(path);\n+    for (Map.Entry<String, Metric> entry : metrics.entrySet()) {\n+      String name = entry.getKey();\n+      Metric metric = entry.getValue();\n+      Metric.Type type = metric.type;\n+      String[] dimensions = metric.dimensions.toArray(new String[0]);\n+      String formattedName = pattern.matcher(StringUtils.toLowerCase(name)).replaceAll(\"_\");\n+      SimpleCollector collector = null;\n+      if (Metric.Type.count.equals(type)) {\n+        collector = new Counter.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .help(metric.help)\n+            .register();\n+      } else if (Metric.Type.gauge.equals(type)) {\n+        collector = new Gauge.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .help(metric.help)\n+            .register();\n+      } else if (Metric.Type.timer.equals(type)) {\n+        collector = new Histogram.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .buckets(.1, .25, .5, .75, 1, 2.5, 5, 7.5, 10, 30, 60, 120, 300)\n+            .help(metric.help)\n+            .register();\n+      } else {\n+        log.error(\"Unrecognized metric type [%s]\", type);\n+      }\n+\n+      if (collector != null) {\n+        map.put(name, new DimensionsAndCollector(dimensions, collector, metric.conversionFactor));\n+      }\n+    }\n+\n+  }\n+\n+  private Map<String, Metric> readMap(String path)\n+  {\n+    try {\n+      InputStream is;\n+      if (Strings.isNullOrEmpty(path)) {\n+        log.info(\"Using default metric dimension and types\");\n+        is = this.getClass().getClassLoader().getResourceAsStream(\"defaultMetrics.json\");\n+      } else {\n+        log.info(\"Using metric dimensions at types at [%s]\", path);\n+        is = new FileInputStream(new File(path));\n+      }\n+      return mapper.readerFor(new TypeReference<Map<String, Metric>>()\n+      {\n+      }).readValue(is);\n+    }\n+    catch (IOException e) {\n+      throw new ISE(e, \"Failed to parse metric dimensions and types\");\n+    }\n+  }\n+\n+  public Map<String, DimensionsAndCollector> getMap()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NTEyMg=="}, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTM1NDE1OnYy", "diffSide": "RIGHT", "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/Metrics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMzo1NjozN1rOHpZJ5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMzo1NjozN1rOHpZJ5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NTc5OQ==", "bodyText": "maybe readConfig or loadConfig?", "url": "https://github.com/apache/druid/pull/10412#discussion_r513165799", "createdAt": "2020-10-28T03:56:37Z", "author": {"login": "ArvinZheng"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/Metrics.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Strings;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.SimpleCollector;\n+import org.apache.druid.java.util.common.ISE;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.SortedSet;\n+import java.util.regex.Pattern;\n+\n+public class Metrics\n+{\n+\n+  private static final Logger log = new Logger(Metrics.class);\n+  private final Map<String, DimensionsAndCollector> map = new HashMap<>();\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z_:][^a-zA-Z0-9_:]*\");\n+\n+  public DimensionsAndCollector getByName(String name, String service)\n+  {\n+    if (map.containsKey(name)) {\n+      return map.get(name);\n+    } else if (map.containsKey(service + \"_\" + name)) {\n+      return map.get(service + \"_\" + name);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public Metrics(String namespace, String path)\n+  {\n+    Map<String, Metric> metrics = readMap(path);\n+    for (Map.Entry<String, Metric> entry : metrics.entrySet()) {\n+      String name = entry.getKey();\n+      Metric metric = entry.getValue();\n+      Metric.Type type = metric.type;\n+      String[] dimensions = metric.dimensions.toArray(new String[0]);\n+      String formattedName = pattern.matcher(StringUtils.toLowerCase(name)).replaceAll(\"_\");\n+      SimpleCollector collector = null;\n+      if (Metric.Type.count.equals(type)) {\n+        collector = new Counter.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .help(metric.help)\n+            .register();\n+      } else if (Metric.Type.gauge.equals(type)) {\n+        collector = new Gauge.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .help(metric.help)\n+            .register();\n+      } else if (Metric.Type.timer.equals(type)) {\n+        collector = new Histogram.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .buckets(.1, .25, .5, .75, 1, 2.5, 5, 7.5, 10, 30, 60, 120, 300)\n+            .help(metric.help)\n+            .register();\n+      } else {\n+        log.error(\"Unrecognized metric type [%s]\", type);\n+      }\n+\n+      if (collector != null) {\n+        map.put(name, new DimensionsAndCollector(dimensions, collector, metric.conversionFactor));\n+      }\n+    }\n+\n+  }\n+\n+  private Map<String, Metric> readMap(String path)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTM1ODQ5OnYy", "diffSide": "RIGHT", "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/Metrics.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMzo1OToyM1rOHpZMXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMjoyNjoyN1rOHrypFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NjQyOQ==", "bodyText": "typo, metric dimensions at types -> metric dimensions and types, maybe we could replace it by metric configuration", "url": "https://github.com/apache/druid/pull/10412#discussion_r513166429", "createdAt": "2020-10-28T03:59:23Z", "author": {"login": "ArvinZheng"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/Metrics.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Strings;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.SimpleCollector;\n+import org.apache.druid.java.util.common.ISE;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.SortedSet;\n+import java.util.regex.Pattern;\n+\n+public class Metrics\n+{\n+\n+  private static final Logger log = new Logger(Metrics.class);\n+  private final Map<String, DimensionsAndCollector> map = new HashMap<>();\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z_:][^a-zA-Z0-9_:]*\");\n+\n+  public DimensionsAndCollector getByName(String name, String service)\n+  {\n+    if (map.containsKey(name)) {\n+      return map.get(name);\n+    } else if (map.containsKey(service + \"_\" + name)) {\n+      return map.get(service + \"_\" + name);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public Metrics(String namespace, String path)\n+  {\n+    Map<String, Metric> metrics = readMap(path);\n+    for (Map.Entry<String, Metric> entry : metrics.entrySet()) {\n+      String name = entry.getKey();\n+      Metric metric = entry.getValue();\n+      Metric.Type type = metric.type;\n+      String[] dimensions = metric.dimensions.toArray(new String[0]);\n+      String formattedName = pattern.matcher(StringUtils.toLowerCase(name)).replaceAll(\"_\");\n+      SimpleCollector collector = null;\n+      if (Metric.Type.count.equals(type)) {\n+        collector = new Counter.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .help(metric.help)\n+            .register();\n+      } else if (Metric.Type.gauge.equals(type)) {\n+        collector = new Gauge.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .help(metric.help)\n+            .register();\n+      } else if (Metric.Type.timer.equals(type)) {\n+        collector = new Histogram.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .buckets(.1, .25, .5, .75, 1, 2.5, 5, 7.5, 10, 30, 60, 120, 300)\n+            .help(metric.help)\n+            .register();\n+      } else {\n+        log.error(\"Unrecognized metric type [%s]\", type);\n+      }\n+\n+      if (collector != null) {\n+        map.put(name, new DimensionsAndCollector(dimensions, collector, metric.conversionFactor));\n+      }\n+    }\n+\n+  }\n+\n+  private Map<String, Metric> readMap(String path)\n+  {\n+    try {\n+      InputStream is;\n+      if (Strings.isNullOrEmpty(path)) {\n+        log.info(\"Using default metric dimension and types\");\n+        is = this.getClass().getClassLoader().getResourceAsStream(\"defaultMetrics.json\");\n+      } else {\n+        log.info(\"Using metric dimensions at types at [%s]\", path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MDUzMg==", "bodyText": "Changed to metric configuration", "url": "https://github.com/apache/druid/pull/10412#discussion_r515680532", "createdAt": "2020-11-01T22:26:27Z", "author": {"login": "Tiaaa"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/Metrics.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Strings;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.SimpleCollector;\n+import org.apache.druid.java.util.common.ISE;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.SortedSet;\n+import java.util.regex.Pattern;\n+\n+public class Metrics\n+{\n+\n+  private static final Logger log = new Logger(Metrics.class);\n+  private final Map<String, DimensionsAndCollector> map = new HashMap<>();\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z_:][^a-zA-Z0-9_:]*\");\n+\n+  public DimensionsAndCollector getByName(String name, String service)\n+  {\n+    if (map.containsKey(name)) {\n+      return map.get(name);\n+    } else if (map.containsKey(service + \"_\" + name)) {\n+      return map.get(service + \"_\" + name);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public Metrics(String namespace, String path)\n+  {\n+    Map<String, Metric> metrics = readMap(path);\n+    for (Map.Entry<String, Metric> entry : metrics.entrySet()) {\n+      String name = entry.getKey();\n+      Metric metric = entry.getValue();\n+      Metric.Type type = metric.type;\n+      String[] dimensions = metric.dimensions.toArray(new String[0]);\n+      String formattedName = pattern.matcher(StringUtils.toLowerCase(name)).replaceAll(\"_\");\n+      SimpleCollector collector = null;\n+      if (Metric.Type.count.equals(type)) {\n+        collector = new Counter.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .help(metric.help)\n+            .register();\n+      } else if (Metric.Type.gauge.equals(type)) {\n+        collector = new Gauge.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .help(metric.help)\n+            .register();\n+      } else if (Metric.Type.timer.equals(type)) {\n+        collector = new Histogram.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .buckets(.1, .25, .5, .75, 1, 2.5, 5, 7.5, 10, 30, 60, 120, 300)\n+            .help(metric.help)\n+            .register();\n+      } else {\n+        log.error(\"Unrecognized metric type [%s]\", type);\n+      }\n+\n+      if (collector != null) {\n+        map.put(name, new DimensionsAndCollector(dimensions, collector, metric.conversionFactor));\n+      }\n+    }\n+\n+  }\n+\n+  private Map<String, Metric> readMap(String path)\n+  {\n+    try {\n+      InputStream is;\n+      if (Strings.isNullOrEmpty(path)) {\n+        log.info(\"Using default metric dimension and types\");\n+        is = this.getClass().getClassLoader().getResourceAsStream(\"defaultMetrics.json\");\n+      } else {\n+        log.info(\"Using metric dimensions at types at [%s]\", path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NjQyOQ=="}, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTM2MzY0OnYy", "diffSide": "RIGHT", "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/Metrics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNDowMjoyNlrOHpZPPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNDowMjoyNlrOHpZPPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NzE2NQ==", "bodyText": "maybe replace metric dimensions and types by metric configuration?", "url": "https://github.com/apache/druid/pull/10412#discussion_r513167165", "createdAt": "2020-10-28T04:02:26Z", "author": {"login": "ArvinZheng"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/Metrics.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Strings;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.SimpleCollector;\n+import org.apache.druid.java.util.common.ISE;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.SortedSet;\n+import java.util.regex.Pattern;\n+\n+public class Metrics\n+{\n+\n+  private static final Logger log = new Logger(Metrics.class);\n+  private final Map<String, DimensionsAndCollector> map = new HashMap<>();\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z_:][^a-zA-Z0-9_:]*\");\n+\n+  public DimensionsAndCollector getByName(String name, String service)\n+  {\n+    if (map.containsKey(name)) {\n+      return map.get(name);\n+    } else if (map.containsKey(service + \"_\" + name)) {\n+      return map.get(service + \"_\" + name);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public Metrics(String namespace, String path)\n+  {\n+    Map<String, Metric> metrics = readMap(path);\n+    for (Map.Entry<String, Metric> entry : metrics.entrySet()) {\n+      String name = entry.getKey();\n+      Metric metric = entry.getValue();\n+      Metric.Type type = metric.type;\n+      String[] dimensions = metric.dimensions.toArray(new String[0]);\n+      String formattedName = pattern.matcher(StringUtils.toLowerCase(name)).replaceAll(\"_\");\n+      SimpleCollector collector = null;\n+      if (Metric.Type.count.equals(type)) {\n+        collector = new Counter.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .help(metric.help)\n+            .register();\n+      } else if (Metric.Type.gauge.equals(type)) {\n+        collector = new Gauge.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .help(metric.help)\n+            .register();\n+      } else if (Metric.Type.timer.equals(type)) {\n+        collector = new Histogram.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .buckets(.1, .25, .5, .75, 1, 2.5, 5, 7.5, 10, 30, 60, 120, 300)\n+            .help(metric.help)\n+            .register();\n+      } else {\n+        log.error(\"Unrecognized metric type [%s]\", type);\n+      }\n+\n+      if (collector != null) {\n+        map.put(name, new DimensionsAndCollector(dimensions, collector, metric.conversionFactor));\n+      }\n+    }\n+\n+  }\n+\n+  private Map<String, Metric> readMap(String path)\n+  {\n+    try {\n+      InputStream is;\n+      if (Strings.isNullOrEmpty(path)) {\n+        log.info(\"Using default metric dimension and types\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTM2NDQ3OnYy", "diffSide": "RIGHT", "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/Metrics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNDowMjo1NFrOHpZPtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNDowMjo1NFrOHpZPtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NzI4Ng==", "bodyText": "same as above", "url": "https://github.com/apache/druid/pull/10412#discussion_r513167286", "createdAt": "2020-10-28T04:02:54Z", "author": {"login": "ArvinZheng"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/Metrics.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Strings;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.SimpleCollector;\n+import org.apache.druid.java.util.common.ISE;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.SortedSet;\n+import java.util.regex.Pattern;\n+\n+public class Metrics\n+{\n+\n+  private static final Logger log = new Logger(Metrics.class);\n+  private final Map<String, DimensionsAndCollector> map = new HashMap<>();\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z_:][^a-zA-Z0-9_:]*\");\n+\n+  public DimensionsAndCollector getByName(String name, String service)\n+  {\n+    if (map.containsKey(name)) {\n+      return map.get(name);\n+    } else if (map.containsKey(service + \"_\" + name)) {\n+      return map.get(service + \"_\" + name);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public Metrics(String namespace, String path)\n+  {\n+    Map<String, Metric> metrics = readMap(path);\n+    for (Map.Entry<String, Metric> entry : metrics.entrySet()) {\n+      String name = entry.getKey();\n+      Metric metric = entry.getValue();\n+      Metric.Type type = metric.type;\n+      String[] dimensions = metric.dimensions.toArray(new String[0]);\n+      String formattedName = pattern.matcher(StringUtils.toLowerCase(name)).replaceAll(\"_\");\n+      SimpleCollector collector = null;\n+      if (Metric.Type.count.equals(type)) {\n+        collector = new Counter.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .help(metric.help)\n+            .register();\n+      } else if (Metric.Type.gauge.equals(type)) {\n+        collector = new Gauge.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .help(metric.help)\n+            .register();\n+      } else if (Metric.Type.timer.equals(type)) {\n+        collector = new Histogram.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .buckets(.1, .25, .5, .75, 1, 2.5, 5, 7.5, 10, 30, 60, 120, 300)\n+            .help(metric.help)\n+            .register();\n+      } else {\n+        log.error(\"Unrecognized metric type [%s]\", type);\n+      }\n+\n+      if (collector != null) {\n+        map.put(name, new DimensionsAndCollector(dimensions, collector, metric.conversionFactor));\n+      }\n+    }\n+\n+  }\n+\n+  private Map<String, Metric> readMap(String path)\n+  {\n+    try {\n+      InputStream is;\n+      if (Strings.isNullOrEmpty(path)) {\n+        log.info(\"Using default metric dimension and types\");\n+        is = this.getClass().getClassLoader().getResourceAsStream(\"defaultMetrics.json\");\n+      } else {\n+        log.info(\"Using metric dimensions at types at [%s]\", path);\n+        is = new FileInputStream(new File(path));\n+      }\n+      return mapper.readerFor(new TypeReference<Map<String, Metric>>()\n+      {\n+      }).readValue(is);\n+    }\n+    catch (IOException e) {\n+      throw new ISE(e, \"Failed to parse metric dimensions and types\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTM4MDU2OnYy", "diffSide": "RIGHT", "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/PrometheusEmitter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNDoxMTo0MlrOHpZYmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNDoxMTo0MlrOHpZYmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2OTU2Mg==", "bodyText": "private?", "url": "https://github.com/apache/druid/pull/10412#discussion_r513169562", "createdAt": "2020-10-28T04:11:42Z", "author": {"login": "ArvinZheng"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/PrometheusEmitter.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.exporter.HTTPServer;\n+import io.prometheus.client.exporter.PushGateway;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.java.util.emitter.core.Emitter;\n+import org.apache.druid.java.util.emitter.core.Event;\n+import org.apache.druid.java.util.emitter.service.ServiceMetricEvent;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ *\n+ */\n+public class PrometheusEmitter implements Emitter\n+{\n+\n+  private static final Logger log = new Logger(PrometheusEmitter.class);\n+  private final Metrics metrics;\n+  private final PrometheusEmitterConfig config;\n+  private final PrometheusEmitterConfig.Strategy strategy;\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z0-9_][^a-zA-Z0-9_]*\");\n+\n+  private HTTPServer server;\n+  private PushGateway pushGateway;\n+  private String identifier;\n+\n+  static PrometheusEmitter of(PrometheusEmitterConfig config)\n+  {\n+    return new PrometheusEmitter(config);\n+  }\n+\n+  public PrometheusEmitter(PrometheusEmitterConfig config)\n+  {\n+    this.config = config;\n+    this.strategy = config.getStrategy();\n+    metrics = new Metrics(config.getNamespace(), config.getDimensionMapPath());\n+  }\n+\n+\n+  @Override\n+  public void start()\n+  {\n+    if (strategy.equals(PrometheusEmitterConfig.Strategy.exporter)) {\n+      if (server == null) {\n+        try {\n+          server = new HTTPServer(config.getPort());\n+        }\n+        catch (IOException e) {\n+          log.error(e, \"Unable to start prometheus HTTPServer\");\n+        }\n+      } else {\n+        log.error(\"HTTPServer is already started\");\n+      }\n+    } else if (strategy.equals(PrometheusEmitterConfig.Strategy.pushgateway)) {\n+      pushGateway = new PushGateway(config.getPushGatewayAddress());\n+    }\n+\n+  }\n+\n+  @Override\n+  public void emit(Event event)\n+  {\n+    if (event instanceof ServiceMetricEvent) {\n+      emitMetric((ServiceMetricEvent) event);\n+    }\n+  }\n+\n+  void emitMetric(ServiceMetricEvent metricEvent)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTQwODcxOnYy", "diffSide": "RIGHT", "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/PrometheusEmitter.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNDoyODo1NFrOHpZojg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMjo1NDo0N1rOHry10Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3MzY0Ng==", "bodyText": "potential NPE? if the configured strategy is not pushgateway, then this pushGateway wouldn't have been instantiated", "url": "https://github.com/apache/druid/pull/10412#discussion_r513173646", "createdAt": "2020-10-28T04:28:54Z", "author": {"login": "ArvinZheng"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/PrometheusEmitter.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.exporter.HTTPServer;\n+import io.prometheus.client.exporter.PushGateway;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.java.util.emitter.core.Emitter;\n+import org.apache.druid.java.util.emitter.core.Event;\n+import org.apache.druid.java.util.emitter.service.ServiceMetricEvent;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ *\n+ */\n+public class PrometheusEmitter implements Emitter\n+{\n+\n+  private static final Logger log = new Logger(PrometheusEmitter.class);\n+  private final Metrics metrics;\n+  private final PrometheusEmitterConfig config;\n+  private final PrometheusEmitterConfig.Strategy strategy;\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z0-9_][^a-zA-Z0-9_]*\");\n+\n+  private HTTPServer server;\n+  private PushGateway pushGateway;\n+  private String identifier;\n+\n+  static PrometheusEmitter of(PrometheusEmitterConfig config)\n+  {\n+    return new PrometheusEmitter(config);\n+  }\n+\n+  public PrometheusEmitter(PrometheusEmitterConfig config)\n+  {\n+    this.config = config;\n+    this.strategy = config.getStrategy();\n+    metrics = new Metrics(config.getNamespace(), config.getDimensionMapPath());\n+  }\n+\n+\n+  @Override\n+  public void start()\n+  {\n+    if (strategy.equals(PrometheusEmitterConfig.Strategy.exporter)) {\n+      if (server == null) {\n+        try {\n+          server = new HTTPServer(config.getPort());\n+        }\n+        catch (IOException e) {\n+          log.error(e, \"Unable to start prometheus HTTPServer\");\n+        }\n+      } else {\n+        log.error(\"HTTPServer is already started\");\n+      }\n+    } else if (strategy.equals(PrometheusEmitterConfig.Strategy.pushgateway)) {\n+      pushGateway = new PushGateway(config.getPushGatewayAddress());\n+    }\n+\n+  }\n+\n+  @Override\n+  public void emit(Event event)\n+  {\n+    if (event instanceof ServiceMetricEvent) {\n+      emitMetric((ServiceMetricEvent) event);\n+    }\n+  }\n+\n+  void emitMetric(ServiceMetricEvent metricEvent)\n+  {\n+    String name = metricEvent.getMetric();\n+    String service = metricEvent.getService();\n+    Map<String, Object> userDims = metricEvent.getUserDims();\n+    identifier = (userDims.get(\"task\") == null ? metricEvent.getHost() : (String) userDims.get(\"task\"));\n+    Number value = metricEvent.getValue();\n+\n+    DimensionsAndCollector metric = metrics.getByName(name, service);\n+    if (metric != null) {\n+      String[] labelValues = new String[metric.getDimensions().length];\n+      String[] labelNames = metric.getDimensions();\n+      for (int i = 0; i < labelValues.length; i++) {\n+        String labelName = labelNames[i];\n+        //labelName is controlled by the user. Instead of potential NPE on invalid labelName we use \"unknown\" as the dimension value\n+        Object userDim = userDims.get(labelName);\n+        labelValues[i] = userDim != null ? pattern.matcher(userDim.toString()).replaceAll(\"_\") : \"unknown\";\n+      }\n+\n+      if (metric.getCollector() instanceof Counter) {\n+        ((Counter) metric.getCollector()).labels(labelValues).inc(value.doubleValue());\n+      } else if (metric.getCollector() instanceof Gauge) {\n+        ((Gauge) metric.getCollector()).labels(labelValues).set(value.doubleValue());\n+      } else if (metric.getCollector() instanceof Histogram) {\n+        ((Histogram) metric.getCollector()).labels(labelValues).observe(value.doubleValue() / metric.getConversionFactor());\n+      } else {\n+        log.error(\"Unrecognized metric type [%s]\", metric.getCollector().getClass());\n+      }\n+    } else {\n+      log.debug(\"Unmapped metric [%s]\", name);\n+    }\n+  }\n+\n+  @Override\n+  public void flush()\n+  {\n+    Map<String, DimensionsAndCollector> map = metrics.getMap();\n+    try {\n+      for (DimensionsAndCollector collector : map.values()) {\n+        pushGateway.push(collector.getCollector(), config.getNamespace(), ImmutableMap.of(config.getNamespace(), identifier));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3NTAyNw==", "bodyText": "Also should we use a more meaningful label name for identifier instead of using the config.getNamespace()?", "url": "https://github.com/apache/druid/pull/10412#discussion_r513175027", "createdAt": "2020-10-28T04:34:07Z", "author": {"login": "ArvinZheng"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/PrometheusEmitter.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.exporter.HTTPServer;\n+import io.prometheus.client.exporter.PushGateway;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.java.util.emitter.core.Emitter;\n+import org.apache.druid.java.util.emitter.core.Event;\n+import org.apache.druid.java.util.emitter.service.ServiceMetricEvent;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ *\n+ */\n+public class PrometheusEmitter implements Emitter\n+{\n+\n+  private static final Logger log = new Logger(PrometheusEmitter.class);\n+  private final Metrics metrics;\n+  private final PrometheusEmitterConfig config;\n+  private final PrometheusEmitterConfig.Strategy strategy;\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z0-9_][^a-zA-Z0-9_]*\");\n+\n+  private HTTPServer server;\n+  private PushGateway pushGateway;\n+  private String identifier;\n+\n+  static PrometheusEmitter of(PrometheusEmitterConfig config)\n+  {\n+    return new PrometheusEmitter(config);\n+  }\n+\n+  public PrometheusEmitter(PrometheusEmitterConfig config)\n+  {\n+    this.config = config;\n+    this.strategy = config.getStrategy();\n+    metrics = new Metrics(config.getNamespace(), config.getDimensionMapPath());\n+  }\n+\n+\n+  @Override\n+  public void start()\n+  {\n+    if (strategy.equals(PrometheusEmitterConfig.Strategy.exporter)) {\n+      if (server == null) {\n+        try {\n+          server = new HTTPServer(config.getPort());\n+        }\n+        catch (IOException e) {\n+          log.error(e, \"Unable to start prometheus HTTPServer\");\n+        }\n+      } else {\n+        log.error(\"HTTPServer is already started\");\n+      }\n+    } else if (strategy.equals(PrometheusEmitterConfig.Strategy.pushgateway)) {\n+      pushGateway = new PushGateway(config.getPushGatewayAddress());\n+    }\n+\n+  }\n+\n+  @Override\n+  public void emit(Event event)\n+  {\n+    if (event instanceof ServiceMetricEvent) {\n+      emitMetric((ServiceMetricEvent) event);\n+    }\n+  }\n+\n+  void emitMetric(ServiceMetricEvent metricEvent)\n+  {\n+    String name = metricEvent.getMetric();\n+    String service = metricEvent.getService();\n+    Map<String, Object> userDims = metricEvent.getUserDims();\n+    identifier = (userDims.get(\"task\") == null ? metricEvent.getHost() : (String) userDims.get(\"task\"));\n+    Number value = metricEvent.getValue();\n+\n+    DimensionsAndCollector metric = metrics.getByName(name, service);\n+    if (metric != null) {\n+      String[] labelValues = new String[metric.getDimensions().length];\n+      String[] labelNames = metric.getDimensions();\n+      for (int i = 0; i < labelValues.length; i++) {\n+        String labelName = labelNames[i];\n+        //labelName is controlled by the user. Instead of potential NPE on invalid labelName we use \"unknown\" as the dimension value\n+        Object userDim = userDims.get(labelName);\n+        labelValues[i] = userDim != null ? pattern.matcher(userDim.toString()).replaceAll(\"_\") : \"unknown\";\n+      }\n+\n+      if (metric.getCollector() instanceof Counter) {\n+        ((Counter) metric.getCollector()).labels(labelValues).inc(value.doubleValue());\n+      } else if (metric.getCollector() instanceof Gauge) {\n+        ((Gauge) metric.getCollector()).labels(labelValues).set(value.doubleValue());\n+      } else if (metric.getCollector() instanceof Histogram) {\n+        ((Histogram) metric.getCollector()).labels(labelValues).observe(value.doubleValue() / metric.getConversionFactor());\n+      } else {\n+        log.error(\"Unrecognized metric type [%s]\", metric.getCollector().getClass());\n+      }\n+    } else {\n+      log.debug(\"Unmapped metric [%s]\", name);\n+    }\n+  }\n+\n+  @Override\n+  public void flush()\n+  {\n+    Map<String, DimensionsAndCollector> map = metrics.getMap();\n+    try {\n+      for (DimensionsAndCollector collector : map.values()) {\n+        pushGateway.push(collector.getCollector(), config.getNamespace(), ImmutableMap.of(config.getNamespace(), identifier));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3MzY0Ng=="}, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4MTcxNg==", "bodyText": "Will add the null check - however flush() for this emitter should only called by close() which strategy check already done.", "url": "https://github.com/apache/druid/pull/10412#discussion_r515681716", "createdAt": "2020-11-01T22:36:31Z", "author": {"login": "Tiaaa"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/PrometheusEmitter.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.exporter.HTTPServer;\n+import io.prometheus.client.exporter.PushGateway;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.java.util.emitter.core.Emitter;\n+import org.apache.druid.java.util.emitter.core.Event;\n+import org.apache.druid.java.util.emitter.service.ServiceMetricEvent;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ *\n+ */\n+public class PrometheusEmitter implements Emitter\n+{\n+\n+  private static final Logger log = new Logger(PrometheusEmitter.class);\n+  private final Metrics metrics;\n+  private final PrometheusEmitterConfig config;\n+  private final PrometheusEmitterConfig.Strategy strategy;\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z0-9_][^a-zA-Z0-9_]*\");\n+\n+  private HTTPServer server;\n+  private PushGateway pushGateway;\n+  private String identifier;\n+\n+  static PrometheusEmitter of(PrometheusEmitterConfig config)\n+  {\n+    return new PrometheusEmitter(config);\n+  }\n+\n+  public PrometheusEmitter(PrometheusEmitterConfig config)\n+  {\n+    this.config = config;\n+    this.strategy = config.getStrategy();\n+    metrics = new Metrics(config.getNamespace(), config.getDimensionMapPath());\n+  }\n+\n+\n+  @Override\n+  public void start()\n+  {\n+    if (strategy.equals(PrometheusEmitterConfig.Strategy.exporter)) {\n+      if (server == null) {\n+        try {\n+          server = new HTTPServer(config.getPort());\n+        }\n+        catch (IOException e) {\n+          log.error(e, \"Unable to start prometheus HTTPServer\");\n+        }\n+      } else {\n+        log.error(\"HTTPServer is already started\");\n+      }\n+    } else if (strategy.equals(PrometheusEmitterConfig.Strategy.pushgateway)) {\n+      pushGateway = new PushGateway(config.getPushGatewayAddress());\n+    }\n+\n+  }\n+\n+  @Override\n+  public void emit(Event event)\n+  {\n+    if (event instanceof ServiceMetricEvent) {\n+      emitMetric((ServiceMetricEvent) event);\n+    }\n+  }\n+\n+  void emitMetric(ServiceMetricEvent metricEvent)\n+  {\n+    String name = metricEvent.getMetric();\n+    String service = metricEvent.getService();\n+    Map<String, Object> userDims = metricEvent.getUserDims();\n+    identifier = (userDims.get(\"task\") == null ? metricEvent.getHost() : (String) userDims.get(\"task\"));\n+    Number value = metricEvent.getValue();\n+\n+    DimensionsAndCollector metric = metrics.getByName(name, service);\n+    if (metric != null) {\n+      String[] labelValues = new String[metric.getDimensions().length];\n+      String[] labelNames = metric.getDimensions();\n+      for (int i = 0; i < labelValues.length; i++) {\n+        String labelName = labelNames[i];\n+        //labelName is controlled by the user. Instead of potential NPE on invalid labelName we use \"unknown\" as the dimension value\n+        Object userDim = userDims.get(labelName);\n+        labelValues[i] = userDim != null ? pattern.matcher(userDim.toString()).replaceAll(\"_\") : \"unknown\";\n+      }\n+\n+      if (metric.getCollector() instanceof Counter) {\n+        ((Counter) metric.getCollector()).labels(labelValues).inc(value.doubleValue());\n+      } else if (metric.getCollector() instanceof Gauge) {\n+        ((Gauge) metric.getCollector()).labels(labelValues).set(value.doubleValue());\n+      } else if (metric.getCollector() instanceof Histogram) {\n+        ((Histogram) metric.getCollector()).labels(labelValues).observe(value.doubleValue() / metric.getConversionFactor());\n+      } else {\n+        log.error(\"Unrecognized metric type [%s]\", metric.getCollector().getClass());\n+      }\n+    } else {\n+      log.debug(\"Unmapped metric [%s]\", name);\n+    }\n+  }\n+\n+  @Override\n+  public void flush()\n+  {\n+    Map<String, DimensionsAndCollector> map = metrics.getMap();\n+    try {\n+      for (DimensionsAndCollector collector : map.values()) {\n+        pushGateway.push(collector.getCollector(), config.getNamespace(), ImmutableMap.of(config.getNamespace(), identifier));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3MzY0Ng=="}, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4Mzc5Mw==", "bodyText": "For the identifier label name, any suggestion? The config.namespace will be set in config files for each service. So for example peon task it could be peon=taskXXX as groupingKey.", "url": "https://github.com/apache/druid/pull/10412#discussion_r515683793", "createdAt": "2020-11-01T22:54:47Z", "author": {"login": "Tiaaa"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/PrometheusEmitter.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.exporter.HTTPServer;\n+import io.prometheus.client.exporter.PushGateway;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.java.util.emitter.core.Emitter;\n+import org.apache.druid.java.util.emitter.core.Event;\n+import org.apache.druid.java.util.emitter.service.ServiceMetricEvent;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ *\n+ */\n+public class PrometheusEmitter implements Emitter\n+{\n+\n+  private static final Logger log = new Logger(PrometheusEmitter.class);\n+  private final Metrics metrics;\n+  private final PrometheusEmitterConfig config;\n+  private final PrometheusEmitterConfig.Strategy strategy;\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z0-9_][^a-zA-Z0-9_]*\");\n+\n+  private HTTPServer server;\n+  private PushGateway pushGateway;\n+  private String identifier;\n+\n+  static PrometheusEmitter of(PrometheusEmitterConfig config)\n+  {\n+    return new PrometheusEmitter(config);\n+  }\n+\n+  public PrometheusEmitter(PrometheusEmitterConfig config)\n+  {\n+    this.config = config;\n+    this.strategy = config.getStrategy();\n+    metrics = new Metrics(config.getNamespace(), config.getDimensionMapPath());\n+  }\n+\n+\n+  @Override\n+  public void start()\n+  {\n+    if (strategy.equals(PrometheusEmitterConfig.Strategy.exporter)) {\n+      if (server == null) {\n+        try {\n+          server = new HTTPServer(config.getPort());\n+        }\n+        catch (IOException e) {\n+          log.error(e, \"Unable to start prometheus HTTPServer\");\n+        }\n+      } else {\n+        log.error(\"HTTPServer is already started\");\n+      }\n+    } else if (strategy.equals(PrometheusEmitterConfig.Strategy.pushgateway)) {\n+      pushGateway = new PushGateway(config.getPushGatewayAddress());\n+    }\n+\n+  }\n+\n+  @Override\n+  public void emit(Event event)\n+  {\n+    if (event instanceof ServiceMetricEvent) {\n+      emitMetric((ServiceMetricEvent) event);\n+    }\n+  }\n+\n+  void emitMetric(ServiceMetricEvent metricEvent)\n+  {\n+    String name = metricEvent.getMetric();\n+    String service = metricEvent.getService();\n+    Map<String, Object> userDims = metricEvent.getUserDims();\n+    identifier = (userDims.get(\"task\") == null ? metricEvent.getHost() : (String) userDims.get(\"task\"));\n+    Number value = metricEvent.getValue();\n+\n+    DimensionsAndCollector metric = metrics.getByName(name, service);\n+    if (metric != null) {\n+      String[] labelValues = new String[metric.getDimensions().length];\n+      String[] labelNames = metric.getDimensions();\n+      for (int i = 0; i < labelValues.length; i++) {\n+        String labelName = labelNames[i];\n+        //labelName is controlled by the user. Instead of potential NPE on invalid labelName we use \"unknown\" as the dimension value\n+        Object userDim = userDims.get(labelName);\n+        labelValues[i] = userDim != null ? pattern.matcher(userDim.toString()).replaceAll(\"_\") : \"unknown\";\n+      }\n+\n+      if (metric.getCollector() instanceof Counter) {\n+        ((Counter) metric.getCollector()).labels(labelValues).inc(value.doubleValue());\n+      } else if (metric.getCollector() instanceof Gauge) {\n+        ((Gauge) metric.getCollector()).labels(labelValues).set(value.doubleValue());\n+      } else if (metric.getCollector() instanceof Histogram) {\n+        ((Histogram) metric.getCollector()).labels(labelValues).observe(value.doubleValue() / metric.getConversionFactor());\n+      } else {\n+        log.error(\"Unrecognized metric type [%s]\", metric.getCollector().getClass());\n+      }\n+    } else {\n+      log.debug(\"Unmapped metric [%s]\", name);\n+    }\n+  }\n+\n+  @Override\n+  public void flush()\n+  {\n+    Map<String, DimensionsAndCollector> map = metrics.getMap();\n+    try {\n+      for (DimensionsAndCollector collector : map.values()) {\n+        pushGateway.push(collector.getCollector(), config.getNamespace(), ImmutableMap.of(config.getNamespace(), identifier));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3MzY0Ng=="}, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTQyMzY5OnYy", "diffSide": "RIGHT", "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/PrometheusEmitter.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNDozNzoxNlrOHpZxDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNlQwMjo1NDoyNVrOIU5fow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3NTgyMw==", "bodyText": "we should schedule a task to push updates periodically when the strategy is set to pushgateway", "url": "https://github.com/apache/druid/pull/10412#discussion_r513175823", "createdAt": "2020-10-28T04:37:16Z", "author": {"login": "ArvinZheng"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/PrometheusEmitter.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.exporter.HTTPServer;\n+import io.prometheus.client.exporter.PushGateway;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.java.util.emitter.core.Emitter;\n+import org.apache.druid.java.util.emitter.core.Event;\n+import org.apache.druid.java.util.emitter.service.ServiceMetricEvent;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ *\n+ */\n+public class PrometheusEmitter implements Emitter\n+{\n+\n+  private static final Logger log = new Logger(PrometheusEmitter.class);\n+  private final Metrics metrics;\n+  private final PrometheusEmitterConfig config;\n+  private final PrometheusEmitterConfig.Strategy strategy;\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z0-9_][^a-zA-Z0-9_]*\");\n+\n+  private HTTPServer server;\n+  private PushGateway pushGateway;\n+  private String identifier;\n+\n+  static PrometheusEmitter of(PrometheusEmitterConfig config)\n+  {\n+    return new PrometheusEmitter(config);\n+  }\n+\n+  public PrometheusEmitter(PrometheusEmitterConfig config)\n+  {\n+    this.config = config;\n+    this.strategy = config.getStrategy();\n+    metrics = new Metrics(config.getNamespace(), config.getDimensionMapPath());\n+  }\n+\n+\n+  @Override\n+  public void start()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4NDc4Nw==", "bodyText": "Added, every 5min sounds reasonable?", "url": "https://github.com/apache/druid/pull/10412#discussion_r515684787", "createdAt": "2020-11-01T23:03:38Z", "author": {"login": "Tiaaa"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/PrometheusEmitter.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.exporter.HTTPServer;\n+import io.prometheus.client.exporter.PushGateway;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.java.util.emitter.core.Emitter;\n+import org.apache.druid.java.util.emitter.core.Event;\n+import org.apache.druid.java.util.emitter.service.ServiceMetricEvent;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ *\n+ */\n+public class PrometheusEmitter implements Emitter\n+{\n+\n+  private static final Logger log = new Logger(PrometheusEmitter.class);\n+  private final Metrics metrics;\n+  private final PrometheusEmitterConfig config;\n+  private final PrometheusEmitterConfig.Strategy strategy;\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z0-9_][^a-zA-Z0-9_]*\");\n+\n+  private HTTPServer server;\n+  private PushGateway pushGateway;\n+  private String identifier;\n+\n+  static PrometheusEmitter of(PrometheusEmitterConfig config)\n+  {\n+    return new PrometheusEmitter(config);\n+  }\n+\n+  public PrometheusEmitter(PrometheusEmitterConfig config)\n+  {\n+    this.config = config;\n+    this.strategy = config.getStrategy();\n+    metrics = new Metrics(config.getNamespace(), config.getDimensionMapPath());\n+  }\n+\n+\n+  @Override\n+  public void start()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3NTgyMw=="}, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg2NTk5Mg==", "bodyText": "Sorry I missed this - I think the scheduled executor may not be necessary. Main reason we've added strategy pushgateway is for things that are potentially too short-lived to be scraped by prometheus (in druid that's really just peon tasks). Things that are living long enough to be pushing every 5 minutes are likely not \"task\" based, and may be better fit for normal scraping.  I lean toward keeping things simple, and pushing once at close seems sufficient.", "url": "https://github.com/apache/druid/pull/10412#discussion_r557865992", "createdAt": "2021-01-15T05:12:26Z", "author": {"login": "michaelschiff"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/PrometheusEmitter.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.exporter.HTTPServer;\n+import io.prometheus.client.exporter.PushGateway;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.java.util.emitter.core.Emitter;\n+import org.apache.druid.java.util.emitter.core.Event;\n+import org.apache.druid.java.util.emitter.service.ServiceMetricEvent;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ *\n+ */\n+public class PrometheusEmitter implements Emitter\n+{\n+\n+  private static final Logger log = new Logger(PrometheusEmitter.class);\n+  private final Metrics metrics;\n+  private final PrometheusEmitterConfig config;\n+  private final PrometheusEmitterConfig.Strategy strategy;\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z0-9_][^a-zA-Z0-9_]*\");\n+\n+  private HTTPServer server;\n+  private PushGateway pushGateway;\n+  private String identifier;\n+\n+  static PrometheusEmitter of(PrometheusEmitterConfig config)\n+  {\n+    return new PrometheusEmitter(config);\n+  }\n+\n+  public PrometheusEmitter(PrometheusEmitterConfig config)\n+  {\n+    this.config = config;\n+    this.strategy = config.getStrategy();\n+    metrics = new Metrics(config.getNamespace(), config.getDimensionMapPath());\n+  }\n+\n+\n+  @Override\n+  public void start()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3NTgyMw=="}, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODc4NDQxOQ==", "bodyText": "Given the only metric pushed by peon is \"last pushed timestamp\", I think it's valid to remove the scheduled task. Removed.", "url": "https://github.com/apache/druid/pull/10412#discussion_r558784419", "createdAt": "2021-01-16T02:54:25Z", "author": {"login": "Tiaaa"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/PrometheusEmitter.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.exporter.HTTPServer;\n+import io.prometheus.client.exporter.PushGateway;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.java.util.emitter.core.Emitter;\n+import org.apache.druid.java.util.emitter.core.Event;\n+import org.apache.druid.java.util.emitter.service.ServiceMetricEvent;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ *\n+ */\n+public class PrometheusEmitter implements Emitter\n+{\n+\n+  private static final Logger log = new Logger(PrometheusEmitter.class);\n+  private final Metrics metrics;\n+  private final PrometheusEmitterConfig config;\n+  private final PrometheusEmitterConfig.Strategy strategy;\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z0-9_][^a-zA-Z0-9_]*\");\n+\n+  private HTTPServer server;\n+  private PushGateway pushGateway;\n+  private String identifier;\n+\n+  static PrometheusEmitter of(PrometheusEmitterConfig config)\n+  {\n+    return new PrometheusEmitter(config);\n+  }\n+\n+  public PrometheusEmitter(PrometheusEmitterConfig config)\n+  {\n+    this.config = config;\n+    this.strategy = config.getStrategy();\n+    metrics = new Metrics(config.getNamespace(), config.getDimensionMapPath());\n+  }\n+\n+\n+  @Override\n+  public void start()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3NTgyMw=="}, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTQzODg2OnYy", "diffSide": "RIGHT", "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/Metrics.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNDo0NjoxNlrOHpZ51g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNToxMTo1NVrOHsgdxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3ODA3MA==", "bodyText": "return Optional.ofNullable(map.get(name)).orElse(map.get(service + \"_\" + name));", "url": "https://github.com/apache/druid/pull/10412#discussion_r513178070", "createdAt": "2020-10-28T04:46:16Z", "author": {"login": "ArvinZheng"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/Metrics.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Strings;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.SimpleCollector;\n+import org.apache.druid.java.util.common.ISE;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.SortedSet;\n+import java.util.regex.Pattern;\n+\n+public class Metrics\n+{\n+\n+  private static final Logger log = new Logger(Metrics.class);\n+  private final Map<String, DimensionsAndCollector> map = new HashMap<>();\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z_:][^a-zA-Z0-9_:]*\");\n+\n+  public DimensionsAndCollector getByName(String name, String service)\n+  {\n+    if (map.containsKey(name)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY4NTgzMw==", "bodyText": "Changed the second part to a getOrDefault() for simplification. I don't see the need of changing this function return type from DimensionsAndCollector to Optional<DimensionsAndCollector>", "url": "https://github.com/apache/druid/pull/10412#discussion_r515685833", "createdAt": "2020-11-01T23:13:32Z", "author": {"login": "Tiaaa"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/Metrics.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Strings;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.SimpleCollector;\n+import org.apache.druid.java.util.common.ISE;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.SortedSet;\n+import java.util.regex.Pattern;\n+\n+public class Metrics\n+{\n+\n+  private static final Logger log = new Logger(Metrics.class);\n+  private final Map<String, DimensionsAndCollector> map = new HashMap<>();\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z_:][^a-zA-Z0-9_:]*\");\n+\n+  public DimensionsAndCollector getByName(String name, String service)\n+  {\n+    if (map.containsKey(name)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3ODA3MA=="}, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMTMwMA==", "bodyText": "you don't need to change the return type, but anyway this is a minor comment, feel free to pick whichever you prefer", "url": "https://github.com/apache/druid/pull/10412#discussion_r516431300", "createdAt": "2020-11-03T05:11:55Z", "author": {"login": "ArvinZheng"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/Metrics.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Strings;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.SimpleCollector;\n+import org.apache.druid.java.util.common.ISE;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.SortedSet;\n+import java.util.regex.Pattern;\n+\n+public class Metrics\n+{\n+\n+  private static final Logger log = new Logger(Metrics.class);\n+  private final Map<String, DimensionsAndCollector> map = new HashMap<>();\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z_:][^a-zA-Z0-9_:]*\");\n+\n+  public DimensionsAndCollector getByName(String name, String service)\n+  {\n+    if (map.containsKey(name)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3ODA3MA=="}, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY4NDMxMzQ0OnYy", "diffSide": "RIGHT", "path": "docs/development/extensions-contrib/prometheus.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yN1QwMjoxNTo1MlrOIs9zDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yN1QwMjoxNTo1MlrOIs9zDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDAyMDc1MA==", "bodyText": "Druid is no longer in the Apache Incubator, so this (incubating) should be removed.", "url": "https://github.com/apache/druid/pull/10412#discussion_r584020750", "createdAt": "2021-02-27T02:15:52Z", "author": {"login": "clintropolis"}, "path": "docs/development/extensions-contrib/prometheus.md", "diffHunk": "@@ -0,0 +1,70 @@\n+---\n+id: prometheus\n+title: \"Prometheus Emitter\"\n+---\n+\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+\n+To use this Apache Druid (incubating) extension, make sure to [include](../../development/extensions.md#loading-extensions) `prometheus-emitter` extension.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5074528195abec923b97e25181404034839b397"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY4NDMyMTc1OnYy", "diffSide": "RIGHT", "path": "docs/operations/metrics.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yN1QwMjoyMzoyMVrOIs93Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQwMToyNDowNVrOIuEbcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDAyMTgwNw==", "bodyText": "I don't think this change should have happened? bufferpoolName still appears to be the dimension name in JvmMonitor as far as I can tell. There are a few other places scattered around where this appears to have happened. Potentially this is a result of missing changes or resolving a conflict with #10075", "url": "https://github.com/apache/druid/pull/10412#discussion_r584021807", "createdAt": "2021-02-27T02:23:21Z", "author": {"login": "clintropolis"}, "path": "docs/operations/metrics.md", "diffHunk": "@@ -284,9 +284,9 @@ These metrics are only available if the JVMMonitor module is included.\n |`jvm/pool/init`|Initial pool.|poolKind, poolName.|Varies.|\n |`jvm/pool/max`|Max pool.|poolKind, poolName.|Varies.|\n |`jvm/pool/used`|Pool used.|poolKind, poolName.|< max pool|\n-|`jvm/bufferpool/count`|Bufferpool count.|bufferpoolName.|Varies.|\n-|`jvm/bufferpool/used`|Bufferpool used.|bufferpoolName.|close to capacity|\n-|`jvm/bufferpool/capacity`|Bufferpool capacity.|bufferpoolName.|Varies.|\n+|`jvm/bufferpool/count`|Bufferpool count.|bufferPoolName.|Varies.|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5074528195abec923b97e25181404034839b397"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTE3Nzk2OA==", "bodyText": "Yes you are right checked the metric dimension, fixed.", "url": "https://github.com/apache/druid/pull/10412#discussion_r585177968", "createdAt": "2021-03-02T01:24:05Z", "author": {"login": "Tiaaa"}, "path": "docs/operations/metrics.md", "diffHunk": "@@ -284,9 +284,9 @@ These metrics are only available if the JVMMonitor module is included.\n |`jvm/pool/init`|Initial pool.|poolKind, poolName.|Varies.|\n |`jvm/pool/max`|Max pool.|poolKind, poolName.|Varies.|\n |`jvm/pool/used`|Pool used.|poolKind, poolName.|< max pool|\n-|`jvm/bufferpool/count`|Bufferpool count.|bufferpoolName.|Varies.|\n-|`jvm/bufferpool/used`|Bufferpool used.|bufferpoolName.|close to capacity|\n-|`jvm/bufferpool/capacity`|Bufferpool capacity.|bufferpoolName.|Varies.|\n+|`jvm/bufferpool/count`|Bufferpool count.|bufferPoolName.|Varies.|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDAyMTgwNw=="}, "originalCommit": {"oid": "c5074528195abec923b97e25181404034839b397"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY4NDM1MzM4OnYy", "diffSide": "RIGHT", "path": "docs/development/extensions-contrib/prometheus.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yN1QwMjo0OTozOVrOIs-GQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQwMToyNDoyNFrOIuEb-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDAyNTY2NQ==", "bodyText": "It would be worth perhaps linking to metrics documentation https://druid.apache.org/docs/latest/operations/metrics.html ([Druid Metrics](../../operations/metrics.md)) and maybe emitter configuration stuffs, https://druid.apache.org/docs/latest/configuration/index.html#emitting-metrics ([configuration](../../configuration/index.md#emitting-metrics).\nAlso, you should probably include instructions to add druid.emitter=prometheus to the configs.", "url": "https://github.com/apache/druid/pull/10412#discussion_r584025665", "createdAt": "2021-02-27T02:49:39Z", "author": {"login": "clintropolis"}, "path": "docs/development/extensions-contrib/prometheus.md", "diffHunk": "@@ -0,0 +1,70 @@\n+---\n+id: prometheus\n+title: \"Prometheus Emitter\"\n+---\n+\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+\n+To use this Apache Druid (incubating) extension, make sure to [include](../../development/extensions.md#loading-extensions) `prometheus-emitter` extension.\n+\n+## Introduction\n+\n+This extension exposes Druid metrics for collection by a Prometheus server\n+(https://prometheus.io/)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5074528195abec923b97e25181404034839b397"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTE3ODEwNA==", "bodyText": "Good suggestion, added.", "url": "https://github.com/apache/druid/pull/10412#discussion_r585178104", "createdAt": "2021-03-02T01:24:24Z", "author": {"login": "Tiaaa"}, "path": "docs/development/extensions-contrib/prometheus.md", "diffHunk": "@@ -0,0 +1,70 @@\n+---\n+id: prometheus\n+title: \"Prometheus Emitter\"\n+---\n+\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+\n+To use this Apache Druid (incubating) extension, make sure to [include](../../development/extensions.md#loading-extensions) `prometheus-emitter` extension.\n+\n+## Introduction\n+\n+This extension exposes Druid metrics for collection by a Prometheus server\n+(https://prometheus.io/)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDAyNTY2NQ=="}, "originalCommit": {"oid": "c5074528195abec923b97e25181404034839b397"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY5MzIwNjE4OnYy", "diffSide": "RIGHT", "path": "website/.spelling", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQwNzowNzowMVrOIuMZmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQwNzowNzowMVrOIuMZmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTMwODU2OQ==", "bodyText": "oops, missed one, it's causing CI to fail", "url": "https://github.com/apache/druid/pull/10412#discussion_r585308569", "createdAt": "2021-03-02T07:07:01Z", "author": {"login": "clintropolis"}, "path": "website/.spelling", "diffHunk": "@@ -1223,7 +1228,7 @@ SysMonitor\n TaskCountStatsMonitor\n TaskSlotCountStatsMonitor\n bufferCapacity\n-bufferpoolName\n+bufferPoolName", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42048a57524fdcd63851b8c70d0bfde6d27c226f"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3220, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}