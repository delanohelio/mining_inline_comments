{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzOTIyNTg5", "number": 9830, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMjoyMToyMVrOD74xGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOToxNjoyN1rOD8M_Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTIyNjQ4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/math/expr/Expr.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMjoyMToyMVrOGUfOXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNDoyNTozOVrOGUg_ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEzNjI4Nw==", "bodyText": "A reasonable default for Expr could be to use the stringified form for hashCode and equals:\n  /**\n   * Convert the {@link Expr} back into parseable string that when parsed with\n   * {@link Parser#parse(String, ExprMacroTable)} will produce an equivalent {@link Expr}.\n   */\n  String stringify();", "url": "https://github.com/apache/druid/pull/9830#discussion_r424136287", "createdAt": "2020-05-13T02:21:21Z", "author": {"login": "jon-wei"}, "path": "core/src/main/java/org/apache/druid/math/expr/Expr.java", "diffHunk": "@@ -494,6 +496,18 @@ public String toString()\n   {\n     return NULL_LITERAL;\n   }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    return getClass().hashCode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "077710eadad760b334586f93ee1fb929911af78e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2NTIyNg==", "bodyText": "Removed this. Each implementation will be responsible for defining their equals and hashcode", "url": "https://github.com/apache/druid/pull/9830#discussion_r424165226", "createdAt": "2020-05-13T04:25:39Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/math/expr/Expr.java", "diffHunk": "@@ -494,6 +496,18 @@ public String toString()\n   {\n     return NULL_LITERAL;\n   }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    return getClass().hashCode();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEzNjI4Nw=="}, "originalCommit": {"oid": "077710eadad760b334586f93ee1fb929911af78e"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTI0NjgyOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/filter/SelectorPredicateFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMjozNDoyN1rOGUfbaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNDoxOToxOVrOGUg5lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEzOTYyNA==", "bodyText": "This should compare value instead", "url": "https://github.com/apache/druid/pull/9830#discussion_r424139624", "createdAt": "2020-05-13T02:34:27Z", "author": {"login": "jon-wei"}, "path": "processing/src/main/java/org/apache/druid/query/filter/SelectorPredicateFactory.java", "diffHunk": "@@ -147,4 +148,23 @@ private void initDoublePredicate()\n       }\n     }\n   }\n+\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    SelectorPredicateFactory that = (SelectorPredicateFactory) o;\n+    return Objects.equals(initLock, that.initLock);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "077710eadad760b334586f93ee1fb929911af78e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2MzczNA==", "bodyText": "Done", "url": "https://github.com/apache/druid/pull/9830#discussion_r424163734", "createdAt": "2020-05-13T04:19:19Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/SelectorPredicateFactory.java", "diffHunk": "@@ -147,4 +148,23 @@ private void initDoublePredicate()\n       }\n     }\n   }\n+\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    SelectorPredicateFactory that = (SelectorPredicateFactory) o;\n+    return Objects.equals(initLock, that.initLock);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEzOTYyNA=="}, "originalCommit": {"oid": "077710eadad760b334586f93ee1fb929911af78e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTI4MzAzOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/filter/LikeDimFilter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMjo1Nzo0N1rOGUfyEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNDo0Mzo1OFrOGUhO3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0NTQyNQ==", "bodyText": "Pattern doesn't implement equals(), you could use Pattern.toString() here and elsewhere", "url": "https://github.com/apache/druid/pull/9830#discussion_r424145425", "createdAt": "2020-05-13T02:57:47Z", "author": {"login": "jon-wei"}, "path": "processing/src/main/java/org/apache/druid/query/filter/LikeDimFilter.java", "diffHunk": "@@ -364,6 +328,79 @@ public SuffixMatch getSuffixMatch()\n       return suffixMatch;\n     }\n \n+    @VisibleForTesting\n+    static class PatternDruidPredicateFactory implements DruidPredicateFactory\n+    {\n+      private final ExtractionFn extractionFn;\n+      private final Pattern pattern;\n+\n+      PatternDruidPredicateFactory(ExtractionFn extractionFn, Pattern pattern)\n+      {\n+        this.extractionFn = extractionFn;\n+        this.pattern = pattern;\n+      }\n+\n+      @Override\n+      public Predicate<String> makeStringPredicate()\n+      {\n+        if (extractionFn != null) {\n+          return input -> matches(extractionFn.apply(input), pattern);\n+        } else {\n+          return input -> matches(input, pattern);\n+        }\n+      }\n+\n+      @Override\n+      public DruidLongPredicate makeLongPredicate()\n+      {\n+        if (extractionFn != null) {\n+          return input -> matches(extractionFn.apply(input), pattern);\n+        } else {\n+          return input -> matches(String.valueOf(input), pattern);\n+        }\n+      }\n+\n+      @Override\n+      public DruidFloatPredicate makeFloatPredicate()\n+      {\n+        if (extractionFn != null) {\n+          return input -> matches(extractionFn.apply(input), pattern);\n+        } else {\n+          return input -> matches(String.valueOf(input), pattern);\n+        }\n+      }\n+\n+      @Override\n+      public DruidDoublePredicate makeDoublePredicate()\n+      {\n+        if (extractionFn != null) {\n+          return input -> matches(extractionFn.apply(input), pattern);\n+        } else {\n+          return input -> matches(String.valueOf(input), pattern);\n+        }\n+      }\n+\n+      @Override\n+      public boolean equals(Object o)\n+      {\n+        if (this == o) {\n+          return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+          return false;\n+        }\n+        PatternDruidPredicateFactory that = (PatternDruidPredicateFactory) o;\n+        return Objects.equals(extractionFn, that.extractionFn) &&\n+               Objects.equals(pattern, that.pattern);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "077710eadad760b334586f93ee1fb929911af78e"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2MzgxNA==", "bodyText": "good catch! Done", "url": "https://github.com/apache/druid/pull/9830#discussion_r424163814", "createdAt": "2020-05-13T04:19:38Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/LikeDimFilter.java", "diffHunk": "@@ -364,6 +328,79 @@ public SuffixMatch getSuffixMatch()\n       return suffixMatch;\n     }\n \n+    @VisibleForTesting\n+    static class PatternDruidPredicateFactory implements DruidPredicateFactory\n+    {\n+      private final ExtractionFn extractionFn;\n+      private final Pattern pattern;\n+\n+      PatternDruidPredicateFactory(ExtractionFn extractionFn, Pattern pattern)\n+      {\n+        this.extractionFn = extractionFn;\n+        this.pattern = pattern;\n+      }\n+\n+      @Override\n+      public Predicate<String> makeStringPredicate()\n+      {\n+        if (extractionFn != null) {\n+          return input -> matches(extractionFn.apply(input), pattern);\n+        } else {\n+          return input -> matches(input, pattern);\n+        }\n+      }\n+\n+      @Override\n+      public DruidLongPredicate makeLongPredicate()\n+      {\n+        if (extractionFn != null) {\n+          return input -> matches(extractionFn.apply(input), pattern);\n+        } else {\n+          return input -> matches(String.valueOf(input), pattern);\n+        }\n+      }\n+\n+      @Override\n+      public DruidFloatPredicate makeFloatPredicate()\n+      {\n+        if (extractionFn != null) {\n+          return input -> matches(extractionFn.apply(input), pattern);\n+        } else {\n+          return input -> matches(String.valueOf(input), pattern);\n+        }\n+      }\n+\n+      @Override\n+      public DruidDoublePredicate makeDoublePredicate()\n+      {\n+        if (extractionFn != null) {\n+          return input -> matches(extractionFn.apply(input), pattern);\n+        } else {\n+          return input -> matches(String.valueOf(input), pattern);\n+        }\n+      }\n+\n+      @Override\n+      public boolean equals(Object o)\n+      {\n+        if (this == o) {\n+          return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+          return false;\n+        }\n+        PatternDruidPredicateFactory that = (PatternDruidPredicateFactory) o;\n+        return Objects.equals(extractionFn, that.extractionFn) &&\n+               Objects.equals(pattern, that.pattern);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0NTQyNQ=="}, "originalCommit": {"oid": "077710eadad760b334586f93ee1fb929911af78e"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2OTE4Mg==", "bodyText": "I've added an inspection profile failure for this. It was being used in one other class", "url": "https://github.com/apache/druid/pull/9830#discussion_r424169182", "createdAt": "2020-05-13T04:43:58Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/LikeDimFilter.java", "diffHunk": "@@ -364,6 +328,79 @@ public SuffixMatch getSuffixMatch()\n       return suffixMatch;\n     }\n \n+    @VisibleForTesting\n+    static class PatternDruidPredicateFactory implements DruidPredicateFactory\n+    {\n+      private final ExtractionFn extractionFn;\n+      private final Pattern pattern;\n+\n+      PatternDruidPredicateFactory(ExtractionFn extractionFn, Pattern pattern)\n+      {\n+        this.extractionFn = extractionFn;\n+        this.pattern = pattern;\n+      }\n+\n+      @Override\n+      public Predicate<String> makeStringPredicate()\n+      {\n+        if (extractionFn != null) {\n+          return input -> matches(extractionFn.apply(input), pattern);\n+        } else {\n+          return input -> matches(input, pattern);\n+        }\n+      }\n+\n+      @Override\n+      public DruidLongPredicate makeLongPredicate()\n+      {\n+        if (extractionFn != null) {\n+          return input -> matches(extractionFn.apply(input), pattern);\n+        } else {\n+          return input -> matches(String.valueOf(input), pattern);\n+        }\n+      }\n+\n+      @Override\n+      public DruidFloatPredicate makeFloatPredicate()\n+      {\n+        if (extractionFn != null) {\n+          return input -> matches(extractionFn.apply(input), pattern);\n+        } else {\n+          return input -> matches(String.valueOf(input), pattern);\n+        }\n+      }\n+\n+      @Override\n+      public DruidDoublePredicate makeDoublePredicate()\n+      {\n+        if (extractionFn != null) {\n+          return input -> matches(extractionFn.apply(input), pattern);\n+        } else {\n+          return input -> matches(String.valueOf(input), pattern);\n+        }\n+      }\n+\n+      @Override\n+      public boolean equals(Object o)\n+      {\n+        if (this == o) {\n+          return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+          return false;\n+        }\n+        PatternDruidPredicateFactory that = (PatternDruidPredicateFactory) o;\n+        return Objects.equals(extractionFn, that.extractionFn) &&\n+               Objects.equals(pattern, that.pattern);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0NTQyNQ=="}, "originalCommit": {"oid": "077710eadad760b334586f93ee1fb929911af78e"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDUzOTU1OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/filter/RegexFilter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOToxNjoyN1rOGU__wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOTo1NjoxN1rOGVBTPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3MzIxNg==", "bodyText": "I think the hashCode should use the toString as well", "url": "https://github.com/apache/druid/pull/9830#discussion_r424673216", "createdAt": "2020-05-13T19:16:27Z", "author": {"login": "jon-wei"}, "path": "processing/src/main/java/org/apache/druid/segment/filter/RegexFilter.java", "diffHunk": "@@ -100,7 +100,7 @@ public boolean equals(Object o)\n         return false;\n       }\n       PatternDruidPredicateFactory that = (PatternDruidPredicateFactory) o;\n-      return Objects.equals(pattern, that.pattern);\n+      return Objects.equals(pattern.toString(), that.pattern.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fa929deb3cb66d46e7b4e8996c326f26878f3ef"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5NDU5MA==", "bodyText": "\ud83e\udd26", "url": "https://github.com/apache/druid/pull/9830#discussion_r424694590", "createdAt": "2020-05-13T19:56:17Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/filter/RegexFilter.java", "diffHunk": "@@ -100,7 +100,7 @@ public boolean equals(Object o)\n         return false;\n       }\n       PatternDruidPredicateFactory that = (PatternDruidPredicateFactory) o;\n-      return Objects.equals(pattern, that.pattern);\n+      return Objects.equals(pattern.toString(), that.pattern.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3MzIxNg=="}, "originalCommit": {"oid": "6fa929deb3cb66d46e7b4e8996c326f26878f3ef"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2420, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}