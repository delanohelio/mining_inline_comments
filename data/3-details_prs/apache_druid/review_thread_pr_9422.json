{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNTY4NTQ0", "number": 9422, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMToyMjozMlrOEKSBaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMToyMzo0NVrOEKSC5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjE2NDg5OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/column/UnknownTypeComplexColumn.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMToyMjozMlrOGrO9Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMToxOTozM1rOGr1s4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4Njk2Ng==", "bodyText": "should this method and makeVectorObjectSelector maybe log.warn to provide evidence that this is happening? Or do you expect that would be too noisy?", "url": "https://github.com/apache/druid/pull/9422#discussion_r447986966", "createdAt": "2020-06-30T21:22:32Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/column/UnknownTypeComplexColumn.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.column;\n+\n+import org.apache.druid.segment.ColumnValueSelector;\n+import org.apache.druid.segment.NilColumnValueSelector;\n+import org.apache.druid.segment.data.ReadableOffset;\n+import org.apache.druid.segment.vector.NilVectorSelector;\n+import org.apache.druid.segment.vector.ReadableVectorOffset;\n+import org.apache.druid.segment.vector.VectorObjectSelector;\n+import org.apache.druid.segment.vector.VectorSizeInspector;\n+\n+import javax.annotation.Nullable;\n+\n+public class UnknownTypeComplexColumn implements ComplexColumn\n+{\n+  private static final UnknownTypeComplexColumn INSTANCE = new UnknownTypeComplexColumn();\n+\n+  public static UnknownTypeComplexColumn instance()\n+  {\n+    return INSTANCE;\n+  }\n+\n+  private static final NilVectorSelector NIL_VECTOR_SELECTOR_INSTANCE =\n+      NilVectorSelector.create(new VectorSizeInspector()\n+      {\n+        @Override\n+        public int getMaxVectorSize()\n+        {\n+          return 0;\n+        }\n+\n+        @Override\n+        public int getCurrentVectorSize()\n+        {\n+          return 0;\n+        }\n+      });\n+\n+  @Override\n+  public Class<?> getClazz()\n+  {\n+    return ComplexColumn.class;\n+  }\n+\n+  @Override\n+  public String getTypeName()\n+  {\n+    return \"UNKNOWN_COMPLEX_COLUMN_TYPE\";\n+  }\n+\n+  @Nullable\n+  @Override\n+  public Object getRowValue(int rowNum)\n+  {\n+    return null;\n+  }\n+\n+  @Override\n+  public int getLength()\n+  {\n+    return 0;\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+\n+  }\n+\n+  @Override\n+  public ColumnValueSelector<?> makeColumnValueSelector(ReadableOffset offset)\n+  {\n+    return NilColumnValueSelector.instance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c22f21419b591d534e04a1b625a8687560a38385"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0NDE1Nw==", "bodyText": "While it wouldn't be too noisy, it made me think will it give us enough information to understand which column is actually invalid now?", "url": "https://github.com/apache/druid/pull/9422#discussion_r448544157", "createdAt": "2020-07-01T18:30:04Z", "author": {"login": "samarthjain"}, "path": "processing/src/main/java/org/apache/druid/segment/column/UnknownTypeComplexColumn.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.column;\n+\n+import org.apache.druid.segment.ColumnValueSelector;\n+import org.apache.druid.segment.NilColumnValueSelector;\n+import org.apache.druid.segment.data.ReadableOffset;\n+import org.apache.druid.segment.vector.NilVectorSelector;\n+import org.apache.druid.segment.vector.ReadableVectorOffset;\n+import org.apache.druid.segment.vector.VectorObjectSelector;\n+import org.apache.druid.segment.vector.VectorSizeInspector;\n+\n+import javax.annotation.Nullable;\n+\n+public class UnknownTypeComplexColumn implements ComplexColumn\n+{\n+  private static final UnknownTypeComplexColumn INSTANCE = new UnknownTypeComplexColumn();\n+\n+  public static UnknownTypeComplexColumn instance()\n+  {\n+    return INSTANCE;\n+  }\n+\n+  private static final NilVectorSelector NIL_VECTOR_SELECTOR_INSTANCE =\n+      NilVectorSelector.create(new VectorSizeInspector()\n+      {\n+        @Override\n+        public int getMaxVectorSize()\n+        {\n+          return 0;\n+        }\n+\n+        @Override\n+        public int getCurrentVectorSize()\n+        {\n+          return 0;\n+        }\n+      });\n+\n+  @Override\n+  public Class<?> getClazz()\n+  {\n+    return ComplexColumn.class;\n+  }\n+\n+  @Override\n+  public String getTypeName()\n+  {\n+    return \"UNKNOWN_COMPLEX_COLUMN_TYPE\";\n+  }\n+\n+  @Nullable\n+  @Override\n+  public Object getRowValue(int rowNum)\n+  {\n+    return null;\n+  }\n+\n+  @Override\n+  public int getLength()\n+  {\n+    return 0;\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+\n+  }\n+\n+  @Override\n+  public ColumnValueSelector<?> makeColumnValueSelector(ReadableOffset offset)\n+  {\n+    return NilColumnValueSelector.instance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4Njk2Ng=="}, "originalCommit": {"oid": "c22f21419b591d534e04a1b625a8687560a38385"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU1NzQ4NQ==", "bodyText": "Yeah, it wouldn't really tell us which column is invalid, just that it is happening I think. Up to you if you want to add the log, I'm not totally sure its useful was just thinking out loud.", "url": "https://github.com/apache/druid/pull/9422#discussion_r448557485", "createdAt": "2020-07-01T18:56:52Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/column/UnknownTypeComplexColumn.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.column;\n+\n+import org.apache.druid.segment.ColumnValueSelector;\n+import org.apache.druid.segment.NilColumnValueSelector;\n+import org.apache.druid.segment.data.ReadableOffset;\n+import org.apache.druid.segment.vector.NilVectorSelector;\n+import org.apache.druid.segment.vector.ReadableVectorOffset;\n+import org.apache.druid.segment.vector.VectorObjectSelector;\n+import org.apache.druid.segment.vector.VectorSizeInspector;\n+\n+import javax.annotation.Nullable;\n+\n+public class UnknownTypeComplexColumn implements ComplexColumn\n+{\n+  private static final UnknownTypeComplexColumn INSTANCE = new UnknownTypeComplexColumn();\n+\n+  public static UnknownTypeComplexColumn instance()\n+  {\n+    return INSTANCE;\n+  }\n+\n+  private static final NilVectorSelector NIL_VECTOR_SELECTOR_INSTANCE =\n+      NilVectorSelector.create(new VectorSizeInspector()\n+      {\n+        @Override\n+        public int getMaxVectorSize()\n+        {\n+          return 0;\n+        }\n+\n+        @Override\n+        public int getCurrentVectorSize()\n+        {\n+          return 0;\n+        }\n+      });\n+\n+  @Override\n+  public Class<?> getClazz()\n+  {\n+    return ComplexColumn.class;\n+  }\n+\n+  @Override\n+  public String getTypeName()\n+  {\n+    return \"UNKNOWN_COMPLEX_COLUMN_TYPE\";\n+  }\n+\n+  @Nullable\n+  @Override\n+  public Object getRowValue(int rowNum)\n+  {\n+    return null;\n+  }\n+\n+  @Override\n+  public int getLength()\n+  {\n+    return 0;\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+\n+  }\n+\n+  @Override\n+  public ColumnValueSelector<?> makeColumnValueSelector(ReadableOffset offset)\n+  {\n+    return NilColumnValueSelector.instance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4Njk2Ng=="}, "originalCommit": {"oid": "c22f21419b591d534e04a1b625a8687560a38385"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyMTc5NA==", "bodyText": "Thinking more about it though, I do think we should log somewhere so the operator can know that an aggregator isn't loaded so a complex column can't be read. Maybe the SimpleColumnHolder would be more appropriate of a place?", "url": "https://github.com/apache/druid/pull/9422#discussion_r448621794", "createdAt": "2020-07-01T21:19:33Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/column/UnknownTypeComplexColumn.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.column;\n+\n+import org.apache.druid.segment.ColumnValueSelector;\n+import org.apache.druid.segment.NilColumnValueSelector;\n+import org.apache.druid.segment.data.ReadableOffset;\n+import org.apache.druid.segment.vector.NilVectorSelector;\n+import org.apache.druid.segment.vector.ReadableVectorOffset;\n+import org.apache.druid.segment.vector.VectorObjectSelector;\n+import org.apache.druid.segment.vector.VectorSizeInspector;\n+\n+import javax.annotation.Nullable;\n+\n+public class UnknownTypeComplexColumn implements ComplexColumn\n+{\n+  private static final UnknownTypeComplexColumn INSTANCE = new UnknownTypeComplexColumn();\n+\n+  public static UnknownTypeComplexColumn instance()\n+  {\n+    return INSTANCE;\n+  }\n+\n+  private static final NilVectorSelector NIL_VECTOR_SELECTOR_INSTANCE =\n+      NilVectorSelector.create(new VectorSizeInspector()\n+      {\n+        @Override\n+        public int getMaxVectorSize()\n+        {\n+          return 0;\n+        }\n+\n+        @Override\n+        public int getCurrentVectorSize()\n+        {\n+          return 0;\n+        }\n+      });\n+\n+  @Override\n+  public Class<?> getClazz()\n+  {\n+    return ComplexColumn.class;\n+  }\n+\n+  @Override\n+  public String getTypeName()\n+  {\n+    return \"UNKNOWN_COMPLEX_COLUMN_TYPE\";\n+  }\n+\n+  @Nullable\n+  @Override\n+  public Object getRowValue(int rowNum)\n+  {\n+    return null;\n+  }\n+\n+  @Override\n+  public int getLength()\n+  {\n+    return 0;\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+\n+  }\n+\n+  @Override\n+  public ColumnValueSelector<?> makeColumnValueSelector(ReadableOffset offset)\n+  {\n+    return NilColumnValueSelector.instance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4Njk2Ng=="}, "originalCommit": {"oid": "c22f21419b591d534e04a1b625a8687560a38385"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjE2ODY4OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/column/UnknownTypeComplexColumn.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMToyMzo0NVrOGrO_aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODozMDoyNVrOGrw-Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4NzU2MQ==", "bodyText": "I think this should I think be making a NilVectorSelector from the offset so that max vector size is set correctly", "url": "https://github.com/apache/druid/pull/9422#discussion_r447987561", "createdAt": "2020-06-30T21:23:45Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/column/UnknownTypeComplexColumn.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.column;\n+\n+import org.apache.druid.segment.ColumnValueSelector;\n+import org.apache.druid.segment.NilColumnValueSelector;\n+import org.apache.druid.segment.data.ReadableOffset;\n+import org.apache.druid.segment.vector.NilVectorSelector;\n+import org.apache.druid.segment.vector.ReadableVectorOffset;\n+import org.apache.druid.segment.vector.VectorObjectSelector;\n+import org.apache.druid.segment.vector.VectorSizeInspector;\n+\n+import javax.annotation.Nullable;\n+\n+public class UnknownTypeComplexColumn implements ComplexColumn\n+{\n+  private static final UnknownTypeComplexColumn INSTANCE = new UnknownTypeComplexColumn();\n+\n+  public static UnknownTypeComplexColumn instance()\n+  {\n+    return INSTANCE;\n+  }\n+\n+  private static final NilVectorSelector NIL_VECTOR_SELECTOR_INSTANCE =\n+      NilVectorSelector.create(new VectorSizeInspector()\n+      {\n+        @Override\n+        public int getMaxVectorSize()\n+        {\n+          return 0;\n+        }\n+\n+        @Override\n+        public int getCurrentVectorSize()\n+        {\n+          return 0;\n+        }\n+      });\n+\n+  @Override\n+  public Class<?> getClazz()\n+  {\n+    return ComplexColumn.class;\n+  }\n+\n+  @Override\n+  public String getTypeName()\n+  {\n+    return \"UNKNOWN_COMPLEX_COLUMN_TYPE\";\n+  }\n+\n+  @Nullable\n+  @Override\n+  public Object getRowValue(int rowNum)\n+  {\n+    return null;\n+  }\n+\n+  @Override\n+  public int getLength()\n+  {\n+    return 0;\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+\n+  }\n+\n+  @Override\n+  public ColumnValueSelector<?> makeColumnValueSelector(ReadableOffset offset)\n+  {\n+    return NilColumnValueSelector.instance();\n+  }\n+\n+  @Override\n+  public VectorObjectSelector makeVectorObjectSelector(ReadableVectorOffset offset)\n+  {\n+    return NIL_VECTOR_SELECTOR_INSTANCE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c22f21419b591d534e04a1b625a8687560a38385"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwMTk2Ng==", "bodyText": "Oops, good point. @samarthjain could you please fix this?", "url": "https://github.com/apache/druid/pull/9422#discussion_r448001966", "createdAt": "2020-06-30T21:55:45Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/segment/column/UnknownTypeComplexColumn.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.column;\n+\n+import org.apache.druid.segment.ColumnValueSelector;\n+import org.apache.druid.segment.NilColumnValueSelector;\n+import org.apache.druid.segment.data.ReadableOffset;\n+import org.apache.druid.segment.vector.NilVectorSelector;\n+import org.apache.druid.segment.vector.ReadableVectorOffset;\n+import org.apache.druid.segment.vector.VectorObjectSelector;\n+import org.apache.druid.segment.vector.VectorSizeInspector;\n+\n+import javax.annotation.Nullable;\n+\n+public class UnknownTypeComplexColumn implements ComplexColumn\n+{\n+  private static final UnknownTypeComplexColumn INSTANCE = new UnknownTypeComplexColumn();\n+\n+  public static UnknownTypeComplexColumn instance()\n+  {\n+    return INSTANCE;\n+  }\n+\n+  private static final NilVectorSelector NIL_VECTOR_SELECTOR_INSTANCE =\n+      NilVectorSelector.create(new VectorSizeInspector()\n+      {\n+        @Override\n+        public int getMaxVectorSize()\n+        {\n+          return 0;\n+        }\n+\n+        @Override\n+        public int getCurrentVectorSize()\n+        {\n+          return 0;\n+        }\n+      });\n+\n+  @Override\n+  public Class<?> getClazz()\n+  {\n+    return ComplexColumn.class;\n+  }\n+\n+  @Override\n+  public String getTypeName()\n+  {\n+    return \"UNKNOWN_COMPLEX_COLUMN_TYPE\";\n+  }\n+\n+  @Nullable\n+  @Override\n+  public Object getRowValue(int rowNum)\n+  {\n+    return null;\n+  }\n+\n+  @Override\n+  public int getLength()\n+  {\n+    return 0;\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+\n+  }\n+\n+  @Override\n+  public ColumnValueSelector<?> makeColumnValueSelector(ReadableOffset offset)\n+  {\n+    return NilColumnValueSelector.instance();\n+  }\n+\n+  @Override\n+  public VectorObjectSelector makeVectorObjectSelector(ReadableVectorOffset offset)\n+  {\n+    return NIL_VECTOR_SELECTOR_INSTANCE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4NzU2MQ=="}, "originalCommit": {"oid": "c22f21419b591d534e04a1b625a8687560a38385"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0NjExMg==", "bodyText": "@clintropolis - can you provide me a snippet of what needs to be done. I don't see a method available in NilVectorSelector that would taking in ReadableVectorOffset", "url": "https://github.com/apache/druid/pull/9422#discussion_r448046112", "createdAt": "2020-07-01T00:09:53Z", "author": {"login": "samarthjain"}, "path": "processing/src/main/java/org/apache/druid/segment/column/UnknownTypeComplexColumn.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.column;\n+\n+import org.apache.druid.segment.ColumnValueSelector;\n+import org.apache.druid.segment.NilColumnValueSelector;\n+import org.apache.druid.segment.data.ReadableOffset;\n+import org.apache.druid.segment.vector.NilVectorSelector;\n+import org.apache.druid.segment.vector.ReadableVectorOffset;\n+import org.apache.druid.segment.vector.VectorObjectSelector;\n+import org.apache.druid.segment.vector.VectorSizeInspector;\n+\n+import javax.annotation.Nullable;\n+\n+public class UnknownTypeComplexColumn implements ComplexColumn\n+{\n+  private static final UnknownTypeComplexColumn INSTANCE = new UnknownTypeComplexColumn();\n+\n+  public static UnknownTypeComplexColumn instance()\n+  {\n+    return INSTANCE;\n+  }\n+\n+  private static final NilVectorSelector NIL_VECTOR_SELECTOR_INSTANCE =\n+      NilVectorSelector.create(new VectorSizeInspector()\n+      {\n+        @Override\n+        public int getMaxVectorSize()\n+        {\n+          return 0;\n+        }\n+\n+        @Override\n+        public int getCurrentVectorSize()\n+        {\n+          return 0;\n+        }\n+      });\n+\n+  @Override\n+  public Class<?> getClazz()\n+  {\n+    return ComplexColumn.class;\n+  }\n+\n+  @Override\n+  public String getTypeName()\n+  {\n+    return \"UNKNOWN_COMPLEX_COLUMN_TYPE\";\n+  }\n+\n+  @Nullable\n+  @Override\n+  public Object getRowValue(int rowNum)\n+  {\n+    return null;\n+  }\n+\n+  @Override\n+  public int getLength()\n+  {\n+    return 0;\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+\n+  }\n+\n+  @Override\n+  public ColumnValueSelector<?> makeColumnValueSelector(ReadableOffset offset)\n+  {\n+    return NilColumnValueSelector.instance();\n+  }\n+\n+  @Override\n+  public VectorObjectSelector makeVectorObjectSelector(ReadableVectorOffset offset)\n+  {\n+    return NIL_VECTOR_SELECTOR_INSTANCE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4NzU2MQ=="}, "originalCommit": {"oid": "c22f21419b591d534e04a1b625a8687560a38385"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0ODc2Mw==", "bodyText": "ReadableVectorOffset is a VectorSizeInspector, so I think return NilVectorSelector.create(offset); is all you need to do.", "url": "https://github.com/apache/druid/pull/9422#discussion_r448048763", "createdAt": "2020-07-01T00:19:54Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/column/UnknownTypeComplexColumn.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.column;\n+\n+import org.apache.druid.segment.ColumnValueSelector;\n+import org.apache.druid.segment.NilColumnValueSelector;\n+import org.apache.druid.segment.data.ReadableOffset;\n+import org.apache.druid.segment.vector.NilVectorSelector;\n+import org.apache.druid.segment.vector.ReadableVectorOffset;\n+import org.apache.druid.segment.vector.VectorObjectSelector;\n+import org.apache.druid.segment.vector.VectorSizeInspector;\n+\n+import javax.annotation.Nullable;\n+\n+public class UnknownTypeComplexColumn implements ComplexColumn\n+{\n+  private static final UnknownTypeComplexColumn INSTANCE = new UnknownTypeComplexColumn();\n+\n+  public static UnknownTypeComplexColumn instance()\n+  {\n+    return INSTANCE;\n+  }\n+\n+  private static final NilVectorSelector NIL_VECTOR_SELECTOR_INSTANCE =\n+      NilVectorSelector.create(new VectorSizeInspector()\n+      {\n+        @Override\n+        public int getMaxVectorSize()\n+        {\n+          return 0;\n+        }\n+\n+        @Override\n+        public int getCurrentVectorSize()\n+        {\n+          return 0;\n+        }\n+      });\n+\n+  @Override\n+  public Class<?> getClazz()\n+  {\n+    return ComplexColumn.class;\n+  }\n+\n+  @Override\n+  public String getTypeName()\n+  {\n+    return \"UNKNOWN_COMPLEX_COLUMN_TYPE\";\n+  }\n+\n+  @Nullable\n+  @Override\n+  public Object getRowValue(int rowNum)\n+  {\n+    return null;\n+  }\n+\n+  @Override\n+  public int getLength()\n+  {\n+    return 0;\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+\n+  }\n+\n+  @Override\n+  public ColumnValueSelector<?> makeColumnValueSelector(ReadableOffset offset)\n+  {\n+    return NilColumnValueSelector.instance();\n+  }\n+\n+  @Override\n+  public VectorObjectSelector makeVectorObjectSelector(ReadableVectorOffset offset)\n+  {\n+    return NIL_VECTOR_SELECTOR_INSTANCE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4NzU2MQ=="}, "originalCommit": {"oid": "c22f21419b591d534e04a1b625a8687560a38385"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU0NDM0Mw==", "bodyText": "Thanks!", "url": "https://github.com/apache/druid/pull/9422#discussion_r448544343", "createdAt": "2020-07-01T18:30:25Z", "author": {"login": "samarthjain"}, "path": "processing/src/main/java/org/apache/druid/segment/column/UnknownTypeComplexColumn.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.column;\n+\n+import org.apache.druid.segment.ColumnValueSelector;\n+import org.apache.druid.segment.NilColumnValueSelector;\n+import org.apache.druid.segment.data.ReadableOffset;\n+import org.apache.druid.segment.vector.NilVectorSelector;\n+import org.apache.druid.segment.vector.ReadableVectorOffset;\n+import org.apache.druid.segment.vector.VectorObjectSelector;\n+import org.apache.druid.segment.vector.VectorSizeInspector;\n+\n+import javax.annotation.Nullable;\n+\n+public class UnknownTypeComplexColumn implements ComplexColumn\n+{\n+  private static final UnknownTypeComplexColumn INSTANCE = new UnknownTypeComplexColumn();\n+\n+  public static UnknownTypeComplexColumn instance()\n+  {\n+    return INSTANCE;\n+  }\n+\n+  private static final NilVectorSelector NIL_VECTOR_SELECTOR_INSTANCE =\n+      NilVectorSelector.create(new VectorSizeInspector()\n+      {\n+        @Override\n+        public int getMaxVectorSize()\n+        {\n+          return 0;\n+        }\n+\n+        @Override\n+        public int getCurrentVectorSize()\n+        {\n+          return 0;\n+        }\n+      });\n+\n+  @Override\n+  public Class<?> getClazz()\n+  {\n+    return ComplexColumn.class;\n+  }\n+\n+  @Override\n+  public String getTypeName()\n+  {\n+    return \"UNKNOWN_COMPLEX_COLUMN_TYPE\";\n+  }\n+\n+  @Nullable\n+  @Override\n+  public Object getRowValue(int rowNum)\n+  {\n+    return null;\n+  }\n+\n+  @Override\n+  public int getLength()\n+  {\n+    return 0;\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+\n+  }\n+\n+  @Override\n+  public ColumnValueSelector<?> makeColumnValueSelector(ReadableOffset offset)\n+  {\n+    return NilColumnValueSelector.instance();\n+  }\n+\n+  @Override\n+  public VectorObjectSelector makeVectorObjectSelector(ReadableVectorOffset offset)\n+  {\n+    return NIL_VECTOR_SELECTOR_INSTANCE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk4NzU2MQ=="}, "originalCommit": {"oid": "c22f21419b591d534e04a1b625a8687560a38385"}, "originalPosition": 97}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2791, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}