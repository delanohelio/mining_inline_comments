{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNTQyOTMw", "number": 9563, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMDo1OTo0MVrODr1OEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMToxMToxM1rODr1ftQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Mjg3MzE0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/server/ClientQuerySegmentWalker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMDo1OTo0MlrOF8aMCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMDo1OTo0MlrOF8aMCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4Nzk0NQ==", "bodyText": "Unnecessary change?", "url": "https://github.com/apache/druid/pull/9563#discussion_r398887945", "createdAt": "2020-03-26T20:59:42Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/server/ClientQuerySegmentWalker.java", "diffHunk": "@@ -462,7 +462,8 @@ public QuerySwappingQueryRunner(QueryRunner<T> baseRunner, Query<T> query, Query\n         throw new ISE(\"Unexpected query received\");\n       }\n \n-      return baseRunner.run(queryPlus.withQuery(newQuery), responseContext);\n+      Sequence<T> result = baseRunner.run(queryPlus.withQuery(newQuery), responseContext);\n+      return result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "beb572259a54eb906aca50319709e35af4177d70"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjkxODI5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/server/LocalQuerySegmentWalker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMToxMToxM1rOF8aozA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMToxMToxM1rOF8aozA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg5NTMwOA==", "bodyText": "Would you add @Nullable to the constructor parameter of SegmentServerSelector and getServer()?", "url": "https://github.com/apache/druid/pull/9563#discussion_r398895308", "createdAt": "2020-03-26T21:11:13Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/server/LocalQuerySegmentWalker.java", "diffHunk": "@@ -107,17 +116,25 @@ public LocalQuerySegmentWalker(\n     // Note: Not calling 'postProcess'; it isn't official/documented functionality so we'll only support it where\n     // it is already supported.\n     return new FluentQueryRunnerBuilder<>(queryRunnerFactory.getToolchest())\n-        .create(baseRunner)\n+        .create(scheduler.wrapQueryRunner(baseRunner))\n         .applyPreMergeDecoration()\n         .mergeResults()\n         .applyPostMergeDecoration()\n         .emitCPUTimeMetric(emitter, cpuAccumulator);\n   }\n-\n   @Override\n   public <T> QueryRunner<T> getQueryRunnerForSegments(final Query<T> query, final Iterable<SegmentDescriptor> specs)\n   {\n     // SegmentWranglers only work based on intervals and cannot run with specific segments.\n     throw new ISE(\"Cannot run with specific segments\");\n   }\n+\n+  private <T> Query<T> prioritizeAndLaneQuery(Query<T> query, Iterable<Segment> segments)\n+  {\n+    Set<SegmentServerSelector> segmentServerSelectors = new HashSet<>();\n+    for (Segment s : segments) {\n+      segmentServerSelectors.add(new SegmentServerSelector(null, s.getId().toDescriptor()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "beb572259a54eb906aca50319709e35af4177d70"}, "originalPosition": 103}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2672, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}