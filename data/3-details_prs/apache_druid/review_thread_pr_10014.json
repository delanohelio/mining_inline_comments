{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMjkzNzQy", "number": 10014, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODozNzoyMVrOEEMrHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTozODowMFrOEGHhhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODM3NDA0OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/org/apache/druid/sql/calcite/planner/DruidRexExecutor.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODozNzoyMVrOGhqxQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDozNjo0MVrOGkeeyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1NjkyOA==", "bodyText": "I wasn't sure how to deal with non numbers here, so I decided to leave the behavior as is and let it fail. It's unclear to me if Calcite will allow us to get here. In my local testing, I've seen NumberFormatExceptions thrown in Calcite when I tried to write sql expressions that would compute to Nan or infinity (like 0D / 0).\nMy thoughts were this is an edge case so it's ok to leave this behavior as is.", "url": "https://github.com/apache/druid/pull/10014#discussion_r437956928", "createdAt": "2020-06-10T08:37:21Z", "author": {"login": "suneet-s"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/planner/DruidRexExecutor.java", "diffHunk": "@@ -122,6 +122,7 @@ public void reduce(\n             if (exprResult.type() == ExprType.LONG) {\n               bigDecimal = BigDecimal.valueOf(exprResult.asLong());\n             } else {\n+              // if exprResult evaluates to Nan or infinity, this will throw a NumberFormatException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea321019ae87296b3fe1e53ace4b3b576012a5b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzNDA2Nw==", "bodyText": "Wondering what is your thought on making this reduce to value of 0 (same as the other stuff)", "url": "https://github.com/apache/druid/pull/10014#discussion_r439134067", "createdAt": "2020-06-12T00:04:07Z", "author": {"login": "maytasm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/planner/DruidRexExecutor.java", "diffHunk": "@@ -122,6 +122,7 @@ public void reduce(\n             if (exprResult.type() == ExprType.LONG) {\n               bigDecimal = BigDecimal.valueOf(exprResult.asLong());\n             } else {\n+              // if exprResult evaluates to Nan or infinity, this will throw a NumberFormatException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1NjkyOA=="}, "originalCommit": {"oid": "bea321019ae87296b3fe1e53ace4b3b576012a5b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUwNTE0NA==", "bodyText": "I thought this might produce confusing behavior if the literal was used in a comparison operation. For eg. 1 < POSITIVE_INFINITY would return false because POSITIVE_INFINITY would evaluate to if we changed the code here.", "url": "https://github.com/apache/druid/pull/10014#discussion_r440505144", "createdAt": "2020-06-15T23:41:32Z", "author": {"login": "suneet-s"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/planner/DruidRexExecutor.java", "diffHunk": "@@ -122,6 +122,7 @@ public void reduce(\n             if (exprResult.type() == ExprType.LONG) {\n               bigDecimal = BigDecimal.valueOf(exprResult.asLong());\n             } else {\n+              // if exprResult evaluates to Nan or infinity, this will throw a NumberFormatException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1NjkyOA=="}, "originalCommit": {"oid": "bea321019ae87296b3fe1e53ace4b3b576012a5b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUwNTYyMA==", "bodyText": "I guess the same argument can be made if we compared 2 columns x < y and x was 1, y was POSITIVE_INFINITY then the result of the comparison would be false after this change.", "url": "https://github.com/apache/druid/pull/10014#discussion_r440505620", "createdAt": "2020-06-15T23:43:05Z", "author": {"login": "suneet-s"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/planner/DruidRexExecutor.java", "diffHunk": "@@ -122,6 +122,7 @@ public void reduce(\n             if (exprResult.type() == ExprType.LONG) {\n               bigDecimal = BigDecimal.valueOf(exprResult.asLong());\n             } else {\n+              // if exprResult evaluates to Nan or infinity, this will throw a NumberFormatException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1NjkyOA=="}, "originalCommit": {"oid": "bea321019ae87296b3fe1e53ace4b3b576012a5b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUzNDA2NQ==", "bodyText": "Do you know if this is mention in Druid docs?", "url": "https://github.com/apache/druid/pull/10014#discussion_r440534065", "createdAt": "2020-06-16T01:26:09Z", "author": {"login": "maytasm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/planner/DruidRexExecutor.java", "diffHunk": "@@ -122,6 +122,7 @@ public void reduce(\n             if (exprResult.type() == ExprType.LONG) {\n               bigDecimal = BigDecimal.valueOf(exprResult.asLong());\n             } else {\n+              // if exprResult evaluates to Nan or infinity, this will throw a NumberFormatException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1NjkyOA=="}, "originalCommit": {"oid": "bea321019ae87296b3fe1e53ace4b3b576012a5b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkwMTMyMg==", "bodyText": "I don't think so. I was afraid documenting all the edge cases would make the docs too verbose.", "url": "https://github.com/apache/druid/pull/10014#discussion_r440901322", "createdAt": "2020-06-16T14:36:41Z", "author": {"login": "suneet-s"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/planner/DruidRexExecutor.java", "diffHunk": "@@ -122,6 +122,7 @@ public void reduce(\n             if (exprResult.type() == ExprType.LONG) {\n               bigDecimal = BigDecimal.valueOf(exprResult.asLong());\n             } else {\n+              // if exprResult evaluates to Nan or infinity, this will throw a NumberFormatException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1NjkyOA=="}, "originalCommit": {"oid": "bea321019ae87296b3fe1e53ace4b3b576012a5b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTU5MjgxOnYy", "diffSide": "RIGHT", "path": "docs/misc/math-expr.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMzo1NzoyN1rOGiygog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMzo1NzoyN1rOGiygog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzMjMyMg==", "bodyText": "explicitly mention positive and negative infinity", "url": "https://github.com/apache/druid/pull/10014#discussion_r439132322", "createdAt": "2020-06-11T23:57:27Z", "author": {"login": "maytasm"}, "path": "docs/misc/math-expr.md", "diffHunk": "@@ -141,7 +141,7 @@ See javadoc of java.lang.Math for detailed explanation for each function.\n |pow|pow(x, y) would return the value of the x raised to the power of y|\n |remainder|remainder(x, y) would return the remainder operation on two arguments as prescribed by the IEEE 754 standard|\n |rint|rint(x) would return value that is closest in value to x and is equal to a mathematical integer|\n-|round|round(x, y) would return the value of the x rounded to the y decimal places. While x can be an integer or floating-point number, y must be an integer. The type of the return value is specified by that of x. y defaults to 0 if omitted. When y is negative, x is rounded on the left side of the y decimal points.|\n+|round|round(x, y) would return the value of the x rounded to the y decimal places. While x can be an integer or floating-point number, y must be an integer. The type of the return value is specified by that of x. y defaults to 0 if omitted. When y is negative, x is rounded on the left side of the y decimal points. If x is either `NaN` or infinity, this will return 0. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "526964cc2fad25cce996a475825f2f80f83b6bab"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTU5MzAxOnYy", "diffSide": "RIGHT", "path": "docs/querying/sql.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMzo1NzozNFrOGiygxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMzo1NzozNFrOGiygxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzMjM1Ng==", "bodyText": "explicitly mention positive and negative infinity", "url": "https://github.com/apache/druid/pull/10014#discussion_r439132356", "createdAt": "2020-06-11T23:57:34Z", "author": {"login": "maytasm"}, "path": "docs/querying/sql.md", "diffHunk": "@@ -287,7 +287,7 @@ to FLOAT. At runtime, Druid will widen 32-bit floats to 64-bit for most expressi\n |`SQRT(expr)`|Square root.|\n |`TRUNCATE(expr[, digits])`|Truncate expr to a specific number of decimal digits. If digits is negative, then this truncates that many places to the left of the decimal point. Digits defaults to zero if not specified.|\n |`TRUNC(expr[, digits])`|Synonym for `TRUNCATE`.|\n-|`ROUND(expr[, digits])`|`ROUND(x, y)` would return the value of the x rounded to the y decimal places. While x can be an integer or floating-point number, y must be an integer. The type of the return value is specified by that of x. y defaults to 0 if omitted. When y is negative, x is rounded on the left side of the y decimal points.|\n+|`ROUND(expr[, digits])`|`ROUND(x, y)` would return the value of the x rounded to the y decimal places. While x can be an integer or floating-point number, y must be an integer. The type of the return value is specified by that of x. y defaults to 0 if omitted. When y is negative, x is rounded on the left side of the y decimal points. If `expr` evaluates to either `NaN` or infinity, this will return 0. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "526964cc2fad25cce996a475825f2f80f83b6bab"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTU5NzA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/math/expr/Function.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMDowMDowM1rOGiyjTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMToyNjozOFrOGkIEqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzMzAwNA==", "bodyText": "Should we use Math.round(val) here instead of hard-code to 0?", "url": "https://github.com/apache/druid/pull/10014#discussion_r439133004", "createdAt": "2020-06-12T00:00:03Z", "author": {"login": "maytasm"}, "path": "core/src/main/java/org/apache/druid/math/expr/Function.java", "diffHunk": "@@ -737,7 +745,12 @@ private ExprEval eval(ExprEval param, int scale)\n       if (param.type() == ExprType.LONG) {\n         return ExprEval.of(BigDecimal.valueOf(param.asLong()).setScale(scale, RoundingMode.HALF_UP).longValue());\n       } else if (param.type() == ExprType.DOUBLE) {\n-        return ExprEval.of(BigDecimal.valueOf(param.asDouble()).setScale(scale, RoundingMode.HALF_UP).doubleValue());\n+        double val = param.asDouble();\n+        if (Double.isNaN(val) || val == Double.POSITIVE_INFINITY || val == Double.NEGATIVE_INFINITY) {\n+          // This is the behavior of Math.round()\n+          return ExprEval.of(0L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "526964cc2fad25cce996a475825f2f80f83b6bab"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNjA5Ng==", "bodyText": "I wasn't sure of the perf implications of calling Math.round It looks like it calls out to some native function, does some bit magic and then finally just casts the object to a long - which is how we get 0L\nSo I thought it would be better to just return 0 directly", "url": "https://github.com/apache/druid/pull/10014#discussion_r440316096", "createdAt": "2020-06-15T16:57:04Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/math/expr/Function.java", "diffHunk": "@@ -737,7 +745,12 @@ private ExprEval eval(ExprEval param, int scale)\n       if (param.type() == ExprType.LONG) {\n         return ExprEval.of(BigDecimal.valueOf(param.asLong()).setScale(scale, RoundingMode.HALF_UP).longValue());\n       } else if (param.type() == ExprType.DOUBLE) {\n-        return ExprEval.of(BigDecimal.valueOf(param.asDouble()).setScale(scale, RoundingMode.HALF_UP).doubleValue());\n+        double val = param.asDouble();\n+        if (Double.isNaN(val) || val == Double.POSITIVE_INFINITY || val == Double.NEGATIVE_INFINITY) {\n+          // This is the behavior of Math.round()\n+          return ExprEval.of(0L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzMzAwNA=="}, "originalCommit": {"oid": "526964cc2fad25cce996a475825f2f80f83b6bab"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUzNDE4NA==", "bodyText": "Sounds good to me.", "url": "https://github.com/apache/druid/pull/10014#discussion_r440534184", "createdAt": "2020-06-16T01:26:38Z", "author": {"login": "maytasm"}, "path": "core/src/main/java/org/apache/druid/math/expr/Function.java", "diffHunk": "@@ -737,7 +745,12 @@ private ExprEval eval(ExprEval param, int scale)\n       if (param.type() == ExprType.LONG) {\n         return ExprEval.of(BigDecimal.valueOf(param.asLong()).setScale(scale, RoundingMode.HALF_UP).longValue());\n       } else if (param.type() == ExprType.DOUBLE) {\n-        return ExprEval.of(BigDecimal.valueOf(param.asDouble()).setScale(scale, RoundingMode.HALF_UP).doubleValue());\n+        double val = param.asDouble();\n+        if (Double.isNaN(val) || val == Double.POSITIVE_INFINITY || val == Double.NEGATIVE_INFINITY) {\n+          // This is the behavior of Math.round()\n+          return ExprEval.of(0L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEzMzAwNA=="}, "originalCommit": {"oid": "526964cc2fad25cce996a475825f2f80f83b6bab"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODQ5ODc3OnYy", "diffSide": "RIGHT", "path": "docs/misc/math-expr.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTozNjo0OFrOGkuDkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTozNjo0OFrOGkuDkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1NjQ5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |round|round(x, y) would return the value of the x rounded to the y decimal places. While x can be an integer or floating-point number, y must be an integer. The type of the return value is specified by that of x. y defaults to 0 if omitted. When y is negative, x is rounded on the left side of the y decimal points. If x is `NaN`, this will return 0. |\n          \n          \n            \n            |round|round(x, y) would return the value of the x rounded to the y decimal places. While x can be an integer or floating-point number, y must be an integer. The type of the return value is specified by that of x. y defaults to 0 if omitted. When y is negative, x is rounded on the left side of the y decimal points. If x is `NaN`, x will return 0. If x is infinity, x will be converted to the nearest finite double. |", "url": "https://github.com/apache/druid/pull/10014#discussion_r441156498", "createdAt": "2020-06-16T21:36:48Z", "author": {"login": "suneet-s"}, "path": "docs/misc/math-expr.md", "diffHunk": "@@ -141,7 +141,7 @@ See javadoc of java.lang.Math for detailed explanation for each function.\n |pow|pow(x, y) would return the value of the x raised to the power of y|\n |remainder|remainder(x, y) would return the remainder operation on two arguments as prescribed by the IEEE 754 standard|\n |rint|rint(x) would return value that is closest in value to x and is equal to a mathematical integer|\n-|round|round(x, y) would return the value of the x rounded to the y decimal places. While x can be an integer or floating-point number, y must be an integer. The type of the return value is specified by that of x. y defaults to 0 if omitted. When y is negative, x is rounded on the left side of the y decimal points.|\n+|round|round(x, y) would return the value of the x rounded to the y decimal places. While x can be an integer or floating-point number, y must be an integer. The type of the return value is specified by that of x. y defaults to 0 if omitted. When y is negative, x is rounded on the left side of the y decimal points. If x is `NaN`, this will return 0. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb8fb51e1a637b04ac794f4ed82e357a0797b96e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODUwMTgxOnYy", "diffSide": "RIGHT", "path": "docs/querying/sql.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTozODowMFrOGkuFew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTozODowMFrOGkuFew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1Njk4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |`ROUND(expr[, digits])`|`ROUND(x, y)` would return the value of the x rounded to the y decimal places. While x can be an integer or floating-point number, y must be an integer. The type of the return value is specified by that of x. y defaults to 0 if omitted. When y is negative, x is rounded on the left side of the y decimal points. If `expr` evaluates to either `NaN`, this will return 0. |\n          \n          \n            \n            |`ROUND(expr[, digits])`|`ROUND(x, y)` would return the value of the x rounded to the y decimal places. While x can be an integer or floating-point number, y must be an integer. The type of the return value is specified by that of x. y defaults to 0 if omitted. When y is negative, x is rounded on the left side of the y decimal points. If `expr` evaluates to either `NaN`, `expr` will be converted to 0. If `expr` is infinity, `expr` will be converted to the nearest finite double. |", "url": "https://github.com/apache/druid/pull/10014#discussion_r441156987", "createdAt": "2020-06-16T21:38:00Z", "author": {"login": "suneet-s"}, "path": "docs/querying/sql.md", "diffHunk": "@@ -287,7 +287,7 @@ to FLOAT. At runtime, Druid will widen 32-bit floats to 64-bit for most expressi\n |`SQRT(expr)`|Square root.|\n |`TRUNCATE(expr[, digits])`|Truncate expr to a specific number of decimal digits. If digits is negative, then this truncates that many places to the left of the decimal point. Digits defaults to zero if not specified.|\n |`TRUNC(expr[, digits])`|Synonym for `TRUNCATE`.|\n-|`ROUND(expr[, digits])`|`ROUND(x, y)` would return the value of the x rounded to the y decimal places. While x can be an integer or floating-point number, y must be an integer. The type of the return value is specified by that of x. y defaults to 0 if omitted. When y is negative, x is rounded on the left side of the y decimal points.|\n+|`ROUND(expr[, digits])`|`ROUND(x, y)` would return the value of the x rounded to the y decimal places. While x can be an integer or floating-point number, y must be an integer. The type of the return value is specified by that of x. y defaults to 0 if omitted. When y is negative, x is rounded on the left side of the y decimal points. If `expr` evaluates to either `NaN`, this will return 0. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb8fb51e1a637b04ac794f4ed82e357a0797b96e"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2315, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}