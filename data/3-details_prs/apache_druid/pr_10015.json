{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMzAxMDQz", "number": 10015, "title": "Fix join filter rewrites with nested queries", "bodyText": "Fixes #9792\nAnother approach to #9978\nThis PR fixes the above issue by having Joinables.createSegmentMapFn walk the query being analyzed to find instances of queries that read a JoinDatasource, performing the pre-analysis for these queries and storing them in a newly introducedJoinFilterPreAnalysisGroup.\nIf there is only one query level that requires the join filter rewrite pre-analysis, then the group operates in a more efficient single filter mode, as hashing/comparing filters can be expensive if they're large.\nThe parameters that control join filter rewrites have been moved into a JoinFilterRewriteConfig class.\nThis PR has:\n\n been self-reviewed.\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-06-10T08:46:30Z", "url": "https://github.com/apache/druid/pull/10015", "merged": true, "mergeCommit": {"oid": "37e150c0755c0efba609601b1122cd6bc8a271fb"}, "closed": true, "closedAt": "2020-06-19T04:32:30Z", "author": {"login": "jon-wei"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcp1ir_AH2gAyNDMyMzAxMDQzOmY1N2M2YzBlNjJmNjM1MDc4YWI5MDk5MmMyNjkzMjRkZmZmYzc4MzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsoMneAH2gAyNDMyMzAxMDQzOjc5ODA0Njk3MDVkMDIxMGQ4NzgyMTk1NzVmM2YyNzZkNjJiMDdjNTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f57c6c0e62f635078ab90992c269324dfffc7835", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/f57c6c0e62f635078ab90992c269324dfffc7835", "committedDate": "2020-06-10T08:39:50Z", "message": "Fix join filter rewrites with nested queries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a43777e43c572d5e9b9a20184a6d092840d8e684", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/a43777e43c572d5e9b9a20184a6d092840d8e684", "committedDate": "2020-06-10T19:27:44Z", "message": "Fix test, inspection, coverage"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTUxNTkz", "url": "https://github.com/apache/druid/pull/10015#pullrequestreview-433551593", "createdAt": "2020-06-18T18:42:03Z", "commit": {"oid": "a43777e43c572d5e9b9a20184a6d092840d8e684"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo0MjowM1rOGl7ttw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo0MjowM1rOGl7ttw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyODg1NQ==", "bodyText": "Seems that clauses is always fixed. The clauses used to compute the preanalysisGroup is passed to HashJoinSegmentStorageAdapter to find the analysis. I think we can remove it for faster hash computation.", "url": "https://github.com/apache/druid/pull/10015#discussion_r442428855", "createdAt": "2020-06-18T18:42:03Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/segment/join/filter/rewrite/JoinFilterPreAnalysisGroup.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.join.filter.rewrite;\n+\n+import org.apache.druid.query.filter.Filter;\n+import org.apache.druid.segment.VirtualColumns;\n+import org.apache.druid.segment.join.JoinableClause;\n+import org.apache.druid.segment.join.filter.JoinFilterAnalyzer;\n+import org.apache.druid.segment.join.filter.JoinFilterPreAnalysis;\n+import org.apache.druid.segment.join.filter.JoinableClauses;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * A JoinFilterPreAnalysisGroup holds all of the JoinFilterPreAnalysis objects for a given query and\n+ * also stores the per-query parameters that control the filter rewrite operations (from the query context).\n+ *\n+ * The analyses map is keyed by (Filter, JoinableClause list, VirtualColumns): each Filter in the map belongs to a\n+ * separate level of query (e.g. outer query, subquery level 1, etc.)\n+ *\n+ * If there is only a single Filter, then this class does not use the analyses map, instead of using a single reference\n+ * for efficiency reasons.\n+ */\n+public class JoinFilterPreAnalysisGroup\n+{\n+  private final JoinFilterRewriteConfig joinFilterRewriteConfig;\n+  private final Map<JoinFilterPreAnalysisGroupKey, JoinFilterPreAnalysis> analyses;\n+  private final boolean isSingleLevelMode;\n+\n+  /**\n+   * Hashing and comparing filters can be expensive for large filters, so if we're only dealing with\n+   * a single level of join query, then we can be more efficient by using a single reference instead of a map.\n+   */\n+  private JoinFilterPreAnalysis preAnalysisForSingleLevelMode;\n+\n+  public JoinFilterPreAnalysisGroup(\n+      JoinFilterRewriteConfig joinFilterRewriteConfig,\n+      boolean isSingleLevelMode\n+  )\n+  {\n+    this.joinFilterRewriteConfig = joinFilterRewriteConfig;\n+    this.analyses = new HashMap<>();\n+    this.isSingleLevelMode = isSingleLevelMode;\n+  }\n+\n+  public boolean isSingleLevelMode()\n+  {\n+    return isSingleLevelMode;\n+  }\n+\n+  public JoinFilterPreAnalysis computeJoinFilterPreAnalysisIfAbsent(\n+      Filter filter,\n+      List<JoinableClause> clauses,\n+      VirtualColumns virtualColumns\n+  )\n+  {\n+    if (isSingleLevelMode) {\n+      preAnalysisForSingleLevelMode = JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n+          JoinableClauses.fromList(clauses),\n+          virtualColumns,\n+          filter,\n+          joinFilterRewriteConfig\n+      );\n+      return preAnalysisForSingleLevelMode;\n+    }\n+\n+    JoinFilterPreAnalysisGroupKey key = new JoinFilterPreAnalysisGroupKey(filter, clauses, virtualColumns);\n+    return analyses.computeIfAbsent(\n+        key,\n+        (groupKey) -> {\n+          return JoinFilterAnalyzer.computeJoinFilterPreAnalysis(\n+              JoinableClauses.fromList(clauses),\n+              virtualColumns,\n+              filter,\n+              joinFilterRewriteConfig\n+          );\n+        }\n+    );\n+  }\n+\n+  public JoinFilterPreAnalysis getAnalysis(\n+      Filter filter,\n+      List<JoinableClause> clauses,\n+      VirtualColumns virtualColumns\n+  )\n+  {\n+    JoinFilterPreAnalysisGroupKey key = new JoinFilterPreAnalysisGroupKey(filter, clauses, virtualColumns);\n+    return analyses.get(key);\n+  }\n+\n+  public JoinFilterPreAnalysis getPreAnalysisForSingleLevelMode()\n+  {\n+    return preAnalysisForSingleLevelMode;\n+  }\n+\n+  public static class JoinFilterPreAnalysisGroupKey\n+  {\n+    private final Filter filter;\n+    private final List<JoinableClause> clauses;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a43777e43c572d5e9b9a20184a6d092840d8e684"}, "originalPosition": 119}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac03f277167e6f5e2363221165ed0970dcdd1d24", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/ac03f277167e6f5e2363221165ed0970dcdd1d24", "committedDate": "2020-06-18T20:36:03Z", "message": "Remove clauses from group key"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNjM4OTgz", "url": "https://github.com/apache/druid/pull/10015#pullrequestreview-433638983", "createdAt": "2020-06-18T20:53:26Z", "commit": {"oid": "ac03f277167e6f5e2363221165ed0970dcdd1d24"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e99319a359e6d7d80febcc1ee98923e1b52cdba", "author": {"user": {"login": "gianm", "name": "Gian Merlino"}}, "url": "https://github.com/apache/druid/commit/0e99319a359e6d7d80febcc1ee98923e1b52cdba", "committedDate": "2020-06-19T00:46:10Z", "message": "Merge branch 'master' into fix_join_filter5"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7980469705d0210d878219575f3f276d62b07c58", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/7980469705d0210d878219575f3f276d62b07c58", "committedDate": "2020-06-19T00:48:44Z", "message": "Fix import order"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2064, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}