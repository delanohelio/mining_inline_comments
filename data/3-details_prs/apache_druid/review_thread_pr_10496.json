{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwMjE5ODU3", "number": 10496, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMzoxODoyM1rOEr4mfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMzowMjowNlrOEszoeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDUxNTgwOnYy", "diffSide": "RIGHT", "path": "web-console/src/utils/druid-query.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMzoxODoyM1rOHe5j5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMzoxODoyM1rOHe5j5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE2MjQwNQ==", "bodyText": "what does mq and mc stand for?", "url": "https://github.com/apache/druid/pull/10496#discussion_r502162405", "createdAt": "2020-10-09T03:18:23Z", "author": {"login": "suneet-s"}, "path": "web-console/src/utils/druid-query.ts", "diffHunk": "@@ -92,12 +97,55 @@ export class DruidError extends Error {\n     return;\n   }\n \n+  static getSuggestion(errorMessage: string): QuerySuggestion | undefined {\n+    // == is used instead of =\n+    if (errorMessage.includes('Encountered \"= =\" at')) {\n+      return {\n+        label: `Replace == with =`,\n+        fn: str => {\n+          if (!str.includes('==')) return;\n+          return str.replace(/==/g, '=');\n+        },\n+      };\n+    }\n+\n+    // Incorrect quoting on table\n+    const mq = errorMessage.match(/Column '([^']+)' not found in any table/);\n+    if (mq) {\n+      const literalString = mq[1];\n+      return {\n+        label: `Replace \"${literalString}\" with '${literalString}'`,\n+        fn: str => {\n+          if (!str.includes(`\"${literalString}\"`)) return;\n+          return str.replace(`\"${literalString}\"`, `'${literalString}'`);\n+        },\n+      };\n+    }\n+\n+    // , before FROM\n+    const mc = errorMessage.match(/Encountered \"(FROM)\" at/i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "761ba2a778945cb98d7658ffd00eca1f6f50a324"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDUyMzU3OnYy", "diffSide": "RIGHT", "path": "web-console/src/utils/druid-query.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMzoyMzoyMlrOHe5oKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNjo0OTowNlrOHfRgXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE2MzQ5OQ==", "bodyText": "what if == is part of a literal? Does str#replace replace all instances of the regex in the string? Similar comments for other uses of replace function in this code block", "url": "https://github.com/apache/druid/pull/10496#discussion_r502163499", "createdAt": "2020-10-09T03:23:22Z", "author": {"login": "suneet-s"}, "path": "web-console/src/utils/druid-query.ts", "diffHunk": "@@ -92,12 +97,55 @@ export class DruidError extends Error {\n     return;\n   }\n \n+  static getSuggestion(errorMessage: string): QuerySuggestion | undefined {\n+    // == is used instead of =\n+    if (errorMessage.includes('Encountered \"= =\" at')) {\n+      return {\n+        label: `Replace == with =`,\n+        fn: str => {\n+          if (!str.includes('==')) return;\n+          return str.replace(/==/g, '=');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "761ba2a778945cb98d7658ffd00eca1f6f50a324"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU1NDcxOA==", "bodyText": "yeah it is pretty blunt, just replaces all the == with =... Maybe it should be aware of the line markers in the error text", "url": "https://github.com/apache/druid/pull/10496#discussion_r502554718", "createdAt": "2020-10-09T16:49:06Z", "author": {"login": "vogievetsky"}, "path": "web-console/src/utils/druid-query.ts", "diffHunk": "@@ -92,12 +97,55 @@ export class DruidError extends Error {\n     return;\n   }\n \n+  static getSuggestion(errorMessage: string): QuerySuggestion | undefined {\n+    // == is used instead of =\n+    if (errorMessage.includes('Encountered \"= =\" at')) {\n+      return {\n+        label: `Replace == with =`,\n+        fn: str => {\n+          if (!str.includes('==')) return;\n+          return str.replace(/==/g, '=');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE2MzQ5OQ=="}, "originalCommit": {"oid": "761ba2a778945cb98d7658ffd00eca1f6f50a324"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NDU0MTE3OnYy", "diffSide": "RIGHT", "path": "web-console/src/views/datasource-view/datasource-view.tsx", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwMzozNDozM1rOHe5x-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwMjoxNDo0M1rOHftAIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE2NjAxMA==", "bodyText": "Is this wide enough to handle 7 digits for min, avg and max?\nFrom the doc linked in this PR it's generally recommended for each segment to have around 5 million rows\nDo you think it's users would want to see a rounded number instead - something like 2.1M instead of 2,105,248\n^ just a thought", "url": "https://github.com/apache/druid/pull/10496#discussion_r502166010", "createdAt": "2020-10-09T03:34:33Z", "author": {"login": "suneet-s"}, "path": "web-console/src/views/datasource-view/datasource-view.tsx", "diffHunk": "@@ -1011,11 +1006,11 @@ GROUP BY 1`;\n               ),\n             },\n             {\n-              Header: twoLines('Segment size (MB)', 'min / avg / max'),\n+              Header: twoLines('Segment size (rows)', 'minimum / average / maximum'),\n               show: hiddenColumns.exists('Segment size'),\n               accessor: 'avg_segment_size',\n               filterable: false,\n-              width: 150,\n+              width: 220,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "761ba2a778945cb98d7658ffd00eca1f6f50a324"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU1NjQwOQ==", "bodyText": "I wanted them all to be consistently formatted with the same abbreviation. So not to have 7.6 M, 4.3 k, and 233  all in the same column. What if we format it as millions with 3 digits:\n5.343 M, 0.004 M, 0.000 M\nWhat do you think?", "url": "https://github.com/apache/druid/pull/10496#discussion_r502556409", "createdAt": "2020-10-09T16:52:27Z", "author": {"login": "vogievetsky"}, "path": "web-console/src/views/datasource-view/datasource-view.tsx", "diffHunk": "@@ -1011,11 +1006,11 @@ GROUP BY 1`;\n               ),\n             },\n             {\n-              Header: twoLines('Segment size (MB)', 'min / avg / max'),\n+              Header: twoLines('Segment size (rows)', 'minimum / average / maximum'),\n               show: hiddenColumns.exists('Segment size'),\n               accessor: 'avg_segment_size',\n               filterable: false,\n-              width: 150,\n+              width: 220,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE2NjAxMA=="}, "originalCommit": {"oid": "761ba2a778945cb98d7658ffd00eca1f6f50a324"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU3MjM4OQ==", "bodyText": "I don't have a strong opinion on this, and will defer to your judgement.\nThe risk with rounding to millions is that for smaller datasources, it could always show 0.000 M\nI wonder if the UI could use the largest rounding per datasource. So you could have something like\nDS1    5.343 M, 0.004 M, 0.000 M\nDS2    0.320 k, 0.120 k, 321.1 k\n\n^ even in this example, I'm really confused about how to pick whether to keep it as 321.1 k or 0.321 M\nNumber formatting isn't my forte \ud83d\ude43", "url": "https://github.com/apache/druid/pull/10496#discussion_r502572389", "createdAt": "2020-10-09T17:24:11Z", "author": {"login": "suneet-s"}, "path": "web-console/src/views/datasource-view/datasource-view.tsx", "diffHunk": "@@ -1011,11 +1006,11 @@ GROUP BY 1`;\n               ),\n             },\n             {\n-              Header: twoLines('Segment size (MB)', 'min / avg / max'),\n+              Header: twoLines('Segment size (rows)', 'minimum / average / maximum'),\n               show: hiddenColumns.exists('Segment size'),\n               accessor: 'avg_segment_size',\n               filterable: false,\n-              width: 150,\n+              width: 220,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE2NjAxMA=="}, "originalCommit": {"oid": "761ba2a778945cb98d7658ffd00eca1f6f50a324"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk4NjM3Mw==", "bodyText": "What do you think about\n\nThe only numbers that would be rendered as 0.000 M would be numbers <= 500 so we could display them directly.\nSide note: There is a style pass happening on a different branch that would change the font to one that has monospaced numbers", "url": "https://github.com/apache/druid/pull/10496#discussion_r502986373", "createdAt": "2020-10-12T00:17:13Z", "author": {"login": "vogievetsky"}, "path": "web-console/src/views/datasource-view/datasource-view.tsx", "diffHunk": "@@ -1011,11 +1006,11 @@ GROUP BY 1`;\n               ),\n             },\n             {\n-              Header: twoLines('Segment size (MB)', 'min / avg / max'),\n+              Header: twoLines('Segment size (rows)', 'minimum / average / maximum'),\n               show: hiddenColumns.exists('Segment size'),\n               accessor: 'avg_segment_size',\n               filterable: false,\n-              width: 150,\n+              width: 220,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE2NjAxMA=="}, "originalCommit": {"oid": "761ba2a778945cb98d7658ffd00eca1f6f50a324"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzAwNTIxNg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/druid/pull/10496#discussion_r503005216", "createdAt": "2020-10-12T02:14:43Z", "author": {"login": "suneet-s"}, "path": "web-console/src/views/datasource-view/datasource-view.tsx", "diffHunk": "@@ -1011,11 +1006,11 @@ GROUP BY 1`;\n               ),\n             },\n             {\n-              Header: twoLines('Segment size (MB)', 'min / avg / max'),\n+              Header: twoLines('Segment size (rows)', 'minimum / average / maximum'),\n               show: hiddenColumns.exists('Segment size'),\n               accessor: 'avg_segment_size',\n               filterable: false,\n-              width: 150,\n+              width: 220,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE2NjAxMA=="}, "originalCommit": {"oid": "761ba2a778945cb98d7658ffd00eca1f6f50a324"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDE4NzQ0OnYy", "diffSide": "RIGHT", "path": "web-console/src/views/datasource-view/datasource-view.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMzowMjowNlrOHgP3BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjoxNzozMVrOHgu0og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3NjMyNQ==", "bodyText": "nit: should this be min_segment_rows ... instead of size?", "url": "https://github.com/apache/druid/pull/10496#discussion_r503576325", "createdAt": "2020-10-12T23:02:06Z", "author": {"login": "suneet-s"}, "path": "web-console/src/views/datasource-view/datasource-view.tsx", "diffHunk": "@@ -144,42 +144,41 @@ function progress(done: number, awaiting: number): number {\n \n const PERCENT_BRACES = [formatPercent(1)];\n \n-interface Datasource {\n-  datasource: string;\n-  rules: Rule[];\n-  compactionConfig?: CompactionConfig;\n-  compactionStatus?: CompactionStatus;\n-  [key: string]: any;\n+interface DatasourceQueryResultRow {\n+  readonly datasource: string;\n+  readonly num_segments: number;\n+  readonly num_available_segments: number;\n+  readonly num_segments_to_load: number;\n+  readonly num_segments_to_drop: number;\n+  readonly total_data_size: number;\n+  readonly replicated_size: number;\n+  readonly min_segment_size: number;\n+  readonly avg_segment_size: number;\n+  readonly max_segment_size: number;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "426b68fb8b8ff5f3fdf35e3bd687639fa14d58d7"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA4MzYxOA==", "bodyText": "fixed", "url": "https://github.com/apache/druid/pull/10496#discussion_r504083618", "createdAt": "2020-10-13T16:17:31Z", "author": {"login": "vogievetsky"}, "path": "web-console/src/views/datasource-view/datasource-view.tsx", "diffHunk": "@@ -144,42 +144,41 @@ function progress(done: number, awaiting: number): number {\n \n const PERCENT_BRACES = [formatPercent(1)];\n \n-interface Datasource {\n-  datasource: string;\n-  rules: Rule[];\n-  compactionConfig?: CompactionConfig;\n-  compactionStatus?: CompactionStatus;\n-  [key: string]: any;\n+interface DatasourceQueryResultRow {\n+  readonly datasource: string;\n+  readonly num_segments: number;\n+  readonly num_available_segments: number;\n+  readonly num_segments_to_load: number;\n+  readonly num_segments_to_drop: number;\n+  readonly total_data_size: number;\n+  readonly replicated_size: number;\n+  readonly min_segment_size: number;\n+  readonly avg_segment_size: number;\n+  readonly max_segment_size: number;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3NjMyNQ=="}, "originalCommit": {"oid": "426b68fb8b8ff5f3fdf35e3bd687639fa14d58d7"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3013, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}