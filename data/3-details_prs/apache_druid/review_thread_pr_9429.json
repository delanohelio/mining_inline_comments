{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNjQzMDU1", "number": 9429, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzoxOTowMVrODjiqXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDoxMTowN1rODl-iWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTk0NjU1OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/org/apache/druid/sql/calcite/aggregation/DimensionExpression.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzoxOTowMVrOFvaBng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMzoxNDo0NFrOFvkfzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1Mzc5MA==", "bodyText": "How about inputColumn? (I think it's a bit weird to call columns in the table \"dimensions\" and would like to get away from that in new code.)\nIt would also be good to include a comment about what the relationship is between inputColumn and expression, with some examples. It might get confusing to have both. Additionally: if the expression is a simple column reference, is it required that expression.getDirectColumn().equals(inputColumn)? If so it would be good to validate that in the constructor.", "url": "https://github.com/apache/druid/pull/9429#discussion_r385253790", "createdAt": "2020-02-27T17:19:01Z", "author": {"login": "gianm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/aggregation/DimensionExpression.java", "diffHunk": "@@ -28,6 +28,7 @@\n \n public class DimensionExpression\n {\n+  private final String inputDimension;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e309aaeb9bc2d2647be56fdee3866835861a325"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQyNTM1OQ==", "bodyText": "Heh, I initially had it named inputColumn but changed to inputDimension to match the DimensionSpec which it creates.\nHowever, since this field actually is only used when creating a DimensionSpec when the DimensionExpression is for a virtual column, I have renamed the field to virtualColumn. When a DimensionExpression is a direct access or simple extraction, we use expression.getSimpleExtraction().toDimensionSpec to craft the DimensionSpec instead, so this field is ignored.\nTo help clarify this, i collapsed the constructors into a single private constructor and made static methods DimensionExpression.ofSimpleColumn and DimensionExpression.ofVirtualColumn for creating the two types of DimensionExpression we have, as per your other comment, which I think helps clear up usage.", "url": "https://github.com/apache/druid/pull/9429#discussion_r385425359", "createdAt": "2020-02-27T23:14:44Z", "author": {"login": "clintropolis"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/aggregation/DimensionExpression.java", "diffHunk": "@@ -28,6 +28,7 @@\n \n public class DimensionExpression\n {\n+  private final String inputDimension;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1Mzc5MA=="}, "originalCommit": {"oid": "9e309aaeb9bc2d2647be56fdee3866835861a325"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTk0OTExOnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/org/apache/druid/sql/calcite/aggregation/DimensionExpression.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzoxOTo0N1rOFvaDOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzoxOTo0N1rOFvaDOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1NDIwMg==", "bodyText": "It's not immediately clear when each constructor should be used. They need javadocs, or to be made private and replaced with nicely-named static factories, or (IMO ideally) both.", "url": "https://github.com/apache/druid/pull/9429#discussion_r385254202", "createdAt": "2020-02-27T17:19:47Z", "author": {"login": "gianm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/aggregation/DimensionExpression.java", "diffHunk": "@@ -38,11 +39,27 @@ public DimensionExpression(\n       final ValueType outputType\n   )\n   {\n+    this(outputName, outputName, expression, outputType);\n+  }\n+\n+  public DimensionExpression(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e309aaeb9bc2d2647be56fdee3866835861a325"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTQ4NDkzOnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/org/apache/druid/sql/calcite/aggregation/DimensionExpression.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDoxMDo1OVrOFzK9Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDoxMDo1OVrOFzK9Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMTE3OA==", "bodyText": "Missing a ,  here.", "url": "https://github.com/apache/druid/pull/9429#discussion_r389201178", "createdAt": "2020-03-07T00:10:59Z", "author": {"login": "gianm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/aggregation/DimensionExpression.java", "diffHunk": "@@ -72,21 +107,23 @@ public boolean equals(final Object o)\n       return false;\n     }\n     final DimensionExpression that = (DimensionExpression) o;\n-    return Objects.equals(outputName, that.outputName) &&\n+    return Objects.equals(virtualColumn, that.virtualColumn) &&\n+           Objects.equals(outputName, that.outputName) &&\n            Objects.equals(expression, that.expression) &&\n            outputType == that.outputType;\n   }\n \n   @Override\n   public int hashCode()\n   {\n-    return Objects.hash(outputName, expression, outputType);\n+    return Objects.hash(virtualColumn, outputName, expression, outputType);\n   }\n \n   @Override\n   public String toString()\n   {\n     return \"DimensionExpression{\" +\n+           \"virtualColumn='\" + virtualColumn + '\\'' +\n            \"outputName='\" + outputName + '\\'' +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cff14aadcd6b7fa013e42e225df98eab378761f9"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTQ4NTA1OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/org/apache/druid/sql/calcite/aggregation/DimensionExpression.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDoxMTowN1rOFzK9MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDoxMTowN1rOFzK9MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMTIwMQ==", "bodyText": "\"expression\" (spelling)", "url": "https://github.com/apache/druid/pull/9429#discussion_r389201201", "createdAt": "2020-03-07T00:11:07Z", "author": {"login": "gianm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/aggregation/DimensionExpression.java", "diffHunk": "@@ -28,21 +29,55 @@\n \n public class DimensionExpression\n {\n+  /**\n+   * Create a dimension expresison for direct column access or simple extractions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cff14aadcd6b7fa013e42e225df98eab378761f9"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2796, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}