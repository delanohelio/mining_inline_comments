{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNzQyMDQz", "number": 9662, "title": "fix issue with group by limit pushdown for extractionFn, expressions, joins, etc", "bodyText": "Description\nThis PR fixes a bug with group by limit pushdown which causes incorrect query results when grouping on string columns ... TBD.\nThis is done by adding two new flags to ColumnCapabilities, areDictionaryValuesSorted and areDictionaryValuesUnique, which both must be true for pushdown to occur, and checking for their presence when deciding whether or not pushdown can occur in HashAggregateIterator.\nCapabilities has been removed since the dimensionValuesSorted it provided is now more granularly provided by ColumnCapabilities.\nA new enum has been introduced to provide a tri-state boolean for ColumnCapabilities:\n  enum Capable\n  {\n    FALSE,\n    TRUE,\n    UNKNOWN;\n    ...\n}\n\nin favor of adding them as booleans. As a follow-up, I intend to replace the other booleans on ColumnCapabilities with Capable so that we can remove ColumnCapabilities.isComplete and instead check for individual capabilities.\nsimple example that illustrates the bug\ngiven rows\ndim1, dim2\n----------\n'a', 'aa'\n'a', 'ab'\n'a', 'ba\n\nand the following query\nSELECT\n  dim1, substring(dim2, 1, 1), count(*)\nFROM\n  exampleRows\nGROUP BY 1,2\nLIMIT 2\n\nprior to the changes in this PR the results would be\n[['a', 'a', 2]]\n\nrather than the expected:\n[['a', 'a', 2],['a', 'b', 1]]\n\n\nThis PR has:\n\n been self-reviewed.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-04-10T03:36:02Z", "url": "https://github.com/apache/druid/pull/9662", "merged": true, "mergeCommit": {"oid": "0ff926b1a1367be88fb6f5f4baaa74ca849bd8bf"}, "closed": true, "closedAt": "2020-04-11T08:18:12Z", "author": {"login": "clintropolis"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcWInKdAH2gAyNDAxNzQyMDQzOmVhODNkODgxODBiMzMxZDNjZTQ3MWRmMzNjMTY3NGRiN2VlODIxZDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcWgyQIAFqTM5MTc0NTEyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ea83d88180b331d3ce471df33c1674db7ee821d3", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/ea83d88180b331d3ce471df33c1674db7ee821d3", "committedDate": "2020-04-10T03:34:26Z", "message": "fix issue with group by limit pushdown for extractionFn, expressions, joins, etc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcb66ecfdbc23188759d7f303beecdfba02f60d0", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/bcb66ecfdbc23188759d7f303beecdfba02f60d0", "committedDate": "2020-04-10T04:16:49Z", "message": "remove unused"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1e147b061072fdbeb86f8fc5b49280364409b72", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/a1e147b061072fdbeb86f8fc5b49280364409b72", "committedDate": "2020-04-10T06:50:45Z", "message": "fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa42465f3b63692ffe2208f89e4fca39df03bbf0", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/aa42465f3b63692ffe2208f89e4fca39df03bbf0", "committedDate": "2020-04-10T07:04:04Z", "message": "revert unintended change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNjE5NTMw", "url": "https://github.com/apache/druid/pull/9662#pullrequestreview-391619530", "createdAt": "2020-04-10T19:27:46Z", "commit": {"oid": "aa42465f3b63692ffe2208f89e4fca39df03bbf0"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOToyNzo0N1rOGEDppQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0MjoyOFrOGED9ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNzMwMQ==", "bodyText": "IMO it's more elegant if this method doesn't exist, and the caller does the allMatch.", "url": "https://github.com/apache/druid/pull/9662#discussion_r406907301", "createdAt": "2020-04-10T19:27:47Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/GroupByQueryEngineV2.java", "diffHunk": "@@ -707,6 +719,33 @@ protected void putToRow(ByteBuffer key, ResultRow resultRow)\n         );\n       }\n     }\n+\n+    /**\n+     * check if a collection of columns will operate correctly with {@link LimitedBufferHashGrouper} for query limit\n+     * pushdown\n+     */\n+    private boolean canPushdownLimit(Stream<String> columnNames)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa42465f3b63692ffe2208f89e4fca39df03bbf0"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNzkzMw==", "bodyText": "canDoLimitPushDown would be a better name for two reasons:\n\nThere's other stuff that can be pushed down, in general, other than limits.\nSpelling of PushDown is more consistent with the methods on GroupByQuery itself.", "url": "https://github.com/apache/druid/pull/9662#discussion_r406907933", "createdAt": "2020-04-10T19:29:16Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/GroupByQueryEngineV2.java", "diffHunk": "@@ -555,7 +557,17 @@ public HashAggregateIterator(\n       final DefaultLimitSpec limitSpec = query.isApplyLimitPushDown() &&\n                                          querySpecificConfig.isApplyLimitPushDownToSegment() ?\n                                          (DefaultLimitSpec) query.getLimitSpec() : null;\n+\n+\n+      boolean canDoPushdown = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa42465f3b63692ffe2208f89e4fca39df03bbf0"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMTA2NQ==", "bodyText": "This doesn't seem right. The only place using DEFAULT_STRING_CAPABILITIES is getEffectiveCapabilities in this same file. And looking at the cases in that method, each one seems like it should behave a bit differently. So consider deleting this constant and having the getEffectiveCapabilities should be generating various capabilities objects.", "url": "https://github.com/apache/druid/pull/9662#discussion_r406911065", "createdAt": "2020-04-10T19:38:22Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/DimensionHandlerUtils.java", "diffHunk": "@@ -61,6 +61,8 @@ private DimensionHandlerUtils()\n   public static final ColumnCapabilities DEFAULT_STRING_CAPABILITIES =\n       new ColumnCapabilitiesImpl().setType(ValueType.STRING)\n                                   .setDictionaryEncoded(true)\n+                                  .setDictionaryValuesUnique(true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa42465f3b63692ffe2208f89e4fca39df03bbf0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMTMyNw==", "bodyText": "nit: IMO Capable is a nicer name than IsCapable.", "url": "https://github.com/apache/druid/pull/9662#discussion_r406911327", "createdAt": "2020-04-10T19:39:04Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilities.java", "diffHunk": "@@ -26,6 +26,8 @@\n   ValueType getType();\n \n   boolean isDictionaryEncoded();\n+  IsCapable areDictionaryValuesSorted();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa42465f3b63692ffe2208f89e4fca39df03bbf0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMjQxOQ==", "bodyText": "The dictionary value is just the row number. They aren't sorted.", "url": "https://github.com/apache/druid/pull/9662#discussion_r406912419", "createdAt": "2020-04-10T19:42:28Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/join/table/IndexedTableColumnSelectorFactory.java", "diffHunk": "@@ -56,6 +56,9 @@ static ColumnCapabilities columnCapabilities(final IndexedTable table, final Str\n         capabilities.setDictionaryEncoded(true);\n       }\n \n+      capabilities.setDictionaryValuesSorted(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa42465f3b63692ffe2208f89e4fca39df03bbf0"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "450221dc5ec69947a74e31d0c7a37513e572d709", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/450221dc5ec69947a74e31d0c7a37513e572d709", "committedDate": "2020-04-10T23:55:54Z", "message": "more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca9d2eff2d21c9dc1450f58b157bd622e6e77d3f", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/ca9d2eff2d21c9dc1450f58b157bd622e6e77d3f", "committedDate": "2020-04-11T00:24:03Z", "message": "consider capabilities for StringGroupByColumnSelectorStrategy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af5eead5dcb562650679f85b06297277075a916e", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/af5eead5dcb562650679f85b06297277075a916e", "committedDate": "2020-04-11T02:05:55Z", "message": "fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a27bbccc68197083c4f0bba8770268532e1c8825", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/a27bbccc68197083c4f0bba8770268532e1c8825", "committedDate": "2020-04-11T06:16:22Z", "message": "fix and more test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85863a27a829c9619a65119ff86129d62559b9e6", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/85863a27a829c9619a65119ff86129d62559b9e6", "committedDate": "2020-04-11T06:25:17Z", "message": "revert because im scared"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzQyOTQy", "url": "https://github.com/apache/druid/pull/9662#pullrequestreview-391742942", "createdAt": "2020-04-11T07:03:28Z", "commit": {"oid": "85863a27a829c9619a65119ff86129d62559b9e6"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzowMzoyOFrOGELBiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzowODoxN1rOGELDKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyODEwNA==", "bodyText": "Would be good to have javadocs here.", "url": "https://github.com/apache/druid/pull/9662#discussion_r407028104", "createdAt": "2020-04-11T07:03:28Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/GroupByQueryEngineV2.java", "diffHunk": "@@ -331,6 +333,42 @@ public static boolean isAllSingleValueDims(\n             });\n   }\n \n+  public static void convertRowTypesToOutputTypes(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85863a27a829c9619a65119ff86129d62559b9e6"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyODE1Mw==", "bodyText": "Would be good for these comments to be capitalized properly and have sentence-ending punctuation.", "url": "https://github.com/apache/druid/pull/9662#discussion_r407028153", "createdAt": "2020-04-11T07:03:56Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/GroupByQueryEngineV2.java", "diffHunk": "@@ -331,6 +333,42 @@ public static boolean isAllSingleValueDims(\n             });\n   }\n \n+  public static void convertRowTypesToOutputTypes(\n+      final List<DimensionSpec> dimensionSpecs,\n+      final ResultRow resultRow,\n+      final int resultRowDimensionStart\n+  )\n+  {\n+    for (int i = 0; i < dimensionSpecs.size(); i++) {\n+      DimensionSpec dimSpec = dimensionSpecs.get(i);\n+      final int resultRowIndex = resultRowDimensionStart + i;\n+      final ValueType outputType = dimSpec.getOutputType();\n+\n+      resultRow.set(\n+          resultRowIndex,\n+          DimensionHandlerUtils.convertObjectToType(resultRow.get(resultRowIndex), outputType)\n+      );\n+    }\n+  }\n+\n+  /**\n+   * check if a column will operate correctly with {@link LimitedBufferHashGrouper} for query limit pushdown", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85863a27a829c9619a65119ff86129d62559b9e6"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyODMwNQ==", "bodyText": "This comment isn't adding much, it's just repeating the couple of lines below it in English. I'd either delete it, or replace it with a comment that adds information by explaining why this fact is the case.", "url": "https://github.com/apache/druid/pull/9662#discussion_r407028305", "createdAt": "2020-04-11T07:05:36Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/GroupByQueryEngineV2.java", "diffHunk": "@@ -331,6 +333,42 @@ public static boolean isAllSingleValueDims(\n             });\n   }\n \n+  public static void convertRowTypesToOutputTypes(\n+      final List<DimensionSpec> dimensionSpecs,\n+      final ResultRow resultRow,\n+      final int resultRowDimensionStart\n+  )\n+  {\n+    for (int i = 0; i < dimensionSpecs.size(); i++) {\n+      DimensionSpec dimSpec = dimensionSpecs.get(i);\n+      final int resultRowIndex = resultRowDimensionStart + i;\n+      final ValueType outputType = dimSpec.getOutputType();\n+\n+      resultRow.set(\n+          resultRowIndex,\n+          DimensionHandlerUtils.convertObjectToType(resultRow.get(resultRowIndex), outputType)\n+      );\n+    }\n+  }\n+\n+  /**\n+   * check if a column will operate correctly with {@link LimitedBufferHashGrouper} for query limit pushdown\n+   */\n+  public static boolean canPushDownLimit(ColumnSelectorFactory columnSelectorFactory, String columnName)\n+  {\n+    ColumnCapabilities capabilities = columnSelectorFactory.getColumnCapabilities(columnName);\n+    if (capabilities != null) {\n+      // strings can be pushed down if dictionaries are sorted and unique per id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85863a27a829c9619a65119ff86129d62559b9e6"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyODUyMQ==", "bodyText": "Bitmap indexes aren't required here. I don't think it hurts too much to have in practice this check here, since in the primary case where pushdown matters (direct access to a column in a regular segment) bitmap indexes will be there. But it isn't necessary.", "url": "https://github.com/apache/druid/pull/9662#discussion_r407028521", "createdAt": "2020-04-11T07:08:17Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/column/StringGroupByColumnSelectorStrategy.java", "diffHunk": "@@ -148,7 +153,12 @@ private void initializeGroupingKeyV2Dimension(\n   @Override\n   public Grouper.BufferComparator bufferComparator(int keyBufferPosition, @Nullable StringComparator stringComparator)\n   {\n-    if (stringComparator == null || StringComparators.LEXICOGRAPHIC.equals(stringComparator)) {\n+    final boolean canCompareInts =\n+        capabilities != null &&\n+        capabilities.hasBitmapIndexes() &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85863a27a829c9619a65119ff86129d62559b9e6"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzQ1MTI1", "url": "https://github.com/apache/druid/pull/9662#pullrequestreview-391745125", "createdAt": "2020-04-11T07:44:16Z", "commit": {"oid": "85863a27a829c9619a65119ff86129d62559b9e6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2486, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}