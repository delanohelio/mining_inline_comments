{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0NDA2NzA2", "number": 10379, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMjoyNzowOFrOEj3Liw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODowNjoxM1rOEnKM9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDM5NjkxOnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/overlord/TaskRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMjoyNzowOFrOHSdvig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMjoyNzowOFrOHSdvig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTEyMzcyMg==", "bodyText": "How about adding new interfaces such as TaskSlotCountable and WorkerCountable? Then, we can avoid implementing unnecessary interfaces, e.g., the new methods in SingleThreadedBackgroundRunner, by implementing required interfaces only.", "url": "https://github.com/apache/druid/pull/10379#discussion_r489123722", "createdAt": "2020-09-16T02:27:08Z", "author": {"login": "jihoonson"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/overlord/TaskRunner.java", "diffHunk": "@@ -121,4 +121,17 @@ default TaskLocation getTaskLocation(String taskId)\n    * @return ScalingStats if the runner has an underlying resource which can scale, Optional.absent() otherwise\n    */\n   Optional<ScalingStats> getScalingStats();\n+\n+  /**\n+   * APIs useful for emitting statistics for @TaskSlotCountStatsMonitor\n+  */\n+  long getTotalTaskSlotCount();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df7ff187efcf70aa24bc8b69ab3b8dab9198b9eb"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTI2MzI5OnYy", "diffSide": "RIGHT", "path": "docs/operations/metrics.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMjozNjoxOVrOHXDSWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMjozNjoxOVrOHXDSWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkzMzE0Nw==", "bodyText": "I left a same comment in #10378 (comment). Please clarify the description on these metrics.", "url": "https://github.com/apache/druid/pull/10379#discussion_r493933147", "createdAt": "2020-09-23T22:36:19Z", "author": {"login": "jihoonson"}, "path": "docs/operations/metrics.md", "diffHunk": "@@ -186,6 +186,11 @@ Note: If the JVM does not support CPU time measurement for the current thread, i\n |`task/running/count`|Number of current running tasks. This metric is only available if the TaskCountStatsMonitor module is included.|dataSource.|Varies.|\n |`task/pending/count`|Number of current pending tasks. This metric is only available if the TaskCountStatsMonitor module is included.|dataSource.|Varies.|\n |`task/waiting/count`|Number of current waiting tasks. This metric is only available if the TaskCountStatsMonitor module is included.|dataSource.|Varies.|\n+|`taskSlot/total/count`|Number of total task slots per emission period. This metric is only available if the TaskSlotCountStatsMonitor module is included.| |Varies.|\n+|`taskSlot/idle/count`|Number of idle task slots per emission period. This metric is only available if the TaskSlotCountStatsMonitor module is included.| |Varies.|\n+|`taskSlot/used/count`|Number of busy task slots per emission period. This metric is only available if the TaskSlotCountStatsMonitor module is included.| |Varies.|\n+|`taskSlot/lazy/count`|Number of lazy task slots per emission period. This metric is only available if the TaskSlotCountStatsMonitor module is included.| |Varies.|\n+|`taskSlot/blacklisted/count`|Number of blacklisted task slots per emission period. This metric is only available if the TaskSlotCountStatsMonitor module is included.| |Varies.|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3590ba8be86b21a85cf43815c6b90feac51cf040"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTI4MTc5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/server/metrics/TaskSlotCountStatsMonitor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMjo0NDozMVrOHXDdZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMTowNjoyMFrOHXGO6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkzNTk3Mw==", "bodyText": "I think this monitor should emit metrics only when TaskMaster is a leader. Check out what TaskCountStatsMonitor does. Probably new interfaces in TaskSlotCountStatsProvider should be able to return null when TaskMaster is not a leader.", "url": "https://github.com/apache/druid/pull/10379#discussion_r493935973", "createdAt": "2020-09-23T22:44:31Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/server/metrics/TaskSlotCountStatsMonitor.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.server.metrics;\n+\n+import com.google.inject.Inject;\n+import org.apache.druid.java.util.emitter.service.ServiceEmitter;\n+import org.apache.druid.java.util.emitter.service.ServiceMetricEvent;\n+import org.apache.druid.java.util.metrics.AbstractMonitor;\n+\n+public class TaskSlotCountStatsMonitor extends AbstractMonitor\n+{\n+  private final TaskSlotCountStatsProvider statsProvider;\n+\n+  @Inject\n+  public TaskSlotCountStatsMonitor(\n+          TaskSlotCountStatsProvider statsProvider\n+  )\n+  {\n+    this.statsProvider = statsProvider;\n+  }\n+\n+  @Override\n+  public boolean doMonitor(ServiceEmitter emitter)\n+  {\n+    emit(emitter, \"taskSlot/total/count\", statsProvider.getTotalTaskSlotCount());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3590ba8be86b21a85cf43815c6b90feac51cf040"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk3NDI4Ng==", "bodyText": "This is controlled from TaskMaster and it is the same design as TaskCountStatsMonitor. If you check that code, taskRunner is only set if the current overlord is the leader https://github.com/apache/druid/blob/master/indexing-service/src/main/java/org/apache/druid/indexing/overlord/TaskMaster.java#L113. Then check the implementation of getSuccessfulTaskCount. It only returns a value if the taskRunner is set correctly or else null.", "url": "https://github.com/apache/druid/pull/10379#discussion_r493974286", "createdAt": "2020-09-24T00:37:49Z", "author": {"login": "mghosh4"}, "path": "server/src/main/java/org/apache/druid/server/metrics/TaskSlotCountStatsMonitor.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.server.metrics;\n+\n+import com.google.inject.Inject;\n+import org.apache.druid.java.util.emitter.service.ServiceEmitter;\n+import org.apache.druid.java.util.emitter.service.ServiceMetricEvent;\n+import org.apache.druid.java.util.metrics.AbstractMonitor;\n+\n+public class TaskSlotCountStatsMonitor extends AbstractMonitor\n+{\n+  private final TaskSlotCountStatsProvider statsProvider;\n+\n+  @Inject\n+  public TaskSlotCountStatsMonitor(\n+          TaskSlotCountStatsProvider statsProvider\n+  )\n+  {\n+    this.statsProvider = statsProvider;\n+  }\n+\n+  @Override\n+  public boolean doMonitor(ServiceEmitter emitter)\n+  {\n+    emit(emitter, \"taskSlot/total/count\", statsProvider.getTotalTaskSlotCount());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkzNTk3Mw=="}, "originalCommit": {"oid": "3590ba8be86b21a85cf43815c6b90feac51cf040"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk4MTQxOA==", "bodyText": "Hmm, if I'm reading code correctly, TaskMaster.getTotalTaskSlotCount() still returns 0 even when it's not a leader. Then, the monitor will emit meaningless 0s for non-leaders.", "url": "https://github.com/apache/druid/pull/10379#discussion_r493981418", "createdAt": "2020-09-24T01:06:20Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/server/metrics/TaskSlotCountStatsMonitor.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.server.metrics;\n+\n+import com.google.inject.Inject;\n+import org.apache.druid.java.util.emitter.service.ServiceEmitter;\n+import org.apache.druid.java.util.emitter.service.ServiceMetricEvent;\n+import org.apache.druid.java.util.metrics.AbstractMonitor;\n+\n+public class TaskSlotCountStatsMonitor extends AbstractMonitor\n+{\n+  private final TaskSlotCountStatsProvider statsProvider;\n+\n+  @Inject\n+  public TaskSlotCountStatsMonitor(\n+          TaskSlotCountStatsProvider statsProvider\n+  )\n+  {\n+    this.statsProvider = statsProvider;\n+  }\n+\n+  @Override\n+  public boolean doMonitor(ServiceEmitter emitter)\n+  {\n+    emit(emitter, \"taskSlot/total/count\", statsProvider.getTotalTaskSlotCount());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkzNTk3Mw=="}, "originalCommit": {"oid": "3590ba8be86b21a85cf43815c6b90feac51cf040"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTQyMTE0OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/overlord/RemoteTaskRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzo0MzoyNlrOHXEuUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzo0MzoyNlrOHXEuUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk1NjY5MA==", "bodyText": "Even though this method was always called under a lock on workerWithUnacknowledgedTask before, this change seems OK because it will still be called under the same lock in tryAssignTask, and the new caller getIdleTaskSlotCount doesn't seem to require locking (as it doesn't update the workerWithUnacknowledgedTask map.", "url": "https://github.com/apache/druid/pull/10379#discussion_r493956690", "createdAt": "2020-09-23T23:43:26Z", "author": {"login": "jihoonson"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/overlord/RemoteTaskRunner.java", "diffHunk": "@@ -867,6 +857,18 @@ private boolean tryAssignTask(final Task task, final RemoteTaskRunnerWorkItem ta\n     }\n   }\n \n+  Map<String, ImmutableWorkerInfo> getWorkersEligibleToRunTasks()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3590ba8be86b21a85cf43815c6b90feac51cf040"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTQ1MjUwOnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/overlord/hrtr/HttpRemoteTaskRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzo1Mzo1NlrOHXFB4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzo1Mzo1NlrOHXFB4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2MTY5OQ==", "bodyText": "It seems OK without this synchronization.", "url": "https://github.com/apache/druid/pull/10379#discussion_r493961699", "createdAt": "2020-09-23T23:53:56Z", "author": {"login": "jihoonson"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/overlord/hrtr/HttpRemoteTaskRunner.java", "diffHunk": "@@ -1342,6 +1343,13 @@ public TaskLocation getTaskLocation(String taskId)\n     ).collect(Collectors.toList());\n   }\n \n+  public Collection<ImmutableWorkerInfo> getBlackListedWorkers()\n+  {\n+    synchronized (blackListedWorkers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3590ba8be86b21a85cf43815c6b90feac51cf040"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTQ1NjE2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/server/metrics/TaskSlotCountStatsProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzo1NTo0MlrOHXFD4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzo1NTo0MlrOHXFD4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk2MjIwOQ==", "bodyText": "Please clarify the Javadoc of these methods too. It should be the number of task slots of lazy/blacklisted middleManagers and indexers.", "url": "https://github.com/apache/druid/pull/10379#discussion_r493962209", "createdAt": "2020-09-23T23:55:42Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/server/metrics/TaskSlotCountStatsProvider.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.server.metrics;\n+\n+public interface TaskSlotCountStatsProvider\n+{\n+  /**\n+   * Return the number of total task slots during emission period.\n+   */\n+  long getTotalTaskSlotCount();\n+\n+  /**\n+   * Return the number of idle task slots during emission period.\n+   */\n+  long getIdleTaskSlotCount();\n+\n+  /**\n+   * Return the number of used task slots during emission period.\n+   */\n+  long getUsedTaskSlotCount();\n+\n+  /**\n+   * Return the number of lazy task slots during emission period.\n+   */\n+  long getLazyTaskSlotCount();\n+\n+  /**\n+   * Return the number of blacklisted task slots during emission period.\n+   */\n+  long getBlacklistedTaskSlotCount();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3590ba8be86b21a85cf43815c6b90feac51cf040"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDk3MDc5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/server/metrics/TaskSlotCountStatsProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODowNjoxM1rOHXmmeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODowNjoxM1rOHXmmeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUxMTczOA==", "bodyText": "Please annotate the return value with @Nullable. Same comment for other methods.", "url": "https://github.com/apache/druid/pull/10379#discussion_r494511738", "createdAt": "2020-09-24T18:06:13Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/server/metrics/TaskSlotCountStatsProvider.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.server.metrics;\n+\n+public interface TaskSlotCountStatsProvider\n+{\n+  /**\n+   * Return the number of total task slots during emission period.\n+   */\n+  Long getTotalTaskSlotCount();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61343eb4995b94427816a168d4632e3112b245e2"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3198, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}