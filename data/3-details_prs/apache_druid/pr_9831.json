{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzOTM0MTAy", "number": 9831, "title": "Add equivalent test coverage for all RHS join impls", "bodyText": "Add equivalent test coverage for all RHS join impls\nDescription\nThis PR adds unit tests to make sure that we have equal coverage for all RHS join impls.\nWe currently have 2 implementations of \"joins\", join against a lookup and join against an indexed table. We already have equal coverage tests for LookupJoinable and IndexedTableJoinable via LookupJoinableTest and IndexedTableJoinableTest (added from PR #9760). This PR adds the remaining missing tests for LookupJoinMatcher and IndexedTableJoinMatcher (so that we have equal coverage for LookupJoinMatcher and IndexedTableJoinMatcher too).\nThis PR has:\n\n been self-reviewed.\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-05-06T07:52:06Z", "url": "https://github.com/apache/druid/pull/9831", "merged": true, "mergeCommit": {"oid": "accd710115efea87120d58f01b08342065d6ae5f"}, "closed": true, "closedAt": "2020-05-06T23:10:42Z", "author": {"login": "maytasm"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcejZT4AH2gAyNDEzOTM0MTAyOjlmNTExMGY4Y2NkNTM4N2M5MDFkMDNhNTc5ODFiYTIzYzFmZWQxYWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcewEi0gFqTQwNzAxOTcxNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9f5110f8ccd5387c901d03a57981ba23c1fed1ab", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/9f5110f8ccd5387c901d03a57981ba23c1fed1ab", "committedDate": "2020-05-06T07:18:08Z", "message": "Add equivalent test coverage for all RHS join impls"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NzY1Njk3", "url": "https://github.com/apache/druid/pull/9831#pullrequestreview-406765697", "createdAt": "2020-05-06T16:06:49Z", "commit": {"oid": "9f5110f8ccd5387c901d03a57981ba23c1fed1ab"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NzY1OTgy", "url": "https://github.com/apache/druid/pull/9831#pullrequestreview-406765982", "createdAt": "2020-05-06T16:07:07Z", "commit": {"oid": "9f5110f8ccd5387c901d03a57981ba23c1fed1ab"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2OTMxNjYy", "url": "https://github.com/apache/druid/pull/9831#pullrequestreview-406931662", "createdAt": "2020-05-06T19:43:26Z", "commit": {"oid": "9f5110f8ccd5387c901d03a57981ba23c1fed1ab"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxOTo0MzoyN1rOGRip_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxOTo0NzowMFrOGRix5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA0Njc4MQ==", "bodyText": "Should this have remainderNeeded set to true like it's done in testCreateConditionAlwaysTrue()?", "url": "https://github.com/apache/druid/pull/9831#discussion_r421046781", "createdAt": "2020-05-06T19:43:27Z", "author": {"login": "ccaominh"}, "path": "processing/src/test/java/org/apache/druid/segment/join/table/LookupJoinMatcherTest.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.join.table;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.math.expr.ExprMacroTable;\n+import org.apache.druid.query.dimension.DefaultDimensionSpec;\n+import org.apache.druid.query.dimension.DimensionSpec;\n+import org.apache.druid.query.lookup.LookupExtractor;\n+import org.apache.druid.segment.ColumnSelectorFactory;\n+import org.apache.druid.segment.DimensionSelector;\n+import org.apache.druid.segment.data.SingleIndexedInt;\n+import org.apache.druid.segment.join.JoinConditionAnalysis;\n+import org.apache.druid.segment.join.lookup.LookupJoinMatcher;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import java.util.Map;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class LookupJoinMatcherTest\n+{\n+  private final Map<String, String> lookupMap =\n+      ImmutableMap.of(\"foo\", \"bar\", \"null\", \"\", \"empty String\", \"\", \"\", \"empty_string\");\n+  private static final String PREFIX = \"j.\";\n+\n+  @Mock\n+  private LookupExtractor extractor;\n+\n+  @Mock\n+  private ColumnSelectorFactory leftSelectorFactory;\n+\n+  @Mock\n+  private DimensionSelector dimensionSelector;\n+\n+  private LookupJoinMatcher target;\n+\n+  @Before\n+  public void setUp()\n+  {\n+    Mockito.doReturn(true).when(extractor).canIterate();\n+    Mockito.doReturn(lookupMap.entrySet()).when(extractor).iterable();\n+  }\n+\n+  @Test\n+  public void testCreateConditionAlwaysFalse()\n+  {\n+    JoinConditionAnalysis condition = JoinConditionAnalysis.forExpression(\"0\", PREFIX, ExprMacroTable.nil());\n+    target = LookupJoinMatcher.create(extractor, leftSelectorFactory, condition, false);\n+    target = LookupJoinMatcher.create(extractor, leftSelectorFactory, condition, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f5110f8ccd5387c901d03a57981ba23c1fed1ab"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA0ODgwNg==", "bodyText": "Is the idea that this should not throw an exception? If so, perhaps add that to the test name or add a comment.", "url": "https://github.com/apache/druid/pull/9831#discussion_r421048806", "createdAt": "2020-05-06T19:47:00Z", "author": {"login": "ccaominh"}, "path": "processing/src/test/java/org/apache/druid/segment/join/table/LookupJoinMatcherTest.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.join.table;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.math.expr.ExprMacroTable;\n+import org.apache.druid.query.dimension.DefaultDimensionSpec;\n+import org.apache.druid.query.dimension.DimensionSpec;\n+import org.apache.druid.query.lookup.LookupExtractor;\n+import org.apache.druid.segment.ColumnSelectorFactory;\n+import org.apache.druid.segment.DimensionSelector;\n+import org.apache.druid.segment.data.SingleIndexedInt;\n+import org.apache.druid.segment.join.JoinConditionAnalysis;\n+import org.apache.druid.segment.join.lookup.LookupJoinMatcher;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import java.util.Map;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class LookupJoinMatcherTest\n+{\n+  private final Map<String, String> lookupMap =\n+      ImmutableMap.of(\"foo\", \"bar\", \"null\", \"\", \"empty String\", \"\", \"\", \"empty_string\");\n+  private static final String PREFIX = \"j.\";\n+\n+  @Mock\n+  private LookupExtractor extractor;\n+\n+  @Mock\n+  private ColumnSelectorFactory leftSelectorFactory;\n+\n+  @Mock\n+  private DimensionSelector dimensionSelector;\n+\n+  private LookupJoinMatcher target;\n+\n+  @Before\n+  public void setUp()\n+  {\n+    Mockito.doReturn(true).when(extractor).canIterate();\n+    Mockito.doReturn(lookupMap.entrySet()).when(extractor).iterable();\n+  }\n+\n+  @Test\n+  public void testCreateConditionAlwaysFalse()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f5110f8ccd5387c901d03a57981ba23c1fed1ab"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64ffb9180e8883c519ed84ed3f6bd906bb7d19d6", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/64ffb9180e8883c519ed84ed3f6bd906bb7d19d6", "committedDate": "2020-05-06T22:01:24Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MDE5NzE3", "url": "https://github.com/apache/druid/pull/9831#pullrequestreview-407019717", "createdAt": "2020-05-06T22:04:13Z", "commit": {"oid": "64ffb9180e8883c519ed84ed3f6bd906bb7d19d6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2307, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}