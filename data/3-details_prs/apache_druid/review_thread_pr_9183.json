{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNTUxOTIx", "number": 9183, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMjo1NjowNVrODYs5Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxOTo1NDoxOVrODY7CaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjI3OTM0OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/topn/types/NullableNumericTopNColumnAggregatesProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMjo1NjowNVrOFetmRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMjo1NjowNVrOFetmRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc0ODY3Nw==", "bodyText": "I think the initAggregateStore call could be moved into HeapBasedTopNAlgorithm.scanAndAggregate since both impls call it as the first step", "url": "https://github.com/apache/druid/pull/9183#discussion_r367748677", "createdAt": "2020-01-17T02:56:05Z", "author": {"login": "jon-wei"}, "path": "processing/src/main/java/org/apache/druid/query/topn/types/NullableNumericTopNColumnAggregatesProcessor.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.topn.types;\n+\n+import org.apache.druid.common.config.NullHandling;\n+import org.apache.druid.query.aggregation.Aggregator;\n+import org.apache.druid.query.topn.BaseTopNAlgorithm;\n+import org.apache.druid.query.topn.TopNParams;\n+import org.apache.druid.query.topn.TopNQuery;\n+import org.apache.druid.query.topn.TopNResultBuilder;\n+import org.apache.druid.segment.BaseNullableColumnValueSelector;\n+import org.apache.druid.segment.Cursor;\n+import org.apache.druid.segment.StorageAdapter;\n+\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+public abstract class NullableNumericTopNColumnAggregatesProcessor<Selector extends BaseNullableColumnValueSelector>\n+    implements TopNColumnAggregatesProcessor<Selector>\n+{\n+  private final boolean hasNulls = !NullHandling.replaceWithDefault();\n+  final Function<Object, Comparable<?>> converter;\n+  Aggregator[] nullValueAggregates;\n+\n+  protected NullableNumericTopNColumnAggregatesProcessor(Function<Object, Comparable<?>> converter)\n+  {\n+    this.converter = converter;\n+  }\n+\n+  abstract Aggregator[] getValueAggregators(TopNQuery query, Selector selector, Cursor cursor);\n+\n+  abstract Map<?, Aggregator[]> getAggregatesStore();\n+\n+  abstract Comparable<?> convertAggregatorStoreKeyToColumnValue(Object aggregatorStoreKey);\n+\n+  @Override\n+  public int getCardinality(Selector selector)\n+  {\n+    return TopNParams.CARDINALITY_UNKNOWN;\n+  }\n+\n+  @Override\n+  public Aggregator[][] getRowSelector(TopNQuery query, TopNParams params, StorageAdapter storageAdapter)\n+  {\n+    return null;\n+  }\n+\n+  @Override\n+  public long scanAndAggregate(\n+      TopNQuery query,\n+      Selector selector,\n+      Cursor cursor,\n+      Aggregator[][] rowSelector\n+  )\n+  {\n+    initAggregateStore();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2d66ee6aeab38263bd6f4ef276d4522140964e"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjI4MDkxOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/topn/types/NullableNumericTopNColumnAggregatesProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMjo1Nzo0OVrOFetnVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMjo1Nzo0OVrOFetnVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc0ODk1MQ==", "bodyText": "Can you add javadocs for the abstract methods?", "url": "https://github.com/apache/druid/pull/9183#discussion_r367748951", "createdAt": "2020-01-17T02:57:49Z", "author": {"login": "jon-wei"}, "path": "processing/src/main/java/org/apache/druid/query/topn/types/NullableNumericTopNColumnAggregatesProcessor.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.topn.types;\n+\n+import org.apache.druid.common.config.NullHandling;\n+import org.apache.druid.query.aggregation.Aggregator;\n+import org.apache.druid.query.topn.BaseTopNAlgorithm;\n+import org.apache.druid.query.topn.TopNParams;\n+import org.apache.druid.query.topn.TopNQuery;\n+import org.apache.druid.query.topn.TopNResultBuilder;\n+import org.apache.druid.segment.BaseNullableColumnValueSelector;\n+import org.apache.druid.segment.Cursor;\n+import org.apache.druid.segment.StorageAdapter;\n+\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+public abstract class NullableNumericTopNColumnAggregatesProcessor<Selector extends BaseNullableColumnValueSelector>\n+    implements TopNColumnAggregatesProcessor<Selector>\n+{\n+  private final boolean hasNulls = !NullHandling.replaceWithDefault();\n+  final Function<Object, Comparable<?>> converter;\n+  Aggregator[] nullValueAggregates;\n+\n+  protected NullableNumericTopNColumnAggregatesProcessor(Function<Object, Comparable<?>> converter)\n+  {\n+    this.converter = converter;\n+  }\n+\n+  abstract Aggregator[] getValueAggregators(TopNQuery query, Selector selector, Cursor cursor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2d66ee6aeab38263bd6f4ef276d4522140964e"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDU1OTg3OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/topn/BaseTopNAlgorithm.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxOTozOTo1MVrOFfDTSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMDozOTowMVrOFfEq0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEwNDI2NQ==", "bodyText": "nit: I wish someday we could remove duplicate static values for this..", "url": "https://github.com/apache/druid/pull/9183#discussion_r368104265", "createdAt": "2020-01-17T19:39:51Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/topn/BaseTopNAlgorithm.java", "diffHunk": "@@ -79,7 +78,7 @@ public void run(\n       @Nullable TopNQueryMetrics queryMetrics\n   )\n   {\n-    if (params.getCardinality() != TopNColumnSelectorStrategy.CARDINALITY_UNKNOWN) {\n+    if (params.getCardinality() != TopNParams.CARDINALITY_UNKNOWN) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6130e6a5ca196644aa59f0e0708437c93699e089"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEyNjY3Mw==", "bodyText": "I agree but do not want to settle this up in this PR, part of the problem is that different parts of the code use different values to indicate unknown cardinality...", "url": "https://github.com/apache/druid/pull/9183#discussion_r368126673", "createdAt": "2020-01-17T20:39:01Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/query/topn/BaseTopNAlgorithm.java", "diffHunk": "@@ -79,7 +78,7 @@ public void run(\n       @Nullable TopNQueryMetrics queryMetrics\n   )\n   {\n-    if (params.getCardinality() != TopNColumnSelectorStrategy.CARDINALITY_UNKNOWN) {\n+    if (params.getCardinality() != TopNParams.CARDINALITY_UNKNOWN) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEwNDI2NQ=="}, "originalCommit": {"oid": "6130e6a5ca196644aa59f0e0708437c93699e089"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDU4MjA4OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/topn/types/TopNColumnSelectorStrategyFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxOTo0ODozOFrOFfDhFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxOTo0ODozOFrOFfDhFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEwNzc5OA==", "bodyText": "nit: TopNColumnAggregatesProcessorFactory?", "url": "https://github.com/apache/druid/pull/9183#discussion_r368107798", "createdAt": "2020-01-17T19:48:38Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/topn/types/TopNColumnSelectorStrategyFactory.java", "diffHunk": "@@ -23,10 +23,14 @@\n import org.apache.druid.java.util.common.IAE;\n import org.apache.druid.query.dimension.ColumnSelectorStrategyFactory;\n import org.apache.druid.segment.ColumnValueSelector;\n+import org.apache.druid.segment.DimensionHandlerUtils;\n import org.apache.druid.segment.column.ColumnCapabilities;\n import org.apache.druid.segment.column.ValueType;\n \n-public class TopNColumnSelectorStrategyFactory implements ColumnSelectorStrategyFactory<TopNColumnSelectorStrategy>\n+import java.util.function.Function;\n+\n+public class TopNColumnSelectorStrategyFactory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6130e6a5ca196644aa59f0e0708437c93699e089"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDU5Njg5OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/topn/types/LongTopNColumnAggregatesProcessor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxOTo1NDoxOVrOFfDqGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMDozODoxM1rOFfEpvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODExMDEwNQ==", "bodyText": "Probably better to use computeIfAbsent() since it computes hash less time.", "url": "https://github.com/apache/druid/pull/9183#discussion_r368110105", "createdAt": "2020-01-17T19:54:19Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/topn/types/LongTopNColumnAggregatesProcessor.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.topn.types;\n+\n+import it.unimi.dsi.fastutil.longs.Long2ObjectMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;\n+import org.apache.druid.query.aggregation.Aggregator;\n+import org.apache.druid.query.topn.BaseTopNAlgorithm;\n+import org.apache.druid.query.topn.TopNQuery;\n+import org.apache.druid.segment.BaseLongColumnValueSelector;\n+import org.apache.druid.segment.Cursor;\n+\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+public class LongTopNColumnAggregatesProcessor\n+    extends NullableNumericTopNColumnAggregatesProcessor<BaseLongColumnValueSelector>\n+{\n+  private Long2ObjectMap<Aggregator[]> aggregatesStore;\n+\n+  public LongTopNColumnAggregatesProcessor(Function<Object, Comparable<?>> converter)\n+  {\n+    super(converter);\n+  }\n+\n+  @Override\n+  Aggregator[] getValueAggregators(TopNQuery query, BaseLongColumnValueSelector selector, Cursor cursor)\n+  {\n+    long key = selector.getLong();\n+    Aggregator[] aggs = aggregatesStore.get(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6130e6a5ca196644aa59f0e0708437c93699e089"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODExMzg0Nw==", "bodyText": "Same for double and float types.", "url": "https://github.com/apache/druid/pull/9183#discussion_r368113847", "createdAt": "2020-01-17T20:03:47Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/topn/types/LongTopNColumnAggregatesProcessor.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.topn.types;\n+\n+import it.unimi.dsi.fastutil.longs.Long2ObjectMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;\n+import org.apache.druid.query.aggregation.Aggregator;\n+import org.apache.druid.query.topn.BaseTopNAlgorithm;\n+import org.apache.druid.query.topn.TopNQuery;\n+import org.apache.druid.segment.BaseLongColumnValueSelector;\n+import org.apache.druid.segment.Cursor;\n+\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+public class LongTopNColumnAggregatesProcessor\n+    extends NullableNumericTopNColumnAggregatesProcessor<BaseLongColumnValueSelector>\n+{\n+  private Long2ObjectMap<Aggregator[]> aggregatesStore;\n+\n+  public LongTopNColumnAggregatesProcessor(Function<Object, Comparable<?>> converter)\n+  {\n+    super(converter);\n+  }\n+\n+  @Override\n+  Aggregator[] getValueAggregators(TopNQuery query, BaseLongColumnValueSelector selector, Cursor cursor)\n+  {\n+    long key = selector.getLong();\n+    Aggregator[] aggs = aggregatesStore.get(key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODExMDEwNQ=="}, "originalCommit": {"oid": "6130e6a5ca196644aa59f0e0708437c93699e089"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEyNjM5OA==", "bodyText": "Yeah, i thought about that but was too lazy and just copied the old codes, will change.", "url": "https://github.com/apache/druid/pull/9183#discussion_r368126398", "createdAt": "2020-01-17T20:38:13Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/query/topn/types/LongTopNColumnAggregatesProcessor.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.topn.types;\n+\n+import it.unimi.dsi.fastutil.longs.Long2ObjectMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;\n+import org.apache.druid.query.aggregation.Aggregator;\n+import org.apache.druid.query.topn.BaseTopNAlgorithm;\n+import org.apache.druid.query.topn.TopNQuery;\n+import org.apache.druid.segment.BaseLongColumnValueSelector;\n+import org.apache.druid.segment.Cursor;\n+\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+public class LongTopNColumnAggregatesProcessor\n+    extends NullableNumericTopNColumnAggregatesProcessor<BaseLongColumnValueSelector>\n+{\n+  private Long2ObjectMap<Aggregator[]> aggregatesStore;\n+\n+  public LongTopNColumnAggregatesProcessor(Function<Object, Comparable<?>> converter)\n+  {\n+    super(converter);\n+  }\n+\n+  @Override\n+  Aggregator[] getValueAggregators(TopNQuery query, BaseLongColumnValueSelector selector, Cursor cursor)\n+  {\n+    long key = selector.getLong();\n+    Aggregator[] aggs = aggregatesStore.get(key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODExMDEwNQ=="}, "originalCommit": {"oid": "6130e6a5ca196644aa59f0e0708437c93699e089"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2125, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}