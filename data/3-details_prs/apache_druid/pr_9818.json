{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNzMzMTUw", "number": 9818, "title": "Directly rewrite filters on RHS join columns into LHS equivalents", "bodyText": "This PR allows JoinFilterAnalyzer to directly rewrite filters on RHS join columns into filters on the equivalent LHS join columns, allowing these filters to be pushed down to base tables.\nTo supports this two new methods are added to Filter:\n\nsupportsRequiredColumnRewrite\nrewriteRequiredColumns\n\nThese methods are used to pass a map of column name rewrites to a Filter, which the Filter will use to return a copy of itself that operates on different columns.\nCurrent restrictions on such rewrites:\n\nOnly filters that reference a single column currently support such rewrites\nExpression, Javascript, AND/OR, and Spatial filters are not currently supported\n\nFor expression and javascript rewrites, we would need a good way to replace the identifiers for the new filter\n\n\n\nThis PR has:\n\n been self-reviewed.\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-05-04T04:36:03Z", "url": "https://github.com/apache/druid/pull/9818", "merged": true, "mergeCommit": {"oid": "16d293d6e0d81963af3b3d468efd658317d91052"}, "closed": true, "closedAt": "2020-05-09T06:45:36Z", "author": {"login": "jon-wei"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcd3ysRAH2gAyNDEyNzMzMTUwOjkzN2YyNjhmNGQ2NGFhNTYxY2FhYjAwZmJlN2FjYTFlYWMwYmNlY2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcff-S1AFqTQwODYxNTU0Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "937f268f4d64aa561caab00fbe7aca1eac0bcecc", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/937f268f4d64aa561caab00fbe7aca1eac0bcecc", "committedDate": "2020-05-04T04:30:02Z", "message": "Directly rewrite filters on RHS join columns into LHS equivalents"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1Mzc1ODY3", "url": "https://github.com/apache/druid/pull/9818#pullrequestreview-405375867", "createdAt": "2020-05-04T21:54:24Z", "commit": {"oid": "937f268f4d64aa561caab00fbe7aca1eac0bcecc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMTo1NDoyNVrOGQTpGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTo1NDo1MVrOGQwGPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc1MjIxNw==", "bodyText": "Missing in equals()\nCan you add an EqualsVerifierTest for this please", "url": "https://github.com/apache/druid/pull/9818#discussion_r419752217", "createdAt": "2020-05-04T21:54:25Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/ExpressionDimFilter.java", "diffHunk": "@@ -44,6 +45,9 @@\n   @Nullable\n   private final FilterTuning filterTuning;\n \n+  @JsonIgnore\n+  private final ExprMacroTable macroTable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "937f268f4d64aa561caab00fbe7aca1eac0bcecc"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc1MjU1OA==", "bodyText": "Missing EqualsVerifierTest for this LikeDimFilter.\nThanks for this adding an equals test for LikeMatcher \ud83d\udc4d", "url": "https://github.com/apache/druid/pull/9818#discussion_r419752558", "createdAt": "2020-05-04T21:55:08Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/LikeDimFilter.java", "diffHunk": "@@ -363,5 +363,26 @@ public SuffixMatch getSuffixMatch()\n     {\n       return suffixMatch;\n     }\n+\n+    @Override\n+    public boolean equals(Object o)\n+    {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      LikeMatcher that = (LikeMatcher) o;\n+      return getSuffixMatch() == that.getSuffixMatch() &&\n+             Objects.equals(getPrefix(), that.getPrefix()) &&\n+             Objects.equals(pattern.toString(), that.pattern.toString());\n+    }\n+\n+    @Override\n+    public int hashCode()\n+    {\n+      return Objects.hash(getSuffixMatch(), getPrefix(), pattern.toString());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "937f268f4d64aa561caab00fbe7aca1eac0bcecc"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc1MzUzMw==", "bodyText": "Why can't a like dim filter be re-written?", "url": "https://github.com/apache/druid/pull/9818#discussion_r419753533", "createdAt": "2020-05-04T21:57:18Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/LikeDimFilter.java", "diffHunk": "@@ -363,5 +363,26 @@ public SuffixMatch getSuffixMatch()\n     {\n       return suffixMatch;\n     }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "937f268f4d64aa561caab00fbe7aca1eac0bcecc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc1NDcxNA==", "bodyText": "I think we should add a test that looks for all implementations of Filter and then validate whatsupportsRequiredColumnRewrite() returns.\nSince the default is false, we should be explicit in the list of filters that we say do not support re-writes. This way, if someone adds a filter in the future, this test will fail and force the dev to think about what the correct implementation should be.", "url": "https://github.com/apache/druid/pull/9818#discussion_r419754714", "createdAt": "2020-05-04T21:59:48Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/Filter.java", "diffHunk": "@@ -162,4 +163,29 @@ default boolean canVectorizeMatcher()\n    * can be expected to have a bitmap index retrievable via {@link BitmapIndexSelector#getBitmapIndex(String)}\n    */\n   Set<String> getRequiredColumns();\n+\n+  /**\n+   * Returns true is this filter is able to return a copy of this filter that is identical to this filter except that it\n+   * operates on different columns, based on a renaming map.\n+   */\n+  default boolean supportsRequiredColumnRewrite()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "937f268f4d64aa561caab00fbe7aca1eac0bcecc"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc1NjEzOQ==", "bodyText": "note to self: re-think the interface here. Does this need to be de-coupled from the function above? Does this introduce more chances of developer error that's only detected at runtime? Is there a pattern that guarantees that this is only called if supportsRequiredColumnRewrite is  true?", "url": "https://github.com/apache/druid/pull/9818#discussion_r419756139", "createdAt": "2020-05-04T22:03:17Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/Filter.java", "diffHunk": "@@ -162,4 +163,29 @@ default boolean canVectorizeMatcher()\n    * can be expected to have a bitmap index retrievable via {@link BitmapIndexSelector#getBitmapIndex(String)}\n    */\n   Set<String> getRequiredColumns();\n+\n+  /**\n+   * Returns true is this filter is able to return a copy of this filter that is identical to this filter except that it\n+   * operates on different columns, based on a renaming map.\n+   */\n+  default boolean supportsRequiredColumnRewrite()\n+  {\n+    return false;\n+  }\n+\n+  /**\n+   * Return a copy of this filter that is identical to the this filter except that it operates on different columns,\n+   * based on a renaming map where the key is the column to be renamed in the filter, and the value is the new\n+   * column name.\n+   *\n+   * For example, if I have a filter (A = hello), and I have a renaming map (A -> B),\n+   * this should return the filter (B = hello)\n+   *\n+   * @param columnRewrites Column rewrite map\n+   * @return Copy of this filter that operates on new columns based on the rewrite map\n+   */\n+  default Filter rewriteRequiredColumns(Map<String, String> columnRewrites)\n+  {\n+    throw new UnsupportedOperationException(\"Required column rewrite is not supported by this filter.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "937f268f4d64aa561caab00fbe7aca1eac0bcecc"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc1NzIxNA==", "bodyText": "note to self: What is the overhead of creating a new object for the filter?", "url": "https://github.com/apache/druid/pull/9818#discussion_r419757214", "createdAt": "2020-05-04T22:05:47Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/filter/BoundFilter.java", "diffHunk": "@@ -172,6 +174,37 @@ public boolean supportsSelectivityEstimation(ColumnSelector columnSelector, Bitm\n     return boundDimFilter.getRequiredColumns();\n   }\n \n+  @Override\n+  public boolean supportsRequiredColumnRewrite()\n+  {\n+    return true;\n+  }\n+\n+  @Override\n+  public Filter rewriteRequiredColumns(Map<String, String> columnRewrites)\n+  {\n+    if (columnRewrites.get(boundDimFilter.getDimension()) == null) {\n+      throw new IAE(\n+          \"Received a non-applicable rewrite: %s, filter's dimension: %s\",\n+          columnRewrites,\n+          boundDimFilter.getDimension()\n+      );\n+    }\n+    BoundDimFilter newDimFilter = new BoundDimFilter(\n+        columnRewrites.get(boundDimFilter.getDimension()),\n+        boundDimFilter.getLower(),\n+        boundDimFilter.getUpper(),\n+        boundDimFilter.isLowerStrict(),\n+        boundDimFilter.isUpperStrict(),\n+        null,\n+        boundDimFilter.getExtractionFn(),\n+        boundDimFilter.getOrdering()\n+    );\n+    return new BoundFilter(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "937f268f4d64aa561caab00fbe7aca1eac0bcecc"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg3MjM4Mg==", "bodyText": "Dead code", "url": "https://github.com/apache/druid/pull/9818#discussion_r419872382", "createdAt": "2020-05-05T05:33:55Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/join/filter/JoinFilterAnalyzer.java", "diffHunk": "@@ -387,87 +428,197 @@ private static JoinFilterAnalysis analyzeJoinFilterClause(\n       return JoinFilterAnalysis.createNoPushdownFilterAnalysis(filterClause);\n     }\n \n+    if (filterClause instanceof OrFilter) {\n+      return rewriteOrFilter(\n+          (OrFilter) filterClause,\n+          joinFilterPreAnalysis,\n+          pushDownVirtualColumnsForLhsExprs\n+      );\n+    }\n+\n+    if (doesRequiredColumnSetSupportDirectJoinFilterRewrite(\n+        filterClause.getRequiredColumns(),\n+        joinFilterPreAnalysis.getEquiconditions()\n+    )) {\n+      return rewriteFilterDirect(\n+          filterClause,\n+          joinFilterPreAnalysis,\n+          pushDownVirtualColumnsForLhsExprs\n+      );\n+    }\n+\n     // Currently we only support rewrites of selector filters and selector filters within OR filters.\n     if (filterClause instanceof SelectorFilter) {\n       return rewriteSelectorFilter(\n           (SelectorFilter) filterClause,\n-          joinFilterPreAnalysis\n+          joinFilterPreAnalysis,\n+          pushDownVirtualColumnsForLhsExprs\n       );\n     }\n \n-    if (filterClause instanceof OrFilter) {\n-      return rewriteOrFilter(\n-          (OrFilter) filterClause,\n-          joinFilterPreAnalysis\n+    return JoinFilterAnalysis.createNoPushdownFilterAnalysis(filterClause);\n+  }\n+\n+  private static JoinFilterAnalysis rewriteFilterDirect(\n+      Filter filterClause,\n+      JoinFilterPreAnalysis joinFilterPreAnalysis,\n+      Map<Expr, VirtualColumn> pushDownVirtualColumnsForLhsExprs\n+  )\n+  {\n+    if (!filterClause.supportsRequiredColumnRewrite()) {\n+      return JoinFilterAnalysis.createNoPushdownFilterAnalysis(filterClause);\n+    }\n+\n+    List<Filter> newFilters = new ArrayList<>();\n+    /*\n+    if (areSomeColumnsFromPostJoinVirtualColumns(\n+        joinFilterPreAnalysis.getPostJoinVirtualColumns(),\n+        filterClause.getRequiredColumns()\n+    )) {\n+      return JoinFilterAnalysis.createNoPushdownFilterAnalysis(filterClause);\n+    }\n+    */\n+\n+    /*\n+    if (!areSomeColumnsFromJoin(joinFilterPreAnalysis.getJoinableClauses(), filterClause.getRequiredColumns())) {\n+      return new JoinFilterAnalysis(\n+          false,\n+          filterClause,\n+          filterClause,\n+          pushdownVirtualColumns\n       );\n     }\n+    */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "937f268f4d64aa561caab00fbe7aca1eac0bcecc"}, "originalPosition": 309}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIxNDkzOA==", "bodyText": "get() without isPresent() check", "url": "https://github.com/apache/druid/pull/9818#discussion_r420214938", "createdAt": "2020-05-05T15:50:05Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/join/filter/JoinFilterAnalyzer.java", "diffHunk": "@@ -265,6 +286,10 @@ public static JoinFilterPreAnalysis computeJoinFilterPreAnalysis(\n                   (rhsCol) -> Optional.of(new ArrayList<>())\n               );\n           perColumnCorrelations.get().add(correlationForPrefix.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "937f268f4d64aa561caab00fbe7aca1eac0bcecc"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIxODQyOA==", "bodyText": "Shouldn't we need to do this?\nWhat if the filter could not be re-written directly (eg. an expression filter, or there were multiple columns in a filter)", "url": "https://github.com/apache/druid/pull/9818#discussion_r420218428", "createdAt": "2020-05-05T15:54:51Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/join/filter/JoinFilterAnalyzer.java", "diffHunk": "@@ -265,6 +286,10 @@ public static JoinFilterPreAnalysis computeJoinFilterPreAnalysis(\n                   (rhsCol) -> Optional.of(new ArrayList<>())\n               );\n           perColumnCorrelations.get().add(correlationForPrefix.getValue());\n+          if (rhsRewriteCandidate.isJoinColumn()) {\n+            // we don't need to determine correlated values if the filter is on the join column", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "937f268f4d64aa561caab00fbe7aca1eac0bcecc"}, "originalPosition": 133}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c24e612bf7591230508fce8e224657b012dc0613", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/c24e612bf7591230508fce8e224657b012dc0613", "committedDate": "2020-05-06T01:23:00Z", "message": "PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64bfecb00bd472e2269042fe8976ddcde7a40eae", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/64bfecb00bd472e2269042fe8976ddcde7a40eae", "committedDate": "2020-05-06T01:26:19Z", "message": "Fix inspection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d82c4f93e7a7adf918c9ac31c9e5d3f1284eeaf8", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/d82c4f93e7a7adf918c9ac31c9e5d3f1284eeaf8", "committedDate": "2020-05-06T01:27:55Z", "message": "Revert unnecessary ExprMacroTable change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3OTc5OTg3", "url": "https://github.com/apache/druid/pull/9818#pullrequestreview-407979987", "createdAt": "2020-05-08T03:55:22Z", "commit": {"oid": "d82c4f93e7a7adf918c9ac31c9e5d3f1284eeaf8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c312e05c05238ab9c84b80713f8006ffd71050a4", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/c312e05c05238ab9c84b80713f8006ffd71050a4", "committedDate": "2020-05-09T01:37:53Z", "message": "Merge remote-tracking branch 'upstream/master' into optimize_join_filter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cce3497a9785bd4e65f926d03941f85a0a44124b", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/cce3497a9785bd4e65f926d03941f85a0a44124b", "committedDate": "2020-05-09T01:52:13Z", "message": "Fix build after merge"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NTkwMTM5", "url": "https://github.com/apache/druid/pull/9818#pullrequestreview-408590139", "createdAt": "2020-05-09T00:26:55Z", "commit": {"oid": "d82c4f93e7a7adf918c9ac31c9e5d3f1284eeaf8"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDoyNjo1NVrOGS3DhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjoyODoxOFrOGS34RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyOTU3Mg==", "bodyText": "Does this interface take a map for future expansion even though all callers pass a map containing only one pair of key and value?", "url": "https://github.com/apache/druid/pull/9818#discussion_r422429572", "createdAt": "2020-05-09T00:26:55Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/filter/Filter.java", "diffHunk": "@@ -162,4 +163,29 @@ default boolean canVectorizeMatcher()\n    * can be expected to have a bitmap index retrievable via {@link BitmapIndexSelector#getBitmapIndex(String)}\n    */\n   Set<String> getRequiredColumns();\n+\n+  /**\n+   * Returns true is this filter is able to return a copy of this filter that is identical to this filter except that it\n+   * operates on different columns, based on a renaming map.\n+   */\n+  default boolean supportsRequiredColumnRewrite()\n+  {\n+    return false;\n+  }\n+\n+  /**\n+   * Return a copy of this filter that is identical to the this filter except that it operates on different columns,\n+   * based on a renaming map where the key is the column to be renamed in the filter, and the value is the new\n+   * column name.\n+   *\n+   * For example, if I have a filter (A = hello), and I have a renaming map (A -> B),\n+   * this should return the filter (B = hello)\n+   *\n+   * @param columnRewrites Column rewrite map\n+   * @return Copy of this filter that operates on new columns based on the rewrite map\n+   */\n+  default Filter rewriteRequiredColumns(Map<String, String> columnRewrites)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d82c4f93e7a7adf918c9ac31c9e5d3f1284eeaf8"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMDgxOA==", "bodyText": "nit: columnRewrites.get(dimension) can be cached as a local variable above. Same for other filters.", "url": "https://github.com/apache/druid/pull/9818#discussion_r422430818", "createdAt": "2020-05-09T00:33:43Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/segment/filter/InFilter.java", "diffHunk": "@@ -179,6 +181,30 @@ public boolean canVectorizeMatcher()\n     return ImmutableSet.of(dimension);\n   }\n \n+  @Override\n+  public boolean supportsRequiredColumnRewrite()\n+  {\n+    return true;\n+  }\n+\n+  @Override\n+  public Filter rewriteRequiredColumns(Map<String, String> columnRewrites)\n+  {\n+    if (columnRewrites.get(dimension) == null) {\n+      throw new IAE(\"Received a non-applicable rewrite: %s, filter's dimension: %s\", columnRewrites, dimension);\n+    }\n+\n+    return new InFilter(\n+        columnRewrites.get(dimension),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d82c4f93e7a7adf918c9ac31c9e5d3f1284eeaf8"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMjM5Ng==", "bodyText": "Can use Collections.emptyMap().", "url": "https://github.com/apache/druid/pull/9818#discussion_r422432396", "createdAt": "2020-05-09T00:42:59Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/segment/join/filter/JoinFilterAnalyzer.java", "diffHunk": "@@ -125,7 +126,8 @@ public static JoinFilterPreAnalysis computeJoinFilterPreAnalysis(\n           null,\n           null,\n           enableFilterPushDown,\n-          enableFilterRewrite\n+          enableFilterRewrite,\n+          new HashMap<>()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d82c4f93e7a7adf918c9ac31c9e5d3f1284eeaf8"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMjQwMg==", "bodyText": "Can use Collections.emptyMap().", "url": "https://github.com/apache/druid/pull/9818#discussion_r422432402", "createdAt": "2020-05-09T00:43:03Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/segment/join/filter/JoinFilterAnalyzer.java", "diffHunk": "@@ -166,7 +168,8 @@ public static JoinFilterPreAnalysis computeJoinFilterPreAnalysis(\n           normalizedJoinTableClauses,\n           null,\n           enableFilterPushDown,\n-          enableFilterRewrite\n+          enableFilterRewrite,\n+          new HashMap<>()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d82c4f93e7a7adf918c9ac31c9e5d3f1284eeaf8"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMzI0NA==", "bodyText": "Would add some description about what \"direct rewrite\" means?", "url": "https://github.com/apache/druid/pull/9818#discussion_r422433244", "createdAt": "2020-05-09T00:49:13Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/segment/join/filter/JoinFilterAnalyzer.java", "diffHunk": "@@ -862,5 +1006,10 @@ public String getValueForRewrite()\n     {\n       return valueForRewrite;\n     }\n+\n+    public boolean isDirectRewrite()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d82c4f93e7a7adf918c9ac31c9e5d3f1284eeaf8"}, "originalPosition": 629}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMzMyNQ==", "bodyText": "The new parameter is missing in the Javadoc.", "url": "https://github.com/apache/druid/pull/9818#discussion_r422433325", "createdAt": "2020-05-09T00:49:46Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/segment/join/filter/JoinFilterAnalyzer.java", "diffHunk": "@@ -370,14 +412,15 @@ public static JoinFilterSplit splitFilter(\n    * Analyze a filter clause from a filter that is in conjunctive normal form (AND of ORs).\n    * The clause is expected to be an OR filter or a leaf filter.\n    *\n-   * @param filterClause     Individual filter clause (an OR filter or a leaf filter) from a filter that is in CNF\n+   * @param filterClause          Individual filter clause (an OR filter or a leaf filter) from a filter that is in CNF\n    * @param joinFilterPreAnalysis The pre-analysis computed by {@link #computeJoinFilterPreAnalysis)}\n    *\n    * @return a JoinFilterAnalysis that contains a possible filter rewrite and information on how to handle the filter.\n    */\n   private static JoinFilterAnalysis analyzeJoinFilterClause(\n       Filter filterClause,\n-      JoinFilterPreAnalysis joinFilterPreAnalysis\n+      JoinFilterPreAnalysis joinFilterPreAnalysis,\n+      Map<Expr, VirtualColumn> pushDownVirtualColumnsForLhsExprs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d82c4f93e7a7adf918c9ac31c9e5d3f1284eeaf8"}, "originalPosition": 248}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzNDg3NQ==", "bodyText": "I'm curious why the value type is Optional vs just treating nulls as missing keys. Are Optional.absent() and null values (missing keys) treated in different ways?", "url": "https://github.com/apache/druid/pull/9818#discussion_r422434875", "createdAt": "2020-05-09T01:02:08Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/segment/join/filter/JoinFilterAnalyzer.java", "diffHunk": "@@ -265,6 +286,10 @@ public static JoinFilterPreAnalysis computeJoinFilterPreAnalysis(\n                   (rhsCol) -> Optional.of(new ArrayList<>())\n               );\n           perColumnCorrelations.get().add(correlationForPrefix.getValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIxNDkzOA=="}, "originalCommit": {"oid": "937f268f4d64aa561caab00fbe7aca1eac0bcecc"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0MzA3Ng==", "bodyText": "Hmm, I'm not sure exactly what is wrong, but it seems there is something missing. When I modified the join condition in this test to \"\\\"%sregionIsoCode\\\" == regionIsoCode && \\\"%scountryIsoCode\\\" == regionIsoCode && \\\"%sregionName\\\" == user\", this block did strange rewrites such as r1.regionIsoCode = AAAA -> user = AAAA or r1.regionName = Fourems Province -> regionIsoCode = Fourems Province.", "url": "https://github.com/apache/druid/pull/9818#discussion_r422443076", "createdAt": "2020-05-09T02:28:18Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/segment/join/filter/JoinFilterAnalyzer.java", "diffHunk": "@@ -387,87 +430,178 @@ private static JoinFilterAnalysis analyzeJoinFilterClause(\n       return JoinFilterAnalysis.createNoPushdownFilterAnalysis(filterClause);\n     }\n \n+    if (filterClause instanceof OrFilter) {\n+      return rewriteOrFilter(\n+          (OrFilter) filterClause,\n+          joinFilterPreAnalysis,\n+          pushDownVirtualColumnsForLhsExprs\n+      );\n+    }\n+\n+    if (filterClause.supportsRequiredColumnRewrite() && doesRequiredColumnSetSupportDirectJoinFilterRewrite(\n+        filterClause.getRequiredColumns(),\n+        joinFilterPreAnalysis.getEquiconditions()\n+    )) {\n+      return rewriteFilterDirect(\n+          filterClause,\n+          joinFilterPreAnalysis,\n+          pushDownVirtualColumnsForLhsExprs\n+      );\n+    }\n+\n     // Currently we only support rewrites of selector filters and selector filters within OR filters.\n     if (filterClause instanceof SelectorFilter) {\n       return rewriteSelectorFilter(\n           (SelectorFilter) filterClause,\n-          joinFilterPreAnalysis\n+          joinFilterPreAnalysis,\n+          pushDownVirtualColumnsForLhsExprs\n       );\n     }\n \n-    if (filterClause instanceof OrFilter) {\n-      return rewriteOrFilter(\n-          (OrFilter) filterClause,\n-          joinFilterPreAnalysis\n-      );\n+    return JoinFilterAnalysis.createNoPushdownFilterAnalysis(filterClause);\n+  }\n+\n+  private static JoinFilterAnalysis rewriteFilterDirect(\n+      Filter filterClause,\n+      JoinFilterPreAnalysis joinFilterPreAnalysis,\n+      Map<Expr, VirtualColumn> pushDownVirtualColumnsForLhsExprs\n+  )\n+  {\n+    if (!filterClause.supportsRequiredColumnRewrite()) {\n+      return JoinFilterAnalysis.createNoPushdownFilterAnalysis(filterClause);\n     }\n \n-    return JoinFilterAnalysis.createNoPushdownFilterAnalysis(filterClause);\n+    List<Filter> newFilters = new ArrayList<>();\n+\n+    // we only support direct rewrites of filters that reference a single column\n+    String reqColumn = filterClause.getRequiredColumns().iterator().next();\n+\n+    Optional<List<JoinFilterColumnCorrelationAnalysis>> correlationAnalyses = joinFilterPreAnalysis.getCorrelationsByFilteringColumn()\n+                                                                                                   .get(reqColumn);\n+\n+    if (!correlationAnalyses.isPresent()) {\n+      return JoinFilterAnalysis.createNoPushdownFilterAnalysis(filterClause);\n+    }\n+\n+    for (JoinFilterColumnCorrelationAnalysis correlationAnalysis : correlationAnalyses.get()) {\n+      if (correlationAnalysis.supportsPushDown()) {\n+        for (String correlatedBaseColumn : correlationAnalysis.getBaseColumns()) {\n+          Filter rewrittenFilter = filterClause.rewriteRequiredColumns(ImmutableMap.of(\n+              reqColumn,\n+              correlatedBaseColumn\n+          ));\n+          newFilters.add(rewrittenFilter);\n+        }\n+\n+        for (Expr correlatedBaseExpr : correlationAnalysis.getBaseExpressions()) {\n+          // We need to create a virtual column for the expressions when pushing down\n+          VirtualColumn pushDownVirtualColumn = pushDownVirtualColumnsForLhsExprs.computeIfAbsent(\n+              correlatedBaseExpr,\n+              (expr) -> {\n+                String vcName = getCorrelatedBaseExprVirtualColumnName(pushDownVirtualColumnsForLhsExprs.size());\n+                return new ExpressionVirtualColumn(\n+                    vcName,\n+                    correlatedBaseExpr,\n+                    ValueType.STRING\n+                );\n+              }\n+          );\n+\n+          Filter rewrittenFilter = filterClause.rewriteRequiredColumns(ImmutableMap.of(\n+              reqColumn,\n+              pushDownVirtualColumn.getOutputName()\n+          ));\n+          newFilters.add(rewrittenFilter);\n+        }\n+      }\n+    }\n+\n+    if (newFilters.isEmpty()) {\n+      return JoinFilterAnalysis.createNoPushdownFilterAnalysis(filterClause);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce3497a9785bd4e65f926d03941f85a0a44124b"}, "originalPosition": 351}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87ad5690240553200597f66185310169ad4e2b02", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/87ad5690240553200597f66185310169ad4e2b02", "committedDate": "2020-05-09T04:57:30Z", "message": "Address PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NjE1NTQ3", "url": "https://github.com/apache/druid/pull/9818#pullrequestreview-408615547", "createdAt": "2020-05-09T05:52:50Z", "commit": {"oid": "87ad5690240553200597f66185310169ad4e2b02"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2292, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}