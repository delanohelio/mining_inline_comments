{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMzI0NzQz", "number": 10080, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzo0MToyMVrOEJIxig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzo0MToyMVrOEJIxig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDE2Mzk0OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/org/apache/druid/tests/parallelized/ITSqlInputSourceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzo0MToyMVrOGphV2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMDozMTozMlrOGpt3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE5MTA2Nw==", "bodyText": "nit: Maybe consider making the name of the test part of the parameters, then you can use the @TestCaseName annotation to print out the name of each parameterized test and it could also be used as the name of the datasource.\nlike @TestCaseName(\"testSqlInputSource - {1}\")", "url": "https://github.com/apache/druid/pull/10080#discussion_r446191067", "createdAt": "2020-06-26T13:41:21Z", "author": {"login": "suneet-s"}, "path": "integration-tests/src/test/java/org/apache/druid/tests/parallelized/ITSqlInputSourceTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.tests.parallelized;\n+\n+import com.google.common.collect.ImmutableList;\n+import org.apache.druid.indexer.partitions.DynamicPartitionsSpec;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.testing.guice.DruidTestModuleFactory;\n+import org.apache.druid.tests.TestNGGroup;\n+import org.apache.druid.tests.indexer.AbstractITBatchIndexTest;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Guice;\n+import org.testng.annotations.Test;\n+\n+import java.io.Closeable;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.function.Function;\n+\n+@Test(groups = TestNGGroup.BATCH_INDEX)\n+@Guice(moduleFactory = DruidTestModuleFactory.class)\n+public class ITSqlInputSourceTest extends AbstractITBatchIndexTest\n+{\n+  private static final String INDEX_TASK = \"/indexer/wikipedia_index_task.json\";\n+  private static final String INDEX_QUERIES_RESOURCE = \"/indexer/wikipedia_index_queries.json\";\n+\n+  @DataProvider(parallel = true)\n+  public static Object[][] resources()\n+  {\n+    return new Object[][]{\n+        // Multiple query. No filter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "866647254c9a2c6db42a9e64d722473a00914b55"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM5NjIxMA==", "bodyText": "This is not needed.\nIn travis log we already have a LoggerListener that reports when test starts and the status (pass, fail, etc) of the test. The LoggerListener also report out the parameter.\nFor example,\nWhen test pass:\n2020-06-26T02:33:00,617 INFO [TestNG-PoolService-0] org.apache.druid.testing.utils.LoggerListener - Passed [org.apache.druid.tests.parallelized.ITSqlInputSourceTest.testIndexData] with parameters [[SELECT * FROM wikipedia_index_data1 WHERE added > 0, SELECT * FROM wikipedia_index_data2 WHERE added > 0, SELECT * FROM wikipedia_index_data3 WHERE added > 0]]\nWhen test starts:\n2020-06-26T02:33:00,617 INFO [TestNG-PoolService-0] org.apache.druid.testing.utils.LoggerListener - Starting [org.apache.druid.tests.parallelized.ITSqlInputSourceTest.testIndexData] with parameters [[SELECT * FROM wikipedia_index_data_all WHERE timestamp BETWEEN '2013-08-31 00:00:00' AND '2013-09-01 11:59:59']]", "url": "https://github.com/apache/druid/pull/10080#discussion_r446396210", "createdAt": "2020-06-26T20:31:32Z", "author": {"login": "maytasm"}, "path": "integration-tests/src/test/java/org/apache/druid/tests/parallelized/ITSqlInputSourceTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.tests.parallelized;\n+\n+import com.google.common.collect.ImmutableList;\n+import org.apache.druid.indexer.partitions.DynamicPartitionsSpec;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.testing.guice.DruidTestModuleFactory;\n+import org.apache.druid.tests.TestNGGroup;\n+import org.apache.druid.tests.indexer.AbstractITBatchIndexTest;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Guice;\n+import org.testng.annotations.Test;\n+\n+import java.io.Closeable;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.function.Function;\n+\n+@Test(groups = TestNGGroup.BATCH_INDEX)\n+@Guice(moduleFactory = DruidTestModuleFactory.class)\n+public class ITSqlInputSourceTest extends AbstractITBatchIndexTest\n+{\n+  private static final String INDEX_TASK = \"/indexer/wikipedia_index_task.json\";\n+  private static final String INDEX_QUERIES_RESOURCE = \"/indexer/wikipedia_index_queries.json\";\n+\n+  @DataProvider(parallel = true)\n+  public static Object[][] resources()\n+  {\n+    return new Object[][]{\n+        // Multiple query. No filter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE5MTA2Nw=="}, "originalCommit": {"oid": "866647254c9a2c6db42a9e64d722473a00914b55"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2366, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}