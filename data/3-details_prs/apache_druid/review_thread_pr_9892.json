{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5ODQyMTI1", "number": 9892, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMjowMzozNFrOD-CJRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMjowMzozNFrOD-CJRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzczNDQ2OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/common/task/TaskResource.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMjowMzozNFrOGX4wCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNDowMjoyMFrOGX6edA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcwMDIzNA==", "bodyText": "just curious: How do we decide between using @Min and @Nonnull annotations on the constructor vs adding an explicit Preconditions check? Is there an advantage to one over another?\nfwiw: I think annotations are easier to read than Preconditions, but I see we use both, so I'm not advocating for one way or another, just curious what your thoughts are", "url": "https://github.com/apache/druid/pull/9892#discussion_r427700234", "createdAt": "2020-05-20T02:03:34Z", "author": {"login": "suneet-s"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/common/task/TaskResource.java", "diffHunk": "@@ -37,6 +37,7 @@ public TaskResource(\n   )\n   {\n     this.availabilityGroup = Preconditions.checkNotNull(availabilityGroup, \"availabilityGroup\");\n+    Preconditions.checkArgument(requiredCapacity > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0bd0514120084b437b936d0b2bc3040e47ecee1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcxNzIxNw==", "bodyText": "I saw both being use too. Personally, I do not have any strong preference. This was the first thing that came to mind.", "url": "https://github.com/apache/druid/pull/9892#discussion_r427717217", "createdAt": "2020-05-20T03:11:34Z", "author": {"login": "maytasm"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/common/task/TaskResource.java", "diffHunk": "@@ -37,6 +37,7 @@ public TaskResource(\n   )\n   {\n     this.availabilityGroup = Preconditions.checkNotNull(availabilityGroup, \"availabilityGroup\");\n+    Preconditions.checkArgument(requiredCapacity > 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcwMDIzNA=="}, "originalCommit": {"oid": "d0bd0514120084b437b936d0b2bc3040e47ecee1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcyODUwMA==", "bodyText": "AFAIT, we use those validation constraints for static configurations such as RemoteTaskRunnerConfig. JsonConfigProvider binds user configurations to some classes, and JsonConfigurator injects and validates their values. TaskResource is not a static configuration and we don't have such a validation framework for it as for static configurations. But I think it would be nice to have.", "url": "https://github.com/apache/druid/pull/9892#discussion_r427728500", "createdAt": "2020-05-20T04:02:20Z", "author": {"login": "jihoonson"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/common/task/TaskResource.java", "diffHunk": "@@ -37,6 +37,7 @@ public TaskResource(\n   )\n   {\n     this.availabilityGroup = Preconditions.checkNotNull(availabilityGroup, \"availabilityGroup\");\n+    Preconditions.checkArgument(requiredCapacity > 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcwMDIzNA=="}, "originalCommit": {"oid": "d0bd0514120084b437b936d0b2bc3040e47ecee1"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2451, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}