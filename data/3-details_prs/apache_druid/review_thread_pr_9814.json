{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNjY4MTA4", "number": 9814, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMToxMzoxNFrOD5oszg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNzoxNTo1OVrOD6ts-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzYyMjU0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/java/util/common/parsers/JSONPathSpec.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMToxMzoxNFrOGRBCew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMToxMzoxNFrOGRBCew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5NTk5NQ==", "bodyText": "This property is used only in JSONFlattenMaker while this class is used by all nested formats. It would be better to have it in JsonInputFormat and JSONParseSpec instead.", "url": "https://github.com/apache/druid/pull/9814#discussion_r420495995", "createdAt": "2020-05-06T01:13:14Z", "author": {"login": "jihoonson"}, "path": "core/src/main/java/org/apache/druid/java/util/common/parsers/JSONPathSpec.java", "diffHunk": "@@ -28,19 +28,23 @@\n \n public class JSONPathSpec\n {\n-  public static final JSONPathSpec DEFAULT = new JSONPathSpec(null, null);\n+  public static final JSONPathSpec DEFAULT = new JSONPathSpec(null, null, null);\n \n   private final boolean useFieldDiscovery;\n   private final List<JSONPathFieldSpec> fields;\n+  private final boolean keepNullColumns;\n \n   @JsonCreator\n   public JSONPathSpec(\n       @JsonProperty(\"useFieldDiscovery\") Boolean useFieldDiscovery,\n-      @JsonProperty(\"fields\") List<JSONPathFieldSpec> fields\n+      @JsonProperty(\"fields\") List<JSONPathFieldSpec> fields,\n+      @JsonProperty(\"keepNullColumns\") Boolean keepNullColumns", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzYyNTUwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/java/util/common/parsers/JSONFlattenerMaker.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMToxNDo1MVrOGRBEHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMDo1NzoyN1rOGSVVEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5NjQxNA==", "bodyText": "I'm wondering why JSONFlattenMaker filters nulls out even though other FlattenMaker implementations don't. We should probably make the behavior consistent, but it should be done in a separate PR.", "url": "https://github.com/apache/druid/pull/9814#discussion_r420496414", "createdAt": "2020-05-06T01:14:51Z", "author": {"login": "jihoonson"}, "path": "core/src/main/java/org/apache/druid/java/util/common/parsers/JSONFlattenerMaker.java", "diffHunk": "@@ -53,16 +53,23 @@\n                    .options(EnumSet.of(Option.SUPPRESS_EXCEPTIONS))\n                    .build();\n \n+  private final boolean keepNullValues;\n+\n   private final CharsetEncoder enc = StandardCharsets.UTF_8.newEncoder();\n \n+  public JSONFlattenerMaker(boolean keepNullValues)\n+  {\n+    this.keepNullValues = keepNullValues;\n+  }\n+\n   @Override\n   public Iterable<String> discoverRootFields(final JsonNode obj)\n   {\n     return FluentIterable.from(() -> obj.fields())\n                          .filter(\n                              entry -> {\n                                final JsonNode val = entry.getValue();\n-                               return !(val.isObject() || val.isNull() || (val.isArray() && !isFlatList(val)));\n+                               return !(val.isObject() || (!keepNullValues && val.isNull()) || (val.isArray() && !isFlatList(val)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5NzQ3OA==", "bodyText": "This comment is not a blocker for this PR, but more like a note.", "url": "https://github.com/apache/druid/pull/9814#discussion_r420497478", "createdAt": "2020-05-06T01:19:21Z", "author": {"login": "jihoonson"}, "path": "core/src/main/java/org/apache/druid/java/util/common/parsers/JSONFlattenerMaker.java", "diffHunk": "@@ -53,16 +53,23 @@\n                    .options(EnumSet.of(Option.SUPPRESS_EXCEPTIONS))\n                    .build();\n \n+  private final boolean keepNullValues;\n+\n   private final CharsetEncoder enc = StandardCharsets.UTF_8.newEncoder();\n \n+  public JSONFlattenerMaker(boolean keepNullValues)\n+  {\n+    this.keepNullValues = keepNullValues;\n+  }\n+\n   @Override\n   public Iterable<String> discoverRootFields(final JsonNode obj)\n   {\n     return FluentIterable.from(() -> obj.fields())\n                          .filter(\n                              entry -> {\n                                final JsonNode val = entry.getValue();\n-                               return !(val.isObject() || val.isNull() || (val.isArray() && !isFlatList(val)));\n+                               return !(val.isObject() || (!keepNullValues && val.isNull()) || (val.isArray() && !isFlatList(val)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5NjQxNA=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg3NzAxMQ==", "bodyText": "Can you add a comment here on what this is trying to do - I spent a few minutes trying to make sure I understood it right, also is there a unit test that covers this condition?", "url": "https://github.com/apache/druid/pull/9814#discussion_r421877011", "createdAt": "2020-05-08T00:57:27Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/java/util/common/parsers/JSONFlattenerMaker.java", "diffHunk": "@@ -53,16 +53,23 @@\n                    .options(EnumSet.of(Option.SUPPRESS_EXCEPTIONS))\n                    .build();\n \n+  private final boolean keepNullValues;\n+\n   private final CharsetEncoder enc = StandardCharsets.UTF_8.newEncoder();\n \n+  public JSONFlattenerMaker(boolean keepNullValues)\n+  {\n+    this.keepNullValues = keepNullValues;\n+  }\n+\n   @Override\n   public Iterable<String> discoverRootFields(final JsonNode obj)\n   {\n     return FluentIterable.from(() -> obj.fields())\n                          .filter(\n                              entry -> {\n                                final JsonNode val = entry.getValue();\n-                               return !(val.isObject() || val.isNull() || (val.isArray() && !isFlatList(val)));\n+                               return !(val.isObject() || (!keepNullValues && val.isNull()) || (val.isArray() && !isFlatList(val)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5NjQxNA=="}, "originalCommit": null, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzYyODE2OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/druid/data/input/impl/JsonReaderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMToxNjoyOVrOGRBFmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMToxNjoyOVrOGRBFmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5Njc5NA==", "bodyText": "nit: can be Assert.assertTrue(row.getDimension(\"bar\").isEmpty());", "url": "https://github.com/apache/druid/pull/9814#discussion_r420496794", "createdAt": "2020-05-06T01:16:29Z", "author": {"login": "jihoonson"}, "path": "core/src/test/java/org/apache/druid/data/input/impl/JsonReaderTest.java", "diffHunk": "@@ -132,4 +135,45 @@ public void testParseRowWithConditional() throws IOException\n       Assert.assertEquals(numExpectedIterations, numActualIterations);\n     }\n   }\n+\n+  @Test\n+  public void testParseRowKeepNullColumns() throws IOException\n+  {\n+    final JsonInputFormat format = new JsonInputFormat(\n+        new JSONPathSpec(\n+            true,\n+            ImmutableList.of(\n+                new JSONPathFieldSpec(JSONPathFieldType.PATH, \"path_omg\", \"$.o.mg\")\n+            ),\n+            true\n+        ),\n+        null\n+    );\n+\n+    final ByteEntity source = new ByteEntity(\n+        StringUtils.toUtf8(\"{\\\"timestamp\\\":\\\"2019-01-01\\\",\\\"bar\\\":null,\\\"foo\\\":\\\"x\\\",\\\"o\\\":{\\\"mg\\\":null}}\")\n+    );\n+\n+    final InputEntityReader reader = format.createReader(\n+        new InputRowSchema(\n+            new TimestampSpec(\"timestamp\", \"iso\", null),\n+            new DimensionsSpec(DimensionsSpec.getDefaultSchemas(Collections.emptyList())),\n+            Collections.emptyList()\n+        ),\n+        source,\n+        null\n+    );\n+    final int numExpectedIterations = 1;\n+    try (CloseableIterator<InputRow> iterator = reader.read()) {\n+      int numActualIterations = 0;\n+      while (iterator.hasNext()) {\n+        final InputRow row = iterator.next();\n+        Assert.assertEquals(Arrays.asList(\"path_omg\", \"timestamp\", \"bar\", \"foo\"), row.getDimensions());\n+        Assert.assertEquals(Collections.emptyList(), row.getDimension(\"bar\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzYyOTMwOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/druid/data/input/impl/JsonReaderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMToxNzowMVrOGRBGPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMToxNzowMVrOGRBGPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5Njk1Ng==", "bodyText": "You probably want to verify how many rows it has read?", "url": "https://github.com/apache/druid/pull/9814#discussion_r420496956", "createdAt": "2020-05-06T01:17:01Z", "author": {"login": "jihoonson"}, "path": "core/src/test/java/org/apache/druid/data/input/impl/JsonReaderTest.java", "diffHunk": "@@ -132,4 +135,45 @@ public void testParseRowWithConditional() throws IOException\n       Assert.assertEquals(numExpectedIterations, numActualIterations);\n     }\n   }\n+\n+  @Test\n+  public void testParseRowKeepNullColumns() throws IOException\n+  {\n+    final JsonInputFormat format = new JsonInputFormat(\n+        new JSONPathSpec(\n+            true,\n+            ImmutableList.of(\n+                new JSONPathFieldSpec(JSONPathFieldType.PATH, \"path_omg\", \"$.o.mg\")\n+            ),\n+            true\n+        ),\n+        null\n+    );\n+\n+    final ByteEntity source = new ByteEntity(\n+        StringUtils.toUtf8(\"{\\\"timestamp\\\":\\\"2019-01-01\\\",\\\"bar\\\":null,\\\"foo\\\":\\\"x\\\",\\\"o\\\":{\\\"mg\\\":null}}\")\n+    );\n+\n+    final InputEntityReader reader = format.createReader(\n+        new InputRowSchema(\n+            new TimestampSpec(\"timestamp\", \"iso\", null),\n+            new DimensionsSpec(DimensionsSpec.getDefaultSchemas(Collections.emptyList())),\n+            Collections.emptyList()\n+        ),\n+        source,\n+        null\n+    );\n+    final int numExpectedIterations = 1;\n+    try (CloseableIterator<InputRow> iterator = reader.read()) {\n+      int numActualIterations = 0;\n+      while (iterator.hasNext()) {\n+        final InputRow row = iterator.next();\n+        Assert.assertEquals(Arrays.asList(\"path_omg\", \"timestamp\", \"bar\", \"foo\"), row.getDimensions());\n+        Assert.assertEquals(Collections.emptyList(), row.getDimension(\"bar\"));\n+        Assert.assertEquals(\"x\", Iterables.getOnlyElement(row.getDimension(\"foo\")));\n+        Assert.assertEquals(Collections.emptyList(), row.getDimension(\"path_omg\"));\n+        numActualIterations++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTI0NjI2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/data/input/impl/JSONParseSpec.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODoxMDo1OVrOGSKYLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODoxMDo1OVrOGSKYLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5NzU4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private final Boolean keepNullColumns;\n          \n          \n            \n              private final boolean keepNullColumns;\n          \n      \n    \n    \n  \n\nThis way the class does not need to worry about nullability issues everywhere, it can just be handled in the constructor.", "url": "https://github.com/apache/druid/pull/9814#discussion_r421697583", "createdAt": "2020-05-07T18:10:59Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/data/input/impl/JSONParseSpec.java", "diffHunk": "@@ -37,46 +37,48 @@\n {\n   private final ObjectMapper objectMapper;\n   private final Map<String, Boolean> featureSpec;\n+  private final Boolean keepNullColumns;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bbc518f39263cd24653ec5a5c2470cefd4ff8d4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTI1MTcxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/data/input/impl/JSONParseSpec.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODoxMjozM1rOGSKbvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODoxMjozM1rOGSKbvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5ODQ5NQ==", "bodyText": "Missing corresponding update to hashCode. Can you add an EqualsVerifier test for this class please.", "url": "https://github.com/apache/druid/pull/9814#discussion_r421698495", "createdAt": "2020-05-07T18:12:33Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/data/input/impl/JSONParseSpec.java", "diffHunk": "@@ -98,7 +106,7 @@ public boolean equals(final Object o)\n       return false;\n     }\n     final JSONParseSpec that = (JSONParseSpec) o;\n-    return Objects.equals(featureSpec, that.featureSpec);\n+    return Objects.equals(featureSpec, that.featureSpec) && Objects.equals(keepNullColumns, that.keepNullColumns);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bbc518f39263cd24653ec5a5c2470cefd4ff8d4"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTI1NDQ5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/data/input/impl/JsonInputFormat.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODoxMzoyNFrOGSKdgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODoxMzoyNFrOGSKdgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5ODk0Nw==", "bodyText": "Same comments in this file as JsonParseSpec", "url": "https://github.com/apache/druid/pull/9814#discussion_r421698947", "createdAt": "2020-05-07T18:13:24Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/data/input/impl/JsonInputFormat.java", "diffHunk": "@@ -39,16 +39,19 @@\n {\n   private final Map<String, Boolean> featureSpec;\n   private final ObjectMapper objectMapper;\n+  private final boolean keepNullColumns;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bbc518f39263cd24653ec5a5c2470cefd4ff8d4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjAwNjI1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/data/input/impl/JSONParseSpec.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMTo1Njo1M1rOGSRwLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMTo1Njo1M1rOGSRwLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgxODQxMw==", "bodyText": "Can be boolean here too.", "url": "https://github.com/apache/druid/pull/9814#discussion_r421818413", "createdAt": "2020-05-07T21:56:53Z", "author": {"login": "jihoonson"}, "path": "core/src/main/java/org/apache/druid/data/input/impl/JSONParseSpec.java", "diffHunk": "@@ -85,6 +87,12 @@ public ParseSpec withDimensionsSpec(DimensionsSpec spec)\n     return featureSpec;\n   }\n \n+  @JsonProperty\n+  public Boolean getKeepNullColumns()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bbc518f39263cd24653ec5a5c2470cefd4ff8d4"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjQwNTEzOnYy", "diffSide": "RIGHT", "path": "web-console/src/utils/sampler.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMTowMTozMlrOGSVZVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNTozNToxMFrOGSZqcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg3ODEwMQ==", "bodyText": "Does this mean it's hard coded to true on the web console? Is there ever a case we want it to be false?", "url": "https://github.com/apache/druid/pull/9814#discussion_r421878101", "createdAt": "2020-05-08T01:01:32Z", "author": {"login": "suneet-s"}, "path": "web-console/src/utils/sampler.ts", "diffHunk": "@@ -198,6 +201,8 @@ function makeSamplerIoConfig(\n   } else if (specType === 'kinesis') {\n     ioConfig = deepSet(ioConfig, 'useEarliestSequenceNumber', sampleStrategy === 'start');\n   }\n+  // In order to prevent potential data loss null columns should be kept by the sampler and shown in the ingestion flow\n+  ioConfig = deepSet(ioConfig, 'inputFormat.keepNullColumns', true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bbc518f39263cd24653ec5a5c2470cefd4ff8d4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0ODAxNg==", "bodyText": "Yes and no. It is hard coded to true on the sampleSpec but not the spec being created by the web console that is ingested into druid. This changes the web console so that all the columns including those that are null for all the values in the sample are shown to the user and keep during the ingestion flow, and will end up on the task spec that is generated by the web console. This prevents columns that only have null values from being excluded from being removed by the web console if it has data that just doesn't appear in the sample. So we would never want keepNullColumns be false on the sampleSpec because it could cause data to be lost. (you can actually see this happening in the changes I made to the e2e test for the web console)", "url": "https://github.com/apache/druid/pull/9814#discussion_r421948016", "createdAt": "2020-05-08T05:35:10Z", "author": {"login": "mcbrewster"}, "path": "web-console/src/utils/sampler.ts", "diffHunk": "@@ -198,6 +201,8 @@ function makeSamplerIoConfig(\n   } else if (specType === 'kinesis') {\n     ioConfig = deepSet(ioConfig, 'useEarliestSequenceNumber', sampleStrategy === 'start');\n   }\n+  // In order to prevent potential data loss null columns should be kept by the sampler and shown in the ingestion flow\n+  ioConfig = deepSet(ioConfig, 'inputFormat.keepNullColumns', true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg3ODEwMQ=="}, "originalCommit": {"oid": "0bbc518f39263cd24653ec5a5c2470cefd4ff8d4"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjQxMTM5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/druid/data/input/impl/InputRowParserSerdeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMTowNTowM1rOGSVdAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMTowNTowM1rOGSVdAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg3OTA0MQ==", "bodyText": "nit: it would be easier to read if you made false a constant at the top of this test, like DO_NOT_KEEP_NULL_COLUMNS", "url": "https://github.com/apache/druid/pull/9814#discussion_r421879041", "createdAt": "2020-05-08T01:05:03Z", "author": {"login": "suneet-s"}, "path": "core/src/test/java/org/apache/druid/data/input/impl/InputRowParserSerdeTest.java", "diffHunk": "@@ -52,7 +52,8 @@ public void testStringInputRowParserSerde() throws Exception\n             new TimestampSpec(\"timestamp\", \"iso\", null),\n             new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"foo\", \"bar\")), null, null),\n             null,\n-            null\n+            null,\n+            false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bbc518f39263cd24653ec5a5c2470cefd4ff8d4"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjQxNzkxOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/druid/data/input/impl/JsonReaderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMTowODozNVrOGSVg3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMTowODozNVrOGSVg3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg4MDAyOA==", "bodyText": "Is there a test where keepNull is true, but there aren't any null columns?", "url": "https://github.com/apache/druid/pull/9814#discussion_r421880028", "createdAt": "2020-05-08T01:08:35Z", "author": {"login": "suneet-s"}, "path": "core/src/test/java/org/apache/druid/data/input/impl/JsonReaderTest.java", "diffHunk": "@@ -132,4 +135,46 @@ public void testParseRowWithConditional() throws IOException\n       Assert.assertEquals(numExpectedIterations, numActualIterations);\n     }\n   }\n+\n+  @Test\n+  public void testParseRowKeepNullColumns() throws IOException\n+  {\n+    final JsonInputFormat format = new JsonInputFormat(\n+        new JSONPathSpec(\n+            true,\n+            ImmutableList.of(\n+                new JSONPathFieldSpec(JSONPathFieldType.PATH, \"path_omg\", \"$.o.mg\")\n+            )\n+        ),\n+        null,\n+        true\n+    );\n+\n+    final ByteEntity source = new ByteEntity(\n+        StringUtils.toUtf8(\"{\\\"timestamp\\\":\\\"2019-01-01\\\",\\\"bar\\\":null,\\\"foo\\\":\\\"x\\\",\\\"o\\\":{\\\"mg\\\":null}}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bbc518f39263cd24653ec5a5c2470cefd4ff8d4"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjQyNDU2OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/druid/segment/realtime/plumber/RealtimePlumberSchoolTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMToxMTo1MVrOGSVknQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMToxMTo1MVrOGSVknQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg4MDk4OQ==", "bodyText": "WOW - I didn't realize we used so many constructors! Maybe one day, I'll get around to using mockito to make this refactoring less painful in the future.", "url": "https://github.com/apache/druid/pull/9814#discussion_r421880989", "createdAt": "2020-05-08T01:11:51Z", "author": {"login": "suneet-s"}, "path": "server/src/test/java/org/apache/druid/segment/realtime/plumber/RealtimePlumberSchoolTest.java", "diffHunk": "@@ -161,6 +162,7 @@ public void setUp() throws Exception\n                     new TimestampSpec(\"timestamp\", \"auto\", null),\n                     new DimensionsSpec(null, null, null),\n                     null,\n+                    null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bbc518f39263cd24653ec5a5c2470cefd4ff8d4"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyODkyNzk1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/java/util/common/parsers/JSONFlattenerMaker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNzoxNTo1OVrOGSs-tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMTo1OTozNlrOGS0-Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI2NDUwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                           // If the keepNullValues is set on the JSONParseSpec then null values should not be filtered out\n          \n          \n            \n                                           // Root fields are any keys whose values are not one of\n          \n          \n            \n                                           // 1. an object\n          \n          \n            \n                                           // 2. null values and the spec asks to not preserve null values\n          \n          \n            \n                                           // 3. a non flat list json array\n          \n      \n    \n    \n  \n\nI meant something like spelling out how we discover root fields. There are a bunch of nots and ands and ors that I can't come up with a statement that clearly defines what this is trying to do.\nThis really isn't part of your change, but if you figured out what this is actually doing, you'll help all future devs with a comment", "url": "https://github.com/apache/druid/pull/9814#discussion_r422264503", "createdAt": "2020-05-08T17:15:59Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/java/util/common/parsers/JSONFlattenerMaker.java", "diffHunk": "@@ -53,16 +53,24 @@\n                    .options(EnumSet.of(Option.SUPPRESS_EXCEPTIONS))\n                    .build();\n \n+  private final boolean keepNullValues;\n+\n   private final CharsetEncoder enc = StandardCharsets.UTF_8.newEncoder();\n \n+  public JSONFlattenerMaker(boolean keepNullValues)\n+  {\n+    this.keepNullValues = keepNullValues;\n+  }\n+\n   @Override\n   public Iterable<String> discoverRootFields(final JsonNode obj)\n   {\n     return FluentIterable.from(() -> obj.fields())\n                          .filter(\n                              entry -> {\n                                final JsonNode val = entry.getValue();\n-                               return !(val.isObject() || val.isNull() || (val.isArray() && !isFlatList(val)));\n+                               // If the keepNullValues is set on the JSONParseSpec then null values should not be filtered out", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea0c46ef6bc2358e55f65ffc2f9f93da7ecbf31"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5NTQzOA==", "bodyText": "This is defined in the contract of FlattenerMaker.discoverRootFields(). Maybe the javadoc of this method could say {@inheritDoc} instead of having a duplicate description. I think this is optional.", "url": "https://github.com/apache/druid/pull/9814#discussion_r422395438", "createdAt": "2020-05-08T21:59:36Z", "author": {"login": "jihoonson"}, "path": "core/src/main/java/org/apache/druid/java/util/common/parsers/JSONFlattenerMaker.java", "diffHunk": "@@ -53,16 +53,24 @@\n                    .options(EnumSet.of(Option.SUPPRESS_EXCEPTIONS))\n                    .build();\n \n+  private final boolean keepNullValues;\n+\n   private final CharsetEncoder enc = StandardCharsets.UTF_8.newEncoder();\n \n+  public JSONFlattenerMaker(boolean keepNullValues)\n+  {\n+    this.keepNullValues = keepNullValues;\n+  }\n+\n   @Override\n   public Iterable<String> discoverRootFields(final JsonNode obj)\n   {\n     return FluentIterable.from(() -> obj.fields())\n                          .filter(\n                              entry -> {\n                                final JsonNode val = entry.getValue();\n-                               return !(val.isObject() || val.isNull() || (val.isArray() && !isFlatList(val)));\n+                               // If the keepNullValues is set on the JSONParseSpec then null values should not be filtered out", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI2NDUwMw=="}, "originalCommit": {"oid": "aea0c46ef6bc2358e55f65ffc2f9f93da7ecbf31"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2414, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}