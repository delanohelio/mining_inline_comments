{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNjY4MTA4", "number": 9814, "title": "add flag to flattenSpec to keep null columns", "bodyText": "Fixes #9658.\n\nDescription\nWhen The JsonReader flattens input it filters out key value pairs with null values, which prevents any all null column from being included as columns if no dimension spec is provided. This is a problem in the sampler because often all the entries in the sample will be null, meaning columns will be lost after flattening and wont appear in the web-console. The goal of this pr is to prevent the JSONFlattenMaker from removing null values from the document by adding a boolean flag keepNullColumns to the flattenSpec. This can then be added to the sampleSpec in the web console so that all null columns still appear in the ingestion flow.\nI added the Json property keepNullColumns to JsonPathSpec (this is the flattenSpec), as well as the method isKeepNullColumns() which returns the values.  KeepNullColumns defaults to false if not provided, meaning there should be no change to the current function unless the user explicitly sets it to true.\nThe JSONFlattenMaker class was modified to have a constructor that accepts keepNullColumns as a boolean value and is use to prevent discoverRootFields from filtering out null values.\nJSONReader passes keepNullColumns to the constructor of JSONFlattenMaker using the isKeepNullColumns() method.\nA test was added to JSONReaderTest to check that all columns including columns with null values are present as dimensions as well as flattening still works.\nLiterally every other file is just adding the value false to JSONPathSpecs in tests\nThis PR has:\n\n[x ] been self-reviewed.\n[x ] added unit tests or modified existing tests to cover new code paths.\n been tested in a test Druid cluster.\n\nKey changed/added classes in this PR\n\nJsonReader\nJSONFlattenMaker\nJSONPathSpec", "createdAt": "2020-05-03T21:17:08Z", "url": "https://github.com/apache/druid/pull/9814", "merged": true, "mergeCommit": {"oid": "28be107a1c18ef1fd9fd268c8b04e232efb63695"}, "closed": true, "closedAt": "2020-05-09T04:53:40Z", "author": {"login": "mcbrewster"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABceeSSMAFqTQwNjI1MzY0Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcfZQrtgFqTQwODU1MTY4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MjUzNjQz", "url": "https://github.com/apache/druid/pull/9814#pullrequestreview-406253643", "createdAt": "2020-05-06T01:13:14Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMToxMzoxNFrOGRBCew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMToxOToyMVrOGRBIRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5NTk5NQ==", "bodyText": "This property is used only in JSONFlattenMaker while this class is used by all nested formats. It would be better to have it in JsonInputFormat and JSONParseSpec instead.", "url": "https://github.com/apache/druid/pull/9814#discussion_r420495995", "createdAt": "2020-05-06T01:13:14Z", "author": {"login": "jihoonson"}, "path": "core/src/main/java/org/apache/druid/java/util/common/parsers/JSONPathSpec.java", "diffHunk": "@@ -28,19 +28,23 @@\n \n public class JSONPathSpec\n {\n-  public static final JSONPathSpec DEFAULT = new JSONPathSpec(null, null);\n+  public static final JSONPathSpec DEFAULT = new JSONPathSpec(null, null, null);\n \n   private final boolean useFieldDiscovery;\n   private final List<JSONPathFieldSpec> fields;\n+  private final boolean keepNullColumns;\n \n   @JsonCreator\n   public JSONPathSpec(\n       @JsonProperty(\"useFieldDiscovery\") Boolean useFieldDiscovery,\n-      @JsonProperty(\"fields\") List<JSONPathFieldSpec> fields\n+      @JsonProperty(\"fields\") List<JSONPathFieldSpec> fields,\n+      @JsonProperty(\"keepNullColumns\") Boolean keepNullColumns", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5NjQxNA==", "bodyText": "I'm wondering why JSONFlattenMaker filters nulls out even though other FlattenMaker implementations don't. We should probably make the behavior consistent, but it should be done in a separate PR.", "url": "https://github.com/apache/druid/pull/9814#discussion_r420496414", "createdAt": "2020-05-06T01:14:51Z", "author": {"login": "jihoonson"}, "path": "core/src/main/java/org/apache/druid/java/util/common/parsers/JSONFlattenerMaker.java", "diffHunk": "@@ -53,16 +53,23 @@\n                    .options(EnumSet.of(Option.SUPPRESS_EXCEPTIONS))\n                    .build();\n \n+  private final boolean keepNullValues;\n+\n   private final CharsetEncoder enc = StandardCharsets.UTF_8.newEncoder();\n \n+  public JSONFlattenerMaker(boolean keepNullValues)\n+  {\n+    this.keepNullValues = keepNullValues;\n+  }\n+\n   @Override\n   public Iterable<String> discoverRootFields(final JsonNode obj)\n   {\n     return FluentIterable.from(() -> obj.fields())\n                          .filter(\n                              entry -> {\n                                final JsonNode val = entry.getValue();\n-                               return !(val.isObject() || val.isNull() || (val.isArray() && !isFlatList(val)));\n+                               return !(val.isObject() || (!keepNullValues && val.isNull()) || (val.isArray() && !isFlatList(val)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5Njc5NA==", "bodyText": "nit: can be Assert.assertTrue(row.getDimension(\"bar\").isEmpty());", "url": "https://github.com/apache/druid/pull/9814#discussion_r420496794", "createdAt": "2020-05-06T01:16:29Z", "author": {"login": "jihoonson"}, "path": "core/src/test/java/org/apache/druid/data/input/impl/JsonReaderTest.java", "diffHunk": "@@ -132,4 +135,45 @@ public void testParseRowWithConditional() throws IOException\n       Assert.assertEquals(numExpectedIterations, numActualIterations);\n     }\n   }\n+\n+  @Test\n+  public void testParseRowKeepNullColumns() throws IOException\n+  {\n+    final JsonInputFormat format = new JsonInputFormat(\n+        new JSONPathSpec(\n+            true,\n+            ImmutableList.of(\n+                new JSONPathFieldSpec(JSONPathFieldType.PATH, \"path_omg\", \"$.o.mg\")\n+            ),\n+            true\n+        ),\n+        null\n+    );\n+\n+    final ByteEntity source = new ByteEntity(\n+        StringUtils.toUtf8(\"{\\\"timestamp\\\":\\\"2019-01-01\\\",\\\"bar\\\":null,\\\"foo\\\":\\\"x\\\",\\\"o\\\":{\\\"mg\\\":null}}\")\n+    );\n+\n+    final InputEntityReader reader = format.createReader(\n+        new InputRowSchema(\n+            new TimestampSpec(\"timestamp\", \"iso\", null),\n+            new DimensionsSpec(DimensionsSpec.getDefaultSchemas(Collections.emptyList())),\n+            Collections.emptyList()\n+        ),\n+        source,\n+        null\n+    );\n+    final int numExpectedIterations = 1;\n+    try (CloseableIterator<InputRow> iterator = reader.read()) {\n+      int numActualIterations = 0;\n+      while (iterator.hasNext()) {\n+        final InputRow row = iterator.next();\n+        Assert.assertEquals(Arrays.asList(\"path_omg\", \"timestamp\", \"bar\", \"foo\"), row.getDimensions());\n+        Assert.assertEquals(Collections.emptyList(), row.getDimension(\"bar\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5Njk1Ng==", "bodyText": "You probably want to verify how many rows it has read?", "url": "https://github.com/apache/druid/pull/9814#discussion_r420496956", "createdAt": "2020-05-06T01:17:01Z", "author": {"login": "jihoonson"}, "path": "core/src/test/java/org/apache/druid/data/input/impl/JsonReaderTest.java", "diffHunk": "@@ -132,4 +135,45 @@ public void testParseRowWithConditional() throws IOException\n       Assert.assertEquals(numExpectedIterations, numActualIterations);\n     }\n   }\n+\n+  @Test\n+  public void testParseRowKeepNullColumns() throws IOException\n+  {\n+    final JsonInputFormat format = new JsonInputFormat(\n+        new JSONPathSpec(\n+            true,\n+            ImmutableList.of(\n+                new JSONPathFieldSpec(JSONPathFieldType.PATH, \"path_omg\", \"$.o.mg\")\n+            ),\n+            true\n+        ),\n+        null\n+    );\n+\n+    final ByteEntity source = new ByteEntity(\n+        StringUtils.toUtf8(\"{\\\"timestamp\\\":\\\"2019-01-01\\\",\\\"bar\\\":null,\\\"foo\\\":\\\"x\\\",\\\"o\\\":{\\\"mg\\\":null}}\")\n+    );\n+\n+    final InputEntityReader reader = format.createReader(\n+        new InputRowSchema(\n+            new TimestampSpec(\"timestamp\", \"iso\", null),\n+            new DimensionsSpec(DimensionsSpec.getDefaultSchemas(Collections.emptyList())),\n+            Collections.emptyList()\n+        ),\n+        source,\n+        null\n+    );\n+    final int numExpectedIterations = 1;\n+    try (CloseableIterator<InputRow> iterator = reader.read()) {\n+      int numActualIterations = 0;\n+      while (iterator.hasNext()) {\n+        final InputRow row = iterator.next();\n+        Assert.assertEquals(Arrays.asList(\"path_omg\", \"timestamp\", \"bar\", \"foo\"), row.getDimensions());\n+        Assert.assertEquals(Collections.emptyList(), row.getDimension(\"bar\"));\n+        Assert.assertEquals(\"x\", Iterables.getOnlyElement(row.getDimension(\"foo\")));\n+        Assert.assertEquals(Collections.emptyList(), row.getDimension(\"path_omg\"));\n+        numActualIterations++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5NzQ3OA==", "bodyText": "This comment is not a blocker for this PR, but more like a note.", "url": "https://github.com/apache/druid/pull/9814#discussion_r420497478", "createdAt": "2020-05-06T01:19:21Z", "author": {"login": "jihoonson"}, "path": "core/src/main/java/org/apache/druid/java/util/common/parsers/JSONFlattenerMaker.java", "diffHunk": "@@ -53,16 +53,23 @@\n                    .options(EnumSet.of(Option.SUPPRESS_EXCEPTIONS))\n                    .build();\n \n+  private final boolean keepNullValues;\n+\n   private final CharsetEncoder enc = StandardCharsets.UTF_8.newEncoder();\n \n+  public JSONFlattenerMaker(boolean keepNullValues)\n+  {\n+    this.keepNullValues = keepNullValues;\n+  }\n+\n   @Override\n   public Iterable<String> discoverRootFields(final JsonNode obj)\n   {\n     return FluentIterable.from(() -> obj.fields())\n                          .filter(\n                              entry -> {\n                                final JsonNode val = entry.getValue();\n-                               return !(val.isObject() || val.isNull() || (val.isArray() && !isFlatList(val)));\n+                               return !(val.isObject() || (!keepNullValues && val.isNull()) || (val.isArray() && !isFlatList(val)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5NjQxNA=="}, "originalCommit": null, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b3553e27afa8e87b2edf1ae5ea1514a970bfade", "author": {"user": {"login": "mcbrewster", "name": null}}, "url": "https://github.com/apache/druid/commit/0b3553e27afa8e87b2edf1ae5ea1514a970bfade", "committedDate": "2020-05-06T20:02:07Z", "message": "add flag to flattenSpec to keep null columns"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1645ab0c1c36741100b0ee9eb09c51ee7f0f93ea", "author": {"user": {"login": "mcbrewster", "name": null}}, "url": "https://github.com/apache/druid/commit/1645ab0c1c36741100b0ee9eb09c51ee7f0f93ea", "committedDate": "2020-05-06T20:02:07Z", "message": "remove changes to inputFormat interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d76704bfc2d7caa851173ec5bf5b488cc4b1308c", "author": {"user": {"login": "mcbrewster", "name": null}}, "url": "https://github.com/apache/druid/commit/d76704bfc2d7caa851173ec5bf5b488cc4b1308c", "committedDate": "2020-05-06T20:02:07Z", "message": "add comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1b6e974fa8e5c4ab7dd5eaae000a22ce6882b45", "author": {"user": {"login": "mcbrewster", "name": null}}, "url": "https://github.com/apache/druid/commit/e1b6e974fa8e5c4ab7dd5eaae000a22ce6882b45", "committedDate": "2020-05-06T20:02:07Z", "message": "change comment message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a023c695adb1ea5dd3f444ac39deb0fe8b1201f0", "author": {"user": {"login": "mcbrewster", "name": null}}, "url": "https://github.com/apache/druid/commit/a023c695adb1ea5dd3f444ac39deb0fe8b1201f0", "committedDate": "2020-05-06T20:02:07Z", "message": "update web console e2e test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0557cebd8dfbbccfbe83a2f6d191b69adbaa047", "author": {"user": {"login": "mcbrewster", "name": null}}, "url": "https://github.com/apache/druid/commit/b0557cebd8dfbbccfbe83a2f6d191b69adbaa047", "committedDate": "2020-05-06T20:05:22Z", "message": "move keepNullColmns to JSONParseSpec"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25cb492d1bb1f0276356f455cfcb32ad0406ade7", "author": {"user": {"login": "mcbrewster", "name": null}}, "url": "https://github.com/apache/druid/commit/25cb492d1bb1f0276356f455cfcb32ad0406ade7", "committedDate": "2020-05-06T20:38:20Z", "message": "fix merge conflicts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "25cb492d1bb1f0276356f455cfcb32ad0406ade7", "author": {"user": {"login": "mcbrewster", "name": null}}, "url": "https://github.com/apache/druid/commit/25cb492d1bb1f0276356f455cfcb32ad0406ade7", "committedDate": "2020-05-06T20:38:20Z", "message": "fix merge conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8420c7e95322785ab6bd42d52b6351cd73f460a1", "author": {"user": {"login": "mcbrewster", "name": null}}, "url": "https://github.com/apache/druid/commit/8420c7e95322785ab6bd42d52b6351cd73f460a1", "committedDate": "2020-05-06T21:42:06Z", "message": "fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f830b796e2df03a730ffc2b057749a931547439", "author": {"user": {"login": "mcbrewster", "name": null}}, "url": "https://github.com/apache/druid/commit/6f830b796e2df03a730ffc2b057749a931547439", "committedDate": "2020-05-06T22:52:38Z", "message": "set keepNullColumns to false by default"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bbc518f39263cd24653ec5a5c2470cefd4ff8d4", "author": {"user": {"login": "mcbrewster", "name": null}}, "url": "https://github.com/apache/druid/commit/0bbc518f39263cd24653ec5a5c2470cefd4ff8d4", "committedDate": "2020-05-07T00:05:55Z", "message": "fix lgtm"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NzE2ODgz", "url": "https://github.com/apache/druid/pull/9814#pullrequestreview-407716883", "createdAt": "2020-05-07T18:10:59Z", "commit": {"oid": "0bbc518f39263cd24653ec5a5c2470cefd4ff8d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODoxMDo1OVrOGSKYLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODoxMDo1OVrOGSKYLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5NzU4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private final Boolean keepNullColumns;\n          \n          \n            \n              private final boolean keepNullColumns;\n          \n      \n    \n    \n  \n\nThis way the class does not need to worry about nullability issues everywhere, it can just be handled in the constructor.", "url": "https://github.com/apache/druid/pull/9814#discussion_r421697583", "createdAt": "2020-05-07T18:10:59Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/data/input/impl/JSONParseSpec.java", "diffHunk": "@@ -37,46 +37,48 @@\n {\n   private final ObjectMapper objectMapper;\n   private final Map<String, Boolean> featureSpec;\n+  private final Boolean keepNullColumns;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bbc518f39263cd24653ec5a5c2470cefd4ff8d4"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NzE4MDIw", "url": "https://github.com/apache/druid/pull/9814#pullrequestreview-407718020", "createdAt": "2020-05-07T18:12:33Z", "commit": {"oid": "0bbc518f39263cd24653ec5a5c2470cefd4ff8d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODoxMjozM1rOGSKbvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODoxMjozM1rOGSKbvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5ODQ5NQ==", "bodyText": "Missing corresponding update to hashCode. Can you add an EqualsVerifier test for this class please.", "url": "https://github.com/apache/druid/pull/9814#discussion_r421698495", "createdAt": "2020-05-07T18:12:33Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/data/input/impl/JSONParseSpec.java", "diffHunk": "@@ -98,7 +106,7 @@ public boolean equals(final Object o)\n       return false;\n     }\n     final JSONParseSpec that = (JSONParseSpec) o;\n-    return Objects.equals(featureSpec, that.featureSpec);\n+    return Objects.equals(featureSpec, that.featureSpec) && Objects.equals(keepNullColumns, that.keepNullColumns);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bbc518f39263cd24653ec5a5c2470cefd4ff8d4"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3ODY2MDgz", "url": "https://github.com/apache/druid/pull/9814#pullrequestreview-407866083", "createdAt": "2020-05-07T21:56:53Z", "commit": {"oid": "0bbc518f39263cd24653ec5a5c2470cefd4ff8d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMTo1Njo1M1rOGSRwLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMTo1Njo1M1rOGSRwLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgxODQxMw==", "bodyText": "Can be boolean here too.", "url": "https://github.com/apache/druid/pull/9814#discussion_r421818413", "createdAt": "2020-05-07T21:56:53Z", "author": {"login": "jihoonson"}, "path": "core/src/main/java/org/apache/druid/data/input/impl/JSONParseSpec.java", "diffHunk": "@@ -85,6 +87,12 @@ public ParseSpec withDimensionsSpec(DimensionsSpec spec)\n     return featureSpec;\n   }\n \n+  @JsonProperty\n+  public Boolean getKeepNullColumns()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bbc518f39263cd24653ec5a5c2470cefd4ff8d4"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NzE4NTgx", "url": "https://github.com/apache/druid/pull/9814#pullrequestreview-407718581", "createdAt": "2020-05-07T18:13:24Z", "commit": {"oid": "0bbc518f39263cd24653ec5a5c2470cefd4ff8d4"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODoxMzoyNFrOGSKdgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMToxMTo1MVrOGSVknQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5ODk0Nw==", "bodyText": "Same comments in this file as JsonParseSpec", "url": "https://github.com/apache/druid/pull/9814#discussion_r421698947", "createdAt": "2020-05-07T18:13:24Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/data/input/impl/JsonInputFormat.java", "diffHunk": "@@ -39,16 +39,19 @@\n {\n   private final Map<String, Boolean> featureSpec;\n   private final ObjectMapper objectMapper;\n+  private final boolean keepNullColumns;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bbc518f39263cd24653ec5a5c2470cefd4ff8d4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg3NzAxMQ==", "bodyText": "Can you add a comment here on what this is trying to do - I spent a few minutes trying to make sure I understood it right, also is there a unit test that covers this condition?", "url": "https://github.com/apache/druid/pull/9814#discussion_r421877011", "createdAt": "2020-05-08T00:57:27Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/java/util/common/parsers/JSONFlattenerMaker.java", "diffHunk": "@@ -53,16 +53,23 @@\n                    .options(EnumSet.of(Option.SUPPRESS_EXCEPTIONS))\n                    .build();\n \n+  private final boolean keepNullValues;\n+\n   private final CharsetEncoder enc = StandardCharsets.UTF_8.newEncoder();\n \n+  public JSONFlattenerMaker(boolean keepNullValues)\n+  {\n+    this.keepNullValues = keepNullValues;\n+  }\n+\n   @Override\n   public Iterable<String> discoverRootFields(final JsonNode obj)\n   {\n     return FluentIterable.from(() -> obj.fields())\n                          .filter(\n                              entry -> {\n                                final JsonNode val = entry.getValue();\n-                               return !(val.isObject() || val.isNull() || (val.isArray() && !isFlatList(val)));\n+                               return !(val.isObject() || (!keepNullValues && val.isNull()) || (val.isArray() && !isFlatList(val)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5NjQxNA=="}, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg3ODEwMQ==", "bodyText": "Does this mean it's hard coded to true on the web console? Is there ever a case we want it to be false?", "url": "https://github.com/apache/druid/pull/9814#discussion_r421878101", "createdAt": "2020-05-08T01:01:32Z", "author": {"login": "suneet-s"}, "path": "web-console/src/utils/sampler.ts", "diffHunk": "@@ -198,6 +201,8 @@ function makeSamplerIoConfig(\n   } else if (specType === 'kinesis') {\n     ioConfig = deepSet(ioConfig, 'useEarliestSequenceNumber', sampleStrategy === 'start');\n   }\n+  // In order to prevent potential data loss null columns should be kept by the sampler and shown in the ingestion flow\n+  ioConfig = deepSet(ioConfig, 'inputFormat.keepNullColumns', true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bbc518f39263cd24653ec5a5c2470cefd4ff8d4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg3OTA0MQ==", "bodyText": "nit: it would be easier to read if you made false a constant at the top of this test, like DO_NOT_KEEP_NULL_COLUMNS", "url": "https://github.com/apache/druid/pull/9814#discussion_r421879041", "createdAt": "2020-05-08T01:05:03Z", "author": {"login": "suneet-s"}, "path": "core/src/test/java/org/apache/druid/data/input/impl/InputRowParserSerdeTest.java", "diffHunk": "@@ -52,7 +52,8 @@ public void testStringInputRowParserSerde() throws Exception\n             new TimestampSpec(\"timestamp\", \"iso\", null),\n             new DimensionsSpec(DimensionsSpec.getDefaultSchemas(ImmutableList.of(\"foo\", \"bar\")), null, null),\n             null,\n-            null\n+            null,\n+            false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bbc518f39263cd24653ec5a5c2470cefd4ff8d4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg4MDAyOA==", "bodyText": "Is there a test where keepNull is true, but there aren't any null columns?", "url": "https://github.com/apache/druid/pull/9814#discussion_r421880028", "createdAt": "2020-05-08T01:08:35Z", "author": {"login": "suneet-s"}, "path": "core/src/test/java/org/apache/druid/data/input/impl/JsonReaderTest.java", "diffHunk": "@@ -132,4 +135,46 @@ public void testParseRowWithConditional() throws IOException\n       Assert.assertEquals(numExpectedIterations, numActualIterations);\n     }\n   }\n+\n+  @Test\n+  public void testParseRowKeepNullColumns() throws IOException\n+  {\n+    final JsonInputFormat format = new JsonInputFormat(\n+        new JSONPathSpec(\n+            true,\n+            ImmutableList.of(\n+                new JSONPathFieldSpec(JSONPathFieldType.PATH, \"path_omg\", \"$.o.mg\")\n+            )\n+        ),\n+        null,\n+        true\n+    );\n+\n+    final ByteEntity source = new ByteEntity(\n+        StringUtils.toUtf8(\"{\\\"timestamp\\\":\\\"2019-01-01\\\",\\\"bar\\\":null,\\\"foo\\\":\\\"x\\\",\\\"o\\\":{\\\"mg\\\":null}}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bbc518f39263cd24653ec5a5c2470cefd4ff8d4"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg4MDk4OQ==", "bodyText": "WOW - I didn't realize we used so many constructors! Maybe one day, I'll get around to using mockito to make this refactoring less painful in the future.", "url": "https://github.com/apache/druid/pull/9814#discussion_r421880989", "createdAt": "2020-05-08T01:11:51Z", "author": {"login": "suneet-s"}, "path": "server/src/test/java/org/apache/druid/segment/realtime/plumber/RealtimePlumberSchoolTest.java", "diffHunk": "@@ -161,6 +162,7 @@ public void setUp() throws Exception\n                     new TimestampSpec(\"timestamp\", \"auto\", null),\n                     new DimensionsSpec(null, null, null),\n                     null,\n+                    null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bbc518f39263cd24653ec5a5c2470cefd4ff8d4"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bb036d4091b9a677c592dd9be5258a98eb50a7e", "author": {"user": {"login": "mcbrewster", "name": null}}, "url": "https://github.com/apache/druid/commit/6bb036d4091b9a677c592dd9be5258a98eb50a7e", "committedDate": "2020-05-08T06:50:39Z", "message": "change Boolean to boolean, add keepNullColumns to hash, add tests for keepKeepNullColumns false + true with no nuulul columns"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aea0c46ef6bc2358e55f65ffc2f9f93da7ecbf31", "author": {"user": {"login": "mcbrewster", "name": null}}, "url": "https://github.com/apache/druid/commit/aea0c46ef6bc2358e55f65ffc2f9f93da7ecbf31", "committedDate": "2020-05-08T16:26:06Z", "message": "Add equals verifier tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4Mzg5NzAw", "url": "https://github.com/apache/druid/pull/9814#pullrequestreview-408389700", "createdAt": "2020-05-08T17:15:59Z", "commit": {"oid": "aea0c46ef6bc2358e55f65ffc2f9f93da7ecbf31"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNzoxNTo1OVrOGSs-tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNzoxNTo1OVrOGSs-tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI2NDUwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                           // If the keepNullValues is set on the JSONParseSpec then null values should not be filtered out\n          \n          \n            \n                                           // Root fields are any keys whose values are not one of\n          \n          \n            \n                                           // 1. an object\n          \n          \n            \n                                           // 2. null values and the spec asks to not preserve null values\n          \n          \n            \n                                           // 3. a non flat list json array\n          \n      \n    \n    \n  \n\nI meant something like spelling out how we discover root fields. There are a bunch of nots and ands and ors that I can't come up with a statement that clearly defines what this is trying to do.\nThis really isn't part of your change, but if you figured out what this is actually doing, you'll help all future devs with a comment", "url": "https://github.com/apache/druid/pull/9814#discussion_r422264503", "createdAt": "2020-05-08T17:15:59Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/java/util/common/parsers/JSONFlattenerMaker.java", "diffHunk": "@@ -53,16 +53,24 @@\n                    .options(EnumSet.of(Option.SUPPRESS_EXCEPTIONS))\n                    .build();\n \n+  private final boolean keepNullValues;\n+\n   private final CharsetEncoder enc = StandardCharsets.UTF_8.newEncoder();\n \n+  public JSONFlattenerMaker(boolean keepNullValues)\n+  {\n+    this.keepNullValues = keepNullValues;\n+  }\n+\n   @Override\n   public Iterable<String> discoverRootFields(final JsonNode obj)\n   {\n     return FluentIterable.from(() -> obj.fields())\n                          .filter(\n                              entry -> {\n                                final JsonNode val = entry.getValue();\n-                               return !(val.isObject() || val.isNull() || (val.isArray() && !isFlatList(val)));\n+                               // If the keepNullValues is set on the JSONParseSpec then null values should not be filtered out", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aea0c46ef6bc2358e55f65ffc2f9f93da7ecbf31"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NDAxMzM2", "url": "https://github.com/apache/druid/pull/9814#pullrequestreview-408401336", "createdAt": "2020-05-08T17:34:39Z", "commit": {"oid": "aea0c46ef6bc2358e55f65ffc2f9f93da7ecbf31"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NTUxNjg2", "url": "https://github.com/apache/druid/pull/9814#pullrequestreview-408551686", "createdAt": "2020-05-08T21:59:36Z", "commit": {"oid": "aea0c46ef6bc2358e55f65ffc2f9f93da7ecbf31"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMTo1OTozNlrOGS0-Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMTo1OTozNlrOGS0-Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM5NTQzOA==", "bodyText": "This is defined in the contract of FlattenerMaker.discoverRootFields(). Maybe the javadoc of this method could say {@inheritDoc} instead of having a duplicate description. I think this is optional.", "url": "https://github.com/apache/druid/pull/9814#discussion_r422395438", "createdAt": "2020-05-08T21:59:36Z", "author": {"login": "jihoonson"}, "path": "core/src/main/java/org/apache/druid/java/util/common/parsers/JSONFlattenerMaker.java", "diffHunk": "@@ -53,16 +53,24 @@\n                    .options(EnumSet.of(Option.SUPPRESS_EXCEPTIONS))\n                    .build();\n \n+  private final boolean keepNullValues;\n+\n   private final CharsetEncoder enc = StandardCharsets.UTF_8.newEncoder();\n \n+  public JSONFlattenerMaker(boolean keepNullValues)\n+  {\n+    this.keepNullValues = keepNullValues;\n+  }\n+\n   @Override\n   public Iterable<String> discoverRootFields(final JsonNode obj)\n   {\n     return FluentIterable.from(() -> obj.fields())\n                          .filter(\n                              entry -> {\n                                final JsonNode val = entry.getValue();\n-                               return !(val.isObject() || val.isNull() || (val.isArray() && !isFlatList(val)));\n+                               // If the keepNullValues is set on the JSONParseSpec then null values should not be filtered out", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI2NDUwMw=="}, "originalCommit": {"oid": "aea0c46ef6bc2358e55f65ffc2f9f93da7ecbf31"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2287, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}