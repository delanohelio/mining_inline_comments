{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNjg2MDA2", "number": 10085, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzowNTo0N1rOEJNDQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxODoyMDowN1rOEJxrRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDg2NDY1OnYy", "diffSide": "RIGHT", "path": "docs/configuration/index.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzowNTo0N1rOGpoVBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMzoyOTo1M1rOGpxNJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMwNTU0Mw==", "bodyText": "\"HTTP\" should be capitalized when it appears in normal text like this.", "url": "https://github.com/apache/druid/pull/10085#discussion_r446305543", "createdAt": "2020-06-26T17:05:47Z", "author": {"login": "gianm"}, "path": "docs/configuration/index.md", "diffHunk": "@@ -1312,6 +1312,7 @@ Druid uses Jetty to serve HTTP requests.\n |`druid.server.http.maxQueryTimeout`|Maximum allowed value (in milliseconds) for `timeout` parameter. See [query-context](../querying/query-context.html) to know more about `timeout`. Query is rejected if the query context `timeout` is greater than this value. |Long.MAX_VALUE|\n |`druid.server.http.maxRequestHeaderSize`|Maximum size of a request header in bytes. Larger headers consume more memory and can make a server more vulnerable to denial of service attacks.|8 * 1024|\n |`druid.server.http.enableForwardedRequestCustomizer`|If enabled, adds Jetty ForwardedRequestCustomizer which reads X-Forwarded-* request headers to manipulate servlet request object when Druid is used behind a proxy.|false|\n+|`druid.server.http.allowedHttpMethods`|List of http methods allowed in addition to the ones needed by Druid. GET, PUT, POST, DELETE and OPTIONS are always allowed. `druid.auth.allowUnauthenticatedHttpOptions` can be used to disable the OPTIONS method.|[]|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01e2eff2cec4681d7ee741be6e400220c6a11af7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMwNjU5OQ==", "bodyText": "A couple things about the design of the properties:\n\nI don't think Druid itself uses OPTIONS requests. AFAIK, they are only needed for people that are using CORS, which Druid doesn't support innately but can be supported through extensions: #6026. So, OPTIONS shouldn't be part of the \"always allowed\" list.\ndruid.auth.allowUnauthenticatedHttpOptions today can't be used to disable OPTIONS, it only controls whether or not it can be used without authentication.\n\nTaking these into account, I'd suggest designing and documenting them like this:\n\n\n\nProperty\nDescription\nDefault\n\n\n\n\ndruid.server.http.allowedHttpMethods\nList of HTTP methods that should be allowed in addition to the ones required by Druid APIs. Druid APIs require GET, PUT, POST, and DELETE, which are always allowed. This option is not useful unless you have installed an extension that needs these additional HTTP methods or that adds functionality related to CORS. None of Druid's bundled extensions require these methods.\n[]\n\n\ndruid.auth.allowUnauthenticatedHttpOptions\nIf true, allow HTTP OPTIONS requests by unauthenticated users. This is primarily useful for supporting CORS preflight requests, which Druid does not support directly, but which can be enabled using third-party extensions.Note that you must add \"OPTIONS\" to druid.server.http.allowedHttpMethods.Also note that disabling authentication checks for OPTIONS requests will allow unauthenticated users to determine what Druid endpoints are valid (by checking if the OPTIONS request returns a 200 instead of 404). Enabling this option will reveal information about server configuration, including information about what extensions are loaded, to unauthenticated users.\nfalse", "url": "https://github.com/apache/druid/pull/10085#discussion_r446306599", "createdAt": "2020-06-26T17:08:07Z", "author": {"login": "gianm"}, "path": "docs/configuration/index.md", "diffHunk": "@@ -1312,6 +1312,7 @@ Druid uses Jetty to serve HTTP requests.\n |`druid.server.http.maxQueryTimeout`|Maximum allowed value (in milliseconds) for `timeout` parameter. See [query-context](../querying/query-context.html) to know more about `timeout`. Query is rejected if the query context `timeout` is greater than this value. |Long.MAX_VALUE|\n |`druid.server.http.maxRequestHeaderSize`|Maximum size of a request header in bytes. Larger headers consume more memory and can make a server more vulnerable to denial of service attacks.|8 * 1024|\n |`druid.server.http.enableForwardedRequestCustomizer`|If enabled, adds Jetty ForwardedRequestCustomizer which reads X-Forwarded-* request headers to manipulate servlet request object when Druid is used behind a proxy.|false|\n+|`druid.server.http.allowedHttpMethods`|List of http methods allowed in addition to the ones needed by Druid. GET, PUT, POST, DELETE and OPTIONS are always allowed. `druid.auth.allowUnauthenticatedHttpOptions` can be used to disable the OPTIONS method.|[]|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMwNTU0Mw=="}, "originalCommit": {"oid": "01e2eff2cec4681d7ee741be6e400220c6a11af7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ1MDk4Mg==", "bodyText": "\ud83d\udc4d thanks for the suggestion. Done.", "url": "https://github.com/apache/druid/pull/10085#discussion_r446450982", "createdAt": "2020-06-26T23:29:53Z", "author": {"login": "suneet-s"}, "path": "docs/configuration/index.md", "diffHunk": "@@ -1312,6 +1312,7 @@ Druid uses Jetty to serve HTTP requests.\n |`druid.server.http.maxQueryTimeout`|Maximum allowed value (in milliseconds) for `timeout` parameter. See [query-context](../querying/query-context.html) to know more about `timeout`. Query is rejected if the query context `timeout` is greater than this value. |Long.MAX_VALUE|\n |`druid.server.http.maxRequestHeaderSize`|Maximum size of a request header in bytes. Larger headers consume more memory and can make a server more vulnerable to denial of service attacks.|8 * 1024|\n |`druid.server.http.enableForwardedRequestCustomizer`|If enabled, adds Jetty ForwardedRequestCustomizer which reads X-Forwarded-* request headers to manipulate servlet request object when Druid is used behind a proxy.|false|\n+|`druid.server.http.allowedHttpMethods`|List of http methods allowed in addition to the ones needed by Druid. GET, PUT, POST, DELETE and OPTIONS are always allowed. `druid.auth.allowUnauthenticatedHttpOptions` can be used to disable the OPTIONS method.|[]|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMwNTU0Mw=="}, "originalCommit": {"oid": "01e2eff2cec4681d7ee741be6e400220c6a11af7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTk1MTM4OnYy", "diffSide": "RIGHT", "path": "web-console/script/druid", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMjo0MzoyOFrOGpypww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwNDo0MDo1NFrOGpzOyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3NDY5MQ==", "bodyText": "nit (since not related to this PR): Can't you do a GET on /status/health?", "url": "https://github.com/apache/druid/pull/10085#discussion_r446474691", "createdAt": "2020-06-27T02:43:28Z", "author": {"login": "maytasm"}, "path": "web-console/script/druid", "diffHunk": "@@ -73,10 +73,12 @@ function _build_distribution() {\n   _log \"Building druid distribution\"\n \n   (\n+    # Add HEAD as an allowed HTTP method since this is how we check when the Druid service is ready.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29c2a873635a93da365aba3174101ecfea7b8238"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ4NDE2OA==", "bodyText": "I think this is checking to see if the web console is up. I'm not sure if a GET /status/health is equivalent. The nice side-benefit of this is I get an integration test for free \ud83d\ude07", "url": "https://github.com/apache/druid/pull/10085#discussion_r446484168", "createdAt": "2020-06-27T04:40:54Z", "author": {"login": "suneet-s"}, "path": "web-console/script/druid", "diffHunk": "@@ -73,10 +73,12 @@ function _build_distribution() {\n   _log \"Building druid distribution\"\n \n   (\n+    # Add HEAD as an allowed HTTP method since this is how we check when the Druid service is ready.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3NDY5MQ=="}, "originalCommit": {"oid": "29c2a873635a93da365aba3174101ecfea7b8238"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Njg2MDkyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/server/security/AuthenticationUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxODoxODo1NFrOGqcr1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDoyNDoxMlrOGqg2rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE2MzM1MQ==", "bodyText": "This functionality isn't related to authentication. It would more properly belong in JettyServerInitUtils.", "url": "https://github.com/apache/druid/pull/10085#discussion_r447163351", "createdAt": "2020-06-29T18:18:54Z", "author": {"login": "gianm"}, "path": "server/src/main/java/org/apache/druid/server/security/AuthenticationUtils.java", "diffHunk": "@@ -27,6 +27,16 @@\n \n public class AuthenticationUtils\n {\n+  public static void addAllowHttpMethodsFilter(ServletContextHandler root, List<String> allowedHttpMethods)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b968ab8559573000de60ebbaa6716976b11c4ef"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzMTY2MA==", "bodyText": "Done", "url": "https://github.com/apache/druid/pull/10085#discussion_r447231660", "createdAt": "2020-06-29T20:24:12Z", "author": {"login": "suneet-s"}, "path": "server/src/main/java/org/apache/druid/server/security/AuthenticationUtils.java", "diffHunk": "@@ -27,6 +27,16 @@\n \n public class AuthenticationUtils\n {\n+  public static void addAllowHttpMethodsFilter(ServletContextHandler root, List<String> allowedHttpMethods)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE2MzM1MQ=="}, "originalCommit": {"oid": "4b968ab8559573000de60ebbaa6716976b11c4ef"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Njg2NTMyOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/druid/initialization/ServerConfigTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxODoyMDowN1rOGqcuaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDoyNDowN1rOGqg2fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE2NDAxMQ==", "bodyText": "Very small nit: HttpMethod.OPTIONS is better than the bare string.", "url": "https://github.com/apache/druid/pull/10085#discussion_r447164011", "createdAt": "2020-06-29T18:20:07Z", "author": {"login": "gianm"}, "path": "server/src/test/java/org/apache/druid/initialization/ServerConfigTest.java", "diffHunk": "@@ -51,13 +54,27 @@ public void testSerde() throws Exception\n         defaultConfig.getUnannouncePropagationDelay(),\n         defaultConfig.getInflateBufferSize(),\n         defaultConfig.getCompressionLevel(),\n-        true\n+        true,\n+        ImmutableList.of(\"OPTIONS\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b968ab8559573000de60ebbaa6716976b11c4ef"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzMTYxNA==", "bodyText": "Done", "url": "https://github.com/apache/druid/pull/10085#discussion_r447231614", "createdAt": "2020-06-29T20:24:07Z", "author": {"login": "suneet-s"}, "path": "server/src/test/java/org/apache/druid/initialization/ServerConfigTest.java", "diffHunk": "@@ -51,13 +54,27 @@ public void testSerde() throws Exception\n         defaultConfig.getUnannouncePropagationDelay(),\n         defaultConfig.getInflateBufferSize(),\n         defaultConfig.getCompressionLevel(),\n-        true\n+        true,\n+        ImmutableList.of(\"OPTIONS\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE2NDAxMQ=="}, "originalCommit": {"oid": "4b968ab8559573000de60ebbaa6716976b11c4ef"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2371, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}