{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3NTcyMTE3", "number": 10341, "title": "Fix result-level caching", "bodyText": "Fixes #10337.\nDescription\nThis PR changes RetryQueryRunner to call SpecificQueryRunnable.run() in its run(), so that the segments to query can be determined early enough for ResultLevelCachingQueryRunner. In theory, after this change, there might be a little higher chance to see missing segments in response context, but it should be small enough to ignore because the query execution will be likely started immediately right after query distribution tree is constructed.\nI believe we need integration tests for this fix, but I'm not sure how to add it without introducing a metricsMonitor for integration tests. Welcome any idea.\n\nThis PR has:\n\n been self-reviewed.\n\n using the concurrency checklist (Remove this item if the PR doesn't have any relation to concurrency.)\n\n\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths, ensuring the threshold for code coverage is met.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-09-02T05:07:29Z", "url": "https://github.com/apache/druid/pull/10341", "merged": true, "mergeCommit": {"oid": "d32d1e7004760ceebc50a29e619dce363e7e5024"}, "closed": true, "closedAt": "2020-09-08T18:04:01Z", "author": {"login": "jihoonson"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEuyIFgH2gAyNDc3NTcyMTE3OjRhZGQ1ODRhYTJlMjA1NmM2ZWQ2YzVkNmM1MDFkMGYyZjI2ZTE0MzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFofyngFqTQ4MjgyNzgzOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4add584aa2e2056c6ed6c5d6c501d0f2f26e1433", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/4add584aa2e2056c6ed6c5d6c501d0f2f26e1433", "committedDate": "2020-09-01T22:03:19Z", "message": "create baseSequence early"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99ff019032208c7fa349c827e276fb52cbb23948", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/99ff019032208c7fa349c827e276fb52cbb23948", "committedDate": "2020-09-02T04:50:07Z", "message": "unit test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNDQ5MzYz", "url": "https://github.com/apache/druid/pull/10341#pullrequestreview-481449363", "createdAt": "2020-09-03T02:29:47Z", "commit": {"oid": "99ff019032208c7fa349c827e276fb52cbb23948"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMjoyOTo0OFrOHMTesg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMjoyOTo0OFrOHMTesg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY2NDExNA==", "bodyText": "Would it make sense to add another test to verify if the cache isn't getting populated in case of a query failure maybe due to missing segments?", "url": "https://github.com/apache/druid/pull/10341#discussion_r482664114", "createdAt": "2020-09-03T02:29:48Z", "author": {"login": "a2l007"}, "path": "server/src/test/java/org/apache/druid/query/ResultLevelCachingQueryRunnerTest.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query;\n+\n+import org.apache.druid.client.cache.Cache;\n+import org.apache.druid.client.cache.CacheConfig;\n+import org.apache.druid.client.cache.MapCache;\n+import org.apache.druid.java.util.common.guava.Sequence;\n+import org.apache.druid.query.timeseries.TimeseriesResultValue;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+public class ResultLevelCachingQueryRunnerTest extends QueryRunnerBasedOnClusteredClientTestBase\n+{\n+  private Cache cache;\n+\n+  @Before\n+  public void setup()\n+  {\n+    cache = MapCache.create(1024);\n+  }\n+\n+  @After\n+  public void tearDown() throws IOException\n+  {\n+    cache.close();\n+  }\n+\n+  @Test\n+  public void testNotPopulateAndNotUse()\n+  {\n+    prepareCluster(10);\n+    final Query<Result<TimeseriesResultValue>> query = timeseriesQuery(BASE_SCHEMA_INFO.getDataInterval());\n+    final ResultLevelCachingQueryRunner<Result<TimeseriesResultValue>> queryRunner1 = createQueryRunner(\n+        newCacheConfig(false, true),\n+        query\n+    );\n+\n+    final Sequence<Result<TimeseriesResultValue>> sequence1 = queryRunner1.run(\n+        QueryPlus.wrap(query),\n+        responseContext()\n+    );\n+    final List<Result<TimeseriesResultValue>> results1 = sequence1.toList();\n+    Assert.assertEquals(0, cache.getStats().getNumHits());\n+\n+    final ResultLevelCachingQueryRunner<Result<TimeseriesResultValue>> queryRunner2 = createQueryRunner(\n+        newCacheConfig(false, true),\n+        query\n+    );\n+\n+    final Sequence<Result<TimeseriesResultValue>> sequence2 = queryRunner2.run(\n+        QueryPlus.wrap(query),\n+        responseContext()\n+    );\n+    final List<Result<TimeseriesResultValue>> results2 = sequence2.toList();\n+    Assert.assertEquals(results1, results2);\n+    Assert.assertEquals(0, cache.getStats().getNumHits());\n+  }\n+\n+  @Test\n+  public void testPopulateAndNotUse()\n+  {\n+    prepareCluster(10);\n+    final Query<Result<TimeseriesResultValue>> query = timeseriesQuery(BASE_SCHEMA_INFO.getDataInterval());\n+    final ResultLevelCachingQueryRunner<Result<TimeseriesResultValue>> queryRunner1 = createQueryRunner(\n+        newCacheConfig(true, true),\n+        query\n+    );\n+\n+    final Sequence<Result<TimeseriesResultValue>> sequence1 = queryRunner1.run(\n+        QueryPlus.wrap(query),\n+        responseContext()\n+    );\n+    final List<Result<TimeseriesResultValue>> results1 = sequence1.toList();\n+    Assert.assertEquals(0, cache.getStats().getNumHits());\n+\n+    final ResultLevelCachingQueryRunner<Result<TimeseriesResultValue>> queryRunner2 = createQueryRunner(\n+        newCacheConfig(true, false),\n+        query\n+    );\n+\n+    final Sequence<Result<TimeseriesResultValue>> sequence2 = queryRunner2.run(\n+        QueryPlus.wrap(query),\n+        responseContext()\n+    );\n+    final List<Result<TimeseriesResultValue>> results2 = sequence2.toList();\n+    Assert.assertEquals(results1, results2);\n+    Assert.assertEquals(0, cache.getStats().getNumHits());\n+  }\n+\n+  @Test\n+  public void testNotPopulateAndUse()\n+  {\n+    prepareCluster(10);\n+    final Query<Result<TimeseriesResultValue>> query = timeseriesQuery(BASE_SCHEMA_INFO.getDataInterval());\n+    final ResultLevelCachingQueryRunner<Result<TimeseriesResultValue>> queryRunner1 = createQueryRunner(\n+        newCacheConfig(false, true),\n+        query\n+    );\n+\n+    final Sequence<Result<TimeseriesResultValue>> sequence1 = queryRunner1.run(\n+        QueryPlus.wrap(query),\n+        responseContext()\n+    );\n+    final List<Result<TimeseriesResultValue>> results1 = sequence1.toList();\n+    Assert.assertEquals(0, cache.getStats().getNumHits());\n+\n+    final ResultLevelCachingQueryRunner<Result<TimeseriesResultValue>> queryRunner2 = createQueryRunner(\n+        newCacheConfig(true, true),\n+        query\n+    );\n+\n+    final Sequence<Result<TimeseriesResultValue>> sequence2 = queryRunner2.run(\n+        QueryPlus.wrap(query),\n+        responseContext()\n+    );\n+    final List<Result<TimeseriesResultValue>> results2 = sequence2.toList();\n+    Assert.assertEquals(results1, results2);\n+    Assert.assertEquals(0, cache.getStats().getNumHits());\n+  }\n+\n+  @Test\n+  public void testPopulateAndUse()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ff019032208c7fa349c827e276fb52cbb23948"}, "originalPosition": 145}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14e9ddc5768483897529ca6deacc541c637e3110", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/14e9ddc5768483897529ca6deacc541c637e3110", "committedDate": "2020-09-03T05:22:43Z", "message": "add comment and a new test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNTk4MjA0", "url": "https://github.com/apache/druid/pull/10341#pullrequestreview-481598204", "createdAt": "2020-09-03T08:10:20Z", "commit": {"oid": "14e9ddc5768483897529ca6deacc541c637e3110"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyODI3ODM4", "url": "https://github.com/apache/druid/pull/10341#pullrequestreview-482827838", "createdAt": "2020-09-04T17:17:47Z", "commit": {"oid": "14e9ddc5768483897529ca6deacc541c637e3110"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3543, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}