{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzODAwODQx", "number": 10651, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxODoyOTo1M1rOFB7D2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxODoyOTo1M1rOFB7D2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NTYwNTM2OnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/overlord/sampler/InputSourceSampler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxODoyOTo1M1rOIA0kHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQyMjowNjoyOVrOIY3KxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzczMjEyNw==", "bodyText": "@egor-ryashin Can you add a test that shows what happens when an error is thrown when building an InputSourceReader", "url": "https://github.com/apache/druid/pull/10651#discussion_r537732127", "createdAt": "2020-12-07T18:29:53Z", "author": {"login": "suneet-s"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/overlord/sampler/InputSourceSampler.java", "diffHunk": "@@ -103,90 +103,102 @@ public SamplerResponse sample(\n     final File tempDir = FileUtils.createTempDir();\n     closer.register(() -> FileUtils.deleteDirectory(tempDir));\n \n-    final InputSourceReader reader = buildReader(\n-        nonNullSamplerConfig,\n-        nonNullDataSchema,\n-        inputSource,\n-        inputFormat,\n-        tempDir\n-    );\n-    try (final CloseableIterator<InputRowListPlusRawValues> iterator = reader.sample();\n-         final IncrementalIndex<Aggregator> index = buildIncrementalIndex(nonNullSamplerConfig, nonNullDataSchema);\n-         final Closer closer1 = closer) {\n-      List<SamplerResponseRow> responseRows = new ArrayList<>(nonNullSamplerConfig.getNumRows());\n-      int numRowsIndexed = 0;\n-\n-      while (responseRows.size() < nonNullSamplerConfig.getNumRows() && iterator.hasNext()) {\n-        final InputRowListPlusRawValues inputRowListPlusRawValues = iterator.next();\n-\n-        final List<Map<String, Object>> rawColumnsList = inputRowListPlusRawValues.getRawValuesList();\n-\n-        final ParseException parseException = inputRowListPlusRawValues.getParseException();\n-        if (parseException != null) {\n-          if (rawColumnsList != null) {\n-            // add all rows to response\n-            responseRows.addAll(rawColumnsList.stream()\n-                                              .map(rawColumns -> new SamplerResponseRow(rawColumns, null, true, parseException.getMessage()))\n-                                              .collect(Collectors.toList()));\n-          } else {\n-            // no data parsed, add one response row\n-            responseRows.add(new SamplerResponseRow(null, null, true, parseException.getMessage()));\n+    try {\n+      final InputSourceReader reader = buildReader(\n+          nonNullSamplerConfig,\n+          nonNullDataSchema,\n+          inputSource,\n+          inputFormat,\n+          tempDir\n+      );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b203bf895d6a9fae2c2c26994c9b44dd8689ff24"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDgxNTM3Nw==", "bodyText": "I guess that needs a UI test, unfortunately, it will take me more time than I have right now.", "url": "https://github.com/apache/druid/pull/10651#discussion_r560815377", "createdAt": "2021-01-20T09:35:53Z", "author": {"login": "egor-ryashin"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/overlord/sampler/InputSourceSampler.java", "diffHunk": "@@ -103,90 +103,102 @@ public SamplerResponse sample(\n     final File tempDir = FileUtils.createTempDir();\n     closer.register(() -> FileUtils.deleteDirectory(tempDir));\n \n-    final InputSourceReader reader = buildReader(\n-        nonNullSamplerConfig,\n-        nonNullDataSchema,\n-        inputSource,\n-        inputFormat,\n-        tempDir\n-    );\n-    try (final CloseableIterator<InputRowListPlusRawValues> iterator = reader.sample();\n-         final IncrementalIndex<Aggregator> index = buildIncrementalIndex(nonNullSamplerConfig, nonNullDataSchema);\n-         final Closer closer1 = closer) {\n-      List<SamplerResponseRow> responseRows = new ArrayList<>(nonNullSamplerConfig.getNumRows());\n-      int numRowsIndexed = 0;\n-\n-      while (responseRows.size() < nonNullSamplerConfig.getNumRows() && iterator.hasNext()) {\n-        final InputRowListPlusRawValues inputRowListPlusRawValues = iterator.next();\n-\n-        final List<Map<String, Object>> rawColumnsList = inputRowListPlusRawValues.getRawValuesList();\n-\n-        final ParseException parseException = inputRowListPlusRawValues.getParseException();\n-        if (parseException != null) {\n-          if (rawColumnsList != null) {\n-            // add all rows to response\n-            responseRows.addAll(rawColumnsList.stream()\n-                                              .map(rawColumns -> new SamplerResponseRow(rawColumns, null, true, parseException.getMessage()))\n-                                              .collect(Collectors.toList()));\n-          } else {\n-            // no data parsed, add one response row\n-            responseRows.add(new SamplerResponseRow(null, null, true, parseException.getMessage()));\n+    try {\n+      final InputSourceReader reader = buildReader(\n+          nonNullSamplerConfig,\n+          nonNullDataSchema,\n+          inputSource,\n+          inputFormat,\n+          tempDir\n+      );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzczMjEyNw=="}, "originalCommit": {"oid": "b203bf895d6a9fae2c2c26994c9b44dd8689ff24"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk0MDYxMw==", "bodyText": "@egor-ryashin Why not write a unit test for this sample method that expects a SamplerException to be thrown when buildReader throws an exception. I think that would be sufficient to merge this change", "url": "https://github.com/apache/druid/pull/10651#discussion_r562940613", "createdAt": "2021-01-22T22:06:29Z", "author": {"login": "suneet-s"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/overlord/sampler/InputSourceSampler.java", "diffHunk": "@@ -103,90 +103,102 @@ public SamplerResponse sample(\n     final File tempDir = FileUtils.createTempDir();\n     closer.register(() -> FileUtils.deleteDirectory(tempDir));\n \n-    final InputSourceReader reader = buildReader(\n-        nonNullSamplerConfig,\n-        nonNullDataSchema,\n-        inputSource,\n-        inputFormat,\n-        tempDir\n-    );\n-    try (final CloseableIterator<InputRowListPlusRawValues> iterator = reader.sample();\n-         final IncrementalIndex<Aggregator> index = buildIncrementalIndex(nonNullSamplerConfig, nonNullDataSchema);\n-         final Closer closer1 = closer) {\n-      List<SamplerResponseRow> responseRows = new ArrayList<>(nonNullSamplerConfig.getNumRows());\n-      int numRowsIndexed = 0;\n-\n-      while (responseRows.size() < nonNullSamplerConfig.getNumRows() && iterator.hasNext()) {\n-        final InputRowListPlusRawValues inputRowListPlusRawValues = iterator.next();\n-\n-        final List<Map<String, Object>> rawColumnsList = inputRowListPlusRawValues.getRawValuesList();\n-\n-        final ParseException parseException = inputRowListPlusRawValues.getParseException();\n-        if (parseException != null) {\n-          if (rawColumnsList != null) {\n-            // add all rows to response\n-            responseRows.addAll(rawColumnsList.stream()\n-                                              .map(rawColumns -> new SamplerResponseRow(rawColumns, null, true, parseException.getMessage()))\n-                                              .collect(Collectors.toList()));\n-          } else {\n-            // no data parsed, add one response row\n-            responseRows.add(new SamplerResponseRow(null, null, true, parseException.getMessage()));\n+    try {\n+      final InputSourceReader reader = buildReader(\n+          nonNullSamplerConfig,\n+          nonNullDataSchema,\n+          inputSource,\n+          inputFormat,\n+          tempDir\n+      );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzczMjEyNw=="}, "originalCommit": {"oid": "b203bf895d6a9fae2c2c26994c9b44dd8689ff24"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2893, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}