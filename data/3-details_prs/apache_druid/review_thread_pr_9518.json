{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4MTgzMTU4", "number": 9518, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzoyNzozMVrODs4-GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMlQyMzoyNDoyNFrOFaCqbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Mzk3MzM2OnYy", "diffSide": "RIGHT", "path": "extensions-core/druid-aws-rds-extensions/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzoyNzozMVrOF9_5Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNTowNTozMVrOGBH7WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU1NDI3NA==", "bodyText": "Would you mind updating the version to 0.19.0-SNAPSHOT?", "url": "https://github.com/apache/druid/pull/9518#discussion_r400554274", "createdAt": "2020-03-30T23:27:31Z", "author": {"login": "jihoonson"}, "path": "extensions-core/druid-aws-rds-extensions/pom.xml", "diffHunk": "@@ -0,0 +1,80 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <groupId>org.apache.druid.extensions</groupId>\n+  <artifactId>druid-aws-rds-extensions</artifactId>\n+  <name>druid-aws-rds-extensions</name>\n+  <description>druid-aws-rds-extensions</description>\n+\n+  <parent>\n+    <groupId>org.apache.druid</groupId>\n+    <artifactId>druid</artifactId>\n+    <version>0.18.0-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5214e03c1d94ab65713d0a11c6f20096058f1f6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgzMTY0MQ==", "bodyText": "updated", "url": "https://github.com/apache/druid/pull/9518#discussion_r403831641", "createdAt": "2020-04-06T05:05:31Z", "author": {"login": "himanshug"}, "path": "extensions-core/druid-aws-rds-extensions/pom.xml", "diffHunk": "@@ -0,0 +1,80 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <groupId>org.apache.druid.extensions</groupId>\n+  <artifactId>druid-aws-rds-extensions</artifactId>\n+  <name>druid-aws-rds-extensions</name>\n+  <description>druid-aws-rds-extensions</description>\n+\n+  <parent>\n+    <groupId>org.apache.druid</groupId>\n+    <artifactId>druid</artifactId>\n+    <version>0.18.0-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU1NDI3NA=="}, "originalCommit": {"oid": "f5214e03c1d94ab65713d0a11c6f20096058f1f6"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTk1NTE1OnYy", "diffSide": "RIGHT", "path": "extensions-core/druid-aws-rds-extensions/src/main/java/org/apache/druid/aws/rds/AWSModule.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMTozNDo1MFrOIOHEoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMToxODo1NVrOIOnpUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY2Njg0OA==", "bodyText": "Maybe AWSRDSModule?", "url": "https://github.com/apache/druid/pull/9518#discussion_r551666848", "createdAt": "2021-01-05T01:34:50Z", "author": {"login": "jihoonson"}, "path": "extensions-core/druid-aws-rds-extensions/src/main/java/org/apache/druid/aws/rds/AWSModule.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.aws.rds;\n+\n+import com.fasterxml.jackson.databind.Module;\n+import com.fasterxml.jackson.databind.jsontype.NamedType;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Binder;\n+import org.apache.druid.initialization.DruidModule;\n+\n+import java.util.List;\n+\n+public class AWSModule implements DruidModule", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff1f02ab38715bc784f26e4394d4ec18872983bb"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTcxMjk5NQ==", "bodyText": "will change", "url": "https://github.com/apache/druid/pull/9518#discussion_r551712995", "createdAt": "2021-01-05T04:40:46Z", "author": {"login": "himanshug"}, "path": "extensions-core/druid-aws-rds-extensions/src/main/java/org/apache/druid/aws/rds/AWSModule.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.aws.rds;\n+\n+import com.fasterxml.jackson.databind.Module;\n+import com.fasterxml.jackson.databind.jsontype.NamedType;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Binder;\n+import org.apache.druid.initialization.DruidModule;\n+\n+import java.util.List;\n+\n+public class AWSModule implements DruidModule", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY2Njg0OA=="}, "originalCommit": {"oid": "ff1f02ab38715bc784f26e4394d4ec18872983bb"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjIwMDUyOA==", "bodyText": "changed", "url": "https://github.com/apache/druid/pull/9518#discussion_r552200528", "createdAt": "2021-01-05T21:18:55Z", "author": {"login": "himanshug"}, "path": "extensions-core/druid-aws-rds-extensions/src/main/java/org/apache/druid/aws/rds/AWSModule.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.aws.rds;\n+\n+import com.fasterxml.jackson.databind.Module;\n+import com.fasterxml.jackson.databind.jsontype.NamedType;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Binder;\n+import org.apache.druid.initialization.DruidModule;\n+\n+import java.util.List;\n+\n+public class AWSModule implements DruidModule", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY2Njg0OA=="}, "originalCommit": {"oid": "ff1f02ab38715bc784f26e4394d4ec18872983bb"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTk1ODk1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/metadata/BasicDataSourceExt.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMTozNjowOVrOIOHGkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMToxOToxNVrOIOnp6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY2NzM0Ng==", "bodyText": "Haha, would you fix ummm copies?", "url": "https://github.com/apache/druid/pull/9518#discussion_r551667346", "createdAt": "2021-01-05T01:36:09Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/metadata/BasicDataSourceExt.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.metadata;\n+\n+import org.apache.commons.dbcp2.BasicDataSource;\n+import org.apache.commons.dbcp2.ConnectionFactory;\n+import org.apache.druid.java.util.common.RE;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.sql.Driver;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.util.Properties;\n+\n+/**\n+ * This class exists so that PasswordProvider is asked for password every time a brand new connection is established\n+ * with DB. PasswordProvider impls such as based on AWS tokens refresh the underlying token periodically since\n+ * each token is valid for a certain period of time only.\n+ * So, This class overrides[ummm copies] the methods from base class in order to keep track of connection properties", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff1f02ab38715bc784f26e4394d4ec18872983bb"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTcxMjk0Ng==", "bodyText": "not sure if there is anything to fix as of now , BasicDataSource isn't open enough for extension to let us dynamically get password from config everytime a new connection is setup.", "url": "https://github.com/apache/druid/pull/9518#discussion_r551712946", "createdAt": "2021-01-05T04:40:31Z", "author": {"login": "himanshug"}, "path": "server/src/main/java/org/apache/druid/metadata/BasicDataSourceExt.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.metadata;\n+\n+import org.apache.commons.dbcp2.BasicDataSource;\n+import org.apache.commons.dbcp2.ConnectionFactory;\n+import org.apache.druid.java.util.common.RE;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.sql.Driver;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.util.Properties;\n+\n+/**\n+ * This class exists so that PasswordProvider is asked for password every time a brand new connection is established\n+ * with DB. PasswordProvider impls such as based on AWS tokens refresh the underlying token periodically since\n+ * each token is valid for a certain period of time only.\n+ * So, This class overrides[ummm copies] the methods from base class in order to keep track of connection properties", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY2NzM0Ng=="}, "originalCommit": {"oid": "ff1f02ab38715bc784f26e4394d4ec18872983bb"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTczMTY1NQ==", "bodyText": "Oh, I just assumed that you wanted to add a link instead of ummm copies. It would be enough to just remove it if there is nothing to fix.", "url": "https://github.com/apache/druid/pull/9518#discussion_r551731655", "createdAt": "2021-01-05T05:58:15Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/metadata/BasicDataSourceExt.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.metadata;\n+\n+import org.apache.commons.dbcp2.BasicDataSource;\n+import org.apache.commons.dbcp2.ConnectionFactory;\n+import org.apache.druid.java.util.common.RE;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.sql.Driver;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.util.Properties;\n+\n+/**\n+ * This class exists so that PasswordProvider is asked for password every time a brand new connection is established\n+ * with DB. PasswordProvider impls such as based on AWS tokens refresh the underlying token periodically since\n+ * each token is valid for a certain period of time only.\n+ * So, This class overrides[ummm copies] the methods from base class in order to keep track of connection properties", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY2NzM0Ng=="}, "originalCommit": {"oid": "ff1f02ab38715bc784f26e4394d4ec18872983bb"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjIwMDY4Mg==", "bodyText": "i see :) , updated the comment to hopefully remove the link confusion", "url": "https://github.com/apache/druid/pull/9518#discussion_r552200682", "createdAt": "2021-01-05T21:19:15Z", "author": {"login": "himanshug"}, "path": "server/src/main/java/org/apache/druid/metadata/BasicDataSourceExt.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.metadata;\n+\n+import org.apache.commons.dbcp2.BasicDataSource;\n+import org.apache.commons.dbcp2.ConnectionFactory;\n+import org.apache.druid.java.util.common.RE;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.sql.Driver;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.util.Properties;\n+\n+/**\n+ * This class exists so that PasswordProvider is asked for password every time a brand new connection is established\n+ * with DB. PasswordProvider impls such as based on AWS tokens refresh the underlying token periodically since\n+ * each token is valid for a certain period of time only.\n+ * So, This class overrides[ummm copies] the methods from base class in order to keep track of connection properties", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY2NzM0Ng=="}, "originalCommit": {"oid": "ff1f02ab38715bc784f26e4394d4ec18872983bb"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTk2NDkyOnYy", "diffSide": "RIGHT", "path": "docs/development/extensions-core/druid-aws-rds.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMTozODo1NVrOIOHJ1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMToxOToyMlrOIOnqMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY2ODE4Mw==", "bodyText": "Maybe aws-rds-token?", "url": "https://github.com/apache/druid/pull/9518#discussion_r551668183", "createdAt": "2021-01-05T01:38:55Z", "author": {"login": "jihoonson"}, "path": "docs/development/extensions-core/druid-aws-rds.md", "diffHunk": "@@ -0,0 +1,38 @@\n+---\n+id: druid-aws-rds\n+title: \"Druid AWS RDS Module\"\n+---\n+\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+This module provides AWS RDS token [password provider](../../operations/password-provider.md) provides temp token for accessing AWS RDS DB cluster.\n+\n+```json\n+{ \"type\": \"awsrdstoken\", \"user\": \"USER\", \"host\": \"HOST\", \"port\": PORT, \"region\": \"AWS_REGION\" }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff1f02ab38715bc784f26e4394d4ec18872983bb"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTcxMjk3OA==", "bodyText": "will update", "url": "https://github.com/apache/druid/pull/9518#discussion_r551712978", "createdAt": "2021-01-05T04:40:40Z", "author": {"login": "himanshug"}, "path": "docs/development/extensions-core/druid-aws-rds.md", "diffHunk": "@@ -0,0 +1,38 @@\n+---\n+id: druid-aws-rds\n+title: \"Druid AWS RDS Module\"\n+---\n+\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+This module provides AWS RDS token [password provider](../../operations/password-provider.md) provides temp token for accessing AWS RDS DB cluster.\n+\n+```json\n+{ \"type\": \"awsrdstoken\", \"user\": \"USER\", \"host\": \"HOST\", \"port\": PORT, \"region\": \"AWS_REGION\" }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY2ODE4Mw=="}, "originalCommit": {"oid": "ff1f02ab38715bc784f26e4394d4ec18872983bb"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjIwMDc1Mg==", "bodyText": "changed", "url": "https://github.com/apache/druid/pull/9518#discussion_r552200752", "createdAt": "2021-01-05T21:19:22Z", "author": {"login": "himanshug"}, "path": "docs/development/extensions-core/druid-aws-rds.md", "diffHunk": "@@ -0,0 +1,38 @@\n+---\n+id: druid-aws-rds\n+title: \"Druid AWS RDS Module\"\n+---\n+\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+This module provides AWS RDS token [password provider](../../operations/password-provider.md) provides temp token for accessing AWS RDS DB cluster.\n+\n+```json\n+{ \"type\": \"awsrdstoken\", \"user\": \"USER\", \"host\": \"HOST\", \"port\": PORT, \"region\": \"AWS_REGION\" }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY2ODE4Mw=="}, "originalCommit": {"oid": "ff1f02ab38715bc784f26e4394d4ec18872983bb"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NjI0NDQ1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/metadata/BasicDataSourceExt.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMjoxNzoxOVrOIOvVew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjowMjozMFrOIPXaEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjMyNjUyMw==", "bodyText": "nit: i think we've been trying to tone it down and be professional and shit \ud83d\ude1b , related #10270", "url": "https://github.com/apache/druid/pull/9518#discussion_r552326523", "createdAt": "2021-01-06T02:17:19Z", "author": {"login": "clintropolis"}, "path": "server/src/main/java/org/apache/druid/metadata/BasicDataSourceExt.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.metadata;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.commons.dbcp2.BasicDataSource;\n+import org.apache.commons.dbcp2.ConnectionFactory;\n+import org.apache.druid.java.util.common.RE;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.sql.Driver;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.util.Properties;\n+\n+/**\n+ * This class exists so that {@link MetadataStorageConnectorConfig} is asked for password every time a brand new\n+ * connection is established with DB. {@link PasswordProvider} impls such as those based on AWS tokens refresh the\n+ * underlying token periodically since each token is valid for a certain period of time only.\n+ * So, This class overrides,ummm copies due to lack of extensibility, the methods from base class in order to keep\n+ * track of connection properties and call {@link MetadataStorageConnectorConfig#getPassword()} everytime a new\n+ * connection is setup.\n+ */\n+public class BasicDataSourceExt extends BasicDataSource\n+{\n+  private static final Logger LOGGER = new Logger(BasicDataSourceExt.class);\n+\n+  private Properties connectionProperties;\n+  private final MetadataStorageConnectorConfig connectorConfig;\n+\n+  public BasicDataSourceExt(MetadataStorageConnectorConfig connectorConfig)\n+  {\n+    this.connectorConfig = connectorConfig;\n+    this.connectionProperties = new Properties();\n+  }\n+\n+  @Override\n+  public void addConnectionProperty(String name, String value)\n+  {\n+    connectionProperties.put(name, value);\n+    super.addConnectionProperty(name, value);\n+  }\n+\n+  @Override\n+  public void removeConnectionProperty(String name)\n+  {\n+    connectionProperties.remove(name);\n+    super.removeConnectionProperty(name);\n+  }\n+\n+  @Override\n+  public void setConnectionProperties(String connectionProperties)\n+  {\n+    if (connectionProperties == null) {\n+      throw new NullPointerException(\"connectionProperties is null\");\n+    }\n+\n+    String[] entries = connectionProperties.split(\";\");\n+    Properties properties = new Properties();\n+    for (String entry : entries) {\n+      if (entry.length() > 0) {\n+        int index = entry.indexOf('=');\n+        if (index > 0) {\n+          String name = entry.substring(0, index);\n+          String value = entry.substring(index + 1);\n+          properties.setProperty(name, value);\n+        } else {\n+          // no value is empty string which is how java.util.Properties works\n+          properties.setProperty(entry, \"\");\n+        }\n+      }\n+    }\n+    this.connectionProperties = properties;\n+    super.setConnectionProperties(connectionProperties);\n+  }\n+\n+  @VisibleForTesting\n+  public Properties getConnectionProperties()\n+  {\n+    return connectionProperties;\n+  }\n+\n+  @Override\n+  protected ConnectionFactory createConnectionFactory() throws SQLException\n+  {\n+    Driver driverToUse = getDriver();\n+\n+    if (driverToUse == null) {\n+      Class<?> driverFromCCL = null;\n+      if (getDriverClassName() != null) {\n+        try {\n+          try {\n+            if (getDriverClassLoader() == null) {\n+              driverFromCCL = Class.forName(getDriverClassName());\n+            } else {\n+              driverFromCCL = Class.forName(\n+                  getDriverClassName(), true, getDriverClassLoader());\n+            }\n+          }\n+          catch (ClassNotFoundException cnfe) {\n+            driverFromCCL = Thread.currentThread(\n+            ).getContextClassLoader().loadClass(\n+                getDriverClassName());\n+          }\n+        }\n+        catch (Exception t) {\n+          String message = \"Cannot load JDBC driver class '\" +\n+                           getDriverClassName() + \"'\";\n+          LOGGER.error(t, message);\n+          throw new SQLException(message, t);\n+        }\n+      }\n+\n+      try {\n+        if (driverFromCCL == null) {\n+          driverToUse = DriverManager.getDriver(getUrl());\n+        } else {\n+          // Usage of DriverManager is not possible, as it does not\n+          // respect the ContextClassLoader\n+          // N.B. This cast may cause ClassCastException which is handled below\n+          driverToUse = (Driver) driverFromCCL.newInstance();\n+          if (!driverToUse.acceptsURL(getUrl())) {\n+            throw new SQLException(\"No suitable driver\", \"08001\");\n+          }\n+        }\n+      }\n+      catch (Exception t) {\n+        String message = \"Cannot create JDBC driver of class '\" +\n+                         (getDriverClassName() != null ? getDriverClassName() : \"\") +\n+                         \"' for connect URL '\" + getUrl() + \"'\";\n+        LOGGER.error(t, message);\n+        throw new SQLException(message, t);\n+      }\n+    }\n+\n+    if (driverToUse == null) {\n+      throw new RE(\"WTH! Couln't find a Driver\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f04c23acbc057823cce5369038adfb07ed6340c3"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk4MzA1Ng==", "bodyText": "changed, I thought \"WTF\" to \"WTH\" transition was that :)", "url": "https://github.com/apache/druid/pull/9518#discussion_r552983056", "createdAt": "2021-01-06T22:02:30Z", "author": {"login": "himanshug"}, "path": "server/src/main/java/org/apache/druid/metadata/BasicDataSourceExt.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.metadata;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.commons.dbcp2.BasicDataSource;\n+import org.apache.commons.dbcp2.ConnectionFactory;\n+import org.apache.druid.java.util.common.RE;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.sql.Driver;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.util.Properties;\n+\n+/**\n+ * This class exists so that {@link MetadataStorageConnectorConfig} is asked for password every time a brand new\n+ * connection is established with DB. {@link PasswordProvider} impls such as those based on AWS tokens refresh the\n+ * underlying token periodically since each token is valid for a certain period of time only.\n+ * So, This class overrides,ummm copies due to lack of extensibility, the methods from base class in order to keep\n+ * track of connection properties and call {@link MetadataStorageConnectorConfig#getPassword()} everytime a new\n+ * connection is setup.\n+ */\n+public class BasicDataSourceExt extends BasicDataSource\n+{\n+  private static final Logger LOGGER = new Logger(BasicDataSourceExt.class);\n+\n+  private Properties connectionProperties;\n+  private final MetadataStorageConnectorConfig connectorConfig;\n+\n+  public BasicDataSourceExt(MetadataStorageConnectorConfig connectorConfig)\n+  {\n+    this.connectorConfig = connectorConfig;\n+    this.connectionProperties = new Properties();\n+  }\n+\n+  @Override\n+  public void addConnectionProperty(String name, String value)\n+  {\n+    connectionProperties.put(name, value);\n+    super.addConnectionProperty(name, value);\n+  }\n+\n+  @Override\n+  public void removeConnectionProperty(String name)\n+  {\n+    connectionProperties.remove(name);\n+    super.removeConnectionProperty(name);\n+  }\n+\n+  @Override\n+  public void setConnectionProperties(String connectionProperties)\n+  {\n+    if (connectionProperties == null) {\n+      throw new NullPointerException(\"connectionProperties is null\");\n+    }\n+\n+    String[] entries = connectionProperties.split(\";\");\n+    Properties properties = new Properties();\n+    for (String entry : entries) {\n+      if (entry.length() > 0) {\n+        int index = entry.indexOf('=');\n+        if (index > 0) {\n+          String name = entry.substring(0, index);\n+          String value = entry.substring(index + 1);\n+          properties.setProperty(name, value);\n+        } else {\n+          // no value is empty string which is how java.util.Properties works\n+          properties.setProperty(entry, \"\");\n+        }\n+      }\n+    }\n+    this.connectionProperties = properties;\n+    super.setConnectionProperties(connectionProperties);\n+  }\n+\n+  @VisibleForTesting\n+  public Properties getConnectionProperties()\n+  {\n+    return connectionProperties;\n+  }\n+\n+  @Override\n+  protected ConnectionFactory createConnectionFactory() throws SQLException\n+  {\n+    Driver driverToUse = getDriver();\n+\n+    if (driverToUse == null) {\n+      Class<?> driverFromCCL = null;\n+      if (getDriverClassName() != null) {\n+        try {\n+          try {\n+            if (getDriverClassLoader() == null) {\n+              driverFromCCL = Class.forName(getDriverClassName());\n+            } else {\n+              driverFromCCL = Class.forName(\n+                  getDriverClassName(), true, getDriverClassLoader());\n+            }\n+          }\n+          catch (ClassNotFoundException cnfe) {\n+            driverFromCCL = Thread.currentThread(\n+            ).getContextClassLoader().loadClass(\n+                getDriverClassName());\n+          }\n+        }\n+        catch (Exception t) {\n+          String message = \"Cannot load JDBC driver class '\" +\n+                           getDriverClassName() + \"'\";\n+          LOGGER.error(t, message);\n+          throw new SQLException(message, t);\n+        }\n+      }\n+\n+      try {\n+        if (driverFromCCL == null) {\n+          driverToUse = DriverManager.getDriver(getUrl());\n+        } else {\n+          // Usage of DriverManager is not possible, as it does not\n+          // respect the ContextClassLoader\n+          // N.B. This cast may cause ClassCastException which is handled below\n+          driverToUse = (Driver) driverFromCCL.newInstance();\n+          if (!driverToUse.acceptsURL(getUrl())) {\n+            throw new SQLException(\"No suitable driver\", \"08001\");\n+          }\n+        }\n+      }\n+      catch (Exception t) {\n+        String message = \"Cannot create JDBC driver of class '\" +\n+                         (getDriverClassName() != null ? getDriverClassName() : \"\") +\n+                         \"' for connect URL '\" + getUrl() + \"'\";\n+        LOGGER.error(t, message);\n+        throw new SQLException(message, t);\n+      }\n+    }\n+\n+    if (driverToUse == null) {\n+      throw new RE(\"WTH! Couln't find a Driver\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjMyNjUyMw=="}, "originalCommit": {"oid": "f04c23acbc057823cce5369038adfb07ed6340c3"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NjI1NjI0OnYy", "diffSide": "RIGHT", "path": "docs/development/extensions-core/druid-aws-rds.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMjoyMzo1NlrOIOvcPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMTo1OTowOVrOIPXU9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjMyODI1Mg==", "bodyText": "to prevent confusion, should we more explicitly call out that this is not a metadata connector itself and just provides auth to be used by the extension that is appropriate for the RDS instance type?", "url": "https://github.com/apache/druid/pull/9518#discussion_r552328252", "createdAt": "2021-01-06T02:23:56Z", "author": {"login": "clintropolis"}, "path": "docs/development/extensions-core/druid-aws-rds.md", "diffHunk": "@@ -0,0 +1,38 @@\n+---\n+id: druid-aws-rds\n+title: \"Druid AWS RDS Module\"\n+---\n+\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+This module provides AWS RDS token [password provider](../../operations/password-provider.md) provides temp token for accessing AWS RDS DB cluster.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f04c23acbc057823cce5369038adfb07ed6340c3"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk4MTc1MQ==", "bodyText": "reworded to hopefully remove the confusion", "url": "https://github.com/apache/druid/pull/9518#discussion_r552981751", "createdAt": "2021-01-06T21:59:09Z", "author": {"login": "himanshug"}, "path": "docs/development/extensions-core/druid-aws-rds.md", "diffHunk": "@@ -0,0 +1,38 @@\n+---\n+id: druid-aws-rds\n+title: \"Druid AWS RDS Module\"\n+---\n+\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+This module provides AWS RDS token [password provider](../../operations/password-provider.md) provides temp token for accessing AWS RDS DB cluster.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjMyODI1Mg=="}, "originalCommit": {"oid": "f04c23acbc057823cce5369038adfb07ed6340c3"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NjI1ODE1OnYy", "diffSide": "RIGHT", "path": "docs/development/extensions-core/druid-aws-rds.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMjoyNDo1M1rOIOvdSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwMjoyNDo1M1rOIOvdSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjMyODUyMQ==", "bodyText": "likewise i guess it is unrealistic that you would have a load list with only this extension, maybe should include mysql or postgres here, though maybe this doesn't need spelled out and is ok as it is...", "url": "https://github.com/apache/druid/pull/9518#discussion_r552328521", "createdAt": "2021-01-06T02:24:53Z", "author": {"login": "clintropolis"}, "path": "docs/development/extensions-core/druid-aws-rds.md", "diffHunk": "@@ -0,0 +1,38 @@\n+---\n+id: druid-aws-rds\n+title: \"Druid AWS RDS Module\"\n+---\n+\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+This module provides AWS RDS token [password provider](../../operations/password-provider.md) provides temp token for accessing AWS RDS DB cluster.\n+\n+```json\n+{ \"type\": \"aws-rds-token\", \"user\": \"USER\", \"host\": \"HOST\", \"port\": PORT, \"region\": \"AWS_REGION\" }\n+```\n+\n+Before using this password provider, please make sure that you have connected all dots for db user to connect using token.\n+See [AWS Guide](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html).\n+\n+To use this extension, make sure you [include](../../development/extensions.md#loading-extensions) it in your config file:\n+\n+```\n+druid.extensions.loadList=[\"druid-aws-rds-extensions\"]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f04c23acbc057823cce5369038adfb07ed6340c3"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NjgzMTEyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/metadata/BasicDataSourceExt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwNzoyOTo1MlrOIO0iFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwNzoyOTo1MlrOIO0iFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQxMTY3MA==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * So, This class overrides,ummm copies due to lack of extensibility, the methods from base class in order to keep\n          \n          \n            \n             * track of connection properties and call {@link MetadataStorageConnectorConfig#getPassword()} everytime a new\n          \n          \n            \n             * So, This class overrides (and largely copies due to lack of extensibility), the methods from base class in order to keep\n          \n          \n            \n             * track of connection properties and call {@link MetadataStorageConnectorConfig#getPassword()} everytime a new", "url": "https://github.com/apache/druid/pull/9518#discussion_r552411670", "createdAt": "2021-01-06T07:29:52Z", "author": {"login": "clintropolis"}, "path": "server/src/main/java/org/apache/druid/metadata/BasicDataSourceExt.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.metadata;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.commons.dbcp2.BasicDataSource;\n+import org.apache.commons.dbcp2.ConnectionFactory;\n+import org.apache.druid.java.util.common.RE;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.sql.Driver;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.util.Properties;\n+\n+/**\n+ * This class exists so that {@link MetadataStorageConnectorConfig} is asked for password every time a brand new\n+ * connection is established with DB. {@link PasswordProvider} impls such as those based on AWS tokens refresh the\n+ * underlying token periodically since each token is valid for a certain period of time only.\n+ * So, This class overrides,ummm copies due to lack of extensibility, the methods from base class in order to keep\n+ * track of connection properties and call {@link MetadataStorageConnectorConfig#getPassword()} everytime a new", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f04c23acbc057823cce5369038adfb07ed6340c3"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYyODUwNDgzOnYy", "diffSide": "RIGHT", "path": "licenses.yaml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMlQyMzoyMTo0MlrOIk6E9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMlQyMzozMDowOFrOIk6NZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTU3MTE4OA==", "bodyText": "Hi @himanshug, did you adopt source code from the AWS SDK? If so, source_paths field should be added. Otherwise, license_category should be binary.", "url": "https://github.com/apache/druid/pull/9518#discussion_r575571188", "createdAt": "2021-02-12T23:21:42Z", "author": {"login": "jihoonson"}, "path": "licenses.yaml", "diffHunk": "@@ -147,6 +147,16 @@ source_paths:\n \n ---\n \n+name: AWS RDS SDK for Java\n+license_category: source\n+module: extensions/druid-aws-rds-extensions\n+license_name: Apache License version 2.0\n+version: 1.11.199\n+libraries:\n+  - com.amazonaws: aws-java-sdk-rds", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cee6fc4b211eef9dbd2bd2e8e76f2fc840df74f"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTU3MzM1MA==", "bodyText": "source code is not copied here , I guess this should be \"binary\" , yes. .. will update.", "url": "https://github.com/apache/druid/pull/9518#discussion_r575573350", "createdAt": "2021-02-12T23:30:08Z", "author": {"login": "himanshug"}, "path": "licenses.yaml", "diffHunk": "@@ -147,6 +147,16 @@ source_paths:\n \n ---\n \n+name: AWS RDS SDK for Java\n+license_category: source\n+module: extensions/druid-aws-rds-extensions\n+license_name: Apache License version 2.0\n+version: 1.11.199\n+libraries:\n+  - com.amazonaws: aws-java-sdk-rds", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTU3MTE4OA=="}, "originalCommit": {"oid": "3cee6fc4b211eef9dbd2bd2e8e76f2fc840df74f"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYyODUwOTI2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/metadata/BasicDataSourceExt.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMlQyMzoyNDoyNFrOIk6Hdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMlQyMzozMToyN1rOIk6Oww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTU3MTgzMQ==", "bodyText": "@himanshug Did you adopt this source code from org.apache.commons.dbcp2.BasicDataSource? If so, it should be added in the licenses.yaml file.", "url": "https://github.com/apache/druid/pull/9518#discussion_r575571831", "createdAt": "2021-02-12T23:24:24Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/metadata/BasicDataSourceExt.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.metadata;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.commons.dbcp2.BasicDataSource;\n+import org.apache.commons.dbcp2.ConnectionFactory;\n+import org.apache.druid.java.util.common.RE;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.sql.Driver;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.util.Properties;\n+\n+/**\n+ * This class exists so that {@link MetadataStorageConnectorConfig} is asked for password every time a brand new\n+ * connection is established with DB. {@link PasswordProvider} impls such as those based on AWS tokens refresh the\n+ * underlying token periodically since each token is valid for a certain period of time only.\n+ * So, This class overrides (and largely copies due to lack of extensibility), the methods from base class in order to keep\n+ * track of connection properties and call {@link MetadataStorageConnectorConfig#getPassword()} everytime a new\n+ * connection is setup.\n+ */\n+public class BasicDataSourceExt extends BasicDataSource\n+{\n+  private static final Logger LOGGER = new Logger(BasicDataSourceExt.class);\n+\n+  private Properties connectionProperties;\n+  private final MetadataStorageConnectorConfig connectorConfig;\n+\n+  public BasicDataSourceExt(MetadataStorageConnectorConfig connectorConfig)\n+  {\n+    this.connectorConfig = connectorConfig;\n+    this.connectionProperties = new Properties();\n+  }\n+\n+  @Override\n+  public void addConnectionProperty(String name, String value)\n+  {\n+    connectionProperties.put(name, value);\n+    super.addConnectionProperty(name, value);\n+  }\n+\n+  @Override\n+  public void removeConnectionProperty(String name)\n+  {\n+    connectionProperties.remove(name);\n+    super.removeConnectionProperty(name);\n+  }\n+\n+  @Override\n+  public void setConnectionProperties(String connectionProperties)\n+  {\n+    if (connectionProperties == null) {\n+      throw new NullPointerException(\"connectionProperties is null\");\n+    }\n+\n+    String[] entries = connectionProperties.split(\";\");\n+    Properties properties = new Properties();\n+    for (String entry : entries) {\n+      if (entry.length() > 0) {\n+        int index = entry.indexOf('=');\n+        if (index > 0) {\n+          String name = entry.substring(0, index);\n+          String value = entry.substring(index + 1);\n+          properties.setProperty(name, value);\n+        } else {\n+          // no value is empty string which is how java.util.Properties works\n+          properties.setProperty(entry, \"\");\n+        }\n+      }\n+    }\n+    this.connectionProperties = properties;\n+    super.setConnectionProperties(connectionProperties);\n+  }\n+\n+  @VisibleForTesting\n+  public Properties getConnectionProperties()\n+  {\n+    return connectionProperties;\n+  }\n+\n+  @Override\n+  protected ConnectionFactory createConnectionFactory() throws SQLException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cee6fc4b211eef9dbd2bd2e8e76f2fc840df74f"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTU3MzM2OQ==", "bodyText": "yeah, most code in this file is copied from org.apache.commons.dbcp2.BasicDataSource , will send a PR shortly.", "url": "https://github.com/apache/druid/pull/9518#discussion_r575573369", "createdAt": "2021-02-12T23:30:10Z", "author": {"login": "himanshug"}, "path": "server/src/main/java/org/apache/druid/metadata/BasicDataSourceExt.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.metadata;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.commons.dbcp2.BasicDataSource;\n+import org.apache.commons.dbcp2.ConnectionFactory;\n+import org.apache.druid.java.util.common.RE;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.sql.Driver;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.util.Properties;\n+\n+/**\n+ * This class exists so that {@link MetadataStorageConnectorConfig} is asked for password every time a brand new\n+ * connection is established with DB. {@link PasswordProvider} impls such as those based on AWS tokens refresh the\n+ * underlying token periodically since each token is valid for a certain period of time only.\n+ * So, This class overrides (and largely copies due to lack of extensibility), the methods from base class in order to keep\n+ * track of connection properties and call {@link MetadataStorageConnectorConfig#getPassword()} everytime a new\n+ * connection is setup.\n+ */\n+public class BasicDataSourceExt extends BasicDataSource\n+{\n+  private static final Logger LOGGER = new Logger(BasicDataSourceExt.class);\n+\n+  private Properties connectionProperties;\n+  private final MetadataStorageConnectorConfig connectorConfig;\n+\n+  public BasicDataSourceExt(MetadataStorageConnectorConfig connectorConfig)\n+  {\n+    this.connectorConfig = connectorConfig;\n+    this.connectionProperties = new Properties();\n+  }\n+\n+  @Override\n+  public void addConnectionProperty(String name, String value)\n+  {\n+    connectionProperties.put(name, value);\n+    super.addConnectionProperty(name, value);\n+  }\n+\n+  @Override\n+  public void removeConnectionProperty(String name)\n+  {\n+    connectionProperties.remove(name);\n+    super.removeConnectionProperty(name);\n+  }\n+\n+  @Override\n+  public void setConnectionProperties(String connectionProperties)\n+  {\n+    if (connectionProperties == null) {\n+      throw new NullPointerException(\"connectionProperties is null\");\n+    }\n+\n+    String[] entries = connectionProperties.split(\";\");\n+    Properties properties = new Properties();\n+    for (String entry : entries) {\n+      if (entry.length() > 0) {\n+        int index = entry.indexOf('=');\n+        if (index > 0) {\n+          String name = entry.substring(0, index);\n+          String value = entry.substring(index + 1);\n+          properties.setProperty(name, value);\n+        } else {\n+          // no value is empty string which is how java.util.Properties works\n+          properties.setProperty(entry, \"\");\n+        }\n+      }\n+    }\n+    this.connectionProperties = properties;\n+    super.setConnectionProperties(connectionProperties);\n+  }\n+\n+  @VisibleForTesting\n+  public Properties getConnectionProperties()\n+  {\n+    return connectionProperties;\n+  }\n+\n+  @Override\n+  protected ConnectionFactory createConnectionFactory() throws SQLException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTU3MTgzMQ=="}, "originalCommit": {"oid": "3cee6fc4b211eef9dbd2bd2e8e76f2fc840df74f"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTU3MzY5OQ==", "bodyText": "Thank you!", "url": "https://github.com/apache/druid/pull/9518#discussion_r575573699", "createdAt": "2021-02-12T23:31:27Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/metadata/BasicDataSourceExt.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.metadata;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.commons.dbcp2.BasicDataSource;\n+import org.apache.commons.dbcp2.ConnectionFactory;\n+import org.apache.druid.java.util.common.RE;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.sql.Driver;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.util.Properties;\n+\n+/**\n+ * This class exists so that {@link MetadataStorageConnectorConfig} is asked for password every time a brand new\n+ * connection is established with DB. {@link PasswordProvider} impls such as those based on AWS tokens refresh the\n+ * underlying token periodically since each token is valid for a certain period of time only.\n+ * So, This class overrides (and largely copies due to lack of extensibility), the methods from base class in order to keep\n+ * track of connection properties and call {@link MetadataStorageConnectorConfig#getPassword()} everytime a new\n+ * connection is setup.\n+ */\n+public class BasicDataSourceExt extends BasicDataSource\n+{\n+  private static final Logger LOGGER = new Logger(BasicDataSourceExt.class);\n+\n+  private Properties connectionProperties;\n+  private final MetadataStorageConnectorConfig connectorConfig;\n+\n+  public BasicDataSourceExt(MetadataStorageConnectorConfig connectorConfig)\n+  {\n+    this.connectorConfig = connectorConfig;\n+    this.connectionProperties = new Properties();\n+  }\n+\n+  @Override\n+  public void addConnectionProperty(String name, String value)\n+  {\n+    connectionProperties.put(name, value);\n+    super.addConnectionProperty(name, value);\n+  }\n+\n+  @Override\n+  public void removeConnectionProperty(String name)\n+  {\n+    connectionProperties.remove(name);\n+    super.removeConnectionProperty(name);\n+  }\n+\n+  @Override\n+  public void setConnectionProperties(String connectionProperties)\n+  {\n+    if (connectionProperties == null) {\n+      throw new NullPointerException(\"connectionProperties is null\");\n+    }\n+\n+    String[] entries = connectionProperties.split(\";\");\n+    Properties properties = new Properties();\n+    for (String entry : entries) {\n+      if (entry.length() > 0) {\n+        int index = entry.indexOf('=');\n+        if (index > 0) {\n+          String name = entry.substring(0, index);\n+          String value = entry.substring(index + 1);\n+          properties.setProperty(name, value);\n+        } else {\n+          // no value is empty string which is how java.util.Properties works\n+          properties.setProperty(entry, \"\");\n+        }\n+      }\n+    }\n+    this.connectionProperties = properties;\n+    super.setConnectionProperties(connectionProperties);\n+  }\n+\n+  @VisibleForTesting\n+  public Properties getConnectionProperties()\n+  {\n+    return connectionProperties;\n+  }\n+\n+  @Override\n+  protected ConnectionFactory createConnectionFactory() throws SQLException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTU3MTgzMQ=="}, "originalCommit": {"oid": "3cee6fc4b211eef9dbd2bd2e8e76f2fc840df74f"}, "originalPosition": 101}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2635, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}