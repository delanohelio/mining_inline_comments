{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwMDU5Nzg2", "number": 10412, "title": "prometheus metric exporter", "bodyText": "Fixes #8621\n\n\nAdds a new extension prometheus-emitter to expose Druid metrics for collection directly by a Prometheus server.\n\n\n\n\n\n\n\n\nThis PR has:\n\n been self-reviewed.\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths, ensuring the threshold for code coverage is met.\n added integration tests.\n been tested in a test Druid cluster.\n\n\n\nKey changed/added classes in this PR\n\norg.apache.druid.emitter.prometheus.*\n\nThis is re-open the PR here #8621", "createdAt": "2020-09-21T06:03:33Z", "url": "https://github.com/apache/druid/pull/10412", "merged": true, "mergeCommit": {"oid": "a57c28e9ce2829f45e31d29276bf14d9f7afbb50"}, "closed": true, "closedAt": "2021-03-09T22:37:31Z", "author": {"login": "Tiaaa"}, "timelineItems": {"totalCount": 52, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOqOjYgFqTUwMTM1NTE0MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABd_e7axgFqTYwMjc2NDc5MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMzU1MTQx", "url": "https://github.com/apache/druid/pull/10412#pullrequestreview-501355141", "createdAt": "2020-10-02T18:24:05Z", "commit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODoyNDowNVrOHb3c7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODoyNDowNVrOHb3c7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4MjEyNw==", "bodyText": "Are these conversion a good idea?\nIt would mean that these metrics will be slightly different from how they are described in this documentation. https://druid.apache.org/docs/latest/operations/metrics.html", "url": "https://github.com/apache/druid/pull/10412#discussion_r498982127", "createdAt": "2020-10-02T18:24:05Z", "author": {"login": "jinfwhuang"}, "path": "extensions-contrib/prometheus-emitter/src/main/resources/defaultMetrics.json", "diffHunk": "@@ -0,0 +1,128 @@\n+{\n+  \"query/time\" : { \"dimensions\" : [\"dataSource\", \"type\"], \"type\" : \"timer\", \"conversionFactor\": 1000.0, \"help\":  \"Seconds taken to complete a query.\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MjU0MTEx", "url": "https://github.com/apache/druid/pull/10412#pullrequestreview-518254111", "createdAt": "2020-10-28T01:00:21Z", "commit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMTowMDoyMlrOHpWRGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNDo0NjoxNlrOHpZ51g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzExODQ4OQ==", "bodyText": "potential bug, deltas can be negative but Prometheus counter accepts only non-negative increment.", "url": "https://github.com/apache/druid/pull/10412#discussion_r513118489", "createdAt": "2020-10-28T01:00:22Z", "author": {"login": "ArvinZheng"}, "path": "extensions-contrib/prometheus-emitter/src/main/resources/defaultMetrics.json", "diffHunk": "@@ -0,0 +1,128 @@\n+{\n+  \"query/time\" : { \"dimensions\" : [\"dataSource\", \"type\"], \"type\" : \"timer\", \"conversionFactor\": 1000.0, \"help\":  \"Seconds taken to complete a query.\"},\n+  \"query/bytes\" : { \"dimensions\" : [\"dataSource\", \"type\"], \"type\" : \"count\", \"help\":  \"Number of bytes returned in query response.\"},\n+  \"query/node/time\" : { \"dimensions\" : [\"server\"], \"type\" : \"timer\", \"conversionFactor\": 1000.0, \"help\": \"Seconds taken to query individual historical/realtime processes.\"},\n+  \"query/node/ttfb\" : { \"dimensions\" : [\"server\"], \"type\" : \"timer\", \"help\":  \"Time to first byte. Seconds elapsed until Broker starts receiving the response from individual historical/realtime processes.\"},\n+  \"query/node/bytes\" : { \"dimensions\" : [\"server\"], \"type\" : \"count\", \"help\": \"Number of bytes returned from querying individual historical/realtime processes.\"},\n+  \"query/node/backpressure\": { \"dimensions\" : [\"server\"], \"type\" : \"timer\", \"help\": \"Seconds that the channel to this process has spent suspended due to backpressure.\"},\n+  \"query/intervalChunk/time\" : { \"dimensions\" : [], \"type\" : \"timer\", \"conversionFactor\": 1000.0, \"help\": \"Only emitted if interval chunking is enabled. Milliseconds required to query an interval chunk. This metric is deprecated and will be removed in the future because interval chunking is deprecated.\"},\n+\n+  \"query/segment/time\" : { \"dimensions\" : [], \"type\" : \"timer\", \"conversionFactor\": 1000.0, \"help\": \"Seconds taken to query individual segment. Includes time to page in the segment from disk.\"},\n+  \"query/wait/time\" : { \"dimensions\" : [], \"type\" : \"timer\", \"conversionFactor\": 1000.0, \"help\": \"Seconds spent waiting for a segment to be scanned.\"},\n+  \"segment/scan/pending\" : { \"dimensions\" : [], \"type\" : \"gauge\", \"help\": \"Number of segments in queue waiting to be scanned.\"},\n+  \"query/segmentAndCache/time\" : { \"dimensions\" : [], \"type\" : \"timer\", \"conversionFactor\": 1000.0, \"help\": \"Seconds taken to query individual segment or hit the cache (if it is enabled on the Historical process).\"},\n+  \"query/cpu/time\" : { \"dimensions\" : [\"dataSource\", \"type\"], \"type\" : \"timer\", \"conversionFactor\": \"1000000\", \"help\": \"Seconds of CPU time taken to complete a query\"},\n+\n+  \"query/count\" : { \"dimensions\" : [], \"type\" : \"count\", \"help\": \"Number of total queries\" },\n+  \"query/success/count\" : { \"dimensions\" : [], \"type\" : \"count\", \"help\": \"Number of queries successfully processed\"},\n+  \"query/failed/count\" : { \"dimensions\" : [], \"type\" : \"count\", \"help\": \"Number of failed queries\"},\n+  \"query/interrupted/count\" : { \"dimensions\" : [], \"type\" : \"count\", \"help\": \"Number of queries interrupted due to cancellation or timeout\"},\n+\n+  \"query/cache/delta/numEntries\" : { \"dimensions\" : [], \"type\" : \"count\", \"help\": \"Number of entries in cache\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyNDU5Mw==", "bodyText": "final, and static maybe, so that we can reuse this object/regex in other places", "url": "https://github.com/apache/druid/pull/10412#discussion_r513124593", "createdAt": "2020-10-28T01:23:08Z", "author": {"login": "ArvinZheng"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/PrometheusEmitterConfig.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.base.Preconditions;\n+\n+import javax.annotation.Nullable;\n+import javax.xml.ws.BindingType;\n+import java.util.regex.Pattern;\n+\n+/**\n+ *\n+ */\n+public class PrometheusEmitterConfig\n+{\n+\n+  Pattern pattern = Pattern.compile(\"[a-zA-Z_:][a-zA-Z0-9_:]*\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyNTA0NQ==", "bodyText": "Reuse the pattern in PrometheusEmitterConfig", "url": "https://github.com/apache/druid/pull/10412#discussion_r513125045", "createdAt": "2020-10-28T01:24:38Z", "author": {"login": "ArvinZheng"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/PrometheusEmitter.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.exporter.HTTPServer;\n+import io.prometheus.client.exporter.PushGateway;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.java.util.emitter.core.Emitter;\n+import org.apache.druid.java.util.emitter.core.Event;\n+import org.apache.druid.java.util.emitter.service.ServiceMetricEvent;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ *\n+ */\n+public class PrometheusEmitter implements Emitter\n+{\n+\n+  private static final Logger log = new Logger(PrometheusEmitter.class);\n+  private final Metrics metrics;\n+  private final PrometheusEmitterConfig config;\n+  private final PrometheusEmitterConfig.Strategy strategy;\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z0-9_][^a-zA-Z0-9_]*\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyNTEyNQ==", "bodyText": "Reuse the pattern in PrometheusEmitterConfig", "url": "https://github.com/apache/druid/pull/10412#discussion_r513125125", "createdAt": "2020-10-28T01:24:51Z", "author": {"login": "ArvinZheng"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/Metrics.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Strings;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.SimpleCollector;\n+import org.apache.druid.java.util.common.ISE;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.SortedSet;\n+import java.util.regex.Pattern;\n+\n+public class Metrics\n+{\n+\n+  private static final Logger log = new Logger(Metrics.class);\n+  private final Map<String, DimensionsAndCollector> map = new HashMap<>();\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z_:][^a-zA-Z0-9_:]*\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NTEyMg==", "bodyText": "maybe we can rename the map to registeredMetrics and then we could rename this method to getRegisteredMetrics(), I feel like this will be easier to read", "url": "https://github.com/apache/druid/pull/10412#discussion_r513165122", "createdAt": "2020-10-28T03:53:57Z", "author": {"login": "ArvinZheng"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/Metrics.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Strings;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.SimpleCollector;\n+import org.apache.druid.java.util.common.ISE;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.SortedSet;\n+import java.util.regex.Pattern;\n+\n+public class Metrics\n+{\n+\n+  private static final Logger log = new Logger(Metrics.class);\n+  private final Map<String, DimensionsAndCollector> map = new HashMap<>();\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z_:][^a-zA-Z0-9_:]*\");\n+\n+  public DimensionsAndCollector getByName(String name, String service)\n+  {\n+    if (map.containsKey(name)) {\n+      return map.get(name);\n+    } else if (map.containsKey(service + \"_\" + name)) {\n+      return map.get(service + \"_\" + name);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public Metrics(String namespace, String path)\n+  {\n+    Map<String, Metric> metrics = readMap(path);\n+    for (Map.Entry<String, Metric> entry : metrics.entrySet()) {\n+      String name = entry.getKey();\n+      Metric metric = entry.getValue();\n+      Metric.Type type = metric.type;\n+      String[] dimensions = metric.dimensions.toArray(new String[0]);\n+      String formattedName = pattern.matcher(StringUtils.toLowerCase(name)).replaceAll(\"_\");\n+      SimpleCollector collector = null;\n+      if (Metric.Type.count.equals(type)) {\n+        collector = new Counter.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .help(metric.help)\n+            .register();\n+      } else if (Metric.Type.gauge.equals(type)) {\n+        collector = new Gauge.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .help(metric.help)\n+            .register();\n+      } else if (Metric.Type.timer.equals(type)) {\n+        collector = new Histogram.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .buckets(.1, .25, .5, .75, 1, 2.5, 5, 7.5, 10, 30, 60, 120, 300)\n+            .help(metric.help)\n+            .register();\n+      } else {\n+        log.error(\"Unrecognized metric type [%s]\", type);\n+      }\n+\n+      if (collector != null) {\n+        map.put(name, new DimensionsAndCollector(dimensions, collector, metric.conversionFactor));\n+      }\n+    }\n+\n+  }\n+\n+  private Map<String, Metric> readMap(String path)\n+  {\n+    try {\n+      InputStream is;\n+      if (Strings.isNullOrEmpty(path)) {\n+        log.info(\"Using default metric dimension and types\");\n+        is = this.getClass().getClassLoader().getResourceAsStream(\"defaultMetrics.json\");\n+      } else {\n+        log.info(\"Using metric dimensions at types at [%s]\", path);\n+        is = new FileInputStream(new File(path));\n+      }\n+      return mapper.readerFor(new TypeReference<Map<String, Metric>>()\n+      {\n+      }).readValue(is);\n+    }\n+    catch (IOException e) {\n+      throw new ISE(e, \"Failed to parse metric dimensions and types\");\n+    }\n+  }\n+\n+  public Map<String, DimensionsAndCollector> getMap()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NTc5OQ==", "bodyText": "maybe readConfig or loadConfig?", "url": "https://github.com/apache/druid/pull/10412#discussion_r513165799", "createdAt": "2020-10-28T03:56:37Z", "author": {"login": "ArvinZheng"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/Metrics.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Strings;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.SimpleCollector;\n+import org.apache.druid.java.util.common.ISE;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.SortedSet;\n+import java.util.regex.Pattern;\n+\n+public class Metrics\n+{\n+\n+  private static final Logger log = new Logger(Metrics.class);\n+  private final Map<String, DimensionsAndCollector> map = new HashMap<>();\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z_:][^a-zA-Z0-9_:]*\");\n+\n+  public DimensionsAndCollector getByName(String name, String service)\n+  {\n+    if (map.containsKey(name)) {\n+      return map.get(name);\n+    } else if (map.containsKey(service + \"_\" + name)) {\n+      return map.get(service + \"_\" + name);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public Metrics(String namespace, String path)\n+  {\n+    Map<String, Metric> metrics = readMap(path);\n+    for (Map.Entry<String, Metric> entry : metrics.entrySet()) {\n+      String name = entry.getKey();\n+      Metric metric = entry.getValue();\n+      Metric.Type type = metric.type;\n+      String[] dimensions = metric.dimensions.toArray(new String[0]);\n+      String formattedName = pattern.matcher(StringUtils.toLowerCase(name)).replaceAll(\"_\");\n+      SimpleCollector collector = null;\n+      if (Metric.Type.count.equals(type)) {\n+        collector = new Counter.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .help(metric.help)\n+            .register();\n+      } else if (Metric.Type.gauge.equals(type)) {\n+        collector = new Gauge.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .help(metric.help)\n+            .register();\n+      } else if (Metric.Type.timer.equals(type)) {\n+        collector = new Histogram.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .buckets(.1, .25, .5, .75, 1, 2.5, 5, 7.5, 10, 30, 60, 120, 300)\n+            .help(metric.help)\n+            .register();\n+      } else {\n+        log.error(\"Unrecognized metric type [%s]\", type);\n+      }\n+\n+      if (collector != null) {\n+        map.put(name, new DimensionsAndCollector(dimensions, collector, metric.conversionFactor));\n+      }\n+    }\n+\n+  }\n+\n+  private Map<String, Metric> readMap(String path)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NjQyOQ==", "bodyText": "typo, metric dimensions at types -> metric dimensions and types, maybe we could replace it by metric configuration", "url": "https://github.com/apache/druid/pull/10412#discussion_r513166429", "createdAt": "2020-10-28T03:59:23Z", "author": {"login": "ArvinZheng"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/Metrics.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Strings;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.SimpleCollector;\n+import org.apache.druid.java.util.common.ISE;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.SortedSet;\n+import java.util.regex.Pattern;\n+\n+public class Metrics\n+{\n+\n+  private static final Logger log = new Logger(Metrics.class);\n+  private final Map<String, DimensionsAndCollector> map = new HashMap<>();\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z_:][^a-zA-Z0-9_:]*\");\n+\n+  public DimensionsAndCollector getByName(String name, String service)\n+  {\n+    if (map.containsKey(name)) {\n+      return map.get(name);\n+    } else if (map.containsKey(service + \"_\" + name)) {\n+      return map.get(service + \"_\" + name);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public Metrics(String namespace, String path)\n+  {\n+    Map<String, Metric> metrics = readMap(path);\n+    for (Map.Entry<String, Metric> entry : metrics.entrySet()) {\n+      String name = entry.getKey();\n+      Metric metric = entry.getValue();\n+      Metric.Type type = metric.type;\n+      String[] dimensions = metric.dimensions.toArray(new String[0]);\n+      String formattedName = pattern.matcher(StringUtils.toLowerCase(name)).replaceAll(\"_\");\n+      SimpleCollector collector = null;\n+      if (Metric.Type.count.equals(type)) {\n+        collector = new Counter.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .help(metric.help)\n+            .register();\n+      } else if (Metric.Type.gauge.equals(type)) {\n+        collector = new Gauge.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .help(metric.help)\n+            .register();\n+      } else if (Metric.Type.timer.equals(type)) {\n+        collector = new Histogram.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .buckets(.1, .25, .5, .75, 1, 2.5, 5, 7.5, 10, 30, 60, 120, 300)\n+            .help(metric.help)\n+            .register();\n+      } else {\n+        log.error(\"Unrecognized metric type [%s]\", type);\n+      }\n+\n+      if (collector != null) {\n+        map.put(name, new DimensionsAndCollector(dimensions, collector, metric.conversionFactor));\n+      }\n+    }\n+\n+  }\n+\n+  private Map<String, Metric> readMap(String path)\n+  {\n+    try {\n+      InputStream is;\n+      if (Strings.isNullOrEmpty(path)) {\n+        log.info(\"Using default metric dimension and types\");\n+        is = this.getClass().getClassLoader().getResourceAsStream(\"defaultMetrics.json\");\n+      } else {\n+        log.info(\"Using metric dimensions at types at [%s]\", path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NzE2NQ==", "bodyText": "maybe replace metric dimensions and types by metric configuration?", "url": "https://github.com/apache/druid/pull/10412#discussion_r513167165", "createdAt": "2020-10-28T04:02:26Z", "author": {"login": "ArvinZheng"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/Metrics.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Strings;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.SimpleCollector;\n+import org.apache.druid.java.util.common.ISE;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.SortedSet;\n+import java.util.regex.Pattern;\n+\n+public class Metrics\n+{\n+\n+  private static final Logger log = new Logger(Metrics.class);\n+  private final Map<String, DimensionsAndCollector> map = new HashMap<>();\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z_:][^a-zA-Z0-9_:]*\");\n+\n+  public DimensionsAndCollector getByName(String name, String service)\n+  {\n+    if (map.containsKey(name)) {\n+      return map.get(name);\n+    } else if (map.containsKey(service + \"_\" + name)) {\n+      return map.get(service + \"_\" + name);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public Metrics(String namespace, String path)\n+  {\n+    Map<String, Metric> metrics = readMap(path);\n+    for (Map.Entry<String, Metric> entry : metrics.entrySet()) {\n+      String name = entry.getKey();\n+      Metric metric = entry.getValue();\n+      Metric.Type type = metric.type;\n+      String[] dimensions = metric.dimensions.toArray(new String[0]);\n+      String formattedName = pattern.matcher(StringUtils.toLowerCase(name)).replaceAll(\"_\");\n+      SimpleCollector collector = null;\n+      if (Metric.Type.count.equals(type)) {\n+        collector = new Counter.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .help(metric.help)\n+            .register();\n+      } else if (Metric.Type.gauge.equals(type)) {\n+        collector = new Gauge.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .help(metric.help)\n+            .register();\n+      } else if (Metric.Type.timer.equals(type)) {\n+        collector = new Histogram.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .buckets(.1, .25, .5, .75, 1, 2.5, 5, 7.5, 10, 30, 60, 120, 300)\n+            .help(metric.help)\n+            .register();\n+      } else {\n+        log.error(\"Unrecognized metric type [%s]\", type);\n+      }\n+\n+      if (collector != null) {\n+        map.put(name, new DimensionsAndCollector(dimensions, collector, metric.conversionFactor));\n+      }\n+    }\n+\n+  }\n+\n+  private Map<String, Metric> readMap(String path)\n+  {\n+    try {\n+      InputStream is;\n+      if (Strings.isNullOrEmpty(path)) {\n+        log.info(\"Using default metric dimension and types\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2NzI4Ng==", "bodyText": "same as above", "url": "https://github.com/apache/druid/pull/10412#discussion_r513167286", "createdAt": "2020-10-28T04:02:54Z", "author": {"login": "ArvinZheng"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/Metrics.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Strings;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.SimpleCollector;\n+import org.apache.druid.java.util.common.ISE;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.SortedSet;\n+import java.util.regex.Pattern;\n+\n+public class Metrics\n+{\n+\n+  private static final Logger log = new Logger(Metrics.class);\n+  private final Map<String, DimensionsAndCollector> map = new HashMap<>();\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z_:][^a-zA-Z0-9_:]*\");\n+\n+  public DimensionsAndCollector getByName(String name, String service)\n+  {\n+    if (map.containsKey(name)) {\n+      return map.get(name);\n+    } else if (map.containsKey(service + \"_\" + name)) {\n+      return map.get(service + \"_\" + name);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public Metrics(String namespace, String path)\n+  {\n+    Map<String, Metric> metrics = readMap(path);\n+    for (Map.Entry<String, Metric> entry : metrics.entrySet()) {\n+      String name = entry.getKey();\n+      Metric metric = entry.getValue();\n+      Metric.Type type = metric.type;\n+      String[] dimensions = metric.dimensions.toArray(new String[0]);\n+      String formattedName = pattern.matcher(StringUtils.toLowerCase(name)).replaceAll(\"_\");\n+      SimpleCollector collector = null;\n+      if (Metric.Type.count.equals(type)) {\n+        collector = new Counter.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .help(metric.help)\n+            .register();\n+      } else if (Metric.Type.gauge.equals(type)) {\n+        collector = new Gauge.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .help(metric.help)\n+            .register();\n+      } else if (Metric.Type.timer.equals(type)) {\n+        collector = new Histogram.Builder()\n+            .namespace(namespace)\n+            .name(formattedName)\n+            .labelNames(dimensions)\n+            .buckets(.1, .25, .5, .75, 1, 2.5, 5, 7.5, 10, 30, 60, 120, 300)\n+            .help(metric.help)\n+            .register();\n+      } else {\n+        log.error(\"Unrecognized metric type [%s]\", type);\n+      }\n+\n+      if (collector != null) {\n+        map.put(name, new DimensionsAndCollector(dimensions, collector, metric.conversionFactor));\n+      }\n+    }\n+\n+  }\n+\n+  private Map<String, Metric> readMap(String path)\n+  {\n+    try {\n+      InputStream is;\n+      if (Strings.isNullOrEmpty(path)) {\n+        log.info(\"Using default metric dimension and types\");\n+        is = this.getClass().getClassLoader().getResourceAsStream(\"defaultMetrics.json\");\n+      } else {\n+        log.info(\"Using metric dimensions at types at [%s]\", path);\n+        is = new FileInputStream(new File(path));\n+      }\n+      return mapper.readerFor(new TypeReference<Map<String, Metric>>()\n+      {\n+      }).readValue(is);\n+    }\n+    catch (IOException e) {\n+      throw new ISE(e, \"Failed to parse metric dimensions and types\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE2OTU2Mg==", "bodyText": "private?", "url": "https://github.com/apache/druid/pull/10412#discussion_r513169562", "createdAt": "2020-10-28T04:11:42Z", "author": {"login": "ArvinZheng"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/PrometheusEmitter.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.exporter.HTTPServer;\n+import io.prometheus.client.exporter.PushGateway;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.java.util.emitter.core.Emitter;\n+import org.apache.druid.java.util.emitter.core.Event;\n+import org.apache.druid.java.util.emitter.service.ServiceMetricEvent;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ *\n+ */\n+public class PrometheusEmitter implements Emitter\n+{\n+\n+  private static final Logger log = new Logger(PrometheusEmitter.class);\n+  private final Metrics metrics;\n+  private final PrometheusEmitterConfig config;\n+  private final PrometheusEmitterConfig.Strategy strategy;\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z0-9_][^a-zA-Z0-9_]*\");\n+\n+  private HTTPServer server;\n+  private PushGateway pushGateway;\n+  private String identifier;\n+\n+  static PrometheusEmitter of(PrometheusEmitterConfig config)\n+  {\n+    return new PrometheusEmitter(config);\n+  }\n+\n+  public PrometheusEmitter(PrometheusEmitterConfig config)\n+  {\n+    this.config = config;\n+    this.strategy = config.getStrategy();\n+    metrics = new Metrics(config.getNamespace(), config.getDimensionMapPath());\n+  }\n+\n+\n+  @Override\n+  public void start()\n+  {\n+    if (strategy.equals(PrometheusEmitterConfig.Strategy.exporter)) {\n+      if (server == null) {\n+        try {\n+          server = new HTTPServer(config.getPort());\n+        }\n+        catch (IOException e) {\n+          log.error(e, \"Unable to start prometheus HTTPServer\");\n+        }\n+      } else {\n+        log.error(\"HTTPServer is already started\");\n+      }\n+    } else if (strategy.equals(PrometheusEmitterConfig.Strategy.pushgateway)) {\n+      pushGateway = new PushGateway(config.getPushGatewayAddress());\n+    }\n+\n+  }\n+\n+  @Override\n+  public void emit(Event event)\n+  {\n+    if (event instanceof ServiceMetricEvent) {\n+      emitMetric((ServiceMetricEvent) event);\n+    }\n+  }\n+\n+  void emitMetric(ServiceMetricEvent metricEvent)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3MzY0Ng==", "bodyText": "potential NPE? if the configured strategy is not pushgateway, then this pushGateway wouldn't have been instantiated", "url": "https://github.com/apache/druid/pull/10412#discussion_r513173646", "createdAt": "2020-10-28T04:28:54Z", "author": {"login": "ArvinZheng"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/PrometheusEmitter.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.exporter.HTTPServer;\n+import io.prometheus.client.exporter.PushGateway;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.java.util.emitter.core.Emitter;\n+import org.apache.druid.java.util.emitter.core.Event;\n+import org.apache.druid.java.util.emitter.service.ServiceMetricEvent;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ *\n+ */\n+public class PrometheusEmitter implements Emitter\n+{\n+\n+  private static final Logger log = new Logger(PrometheusEmitter.class);\n+  private final Metrics metrics;\n+  private final PrometheusEmitterConfig config;\n+  private final PrometheusEmitterConfig.Strategy strategy;\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z0-9_][^a-zA-Z0-9_]*\");\n+\n+  private HTTPServer server;\n+  private PushGateway pushGateway;\n+  private String identifier;\n+\n+  static PrometheusEmitter of(PrometheusEmitterConfig config)\n+  {\n+    return new PrometheusEmitter(config);\n+  }\n+\n+  public PrometheusEmitter(PrometheusEmitterConfig config)\n+  {\n+    this.config = config;\n+    this.strategy = config.getStrategy();\n+    metrics = new Metrics(config.getNamespace(), config.getDimensionMapPath());\n+  }\n+\n+\n+  @Override\n+  public void start()\n+  {\n+    if (strategy.equals(PrometheusEmitterConfig.Strategy.exporter)) {\n+      if (server == null) {\n+        try {\n+          server = new HTTPServer(config.getPort());\n+        }\n+        catch (IOException e) {\n+          log.error(e, \"Unable to start prometheus HTTPServer\");\n+        }\n+      } else {\n+        log.error(\"HTTPServer is already started\");\n+      }\n+    } else if (strategy.equals(PrometheusEmitterConfig.Strategy.pushgateway)) {\n+      pushGateway = new PushGateway(config.getPushGatewayAddress());\n+    }\n+\n+  }\n+\n+  @Override\n+  public void emit(Event event)\n+  {\n+    if (event instanceof ServiceMetricEvent) {\n+      emitMetric((ServiceMetricEvent) event);\n+    }\n+  }\n+\n+  void emitMetric(ServiceMetricEvent metricEvent)\n+  {\n+    String name = metricEvent.getMetric();\n+    String service = metricEvent.getService();\n+    Map<String, Object> userDims = metricEvent.getUserDims();\n+    identifier = (userDims.get(\"task\") == null ? metricEvent.getHost() : (String) userDims.get(\"task\"));\n+    Number value = metricEvent.getValue();\n+\n+    DimensionsAndCollector metric = metrics.getByName(name, service);\n+    if (metric != null) {\n+      String[] labelValues = new String[metric.getDimensions().length];\n+      String[] labelNames = metric.getDimensions();\n+      for (int i = 0; i < labelValues.length; i++) {\n+        String labelName = labelNames[i];\n+        //labelName is controlled by the user. Instead of potential NPE on invalid labelName we use \"unknown\" as the dimension value\n+        Object userDim = userDims.get(labelName);\n+        labelValues[i] = userDim != null ? pattern.matcher(userDim.toString()).replaceAll(\"_\") : \"unknown\";\n+      }\n+\n+      if (metric.getCollector() instanceof Counter) {\n+        ((Counter) metric.getCollector()).labels(labelValues).inc(value.doubleValue());\n+      } else if (metric.getCollector() instanceof Gauge) {\n+        ((Gauge) metric.getCollector()).labels(labelValues).set(value.doubleValue());\n+      } else if (metric.getCollector() instanceof Histogram) {\n+        ((Histogram) metric.getCollector()).labels(labelValues).observe(value.doubleValue() / metric.getConversionFactor());\n+      } else {\n+        log.error(\"Unrecognized metric type [%s]\", metric.getCollector().getClass());\n+      }\n+    } else {\n+      log.debug(\"Unmapped metric [%s]\", name);\n+    }\n+  }\n+\n+  @Override\n+  public void flush()\n+  {\n+    Map<String, DimensionsAndCollector> map = metrics.getMap();\n+    try {\n+      for (DimensionsAndCollector collector : map.values()) {\n+        pushGateway.push(collector.getCollector(), config.getNamespace(), ImmutableMap.of(config.getNamespace(), identifier));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3NTAyNw==", "bodyText": "Also should we use a more meaningful label name for identifier instead of using the config.getNamespace()?", "url": "https://github.com/apache/druid/pull/10412#discussion_r513175027", "createdAt": "2020-10-28T04:34:07Z", "author": {"login": "ArvinZheng"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/PrometheusEmitter.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.exporter.HTTPServer;\n+import io.prometheus.client.exporter.PushGateway;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.java.util.emitter.core.Emitter;\n+import org.apache.druid.java.util.emitter.core.Event;\n+import org.apache.druid.java.util.emitter.service.ServiceMetricEvent;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ *\n+ */\n+public class PrometheusEmitter implements Emitter\n+{\n+\n+  private static final Logger log = new Logger(PrometheusEmitter.class);\n+  private final Metrics metrics;\n+  private final PrometheusEmitterConfig config;\n+  private final PrometheusEmitterConfig.Strategy strategy;\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z0-9_][^a-zA-Z0-9_]*\");\n+\n+  private HTTPServer server;\n+  private PushGateway pushGateway;\n+  private String identifier;\n+\n+  static PrometheusEmitter of(PrometheusEmitterConfig config)\n+  {\n+    return new PrometheusEmitter(config);\n+  }\n+\n+  public PrometheusEmitter(PrometheusEmitterConfig config)\n+  {\n+    this.config = config;\n+    this.strategy = config.getStrategy();\n+    metrics = new Metrics(config.getNamespace(), config.getDimensionMapPath());\n+  }\n+\n+\n+  @Override\n+  public void start()\n+  {\n+    if (strategy.equals(PrometheusEmitterConfig.Strategy.exporter)) {\n+      if (server == null) {\n+        try {\n+          server = new HTTPServer(config.getPort());\n+        }\n+        catch (IOException e) {\n+          log.error(e, \"Unable to start prometheus HTTPServer\");\n+        }\n+      } else {\n+        log.error(\"HTTPServer is already started\");\n+      }\n+    } else if (strategy.equals(PrometheusEmitterConfig.Strategy.pushgateway)) {\n+      pushGateway = new PushGateway(config.getPushGatewayAddress());\n+    }\n+\n+  }\n+\n+  @Override\n+  public void emit(Event event)\n+  {\n+    if (event instanceof ServiceMetricEvent) {\n+      emitMetric((ServiceMetricEvent) event);\n+    }\n+  }\n+\n+  void emitMetric(ServiceMetricEvent metricEvent)\n+  {\n+    String name = metricEvent.getMetric();\n+    String service = metricEvent.getService();\n+    Map<String, Object> userDims = metricEvent.getUserDims();\n+    identifier = (userDims.get(\"task\") == null ? metricEvent.getHost() : (String) userDims.get(\"task\"));\n+    Number value = metricEvent.getValue();\n+\n+    DimensionsAndCollector metric = metrics.getByName(name, service);\n+    if (metric != null) {\n+      String[] labelValues = new String[metric.getDimensions().length];\n+      String[] labelNames = metric.getDimensions();\n+      for (int i = 0; i < labelValues.length; i++) {\n+        String labelName = labelNames[i];\n+        //labelName is controlled by the user. Instead of potential NPE on invalid labelName we use \"unknown\" as the dimension value\n+        Object userDim = userDims.get(labelName);\n+        labelValues[i] = userDim != null ? pattern.matcher(userDim.toString()).replaceAll(\"_\") : \"unknown\";\n+      }\n+\n+      if (metric.getCollector() instanceof Counter) {\n+        ((Counter) metric.getCollector()).labels(labelValues).inc(value.doubleValue());\n+      } else if (metric.getCollector() instanceof Gauge) {\n+        ((Gauge) metric.getCollector()).labels(labelValues).set(value.doubleValue());\n+      } else if (metric.getCollector() instanceof Histogram) {\n+        ((Histogram) metric.getCollector()).labels(labelValues).observe(value.doubleValue() / metric.getConversionFactor());\n+      } else {\n+        log.error(\"Unrecognized metric type [%s]\", metric.getCollector().getClass());\n+      }\n+    } else {\n+      log.debug(\"Unmapped metric [%s]\", name);\n+    }\n+  }\n+\n+  @Override\n+  public void flush()\n+  {\n+    Map<String, DimensionsAndCollector> map = metrics.getMap();\n+    try {\n+      for (DimensionsAndCollector collector : map.values()) {\n+        pushGateway.push(collector.getCollector(), config.getNamespace(), ImmutableMap.of(config.getNamespace(), identifier));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3MzY0Ng=="}, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3NTgyMw==", "bodyText": "we should schedule a task to push updates periodically when the strategy is set to pushgateway", "url": "https://github.com/apache/druid/pull/10412#discussion_r513175823", "createdAt": "2020-10-28T04:37:16Z", "author": {"login": "ArvinZheng"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/PrometheusEmitter.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.exporter.HTTPServer;\n+import io.prometheus.client.exporter.PushGateway;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.java.util.emitter.core.Emitter;\n+import org.apache.druid.java.util.emitter.core.Event;\n+import org.apache.druid.java.util.emitter.service.ServiceMetricEvent;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+/**\n+ *\n+ */\n+public class PrometheusEmitter implements Emitter\n+{\n+\n+  private static final Logger log = new Logger(PrometheusEmitter.class);\n+  private final Metrics metrics;\n+  private final PrometheusEmitterConfig config;\n+  private final PrometheusEmitterConfig.Strategy strategy;\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z0-9_][^a-zA-Z0-9_]*\");\n+\n+  private HTTPServer server;\n+  private PushGateway pushGateway;\n+  private String identifier;\n+\n+  static PrometheusEmitter of(PrometheusEmitterConfig config)\n+  {\n+    return new PrometheusEmitter(config);\n+  }\n+\n+  public PrometheusEmitter(PrometheusEmitterConfig config)\n+  {\n+    this.config = config;\n+    this.strategy = config.getStrategy();\n+    metrics = new Metrics(config.getNamespace(), config.getDimensionMapPath());\n+  }\n+\n+\n+  @Override\n+  public void start()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3ODA3MA==", "bodyText": "return Optional.ofNullable(map.get(name)).orElse(map.get(service + \"_\" + name));", "url": "https://github.com/apache/druid/pull/10412#discussion_r513178070", "createdAt": "2020-10-28T04:46:16Z", "author": {"login": "ArvinZheng"}, "path": "extensions-contrib/prometheus-emitter/src/main/java/org/apache/druid/emitter/prometheus/Metrics.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.emitter.prometheus;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Strings;\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Gauge;\n+import io.prometheus.client.Histogram;\n+import io.prometheus.client.SimpleCollector;\n+import org.apache.druid.java.util.common.ISE;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.logger.Logger;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.SortedSet;\n+import java.util.regex.Pattern;\n+\n+public class Metrics\n+{\n+\n+  private static final Logger log = new Logger(Metrics.class);\n+  private final Map<String, DimensionsAndCollector> map = new HashMap<>();\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private final Pattern pattern = Pattern.compile(\"[^a-zA-Z_:][^a-zA-Z0-9_:]*\");\n+\n+  public DimensionsAndCollector getByName(String name, String service)\n+  {\n+    if (map.containsKey(name)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0842ebacfc24789926c71879b88cdff5c95ba325"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccbfbb7ae7f97b955a9d6384c5d24111186a66c2", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/ccbfbb7ae7f97b955a9d6384c5d24111186a66c2", "committedDate": "2021-01-16T02:27:01Z", "message": "prometheus-emitter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb8eb39996da6b907b31771f5ce7160c89daf078", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/bb8eb39996da6b907b31771f5ce7160c89daf078", "committedDate": "2021-01-16T02:27:01Z", "message": "use existing jetty server to expose prometheus collection endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad4346675308091b1eb593de3252eaed1540976b", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/ad4346675308091b1eb593de3252eaed1540976b", "committedDate": "2021-01-16T02:27:01Z", "message": "unused variables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b04eaba556ea8fd4013b1908482df947bf1445f4", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/b04eaba556ea8fd4013b1908482df947bf1445f4", "committedDate": "2021-01-16T02:27:01Z", "message": "better variable names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82f408bc82d439aa279b975f64b27cfa5b09b527", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/82f408bc82d439aa279b975f64b27cfa5b09b527", "committedDate": "2021-01-16T02:27:01Z", "message": "removed unused dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6750ccb030863c4938a63b097ccca6c3b4e76c5", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/b6750ccb030863c4938a63b097ccca6c3b4e76c5", "committedDate": "2021-01-16T02:27:01Z", "message": "more metric definitions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dc2ced4e88d5747afc3266f4ab9d23564c8a40b", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/2dc2ced4e88d5747afc3266f4ab9d23564c8a40b", "committedDate": "2021-01-16T02:27:01Z", "message": "reorganize"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2a71319eefe72e33571762f0b0a65bf85b99e49", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/c2a71319eefe72e33571762f0b0a65bf85b99e49", "committedDate": "2021-01-16T02:27:01Z", "message": "use prometheus HTTPServer instead of hooking into Jetty server"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a91cc0befcf8de3a580d6b63da4a63e724af912", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/5a91cc0befcf8de3a580d6b63da4a63e724af912", "committedDate": "2021-01-16T02:27:01Z", "message": "temporary empty help string"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7851af284c28d3d13daf62b7fd1788220e696ca", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/a7851af284c28d3d13daf62b7fd1788220e696ca", "committedDate": "2021-01-16T02:27:01Z", "message": "temporary non-empty help.  fix incorrect dimension value in JSON (also updated statsd json)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2136385527aaa6b61f6e61221a2327da628cc48", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/a2136385527aaa6b61f6e61221a2327da628cc48", "committedDate": "2021-01-16T02:27:02Z", "message": "added full help text.  added metric conversion factor for timers that are not using seconds. Correct metric dimension name in documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ec1a9b8a90a3391f1d9f440c7eed7e7cd93d657", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/2ec1a9b8a90a3391f1d9f440c7eed7e7cd93d657", "committedDate": "2021-01-16T02:27:02Z", "message": "added documentation for prometheus emitter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13d3fc3ac4f990ab21a507dc9562d3e973833e78", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/13d3fc3ac4f990ab21a507dc9562d3e973833e78", "committedDate": "2021-01-16T02:27:02Z", "message": "safety for invalid labelNames"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd392eb803e0154c8db828880fe0b6c040ca7a90", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/cd392eb803e0154c8db828880fe0b6c040ca7a90", "committedDate": "2021-01-16T02:27:02Z", "message": "fix travis checks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8246c3c18bbcd7acd835ab1ebdf1b8cbeb7e098e", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/8246c3c18bbcd7acd835ab1ebdf1b8cbeb7e098e", "committedDate": "2021-01-16T02:27:02Z", "message": "Unit test and better sanitization of metrics names and label values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ab89f28ae6136a98648de51290e334b82bbf448", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/8ab89f28ae6136a98648de51290e334b82bbf448", "committedDate": "2021-01-16T02:27:02Z", "message": "add precondition to check namespace against regex"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b4c70d3920c26924ad1c5801c04854698d4baa2", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/9b4c70d3920c26924ad1c5801c04854698d4baa2", "committedDate": "2021-01-16T02:27:02Z", "message": "use precompiled regex"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5221655a60f8e8623f32ccca9f95cee327af497d", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/5221655a60f8e8623f32ccca9f95cee327af497d", "committedDate": "2021-01-16T02:27:02Z", "message": "remove static imports. fix metric types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abae5c02aa8c2840b24b254f6a921a796ae8ec13", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/abae5c02aa8c2840b24b254f6a921a796ae8ec13", "committedDate": "2021-01-16T02:27:02Z", "message": "better docs. fix possible NPE in PrometheusEmitterConfig. Guard against multiple calls to PrometheusEmitter.start()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa4a985c9d9d9e390d555e86822110200e4ad49d", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/fa4a985c9d9d9e390d555e86822110200e4ad49d", "committedDate": "2021-01-16T02:27:02Z", "message": "Update regex for label-value replacements to allow internal numeric values.  Additional tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5689f444b291bdc702969a6fb68d6c5c9707789e", "author": {"user": {"login": "michaelschiff", "name": null}}, "url": "https://github.com/apache/druid/commit/5689f444b291bdc702969a6fb68d6c5c9707789e", "committedDate": "2021-01-16T02:27:02Z", "message": "Adds missing license header\nupdates website/.spelling to add words used in prometheus-emitter docs.\nupdates docs/operations/metrics.md to correct the spelling of\nbufferPoolName"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c355951470522470a98a0924b605829260479e0", "author": {"user": {"login": "michaelschiff", "name": null}}, "url": "https://github.com/apache/druid/commit/1c355951470522470a98a0924b605829260479e0", "committedDate": "2021-01-16T02:27:02Z", "message": "fixes version in extensions-contrib/prometheus-emitter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "456486aa197ad2295d546d37455f005f41be90a1", "author": {"user": {"login": "michaelschiff", "name": null}}, "url": "https://github.com/apache/druid/commit/456486aa197ad2295d546d37455f005f41be90a1", "committedDate": "2021-01-16T02:27:02Z", "message": "fix style guide errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8827fbf78bc2cd3fc8f193e52284b88c742616da", "author": {"user": {"login": "michaelschiff", "name": null}}, "url": "https://github.com/apache/druid/commit/8827fbf78bc2cd3fc8f193e52284b88c742616da", "committedDate": "2021-01-16T02:27:02Z", "message": "update import ordering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba4a67242ad8f2b087b5cf2c672556158ee29d78", "author": {"user": {"login": "michaelschiff", "name": null}}, "url": "https://github.com/apache/druid/commit/ba4a67242ad8f2b087b5cf2c672556158ee29d78", "committedDate": "2021-01-16T02:27:02Z", "message": "add another word to website/.spelling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7aed5e1b54d484520a0cbec6b810e0458b1463a2", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/7aed5e1b54d484520a0cbec6b810e0458b1463a2", "committedDate": "2021-01-16T02:27:02Z", "message": "remove unthrown declared exception"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f079d67c30e19bce9e4356037f745f31f4042d04", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/f079d67c30e19bce9e4356037f745f31f4042d04", "committedDate": "2021-01-16T02:27:02Z", "message": "remove unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76278f102baf0caf1244b5083eb1497db7866dcc", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/76278f102baf0caf1244b5083eb1497db7866dcc", "committedDate": "2021-01-16T02:27:02Z", "message": "Pushgateway strategy for metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e2e78ced09ca617d97df7105c912cb47f146ed7", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/1e2e78ced09ca617d97df7105c912cb47f146ed7", "committedDate": "2021-01-16T02:27:02Z", "message": "typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45412cc55dad7c84397f9bac1c5aba2e475a04f7", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/45412cc55dad7c84397f9bac1c5aba2e475a04f7", "committedDate": "2021-01-16T02:27:02Z", "message": "Format fix and nullable strategy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c248ce6f863413077b22de7a25030c9f57caccf", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/6c248ce6f863413077b22de7a25030c9f57caccf", "committedDate": "2021-01-16T02:27:02Z", "message": "Update pom file for prometheus-emitter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d4f7656799fdeaabb94e0fb199d2af9c4489de0", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/7d4f7656799fdeaabb94e0fb199d2af9c4489de0", "committedDate": "2021-01-16T02:27:02Z", "message": "code review comments. Counter to gauge for cache metrics, periodical task to pushGateway"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d90a419d93c2a929d7f2ae38a72f40fc16567ea", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/4d90a419d93c2a929d7f2ae38a72f40fc16567ea", "committedDate": "2021-01-16T02:27:02Z", "message": "Syntax fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a7a2b620309f2353830366d87d8da5a37cdce6f", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/3a7a2b620309f2353830366d87d8da5a37cdce6f", "committedDate": "2021-01-16T02:27:02Z", "message": "Dimension label regex include numeric character back, fix previous commit"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "3a7a2b620309f2353830366d87d8da5a37cdce6f", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/3a7a2b620309f2353830366d87d8da5a37cdce6f", "committedDate": "2021-01-16T02:27:02Z", "message": "Dimension label regex include numeric character back, fix previous commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b61f1b3129a06afd527adbc8cc60228496e04473", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/b61f1b3129a06afd527adbc8cc60228496e04473", "committedDate": "2021-01-16T02:33:25Z", "message": "bump prometheus-emitter pom dev version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1b8d61a8b62702d31defaa6ed7a7036436c38b6", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/b1b8d61a8b62702d31defaa6ed7a7036436c38b6", "committedDate": "2021-01-16T02:53:30Z", "message": "Remove scheduled task inside poen that push metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7e9e2fc4df68cc89c8828ecf05bd2acb830b8ae", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/e7e9e2fc4df68cc89c8828ecf05bd2acb830b8ae", "committedDate": "2021-02-07T22:35:24Z", "message": "Fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bffc63dc4254e1f4d3d758ae10b9848690551e85", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/bffc63dc4254e1f4d3d758ae10b9848690551e85", "committedDate": "2021-02-07T22:36:56Z", "message": "Merge branch 'master' into feature/prometheus-metric-exporter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b405b558b2176a6262b72ba4bd15ac0f3e1dc895", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/b405b558b2176a6262b72ba4bd15ac0f3e1dc895", "committedDate": "2021-02-10T20:46:30Z", "message": "Unit test coverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a449027000fab0062c4bb1432790453ad0b67621", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/a449027000fab0062c4bb1432790453ad0b67621", "committedDate": "2021-02-10T20:47:34Z", "message": "Merge branch 'master' into feature/prometheus-metric-exporter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f3463fc4d4675c69a46ac1026df1dad78aecc79", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/8f3463fc4d4675c69a46ac1026df1dad78aecc79", "committedDate": "2021-02-16T00:07:36Z", "message": "Unit test coverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cafe2f298f4c0964a1027df9d29bbfe9e80ab4c", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/5cafe2f298f4c0964a1027df9d29bbfe9e80ab4c", "committedDate": "2021-02-16T01:28:07Z", "message": "Spelling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAwMDM5NDcy", "url": "https://github.com/apache/druid/pull/10412#pullrequestreview-600039472", "createdAt": "2021-02-27T00:08:03Z", "commit": {"oid": "5cafe2f298f4c0964a1027df9d29bbfe9e80ab4c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5074528195abec923b97e25181404034839b397", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/c5074528195abec923b97e25181404034839b397", "committedDate": "2021-02-27T00:28:18Z", "message": "Merge branch 'master' into feature/prometheus-metric-exporter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAwMDY0ODk5", "url": "https://github.com/apache/druid/pull/10412#pullrequestreview-600064899", "createdAt": "2021-02-27T02:15:52Z", "commit": {"oid": "c5074528195abec923b97e25181404034839b397"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yN1QwMjoxNTo1MlrOIs9zDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yN1QwMjo0OTozOVrOIs-GQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDAyMDc1MA==", "bodyText": "Druid is no longer in the Apache Incubator, so this (incubating) should be removed.", "url": "https://github.com/apache/druid/pull/10412#discussion_r584020750", "createdAt": "2021-02-27T02:15:52Z", "author": {"login": "clintropolis"}, "path": "docs/development/extensions-contrib/prometheus.md", "diffHunk": "@@ -0,0 +1,70 @@\n+---\n+id: prometheus\n+title: \"Prometheus Emitter\"\n+---\n+\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+\n+To use this Apache Druid (incubating) extension, make sure to [include](../../development/extensions.md#loading-extensions) `prometheus-emitter` extension.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5074528195abec923b97e25181404034839b397"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDAyMTgwNw==", "bodyText": "I don't think this change should have happened? bufferpoolName still appears to be the dimension name in JvmMonitor as far as I can tell. There are a few other places scattered around where this appears to have happened. Potentially this is a result of missing changes or resolving a conflict with #10075", "url": "https://github.com/apache/druid/pull/10412#discussion_r584021807", "createdAt": "2021-02-27T02:23:21Z", "author": {"login": "clintropolis"}, "path": "docs/operations/metrics.md", "diffHunk": "@@ -284,9 +284,9 @@ These metrics are only available if the JVMMonitor module is included.\n |`jvm/pool/init`|Initial pool.|poolKind, poolName.|Varies.|\n |`jvm/pool/max`|Max pool.|poolKind, poolName.|Varies.|\n |`jvm/pool/used`|Pool used.|poolKind, poolName.|< max pool|\n-|`jvm/bufferpool/count`|Bufferpool count.|bufferpoolName.|Varies.|\n-|`jvm/bufferpool/used`|Bufferpool used.|bufferpoolName.|close to capacity|\n-|`jvm/bufferpool/capacity`|Bufferpool capacity.|bufferpoolName.|Varies.|\n+|`jvm/bufferpool/count`|Bufferpool count.|bufferPoolName.|Varies.|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5074528195abec923b97e25181404034839b397"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDAyNTY2NQ==", "bodyText": "It would be worth perhaps linking to metrics documentation https://druid.apache.org/docs/latest/operations/metrics.html ([Druid Metrics](../../operations/metrics.md)) and maybe emitter configuration stuffs, https://druid.apache.org/docs/latest/configuration/index.html#emitting-metrics ([configuration](../../configuration/index.md#emitting-metrics).\nAlso, you should probably include instructions to add druid.emitter=prometheus to the configs.", "url": "https://github.com/apache/druid/pull/10412#discussion_r584025665", "createdAt": "2021-02-27T02:49:39Z", "author": {"login": "clintropolis"}, "path": "docs/development/extensions-contrib/prometheus.md", "diffHunk": "@@ -0,0 +1,70 @@\n+---\n+id: prometheus\n+title: \"Prometheus Emitter\"\n+---\n+\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+\n+To use this Apache Druid (incubating) extension, make sure to [include](../../development/extensions.md#loading-extensions) `prometheus-emitter` extension.\n+\n+## Introduction\n+\n+This extension exposes Druid metrics for collection by a Prometheus server\n+(https://prometheus.io/)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5074528195abec923b97e25181404034839b397"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42048a57524fdcd63851b8c70d0bfde6d27c226f", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/42048a57524fdcd63851b8c70d0bfde6d27c226f", "committedDate": "2021-03-02T01:23:12Z", "message": "Doc fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAxNDgzNDg0", "url": "https://github.com/apache/druid/pull/10412#pullrequestreview-601483484", "createdAt": "2021-03-02T07:07:01Z", "commit": {"oid": "42048a57524fdcd63851b8c70d0bfde6d27c226f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQwNzowNzowMVrOIuMZmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMlQwNzowNzowMVrOIuMZmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTMwODU2OQ==", "bodyText": "oops, missed one, it's causing CI to fail", "url": "https://github.com/apache/druid/pull/10412#discussion_r585308569", "createdAt": "2021-03-02T07:07:01Z", "author": {"login": "clintropolis"}, "path": "website/.spelling", "diffHunk": "@@ -1223,7 +1228,7 @@ SysMonitor\n TaskCountStatsMonitor\n TaskSlotCountStatsMonitor\n bufferCapacity\n-bufferpoolName\n+bufferPoolName", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42048a57524fdcd63851b8c70d0bfde6d27c226f"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "807f8dded488869f2147fe7337c3b64f64ec4e78", "author": {"user": null}, "url": "https://github.com/apache/druid/commit/807f8dded488869f2147fe7337c3b64f64ec4e78", "committedDate": "2021-03-02T20:00:09Z", "message": "spelling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAyNzY0Nzkx", "url": "https://github.com/apache/druid/pull/10412#pullrequestreview-602764791", "createdAt": "2021-03-03T10:56:31Z", "commit": {"oid": "807f8dded488869f2147fe7337c3b64f64ec4e78"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3663, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}