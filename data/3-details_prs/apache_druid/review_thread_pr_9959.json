{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NzI0NzQ4", "number": 9959, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNzozMToxNVrOEBc16A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxODozNjo1MFrOECRmRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTU2NTg0OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/timeseries/TimeseriesQueryQueryToolChest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNzozMToxNVrOGdTfqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjoyNTo1MFrOGeNp_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4MTI4OA==", "bodyText": "I think you diagnosed the bug right but the fix is a bit sketchy. If the Timeseries query accepts a DimensionSpec but then only uses it in the array signature, the following problems occur:\n\nThe input field, extractionFn, and decoration logic of the DimensionSpec are ignored.\nThe type might not actually be correct here; it will use the type from the DimensionSpec, but that might not match the actual type of the field, because the query engine isn't enforcing it.\nThe array signature should also match the maps returned from normal map-based responses, but this won't.\n\nI think the idea of a special parameter to the Timeseries query that makes the time column have a different name is a good idea, though. Maybe instead this would work:\n\nAdd an undocumented timeseries context parameter like timestampResultField that adds a new field containing the timestamp as a long, with the given name, to both the map and array responses.\nModify the SQL layer to generate this context parameter for timeseries queries when there is a time floor dimension.", "url": "https://github.com/apache/druid/pull/9959#discussion_r433381288", "createdAt": "2020-06-01T17:31:15Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/timeseries/TimeseriesQueryQueryToolChest.java", "diffHunk": "@@ -404,11 +407,16 @@ public boolean isCacheable(TimeseriesQuery query, boolean willMergeRunners)\n   @Override\n   public RowSignature resultArraySignature(TimeseriesQuery query)\n   {\n-    return RowSignature.builder()\n-                       .addTimeColumn()\n-                       .addAggregators(query.getAggregatorSpecs())\n-                       .addPostAggregators(query.getPostAggregatorSpecs())\n-                       .build();\n+\n+    RowSignature.Builder rowSignatureBuilder = RowSignature.builder();\n+    if (query.getDimensionSpec() != null) {\n+      rowSignatureBuilder.addDimensions(Collections.singletonList(query.getDimensionSpec()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fbffc2cb429431b12972a378751d5c31e06b6a7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4NzYwOQ==", "bodyText": "Thank you for the review. I think your suggestion with using a special parameter sounds good to me. Initially, I added dimensionSpec just to be similar to groupBy and TopN but you are right that we do not need dimensionSpec and it is confusing with how timeseries is using it compare to groupBy and TopN. All we need is a special field/parameter to know when we are doing time floor dimension.\nCan you explain a little bit about your first point with adds a new field containing the timestamp as a long, with the given name? What do you mean by the given name and do you mean the field containing the floor(timestamp) not the actual timestamp? Thanks!", "url": "https://github.com/apache/druid/pull/9959#discussion_r433387609", "createdAt": "2020-06-01T17:43:00Z", "author": {"login": "maytasm"}, "path": "processing/src/main/java/org/apache/druid/query/timeseries/TimeseriesQueryQueryToolChest.java", "diffHunk": "@@ -404,11 +407,16 @@ public boolean isCacheable(TimeseriesQuery query, boolean willMergeRunners)\n   @Override\n   public RowSignature resultArraySignature(TimeseriesQuery query)\n   {\n-    return RowSignature.builder()\n-                       .addTimeColumn()\n-                       .addAggregators(query.getAggregatorSpecs())\n-                       .addPostAggregators(query.getPostAggregatorSpecs())\n-                       .build();\n+\n+    RowSignature.Builder rowSignatureBuilder = RowSignature.builder();\n+    if (query.getDimensionSpec() != null) {\n+      rowSignatureBuilder.addDimensions(Collections.singletonList(query.getDimensionSpec()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4MTI4OA=="}, "originalCommit": {"oid": "7fbffc2cb429431b12972a378751d5c31e06b6a7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU4MDUwNg==", "bodyText": "What do you mean by the given name and do you mean the field containing the floor(timestamp) not the actual timestamp?\n\nBy \"the given name\" I meant the timestampResultField. (I was thinking you would do something like \"timestampResultField\": \"d0\".)\nIt should contain the floored timestamp, which at the point the query results are being returned, is the same as the timestamp in the response (it has already been floored).", "url": "https://github.com/apache/druid/pull/9959#discussion_r433580506", "createdAt": "2020-06-02T02:00:32Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/timeseries/TimeseriesQueryQueryToolChest.java", "diffHunk": "@@ -404,11 +407,16 @@ public boolean isCacheable(TimeseriesQuery query, boolean willMergeRunners)\n   @Override\n   public RowSignature resultArraySignature(TimeseriesQuery query)\n   {\n-    return RowSignature.builder()\n-                       .addTimeColumn()\n-                       .addAggregators(query.getAggregatorSpecs())\n-                       .addPostAggregators(query.getPostAggregatorSpecs())\n-                       .build();\n+\n+    RowSignature.Builder rowSignatureBuilder = RowSignature.builder();\n+    if (query.getDimensionSpec() != null) {\n+      rowSignatureBuilder.addDimensions(Collections.singletonList(query.getDimensionSpec()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4MTI4OA=="}, "originalCommit": {"oid": "7fbffc2cb429431b12972a378751d5c31e06b6a7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMzNDIwNw==", "bodyText": "Done", "url": "https://github.com/apache/druid/pull/9959#discussion_r434334207", "createdAt": "2020-06-03T06:25:50Z", "author": {"login": "maytasm"}, "path": "processing/src/main/java/org/apache/druid/query/timeseries/TimeseriesQueryQueryToolChest.java", "diffHunk": "@@ -404,11 +407,16 @@ public boolean isCacheable(TimeseriesQuery query, boolean willMergeRunners)\n   @Override\n   public RowSignature resultArraySignature(TimeseriesQuery query)\n   {\n-    return RowSignature.builder()\n-                       .addTimeColumn()\n-                       .addAggregators(query.getAggregatorSpecs())\n-                       .addPostAggregators(query.getPostAggregatorSpecs())\n-                       .build();\n+\n+    RowSignature.Builder rowSignatureBuilder = RowSignature.builder();\n+    if (query.getDimensionSpec() != null) {\n+      rowSignatureBuilder.addDimensions(Collections.singletonList(query.getDimensionSpec()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4MTI4OA=="}, "originalCommit": {"oid": "7fbffc2cb429431b12972a378751d5c31e06b6a7"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODExNjY1OnYy", "diffSide": "RIGHT", "path": "processing/src/test/java/org/apache/druid/query/groupby/GroupByTimeseriesQueryRunnerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxODowOTo0M1rOGenoKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDowMzo0N1rOGerblw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc1OTcyMw==", "bodyText": "nit: there's an unmatched parenthesis here.", "url": "https://github.com/apache/druid/pull/9959#discussion_r434759723", "createdAt": "2020-06-03T18:09:43Z", "author": {"login": "gianm"}, "path": "processing/src/test/java/org/apache/druid/query/groupby/GroupByTimeseriesQueryRunnerTest.java", "diffHunk": "@@ -235,4 +235,11 @@ public void testTimeseriesWithFilterOnNonExistentDimension()\n     // Skip this test because the timeseries test expects a day that doesn't have a filter match to be filled in,\n     // but group by just doesn't return a value if the filter doesn't match.\n   }\n+\n+  @Override\n+  public void testTimeseriesWithTimestampResultFieldContext()\n+  {\n+    // Skip this test because the timeseries test expects an extra column to be created (map from the timestamp_floor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c11456fe1a622c0d3202e0c0ed1675bc6220338"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyMjAzOQ==", "bodyText": "Done", "url": "https://github.com/apache/druid/pull/9959#discussion_r434822039", "createdAt": "2020-06-03T20:03:47Z", "author": {"login": "maytasm"}, "path": "processing/src/test/java/org/apache/druid/query/groupby/GroupByTimeseriesQueryRunnerTest.java", "diffHunk": "@@ -235,4 +235,11 @@ public void testTimeseriesWithFilterOnNonExistentDimension()\n     // Skip this test because the timeseries test expects a day that doesn't have a filter match to be filled in,\n     // but group by just doesn't return a value if the filter doesn't match.\n   }\n+\n+  @Override\n+  public void testTimeseriesWithTimestampResultFieldContext()\n+  {\n+    // Skip this test because the timeseries test expects an extra column to be created (map from the timestamp_floor", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc1OTcyMw=="}, "originalCommit": {"oid": "7c11456fe1a622c0d3202e0c0ed1675bc6220338"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODEyNjA5OnYy", "diffSide": "RIGHT", "path": "processing/src/test/java/org/apache/druid/query/timeseries/TimeseriesQueryQueryToolChestTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxODoxMjozMlrOGenuEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDowNDoyNVrOGerc2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc2MTIzNQ==", "bodyText": "\"testResultArraySignatureWithTimestampResultField\" would be a better name, because that's the feature we're testing from the TimeseriesQuery point of view (the fact that it's useful for SQL time floor groupings is more of a concern of the SQL layer).", "url": "https://github.com/apache/druid/pull/9959#discussion_r434761235", "createdAt": "2020-06-03T18:12:32Z", "author": {"login": "gianm"}, "path": "processing/src/test/java/org/apache/druid/query/timeseries/TimeseriesQueryQueryToolChestTest.java", "diffHunk": "@@ -388,6 +389,33 @@ public void testResultArraySignature()\n     );\n   }\n \n+  @Test\n+  public void testResultArraySignatureWithFloorTime()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c11456fe1a622c0d3202e0c0ed1675bc6220338"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyMjM2Mg==", "bodyText": "Done", "url": "https://github.com/apache/druid/pull/9959#discussion_r434822362", "createdAt": "2020-06-03T20:04:25Z", "author": {"login": "maytasm"}, "path": "processing/src/test/java/org/apache/druid/query/timeseries/TimeseriesQueryQueryToolChestTest.java", "diffHunk": "@@ -388,6 +389,33 @@ public void testResultArraySignature()\n     );\n   }\n \n+  @Test\n+  public void testResultArraySignatureWithFloorTime()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc2MTIzNQ=="}, "originalCommit": {"oid": "7c11456fe1a622c0d3202e0c0ed1675bc6220338"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODEyNjY0OnYy", "diffSide": "RIGHT", "path": "processing/src/test/java/org/apache/druid/query/timeseries/TimeseriesQueryQueryToolChestTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxODoxMjo0M1rOGenudw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDowNTowNVrOGereIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc2MTMzNQ==", "bodyText": "\"testResultArraySignatureWithoutTimestampResultField\" would be a better name.", "url": "https://github.com/apache/druid/pull/9959#discussion_r434761335", "createdAt": "2020-06-03T18:12:43Z", "author": {"login": "gianm"}, "path": "processing/src/test/java/org/apache/druid/query/timeseries/TimeseriesQueryQueryToolChestTest.java", "diffHunk": "@@ -364,7 +365,7 @@ public void testResultLevelCacheKeyWithGrandTotal()\n   }\n \n   @Test\n-  public void testResultArraySignature()\n+  public void testResultArraySignatureWithoutFloorTime()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c11456fe1a622c0d3202e0c0ed1675bc6220338"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyMjY4OQ==", "bodyText": "Done", "url": "https://github.com/apache/druid/pull/9959#discussion_r434822689", "createdAt": "2020-06-03T20:05:05Z", "author": {"login": "maytasm"}, "path": "processing/src/test/java/org/apache/druid/query/timeseries/TimeseriesQueryQueryToolChestTest.java", "diffHunk": "@@ -364,7 +365,7 @@ public void testResultLevelCacheKeyWithGrandTotal()\n   }\n \n   @Test\n-  public void testResultArraySignature()\n+  public void testResultArraySignatureWithoutFloorTime()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc2MTMzNQ=="}, "originalCommit": {"oid": "7c11456fe1a622c0d3202e0c0ed1675bc6220338"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODE0MzM3OnYy", "diffSide": "RIGHT", "path": "processing/src/test/java/org/apache/druid/query/timeseries/TimeseriesQueryRunnerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxODoxNzo1M1rOGen5mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDo0Mzo0OFrOGespTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc2NDE4NQ==", "bodyText": "You should include a test that verifies behavior for the resultsAsArrays result type as well.", "url": "https://github.com/apache/druid/pull/9959#discussion_r434764185", "createdAt": "2020-06-03T18:17:53Z", "author": {"login": "gianm"}, "path": "processing/src/test/java/org/apache/druid/query/timeseries/TimeseriesQueryRunnerTest.java", "diffHunk": "@@ -2471,6 +2472,123 @@ public void testTimeseriesWithBoundFilter1()\n     TestHelper.assertExpectedResults(expectedResults, results);\n   }\n \n+  @Test\n+  public void testTimeseriesWithTimestampResultFieldContext()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c11456fe1a622c0d3202e0c0ed1675bc6220338"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0MTkzMw==", "bodyText": "Done. See testTimeseriesWithTimestampResultFieldContextForArrayResponse", "url": "https://github.com/apache/druid/pull/9959#discussion_r434841933", "createdAt": "2020-06-03T20:43:48Z", "author": {"login": "maytasm"}, "path": "processing/src/test/java/org/apache/druid/query/timeseries/TimeseriesQueryRunnerTest.java", "diffHunk": "@@ -2471,6 +2472,123 @@ public void testTimeseriesWithBoundFilter1()\n     TestHelper.assertExpectedResults(expectedResults, results);\n   }\n \n+  @Test\n+  public void testTimeseriesWithTimestampResultFieldContext()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc2NDE4NQ=="}, "originalCommit": {"oid": "7c11456fe1a622c0d3202e0c0ed1675bc6220338"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODE5Mjc1OnYy", "diffSide": "RIGHT", "path": "extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/hll/sql/HllSketchSqlAggregatorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxODozMjowNFrOGeoZiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDo0NTozMFrOGesstw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc3MjM2MA==", "bodyText": "I think we usually don't do import static like this, but if checkstyle was ok with it, then you can keep it.", "url": "https://github.com/apache/druid/pull/9959#discussion_r434772360", "createdAt": "2020-06-03T18:32:04Z", "author": {"login": "gianm"}, "path": "extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/hll/sql/HllSketchSqlAggregatorTest.java", "diffHunk": "@@ -90,6 +94,8 @@\n import java.util.List;\n import java.util.Map;\n \n+import static org.apache.druid.sql.calcite.BaseCalciteQueryTest.TIMESERIES_CONTEXT_DEFAULT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c11456fe1a622c0d3202e0c0ed1675bc6220338"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0MjgwNw==", "bodyText": "It was unused. Removed", "url": "https://github.com/apache/druid/pull/9959#discussion_r434842807", "createdAt": "2020-06-03T20:45:30Z", "author": {"login": "maytasm"}, "path": "extensions-core/datasketches/src/test/java/org/apache/druid/query/aggregation/datasketches/hll/sql/HllSketchSqlAggregatorTest.java", "diffHunk": "@@ -90,6 +94,8 @@\n import java.util.List;\n import java.util.Map;\n \n+import static org.apache.druid.sql.calcite.BaseCalciteQueryTest.TIMESERIES_CONTEXT_DEFAULT;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc3MjM2MA=="}, "originalCommit": {"oid": "7c11456fe1a622c0d3202e0c0ed1675bc6220338"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODIwNDM5OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/timeseries/TimeseriesQueryQueryToolChest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxODozNToxOVrOGeog4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDo0NjoyOFrOGesuqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc3NDI0Mg==", "bodyText": "This comment doesn't make a lot of sense to me. How about something like this instead:\n\nIf \"timestampResultField\" is set, we must include a copy of the timestamp in the result. This is used by the SQL layer when it generates a Timeseries query for a group-by-time-floor SQL query. The SQL layer expects the result of the time-floor to have a specific name that is not going to be \"__time\".", "url": "https://github.com/apache/druid/pull/9959#discussion_r434774242", "createdAt": "2020-06-03T18:35:19Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/timeseries/TimeseriesQueryQueryToolChest.java", "diffHunk": "@@ -447,13 +454,21 @@ public RowSignature resultArraySignature(TimeseriesQuery query)\n     return result -> {\n       final TimeseriesResultValue holder = result.getValue();\n       final Map<String, Object> values = new HashMap<>(holder.getBaseObject());\n-      if (calculatePostAggs && !query.getPostAggregatorSpecs().isEmpty()) {\n-        // put non finalized aggregators for calculating dependent post Aggregators\n-        for (AggregatorFactory agg : query.getAggregatorSpecs()) {\n-          values.put(agg.getName(), holder.getMetric(agg.getName()));\n+      if (calculatePostAggs) {\n+        if (!query.getPostAggregatorSpecs().isEmpty()) {\n+          // put non finalized aggregators for calculating dependent post Aggregators\n+          for (AggregatorFactory agg : query.getAggregatorSpecs()) {\n+            values.put(agg.getName(), holder.getMetric(agg.getName()));\n+          }\n+          for (PostAggregator postAgg : query.getPostAggregatorSpecs()) {\n+            values.put(postAgg.getName(), postAgg.compute(values));\n+          }\n         }\n-        for (PostAggregator postAgg : query.getPostAggregatorSpecs()) {\n-          values.put(postAgg.getName(), postAgg.compute(values));\n+        // Timeseries query has timestamp_floor expression on the timestamp dimension so we need to\n+        // map the results to another dimension using the name (String) supplied by context key", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c11456fe1a622c0d3202e0c0ed1675bc6220338"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0MzMwNA==", "bodyText": "Sounds good. Done", "url": "https://github.com/apache/druid/pull/9959#discussion_r434843304", "createdAt": "2020-06-03T20:46:28Z", "author": {"login": "maytasm"}, "path": "processing/src/main/java/org/apache/druid/query/timeseries/TimeseriesQueryQueryToolChest.java", "diffHunk": "@@ -447,13 +454,21 @@ public RowSignature resultArraySignature(TimeseriesQuery query)\n     return result -> {\n       final TimeseriesResultValue holder = result.getValue();\n       final Map<String, Object> values = new HashMap<>(holder.getBaseObject());\n-      if (calculatePostAggs && !query.getPostAggregatorSpecs().isEmpty()) {\n-        // put non finalized aggregators for calculating dependent post Aggregators\n-        for (AggregatorFactory agg : query.getAggregatorSpecs()) {\n-          values.put(agg.getName(), holder.getMetric(agg.getName()));\n+      if (calculatePostAggs) {\n+        if (!query.getPostAggregatorSpecs().isEmpty()) {\n+          // put non finalized aggregators for calculating dependent post Aggregators\n+          for (AggregatorFactory agg : query.getAggregatorSpecs()) {\n+            values.put(agg.getName(), holder.getMetric(agg.getName()));\n+          }\n+          for (PostAggregator postAgg : query.getPostAggregatorSpecs()) {\n+            values.put(postAgg.getName(), postAgg.compute(values));\n+          }\n         }\n-        for (PostAggregator postAgg : query.getPostAggregatorSpecs()) {\n-          values.put(postAgg.getName(), postAgg.compute(values));\n+        // Timeseries query has timestamp_floor expression on the timestamp dimension so we need to\n+        // map the results to another dimension using the name (String) supplied by context key", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc3NDI0Mg=="}, "originalCommit": {"oid": "7c11456fe1a622c0d3202e0c0ed1675bc6220338"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODIwOTMyOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/timeseries/TimeseriesQuery.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxODozNjo1MFrOGeokGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDo0NzoyMFrOGeswMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc3NTA2NA==", "bodyText": "I think this could be clearer. How about:\n\n\"timestampResultField\" is an undocumented parameter used internally by the SQL layer. It is necessary because when the SQL layer generates a Timeseries query for a group-by-time-floor SQL query, it expects the result of the time-floor to have a specific name. That name is provided using this parameter.", "url": "https://github.com/apache/druid/pull/9959#discussion_r434775064", "createdAt": "2020-06-03T18:36:50Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/timeseries/TimeseriesQuery.java", "diffHunk": "@@ -50,6 +50,12 @@\n {\n   public static final String CTX_GRAND_TOTAL = \"grandTotal\";\n   public static final String SKIP_EMPTY_BUCKETS = \"skipEmptyBuckets\";\n+  // This context parameter is an undocumented parameter, used internally, to allow timeseries query with", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c11456fe1a622c0d3202e0c0ed1675bc6220338"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0MzY5Nw==", "bodyText": "Sounds good. Done", "url": "https://github.com/apache/druid/pull/9959#discussion_r434843697", "createdAt": "2020-06-03T20:47:20Z", "author": {"login": "maytasm"}, "path": "processing/src/main/java/org/apache/druid/query/timeseries/TimeseriesQuery.java", "diffHunk": "@@ -50,6 +50,12 @@\n {\n   public static final String CTX_GRAND_TOTAL = \"grandTotal\";\n   public static final String SKIP_EMPTY_BUCKETS = \"skipEmptyBuckets\";\n+  // This context parameter is an undocumented parameter, used internally, to allow timeseries query with", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc3NTA2NA=="}, "originalCommit": {"oid": "7c11456fe1a622c0d3202e0c0ed1675bc6220338"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2499, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}