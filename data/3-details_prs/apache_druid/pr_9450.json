{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNzM5MTA2", "number": 9450, "title": "Skip empty files for local, hdfs, and cloud input sources", "bodyText": "Description\nThis PR modifies the input sources to skip empty files except for the HTTP input source. This PR additionally fixes the two bugs:\n\nA doc bug in the split hint spec (https://github.com/apache/druid/compare/master...jihoonson:index-non-empty-only?expand=1#diff-d6b6b4ca916a8bdda904aa36e924dee3R205)\nThe Google cloud storage object iterator could throw an exception if the last object is a directory.\n\n\nThis PR has:\n\n been self-reviewed.\n\n using the concurrency checklist (Remove this item if the PR doesn't have any relation to concurrency.)\n\n\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-03-03T04:37:28Z", "url": "https://github.com/apache/druid/pull/9450", "merged": true, "mergeCommit": {"oid": "9466ac7c9b2b1d86b06cfa7c7f5eeb35d588dd22"}, "closed": true, "closedAt": "2020-03-04T04:51:07Z", "author": {"login": "jihoonson"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJ6bHrgH2gAyMzgyNzM5MTA2OjEwYjdlMDkzYjg1ZTU2YzBiZWRmMTM2ZTRkNjU5MjE5YTVlNTg0MTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKMRXMgFqTM2ODQzOTUzOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "10b7e093b85e56c0bedf136e4d659219a5e58419", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/10b7e093b85e56c0bedf136e4d659219a5e58419", "committedDate": "2020-03-03T04:15:31Z", "message": "Skip empty files for local, hdfs, and cloud input sources"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22915080f6b7399531ca63f9dd41f6a64d35dc4a", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/22915080f6b7399531ca63f9dd41f6a64d35dc4a", "committedDate": "2020-03-03T04:22:21Z", "message": "split hint spec doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77524e22f907c6554c0464fe0eb0a8114753ddca", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/77524e22f907c6554c0464fe0eb0a8114753ddca", "committedDate": "2020-03-03T04:27:41Z", "message": "doc for skipping empty files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "902c8c0c1c378b3100bc637f56b342c55db289a5", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/902c8c0c1c378b3100bc637f56b342c55db289a5", "committedDate": "2020-03-03T04:33:14Z", "message": "fix typo; adjust tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02ffb9ad072b6b0732d5c7b52e00834560400673", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/02ffb9ad072b6b0732d5c7b52e00834560400673", "committedDate": "2020-03-03T04:36:14Z", "message": "unnecessary fluent iterable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MjE3MjU5", "url": "https://github.com/apache/druid/pull/9450#pullrequestreview-368217259", "createdAt": "2020-03-03T18:24:53Z", "commit": {"oid": "02ffb9ad072b6b0732d5c7b52e00834560400673"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODoyNDo1M1rOFxRU7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODozODozM1rOFxRyUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIwODQzMQ==", "bodyText": "Unused?", "url": "https://github.com/apache/druid/pull/9450#discussion_r387208431", "createdAt": "2020-03-03T18:24:53Z", "author": {"login": "ccaominh"}, "path": "core/src/main/java/org/apache/druid/data/input/MaxSizeSplitHintSpec.java", "diffHunk": "@@ -40,6 +42,7 @@\n public class MaxSizeSplitHintSpec implements SplitHintSpec\n {\n   public static final String TYPE = \"maxSize\";\n+  private static final Logger LOG = new Logger(MaxSizeSplitHintSpec.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02ffb9ad072b6b0732d5c7b52e00834560400673"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIxMTQ5NQ==", "bodyText": "Should this be the one from guava instead? (same for MaxSizeSplitHintSpecTest)", "url": "https://github.com/apache/druid/pull/9450#discussion_r387211495", "createdAt": "2020-03-03T18:30:29Z", "author": {"login": "ccaominh"}, "path": "core/src/test/java/org/apache/druid/data/input/impl/LocalInputSourceTest.java", "diffHunk": "@@ -21,6 +21,7 @@\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import nl.jqno.equalsverifier.EqualsVerifier;\n+import org.apache.commons.compress.utils.Lists;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02ffb9ad072b6b0732d5c7b52e00834560400673"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIxNTk1Mg==", "bodyText": "This branch is not covered by unit tests", "url": "https://github.com/apache/druid/pull/9450#discussion_r387215952", "createdAt": "2020-03-03T18:38:33Z", "author": {"login": "ccaominh"}, "path": "extensions-core/google-extensions/src/main/java/org/apache/druid/storage/google/ObjectStorageIterator.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.storage.google;\n+\n+import com.google.api.services.storage.Storage;\n+import com.google.api.services.storage.model.Objects;\n+import com.google.api.services.storage.model.StorageObject;\n+import org.apache.druid.java.util.common.StringUtils;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+public class ObjectStorageIterator implements Iterator<StorageObject>\n+{\n+  private final GoogleStorage storage;\n+  private final Iterator<URI> uris;\n+  private final long maxListingLength;\n+\n+  private Storage.Objects.List listRequest;\n+  private Objects results;\n+  private URI currentUri;\n+  private String nextPageToken;\n+  private Iterator<StorageObject> storageObjectsIterator;\n+  private StorageObject currentObject;\n+\n+  public ObjectStorageIterator(GoogleStorage storage, Iterator<URI> uris, long maxListingLength)\n+  {\n+    this.storage = storage;\n+    this.uris = uris;\n+    this.maxListingLength = maxListingLength;\n+    this.nextPageToken = null;\n+\n+    prepareNextRequest();\n+    fetchNextBatch();\n+    advanceStorageObject();\n+  }\n+\n+  private void prepareNextRequest()\n+  {\n+    try {\n+      currentUri = uris.next();\n+      String currentBucket = currentUri.getAuthority();\n+      String currentPrefix = StringUtils.maybeRemoveLeadingSlash(currentUri.getPath());\n+      nextPageToken = null;\n+      listRequest = storage.list(currentBucket)\n+                           .setPrefix(currentPrefix)\n+                           .setMaxResults(maxListingLength);\n+\n+    }\n+    catch (IOException io) {\n+      throw new RuntimeException(io);\n+    }\n+  }\n+\n+  private void fetchNextBatch()\n+  {\n+    try {\n+      listRequest.setPageToken(nextPageToken);\n+      results = GoogleUtils.retryGoogleCloudStorageOperation(() -> listRequest.execute());\n+      storageObjectsIterator = results.getItems().iterator();\n+      nextPageToken = results.getNextPageToken();\n+    }\n+    catch (Exception ex) {\n+      throw new RuntimeException(ex);\n+    }\n+  }\n+\n+  @Override\n+  public boolean hasNext()\n+  {\n+    return currentObject != null;\n+  }\n+\n+  @Override\n+  public StorageObject next()\n+  {\n+    if (!hasNext()) {\n+      throw new NoSuchElementException();\n+    }\n+\n+    final StorageObject retVal = currentObject;\n+    advanceStorageObject();\n+    return retVal;\n+  }\n+\n+  private void advanceStorageObject()\n+  {\n+    while (storageObjectsIterator.hasNext() || nextPageToken != null || uris.hasNext()) {\n+      while (storageObjectsIterator.hasNext()) {\n+        final StorageObject next = storageObjectsIterator.next();\n+        // list with prefix can return directories, but they should always end with `/`, ignore them.\n+        // also skips empty objects.\n+        if (!next.getName().endsWith(\"/\") && next.getSize().signum() > 0) {\n+          currentObject = next;\n+          return;\n+        }\n+      }\n+\n+      if (nextPageToken != null) {\n+        fetchNextBatch();\n+      } else if (uris.hasNext()) {\n+        prepareNextRequest();\n+        fetchNextBatch();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02ffb9ad072b6b0732d5c7b52e00834560400673"}, "originalPosition": 122}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b59e457ee8f67789c16b7e43ad34d8acfd51f4f9", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/b59e457ee8f67789c16b7e43ad34d8acfd51f4f9", "committedDate": "2020-03-03T19:06:46Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6c1a7f24b25ae80f10fbff44b43bb033027b478", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/c6c1a7f24b25ae80f10fbff44b43bb033027b478", "committedDate": "2020-03-03T19:11:05Z", "message": "fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c31efc039db8336834a390ef8f41a153635e0eb", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/0c31efc039db8336834a390ef8f41a153635e0eb", "committedDate": "2020-03-03T19:11:50Z", "message": "use the right lists"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MjYyODQ1", "url": "https://github.com/apache/druid/pull/9450#pullrequestreview-368262845", "createdAt": "2020-03-03T19:31:14Z", "commit": {"oid": "0c31efc039db8336834a390ef8f41a153635e0eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTozMToxNFrOFxTjnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTozMToxNFrOFxTjnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0NDk1Ng==", "bodyText": "The forbidden apis checks is flagging this: java.io.FileWriter [Uses default charset]", "url": "https://github.com/apache/druid/pull/9450#discussion_r387244956", "createdAt": "2020-03-03T19:31:14Z", "author": {"login": "ccaominh"}, "path": "core/src/test/java/org/apache/druid/data/input/impl/LocalInputSourceTest.java", "diffHunk": "@@ -98,11 +99,19 @@ public void testGetFileIteratorWithBothBaseDirAndDuplicateFilesIteratingFilesOnl\n     File baseDir = temporaryFolder.newFolder();\n     List<File> filesInBaseDir = new ArrayList<>();\n     for (int i = 0; i < 10; i++) {\n-      filesInBaseDir.add(File.createTempFile(\"local-input-source\", \".data\", baseDir));\n+      final File file = File.createTempFile(\"local-input-source\", \".data\", baseDir);\n+      try (FileWriter writer = new FileWriter(file)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c31efc039db8336834a390ef8f41a153635e0eb"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MjY2Mzg4", "url": "https://github.com/apache/druid/pull/9450#pullrequestreview-368266388", "createdAt": "2020-03-03T19:36:28Z", "commit": {"oid": "0c31efc039db8336834a390ef8f41a153635e0eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTozNjoyOFrOFxTucg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTozNjoyOFrOFxTucg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0NzczMA==", "bodyText": "You'll need to update the pom to add this dependency:\n<dependency>\n  <groupId>com.google.http-client</groupId>\n  <artifactId>google-http-client</artifactId>\n  <scope>test</scope>\n</dependency>\n\nhttps://travis-ci.org/apache/druid/jobs/657595721#L2090", "url": "https://github.com/apache/druid/pull/9450#discussion_r387247730", "createdAt": "2020-03-03T19:36:28Z", "author": {"login": "ccaominh"}, "path": "extensions-core/azure-extensions/src/test/java/org/apache/druid/storage/azure/AzureCloudBlobIteratorTest.java", "diffHunk": "@@ -19,6 +19,7 @@\n \n package org.apache.druid.storage.azure;\n \n+import com.google.api.client.util.Lists;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c31efc039db8336834a390ef8f41a153635e0eb"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e575b33775a0cc02e76d901e247ff6746c36dfc", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/0e575b33775a0cc02e76d901e247ff6746c36dfc", "committedDate": "2020-03-03T21:40:57Z", "message": "fix test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MzUyMzE5", "url": "https://github.com/apache/druid/pull/9450#pullrequestreview-368352319", "createdAt": "2020-03-03T21:52:11Z", "commit": {"oid": "0e575b33775a0cc02e76d901e247ff6746c36dfc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6155d9c36d1b3aa125c61bb22721676fa49e5de2", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/6155d9c36d1b3aa125c61bb22721676fa49e5de2", "committedDate": "2020-03-04T00:57:34Z", "message": "fix test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NDM5NTM5", "url": "https://github.com/apache/druid/pull/9450#pullrequestreview-368439539", "createdAt": "2020-03-04T01:03:09Z", "commit": {"oid": "6155d9c36d1b3aa125c61bb22721676fa49e5de2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2994, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}