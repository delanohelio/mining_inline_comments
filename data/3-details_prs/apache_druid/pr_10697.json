{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNTEzODAz", "number": 10697, "title": "Supporting filters in the left base table for join datasources", "bodyText": "As of now, if the left query in the JOIN has a filter present, we plan it as the join between two query data sources even if the left source is a base table. This is of course not efficient. We had even introduced some custom calcite rules so that filters on join query are not pushed into the children tables. This issue is more significant for correlated queries since the generated physical plan is a left join with a filter on the left base table. Hence, the execution of correlation queries is not efficient.\nThis PR adds the support for pushing filters into the left child. We would add the support for the right child in a different PR and also get rid of the custom calcite rules once that happens.\nWhat does not work\n\nPartitioning pruning based on left filter of join table\n\n\nThis PR has:\n\n been self-reviewed.\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths, ensuring the threshold for code coverage is met.\n added integration tests.\n been tested in a test Druid cluster.\n\n\n\nKey changed/added classes in this PR", "createdAt": "2020-12-21T14:23:59Z", "url": "https://github.com/apache/druid/pull/10697", "merged": true, "mergeCommit": {"oid": "1a15987432fab044fc83a99af8ab497d887aeda1"}, "closed": true, "closedAt": "2021-03-04T18:39:21Z", "author": {"login": "abhishekagarwal87"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABd0OK8HgBqjQyNTUyOTc2OTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd_-4aqAFqTYwNDY4NzMyNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "779f476c51c175c8abacab0c72d32557d48629c5", "author": {"user": {"login": "abhishekagarwal87", "name": "Abhishek Agarwal"}}, "url": "https://github.com/apache/druid/commit/779f476c51c175c8abacab0c72d32557d48629c5", "committedDate": "2021-03-02T12:19:48Z", "message": "where filter left first draft"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "989a4dd3098f69111028a38c2a8fd2d77220d5c5", "author": {"user": {"login": "abhishekagarwal87", "name": "Abhishek Agarwal"}}, "url": "https://github.com/apache/druid/commit/989a4dd3098f69111028a38c2a8fd2d77220d5c5", "committedDate": "2021-03-02T12:19:48Z", "message": "Revert changes in calcite test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3a8659972a65e5f613061906625552f5397eac3", "author": {"user": {"login": "abhishekagarwal87", "name": "Abhishek Agarwal"}}, "url": "https://github.com/apache/druid/commit/d3a8659972a65e5f613061906625552f5397eac3", "committedDate": "2021-03-02T12:19:48Z", "message": "Refactor a bit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "935265237c155e75c9283d01e258eabf70a190dd", "author": {"user": {"login": "abhishekagarwal87", "name": "Abhishek Agarwal"}}, "url": "https://github.com/apache/druid/commit/935265237c155e75c9283d01e258eabf70a190dd", "committedDate": "2021-03-02T12:19:48Z", "message": "Fixing the Tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75bc6c70c2320ae71bd3df74c2f105537468b8e7", "author": {"user": {"login": "abhishekagarwal87", "name": "Abhishek Agarwal"}}, "url": "https://github.com/apache/druid/commit/75bc6c70c2320ae71bd3df74c2f105537468b8e7", "committedDate": "2021-03-02T12:19:48Z", "message": "Changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "538244aaa1a31f1c10fa62131e5e8657e94569f2", "author": {"user": {"login": "abhishekagarwal87", "name": "Abhishek Agarwal"}}, "url": "https://github.com/apache/druid/commit/538244aaa1a31f1c10fa62131e5e8657e94569f2", "committedDate": "2021-03-03T09:41:11Z", "message": "Adding tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "538244aaa1a31f1c10fa62131e5e8657e94569f2", "author": {"user": {"login": "abhishekagarwal87", "name": "Abhishek Agarwal"}}, "url": "https://github.com/apache/druid/commit/538244aaa1a31f1c10fa62131e5e8657e94569f2", "committedDate": "2021-03-03T09:41:11Z", "message": "Adding tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0a900674cf90ac29ff2217bae7e85017013664f", "author": {"user": {"login": "abhishekagarwal87", "name": "Abhishek Agarwal"}}, "url": "https://github.com/apache/druid/commit/b0a900674cf90ac29ff2217bae7e85017013664f", "committedDate": "2021-03-04T06:07:45Z", "message": "Add tests for correlated queries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c681bac6cd364ac0ecc68b77b539061c865a9782", "author": {"user": {"login": "abhishekagarwal87", "name": "Abhishek Agarwal"}}, "url": "https://github.com/apache/druid/commit/c681bac6cd364ac0ecc68b77b539061c865a9782", "committedDate": "2021-03-04T06:13:25Z", "message": "Add comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAzNTk4MDIy", "url": "https://github.com/apache/druid/pull/10697#pullrequestreview-603598022", "createdAt": "2021-03-04T01:06:19Z", "commit": {"oid": "538244aaa1a31f1c10fa62131e5e8657e94569f2"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNFQwMTowNjoxOVrOIvvfFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNFQwOToxNDoxNlrOIwFYtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjkzMTk5MA==", "bodyText": "this was probably an accident?", "url": "https://github.com/apache/druid/pull/10697#discussion_r586931990", "createdAt": "2021-03-04T01:06:19Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/query/planning/DataSourceAnalysis.java", "diffHunk": "@@ -98,12 +102,13 @@ private DataSourceAnalysis(\n     this.dataSource = dataSource;\n     this.baseDataSource = baseDataSource;\n     this.baseQuery = baseQuery;\n+    this.joinBaseTableFilter = joinBaseTableFilter;\n     this.preJoinableClauses = preJoinableClauses;\n   }\n \n   public static DataSourceAnalysis forDataSource(final DataSource dataSource)\n   {\n-    // Strip outer queries, retaining querySegmentSpecs as we go down (lowest will become the 'baseQuerySegmentSpec').\n+    // Strip outer queries, retaining querySegmentSpecs as we go down (lowest will become the 'baseQuerySegmentSpec'o).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "538244aaa1a31f1c10fa62131e5e8657e94569f2"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzI5MDgwNw==", "bodyText": "nit: typo donw -> done?", "url": "https://github.com/apache/druid/pull/10697#discussion_r587290807", "createdAt": "2021-03-04T09:14:16Z", "author": {"login": "clintropolis"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/rel/DruidQuery.java", "diffHunk": "@@ -648,6 +651,52 @@ private VirtualColumns getVirtualColumns(final boolean includeDimensions)\n     return VirtualColumns.create(columns);\n   }\n \n+  /**\n+   * Returns a pair of DataSource and Filtration object created on the query filter. In case the, data source is\n+   * a join datasource, the datasource may be altered and left filter of join datasource may\n+   * be rid of time filters.\n+   * TODO: should we optimize the base table filter just like we do with query filters\n+   */\n+  @VisibleForTesting\n+  static Pair<DataSource, Filtration> getFiltration(\n+      DataSource dataSource,\n+      DimFilter filter,\n+      VirtualColumnRegistry virtualColumnRegistry\n+  )\n+  {\n+    if (!(dataSource instanceof JoinDataSource)) {\n+      return Pair.of(dataSource, toFiltration(filter, virtualColumnRegistry));\n+    }\n+    JoinDataSource joinDataSource = (JoinDataSource) dataSource;\n+    if (joinDataSource.getLeftFilter() == null) {\n+      return Pair.of(dataSource, toFiltration(filter, virtualColumnRegistry));\n+    }\n+    //TODO: We should avoid promoting the time filter as interval for right outer and full outer joins. This is not\n+    // donw now as we apply the intervals to left base table today irrespective of the join type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c681bac6cd364ac0ecc68b77b539061c865a9782"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b51e4eb87135084d6036d1e989c8cd609bd51d80", "author": {"user": {"login": "abhishekagarwal87", "name": "Abhishek Agarwal"}}, "url": "https://github.com/apache/druid/commit/b51e4eb87135084d6036d1e989c8cd609bd51d80", "committedDate": "2021-03-04T11:43:14Z", "message": "Fix typos"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjA0MDE0NzYx", "url": "https://github.com/apache/druid/pull/10697#pullrequestreview-604014761", "createdAt": "2021-03-04T11:50:28Z", "commit": {"oid": "b51e4eb87135084d6036d1e989c8cd609bd51d80"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjA0Njc4MTMz", "url": "https://github.com/apache/druid/pull/10697#pullrequestreview-604678133", "createdAt": "2021-03-04T23:51:05Z", "commit": {"oid": "b51e4eb87135084d6036d1e989c8cd609bd51d80"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNFQyMzo1MTowNVrOIwrsIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNFQyMzo1MTowNVrOIwrsIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzkxODM3MA==", "bodyText": "No what?", "url": "https://github.com/apache/druid/pull/10697#discussion_r587918370", "createdAt": "2021-03-04T23:51:05Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java", "diffHunk": "@@ -69,8 +70,25 @@\n       final List<JoinableClause> clauses,\n       final JoinFilterPreAnalysis joinFilterPreAnalysis\n   )\n+  {\n+    this(baseAdapter, null, clauses, joinFilterPreAnalysis);\n+  }\n+\n+  /**\n+   * @param baseAdapter           A StorageAdapter for the left-hand side base segment\n+   * @param baseFilter            A filter for the left-hand side base segment\n+   * @param clauses               The right-hand side clauses. The caller is responsible for ensuring that there are no", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b51e4eb87135084d6036d1e989c8cd609bd51d80"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjA0NjgzMDU0", "url": "https://github.com/apache/druid/pull/10697#pullrequestreview-604683054", "createdAt": "2021-03-05T00:00:29Z", "commit": {"oid": "b51e4eb87135084d6036d1e989c8cd609bd51d80"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNVQwMDowMDozMFrOIwsF9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNVQwMDowMDozMFrOIwsF9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzkyNDk4Mw==", "bodyText": "This may not work right if left is a DruidJoinQueryRel or DruidOuterQueryRel instead of a DruidQueryRel (since leftFilter is only supported for regular tables).", "url": "https://github.com/apache/druid/pull/10697#discussion_r587924983", "createdAt": "2021-03-05T00:00:30Z", "author": {"login": "gianm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/rule/DruidJoinRule.java", "diffHunk": "@@ -97,18 +98,19 @@ public void onMatch(RelOptRuleCall call)\n \n     final DruidRel<?> newLeft;\n     final DruidRel<?> newRight;\n+    final Filter leftFilter;\n     final List<RexNode> newProjectExprs = new ArrayList<>();\n \n     // Already verified to be present in \"matches\", so just call \"get\".\n     // Can't be final, because we're going to reassign it up to a couple of times.\n     ConditionAnalysis conditionAnalysis = analyzeCondition(join.getCondition(), join.getLeft().getRowType()).get();\n \n-    if (left.getPartialDruidQuery().stage() == PartialDruidQuery.Stage.SELECT_PROJECT\n-        && left.getPartialDruidQuery().getWhereFilter() == null) {\n+    if (left.getPartialDruidQuery().stage() == PartialDruidQuery.Stage.SELECT_PROJECT) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b51e4eb87135084d6036d1e989c8cd609bd51d80"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjA0Njg2NTUx", "url": "https://github.com/apache/druid/pull/10697#pullrequestreview-604686551", "createdAt": "2021-03-05T00:08:24Z", "commit": {"oid": "b51e4eb87135084d6036d1e989c8cd609bd51d80"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNVQwMDowODoyNFrOIwsRcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNVQwMDowODoyNFrOIwsRcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzkyNzkyMA==", "bodyText": "The javadoc doesn't seem right, it doesn't accept a JoinConditionAnalysis.\nFwiw, also, I don't really like adding \"everything minus one\" constructors when a new parameter is added. It minimizes the amount of code to update, but it leaves things messier, and it makes it more likely that someone will forget to use the new parameter when it is actually important to use. IMO it is better to remove this constructor and update all the call sites to use the new one.", "url": "https://github.com/apache/druid/pull/10697#discussion_r587927920", "createdAt": "2021-03-05T00:08:24Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/JoinDataSource.java", "diffHunk": "@@ -108,10 +122,26 @@ public static JoinDataSource create(\n       final DataSource right,\n       final String rightPrefix,\n       final JoinConditionAnalysis conditionAnalysis,\n-      final JoinType joinType\n+      final JoinType joinType,\n+      final DimFilter leftFilter\n+  )\n+  {\n+    return new JoinDataSource(left, right, rightPrefix, conditionAnalysis, joinType, leftFilter);\n+  }\n+\n+  /**\n+   * Create a join dataSource from an existing {@link JoinConditionAnalysis}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b51e4eb87135084d6036d1e989c8cd609bd51d80"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjA0Njg3MzI0", "url": "https://github.com/apache/druid/pull/10697#pullrequestreview-604687324", "createdAt": "2021-03-05T00:10:12Z", "commit": {"oid": "b51e4eb87135084d6036d1e989c8cd609bd51d80"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNVQwMDoxMDoxMlrOIwsT9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNVQwMDoxMDoxMlrOIwsT9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzkyODU2NQ==", "bodyText": "nit: Nested Pairs probably mean it's time for a named class.", "url": "https://github.com/apache/druid/pull/10697#discussion_r587928565", "createdAt": "2021-03-05T00:10:12Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/planning/DataSourceAnalysis.java", "diffHunk": "@@ -156,7 +166,7 @@ public static DataSourceAnalysis forDataSource(final DataSource dataSource)\n     // going-up order. So reverse them.\n     Collections.reverse(preJoinableClauses);\n \n-    return Pair.of(current, preJoinableClauses);\n+    return Pair.of(Pair.of(current, currentDimFilter), preJoinableClauses);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b51e4eb87135084d6036d1e989c8cd609bd51d80"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3215, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}