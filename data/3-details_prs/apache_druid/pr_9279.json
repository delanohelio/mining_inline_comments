{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MzE5MzQ0", "number": 9279, "title": "Guicify druid sql module", "bodyText": "Break up the SQLModule in to smaller modules and provide a binding that\nmodules can use to register schemas with druid sql.\nThis PR has:\n\n been self-reviewed.\n\n using the concurrency checklist (Remove this item if the PR doesn't have any relation to concurrency.)\n\n\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-01-29T00:43:10Z", "url": "https://github.com/apache/druid/pull/9279", "merged": true, "mergeCommit": {"oid": "33a97dfaae00d88fb3001f55e1fa23211edc7640"}, "closed": true, "closedAt": "2020-02-04T19:33:48Z", "author": {"login": "suneet-s"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-6-_mAH2gAyMzY4MzE5MzQ0OjFiOGM2MTM5MzRlYzNmZThhYWQ4OGExMzgwOWRjMGVjMzgzZDhjNGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBF__zAFqTM1MzIwOTUwMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1b8c613934ec3fe8aad88a13809dc0ec383d8c4d", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/1b8c613934ec3fe8aad88a13809dc0ec383d8c4d", "committedDate": "2020-01-29T00:41:32Z", "message": "Guicify druid sql module\n\nBreak up the SQLModule in to smaller modules and provide a binding that\nmodules can use to register schemas with druid sql."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5ODMzMjc3", "url": "https://github.com/apache/druid/pull/9279#pullrequestreview-349833277", "createdAt": "2020-01-29T02:41:55Z", "commit": {"oid": "1b8c613934ec3fe8aad88a13809dc0ec383d8c4d"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMjo0MTo1NVrOFi7GLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMjo1OToxM1rOFi7Tbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2NDE0Mw==", "bodyText": "This one is final but the one in SqlBenchmark isn't, any reason?\n(Fwiw I usually like labeling things final whenever possible but I don't insist on it, except for class fields)", "url": "https://github.com/apache/druid/pull/9279#discussion_r372164143", "createdAt": "2020-01-29T02:41:55Z", "author": {"login": "gianm"}, "path": "benchmarks/src/main/java/org/apache/druid/benchmark/query/SqlVsNativeBenchmark.java", "diffHunk": "@@ -116,12 +115,10 @@ public void setup()\n     final PlannerConfig plannerConfig = new PlannerConfig();\n \n     this.walker = closer.register(new SpecificSegmentsQuerySegmentWalker(conglomerate).add(dataSegment, index));\n-    final DruidSchema druidSchema = CalciteTests.createMockSchema(conglomerate, walker, plannerConfig);\n-    final SystemSchema systemSchema = CalciteTests.createMockSystemSchema(druidSchema, walker, plannerConfig);\n-\n+    final SchemaPlus rootSchema =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8c613934ec3fe8aad88a13809dc0ec383d8c4d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2NTE0OA==", "bodyText": "Even though this is in the SQL module, I think it'd still be better to call it SqlAggregationModule. There's another AggregatorsModule and it would be confusing to see them side by side in an IDE or code search.", "url": "https://github.com/apache/druid/pull/9279#discussion_r372165148", "createdAt": "2020-01-29T02:47:04Z", "author": {"login": "gianm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/aggregation/AggregationModule.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.calcite.aggregation;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import com.google.inject.multibindings.Multibinder;\n+\n+/**\n+ * Module that provides SQL aggregations.\n+ * To add an aggregation use {@link org.apache.druid.sql.guice.SqlBindings#addAggregator(Binder, Class)}\n+ */\n+public class AggregationModule implements Module", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8c613934ec3fe8aad88a13809dc0ec383d8c4d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2NTMzMw==", "bodyText": "IMO CalcitePlannerModule is fine / better. We don't use Calcite for anything other than Druid SQL so it's not ambiguous.", "url": "https://github.com/apache/druid/pull/9279#discussion_r372165333", "createdAt": "2020-01-29T02:48:02Z", "author": {"login": "gianm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/planner/DruidSqlCalcitePlannerModule.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.calcite.planner;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import com.google.inject.Scopes;\n+import org.apache.calcite.schema.SchemaPlus;\n+import org.apache.druid.guice.JsonConfigProvider;\n+\n+/**\n+ * The module responsible for provide bindings for the Calcite Planner.\n+ */\n+public class DruidSqlCalcitePlannerModule implements Module", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8c613934ec3fe8aad88a13809dc0ec383d8c4d"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2NTg3MQ==", "bodyText": "I'll only mention this once to avoid clutter in the review, but IMO Javadoc lines are nicer looking when they are punctuated like sentences (end in periods). Even if they're not really sentences.", "url": "https://github.com/apache/druid/pull/9279#discussion_r372165871", "createdAt": "2020-01-29T02:50:35Z", "author": {"login": "gianm"}, "path": "sql/src/main/java/org/apache/druid/sql/avatica/AvaticaModule.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.avatica;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import org.apache.druid.guice.JsonConfigProvider;\n+import org.apache.druid.guice.LazySingleton;\n+import org.apache.druid.server.initialization.jetty.JettyBindings;\n+import org.apache.druid.server.metrics.MetricsModule;\n+\n+/**\n+ * The module responsible for providing bindings to Avatica", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8c613934ec3fe8aad88a13809dc0ec383d8c4d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2NjQ2NQ==", "bodyText": "I'm wondering why you wanted to split these up? It seemed nice to me to have all the core SQL-related bindings in one file.", "url": "https://github.com/apache/druid/pull/9279#discussion_r372166465", "createdAt": "2020-01-29T02:53:30Z", "author": {"login": "gianm"}, "path": "sql/src/main/java/org/apache/druid/sql/guice/SqlModule.java", "diffHunk": "@@ -63,25 +55,21 @@ public void configure(Binder binder)\n     if (isEnabled()) {\n       Calcites.setSystemProperties();\n \n-      JsonConfigProvider.bind(binder, \"druid.sql.planner\", PlannerConfig.class);\n-      JsonConfigProvider.bind(binder, \"druid.sql.avatica\", AvaticaServerConfig.class);\n-      LifecycleModule.register(binder, DruidSchema.class);\n       binder.bind(ViewManager.class).to(NoopViewManager.class).in(LazySingleton.class);\n \n-      // Add empty SqlAggregator binder.\n-      Multibinder.newSetBinder(binder, SqlAggregator.class);\n+      binder.install(new DruidCalciteSchemaModule());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8c613934ec3fe8aad88a13809dc0ec383d8c4d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2NjY3OA==", "bodyText": "Maybe do addSchema to be consistent with the others.\nI recognize this isn't consistent with how DruidBindings works, but you can't win 'em all. (Well, I guess you could win them all, if you changed DruidBindings too.)", "url": "https://github.com/apache/druid/pull/9279#discussion_r372166678", "createdAt": "2020-01-29T02:54:45Z", "author": {"login": "gianm"}, "path": "sql/src/main/java/org/apache/druid/sql/guice/SqlBindings.java", "diffHunk": "@@ -41,4 +45,12 @@ public static void addOperatorConversion(\n   {\n     Multibinder.newSetBinder(binder, SqlOperatorConversion.class).addBinding().to(clazz);\n   }\n+\n+  /**\n+   * Returns a multiBinder that can modules can use to bind {@link DruidCalciteSchema} to be used by the SqlModule\n+   */\n+  public static Multibinder<DruidCalciteSchema> calciteSchemaBinder(final Binder binder)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8c613934ec3fe8aad88a13809dc0ec383d8c4d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2NzUzNA==", "bodyText": "Do you think it makes sense to make this a SchemaProvider and have it return a Schema instead of being one? It always seems weird to me to extend other libraries' interfaces and add methods to them.", "url": "https://github.com/apache/druid/pull/9279#discussion_r372167534", "createdAt": "2020-01-29T02:59:13Z", "author": {"login": "gianm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidCalciteSchema.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.calcite.schema;\n+\n+import org.apache.calcite.schema.Schema;\n+\n+/**\n+ * A calcite schema that has a name which it should be registered to.\n+ */\n+public interface DruidCalciteSchema extends Schema", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8c613934ec3fe8aad88a13809dc0ec383d8c4d"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6a2c7f06601dfd9caf2a69e37be80ff90a586ba", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/c6a2c7f06601dfd9caf2a69e37be80ff90a586ba", "committedDate": "2020-01-29T18:35:25Z", "message": "fix some tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29c620e4659d027a4c0ab64f14de9a65c6ee42c3", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/29c620e4659d027a4c0ab64f14de9a65c6ee42c3", "committedDate": "2020-01-31T19:12:10Z", "message": "Merge remote-tracking branch 'upstream/master' into sql"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afbd6db50ca93d3fd0e45bcfc0ff124e34efa038", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/afbd6db50ca93d3fd0e45bcfc0ff124e34efa038", "committedDate": "2020-01-31T19:37:03Z", "message": "address code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "837ced94b1fd0899127b5ad5afc70bafd8a5b108", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/837ced94b1fd0899127b5ad5afc70bafd8a5b108", "committedDate": "2020-01-31T21:07:38Z", "message": "tests compile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e3095dbd6d4d5e60550b19a8a8661e5cfd106ad", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/0e3095dbd6d4d5e60550b19a8a8661e5cfd106ad", "committedDate": "2020-02-01T00:24:11Z", "message": "Working tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "717e480f8da549ccfe3a049cf483095da56b2213", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/717e480f8da549ccfe3a049cf483095da56b2213", "committedDate": "2020-02-01T06:46:18Z", "message": "Add all the tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "221a7cc534ddf13be8fbd32bca1c937890f5df5b", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/221a7cc534ddf13be8fbd32bca1c937890f5df5b", "committedDate": "2020-02-01T06:46:35Z", "message": "Merge remote-tracking branch 'upstream/master' into sql"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6ff378356462c7351257af53db3249e71c3f7e4", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/b6ff378356462c7351257af53db3249e71c3f7e4", "committedDate": "2020-02-02T06:09:34Z", "message": "fix up licenses and dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f84007921ea7874a966e6142dd3c64257a572344", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/f84007921ea7874a966e6142dd3c64257a572344", "committedDate": "2020-02-02T19:39:48Z", "message": "Merge remote-tracking branch 'upstream/master' into sql"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecb691168db9b57b45bfedbf801db27e65c567c3", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/ecb691168db9b57b45bfedbf801db27e65c567c3", "committedDate": "2020-02-03T01:31:39Z", "message": "add calcite dependency to druid-benchmarks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c80e41b77227c9e69f1ef8c568e76ced57a150c5", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/c80e41b77227c9e69f1ef8c568e76ced57a150c5", "committedDate": "2020-02-03T03:58:07Z", "message": "tests pass"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNTg3ODcw", "url": "https://github.com/apache/druid/pull/9279#pullrequestreview-352587870", "createdAt": "2020-02-03T21:50:07Z", "commit": {"oid": "c80e41b77227c9e69f1ef8c568e76ced57a150c5"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMTo1MDowN1rOFlBLLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMzo1NDowNVrOFlECKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2MDg3OA==", "bodyText": "This is (AFAIK) only used by DruidOperatorTable, which is provided by CalcitePlannerModule. I don't think anyone would ever want just one or the other. Would it make sense to combine them?", "url": "https://github.com/apache/druid/pull/9279#discussion_r374360878", "createdAt": "2020-02-03T21:50:07Z", "author": {"login": "gianm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/aggregation/SqlAggregationModule.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.calcite.aggregation;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import com.google.inject.multibindings.Multibinder;\n+\n+/**\n+ * Module that provides SQL aggregations.\n+ * To add an aggregation use {@link org.apache.druid.sql.guice.SqlBindings#addAggregator(Binder, Class)}\n+ */\n+public class SqlAggregationModule implements Module\n+{\n+  @Override\n+  public void configure(Binder binder)\n+  {\n+    // Add empty SqlAggregator binder.\n+    Multibinder.newSetBinder(binder, SqlAggregator.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c80e41b77227c9e69f1ef8c568e76ced57a150c5"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2MTQ5NA==", "bodyText": "But which bindings?", "url": "https://github.com/apache/druid/pull/9279#discussion_r374361494", "createdAt": "2020-02-03T21:51:27Z", "author": {"login": "gianm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidCalciteSchemaModule.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.calcite.schema;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import com.google.inject.Provides;\n+import com.google.inject.Scopes;\n+import com.google.inject.Singleton;\n+import com.google.inject.name.Named;\n+import com.google.inject.name.Names;\n+import org.apache.calcite.schema.SchemaPlus;\n+import org.apache.druid.guice.LifecycleModule;\n+import org.apache.druid.sql.guice.SqlBindings;\n+\n+/**\n+ * The module responsible for providing bindings", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c80e41b77227c9e69f1ef8c568e76ced57a150c5"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM5NDk3OA==", "bodyText": "Extract to a constant?", "url": "https://github.com/apache/druid/pull/9279#discussion_r374394978", "createdAt": "2020-02-03T23:13:23Z", "author": {"login": "gianm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidCalciteSchemaModule.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.calcite.schema;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import com.google.inject.Provides;\n+import com.google.inject.Scopes;\n+import com.google.inject.Singleton;\n+import com.google.inject.name.Named;\n+import com.google.inject.name.Names;\n+import org.apache.calcite.schema.SchemaPlus;\n+import org.apache.druid.guice.LifecycleModule;\n+import org.apache.druid.sql.guice.SqlBindings;\n+\n+/**\n+ * The module responsible for providing bindings\n+ */\n+public class DruidCalciteSchemaModule implements Module\n+{\n+  private static final String DRUID_SCHEMA_NAME = \"druid\";\n+  static final String INCOMPLETE_SCHEMA = \"INCOMPLETE_SCHEMA\";\n+\n+  @Override\n+  public void configure(Binder binder)\n+  {\n+    binder.bind(String.class).annotatedWith(DruidSchemaName.class).toInstance(DRUID_SCHEMA_NAME);\n+\n+    // Should only be used by the information schema\n+    binder.bind(SchemaPlus.class)\n+          .annotatedWith(Names.named(INCOMPLETE_SCHEMA))\n+          .toProvider(RootSchemaProvider.class)\n+          .in(Scopes.SINGLETON);\n+\n+    // DruidSchema needs to listen to changes for incoming segments\n+    LifecycleModule.register(binder, DruidSchema.class);\n+    binder.bind(SystemSchema.class).in(Scopes.SINGLETON);\n+    binder.bind(InformationSchema.class).in(Scopes.SINGLETON);\n+    binder.bind(LookupSchema.class).in(Scopes.SINGLETON);\n+\n+    // Binder to inject different schema to Calcite\n+    SqlBindings.addSchema(binder, DruidSqlSchema.class);\n+    SqlBindings.addSchema(binder, SystemSqlSchema.class);\n+    SqlBindings.addSchema(binder, LookupSqlSchema.class);\n+  }\n+\n+  @Provides\n+  @Singleton\n+  private SchemaPlus getRootSchema(@Named(INCOMPLETE_SCHEMA) SchemaPlus rootSchema, InformationSchema informationSchema)\n+  {\n+    String name = \"INFORMATION_SCHEMA\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c80e41b77227c9e69f1ef8c568e76ced57a150c5"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwMDEzMg==", "bodyText": "This is a bit gross. The binding setup and method signatures suggest that the complete root schema is built using an incomplete root schema as input. But this method actually modifies the incomplete schema and they end up being the exact same object. And in fact, that grossness is required for the InformationSchema to work properly, because it needs to be able to see itself in the root schema!\nMaybe we could give the InformationSchema a root schema provider instead of the actual root schema? Would that work? It'd be cleaner, if so.", "url": "https://github.com/apache/druid/pull/9279#discussion_r374400132", "createdAt": "2020-02-03T23:28:40Z", "author": {"login": "gianm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidCalciteSchemaModule.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.calcite.schema;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import com.google.inject.Provides;\n+import com.google.inject.Scopes;\n+import com.google.inject.Singleton;\n+import com.google.inject.name.Named;\n+import com.google.inject.name.Names;\n+import org.apache.calcite.schema.SchemaPlus;\n+import org.apache.druid.guice.LifecycleModule;\n+import org.apache.druid.sql.guice.SqlBindings;\n+\n+/**\n+ * The module responsible for providing bindings\n+ */\n+public class DruidCalciteSchemaModule implements Module\n+{\n+  private static final String DRUID_SCHEMA_NAME = \"druid\";\n+  static final String INCOMPLETE_SCHEMA = \"INCOMPLETE_SCHEMA\";\n+\n+  @Override\n+  public void configure(Binder binder)\n+  {\n+    binder.bind(String.class).annotatedWith(DruidSchemaName.class).toInstance(DRUID_SCHEMA_NAME);\n+\n+    // Should only be used by the information schema\n+    binder.bind(SchemaPlus.class)\n+          .annotatedWith(Names.named(INCOMPLETE_SCHEMA))\n+          .toProvider(RootSchemaProvider.class)\n+          .in(Scopes.SINGLETON);\n+\n+    // DruidSchema needs to listen to changes for incoming segments\n+    LifecycleModule.register(binder, DruidSchema.class);\n+    binder.bind(SystemSchema.class).in(Scopes.SINGLETON);\n+    binder.bind(InformationSchema.class).in(Scopes.SINGLETON);\n+    binder.bind(LookupSchema.class).in(Scopes.SINGLETON);\n+\n+    // Binder to inject different schema to Calcite\n+    SqlBindings.addSchema(binder, DruidSqlSchema.class);\n+    SqlBindings.addSchema(binder, SystemSqlSchema.class);\n+    SqlBindings.addSchema(binder, LookupSqlSchema.class);\n+  }\n+\n+  @Provides\n+  @Singleton\n+  private SchemaPlus getRootSchema(@Named(INCOMPLETE_SCHEMA) SchemaPlus rootSchema, InformationSchema informationSchema)\n+  {\n+    String name = \"INFORMATION_SCHEMA\";\n+    rootSchema.add(name, informationSchema);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c80e41b77227c9e69f1ef8c568e76ced57a150c5"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwMDg3Nw==", "bodyText": "\"schema\" (spelling). And \"Druid\" should be capitalized.", "url": "https://github.com/apache/druid/pull/9279#discussion_r374400877", "createdAt": "2020-02-03T23:30:57Z", "author": {"login": "gianm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidSchemaName.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.calcite.schema;\n+\n+import com.google.inject.BindingAnnotation;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * An annotation to get the name of the schenma to access druid tables in SQL.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c80e41b77227c9e69f1ef8c568e76ced57a150c5"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwMTE4NA==", "bodyText": "\"Druid\", \"SQL\" (capitalization)", "url": "https://github.com/apache/druid/pull/9279#discussion_r374401184", "createdAt": "2020-02-03T23:31:56Z", "author": {"login": "gianm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidSqlSchema.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.calcite.schema;\n+\n+import com.google.inject.Inject;\n+import org.apache.calcite.schema.Schema;\n+\n+/**\n+ * The schema for druid tables to be accessible via sql.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c80e41b77227c9e69f1ef8c568e76ced57a150c5"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwMTY4Nw==", "bodyText": "We now have classes DruidSchema, DruidSqlSchema, and DruidCalciteSchema. Their relationships aren't very clear from the names. How about naming them DruidSchema, DruidSchemaProvider, and SchemaProvider respectively?", "url": "https://github.com/apache/druid/pull/9279#discussion_r374401687", "createdAt": "2020-02-03T23:33:39Z", "author": {"login": "gianm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/schema/DruidSqlSchema.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.calcite.schema;\n+\n+import com.google.inject.Inject;\n+import org.apache.calcite.schema.Schema;\n+\n+/**\n+ * The schema for druid tables to be accessible via sql.\n+ */\n+class DruidSqlSchema implements DruidCalciteSchema", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c80e41b77227c9e69f1ef8c568e76ced57a150c5"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwMzEwMQ==", "bodyText": "Would be nice to have something here to check for duplicate schema names. I don't think the base Calcite class does.", "url": "https://github.com/apache/druid/pull/9279#discussion_r374403101", "createdAt": "2020-02-03T23:38:20Z", "author": {"login": "gianm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/schema/RootSchemaProvider.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.calcite.schema;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+import org.apache.calcite.jdbc.CalciteSchema;\n+import org.apache.calcite.schema.SchemaPlus;\n+\n+import java.util.Set;\n+\n+/**\n+ * Provides the RootSchema for calcite with\n+ * - metadata schema disabled because it's not needed\n+ * - caching disabled because druid's caching is better.\n+ *\n+ * All the provided schema are added to the rootSchema.\n+ */\n+public class RootSchemaProvider implements Provider<SchemaPlus>\n+{\n+  private final Set<DruidCalciteSchema> calciteSchemas;\n+\n+  @Inject\n+  RootSchemaProvider(Set<DruidCalciteSchema> calciteSchemas)\n+  {\n+    this.calciteSchemas = calciteSchemas;\n+  }\n+\n+  @Override\n+  public SchemaPlus get()\n+  {\n+    SchemaPlus rootSchema = CalciteSchema.createRootSchema(false, false).plus();\n+    calciteSchemas.forEach(schema -> rootSchema.add(schema.getSchemaName(), schema.getSchema()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c80e41b77227c9e69f1ef8c568e76ced57a150c5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwNDY1OQ==", "bodyText": "Is it really worth all this indirection and complexity to avoid having stuff refer to the static string \"druid\"?", "url": "https://github.com/apache/druid/pull/9279#discussion_r374404659", "createdAt": "2020-02-03T23:43:23Z", "author": {"login": "gianm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/view/DruidViewMacroFactory.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.calcite.view;\n+\n+import org.apache.druid.server.security.Escalator;\n+import org.apache.druid.sql.calcite.planner.PlannerFactory;\n+\n+/**\n+ * A factory to create a {@link DruidViewMacro} that is used by Guice for Assisted injection.\n+ */\n+public interface DruidViewMacroFactory\n+{\n+  /**\n+   * Creates an instance of {@link DruidViewMacro}\n+   */\n+  DruidViewMacro create(PlannerFactory plannerFactory, Escalator escalator, String viewSql);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c80e41b77227c9e69f1ef8c568e76ced57a150c5"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQwNzcyMw==", "bodyText": "The only reason I asked was because I was concerned that having things be too split up would make it hard for people to guess what functionality should be in which file (at least with something named SqlModule it's clear that all the SQL stuff goes in there).\nThe easier testability is nice though, so you convinced me it's worth it. Let's just make sure it's as clear as possible from the namings what stuff goes in what module (or at least from the javadocs).", "url": "https://github.com/apache/druid/pull/9279#discussion_r374407723", "createdAt": "2020-02-03T23:54:05Z", "author": {"login": "gianm"}, "path": "sql/src/main/java/org/apache/druid/sql/guice/SqlModule.java", "diffHunk": "@@ -63,25 +55,21 @@ public void configure(Binder binder)\n     if (isEnabled()) {\n       Calcites.setSystemProperties();\n \n-      JsonConfigProvider.bind(binder, \"druid.sql.planner\", PlannerConfig.class);\n-      JsonConfigProvider.bind(binder, \"druid.sql.avatica\", AvaticaServerConfig.class);\n-      LifecycleModule.register(binder, DruidSchema.class);\n       binder.bind(ViewManager.class).to(NoopViewManager.class).in(LazySingleton.class);\n \n-      // Add empty SqlAggregator binder.\n-      Multibinder.newSetBinder(binder, SqlAggregator.class);\n+      binder.install(new DruidCalciteSchemaModule());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2NjQ2NQ=="}, "originalCommit": {"oid": "1b8c613934ec3fe8aad88a13809dc0ec383d8c4d"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2addfb08ca0c79358f3bb7814f6c5a5e7f61619", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/a2addfb08ca0c79358f3bb7814f6c5a5e7f61619", "committedDate": "2020-02-04T17:37:35Z", "message": "rename the schemas"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32103e3d2d27cb7347592601671f02375735a470", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/32103e3d2d27cb7347592601671f02375735a470", "committedDate": "2020-02-04T17:38:00Z", "message": "Merge remote-tracking branch 'upstream/master' into sql"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMjA5NTAy", "url": "https://github.com/apache/druid/pull/9279#pullrequestreview-353209502", "createdAt": "2020-02-04T18:39:26Z", "commit": {"oid": "32103e3d2d27cb7347592601671f02375735a470"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3036, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}