{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNDY5MzI2", "number": 10006, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMDo1NToyNlrOEDrJsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMjo0NTowOVrOEFNOxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjg4MTc3OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/druid/java/util/common/StringUtilsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMDo1NToyNlrOGg1KRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMTowMzowNlrOGg1R9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3ODU5Ng==", "bodyText": "Shouldn't this call rpad()? (same below)", "url": "https://github.com/apache/druid/pull/10006#discussion_r437078596", "createdAt": "2020-06-09T00:55:26Z", "author": {"login": "ccaominh"}, "path": "core/src/test/java/org/apache/druid/java/util/common/StringUtilsTest.java", "diffHunk": "@@ -211,39 +211,51 @@ public void testRepeat()\n   @Test\n   public void testLpad()\n   {\n-    String s1 = StringUtils.lpad(\"abc\", 7, \"de\");\n-    Assert.assertEquals(s1, \"dedeabc\");\n+    String lpad = StringUtils.lpad(\"abc\", 7, \"de\");\n+    Assert.assertEquals(\"dedeabc\", lpad);\n \n-    String s2 = StringUtils.lpad(\"abc\", 6, \"de\");\n-    Assert.assertEquals(s2, \"dedabc\");\n+    lpad = StringUtils.lpad(\"abc\", 6, \"de\");\n+    Assert.assertEquals(\"dedabc\", lpad);\n \n-    String s3 = StringUtils.lpad(\"abc\", 2, \"de\");\n-    Assert.assertEquals(s3, \"ab\");\n+    lpad = StringUtils.lpad(\"abc\", 2, \"de\");\n+    Assert.assertEquals(\"ab\", lpad);\n \n-    String s4 = StringUtils.lpad(\"abc\", 0, \"de\");\n-    Assert.assertEquals(s4, \"\");\n+    lpad = StringUtils.lpad(\"abc\", 0, \"de\");\n+    Assert.assertEquals(\"\", lpad);\n \n-    String s5 = StringUtils.lpad(\"abc\", -1, \"de\");\n-    Assert.assertEquals(s5, null);\n+    lpad = StringUtils.lpad(\"abc\", -1, \"de\");\n+    Assert.assertNull(lpad);\n+\n+    lpad = StringUtils.lpad(\"abc\", 10, \"\");\n+    Assert.assertNull(lpad);\n+\n+    lpad = StringUtils.lpad(\"abc\", 1, \"\");\n+    Assert.assertNull(lpad);\n   }\n \n   @Test\n   public void testRpad()\n   {\n-    String s1 = StringUtils.rpad(\"abc\", 7, \"de\");\n-    Assert.assertEquals(s1, \"abcdede\");\n+    String rpad = StringUtils.rpad(\"abc\", 7, \"de\");\n+    Assert.assertEquals(\"abcdede\", rpad);\n+\n+    rpad = StringUtils.rpad(\"abc\", 6, \"de\");\n+    Assert.assertEquals(\"abcded\", rpad);\n+\n+    rpad = StringUtils.rpad(\"abc\", 2, \"de\");\n+    Assert.assertEquals(\"ab\", rpad);\n \n-    String s2 = StringUtils.rpad(\"abc\", 6, \"de\");\n-    Assert.assertEquals(s2, \"abcded\");\n+    rpad = StringUtils.rpad(\"abc\", 0, \"de\");\n+    Assert.assertEquals(\"\", rpad);\n \n-    String s3 = StringUtils.rpad(\"abc\", 2, \"de\");\n-    Assert.assertEquals(s3, \"ab\");\n+    rpad = StringUtils.rpad(\"abc\", -1, \"de\");\n+    Assert.assertNull(rpad);\n \n-    String s4 = StringUtils.rpad(\"abc\", 0, \"de\");\n-    Assert.assertEquals(s4, \"\");\n+    rpad = StringUtils.lpad(\"abc\", 10, \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a91399c4652c5e21ede221499bad8c963dc8fe89"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA4MDU2NA==", "bodyText": "\ud83e\udd26 bad copy paste", "url": "https://github.com/apache/druid/pull/10006#discussion_r437080564", "createdAt": "2020-06-09T01:03:06Z", "author": {"login": "suneet-s"}, "path": "core/src/test/java/org/apache/druid/java/util/common/StringUtilsTest.java", "diffHunk": "@@ -211,39 +211,51 @@ public void testRepeat()\n   @Test\n   public void testLpad()\n   {\n-    String s1 = StringUtils.lpad(\"abc\", 7, \"de\");\n-    Assert.assertEquals(s1, \"dedeabc\");\n+    String lpad = StringUtils.lpad(\"abc\", 7, \"de\");\n+    Assert.assertEquals(\"dedeabc\", lpad);\n \n-    String s2 = StringUtils.lpad(\"abc\", 6, \"de\");\n-    Assert.assertEquals(s2, \"dedabc\");\n+    lpad = StringUtils.lpad(\"abc\", 6, \"de\");\n+    Assert.assertEquals(\"dedabc\", lpad);\n \n-    String s3 = StringUtils.lpad(\"abc\", 2, \"de\");\n-    Assert.assertEquals(s3, \"ab\");\n+    lpad = StringUtils.lpad(\"abc\", 2, \"de\");\n+    Assert.assertEquals(\"ab\", lpad);\n \n-    String s4 = StringUtils.lpad(\"abc\", 0, \"de\");\n-    Assert.assertEquals(s4, \"\");\n+    lpad = StringUtils.lpad(\"abc\", 0, \"de\");\n+    Assert.assertEquals(\"\", lpad);\n \n-    String s5 = StringUtils.lpad(\"abc\", -1, \"de\");\n-    Assert.assertEquals(s5, null);\n+    lpad = StringUtils.lpad(\"abc\", -1, \"de\");\n+    Assert.assertNull(lpad);\n+\n+    lpad = StringUtils.lpad(\"abc\", 10, \"\");\n+    Assert.assertNull(lpad);\n+\n+    lpad = StringUtils.lpad(\"abc\", 1, \"\");\n+    Assert.assertNull(lpad);\n   }\n \n   @Test\n   public void testRpad()\n   {\n-    String s1 = StringUtils.rpad(\"abc\", 7, \"de\");\n-    Assert.assertEquals(s1, \"abcdede\");\n+    String rpad = StringUtils.rpad(\"abc\", 7, \"de\");\n+    Assert.assertEquals(\"abcdede\", rpad);\n+\n+    rpad = StringUtils.rpad(\"abc\", 6, \"de\");\n+    Assert.assertEquals(\"abcded\", rpad);\n+\n+    rpad = StringUtils.rpad(\"abc\", 2, \"de\");\n+    Assert.assertEquals(\"ab\", rpad);\n \n-    String s2 = StringUtils.rpad(\"abc\", 6, \"de\");\n-    Assert.assertEquals(s2, \"abcded\");\n+    rpad = StringUtils.rpad(\"abc\", 0, \"de\");\n+    Assert.assertEquals(\"\", rpad);\n \n-    String s3 = StringUtils.rpad(\"abc\", 2, \"de\");\n-    Assert.assertEquals(s3, \"ab\");\n+    rpad = StringUtils.rpad(\"abc\", -1, \"de\");\n+    Assert.assertNull(rpad);\n \n-    String s4 = StringUtils.rpad(\"abc\", 0, \"de\");\n-    Assert.assertEquals(s4, \"\");\n+    rpad = StringUtils.lpad(\"abc\", 10, \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3ODU5Ng=="}, "originalCommit": {"oid": "a91399c4652c5e21ede221499bad8c963dc8fe89"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjg4MzYwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/java/util/common/StringUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMDo1NjozN1rOGg1LcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMToxNzowMlrOGg1gLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3ODg5Nw==", "bodyText": "Doesn't rpad() need a similar change?", "url": "https://github.com/apache/druid/pull/10006#discussion_r437078897", "createdAt": "2020-06-09T00:56:37Z", "author": {"login": "ccaominh"}, "path": "core/src/main/java/org/apache/druid/java/util/common/StringUtils.java", "diffHunk": "@@ -481,9 +482,10 @@ public static String repeat(String s, int count)\n    *\n    * @return the string left-padded with pad to a length of len\n    */\n-  public static String lpad(String base, Integer len, String pad)\n+  @Nullable\n+  public static String lpad(@Nonnull String base, int len, @Nonnull String pad)\n   {\n-    if (len < 0) {\n+    if (len < 0 || pad.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a91399c4652c5e21ede221499bad8c963dc8fe89"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA4NDIwNA==", "bodyText": "Yeah I thought I made the change because FunctionTest was passing. Fixed now.\nI debugged it, and saw that FunctionTest passes because it treats the empty string as null ( probably the default null handling mode in the Expr system), so the rpad function thinks the pad that is passed in is null, not empty.", "url": "https://github.com/apache/druid/pull/10006#discussion_r437084204", "createdAt": "2020-06-09T01:17:02Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/java/util/common/StringUtils.java", "diffHunk": "@@ -481,9 +482,10 @@ public static String repeat(String s, int count)\n    *\n    * @return the string left-padded with pad to a length of len\n    */\n-  public static String lpad(String base, Integer len, String pad)\n+  @Nullable\n+  public static String lpad(@Nonnull String base, int len, @Nonnull String pad)\n   {\n-    if (len < 0) {\n+    if (len < 0 || pad.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3ODg5Nw=="}, "originalCommit": {"oid": "a91399c4652c5e21ede221499bad8c963dc8fe89"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjk0NjkwOnYy", "diffSide": "RIGHT", "path": "docs/querying/sql.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMTozNDoyMFrOGg1xbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMjoxMDozNFrOGg2V3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA4ODYyMA==", "bodyText": "Sorry I missed this before, but I tried lpad and rpad with mysql and postgres since they aren't standard functions. If the padding is an empty string, mysql returns null whereas postgres returns the original string. In the past, we've matched the behavior of postgres (e.g., #9488 (comment)), so it'd be good to match the postgres behavior for lpad and rpad as well.", "url": "https://github.com/apache/druid/pull/10006#discussion_r437088620", "createdAt": "2020-06-09T01:34:20Z", "author": {"login": "ccaominh"}, "path": "docs/querying/sql.md", "diffHunk": "@@ -337,8 +337,8 @@ String functions accept strings, and return a type appropriate to the function.\n |`UPPER(expr)`|Returns expr in all uppercase.|\n |`REVERSE(expr)`|Reverses expr.|\n |`REPEAT(expr, [N])`|Repeats expr N times|\n-|`LPAD(expr, length[, chars])`|Returns a string of \"length\" from \"expr\" left-padded with \"chars\". If \"length\" is shorter than the length of \"expr\", the result is \"expr\" which is truncated to \"length\". If either \"expr\" or \"chars\" are null, the result will be null.|\n-|`RPAD(expr, length[, chars])`|Returns a string of \"length\" from \"expr\" right-padded with \"chars\". If \"length\" is shorter than the length of \"expr\", the result is \"expr\" which is truncated to \"length\". If either \"expr\" or \"chars\" are null, the result will be null.|\n+|`LPAD(expr, length[, chars])`|Returns a string of `length` from `expr` left-padded with `chars`. If `length` is shorter than the length of `expr`, the result is `expr` which is truncated to `length`. The result will be null if either `expr` is null, or `chars` is either null or empty.|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "170ec786fa1c8323faa0a247aea3f25499b4a862"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA5NjMzOQ==", "bodyText": "upvote for preferring postgres behavior to mysql", "url": "https://github.com/apache/druid/pull/10006#discussion_r437096339", "createdAt": "2020-06-09T02:04:19Z", "author": {"login": "clintropolis"}, "path": "docs/querying/sql.md", "diffHunk": "@@ -337,8 +337,8 @@ String functions accept strings, and return a type appropriate to the function.\n |`UPPER(expr)`|Returns expr in all uppercase.|\n |`REVERSE(expr)`|Reverses expr.|\n |`REPEAT(expr, [N])`|Repeats expr N times|\n-|`LPAD(expr, length[, chars])`|Returns a string of \"length\" from \"expr\" left-padded with \"chars\". If \"length\" is shorter than the length of \"expr\", the result is \"expr\" which is truncated to \"length\". If either \"expr\" or \"chars\" are null, the result will be null.|\n-|`RPAD(expr, length[, chars])`|Returns a string of \"length\" from \"expr\" right-padded with \"chars\". If \"length\" is shorter than the length of \"expr\", the result is \"expr\" which is truncated to \"length\". If either \"expr\" or \"chars\" are null, the result will be null.|\n+|`LPAD(expr, length[, chars])`|Returns a string of `length` from `expr` left-padded with `chars`. If `length` is shorter than the length of `expr`, the result is `expr` which is truncated to `length`. The result will be null if either `expr` is null, or `chars` is either null or empty.|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA4ODYyMA=="}, "originalCommit": {"oid": "170ec786fa1c8323faa0a247aea3f25499b4a862"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA5Nzk0OQ==", "bodyText": "Actually, looking closer this will need changed here too https://github.com/apache/druid/blob/master/core/src/main/java/org/apache/druid/math/expr/Function.java#L1917 since it is treating the value as null if the pad is null. If we fix the issue there and check if pad is null or empty we can avoid entering the StringUtils function entirely (though we should still fix the StringUtils method)\nIf we change the behavior with null input we should also tag this with release notes label.", "url": "https://github.com/apache/druid/pull/10006#discussion_r437097949", "createdAt": "2020-06-09T02:10:34Z", "author": {"login": "clintropolis"}, "path": "docs/querying/sql.md", "diffHunk": "@@ -337,8 +337,8 @@ String functions accept strings, and return a type appropriate to the function.\n |`UPPER(expr)`|Returns expr in all uppercase.|\n |`REVERSE(expr)`|Reverses expr.|\n |`REPEAT(expr, [N])`|Repeats expr N times|\n-|`LPAD(expr, length[, chars])`|Returns a string of \"length\" from \"expr\" left-padded with \"chars\". If \"length\" is shorter than the length of \"expr\", the result is \"expr\" which is truncated to \"length\". If either \"expr\" or \"chars\" are null, the result will be null.|\n-|`RPAD(expr, length[, chars])`|Returns a string of \"length\" from \"expr\" right-padded with \"chars\". If \"length\" is shorter than the length of \"expr\", the result is \"expr\" which is truncated to \"length\". If either \"expr\" or \"chars\" are null, the result will be null.|\n+|`LPAD(expr, length[, chars])`|Returns a string of `length` from `expr` left-padded with `chars`. If `length` is shorter than the length of `expr`, the result is `expr` which is truncated to `length`. The result will be null if either `expr` is null, or `chars` is either null or empty.|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA4ODYyMA=="}, "originalCommit": {"oid": "170ec786fa1c8323faa0a247aea3f25499b4a862"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzAwMDAwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/java/util/common/StringUtils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMjowNjozNVrOGg2R8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODowMDozOVrOGiAadw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA5Njk0NA==", "bodyText": "Afaik we don't traditionally annotate things explicitly with @Nonnull, in preference of using @Nullable and @EverythingIsNonnullByDefault in package.info, however I guess we haven't gone through and set that everywhere. However, to be more consistent with other places in the code maybe that would be better?", "url": "https://github.com/apache/druid/pull/10006#discussion_r437096944", "createdAt": "2020-06-09T02:06:35Z", "author": {"login": "clintropolis"}, "path": "core/src/main/java/org/apache/druid/java/util/common/StringUtils.java", "diffHunk": "@@ -481,9 +482,10 @@ public static String repeat(String s, int count)\n    *\n    * @return the string left-padded with pad to a length of len\n    */\n-  public static String lpad(String base, Integer len, String pad)\n+  @Nullable\n+  public static String lpad(@Nonnull String base, int len, @Nonnull String pad)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "170ec786fa1c8323faa0a247aea3f25499b4a862"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA5OTA4Mg==", "bodyText": "To add to this, there are plenty of existing @Nonnull annotations in the code, so this change isn't really required, mostly just expressing my preference to keep things from getting too verbose \ud83d\ude05", "url": "https://github.com/apache/druid/pull/10006#discussion_r437099082", "createdAt": "2020-06-09T02:14:38Z", "author": {"login": "clintropolis"}, "path": "core/src/main/java/org/apache/druid/java/util/common/StringUtils.java", "diffHunk": "@@ -481,9 +482,10 @@ public static String repeat(String s, int count)\n    *\n    * @return the string left-padded with pad to a length of len\n    */\n-  public static String lpad(String base, Integer len, String pad)\n+  @Nullable\n+  public static String lpad(@Nonnull String base, int len, @Nonnull String pad)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA5Njk0NA=="}, "originalCommit": {"oid": "170ec786fa1c8323faa0a247aea3f25499b4a862"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxMTU0Mw==", "bodyText": "I was going to remove the annotations, but then I saw that we don't have @EverythingIsNonnullByDefault on this package. Since this is in core, I'm a little more paranoid about adding the annotation to this package. \ud83d\ude05\nI'd like to keep this as is for now.", "url": "https://github.com/apache/druid/pull/10006#discussion_r438311543", "createdAt": "2020-06-10T18:00:39Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/java/util/common/StringUtils.java", "diffHunk": "@@ -481,9 +482,10 @@ public static String repeat(String s, int count)\n    *\n    * @return the string left-padded with pad to a length of len\n    */\n-  public static String lpad(String base, Integer len, String pad)\n+  @Nullable\n+  public static String lpad(@Nonnull String base, int len, @Nonnull String pad)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA5Njk0NA=="}, "originalCommit": {"oid": "170ec786fa1c8323faa0a247aea3f25499b4a862"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTY2MTc5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/druid/java/util/common/StringUtilsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMToyOToyNlrOGiLhqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMToyOToyNlrOGiLhqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5MzYwOQ==", "bodyText": "Looks like postgres returns an empty string for this case (but mysql returns null)", "url": "https://github.com/apache/druid/pull/10006#discussion_r438493609", "createdAt": "2020-06-11T01:29:26Z", "author": {"login": "ccaominh"}, "path": "core/src/test/java/org/apache/druid/java/util/common/StringUtilsTest.java", "diffHunk": "@@ -211,39 +204,51 @@ public void testRepeat()\n   @Test\n   public void testLpad()\n   {\n-    String s1 = StringUtils.lpad(\"abc\", 7, \"de\");\n-    Assert.assertEquals(s1, \"dedeabc\");\n+    String lpad = StringUtils.lpad(\"abc\", 7, \"de\");\n+    Assert.assertEquals(\"dedeabc\", lpad);\n \n-    String s2 = StringUtils.lpad(\"abc\", 6, \"de\");\n-    Assert.assertEquals(s2, \"dedabc\");\n+    lpad = StringUtils.lpad(\"abc\", 6, \"de\");\n+    Assert.assertEquals(\"dedabc\", lpad);\n \n-    String s3 = StringUtils.lpad(\"abc\", 2, \"de\");\n-    Assert.assertEquals(s3, \"ab\");\n+    lpad = StringUtils.lpad(\"abc\", 2, \"de\");\n+    Assert.assertEquals(\"ab\", lpad);\n \n-    String s4 = StringUtils.lpad(\"abc\", 0, \"de\");\n-    Assert.assertEquals(s4, \"\");\n+    lpad = StringUtils.lpad(\"abc\", 0, \"de\");\n+    Assert.assertEquals(\"\", lpad);\n \n-    String s5 = StringUtils.lpad(\"abc\", -1, \"de\");\n-    Assert.assertEquals(s5, null);\n+    lpad = StringUtils.lpad(\"abc\", -1, \"de\");\n+    Assert.assertNull(lpad);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3857fe7dfa9fa22eb64272c57c135e3c8bb97dd"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTY2MjE4OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/org/apache/druid/java/util/common/StringUtilsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMToyOTo0MlrOGiLh5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMToyOTo0MlrOGiLh5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5MzY3MA==", "bodyText": "Similar comment as lpad", "url": "https://github.com/apache/druid/pull/10006#discussion_r438493670", "createdAt": "2020-06-11T01:29:42Z", "author": {"login": "ccaominh"}, "path": "core/src/test/java/org/apache/druid/java/util/common/StringUtilsTest.java", "diffHunk": "@@ -211,39 +204,51 @@ public void testRepeat()\n   @Test\n   public void testLpad()\n   {\n-    String s1 = StringUtils.lpad(\"abc\", 7, \"de\");\n-    Assert.assertEquals(s1, \"dedeabc\");\n+    String lpad = StringUtils.lpad(\"abc\", 7, \"de\");\n+    Assert.assertEquals(\"dedeabc\", lpad);\n \n-    String s2 = StringUtils.lpad(\"abc\", 6, \"de\");\n-    Assert.assertEquals(s2, \"dedabc\");\n+    lpad = StringUtils.lpad(\"abc\", 6, \"de\");\n+    Assert.assertEquals(\"dedabc\", lpad);\n \n-    String s3 = StringUtils.lpad(\"abc\", 2, \"de\");\n-    Assert.assertEquals(s3, \"ab\");\n+    lpad = StringUtils.lpad(\"abc\", 2, \"de\");\n+    Assert.assertEquals(\"ab\", lpad);\n \n-    String s4 = StringUtils.lpad(\"abc\", 0, \"de\");\n-    Assert.assertEquals(s4, \"\");\n+    lpad = StringUtils.lpad(\"abc\", 0, \"de\");\n+    Assert.assertEquals(\"\", lpad);\n \n-    String s5 = StringUtils.lpad(\"abc\", -1, \"de\");\n-    Assert.assertEquals(s5, null);\n+    lpad = StringUtils.lpad(\"abc\", -1, \"de\");\n+    Assert.assertNull(lpad);\n+\n+    lpad = StringUtils.lpad(\"abc\", 10, \"\");\n+    Assert.assertEquals(\"abc\", lpad);\n+\n+    lpad = StringUtils.lpad(\"abc\", 1, \"\");\n+    Assert.assertEquals(\"a\", lpad);\n   }\n \n   @Test\n   public void testRpad()\n   {\n-    String s1 = StringUtils.rpad(\"abc\", 7, \"de\");\n-    Assert.assertEquals(s1, \"abcdede\");\n+    String rpad = StringUtils.rpad(\"abc\", 7, \"de\");\n+    Assert.assertEquals(\"abcdede\", rpad);\n+\n+    rpad = StringUtils.rpad(\"abc\", 6, \"de\");\n+    Assert.assertEquals(\"abcded\", rpad);\n+\n+    rpad = StringUtils.rpad(\"abc\", 2, \"de\");\n+    Assert.assertEquals(\"ab\", rpad);\n \n-    String s2 = StringUtils.rpad(\"abc\", 6, \"de\");\n-    Assert.assertEquals(s2, \"abcded\");\n+    rpad = StringUtils.rpad(\"abc\", 0, \"de\");\n+    Assert.assertEquals(\"\", rpad);\n \n-    String s3 = StringUtils.rpad(\"abc\", 2, \"de\");\n-    Assert.assertEquals(s3, \"ab\");\n+    rpad = StringUtils.rpad(\"abc\", -1, \"de\");\n+    Assert.assertNull(rpad);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3857fe7dfa9fa22eb64272c57c135e3c8bb97dd"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODk1MDI0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/java/util/common/StringUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMjo0NDozM1rOGjTVoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjoyNzoyMFrOGj5tEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3MDE3Nw==", "bodyText": "nit: should the pad.isEmpty check be outside of the for loop since it isn't going to change over the course of the loop?", "url": "https://github.com/apache/druid/pull/10006#discussion_r439670177", "createdAt": "2020-06-12T22:44:33Z", "author": {"login": "clintropolis"}, "path": "core/src/main/java/org/apache/druid/java/util/common/StringUtils.java", "diffHunk": "@@ -472,30 +473,36 @@ public static String repeat(String s, int count)\n   /**\n    * Returns the string left-padded with the string pad to a length of len characters.\n    * If str is longer than len, the return value is shortened to len characters.\n-   * Lpad and rpad functions are migrated from flink's scala function with minor refactor\n+   * This function is migrated from flink's scala function with minor refactor\n    * https://github.com/apache/flink/blob/master/flink-table/flink-table-planner/src/main/scala/org/apache/flink/table/runtime/functions/ScalarFunctions.scala\n+   * - Modified to handle empty pad string.\n+   * - Padding of negative length return an empty string.\n    *\n    * @param base The base string to be padded\n    * @param len  The length of padded string\n    * @param pad  The pad string\n    *\n-   * @return the string left-padded with pad to a length of len\n+   * @return the string left-padded with pad to a length of len or null if the pad is empty or the len is less than 0.\n    */\n-  public static String lpad(String base, Integer len, String pad)\n+  @Nonnull\n+  public static String lpad(@Nonnull String base, int len, @Nonnull String pad)\n   {\n-    if (len < 0) {\n-      return null;\n-    } else if (len == 0) {\n+    if (len <= 0) {\n       return \"\";\n     }\n \n-    char[] data = new char[len];\n-\n     // The length of the padding needed\n     int pos = Math.max(len - base.length(), 0);\n \n+    // short-circuit if there is no pad and we need to add a padding\n+    if (pos > 0 && pad.isEmpty()) {\n+      return base;\n+    }\n+\n+    char[] data = new char[len];\n+\n     // Copy the padding\n-    for (int i = 0; i < pos; i += pad.length()) {\n+    for (int i = 0; !pad.isEmpty() && i < pos; i += pad.length()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed26264a871de173cf9ec8cefed73a23f36e6dfc"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI5ODc2OQ==", "bodyText": "Done", "url": "https://github.com/apache/druid/pull/10006#discussion_r440298769", "createdAt": "2020-06-15T16:27:20Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/java/util/common/StringUtils.java", "diffHunk": "@@ -472,30 +473,36 @@ public static String repeat(String s, int count)\n   /**\n    * Returns the string left-padded with the string pad to a length of len characters.\n    * If str is longer than len, the return value is shortened to len characters.\n-   * Lpad and rpad functions are migrated from flink's scala function with minor refactor\n+   * This function is migrated from flink's scala function with minor refactor\n    * https://github.com/apache/flink/blob/master/flink-table/flink-table-planner/src/main/scala/org/apache/flink/table/runtime/functions/ScalarFunctions.scala\n+   * - Modified to handle empty pad string.\n+   * - Padding of negative length return an empty string.\n    *\n    * @param base The base string to be padded\n    * @param len  The length of padded string\n    * @param pad  The pad string\n    *\n-   * @return the string left-padded with pad to a length of len\n+   * @return the string left-padded with pad to a length of len or null if the pad is empty or the len is less than 0.\n    */\n-  public static String lpad(String base, Integer len, String pad)\n+  @Nonnull\n+  public static String lpad(@Nonnull String base, int len, @Nonnull String pad)\n   {\n-    if (len < 0) {\n-      return null;\n-    } else if (len == 0) {\n+    if (len <= 0) {\n       return \"\";\n     }\n \n-    char[] data = new char[len];\n-\n     // The length of the padding needed\n     int pos = Math.max(len - base.length(), 0);\n \n+    // short-circuit if there is no pad and we need to add a padding\n+    if (pos > 0 && pad.isEmpty()) {\n+      return base;\n+    }\n+\n+    char[] data = new char[len];\n+\n     // Copy the padding\n-    for (int i = 0; i < pos; i += pad.length()) {\n+    for (int i = 0; !pad.isEmpty() && i < pos; i += pad.length()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3MDE3Nw=="}, "originalCommit": {"oid": "ed26264a871de173cf9ec8cefed73a23f36e6dfc"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODk1MTA5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/java/util/common/StringUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMjo0NTowOVrOGjTWGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjoyNzoyNlrOGj5tYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3MDI5Nw==", "bodyText": "same comment about moving pad.isEmpty out", "url": "https://github.com/apache/druid/pull/10006#discussion_r439670297", "createdAt": "2020-06-12T22:45:09Z", "author": {"login": "clintropolis"}, "path": "core/src/main/java/org/apache/druid/java/util/common/StringUtils.java", "diffHunk": "@@ -512,37 +519,47 @@ public static String lpad(String base, Integer len, String pad)\n   /**\n    * Returns the string right-padded with the string pad to a length of len characters.\n    * If str is longer than len, the return value is shortened to len characters.\n+   * This function is migrated from flink's scala function with minor refactor\n+   * https://github.com/apache/flink/blob/master/flink-table/flink-table-planner/src/main/scala/org/apache/flink/table/runtime/functions/ScalarFunctions.scala\n+   * - Modified to handle empty pad string.\n+   * - Modified to only copy the pad string if needed (this implementation mimics lpad).\n+   * - Padding of negative length return an empty string.\n    *\n    * @param base The base string to be padded\n    * @param len  The length of padded string\n    * @param pad  The pad string\n    *\n-   * @return the string right-padded with pad to a length of len\n+   * @return the string right-padded with pad to a length of len or null if the pad is empty or the len is less than 0.\n    */\n-  public static String rpad(String base, Integer len, String pad)\n+  @Nonnull\n+  public static String rpad(@Nonnull String base, int len, @Nonnull String pad)\n   {\n-    if (len < 0) {\n-      return null;\n-    } else if (len == 0) {\n+    if (len <= 0) {\n       return \"\";\n     }\n \n-    char[] data = new char[len];\n-\n-    int pos = 0;\n+    // The length of the padding needed\n+    int paddingLen = Math.max(len - base.length(), 0);\n \n-    // Copy the base\n-    for (; pos < base.length() && pos < len; pos++) {\n-      data[pos] = base.charAt(pos);\n+    // short-circuit if there is no pad and we need to add a padding\n+    if (paddingLen > 0 && pad.isEmpty()) {\n+      return base;\n     }\n \n+    char[] data = new char[len];\n+\n     // Copy the padding\n-    for (; pos < len; pos += pad.length()) {\n-      for (int i = 0; i < pad.length() && i < len - pos; i++) {\n-        data[pos + i] = pad.charAt(i);\n+    for (int i = len - paddingLen; !pad.isEmpty() && i < len; i += pad.length()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed26264a871de173cf9ec8cefed73a23f36e6dfc"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI5ODg0OA==", "bodyText": "Done", "url": "https://github.com/apache/druid/pull/10006#discussion_r440298848", "createdAt": "2020-06-15T16:27:26Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/java/util/common/StringUtils.java", "diffHunk": "@@ -512,37 +519,47 @@ public static String lpad(String base, Integer len, String pad)\n   /**\n    * Returns the string right-padded with the string pad to a length of len characters.\n    * If str is longer than len, the return value is shortened to len characters.\n+   * This function is migrated from flink's scala function with minor refactor\n+   * https://github.com/apache/flink/blob/master/flink-table/flink-table-planner/src/main/scala/org/apache/flink/table/runtime/functions/ScalarFunctions.scala\n+   * - Modified to handle empty pad string.\n+   * - Modified to only copy the pad string if needed (this implementation mimics lpad).\n+   * - Padding of negative length return an empty string.\n    *\n    * @param base The base string to be padded\n    * @param len  The length of padded string\n    * @param pad  The pad string\n    *\n-   * @return the string right-padded with pad to a length of len\n+   * @return the string right-padded with pad to a length of len or null if the pad is empty or the len is less than 0.\n    */\n-  public static String rpad(String base, Integer len, String pad)\n+  @Nonnull\n+  public static String rpad(@Nonnull String base, int len, @Nonnull String pad)\n   {\n-    if (len < 0) {\n-      return null;\n-    } else if (len == 0) {\n+    if (len <= 0) {\n       return \"\";\n     }\n \n-    char[] data = new char[len];\n-\n-    int pos = 0;\n+    // The length of the padding needed\n+    int paddingLen = Math.max(len - base.length(), 0);\n \n-    // Copy the base\n-    for (; pos < base.length() && pos < len; pos++) {\n-      data[pos] = base.charAt(pos);\n+    // short-circuit if there is no pad and we need to add a padding\n+    if (paddingLen > 0 && pad.isEmpty()) {\n+      return base;\n     }\n \n+    char[] data = new char[len];\n+\n     // Copy the padding\n-    for (; pos < len; pos += pad.length()) {\n-      for (int i = 0; i < pad.length() && i < len - pos; i++) {\n-        data[pos + i] = pad.charAt(i);\n+    for (int i = len - paddingLen; !pad.isEmpty() && i < len; i += pad.length()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3MDI5Nw=="}, "originalCommit": {"oid": "ed26264a871de173cf9ec8cefed73a23f36e6dfc"}, "originalPosition": 102}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2307, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}