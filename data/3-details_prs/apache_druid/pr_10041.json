{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1Nzg3OTI2", "number": 10041, "title": "global table only if joinable", "bodyText": "Description\nThis PR extends #10020 to more correctly only convert a TableDataSource to a GlobalTableDataSource if it is also joinable. In service to this, the JoinableFactory interface has been modified to add a new method:\nboolean isDirectlyJoinable(DataSource dataSource);\n\nwhich should return true if for a JoinableFactory and a DataSource may possibly produce a Joinable for at least some JoinAnalysis, directly, that is without a subquery join. This is useful, because DataSource.isGlobal is used to determine whether or not a subquery is necessary to complete the join. I left some notes in javadocs and comments on how we should consider using this new method in query planning and processing so that we might decouple the idea that a datasource is globally distributed among the cluster and whether or not a joinable can be directly built for it.\nSecondly, it adds automatic conversion of TableDataSource to GlobalTableDataSource for native druid queries whenever eligible, to make GlobalTableDataSource an internal construct.\nTo make these changes visible, the INFORMATION_SCHEMA.TABLES table now has two additional columns: IS_JOINABLE and IS_BROADCAST.\n\n\nIS_JOINABLE means that a Joinable can possibly be built for that table during query execution, allowing the right hand side of a join to be performed without issuing a subquery.\nIS_BROADCAST means that the table is distributed to all query processing servers (historicals, brokers, indexers/realtime tasks). Note that this value will be incorrect for broadcast datasources in clusters where the broker is not configured to serve broadcast segments, due to inferring if a datasource is broadcast by checking the brokers local segment cache. A future improvement might be to swap this out for something that examines the load rules instead of guessing.\n\n\nThis PR has:\n\n been self-reviewed.\n\n using the concurrency checklist (Remove this item if the PR doesn't have any relation to concurrency.)\n\n\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths, ensuring the threshold for code coverage is met.\n added integration tests.\n been tested in a test Druid cluster.\n\n\n\nKey changed/added classes in this PR\n\nClientQuerySegmentWalker\nJoinableFactory and implementations\nDruidSchema\nInformationSchema", "createdAt": "2020-06-17T11:26:53Z", "url": "https://github.com/apache/druid/pull/10041", "merged": true, "mergeCommit": {"oid": "b5e6569d2c1b52abcf41495a01fe0dc383ab037c"}, "closed": true, "closedAt": "2020-06-19T00:32:11Z", "author": {"login": "clintropolis"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsH1tYgH2gAyNDM1Nzg3OTI2OjcyY2NjMDhkZTEwYjA5NmJmOGUxNDhlMmExZmJiNDhjYTQ4YmY4MTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsnyLFgFqTQzMzcyNzE5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "72ccc08de10b096bf8e148e2a1fbb48ca48bf810", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/72ccc08de10b096bf8e148e2a1fbb48ca48bf810", "committedDate": "2020-06-17T11:06:45Z", "message": "global table if only joinable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01cb2df2999650c0a599d201e15023719fa01be9", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/01cb2df2999650c0a599d201e15023719fa01be9", "committedDate": "2020-06-17T11:53:48Z", "message": "oops"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f50b3ecfe89743cc23abf4bddbf981a0c2ff3af", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/0f50b3ecfe89743cc23abf4bddbf981a0c2ff3af", "committedDate": "2020-06-17T19:34:10Z", "message": "fix style, add more tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNzYzODE4", "url": "https://github.com/apache/druid/pull/10041#pullrequestreview-432763818", "createdAt": "2020-06-17T20:47:06Z", "commit": {"oid": "0f50b3ecfe89743cc23abf4bddbf981a0c2ff3af"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDo0NzowNlrOGlW1QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDo0NzowNlrOGlW1QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgyNDU3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      DataSource dataSource, JoinConditionAnalysis condition\n          \n          \n            \n                      DataSource dataSource,\n          \n          \n            \n                      JoinConditionAnalysis condition", "url": "https://github.com/apache/druid/pull/10041#discussion_r441824577", "createdAt": "2020-06-17T20:47:06Z", "author": {"login": "jihoonson"}, "path": "sql/src/test/java/org/apache/druid/sql/calcite/schema/DruidSchemaTest.java", "diffHunk": "@@ -222,10 +228,29 @@ public void setUp() throws Exception\n     serverView = new TestServerInventoryView(walker.getSegments(), realtimeSegments);\n     druidServers = serverView.getDruidServers();\n \n+    final JoinableFactory globalTableJoinable = new JoinableFactory()\n+    {\n+      @Override\n+      public boolean isDirectlyJoinable(DataSource dataSource)\n+      {\n+        return dataSource instanceof GlobalTableDataSource &&\n+               segmentDataSourceNames.contains(((GlobalTableDataSource) dataSource).getName());\n+      }\n+\n+      @Override\n+      public Optional<Joinable> build(\n+          DataSource dataSource, JoinConditionAnalysis condition", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f50b3ecfe89743cc23abf4bddbf981a0c2ff3af"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ad4ba4c56d2fcfc956dd13989f6c471e85bbe0b", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/2ad4ba4c56d2fcfc956dd13989f6c471e85bbe0b", "committedDate": "2020-06-17T20:47:18Z", "message": "Update sql/src/test/java/org/apache/druid/sql/calcite/schema/DruidSchemaTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cce3fcef864bdef2da9c3e219fbd57e5f98639ab", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/cce3fcef864bdef2da9c3e219fbd57e5f98639ab", "committedDate": "2020-06-18T06:30:28Z", "message": "better information schema columns, distinguish broadcast from joinable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "836c797b507ae40fad757f53e45239a155944224", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/836c797b507ae40fad757f53e45239a155944224", "committedDate": "2020-06-18T06:44:17Z", "message": "Merge remote-tracking branch 'upstream/master' into global-table-should-be-joinable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f7876560565e320c022e809bdcc047c457f1a05", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/1f7876560565e320c022e809bdcc047c457f1a05", "committedDate": "2020-06-18T07:15:02Z", "message": "fix javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNjg3Mjcz", "url": "https://github.com/apache/druid/pull/10041#pullrequestreview-433687273", "createdAt": "2020-06-18T22:24:00Z", "commit": {"oid": "1f7876560565e320c022e809bdcc047c457f1a05"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMjoyNDowMVrOGmCJEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMjoyNDowMVrOGmCJEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzNDE2Mw==", "bodyText": "super nit: even though query is not used in CachingClusteredClient.getQueryRunnerForSegments(), it could be better to use freeTradeQuery instead of query for future proof for when someone changes the logic of CachingClusteredClient.getQueryRunnerForSegments().", "url": "https://github.com/apache/druid/pull/10041#discussion_r442534163", "createdAt": "2020-06-18T22:24:01Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/server/ClientQuerySegmentWalker.java", "diffHunk": "@@ -187,10 +198,15 @@ public ClientQuerySegmentWalker(\n   @Override\n   public <T> QueryRunner<T> getQueryRunnerForSegments(Query<T> query, Iterable<SegmentDescriptor> specs)\n   {\n-    // Inlining isn't done for segments-based queries.\n+    // Inlining isn't done for segments-based queries, but we still globalify the table datasources if possible\n+    final Query<T> freeTradeQuery = query.withDataSource(globalizeIfPossible(query.getDataSource()));\n \n     if (canRunQueryUsingClusterWalker(query)) {\n-      return decorateClusterRunner(query, clusterClient.getQueryRunnerForSegments(query, specs));\n+      return new QuerySwappingQueryRunner<>(\n+          decorateClusterRunner(freeTradeQuery, clusterClient.getQueryRunnerForSegments(query, specs)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f7876560565e320c022e809bdcc047c457f1a05"}, "originalPosition": 96}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33c65a2339dacd49dfc88930877a06df3312ab2c", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/33c65a2339dacd49dfc88930877a06df3312ab2c", "committedDate": "2020-06-18T23:15:10Z", "message": "fix mistake"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNzIyODU0", "url": "https://github.com/apache/druid/pull/10041#pullrequestreview-433722854", "createdAt": "2020-06-19T00:05:18Z", "commit": {"oid": "33c65a2339dacd49dfc88930877a06df3312ab2c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNzI3MTk5", "url": "https://github.com/apache/druid/pull/10041#pullrequestreview-433727199", "createdAt": "2020-06-19T00:19:51Z", "commit": {"oid": "33c65a2339dacd49dfc88930877a06df3312ab2c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2107, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}