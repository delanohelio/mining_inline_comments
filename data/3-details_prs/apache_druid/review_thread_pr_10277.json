{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3NjQ4MjE4", "number": 10277, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOTozNTozMlrOEZn93A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMToyMzo1MFrOE-m-wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MzA0NjY4OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilities.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOTozNTozMlrOHCjD7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMzo0NDo0NVrOH7rBQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzMzY0Nw==", "bodyText": "could this be getComplexTypeName to tie it more strongly to complex types? It would also match the aggregator factory changes in #9638 which I've started working on again recently. If you recall this discussion #9638 (comment), I decided to go ahead and rename it to getComplexTypeName there because there are already breaking changes with the new abstract methods, so might as well make it intuitive.", "url": "https://github.com/apache/druid/pull/10277#discussion_r472433647", "createdAt": "2020-08-18T19:35:32Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilities.java", "diffHunk": "@@ -37,6 +37,12 @@\n    */\n   ValueType getType();\n \n+  /**\n+   *\n+   * If ValueType is COMPLEX, then the typeName associated with it.\n+   */\n+  String getTypeName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb9342655daf28733b2fdcb8f889a1e60608ba2d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUxNTA1Nw==", "bodyText": "sgtm", "url": "https://github.com/apache/druid/pull/10277#discussion_r472515057", "createdAt": "2020-08-18T21:54:09Z", "author": {"login": "himanshug"}, "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilities.java", "diffHunk": "@@ -37,6 +37,12 @@\n    */\n   ValueType getType();\n \n+  /**\n+   *\n+   * If ValueType is COMPLEX, then the typeName associated with it.\n+   */\n+  String getTypeName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzMzY0Nw=="}, "originalCommit": {"oid": "bb9342655daf28733b2fdcb8f889a1e60608ba2d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMzMjg2NA==", "bodyText": "changed", "url": "https://github.com/apache/druid/pull/10277#discussion_r532332864", "createdAt": "2020-11-30T03:44:45Z", "author": {"login": "himanshug"}, "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilities.java", "diffHunk": "@@ -37,6 +37,12 @@\n    */\n   ValueType getType();\n \n+  /**\n+   *\n+   * If ValueType is COMPLEX, then the typeName associated with it.\n+   */\n+  String getTypeName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzMzY0Nw=="}, "originalCommit": {"oid": "bb9342655daf28733b2fdcb8f889a1e60608ba2d"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MzA2MjU3OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/incremental/IncrementalIndex.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOTo0MDozNFrOHCjNxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMTo1NToxNlrOHCoD_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzNjE2Ng==", "bodyText": "Apologies for the conflicts here, I made some semi disruptive changes to push ColumnCapabilities into the DimensionIndexer implementations so they can be more accurate. I think the changes should still be workable with your addition of DimensionHandlerProvider, just the dimension indexer it provides will need to provide the complex column capabilities.", "url": "https://github.com/apache/druid/pull/10277#discussion_r472436166", "createdAt": "2020-08-18T19:40:34Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/incremental/IncrementalIndex.java", "diffHunk": "@@ -314,7 +315,12 @@ protected IncrementalIndex(\n     for (DimensionSchema dimSchema : dimensionsSpec.getDimensions()) {\n       ValueType type = TYPE_MAP.get(dimSchema.getValueType());\n       String dimName = dimSchema.getName();\n-      ColumnCapabilitiesImpl capabilities = makeDefaultCapabilitiesFromValueType(type);\n+\n+      // Note: Things might be simpler if DimensionSchema had a method \"getColumnCapabilities()\" which could return\n+      // type specific capabilities by itself. However, for various reasons, DimensionSchema currently lives in druid-core\n+      // while ColumnCapabilities lives in druid-processing which makes that approach difficult.\n+      ColumnCapabilitiesImpl capabilities = makeDefaultCapabilitiesFromValueType(type, dimSchema.getTypeName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb9342655daf28733b2fdcb8f889a1e60608ba2d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUxNTU4Mw==", "bodyText": "it should be alright, I will update this PR later when I have my MapStringString extension ready/deployed and tested with changes in this patch. thanks for the heads up.", "url": "https://github.com/apache/druid/pull/10277#discussion_r472515583", "createdAt": "2020-08-18T21:55:16Z", "author": {"login": "himanshug"}, "path": "processing/src/main/java/org/apache/druid/segment/incremental/IncrementalIndex.java", "diffHunk": "@@ -314,7 +315,12 @@ protected IncrementalIndex(\n     for (DimensionSchema dimSchema : dimensionsSpec.getDimensions()) {\n       ValueType type = TYPE_MAP.get(dimSchema.getValueType());\n       String dimName = dimSchema.getName();\n-      ColumnCapabilitiesImpl capabilities = makeDefaultCapabilitiesFromValueType(type);\n+\n+      // Note: Things might be simpler if DimensionSchema had a method \"getColumnCapabilities()\" which could return\n+      // type specific capabilities by itself. However, for various reasons, DimensionSchema currently lives in druid-core\n+      // while ColumnCapabilities lives in druid-processing which makes that approach difficult.\n+      ColumnCapabilitiesImpl capabilities = makeDefaultCapabilitiesFromValueType(type, dimSchema.getTypeName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzNjE2Ng=="}, "originalCommit": {"oid": "bb9342655daf28733b2fdcb8f889a1e60608ba2d"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDg1ODI2OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMToyMzo1MFrOH72w0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwMTowMzo1NlrOH90sPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUyNTI2Nw==", "bodyText": "nit: this should be setComplexTypeName probably to match capabilities", "url": "https://github.com/apache/druid/pull/10277#discussion_r532525267", "createdAt": "2020-11-30T11:23:50Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnBuilder.java", "diffHunk": "@@ -58,6 +58,12 @@ public ColumnBuilder setType(ValueType type)\n     return this;\n   }\n \n+  public ColumnBuilder setTypeName(String typeName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aef7890ef15c10e43bc212d1c19b595dc5f5eae1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU4ODQ3Nw==", "bodyText": "thanks, yeah updated, I missed it.", "url": "https://github.com/apache/druid/pull/10277#discussion_r534588477", "createdAt": "2020-12-03T01:03:56Z", "author": {"login": "himanshug"}, "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnBuilder.java", "diffHunk": "@@ -58,6 +58,12 @@ public ColumnBuilder setType(ValueType type)\n     return this;\n   }\n \n+  public ColumnBuilder setTypeName(String typeName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjUyNTI2Nw=="}, "originalCommit": {"oid": "aef7890ef15c10e43bc212d1c19b595dc5f5eae1"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2274, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}