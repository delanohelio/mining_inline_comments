{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MzM2NTUw", "number": 9281, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDoxNTo0NlrODcDAFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDoxNzoxN1rODcDBwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzM1ODkzOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/druid/guice/JoinableFactoryModuleTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDoxNTo0NlrOFj4jwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjo0NTo1NFrOFj8ciw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3MTEzOA==", "bodyText": "Do you want to add a similar assert below for LookupJoinableFactory?", "url": "https://github.com/apache/druid/pull/9281#discussion_r373171138", "createdAt": "2020-01-30T20:15:46Z", "author": {"login": "ccaominh"}, "path": "server/src/test/java/org/apache/druid/guice/JoinableFactoryModuleTest.java", "diffHunk": "@@ -63,7 +66,7 @@ public void testInjectDefaultBindingsShouldBeInjected()\n   {\n     Map<Class<? extends DataSource>, JoinableFactory> joinableFactories =\n         injector.getInstance(Key.get(new TypeLiteral<Map<Class<? extends DataSource>, JoinableFactory>>() {}));\n-    Assert.assertEquals(1, joinableFactories.size());\n+    Assert.assertEquals(2, joinableFactories.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d7908c0bd956129530839cd18b80321c05d768"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIzNDgyNw==", "bodyText": "Sure, that sounds good, I'll add one in a followup.", "url": "https://github.com/apache/druid/pull/9281#discussion_r373234827", "createdAt": "2020-01-30T22:45:54Z", "author": {"login": "gianm"}, "path": "server/src/test/java/org/apache/druid/guice/JoinableFactoryModuleTest.java", "diffHunk": "@@ -63,7 +66,7 @@ public void testInjectDefaultBindingsShouldBeInjected()\n   {\n     Map<Class<? extends DataSource>, JoinableFactory> joinableFactories =\n         injector.getInstance(Key.get(new TypeLiteral<Map<Class<? extends DataSource>, JoinableFactory>>() {}));\n-    Assert.assertEquals(1, joinableFactories.size());\n+    Assert.assertEquals(2, joinableFactories.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3MTEzOA=="}, "originalCommit": {"oid": "33d7908c0bd956129530839cd18b80321c05d768"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzM2MzIyOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/org/apache/druid/guice/JoinableFactoryModuleTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDoxNzoxN1rOFj4mVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjo0NjoxMlrOFj8c7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3MTc5Ng==", "bodyText": "Maybe JoinableFactoryModule.FACTORY_MAPPINGS can be made visible for testing so that this can be changed to FACTORY_MAPPINGS.size() + 1 and the test does not need to updated again if another default mapping is added later.", "url": "https://github.com/apache/druid/pull/9281#discussion_r373171796", "createdAt": "2020-01-30T20:17:17Z", "author": {"login": "ccaominh"}, "path": "server/src/test/java/org/apache/druid/guice/JoinableFactoryModuleTest.java", "diffHunk": "@@ -75,23 +78,25 @@ public void testJoinableFactoryCanBind()\n             .joinableFactoryBinder(binder).addBinding(NoopDataSource.class).toInstance(NoopJoinableFactory.INSTANCE));\n     Map<Class<? extends DataSource>, JoinableFactory> joinableFactories =\n         injector.getInstance(Key.get(new TypeLiteral<Map<Class<? extends DataSource>, JoinableFactory>>() {}));\n-    Assert.assertEquals(2, joinableFactories.size());\n+    Assert.assertEquals(3, joinableFactories.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d7908c0bd956129530839cd18b80321c05d768"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIzNDkyNw==", "bodyText": "Sounds reasonable, I'll add that in the same followup.", "url": "https://github.com/apache/druid/pull/9281#discussion_r373234927", "createdAt": "2020-01-30T22:46:12Z", "author": {"login": "gianm"}, "path": "server/src/test/java/org/apache/druid/guice/JoinableFactoryModuleTest.java", "diffHunk": "@@ -75,23 +78,25 @@ public void testJoinableFactoryCanBind()\n             .joinableFactoryBinder(binder).addBinding(NoopDataSource.class).toInstance(NoopJoinableFactory.INSTANCE));\n     Map<Class<? extends DataSource>, JoinableFactory> joinableFactories =\n         injector.getInstance(Key.get(new TypeLiteral<Map<Class<? extends DataSource>, JoinableFactory>>() {}));\n-    Assert.assertEquals(2, joinableFactories.size());\n+    Assert.assertEquals(3, joinableFactories.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3MTc5Ng=="}, "originalCommit": {"oid": "33d7908c0bd956129530839cd18b80321c05d768"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2840, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}