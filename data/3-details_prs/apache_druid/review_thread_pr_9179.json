{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMzYwNjQw", "number": 9179, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwODoxOTozOFrODYa46w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwODoyMToxMVrODYa6Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTMyOTcxOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/vector/GroupByVectorColumnSelector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwODoxOTozOFrOFeRIBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMjo0MjozNlrOFfqmgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4MjE4MQ==", "bodyText": "Could you please create an issue in youtrack.jetbrains.com and link here?", "url": "https://github.com/apache/druid/pull/9179#discussion_r367282181", "createdAt": "2020-01-16T08:19:38Z", "author": {"login": "leventov"}, "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/vector/GroupByVectorColumnSelector.java", "diffHunk": "@@ -27,6 +27,7 @@\n {\n   int getGroupingKeySize();\n \n+  @SuppressWarnings(\"unused\")  // false positive unused inspection warning for \"keySize\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34911ffa20ffcb6d83a97947ca1f3b30420fc762"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc0ODE2Mg==", "bodyText": "Added https://youtrack.jetbrains.com/issue/IDEA-231034", "url": "https://github.com/apache/druid/pull/9179#discussion_r368748162", "createdAt": "2020-01-20T22:42:36Z", "author": {"login": "ccaominh"}, "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/vector/GroupByVectorColumnSelector.java", "diffHunk": "@@ -27,6 +27,7 @@\n {\n   int getGroupingKeySize();\n \n+  @SuppressWarnings(\"unused\")  // false positive unused inspection warning for \"keySize\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4MjE4MQ=="}, "originalCommit": {"oid": "34911ffa20ffcb6d83a97947ca1f3b30420fc762"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTMzMzUwOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/data/ColumnarLongs.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwODoyMToxMVrOFeRKPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMjo0MzoxM1rOFfqnEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4Mjc1MA==", "bodyText": "Why this change?\nThe policy regarding asserts, project-wide should be discussed in the dev mailing list, probably.", "url": "https://github.com/apache/druid/pull/9179#discussion_r367282750", "createdAt": "2020-01-16T08:21:11Z", "author": {"login": "leventov"}, "path": "processing/src/main/java/org/apache/druid/segment/data/ColumnarLongs.java", "diffHunk": "@@ -121,14 +122,14 @@ public boolean isNull()\n         @Override\n         public long getLong()\n         {\n-          assert NullHandling.replaceWithDefault() || !isNull();\n+          Preconditions.checkState(NullHandling.replaceWithDefault() || !isNull());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34911ffa20ffcb6d83a97947ca1f3b30420fc762"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4NzEwNQ==", "bodyText": "This change to column gets should definitely not be done imo, the current version with assert will not be evaluated at all at runtime unless asserts are enabled with jvm command line flags, and isNull is an expensive check if the bit is set in the bitmap, which will have already been done by anything using the selector.\nIn fact, I've been meaning to investigate if they should be removed entirely because they are still in the bytecode and could affect hotspot function inlining which takes function size into account, since these methods will be called from hot loops, but I haven't had the chance to investigate.\ne.g. using columnar doubles\nwith assert:\n  public double getDouble(int);\n    Code:\n       0: getstatic     #13                 // Field $assertionsDisabled:Z\n       3: ifne          33\n       6: invokestatic  #14                 // Method org/apache/druid/common/config/NullHandling.replaceWithDefault:()Z\n       9: ifne          33\n      12: aload_0\n      13: getfield      #2                  // Field val$nullValueBitmap:Lorg/apache/druid/collections/bitmap/ImmutableBitmap;\n      16: iload_1\n      17: invokeinterface #19,  2           // InterfaceMethod org/apache/druid/collections/bitmap/ImmutableBitmap.get:(I)Z\n      22: ifeq          33\n      25: new           #16                 // class java/lang/AssertionError\n      28: dup\n      29: invokespecial #17                 // Method java/lang/AssertionError.\"<init>\":()V\n      32: athrow\n      33: aload_0\n      34: getfield      #1                  // Field this$0:Lorg/apache/druid/segment/data/ColumnarDoubles;\n      37: iload_1\n      38: invokeinterface #18,  2           // InterfaceMethod org/apache/druid/segment/data/ColumnarDoubles.get:(I)D\n      43: dreturn\n\nno assert:\n  public double getDouble(int);\n    Code:\n       0: aload_0\n       1: getfield      #1                  // Field this$0:Lorg/apache/druid/segment/data/ColumnarDoubles;\n       4: iload_1\n       5: invokeinterface #13,  2           // InterfaceMethod org/apache/druid/segment/data/ColumnarDoubles.get:(I)D\n      10: dreturn", "url": "https://github.com/apache/druid/pull/9179#discussion_r367287105", "createdAt": "2020-01-16T08:31:35Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/data/ColumnarLongs.java", "diffHunk": "@@ -121,14 +122,14 @@ public boolean isNull()\n         @Override\n         public long getLong()\n         {\n-          assert NullHandling.replaceWithDefault() || !isNull();\n+          Preconditions.checkState(NullHandling.replaceWithDefault() || !isNull());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4Mjc1MA=="}, "originalCommit": {"oid": "34911ffa20ffcb6d83a97947ca1f3b30420fc762"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc0ODMwNA==", "bodyText": "I've restored the assert statement and suppressed the inspection warning instead", "url": "https://github.com/apache/druid/pull/9179#discussion_r368748304", "createdAt": "2020-01-20T22:43:13Z", "author": {"login": "ccaominh"}, "path": "processing/src/main/java/org/apache/druid/segment/data/ColumnarLongs.java", "diffHunk": "@@ -121,14 +122,14 @@ public boolean isNull()\n         @Override\n         public long getLong()\n         {\n-          assert NullHandling.replaceWithDefault() || !isNull();\n+          Preconditions.checkState(NullHandling.replaceWithDefault() || !isNull());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4Mjc1MA=="}, "originalCommit": {"oid": "34911ffa20ffcb6d83a97947ca1f3b30420fc762"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2121, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}