{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1Njg2MDYx", "number": 9484, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzoyNjoxM1rODmZGkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzoyOTowMFrODmZLTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTgzNzYwOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/virtual/RowBasedExpressionColumnValueSelector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzoyNjoxNFrOFzyLlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzoyNjoxNFrOFzyLlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg0Mzg2MA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/druid/pull/9484#discussion_r389843860", "createdAt": "2020-03-09T17:26:14Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/virtual/RowBasedExpressionColumnValueSelector.java", "diffHunk": "@@ -95,7 +95,7 @@ private boolean isBindingArray(String x)\n   {\n     Object binding = bindings.get(x);\n     if (binding != null) {\n-      if (binding instanceof String[] && ((String[]) binding).length > 1) {\n+      if (binding instanceof String[]) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66111ba854c9380202ffdcd2e82b0a1ac88a2ad0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTg0ODgyOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/filter/ValueMatchers.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzoyODo0NlrOFzySdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzoyODo0NlrOFzySdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg0NTYyMA==", "bodyText": "super nit: missing javadoc (since almost all the others have it)", "url": "https://github.com/apache/druid/pull/9484#discussion_r389845620", "createdAt": "2020-03-09T17:28:46Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/filter/ValueMatchers.java", "diffHunk": "@@ -0,0 +1,365 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.filter;\n+\n+import com.google.common.base.Predicate;\n+import org.apache.druid.common.config.NullHandling;\n+import org.apache.druid.query.filter.DruidDoublePredicate;\n+import org.apache.druid.query.filter.DruidFloatPredicate;\n+import org.apache.druid.query.filter.DruidLongPredicate;\n+import org.apache.druid.query.filter.DruidPredicateFactory;\n+import org.apache.druid.query.filter.ValueMatcher;\n+import org.apache.druid.query.monomorphicprocessing.RuntimeShapeInspector;\n+import org.apache.druid.segment.BaseDoubleColumnValueSelector;\n+import org.apache.druid.segment.BaseFloatColumnValueSelector;\n+import org.apache.druid.segment.BaseLongColumnValueSelector;\n+import org.apache.druid.segment.BaseNullableColumnValueSelector;\n+import org.apache.druid.segment.DimensionDictionarySelector;\n+import org.apache.druid.segment.DimensionHandlerUtils;\n+import org.apache.druid.segment.DimensionSelector;\n+\n+import javax.annotation.Nullable;\n+import java.util.Objects;\n+\n+/**\n+ * Utility methods for creating {@link ValueMatcher} instances. Mainly used by {@link ConstantValueMatcherFactory}\n+ * and {@link PredicateValueMatcherFactory}.\n+ */\n+public class ValueMatchers\n+{\n+  private ValueMatchers()\n+  {\n+    // No instantiation.\n+  }\n+\n+  /**\n+   * Creates a constant-based {@link ValueMatcher} for a string-typed selector.\n+   *\n+   * @param selector          column selector\n+   * @param value             value to match\n+   * @param hasMultipleValues whether the column selector *might* have multiple values\n+   */\n+  public static ValueMatcher makeStringValueMatcher(\n+      final DimensionSelector selector,\n+      final String value,\n+      final boolean hasMultipleValues\n+  )\n+  {\n+    final ValueMatcher booleanMatcher = toBooleanMatcherIfPossible(\n+        selector,\n+        hasMultipleValues,\n+        s -> Objects.equals(s, NullHandling.emptyToNullIfNeeded(value))\n+    );\n+\n+    if (booleanMatcher != null) {\n+      return booleanMatcher;\n+    } else {\n+      return selector.makeValueMatcher(value);\n+    }\n+  }\n+\n+  /**\n+   * Creates a predicate-based {@link ValueMatcher} for a string-typed selector.\n+   *\n+   * @param selector          column selector\n+   * @param predicateFactory  predicate to match\n+   * @param hasMultipleValues whether the column selector *might* have multiple values\n+   */\n+  public static ValueMatcher makeStringValueMatcher(\n+      final DimensionSelector selector,\n+      final DruidPredicateFactory predicateFactory,\n+      final boolean hasMultipleValues\n+  )\n+  {\n+    final Predicate<String> predicate = predicateFactory.makeStringPredicate();\n+    final ValueMatcher booleanMatcher = toBooleanMatcherIfPossible(selector, hasMultipleValues, predicate);\n+\n+    if (booleanMatcher != null) {\n+      return booleanMatcher;\n+    } else {\n+      return selector.makeValueMatcher(predicate);\n+    }\n+  }\n+\n+  /**\n+   * Creates a constant-based {@link ValueMatcher} for a float-typed selector.\n+   *\n+   * @param selector column selector\n+   * @param value    value to match\n+   */\n+  public static ValueMatcher makeFloatValueMatcher(\n+      final BaseFloatColumnValueSelector selector,\n+      final String value\n+  )\n+  {\n+    final Float matchVal = DimensionHandlerUtils.convertObjectToFloat(value);\n+    if (matchVal == null) {\n+      return makeNumericNullValueMatcher(selector);\n+    }\n+\n+    // Use \"floatToIntBits\" to canonicalize NaN values.\n+    final int matchValIntBits = Float.floatToIntBits(matchVal);\n+    return new ValueMatcher()\n+    {\n+      @Override\n+      public boolean matches()\n+      {\n+        if (selector.isNull()) {\n+          return false;\n+        }\n+        return Float.floatToIntBits(selector.getFloat()) == matchValIntBits;\n+      }\n+\n+      @Override\n+      public void inspectRuntimeShape(RuntimeShapeInspector inspector)\n+      {\n+        inspector.visit(\"selector\", selector);\n+      }\n+    };\n+  }\n+\n+  public static ValueMatcher makeLongValueMatcher(final BaseLongColumnValueSelector selector, final String value)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66111ba854c9380202ffdcd2e82b0a1ac88a2ad0"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTg0OTcyOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/filter/ValueMatchers.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzoyOTowMFrOFzyS7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzoyOTowMFrOFzyS7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg0NTc0Mg==", "bodyText": "same nit re javadoc", "url": "https://github.com/apache/druid/pull/9484#discussion_r389845742", "createdAt": "2020-03-09T17:29:00Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/segment/filter/ValueMatchers.java", "diffHunk": "@@ -0,0 +1,365 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.filter;\n+\n+import com.google.common.base.Predicate;\n+import org.apache.druid.common.config.NullHandling;\n+import org.apache.druid.query.filter.DruidDoublePredicate;\n+import org.apache.druid.query.filter.DruidFloatPredicate;\n+import org.apache.druid.query.filter.DruidLongPredicate;\n+import org.apache.druid.query.filter.DruidPredicateFactory;\n+import org.apache.druid.query.filter.ValueMatcher;\n+import org.apache.druid.query.monomorphicprocessing.RuntimeShapeInspector;\n+import org.apache.druid.segment.BaseDoubleColumnValueSelector;\n+import org.apache.druid.segment.BaseFloatColumnValueSelector;\n+import org.apache.druid.segment.BaseLongColumnValueSelector;\n+import org.apache.druid.segment.BaseNullableColumnValueSelector;\n+import org.apache.druid.segment.DimensionDictionarySelector;\n+import org.apache.druid.segment.DimensionHandlerUtils;\n+import org.apache.druid.segment.DimensionSelector;\n+\n+import javax.annotation.Nullable;\n+import java.util.Objects;\n+\n+/**\n+ * Utility methods for creating {@link ValueMatcher} instances. Mainly used by {@link ConstantValueMatcherFactory}\n+ * and {@link PredicateValueMatcherFactory}.\n+ */\n+public class ValueMatchers\n+{\n+  private ValueMatchers()\n+  {\n+    // No instantiation.\n+  }\n+\n+  /**\n+   * Creates a constant-based {@link ValueMatcher} for a string-typed selector.\n+   *\n+   * @param selector          column selector\n+   * @param value             value to match\n+   * @param hasMultipleValues whether the column selector *might* have multiple values\n+   */\n+  public static ValueMatcher makeStringValueMatcher(\n+      final DimensionSelector selector,\n+      final String value,\n+      final boolean hasMultipleValues\n+  )\n+  {\n+    final ValueMatcher booleanMatcher = toBooleanMatcherIfPossible(\n+        selector,\n+        hasMultipleValues,\n+        s -> Objects.equals(s, NullHandling.emptyToNullIfNeeded(value))\n+    );\n+\n+    if (booleanMatcher != null) {\n+      return booleanMatcher;\n+    } else {\n+      return selector.makeValueMatcher(value);\n+    }\n+  }\n+\n+  /**\n+   * Creates a predicate-based {@link ValueMatcher} for a string-typed selector.\n+   *\n+   * @param selector          column selector\n+   * @param predicateFactory  predicate to match\n+   * @param hasMultipleValues whether the column selector *might* have multiple values\n+   */\n+  public static ValueMatcher makeStringValueMatcher(\n+      final DimensionSelector selector,\n+      final DruidPredicateFactory predicateFactory,\n+      final boolean hasMultipleValues\n+  )\n+  {\n+    final Predicate<String> predicate = predicateFactory.makeStringPredicate();\n+    final ValueMatcher booleanMatcher = toBooleanMatcherIfPossible(selector, hasMultipleValues, predicate);\n+\n+    if (booleanMatcher != null) {\n+      return booleanMatcher;\n+    } else {\n+      return selector.makeValueMatcher(predicate);\n+    }\n+  }\n+\n+  /**\n+   * Creates a constant-based {@link ValueMatcher} for a float-typed selector.\n+   *\n+   * @param selector column selector\n+   * @param value    value to match\n+   */\n+  public static ValueMatcher makeFloatValueMatcher(\n+      final BaseFloatColumnValueSelector selector,\n+      final String value\n+  )\n+  {\n+    final Float matchVal = DimensionHandlerUtils.convertObjectToFloat(value);\n+    if (matchVal == null) {\n+      return makeNumericNullValueMatcher(selector);\n+    }\n+\n+    // Use \"floatToIntBits\" to canonicalize NaN values.\n+    final int matchValIntBits = Float.floatToIntBits(matchVal);\n+    return new ValueMatcher()\n+    {\n+      @Override\n+      public boolean matches()\n+      {\n+        if (selector.isNull()) {\n+          return false;\n+        }\n+        return Float.floatToIntBits(selector.getFloat()) == matchValIntBits;\n+      }\n+\n+      @Override\n+      public void inspectRuntimeShape(RuntimeShapeInspector inspector)\n+      {\n+        inspector.visit(\"selector\", selector);\n+      }\n+    };\n+  }\n+\n+  public static ValueMatcher makeLongValueMatcher(final BaseLongColumnValueSelector selector, final String value)\n+  {\n+    final Long matchVal = DimensionHandlerUtils.convertObjectToLong(value);\n+    if (matchVal == null) {\n+      return makeNumericNullValueMatcher(selector);\n+    }\n+    final long matchValLong = matchVal;\n+    return new ValueMatcher()\n+    {\n+      @Override\n+      public boolean matches()\n+      {\n+        if (selector.isNull()) {\n+          return false;\n+        }\n+        return selector.getLong() == matchValLong;\n+      }\n+\n+      @Override\n+      public void inspectRuntimeShape(RuntimeShapeInspector inspector)\n+      {\n+        inspector.visit(\"selector\", selector);\n+      }\n+    };\n+  }\n+\n+  public static ValueMatcher makeLongValueMatcher(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66111ba854c9380202ffdcd2e82b0a1ac88a2ad0"}, "originalPosition": 164}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2598, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}