{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1NjQwNDA0", "number": 10388, "title": "allow vectorized query engines to utilize vectorized virtual columns", "bodyText": "Description\nThis PR adds support for vectorized virtual columns to be used by vectorized timeseries and group by query engines. This just wires everything up to query engines, a follow-up PR will add a vectorization support to ExpressionVirtualColumn.\nTests have been added using a fake VirtualColumn and VectorAggregator implementation to ensure that vectorized virtual columns using any of the added vector selector functions work with both group by and timeseries queries.\n\nThis PR has:\n\n been self-reviewed.\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths, ensuring the threshold for code coverage is met.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-09-12T01:43:24Z", "url": "https://github.com/apache/druid/pull/10388", "merged": true, "mergeCommit": {"oid": "e012d5c41bbc5a056e3c99bf6073ac19ba523c7d"}, "closed": true, "closedAt": "2020-09-15T02:29:36Z", "author": {"login": "clintropolis"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdH_yf-gH2gAyNDg1NjQwNDA0OjIzNjVhZGVkNjE3YmNlYzMzMmY0OTAxZTllY2NkY2YwNGUwN2VhZmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdI-jMVgFqTQ4ODI4MzExNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2365aded617bcec332f4901e9eccdcf04e07eafe", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/2365aded617bcec332f4901e9eccdcf04e07eafe", "committedDate": "2020-09-12T01:33:53Z", "message": "allow vectorized query engines to utilize vectorized virtual column implementations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b88bd174add261800c2a34ef10553c78fd391034", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/b88bd174add261800c2a34ef10553c78fd391034", "committedDate": "2020-09-12T02:17:06Z", "message": "javadoc, refactor, checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "294b58a304248a6ccecd1aed2e3c6d2d7c57332e", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/294b58a304248a6ccecd1aed2e3c6d2d7c57332e", "committedDate": "2020-09-12T03:32:25Z", "message": "intellij inspection and more javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f9bfb58a801f2be561f2891a33b17ee46b7948c", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/8f9bfb58a801f2be561f2891a33b17ee46b7948c", "committedDate": "2020-09-12T05:18:24Z", "message": "better"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MjAxOTg2", "url": "https://github.com/apache/druid/pull/10388#pullrequestreview-487201986", "createdAt": "2020-09-12T04:22:25Z", "commit": {"oid": "294b58a304248a6ccecd1aed2e3c6d2d7c57332e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwNToxMTowNVrOHQyrQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwNToyMDo1MVrOHQyuNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM2OTUzOA==", "bodyText": "nit: using RangeIndexedInts may be simpler when reading code.", "url": "https://github.com/apache/druid/pull/10388#discussion_r487369538", "createdAt": "2020-09-12T05:11:05Z", "author": {"login": "jihoonson"}, "path": "processing/src/test/java/org/apache/druid/segment/virtual/AlwaysTwoVectorizedVirtualColumn.java", "diffHunk": "@@ -0,0 +1,326 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.virtual;\n+\n+import com.google.common.collect.ImmutableList;\n+import org.apache.druid.query.dimension.DimensionSpec;\n+import org.apache.druid.query.monomorphicprocessing.RuntimeShapeInspector;\n+import org.apache.druid.segment.ColumnInspector;\n+import org.apache.druid.segment.ColumnSelectorFactory;\n+import org.apache.druid.segment.ColumnValueSelector;\n+import org.apache.druid.segment.DimensionSelector;\n+import org.apache.druid.segment.IdLookup;\n+import org.apache.druid.segment.VirtualColumn;\n+import org.apache.druid.segment.column.ColumnCapabilities;\n+import org.apache.druid.segment.data.IndexedInts;\n+import org.apache.druid.segment.vector.MultiValueDimensionVectorSelector;\n+import org.apache.druid.segment.vector.SingleValueDimensionVectorSelector;\n+import org.apache.druid.segment.vector.VectorColumnSelectorFactory;\n+import org.apache.druid.segment.vector.VectorObjectSelector;\n+import org.apache.druid.segment.vector.VectorSizeInspector;\n+import org.apache.druid.segment.vector.VectorValueSelector;\n+\n+import javax.annotation.Nullable;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class AlwaysTwoVectorizedVirtualColumn implements VirtualColumn\n+{\n+  private final String outputName;\n+  private final ColumnCapabilities capabilities;\n+  private final boolean dictionaryEncoded;\n+\n+  public AlwaysTwoVectorizedVirtualColumn(\n+      String name,\n+      ColumnCapabilities capabilites\n+  )\n+  {\n+    this.outputName = name;\n+    this.capabilities = capabilites;\n+    this.dictionaryEncoded = capabilites.isDictionaryEncoded().isTrue() &&\n+                             capabilites.areDictionaryValuesUnique().isTrue();\n+  }\n+\n+  @Override\n+  public boolean canVectorize(ColumnInspector inspector)\n+  {\n+    return true;\n+  }\n+\n+  @Override\n+  public String getOutputName()\n+  {\n+    return outputName;\n+  }\n+\n+  @Override\n+  public DimensionSelector makeDimensionSelector(DimensionSpec dimensionSpec, ColumnSelectorFactory factory)\n+  {\n+    throw new IllegalStateException(\"don't call this\");\n+  }\n+\n+  @Override\n+  public ColumnValueSelector<?> makeColumnValueSelector(String columnName, ColumnSelectorFactory factory)\n+  {\n+    throw new IllegalStateException(\"don't call this\");\n+  }\n+\n+  @Override\n+  public SingleValueDimensionVectorSelector makeSingleValueVectorDimensionSelector(\n+      DimensionSpec dimensionSpec,\n+      VectorColumnSelectorFactory factory\n+  )\n+  {\n+    return new SingleValueDimensionVectorSelector()\n+    {\n+      private final VectorSizeInspector inspector = factory.getVectorSizeInspector();\n+      private final int[] rowVector = new int[inspector.getMaxVectorSize()];\n+\n+      @Override\n+      public int[] getRowVector()\n+      {\n+\n+        return rowVector;\n+      }\n+\n+      @Override\n+      public int getValueCardinality()\n+      {\n+        return dictionaryEncoded ? 1 : CARDINALITY_UNKNOWN;\n+      }\n+\n+      @Nullable\n+      @Override\n+      public String lookupName(int id)\n+      {\n+        return \"2\";\n+      }\n+\n+      @Override\n+      public boolean nameLookupPossibleInAdvance()\n+      {\n+        return dictionaryEncoded;\n+      }\n+\n+      @Nullable\n+      @Override\n+      public IdLookup idLookup()\n+      {\n+        return null;\n+      }\n+\n+      @Override\n+      public int getMaxVectorSize()\n+      {\n+        return inspector.getMaxVectorSize();\n+      }\n+\n+      @Override\n+      public int getCurrentVectorSize()\n+      {\n+        return inspector.getCurrentVectorSize();\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public MultiValueDimensionVectorSelector makeMultiValueVectorDimensionSelector(\n+      DimensionSpec dimensionSpec,\n+      VectorColumnSelectorFactory factory\n+  )\n+  {\n+    final IndexedInts[] rowVector = new IndexedInts[factory.getVectorSizeInspector().getMaxVectorSize()];\n+    Arrays.fill(rowVector, new IndexedInts()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "294b58a304248a6ccecd1aed2e3c6d2d7c57332e"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM3MDI5NQ==", "bodyText": "It might be nice to add some Javaodc saying that the aggregator created by this factory verifies values read from vectorSelector as well as counting.", "url": "https://github.com/apache/druid/pull/10388#discussion_r487370295", "createdAt": "2020-09-12T05:20:51Z", "author": {"login": "jihoonson"}, "path": "processing/src/test/java/org/apache/druid/segment/virtual/AlwaysTwoCounterAggregatorFactory.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.virtual;\n+\n+import com.google.common.collect.ImmutableList;\n+import org.apache.druid.query.aggregation.Aggregator;\n+import org.apache.druid.query.aggregation.BufferAggregator;\n+import org.apache.druid.query.aggregation.CountAggregatorFactory;\n+import org.apache.druid.query.aggregation.CountVectorAggregator;\n+import org.apache.druid.query.aggregation.VectorAggregator;\n+import org.apache.druid.query.dimension.DefaultDimensionSpec;\n+import org.apache.druid.segment.ColumnSelectorFactory;\n+import org.apache.druid.segment.column.ColumnCapabilities;\n+import org.apache.druid.segment.data.IndexedInts;\n+import org.apache.druid.segment.vector.MultiValueDimensionVectorSelector;\n+import org.apache.druid.segment.vector.SingleValueDimensionVectorSelector;\n+import org.apache.druid.segment.vector.VectorColumnSelectorFactory;\n+import org.apache.druid.segment.vector.VectorObjectSelector;\n+import org.apache.druid.segment.vector.VectorValueSelector;\n+import org.junit.Assert;\n+\n+import javax.annotation.Nullable;\n+import java.nio.ByteBuffer;\n+import java.util.List;\n+\n+public class AlwaysTwoCounterAggregatorFactory extends CountAggregatorFactory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "294b58a304248a6ccecd1aed2e3c6d2d7c57332e"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b706ed0201efeb9508045b2080792bbdc86568b", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/1b706ed0201efeb9508045b2080792bbdc86568b", "committedDate": "2020-09-12T05:39:52Z", "message": "review stuffs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MjA2MTYw", "url": "https://github.com/apache/druid/pull/10388#pullrequestreview-487206160", "createdAt": "2020-09-12T05:44:09Z", "commit": {"oid": "1b706ed0201efeb9508045b2080792bbdc86568b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5920653d6a4f16e5b18a0b6da32809691b4863ba", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/5920653d6a4f16e5b18a0b6da32809691b4863ba", "committedDate": "2020-09-12T08:06:18Z", "message": "fix incorrect refactor, thanks tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad0419ce2d4e895acb804136653adcda32b5afe5", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/ad0419ce2d4e895acb804136653adcda32b5afe5", "committedDate": "2020-09-14T17:04:23Z", "message": "minor adjustments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4Mjc5MjU5", "url": "https://github.com/apache/druid/pull/10388#pullrequestreview-488279259", "createdAt": "2020-09-15T02:28:48Z", "commit": {"oid": "ad0419ce2d4e895acb804136653adcda32b5afe5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MjgzMTE1", "url": "https://github.com/apache/druid/pull/10388#pullrequestreview-488283115", "createdAt": "2020-09-15T02:41:11Z", "commit": {"oid": "ad0419ce2d4e895acb804136653adcda32b5afe5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMjo0MToxMVrOHRuaxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMjo0MToxMVrOHRuaxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0ODM1OQ==", "bodyText": "How do you decide between columnCapabilities.hasMultipleValues().isFalse() and !columnCapabilities.hasMultipleValues().isMaybeTrue() - I'm never sure which one to check", "url": "https://github.com/apache/druid/pull/10388#discussion_r488348359", "createdAt": "2020-09-15T02:41:11Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/vector/VectorGroupByEngine.java", "diffHunk": "@@ -70,24 +73,47 @@ public static boolean canVectorize(\n       @Nullable final Filter filter\n   )\n   {\n-    // Multi-value dimensions are not yet supported.\n-    //\n-    // Two notes here about how we're handling this check:\n-    //   1) After multi-value dimensions are supported, we could alter \"GroupByQueryEngineV2.isAllSingleValueDims\"\n-    //      to accept a ColumnSelectorFactory, which makes more sense than using a StorageAdapter (see #8013).\n-    //   2) Technically using StorageAdapter here is bad since it only looks at real columns, but they might\n-    //      be shadowed by virtual columns (again, see #8013). But it's fine for now since adapter.canVectorize\n-    //      always returns false if there are any virtual columns.\n-    //\n-    // This situation should sort itself out pretty well once this engine supports multi-valued columns. Then we\n-    // won't have to worry about having this all-single-value-dims check here.\n-\n-    return GroupByQueryEngineV2.isAllSingleValueDims(adapter::getColumnCapabilities, query.getDimensions(), true)\n+    Function<String, ColumnCapabilities> capabilitiesFunction = name ->\n+        query.getVirtualColumns().getColumnCapabilitiesWithFallback(adapter, name);\n+\n+    return canVectorizeDimensions(capabilitiesFunction, query.getDimensions())\n            && query.getDimensions().stream().allMatch(DimensionSpec::canVectorize)\n            && query.getAggregatorSpecs().stream().allMatch(aggregatorFactory -> aggregatorFactory.canVectorize(adapter))\n            && adapter.canVectorize(filter, query.getVirtualColumns(), false);\n   }\n \n+  public static boolean canVectorizeDimensions(\n+      final Function<String, ColumnCapabilities> capabilitiesFunction,\n+      final List<DimensionSpec> dimensions\n+  )\n+  {\n+    return dimensions\n+        .stream()\n+        .allMatch(\n+            dimension -> {\n+              if (dimension.mustDecorate()) {\n+                // group by on multi value dimensions are not currently supported\n+                // DimensionSpecs that decorate may turn singly-valued columns into multi-valued selectors.\n+                // To be safe, we must return false here.\n+                return false;\n+              }\n+\n+              // Now check column capabilities.\n+              final ColumnCapabilities columnCapabilities = capabilitiesFunction.apply(dimension.getDimension());\n+              // null here currently means the column does not exist, nil columns can be vectorized\n+              if (columnCapabilities == null) {\n+                return true;\n+              }\n+              // strings must be single valued, dictionary encoded, and have unique dictionary entries\n+              if (ValueType.STRING.equals(columnCapabilities.getType())) {\n+                return columnCapabilities.hasMultipleValues().isFalse() &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad0419ce2d4e895acb804136653adcda32b5afe5"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3628, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}