{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MjQ1NjUy", "number": 9943, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNTo0MDowMVrOEAwwXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNTo0MDowMVrOEAwwXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjM0MjY5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/segment/realtime/appenderator/BaseAppenderatorDriver.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNTo0MDowMVrOGcPaWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMjo0MToxNFrOGcuNLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2NTgxOA==", "bodyText": "Since the only uses of these methods is just to get the segment identifier and collect it to a set\n...\n        .map(SegmentWithState::getSegmentIdentifier)\n        .collect(Collectors.toSet());\n\nshould these methods instead just return Set<SegmentIdWithShardSpec> instead of a stream so we can't make the error?", "url": "https://github.com/apache/druid/pull/9943#discussion_r432265818", "createdAt": "2020-05-29T05:40:01Z", "author": {"login": "clintropolis"}, "path": "server/src/main/java/org/apache/druid/segment/realtime/appenderator/BaseAppenderatorDriver.java", "diffHunk": "@@ -427,30 +428,36 @@ protected AppenderatorDriverAddResult append(\n \n   /**\n    * Returns a stream of {@link SegmentWithState} for the given sequenceNames.\n+   *\n+   * Note: it is not enough to synchronize on segments to access to this method,\n+   * any operation on the resulting stream must also be synchronized on segments.\n    */\n+  @GuardedBy(\"segments\")\n   Stream<SegmentWithState> getSegmentWithStates(Collection<String> sequenceNames)\n   {\n-    synchronized (segments) {\n-      return sequenceNames\n-          .stream()\n-          .map(segments::get)\n-          .filter(Objects::nonNull)\n-          .flatMap(segmentsForSequence -> segmentsForSequence.intervalToSegmentStates.values().stream())\n-          .flatMap(segmentsOfInterval -> segmentsOfInterval.getAllSegments().stream());\n-    }\n+    return sequenceNames", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b979418c85689b0194b77e3538ea6d5b22f2b70"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYxMzczNQ==", "bodyText": "we can definitely change the methods to do the full reduction. It seemed we had plans to use this for other things, but I can certainly simplify it", "url": "https://github.com/apache/druid/pull/9943#discussion_r432613735", "createdAt": "2020-05-29T16:55:59Z", "author": {"login": "xvrl"}, "path": "server/src/main/java/org/apache/druid/segment/realtime/appenderator/BaseAppenderatorDriver.java", "diffHunk": "@@ -427,30 +428,36 @@ protected AppenderatorDriverAddResult append(\n \n   /**\n    * Returns a stream of {@link SegmentWithState} for the given sequenceNames.\n+   *\n+   * Note: it is not enough to synchronize on segments to access to this method,\n+   * any operation on the resulting stream must also be synchronized on segments.\n    */\n+  @GuardedBy(\"segments\")\n   Stream<SegmentWithState> getSegmentWithStates(Collection<String> sequenceNames)\n   {\n-    synchronized (segments) {\n-      return sequenceNames\n-          .stream()\n-          .map(segments::get)\n-          .filter(Objects::nonNull)\n-          .flatMap(segmentsForSequence -> segmentsForSequence.intervalToSegmentStates.values().stream())\n-          .flatMap(segmentsOfInterval -> segmentsOfInterval.getAllSegments().stream());\n-    }\n+    return sequenceNames", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2NTgxOA=="}, "originalCommit": {"oid": "8b979418c85689b0194b77e3538ea6d5b22f2b70"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc3MDM1MA==", "bodyText": "@clintropolis I've update the code to return the fully materialized collections rather than streams.", "url": "https://github.com/apache/druid/pull/9943#discussion_r432770350", "createdAt": "2020-05-29T22:41:14Z", "author": {"login": "xvrl"}, "path": "server/src/main/java/org/apache/druid/segment/realtime/appenderator/BaseAppenderatorDriver.java", "diffHunk": "@@ -427,30 +428,36 @@ protected AppenderatorDriverAddResult append(\n \n   /**\n    * Returns a stream of {@link SegmentWithState} for the given sequenceNames.\n+   *\n+   * Note: it is not enough to synchronize on segments to access to this method,\n+   * any operation on the resulting stream must also be synchronized on segments.\n    */\n+  @GuardedBy(\"segments\")\n   Stream<SegmentWithState> getSegmentWithStates(Collection<String> sequenceNames)\n   {\n-    synchronized (segments) {\n-      return sequenceNames\n-          .stream()\n-          .map(segments::get)\n-          .filter(Objects::nonNull)\n-          .flatMap(segmentsForSequence -> segmentsForSequence.intervalToSegmentStates.values().stream())\n-          .flatMap(segmentsOfInterval -> segmentsOfInterval.getAllSegments().stream());\n-    }\n+    return sequenceNames", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2NTgxOA=="}, "originalCommit": {"oid": "8b979418c85689b0194b77e3538ea6d5b22f2b70"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2485, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}