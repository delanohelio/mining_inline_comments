{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNzU3NzI5", "number": 9647, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNTo0NzoyMFrODwQ0VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNTo1Njo1N1rODwQ7yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTMzNzgxOnYy", "diffSide": "LEFT", "path": "processing/src/main/java/org/apache/druid/query/QueryContexts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNTo0NzoyMFrOGDKZMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNTo0NzoyMFrOGDKZMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk2OTIwMA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/druid/pull/9647#discussion_r405969200", "createdAt": "2020-04-09T05:47:20Z", "author": {"login": "jon-wei"}, "path": "processing/src/main/java/org/apache/druid/query/QueryContexts.java", "diffHunk": "@@ -67,7 +68,8 @@\n   public static final boolean DEFAULT_ENABLE_JOIN_FILTER_PUSH_DOWN = true;\n   public static final boolean DEFAULT_ENABLE_JOIN_FILTER_REWRITE = true;\n   public static final boolean DEFAULT_ENABLE_JOIN_FILTER_REWRITE_VALUE_COLUMN_FILTERS = false;\n-  public static final long DEFAULT_ENABLE_JOIN_FILTER_REWRITE_MAX_SIZE_KEY = 10000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a920d36429e0cfb218fd0f81c8ee52943248dc9"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTM1Njg5OnYy", "diffSide": "RIGHT", "path": "docs/querying/query-context.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNTo1Njo1N1rOGDKkYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOToxODo1OVrOGDmGsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3MjA2Nw==", "bodyText": "But this effect only happens for the top level filter, or individual clauses of a top level 'and' filter.\n\nSuggest providing a few examples to clarify:\n\nAn OR filter A || B where A can be resolved using bitmap indexes but B cannot will prevent the whole OR filter from being considered for pre-filtering\nIf it were A && B instead, A would be considered for pre-filtering but B would not.\nIf it were A && (C || D) where C and D can be resolved using bitmap indexes, then the whole filter can be considered for pre-filtering\nIf were A && (B || C) only A will be considered for pre-filtering", "url": "https://github.com/apache/druid/pull/9647#discussion_r405972067", "createdAt": "2020-04-09T05:56:57Z", "author": {"login": "jon-wei"}, "path": "docs/querying/query-context.md", "diffHunk": "@@ -45,6 +45,7 @@ The query context is used for various query configuration parameters. The follow\n |parallelMergeParallelism|`druid.processing.merge.pool.parallelism`|Maximum number of parallel threads to use for parallel result merging on the Broker. See [Broker configuration](../configuration/index.html#broker) for more details.|\n |parallelMergeInitialYieldRows|`druid.processing.merge.task.initialYieldNumRows`|Number of rows to yield per ForkJoinPool merge task for parallel result merging on the Broker, before forking off a new task to continue merging sequences. See [Broker configuration](../configuration/index.html#broker) for more details.|\n |parallelMergeSmallBatchRows|`druid.processing.merge.task.smallBatchNumRows`|Size of result batches to operate on in ForkJoinPool merge tasks for parallel result merging on the Broker. See [Broker configuration](../configuration/index.html#broker) for more details.|\n+|useFilterCNF|`false`| If true, Druid will attempt to convert the query filter to Conjunctive Normal Form (CNF). During query processing, columns can be pre-filtered by intersecting the bitmap indexes of all values that match the eligible filters, often greatly reducing the raw number of rows which need to be scanned. But this effect only happens for the top level filter, or individual clauses of a top level 'and' filter. As such, filters in CNF potentially have a higher chance to utilize a large amount of bitmap indexes on string columns during pre-filtering. However, this setting should be used with great caution, as it can sometimes have a negative effect on performance, and in some cases, the act of computing CNF of a filter can be expensive. We recommend hand tuning your filters to produce an optimal form if possible, or at least verifying through experimentation that using this parameter actually improves your query performance with no ill-effects.|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a920d36429e0cfb218fd0f81c8ee52943248dc9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk5OTg0OA==", "bodyText": "Hmm, I think how filters work with query processing and how mechanically filters are split into pre and post filters should be documented somewhere, but I don't think this setting is quite the correct avenue. Additionally, since which filters can and can't use bitmaps isn't exactly documented anywhere, I'm not sure how much the examples would help.\nIf we added this general description of query processing and how filters are involved could link to this setting, and also could link to documentation we would add for the filterTuning added in #8209, as ways the user can help influence how filter processing behaves. Maybe segments.md would be an appropriate place since it mentions bitmaps and their role in filtering, or segment-optimization.md since it involves how to tune segment sizes? Or perhaps we need an advanced-tuning.md to put this and other stuff that users shouldn't really mess with unless they are prepared to roll up their sleeves and experimentally verify the settings to fine tune to their workload?\nShould this be part of this PR, or done as a follow-up? It sort of blows up the scope a bit of what I was looking to do as part of this PR, but it also seems useful so I'm fine either way.", "url": "https://github.com/apache/druid/pull/9647#discussion_r405999848", "createdAt": "2020-04-09T07:11:15Z", "author": {"login": "clintropolis"}, "path": "docs/querying/query-context.md", "diffHunk": "@@ -45,6 +45,7 @@ The query context is used for various query configuration parameters. The follow\n |parallelMergeParallelism|`druid.processing.merge.pool.parallelism`|Maximum number of parallel threads to use for parallel result merging on the Broker. See [Broker configuration](../configuration/index.html#broker) for more details.|\n |parallelMergeInitialYieldRows|`druid.processing.merge.task.initialYieldNumRows`|Number of rows to yield per ForkJoinPool merge task for parallel result merging on the Broker, before forking off a new task to continue merging sequences. See [Broker configuration](../configuration/index.html#broker) for more details.|\n |parallelMergeSmallBatchRows|`druid.processing.merge.task.smallBatchNumRows`|Size of result batches to operate on in ForkJoinPool merge tasks for parallel result merging on the Broker. See [Broker configuration](../configuration/index.html#broker) for more details.|\n+|useFilterCNF|`false`| If true, Druid will attempt to convert the query filter to Conjunctive Normal Form (CNF). During query processing, columns can be pre-filtered by intersecting the bitmap indexes of all values that match the eligible filters, often greatly reducing the raw number of rows which need to be scanned. But this effect only happens for the top level filter, or individual clauses of a top level 'and' filter. As such, filters in CNF potentially have a higher chance to utilize a large amount of bitmap indexes on string columns during pre-filtering. However, this setting should be used with great caution, as it can sometimes have a negative effect on performance, and in some cases, the act of computing CNF of a filter can be expensive. We recommend hand tuning your filters to produce an optimal form if possible, or at least verifying through experimentation that using this parameter actually improves your query performance with no ill-effects.|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3MjA2Nw=="}, "originalCommit": {"oid": "8a920d36429e0cfb218fd0f81c8ee52943248dc9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQyMzIxOQ==", "bodyText": "Should this be part of this PR, or done as a follow-up? It sort of blows up the scope a bit of what I was looking to do as part of this PR, but it also seems useful so I'm fine either way.\n\nI think the filter tuning guide could be done in a follow-up, it sounds like something that would be much larger than this PR, this PR LGTM.\n(There's a merge conflict in the spelling exclusions now)", "url": "https://github.com/apache/druid/pull/9647#discussion_r406423219", "createdAt": "2020-04-09T19:18:59Z", "author": {"login": "jon-wei"}, "path": "docs/querying/query-context.md", "diffHunk": "@@ -45,6 +45,7 @@ The query context is used for various query configuration parameters. The follow\n |parallelMergeParallelism|`druid.processing.merge.pool.parallelism`|Maximum number of parallel threads to use for parallel result merging on the Broker. See [Broker configuration](../configuration/index.html#broker) for more details.|\n |parallelMergeInitialYieldRows|`druid.processing.merge.task.initialYieldNumRows`|Number of rows to yield per ForkJoinPool merge task for parallel result merging on the Broker, before forking off a new task to continue merging sequences. See [Broker configuration](../configuration/index.html#broker) for more details.|\n |parallelMergeSmallBatchRows|`druid.processing.merge.task.smallBatchNumRows`|Size of result batches to operate on in ForkJoinPool merge tasks for parallel result merging on the Broker. See [Broker configuration](../configuration/index.html#broker) for more details.|\n+|useFilterCNF|`false`| If true, Druid will attempt to convert the query filter to Conjunctive Normal Form (CNF). During query processing, columns can be pre-filtered by intersecting the bitmap indexes of all values that match the eligible filters, often greatly reducing the raw number of rows which need to be scanned. But this effect only happens for the top level filter, or individual clauses of a top level 'and' filter. As such, filters in CNF potentially have a higher chance to utilize a large amount of bitmap indexes on string columns during pre-filtering. However, this setting should be used with great caution, as it can sometimes have a negative effect on performance, and in some cases, the act of computing CNF of a filter can be expensive. We recommend hand tuning your filters to produce an optimal form if possible, or at least verifying through experimentation that using this parameter actually improves your query performance with no ill-effects.|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3MjA2Nw=="}, "originalCommit": {"oid": "8a920d36429e0cfb218fd0f81c8ee52943248dc9"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2519, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}