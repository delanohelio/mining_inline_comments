{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyNDE3Mzgw", "number": 10370, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODoxNDo0NFrOEhjv3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzoyMTowNlrOEiXdVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjI0MTU2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/math/expr/ExprType.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODoxNDo0NFrOHO74jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNjoxODo1N1rOHQlVlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQyMzI0NQ==", "bodyText": "shouldn't it instead throw an exception?", "url": "https://github.com/apache/druid/pull/10370#discussion_r485423245", "createdAt": "2020-09-09T08:14:44Z", "author": {"login": "abhishekagarwal87"}, "path": "core/src/main/java/org/apache/druid/math/expr/ExprType.java", "diffHunk": "@@ -29,5 +35,116 @@\n   STRING,\n   DOUBLE_ARRAY,\n   LONG_ARRAY,\n-  STRING_ARRAY\n+  STRING_ARRAY;\n+\n+  public boolean isNumeric()\n+  {\n+    return isNumeric(this);\n+  }\n+\n+  /**\n+   * The expression system does not distinguish between {@link ValueType#FLOAT} and {@link ValueType#DOUBLE}, and\n+   * cannot currently handle {@link ValueType#COMPLEX} inputs. This method will convert {@link ValueType#FLOAT} to\n+   * {@link #DOUBLE}, or throw an exception if a {@link ValueType#COMPLEX} is encountered.\n+   *\n+   * @throws IllegalStateException\n+   */\n+  public static ExprType fromValueType(@Nullable ValueType valueType)\n+  {\n+    if (valueType == null) {\n+      throw new IllegalStateException(\"Unsupported unknown value type\");\n+    }\n+    switch (valueType) {\n+      case LONG:\n+        return LONG;\n+      case LONG_ARRAY:\n+        return LONG_ARRAY;\n+      case FLOAT:\n+      case DOUBLE:\n+        return DOUBLE;\n+      case DOUBLE_ARRAY:\n+        return DOUBLE_ARRAY;\n+      case STRING:\n+        return STRING;\n+      case STRING_ARRAY:\n+        return STRING_ARRAY;\n+      case COMPLEX:\n+      default:\n+        throw new ISE(\"Unsupported value type[%s]\", valueType);\n+    }\n+  }\n+\n+  public static boolean isNumeric(ExprType type)\n+  {\n+    return LONG.equals(type) || DOUBLE.equals(type);\n+  }\n+\n+  public static boolean isArray(@Nullable ExprType type)\n+  {\n+    return LONG_ARRAY.equals(type) || DOUBLE_ARRAY.equals(type) || STRING_ARRAY.equals(type);\n+  }\n+\n+  @Nullable\n+  public static ExprType elementType(@Nullable ExprType type)\n+  {\n+    if (type != null && isArray(type)) {\n+      switch (type) {\n+        case STRING_ARRAY:\n+          return STRING;\n+        case LONG_ARRAY:\n+          return LONG;\n+        case DOUBLE_ARRAY:\n+          return DOUBLE;\n+      }\n+    }\n+    return type;\n+  }\n+\n+  @Nullable\n+  public static ExprType asArrayType(@Nullable ExprType elementType)\n+  {\n+    if (elementType != null && !isArray(elementType)) {\n+      switch (elementType) {\n+        case STRING:\n+          return STRING_ARRAY;\n+        case LONG:\n+          return LONG_ARRAY;\n+        case DOUBLE:\n+          return DOUBLE_ARRAY;\n+      }\n+    }\n+    return elementType;\n+  }\n+\n+  @Nullable\n+  public static ExprType implicitCast(@Nullable ExprType type, @Nullable ExprType other)\n+  {\n+    if (type == null || other == null) {\n+      // cannot implicitly cast unknown types\n+      return null;\n+    }\n+    // arrays cannot be implicitly cast\n+    if (isArray(type)) {\n+      if (!type.equals(other)) {\n+        throw new IAE(\"Cannot implicitly cast %s to %s\", type, other);\n+      }\n+      return type;\n+    }\n+    // if either argument is a string, type becomes a string\n+    if (STRING.equals(type) || STRING.equals(other)) {\n+      return STRING;\n+    }\n+\n+    if (isNumeric(type) && isNumeric(other)) {\n+      // all numbers win over longs\n+      if (LONG.equals(type)) {\n+        return other;\n+      }\n+      // floats vs longs would be handled here, but we currently only support doubles...\n+      return type;\n+    }\n+\n+    // unhandled is unknown\n+    return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d64ecce0e8cc4a683c81cfbaf78b4aedcf2cbdb"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4OTY4MQ==", "bodyText": "Maybe? This case can't actually happen right now, all cases are actually covered in previous clauses so this line should currently never be hit. I was sort of starting to imagine ahead to a world where ExprType and ValueType are unified and things like complex types could appear in a type conversion logic block similar to this. I sort of expect this area of the code to be somewhat volatile in the near future as I work out some things about type handling.\nUsage wise, this method is basically only used to compute the output type given 2 input types, so it at least partially makes sense to return null if we can't determine the output type. I can see an argument for this being an exception as well (as well as either argument being null). implicitCast isn't a great name for this method either, I should probably call it something else, maybe something like implicitTypeConversion or .. something.", "url": "https://github.com/apache/druid/pull/10370#discussion_r485989681", "createdAt": "2020-09-10T00:15:51Z", "author": {"login": "clintropolis"}, "path": "core/src/main/java/org/apache/druid/math/expr/ExprType.java", "diffHunk": "@@ -29,5 +35,116 @@\n   STRING,\n   DOUBLE_ARRAY,\n   LONG_ARRAY,\n-  STRING_ARRAY\n+  STRING_ARRAY;\n+\n+  public boolean isNumeric()\n+  {\n+    return isNumeric(this);\n+  }\n+\n+  /**\n+   * The expression system does not distinguish between {@link ValueType#FLOAT} and {@link ValueType#DOUBLE}, and\n+   * cannot currently handle {@link ValueType#COMPLEX} inputs. This method will convert {@link ValueType#FLOAT} to\n+   * {@link #DOUBLE}, or throw an exception if a {@link ValueType#COMPLEX} is encountered.\n+   *\n+   * @throws IllegalStateException\n+   */\n+  public static ExprType fromValueType(@Nullable ValueType valueType)\n+  {\n+    if (valueType == null) {\n+      throw new IllegalStateException(\"Unsupported unknown value type\");\n+    }\n+    switch (valueType) {\n+      case LONG:\n+        return LONG;\n+      case LONG_ARRAY:\n+        return LONG_ARRAY;\n+      case FLOAT:\n+      case DOUBLE:\n+        return DOUBLE;\n+      case DOUBLE_ARRAY:\n+        return DOUBLE_ARRAY;\n+      case STRING:\n+        return STRING;\n+      case STRING_ARRAY:\n+        return STRING_ARRAY;\n+      case COMPLEX:\n+      default:\n+        throw new ISE(\"Unsupported value type[%s]\", valueType);\n+    }\n+  }\n+\n+  public static boolean isNumeric(ExprType type)\n+  {\n+    return LONG.equals(type) || DOUBLE.equals(type);\n+  }\n+\n+  public static boolean isArray(@Nullable ExprType type)\n+  {\n+    return LONG_ARRAY.equals(type) || DOUBLE_ARRAY.equals(type) || STRING_ARRAY.equals(type);\n+  }\n+\n+  @Nullable\n+  public static ExprType elementType(@Nullable ExprType type)\n+  {\n+    if (type != null && isArray(type)) {\n+      switch (type) {\n+        case STRING_ARRAY:\n+          return STRING;\n+        case LONG_ARRAY:\n+          return LONG;\n+        case DOUBLE_ARRAY:\n+          return DOUBLE;\n+      }\n+    }\n+    return type;\n+  }\n+\n+  @Nullable\n+  public static ExprType asArrayType(@Nullable ExprType elementType)\n+  {\n+    if (elementType != null && !isArray(elementType)) {\n+      switch (elementType) {\n+        case STRING:\n+          return STRING_ARRAY;\n+        case LONG:\n+          return LONG_ARRAY;\n+        case DOUBLE:\n+          return DOUBLE_ARRAY;\n+      }\n+    }\n+    return elementType;\n+  }\n+\n+  @Nullable\n+  public static ExprType implicitCast(@Nullable ExprType type, @Nullable ExprType other)\n+  {\n+    if (type == null || other == null) {\n+      // cannot implicitly cast unknown types\n+      return null;\n+    }\n+    // arrays cannot be implicitly cast\n+    if (isArray(type)) {\n+      if (!type.equals(other)) {\n+        throw new IAE(\"Cannot implicitly cast %s to %s\", type, other);\n+      }\n+      return type;\n+    }\n+    // if either argument is a string, type becomes a string\n+    if (STRING.equals(type) || STRING.equals(other)) {\n+      return STRING;\n+    }\n+\n+    if (isNumeric(type) && isNumeric(other)) {\n+      // all numbers win over longs\n+      if (LONG.equals(type)) {\n+        return other;\n+      }\n+      // floats vs longs would be handled here, but we currently only support doubles...\n+      return type;\n+    }\n+\n+    // unhandled is unknown\n+    return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQyMzI0NQ=="}, "originalCommit": {"oid": "8d64ecce0e8cc4a683c81cfbaf78b4aedcf2cbdb"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE0MDA4MQ==", "bodyText": "my thinking is that returning null here would surface as a bug someplace else. but if we throw an exception here itself, its easier to debug. As you said the code is volatile so chances of this path being hit are even higher.", "url": "https://github.com/apache/druid/pull/10370#discussion_r487140081", "createdAt": "2020-09-11T15:59:08Z", "author": {"login": "abhishekagarwal87"}, "path": "core/src/main/java/org/apache/druid/math/expr/ExprType.java", "diffHunk": "@@ -29,5 +35,116 @@\n   STRING,\n   DOUBLE_ARRAY,\n   LONG_ARRAY,\n-  STRING_ARRAY\n+  STRING_ARRAY;\n+\n+  public boolean isNumeric()\n+  {\n+    return isNumeric(this);\n+  }\n+\n+  /**\n+   * The expression system does not distinguish between {@link ValueType#FLOAT} and {@link ValueType#DOUBLE}, and\n+   * cannot currently handle {@link ValueType#COMPLEX} inputs. This method will convert {@link ValueType#FLOAT} to\n+   * {@link #DOUBLE}, or throw an exception if a {@link ValueType#COMPLEX} is encountered.\n+   *\n+   * @throws IllegalStateException\n+   */\n+  public static ExprType fromValueType(@Nullable ValueType valueType)\n+  {\n+    if (valueType == null) {\n+      throw new IllegalStateException(\"Unsupported unknown value type\");\n+    }\n+    switch (valueType) {\n+      case LONG:\n+        return LONG;\n+      case LONG_ARRAY:\n+        return LONG_ARRAY;\n+      case FLOAT:\n+      case DOUBLE:\n+        return DOUBLE;\n+      case DOUBLE_ARRAY:\n+        return DOUBLE_ARRAY;\n+      case STRING:\n+        return STRING;\n+      case STRING_ARRAY:\n+        return STRING_ARRAY;\n+      case COMPLEX:\n+      default:\n+        throw new ISE(\"Unsupported value type[%s]\", valueType);\n+    }\n+  }\n+\n+  public static boolean isNumeric(ExprType type)\n+  {\n+    return LONG.equals(type) || DOUBLE.equals(type);\n+  }\n+\n+  public static boolean isArray(@Nullable ExprType type)\n+  {\n+    return LONG_ARRAY.equals(type) || DOUBLE_ARRAY.equals(type) || STRING_ARRAY.equals(type);\n+  }\n+\n+  @Nullable\n+  public static ExprType elementType(@Nullable ExprType type)\n+  {\n+    if (type != null && isArray(type)) {\n+      switch (type) {\n+        case STRING_ARRAY:\n+          return STRING;\n+        case LONG_ARRAY:\n+          return LONG;\n+        case DOUBLE_ARRAY:\n+          return DOUBLE;\n+      }\n+    }\n+    return type;\n+  }\n+\n+  @Nullable\n+  public static ExprType asArrayType(@Nullable ExprType elementType)\n+  {\n+    if (elementType != null && !isArray(elementType)) {\n+      switch (elementType) {\n+        case STRING:\n+          return STRING_ARRAY;\n+        case LONG:\n+          return LONG_ARRAY;\n+        case DOUBLE:\n+          return DOUBLE_ARRAY;\n+      }\n+    }\n+    return elementType;\n+  }\n+\n+  @Nullable\n+  public static ExprType implicitCast(@Nullable ExprType type, @Nullable ExprType other)\n+  {\n+    if (type == null || other == null) {\n+      // cannot implicitly cast unknown types\n+      return null;\n+    }\n+    // arrays cannot be implicitly cast\n+    if (isArray(type)) {\n+      if (!type.equals(other)) {\n+        throw new IAE(\"Cannot implicitly cast %s to %s\", type, other);\n+      }\n+      return type;\n+    }\n+    // if either argument is a string, type becomes a string\n+    if (STRING.equals(type) || STRING.equals(other)) {\n+      return STRING;\n+    }\n+\n+    if (isNumeric(type) && isNumeric(other)) {\n+      // all numbers win over longs\n+      if (LONG.equals(type)) {\n+        return other;\n+      }\n+      // floats vs longs would be handled here, but we currently only support doubles...\n+      return type;\n+    }\n+\n+    // unhandled is unknown\n+    return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQyMzI0NQ=="}, "originalCommit": {"oid": "8d64ecce0e8cc4a683c81cfbaf78b4aedcf2cbdb"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE1MDk5OA==", "bodyText": "As you said the code is volatile so chances of this path being hit are even higher.\n\nI mean, it's totally not possible to hit this null because there isn't a ExprType combination of input arguments that ends up on this line. By volatile I meant that this enum and file is likely going to go away and maybe this function migrated into ValueType. This line is essentially a placeholder for ValueType.COMPLEX which doesn't exist in ExprType, so I was shaping this method to be straightforward to work off of that enum instead of this one someday.\nI can throw an exception with the messaging 'impossible' if you would prefer, but there isn't a way to actually check it with a test.", "url": "https://github.com/apache/druid/pull/10370#discussion_r487150998", "createdAt": "2020-09-11T16:18:57Z", "author": {"login": "clintropolis"}, "path": "core/src/main/java/org/apache/druid/math/expr/ExprType.java", "diffHunk": "@@ -29,5 +35,116 @@\n   STRING,\n   DOUBLE_ARRAY,\n   LONG_ARRAY,\n-  STRING_ARRAY\n+  STRING_ARRAY;\n+\n+  public boolean isNumeric()\n+  {\n+    return isNumeric(this);\n+  }\n+\n+  /**\n+   * The expression system does not distinguish between {@link ValueType#FLOAT} and {@link ValueType#DOUBLE}, and\n+   * cannot currently handle {@link ValueType#COMPLEX} inputs. This method will convert {@link ValueType#FLOAT} to\n+   * {@link #DOUBLE}, or throw an exception if a {@link ValueType#COMPLEX} is encountered.\n+   *\n+   * @throws IllegalStateException\n+   */\n+  public static ExprType fromValueType(@Nullable ValueType valueType)\n+  {\n+    if (valueType == null) {\n+      throw new IllegalStateException(\"Unsupported unknown value type\");\n+    }\n+    switch (valueType) {\n+      case LONG:\n+        return LONG;\n+      case LONG_ARRAY:\n+        return LONG_ARRAY;\n+      case FLOAT:\n+      case DOUBLE:\n+        return DOUBLE;\n+      case DOUBLE_ARRAY:\n+        return DOUBLE_ARRAY;\n+      case STRING:\n+        return STRING;\n+      case STRING_ARRAY:\n+        return STRING_ARRAY;\n+      case COMPLEX:\n+      default:\n+        throw new ISE(\"Unsupported value type[%s]\", valueType);\n+    }\n+  }\n+\n+  public static boolean isNumeric(ExprType type)\n+  {\n+    return LONG.equals(type) || DOUBLE.equals(type);\n+  }\n+\n+  public static boolean isArray(@Nullable ExprType type)\n+  {\n+    return LONG_ARRAY.equals(type) || DOUBLE_ARRAY.equals(type) || STRING_ARRAY.equals(type);\n+  }\n+\n+  @Nullable\n+  public static ExprType elementType(@Nullable ExprType type)\n+  {\n+    if (type != null && isArray(type)) {\n+      switch (type) {\n+        case STRING_ARRAY:\n+          return STRING;\n+        case LONG_ARRAY:\n+          return LONG;\n+        case DOUBLE_ARRAY:\n+          return DOUBLE;\n+      }\n+    }\n+    return type;\n+  }\n+\n+  @Nullable\n+  public static ExprType asArrayType(@Nullable ExprType elementType)\n+  {\n+    if (elementType != null && !isArray(elementType)) {\n+      switch (elementType) {\n+        case STRING:\n+          return STRING_ARRAY;\n+        case LONG:\n+          return LONG_ARRAY;\n+        case DOUBLE:\n+          return DOUBLE_ARRAY;\n+      }\n+    }\n+    return elementType;\n+  }\n+\n+  @Nullable\n+  public static ExprType implicitCast(@Nullable ExprType type, @Nullable ExprType other)\n+  {\n+    if (type == null || other == null) {\n+      // cannot implicitly cast unknown types\n+      return null;\n+    }\n+    // arrays cannot be implicitly cast\n+    if (isArray(type)) {\n+      if (!type.equals(other)) {\n+        throw new IAE(\"Cannot implicitly cast %s to %s\", type, other);\n+      }\n+      return type;\n+    }\n+    // if either argument is a string, type becomes a string\n+    if (STRING.equals(type) || STRING.equals(other)) {\n+      return STRING;\n+    }\n+\n+    if (isNumeric(type) && isNumeric(other)) {\n+      // all numbers win over longs\n+      if (LONG.equals(type)) {\n+        return other;\n+      }\n+      // floats vs longs would be handled here, but we currently only support doubles...\n+      return type;\n+    }\n+\n+    // unhandled is unknown\n+    return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQyMzI0NQ=="}, "originalCommit": {"oid": "8d64ecce0e8cc4a683c81cfbaf78b4aedcf2cbdb"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDIzNTIxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/math/expr/ApplyFunction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMzo1OTo0M1rOHPiC6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMzo1OTo0M1rOHPiC6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA0ODQ5MA==", "bodyText": "javadocs please", "url": "https://github.com/apache/druid/pull/10370#discussion_r486048490", "createdAt": "2020-09-10T03:59:43Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/math/expr/ApplyFunction.java", "diffHunk": "@@ -74,6 +75,9 @@ default boolean hasArrayOutput(LambdaExpr lambdaExpr)\n    */\n   void validateArguments(LambdaExpr lambdaExpr, List<Expr> args);\n \n+  @Nullable\n+  ExprType getOutputType(Expr.InputBindingTypes inputTypes, LambdaExpr expr, List<Expr> args);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d64ecce0e8cc4a683c81cfbaf78b4aedcf2cbdb"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDI0OTE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/math/expr/ApplyFunction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNDowODowNFrOHPiK1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNDowODowNFrOHPiK1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1MDUxOQ==", "bodyText": "javadocs please", "url": "https://github.com/apache/druid/pull/10370#discussion_r486050519", "createdAt": "2020-09-10T04:08:04Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/math/expr/ApplyFunction.java", "diffHunk": "@@ -848,4 +882,32 @@ public CartesianFoldLambdaBinding accumulateWithIndex(int index, Object acc)\n       return this;\n     }\n   }\n+\n+  class LambdaInputBindingTypes implements Expr.InputBindingTypes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d64ecce0e8cc4a683c81cfbaf78b4aedcf2cbdb"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDI1OTA0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/math/expr/ApplyFunction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNDoxNDowOVrOHPiQpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTowODo1OVrOHQF1Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1MjAwNA==", "bodyText": "nit: Willl getType be called in a loop anywhere? It might be better to use getOrDefault(..) instead to avoid 2 hashcode computations here (for containsKey and getInt)", "url": "https://github.com/apache/druid/pull/10370#discussion_r486052004", "createdAt": "2020-09-10T04:14:09Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/math/expr/ApplyFunction.java", "diffHunk": "@@ -848,4 +882,32 @@ public CartesianFoldLambdaBinding accumulateWithIndex(int index, Object acc)\n       return this;\n     }\n   }\n+\n+  class LambdaInputBindingTypes implements Expr.InputBindingTypes\n+  {\n+    private final Object2IntMap<String> lambdaIdentifiers;\n+    private final Expr.InputBindingTypes inputTypes;\n+    private final List<Expr> args;\n+\n+    public LambdaInputBindingTypes(Expr.InputBindingTypes inputTypes, LambdaExpr expr, List<Expr> args)\n+    {\n+      this.inputTypes = inputTypes;\n+      this.args = args;\n+      List<String> identifiers = expr.getIdentifiers();\n+      this.lambdaIdentifiers = new Object2IntOpenHashMap<>(args.size());\n+      for (int i = 0; i < args.size(); i++) {\n+        lambdaIdentifiers.put(identifiers.get(i), i);\n+      }\n+    }\n+\n+    @Nullable\n+    @Override\n+    public ExprType getType(String name)\n+    {\n+      if (lambdaIdentifiers.containsKey(name)) {\n+        return ExprType.elementType(args.get(lambdaIdentifiers.getInt(name)).getOutputType(inputTypes));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d64ecce0e8cc4a683c81cfbaf78b4aedcf2cbdb"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzNDc4Nw==", "bodyText": "It shouldn't be called in any sort of hot loop. The eventual usage of this information is so that this happens during a sort of planning phase that is checking to see if it we can make a strongly typed and optimized expression evaluator to use instead of the default.", "url": "https://github.com/apache/druid/pull/10370#discussion_r486634787", "createdAt": "2020-09-10T21:08:59Z", "author": {"login": "clintropolis"}, "path": "core/src/main/java/org/apache/druid/math/expr/ApplyFunction.java", "diffHunk": "@@ -848,4 +882,32 @@ public CartesianFoldLambdaBinding accumulateWithIndex(int index, Object acc)\n       return this;\n     }\n   }\n+\n+  class LambdaInputBindingTypes implements Expr.InputBindingTypes\n+  {\n+    private final Object2IntMap<String> lambdaIdentifiers;\n+    private final Expr.InputBindingTypes inputTypes;\n+    private final List<Expr> args;\n+\n+    public LambdaInputBindingTypes(Expr.InputBindingTypes inputTypes, LambdaExpr expr, List<Expr> args)\n+    {\n+      this.inputTypes = inputTypes;\n+      this.args = args;\n+      List<String> identifiers = expr.getIdentifiers();\n+      this.lambdaIdentifiers = new Object2IntOpenHashMap<>(args.size());\n+      for (int i = 0; i < args.size(); i++) {\n+        lambdaIdentifiers.put(identifiers.get(i), i);\n+      }\n+    }\n+\n+    @Nullable\n+    @Override\n+    public ExprType getType(String name)\n+    {\n+      if (lambdaIdentifiers.containsKey(name)) {\n+        return ExprType.elementType(args.get(lambdaIdentifiers.getInt(name)).getOutputType(inputTypes));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1MjAwNA=="}, "originalCommit": {"oid": "8d64ecce0e8cc4a683c81cfbaf78b4aedcf2cbdb"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDI4MDI0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/math/expr/BinaryLogicalOperatorExpr.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNDoyNzowOFrOHPidBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNzowMToyOVrOHRzhOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1NTE3NQ==", "bodyText": "Looking at how this function works got me thinking about some stuff... Does this function need to be in sync with the behavior in BinaryEvalOpExprBase#eval (I think so \ud83e\udd14) Since the eval method isn't implemented here, would it be better to implement it in BinaryEvalOpExprBase?\nCan you explain how getOutputType would deal with default null handling mode.\nAlso, what does it mean to have an output type of null?", "url": "https://github.com/apache/druid/pull/10370#discussion_r486055175", "createdAt": "2020-09-10T04:27:08Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/math/expr/BinaryLogicalOperatorExpr.java", "diffHunk": "@@ -57,6 +57,17 @@ protected final double evalDouble(double left, double right)\n     // Use Double.compare for more consistent NaN handling.\n     return Evals.asDouble(Double.compare(left, right) < 0);\n   }\n+\n+  @Nullable\n+  @Override\n+  public ExprType getOutputType(InputBindingTypes inputTypes)\n+  {\n+    ExprType implicitCast = super.getOutputType(inputTypes);\n+    if (ExprType.STRING.equals(implicitCast)) {\n+      return ExprType.LONG;\n+    }\n+    return implicitCast;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d64ecce0e8cc4a683c81cfbaf78b4aedcf2cbdb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYyNzUxMg==", "bodyText": "Looking at how this function works got me thinking about some stuff... Does this function need to be in sync with the behavior in BinaryEvalOpExprBase#eval (I think so \ud83e\udd14) Since the eval method isn't implemented here, would it be better to implement it in BinaryEvalOpExprBase?\n\nYeah, the behavior of getOutputType should always match the behavior of eval. In this case, it can't really be pushed down because the math operators also implement BinaryEvalOpExprBase, but do not handle string inputs as numerical outputs. We could put another type in between these logical operators and BinaryEvalOpExprBase that provides it though, I will consider doing that.\n\nCan you explain how getOutputType would deal with default null handling mode.\n\ngetOutputType should be fully independent of how druid.generic.useDefaultValueForNull is set since it does not capture (currently) whether or not nulls can happen.\n\nAlso, what does it mean to have an output type of null?\n\nAn output type of null signifies that we couldn't compute what the output type is, most likely because input type information isn't available. When the input to the expressions are actual segments (QueryableIndexStorageAdapter) then type information should always be available, and a null signifies an input that doesn't exist, but other adapters (and other usages of Expr such as for transforms) might not always have complete type information.\nI will add all of this stuff to the javadocs.", "url": "https://github.com/apache/druid/pull/10370#discussion_r486627512", "createdAt": "2020-09-10T20:54:27Z", "author": {"login": "clintropolis"}, "path": "core/src/main/java/org/apache/druid/math/expr/BinaryLogicalOperatorExpr.java", "diffHunk": "@@ -57,6 +57,17 @@ protected final double evalDouble(double left, double right)\n     // Use Double.compare for more consistent NaN handling.\n     return Evals.asDouble(Double.compare(left, right) < 0);\n   }\n+\n+  @Nullable\n+  @Override\n+  public ExprType getOutputType(InputBindingTypes inputTypes)\n+  {\n+    ExprType implicitCast = super.getOutputType(inputTypes);\n+    if (ExprType.STRING.equals(implicitCast)) {\n+      return ExprType.LONG;\n+    }\n+    return implicitCast;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1NTE3NQ=="}, "originalCommit": {"oid": "8d64ecce0e8cc4a683c81cfbaf78b4aedcf2cbdb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NjMyOA==", "bodyText": "what should be the expected output type here if the left output type is a string and the right output type is a double?\nAs per org.apache.druid.math.expr.BinaryEvalOpExprBase#eval it seems, the runtime output type will be double . As per ExprType.autoTypeConversion it seems to be string.", "url": "https://github.com/apache/druid/pull/10370#discussion_r487566328", "createdAt": "2020-09-13T19:15:27Z", "author": {"login": "abhishekagarwal87"}, "path": "core/src/main/java/org/apache/druid/math/expr/BinaryLogicalOperatorExpr.java", "diffHunk": "@@ -57,6 +57,17 @@ protected final double evalDouble(double left, double right)\n     // Use Double.compare for more consistent NaN handling.\n     return Evals.asDouble(Double.compare(left, right) < 0);\n   }\n+\n+  @Nullable\n+  @Override\n+  public ExprType getOutputType(InputBindingTypes inputTypes)\n+  {\n+    ExprType implicitCast = super.getOutputType(inputTypes);\n+    if (ExprType.STRING.equals(implicitCast)) {\n+      return ExprType.LONG;\n+    }\n+    return implicitCast;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1NTE3NQ=="}, "originalCommit": {"oid": "8d64ecce0e8cc4a683c81cfbaf78b4aedcf2cbdb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg0MTc1Nw==", "bodyText": "Good eye, you spotted a thing I was purposefully ignoring because I think it is not really great behavior, or consistent with other math functions. The default behavior for those 2 input math operators is to consider the arguments as doubles as you've noticed, regardless of whether or not they are both doubles. I suspect it is implemented like this to allow null values inputs to still work as zeros in 'default' mode (druid.generic.useDefaultValueForNull=true), because the current expressions are not strongly typed so these nulls all end up as string values. See this comment for a bit more explanation, and this comment for some of the problems that this causes.\nIt is also a bit unintuitive behavior. A string column which contains numeric values will work in one of these math operators, so something like 2.0 + '3.1' = 5.1 works magically. But it will also potentially treat the string value as 0 if the string is not a number in default mode, so 2.0 + 'foo' = 2.0 (or null in sql compatible mode). The math functions (min, max, etc) instead treat either input as string as a 0/null output without evaluating the function.\nI'm not actually sure what the best behavior here is, the math function behavior seems a bit more intuitive to me, where either input being a string produces a null output, so I chose to use that here. This PR is setting up for vectorized expressions, which are going to be strongly typed before processing, which I think makes this inconsistent/confusing/magical behavior not necessary. I was planning to raise a discussion about this part in a future PR since it isn't actually affecting anything yet, but I think it is good to start talking about it even though it isn't wired up to anything yet.\nAlso, I really think 'default' mode complicates the expression system quite a lot. It would be my preference for the expression system to always behave in an SQL compatible manner, and default mode only come into play on the boundaries for data coming in and going out, but I haven't fully thought through the implications of this and it requires some discussion I think, and might be a bit dramatic of a change.", "url": "https://github.com/apache/druid/pull/10370#discussion_r487841757", "createdAt": "2020-09-14T11:30:29Z", "author": {"login": "clintropolis"}, "path": "core/src/main/java/org/apache/druid/math/expr/BinaryLogicalOperatorExpr.java", "diffHunk": "@@ -57,6 +57,17 @@ protected final double evalDouble(double left, double right)\n     // Use Double.compare for more consistent NaN handling.\n     return Evals.asDouble(Double.compare(left, right) < 0);\n   }\n+\n+  @Nullable\n+  @Override\n+  public ExprType getOutputType(InputBindingTypes inputTypes)\n+  {\n+    ExprType implicitCast = super.getOutputType(inputTypes);\n+    if (ExprType.STRING.equals(implicitCast)) {\n+      return ExprType.LONG;\n+    }\n+    return implicitCast;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1NTE3NQ=="}, "originalCommit": {"oid": "8d64ecce0e8cc4a683c81cfbaf78b4aedcf2cbdb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg2ODE5MQ==", "bodyText": "so something like 2.0 + '3.1' = 5.1\n\nThat might not have been a great example, this might normal behavior in some other databases \ud83d\ude05. I'm going to have a closer read over https://www.postgresql.org/docs/9.0/typeconv-oper.html and https://www.postgresql.org/docs/9.0/typeconv-func.html and maybe reference some other docs too and see if might make sense to different versions of this implicit conversion function for different contexts.", "url": "https://github.com/apache/druid/pull/10370#discussion_r487868191", "createdAt": "2020-09-14T12:21:36Z", "author": {"login": "clintropolis"}, "path": "core/src/main/java/org/apache/druid/math/expr/BinaryLogicalOperatorExpr.java", "diffHunk": "@@ -57,6 +57,17 @@ protected final double evalDouble(double left, double right)\n     // Use Double.compare for more consistent NaN handling.\n     return Evals.asDouble(Double.compare(left, right) < 0);\n   }\n+\n+  @Nullable\n+  @Override\n+  public ExprType getOutputType(InputBindingTypes inputTypes)\n+  {\n+    ExprType implicitCast = super.getOutputType(inputTypes);\n+    if (ExprType.STRING.equals(implicitCast)) {\n+      return ExprType.LONG;\n+    }\n+    return implicitCast;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1NTE3NQ=="}, "originalCommit": {"oid": "8d64ecce0e8cc4a683c81cfbaf78b4aedcf2cbdb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3NTAyNg==", "bodyText": "This PR is setting up for vectorized expressions, which are going to be strongly typed before processing, which I think makes this inconsistent/confusing/magical behavior not necessary.\n\ncan you elaborate more on this? How will that look like?\nWhile I understand the right behavior is debatable, it may still be best to keep the type in sync with eval even if it's not very intuitive. It may require that the logic of figuring out the type is not reusable as a function ExprType.autoTypeConversion and may have to be written differently for some operators.  We can, later on, change the different functions, fixing both the eval and getOutputType together. But till then, they will be in sync.", "url": "https://github.com/apache/druid/pull/10370#discussion_r488075026", "createdAt": "2020-09-14T16:44:17Z", "author": {"login": "abhishekagarwal87"}, "path": "core/src/main/java/org/apache/druid/math/expr/BinaryLogicalOperatorExpr.java", "diffHunk": "@@ -57,6 +57,17 @@ protected final double evalDouble(double left, double right)\n     // Use Double.compare for more consistent NaN handling.\n     return Evals.asDouble(Double.compare(left, right) < 0);\n   }\n+\n+  @Nullable\n+  @Override\n+  public ExprType getOutputType(InputBindingTypes inputTypes)\n+  {\n+    ExprType implicitCast = super.getOutputType(inputTypes);\n+    if (ExprType.STRING.equals(implicitCast)) {\n+      return ExprType.LONG;\n+    }\n+    return implicitCast;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1NTE3NQ=="}, "originalCommit": {"oid": "8d64ecce0e8cc4a683c81cfbaf78b4aedcf2cbdb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE3MjIyMw==", "bodyText": "can you elaborate more on this? How will that look like?\n\nAh, its going to be based on using these methods, just the processors will be specialized to deal with the correct type based on the set of input types. Since the output type information isn't used for non-vectorized expressions, I'm trying to model this as the change I want to see in the world and will ensure that this matches the behavior of the vectorized expressions, but I've gone ahead and split operator from function auto conversion and changed it to match existing behavior for now in case it is necessary, and can always consolidate them again in the future.", "url": "https://github.com/apache/druid/pull/10370#discussion_r488172223", "createdAt": "2020-09-14T19:33:02Z", "author": {"login": "clintropolis"}, "path": "core/src/main/java/org/apache/druid/math/expr/BinaryLogicalOperatorExpr.java", "diffHunk": "@@ -57,6 +57,17 @@ protected final double evalDouble(double left, double right)\n     // Use Double.compare for more consistent NaN handling.\n     return Evals.asDouble(Double.compare(left, right) < 0);\n   }\n+\n+  @Nullable\n+  @Override\n+  public ExprType getOutputType(InputBindingTypes inputTypes)\n+  {\n+    ExprType implicitCast = super.getOutputType(inputTypes);\n+    if (ExprType.STRING.equals(implicitCast)) {\n+      return ExprType.LONG;\n+    }\n+    return implicitCast;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1NTE3NQ=="}, "originalCommit": {"oid": "8d64ecce0e8cc4a683c81cfbaf78b4aedcf2cbdb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMyNDkxNQ==", "bodyText": "I'm going to merge this PR, but we can continue this discussion in the next one, so this stuff can actually be tied into things in a concrete manner. Looking at postgres, its math functions do, at least somewhat, allow for implicit conversion of sting numbers to numbers. So 2.0 + '3.1' = 5.1 and cos('1') work, but '2.0' + '3.1' does not. In druid  currently the first would have the same behavior as postgres, but the 2nd would be null or 0 depending on the value of druid.generic.useDefaultValueForNull, while the 3rd expression would do string concatenation.", "url": "https://github.com/apache/druid/pull/10370#discussion_r488324915", "createdAt": "2020-09-15T01:18:45Z", "author": {"login": "clintropolis"}, "path": "core/src/main/java/org/apache/druid/math/expr/BinaryLogicalOperatorExpr.java", "diffHunk": "@@ -57,6 +57,17 @@ protected final double evalDouble(double left, double right)\n     // Use Double.compare for more consistent NaN handling.\n     return Evals.asDouble(Double.compare(left, right) < 0);\n   }\n+\n+  @Nullable\n+  @Override\n+  public ExprType getOutputType(InputBindingTypes inputTypes)\n+  {\n+    ExprType implicitCast = super.getOutputType(inputTypes);\n+    if (ExprType.STRING.equals(implicitCast)) {\n+      return ExprType.LONG;\n+    }\n+    return implicitCast;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1NTE3NQ=="}, "originalCommit": {"oid": "8d64ecce0e8cc4a683c81cfbaf78b4aedcf2cbdb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQzMTkzMA==", "bodyText": "Thanks @clintropolis", "url": "https://github.com/apache/druid/pull/10370#discussion_r488431930", "createdAt": "2020-09-15T07:01:29Z", "author": {"login": "abhishekagarwal87"}, "path": "core/src/main/java/org/apache/druid/math/expr/BinaryLogicalOperatorExpr.java", "diffHunk": "@@ -57,6 +57,17 @@ protected final double evalDouble(double left, double right)\n     // Use Double.compare for more consistent NaN handling.\n     return Evals.asDouble(Double.compare(left, right) < 0);\n   }\n+\n+  @Nullable\n+  @Override\n+  public ExprType getOutputType(InputBindingTypes inputTypes)\n+  {\n+    ExprType implicitCast = super.getOutputType(inputTypes);\n+    if (ExprType.STRING.equals(implicitCast)) {\n+      return ExprType.LONG;\n+    }\n+    return implicitCast;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1NTE3NQ=="}, "originalCommit": {"oid": "8d64ecce0e8cc4a683c81cfbaf78b4aedcf2cbdb"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDYzOTczOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/math/expr/ConstantExpr.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMjozODowN1rOHQMNVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzo0NToxNlrOHQNOqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjczOTI4NA==", "bodyText": "nit: Add @NonNull since the super class says this is Nullable, I'm not actually sure which takes precedence in this case when the package is annotated with EverythingIsNonNullByDefault", "url": "https://github.com/apache/druid/pull/10370#discussion_r486739284", "createdAt": "2020-09-11T02:38:07Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/math/expr/ConstantExpr.java", "diffHunk": "@@ -35,6 +35,19 @@\n  */\n abstract class ConstantExpr implements Expr\n {\n+  final ExprType outputType;\n+\n+  protected ConstantExpr(ExprType outputType)\n+  {\n+    this.outputType = outputType;\n+  }\n+\n+  @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ff744b360de695535cd76010120d3091bb572ad"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1NjAwOQ==", "bodyText": "Oops, I didn't actually mean to make this not be @Nullable, though I guess it is true, but will fix to just be consistent with the interface.", "url": "https://github.com/apache/druid/pull/10370#discussion_r486756009", "createdAt": "2020-09-11T03:45:16Z", "author": {"login": "clintropolis"}, "path": "core/src/main/java/org/apache/druid/math/expr/ConstantExpr.java", "diffHunk": "@@ -35,6 +35,19 @@\n  */\n abstract class ConstantExpr implements Expr\n {\n+  final ExprType outputType;\n+\n+  protected ConstantExpr(ExprType outputType)\n+  {\n+    this.outputType = outputType;\n+  }\n+\n+  @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjczOTI4NA=="}, "originalCommit": {"oid": "9ff744b360de695535cd76010120d3091bb572ad"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDY0MjkwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/math/expr/Expr.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMjozOTozM1rOHQMPFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzo0NTo1MlrOHQNPLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjczOTczMw==", "bodyText": "note to self: Do we want null to mean 2 things?", "url": "https://github.com/apache/druid/pull/10370#discussion_r486739733", "createdAt": "2020-09-11T02:39:33Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/math/expr/Expr.java", "diffHunk": "@@ -116,16 +116,39 @@ default String getBindingIfIdentifier()\n   void visit(Visitor visitor);\n \n   /**\n-   * Programatically rewrite the {@link Expr} tree with a {@link Shuttle}.Each {@link Expr} is responsible for\n+   * Programatically rewrite the {@link Expr} tree with a {@link Shuttle}. Each {@link Expr} is responsible for\n    * ensuring the {@link Shuttle} can visit all of its {@link Expr} children, as well as updating its children\n    * {@link Expr} with the results from the {@link Shuttle}, before finally visiting an updated form of itself.\n    */\n   Expr visit(Shuttle shuttle);\n \n   /**\n-   * Examine the usage of {@link IdentifierExpr} children of an {@link Expr}, constructing a {@link BindingDetails}\n+   * Examine the usage of {@link IdentifierExpr} children of an {@link Expr}, constructing a {@link BindingAnalysis}\n    */\n-  BindingDetails analyzeInputs();\n+  BindingAnalysis analyzeInputs();\n+\n+  /**\n+   * Given an {@link InputBindingTypes}, compute what the output {@link ExprType} will be for this expression. A return\n+   * value of null indicates that the given type information was not enough to resolve the output type, so the\n+   * expression must be evaluated using default {@link #eval} handling where types are only known after evaluation,\n+   * through {@link ExprEval#type}.\n+   */\n+  @Nullable\n+  default ExprType getOutputType(InputBindingTypes inputTypes)\n+  {\n+    return null;\n+  }\n+\n+  /**\n+   * Mechanism to supply input types for the bindings which will back {@link IdentifierExpr}, to use in the aid of\n+   * inferring the output type of an expression with {@link #getOutputType}. A null value means that either the binding", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ff744b360de695535cd76010120d3091bb572ad"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1NjE0Mw==", "bodyText": "not long term probably, but currently this will be backed by ColumnCapabilities from a ColumnInspector, which does not currently distinguish between those 2 things for all implementations.", "url": "https://github.com/apache/druid/pull/10370#discussion_r486756143", "createdAt": "2020-09-11T03:45:52Z", "author": {"login": "clintropolis"}, "path": "core/src/main/java/org/apache/druid/math/expr/Expr.java", "diffHunk": "@@ -116,16 +116,39 @@ default String getBindingIfIdentifier()\n   void visit(Visitor visitor);\n \n   /**\n-   * Programatically rewrite the {@link Expr} tree with a {@link Shuttle}.Each {@link Expr} is responsible for\n+   * Programatically rewrite the {@link Expr} tree with a {@link Shuttle}. Each {@link Expr} is responsible for\n    * ensuring the {@link Shuttle} can visit all of its {@link Expr} children, as well as updating its children\n    * {@link Expr} with the results from the {@link Shuttle}, before finally visiting an updated form of itself.\n    */\n   Expr visit(Shuttle shuttle);\n \n   /**\n-   * Examine the usage of {@link IdentifierExpr} children of an {@link Expr}, constructing a {@link BindingDetails}\n+   * Examine the usage of {@link IdentifierExpr} children of an {@link Expr}, constructing a {@link BindingAnalysis}\n    */\n-  BindingDetails analyzeInputs();\n+  BindingAnalysis analyzeInputs();\n+\n+  /**\n+   * Given an {@link InputBindingTypes}, compute what the output {@link ExprType} will be for this expression. A return\n+   * value of null indicates that the given type information was not enough to resolve the output type, so the\n+   * expression must be evaluated using default {@link #eval} handling where types are only known after evaluation,\n+   * through {@link ExprEval#type}.\n+   */\n+  @Nullable\n+  default ExprType getOutputType(InputBindingTypes inputTypes)\n+  {\n+    return null;\n+  }\n+\n+  /**\n+   * Mechanism to supply input types for the bindings which will back {@link IdentifierExpr}, to use in the aid of\n+   * inferring the output type of an expression with {@link #getOutputType}. A null value means that either the binding", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjczOTczMw=="}, "originalCommit": {"oid": "9ff744b360de695535cd76010120d3091bb572ad"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDY0OTU3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/math/expr/ExprType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMjo0MzowNFrOHQMS5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMjo0MzowNFrOHQMS5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0MDcxMA==", "bodyText": "nit: I don't think the isArray check is needed\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (elementType != null && !isArray(elementType)) {\n          \n          \n            \n                if (elementType != null) {", "url": "https://github.com/apache/druid/pull/10370#discussion_r486740710", "createdAt": "2020-09-11T02:43:04Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/math/expr/ExprType.java", "diffHunk": "@@ -29,5 +35,119 @@\n   STRING,\n   DOUBLE_ARRAY,\n   LONG_ARRAY,\n-  STRING_ARRAY\n+  STRING_ARRAY;\n+\n+  public boolean isNumeric()\n+  {\n+    return isNumeric(this);\n+  }\n+\n+  /**\n+   * The expression system does not distinguish between {@link ValueType#FLOAT} and {@link ValueType#DOUBLE}, and\n+   * cannot currently handle {@link ValueType#COMPLEX} inputs. This method will convert {@link ValueType#FLOAT} to\n+   * {@link #DOUBLE}, or throw an exception if a {@link ValueType#COMPLEX} is encountered.\n+   *\n+   * @throws IllegalStateException\n+   */\n+  public static ExprType fromValueType(@Nullable ValueType valueType)\n+  {\n+    if (valueType == null) {\n+      throw new IllegalStateException(\"Unsupported unknown value type\");\n+    }\n+    switch (valueType) {\n+      case LONG:\n+        return LONG;\n+      case LONG_ARRAY:\n+        return LONG_ARRAY;\n+      case FLOAT:\n+      case DOUBLE:\n+        return DOUBLE;\n+      case DOUBLE_ARRAY:\n+        return DOUBLE_ARRAY;\n+      case STRING:\n+        return STRING;\n+      case STRING_ARRAY:\n+        return STRING_ARRAY;\n+      case COMPLEX:\n+      default:\n+        throw new ISE(\"Unsupported value type[%s]\", valueType);\n+    }\n+  }\n+\n+  public static boolean isNumeric(ExprType type)\n+  {\n+    return LONG.equals(type) || DOUBLE.equals(type);\n+  }\n+\n+  public static boolean isArray(@Nullable ExprType type)\n+  {\n+    return LONG_ARRAY.equals(type) || DOUBLE_ARRAY.equals(type) || STRING_ARRAY.equals(type);\n+  }\n+\n+  @Nullable\n+  public static ExprType elementType(@Nullable ExprType type)\n+  {\n+    if (type != null && isArray(type)) {\n+      switch (type) {\n+        case STRING_ARRAY:\n+          return STRING;\n+        case LONG_ARRAY:\n+          return LONG;\n+        case DOUBLE_ARRAY:\n+          return DOUBLE;\n+      }\n+    }\n+    return type;\n+  }\n+\n+  @Nullable\n+  public static ExprType asArrayType(@Nullable ExprType elementType)\n+  {\n+    if (elementType != null && !isArray(elementType)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ff744b360de695535cd76010120d3091bb572ad"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDY1MTM5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/math/expr/ExprType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMjo0NDoyMVrOHQMUGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMjo0NDoyMVrOHQMUGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0MTAxOA==", "bodyText": "I think we should add a unit test to make sure we cover all the different branches for this. There looks like there's a lot of subtlety in the ordering of the if conditions and It sounds like an important function that many others will rely on working correctly. I think this function should have 100% branch coverage\nI think all the static functions in this class should be unit tested.", "url": "https://github.com/apache/druid/pull/10370#discussion_r486741018", "createdAt": "2020-09-11T02:44:21Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/math/expr/ExprType.java", "diffHunk": "@@ -29,5 +35,119 @@\n   STRING,\n   DOUBLE_ARRAY,\n   LONG_ARRAY,\n-  STRING_ARRAY\n+  STRING_ARRAY;\n+\n+  public boolean isNumeric()\n+  {\n+    return isNumeric(this);\n+  }\n+\n+  /**\n+   * The expression system does not distinguish between {@link ValueType#FLOAT} and {@link ValueType#DOUBLE}, and\n+   * cannot currently handle {@link ValueType#COMPLEX} inputs. This method will convert {@link ValueType#FLOAT} to\n+   * {@link #DOUBLE}, or throw an exception if a {@link ValueType#COMPLEX} is encountered.\n+   *\n+   * @throws IllegalStateException\n+   */\n+  public static ExprType fromValueType(@Nullable ValueType valueType)\n+  {\n+    if (valueType == null) {\n+      throw new IllegalStateException(\"Unsupported unknown value type\");\n+    }\n+    switch (valueType) {\n+      case LONG:\n+        return LONG;\n+      case LONG_ARRAY:\n+        return LONG_ARRAY;\n+      case FLOAT:\n+      case DOUBLE:\n+        return DOUBLE;\n+      case DOUBLE_ARRAY:\n+        return DOUBLE_ARRAY;\n+      case STRING:\n+        return STRING;\n+      case STRING_ARRAY:\n+        return STRING_ARRAY;\n+      case COMPLEX:\n+      default:\n+        throw new ISE(\"Unsupported value type[%s]\", valueType);\n+    }\n+  }\n+\n+  public static boolean isNumeric(ExprType type)\n+  {\n+    return LONG.equals(type) || DOUBLE.equals(type);\n+  }\n+\n+  public static boolean isArray(@Nullable ExprType type)\n+  {\n+    return LONG_ARRAY.equals(type) || DOUBLE_ARRAY.equals(type) || STRING_ARRAY.equals(type);\n+  }\n+\n+  @Nullable\n+  public static ExprType elementType(@Nullable ExprType type)\n+  {\n+    if (type != null && isArray(type)) {\n+      switch (type) {\n+        case STRING_ARRAY:\n+          return STRING;\n+        case LONG_ARRAY:\n+          return LONG;\n+        case DOUBLE_ARRAY:\n+          return DOUBLE;\n+      }\n+    }\n+    return type;\n+  }\n+\n+  @Nullable\n+  public static ExprType asArrayType(@Nullable ExprType elementType)\n+  {\n+    if (elementType != null && !isArray(elementType)) {\n+      switch (elementType) {\n+        case STRING:\n+          return STRING_ARRAY;\n+        case LONG:\n+          return LONG_ARRAY;\n+        case DOUBLE:\n+          return DOUBLE_ARRAY;\n+      }\n+    }\n+    return elementType;\n+  }\n+\n+  /**\n+   * Given 2 'input' types, choose the most appropriate combined type, if possible\n+   */\n+  @Nullable\n+  public static ExprType autoTypeConversion(@Nullable ExprType type, @Nullable ExprType other)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ff744b360de695535cd76010120d3091bb572ad"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDY3ODQ4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/math/expr/UnaryOperatorExpr.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMjo1OTozMlrOHQMjaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzo1MToxOFrOHQNVAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0NDkzOQ==", "bodyText": "Why does the not operator need to translate a string to a long?", "url": "https://github.com/apache/druid/pull/10370#discussion_r486744939", "createdAt": "2020-09-11T02:59:32Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/math/expr/UnaryOperatorExpr.java", "diffHunk": "@@ -163,4 +171,15 @@ public String toString()\n   {\n     return StringUtils.format(\"!%s\", expr);\n   }\n+\n+  @Nullable\n+  @Override\n+  public ExprType getOutputType(InputBindingTypes inputTypes)\n+  {\n+    ExprType implicitCast = super.getOutputType(inputTypes);\n+    if (ExprType.STRING.equals(implicitCast)) {\n+      return ExprType.LONG;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ff744b360de695535cd76010120d3091bb572ad"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1NzYzNA==", "bodyText": "I don't know off the top of my head why it does that, I was just trying to model its output. The binary logic expressions do that too:\n  @Override\n  protected ExprEval evalString(@Nullable String left, @Nullable String right)\n  {\n    return ExprEval.ofLongBoolean(Comparators.<String>naturalNullsFirst().compare(left, right) < 0);\n  }\n\nso it is just being consistent with those operators I think.\nI'm moderately in the camp of wondering why these logical operators return anything other than long for any input type, but I haven't thought fully through on the implications of changing that yet, so maybe there is a reason that the type is preserved for doubles in these operators.", "url": "https://github.com/apache/druid/pull/10370#discussion_r486757634", "createdAt": "2020-09-11T03:51:18Z", "author": {"login": "clintropolis"}, "path": "core/src/main/java/org/apache/druid/math/expr/UnaryOperatorExpr.java", "diffHunk": "@@ -163,4 +171,15 @@ public String toString()\n   {\n     return StringUtils.format(\"!%s\", expr);\n   }\n+\n+  @Nullable\n+  @Override\n+  public ExprType getOutputType(InputBindingTypes inputTypes)\n+  {\n+    ExprType implicitCast = super.getOutputType(inputTypes);\n+    if (ExprType.STRING.equals(implicitCast)) {\n+      return ExprType.LONG;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0NDkzOQ=="}, "originalCommit": {"oid": "9ff744b360de695535cd76010120d3091bb572ad"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDcwMjMwOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/expression/TimestampCeilExprMacro.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzoxNDoyOFrOHQMxpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMjoyODowN1rOHQvgaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0ODU4Mg==", "bodyText": "The eval function returns ExprEval.of(null) if the value is a numeric null. It looks like in that case the output type should be ExprType.STRING", "url": "https://github.com/apache/druid/pull/10370#discussion_r486748582", "createdAt": "2020-09-11T03:14:28Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/expression/TimestampCeilExprMacro.java", "diffHunk": "@@ -93,6 +95,13 @@ public Expr visit(Shuttle shuttle)\n       return shuttle.visit(new TimestampCeilExpr(newArgs));\n     }\n \n+    @Nullable\n+    @Override\n+    public ExprType getOutputType(InputBindingTypes inputTypes)\n+    {\n+      return ExprType.LONG;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ff744b360de695535cd76010120d3091bb572ad"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc2MjUyMQ==", "bodyText": "Hmm, so numeric null handling should be done currently be done using ExprEval.isNumericNull, which will return true even if the type is a null string from a StringExprEval. So i think 'string' is technically correct, but I don't think spiritually or functionally quite true, nor that useful. We probably should modify these ExprEval.of(null) to make type correct ExprEval to make eval match exactly what getOutputType says, but I don't know if this PR is the correct place to do that.", "url": "https://github.com/apache/druid/pull/10370#discussion_r486762521", "createdAt": "2020-09-11T04:12:03Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/query/expression/TimestampCeilExprMacro.java", "diffHunk": "@@ -93,6 +95,13 @@ public Expr visit(Shuttle shuttle)\n       return shuttle.visit(new TimestampCeilExpr(newArgs));\n     }\n \n+    @Nullable\n+    @Override\n+    public ExprType getOutputType(InputBindingTypes inputTypes)\n+    {\n+      return ExprType.LONG;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0ODU4Mg=="}, "originalCommit": {"oid": "9ff744b360de695535cd76010120d3091bb572ad"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMxNzYxMQ==", "bodyText": "Thanks for the explanation. I agree that we shouldn't try to address that in this PR", "url": "https://github.com/apache/druid/pull/10370#discussion_r487317611", "createdAt": "2020-09-11T22:28:07Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/expression/TimestampCeilExprMacro.java", "diffHunk": "@@ -93,6 +95,13 @@ public Expr visit(Shuttle shuttle)\n       return shuttle.visit(new TimestampCeilExpr(newArgs));\n     }\n \n+    @Nullable\n+    @Override\n+    public ExprType getOutputType(InputBindingTypes inputTypes)\n+    {\n+      return ExprType.LONG;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0ODU4Mg=="}, "originalCommit": {"oid": "9ff744b360de695535cd76010120d3091bb572ad"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDcwNjExOnYy", "diffSide": "RIGHT", "path": "processing/src/test/java/org/apache/druid/query/expression/IPv4AddressMatchExprMacroTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzoxNjoyMlrOHQMzqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzoxNjoyMlrOHQMzqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0OTA5Ng==", "bodyText": "nit: You can delete this now that this is the default behavior.", "url": "https://github.com/apache/druid/pull/10370#discussion_r486749096", "createdAt": "2020-09-11T03:16:22Z", "author": {"login": "suneet-s"}, "path": "processing/src/test/java/org/apache/druid/query/expression/IPv4AddressMatchExprMacroTest.java", "diffHunk": "@@ -203,5 +205,12 @@ public Expr visit(Shuttle shuttle)\n     {\n       return null;\n     }\n+\n+    @Nullable\n+    @Override\n+    public ExprType getOutputType(InputBindingTypes inputTypes)\n+    {\n+      return null;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ff744b360de695535cd76010120d3091bb572ad"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDcwNzQwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/server/lookup/cache/LookupCoordinatorManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzoxNzoxNVrOHQM0eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNDoxMjo0M1rOHQNosQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0OTMwNA==", "bodyText": "I think this is an accidental change", "url": "https://github.com/apache/druid/pull/10370#discussion_r486749304", "createdAt": "2020-09-11T03:17:15Z", "author": {"login": "suneet-s"}, "path": "server/src/main/java/org/apache/druid/server/lookup/cache/LookupCoordinatorManager.java", "diffHunk": "@@ -518,7 +518,7 @@ private void initializeLookupsConfigWatcher()\n         configManager.set(\n             LOOKUP_CONFIG_KEY,\n             converted,\n-            new AuditInfo(\"autoConversion\", \"autoConversion\", \"127.0.0.1\")\n+            new AuditInfo(\"autoTypeConversion\", \"autoTypeConversion\", \"127.0.0.1\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ff744b360de695535cd76010120d3091bb572ad"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc2MjY3Mw==", "bodyText": "oops, intellij got a bit aggro", "url": "https://github.com/apache/druid/pull/10370#discussion_r486762673", "createdAt": "2020-09-11T04:12:43Z", "author": {"login": "clintropolis"}, "path": "server/src/main/java/org/apache/druid/server/lookup/cache/LookupCoordinatorManager.java", "diffHunk": "@@ -518,7 +518,7 @@ private void initializeLookupsConfigWatcher()\n         configManager.set(\n             LOOKUP_CONFIG_KEY,\n             converted,\n-            new AuditInfo(\"autoConversion\", \"autoConversion\", \"127.0.0.1\")\n+            new AuditInfo(\"autoTypeConversion\", \"autoTypeConversion\", \"127.0.0.1\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc0OTMwNA=="}, "originalCommit": {"oid": "9ff744b360de695535cd76010120d3091bb572ad"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDcxMzgzOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/expression/TimestampParseExprMacro.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzoyMTowNlrOHQM4MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzoyMTowNlrOHQM4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1MDI1Ng==", "bodyText": "Similar problem with ExprEval.of(null)", "url": "https://github.com/apache/druid/pull/10370#discussion_r486750256", "createdAt": "2020-09-11T03:21:06Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/expression/TimestampParseExprMacro.java", "diffHunk": "@@ -100,6 +102,13 @@ public Expr visit(Shuttle shuttle)\n         return shuttle.visit(new TimestampParseExpr(newArg));\n       }\n \n+      @Nullable\n+      @Override\n+      public ExprType getOutputType(InputBindingTypes inputTypes)\n+      {\n+        return ExprType.LONG;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ff744b360de695535cd76010120d3091bb572ad"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3186, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}