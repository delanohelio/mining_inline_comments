{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MDMzMjY3", "number": 9384, "title": "Add join prefix duplicate/shadowing check", "bodyText": "Fixes #9329\nThis PR adds a sanity check for join clause prefix duplication and shadowing, addressing the followng PR comment: #9301 (comment)\nThis PR has:\n\n been self-reviewed.\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-02-20T23:41:16Z", "url": "https://github.com/apache/druid/pull/9384", "merged": true, "mergeCommit": {"oid": "5ce9c81b6823a2c2aa647ca382bb62563d0b2462"}, "closed": true, "closedAt": "2020-02-26T02:17:24Z", "author": {"login": "jon-wei"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGT3RqAH2gAyMzc4MDMzMjY3OjQzZThjNzIxYTIwZTVjMTNmYmI3OTUxNDY3MmY4MmJhMjk1NDI5Y2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcH68I4AFqTM2NDUzMTIzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "43e8c721a20e5c13fbb79514672f82ba295429cd", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/43e8c721a20e5c13fbb79514672f82ba295429cd", "committedDate": "2020-02-20T23:38:12Z", "message": "Add join prefix duplicate/shadowing check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d4f0e9db17ce971d8cd74c5c2dfc76c8bf291bd", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/8d4f0e9db17ce971d8cd74c5c2dfc76c8bf291bd", "committedDate": "2020-02-21T18:32:22Z", "message": "Fix format string"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTk1OTk3", "url": "https://github.com/apache/druid/pull/9384#pullrequestreview-362995997", "createdAt": "2020-02-22T01:11:43Z", "commit": {"oid": "8d4f0e9db17ce971d8cd74c5c2dfc76c8bf291bd"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMToxMTo0M1rOFtIlZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMTozNDo0NVrOFtIvMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MDg4NQ==", "bodyText": "@VisibleForTesting Looks like this is only used in tests now", "url": "https://github.com/apache/druid/pull/9384#discussion_r382870885", "createdAt": "2020-02-22T01:11:43Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java", "diffHunk": "@@ -56,25 +56,29 @@\n   private final List<JoinableClause> clauses;\n   private final boolean enableFilterPushDown;\n \n+  /**\n+   * @param baseAdapter A StorageAdapter for the left-hand side base segment\n+   * @param clauses The right-hand side clauses. The caller is responsible for ensuring that there are no\n+   *                duplicate prefixes or prefixes that shadow each other across the clauses\n+   * @param enableFilterPushDown Whether to enable filter push down optimizations to the base segment\n+   */\n   HashJoinSegmentStorageAdapter(\n       StorageAdapter baseAdapter,\n-      List<JoinableClause> clauses\n+      List<JoinableClause> clauses,\n+      final boolean enableFilterPushDown\n   )\n   {\n     this.baseAdapter = baseAdapter;\n     this.clauses = clauses;\n-    this.enableFilterPushDown = QueryContexts.DEFAULT_ENABLE_JOIN_FILTER_PUSH_DOWN;\n+    this.enableFilterPushDown = enableFilterPushDown;\n   }\n \n   HashJoinSegmentStorageAdapter(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d4f0e9db17ce971d8cd74c5c2dfc76c8bf291bd"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MTEyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static void checkPreJoinableClausesForDuplicatesAndShadowing(\n          \n          \n            \n              private static void checkPreJoinableClausesForDuplicatesAndShadowing(", "url": "https://github.com/apache/druid/pull/9384#discussion_r382871126", "createdAt": "2020-02-22T01:13:50Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/join/Joinables.java", "diffHunk": "@@ -114,4 +118,37 @@ public static boolean isPrefixedBy(final String columnName, final String prefix)\n       );\n     }).collect(Collectors.toList());\n   }\n+\n+  public static void checkPreJoinableClausesForDuplicatesAndShadowing(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d4f0e9db17ce971d8cd74c5c2dfc76c8bf291bd"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MTE0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static void checkPrefixesForDuplicatesAndShadowing(\n          \n          \n            \n              private static void checkPrefixesForDuplicatesAndShadowing(", "url": "https://github.com/apache/druid/pull/9384#discussion_r382871144", "createdAt": "2020-02-22T01:13:59Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/join/Joinables.java", "diffHunk": "@@ -114,4 +118,37 @@ public static boolean isPrefixedBy(final String columnName, final String prefix)\n       );\n     }).collect(Collectors.toList());\n   }\n+\n+  public static void checkPreJoinableClausesForDuplicatesAndShadowing(\n+      final List<PreJoinableClause> preJoinableClauses\n+  )\n+  {\n+    List<String> prefixes = new ArrayList<>();\n+    for (PreJoinableClause clause : preJoinableClauses) {\n+      prefixes.add(clause.getPrefix());\n+    }\n+\n+    checkPrefixesForDuplicatesAndShadowing(prefixes);\n+  }\n+\n+  public static void checkPrefixesForDuplicatesAndShadowing(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d4f0e9db17ce971d8cd74c5c2dfc76c8bf291bd"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MjA2OA==", "bodyText": "this function already exists, but I think it's faster to change the order of the boolean expression in isPrefixedBy\nreturn columnName.length() > prefix.length() && columnName.startsWith(prefix);", "url": "https://github.com/apache/druid/pull/9384#discussion_r382872068", "createdAt": "2020-02-22T01:22:31Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/join/Joinables.java", "diffHunk": "@@ -114,4 +118,37 @@ public static boolean isPrefixedBy(final String columnName, final String prefix)\n       );\n     }).collect(Collectors.toList());\n   }\n+\n+  public static void checkPreJoinableClausesForDuplicatesAndShadowing(\n+      final List<PreJoinableClause> preJoinableClauses\n+  )\n+  {\n+    List<String> prefixes = new ArrayList<>();\n+    for (PreJoinableClause clause : preJoinableClauses) {\n+      prefixes.add(clause.getPrefix());\n+    }\n+\n+    checkPrefixesForDuplicatesAndShadowing(prefixes);\n+  }\n+\n+  public static void checkPrefixesForDuplicatesAndShadowing(\n+      final List<String> prefixes\n+  )\n+  {\n+    for (int i = 0; i < prefixes.size(); i++) {\n+      String prefix1 = prefixes.get(i);\n+      for (int k = 0; k < prefixes.size(); k++) {\n+        if (i != k) {\n+          String otherPrefix = prefixes.get(k);\n+          if (prefix1.equals(otherPrefix)) {\n+            throw new IAE(\"Detected duplicate prefix in join clauses: [%s]\", prefix1);\n+          }\n+\n+          if (isPrefixedBy(prefix1, otherPrefix)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d4f0e9db17ce971d8cd74c5c2dfc76c8bf291bd"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MzM4MQ==", "bodyText": "I think this should use a Trie of some sort here so the complexity isn't n + n^2 * k\nI don't know the best data structure to use here off the top of my head, but I can search. How many clauses is reasonable - if it's just 5, this may not matter in the big picture?", "url": "https://github.com/apache/druid/pull/9384#discussion_r382873381", "createdAt": "2020-02-22T01:34:32Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/join/Joinables.java", "diffHunk": "@@ -114,4 +118,37 @@ public static boolean isPrefixedBy(final String columnName, final String prefix)\n       );\n     }).collect(Collectors.toList());\n   }\n+\n+  public static void checkPreJoinableClausesForDuplicatesAndShadowing(\n+      final List<PreJoinableClause> preJoinableClauses\n+  )\n+  {\n+    List<String> prefixes = new ArrayList<>();\n+    for (PreJoinableClause clause : preJoinableClauses) {\n+      prefixes.add(clause.getPrefix());\n+    }\n+\n+    checkPrefixesForDuplicatesAndShadowing(prefixes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d4f0e9db17ce971d8cd74c5c2dfc76c8bf291bd"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MzM5NA==", "bodyText": "If the list is sorted by size (largest -> smallest) we can change this loop to k = i instead of k = 0", "url": "https://github.com/apache/druid/pull/9384#discussion_r382873394", "createdAt": "2020-02-22T01:34:45Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/join/Joinables.java", "diffHunk": "@@ -114,4 +118,37 @@ public static boolean isPrefixedBy(final String columnName, final String prefix)\n       );\n     }).collect(Collectors.toList());\n   }\n+\n+  public static void checkPreJoinableClausesForDuplicatesAndShadowing(\n+      final List<PreJoinableClause> preJoinableClauses\n+  )\n+  {\n+    List<String> prefixes = new ArrayList<>();\n+    for (PreJoinableClause clause : preJoinableClauses) {\n+      prefixes.add(clause.getPrefix());\n+    }\n+\n+    checkPrefixesForDuplicatesAndShadowing(prefixes);\n+  }\n+\n+  public static void checkPrefixesForDuplicatesAndShadowing(\n+      final List<String> prefixes\n+  )\n+  {\n+    for (int i = 0; i < prefixes.size(); i++) {\n+      String prefix1 = prefixes.get(i);\n+      for (int k = 0; k < prefixes.size(); k++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d4f0e9db17ce971d8cd74c5c2dfc76c8bf291bd"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45c1b8ffc20f6a56e0a26e54a6a30774aef09bbd", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/45c1b8ffc20f6a56e0a26e54a6a30774aef09bbd", "committedDate": "2020-02-25T01:14:37Z", "message": "PR comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "45c1b8ffc20f6a56e0a26e54a6a30774aef09bbd", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/45c1b8ffc20f6a56e0a26e54a6a30774aef09bbd", "committedDate": "2020-02-25T01:14:37Z", "message": "PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MjYwMDMy", "url": "https://github.com/apache/druid/pull/9384#pullrequestreview-364260032", "createdAt": "2020-02-25T15:58:56Z", "commit": {"oid": "45c1b8ffc20f6a56e0a26e54a6a30774aef09bbd"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNTo1ODo1N1rOFuL0yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNjowODo1MVrOFuMOlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk3MjU1Mw==", "bodyText": "nit: use (s1, s2) -> Integer.compare(s2.length(), s1.length()) instead.\nLess code to read / maintain.", "url": "https://github.com/apache/druid/pull/9384#discussion_r383972553", "createdAt": "2020-02-25T15:58:57Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/join/Joinables.java", "diffHunk": "@@ -39,6 +40,16 @@\n  */\n public class Joinables\n {\n+  private static final Comparator<String> DESCENDING_LENGTH_STRING_COMPARATOR = (s1, s2) -> {\n+    if (s1.length() > s2.length()) {\n+      return -1;\n+    } else if (s1.length() < s2.length()) {\n+      return 1;\n+    } else {\n+      return 0;\n+    }\n+  };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45c1b8ffc20f6a56e0a26e54a6a30774aef09bbd"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk3Mzc2OQ==", "bodyText": "\ud83d\udc4d for the benchmarks. In my experience, sorting can actually be harmful at such small numbers. Just curious if you ran benchmarks to see if sorting would be beneficial here. Again, since it's such small numbers, it probably doesn't matter. Sorry for sending you on a wild goose chase with my comment.", "url": "https://github.com/apache/druid/pull/9384#discussion_r383973769", "createdAt": "2020-02-25T16:00:53Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/join/Joinables.java", "diffHunk": "@@ -114,4 +118,37 @@ public static boolean isPrefixedBy(final String columnName, final String prefix)\n       );\n     }).collect(Collectors.toList());\n   }\n+\n+  public static void checkPreJoinableClausesForDuplicatesAndShadowing(\n+      final List<PreJoinableClause> preJoinableClauses\n+  )\n+  {\n+    List<String> prefixes = new ArrayList<>();\n+    for (PreJoinableClause clause : preJoinableClauses) {\n+      prefixes.add(clause.getPrefix());\n+    }\n+\n+    checkPrefixesForDuplicatesAndShadowing(prefixes);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MzM4MQ=="}, "originalCommit": {"oid": "8d4f0e9db17ce971d8cd74c5c2dfc76c8bf291bd"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk3OTE1OQ==", "bodyText": "I think this comment is throwing me off. If building the clause is expensive, checking for duplicates ahead of time only helps you fail faster at the cost of correct queries being slightly slower.\nI think this needs to be done ahead of time because checking while building the JoinableClauses is slower than checking ahead of time. Is that correct?", "url": "https://github.com/apache/druid/pull/9384#discussion_r383979159", "createdAt": "2020-02-25T16:08:51Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/join/Joinables.java", "diffHunk": "@@ -100,6 +112,9 @@ public static boolean isPrefixedBy(final String columnName, final String prefix)\n       final JoinableFactory joinableFactory\n   )\n   {\n+    // Since building a JoinableClause can be expensive, check for prefix conflicts before building", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45c1b8ffc20f6a56e0a26e54a6a30774aef09bbd"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "665c4b2b971c7ab7bb88c5925c95c65f1f56cc10", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/665c4b2b971c7ab7bb88c5925c95c65f1f56cc10", "committedDate": "2020-02-25T21:25:07Z", "message": "PR comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NTE5MDE5", "url": "https://github.com/apache/druid/pull/9384#pullrequestreview-364519019", "createdAt": "2020-02-25T23:13:23Z", "commit": {"oid": "665c4b2b971c7ab7bb88c5925c95c65f1f56cc10"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMzoxMzoyNFrOFuYvAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMzoxMzoyNFrOFuYvAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE4NDA2NQ==", "bodyText": "Can the check for i != k be removed if k is initialized to i + 1?", "url": "https://github.com/apache/druid/pull/9384#discussion_r384184065", "createdAt": "2020-02-25T23:13:24Z", "author": {"login": "ccaominh"}, "path": "processing/src/main/java/org/apache/druid/segment/join/Joinables.java", "diffHunk": "@@ -114,4 +122,45 @@ public static boolean isPrefixedBy(final String columnName, final String prefix)\n       );\n     }).collect(Collectors.toList());\n   }\n+\n+  private static void checkPreJoinableClausesForDuplicatesAndShadowing(\n+      final List<PreJoinableClause> preJoinableClauses\n+  )\n+  {\n+    List<String> prefixes = new ArrayList<>();\n+    for (PreJoinableClause clause : preJoinableClauses) {\n+      prefixes.add(clause.getPrefix());\n+    }\n+\n+    checkPrefixesForDuplicatesAndShadowing(prefixes);\n+  }\n+\n+  /**\n+   * Check if any prefixes in the provided list duplicate or shadow each other.\n+   *\n+   * @param prefixes A mutable list containing the prefixes to check. This list will be sorted by descending\n+   *                 string length.\n+   */\n+  public static void checkPrefixesForDuplicatesAndShadowing(\n+      final List<String> prefixes\n+  )\n+  {\n+    // this is a naive approach that assumes we'll typically handle only a small number of prefixes\n+    prefixes.sort(DESCENDING_LENGTH_STRING_COMPARATOR);\n+    for (int i = 0; i < prefixes.size(); i++) {\n+      String prefix = prefixes.get(i);\n+      for (int k = i; k < prefixes.size(); k++) {\n+        if (i != k) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "665c4b2b971c7ab7bb88c5925c95c65f1f56cc10"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bde2fe4755cba2eb60562deb3e67888375aa95ae", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/bde2fe4755cba2eb60562deb3e67888375aa95ae", "committedDate": "2020-02-25T23:42:32Z", "message": "Optimize loop PR comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NTMxMjMw", "url": "https://github.com/apache/druid/pull/9384#pullrequestreview-364531230", "createdAt": "2020-02-25T23:43:44Z", "commit": {"oid": "bde2fe4755cba2eb60562deb3e67888375aa95ae"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2934, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}