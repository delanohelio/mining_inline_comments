{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0NTg3NzAy", "number": 9224, "title": "Create new dynamic config to pause coordinator helpers when needed", "bodyText": "Description\n\n\n\nAdd a new dynamic configuration for the Coordinator service. This configuration allows the coordinator to be paused. By paused, I mean that it doesn't execute Coordinator Helpers every coordination interval. Instead, if it is paused it simply logs an info log saying that it is paused and won't run the helpers.\nWhat prompted this at my organization is the need to execute maintenance with downtime on our HDFS name nodes that are running the HDFS cluster used for deep store. We don't want the coordinator executing any of its jobs during this maintenance, but we also don't want to have to take the coordinator hard down because during the maintenance we need to restart our historical nodes with new config files to talk to hdfs and historical nodes talk to the coordinator at startup.\n\n\n\n\n\nThis PR has:\n\n been self-reviewed.\n added documentation for new or modified features or behaviors.\n added unit tests or modified existing tests to cover new code paths.\n been tested in a test Druid cluster.\n\n\n\nKey changed/added classes in this PR\n\nDruidCoordinator\nCoordinatorDynamicConfig\nITTestCoordinatorPausedTest\nCoordinatorResourceTestClient", "createdAt": "2020-01-19T22:32:02Z", "url": "https://github.com/apache/druid/pull/9224", "merged": true, "mergeCommit": {"oid": "2e1dbe598ce26a4668dffcbd996ec2b57cf3761a"}, "closed": true, "closedAt": "2020-02-05T23:33:43Z", "author": {"login": "capistrant"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb7_nUzAH2gAyMzY0NTg3NzAyOmFhMjgwZmJhNWQ1MmJhODY2MmU1MTM4YjZjY2YxZTVlNTcxODQyODk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBcT6hAFqTM1NDAyNDMxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "aa280fba5d52ba8662e5138b6ccf1e5e57184289", "author": {"user": {"login": "capistrant", "name": "Lucas Capistrant"}}, "url": "https://github.com/apache/druid/commit/aa280fba5d52ba8662e5138b6ccf1e5e57184289", "committedDate": "2020-01-19T22:23:26Z", "message": "Create new dynamic config to pause coordinator helpers when needed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9bf3f4c70d93e603ee54d45e0c89af2a70d8a83", "author": {"user": {"login": "capistrant", "name": "Lucas Capistrant"}}, "url": "https://github.com/apache/druid/commit/d9bf3f4c70d93e603ee54d45e0c89af2a70d8a83", "committedDate": "2020-01-20T14:45:33Z", "message": "Fix spelling mistakes flagged in Travis build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db407935733771cce7f101f6578a0fc951f75960", "author": {"user": {"login": "capistrant", "name": "Lucas Capistrant"}}, "url": "https://github.com/apache/druid/commit/db407935733771cce7f101f6578a0fc951f75960", "committedDate": "2020-01-22T16:47:01Z", "message": "Add an integration test for coordinator pause dynamic config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70f4ab334cf76a9133da1b6a58cf6d62e8dbc840", "author": {"user": {"login": "capistrant", "name": "Lucas Capistrant"}}, "url": "https://github.com/apache/druid/commit/70f4ab334cf76a9133da1b6a58cf6d62e8dbc840", "committedDate": "2020-01-29T15:06:42Z", "message": "Merge remote-tracking branch 'origin/master' into implement-coordinator-pause"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMTcyNDMz", "url": "https://github.com/apache/druid/pull/9224#pullrequestreview-353172433", "createdAt": "2020-02-04T17:41:52Z", "commit": {"oid": "70f4ab334cf76a9133da1b6a58cf6d62e8dbc840"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzo0MTo1MlrOFldSbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwODo0MjowN1rOFlvkcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgyMTQ4Ng==", "bodyText": "\u201cdeep store\u201d -> \u201cdeep storage\u201d?", "url": "https://github.com/apache/druid/pull/9224#discussion_r374821486", "createdAt": "2020-02-04T17:41:52Z", "author": {"login": "jihoonson"}, "path": "docs/configuration/index.md", "diffHunk": "@@ -763,6 +764,8 @@ Issuing a GET request at the same URL will return the spec that is currently in\n |`maxSegmentsInNodeLoadingQueue`|The maximum number of segments that could be queued for loading to any given server. This parameter could be used to speed up segments loading process, especially if there are \"slow\" nodes in the cluster (with low loading speed) or if too much segments scheduled to be replicated to some particular node (faster loading could be preferred to better segments distribution). Desired value depends on segments loading speed, acceptable replication time and number of nodes. Value 1000 could be a start point for a rather big cluster. Default value is 0 (loading queue is unbounded) |0|\n |`decommissioningNodes`| List of historical servers to 'decommission'. Coordinator will not assign new segments to 'decommissioning' servers,  and segments will be moved away from them to be placed on non-decommissioning servers at the maximum rate specified by `decommissioningMaxPercentOfMaxSegmentsToMove`.|none|\n |`decommissioningMaxPercentOfMaxSegmentsToMove`|  The maximum number of segments that may be moved away from 'decommissioning' servers to non-decommissioning (that is, active) servers during one Coordinator run. This value is relative to the total maximum segment movements allowed during one run which is determined by `maxSegmentsToMove`. If `decommissioningMaxPercentOfMaxSegmentsToMove` is 0, segments will neither be moved from _or to_ 'decommissioning' servers, effectively putting them in a sort of \"maintenance\" mode that will not participate in balancing or assignment by load rules. Decommissioning can also become stalled if there are no available active servers to place the segments. By leveraging the maximum percent of decommissioning segment movements, an operator can prevent active servers from overload by prioritizing balancing, or decrease decommissioning time instead. The value should be between 0 and 100.|70|\n+|`pauseCoordinator`| Boolean flag for whether or not the coordinator should execute its various jobs of coordinating the cluster. Setting this to true essentially pauses all coordination work while allowing the API to remain up. An example of when an admin may want to pause coordination would be if they are doing deep store maintenance on HDFS Name Nodes with downtime and don't want the coordinator to be directing Historical Nodes to hit the Name Node with API requests until maintenance is done and the deep store is declared healthy for use again. |false|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70f4ab334cf76a9133da1b6a58cf6d62e8dbc840"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExNzM1Nw==", "bodyText": "I think this if clause should check startingLeaderCounter == coordLeaderSelector.localTerm() as well as in the below if clause. Or maybe, this log can be just printed when the dynamic configuration is updated. Also we are trying to reduce the amount of logs. Do you think it's worth to be the info level? Or can it be the debug level?", "url": "https://github.com/apache/druid/pull/9224#discussion_r375117357", "createdAt": "2020-02-05T08:33:27Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/server/coordinator/DruidCoordinator.java", "diffHunk": "@@ -678,9 +678,20 @@ public void run()\n                 .withEmitter(emitter)\n                 .withBalancerStrategy(balancerStrategy)\n                 .build();\n+\n+        boolean coordinationPaused = getDynamicConfigs().getPauseCoordination();\n+        if (coordinationPaused && coordLeaderSelector.isLeader()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70f4ab334cf76a9133da1b6a58cf6d62e8dbc840"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExOTk0OQ==", "bodyText": "What has changed in this line?", "url": "https://github.com/apache/druid/pull/9224#discussion_r375119949", "createdAt": "2020-02-05T08:39:37Z", "author": {"login": "jihoonson"}, "path": "docs/configuration/index.md", "diffHunk": "@@ -1839,4 +1842,4 @@ Supported query contexts:\n |`druid.router.http.readTimeout`|The timeout for data reads from Broker processes.|`PT15M`|\n |`druid.router.http.numMaxThreads`|Maximum number of worker threads to handle HTTP requests and responses|`max(10, ((number of cores * 17) / 16 + 2) + 30)`|\n |`druid.router.http.numRequestsQueued`|Maximum number of requests that may be queued to a destination|`1024`|\n-|`druid.router.http.requestBuffersize`|Size of the content buffer for receiving requests. These buffers are only used for active connections that have requests with bodies that will not fit within the header buffer|`8 * 1024`|\n\\ No newline at end of file\n+|`druid.router.http.requestBuffersize`|Size of the content buffer for receiving requests. These buffers are only used for active connections that have requests with bodies that will not fit within the header buffer|`8 * 1024`|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70f4ab334cf76a9133da1b6a58cf6d62e8dbc840"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyMDUzMw==", "bodyText": "I think it's worth to document the exact list of jobs that will stop when this is set to true. Can you add it here?", "url": "https://github.com/apache/druid/pull/9224#discussion_r375120533", "createdAt": "2020-02-05T08:40:59Z", "author": {"login": "jihoonson"}, "path": "docs/configuration/index.md", "diffHunk": "@@ -763,6 +764,8 @@ Issuing a GET request at the same URL will return the spec that is currently in\n |`maxSegmentsInNodeLoadingQueue`|The maximum number of segments that could be queued for loading to any given server. This parameter could be used to speed up segments loading process, especially if there are \"slow\" nodes in the cluster (with low loading speed) or if too much segments scheduled to be replicated to some particular node (faster loading could be preferred to better segments distribution). Desired value depends on segments loading speed, acceptable replication time and number of nodes. Value 1000 could be a start point for a rather big cluster. Default value is 0 (loading queue is unbounded) |0|\n |`decommissioningNodes`| List of historical servers to 'decommission'. Coordinator will not assign new segments to 'decommissioning' servers,  and segments will be moved away from them to be placed on non-decommissioning servers at the maximum rate specified by `decommissioningMaxPercentOfMaxSegmentsToMove`.|none|\n |`decommissioningMaxPercentOfMaxSegmentsToMove`|  The maximum number of segments that may be moved away from 'decommissioning' servers to non-decommissioning (that is, active) servers during one Coordinator run. This value is relative to the total maximum segment movements allowed during one run which is determined by `maxSegmentsToMove`. If `decommissioningMaxPercentOfMaxSegmentsToMove` is 0, segments will neither be moved from _or to_ 'decommissioning' servers, effectively putting them in a sort of \"maintenance\" mode that will not participate in balancing or assignment by load rules. Decommissioning can also become stalled if there are no available active servers to place the segments. By leveraging the maximum percent of decommissioning segment movements, an operator can prevent active servers from overload by prioritizing balancing, or decrease decommissioning time instead. The value should be between 0 and 100.|70|\n+|`pauseCoordinator`| Boolean flag for whether or not the coordinator should execute its various jobs of coordinating the cluster. Setting this to true essentially pauses all coordination work while allowing the API to remain up. An example of when an admin may want to pause coordination would be if they are doing deep store maintenance on HDFS Name Nodes with downtime and don't want the coordinator to be directing Historical Nodes to hit the Name Node with API requests until maintenance is done and the deep store is declared healthy for use again. |false|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgyMTQ4Ng=="}, "originalCommit": {"oid": "70f4ab334cf76a9133da1b6a58cf6d62e8dbc840"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEyMTAxMQ==", "bodyText": "Thank you for adding this test!", "url": "https://github.com/apache/druid/pull/9224#discussion_r375121011", "createdAt": "2020-02-05T08:42:07Z", "author": {"login": "jihoonson"}, "path": "integration-tests/src/test/java/org/apache/druid/tests/indexer/ITTestCoordinatorPausedTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.tests.indexer;\n+\n+import com.google.inject.Inject;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.server.coordinator.CoordinatorDynamicConfig;\n+import org.apache.druid.testing.clients.CoordinatorResourceTestClient;\n+import org.apache.druid.testing.guice.DruidTestModuleFactory;\n+import org.apache.druid.testing.utils.ITRetryUtil;\n+import org.testng.annotations.Guice;\n+import org.testng.annotations.Test;\n+\n+import java.io.Closeable;\n+import java.util.concurrent.TimeUnit;\n+\n+@Guice(moduleFactory = DruidTestModuleFactory.class)\n+public class ITTestCoordinatorPausedTest extends AbstractITBatchIndexTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70f4ab334cf76a9133da1b6a58cf6d62e8dbc840"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a7a758c16b4cbad0dc0b864481ef4d9fadf67e9", "author": {"user": {"login": "capistrant", "name": "Lucas Capistrant"}}, "url": "https://github.com/apache/druid/commit/2a7a758c16b4cbad0dc0b864481ef4d9fadf67e9", "committedDate": "2020-02-05T17:06:21Z", "message": "Improve documentation for new dynamic coordinator config and remove un-needed info logs in favor of debug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35fba8e198471dcc7a0c7ab177688c7ac3eb585d", "author": {"user": {"login": "capistrant", "name": "Lucas Capistrant"}}, "url": "https://github.com/apache/druid/commit/35fba8e198471dcc7a0c7ab177688c7ac3eb585d", "committedDate": "2020-02-05T17:11:46Z", "message": "address naming convention of 'deep store' vs 'deep storage' in new configs doc line"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b220b1da71ea903bac7e0d82b0d8db1f7faa2744", "author": {"user": {"login": "capistrant", "name": "Lucas Capistrant"}}, "url": "https://github.com/apache/druid/commit/b220b1da71ea903bac7e0d82b0d8db1f7faa2744", "committedDate": "2020-02-05T17:15:52Z", "message": "Fix newline at end of configuration index.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "401e7e2587afc96b47bfff0e4368e650167683b7", "author": {"user": {"login": "capistrant", "name": "Lucas Capistrant"}}, "url": "https://github.com/apache/druid/commit/401e7e2587afc96b47bfff0e4368e650167683b7", "committedDate": "2020-02-05T17:26:13Z", "message": "Last try to resolve newline issue in configuration readme"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0f23fd7856ebfe714b35325f6c9c833b0315994", "author": {"user": {"login": "capistrant", "name": "Lucas Capistrant"}}, "url": "https://github.com/apache/druid/commit/d0f23fd7856ebfe714b35325f6c9c833b0315994", "committedDate": "2020-02-05T19:34:50Z", "message": "fix spell checks from travis build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fc064f39712541b3ed3cef91d03376bfcbba8d6", "author": {"user": {"login": "capistrant", "name": "Lucas Capistrant"}}, "url": "https://github.com/apache/druid/commit/5fc064f39712541b3ed3cef91d03376bfcbba8d6", "committedDate": "2020-02-05T20:28:22Z", "message": "Fix another flagges spelling error from Travis"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MDI0MzEz", "url": "https://github.com/apache/druid/pull/9224#pullrequestreview-354024313", "createdAt": "2020-02-05T20:39:06Z", "commit": {"oid": "5fc064f39712541b3ed3cef91d03376bfcbba8d6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3772, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}