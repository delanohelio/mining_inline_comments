{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NzQyMzkw", "number": 9986, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMDoyOTo1N1rOECuL_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTo1Mzo0MFrOECv2QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjg5MzQzOnYy", "diffSide": "RIGHT", "path": "sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMDoyOTo1OFrOGfWrTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMDo0Njo0NFrOGfXL9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUzMDU3NA==", "bodyText": "FYI: You could simplify this by using NULL_STRING for the null / \"\" and avoiding the ternary.", "url": "https://github.com/apache/druid/pull/9986#discussion_r435530574", "createdAt": "2020-06-04T20:29:58Z", "author": {"login": "gianm"}, "path": "sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java", "diffHunk": "@@ -13419,6 +13420,73 @@ public void testNvlColumns() throws Exception\n     );\n   }\n \n+  @Test\n+  public void testGroupByWithLiteralInSubqueryGrouping() throws Exception\n+  {\n+    testQuery(\n+        \"SELECT \\n\"\n+        + \"   t1, t2\\n\"\n+        + \"  FROM\\n\"\n+        + \"   ( SELECT\\n\"\n+        + \"     'dummy' as t1,\\n\"\n+        + \"     CASE\\n\"\n+        + \"       WHEN \\n\"\n+        + \"         dim4 = 'b'\\n\"\n+        + \"       THEN dim4\\n\"\n+        + \"       ELSE NULL\\n\"\n+        + \"     END AS t2\\n\"\n+        + \"     FROM\\n\"\n+        + \"       numfoo\\n\"\n+        + \"     GROUP BY\\n\"\n+        + \"       dim4\\n\"\n+        + \"   )\\n\"\n+        + \" GROUP BY\\n\"\n+        + \"   t1,t2\\n\",\n+        ImmutableList.of(\n+            GroupByQuery.builder()\n+                        .setDataSource(\n+                            GroupByQuery.builder()\n+                                        .setDataSource(CalciteTests.DATASOURCE3)\n+                                        .setInterval(querySegmentSpec(Filtration.eternity()))\n+                                        .setGranularity(Granularities.ALL)\n+                                        .setDimensions(new DefaultDimensionSpec(\"dim4\", \"_d0\", ValueType.STRING))\n+                                        .setContext(QUERY_CONTEXT_DEFAULT)\n+                                        .build()\n+                        )\n+                        .setVirtualColumns(\n+                            expressionVirtualColumn(\n+                                \"v0\",\n+                                \"\\'dummy\\'\",\n+                                ValueType.STRING\n+                            ),\n+                            expressionVirtualColumn(\n+                                \"v1\",\n+                                \"case_searched((\\\"_d0\\\" == 'b'),\\\"_d0\\\",null)\",\n+                                ValueType.STRING\n+                            )\n+                        )                        .setInterval(querySegmentSpec(Filtration.eternity()))\n+                        .setDimensions(\n+                            dimensions(\n+                                new DefaultDimensionSpec(\"v0\", \"d0\", ValueType.STRING),\n+                                new DefaultDimensionSpec(\"v1\", \"d1\", ValueType.STRING)\n+                            )\n+                        )\n+                        .setGranularity(Granularities.ALL)\n+                        .setContext(QUERY_CONTEXT_DEFAULT)\n+                        .build()\n+        ),\n+        NullHandling.replaceWithDefault() ?\n+        ImmutableList.of(\n+            new Object[]{\"dummy\", \"\"},\n+            new Object[]{\"dummy\", \"b\"}\n+        ) :\n+        ImmutableList.of(\n+            new Object[]{\"dummy\", null},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "777a92230df7e5ab3890df4cefe285792f571aba"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUzODkzNA==", "bodyText": "Nice!", "url": "https://github.com/apache/druid/pull/9986#discussion_r435538934", "createdAt": "2020-06-04T20:46:44Z", "author": {"login": "maytasm"}, "path": "sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java", "diffHunk": "@@ -13419,6 +13420,73 @@ public void testNvlColumns() throws Exception\n     );\n   }\n \n+  @Test\n+  public void testGroupByWithLiteralInSubqueryGrouping() throws Exception\n+  {\n+    testQuery(\n+        \"SELECT \\n\"\n+        + \"   t1, t2\\n\"\n+        + \"  FROM\\n\"\n+        + \"   ( SELECT\\n\"\n+        + \"     'dummy' as t1,\\n\"\n+        + \"     CASE\\n\"\n+        + \"       WHEN \\n\"\n+        + \"         dim4 = 'b'\\n\"\n+        + \"       THEN dim4\\n\"\n+        + \"       ELSE NULL\\n\"\n+        + \"     END AS t2\\n\"\n+        + \"     FROM\\n\"\n+        + \"       numfoo\\n\"\n+        + \"     GROUP BY\\n\"\n+        + \"       dim4\\n\"\n+        + \"   )\\n\"\n+        + \" GROUP BY\\n\"\n+        + \"   t1,t2\\n\",\n+        ImmutableList.of(\n+            GroupByQuery.builder()\n+                        .setDataSource(\n+                            GroupByQuery.builder()\n+                                        .setDataSource(CalciteTests.DATASOURCE3)\n+                                        .setInterval(querySegmentSpec(Filtration.eternity()))\n+                                        .setGranularity(Granularities.ALL)\n+                                        .setDimensions(new DefaultDimensionSpec(\"dim4\", \"_d0\", ValueType.STRING))\n+                                        .setContext(QUERY_CONTEXT_DEFAULT)\n+                                        .build()\n+                        )\n+                        .setVirtualColumns(\n+                            expressionVirtualColumn(\n+                                \"v0\",\n+                                \"\\'dummy\\'\",\n+                                ValueType.STRING\n+                            ),\n+                            expressionVirtualColumn(\n+                                \"v1\",\n+                                \"case_searched((\\\"_d0\\\" == 'b'),\\\"_d0\\\",null)\",\n+                                ValueType.STRING\n+                            )\n+                        )                        .setInterval(querySegmentSpec(Filtration.eternity()))\n+                        .setDimensions(\n+                            dimensions(\n+                                new DefaultDimensionSpec(\"v0\", \"d0\", ValueType.STRING),\n+                                new DefaultDimensionSpec(\"v1\", \"d1\", ValueType.STRING)\n+                            )\n+                        )\n+                        .setGranularity(Granularities.ALL)\n+                        .setContext(QUERY_CONTEXT_DEFAULT)\n+                        .build()\n+        ),\n+        NullHandling.replaceWithDefault() ?\n+        ImmutableList.of(\n+            new Object[]{\"dummy\", \"\"},\n+            new Object[]{\"dummy\", \"b\"}\n+        ) :\n+        ImmutableList.of(\n+            new Object[]{\"dummy\", null},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUzMDU3NA=="}, "originalCommit": {"oid": "777a92230df7e5ab3890df4cefe285792f571aba"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjg5NjgxOnYy", "diffSide": "RIGHT", "path": "sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMDozMTowNFrOGfWtXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMDo0NzowN1rOGfXMpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUzMTEwMg==", "bodyText": "This indentation is kind of weird. I'm not sure if checkstyle will flag it, but watch out.", "url": "https://github.com/apache/druid/pull/9986#discussion_r435531102", "createdAt": "2020-06-04T20:31:04Z", "author": {"login": "gianm"}, "path": "sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java", "diffHunk": "@@ -13419,6 +13420,73 @@ public void testNvlColumns() throws Exception\n     );\n   }\n \n+  @Test\n+  public void testGroupByWithLiteralInSubqueryGrouping() throws Exception\n+  {\n+    testQuery(\n+        \"SELECT \\n\"\n+        + \"   t1, t2\\n\"\n+        + \"  FROM\\n\"\n+        + \"   ( SELECT\\n\"\n+        + \"     'dummy' as t1,\\n\"\n+        + \"     CASE\\n\"\n+        + \"       WHEN \\n\"\n+        + \"         dim4 = 'b'\\n\"\n+        + \"       THEN dim4\\n\"\n+        + \"       ELSE NULL\\n\"\n+        + \"     END AS t2\\n\"\n+        + \"     FROM\\n\"\n+        + \"       numfoo\\n\"\n+        + \"     GROUP BY\\n\"\n+        + \"       dim4\\n\"\n+        + \"   )\\n\"\n+        + \" GROUP BY\\n\"\n+        + \"   t1,t2\\n\",\n+        ImmutableList.of(\n+            GroupByQuery.builder()\n+                        .setDataSource(\n+                            GroupByQuery.builder()\n+                                        .setDataSource(CalciteTests.DATASOURCE3)\n+                                        .setInterval(querySegmentSpec(Filtration.eternity()))\n+                                        .setGranularity(Granularities.ALL)\n+                                        .setDimensions(new DefaultDimensionSpec(\"dim4\", \"_d0\", ValueType.STRING))\n+                                        .setContext(QUERY_CONTEXT_DEFAULT)\n+                                        .build()\n+                        )\n+                        .setVirtualColumns(\n+                            expressionVirtualColumn(\n+                                \"v0\",\n+                                \"\\'dummy\\'\",\n+                                ValueType.STRING\n+                            ),\n+                            expressionVirtualColumn(\n+                                \"v1\",\n+                                \"case_searched((\\\"_d0\\\" == 'b'),\\\"_d0\\\",null)\",\n+                                ValueType.STRING\n+                            )\n+                        )                        .setInterval(querySegmentSpec(Filtration.eternity()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3e15fd2c021bbe3fa0869c61b80cebad0338bae"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUzOTEwOQ==", "bodyText": "Oops. Fixed.", "url": "https://github.com/apache/druid/pull/9986#discussion_r435539109", "createdAt": "2020-06-04T20:47:07Z", "author": {"login": "maytasm"}, "path": "sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java", "diffHunk": "@@ -13419,6 +13420,73 @@ public void testNvlColumns() throws Exception\n     );\n   }\n \n+  @Test\n+  public void testGroupByWithLiteralInSubqueryGrouping() throws Exception\n+  {\n+    testQuery(\n+        \"SELECT \\n\"\n+        + \"   t1, t2\\n\"\n+        + \"  FROM\\n\"\n+        + \"   ( SELECT\\n\"\n+        + \"     'dummy' as t1,\\n\"\n+        + \"     CASE\\n\"\n+        + \"       WHEN \\n\"\n+        + \"         dim4 = 'b'\\n\"\n+        + \"       THEN dim4\\n\"\n+        + \"       ELSE NULL\\n\"\n+        + \"     END AS t2\\n\"\n+        + \"     FROM\\n\"\n+        + \"       numfoo\\n\"\n+        + \"     GROUP BY\\n\"\n+        + \"       dim4\\n\"\n+        + \"   )\\n\"\n+        + \" GROUP BY\\n\"\n+        + \"   t1,t2\\n\",\n+        ImmutableList.of(\n+            GroupByQuery.builder()\n+                        .setDataSource(\n+                            GroupByQuery.builder()\n+                                        .setDataSource(CalciteTests.DATASOURCE3)\n+                                        .setInterval(querySegmentSpec(Filtration.eternity()))\n+                                        .setGranularity(Granularities.ALL)\n+                                        .setDimensions(new DefaultDimensionSpec(\"dim4\", \"_d0\", ValueType.STRING))\n+                                        .setContext(QUERY_CONTEXT_DEFAULT)\n+                                        .build()\n+                        )\n+                        .setVirtualColumns(\n+                            expressionVirtualColumn(\n+                                \"v0\",\n+                                \"\\'dummy\\'\",\n+                                ValueType.STRING\n+                            ),\n+                            expressionVirtualColumn(\n+                                \"v1\",\n+                                \"case_searched((\\\"_d0\\\" == 'b'),\\\"_d0\\\",null)\",\n+                                ValueType.STRING\n+                            )\n+                        )                        .setInterval(querySegmentSpec(Filtration.eternity()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUzMTEwMg=="}, "originalCommit": {"oid": "a3e15fd2c021bbe3fa0869c61b80cebad0338bae"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjkxMzU0OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/org/apache/druid/sql/calcite/rel/DruidQuery.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMDozNjoyMVrOGfW33g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMDo0NToxOVrOGfXJSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUzMzc5MA==", "bodyText": "I think there's no need to do this check, because it isn't needed to build the Subtotals object, and computeDimensions will handle the case where we're grouping on something where dimensions are based on expressions that are not translatable.", "url": "https://github.com/apache/druid/pull/9986#discussion_r435533790", "createdAt": "2020-06-04T20:36:21Z", "author": {"login": "gianm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/rel/DruidQuery.java", "diffHunk": "@@ -424,16 +425,39 @@ private static Grouping computeGrouping(\n \n   /**\n    * Builds a {@link Subtotals} object based on {@link Aggregate#getGroupSets()}.\n+   *\n+   * @throws CannotBuildQueryException if subtotals cannot be computed\n    */\n   private static Subtotals computeSubtotals(\n       final PartialDruidQuery partialQuery,\n+      final PlannerContext plannerContext,\n       final RowSignature rowSignature\n   )\n   {\n     final Aggregate aggregate = partialQuery.getAggregate();\n \n     // dimBitMapping maps from input field position to group set position (dimension number).\n-    final int[] dimBitMapping = new int[rowSignature.size()];\n+    final int[] dimBitMapping;\n+    if (partialQuery.getSelectProject() != null) {\n+      int fieldCount = 0;\n+      for (final RexNode rexNode : partialQuery.getSelectProject().getChildExps()) {\n+        final DruidExpression expression = Expressions.toDruidExpression(\n+            plannerContext,\n+            rowSignature,\n+            rexNode\n+        );\n+\n+        if (expression == null) {\n+          throw new CannotBuildQueryException(partialQuery.getSelectProject(), rexNode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3e15fd2c021bbe3fa0869c61b80cebad0338bae"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUzODI0OA==", "bodyText": "Done", "url": "https://github.com/apache/druid/pull/9986#discussion_r435538248", "createdAt": "2020-06-04T20:45:19Z", "author": {"login": "maytasm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/rel/DruidQuery.java", "diffHunk": "@@ -424,16 +425,39 @@ private static Grouping computeGrouping(\n \n   /**\n    * Builds a {@link Subtotals} object based on {@link Aggregate#getGroupSets()}.\n+   *\n+   * @throws CannotBuildQueryException if subtotals cannot be computed\n    */\n   private static Subtotals computeSubtotals(\n       final PartialDruidQuery partialQuery,\n+      final PlannerContext plannerContext,\n       final RowSignature rowSignature\n   )\n   {\n     final Aggregate aggregate = partialQuery.getAggregate();\n \n     // dimBitMapping maps from input field position to group set position (dimension number).\n-    final int[] dimBitMapping = new int[rowSignature.size()];\n+    final int[] dimBitMapping;\n+    if (partialQuery.getSelectProject() != null) {\n+      int fieldCount = 0;\n+      for (final RexNode rexNode : partialQuery.getSelectProject().getChildExps()) {\n+        final DruidExpression expression = Expressions.toDruidExpression(\n+            plannerContext,\n+            rowSignature,\n+            rexNode\n+        );\n+\n+        if (expression == null) {\n+          throw new CannotBuildQueryException(partialQuery.getSelectProject(), rexNode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUzMzc5MA=="}, "originalCommit": {"oid": "a3e15fd2c021bbe3fa0869c61b80cebad0338bae"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzE2NTQ1OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/org/apache/druid/sql/calcite/rel/DruidQuery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTo1Mzo0MFrOGfZVUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjowMzo1N1rOGfZkyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3NDA5OA==", "bodyText": "stale javadoc. remove?", "url": "https://github.com/apache/druid/pull/9986#discussion_r435574098", "createdAt": "2020-06-04T21:53:40Z", "author": {"login": "suneet-s"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/rel/DruidQuery.java", "diffHunk": "@@ -424,6 +424,8 @@ private static Grouping computeGrouping(\n \n   /**\n    * Builds a {@link Subtotals} object based on {@link Aggregate#getGroupSets()}.\n+   *\n+   * @throws CannotBuildQueryException if subtotals cannot be computed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19dd058230dd222d2f236ccd9e3fe386f6121b6a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3ODA1Ng==", "bodyText": "Done", "url": "https://github.com/apache/druid/pull/9986#discussion_r435578056", "createdAt": "2020-06-04T22:03:57Z", "author": {"login": "maytasm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/rel/DruidQuery.java", "diffHunk": "@@ -424,6 +424,8 @@ private static Grouping computeGrouping(\n \n   /**\n    * Builds a {@link Subtotals} object based on {@link Aggregate#getGroupSets()}.\n+   *\n+   * @throws CannotBuildQueryException if subtotals cannot be computed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3NDA5OA=="}, "originalCommit": {"oid": "19dd058230dd222d2f236ccd9e3fe386f6121b6a"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2292, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}