{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4NzE2MTk5", "number": 9287, "title": "Add getRightEquiConditionKeys to JoinConditionAnalysis", "bodyText": "This change allows other implementations of JoinableFactory to ask the analysis\nfor the right key columns instead of having to calculate it themselves.\nThis PR has:\n\n been self-reviewed.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-01-29T19:02:29Z", "url": "https://github.com/apache/druid/pull/9287", "merged": true, "mergeCommit": {"oid": "6b44d4aa804997a47545b70ae44e83d3882bf819"}, "closed": true, "closedAt": "2020-01-30T06:31:30Z", "author": {"login": "suneet-s"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_Ksl_gH2gAyMzY4NzE2MTk5OjdmOTg3MjBiZjE4MmEzNGQwNWNiZGM3ODFiZjE4NGU0YjUzNDUyNzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_Ulb8gFqTM1MDYwMzY5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7f98720bf182a34d05cbdc781bf184e4b5345270", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/7f98720bf182a34d05cbdc781bf184e4b5345270", "committedDate": "2020-01-29T18:59:55Z", "message": "Add getRightColumns to JoinConditionAnalysis\n\nThis change other implementations of JoinableFactory to ask the analysis\nfor the right key columns instead of having to calculate it themselves."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzgyNTIy", "url": "https://github.com/apache/druid/pull/9287#pullrequestreview-350382522", "createdAt": "2020-01-29T19:54:02Z", "commit": {"oid": "7f98720bf182a34d05cbdc781bf184e4b5345270"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo1NDowM1rOFjVkbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo1NjozMFrOFjVo9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5Nzg3MA==", "bodyText": "I'm not sure if it's clear that this method only applies to the equi-conditions. The javadoc explains it but the method name might be misleading? What do you think?\nI don't know if I have a good solution, btw. getRightKeyColumnsForEquiConditions is clear but quite a mouthful. Maybe getRightEquiConditionKeys.", "url": "https://github.com/apache/druid/pull/9287#discussion_r372597870", "createdAt": "2020-01-29T19:54:03Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/join/JoinConditionAnalysis.java", "diffHunk": "@@ -176,6 +179,14 @@ public boolean canHashJoin()\n     return canHashJoin;\n   }\n \n+  /**\n+   * Returns the distinct column keys from the RHS required to evaluate the equi conditions.\n+   */\n+  public List<String> getRightKeyColumns()\n+  {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f98720bf182a34d05cbdc781bf184e4b5345270"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5Nzk4MQ==", "bodyText": "Is this better than Assert.assertEquals?", "url": "https://github.com/apache/druid/pull/9287#discussion_r372597981", "createdAt": "2020-01-29T19:54:18Z", "author": {"login": "gianm"}, "path": "processing/src/test/java/org/apache/druid/segment/join/JoinConditionAnalysisTest.java", "diffHunk": "@@ -60,6 +61,7 @@ public void test_forExpression_simple()\n         ImmutableList.of(),\n         exprsToStrings(analysis.getNonEquiConditions())\n     );\n+    Assert.assertThat(analysis.getRightKeyColumns(), CoreMatchers.is(ImmutableList.of(\"y\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f98720bf182a34d05cbdc781bf184e4b5345270"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5ODU0OA==", "bodyText": "The comment above is incorrect now. Actually, it was incorrect before too, since some of these fields are based on equiConditions as well.", "url": "https://github.com/apache/druid/pull/9287#discussion_r372598548", "createdAt": "2020-01-29T19:55:30Z", "author": {"login": "gianm"}, "path": "processing/src/test/java/org/apache/druid/segment/join/JoinConditionAnalysisTest.java", "diffHunk": "@@ -271,7 +283,7 @@ public void test_equals()\n                           // These fields are tightly coupled with originalExpression\n                           \"equiConditions\", \"nonEquiConditions\",\n                           // These fields are calculated from nonEquiConditions\n-                          \"isAlwaysTrue\", \"isAlwaysFalse\", \"canHashJoin\")\n+                          \"isAlwaysTrue\", \"isAlwaysFalse\", \"canHashJoin\", \"rightKeyColumns\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f98720bf182a34d05cbdc781bf184e4b5345270"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5OTAzMA==", "bodyText": "You could probably do a similar simplification in LookupJoinMatcher (there's a part that checks that all the equikeys are the key column).", "url": "https://github.com/apache/druid/pull/9287#discussion_r372599030", "createdAt": "2020-01-29T19:56:30Z", "author": {"login": "gianm"}, "path": "server/src/main/java/org/apache/druid/segment/join/InlineJoinableFactory.java", "diffHunk": "@@ -39,8 +38,7 @@\n   {\n     if (condition.canHashJoin() && dataSource instanceof InlineDataSource) {\n       final InlineDataSource inlineDataSource = (InlineDataSource) dataSource;\n-      final List<String> rightKeyColumns =\n-          condition.getEquiConditions().stream().map(Equality::getRightColumn).distinct().collect(Collectors.toList());\n+      final List<String> rightKeyColumns = condition.getRightKeyColumns();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f98720bf182a34d05cbdc781bf184e4b5345270"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b54942b4ca2a61755f6872bd4f3111da755925d", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/5b54942b4ca2a61755f6872bd4f3111da755925d", "committedDate": "2020-01-29T22:01:59Z", "message": "Address some review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e70dca1b9796189273a21c4a8f357b1fb0ff751a", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/e70dca1b9796189273a21c4a8f357b1fb0ff751a", "committedDate": "2020-01-30T00:14:57Z", "message": "more code review stuff"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNjAzNjk5", "url": "https://github.com/apache/druid/pull/9287#pullrequestreview-350603699", "createdAt": "2020-01-30T06:28:46Z", "commit": {"oid": "e70dca1b9796189273a21c4a8f357b1fb0ff751a"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNjoyODo0NlrOFjgiWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNjoyODo1N1rOFjgilQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3NzU2Mw==", "bodyText": "These are backwards. (I think putting actual before expected is more natural, but JUnit disagrees and who am I to judge?)", "url": "https://github.com/apache/druid/pull/9287#discussion_r372777563", "createdAt": "2020-01-30T06:28:46Z", "author": {"login": "gianm"}, "path": "processing/src/test/java/org/apache/druid/segment/join/JoinConditionAnalysisTest.java", "diffHunk": "@@ -220,6 +229,7 @@ public void test_forExpression_onlyRight()\n         ImmutableList.of(),\n         exprsToStrings(analysis.getNonEquiConditions())\n     );\n+    Assert.assertEquals(analysis.getRightEquiConditionKeys(), ImmutableSet.of(\"x\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e70dca1b9796189273a21c4a8f357b1fb0ff751a"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3NzYyMQ==", "bodyText": "Typo (other other)", "url": "https://github.com/apache/druid/pull/9287#discussion_r372777621", "createdAt": "2020-01-30T06:28:57Z", "author": {"login": "gianm"}, "path": "processing/src/test/java/org/apache/druid/segment/join/JoinConditionAnalysisTest.java", "diffHunk": "@@ -270,8 +282,8 @@ public void test_equals()\n                   .withIgnoredFields(\n                           // These fields are tightly coupled with originalExpression\n                           \"equiConditions\", \"nonEquiConditions\",\n-                          // These fields are calculated from nonEquiConditions\n-                          \"isAlwaysTrue\", \"isAlwaysFalse\", \"canHashJoin\")\n+                          // These fields are calculated from other other fields in the class", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e70dca1b9796189273a21c4a8f357b1fb0ff751a"}, "originalPosition": 102}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3050, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}