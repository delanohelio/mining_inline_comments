{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxMTU0NDM4", "number": 10091, "title": "Make 0.19 brokers compatible with 0.18 router", "bodyText": "Description\nIn 0.19, Brokers gained the ability to serve segments. To support this change,\na BROKER ServerType was added to druid.server.coordination.\nDruid nodes prior to this change do not know of this new server type and so\nthey would fail to deserialize this node's announcement.\nThis change makes it so that the broker only announces itself if the segment\ncache is configured on the broker. It is expected that a Druid admin will only\nconfigure the segment cache on the broker once the cluster has been upgraded\nto a version that supports a broker using the segment cache.\n\nThis PR has:\n\n been self-reviewed.\n\n using the concurrency checklist (Remove this item if the PR doesn't have any relation to concurrency.)\n\n\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths, ensuring the threshold for code coverage is met.\n added integration tests.\n been tested in a test Druid cluster.\n\n\nKey changed/added classes in this PR\n\nServerRunnable\nStorageNodeModule", "createdAt": "2020-06-29T01:58:47Z", "url": "https://github.com/apache/druid/pull/10091", "merged": true, "mergeCommit": {"oid": "b91a16943b03abbaea6215e9517f8bf62a442c71"}, "closed": true, "closedAt": "2020-06-30T03:57:33Z", "author": {"login": "suneet-s"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcv3B5BAH2gAyNDQxMTU0NDM4OmY1M2VkYjYxZTBkOGI3NDA4Zjc5ODQ3MWQ3ZGQyZWRkNTBjZTg5OTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwNKPgAFqTQzOTY0NTg4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f53edb61e0d8b7408f798471d7dd2edd50ce8994", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/f53edb61e0d8b7408f798471d7dd2edd50ce8994", "committedDate": "2020-06-29T01:47:22Z", "message": "Make brokers backwards compatible\n\nIn 0.19, Brokers gained the ability to serve segments. To support this change,\na `BROKER` ServerType was added to `druid.server.coordination`.\n\nDruid nodes prior to this change do not know of this new server type and so\nthey would fail to deserialize this node's announcement.\n\nThis change makes it so that the broker only announces itself if the segment\ncache is configured on the broker. It is expected that a Druid admin will only\nconfigure the segment cache on the broker once the cluster has been upgraded\nto a version that supports a broker using the segment cache."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a21f20bd2375538562f15b1108bdf46393623767", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/a21f20bd2375538562f15b1108bdf46393623767", "committedDate": "2020-06-29T05:03:29Z", "message": "make code nicer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "640c4867be1dddc3aa6f93c0b1a03ca77a176acb", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/640c4867be1dddc3aa6f93c0b1a03ca77a176acb", "committedDate": "2020-06-29T17:02:16Z", "message": "Add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aeec0c2ac2b07c1b9262e32201913c7194167271", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/aeec0c2ac2b07c1b9262e32201913c7194167271", "committedDate": "2020-06-29T17:46:34Z", "message": "Ignore icode coverage for nitialization classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8962df87adac39ff2ac67a8eb7337994b3c72dd2", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/8962df87adac39ff2ac67a8eb7337994b3c72dd2", "committedDate": "2020-06-29T18:04:03Z", "message": "Revert \"Ignore icode coverage for nitialization classes\"\n\nThis reverts commit aeec0c2ac2b07c1b9262e32201913c7194167271."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NTYxNzUz", "url": "https://github.com/apache/druid/pull/10091#pullrequestreview-439561753", "createdAt": "2020-06-29T23:08:42Z", "commit": {"oid": "8962df87adac39ff2ac67a8eb7337994b3c72dd2"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMzowODo0MlrOGqlmtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMzoyNTowN1rOGql76Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMwOTQ5NQ==", "bodyText": "Is it possible to make the private constructor delegate to this one?", "url": "https://github.com/apache/druid/pull/10091#discussion_r447309495", "createdAt": "2020-06-29T23:08:42Z", "author": {"login": "ccaominh"}, "path": "services/src/main/java/org/apache/druid/cli/ServerRunnable.java", "diffHunk": "@@ -194,15 +202,40 @@ private DiscoverySideEffectsProvider(\n       this.useLegacyAnnouncer = useLegacyAnnouncer;\n     }\n \n+    @VisibleForTesting\n+    DiscoverySideEffectsProvider(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8962df87adac39ff2ac67a8eb7337994b3c72dd2"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMxNDkyMQ==", "bodyText": "Should the code that asserts isAllServicesDiscoverable be moved from setUp to here? When I was reading just this test, it was not clear to me how it was checking that the announcements were getting added.", "url": "https://github.com/apache/druid/pull/10091#discussion_r447314921", "createdAt": "2020-06-29T23:25:07Z", "author": {"login": "ccaominh"}, "path": "services/src/test/java/org/apache/druid/cli/DiscoverySideEffectsProviderTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.cli;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Injector;\n+import org.apache.druid.curator.discovery.ServiceAnnouncer;\n+import org.apache.druid.discovery.DiscoveryDruidNode;\n+import org.apache.druid.discovery.DruidNodeAnnouncer;\n+import org.apache.druid.discovery.DruidService;\n+import org.apache.druid.discovery.NodeRole;\n+import org.apache.druid.java.util.common.lifecycle.Lifecycle;\n+import org.apache.druid.server.DruidNode;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class DiscoverySideEffectsProviderTest\n+{\n+  private static final boolean USE_LEGACY_ANNOUNCER = true;\n+\n+  private NodeRole nodeRole;\n+  @Mock\n+  private DruidNode druidNode;\n+  @Mock\n+  private DruidNodeAnnouncer announcer;\n+  @Mock\n+  private ServiceAnnouncer legacyAnnouncer;\n+  @Mock\n+  private Lifecycle lifecycle;\n+  @Mock\n+  private Injector injector;\n+  private List<Lifecycle.Handler> lifecycleHandlers;\n+\n+  private ServerRunnable.DiscoverySideEffectsProvider target;\n+\n+  @Before\n+  public void setUp()\n+  {\n+    nodeRole = NodeRole.HISTORICAL;\n+    lifecycleHandlers = new ArrayList<>();\n+    Mockito.when(injector.getInstance(DiscoverableDruidService.class)).thenReturn(new DiscoverableDruidService());\n+    Mockito.when(injector.getInstance(UnDiscoverableDruidService.class)).thenReturn(new UnDiscoverableDruidService());\n+    Mockito.doAnswer((invocation) -> {\n+      DiscoveryDruidNode discoveryDruidNode = invocation.getArgument(0);\n+      boolean isAllServicesDiscoverable =\n+          discoveryDruidNode.getServices().values().stream().allMatch(DruidService::isDiscoverable);\n+      Assert.assertTrue(isAllServicesDiscoverable);\n+      return null;\n+    }).when(announcer).announce(ArgumentMatchers.any(DiscoveryDruidNode.class));\n+    Mockito.doAnswer((invocation) -> lifecycleHandlers.add(invocation.getArgument(0)))\n+           .when(lifecycle).addHandler(\n+        ArgumentMatchers.any(Lifecycle.Handler.class),\n+        ArgumentMatchers.eq(Lifecycle.Stage.ANNOUNCEMENTS)\n+      );\n+    target = new ServerRunnable.DiscoverySideEffectsProvider(\n+        nodeRole,\n+        ImmutableList.of(DiscoverableDruidService.class, UnDiscoverableDruidService.class),\n+        USE_LEGACY_ANNOUNCER,\n+        druidNode,\n+        announcer,\n+        legacyAnnouncer,\n+        lifecycle,\n+        injector\n+    );\n+  }\n+\n+  @Test\n+  public void testGetShouldAddAnnouncementsForDiscoverableServices() throws Exception\n+  {\n+    ServerRunnable.DiscoverySideEffectsProvider.Child child = target.get();\n+    Assert.assertNotNull(child);\n+    Assert.assertEquals(1, lifecycleHandlers.size());\n+    lifecycleHandlers.get(0).start();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8962df87adac39ff2ac67a8eb7337994b3c72dd2"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NTc5NDA3", "url": "https://github.com/apache/druid/pull/10091#pullrequestreview-439579407", "createdAt": "2020-06-29T23:59:18Z", "commit": {"oid": "8962df87adac39ff2ac67a8eb7337994b3c72dd2"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMzo1OToxOFrOGqmn7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMDowMzo0N1rOGqmuCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNjE4OQ==", "bodyText": "nit: this log should probably include the implications, such as it will not be assignable for segment placement.", "url": "https://github.com/apache/druid/pull/10091#discussion_r447326189", "createdAt": "2020-06-29T23:59:18Z", "author": {"login": "clintropolis"}, "path": "server/src/main/java/org/apache/druid/guice/StorageNodeModule.java", "diffHunk": "@@ -74,17 +82,36 @@ public DruidServerMetadata getMetadata(\n \n   @Provides\n   @LazySingleton\n-  public DataNodeService getDataNodeService(@Nullable ServerTypeConfig serverTypeConfig, DruidServerConfig config)\n+  public DataNodeService getDataNodeService(\n+      @Nullable ServerTypeConfig serverTypeConfig,\n+      DruidServerConfig config,\n+      @Named(IS_SEGMENT_CACHE_CONFIGURED) Boolean isSegmentCacheConfigured\n+  )\n   {\n     if (serverTypeConfig == null) {\n-      throw new ProvisionException(\"Must override the binding for ServerTypeConfig if you want a DruidServerMetadata.\");\n+      throw new ProvisionException(\"Must override the binding for ServerTypeConfig if you want a DataNodeService.\");\n+    }\n+    if (!isSegmentCacheConfigured) {\n+      log.info(\"Segment cache not configured on ServerType [%s]\", serverTypeConfig.getServerType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8962df87adac39ff2ac67a8eb7337994b3c72dd2"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNzQ2NA==", "bodyText": "Since this is a release blocker for 0.19, I don't think refactoring is necessary. FWIW I don't really like AssistedInject, it's a bit too magical for my taste.", "url": "https://github.com/apache/druid/pull/10091#discussion_r447327464", "createdAt": "2020-06-30T00:02:41Z", "author": {"login": "clintropolis"}, "path": "services/src/main/java/org/apache/druid/cli/ServerRunnable.java", "diffHunk": "@@ -194,15 +202,40 @@ private DiscoverySideEffectsProvider(\n       this.useLegacyAnnouncer = useLegacyAnnouncer;\n     }\n \n+    @VisibleForTesting\n+    DiscoverySideEffectsProvider(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMwOTQ5NQ=="}, "originalCommit": {"oid": "8962df87adac39ff2ac67a8eb7337994b3c72dd2"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyNzc1NQ==", "bodyText": "nit: this log should also maybe be more informative that the service is being skipped and will not be listed as a service the node provides i think", "url": "https://github.com/apache/druid/pull/10091#discussion_r447327755", "createdAt": "2020-06-30T00:03:47Z", "author": {"login": "clintropolis"}, "path": "services/src/main/java/org/apache/druid/cli/ServerRunnable.java", "diffHunk": "@@ -194,15 +202,40 @@ private DiscoverySideEffectsProvider(\n       this.useLegacyAnnouncer = useLegacyAnnouncer;\n     }\n \n+    @VisibleForTesting\n+    DiscoverySideEffectsProvider(\n+        final NodeRole nodeRole,\n+        final List<Class<? extends DruidService>> serviceClasses,\n+        final boolean useLegacyAnnouncer,\n+        final DruidNode druidNode,\n+        final DruidNodeAnnouncer announcer,\n+        final ServiceAnnouncer legacyAnnouncer,\n+        final Lifecycle lifecycle,\n+        final Injector injector\n+    )\n+    {\n+      this.nodeRole = nodeRole;\n+      this.serviceClasses = serviceClasses;\n+      this.useLegacyAnnouncer = useLegacyAnnouncer;\n+      this.druidNode = druidNode;\n+      this.announcer = announcer;\n+      this.legacyAnnouncer = legacyAnnouncer;\n+      this.lifecycle = lifecycle;\n+      this.injector = injector;\n+    }\n+\n     @Override\n     public Child get()\n     {\n       ImmutableMap.Builder<String, DruidService> builder = new ImmutableMap.Builder<>();\n       for (Class<? extends DruidService> clazz : serviceClasses) {\n         DruidService service = injector.getInstance(clazz);\n-        builder.put(service.getName(), service);\n+        if (service.isDiscoverable()) {\n+          builder.put(service.getName(), service);\n+        } else {\n+          log.info(\"Service[%s] is not discoverable\", service.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8962df87adac39ff2ac67a8eb7337994b3c72dd2"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec5efee455ca53af6727984c35b0d5420daa34a7", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/ec5efee455ca53af6727984c35b0d5420daa34a7", "committedDate": "2020-06-30T00:33:03Z", "message": "Merge remote-tracking branch 'upstream/master' into rolling-upgrade"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c22c972cd7ba6a9e0655a14055447d1bf3e2aed6", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/c22c972cd7ba6a9e0655a14055447d1bf3e2aed6", "committedDate": "2020-06-30T01:00:38Z", "message": "code review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NjAzMzQw", "url": "https://github.com/apache/druid/pull/10091#pullrequestreview-439603340", "createdAt": "2020-06-30T01:16:05Z", "commit": {"oid": "c22c972cd7ba6a9e0655a14055447d1bf3e2aed6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NjQ1ODgw", "url": "https://github.com/apache/druid/pull/10091#pullrequestreview-439645880", "createdAt": "2020-06-30T03:34:24Z", "commit": {"oid": "c22c972cd7ba6a9e0655a14055447d1bf3e2aed6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2190, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}