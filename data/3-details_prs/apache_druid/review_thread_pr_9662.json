{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNzQyMDQz", "number": 9662, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOToyNzo0N1rODw1rVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzowODoxN1rODw64xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTM3Njg0OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/GroupByQueryEngineV2.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOToyNzo0N1rOGEDppQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOToyNzo0N1rOGEDppQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNzMwMQ==", "bodyText": "IMO it's more elegant if this method doesn't exist, and the caller does the allMatch.", "url": "https://github.com/apache/druid/pull/9662#discussion_r406907301", "createdAt": "2020-04-10T19:27:47Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/GroupByQueryEngineV2.java", "diffHunk": "@@ -707,6 +719,33 @@ protected void putToRow(ByteBuffer key, ResultRow resultRow)\n         );\n       }\n     }\n+\n+    /**\n+     * check if a collection of columns will operate correctly with {@link LimitedBufferHashGrouper} for query limit\n+     * pushdown\n+     */\n+    private boolean canPushdownLimit(Stream<String> columnNames)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa42465f3b63692ffe2208f89e4fca39df03bbf0"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTM4MDk0OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/GroupByQueryEngineV2.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOToyOToxNlrOGEDsHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOToyOToxNlrOGEDsHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNzkzMw==", "bodyText": "canDoLimitPushDown would be a better name for two reasons:\n\nThere's other stuff that can be pushed down, in general, other than limits.\nSpelling of PushDown is more consistent with the methods on GroupByQuery itself.", "url": "https://github.com/apache/druid/pull/9662#discussion_r406907933", "createdAt": "2020-04-10T19:29:16Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/GroupByQueryEngineV2.java", "diffHunk": "@@ -555,7 +557,17 @@ public HashAggregateIterator(\n       final DefaultLimitSpec limitSpec = query.isApplyLimitPushDown() &&\n                                          querySpecificConfig.isApplyLimitPushDownToSegment() ?\n                                          (DefaultLimitSpec) query.getLimitSpec() : null;\n+\n+\n+      boolean canDoPushdown = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa42465f3b63692ffe2208f89e4fca39df03bbf0"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTQwMDY2OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/DimensionHandlerUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTozODoyMlrOGED4WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTozODoyMlrOGED4WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMTA2NQ==", "bodyText": "This doesn't seem right. The only place using DEFAULT_STRING_CAPABILITIES is getEffectiveCapabilities in this same file. And looking at the cases in that method, each one seems like it should behave a bit differently. So consider deleting this constant and having the getEffectiveCapabilities should be generating various capabilities objects.", "url": "https://github.com/apache/druid/pull/9662#discussion_r406911065", "createdAt": "2020-04-10T19:38:22Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/DimensionHandlerUtils.java", "diffHunk": "@@ -61,6 +61,8 @@ private DimensionHandlerUtils()\n   public static final ColumnCapabilities DEFAULT_STRING_CAPABILITIES =\n       new ColumnCapabilitiesImpl().setType(ValueType.STRING)\n                                   .setDictionaryEncoded(true)\n+                                  .setDictionaryValuesUnique(true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa42465f3b63692ffe2208f89e4fca39df03bbf0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTQwMjQxOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilities.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTozOTowNFrOGED5Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTozOTowNFrOGED5Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMTMyNw==", "bodyText": "nit: IMO Capable is a nicer name than IsCapable.", "url": "https://github.com/apache/druid/pull/9662#discussion_r406911327", "createdAt": "2020-04-10T19:39:04Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilities.java", "diffHunk": "@@ -26,6 +26,8 @@\n   ValueType getType();\n \n   boolean isDictionaryEncoded();\n+  IsCapable areDictionaryValuesSorted();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa42465f3b63692ffe2208f89e4fca39df03bbf0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTQwOTM1OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/join/table/IndexedTableColumnSelectorFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0MjoyOFrOGED9ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo0MjoyOFrOGED9ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMjQxOQ==", "bodyText": "The dictionary value is just the row number. They aren't sorted.", "url": "https://github.com/apache/druid/pull/9662#discussion_r406912419", "createdAt": "2020-04-10T19:42:28Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/join/table/IndexedTableColumnSelectorFactory.java", "diffHunk": "@@ -56,6 +56,9 @@ static ColumnCapabilities columnCapabilities(final IndexedTable table, final Str\n         capabilities.setDictionaryEncoded(true);\n       }\n \n+      capabilities.setDictionaryValuesSorted(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa42465f3b63692ffe2208f89e4fca39df03bbf0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIyNjg3OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/GroupByQueryEngineV2.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzowMzoyOFrOGELBiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzowMzoyOFrOGELBiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyODEwNA==", "bodyText": "Would be good to have javadocs here.", "url": "https://github.com/apache/druid/pull/9662#discussion_r407028104", "createdAt": "2020-04-11T07:03:28Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/GroupByQueryEngineV2.java", "diffHunk": "@@ -331,6 +333,42 @@ public static boolean isAllSingleValueDims(\n             });\n   }\n \n+  public static void convertRowTypesToOutputTypes(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85863a27a829c9619a65119ff86129d62559b9e6"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIyNzMwOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/GroupByQueryEngineV2.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzowMzo1NlrOGELBuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzowMzo1NlrOGELBuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyODE1Mw==", "bodyText": "Would be good for these comments to be capitalized properly and have sentence-ending punctuation.", "url": "https://github.com/apache/druid/pull/9662#discussion_r407028153", "createdAt": "2020-04-11T07:03:56Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/GroupByQueryEngineV2.java", "diffHunk": "@@ -331,6 +333,42 @@ public static boolean isAllSingleValueDims(\n             });\n   }\n \n+  public static void convertRowTypesToOutputTypes(\n+      final List<DimensionSpec> dimensionSpecs,\n+      final ResultRow resultRow,\n+      final int resultRowDimensionStart\n+  )\n+  {\n+    for (int i = 0; i < dimensionSpecs.size(); i++) {\n+      DimensionSpec dimSpec = dimensionSpecs.get(i);\n+      final int resultRowIndex = resultRowDimensionStart + i;\n+      final ValueType outputType = dimSpec.getOutputType();\n+\n+      resultRow.set(\n+          resultRowIndex,\n+          DimensionHandlerUtils.convertObjectToType(resultRow.get(resultRowIndex), outputType)\n+      );\n+    }\n+  }\n+\n+  /**\n+   * check if a column will operate correctly with {@link LimitedBufferHashGrouper} for query limit pushdown", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85863a27a829c9619a65119ff86129d62559b9e6"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIyODYwOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/GroupByQueryEngineV2.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzowNTozNlrOGELCUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzowNTozNlrOGELCUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyODMwNQ==", "bodyText": "This comment isn't adding much, it's just repeating the couple of lines below it in English. I'd either delete it, or replace it with a comment that adds information by explaining why this fact is the case.", "url": "https://github.com/apache/druid/pull/9662#discussion_r407028305", "createdAt": "2020-04-11T07:05:36Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/GroupByQueryEngineV2.java", "diffHunk": "@@ -331,6 +333,42 @@ public static boolean isAllSingleValueDims(\n             });\n   }\n \n+  public static void convertRowTypesToOutputTypes(\n+      final List<DimensionSpec> dimensionSpecs,\n+      final ResultRow resultRow,\n+      final int resultRowDimensionStart\n+  )\n+  {\n+    for (int i = 0; i < dimensionSpecs.size(); i++) {\n+      DimensionSpec dimSpec = dimensionSpecs.get(i);\n+      final int resultRowIndex = resultRowDimensionStart + i;\n+      final ValueType outputType = dimSpec.getOutputType();\n+\n+      resultRow.set(\n+          resultRowIndex,\n+          DimensionHandlerUtils.convertObjectToType(resultRow.get(resultRowIndex), outputType)\n+      );\n+    }\n+  }\n+\n+  /**\n+   * check if a column will operate correctly with {@link LimitedBufferHashGrouper} for query limit pushdown\n+   */\n+  public static boolean canPushDownLimit(ColumnSelectorFactory columnSelectorFactory, String columnName)\n+  {\n+    ColumnCapabilities capabilities = columnSelectorFactory.getColumnCapabilities(columnName);\n+    if (capabilities != null) {\n+      // strings can be pushed down if dictionaries are sorted and unique per id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85863a27a829c9619a65119ff86129d62559b9e6"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjIzMDQ2OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/column/StringGroupByColumnSelectorStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzowODoxN1rOGELDKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzowODoxN1rOGELDKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAyODUyMQ==", "bodyText": "Bitmap indexes aren't required here. I don't think it hurts too much to have in practice this check here, since in the primary case where pushdown matters (direct access to a column in a regular segment) bitmap indexes will be there. But it isn't necessary.", "url": "https://github.com/apache/druid/pull/9662#discussion_r407028521", "createdAt": "2020-04-11T07:08:17Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/groupby/epinephelinae/column/StringGroupByColumnSelectorStrategy.java", "diffHunk": "@@ -148,7 +153,12 @@ private void initializeGroupingKeyV2Dimension(\n   @Override\n   public Grouper.BufferComparator bufferComparator(int keyBufferPosition, @Nullable StringComparator stringComparator)\n   {\n-    if (stringComparator == null || StringComparators.LEXICOGRAPHIC.equals(stringComparator)) {\n+    final boolean canCompareInts =\n+        capabilities != null &&\n+        capabilities.hasBitmapIndexes() &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85863a27a829c9619a65119ff86129d62559b9e6"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2530, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}