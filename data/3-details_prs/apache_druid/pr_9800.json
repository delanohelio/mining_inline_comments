{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExMjE1NDg0", "number": 9800, "title": "Avoid sorting values in InDimFilter if possible", "bodyText": "Description\nThe values in InDimFilter can be sometimes huge especially with query inlining. In that case, the constructor of InDimFilter can take a long time to build a TreeSet for storing filter values. AFAIT, values doesn't have to be a SortedSet, but can be a Set instead except for cache key. To avoid sorting in the constructor but generate cache key in a deterministic way, getCacheKey() method needs to sort values when generating cache key. Since this method can be called often as well if cache is enabled, cache key is now cached in memory once it is created. Also, instead of storing all values in the cache key, a hash of values is stored now to avoid generating too long cache key.\n\nThis PR has:\n\n been self-reviewed.\n\n using the concurrency checklist (Remove this item if the PR doesn't have any relation to concurrency.)\n\n\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-04-30T07:34:15Z", "url": "https://github.com/apache/druid/pull/9800", "merged": true, "mergeCommit": {"oid": "6674d721bcc93ff959ae6d63c3eb71255179363d"}, "closed": true, "closedAt": "2020-05-06T22:26:36Z", "author": {"login": "jihoonson"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccnwmygH2gAyNDExMjE1NDg0Ojc2YWE3MDRjZDRkNmZmYTUwZWI0YzVhMmE0ZjM3OTQ0ODhkY2JhNmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcevPXgAH2gAyNDExMjE1NDg0OmUyZGM1MDRlMWU4NTA2ZDQ5MTQ0NmUwMTQ5ODU0YjMwY2M1YTQyYWE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "76aa704cd4d6ffa50eb4c5a2a4f3794488dcba6f", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/76aa704cd4d6ffa50eb4c5a2a4f3794488dcba6f", "committedDate": "2020-04-30T07:15:21Z", "message": "Avoid sorting values in InDimFilter if possible"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18991e14681dfb0d6b1120ef493bd99b4bcee7bc", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/18991e14681dfb0d6b1120ef493bd99b4bcee7bc", "committedDate": "2020-04-30T07:29:30Z", "message": "tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0346843569f9bc23169696a1718c0c3b25a9d481", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/0346843569f9bc23169696a1718c0c3b25a9d481", "committedDate": "2020-04-30T07:33:41Z", "message": "more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d6e7a5cbdd370eed0650a8c0ce20ce96101d5d5", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/4d6e7a5cbdd370eed0650a8c0ce20ce96101d5d5", "committedDate": "2020-04-30T17:29:05Z", "message": "fix and and or filters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e97ce94d189bdbe5d61cb4fd5378f73a08f1e323", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/e97ce94d189bdbe5d61cb4fd5378f73a08f1e323", "committedDate": "2020-04-30T18:40:43Z", "message": "fix build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e40df19324f958acff7f03c01a1f852e2926018", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/2e40df19324f958acff7f03c01a1f852e2926018", "committedDate": "2020-05-01T00:03:22Z", "message": "false and true vector matchers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1f3d171230faf538da88d060e12e68ec91a7427", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/d1f3d171230faf538da88d060e12e68ec91a7427", "committedDate": "2020-05-01T01:02:15Z", "message": "fix vector matchers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4e4590ac2feffddaf917bfaef7eb36a17f97d7b", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/e4e4590ac2feffddaf917bfaef7eb36a17f97d7b", "committedDate": "2020-05-01T01:36:42Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07cbeff02c36dab31fc90cf5dd5eb5b75041f69d", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/07cbeff02c36dab31fc90cf5dd5eb5b75041f69d", "committedDate": "2020-05-01T04:04:54Z", "message": "in filter null handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e67d9cb7bd60bf9d36104371e45c0f97968b285", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/5e67d9cb7bd60bf9d36104371e45c0f97968b285", "committedDate": "2020-05-01T04:22:30Z", "message": "remove wrong test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NzA3NTk2", "url": "https://github.com/apache/druid/pull/9800#pullrequestreview-404707596", "createdAt": "2020-05-04T04:48:20Z", "commit": {"oid": "5e67d9cb7bd60bf9d36104371e45c0f97968b285"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNDo0ODoyMFrOGPyrnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNTowODo1MVrOGPy5Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIxMjE4OA==", "bodyText": "I don't think we have any usages right now where this would be an issue, but maybe it's good to have a comment somewhere noting that the set passed in to InDimFilter shouldn't be modified afterwards since it can be reused", "url": "https://github.com/apache/druid/pull/9800#discussion_r419212188", "createdAt": "2020-05-04T04:48:20Z", "author": {"login": "jon-wei"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -84,9 +90,11 @@ public InDimFilter(\n     Preconditions.checkNotNull(dimension, \"dimension can not be null\");\n     Preconditions.checkArgument(values != null, \"values can not be null\");\n \n-    this.values = new TreeSet<>(Comparators.naturalNullsFirst());\n-    for (String value : values) {\n-      this.values.add(NullHandling.emptyToNullIfNeeded(value));\n+    // The values set can be huge. Try to avoid copying the set if possible.\n+    if (values instanceof Set && values.stream().noneMatch(NullHandling::needsEmptyToNull)) {\n+      this.values = (Set<String>) values;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e67d9cb7bd60bf9d36104371e45c0f97968b285"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIxNDczNA==", "bodyText": "If values is a set, I think you could determine hasNull beforehand if you've already scanned values for empty/nulls, and avoid scanning again", "url": "https://github.com/apache/druid/pull/9800#discussion_r419214734", "createdAt": "2020-05-04T05:03:00Z", "author": {"login": "jon-wei"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -132,31 +141,43 @@ public FilterTuning getFilterTuning()\n   @Override\n   public byte[] getCacheKey()\n   {\n-    boolean hasNull = false;\n-    for (String value : values) {\n-      if (value == null) {\n-        hasNull = true;\n-        break;\n-      }\n+    if (cacheKey == null) {\n+      final boolean hasNull = values.stream().anyMatch(Objects::isNull);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e67d9cb7bd60bf9d36104371e45c0f97968b285"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIxNTcwMg==", "bodyText": "If NullHandling.replaceWithDefault() returns false, I think you can skip the scan here and just reuse the set", "url": "https://github.com/apache/druid/pull/9800#discussion_r419215702", "createdAt": "2020-05-04T05:08:51Z", "author": {"login": "jon-wei"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -84,9 +90,11 @@ public InDimFilter(\n     Preconditions.checkNotNull(dimension, \"dimension can not be null\");\n     Preconditions.checkArgument(values != null, \"values can not be null\");\n \n-    this.values = new TreeSet<>(Comparators.naturalNullsFirst());\n-    for (String value : values) {\n-      this.values.add(NullHandling.emptyToNullIfNeeded(value));\n+    // The values set can be huge. Try to avoid copying the set if possible.\n+    if (values instanceof Set && values.stream().noneMatch(NullHandling::needsEmptyToNull)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e67d9cb7bd60bf9d36104371e45c0f97968b285"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef6938d5844818e6a388b4cb4471b2ef18648dbf", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/ef6938d5844818e6a388b4cb4471b2ef18648dbf", "committedDate": "2020-05-04T17:30:14Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ce40f929347443c17ca15a3143f40417ce5324c", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/9ce40f929347443c17ca15a3143f40417ce5324c", "committedDate": "2020-05-04T17:42:55Z", "message": "remove unnecessary null check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NDM3NDI1", "url": "https://github.com/apache/druid/pull/9800#pullrequestreview-405437425", "createdAt": "2020-05-05T00:41:24Z", "commit": {"oid": "9ce40f929347443c17ca15a3143f40417ce5324c"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMDo0MToyNVrOGQXDOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMDo0MToyNVrOGQXDOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwODA1OQ==", "bodyText": "There's an extra STRING_SEPARATOR now", "url": "https://github.com/apache/druid/pull/9800#discussion_r419808059", "createdAt": "2020-05-05T00:41:25Z", "author": {"login": "jon-wei"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -132,31 +145,41 @@ public FilterTuning getFilterTuning()\n   @Override\n   public byte[] getCacheKey()\n   {\n-    boolean hasNull = false;\n-    for (String value : values) {\n-      if (value == null) {\n-        hasNull = true;\n-        break;\n+    if (cacheKey == null) {\n+      final List<String> sortedValues = new ArrayList<>(values);\n+      sortedValues.sort(Comparator.nullsFirst(Ordering.natural()));\n+      final Hasher hasher = Hashing.sha256().newHasher();\n+      for (String v : sortedValues) {\n+        if (v == null) {\n+          hasher.putInt(0);\n+        } else {\n+          hasher.putString(v, StandardCharsets.UTF_8);\n+        }\n       }\n+      cacheKey = new CacheKeyBuilder(DimFilterUtils.IN_CACHE_ID)\n+          .appendString(dimension)\n+          .appendByte(DimFilterUtils.STRING_SEPARATOR)\n+          .appendByteArray(extractionFn == null ? new byte[0] : extractionFn.getCacheKey())\n+          .appendByte(DimFilterUtils.STRING_SEPARATOR)\n+          .appendByte(DimFilterUtils.STRING_SEPARATOR)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ce40f929347443c17ca15a3143f40417ce5324c"}, "originalPosition": 119}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/f033ccbcd24bab9781e88609f5f77933031a5007", "committedDate": "2020-05-05T01:18:11Z", "message": "redundant separator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MDM3MzA2", "url": "https://github.com/apache/druid/pull/9800#pullrequestreview-406037306", "createdAt": "2020-05-05T18:12:40Z", "commit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoxMjo0MFrOGQ1q9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoxMjo0MFrOGQ1q9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMwOTc0OA==", "bodyText": "AndDimFilterTest is missing branch coverage for this and line 88", "url": "https://github.com/apache/druid/pull/9800#discussion_r420309748", "createdAt": "2020-05-05T18:12:40Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/AndDimFilter.java", "diffHunk": "@@ -72,8 +73,20 @@ public AndDimFilter(DimFilter... fields)\n   @Override\n   public DimFilter optimize()\n   {\n-    List<DimFilter> elements = DimFilters.optimize(fields);\n-    return elements.size() == 1 ? elements.get(0) : new AndDimFilter(elements);\n+    List<DimFilter> elements = DimFilters.optimize(fields)\n+                                         .stream()\n+                                         .filter(filter -> !(filter instanceof TrueDimFilter))\n+                                         .collect(Collectors.toList());\n+    if (elements.isEmpty()) {\n+      // All elements were TrueDimFilter after optimization\n+      return TrueDimFilter.instance();\n+    } else if (elements.size() == 1) {\n+      return elements.get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MDM5NzQw", "url": "https://github.com/apache/druid/pull/9800#pullrequestreview-406039740", "createdAt": "2020-05-05T18:16:00Z", "commit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoxNjowMFrOGQ1ymQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODo0OToxOFrOGQ3Azw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxMTcwNQ==", "bodyText": "nit: should this be a static instance", "url": "https://github.com/apache/druid/pull/9800#discussion_r420311705", "createdAt": "2020-05-05T18:16:00Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/FalseDimFilter.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.filter;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.google.common.collect.ImmutableRangeSet;\n+import com.google.common.collect.RangeSet;\n+import org.apache.druid.query.cache.CacheKeyBuilder;\n+import org.apache.druid.segment.filter.FalseFilter;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+public class FalseDimFilter implements DimFilter\n+{\n+  private static final FalseDimFilter INSTANCE = new FalseDimFilter();\n+\n+  @JsonCreator\n+  public static FalseDimFilter instance()\n+  {\n+    return INSTANCE;\n+  }\n+\n+  private FalseDimFilter()\n+  {\n+  }\n+\n+  @Override\n+  public DimFilter optimize()\n+  {\n+    return this;\n+  }\n+\n+  @Override\n+  public Filter toFilter()\n+  {\n+    return FalseFilter.instance();\n+  }\n+\n+  @Nullable\n+  @Override\n+  public RangeSet<String> getDimensionRangeSet(String dimension)\n+  {\n+    return ImmutableRangeSet.of();\n+  }\n+\n+  @Override\n+  public Set<String> getRequiredColumns()\n+  {\n+    return Collections.emptySet();\n+  }\n+\n+  @Override\n+  public byte[] getCacheKey()\n+  {\n+    return new CacheKeyBuilder(DimFilterUtils.FALSE_CACHE_ID).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxMjQ0OA==", "bodyText": "EqualsVerifierTest for this?", "url": "https://github.com/apache/druid/pull/9800#discussion_r420312448", "createdAt": "2020-05-05T18:17:11Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/FalseDimFilter.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.filter;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.google.common.collect.ImmutableRangeSet;\n+import com.google.common.collect.RangeSet;\n+import org.apache.druid.query.cache.CacheKeyBuilder;\n+import org.apache.druid.segment.filter.FalseFilter;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+public class FalseDimFilter implements DimFilter\n+{\n+  private static final FalseDimFilter INSTANCE = new FalseDimFilter();\n+\n+  @JsonCreator\n+  public static FalseDimFilter instance()\n+  {\n+    return INSTANCE;\n+  }\n+\n+  private FalseDimFilter()\n+  {\n+  }\n+\n+  @Override\n+  public DimFilter optimize()\n+  {\n+    return this;\n+  }\n+\n+  @Override\n+  public Filter toFilter()\n+  {\n+    return FalseFilter.instance();\n+  }\n+\n+  @Nullable\n+  @Override\n+  public RangeSet<String> getDimensionRangeSet(String dimension)\n+  {\n+    return ImmutableRangeSet.of();\n+  }\n+\n+  @Override\n+  public Set<String> getRequiredColumns()\n+  {\n+    return Collections.emptySet();\n+  }\n+\n+  @Override\n+  public byte[] getCacheKey()\n+  {\n+    return new CacheKeyBuilder(DimFilterUtils.FALSE_CACHE_ID).build();\n+  }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    return DimFilterUtils.FALSE_CACHE_ID;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    return o == this;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxOTM5MA==", "bodyText": "Can we pass in a Set<String> instead of Collection<String> so jackson can do the de-dupe for us?", "url": "https://github.com/apache/druid/pull/9800#discussion_r420319390", "createdAt": "2020-05-05T18:28:45Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -73,9 +77,14 @@\n   private final Supplier<DruidFloatPredicate> floatPredicateSupplier;\n   private final Supplier<DruidDoublePredicate> doublePredicateSupplier;\n \n+  @JsonIgnore\n+  private byte[] cacheKey;\n+\n   @JsonCreator\n   public InDimFilter(\n       @JsonProperty(\"dimension\") String dimension,\n+      // This 'values' collection instance can be reused if possible to avoid copying a big collection.\n+      // Callers should _not_ modify the collection after it is passed to this constructor.\n       @JsonProperty(\"values\") Collection<String> values,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxOTc0Nw==", "bodyText": "Looks like this code is hit by other tests in druid-processing, but I'm not sure which ones", "url": "https://github.com/apache/druid/pull/9800#discussion_r420319747", "createdAt": "2020-05-05T18:29:17Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/AndDimFilter.java", "diffHunk": "@@ -72,8 +73,20 @@ public AndDimFilter(DimFilter... fields)\n   @Override\n   public DimFilter optimize()\n   {\n-    List<DimFilter> elements = DimFilters.optimize(fields);\n-    return elements.size() == 1 ? elements.get(0) : new AndDimFilter(elements);\n+    List<DimFilter> elements = DimFilters.optimize(fields)\n+                                         .stream()\n+                                         .filter(filter -> !(filter instanceof TrueDimFilter))\n+                                         .collect(Collectors.toList());\n+    if (elements.isEmpty()) {\n+      // All elements were TrueDimFilter after optimization\n+      return TrueDimFilter.instance();\n+    } else if (elements.size() == 1) {\n+      return elements.get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMwOTc0OA=="}, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMyNzk0MQ==", "bodyText": "Does this negate your comment on line 96?\nWe'd be copying all the values here to a list so that we can sort the list.", "url": "https://github.com/apache/druid/pull/9800#discussion_r420327941", "createdAt": "2020-05-05T18:43:06Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -132,31 +145,40 @@ public FilterTuning getFilterTuning()\n   @Override\n   public byte[] getCacheKey()\n   {\n-    boolean hasNull = false;\n-    for (String value : values) {\n-      if (value == null) {\n-        hasNull = true;\n-        break;\n+    if (cacheKey == null) {\n+      final List<String> sortedValues = new ArrayList<>(values);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMyOTE3MQ==", "bodyText": "Can multiple threads call getCacheKey at the same time?\nWhat happens if 2 threads try to build sortedValues?", "url": "https://github.com/apache/druid/pull/9800#discussion_r420329171", "createdAt": "2020-05-05T18:45:01Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -132,31 +145,40 @@ public FilterTuning getFilterTuning()\n   @Override\n   public byte[] getCacheKey()\n   {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzMTcyNw==", "bodyText": "Why did you choose a sha256 hasher? Is it fast to construct a new hasher? or to perform a sha256 hash?\nI wrote a test here which fails to produce the same cacheKey even though the values are sorted\n@Test\n  public void testCacheKey()\n  {\n    final InDimFilter dimFilter1 = new InDimFilter(\"dim\", ImmutableList.of(\"v1\", \"v2\", \"v3\"), null);\n    final InDimFilter dimFilter2 = new InDimFilter(\"dim\", ImmutableList.of(\"v3\", \"v2\", \"v1\"), null);\n    Assert.assertEquals(dimFilter1.getCacheKey(), dimFilter2.getCacheKey());\n  }", "url": "https://github.com/apache/druid/pull/9800#discussion_r420331727", "createdAt": "2020-05-05T18:49:18Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -132,31 +145,40 @@ public FilterTuning getFilterTuning()\n   @Override\n   public byte[] getCacheKey()\n   {\n-    boolean hasNull = false;\n-    for (String value : values) {\n-      if (value == null) {\n-        hasNull = true;\n-        break;\n+    if (cacheKey == null) {\n+      final List<String> sortedValues = new ArrayList<>(values);\n+      sortedValues.sort(Comparator.nullsFirst(Ordering.natural()));\n+      final Hasher hasher = Hashing.sha256().newHasher();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 106}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MTA0MzUw", "url": "https://github.com/apache/druid/pull/9800#pullrequestreview-406104350", "createdAt": "2020-05-05T19:48:32Z", "commit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOTo0ODozMlrOGQ5BCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMDo0OToxNVrOGQ6_9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM2NDU1NA==", "bodyText": "Why not use the recommended resolution\nFalseDimFilter.instance().equals(optimized)", "url": "https://github.com/apache/druid/pull/9800#discussion_r420364554", "createdAt": "2020-05-05T19:48:32Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/NotDimFilter.java", "diffHunk": "@@ -60,10 +60,17 @@ public DimFilter getField()\n     return ByteBuffer.allocate(1 + subKey.length).put(DimFilterUtils.NOT_CACHE_ID).put(subKey).array();\n   }\n \n+  @SuppressWarnings(\"ObjectEquality\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM5NzA0Ng==", "bodyText": "Should the max size / current size of these be 1 since VectorMatch.allFalse() is an empty array?\nNot really sure how the vector sizes are used", "url": "https://github.com/apache/druid/pull/9800#discussion_r420397046", "createdAt": "2020-05-05T20:49:15Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/vector/FalseVectorMatcher.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.filter.vector;\n+\n+import org.apache.druid.segment.vector.VectorSizeInspector;\n+\n+public class FalseVectorMatcher implements VectorValueMatcher\n+{\n+  private final VectorSizeInspector vectorSizeInspector;\n+\n+  public FalseVectorMatcher(VectorSizeInspector vectorSizeInspector)\n+  {\n+    this.vectorSizeInspector = vectorSizeInspector;\n+  }\n+\n+  @Override\n+  public ReadableVectorMatch match(ReadableVectorMatch mask)\n+  {\n+    return VectorMatch.allFalse();\n+  }\n+\n+  @Override\n+  public int getMaxVectorSize()\n+  {\n+    return vectorSizeInspector.getMaxVectorSize();\n+  }\n+\n+  @Override\n+  public int getCurrentVectorSize()\n+  {\n+    return vectorSizeInspector.getCurrentVectorSize();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f033ccbcd24bab9781e88609f5f77933031a5007"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe69355a87a1f7419e4b8b23b99b95d37ea8fd3c", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/fe69355a87a1f7419e4b8b23b99b95d37ea8fd3c", "committedDate": "2020-05-06T18:32:01Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2ODkwODI0", "url": "https://github.com/apache/druid/pull/9800#pullrequestreview-406890824", "createdAt": "2020-05-06T18:45:10Z", "commit": {"oid": "fe69355a87a1f7419e4b8b23b99b95d37ea8fd3c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef4f62f289185c91829b6771908f94b49b1e5a2d", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/ef4f62f289185c91829b6771908f94b49b1e5a2d", "committedDate": "2020-05-06T20:18:50Z", "message": "typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2dc504e1e8506d491446e0149854b30cc5a42aa", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/e2dc504e1e8506d491446e0149854b30cc5a42aa", "committedDate": "2020-05-06T21:06:08Z", "message": "tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2255, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}