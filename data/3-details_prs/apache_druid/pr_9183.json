{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNTUxOTIx", "number": 9183, "title": "fix topn aggregation on numeric columns with null values", "bodyText": "Description\nThis PR refactors handling of TopN queries performing aggregations on numeric columns to handle null valued rows, instead of treating them as zero.\nThis is done by modifying TopNColumnSelectorStrategy to be both aggregate processor and aggregate store for DimExtractionTopNAlgorithm, and for numeric selectors will keep an extra Aggregator[] around for aggregating for the null value in addition to the type appropriate fastutils map that is currently in place.\nTo reflect the behavior changes, TopNColumnSelectorStrategy  has been renamed TopNColumnAggregatesProcessor . It still does provide value cardinality to the other algorithms, and the changes should have no footprint change for things not using it.\nAdditionally, i renamed DimExtractionTopNAlgorithm to the more generic sounding HeapBasedTopNAlgorithm since it is also used for numeric selectors. I don't love this name, so if anyone has any better ideas I'll happily change it.\n\nThis PR has:\n\n been self-reviewed.\n\n using the concurrency checklist (Remove this item if the PR doesn't have any relation to concurrency.)\n\n\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-01-14T10:15:56Z", "url": "https://github.com/apache/druid/pull/9183", "merged": true, "mergeCommit": {"oid": "f0dddaa51aef07aec59dc1dc60ace3543945e3bf"}, "closed": true, "closedAt": "2020-01-18T02:12:25Z", "author": {"login": "clintropolis"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6OG3_gH2gAyMzYyNTUxOTIxOmFlNDc1OThiMjExZDhkY2NiZTZlYjkxOTE3NzM0N2E5ZTBlOTBkZjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb7ZqffAFqTM0NDkxODY0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ae47598b211d8dccbe6eb919177347a9e0e90df2", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/ae47598b211d8dccbe6eb919177347a9e0e90df2", "committedDate": "2020-01-14T10:08:43Z", "message": "fix topn issue with aggregating on numeric columns with null values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6927517bc6848ccd6a1cc3341586fad8d6dc318", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/c6927517bc6848ccd6a1cc3341586fad8d6dc318", "committedDate": "2020-01-16T11:26:29Z", "message": "adjustments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f91915fef820e3c2d647e81ef5d92dc3f942ebf", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/7f91915fef820e3c2d647e81ef5d92dc3f942ebf", "committedDate": "2020-01-16T22:44:08Z", "message": "Merge remote-tracking branch 'upstream/master' into topn-agg-numeric-null-columns"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "515af98ae6a366028cdcefb554d42294bc46d034", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/515af98ae6a366028cdcefb554d42294bc46d034", "committedDate": "2020-01-16T22:44:22Z", "message": "rename"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "777bf78b02241314f609feb192502eb03146b1b6", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/777bf78b02241314f609feb192502eb03146b1b6", "committedDate": "2020-01-17T01:47:38Z", "message": "add more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac2d66ee6aeab38263bd6f4ef276d4522140964e", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/ac2d66ee6aeab38263bd6f4ef276d4522140964e", "committedDate": "2020-01-17T02:40:04Z", "message": "fix comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MzMwOTA0", "url": "https://github.com/apache/druid/pull/9183#pullrequestreview-344330904", "createdAt": "2020-01-17T02:17:12Z", "commit": {"oid": "777bf78b02241314f609feb192502eb03146b1b6"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMjo1NjowNVrOFetmRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMjo1Nzo0OVrOFetnVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc0ODY3Nw==", "bodyText": "I think the initAggregateStore call could be moved into HeapBasedTopNAlgorithm.scanAndAggregate since both impls call it as the first step", "url": "https://github.com/apache/druid/pull/9183#discussion_r367748677", "createdAt": "2020-01-17T02:56:05Z", "author": {"login": "jon-wei"}, "path": "processing/src/main/java/org/apache/druid/query/topn/types/NullableNumericTopNColumnAggregatesProcessor.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.topn.types;\n+\n+import org.apache.druid.common.config.NullHandling;\n+import org.apache.druid.query.aggregation.Aggregator;\n+import org.apache.druid.query.topn.BaseTopNAlgorithm;\n+import org.apache.druid.query.topn.TopNParams;\n+import org.apache.druid.query.topn.TopNQuery;\n+import org.apache.druid.query.topn.TopNResultBuilder;\n+import org.apache.druid.segment.BaseNullableColumnValueSelector;\n+import org.apache.druid.segment.Cursor;\n+import org.apache.druid.segment.StorageAdapter;\n+\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+public abstract class NullableNumericTopNColumnAggregatesProcessor<Selector extends BaseNullableColumnValueSelector>\n+    implements TopNColumnAggregatesProcessor<Selector>\n+{\n+  private final boolean hasNulls = !NullHandling.replaceWithDefault();\n+  final Function<Object, Comparable<?>> converter;\n+  Aggregator[] nullValueAggregates;\n+\n+  protected NullableNumericTopNColumnAggregatesProcessor(Function<Object, Comparable<?>> converter)\n+  {\n+    this.converter = converter;\n+  }\n+\n+  abstract Aggregator[] getValueAggregators(TopNQuery query, Selector selector, Cursor cursor);\n+\n+  abstract Map<?, Aggregator[]> getAggregatesStore();\n+\n+  abstract Comparable<?> convertAggregatorStoreKeyToColumnValue(Object aggregatorStoreKey);\n+\n+  @Override\n+  public int getCardinality(Selector selector)\n+  {\n+    return TopNParams.CARDINALITY_UNKNOWN;\n+  }\n+\n+  @Override\n+  public Aggregator[][] getRowSelector(TopNQuery query, TopNParams params, StorageAdapter storageAdapter)\n+  {\n+    return null;\n+  }\n+\n+  @Override\n+  public long scanAndAggregate(\n+      TopNQuery query,\n+      Selector selector,\n+      Cursor cursor,\n+      Aggregator[][] rowSelector\n+  )\n+  {\n+    initAggregateStore();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2d66ee6aeab38263bd6f4ef276d4522140964e"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc0ODk1MQ==", "bodyText": "Can you add javadocs for the abstract methods?", "url": "https://github.com/apache/druid/pull/9183#discussion_r367748951", "createdAt": "2020-01-17T02:57:49Z", "author": {"login": "jon-wei"}, "path": "processing/src/main/java/org/apache/druid/query/topn/types/NullableNumericTopNColumnAggregatesProcessor.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.topn.types;\n+\n+import org.apache.druid.common.config.NullHandling;\n+import org.apache.druid.query.aggregation.Aggregator;\n+import org.apache.druid.query.topn.BaseTopNAlgorithm;\n+import org.apache.druid.query.topn.TopNParams;\n+import org.apache.druid.query.topn.TopNQuery;\n+import org.apache.druid.query.topn.TopNResultBuilder;\n+import org.apache.druid.segment.BaseNullableColumnValueSelector;\n+import org.apache.druid.segment.Cursor;\n+import org.apache.druid.segment.StorageAdapter;\n+\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+public abstract class NullableNumericTopNColumnAggregatesProcessor<Selector extends BaseNullableColumnValueSelector>\n+    implements TopNColumnAggregatesProcessor<Selector>\n+{\n+  private final boolean hasNulls = !NullHandling.replaceWithDefault();\n+  final Function<Object, Comparable<?>> converter;\n+  Aggregator[] nullValueAggregates;\n+\n+  protected NullableNumericTopNColumnAggregatesProcessor(Function<Object, Comparable<?>> converter)\n+  {\n+    this.converter = converter;\n+  }\n+\n+  abstract Aggregator[] getValueAggregators(TopNQuery query, Selector selector, Cursor cursor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2d66ee6aeab38263bd6f4ef276d4522140964e"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6130e6a5ca196644aa59f0e0708437c93699e089", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/6130e6a5ca196644aa59f0e0708437c93699e089", "committedDate": "2020-01-17T03:05:32Z", "message": "more javadocs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MzQ3MzA5", "url": "https://github.com/apache/druid/pull/9183#pullrequestreview-344347309", "createdAt": "2020-01-17T03:31:52Z", "commit": {"oid": "ac2d66ee6aeab38263bd6f4ef276d4522140964e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0Nzk5OTYy", "url": "https://github.com/apache/druid/pull/9183#pullrequestreview-344799962", "createdAt": "2020-01-17T19:39:51Z", "commit": {"oid": "6130e6a5ca196644aa59f0e0708437c93699e089"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxOTozOTo1MVrOFfDTSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMDowMzo0N1rOFfD4tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEwNDI2NQ==", "bodyText": "nit: I wish someday we could remove duplicate static values for this..", "url": "https://github.com/apache/druid/pull/9183#discussion_r368104265", "createdAt": "2020-01-17T19:39:51Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/topn/BaseTopNAlgorithm.java", "diffHunk": "@@ -79,7 +78,7 @@ public void run(\n       @Nullable TopNQueryMetrics queryMetrics\n   )\n   {\n-    if (params.getCardinality() != TopNColumnSelectorStrategy.CARDINALITY_UNKNOWN) {\n+    if (params.getCardinality() != TopNParams.CARDINALITY_UNKNOWN) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6130e6a5ca196644aa59f0e0708437c93699e089"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODEwNzc5OA==", "bodyText": "nit: TopNColumnAggregatesProcessorFactory?", "url": "https://github.com/apache/druid/pull/9183#discussion_r368107798", "createdAt": "2020-01-17T19:48:38Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/topn/types/TopNColumnSelectorStrategyFactory.java", "diffHunk": "@@ -23,10 +23,14 @@\n import org.apache.druid.java.util.common.IAE;\n import org.apache.druid.query.dimension.ColumnSelectorStrategyFactory;\n import org.apache.druid.segment.ColumnValueSelector;\n+import org.apache.druid.segment.DimensionHandlerUtils;\n import org.apache.druid.segment.column.ColumnCapabilities;\n import org.apache.druid.segment.column.ValueType;\n \n-public class TopNColumnSelectorStrategyFactory implements ColumnSelectorStrategyFactory<TopNColumnSelectorStrategy>\n+import java.util.function.Function;\n+\n+public class TopNColumnSelectorStrategyFactory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6130e6a5ca196644aa59f0e0708437c93699e089"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODExMDEwNQ==", "bodyText": "Probably better to use computeIfAbsent() since it computes hash less time.", "url": "https://github.com/apache/druid/pull/9183#discussion_r368110105", "createdAt": "2020-01-17T19:54:19Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/topn/types/LongTopNColumnAggregatesProcessor.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.topn.types;\n+\n+import it.unimi.dsi.fastutil.longs.Long2ObjectMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;\n+import org.apache.druid.query.aggregation.Aggregator;\n+import org.apache.druid.query.topn.BaseTopNAlgorithm;\n+import org.apache.druid.query.topn.TopNQuery;\n+import org.apache.druid.segment.BaseLongColumnValueSelector;\n+import org.apache.druid.segment.Cursor;\n+\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+public class LongTopNColumnAggregatesProcessor\n+    extends NullableNumericTopNColumnAggregatesProcessor<BaseLongColumnValueSelector>\n+{\n+  private Long2ObjectMap<Aggregator[]> aggregatesStore;\n+\n+  public LongTopNColumnAggregatesProcessor(Function<Object, Comparable<?>> converter)\n+  {\n+    super(converter);\n+  }\n+\n+  @Override\n+  Aggregator[] getValueAggregators(TopNQuery query, BaseLongColumnValueSelector selector, Cursor cursor)\n+  {\n+    long key = selector.getLong();\n+    Aggregator[] aggs = aggregatesStore.get(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6130e6a5ca196644aa59f0e0708437c93699e089"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODExMzg0Nw==", "bodyText": "Same for double and float types.", "url": "https://github.com/apache/druid/pull/9183#discussion_r368113847", "createdAt": "2020-01-17T20:03:47Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/topn/types/LongTopNColumnAggregatesProcessor.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.topn.types;\n+\n+import it.unimi.dsi.fastutil.longs.Long2ObjectMap;\n+import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;\n+import org.apache.druid.query.aggregation.Aggregator;\n+import org.apache.druid.query.topn.BaseTopNAlgorithm;\n+import org.apache.druid.query.topn.TopNQuery;\n+import org.apache.druid.segment.BaseLongColumnValueSelector;\n+import org.apache.druid.segment.Cursor;\n+\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+public class LongTopNColumnAggregatesProcessor\n+    extends NullableNumericTopNColumnAggregatesProcessor<BaseLongColumnValueSelector>\n+{\n+  private Long2ObjectMap<Aggregator[]> aggregatesStore;\n+\n+  public LongTopNColumnAggregatesProcessor(Function<Object, Comparable<?>> converter)\n+  {\n+    super(converter);\n+  }\n+\n+  @Override\n+  Aggregator[] getValueAggregators(TopNQuery query, BaseLongColumnValueSelector selector, Cursor cursor)\n+  {\n+    long key = selector.getLong();\n+    Aggregator[] aggs = aggregatesStore.get(key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODExMDEwNQ=="}, "originalCommit": {"oid": "6130e6a5ca196644aa59f0e0708437c93699e089"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c9778ffadfa3b97d076ff3f1ef39ad6ea123305", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/3c9778ffadfa3b97d076ff3f1ef39ad6ea123305", "committedDate": "2020-01-18T00:15:05Z", "message": "computeIfAbsent"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0OTE4NjQw", "url": "https://github.com/apache/druid/pull/9183#pullrequestreview-344918640", "createdAt": "2020-01-18T02:10:31Z", "commit": {"oid": "3c9778ffadfa3b97d076ff3f1ef39ad6ea123305"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3735, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}