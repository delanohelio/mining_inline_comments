{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5OTQzODI2", "number": 9783, "title": "Integration tests for stream ingestion with various data formats", "bodyText": "Description\nThis PR adds new integration tests for stream ingestion against different data formats. To do this, a new interface EventSerializer was added which converts generated events using SyntheticStreamGenerator into a particular data format.\nThe new tests automatically pick up serializer, inputFormat, and inputRowParser specs from test resources and populate test parameters. Since these tests take about 30 mins when you run in parallel with 2 threads, a new Travis job was added.\n\nThis PR has:\n\n been self-reviewed.\n\n using the concurrency checklist (Remove this item if the PR doesn't have any relation to concurrency.)\n\n\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-04-28T07:48:22Z", "url": "https://github.com/apache/druid/pull/9783", "merged": true, "mergeCommit": {"oid": "39722bd0646464ca67d1a0bf6966c0b7e4aedaf9"}, "closed": true, "closedAt": "2020-04-29T20:18:02Z", "author": {"login": "jihoonson"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcb-65cgH2gAyNDA5OTQzODI2OmIwNmJiMjY4OWVmMjA3Njk2MjMxYWUwMjI1N2NmMmQwOTdhM2MwMzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABccdD7dAH2gAyNDA5OTQzODI2OjU1ZTFiNWYzYjQ2YjkyZjU4ODk3MGUyYjYwNWRiZjM1YjBmYzMzMzI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b06bb2689ef207696231ae02257cf2d097a3c030", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/b06bb2689ef207696231ae02257cf2d097a3c030", "committedDate": "2020-04-28T07:40:29Z", "message": "Integration tests for stream ingestion with various data formats"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c2951ac542f2276d19883a1340d49fb9a24faa0", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/7c2951ac542f2276d19883a1340d49fb9a24faa0", "committedDate": "2020-04-28T16:19:09Z", "message": "fix npe"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d85a9e7ce3619951ab4e923f8ac819d40a091d47", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/d85a9e7ce3619951ab4e923f8ac819d40a091d47", "committedDate": "2020-04-28T19:39:08Z", "message": "better logging; fix tsv"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa2af16cf96dd15e4798f5bcae604b67efef9ea1", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/aa2af16cf96dd15e4798f5bcae604b67efef9ea1", "committedDate": "2020-04-28T20:42:21Z", "message": "fix tsv"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMjIxNzg2", "url": "https://github.com/apache/druid/pull/9783#pullrequestreview-402221786", "createdAt": "2020-04-28T21:22:28Z", "commit": {"oid": "aa2af16cf96dd15e4798f5bcae604b67efef9ea1"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToyMjoyOVrOGNndaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToyMjoyOVrOGNndaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkzMTE3Nw==", "bodyText": "Can add a new named constant to TestNGGroup for \"kinesis-data-format\"", "url": "https://github.com/apache/druid/pull/9783#discussion_r416931177", "createdAt": "2020-04-28T21:22:29Z", "author": {"login": "ccaominh"}, "path": "integration-tests/src/test/java/org/apache/druid/tests/parallelized/ITKinesisIndexingServiceDataFormatTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.tests.parallelized;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.inject.Inject;\n+import org.apache.druid.guice.annotations.Json;\n+import org.apache.druid.testing.guice.DruidTestModuleFactory;\n+import org.apache.druid.tests.TestNGGroup;\n+import org.apache.druid.tests.indexer.AbstractKinesisIndexingServiceTest;\n+import org.apache.druid.tests.indexer.AbstractStreamIndexingTest;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Guice;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Test(groups = \"kinesis-data-format\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa2af16cf96dd15e4798f5bcae604b67efef9ea1"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88601d89b9b63abad4a8555c1d4818feb2188e6a", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/88601d89b9b63abad4a8555c1d4818feb2188e6a", "committedDate": "2020-04-28T22:13:41Z", "message": "exclude kinesis from travis"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMjgwODE0", "url": "https://github.com/apache/druid/pull/9783#pullrequestreview-402280814", "createdAt": "2020-04-28T23:26:17Z", "commit": {"oid": "88601d89b9b63abad4a8555c1d4818feb2188e6a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMjkwOTI1", "url": "https://github.com/apache/druid/pull/9783#pullrequestreview-402290925", "createdAt": "2020-04-28T23:55:06Z", "commit": {"oid": "88601d89b9b63abad4a8555c1d4818feb2188e6a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMjkzNTg1", "url": "https://github.com/apache/druid/pull/9783#pullrequestreview-402293585", "createdAt": "2020-04-29T00:03:01Z", "commit": {"oid": "88601d89b9b63abad4a8555c1d4818feb2188e6a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMDowMzowMlrOGNrZ5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMDowMzowMlrOGNrZ5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk5NTgxMg==", "bodyText": "Kinesis does not have transaction enabled/disabled. Does it make sense to put this at Kafka layer instead of here?", "url": "https://github.com/apache/druid/pull/9783#discussion_r416995812", "createdAt": "2020-04-29T00:03:02Z", "author": {"login": "maytasm"}, "path": "integration-tests/src/test/java/org/apache/druid/tests/indexer/AbstractStreamIndexingTest.java", "diffHunk": "@@ -67,92 +92,147 @@\n   private IntegrationTestingConfig config;\n \n   private StreamAdminClient streamAdminClient;\n-  private WikipediaStreamEventStreamGenerator wikipediaStreamEventGenerator;\n \n   abstract StreamAdminClient createStreamAdminClient(IntegrationTestingConfig config) throws Exception;\n-  abstract StreamEventWriter createStreamEventWriter(IntegrationTestingConfig config) throws Exception;\n-  abstract Function<String, String> generateStreamIngestionPropsTransform(String streamName,\n-                                                                          String fullDatasourceName,\n-                                                                          IntegrationTestingConfig config);\n+\n+  abstract StreamEventWriter createStreamEventWriter(IntegrationTestingConfig config, boolean transactionEnabled)\n+      throws Exception;\n+\n+  abstract Function<String, String> generateStreamIngestionPropsTransform(\n+      String streamName,\n+      String fullDatasourceName,\n+      String parserType,\n+      String parserOrInputFormat,\n+      IntegrationTestingConfig config\n+  );\n+\n   abstract Function<String, String> generateStreamQueryPropsTransform(String streamName, String fullDatasourceName);\n+\n   public abstract String getTestNamePrefix();\n \n   protected void doBeforeClass() throws Exception\n   {\n     streamAdminClient = createStreamAdminClient(config);\n-    wikipediaStreamEventGenerator = new WikipediaStreamEventStreamGenerator(EVENTS_PER_SECOND, CYCLE_PADDING_MS);\n   }\n \n-  protected void doClassTeardown()\n+  private static String getOnlyResourcePath(String resourceRoot) throws IOException\n   {\n-    wikipediaStreamEventGenerator.shutdown();\n+    return String.join(\"/\", resourceRoot, Iterables.getOnlyElement(listResources(resourceRoot)));\n   }\n \n-  protected void doTestIndexDataWithLegacyParserStableState() throws Exception\n+  protected static List<String> listDataFormatResources() throws IOException\n   {\n-    StreamEventWriter streamEventWriter = createStreamEventWriter(config);\n-    final GeneratedTestConfig generatedTestConfig = new GeneratedTestConfig();\n-    try (\n-        final Closeable ignored1 = unloader(generatedTestConfig.getFullDatasourceName())\n-    ) {\n-      final String taskSpec = generatedTestConfig.getStreamIngestionPropsTransform().apply(getResourceAsString(INDEXER_FILE_LEGACY_PARSER));\n-      LOG.info(\"supervisorSpec: [%s]\\n\", taskSpec);\n-      // Start supervisor\n-      generatedTestConfig.setSupervisorId(indexer.submitSupervisor(taskSpec));\n-      LOG.info(\"Submitted supervisor\");\n-      // Start data generator\n-      wikipediaStreamEventGenerator.run(generatedTestConfig.getStreamName(), streamEventWriter, TOTAL_NUMBER_OF_SECOND, FIRST_EVENT_TIME);\n-      verifyIngestedData(generatedTestConfig);\n+    return listResources(DATA_RESOURCE_ROOT)\n+        .stream()\n+        .filter(resource -> !SUPERVISOR_SPEC_TEMPLATE_FILE.equals(resource))\n+        .collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * Returns a map of key to path to spec. The returned map contains at least 2 specs and one of them\n+   * should be a {@link #SERIALIZER} spec.\n+   */\n+  protected static Map<String, String> findTestSpecs(String resourceRoot) throws IOException\n+  {\n+    final List<String> specDirs = listResources(resourceRoot);\n+    final Map<String, String> map = new HashMap<>();\n+    for (String eachSpec : specDirs) {\n+      if (SERIALIZER_SPEC_DIR.equals(eachSpec)) {\n+        map.put(SERIALIZER, getOnlyResourcePath(String.join(\"/\", resourceRoot, SERIALIZER_SPEC_DIR)));\n+      } else if (INPUT_ROW_PARSER_SPEC_DIR.equals(eachSpec)) {\n+        map.put(INPUT_ROW_PARSER, getOnlyResourcePath(String.join(\"/\", resourceRoot, INPUT_ROW_PARSER_SPEC_DIR)));\n+      } else if (INPUT_FORMAT_SPEC_DIR.equals(eachSpec)) {\n+        map.put(INPUT_FORMAT, getOnlyResourcePath(String.join(\"/\", resourceRoot, INPUT_FORMAT_SPEC_DIR)));\n+      }\n     }\n-    finally {\n-      doMethodTeardown(generatedTestConfig, streamEventWriter);\n+    if (!map.containsKey(SERIALIZER_SPEC_DIR)) {\n+      throw new IAE(\"Failed to find serializer spec under [%s]. Found resources are %s\", resourceRoot, map);\n     }\n+    if (map.size() == 1) {\n+      throw new IAE(\"Failed to find input format or parser spec under [%s]. Found resources are %s\", resourceRoot, map);\n+    }\n+    return map;\n+  }\n+\n+  private Closeable createResourceCloser(GeneratedTestConfig generatedTestConfig)\n+  {\n+    return Closer.create().register(() -> doMethodTeardown(generatedTestConfig));\n   }\n \n-  protected void doTestIndexDataWithInputFormatStableState() throws Exception\n+  protected void doTestIndexDataStableState(\n+      boolean transactionEnabled,\n+      String serializerPath,\n+      String parserType,\n+      String specPath\n+  ) throws Exception\n   {\n-    StreamEventWriter streamEventWriter = createStreamEventWriter(config);\n-    final GeneratedTestConfig generatedTestConfig = new GeneratedTestConfig();\n+    final EventSerializer serializer = jsonMapper.readValue(getResourceAsStream(serializerPath), EventSerializer.class);\n+    final StreamGenerator streamGenerator = new WikipediaStreamEventStreamGenerator(\n+        serializer,\n+        EVENTS_PER_SECOND,\n+        CYCLE_PADDING_MS\n+    );\n+    final GeneratedTestConfig generatedTestConfig = new GeneratedTestConfig(parserType, getResourceAsString(specPath));\n     try (\n-        final Closeable ignored1 = unloader(generatedTestConfig.getFullDatasourceName())\n+        final Closeable closer = createResourceCloser(generatedTestConfig);\n+        final StreamEventWriter streamEventWriter = createStreamEventWriter(config, transactionEnabled)\n     ) {\n-      final String taskSpec = generatedTestConfig.getStreamIngestionPropsTransform().apply(getResourceAsString(INDEXER_FILE_INPUT_FORMAT));\n+      final String taskSpec = generatedTestConfig.getStreamIngestionPropsTransform()\n+                                                 .apply(getResourceAsString(SUPERVISOR_SPEC_TEMPLATE_PATH));\n       LOG.info(\"supervisorSpec: [%s]\\n\", taskSpec);\n       // Start supervisor\n       generatedTestConfig.setSupervisorId(indexer.submitSupervisor(taskSpec));\n       LOG.info(\"Submitted supervisor\");\n       // Start data generator\n-      wikipediaStreamEventGenerator.run(generatedTestConfig.getStreamName(), streamEventWriter, TOTAL_NUMBER_OF_SECOND, FIRST_EVENT_TIME);\n+      streamGenerator.run(\n+          generatedTestConfig.getStreamName(),\n+          streamEventWriter,\n+          TOTAL_NUMBER_OF_SECOND,\n+          FIRST_EVENT_TIME\n+      );\n       verifyIngestedData(generatedTestConfig);\n     }\n-    finally {\n-      doMethodTeardown(generatedTestConfig, streamEventWriter);\n-    }\n   }\n \n-  void doTestIndexDataWithLosingCoordinator() throws Exception\n+  void doTestIndexDataWithLosingCoordinator(boolean transactionEnabled) throws Exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88601d89b9b63abad4a8555c1d4818feb2188e6a"}, "originalPosition": 212}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMjk1MzA2", "url": "https://github.com/apache/druid/pull/9783#pullrequestreview-402295306", "createdAt": "2020-04-29T00:08:30Z", "commit": {"oid": "88601d89b9b63abad4a8555c1d4818feb2188e6a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMjk1NTM2", "url": "https://github.com/apache/druid/pull/9783#pullrequestreview-402295536", "createdAt": "2020-04-29T00:09:13Z", "commit": {"oid": "88601d89b9b63abad4a8555c1d4818feb2188e6a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMDowOToxM1rOGNrh5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMDowOToxM1rOGNrh5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjk5Nzg2MQ==", "bodyText": "nit: might be helpful to add what this does / how to use in README.md", "url": "https://github.com/apache/druid/pull/9783#discussion_r416997861", "createdAt": "2020-04-29T00:09:13Z", "author": {"login": "maytasm"}, "path": "integration-tests/src/test/resources/testng.xml", "diffHunk": "@@ -20,7 +20,7 @@\n <!DOCTYPE suite SYSTEM \"http://testng.org/testng-1.0.dtd\" >\n \n \n-<suite name=\"IntegrationTestSuite\">\n+<suite name=\"IntegrationTestSuite\" data-provider-thread-count=\"2\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88601d89b9b63abad4a8555c1d4818feb2188e6a"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNDU4MDIx", "url": "https://github.com/apache/druid/pull/9783#pullrequestreview-402458021", "createdAt": "2020-04-29T08:26:18Z", "commit": {"oid": "88601d89b9b63abad4a8555c1d4818feb2188e6a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODoyNjoxOFrOGN0qTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODoyNjoxOFrOGN0qTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0NzQ2OA==", "bodyText": "Just to clarify on my earlier point. This should not have boolean transactionEnabled as a parameter. transactionEnabled\nis a Kafka specific parameter and should be in the Kafka layer (AbstractKafkaIndexingServiceTest). This layer (AbstractStreamIndexingTest) should just get a eventWriter and write using the writer.", "url": "https://github.com/apache/druid/pull/9783#discussion_r417147468", "createdAt": "2020-04-29T08:26:18Z", "author": {"login": "maytasm"}, "path": "integration-tests/src/test/java/org/apache/druid/tests/indexer/AbstractStreamIndexingTest.java", "diffHunk": "@@ -67,92 +92,147 @@\n   private IntegrationTestingConfig config;\n \n   private StreamAdminClient streamAdminClient;\n-  private WikipediaStreamEventStreamGenerator wikipediaStreamEventGenerator;\n \n   abstract StreamAdminClient createStreamAdminClient(IntegrationTestingConfig config) throws Exception;\n-  abstract StreamEventWriter createStreamEventWriter(IntegrationTestingConfig config) throws Exception;\n-  abstract Function<String, String> generateStreamIngestionPropsTransform(String streamName,\n-                                                                          String fullDatasourceName,\n-                                                                          IntegrationTestingConfig config);\n+\n+  abstract StreamEventWriter createStreamEventWriter(IntegrationTestingConfig config, boolean transactionEnabled)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88601d89b9b63abad4a8555c1d4818feb2188e6a"}, "originalPosition": 84}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55e1b5f3b46b92f588970e2b605dbf35b0fc3332", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/55e1b5f3b46b92f588970e2b605dbf35b0fc3332", "committedDate": "2020-04-29T18:47:30Z", "message": "some readme"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2249, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}