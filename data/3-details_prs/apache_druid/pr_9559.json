{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMzUzMDIx", "number": 9559, "title": "error on value counter overflow instead of writing sad segments", "bodyText": "Description\nThis PR fixes an integer overflow issue if too many values are written to a column within a single segment, preferring to fail at segment creation time instead of write a sad segment with negative values.\nThis issue was first noticed with multi-value columns, exploding at query time with an error of the form:\norg.apache.druid.java.util.common.IAE: Index[-131072] < 0\n\tat org.apache.druid.segment.data.GenericIndexed.checkIndex(GenericIndexed.java:269)\n\tat org.apache.druid.segment.data.GenericIndexed.access$300(GenericIndexed.java:79)\n\tat org.apache.druid.segment.data.GenericIndexed$3.get(GenericIndexed.java:696)\n\tat org.apache.druid.segment.data.CompressedVSizeColumnarIntsSupplier$CompressedVSizeColumnarInts.loadBuffer(CompressedVSizeColumnarIntsSupplier.java:437)\n\tat org.apache.druid.segment.data.CompressedVSizeColumnarIntsSupplier$CompressedVSizeColumnarInts.get(CompressedVSizeColumnarIntsSupplier.java:350)\n\tat org.apache.druid.segment.data.SliceIndexedInts.get(SliceIndexedInts.java:60)\n\nbut would also occur for any serializer given more than Integer.MAX_VALUES rows as input. tl;dr too many values were written to a single segment so the 'offsets' portion of the multi-value column overflowed into negative numbers.\nTo fix, primitive column serializers now check the number of values (row count in most cases, total number of values for the case of multi-value strings) to ensure that it does not extend beyond the values that will be expressed in the column header and won't cause any issues at query time. A new exception, ColumnCapacityExceededException has been added which will give an error message that suggests\nToo many values to store for %s column, try reducing maxRowsPerSegment\n\nwhere %s is the column name (which all the serializers now know).\nI added a bunch of tests to confirm that this works, and also marked them all @Ignore because they take forever to run. The same IAE error can be replicated by running V3CompressedVSizeColumnarMultiIntsSerializerTest.testTooManyValues without the modifications to check that overflow has occurred.\nI also added a CompressedDoublesSerdeTest that copies CompressedFloatsSerdeTest since i noticed there wasn't a test for double columns.\nFinally, I ran into an issue with IntermediateColumnarLongsSerializer that made it so that I could not test the case when you write too many values to the column, as it must store the entire column on heap while it determines the best encoding, so my attempts to run the test were met with an oom exception. This should probably be fixed, or we should advise against using 'auto' encoding for larger segments, but I did neither in this PR.\n\nThis PR has:\n\n been self-reviewed.\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths.\n added integration tests.\n been tested in a test Druid cluster.\n\n\n\nKey changed/added classes in this PR\n\nPrimitive column serializers and related tests", "createdAt": "2020-03-25T02:44:05Z", "url": "https://github.com/apache/druid/pull/9559", "merged": true, "mergeCommit": {"oid": "2c49f6d89acdf1e15f6bc339321f0e78066e2e42"}, "closed": true, "closedAt": "2020-03-26T23:54:49Z", "author": {"login": "clintropolis"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQ-I-JgH2gAyMzkzMzUzMDIxOjVjMzM1NmZkYWFmYjcwYjdlNGEwZmExYmI4NzM5NTRhZjhjN2Y4YmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRlE7gAFqTM4MjQ5NzgyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5c3356fdaafb70b7e4a0fa1bb873954af8c7f8be", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/5c3356fdaafb70b7e4a0fa1bb873954af8c7f8be", "committedDate": "2020-03-25T02:32:47Z", "message": "error on value counter overflow instead of writing sad segments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwODI5MTYz", "url": "https://github.com/apache/druid/pull/9559#pullrequestreview-380829163", "createdAt": "2020-03-25T02:56:36Z", "commit": {"oid": "5c3356fdaafb70b7e4a0fa1bb873954af8c7f8be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjo1NjozNlrOF7KeCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMjo1NjozNlrOF7KeCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU4MTgzNA==", "bodyText": "+1 for this operator friendly error message", "url": "https://github.com/apache/druid/pull/9559#discussion_r397581834", "createdAt": "2020-03-25T02:56:36Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/data/ColumnCapacityExceededException.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.data;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.druid.java.util.common.StringUtils;\n+\n+public class ColumnCapacityExceededException extends RuntimeException\n+{\n+  @VisibleForTesting\n+  public static String formatMessage(String columnName)\n+  {\n+    return StringUtils.format(\n+        \"Too many values to store for %s column, try reducing maxRowsPerSegment\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c3356fdaafb70b7e4a0fa1bb873954af8c7f8be"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNzQwMzM1", "url": "https://github.com/apache/druid/pull/9559#pullrequestreview-381740335", "createdAt": "2020-03-26T06:57:06Z", "commit": {"oid": "5c3356fdaafb70b7e4a0fa1bb873954af8c7f8be"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMzE5ODUy", "url": "https://github.com/apache/druid/pull/9559#pullrequestreview-382319852", "createdAt": "2020-03-26T18:53:52Z", "commit": {"oid": "5c3356fdaafb70b7e4a0fa1bb873954af8c7f8be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODo1Mzo1M1rOF8Vx6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODo1Mzo1M1rOF8Vx6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxNTcyMQ==", "bodyText": "javadocs please. What does the size indicate? Number of rows in the column? Or space it's taking up. Reading the code it looks like it's the former", "url": "https://github.com/apache/druid/pull/9559#discussion_r398815721", "createdAt": "2020-03-26T18:53:53Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/segment/data/ColumnarDoublesSerializer.java", "diffHunk": "@@ -29,5 +29,6 @@\n public interface ColumnarDoublesSerializer extends Serializer\n {\n   void open() throws IOException;\n+  int size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c3356fdaafb70b7e4a0fa1bb873954af8c7f8be"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNDQ5NDA3", "url": "https://github.com/apache/druid/pull/9559#pullrequestreview-382449407", "createdAt": "2020-03-26T21:56:15Z", "commit": {"oid": "5c3356fdaafb70b7e4a0fa1bb873954af8c7f8be"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNDc1MTc3", "url": "https://github.com/apache/druid/pull/9559#pullrequestreview-382475177", "createdAt": "2020-03-26T22:52:47Z", "commit": {"oid": "5c3356fdaafb70b7e4a0fa1bb873954af8c7f8be"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNDk3ODI3", "url": "https://github.com/apache/druid/pull/9559#pullrequestreview-382497827", "createdAt": "2020-03-26T23:54:40Z", "commit": {"oid": "5c3356fdaafb70b7e4a0fa1bb873954af8c7f8be"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2716, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}