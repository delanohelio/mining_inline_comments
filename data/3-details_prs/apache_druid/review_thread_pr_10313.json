{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyMjgxMzY0", "number": 10313, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNTo0OTo1OVrOEb6X0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNTo0OTo1OVrOEb6X0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzAzMzc3OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNTo0OTo1OVrOHGIgfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzoxNjo0OFrOHGh8DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE5Mjg5NQ==", "bodyText": "I don't think we should have a property for this, but if we did, it should be set through Guice injection rather than through System.getProperty. That way, it'd work in either a runtime props file or a system property.\nWe won't actually see \"1\" in practice AFAIK, since optimize() will get run, and that'll turn the In filter into a Selector filter.\nSo if this is the right default, I think it'd be better to remove the code.", "url": "https://github.com/apache/druid/pull/10313#discussion_r476192895", "createdAt": "2020-08-25T05:49:59Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -80,7 +80,8 @@\n {\n   // determined through benchmark that binary search on long[] is faster than HashSet until ~16 elements\n   // Hashing threshold is not applied to String for now, String still uses ImmutableSortedSet\n-  public static final int NUMERIC_HASHING_THRESHOLD = 16;\n+  public static final int NUMERIC_HASHING_THRESHOLD =\n+      Integer.parseInt(System.getProperty(\"druid.query.filter.inDimFilter.numericHashingThreshold\", \"1\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69a2dbfb4319c05f063ec05e82eb2e66ecab55f3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUwMTkyNQ==", "bodyText": "ha I didn't look at the optimize code in the InDimFilter before.\nSelectorDimFilter.optimize() produces an InDimFilter and InDimFilter.optimize() produces a SelectorDimFilter. One of those must be wrong \ud83d\ude05\nEither way, it probably doesn't make a difference with 1 element.\nI put the default in mainly because of my paranoia, just in case this causes a perf degradation for a specific shape of query that isn't covered by my benchmarks. I'll run them a few more times and then just drop this code path.", "url": "https://github.com/apache/druid/pull/10313#discussion_r476501925", "createdAt": "2020-08-25T14:39:50Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -80,7 +80,8 @@\n {\n   // determined through benchmark that binary search on long[] is faster than HashSet until ~16 elements\n   // Hashing threshold is not applied to String for now, String still uses ImmutableSortedSet\n-  public static final int NUMERIC_HASHING_THRESHOLD = 16;\n+  public static final int NUMERIC_HASHING_THRESHOLD =\n+      Integer.parseInt(System.getProperty(\"druid.query.filter.inDimFilter.numericHashingThreshold\", \"1\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE5Mjg5NQ=="}, "originalCommit": {"oid": "69a2dbfb4319c05f063ec05e82eb2e66ecab55f3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYwOTU0OQ==", "bodyText": "One of those must be wrong \ud83d\ude05\n\nSelectorDimFilter calls new InDimFilter(dimension, Collections.singleton(value), extractionFn, filterTuning).optimize(), so you get another SelectorDimFilter back \ud83d\ude42\nThere's no comment about why, but I assume it's because InDimFilter has the optimizeLookup() code.\n\nI put the default in mainly because of my paranoia, just in case this causes a perf degradation for a specific shape of query that isn't covered by my benchmarks.\n\nPeople generally aren't going to have the patience to research each of these settings, so it's usually better if we do some diligence to find something that should work (relatively) universally. If that involves removing code paths then it also helps us reduce the amount of code that needs to be tested.", "url": "https://github.com/apache/druid/pull/10313#discussion_r476609549", "createdAt": "2020-08-25T17:16:48Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/filter/InDimFilter.java", "diffHunk": "@@ -80,7 +80,8 @@\n {\n   // determined through benchmark that binary search on long[] is faster than HashSet until ~16 elements\n   // Hashing threshold is not applied to String for now, String still uses ImmutableSortedSet\n-  public static final int NUMERIC_HASHING_THRESHOLD = 16;\n+  public static final int NUMERIC_HASHING_THRESHOLD =\n+      Integer.parseInt(System.getProperty(\"druid.query.filter.inDimFilter.numericHashingThreshold\", \"1\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE5Mjg5NQ=="}, "originalCommit": {"oid": "69a2dbfb4319c05f063ec05e82eb2e66ecab55f3"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3108, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}