{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNzk2MjA5", "number": 10499, "title": "support for vectorizing expressions with non-existent inputs, more consistent type handling for non-vectorized expressions", "bodyText": "Description\nThis PR adds support for vectorizing expressions in cases where inputs are missing, using either null or default values as inputs, depending on the value of druid.generic.useDefaultValueForNull.\nThis PR also makes non-vectorized expression type handling a bit more consistent across different types of expressions. Major changes here include operator expressions will now try to preserve the type when one of the arguments is null instead of always producing double values, and math functions now follow logic similar to the operators.\nTagging PR as release notes/incompatible because the changes cause some expressions to output slightly different results (typically longs instead of doubles). Examples:\nlongColumn + nonExistentColumn -> longColumn + 0L instead of (double) longColumn + 0.0\nand math functions will produce output from non-existent inputs in default mode instead of always producing zeros:\nmax(longColumn, nonExistentColumn) -> max(longColumn, 0L)\n\nThis PR has:\n\n been self-reviewed.\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths, ensuring the threshold for code coverage is met.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-10-09T20:06:51Z", "url": "https://github.com/apache/druid/pull/10499", "merged": true, "mergeCommit": {"oid": "d0821de8540686eb64a9b3e22fe4a637b58920ef"}, "closed": true, "closedAt": "2020-10-27T02:55:25Z", "author": {"login": "clintropolis"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQ6Pp6gH2gAyNTAwNzk2MjA5OmQzYzMzNDdiM2NmMmM5ZTNjNDhiMjAxMWY2YjZkYTJhZGUxMTE3OWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWc94TAFqTUxNzI0NzUxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d3c3347b3cf2c9e3c48b2011f6b6da2ade11179c", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/d3c3347b3cf2c9e3c48b2011f6b6da2ade11179c", "committedDate": "2020-10-09T18:11:37Z", "message": "support for vectorizing expressions with non-existent inputs, more consistent type handling for non-vectorized expressions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24a0bebcdf7ab346dc8930e058eb7a552312297c", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/24a0bebcdf7ab346dc8930e058eb7a552312297c", "committedDate": "2020-10-09T19:23:30Z", "message": "inspector"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMzEzMzE2", "url": "https://github.com/apache/druid/pull/10499#pullrequestreview-512313316", "createdAt": "2020-10-20T03:56:31Z", "commit": {"oid": "24a0bebcdf7ab346dc8930e058eb7a552312297c"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMzo1NjozMlrOHkpuIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMzo1NjozMlrOHkpuIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE5NDMzOQ==", "bodyText": "What do result and other mean?", "url": "https://github.com/apache/druid/pull/10499#discussion_r508194339", "createdAt": "2020-10-20T03:56:32Z", "author": {"login": "jihoonson"}, "path": "core/src/main/java/org/apache/druid/math/expr/ExprTypeConversion.java", "diffHunk": "@@ -31,22 +31,40 @@\n    * Infer the output type of a list of possible 'conditional' expression outputs (where any of these could be the\n    * output expression if the corresponding case matching expression evaluates to true)\n    */\n-  static ExprType conditional(Expr.InputBindingTypes inputTypes, List<Expr> args)\n+  static ExprType conditional(Expr.InputBindingInspector inspector, List<Expr> args)\n   {\n     ExprType type = null;\n     for (Expr arg : args) {\n       if (arg.isNullLiteral()) {\n         continue;\n       }\n       if (type == null) {\n-        type = arg.getOutputType(inputTypes);\n+        type = arg.getOutputType(inspector);\n       } else {\n-        type = doubleMathFunction(type, arg.getOutputType(inputTypes));\n+        type = function(type, arg.getOutputType(inspector));\n       }\n     }\n     return type;\n   }\n \n+  /**\n+   * Given 2 'input' types, which might not be fully trustable, choose the most appropriate combined type for\n+   * non-vectorized, per-row type detection. In this mode, null values are {@link ExprType#STRING} typed, despite\n+   * potentially coming from an underlying numeric column. This method is not well suited for array handling\n+   */\n+  public static ExprType autoDetect(ExprEval result, ExprEval other)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24a0bebcdf7ab346dc8930e058eb7a552312297c"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MTg3NzIx", "url": "https://github.com/apache/druid/pull/10499#pullrequestreview-515187721", "createdAt": "2020-10-22T23:33:55Z", "commit": {"oid": "24a0bebcdf7ab346dc8930e058eb7a552312297c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMzozMzo1NVrOHm3UIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMzo1OTo1N1rOHm361A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUxNDIxMA==", "bodyText": "Can you update the javadoc for this method with the mixed type case and the reasoning behind preferring the non-string type?", "url": "https://github.com/apache/druid/pull/10499#discussion_r510514210", "createdAt": "2020-10-22T23:33:55Z", "author": {"login": "jon-wei"}, "path": "core/src/main/java/org/apache/druid/math/expr/ExprTypeConversion.java", "diffHunk": "@@ -74,6 +93,15 @@ public static ExprType operator(@Nullable ExprType type, @Nullable ExprType othe\n       return ExprType.STRING;\n     }\n \n+    // non-vectorized expressions\n+    if (type == ExprType.STRING) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24a0bebcdf7ab346dc8930e058eb7a552312297c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUxNDY3OQ==", "bodyText": "Can you add a part to the javadoc about when the input types would not be trustable (is it because of the string nulls from numeric columns, or are there other cases)?", "url": "https://github.com/apache/druid/pull/10499#discussion_r510514679", "createdAt": "2020-10-22T23:35:29Z", "author": {"login": "jon-wei"}, "path": "core/src/main/java/org/apache/druid/math/expr/ExprTypeConversion.java", "diffHunk": "@@ -31,22 +31,40 @@\n    * Infer the output type of a list of possible 'conditional' expression outputs (where any of these could be the\n    * output expression if the corresponding case matching expression evaluates to true)\n    */\n-  static ExprType conditional(Expr.InputBindingTypes inputTypes, List<Expr> args)\n+  static ExprType conditional(Expr.InputBindingInspector inspector, List<Expr> args)\n   {\n     ExprType type = null;\n     for (Expr arg : args) {\n       if (arg.isNullLiteral()) {\n         continue;\n       }\n       if (type == null) {\n-        type = arg.getOutputType(inputTypes);\n+        type = arg.getOutputType(inspector);\n       } else {\n-        type = doubleMathFunction(type, arg.getOutputType(inputTypes));\n+        type = function(type, arg.getOutputType(inspector));\n       }\n     }\n     return type;\n   }\n \n+  /**\n+   * Given 2 'input' types, which might not be fully trustable, choose the most appropriate combined type for\n+   * non-vectorized, per-row type detection. In this mode, null values are {@link ExprType#STRING} typed, despite\n+   * potentially coming from an underlying numeric column. This method is not well suited for array handling\n+   */\n+  public static ExprType autoDetect(ExprEval result, ExprEval other)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE5NDMzOQ=="}, "originalCommit": {"oid": "24a0bebcdf7ab346dc8930e058eb7a552312297c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUyNDExNg==", "bodyText": "shoulComputeOutput -> shouldComputeOutput", "url": "https://github.com/apache/druid/pull/10499#discussion_r510524116", "createdAt": "2020-10-22T23:59:57Z", "author": {"login": "jon-wei"}, "path": "processing/src/main/java/org/apache/druid/segment/virtual/ExpressionPlanner.java", "diffHunk": "@@ -135,18 +137,29 @@ public static ExpressionPlan plan(ColumnInspector inspector, Expr expression)\n         traits.add(ExpressionPlan.Trait.NON_SCALAR_INPUTS);\n       }\n \n-      if (!maybeMultiValued.isEmpty()) {\n+      if (!noCapabilities.isEmpty()) {\n         traits.add(ExpressionPlan.Trait.UNKNOWN_INPUTS);\n       }\n \n+      if (!maybeMultiValued.isEmpty()) {\n+        traits.add(ExpressionPlan.Trait.INCOMPLETE_INPUTS);\n+      }\n+\n       // if expression needs transformed, lets do it\n       if (!needsApplied.isEmpty()) {\n         traits.add(ExpressionPlan.Trait.NEEDS_APPLIED);\n       }\n     }\n \n-    // only set output type\n-    if (ExpressionPlan.none(traits, ExpressionPlan.Trait.UNKNOWN_INPUTS, ExpressionPlan.Trait.NEEDS_APPLIED)) {\n+    // only set output type if we are pretty confident about input types\n+    final boolean shoulComputeOutput = ExpressionPlan.none(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24a0bebcdf7ab346dc8930e058eb7a552312297c"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a537344c7fb3718f7a77110e7a45332535c21e23", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/a537344c7fb3718f7a77110e7a45332535c21e23", "committedDate": "2020-10-23T03:40:25Z", "message": "Merge remote-tracking branch 'upstream/master' into vector-nil-expr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5acd0f03ddd51326edb1d0c54608e242067bd3aa", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/5acd0f03ddd51326edb1d0c54608e242067bd3aa", "committedDate": "2020-10-23T04:12:55Z", "message": "changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06b233c99269f3f19194dbbcaad6d888ac53c91e", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/06b233c99269f3f19194dbbcaad6d888ac53c91e", "committedDate": "2020-10-23T04:21:04Z", "message": "more test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a58eb31d7fe76f7f66844ab2f9c47b284652eb8", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/6a58eb31d7fe76f7f66844ab2f9c47b284652eb8", "committedDate": "2020-10-23T04:22:14Z", "message": "clean"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MjQ3NTE0", "url": "https://github.com/apache/druid/pull/10499#pullrequestreview-517247514", "createdAt": "2020-10-26T23:28:30Z", "commit": {"oid": "6a58eb31d7fe76f7f66844ab2f9c47b284652eb8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3355, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}