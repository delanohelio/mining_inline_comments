{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyODc4MzY5", "number": 9337, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMjo0NToyNVrODeTXaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxOTowMTozN1rODe7H_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTAxMTYwOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/expression/TimestampExtractExprMacro.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMjo0NToyNVrOFnXcgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDowMzoyOVrOFodmdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgyMjkxMg==", "bodyText": "I thought about making this an error in our inspection profile, but CachingCostBalancerStrategy does this, and I'm afraid to make a change in that class given the potential implications around the balancer strategy. I'm un-aware of a way to simulate what impact changing that division would have, so I decided to leave it as is.", "url": "https://github.com/apache/druid/pull/9337#discussion_r376822912", "createdAt": "2020-02-09T22:45:25Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/expression/TimestampExtractExprMacro.java", "diffHunk": "@@ -141,13 +141,13 @@ public ExprEval eval(final ObjectBinding bindings)\n             return ExprEval.of(dateTime.year().get());\n           case DECADE:\n             // The year field divided by 10, See https://www.postgresql.org/docs/10/functions-datetime.html\n-            return ExprEval.of(Math.floor(dateTime.year().get() / 10));\n+            return ExprEval.of(dateTime.year().get() / 10);\n           case CENTURY:\n-            return ExprEval.of(dateTime.centuryOfEra().get() + 1);\n+            return ExprEval.of(Math.ceil((double) dateTime.year().get() / 100));\n           case MILLENNIUM:\n             // Years in the 1900s are in the second millennium. The third millennium started January 1, 2001.\n             // See https://www.postgresql.org/docs/10/functions-datetime.html\n-            return ExprEval.of(Math.round(Math.ceil(dateTime.year().get() / 1000)));\n+            return ExprEval.of(Math.round(Math.ceil((double) dateTime.year().get() / 1000)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3694222e8bcd160d7b8652227b8de43af9e982c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NTQ3Nw==", "bodyText": "Could it be suppressed in that one location?", "url": "https://github.com/apache/druid/pull/9337#discussion_r377945477", "createdAt": "2020-02-11T22:46:34Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/expression/TimestampExtractExprMacro.java", "diffHunk": "@@ -141,13 +141,13 @@ public ExprEval eval(final ObjectBinding bindings)\n             return ExprEval.of(dateTime.year().get());\n           case DECADE:\n             // The year field divided by 10, See https://www.postgresql.org/docs/10/functions-datetime.html\n-            return ExprEval.of(Math.floor(dateTime.year().get() / 10));\n+            return ExprEval.of(dateTime.year().get() / 10);\n           case CENTURY:\n-            return ExprEval.of(dateTime.centuryOfEra().get() + 1);\n+            return ExprEval.of(Math.ceil((double) dateTime.year().get() / 100));\n           case MILLENNIUM:\n             // Years in the 1900s are in the second millennium. The third millennium started January 1, 2001.\n             // See https://www.postgresql.org/docs/10/functions-datetime.html\n-            return ExprEval.of(Math.round(Math.ceil(dateTime.year().get() / 1000)));\n+            return ExprEval.of(Math.round(Math.ceil((double) dateTime.year().get() / 1000)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgyMjkxMg=="}, "originalCommit": {"oid": "b3694222e8bcd160d7b8652227b8de43af9e982c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk3MjM0MQ==", "bodyText": "Good suggestion - done.", "url": "https://github.com/apache/druid/pull/9337#discussion_r377972341", "createdAt": "2020-02-12T00:03:29Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/expression/TimestampExtractExprMacro.java", "diffHunk": "@@ -141,13 +141,13 @@ public ExprEval eval(final ObjectBinding bindings)\n             return ExprEval.of(dateTime.year().get());\n           case DECADE:\n             // The year field divided by 10, See https://www.postgresql.org/docs/10/functions-datetime.html\n-            return ExprEval.of(Math.floor(dateTime.year().get() / 10));\n+            return ExprEval.of(dateTime.year().get() / 10);\n           case CENTURY:\n-            return ExprEval.of(dateTime.centuryOfEra().get() + 1);\n+            return ExprEval.of(Math.ceil((double) dateTime.year().get() / 100));\n           case MILLENNIUM:\n             // Years in the 1900s are in the second millennium. The third millennium started January 1, 2001.\n             // See https://www.postgresql.org/docs/10/functions-datetime.html\n-            return ExprEval.of(Math.round(Math.ceil(dateTime.year().get() / 1000)));\n+            return ExprEval.of(Math.round(Math.ceil((double) dateTime.year().get() / 1000)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgyMjkxMg=="}, "originalCommit": {"oid": "b3694222e8bcd160d7b8652227b8de43af9e982c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTAxMjM5OnYy", "diffSide": "RIGHT", "path": "sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMjo0NjozMFrOFnXc3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQyMjo0NjozMFrOFnXc3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgyMzAwNA==", "bodyText": "These values come from BaseCalciteQueryTest#TIMESERIES_CONTEXT_DEFAULT which is 2000-01-01T00:00:00Z", "url": "https://github.com/apache/druid/pull/9337#discussion_r376823004", "createdAt": "2020-02-09T22:46:30Z", "author": {"login": "suneet-s"}, "path": "sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java", "diffHunk": "@@ -7730,7 +7730,7 @@ public void testFilterOnTimeExtractWithVariousTimeUnits() throws Exception\n           + \"AND EXTRACT(ISODOW FROM __time) = 6\\n\"\n           + \"AND EXTRACT(ISOYEAR FROM __time) = 2000\\n\"\n           + \"AND EXTRACT(DECADE FROM __time) = 200\\n\"\n-          + \"AND EXTRACT(CENTURY FROM __time) = 21\\n\"\n+          + \"AND EXTRACT(CENTURY FROM __time) = 20\\n\"\n           + \"AND EXTRACT(MILLENNIUM FROM __time) = 2\\n\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3694222e8bcd160d7b8652227b8de43af9e982c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzUxMzIzOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/expression/TimestampExtractExprMacro.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODo1Nzo1MlrOFoVHkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODo1Nzo1MlrOFoVHkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzMzM2MA==", "bodyText": "You don't need Math.round if the result is already Math.ceil since Math.ceil returns int", "url": "https://github.com/apache/druid/pull/9337#discussion_r377833360", "createdAt": "2020-02-11T18:57:52Z", "author": {"login": "maytasm"}, "path": "processing/src/main/java/org/apache/druid/query/expression/TimestampExtractExprMacro.java", "diffHunk": "@@ -141,13 +141,13 @@ public ExprEval eval(final ObjectBinding bindings)\n             return ExprEval.of(dateTime.year().get());\n           case DECADE:\n             // The year field divided by 10, See https://www.postgresql.org/docs/10/functions-datetime.html\n-            return ExprEval.of(Math.floor(dateTime.year().get() / 10));\n+            return ExprEval.of(dateTime.year().get() / 10);\n           case CENTURY:\n-            return ExprEval.of(dateTime.centuryOfEra().get() + 1);\n+            return ExprEval.of(Math.ceil((double) dateTime.year().get() / 100));\n           case MILLENNIUM:\n             // Years in the 1900s are in the second millennium. The third millennium started January 1, 2001.\n             // See https://www.postgresql.org/docs/10/functions-datetime.html\n-            return ExprEval.of(Math.round(Math.ceil(dateTime.year().get() / 1000)));\n+            return ExprEval.of(Math.round(Math.ceil((double) dateTime.year().get() / 1000)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3694222e8bcd160d7b8652227b8de43af9e982c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzUyNTcyOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/expression/TimestampExtractExprMacro.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxOTowMTozN1rOFoVPpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxOTo1MTo1OVrOFoW5Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzNTQzMQ==", "bodyText": "Not sure if you need to handle BC?\nCan you add tests?\ni.e.\n-- SELECT EXTRACT(CENTURY FROM DATE '0101-12-31 BC');\n-- SELECT EXTRACT(CENTURY FROM DATE '0100-12-31 BC');\n-- SELECT EXTRACT(MILLENNIUM FROM DATE '0001-12-31 BC');\n-- SELECT EXTRACT(DECADE FROM DATE '0002-12-31 BC');\n-- SELECT EXTRACT(DECADE FROM DATE '0011-01-01 BC');\n-- SELECT EXTRACT(DECADE FROM DATE '0012-12-31 BC');", "url": "https://github.com/apache/druid/pull/9337#discussion_r377835431", "createdAt": "2020-02-11T19:01:37Z", "author": {"login": "maytasm"}, "path": "processing/src/main/java/org/apache/druid/query/expression/TimestampExtractExprMacro.java", "diffHunk": "@@ -141,13 +141,13 @@ public ExprEval eval(final ObjectBinding bindings)\n             return ExprEval.of(dateTime.year().get());\n           case DECADE:\n             // The year field divided by 10, See https://www.postgresql.org/docs/10/functions-datetime.html\n-            return ExprEval.of(Math.floor(dateTime.year().get() / 10));\n+            return ExprEval.of(dateTime.year().get() / 10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3694222e8bcd160d7b8652227b8de43af9e982c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzNzYwNA==", "bodyText": "someone collected statistics for computers back in 101 BC \ud83d\ude02\nI'll add tests for correctness though \ud83d\udc4d", "url": "https://github.com/apache/druid/pull/9337#discussion_r377837604", "createdAt": "2020-02-11T19:05:35Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/expression/TimestampExtractExprMacro.java", "diffHunk": "@@ -141,13 +141,13 @@ public ExprEval eval(final ObjectBinding bindings)\n             return ExprEval.of(dateTime.year().get());\n           case DECADE:\n             // The year field divided by 10, See https://www.postgresql.org/docs/10/functions-datetime.html\n-            return ExprEval.of(Math.floor(dateTime.year().get() / 10));\n+            return ExprEval.of(dateTime.year().get() / 10);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzNTQzMQ=="}, "originalCommit": {"oid": "b3694222e8bcd160d7b8652227b8de43af9e982c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzNzcyOA==", "bodyText": "^ Please verify against Postgresql", "url": "https://github.com/apache/druid/pull/9337#discussion_r377837728", "createdAt": "2020-02-11T19:05:48Z", "author": {"login": "maytasm"}, "path": "processing/src/main/java/org/apache/druid/query/expression/TimestampExtractExprMacro.java", "diffHunk": "@@ -141,13 +141,13 @@ public ExprEval eval(final ObjectBinding bindings)\n             return ExprEval.of(dateTime.year().get());\n           case DECADE:\n             // The year field divided by 10, See https://www.postgresql.org/docs/10/functions-datetime.html\n-            return ExprEval.of(Math.floor(dateTime.year().get() / 10));\n+            return ExprEval.of(dateTime.year().get() / 10);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzNTQzMQ=="}, "originalCommit": {"oid": "b3694222e8bcd160d7b8652227b8de43af9e982c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg2MjQ3MQ==", "bodyText": "I decided it might be better not to support BC.\nSince in ISO format, the date needs to be specified like -0100-12-31 to signify the year 0101-12-31 BC This would make the code complicated for a use case that is likely never to happen \ud83e\udd1e", "url": "https://github.com/apache/druid/pull/9337#discussion_r377862471", "createdAt": "2020-02-11T19:51:59Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/expression/TimestampExtractExprMacro.java", "diffHunk": "@@ -141,13 +141,13 @@ public ExprEval eval(final ObjectBinding bindings)\n             return ExprEval.of(dateTime.year().get());\n           case DECADE:\n             // The year field divided by 10, See https://www.postgresql.org/docs/10/functions-datetime.html\n-            return ExprEval.of(Math.floor(dateTime.year().get() / 10));\n+            return ExprEval.of(dateTime.year().get() / 10);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzNTQzMQ=="}, "originalCommit": {"oid": "b3694222e8bcd160d7b8652227b8de43af9e982c"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2747, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}