{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1ODk0MDU0", "number": 9587, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMToxMDo1NVrODvvj8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjoxNTowMFrODv2OJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzg4OTEzOnYy", "diffSide": "RIGHT", "path": "web-console/src/dialogs/lookup-edit-dialog/lookup-edit-dialog.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMToxMDo1NVrOGCWR5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMToxMDo1NVrOGCWR5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExNTM2Ng==", "bodyText": "caps?", "url": "https://github.com/apache/druid/pull/9587#discussion_r405115366", "createdAt": "2020-04-07T21:10:55Z", "author": {"login": "vogievetsky"}, "path": "web-console/src/dialogs/lookup-edit-dialog/lookup-edit-dialog.tsx", "diffHunk": "@@ -124,34 +202,302 @@ export const LookupEditDialog = React.memo(function LookupEditDialog(props: Look\n           }\n         />\n       </FormGroup>\n-\n-      <FormGroup className=\"lookup-label\" label=\"Spec:\" />\n-\n-      <AceEditor\n-        className=\"lookup-edit-dialog-textarea\"\n-        mode=\"hjson\"\n-        theme=\"solarized_dark\"\n-        onChange={(e: any) => onChange('lookupEditSpec', e)}\n-        fontSize={12}\n-        height=\"40vh\"\n-        width=\"auto\"\n-        showPrintMargin={false}\n-        showGutter={false}\n-        value={lookupSpec}\n-        editorProps={{ $blockScrolling: Infinity }}\n-        setOptions={{\n-          tabSize: 2,\n+      <AutoForm\n+        fields={[\n+          {\n+            name: 'type',\n+            type: 'string',\n+            suggestions: ['map', 'cachedNamespace'],\n+            adjustment: model => {\n+              if (\n+                model.type === 'map' &&\n+                model.extractionNamespace &&\n+                model.extractionNamespace.type\n+              ) {\n+                return model;\n+              }\n+              model.extractionNamespace = { type: 'uri', namespaceParseSpec: { format: 'csv' } };\n+              return model;\n+            },\n+          },\n+          {\n+            name: 'map',\n+            type: 'json',\n+            defined: model => {\n+              return model.type === 'map';\n+            },\n+          },\n+          {\n+            name: 'extractionNamespace.type',\n+            type: 'string',\n+            label: 'Globally cached lookup type',\n+            placeholder: 'uri',\n+            suggestions: ['uri', 'jdbc'],\n+            defined: model => model.type === 'cachedNamespace',\n+          },\n+          {\n+            name: 'extractionNamespace.uriPrefix',\n+            type: 'string',\n+            label: 'URI prefix',\n+            info:\n+              'A URI which specifies a directory (or other searchable resource) in which to search for files',\n+            placeholder: 's3://bucket/some/key/prefix/',\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'uri',\n+          },\n+          {\n+            name: 'extractionNamespace.fileRegex',\n+            type: 'string',\n+            label: 'File regex',\n+            placeholder: 'renames-[0-9]*\\\\.gz',\n+            info:\n+              'Optional regex for matching the file name under uriPrefix. Only used if uriPrefix is used',\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'uri',\n+          },\n+          {\n+            name: 'extractionNamespace.namespaceParseSpec.format',\n+            type: 'string',\n+            label: 'Format',\n+            defaultValue: 'csv',\n+            suggestions: ['csv', 'tsv', 'customJson', 'simpleJson'],\n+            // todo needs info\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'uri',\n+          },\n+          {\n+            name: 'extractionNamespace.namespaceParseSpec.columns',\n+            type: 'string-array',\n+            label: 'Columns',\n+            placeholder: `[\"key\", \"value\"]`,\n+            info: 'The list of columns in the csv file',\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'uri' &&\n+              model.extractionNamespace.namespaceParseSpec &&\n+              (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+                model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+          },\n+          {\n+            name: 'extractionNamespace.namespaceParseSpec.keyColumn',\n+            type: 'string',\n+            label: 'Key column',\n+            placeholder: 'Key',\n+            info: 'The name of the column containing the key',\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'uri' &&\n+              model.extractionNamespace.namespaceParseSpec &&\n+              (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+                model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+          },\n+          {\n+            name: 'extractionNamespace.namespaceParseSpec.valueColumn',\n+            type: 'string',\n+            label: 'Value column',\n+            placeholder: 'Value',\n+            info: 'The name of the column containing the value',\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'uri' &&\n+              model.extractionNamespace.namespaceParseSpec &&\n+              (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+                model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+          },\n+          {\n+            name: 'extractionNamespace.namespaceParseSpec.hasHeaderRow',\n+            type: 'boolean',\n+            label: 'Has header row',\n+            defaultValue: false,\n+            info: `A flag to indicate that column information can be extracted from the input files' header row`,\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'uri' &&\n+              model.extractionNamespace.namespaceParseSpec &&\n+              (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+                model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+          },\n+          {\n+            name: 'extractionNamespace.namespaceParseSpec.skipHeaderRows',\n+            type: 'number',\n+            label: 'Skip header rows',\n+            placeholder: '0',\n+            info: `Number of header rows to be skipped`,\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'uri' &&\n+              model.extractionNamespace.namespaceParseSpec &&\n+              (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+                model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+          },\n+          {\n+            name: 'extractionNamespace.namespaceParseSpec.delimiter',\n+            type: 'string',\n+            label: 'Delimiter',\n+            placeholder: `\\t`,\n+            info: `The delimiter in the file`,\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'uri' &&\n+              model.extractionNamespace.namespaceParseSpec &&\n+              model.extractionNamespace.namespaceParseSpec.format === 'tsv',\n+          },\n+          {\n+            name: 'extractionNamespace.namespaceParseSpec.listDelimiter',\n+            type: 'string',\n+            label: 'List delimiter',\n+            placeholder: `\\u0001`,\n+            info: `The list delimiter in the file\\t`,\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'uri' &&\n+              model.extractionNamespace.namespaceParseSpec &&\n+              model.extractionNamespace.namespaceParseSpec.format === 'tsv',\n+          },\n+          {\n+            name: 'extractionNamespace.namespaceParseSpec.keyFieldName',\n+            type: 'string',\n+            label: 'Key field name',\n+            placeholder: `key`,\n+            info: `The field name of the key`,\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'uri' &&\n+              model.extractionNamespace.namespaceParseSpec &&\n+              model.extractionNamespace.namespaceParseSpec.format === 'customJson',\n+          },\n+          {\n+            name: 'extractionNamespace.namespaceParseSpec.valueFieldName',\n+            type: 'string',\n+            label: 'Value field name',\n+            placeholder: `value`,\n+            info: `The field name of the value`,\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'uri' &&\n+              model.extractionNamespace.namespaceParseSpec &&\n+              model.extractionNamespace.namespaceParseSpec.format === 'customJson',\n+          },\n+          {\n+            name: 'extractionNamespace.namespace',\n+            type: 'string',\n+            label: 'Namespace',\n+            placeholder: 'some_lookup',\n+            info: `The namespace to define`,\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'jdbc',\n+          },\n+          {\n+            name: 'extractionNamespace.table',\n+            type: 'string',\n+            label: 'Table',\n+            placeholder: 'some_lookup_table',\n+            info: `The table which contains the key value pairs`,\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'jdbc',\n+          },\n+          {\n+            name: 'extractionNamespace.keyColumn',\n+            type: 'string',\n+            label: 'Key column',\n+            placeholder: 'the_old_dim_value',\n+            info: `The column in table which contains the keys`,\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'jdbc',\n+          },\n+          {\n+            name: 'extractionNamespace.valueColumn',\n+            type: 'string',\n+            label: 'Value column',\n+            placeholder: 'the_new_dim_value',\n+            info: `The column in table which contains the values`,\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'jdbc',\n+          },\n+          {\n+            name: 'extractionNamespace.filter',\n+            type: 'json',\n+            label: 'Filter',\n+            info: `The filter to use when selecting lookups, this is used to create a where clause on lookup population`,\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'jdbc',\n+          },\n+          {\n+            name: 'extractionNamespace.tsColumn',\n+            type: 'string',\n+            label: 'TsColumn',\n+            info: `The column in table which contains when the key was updated`,\n+            defined: model =>\n+              model.type === 'cachedNamespace' &&\n+              !!model.extractionNamespace &&\n+              model.extractionNamespace.type === 'jdbc',\n+          },\n+          {\n+            name: 'extractionNamespace.pollPeriod',\n+            type: 'string',\n+            label: 'Poll Period',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7473a61f5fce10e64c80266ca7d4800af6c64b88"}, "originalPosition": 445}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzg5ODkxOnYy", "diffSide": "RIGHT", "path": "web-console/src/dialogs/lookup-edit-dialog/lookup-edit-dialog.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMToxMzo1MVrOGCWX4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMToxMzo1MVrOGCWX4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTExNjg5OA==", "bodyText": "can you extract his whole check into a function please?", "url": "https://github.com/apache/druid/pull/9587#discussion_r405116898", "createdAt": "2020-04-07T21:13:51Z", "author": {"login": "vogievetsky"}, "path": "web-console/src/dialogs/lookup-edit-dialog/lookup-edit-dialog.tsx", "diffHunk": "@@ -93,8 +136,45 @@ export const LookupEditDialog = React.memo(function LookupEditDialog(props: Look\n     }\n   }\n \n-  const disableSubmit =\n-    lookupName === '' || lookupVersion === '' || lookupTier === '' || !validJson(lookupSpec);\n+  let disableSubmit =\n+    lookupName === '' ||\n+    lookupVersion === '' ||\n+    lookupTier === '' ||\n+    lookupSpec.type === '' ||\n+    lookupSpec.type === undefined ||\n+    (lookupSpec.type === 'map' && lookupSpec.map === undefined) ||\n+    (lookupSpec.type === 'cachedNamespace' && lookupSpec.extractionNamespace === undefined);\n+\n+  if (!disableSubmit && lookupSpec.type === 'cachedNamespace' && lookupSpec.extractionNamespace) {\n+    const namespaceParseSpec = lookupSpec.extractionNamespace.namespaceParseSpec;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7473a61f5fce10e64c80266ca7d4800af6c64b88"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDk3MDM0OnYy", "diffSide": "RIGHT", "path": "web-console/src/dialogs/lookup-edit-dialog/lookup-edit-dialog.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjoxMDozOVrOGCgUwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjoxMDozOVrOGCgUwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI3OTkzNg==", "bodyText": "typo: to", "url": "https://github.com/apache/druid/pull/9587#discussion_r405279936", "createdAt": "2020-04-08T06:10:39Z", "author": {"login": "vogievetsky"}, "path": "web-console/src/dialogs/lookup-edit-dialog/lookup-edit-dialog.tsx", "diffHunk": "@@ -93,8 +194,365 @@ export const LookupEditDialog = React.memo(function LookupEditDialog(props: Look\n     }\n   }\n \n-  const disableSubmit =\n-    lookupName === '' || lookupVersion === '' || lookupTier === '' || !validJson(lookupSpec);\n+  const fields = [\n+    {\n+      name: 'type',\n+      type: 'string',\n+      suggestions: ['map', 'cachedNamespace'],\n+      adjustment: (model: LookupSpec) => {\n+        if (model.type === 'map' && model.extractionNamespace && model.extractionNamespace.type) {\n+          return model;\n+        }\n+        model.extractionNamespace = { type: 'uri', namespaceParseSpec: { format: 'csv' } };\n+        return model;\n+      },\n+    },\n+    {\n+      name: 'map',\n+      type: 'json',\n+      defined: (model: LookupSpec) => {\n+        return model.type === 'map';\n+      },\n+    },\n+    {\n+      name: 'extractionNamespace.type',\n+      type: 'string',\n+      label: 'Globally cached lookup type',\n+      placeholder: 'uri',\n+      suggestions: ['uri', 'jdbc'],\n+      defined: (model: LookupSpec) => model.type === 'cachedNamespace',\n+    },\n+    {\n+      name: 'extractionNamespace.uriPrefix',\n+      type: 'string',\n+      label: 'URI prefix',\n+      info:\n+        'A URI which specifies a directory (or other searchable resource) in which to search for files',\n+      placeholder: 's3://bucket/some/key/prefix/',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri',\n+    },\n+    {\n+      name: 'extractionNamespace.fileRegex',\n+      type: 'string',\n+      label: 'File regex',\n+      placeholder: 'renames-[0-9]*\\\\.gz',\n+      info:\n+        'Optional regex for matching the file name under uriPrefix. Only used if uriPrefix is used',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.format',\n+      type: 'string',\n+      label: 'Format',\n+      defaultValue: 'csv',\n+      suggestions: ['csv', 'tsv', 'customJson', 'simpleJson'],\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.columns',\n+      type: 'string-array',\n+      label: 'Columns',\n+      placeholder: `[\"key\", \"value\"]`,\n+      info: 'The list of columns in the csv file',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.keyColumn',\n+      type: 'string',\n+      label: 'Key column',\n+      placeholder: 'Key',\n+      info: 'The name of the column containing the key',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.valueColumn',\n+      type: 'string',\n+      label: 'Value column',\n+      placeholder: 'Value',\n+      info: 'The name of the column containing the value',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.hasHeaderRow',\n+      type: 'boolean',\n+      label: 'Has header row',\n+      defaultValue: false,\n+      info: `A flag to indicate that column information can be extracted from the input files' header row`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.skipHeaderRows',\n+      type: 'number',\n+      label: 'Skip header rows',\n+      placeholder: '0',\n+      info: `Number of header rows to be skipped. The default number of header rows to be skipped is 0.`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.delimiter',\n+      type: 'string',\n+      label: 'Delimiter',\n+      placeholder: `\\t`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        model.extractionNamespace.namespaceParseSpec.format === 'tsv',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.listDelimiter',\n+      type: 'string',\n+      label: 'List delimiter',\n+      placeholder: `\\u0001`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        model.extractionNamespace.namespaceParseSpec.format === 'tsv',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.keyFieldName',\n+      type: 'string',\n+      label: 'Key field name',\n+      placeholder: `key`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        model.extractionNamespace.namespaceParseSpec.format === 'customJson',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.valueFieldName',\n+      type: 'string',\n+      label: 'Value field name',\n+      placeholder: `value`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        model.extractionNamespace.namespaceParseSpec.format === 'customJson',\n+    },\n+    {\n+      name: 'extractionNamespace.namespace',\n+      type: 'string',\n+      label: 'Namespace',\n+      placeholder: 'some_lookup',\n+      info: (\n+        <p>\n+          The namespace value in the SQL query:\n+          <br />\n+          SELECT keyColumn, valueColumn, tsColumn? FROM <strong>namespace</strong>.table WHERE\n+          filter\n+        </p>\n+      ),\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.connectorConfig.createTables',\n+      type: 'boolean',\n+      label: 'CreateTables',\n+      info: 'Defines the connectURI value on the The connector config to used',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.connectorConfig.connectURI',\n+      type: 'string',\n+      label: 'ConnectURI',\n+      info: 'Defines the connectURI value on the The connector config to used',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.connectorConfig.user',\n+      type: 'string',\n+      label: 'User',\n+      info: 'Defines the user too be used by the connector config',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e5e64ce7e0867c4cece2b29a650afe9b9e41b12"}, "originalPosition": 388}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDk3MDg4OnYy", "diffSide": "RIGHT", "path": "web-console/src/dialogs/lookup-edit-dialog/lookup-edit-dialog.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjoxMDo1NlrOGCgVFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjoxMDo1NlrOGCgVFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4MDAyMw==", "bodyText": "Ditto", "url": "https://github.com/apache/druid/pull/9587#discussion_r405280023", "createdAt": "2020-04-08T06:10:56Z", "author": {"login": "vogievetsky"}, "path": "web-console/src/dialogs/lookup-edit-dialog/lookup-edit-dialog.tsx", "diffHunk": "@@ -93,8 +194,365 @@ export const LookupEditDialog = React.memo(function LookupEditDialog(props: Look\n     }\n   }\n \n-  const disableSubmit =\n-    lookupName === '' || lookupVersion === '' || lookupTier === '' || !validJson(lookupSpec);\n+  const fields = [\n+    {\n+      name: 'type',\n+      type: 'string',\n+      suggestions: ['map', 'cachedNamespace'],\n+      adjustment: (model: LookupSpec) => {\n+        if (model.type === 'map' && model.extractionNamespace && model.extractionNamespace.type) {\n+          return model;\n+        }\n+        model.extractionNamespace = { type: 'uri', namespaceParseSpec: { format: 'csv' } };\n+        return model;\n+      },\n+    },\n+    {\n+      name: 'map',\n+      type: 'json',\n+      defined: (model: LookupSpec) => {\n+        return model.type === 'map';\n+      },\n+    },\n+    {\n+      name: 'extractionNamespace.type',\n+      type: 'string',\n+      label: 'Globally cached lookup type',\n+      placeholder: 'uri',\n+      suggestions: ['uri', 'jdbc'],\n+      defined: (model: LookupSpec) => model.type === 'cachedNamespace',\n+    },\n+    {\n+      name: 'extractionNamespace.uriPrefix',\n+      type: 'string',\n+      label: 'URI prefix',\n+      info:\n+        'A URI which specifies a directory (or other searchable resource) in which to search for files',\n+      placeholder: 's3://bucket/some/key/prefix/',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri',\n+    },\n+    {\n+      name: 'extractionNamespace.fileRegex',\n+      type: 'string',\n+      label: 'File regex',\n+      placeholder: 'renames-[0-9]*\\\\.gz',\n+      info:\n+        'Optional regex for matching the file name under uriPrefix. Only used if uriPrefix is used',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.format',\n+      type: 'string',\n+      label: 'Format',\n+      defaultValue: 'csv',\n+      suggestions: ['csv', 'tsv', 'customJson', 'simpleJson'],\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.columns',\n+      type: 'string-array',\n+      label: 'Columns',\n+      placeholder: `[\"key\", \"value\"]`,\n+      info: 'The list of columns in the csv file',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.keyColumn',\n+      type: 'string',\n+      label: 'Key column',\n+      placeholder: 'Key',\n+      info: 'The name of the column containing the key',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.valueColumn',\n+      type: 'string',\n+      label: 'Value column',\n+      placeholder: 'Value',\n+      info: 'The name of the column containing the value',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.hasHeaderRow',\n+      type: 'boolean',\n+      label: 'Has header row',\n+      defaultValue: false,\n+      info: `A flag to indicate that column information can be extracted from the input files' header row`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.skipHeaderRows',\n+      type: 'number',\n+      label: 'Skip header rows',\n+      placeholder: '0',\n+      info: `Number of header rows to be skipped. The default number of header rows to be skipped is 0.`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.delimiter',\n+      type: 'string',\n+      label: 'Delimiter',\n+      placeholder: `\\t`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        model.extractionNamespace.namespaceParseSpec.format === 'tsv',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.listDelimiter',\n+      type: 'string',\n+      label: 'List delimiter',\n+      placeholder: `\\u0001`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        model.extractionNamespace.namespaceParseSpec.format === 'tsv',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.keyFieldName',\n+      type: 'string',\n+      label: 'Key field name',\n+      placeholder: `key`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        model.extractionNamespace.namespaceParseSpec.format === 'customJson',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.valueFieldName',\n+      type: 'string',\n+      label: 'Value field name',\n+      placeholder: `value`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        model.extractionNamespace.namespaceParseSpec.format === 'customJson',\n+    },\n+    {\n+      name: 'extractionNamespace.namespace',\n+      type: 'string',\n+      label: 'Namespace',\n+      placeholder: 'some_lookup',\n+      info: (\n+        <p>\n+          The namespace value in the SQL query:\n+          <br />\n+          SELECT keyColumn, valueColumn, tsColumn? FROM <strong>namespace</strong>.table WHERE\n+          filter\n+        </p>\n+      ),\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.connectorConfig.createTables',\n+      type: 'boolean',\n+      label: 'CreateTables',\n+      info: 'Defines the connectURI value on the The connector config to used',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.connectorConfig.connectURI',\n+      type: 'string',\n+      label: 'ConnectURI',\n+      info: 'Defines the connectURI value on the The connector config to used',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.connectorConfig.user',\n+      type: 'string',\n+      label: 'User',\n+      info: 'Defines the user too be used by the connector config',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.connectorConfig.password',\n+      type: 'string',\n+      label: 'Password',\n+      info: 'Defines the password too be used by the connector config',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e5e64ce7e0867c4cece2b29a650afe9b9e41b12"}, "originalPosition": 398}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDk3NzExOnYy", "diffSide": "RIGHT", "path": "web-console/src/dialogs/lookup-edit-dialog/lookup-edit-dialog.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjoxMzo0MFrOGCgY7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjoxMzo0MFrOGCgY7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4MTAwNw==", "bodyText": "instead of <br> it is better to use multiple <p>s like so:\n<>\n        <p>\n          The table which contains the key value pairs. This will become the table value in the SQL\n          query:\n          </p>\n          <p>\n          SELECT keyColumn, valueColumn, tsColumn? FROM namespace.<strong>table</strong> WHERE\n          filter\n        </p>\n</>", "url": "https://github.com/apache/druid/pull/9587#discussion_r405281007", "createdAt": "2020-04-08T06:13:40Z", "author": {"login": "vogievetsky"}, "path": "web-console/src/dialogs/lookup-edit-dialog/lookup-edit-dialog.tsx", "diffHunk": "@@ -93,8 +194,365 @@ export const LookupEditDialog = React.memo(function LookupEditDialog(props: Look\n     }\n   }\n \n-  const disableSubmit =\n-    lookupName === '' || lookupVersion === '' || lookupTier === '' || !validJson(lookupSpec);\n+  const fields = [\n+    {\n+      name: 'type',\n+      type: 'string',\n+      suggestions: ['map', 'cachedNamespace'],\n+      adjustment: (model: LookupSpec) => {\n+        if (model.type === 'map' && model.extractionNamespace && model.extractionNamespace.type) {\n+          return model;\n+        }\n+        model.extractionNamespace = { type: 'uri', namespaceParseSpec: { format: 'csv' } };\n+        return model;\n+      },\n+    },\n+    {\n+      name: 'map',\n+      type: 'json',\n+      defined: (model: LookupSpec) => {\n+        return model.type === 'map';\n+      },\n+    },\n+    {\n+      name: 'extractionNamespace.type',\n+      type: 'string',\n+      label: 'Globally cached lookup type',\n+      placeholder: 'uri',\n+      suggestions: ['uri', 'jdbc'],\n+      defined: (model: LookupSpec) => model.type === 'cachedNamespace',\n+    },\n+    {\n+      name: 'extractionNamespace.uriPrefix',\n+      type: 'string',\n+      label: 'URI prefix',\n+      info:\n+        'A URI which specifies a directory (or other searchable resource) in which to search for files',\n+      placeholder: 's3://bucket/some/key/prefix/',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri',\n+    },\n+    {\n+      name: 'extractionNamespace.fileRegex',\n+      type: 'string',\n+      label: 'File regex',\n+      placeholder: 'renames-[0-9]*\\\\.gz',\n+      info:\n+        'Optional regex for matching the file name under uriPrefix. Only used if uriPrefix is used',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.format',\n+      type: 'string',\n+      label: 'Format',\n+      defaultValue: 'csv',\n+      suggestions: ['csv', 'tsv', 'customJson', 'simpleJson'],\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.columns',\n+      type: 'string-array',\n+      label: 'Columns',\n+      placeholder: `[\"key\", \"value\"]`,\n+      info: 'The list of columns in the csv file',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.keyColumn',\n+      type: 'string',\n+      label: 'Key column',\n+      placeholder: 'Key',\n+      info: 'The name of the column containing the key',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.valueColumn',\n+      type: 'string',\n+      label: 'Value column',\n+      placeholder: 'Value',\n+      info: 'The name of the column containing the value',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.hasHeaderRow',\n+      type: 'boolean',\n+      label: 'Has header row',\n+      defaultValue: false,\n+      info: `A flag to indicate that column information can be extracted from the input files' header row`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.skipHeaderRows',\n+      type: 'number',\n+      label: 'Skip header rows',\n+      placeholder: '0',\n+      info: `Number of header rows to be skipped. The default number of header rows to be skipped is 0.`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.delimiter',\n+      type: 'string',\n+      label: 'Delimiter',\n+      placeholder: `\\t`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        model.extractionNamespace.namespaceParseSpec.format === 'tsv',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.listDelimiter',\n+      type: 'string',\n+      label: 'List delimiter',\n+      placeholder: `\\u0001`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        model.extractionNamespace.namespaceParseSpec.format === 'tsv',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.keyFieldName',\n+      type: 'string',\n+      label: 'Key field name',\n+      placeholder: `key`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        model.extractionNamespace.namespaceParseSpec.format === 'customJson',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.valueFieldName',\n+      type: 'string',\n+      label: 'Value field name',\n+      placeholder: `value`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        model.extractionNamespace.namespaceParseSpec.format === 'customJson',\n+    },\n+    {\n+      name: 'extractionNamespace.namespace',\n+      type: 'string',\n+      label: 'Namespace',\n+      placeholder: 'some_lookup',\n+      info: (\n+        <p>\n+          The namespace value in the SQL query:\n+          <br />\n+          SELECT keyColumn, valueColumn, tsColumn? FROM <strong>namespace</strong>.table WHERE\n+          filter\n+        </p>\n+      ),\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.connectorConfig.createTables',\n+      type: 'boolean',\n+      label: 'CreateTables',\n+      info: 'Defines the connectURI value on the The connector config to used',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.connectorConfig.connectURI',\n+      type: 'string',\n+      label: 'ConnectURI',\n+      info: 'Defines the connectURI value on the The connector config to used',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.connectorConfig.user',\n+      type: 'string',\n+      label: 'User',\n+      info: 'Defines the user too be used by the connector config',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.connectorConfig.password',\n+      type: 'string',\n+      label: 'Password',\n+      info: 'Defines the password too be used by the connector config',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.table',\n+      type: 'string',\n+      label: 'Table',\n+      placeholder: 'some_lookup_table',\n+      info: (\n+        <p>\n+          The table which contains the key value pairs. This will become the table value in the SQL\n+          query:\n+          <br />\n+          SELECT keyColumn, valueColumn, tsColumn? FROM namespace.<strong>table</strong> WHERE\n+          filter\n+        </p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e5e64ce7e0867c4cece2b29a650afe9b9e41b12"}, "originalPosition": 416}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDk4MDIxOnYy", "diffSide": "RIGHT", "path": "web-console/src/dialogs/lookup-edit-dialog/lookup-edit-dialog.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjoxNTowMFrOGCgatw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNjoxNTowMFrOGCgatw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI4MTQ2Mw==", "bodyText": "add a placeholder of '(optional)' that is the convention that I've been using in several places.", "url": "https://github.com/apache/druid/pull/9587#discussion_r405281463", "createdAt": "2020-04-08T06:15:00Z", "author": {"login": "vogievetsky"}, "path": "web-console/src/dialogs/lookup-edit-dialog/lookup-edit-dialog.tsx", "diffHunk": "@@ -93,8 +194,365 @@ export const LookupEditDialog = React.memo(function LookupEditDialog(props: Look\n     }\n   }\n \n-  const disableSubmit =\n-    lookupName === '' || lookupVersion === '' || lookupTier === '' || !validJson(lookupSpec);\n+  const fields = [\n+    {\n+      name: 'type',\n+      type: 'string',\n+      suggestions: ['map', 'cachedNamespace'],\n+      adjustment: (model: LookupSpec) => {\n+        if (model.type === 'map' && model.extractionNamespace && model.extractionNamespace.type) {\n+          return model;\n+        }\n+        model.extractionNamespace = { type: 'uri', namespaceParseSpec: { format: 'csv' } };\n+        return model;\n+      },\n+    },\n+    {\n+      name: 'map',\n+      type: 'json',\n+      defined: (model: LookupSpec) => {\n+        return model.type === 'map';\n+      },\n+    },\n+    {\n+      name: 'extractionNamespace.type',\n+      type: 'string',\n+      label: 'Globally cached lookup type',\n+      placeholder: 'uri',\n+      suggestions: ['uri', 'jdbc'],\n+      defined: (model: LookupSpec) => model.type === 'cachedNamespace',\n+    },\n+    {\n+      name: 'extractionNamespace.uriPrefix',\n+      type: 'string',\n+      label: 'URI prefix',\n+      info:\n+        'A URI which specifies a directory (or other searchable resource) in which to search for files',\n+      placeholder: 's3://bucket/some/key/prefix/',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri',\n+    },\n+    {\n+      name: 'extractionNamespace.fileRegex',\n+      type: 'string',\n+      label: 'File regex',\n+      placeholder: 'renames-[0-9]*\\\\.gz',\n+      info:\n+        'Optional regex for matching the file name under uriPrefix. Only used if uriPrefix is used',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.format',\n+      type: 'string',\n+      label: 'Format',\n+      defaultValue: 'csv',\n+      suggestions: ['csv', 'tsv', 'customJson', 'simpleJson'],\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.columns',\n+      type: 'string-array',\n+      label: 'Columns',\n+      placeholder: `[\"key\", \"value\"]`,\n+      info: 'The list of columns in the csv file',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.keyColumn',\n+      type: 'string',\n+      label: 'Key column',\n+      placeholder: 'Key',\n+      info: 'The name of the column containing the key',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.valueColumn',\n+      type: 'string',\n+      label: 'Value column',\n+      placeholder: 'Value',\n+      info: 'The name of the column containing the value',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.hasHeaderRow',\n+      type: 'boolean',\n+      label: 'Has header row',\n+      defaultValue: false,\n+      info: `A flag to indicate that column information can be extracted from the input files' header row`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.skipHeaderRows',\n+      type: 'number',\n+      label: 'Skip header rows',\n+      placeholder: '0',\n+      info: `Number of header rows to be skipped. The default number of header rows to be skipped is 0.`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        (model.extractionNamespace.namespaceParseSpec.format === 'csv' ||\n+          model.extractionNamespace.namespaceParseSpec.format === 'tsv'),\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.delimiter',\n+      type: 'string',\n+      label: 'Delimiter',\n+      placeholder: `\\t`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        model.extractionNamespace.namespaceParseSpec.format === 'tsv',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.listDelimiter',\n+      type: 'string',\n+      label: 'List delimiter',\n+      placeholder: `\\u0001`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        model.extractionNamespace.namespaceParseSpec.format === 'tsv',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.keyFieldName',\n+      type: 'string',\n+      label: 'Key field name',\n+      placeholder: `key`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        model.extractionNamespace.namespaceParseSpec.format === 'customJson',\n+    },\n+    {\n+      name: 'extractionNamespace.namespaceParseSpec.valueFieldName',\n+      type: 'string',\n+      label: 'Value field name',\n+      placeholder: `value`,\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'uri' &&\n+        model.extractionNamespace.namespaceParseSpec &&\n+        model.extractionNamespace.namespaceParseSpec.format === 'customJson',\n+    },\n+    {\n+      name: 'extractionNamespace.namespace',\n+      type: 'string',\n+      label: 'Namespace',\n+      placeholder: 'some_lookup',\n+      info: (\n+        <p>\n+          The namespace value in the SQL query:\n+          <br />\n+          SELECT keyColumn, valueColumn, tsColumn? FROM <strong>namespace</strong>.table WHERE\n+          filter\n+        </p>\n+      ),\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.connectorConfig.createTables',\n+      type: 'boolean',\n+      label: 'CreateTables',\n+      info: 'Defines the connectURI value on the The connector config to used',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.connectorConfig.connectURI',\n+      type: 'string',\n+      label: 'ConnectURI',\n+      info: 'Defines the connectURI value on the The connector config to used',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.connectorConfig.user',\n+      type: 'string',\n+      label: 'User',\n+      info: 'Defines the user too be used by the connector config',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.connectorConfig.password',\n+      type: 'string',\n+      label: 'Password',\n+      info: 'Defines the password too be used by the connector config',\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.table',\n+      type: 'string',\n+      label: 'Table',\n+      placeholder: 'some_lookup_table',\n+      info: (\n+        <p>\n+          The table which contains the key value pairs. This will become the table value in the SQL\n+          query:\n+          <br />\n+          SELECT keyColumn, valueColumn, tsColumn? FROM namespace.<strong>table</strong> WHERE\n+          filter\n+        </p>\n+      ),\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.keyColumn',\n+      type: 'string',\n+      label: 'Key column',\n+      placeholder: 'my_key_value',\n+      info: (\n+        <p>\n+          The column in the table which contains the keys. This will become the keyColumn value in\n+          the SQL query:\n+          <br />\n+          SELECT <strong>keyColumn</strong>, valueColumn, tsColumn? FROM namespace.table WHERE\n+          filter\n+        </p>\n+      ),\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.valueColumn',\n+      type: 'string',\n+      label: 'Value column',\n+      placeholder: 'my_column_value',\n+      info: (\n+        <p>\n+          The column in table which contains the values. This will become the valueColumn value in\n+          the SQL query:\n+          <br />\n+          SELECT keyColumn, <strong>valueColumn</strong>, tsColumn? FROM namespace.table WHERE\n+          filter\n+        </p>\n+      ),\n+      defined: (model: LookupSpec) =>\n+        model.type === 'cachedNamespace' &&\n+        !!model.extractionNamespace &&\n+        model.extractionNamespace.type === 'jdbc',\n+    },\n+    {\n+      name: 'extractionNamespace.filter',\n+      type: 'string',\n+      label: 'Filter',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e5e64ce7e0867c4cece2b29a650afe9b9e41b12"}, "originalPosition": 464}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2691, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}