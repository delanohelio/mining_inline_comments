{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNDk0MTMx", "number": 10117, "title": "Closing yielder from ParallelMergeCombiningSequence should trigger cancellation", "bodyText": "Description\nThis PR fixes an issue with/modifies the behavior of closing a Yielder created from a ParallelMergeCombiningSequence to trigger a cancellation to immediately halt any additional processing on the broker's merging ForkJoinPool. I'm unsure if this causes any issues in practice, but could be an issue if closing a yielder early. Closing the yielder and stopping processing would potentially cause running pool tasks associated with the query to managed block until the offer/poll timeouts on the blocking queue, at which point they would fully die.\nAmusingly, prior to the change in this PR, you could continue to use the \"closed\" yielder to get the complete set of results assuming no exceptions occur inside of the parallel merge processing itself, however the sequence 'baggage' that reports the parallel merge pool metrics would have been triggered early, reporting incorrect metric values.\nThe added test ensures that cancellation happens upon close of the Yielder, which is valid behavior within the contract of the Yielder interface which allows for close to put the entire chain into an undefined state.\n\nThis PR has:\n\n been self-reviewed.\n\n using the concurrency checklist (Remove this item if the PR doesn't have any relation to concurrency.)\n\n\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths, ensuring the threshold for code coverage is met.\n added integration tests.\n been tested in a test Druid cluster.\n\n\nKey changed/added classes in this PR\n\nParallelMergeCombiningSequence", "createdAt": "2020-07-01T07:14:47Z", "url": "https://github.com/apache/druid/pull/10117", "merged": true, "mergeCommit": {"oid": "a337ef351cddaec51263cac363fd1b40f11ee010"}, "closed": true, "closedAt": "2020-07-01T21:07:45Z", "author": {"login": "clintropolis"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwkanXAH2gAyNDQyNDk0MTMxOjRmODE4ZjVkYjc2YjM0NDFkNWI3NWU4YWExYmFiODkzMGFjOTkwNmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwwonNgFqTQ0MTE5MDAwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4f818f5db76b3441d5b75e8aa1bab8930ac9906c", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/4f818f5db76b3441d5b75e8aa1bab8930ac9906c", "committedDate": "2020-07-01T06:40:06Z", "message": "cancel parallel merge combine sequence on yielder close"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ea92e66fe75099f7b802266a27b4ef846018fc9", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/9ea92e66fe75099f7b802266a27b4ef846018fc9", "committedDate": "2020-07-01T06:44:03Z", "message": "finish incomplete comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMDUyODgz", "url": "https://github.com/apache/druid/pull/10117#pullrequestreview-441052883", "createdAt": "2020-07-01T17:09:08Z", "commit": {"oid": "9ea92e66fe75099f7b802266a27b4ef846018fc9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzowOTowOFrOGrub8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNzowOTowOFrOGrub8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUwMjc2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                } catch (RuntimeException rex) {\n          \n          \n            \n                }\n          \n          \n            \n                catch (RuntimeException rex) {", "url": "https://github.com/apache/druid/pull/10117#discussion_r448502768", "createdAt": "2020-07-01T17:09:08Z", "author": {"login": "jihoonson"}, "path": "core/src/test/java/org/apache/druid/java/util/common/guava/ParallelMergeCombiningSequenceTest.java", "diffHunk": "@@ -611,6 +637,86 @@ private void assertResult(\n     Assert.assertEquals(0, pool.getRunningThreadCount());\n     combiningYielder.close();\n     parallelMergeCombineYielder.close();\n+    // cancellation trigger should not be set if sequence was fully yielded and close is called\n+    // (though shouldn't actually matter even if it was...)\n+    Assert.assertFalse(parallelMergeCombineSequence.getCancellationGizmo().isCancelled());\n+  }\n+\n+  private void assertResultWithEarlyClose(\n+      List<Sequence<IntPair>> sequences,\n+      int batchSize,\n+      int yieldAfter,\n+      int closeYielderAfter,\n+      Consumer<ParallelMergeCombiningSequence.MergeCombineMetrics> reporter\n+  )\n+      throws InterruptedException, IOException\n+  {\n+    final CombiningSequence<IntPair> combiningSequence = CombiningSequence.create(\n+        new MergeSequence<>(INT_PAIR_ORDERING, Sequences.simple(sequences)),\n+        INT_PAIR_ORDERING,\n+        INT_PAIR_MERGE_FN\n+    );\n+\n+    final ParallelMergeCombiningSequence<IntPair> parallelMergeCombineSequence = new ParallelMergeCombiningSequence<>(\n+        pool,\n+        sequences,\n+        INT_PAIR_ORDERING,\n+        INT_PAIR_MERGE_FN,\n+        true,\n+        5000,\n+        0,\n+        TEST_POOL_SIZE,\n+        yieldAfter,\n+        batchSize,\n+        ParallelMergeCombiningSequence.DEFAULT_TASK_TARGET_RUN_TIME_MILLIS,\n+        reporter\n+    );\n+\n+    Yielder<IntPair> combiningYielder = Yielders.each(combiningSequence);\n+    Yielder<IntPair> parallelMergeCombineYielder = Yielders.each(parallelMergeCombineSequence);\n+\n+    IntPair prev = null;\n+\n+    int yields = 0;\n+    while (!combiningYielder.isDone() && !parallelMergeCombineYielder.isDone()) {\n+      if (yields >= closeYielderAfter) {\n+        parallelMergeCombineYielder.close();\n+        combiningYielder.close();\n+        break;\n+      } else {\n+        yields++;\n+        Assert.assertEquals(combiningYielder.get(), parallelMergeCombineYielder.get());\n+        Assert.assertNotEquals(parallelMergeCombineYielder.get(), prev);\n+        prev = parallelMergeCombineYielder.get();\n+        combiningYielder = combiningYielder.next(combiningYielder.get());\n+        parallelMergeCombineYielder = parallelMergeCombineYielder.next(parallelMergeCombineYielder.get());\n+      }\n+    }\n+    // trying to next the yielder creates sadness for you\n+    final String expectedExceptionMsg = \"Already closed\";\n+    try {\n+      Assert.assertEquals(combiningYielder.get(), parallelMergeCombineYielder.get());\n+      parallelMergeCombineYielder.next(parallelMergeCombineYielder.get());\n+      // this should explode so the contradictory next statement should not be reached\n+      Assert.assertTrue(false);\n+    } catch (RuntimeException rex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ea92e66fe75099f7b802266a27b4ef846018fc9"}, "originalPosition": 99}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6956a6447a80e5a05790d6912cb23e39230f943b", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/6956a6447a80e5a05790d6912cb23e39230f943b", "committedDate": "2020-07-01T17:09:27Z", "message": "Update core/src/test/java/org/apache/druid/java/util/common/guava/ParallelMergeCombiningSequenceTest.java\r\n\r\nFixes checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMTkwMDAx", "url": "https://github.com/apache/druid/pull/10117#pullrequestreview-441190001", "createdAt": "2020-07-01T20:54:15Z", "commit": {"oid": "6956a6447a80e5a05790d6912cb23e39230f943b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2220, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}