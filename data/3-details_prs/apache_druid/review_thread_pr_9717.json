{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0NjcwNzY5", "number": 9717, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNTo0NjoyM1rOD7f4mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjoxNzo1MlrOD7gTeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzE0OTY4OnYy", "diffSide": "LEFT", "path": "core/src/main/java/org/apache/druid/java/util/http/client/response/FullResponseHolder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNTo0NjoyM1rOGT24WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMzo0NDo1M1rOGcvDgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ3NTI4OQ==", "bodyText": "addChunk seems to be implemented by all the subclasses, then why remove this ?", "url": "https://github.com/apache/druid/pull/9717#discussion_r423475289", "createdAt": "2020-05-12T05:46:23Z", "author": {"login": "surekhasaharan"}, "path": "core/src/main/java/org/apache/druid/java/util/http/client/response/FullResponseHolder.java", "diffHunk": "@@ -49,12 +49,7 @@ public HttpResponse getResponse()\n   }\n \n   /**\n-   * Append a new chunk of data.\n-   */\n-  public abstract FullResponseHolder addChunk(T chunk);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "337d70e0a9cdc198195172deba4a743db19cc997"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4NDI1OA==", "bodyText": "removed it because newly introduced InputStreamFullResponseHolder.addChunk(byte[] chunk) whereas getContent() needs to return InputStream . We could do the necessary wrapping so as to have InputStreamFullResponseHolder.addChunk(InputStream chunk) but would have required an extra wrap/unwrap of byte[] into/outof ByteArrayInputStream in `InputStreamResponseHandler .", "url": "https://github.com/apache/druid/pull/9717#discussion_r432784258", "createdAt": "2020-05-29T23:44:53Z", "author": {"login": "himanshug"}, "path": "core/src/main/java/org/apache/druid/java/util/http/client/response/FullResponseHolder.java", "diffHunk": "@@ -49,12 +49,7 @@ public HttpResponse getResponse()\n   }\n \n   /**\n-   * Append a new chunk of data.\n-   */\n-  public abstract FullResponseHolder addChunk(T chunk);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ3NTI4OQ=="}, "originalCommit": {"oid": "337d70e0a9cdc198195172deba4a743db19cc997"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzE2NzkwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/discovery/DruidLeaderClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNTo1NToyNFrOGT3DnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMzo0NzoxN1rOGcvFXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ3ODE3Mw==", "bodyText": "it would always use cached \"CurrentKnownLeader\", it lead to some issues earlier if the cached leader is not reachable, is that case handled somewhere now?", "url": "https://github.com/apache/druid/pull/9717#discussion_r423478173", "createdAt": "2020-05-12T05:55:24Z", "author": {"login": "surekhasaharan"}, "path": "server/src/main/java/org/apache/druid/discovery/DruidLeaderClient.java", "diffHunk": "@@ -121,42 +120,20 @@ public void stop()\n     log.debug(\"Stopped.\");\n   }\n \n-  /**\n-   * Make a Request object aimed at the leader. Throws IOException if the leader cannot be located.\n-   *\n-   * @param cached Uses cached leader if true, else uses the current leader\n-   */\n-  public Request makeRequest(HttpMethod httpMethod, String urlPath, boolean cached) throws IOException\n-  {\n-    Preconditions.checkState(lifecycleLock.awaitStarted(1, TimeUnit.MILLISECONDS));\n-    return new Request(httpMethod, new URL(StringUtils.format(\"%s%s\", getCurrentKnownLeader(cached), urlPath)));\n-  }\n-\n   /**\n    * Make a Request object aimed at the leader. Throws IOException if the leader cannot be located.\n    */\n   public Request makeRequest(HttpMethod httpMethod, String urlPath) throws IOException\n   {\n-    return makeRequest(httpMethod, urlPath, true);\n+    Preconditions.checkState(lifecycleLock.awaitStarted(1, TimeUnit.MILLISECONDS));\n+    return new Request(httpMethod, new URL(StringUtils.format(\"%s%s\", getCurrentKnownLeader(true), urlPath)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "337d70e0a9cdc198195172deba4a743db19cc997"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4NDczMg==", "bodyText": "if cached \"leader\" has disappeared then connection to that host will fail and we will  retry with a randomly  chosen  available server in code path starting line-160 .\nif cached \"leader\" is not leader anymore then it should send a TEMPORARY_REDIRECT and we would retry with code flow starting at line 193", "url": "https://github.com/apache/druid/pull/9717#discussion_r432784732", "createdAt": "2020-05-29T23:47:17Z", "author": {"login": "himanshug"}, "path": "server/src/main/java/org/apache/druid/discovery/DruidLeaderClient.java", "diffHunk": "@@ -121,42 +120,20 @@ public void stop()\n     log.debug(\"Stopped.\");\n   }\n \n-  /**\n-   * Make a Request object aimed at the leader. Throws IOException if the leader cannot be located.\n-   *\n-   * @param cached Uses cached leader if true, else uses the current leader\n-   */\n-  public Request makeRequest(HttpMethod httpMethod, String urlPath, boolean cached) throws IOException\n-  {\n-    Preconditions.checkState(lifecycleLock.awaitStarted(1, TimeUnit.MILLISECONDS));\n-    return new Request(httpMethod, new URL(StringUtils.format(\"%s%s\", getCurrentKnownLeader(cached), urlPath)));\n-  }\n-\n   /**\n    * Make a Request object aimed at the leader. Throws IOException if the leader cannot be located.\n    */\n   public Request makeRequest(HttpMethod httpMethod, String urlPath) throws IOException\n   {\n-    return makeRequest(httpMethod, urlPath, true);\n+    Preconditions.checkState(lifecycleLock.awaitStarted(1, TimeUnit.MILLISECONDS));\n+    return new Request(httpMethod, new URL(StringUtils.format(\"%s%s\", getCurrentKnownLeader(true), urlPath)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ3ODE3Mw=="}, "originalCommit": {"oid": "337d70e0a9cdc198195172deba4a743db19cc997"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzIwODcwOnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/org/apache/druid/sql/calcite/schema/MetadataSegmentView.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjoxMzo1MFrOGT3cUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMzo1MDoxMVrOGcvHcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ4NDQ5Nw==", "bodyText": "instead of query, it should be request.getUrl().toString() or something which gives info about the leader location.", "url": "https://github.com/apache/druid/pull/9717#discussion_r423484497", "createdAt": "2020-05-12T06:13:50Z", "author": {"login": "surekhasaharan"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/schema/MetadataSegmentView.java", "diffHunk": "@@ -201,32 +197,41 @@ private void poll()\n       query = \"/druid/coordinator/v1/metadata/segments?includeOvershadowedStatus&\" + sb;\n     }\n     Request request;\n+    InputStreamFullResponseHolder responseHolder;\n     try {\n       request = coordinatorClient.makeRequest(\n           HttpMethod.GET,\n-          StringUtils.format(query),\n-          false\n+          StringUtils.format(query)\n       );\n+\n+      responseHolder = coordinatorClient.go(\n+          request,\n+          new InputStreamFullResponseHandler()\n+      );\n+      if (responseHolder.getStatus().getCode() != HttpServletResponse.SC_OK) {\n+        throw new RE(\n+            \"Failed to talk to coordinator leader at [%s]. Error code[%d], description[%s].\",\n+            query,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "337d70e0a9cdc198195172deba4a743db19cc997"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4NTI2NQ==", "bodyText": "as explained above, since we change the server on-the-fly as explained above, request.getUrl() would contain  the original cached host and might print host1 which has  disappeared and response has really come from current discovered leader inside go(..) method impl, \"request\" object passed is not modified.\nwith some hackery, we could get it to print real server contacted, but I thought that would be overkill  for this logging use case and just printing that got this blah response from \"coordinator leader\" was good enough.", "url": "https://github.com/apache/druid/pull/9717#discussion_r432785265", "createdAt": "2020-05-29T23:50:11Z", "author": {"login": "himanshug"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/schema/MetadataSegmentView.java", "diffHunk": "@@ -201,32 +197,41 @@ private void poll()\n       query = \"/druid/coordinator/v1/metadata/segments?includeOvershadowedStatus&\" + sb;\n     }\n     Request request;\n+    InputStreamFullResponseHolder responseHolder;\n     try {\n       request = coordinatorClient.makeRequest(\n           HttpMethod.GET,\n-          StringUtils.format(query),\n-          false\n+          StringUtils.format(query)\n       );\n+\n+      responseHolder = coordinatorClient.go(\n+          request,\n+          new InputStreamFullResponseHandler()\n+      );\n+      if (responseHolder.getStatus().getCode() != HttpServletResponse.SC_OK) {\n+        throw new RE(\n+            \"Failed to talk to coordinator leader at [%s]. Error code[%d], description[%s].\",\n+            query,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ4NDQ5Nw=="}, "originalCommit": {"oid": "337d70e0a9cdc198195172deba4a743db19cc997"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzIxMzE1OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/org/apache/druid/sql/calcite/schema/MetadataSegmentView.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjoxNTozOFrOGT3e_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMDozNzoyOVrOGcviqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ4NTE4Mg==", "bodyText": "can we remove this param now", "url": "https://github.com/apache/druid/pull/9717#discussion_r423485182", "createdAt": "2020-05-12T06:15:38Z", "author": {"login": "surekhasaharan"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/schema/MetadataSegmentView.java", "diffHunk": "@@ -201,32 +197,41 @@ private void poll()\n       query = \"/druid/coordinator/v1/metadata/segments?includeOvershadowedStatus&\" + sb;\n     }\n     Request request;\n+    InputStreamFullResponseHolder responseHolder;\n     try {\n       request = coordinatorClient.makeRequest(\n           HttpMethod.GET,\n-          StringUtils.format(query),\n-          false\n+          StringUtils.format(query)\n       );\n+\n+      responseHolder = coordinatorClient.go(\n+          request,\n+          new InputStreamFullResponseHandler()\n+      );\n+      if (responseHolder.getStatus().getCode() != HttpServletResponse.SC_OK) {\n+        throw new RE(\n+            \"Failed to talk to coordinator leader at [%s]. Error code[%d], description[%s].\",\n+            query,\n+            responseHolder.getStatus().getCode(),\n+            responseHolder.getStatus().getReasonPhrase()\n+        );\n+      }\n     }\n-    catch (IOException e) {\n+    catch (IOException | InterruptedException e) {\n       throw new RuntimeException(e);\n     }\n-    ListenableFuture<InputStream> future = coordinatorClient.goAsync(\n-        request,\n-        responseHandler\n-    );\n \n     final JavaType typeRef = jsonMapper.getTypeFactory().constructType(new TypeReference<SegmentWithOvershadowedStatus>()\n     {\n     });\n     return new JsonParserIterator<>(\n         typeRef,\n-        future,\n+        Futures.immediateFuture(responseHolder.getContent()),\n         request.getUrl().toString(),\n         null,\n         request.getUrl().getHost(),\n         jsonMapper,\n-        responseHandler\n+        null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "337d70e0a9cdc198195172deba4a743db19cc997"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4NTM4Ng==", "bodyText": "I didn't know where else it was used, if it is not used anywhere then we can remove  it yes.", "url": "https://github.com/apache/druid/pull/9717#discussion_r432785386", "createdAt": "2020-05-29T23:50:43Z", "author": {"login": "himanshug"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/schema/MetadataSegmentView.java", "diffHunk": "@@ -201,32 +197,41 @@ private void poll()\n       query = \"/druid/coordinator/v1/metadata/segments?includeOvershadowedStatus&\" + sb;\n     }\n     Request request;\n+    InputStreamFullResponseHolder responseHolder;\n     try {\n       request = coordinatorClient.makeRequest(\n           HttpMethod.GET,\n-          StringUtils.format(query),\n-          false\n+          StringUtils.format(query)\n       );\n+\n+      responseHolder = coordinatorClient.go(\n+          request,\n+          new InputStreamFullResponseHandler()\n+      );\n+      if (responseHolder.getStatus().getCode() != HttpServletResponse.SC_OK) {\n+        throw new RE(\n+            \"Failed to talk to coordinator leader at [%s]. Error code[%d], description[%s].\",\n+            query,\n+            responseHolder.getStatus().getCode(),\n+            responseHolder.getStatus().getReasonPhrase()\n+        );\n+      }\n     }\n-    catch (IOException e) {\n+    catch (IOException | InterruptedException e) {\n       throw new RuntimeException(e);\n     }\n-    ListenableFuture<InputStream> future = coordinatorClient.goAsync(\n-        request,\n-        responseHandler\n-    );\n \n     final JavaType typeRef = jsonMapper.getTypeFactory().constructType(new TypeReference<SegmentWithOvershadowedStatus>()\n     {\n     });\n     return new JsonParserIterator<>(\n         typeRef,\n-        future,\n+        Futures.immediateFuture(responseHolder.getContent()),\n         request.getUrl().toString(),\n         null,\n         request.getUrl().getHost(),\n         jsonMapper,\n-        responseHandler\n+        null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ4NTE4Mg=="}, "originalCommit": {"oid": "337d70e0a9cdc198195172deba4a743db19cc997"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5MjIzMg==", "bodyText": "removed", "url": "https://github.com/apache/druid/pull/9717#discussion_r432792232", "createdAt": "2020-05-30T00:37:29Z", "author": {"login": "himanshug"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/schema/MetadataSegmentView.java", "diffHunk": "@@ -201,32 +197,41 @@ private void poll()\n       query = \"/druid/coordinator/v1/metadata/segments?includeOvershadowedStatus&\" + sb;\n     }\n     Request request;\n+    InputStreamFullResponseHolder responseHolder;\n     try {\n       request = coordinatorClient.makeRequest(\n           HttpMethod.GET,\n-          StringUtils.format(query),\n-          false\n+          StringUtils.format(query)\n       );\n+\n+      responseHolder = coordinatorClient.go(\n+          request,\n+          new InputStreamFullResponseHandler()\n+      );\n+      if (responseHolder.getStatus().getCode() != HttpServletResponse.SC_OK) {\n+        throw new RE(\n+            \"Failed to talk to coordinator leader at [%s]. Error code[%d], description[%s].\",\n+            query,\n+            responseHolder.getStatus().getCode(),\n+            responseHolder.getStatus().getReasonPhrase()\n+        );\n+      }\n     }\n-    catch (IOException e) {\n+    catch (IOException | InterruptedException e) {\n       throw new RuntimeException(e);\n     }\n-    ListenableFuture<InputStream> future = coordinatorClient.goAsync(\n-        request,\n-        responseHandler\n-    );\n \n     final JavaType typeRef = jsonMapper.getTypeFactory().constructType(new TypeReference<SegmentWithOvershadowedStatus>()\n     {\n     });\n     return new JsonParserIterator<>(\n         typeRef,\n-        future,\n+        Futures.immediateFuture(responseHolder.getContent()),\n         request.getUrl().toString(),\n         null,\n         request.getUrl().getHost(),\n         jsonMapper,\n-        responseHandler\n+        null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ4NTE4Mg=="}, "originalCommit": {"oid": "337d70e0a9cdc198195172deba4a743db19cc997"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzIxODQ4OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/org/apache/druid/sql/calcite/schema/SystemSchema.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjoxNzo1MlrOGT3iRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMzo1MDo1MVrOGcvIDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ4NjAyMA==", "bodyText": "same comment about replacing query with more meaningful info here and at other places", "url": "https://github.com/apache/druid/pull/9717#discussion_r423486020", "createdAt": "2020-05-12T06:17:52Z", "author": {"login": "surekhasaharan"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/schema/SystemSchema.java", "diffHunk": "@@ -736,37 +733,48 @@ public void close()\n   //Note that overlord must be up to get tasks\n   private static JsonParserIterator<TaskStatusPlus> getTasks(\n       DruidLeaderClient indexingServiceClient,\n-      ObjectMapper jsonMapper,\n-      BytesAccumulatingResponseHandler responseHandler\n+      ObjectMapper jsonMapper\n   )\n   {\n     Request request;\n+    InputStreamFullResponseHolder responseHolder;\n     try {\n+      String query = \"/druid/indexer/v1/tasks\";\n+\n       request = indexingServiceClient.makeRequest(\n           HttpMethod.GET,\n-          \"/druid/indexer/v1/tasks\",\n-          false\n+          query\n+      );\n+\n+      responseHolder = indexingServiceClient.go(\n+          request,\n+          new InputStreamFullResponseHandler()\n       );\n+\n+      if (responseHolder.getStatus().getCode() != HttpServletResponse.SC_OK) {\n+        throw new RE(\n+            \"Failed to talk to overlord leader at [%s]. Error code[%d], description[%s].\",\n+            query,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "337d70e0a9cdc198195172deba4a743db19cc997"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4NTQyMg==", "bodyText": "same", "url": "https://github.com/apache/druid/pull/9717#discussion_r432785422", "createdAt": "2020-05-29T23:50:51Z", "author": {"login": "himanshug"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/schema/SystemSchema.java", "diffHunk": "@@ -736,37 +733,48 @@ public void close()\n   //Note that overlord must be up to get tasks\n   private static JsonParserIterator<TaskStatusPlus> getTasks(\n       DruidLeaderClient indexingServiceClient,\n-      ObjectMapper jsonMapper,\n-      BytesAccumulatingResponseHandler responseHandler\n+      ObjectMapper jsonMapper\n   )\n   {\n     Request request;\n+    InputStreamFullResponseHolder responseHolder;\n     try {\n+      String query = \"/druid/indexer/v1/tasks\";\n+\n       request = indexingServiceClient.makeRequest(\n           HttpMethod.GET,\n-          \"/druid/indexer/v1/tasks\",\n-          false\n+          query\n+      );\n+\n+      responseHolder = indexingServiceClient.go(\n+          request,\n+          new InputStreamFullResponseHandler()\n       );\n+\n+      if (responseHolder.getStatus().getCode() != HttpServletResponse.SC_OK) {\n+        throw new RE(\n+            \"Failed to talk to overlord leader at [%s]. Error code[%d], description[%s].\",\n+            query,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ4NjAyMA=="}, "originalCommit": {"oid": "337d70e0a9cdc198195172deba4a743db19cc997"}, "originalPosition": 109}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2562, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}