{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxOTI3MjA1", "number": 10309, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxOTowNToyMVrOEbWA5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODowMzo0NVrOE_vm5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTA3Njg2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/metadata/DynamicConfigProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxOTowNToyMVrOHFPL6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMjoxNDoxMlrOHGs8Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MzczNg==", "bodyText": "should this return Map<String, Object> to support a wider range of possible configuration value types since any extension other than Kafka could use it?", "url": "https://github.com/apache/druid/pull/10309#discussion_r475253736", "createdAt": "2020-08-23T19:05:21Z", "author": {"login": "abhishekagarwal87"}, "path": "core/src/main/java/org/apache/druid/metadata/DynamicConfigProvider.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.metadata;\n+\n+import com.fasterxml.jackson.annotation.JsonSubTypes;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import org.apache.druid.guice.annotations.ExtensionPoint;\n+\n+import java.util.Map;\n+\n+/**\n+ * This is used to get [secure] configuration in various places in an extensible way.\n+ */\n+@ExtensionPoint\n+@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\", defaultImpl = MapBasedDynamicConfigProvider.class)\n+@JsonSubTypes(value = {\n+    @JsonSubTypes.Type(name = \"map\", value = MapBasedDynamicConfigProvider.class),\n+})\n+public interface DynamicConfigProvider\n+{\n+  Map<String, String> getConfig();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc575c338f85a088214888f81b5e63d915243cd9"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc4OTg1MQ==", "bodyText": "Intention of this interface certainly is to be used everywhere we get extensible user config (currently the places that are using PasswordProvider), while a cursory look says that Map<String, String> would be sufficient for all the places but I see the desire to have it be more generic. I am probably gonna parameterize the interface to DynamicConfigProvider<T> so that client code would be able to work without typecasting but interface would still serve use case of any value types.", "url": "https://github.com/apache/druid/pull/10309#discussion_r476789851", "createdAt": "2020-08-25T22:14:12Z", "author": {"login": "himanshug"}, "path": "core/src/main/java/org/apache/druid/metadata/DynamicConfigProvider.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.metadata;\n+\n+import com.fasterxml.jackson.annotation.JsonSubTypes;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import org.apache.druid.guice.annotations.ExtensionPoint;\n+\n+import java.util.Map;\n+\n+/**\n+ * This is used to get [secure] configuration in various places in an extensible way.\n+ */\n+@ExtensionPoint\n+@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\", defaultImpl = MapBasedDynamicConfigProvider.class)\n+@JsonSubTypes(value = {\n+    @JsonSubTypes.Type(name = \"map\", value = MapBasedDynamicConfigProvider.class),\n+})\n+public interface DynamicConfigProvider\n+{\n+  Map<String, String> getConfig();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MzczNg=="}, "originalCommit": {"oid": "bc575c338f85a088214888f81b5e63d915243cd9"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1Mjc1NzQ4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/apache/druid/metadata/DynamicConfigProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODowMzo0NVrOH9nkzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMzoyMDoxMVrOH9ySqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM3MzU4MQ==", "bodyText": "nit: should we annotate PasswordProvider as @Deprecated in favor of this class?", "url": "https://github.com/apache/druid/pull/10309#discussion_r534373581", "createdAt": "2020-12-02T18:03:45Z", "author": {"login": "jihoonson"}, "path": "core/src/main/java/org/apache/druid/metadata/DynamicConfigProvider.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.metadata;\n+\n+import com.fasterxml.jackson.annotation.JsonSubTypes;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import org.apache.druid.guice.annotations.ExtensionPoint;\n+\n+import java.util.Map;\n+\n+/**\n+ * This is used to get [secure] configuration in various places in an extensible way.\n+ */\n+@ExtensionPoint\n+@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\", defaultImpl = MapStringDynamicConfigProvider.class)\n+@JsonSubTypes(value = {\n+    @JsonSubTypes.Type(name = \"mapString\", value = MapStringDynamicConfigProvider.class),\n+})\n+public interface DynamicConfigProvider<T>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24fa183c413830a05c9b692526291f0a82a1e2e0"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU0OTE2MQ==", "bodyText": "I didn't mark that deprecated because users wanting to have their own extension for db password must still implement a PasswordProvider ,\nhowever, for Druid devs, any new credential/extensible-config type thing must use DynamicConfigProvider ... so PasswordProvider is \"deprecated\" in that sense.\nwill mark it deprecated and add few comments.", "url": "https://github.com/apache/druid/pull/10309#discussion_r534549161", "createdAt": "2020-12-02T23:20:11Z", "author": {"login": "himanshug"}, "path": "core/src/main/java/org/apache/druid/metadata/DynamicConfigProvider.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.metadata;\n+\n+import com.fasterxml.jackson.annotation.JsonSubTypes;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import org.apache.druid.guice.annotations.ExtensionPoint;\n+\n+import java.util.Map;\n+\n+/**\n+ * This is used to get [secure] configuration in various places in an extensible way.\n+ */\n+@ExtensionPoint\n+@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\", defaultImpl = MapStringDynamicConfigProvider.class)\n+@JsonSubTypes(value = {\n+    @JsonSubTypes.Type(name = \"mapString\", value = MapStringDynamicConfigProvider.class),\n+})\n+public interface DynamicConfigProvider<T>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM3MzU4MQ=="}, "originalCommit": {"oid": "24fa183c413830a05c9b692526291f0a82a1e2e0"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3102, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}