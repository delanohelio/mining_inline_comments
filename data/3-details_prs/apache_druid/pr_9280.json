{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MzM2MDY1", "number": 9280, "title": "CacheStrategy: Improve Javadocs.", "bodyText": "Provides more detail.", "createdAt": "2020-01-29T02:03:53Z", "url": "https://github.com/apache/druid/pull/9280", "merged": true, "mergeCommit": {"oid": "81d8be6e393b00b7509ffb77ab48988aa79a26b6"}, "closed": true, "closedAt": "2020-02-28T19:30:59Z", "author": {"login": "gianm"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-8JuzAH2gAyMzY4MzM2MDY1OmU3ODE1YWUwMzIyNmUxMDdlMTNkYzFhZDYxOGFhMjRmMDBhMDI3YzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcFfzC9gFqTM2MDIzNjEzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e7815ae03226e107e13dc1ad618aa24f00a027c5", "author": {"user": {"login": "gianm", "name": "Gian Merlino"}}, "url": "https://github.com/apache/druid/commit/e7815ae03226e107e13dc1ad618aa24f00a027c5", "committedDate": "2020-01-29T02:03:10Z", "message": "CacheStrategy: Improve Javadocs."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMTk0MjI5", "url": "https://github.com/apache/druid/pull/9280#pullrequestreview-351194229", "createdAt": "2020-01-30T22:44:30Z", "commit": {"oid": "e7815ae03226e107e13dc1ad618aa24f00a027c5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjo0NDozMFrOFj8akw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjo0NDozMFrOFj8akw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIzNDMyMw==", "bodyText": "nit: 'incluce' -> 'include'", "url": "https://github.com/apache/druid/pull/9280#discussion_r373234323", "createdAt": "2020-01-30T22:44:30Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/query/CacheStrategy.java", "diffHunk": "@@ -48,21 +50,27 @@\n   boolean isCacheable(QueryType query, boolean willMergeRunners);\n \n   /**\n-   * Computes the cache key for the given query\n+   * Computes the per-segment cache key for the given query. Because this is a per-segment cache key, it should only\n+   * include parts of the query that affect the results for a specific segment (i.e., the results returned from\n+   * {@link QueryRunnerFactory#createRunner}).\n    *\n-   * @param query the query to compute a cache key for\n+   * @param query the query to be cached\n    *\n-   * @return the cache key\n+   * @return the per-segment cache key\n    */\n   byte[] computeCacheKey(QueryType query);\n \n   /**\n-   * Computes the result level cache key for the given query.\n-   * Some implementations may include query parameters that might not be used in {@code computeCacheKey} for same query\n+   * Computes the result-level cache key for the given query. The result-level cache will tack on datasource and\n+   * interval details, so this key does not need to incluce datasource and interval. But it should include anything", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7815ae03226e107e13dc1ad618aa24f00a027c5"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MDA2MjY0", "url": "https://github.com/apache/druid/pull/9280#pullrequestreview-357006264", "createdAt": "2020-02-11T21:24:34Z", "commit": {"oid": "e7815ae03226e107e13dc1ad618aa24f00a027c5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMToyNDozNFrOFoZpjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMToyNDozNFrOFoZpjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkwNzU5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * interval details, so this key does not need to incluce datasource and interval. But it should include anything\n          \n          \n            \n               * interval details, so this key does not need to include datasource and interval. But it should include anything\n          \n      \n    \n    \n  \n\n^ trying out github suggestions, supposedly it lets you accept a change without needing to make the change locally :)\nhttps://help.github.com/en/github/collaborating-with-issues-and-pull-requests/incorporating-feedback-in-your-pull-request#applying-suggested-changes", "url": "https://github.com/apache/druid/pull/9280#discussion_r377907596", "createdAt": "2020-02-11T21:24:34Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/CacheStrategy.java", "diffHunk": "@@ -48,21 +50,27 @@\n   boolean isCacheable(QueryType query, boolean willMergeRunners);\n \n   /**\n-   * Computes the cache key for the given query\n+   * Computes the per-segment cache key for the given query. Because this is a per-segment cache key, it should only\n+   * include parts of the query that affect the results for a specific segment (i.e., the results returned from\n+   * {@link QueryRunnerFactory#createRunner}).\n    *\n-   * @param query the query to compute a cache key for\n+   * @param query the query to be cached\n    *\n-   * @return the cache key\n+   * @return the per-segment cache key\n    */\n   byte[] computeCacheKey(QueryType query);\n \n   /**\n-   * Computes the result level cache key for the given query.\n-   * Some implementations may include query parameters that might not be used in {@code computeCacheKey} for same query\n+   * Computes the result-level cache key for the given query. The result-level cache will tack on datasource and\n+   * interval details, so this key does not need to incluce datasource and interval. But it should include anything", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7815ae03226e107e13dc1ad618aa24f00a027c5"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a7a93eafc872df8c3245c34a309f40c997943c4", "author": {"user": {"login": "gianm", "name": "Gian Merlino"}}, "url": "https://github.com/apache/druid/commit/1a7a93eafc872df8c3245c34a309f40c997943c4", "committedDate": "2020-02-11T22:44:42Z", "message": "Update processing/src/main/java/org/apache/druid/query/CacheStrategy.java\n\nCo-Authored-By: Suneet Saldanha <44787917+suneet-s@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MTA0NjY3", "url": "https://github.com/apache/druid/pull/9280#pullrequestreview-357104667", "createdAt": "2020-02-11T23:54:59Z", "commit": {"oid": "1a7a93eafc872df8c3245c34a309f40c997943c4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMjM2MTMy", "url": "https://github.com/apache/druid/pull/9280#pullrequestreview-360236132", "createdAt": "2020-02-18T10:43:41Z", "commit": {"oid": "1a7a93eafc872df8c3245c34a309f40c997943c4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMDo0Mzo0MVrOFq9kAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMDo0Mzo0MVrOFq9kAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU5MzE1Mw==", "bodyText": "I was going to file a bug about result-level cache key computation does not taken interval details into account until this comes along. If this is intentional, it still not clear about how the result-level cache \"tacking on datasource and interval details\". Maybe it's better to add more docs on this part?", "url": "https://github.com/apache/druid/pull/9280#discussion_r380593153", "createdAt": "2020-02-18T10:43:41Z", "author": {"login": "khwj"}, "path": "processing/src/main/java/org/apache/druid/query/CacheStrategy.java", "diffHunk": "@@ -48,21 +50,27 @@\n   boolean isCacheable(QueryType query, boolean willMergeRunners);\n \n   /**\n-   * Computes the cache key for the given query\n+   * Computes the per-segment cache key for the given query. Because this is a per-segment cache key, it should only\n+   * include parts of the query that affect the results for a specific segment (i.e., the results returned from\n+   * {@link QueryRunnerFactory#createRunner}).\n    *\n-   * @param query the query to compute a cache key for\n+   * @param query the query to be cached\n    *\n-   * @return the cache key\n+   * @return the per-segment cache key\n    */\n   byte[] computeCacheKey(QueryType query);\n \n   /**\n-   * Computes the result level cache key for the given query.\n-   * Some implementations may include query parameters that might not be used in {@code computeCacheKey} for same query\n+   * Computes the result-level cache key for the given query. The result-level cache will tack on datasource and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a7a93eafc872df8c3245c34a309f40c997943c4"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3042, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}