{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMzY4MzY4", "number": 10106, "title": "Add validation for authenticator and authorizer name", "bodyText": "Description\nThis PR fixes an issue flagged by LGTM. It prevents .. and / characters from being used in the authorizer name so that the authorizer APIs can not be abused to access files on the overlord. Only a Druid admin can access these APIs, so it is assumed that this admin already has access to the same files on the server that Druid has access to.\nWhen an admin provides an authorizer name via system properties, no validation is done at this point, but it might be worth considering in the future.\n\nThis PR has:\n\n been self-reviewed.\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths, ensuring the threshold for code coverage is met.\n added integration tests.\n been tested in a test Druid cluster.\n\n\nKey changed/added classes in this PR\n\nAuthorizerResourceFilter\nAuthorizerNameValidation", "createdAt": "2020-07-01T00:19:58Z", "url": "https://github.com/apache/druid/pull/10106", "merged": true, "mergeCommit": {"oid": "e6c9142129f1462feabefb4b13aa8a037fbe793f"}, "closed": true, "closedAt": "2020-07-14T04:15:55Z", "author": {"login": "suneet-s"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwe46pAH2gAyNDQyMzY4MzY4OjMzOWZkYzJmYTlhYzIwYTE3ZGQ0MmI0OWM1YTUxMDZlMjEwYTAxYTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc0tXmbgFqTQ0Nzc1NzI4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "339fdc2fa9ac20a17dd42b49c5a5106e210a01a4", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/339fdc2fa9ac20a17dd42b49c5a5106e210a01a4", "committedDate": "2020-07-01T00:13:46Z", "message": "Add validation for authorizer name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66b4f28bfb52acaf3243a2277167c5ae1cec322b", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/66b4f28bfb52acaf3243a2277167c5ae1cec322b", "committedDate": "2020-07-01T14:28:41Z", "message": "fix deps"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40f205faa584ae87df5b74585d2c1d0216694a1b", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/40f205faa584ae87df5b74585d2c1d0216694a1b", "committedDate": "2020-07-01T17:37:53Z", "message": "add javadocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45a8e1c50a668c889d111cbe65a06b6ba8d224eb", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/45a8e1c50a668c889d111cbe65a06b6ba8d224eb", "committedDate": "2020-07-01T17:38:19Z", "message": "Merge remote-tracking branch 'upstream/master' into lgtm-2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMjI3MTc3", "url": "https://github.com/apache/druid/pull/10106#pullrequestreview-441227177", "createdAt": "2020-07-01T22:07:36Z", "commit": {"oid": "66b4f28bfb52acaf3243a2277167c5ae1cec322b"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMjowNzozNlrOGr24hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMjoxNDoyNFrOGr3B1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0MTE1Nw==", "bodyText": "It would be good to also use this constant in AuthorizerResourceFilter.filter and in the @PathParam annotations of BasicAuthorizerResource. There's a lot of places where the string \"authorizerName\" appears, and using a constant would emphasize that this specific string is important.", "url": "https://github.com/apache/druid/pull/10106#discussion_r448641157", "createdAt": "2020-07-01T22:07:36Z", "author": {"login": "gianm"}, "path": "server/src/main/java/org/apache/druid/server/security/AuthorizerNameValidator.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.server.security;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Strings;\n+import org.apache.druid.java.util.common.StringUtils;\n+\n+import java.util.function.Consumer;\n+\n+/**\n+ * A class that validates the name of an authorizer.\n+ */\n+public class AuthorizerNameValidator implements Consumer<String>\n+{\n+  private static final String AUTHORIZER_NAME = \"authorizerName\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66b4f28bfb52acaf3243a2277167c5ae1cec322b"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0MTYwOQ==", "bodyText": "Why not use an interface named AuthorizerNameValidator? Then the interface could have javadocs explaining the expected usage and contract.", "url": "https://github.com/apache/druid/pull/10106#discussion_r448641609", "createdAt": "2020-07-01T22:08:56Z", "author": {"login": "gianm"}, "path": "server/src/main/java/org/apache/druid/server/initialization/AuthorizerMapperModule.java", "diffHunk": "@@ -58,7 +62,10 @@ public void configure(Binder binder)\n     binder.bind(AuthorizerMapper.class)\n           .toProvider(new AuthorizerMapperProvider())\n           .in(LazySingleton.class);\n-\n+    binder.bind(new TypeLiteral<Consumer<String>>() {})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66b4f28bfb52acaf3243a2277167c5ae1cec322b"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0MjE5Ng==", "bodyText": "What happens if it's not found, and indexOf returns -1, then the +1 makes us do .get(0)?", "url": "https://github.com/apache/druid/pull/10106#discussion_r448642196", "createdAt": "2020-07-01T22:10:24Z", "author": {"login": "gianm"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/overlord/http/security/AuthorizerResourceFilter.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.overlord.http.security;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Iterables;\n+import com.sun.jersey.spi.container.ContainerRequest;\n+import com.sun.jersey.spi.container.ContainerRequestFilter;\n+import com.sun.jersey.spi.container.ContainerResponseFilter;\n+import com.sun.jersey.spi.container.ResourceFilter;\n+import org.apache.druid.server.security.AuthorizerValidation;\n+\n+import javax.inject.Inject;\n+import java.util.function.Consumer;\n+\n+public class AuthorizerResourceFilter implements ResourceFilter, ContainerRequestFilter\n+{\n+  private final Consumer<String> authorizerNameValidator;\n+\n+  @Inject\n+  AuthorizerResourceFilter(@AuthorizerValidation Consumer<String> authorizerNameValidator)\n+  {\n+    this.authorizerNameValidator = authorizerNameValidator;\n+  }\n+\n+  @Override\n+  public ContainerRequestFilter getRequestFilter()\n+  {\n+    return this;\n+  }\n+\n+  @Override\n+  public ContainerResponseFilter getResponseFilter()\n+  {\n+    return null;\n+  }\n+\n+  @Override\n+  public ContainerRequest filter(ContainerRequest request)\n+  {\n+    String authorizerName = Preconditions.checkNotNull(\n+        request.getPathSegments()\n+               .get(\n+                   Iterables.indexOf(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66b4f28bfb52acaf3243a2277167c5ae1cec322b"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0MzU0Mg==", "bodyText": "Are you sure this is right? I would think that getPath() returns the contents of the path segment (i.e., the name of the authorizer), not the name of the path segment.", "url": "https://github.com/apache/druid/pull/10106#discussion_r448643542", "createdAt": "2020-07-01T22:14:24Z", "author": {"login": "gianm"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/overlord/http/security/AuthorizerResourceFilter.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.indexing.overlord.http.security;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Iterables;\n+import com.sun.jersey.spi.container.ContainerRequest;\n+import com.sun.jersey.spi.container.ContainerRequestFilter;\n+import com.sun.jersey.spi.container.ContainerResponseFilter;\n+import com.sun.jersey.spi.container.ResourceFilter;\n+import org.apache.druid.server.security.AuthorizerValidation;\n+\n+import javax.inject.Inject;\n+import java.util.function.Consumer;\n+\n+public class AuthorizerResourceFilter implements ResourceFilter, ContainerRequestFilter\n+{\n+  private final Consumer<String> authorizerNameValidator;\n+\n+  @Inject\n+  AuthorizerResourceFilter(@AuthorizerValidation Consumer<String> authorizerNameValidator)\n+  {\n+    this.authorizerNameValidator = authorizerNameValidator;\n+  }\n+\n+  @Override\n+  public ContainerRequestFilter getRequestFilter()\n+  {\n+    return this;\n+  }\n+\n+  @Override\n+  public ContainerResponseFilter getResponseFilter()\n+  {\n+    return null;\n+  }\n+\n+  @Override\n+  public ContainerRequest filter(ContainerRequest request)\n+  {\n+    String authorizerName = Preconditions.checkNotNull(\n+        request.getPathSegments()\n+               .get(\n+                   Iterables.indexOf(\n+                       request.getPathSegments(),\n+                       input -> \"authorizerName\".equals(input.getPath())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66b4f28bfb52acaf3243a2277167c5ae1cec322b"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87551f1ae2018ef15b2625759985508a50b0a3dd", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/87551f1ae2018ef15b2625759985508a50b0a3dd", "committedDate": "2020-07-10T19:18:08Z", "message": "Do not use resource filters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "faf74b27164d3528c89548e41c2b591bd499e803", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/faf74b27164d3528c89548e41c2b591bd499e803", "committedDate": "2020-07-10T19:18:22Z", "message": "Merge remote-tracking branch 'upstream/master' into lgtm-2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a8a3d6ba2aa45d439c1594205a0f88ccd10d612", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/3a8a3d6ba2aa45d439c1594205a0f88ccd10d612", "committedDate": "2020-07-10T23:27:25Z", "message": "Fix BasicAuthenticatorResource as well"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7e00b2ae51990c83141efa953a8b0b71cda0fbe", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/e7e00b2ae51990c83141efa953a8b0b71cda0fbe", "committedDate": "2020-07-10T23:59:23Z", "message": "Add integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a1b9cc2232abe776d50ed77fa4ec0e46b8ef3e4", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/2a1b9cc2232abe776d50ed77fa4ec0e46b8ef3e4", "committedDate": "2020-07-11T00:01:34Z", "message": "Merge remote-tracking branch 'upstream/master' into lgtm-2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a278641f2f7fcc7783790a1bd73de763100067d0", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/a278641f2f7fcc7783790a1bd73de763100067d0", "committedDate": "2020-07-11T01:32:51Z", "message": "fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25ffb81fb7659f53865429954edeab0ad704096b", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/25ffb81fb7659f53865429954edeab0ad704096b", "committedDate": "2020-07-11T02:46:51Z", "message": "fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NDI3NDgw", "url": "https://github.com/apache/druid/pull/10106#pullrequestreview-447427480", "createdAt": "2020-07-13T16:51:27Z", "commit": {"oid": "25ffb81fb7659f53865429954edeab0ad704096b"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjo1MToyN1rOGwxIRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjo1NDo1NVrOGwxQbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc4OTc2NQ==", "bodyText": "Why are these methods not static? It doesn't seem to need to inject this class if they are static.", "url": "https://github.com/apache/druid/pull/10106#discussion_r453789765", "createdAt": "2020-07-13T16:51:27Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/server/security/AuthValidator.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.server.security;\n+\n+import org.apache.druid.common.utils.IdUtils;\n+\n+/**\n+ * Utility functions to validate the an authorizer.\n+ */\n+public class AuthValidator\n+{\n+  private static final String AUTHORIZER_NAME = \"authorizerName\";\n+  private static final String AUTHENTICATOR_NAME = \"authenticatorName\";\n+\n+  /**\n+   * Validates the provided authorizerName.\n+   *\n+   * @param authorizerName the name of the authorizer.\n+   * @throws IllegalArgumentException on invalid authorizer names.\n+   */\n+  public void validateAuthorizerName(String authorizerName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25ffb81fb7659f53865429954edeab0ad704096b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5MDUyOA==", "bodyText": "Can this check be added in BasicSecurityResourceFilter instead of adding it everywhere? BasicSecurityResourceFilter is used by both BasicAuthenticationResource and BasicAuthorizerResource.", "url": "https://github.com/apache/druid/pull/10106#discussion_r453790528", "createdAt": "2020-07-13T16:52:43Z", "author": {"login": "jihoonson"}, "path": "extensions-core/druid-basic-security/src/main/java/org/apache/druid/security/basic/authentication/endpoint/BasicAuthenticatorResource.java", "diffHunk": "@@ -102,6 +106,7 @@ public Response getAllUsers(\n       @PathParam(\"authenticatorName\") final String authenticatorName\n   )\n   {\n+    authValidator.validateAuthenticatorName(authenticatorName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25ffb81fb7659f53865429954edeab0ad704096b"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5MTcwMw==", "bodyText": "Why do we mock authValidator here? It doesn't seem hard to use the real method. I would suggest to use the real method in that case since we can catch potential side effects easily if we modify the logic of authValidator.", "url": "https://github.com/apache/druid/pull/10106#discussion_r453791703", "createdAt": "2020-07-13T16:54:39Z", "author": {"login": "jihoonson"}, "path": "extensions-core/druid-basic-security/src/test/java/org/apache/druid/security/basic/authentication/endpoint/BasicAuthenticatorResourceTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.security.basic.authentication.endpoint;\n+\n+import org.apache.druid.security.basic.authentication.entity.BasicAuthenticatorCredentialUpdate;\n+import org.apache.druid.server.security.AuthValidator;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Answers;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.nio.charset.StandardCharsets;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class BasicAuthenticatorResourceTest\n+{\n+  private static final String AUTHENTICATOR_NAME = \"AUTHENTICATOR_NAME\";\n+  private static final String INVALID_AUTHENTICATOR_NAME = \"INVALID_AUTHENTICATOR_NAME\";\n+  private static final String USER_NAME = \"USER_NAME\";\n+  private static final byte[] SERIALIZED_USER_MAP = \"SERIALIZED_USER_MAP\".getBytes(StandardCharsets.UTF_8);\n+  @Mock(answer = Answers.RETURNS_MOCKS)\n+  private BasicAuthenticatorResourceHandler handler;\n+  @Mock\n+  private AuthValidator authValidator;\n+  @Mock\n+  private HttpServletRequest req;\n+  @Mock\n+  private BasicAuthenticatorCredentialUpdate update;\n+\n+  private BasicAuthenticatorResource target;\n+\n+  @Before\n+  public void setUp()\n+  {\n+    Mockito.doThrow(IllegalArgumentException.class)\n+           .when(authValidator)\n+           .validateAuthenticatorName(INVALID_AUTHENTICATOR_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25ffb81fb7659f53865429954edeab0ad704096b"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5MTg1NQ==", "bodyText": "Same for BasicAuthorizerResourceFilter.", "url": "https://github.com/apache/druid/pull/10106#discussion_r453791855", "createdAt": "2020-07-13T16:54:55Z", "author": {"login": "jihoonson"}, "path": "extensions-core/druid-basic-security/src/test/java/org/apache/druid/security/basic/authentication/endpoint/BasicAuthenticatorResourceTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.security.basic.authentication.endpoint;\n+\n+import org.apache.druid.security.basic.authentication.entity.BasicAuthenticatorCredentialUpdate;\n+import org.apache.druid.server.security.AuthValidator;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Answers;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.nio.charset.StandardCharsets;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class BasicAuthenticatorResourceTest\n+{\n+  private static final String AUTHENTICATOR_NAME = \"AUTHENTICATOR_NAME\";\n+  private static final String INVALID_AUTHENTICATOR_NAME = \"INVALID_AUTHENTICATOR_NAME\";\n+  private static final String USER_NAME = \"USER_NAME\";\n+  private static final byte[] SERIALIZED_USER_MAP = \"SERIALIZED_USER_MAP\".getBytes(StandardCharsets.UTF_8);\n+  @Mock(answer = Answers.RETURNS_MOCKS)\n+  private BasicAuthenticatorResourceHandler handler;\n+  @Mock\n+  private AuthValidator authValidator;\n+  @Mock\n+  private HttpServletRequest req;\n+  @Mock\n+  private BasicAuthenticatorCredentialUpdate update;\n+\n+  private BasicAuthenticatorResource target;\n+\n+  @Before\n+  public void setUp()\n+  {\n+    Mockito.doThrow(IllegalArgumentException.class)\n+           .when(authValidator)\n+           .validateAuthenticatorName(INVALID_AUTHENTICATOR_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc5MTcwMw=="}, "originalCommit": {"oid": "25ffb81fb7659f53865429954edeab0ad704096b"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NzU3Mjgx", "url": "https://github.com/apache/druid/pull/10106#pullrequestreview-447757281", "createdAt": "2020-07-14T03:21:39Z", "commit": {"oid": "25ffb81fb7659f53865429954edeab0ad704096b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2211, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}