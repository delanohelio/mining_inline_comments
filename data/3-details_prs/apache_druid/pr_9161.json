{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNDA3NzA0", "number": 9161, "title": "first/last aggregators and nulls", "bodyText": "Description\nThis PR changes the behavior of first/last aggregators to respect null values to be more consistent with SQL. Existing behavior can be obtained by filtering numeric columns to not include null values.\nI did some additional digging related to findings of #9154 and #9159, and managed to hit an npe while sorting a top-n query by a 'long first' aggregator. Checking out the comparators, I assumed it had similar issues to #9159 and would be a quick/simple change, but how ever wrong I was.\nIt turns out, the 'first'/'last' family of aggregators was building on top of NullableNumericAggregatorFactory, following #8834, though the lack of correct SQL compatible null handling definitely predates that change. Anyway, the problem with using NullableNumericAggregatorFactory is that the 'first'/'last' aggregators aren't aggregating numbers, but rather a complex type of a SerializablePair containing the timestamp and the number column value. This would make the aggregator result for a row itself be null rather than a pair containing the timestamp and the null right hand side value, which caused all sorts of funny business down the line when sorting or combining values.\nFor a solution, I did some heavy refactoring, pulling out NumericFirstAggregator, NumericFirstBufferAggregator, NumericLastAggregator, and NumericLastBufferAggregator. Further refactoring could likely pull out an additional base type between the first and last aggs and buffer aggs, because the only differences is the time comparison and the initial time values, but it gets kind of messy because they aren't in the same package...\nAnyway, common code for tracking if the current value is null for on heap and buffer aggs is in these types, and so on and so forth, comparators fixed up, tests added, and so on, so I think these aggs should now handle null numbers correctly.\nNote: group by v1 queries will incorrectly report 0 for null numeric values in sql compatible mode since I haven't implemented a ComplexMetricSerde for long/long, long/float, and long/double pairs.\n\nThis PR has:\n\n been self-reviewed.\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-01-10T11:28:37Z", "url": "https://github.com/apache/druid/pull/9161", "merged": true, "mergeCommit": {"oid": "8011211a0ca26ae6fd221e3dfcaf64119609c120"}, "closed": true, "closedAt": "2020-01-20T19:51:55Z", "author": {"login": "clintropolis"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb46tcSgH2gAyMzYxNDA3NzA0OmZkMTJiNjYyYWI1ODNiYWI1YTU1OTg1MzhlN2RlZDc5MjNjYjg5MGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb8TPlMAFqTM0NTUxMTE4NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fd12b662ab583bab5a5598538e7ded7923cb890f", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/fd12b662ab583bab5a5598538e7ded7923cb890f", "committedDate": "2020-01-10T08:58:49Z", "message": "null handling for numeric first/last aggregators, refactor to not extend nullable numeric agg since they are complex typed aggs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f0cd184d5ce1afae92f4a62013b061501c00699", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/1f0cd184d5ce1afae92f4a62013b061501c00699", "committedDate": "2020-01-10T12:18:08Z", "message": "initially null or not based on config"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNDk5MDUw", "url": "https://github.com/apache/druid/pull/9161#pullrequestreview-341499050", "createdAt": "2020-01-11T02:44:03Z", "commit": {"oid": "1f0cd184d5ce1afae92f4a62013b061501c00699"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMjo0NDowM1rOFcj8jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMjo0NDowM1rOFcj8jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ5MzM5MA==", "bodyText": "Can you add javadocs for these buffer methods?", "url": "https://github.com/apache/druid/pull/9161#discussion_r365493390", "createdAt": "2020-01-11T02:44:03Z", "author": {"login": "jon-wei"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/last/NumericLastBufferAggregator.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.aggregation.last;\n+\n+import org.apache.druid.common.config.NullHandling;\n+import org.apache.druid.query.aggregation.BufferAggregator;\n+import org.apache.druid.query.monomorphicprocessing.RuntimeShapeInspector;\n+import org.apache.druid.segment.BaseLongColumnValueSelector;\n+import org.apache.druid.segment.BaseNullableColumnValueSelector;\n+\n+import java.nio.ByteBuffer;\n+\n+public abstract class NumericLastBufferAggregator<TSelector extends BaseNullableColumnValueSelector>\n+    implements BufferAggregator\n+{\n+  static final int NULL_OFFSET = Long.BYTES;\n+  static final int VALUE_OFFSET = NULL_OFFSET + Byte.BYTES;\n+  static byte RHS_NOT_NULL = 0x00;\n+  static byte RHS_NULL = 0x01;\n+\n+  final boolean useDefault = NullHandling.replaceWithDefault();\n+\n+  final BaseLongColumnValueSelector timeSelector;\n+  final TSelector valueSelector;\n+\n+  public NumericLastBufferAggregator(BaseLongColumnValueSelector timeSelector, TSelector valueSelector)\n+  {\n+    this.timeSelector = timeSelector;\n+    this.valueSelector = valueSelector;\n+  }\n+\n+  abstract void initValue(ByteBuffer buf, int position);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f0cd184d5ce1afae92f4a62013b061501c00699"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNDk5MTE5", "url": "https://github.com/apache/druid/pull/9161#pullrequestreview-341499119", "createdAt": "2020-01-11T02:45:06Z", "commit": {"oid": "1f0cd184d5ce1afae92f4a62013b061501c00699"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMjo0NTowNlrOFcj80g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMjo0NTowNlrOFcj80g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ5MzQ1OA==", "bodyText": "nit: to follow the ordering in the buffer, maybe move putValue call after the null marker setting", "url": "https://github.com/apache/druid/pull/9161#discussion_r365493458", "createdAt": "2020-01-11T02:45:06Z", "author": {"login": "jon-wei"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/last/NumericLastBufferAggregator.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.aggregation.last;\n+\n+import org.apache.druid.common.config.NullHandling;\n+import org.apache.druid.query.aggregation.BufferAggregator;\n+import org.apache.druid.query.monomorphicprocessing.RuntimeShapeInspector;\n+import org.apache.druid.segment.BaseLongColumnValueSelector;\n+import org.apache.druid.segment.BaseNullableColumnValueSelector;\n+\n+import java.nio.ByteBuffer;\n+\n+public abstract class NumericLastBufferAggregator<TSelector extends BaseNullableColumnValueSelector>\n+    implements BufferAggregator\n+{\n+  static final int NULL_OFFSET = Long.BYTES;\n+  static final int VALUE_OFFSET = NULL_OFFSET + Byte.BYTES;\n+  static byte RHS_NOT_NULL = 0x00;\n+  static byte RHS_NULL = 0x01;\n+\n+  final boolean useDefault = NullHandling.replaceWithDefault();\n+\n+  final BaseLongColumnValueSelector timeSelector;\n+  final TSelector valueSelector;\n+\n+  public NumericLastBufferAggregator(BaseLongColumnValueSelector timeSelector, TSelector valueSelector)\n+  {\n+    this.timeSelector = timeSelector;\n+    this.valueSelector = valueSelector;\n+  }\n+\n+  abstract void initValue(ByteBuffer buf, int position);\n+\n+  abstract void putValue(ByteBuffer buf, int position);\n+\n+  boolean isValueNull(ByteBuffer buf, int position)\n+  {\n+    return buf.get(position + NULL_OFFSET) == 1;\n+  }\n+\n+  void updateTimeWithValue(ByteBuffer buf, int position, long time)\n+  {\n+    buf.putLong(position, time);\n+    putValue(buf, position);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f0cd184d5ce1afae92f4a62013b061501c00699"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "920942151d2333ab4446fd8874b85e43d4c99793", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/920942151d2333ab4446fd8874b85e43d4c99793", "committedDate": "2020-01-17T19:46:08Z", "message": "Merge remote-tracking branch 'upstream/master' into first-last-agg-null-handling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0ODUzNTk2", "url": "https://github.com/apache/druid/pull/9161#pullrequestreview-344853596", "createdAt": "2020-01-17T21:34:21Z", "commit": {"oid": "1f0cd184d5ce1afae92f4a62013b061501c00699"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMTozNDoyMlrOFfF08w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMTo1MDo1MVrOFfGKDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE0NTY1MQ==", "bodyText": "== RHS_NULL?", "url": "https://github.com/apache/druid/pull/9161#discussion_r368145651", "createdAt": "2020-01-17T21:34:22Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/first/NumericFirstBufferAggregator.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.aggregation.first;\n+\n+import org.apache.druid.common.config.NullHandling;\n+import org.apache.druid.query.aggregation.BufferAggregator;\n+import org.apache.druid.query.monomorphicprocessing.RuntimeShapeInspector;\n+import org.apache.druid.segment.BaseLongColumnValueSelector;\n+import org.apache.druid.segment.BaseNullableColumnValueSelector;\n+\n+import java.nio.ByteBuffer;\n+\n+public abstract class NumericFirstBufferAggregator<TSelector extends BaseNullableColumnValueSelector>\n+    implements BufferAggregator\n+{\n+  static final int NULL_OFFSET = Long.BYTES;\n+  static final int VALUE_OFFSET = NULL_OFFSET + Byte.BYTES;\n+  static byte RHS_NOT_NULL = 0x00;\n+  static byte RHS_NULL = 0x01;\n+\n+  final boolean useDefault = NullHandling.replaceWithDefault();\n+\n+  final BaseLongColumnValueSelector timeSelector;\n+  final TSelector valueSelector;\n+\n+  public NumericFirstBufferAggregator(BaseLongColumnValueSelector timeSelector, TSelector valueSelector)\n+  {\n+    this.timeSelector = timeSelector;\n+    this.valueSelector = valueSelector;\n+  }\n+\n+  abstract void initValue(ByteBuffer buf, int position);\n+\n+  abstract void putValue(ByteBuffer buf, int position);\n+\n+  boolean isValueNull(ByteBuffer buf, int position)\n+  {\n+    return buf.get(position + NULL_OFFSET) == 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f0cd184d5ce1afae92f4a62013b061501c00699"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE1MTA1NQ==", "bodyText": "Byte.BYTES. Or perhaps adding a new variable NULL_SIZE?", "url": "https://github.com/apache/druid/pull/9161#discussion_r368151055", "createdAt": "2020-01-17T21:50:51Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/last/DoubleLastAggregatorFactory.java", "diffHunk": "@@ -230,7 +248,7 @@ public String getTypeName()\n   @Override\n   public int getMaxIntermediateSize()\n   {\n-    return Long.BYTES + Double.BYTES;\n+    return Long.BYTES + Double.BYTES + 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f0cd184d5ce1afae92f4a62013b061501c00699"}, "originalPosition": 125}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0ODYxNjEx", "url": "https://github.com/apache/druid/pull/9161#pullrequestreview-344861611", "createdAt": "2020-01-17T21:52:44Z", "commit": {"oid": "1f0cd184d5ce1afae92f4a62013b061501c00699"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "defc3a7dfc92ec15327647d1f0d9949437898f48", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/defc3a7dfc92ec15327647d1f0d9949437898f48", "committedDate": "2020-01-18T02:12:58Z", "message": "review stuff, make string first/last consistent with null handling of numeric columns, more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab2c73b7988ff0f68195c9b9c06cff5c07d50c56", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/ab2c73b7988ff0f68195c9b9c06cff5c07d50c56", "committedDate": "2020-01-18T02:26:19Z", "message": "docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7960b3c4a30b7bfb98501c073a3e66a2c3f6e1fb", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/7960b3c4a30b7bfb98501c073a3e66a2c3f6e1fb", "committedDate": "2020-01-18T03:32:54Z", "message": "Merge remote-tracking branch 'upstream/master' into first-last-agg-null-handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94c92b507aeb658adcb17e13a343125b2c926fd0", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/94c92b507aeb658adcb17e13a343125b2c926fd0", "committedDate": "2020-01-18T08:56:12Z", "message": "handle nil selectors, revert to primitive first/last types so groupby v1 works..."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1NTA2ODY3", "url": "https://github.com/apache/druid/pull/9161#pullrequestreview-345506867", "createdAt": "2020-01-20T19:49:19Z", "commit": {"oid": "94c92b507aeb658adcb17e13a343125b2c926fd0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1NTExMTg0", "url": "https://github.com/apache/druid/pull/9161#pullrequestreview-345511184", "createdAt": "2020-01-20T20:01:41Z", "commit": {"oid": "94c92b507aeb658adcb17e13a343125b2c926fd0"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMDowMTo0MVrOFfoLhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMToxNDowMVrOFfpWWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcwODQ4Ng==", "bodyText": "looks like this is missing unit tests? Also javadocs since this is a utility that would be used by many other classes", "url": "https://github.com/apache/druid/pull/9161#discussion_r368708486", "createdAt": "2020-01-20T20:01:41Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/collections/SerializablePair.java", "diffHunk": "@@ -45,4 +46,25 @@ public T2 getRhs()\n   {\n     return rhs;\n   }\n+\n+  public static <T1, T2> Comparator<SerializablePair<T1, T2>> createNullHandlingComparator(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94c92b507aeb658adcb17e13a343125b2c926fd0"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcxMzk1Mg==", "bodyText": "Are you referring to this property - https://github.com/apache/druid/blob/master/docs/configuration/index.md#sql-compatible-null-handling ? Would be nice to link to the configuration here.\nnit: I'd re-phrase slightly\ncomputes the metric value with the minimum timestamp. If no row exists, it will return 0 or `null` if [SQL compatible mode](../configuration/index.md#sql-compatible-null-handling) is enabled", "url": "https://github.com/apache/druid/pull/9161#discussion_r368713952", "createdAt": "2020-01-20T20:22:42Z", "author": {"login": "suneet-s"}, "path": "docs/querying/aggregations.md", "diffHunk": "@@ -136,7 +136,7 @@ Note that queries with first/last aggregators on a segment created with rollup e\n \n #### `doubleFirst` aggregator\n \n-`doubleFirst` computes the metric value with the minimum timestamp or 0 if no row exist\n+`doubleFirst` computes the metric value with the minimum timestamp or 0 in default mode or `null` in SQL compatible mode if no row exist", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94c92b507aeb658adcb17e13a343125b2c926fd0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcxNzI0Mw==", "bodyText": "Nice abstraction! \ud83c\udf89\nnote to self: can the get call be abstracted into the base class?", "url": "https://github.com/apache/druid/pull/9161#discussion_r368717243", "createdAt": "2020-01-20T20:34:04Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/first/DoubleFirstAggregator.java", "diffHunk": "@@ -20,42 +20,29 @@\n package org.apache.druid.query.aggregation.first;\n \n import org.apache.druid.collections.SerializablePair;\n-import org.apache.druid.query.aggregation.Aggregator;\n import org.apache.druid.segment.BaseDoubleColumnValueSelector;\n import org.apache.druid.segment.BaseLongColumnValueSelector;\n \n-public class DoubleFirstAggregator implements Aggregator\n+public class DoubleFirstAggregator extends NumericFirstAggregator<BaseDoubleColumnValueSelector>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94c92b507aeb658adcb17e13a343125b2c926fd0"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcyMDk5NQ==", "bodyText": "It took me a long time to try and figure out what the comparator was used for. I got wrapped up in the fact that the aggregator was meant compare timestamps, that I didn't realize this was for ordering. I think a javadoc on  #AggregatorFactory#getComparator would have cleared up my confusion pretty quickly", "url": "https://github.com/apache/druid/pull/9161#discussion_r368720995", "createdAt": "2020-01-20T20:48:15Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/first/DoubleFirstAggregatorFactory.java", "diffHunk": "@@ -45,10 +46,34 @@\n import java.util.Map;\n import java.util.Objects;\n \n-public class DoubleFirstAggregatorFactory extends NullableNumericAggregatorFactory<ColumnValueSelector>\n+public class DoubleFirstAggregatorFactory extends AggregatorFactory\n {\n+  private static final Aggregator NIL_AGGREGATOR = new DoubleFirstAggregator(\n+      NilColumnValueSelector.instance(),\n+      NilColumnValueSelector.instance()\n+  )\n+  {\n+    @Override\n+    public void aggregate()\n+    {\n+      // no-op\n+    }\n+  };\n+\n+  private static final BufferAggregator NIL_BUFFER_AGGREGATOR = new DoubleFirstBufferAggregator(\n+      NilColumnValueSelector.instance(),\n+      NilColumnValueSelector.instance()\n+  )\n+  {\n+    @Override\n+    public void aggregate(ByteBuffer buf, int position)\n+    {\n+      // no-op\n+    }\n+  };\n+\n   public static final Comparator<SerializablePair<Long, Double>> VALUE_COMPARATOR =\n-      Comparator.comparingDouble(o -> o.rhs);\n+      SerializablePair.createNullHandlingComparator(Double::compare, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94c92b507aeb658adcb17e13a343125b2c926fd0"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcyMjg4NQ==", "bodyText": "Based on javadocs in makeColumnValueSelector this selector can be NilColumnValueSelector\nin which case selector.getObject() on line 170 would return null and line 171 would throw an NPE?\nsimilar comment for the factorizeBuffered method", "url": "https://github.com/apache/druid/pull/9161#discussion_r368722885", "createdAt": "2020-01-20T20:55:37Z", "author": {"login": "suneet-s"}, "path": "processing/src/main/java/org/apache/druid/query/aggregation/first/DoubleFirstAggregatorFactory.java", "diffHunk": "@@ -126,35 +158,54 @@ public AggregatorFactory getCombiningFactory()\n     return new DoubleFirstAggregatorFactory(name, name)\n     {\n       @Override\n-      public Aggregator factorize(ColumnSelectorFactory metricFactory, ColumnValueSelector selector)\n+      public Aggregator factorize(ColumnSelectorFactory metricFactory)\n       {\n+        final ColumnValueSelector<SerializablePair<Long, Double>> selector =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94c92b507aeb658adcb17e13a343125b2c926fd0"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODcyNzY0MQ==", "bodyText": "it looks like these tests will only check useDefaultValuesForNull = true or is there some config I'm not seeing that sets it to false as well in another run?", "url": "https://github.com/apache/druid/pull/9161#discussion_r368727641", "createdAt": "2020-01-20T21:14:01Z", "author": {"login": "suneet-s"}, "path": "processing/src/test/java/org/apache/druid/query/aggregation/first/DoubleFirstAggregationTest.java", "diffHunk": "@@ -30,14 +30,16 @@\n import org.apache.druid.query.aggregation.TestObjectColumnSelector;\n import org.apache.druid.segment.ColumnSelectorFactory;\n import org.apache.druid.segment.column.ColumnHolder;\n+import org.apache.druid.testing.InitializedNullHandlingTest;\n import org.easymock.EasyMock;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n \n import java.nio.ByteBuffer;\n+import java.util.Comparator;\n \n-public class DoubleFirstAggregationTest\n+public class DoubleFirstAggregationTest extends InitializedNullHandlingTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94c92b507aeb658adcb17e13a343125b2c926fd0"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3696, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}