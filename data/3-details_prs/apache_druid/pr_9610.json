{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3OTQxOTU4", "number": 9610, "title": "Fix NPE in RemoteTaskRunner event handler causes JVM shutdown", "bodyText": "Fix NPE in RemoteTaskRunner event handler causes JVM shutdown\nDescription\nAn overlord can encountered the following NPE and subsequently triggered a JVM shutdown:\njava.lang.NullPointerException: null\nat org.apache.druid.indexing.overlord.RemoteTaskRunner.lambda$addWorker$4(RemoteTaskRunner.java:1070) \n\nThis is in the following code reproduced below:\ncatch (Exception e) {\nlog.makeAlert(e, \"Failed to handle new worker status\")\n.addData(\"worker\", zkWorker.getWorker().getHost())\n.addData(\"znode\", event.getData().getPath())\n.emit();\n}\n\nThis method needs a null check for event.getData(), since data can be null: https://curator.apache.org/apidocs/org/apache/curator/framework/recipes/cache/PathChildrenCacheEvent.html\nAlso, added null checks for other parameters just to be safe.\nAlso updated the version of Curator to 4.3.0. Note that Curator version 4.3.0 has the fix for #8177 which earlier (before 4.3.0 exist) prevent us upgrading Curator's version.\nThis PR has:\n\n been self-reviewed.\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-04-03T05:17:15Z", "url": "https://github.com/apache/druid/pull/9610", "merged": true, "mergeCommit": {"oid": "b95a1b9878588ccc975fd6724a02b18b89c4d46f"}, "closed": true, "closedAt": "2020-04-07T21:53:52Z", "author": {"login": "maytasm"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcT5yxGgH2gAyMzk3OTQxOTU4OjU3NmJmMmFlODYyNTMwNTBkMzliMjlmMWZmZDNjZjU1ZDczMDkzODU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVaibtAFqTM4OTUxNzc0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "576bf2ae86253050d39b29f1ffd3cf55d7309385", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/576bf2ae86253050d39b29f1ffd3cf55d7309385", "committedDate": "2020-04-03T05:10:41Z", "message": "Fix NPE in RemoteTaskRunner event handler causes JVM shutdown"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82c979e994e74bf2add2b0de537c101f9fc7f844", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/82c979e994e74bf2add2b0de537c101f9fc7f844", "committedDate": "2020-04-03T20:32:44Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51106421b12a43b7f27bc2db0c033997378c85cc", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/51106421b12a43b7f27bc2db0c033997378c85cc", "committedDate": "2020-04-03T20:46:11Z", "message": "fix compile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "376b9b243b37dc9dd65d6350cb8ee7493b11ec47", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/376b9b243b37dc9dd65d6350cb8ee7493b11ec47", "committedDate": "2020-04-03T23:31:52Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88c5286e29ddff853e08a65c370a29ad0d8f3d12", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/88c5286e29ddff853e08a65c370a29ad0d8f3d12", "committedDate": "2020-04-03T23:54:34Z", "message": "fix lgtm"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70cc2fc2351e93d59e7dde8a561217bf37e6ca3e", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/70cc2fc2351e93d59e7dde8a561217bf37e6ca3e", "committedDate": "2020-04-04T01:17:57Z", "message": "Merge remote-tracking branch 'upstream/master' into IMPLY-2589"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17da2c587ed1a1c61926c05740b81068d7d8cbae", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/17da2c587ed1a1c61926c05740b81068d7d8cbae", "committedDate": "2020-04-04T01:38:55Z", "message": "fix merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "868176850bab929a43a7e1f3a8de4c48047afda4", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/868176850bab929a43a7e1f3a8de4c48047afda4", "committedDate": "2020-04-04T01:54:25Z", "message": "fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "258bfe476f5377789faec9bbf6ab9e1869110f99", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/258bfe476f5377789faec9bbf6ab9e1869110f99", "committedDate": "2020-04-04T04:00:16Z", "message": "fix tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjczMDg2", "url": "https://github.com/apache/druid/pull/9610#pullrequestreview-387673086", "createdAt": "2020-04-04T06:32:53Z", "commit": {"oid": "258bfe476f5377789faec9bbf6ab9e1869110f99"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNjozMjo1M1rOGAvmpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNjozODo0MlrOGAvocA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzMzEyNw==", "bodyText": "what is this change about, was this relying on curator providing it?", "url": "https://github.com/apache/druid/pull/9610#discussion_r403433127", "createdAt": "2020-04-04T06:32:53Z", "author": {"login": "clintropolis"}, "path": "extensions-contrib/ambari-metrics-emitter/pom.xml", "diffHunk": "@@ -48,6 +48,18 @@\n       <type>test-jar</type>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "258bfe476f5377789faec9bbf6ab9e1869110f99"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzMzU4NA==", "bodyText": "Per the PR description/linked javadocs, can this and other usages of event.getData() in this switch statement be null? I guess we are relying on an NPE happening and then the catch checking and handling there? It might be nicer to explicitly check and throw a more useful error about the ChildData for the event unexpectedly being null so that the alerted exception is more useful", "url": "https://github.com/apache/druid/pull/9610#discussion_r403433584", "createdAt": "2020-04-04T06:38:42Z", "author": {"login": "clintropolis"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/overlord/RemoteTaskRunner.java", "diffHunk": "@@ -1081,6 +979,117 @@ private boolean cancelWorkerCleanup(String workerHost)\n     }\n   }\n \n+  @VisibleForTesting\n+  PathChildrenCacheListener getStatusListener(final Worker worker, final ZkWorker zkWorker, final SettableFuture<ZkWorker> retVal)\n+  {\n+    return (client, event) -> {\n+      final String taskId;\n+      final RemoteTaskRunnerWorkItem taskRunnerWorkItem;\n+      synchronized (statusLock) {\n+        try {\n+          switch (event.getType()) { // lgtm [java/dereferenced-value-may-be-null]\n+            case CHILD_ADDED:\n+            case CHILD_UPDATED:\n+              taskId = ZKPaths.getNodeFromPath(event.getData().getPath()); // lgtm [java/dereferenced-value-may-be-null]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "258bfe476f5377789faec9bbf6ab9e1869110f99"}, "originalPosition": 135}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6b76ba077c058107b655699004f435a9f8ba554", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/d6b76ba077c058107b655699004f435a9f8ba554", "committedDate": "2020-04-04T07:29:12Z", "message": "change scope"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e62d3da2abb5d05a7bf89f304c8031a2c1a5163", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/0e62d3da2abb5d05a7bf89f304c8031a2c1a5163", "committedDate": "2020-04-04T07:42:39Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NjE5MDA1", "url": "https://github.com/apache/druid/pull/9610#pullrequestreview-388619005", "createdAt": "2020-04-06T21:09:23Z", "commit": {"oid": "0e62d3da2abb5d05a7bf89f304c8031a2c1a5163"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMTowOToyM1rOGBp_IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMToyMDowOFrOGBqUtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4OTY2NA==", "bodyText": "Please put these test dependencies with others below (at Line 133) together.", "url": "https://github.com/apache/druid/pull/9610#discussion_r404389664", "createdAt": "2020-04-06T21:09:23Z", "author": {"login": "jihoonson"}, "path": "extensions-contrib/ambari-metrics-emitter/pom.xml", "diffHunk": "@@ -48,6 +48,18 @@\n       <type>test-jar</type>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.codehaus.jackson</groupId>\n+      <artifactId>jackson-core-asl</artifactId>\n+      <version>${codehaus.jackson.version}</version>\n+      <scope>test</scope>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e62d3da2abb5d05a7bf89f304c8031a2c1a5163"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM5MTMxMw==", "bodyText": "I don't think event can ever be null. Check out callers of PathChildrenCache.callListeners().", "url": "https://github.com/apache/druid/pull/9610#discussion_r404391313", "createdAt": "2020-04-06T21:12:44Z", "author": {"login": "jihoonson"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/overlord/RemoteTaskRunner.java", "diffHunk": "@@ -969,116 +970,129 @@ private boolean cancelWorkerCleanup(String workerHost)\n       );\n \n       // Add status listener to the watcher for status changes\n-      zkWorker.addListener(\n-          (client, event) -> {\n-            final String taskId;\n-            final RemoteTaskRunnerWorkItem taskRunnerWorkItem;\n-            synchronized (statusLock) {\n-              try {\n-                switch (event.getType()) {\n-                  case CHILD_ADDED:\n-                  case CHILD_UPDATED:\n-                    taskId = ZKPaths.getNodeFromPath(event.getData().getPath());\n-                    final TaskAnnouncement announcement = jsonMapper.readValue(\n-                        event.getData().getData(), TaskAnnouncement.class\n-                    );\n-\n-                    log.info(\n-                        \"Worker[%s] wrote %s status for task [%s] on [%s]\",\n-                        zkWorker.getWorker().getHost(),\n-                        announcement.getTaskStatus().getStatusCode(),\n-                        taskId,\n-                        announcement.getTaskLocation()\n-                    );\n-\n-                    // Synchronizing state with ZK\n-                    statusLock.notifyAll();\n-\n-                    final RemoteTaskRunnerWorkItem tmp;\n-                    if ((tmp = runningTasks.get(taskId)) != null) {\n-                      taskRunnerWorkItem = tmp;\n-                    } else {\n-                      final RemoteTaskRunnerWorkItem newTaskRunnerWorkItem = new RemoteTaskRunnerWorkItem(\n-                          taskId,\n-                          announcement.getTaskType(),\n-                          zkWorker.getWorker(),\n-                          TaskLocation.unknown(),\n-                          announcement.getTaskDataSource()\n-                      );\n-                      final RemoteTaskRunnerWorkItem existingItem = runningTasks.putIfAbsent(\n-                          taskId,\n-                          newTaskRunnerWorkItem\n-                      );\n-                      if (existingItem == null) {\n-                        log.warn(\n-                            \"Worker[%s] announced a status for a task I didn't know about, adding to runningTasks: %s\",\n-                            zkWorker.getWorker().getHost(),\n-                            taskId\n-                        );\n-                        taskRunnerWorkItem = newTaskRunnerWorkItem;\n-                      } else {\n-                        taskRunnerWorkItem = existingItem;\n-                      }\n-                    }\n-\n-                    if (!announcement.getTaskLocation().equals(taskRunnerWorkItem.getLocation())) {\n-                      taskRunnerWorkItem.setLocation(announcement.getTaskLocation());\n-                      TaskRunnerUtils.notifyLocationChanged(listeners, taskId, announcement.getTaskLocation());\n-                    }\n+      zkWorker.addListener(getStatusListener(worker, zkWorker, retVal));\n+      zkWorker.start();\n+      return retVal;\n+    }\n+    catch (Exception e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n \n-                    if (announcement.getTaskStatus().isComplete()) {\n-                      taskComplete(taskRunnerWorkItem, zkWorker, announcement.getTaskStatus());\n-                      runPendingTasks();\n-                    }\n-                    break;\n-                  case CHILD_REMOVED:\n-                    taskId = ZKPaths.getNodeFromPath(event.getData().getPath());\n-                    taskRunnerWorkItem = runningTasks.remove(taskId);\n-                    if (taskRunnerWorkItem != null) {\n-                      log.info(\"Task[%s] just disappeared!\", taskId);\n-                      taskRunnerWorkItem.setResult(TaskStatus.failure(taskId));\n-                      TaskRunnerUtils.notifyStatusChanged(listeners, taskId, TaskStatus.failure(taskId));\n-                    } else {\n-                      log.info(\"Task[%s] went bye bye.\", taskId);\n-                    }\n-                    break;\n-                  case INITIALIZED:\n-                    if (zkWorkers.putIfAbsent(worker.getHost(), zkWorker) == null) {\n-                      retVal.set(zkWorker);\n-                    } else {\n-                      final String message = StringUtils.format(\n-                          \"WTF?! Tried to add already-existing worker[%s]\",\n-                          worker.getHost()\n-                      );\n-                      log.makeAlert(message)\n-                         .addData(\"workerHost\", worker.getHost())\n-                         .addData(\"workerIp\", worker.getIp())\n-                         .emit();\n-                      retVal.setException(new IllegalStateException(message));\n-                    }\n-                    runPendingTasks();\n-                    break;\n-                  case CONNECTION_SUSPENDED:\n-                  case CONNECTION_RECONNECTED:\n-                  case CONNECTION_LOST:\n-                    // do nothing\n+  @VisibleForTesting\n+  PathChildrenCacheListener getStatusListener(final Worker worker, final ZkWorker zkWorker, final SettableFuture<ZkWorker> retVal)\n+  {\n+    return (client, event) -> {\n+      final String taskId;\n+      final RemoteTaskRunnerWorkItem taskRunnerWorkItem;\n+      synchronized (statusLock) {\n+        try {\n+          switch (event.getType()) { // lgtm [java/dereferenced-value-may-be-null]\n+            case CHILD_ADDED:\n+            case CHILD_UPDATED:\n+              taskId = ZKPaths.getNodeFromPath(event.getData().getPath()); // lgtm [java/dereferenced-value-may-be-null]\n+              final TaskAnnouncement announcement = jsonMapper.readValue(\n+                  event.getData().getData(), TaskAnnouncement.class // lgtm [java/dereferenced-value-may-be-null]\n+              );\n+\n+              log.info(\n+                  \"Worker[%s] wrote %s status for task [%s] on [%s]\",\n+                  zkWorker.getWorker().getHost(),\n+                  announcement.getTaskStatus().getStatusCode(),\n+                  taskId,\n+                  announcement.getTaskLocation()\n+              );\n+\n+              // Synchronizing state with ZK\n+              statusLock.notifyAll();\n+\n+              final RemoteTaskRunnerWorkItem tmp;\n+              if ((tmp = runningTasks.get(taskId)) != null) {\n+                taskRunnerWorkItem = tmp;\n+              } else {\n+                final RemoteTaskRunnerWorkItem newTaskRunnerWorkItem = new RemoteTaskRunnerWorkItem(\n+                    taskId,\n+                    announcement.getTaskType(),\n+                    zkWorker.getWorker(),\n+                    TaskLocation.unknown(),\n+                    announcement.getTaskDataSource()\n+                );\n+                final RemoteTaskRunnerWorkItem existingItem = runningTasks.putIfAbsent(\n+                    taskId,\n+                    newTaskRunnerWorkItem\n+                );\n+                if (existingItem == null) {\n+                  log.warn(\n+                      \"Worker[%s] announced a status for a task I didn't know about, adding to runningTasks: %s\",\n+                      zkWorker.getWorker().getHost(),\n+                      taskId\n+                  );\n+                  taskRunnerWorkItem = newTaskRunnerWorkItem;\n+                } else {\n+                  taskRunnerWorkItem = existingItem;\n                 }\n               }\n-              catch (Exception e) {\n-                log.makeAlert(e, \"Failed to handle new worker status\")\n-                   .addData(\"worker\", zkWorker.getWorker().getHost())\n-                   .addData(\"znode\", event.getData().getPath())\n+\n+              if (!announcement.getTaskLocation().equals(taskRunnerWorkItem.getLocation())) {\n+                taskRunnerWorkItem.setLocation(announcement.getTaskLocation());\n+                TaskRunnerUtils.notifyLocationChanged(listeners, taskId, announcement.getTaskLocation());\n+              }\n+\n+              if (announcement.getTaskStatus().isComplete()) {\n+                taskComplete(taskRunnerWorkItem, zkWorker, announcement.getTaskStatus());\n+                runPendingTasks();\n+              }\n+              break;\n+            case CHILD_REMOVED:\n+              taskId = ZKPaths.getNodeFromPath(event.getData().getPath()); // lgtm [java/dereferenced-value-may-be-null]\n+              taskRunnerWorkItem = runningTasks.remove(taskId);\n+              if (taskRunnerWorkItem != null) {\n+                log.info(\"Task[%s] just disappeared!\", taskId);\n+                taskRunnerWorkItem.setResult(TaskStatus.failure(taskId));\n+                TaskRunnerUtils.notifyStatusChanged(listeners, taskId, TaskStatus.failure(taskId));\n+              } else {\n+                log.info(\"Task[%s] went bye bye.\", taskId);\n+              }\n+              break;\n+            case INITIALIZED:\n+              if (zkWorkers.putIfAbsent(worker.getHost(), zkWorker) == null) {\n+                retVal.set(zkWorker);\n+              } else {\n+                final String message = StringUtils.format(\n+                    \"This should not happen...tried to add already-existing worker[%s]\",\n+                    worker.getHost()\n+                );\n+                log.makeAlert(message)\n+                   .addData(\"workerHost\", worker.getHost())\n+                   .addData(\"workerIp\", worker.getIp())\n                    .emit();\n+                retVal.setException(new IllegalStateException(message));\n               }\n+              runPendingTasks();\n+              break;\n+            case CONNECTION_SUSPENDED:\n+            case CONNECTION_RECONNECTED:\n+            case CONNECTION_LOST:\n+              // do nothing\n+          }\n+        }\n+        catch (Exception e) {\n+          String znode = null;\n+          String eventType = null;\n+          if (event != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e62d3da2abb5d05a7bf89f304c8031a2c1a5163"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM5NTE5MA==", "bodyText": "Yes. event.getData() can be null here and everywhere else in this function. I dont think we need to do anything differently in handling the null from event.getData() so I just let NPE happens and the catch will take care of logging and making sure the JVM doesnt shutdown.\n\neven.getData() can be null depending on the event type; it must not be null for CHILD_ADDED, CHILD_UPDATED, and CHILD_REMOVED events. It should be null otherwise. I think it's worth checking null depending on the event type.", "url": "https://github.com/apache/druid/pull/9610#discussion_r404395190", "createdAt": "2020-04-06T21:20:08Z", "author": {"login": "jihoonson"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/overlord/RemoteTaskRunner.java", "diffHunk": "@@ -1081,6 +979,117 @@ private boolean cancelWorkerCleanup(String workerHost)\n     }\n   }\n \n+  @VisibleForTesting\n+  PathChildrenCacheListener getStatusListener(final Worker worker, final ZkWorker zkWorker, final SettableFuture<ZkWorker> retVal)\n+  {\n+    return (client, event) -> {\n+      final String taskId;\n+      final RemoteTaskRunnerWorkItem taskRunnerWorkItem;\n+      synchronized (statusLock) {\n+        try {\n+          switch (event.getType()) { // lgtm [java/dereferenced-value-may-be-null]\n+            case CHILD_ADDED:\n+            case CHILD_UPDATED:\n+              taskId = ZKPaths.getNodeFromPath(event.getData().getPath()); // lgtm [java/dereferenced-value-may-be-null]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzMzU4NA=="}, "originalCommit": {"oid": "258bfe476f5377789faec9bbf6ab9e1869110f99"}, "originalPosition": 135}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb9ced297bdf033e5e235b26dbcc874501d13f75", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/fb9ced297bdf033e5e235b26dbcc874501d13f75", "committedDate": "2020-04-07T07:41:35Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5Mzg1Mzg4", "url": "https://github.com/apache/druid/pull/9610#pullrequestreview-389385388", "createdAt": "2020-04-07T18:33:28Z", "commit": {"oid": "fb9ced297bdf033e5e235b26dbcc874501d13f75"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NTE3NzQx", "url": "https://github.com/apache/druid/pull/9610#pullrequestreview-389517741", "createdAt": "2020-04-07T21:53:38Z", "commit": {"oid": "fb9ced297bdf033e5e235b26dbcc874501d13f75"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2790, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}