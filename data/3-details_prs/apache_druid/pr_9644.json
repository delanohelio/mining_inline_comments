{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNTk2MDI1", "number": 9644, "title": "Add missing integration tests for the compaction by the coordinator", "bodyText": "Add API to trigger a compaction by the coordinator for integration tests and add new integration tests for the auto compaction on the coordinator.\nDescription\nThe new API to manually trigger a compaction by the coordinator\n\nNeed to add a new CompactionResource\nMove /remainingSegmentSizeForCompaction from CoordinatorResource to CompactionResource and rename it properly\nAdd a new API /compact to CompactionResource to trigger a compaction by the coordinator for integration tests\nDocument /remainingSegmentSizeForCompaction (/compact will not be documented as it is meant to be use only in integration tests)\n\nIntegration tests flow\n\nTest auto compaction successfully merge segment\nTest auto compaction successfully slit segment\nTest auto compaction successfully skip using the skipOffsetFromLatest\nTest successfully update compaction config\nTest successfully remove compaction config\nTest successfully update compaction slots\n\nThis PR has:\n\n been self-reviewed.\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-04-08T02:39:19Z", "url": "https://github.com/apache/druid/pull/9644", "merged": true, "mergeCommit": {"oid": "8328d91b30e91d0bb12eb3b7efb2a3c57df81824"}, "closed": true, "closedAt": "2020-04-15T21:27:34Z", "author": {"login": "maytasm"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVemTigH2gAyNDAwNTk2MDI1OmI1NzE0YTg5ZGFiN2Y0ZjY1OTkwMTU0NjFjMDExNDBkMjEzNTU4ZGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcX-8_EAFqTM5NDE0NzM1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b5714a89dab7f4f6599015461c01140d213558da", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/b5714a89dab7f4f6599015461c01140d213558da", "committedDate": "2020-04-08T02:37:29Z", "message": "Add API to trigger a compaction by the coordinator for integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83fb3b2ec64eb93d38f3e312dad0928fdbb45857", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/83fb3b2ec64eb93d38f3e312dad0928fdbb45857", "committedDate": "2020-04-09T03:17:53Z", "message": "Add API to trigger a compaction by the coordinator for integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "279dae41416a1d6f8bd2ae43e3e3bb6993cf7c03", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/279dae41416a1d6f8bd2ae43e3e3bb6993cf7c03", "committedDate": "2020-04-09T03:25:25Z", "message": "Add API to trigger a compaction by the coordinator for integration tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwOTg3NDY5", "url": "https://github.com/apache/druid/pull/9644#pullrequestreview-390987469", "createdAt": "2020-04-09T17:23:22Z", "commit": {"oid": "279dae41416a1d6f8bd2ae43e3e3bb6993cf7c03"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzoyMzoyMlrOGDiLyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzo0MDo1NlrOGDiyww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM1ODk4NA==", "bodyText": "Should these APIs be documented?", "url": "https://github.com/apache/druid/pull/9644#discussion_r406358984", "createdAt": "2020-04-09T17:23:22Z", "author": {"login": "ccaominh"}, "path": "server/src/main/java/org/apache/druid/server/http/CompactionResource.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.server.http;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.inject.Inject;\n+import com.sun.jersey.spi.container.ResourceFilters;\n+import org.apache.druid.server.coordinator.DruidCoordinator;\n+import org.apache.druid.server.http.security.ConfigResourceFilter;\n+import org.apache.druid.server.http.security.StateResourceFilter;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+@Path(\"/druid/coordinator/v1/compaction\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "279dae41416a1d6f8bd2ae43e3e3bb6993cf7c03"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM1OTQ5Nw==", "bodyText": "This endpoint has been renamed. What happens to old clients that are calling the removed endpoint?", "url": "https://github.com/apache/druid/pull/9644#discussion_r406359497", "createdAt": "2020-04-09T17:24:08Z", "author": {"login": "ccaominh"}, "path": "server/src/main/java/org/apache/druid/server/http/CompactionResource.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.server.http;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.inject.Inject;\n+import com.sun.jersey.spi.container.ResourceFilters;\n+import org.apache.druid.server.coordinator.DruidCoordinator;\n+import org.apache.druid.server.http.security.ConfigResourceFilter;\n+import org.apache.druid.server.http.security.StateResourceFilter;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+@Path(\"/druid/coordinator/v1/compaction\")\n+public class CompactionResource\n+{\n+  private final DruidCoordinator coordinator;\n+\n+  @Inject\n+  public CompactionResource(\n+      DruidCoordinator coordinator\n+  )\n+  {\n+    this.coordinator = coordinator;\n+  }\n+\n+  @POST\n+  @Path(\"/compact\")\n+  @ResourceFilters(ConfigResourceFilter.class)\n+  public Response forceTriggerCompaction()\n+  {\n+    coordinator.runCompactSegmentsDuty();\n+    return Response.ok().build();\n+  }\n+\n+  @GET\n+  @Path(\"/progress\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "279dae41416a1d6f8bd2ae43e3e3bb6993cf7c03"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM1OTk2Ng==", "bodyText": "Indentation for ) seems off", "url": "https://github.com/apache/druid/pull/9644#discussion_r406359966", "createdAt": "2020-04-09T17:24:55Z", "author": {"login": "ccaominh"}, "path": "server/src/test/java/org/apache/druid/server/http/security/SecurityResourceFilterTest.java", "diffHunk": "@@ -72,8 +73,9 @@\n             getRequestPathsWithAuthorizer(StatusResource.class),\n             getRequestPathsWithAuthorizer(SelfDiscoveryResource.class),\n             getRequestPathsWithAuthorizer(BrokerQueryResource.class),\n-            getRequestPathsWithAuthorizer(RouterResource.class)\n-        )\n+            getRequestPathsWithAuthorizer(RouterResource.class),\n+            getRequestPathsWithAuthorizer(CompactionResource.class)\n+            )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "279dae41416a1d6f8bd2ae43e3e3bb6993cf7c03"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2NTgzMg==", "bodyText": "Why not return ImmutableList.of(compactSegments); instead?", "url": "https://github.com/apache/druid/pull/9644#discussion_r406365832", "createdAt": "2020-04-09T17:35:22Z", "author": {"login": "ccaominh"}, "path": "server/src/main/java/org/apache/druid/server/coordinator/DruidCoordinator.java", "diffHunk": "@@ -621,13 +628,20 @@ private void stopBeingLeader()\n     return ImmutableList.copyOf(duties);\n   }\n \n-  public class DutiesRunnable implements Runnable\n+  private List<CoordinatorDuty> makeCompactSegmentsDuty()\n+  {\n+    List<CoordinatorDuty> duties = new ArrayList<>();\n+    duties.add(compactSegments);\n+    return ImmutableList.copyOf(duties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "279dae41416a1d6f8bd2ae43e3e3bb6993cf7c03"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2ODk2Mw==", "bodyText": "Can we add tests for these?", "url": "https://github.com/apache/druid/pull/9644#discussion_r406368963", "createdAt": "2020-04-09T17:40:56Z", "author": {"login": "ccaominh"}, "path": "server/src/main/java/org/apache/druid/server/http/CompactionResource.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.server.http;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.inject.Inject;\n+import com.sun.jersey.spi.container.ResourceFilters;\n+import org.apache.druid.server.coordinator.DruidCoordinator;\n+import org.apache.druid.server.http.security.ConfigResourceFilter;\n+import org.apache.druid.server.http.security.StateResourceFilter;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+@Path(\"/druid/coordinator/v1/compaction\")\n+public class CompactionResource\n+{\n+  private final DruidCoordinator coordinator;\n+\n+  @Inject\n+  public CompactionResource(\n+      DruidCoordinator coordinator\n+  )\n+  {\n+    this.coordinator = coordinator;\n+  }\n+\n+  @POST", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "279dae41416a1d6f8bd2ae43e3e3bb6993cf7c03"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c3976f074690dd6ff4055c709f5d2f4d8812898", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/4c3976f074690dd6ff4055c709f5d2f4d8812898", "committedDate": "2020-04-10T07:18:50Z", "message": "Add API to trigger a compaction by the coordinator for integration tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNTkzNTA0", "url": "https://github.com/apache/druid/pull/9644#pullrequestreview-391593504", "createdAt": "2020-04-10T18:30:18Z", "commit": {"oid": "4c3976f074690dd6ff4055c709f5d2f4d8812898"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODozMDoxOFrOGECUFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODozMDoxOFrOGECUFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg4NTM5Nw==", "bodyText": "Maybe \"Compaction Status\" is a better description", "url": "https://github.com/apache/druid/pull/9644#discussion_r406885397", "createdAt": "2020-04-10T18:30:18Z", "author": {"login": "ccaominh"}, "path": "docs/operations/api-reference.md", "diffHunk": "@@ -362,6 +362,15 @@ Returns total size and count for each interval within given isointerval.\n \n Returns total size and count for each datasource for each interval within given isointerval.\n \n+#### Compaction Duty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c3976f074690dd6ff4055c709f5d2f4d8812898"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fefee057063e154faba5f83f773fc0e476337d7b", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/fefee057063e154faba5f83f773fc0e476337d7b", "committedDate": "2020-04-11T03:13:16Z", "message": "Add API to trigger a compaction by the coordinator for integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "745e0db9b7a713829ee42522d66dfa5c190ac33f", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/745e0db9b7a713829ee42522d66dfa5c190ac33f", "committedDate": "2020-04-11T03:20:16Z", "message": "Add missing integration tests for the compaction by the coordinator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3f9a8d2c6810ffe8467f87091de55643743b6e9", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/e3f9a8d2c6810ffe8467f87091de55643743b6e9", "committedDate": "2020-04-11T03:48:34Z", "message": "Add API to trigger a compaction by the coordinator for integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a87a34aed84c1682e957f60ed6054134ef90a49a", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/a87a34aed84c1682e957f60ed6054134ef90a49a", "committedDate": "2020-04-11T08:42:52Z", "message": "Add missing integration tests for the compaction by the coordinator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzQ4NzA5", "url": "https://github.com/apache/druid/pull/9644#pullrequestreview-391748709", "createdAt": "2020-04-11T08:44:55Z", "commit": {"oid": "a87a34aed84c1682e957f60ed6054134ef90a49a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwODo0NDo1NlrOGELk1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwODo0NDo1NlrOGELk1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzNzE0Mg==", "bodyText": "@jihoonson Not sure if this is expected but when I call the API for get compaction progress here I got status[400 Bad Request] content[{\"error\":\"unknown dataSource\"}] instead of 0. I expected 0 since all segments of the datasource have been compacted.", "url": "https://github.com/apache/druid/pull/9644#discussion_r407037142", "createdAt": "2020-04-11T08:44:56Z", "author": {"login": "maytasm"}, "path": "integration-tests/src/test/java/org/apache/druid/tests/coordinator/duty/ITAutoCompactionTest.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.tests.coordinator.duty;\n+\n+import com.google.inject.Inject;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.druid.indexer.partitions.SecondaryPartitionType;\n+import org.apache.druid.java.util.common.ISE;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.common.logger.Logger;\n+import org.apache.druid.server.coordinator.CoordinatorCompactionConfig;\n+import org.apache.druid.server.coordinator.DataSourceCompactionConfig;\n+import org.apache.druid.testing.IntegrationTestingConfig;\n+import org.apache.druid.testing.clients.CompactionResourceTestClient;\n+import org.apache.druid.testing.guice.DruidTestModuleFactory;\n+import org.apache.druid.testing.utils.ITRetryUtil;\n+import org.apache.druid.tests.TestNGGroup;\n+import org.apache.druid.tests.indexer.AbstractITBatchIndexTest;\n+import org.apache.druid.tests.indexer.AbstractIndexerTest;\n+import org.apache.druid.timeline.DataSegment;\n+import org.joda.time.Period;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Guice;\n+import org.testng.annotations.Test;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+@Test(groups = {TestNGGroup.OTHER_INDEX})\n+@Guice(moduleFactory = DruidTestModuleFactory.class)\n+public class ITAutoCompactionTest extends AbstractIndexerTest\n+{\n+  private static final Logger LOG = new Logger(ITAutoCompactionTest.class);\n+  private static final String INDEX_TASK = \"/indexer/wikipedia_index_task.json\";\n+  private static final String INDEX_QUERIES_RESOURCE = \"/indexer/wikipedia_index_queries.json\";\n+  private static final int MAX_ROWS_PER_SEGMENT_COMPACTED = 10000;\n+  private static final Period SKIP_OFFSET_FROM_LATEST = Period.seconds(0);\n+\n+  @Inject\n+  protected CompactionResourceTestClient compactionResource;\n+\n+  @Inject\n+  private IntegrationTestingConfig config;\n+\n+  private String fullDatasourceName;\n+\n+  @BeforeMethod\n+  public void setup() throws Exception\n+  {\n+    // Set comapction slot to 10\n+    updateCompactionTaskSlot(0.5, 10);\n+    fullDatasourceName = \"wikipedia_index_test_\" + UUID.randomUUID() + config.getExtraDatasourceNameSuffix();\n+  }\n+\n+  @Test\n+  public void testAutoCompactionDutySubmitAndVerifyCompaction() throws Exception\n+  {\n+    loadData(INDEX_TASK);\n+    try (final Closeable ignored = unloader(fullDatasourceName)) {\n+      final List<String> intervalsBeforeCompaction = coordinator.getSegmentIntervals(fullDatasourceName);\n+      intervalsBeforeCompaction.sort(null);\n+      // 4 segments across 2 days (4 total)...\n+      verifySegmentsCount(4);\n+      verifyQuery(INDEX_QUERIES_RESOURCE);\n+\n+      submitCompactionConfig(MAX_ROWS_PER_SEGMENT_COMPACTED, Period.days(1));\n+      forceTriggerAutoCompaction();\n+      //...compacted into 1 new segment for 1 day. 1 day compacted and 1 day skipped/remains uncompacted. (5 total)\n+      verifySegmentsCount(5);\n+      verifyQuery(INDEX_QUERIES_RESOURCE);\n+      verifySegmentsCompacted(1, MAX_ROWS_PER_SEGMENT_COMPACTED);\n+      checkCompactionIntervals(intervalsBeforeCompaction);\n+\n+      submitCompactionConfig(MAX_ROWS_PER_SEGMENT_COMPACTED, SKIP_OFFSET_FROM_LATEST);\n+      forceTriggerAutoCompaction();\n+      //...compacted into 1 new segment for the remaining one day. 2 day compacted and 0 day uncompacted. (6 total)\n+      verifySegmentsCount(6);\n+      verifyQuery(INDEX_QUERIES_RESOURCE);\n+      verifySegmentsCompacted(2, MAX_ROWS_PER_SEGMENT_COMPACTED);\n+      checkCompactionIntervals(intervalsBeforeCompaction);\n+    }\n+  }\n+\n+  @Test\n+  public void testAutoCompactionDutyCanUpdateCompactionConfig() throws Exception\n+  {\n+    loadData(INDEX_TASK);\n+    try (final Closeable ignored = unloader(fullDatasourceName)) {\n+      final List<String> intervalsBeforeCompaction = coordinator.getSegmentIntervals(fullDatasourceName);\n+      intervalsBeforeCompaction.sort(null);\n+      // 4 segments across 2 days (4 total)...\n+      verifySegmentsCount(4);\n+      verifyQuery(INDEX_QUERIES_RESOURCE);\n+\n+      // Dummy compaction config which will be overwritten\n+      submitCompactionConfig(10000, SKIP_OFFSET_FROM_LATEST);\n+      // New compaction config should overwrites the existing compaction config\n+      submitCompactionConfig(1, SKIP_OFFSET_FROM_LATEST);\n+      forceTriggerAutoCompaction();\n+\n+      // Instead of merging segments, the updated config will split segments!\n+      //...compacted into 10 new segments across 2 days. 5 new segments each day (14 total)\n+      verifySegmentsCount(14);\n+      verifyQuery(INDEX_QUERIES_RESOURCE);\n+      verifySegmentsCompacted(10, 2);\n+\n+      checkCompactionIntervals(intervalsBeforeCompaction);\n+    }\n+  }\n+\n+  @Test\n+  public void testAutoCompactionDutyCanDeleteCompactionConfig() throws Exception\n+  {\n+    loadData(INDEX_TASK);\n+    try (final Closeable ignored = unloader(fullDatasourceName)) {\n+      final List<String> intervalsBeforeCompaction = coordinator.getSegmentIntervals(fullDatasourceName);\n+      intervalsBeforeCompaction.sort(null);\n+      // 4 segments across 2 days (4 total)...\n+      verifySegmentsCount(4);\n+      verifyQuery(INDEX_QUERIES_RESOURCE);\n+\n+      submitCompactionConfig(MAX_ROWS_PER_SEGMENT_COMPACTED, SKIP_OFFSET_FROM_LATEST);\n+      deleteCompactionConfig();\n+      forceTriggerAutoCompaction();\n+\n+      // ...should remains unchanged (4 total)\n+      verifySegmentsCount(4);\n+      verifyQuery(INDEX_QUERIES_RESOURCE);\n+      verifySegmentsCompacted(0, null);\n+\n+      checkCompactionIntervals(intervalsBeforeCompaction);\n+    }\n+  }\n+\n+  @Test\n+  public void testAutoCompactionDutyCanUpdateTaskSlots() throws Exception\n+  {\n+    loadData(INDEX_TASK);\n+    try (final Closeable ignored = unloader(fullDatasourceName)) {\n+      final List<String> intervalsBeforeCompaction = coordinator.getSegmentIntervals(fullDatasourceName);\n+      intervalsBeforeCompaction.sort(null);\n+      // 4 segments across 2 days (4 total)...\n+      verifySegmentsCount(4);\n+      verifyQuery(INDEX_QUERIES_RESOURCE);\n+\n+      // Skips first day. Should only compact one out of two days.\n+      submitCompactionConfig(MAX_ROWS_PER_SEGMENT_COMPACTED, SKIP_OFFSET_FROM_LATEST);\n+\n+      // Set compactionTaskSlotRatio to 0 to prevent any compaction\n+      updateCompactionTaskSlot(0, 100);\n+      forceTriggerAutoCompaction();\n+      // ...should remains unchanged (4 total)\n+      verifySegmentsCount(4);\n+      verifyQuery(INDEX_QUERIES_RESOURCE);\n+      verifySegmentsCompacted(0, null);\n+      checkCompactionIntervals(intervalsBeforeCompaction);\n+\n+      // Set maxCompactionTaskSlots to 0 to prevent any compaction\n+      updateCompactionTaskSlot(0.1, 0);\n+      forceTriggerAutoCompaction();\n+      // ...should remains unchanged (4 total)\n+      verifySegmentsCount(4);\n+      verifyQuery(INDEX_QUERIES_RESOURCE);\n+      verifySegmentsCompacted(0, null);\n+      checkCompactionIntervals(intervalsBeforeCompaction);\n+\n+      // Update compaction slots to be 1\n+      updateCompactionTaskSlot(1, 1);\n+      forceTriggerAutoCompaction();\n+      // One day compacted (1 new segment) and one day remains uncompacted. (5 total)\n+      verifySegmentsCount(5);\n+      verifyQuery(INDEX_QUERIES_RESOURCE);\n+      verifySegmentsCompacted(1, MAX_ROWS_PER_SEGMENT_COMPACTED);\n+      checkCompactionIntervals(intervalsBeforeCompaction);\n+      Assert.assertEquals(compactionResource.getCompactionProgress(fullDatasourceName).get(\"remainingSegmentSize\"), \"14312\");\n+      // Run compaction again to compact the remaining day\n+      forceTriggerAutoCompaction();\n+      // Remaining day compacted (1 new segment). Now both days compacted (6 total)\n+      verifySegmentsCount(6);\n+      verifyQuery(INDEX_QUERIES_RESOURCE);\n+      verifySegmentsCompacted(2, MAX_ROWS_PER_SEGMENT_COMPACTED);\n+      checkCompactionIntervals(intervalsBeforeCompaction);\n+//      Assert.assertEquals(compactionResource.getCompactionProgress(fullDatasourceName).get(\"remainingSegmentSize\"), \"0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a87a34aed84c1682e957f60ed6054134ef90a49a"}, "originalPosition": 206}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNTIxOTU3", "url": "https://github.com/apache/druid/pull/9644#pullrequestreview-392521957", "createdAt": "2020-04-14T00:16:48Z", "commit": {"oid": "a87a34aed84c1682e957f60ed6054134ef90a49a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDoxNjo0OFrOGE5p-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDoxNjo0OFrOGE5p-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5MjEyMQ==", "bodyText": "Should the message say something about updating compaction task slots instead?", "url": "https://github.com/apache/druid/pull/9644#discussion_r407792121", "createdAt": "2020-04-14T00:16:48Z", "author": {"login": "ccaominh"}, "path": "integration-tests/src/main/java/org/apache/druid/testing/clients/CompactionResourceTestClient.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.testing.clients;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.inject.Inject;\n+import org.apache.druid.java.util.common.ISE;\n+import org.apache.druid.java.util.common.StringUtils;\n+import org.apache.druid.java.util.http.client.HttpClient;\n+import org.apache.druid.java.util.http.client.Request;\n+import org.apache.druid.java.util.http.client.response.StatusResponseHandler;\n+import org.apache.druid.java.util.http.client.response.StatusResponseHolder;\n+import org.apache.druid.server.coordinator.CoordinatorCompactionConfig;\n+import org.apache.druid.server.coordinator.DataSourceCompactionConfig;\n+import org.apache.druid.testing.IntegrationTestingConfig;\n+import org.apache.druid.testing.guice.TestClient;\n+import org.jboss.netty.handler.codec.http.HttpMethod;\n+import org.jboss.netty.handler.codec.http.HttpResponseStatus;\n+\n+import javax.ws.rs.QueryParam;\n+import java.net.URL;\n+import java.util.Map;\n+\n+public class CompactionResourceTestClient\n+{\n+  private final ObjectMapper jsonMapper;\n+  private final HttpClient httpClient;\n+  private final String coordinator;\n+  private final StatusResponseHandler responseHandler;\n+\n+  @Inject\n+  CompactionResourceTestClient(\n+      ObjectMapper jsonMapper,\n+      @TestClient HttpClient httpClient,\n+      IntegrationTestingConfig config\n+  )\n+  {\n+    this.jsonMapper = jsonMapper;\n+    this.httpClient = httpClient;\n+    this.coordinator = config.getCoordinatorUrl();\n+    this.responseHandler = StatusResponseHandler.getInstance();\n+  }\n+\n+  private String getCoordinatorURL()\n+  {\n+    return StringUtils.format(\n+        \"%s/druid/coordinator/v1/\",\n+        coordinator\n+    );\n+  }\n+\n+  public void submitCompactionConfig(final DataSourceCompactionConfig dataSourceCompactionConfig) throws Exception\n+  {\n+    String url = StringUtils.format(\"%sconfig/compaction\", getCoordinatorURL());\n+    StatusResponseHolder response = httpClient.go(\n+        new Request(HttpMethod.POST, new URL(url)).setContent(\n+            \"application/json\",\n+            jsonMapper.writeValueAsBytes(dataSourceCompactionConfig)\n+        ), responseHandler\n+    ).get();\n+\n+    if (!response.getStatus().equals(HttpResponseStatus.OK)) {\n+      throw new ISE(\n+          \"Error while submiting compaction config status[%s] content[%s]\",\n+          response.getStatus(),\n+          response.getContent()\n+      );\n+    }\n+  }\n+\n+  public void deleteCompactionConfig(final String dataSource) throws Exception\n+  {\n+    String url = StringUtils.format(\"%sconfig/compaction/%s\", getCoordinatorURL(), StringUtils.urlEncode(dataSource));\n+    StatusResponseHolder response = httpClient.go(new Request(HttpMethod.DELETE, new URL(url)), responseHandler).get();\n+\n+    if (!response.getStatus().equals(HttpResponseStatus.OK)) {\n+      throw new ISE(\n+          \"Error while deleting compaction config status[%s] content[%s]\",\n+          response.getStatus(),\n+          response.getContent()\n+      );\n+    }\n+  }\n+\n+  public CoordinatorCompactionConfig getCoordinatorCompactionConfigs() throws Exception\n+  {\n+    String url = StringUtils.format(\"%sconfig/compaction\", getCoordinatorURL());\n+    StatusResponseHolder response = httpClient.go(\n+        new Request(HttpMethod.GET, new URL(url)), responseHandler\n+    ).get();\n+    if (!response.getStatus().equals(HttpResponseStatus.OK)) {\n+      throw new ISE(\n+          \"Error while getting compaction config status[%s] content[%s]\",\n+          response.getStatus(),\n+          response.getContent()\n+      );\n+    }\n+    return jsonMapper.readValue(response.getContent(), new TypeReference<CoordinatorCompactionConfig>() {});\n+  }\n+\n+  public DataSourceCompactionConfig getDataSourceCompactionConfig(String dataSource) throws Exception\n+  {\n+    String url = StringUtils.format(\"%sconfig/compaction/%s\", getCoordinatorURL(), StringUtils.urlEncode(dataSource));\n+    StatusResponseHolder response = httpClient.go(\n+        new Request(HttpMethod.GET, new URL(url)), responseHandler\n+    ).get();\n+    if (!response.getStatus().equals(HttpResponseStatus.OK)) {\n+      throw new ISE(\n+          \"Error while getting compaction config status[%s] content[%s]\",\n+          response.getStatus(),\n+          response.getContent()\n+      );\n+    }\n+    return jsonMapper.readValue(response.getContent(), new TypeReference<DataSourceCompactionConfig>() {});\n+  }\n+\n+  public void forceTriggerAutoCompaction() throws Exception\n+  {\n+    String url = StringUtils.format(\"%scompaction/compact\", getCoordinatorURL());\n+    StatusResponseHolder response = httpClient.go(new Request(HttpMethod.POST, new URL(url)), responseHandler).get();\n+    if (!response.getStatus().equals(HttpResponseStatus.OK)) {\n+      throw new ISE(\n+          \"Error while force trigger auto compaction status[%s] content[%s]\",\n+          response.getStatus(),\n+          response.getContent()\n+      );\n+    }\n+  }\n+\n+  public void updateCompactionTaskSlot(Double compactionTaskSlotRatio, Integer maxCompactionTaskSlots) throws Exception\n+  {\n+    String url = StringUtils.format(\"%sconfig/compaction/taskslots?ratio=%s&max=%s\",\n+                                    getCoordinatorURL(),\n+                                    StringUtils.urlEncode(compactionTaskSlotRatio.toString()),\n+                                    StringUtils.urlEncode(maxCompactionTaskSlots.toString()));\n+    StatusResponseHolder response = httpClient.go(new Request(HttpMethod.POST, new URL(url)), responseHandler).get();\n+    if (!response.getStatus().equals(HttpResponseStatus.OK)) {\n+      throw new ISE(\n+          \"Error while force trigger auto compaction status[%s] content[%s]\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a87a34aed84c1682e957f60ed6054134ef90a49a"}, "originalPosition": 157}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3eb94c1b5995e26b2c8e95c1b5cf7aa58f964c3c", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/3eb94c1b5995e26b2c8e95c1b5cf7aa58f964c3c", "committedDate": "2020-04-15T00:09:40Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MTQ3MzUy", "url": "https://github.com/apache/druid/pull/9644#pullrequestreview-394147352", "createdAt": "2020-04-15T21:27:04Z", "commit": {"oid": "3eb94c1b5995e26b2c8e95c1b5cf7aa58f964c3c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2462, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}