{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2ODk2NTM3", "number": 9971, "title": "Load broadcast datasources on broker and tasks", "bodyText": "This PR implements the following areas of proposal #9953:\n\nModifying BroadcastDistributionRule\nAssigning and balancing segments\nSegment loading in brokers, realtime tasks, and indexers\n\nKey changes:\n\nAdjusts BroadcastDistributionRule to remove the colocated datasources concept\nAdjusts the segment balancers to skip balancing for segments that were assigned via broadcast rule\nCliBroker, CliPeon, CliIndexer now bind ZKCoordinator and related classes for loading segments\nUpdates DruidCluster, DruidServer, ServerType and related to support the concept of a \"broadcast target\", separate from a \"replication target\"\nSegmentChangeRequestLoad is updated to never prune the load spec when deserializing a DataSegment. This is needed for Brokers to load segments\nA new flag has been added to the peon, indicating whether it will be running a queryable task. Non-queryable tasks such as batch tasks will not load segments.\nSegment loading is optional on brokers/indexers/tasks. If the segment cache locations are not defined or empty, the SegmentLoadDropHandler will not start. On historicals this condition is treated as an error.\n\nCurrent limitations:\n\nOnly ZK-based segment loading is supported\nOnly BroadcastForeverRule is fully supported (assumes that all segments of a datasource with broadcast rules will fall under a broadcast rule)\n\nThis PR has:\n\n been self-reviewed.\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-06-03T00:27:28Z", "url": "https://github.com/apache/druid/pull/9971", "merged": true, "mergeCommit": {"oid": "771870ae2d312d643e6d98f3d0af8a9618af9681"}, "closed": true, "closedAt": "2020-06-09T03:16:00Z", "author": {"login": "jon-wei"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnef8HABqjMzOTk5NjY3MzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpafiCgFqTQyNjcyMjA1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6909ea059d4fbb4d20ae12fc68101b0b54f9f4a", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/c6909ea059d4fbb4d20ae12fc68101b0b54f9f4a", "committedDate": "2020-06-03T01:01:58Z", "message": "Load broadcast datasources on broker and tasks"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "c6909ea059d4fbb4d20ae12fc68101b0b54f9f4a", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/c6909ea059d4fbb4d20ae12fc68101b0b54f9f4a", "committedDate": "2020-06-03T01:01:58Z", "message": "Load broadcast datasources on broker and tasks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b145d3bcd59f25b9576e8b4d069be8ed9990b9f", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/5b145d3bcd59f25b9576e8b4d069be8ed9990b9f", "committedDate": "2020-06-03T01:35:52Z", "message": "Add javadocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a07a561f31112536f543df68729c5d7f39097d8d", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/a07a561f31112536f543df68729c5d7f39097d8d", "committedDate": "2020-06-03T03:10:55Z", "message": "Support HTTP segment management"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3252d364415596f5ac550dc5304966cd6abe8c2", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/d3252d364415596f5ac550dc5304966cd6abe8c2", "committedDate": "2020-06-03T03:23:26Z", "message": "Fix indexer maxSize"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "808d249ffae8a43158874e737d61fb159ee3a2a9", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/808d249ffae8a43158874e737d61fb159ee3a2a9", "committedDate": "2020-06-03T03:31:22Z", "message": "inspection fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9eacac68a8c2f840f7735533bb5ba727c6e137fb", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/9eacac68a8c2f840f7735533bb5ba727c6e137fb", "committedDate": "2020-06-04T02:05:54Z", "message": "Make segment cache optional on non-historicals"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eebca052d6da21027a3983856398a8a101bfc0fc", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/eebca052d6da21027a3983856398a8a101bfc0fc", "committedDate": "2020-06-04T03:31:17Z", "message": "Fix build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca1affea1f8e76d715729ddf6ee690c652a18eab", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/ca1affea1f8e76d715729ddf6ee690c652a18eab", "committedDate": "2020-06-04T06:27:00Z", "message": "Fix inspections, some coverage, failed tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef2feb424f2ade2dd42babe45c497cbf90048ebd", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/ef2feb424f2ade2dd42babe45c497cbf90048ebd", "committedDate": "2020-06-04T06:51:26Z", "message": "More tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ce47af9843f966cb2f15e3f423f1f2c78e98ca5", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/4ce47af9843f966cb2f15e3f423f1f2c78e98ca5", "committedDate": "2020-06-04T06:56:47Z", "message": "Add CliIndexer to MainTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b439d89818c75275ee810bc09ae99617ab52eb5", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/6b439d89818c75275ee810bc09ae99617ab52eb5", "committedDate": "2020-06-04T10:42:09Z", "message": "Fix inspection"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNDY5NjA4", "url": "https://github.com/apache/druid/pull/9971#pullrequestreview-423469608", "createdAt": "2020-06-03T11:43:29Z", "commit": {"oid": "808d249ffae8a43158874e737d61fb159ee3a2a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMTo0MzoyOVrOGeYEOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMTo0MzoyOVrOGeYEOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDUwNDc2MA==", "bodyText": "super nit: how about LoadableDataSegment or something like that to make it more obvious that it is used for segment loading?", "url": "https://github.com/apache/druid/pull/9971#discussion_r434504760", "createdAt": "2020-06-03T11:43:29Z", "author": {"login": "clintropolis"}, "path": "server/src/main/java/org/apache/druid/server/coordination/UnprunedDataSegment.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.server.coordination;\n+\n+import com.fasterxml.jackson.annotation.JacksonInject;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import org.apache.druid.jackson.CommaListJoinDeserializer;\n+import org.apache.druid.timeline.CompactionState;\n+import org.apache.druid.timeline.DataSegment;\n+import org.apache.druid.timeline.partition.ShardSpec;\n+import org.joda.time.Interval;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * A deserialization aid used by {@link SegmentChangeRequestLoad}. The broker prunes the loadSpec from segments\n+ * for efficiency reasons, but the broker does need the loadSpec when it loads broadcast segments.\n+ *\n+ * This class always uses the non-pruning default {@link org.apache.druid.timeline.DataSegment.PruneSpecsHolder}.\n+ */\n+public class UnprunedDataSegment extends DataSegment", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "808d249ffae8a43158874e737d61fb159ee3a2a9"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d2de37b3999600e6150a7d56c8f895996ea6aab", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/8d2de37b3999600e6150a7d56c8f895996ea6aab", "committedDate": "2020-06-05T20:13:57Z", "message": "Rename UnprunedDataSegment to LoadableDataSegment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NzA3OTQ1", "url": "https://github.com/apache/druid/pull/9971#pullrequestreview-425707945", "createdAt": "2020-06-06T02:59:56Z", "commit": {"oid": "8d2de37b3999600e6150a7d56c8f895996ea6aab"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NzcyMDI1", "url": "https://github.com/apache/druid/pull/9971#pullrequestreview-425772025", "createdAt": "2020-06-06T22:06:20Z", "commit": {"oid": "8d2de37b3999600e6150a7d56c8f895996ea6aab"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQyMjowNjoyMVrOGgF5sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQyMjoxNzo0NlrOGgF8lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNDMwNw==", "bodyText": "Would you add some comment about that this duty should run before BalanceSegments here?", "url": "https://github.com/apache/druid/pull/9971#discussion_r436304307", "createdAt": "2020-06-06T22:06:21Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/server/coordinator/duty/RunRules.java", "diffHunk": "@@ -112,6 +115,9 @@ public DruidCoordinatorRuntimeParams run(DruidCoordinatorRuntimeParams params)\n         if (rule.appliesTo(segment, now)) {\n           stats.accumulate(rule.run(coordinator, paramsWithReplicationManager, segment));\n           foundMatchingRule = true;\n+          if (rule instanceof BroadcastDistributionRule) {\n+            broadcastDatasources.add(segment.getDataSource());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d2de37b3999600e6150a7d56c8f895996ea6aab"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNDkzNQ==", "bodyText": "Please use TemporaryFolder of JUnit (an example is found here). This rule automatically cleans up the temp directory on exit.", "url": "https://github.com/apache/druid/pull/9971#discussion_r436304935", "createdAt": "2020-06-06T22:15:56Z", "author": {"login": "jihoonson"}, "path": "server/src/test/java/org/apache/druid/server/coordination/ZkCoordinatorTest.java", "diffHunk": "@@ -67,9 +76,32 @@ public String getBase()\n   };\n   private ZkCoordinator zkCoordinator;\n \n+  private File infoDir;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d2de37b3999600e6150a7d56c8f895996ea6aab"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNTA0Ng==", "bodyText": "These seem duplicate. Could you clean up these parameters? Same for the other below param sets.", "url": "https://github.com/apache/druid/pull/9971#discussion_r436305046", "createdAt": "2020-06-06T22:17:46Z", "author": {"login": "jihoonson"}, "path": "server/src/test/java/org/apache/druid/server/coordinator/rules/BroadcastDistributionRuleSerdeTest.java", "diffHunk": "@@ -44,15 +43,15 @@\n   public static List<Object[]> constructorFeeder()\n   {\n     return Lists.newArrayList(\n-        new Object[]{new ForeverBroadcastDistributionRule(ImmutableList.of(\"large_source1\", \"large_source2\"))},\n-        new Object[]{new ForeverBroadcastDistributionRule(ImmutableList.of())},\n-        new Object[]{new ForeverBroadcastDistributionRule(null)},\n-        new Object[]{new IntervalBroadcastDistributionRule(Intervals.of(\"0/1000\"), ImmutableList.of(\"large_source\"))},\n-        new Object[]{new IntervalBroadcastDistributionRule(Intervals.of(\"0/1000\"), ImmutableList.of())},\n-        new Object[]{new IntervalBroadcastDistributionRule(Intervals.of(\"0/1000\"), null)},\n-        new Object[]{new PeriodBroadcastDistributionRule(new Period(1000), null, ImmutableList.of(\"large_source\"))},\n-        new Object[]{new PeriodBroadcastDistributionRule(new Period(1000), null, ImmutableList.of())},\n-        new Object[]{new PeriodBroadcastDistributionRule(new Period(1000), null, null)}\n+        new Object[]{new ForeverBroadcastDistributionRule()},\n+        new Object[]{new ForeverBroadcastDistributionRule()},\n+        new Object[]{new ForeverBroadcastDistributionRule()},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d2de37b3999600e6150a7d56c8f895996ea6aab"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1Nzc0NDA1", "url": "https://github.com/apache/druid/pull/9971#pullrequestreview-425774405", "createdAt": "2020-06-06T22:57:26Z", "commit": {"oid": "8d2de37b3999600e6150a7d56c8f895996ea6aab"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQyMjo1NzoyNlrOGgGEmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQyMjo1NzoyNlrOGgGEmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNzA5Ng==", "bodyText": "Hmm, the CI failure doesn't like missing tests for this change. Thinking about it for a bit, what will happen if the peon always loads the stuffs for loading broadcast segments? If I'm reading the code correctly, the coordinator will not broadcast segments to batch tasks no matter whether they are running on neither middleManagers nor indexers. The realtime tasks announce themselves when they run on middleManagers or don't announce when they run on indexers, but the batch tasks never announce themselves. So, it seems like, if the peon always loaded the stuffs for broadcast segment loading, those stuffs could be loaded for batch tasks as well but wouldn't do anything? If that's the case, I'm fine with always loading them rather than adding this new parameter and tests for it.", "url": "https://github.com/apache/druid/pull/9971#discussion_r436307096", "createdAt": "2020-06-06T22:57:26Z", "author": {"login": "jihoonson"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/overlord/ForkingTaskRunner.java", "diffHunk": "@@ -327,6 +327,13 @@ public TaskStatus call()\n                           command.add(nodeType);\n                         }\n \n+                        // If the task type is queryable, we need to load broadcast segments on the peon, used for\n+                        // join queries\n+                        if (task.supportsQueries()) {\n+                          command.add(\"--loadBroadcastSegments\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d2de37b3999600e6150a7d56c8f895996ea6aab"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f2e73ee215d37f6cbf254fe12a29f9477f20177", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/5f2e73ee215d37f6cbf254fe12a29f9477f20177", "committedDate": "2020-06-09T00:48:13Z", "message": "Address PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d005ed185100daf89c04097b9631a22d70ad947", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/2d005ed185100daf89c04097b9631a22d70ad947", "committedDate": "2020-06-09T00:50:00Z", "message": "Fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NzIyMDU1", "url": "https://github.com/apache/druid/pull/9971#pullrequestreview-426722055", "createdAt": "2020-06-09T01:08:57Z", "commit": {"oid": "2d005ed185100daf89c04097b9631a22d70ad947"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2002, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}