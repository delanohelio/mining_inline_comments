{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2ODgzODI5", "number": 10056, "title": "Add DimFilter.toOptimizedFilter(), ensure that join filter pre-analysis operates on optimized filters", "bodyText": "This PR is a follow-on to #10015, which adds a new toOptimizedFilter() method to DimFilter and adjusts how filter optimization is applied (with changes to the query toolchests and the Filters utility class).\nGeneral filter optimization for queries is now applied in the Filters.toFilter method instead of in each query toolchest's preMergeDecoration.\nThis change is made for two reasons:\n\nThe toOptimizedFilter method requires that the returned value be cached, and a new AbstractOptimizableDimFilter base class has been added to provide this functionality to all of the existing DimFilters. This caching behavior helps performance for cases like the sanity check here (https://github.com/apache/druid/blob/master/processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java#L227) by avoiding deep comparisons.\nThe filter optimization should happen before join filter pre-analysis for join queries, this PR adjusts the join filter pre-analysis to call toOptimizedFilter() on the DimFilter it's given from the query. This means that the per-segment processing threads will be able to access a cached Filter object from the DimFilter.\n\nThis PR has:\n\n been self-reviewed.\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths, ensuring the threshold for code coverage is met.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-06-19T04:36:25Z", "url": "https://github.com/apache/druid/pull/10056", "merged": true, "mergeCommit": {"oid": "ed981ef88e1005d1b1e5235da4995b18288d6bf9"}, "closed": true, "closedAt": "2020-07-02T05:26:18Z", "author": {"login": "jon-wei"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABct6FmUgFqTQzNTM0OTk3Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcw39QYAFqTQ0MTM1OTAwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MzQ5OTcy", "url": "https://github.com/apache/druid/pull/10056#pullrequestreview-435349972", "createdAt": "2020-06-22T23:55:38Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMzo1NTozOFrOGnUrCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMDowMjoyM1rOGnUywA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg4NjM0NA==", "bodyText": "The code coverage checker is flagging this change as uncovered (by the druid-processing unit tests):\nhttps://travis-ci.org/github/apache/druid/jobs/699956397#L1415\nNote: The new CalciteQueryTest added in this PR to druid-sql does hit this code path.", "url": "https://github.com/apache/druid/pull/10056#discussion_r443886344", "createdAt": "2020-06-22T23:55:38Z", "author": {"login": "ccaominh"}, "path": "processing/src/main/java/org/apache/druid/segment/join/Joinables.java", "diffHunk": "@@ -107,8 +107,17 @@ public static boolean isPrefixedBy(final String columnName, final String prefix)\n             );\n \n             for (Query joinQuery : joinQueryLevels) {\n+              // The pre-analysis needs to apply to the optimized form of filters, as this is what will be\n+              // passed to HashJoinSegmentAdapter.makeCursors().\n+              // The optimize() call here means that the filter optimization will happen twice,\n+              // since the query toolchests will call optimize() later.\n+              // We do this for simplicity as we cannot override what query will get run later from this context.\n+              // A more complicated approach involving wrapping the query runner after the pre-merge decoration\n+              // and moving the pre-analysis might be viable.\n+              // The additional overhead of the simple approach should be low, as the additional optimize() call\n+              // on each filter will only occur once per query.\n               preAnalysisGroup.computeJoinFilterPreAnalysisIfAbsent(\n-                  joinQuery.getFilter() == null ? null : joinQuery.getFilter().toFilter(),\n+                  joinQuery.getFilter() == null ? null : joinQuery.getFilter().optimize().toFilter(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg4ODMyMA==", "bodyText": "Intellij inspection check is flagging this line since Exception is not thrown by the method body:\nhttps://travis-ci.org/github/apache/druid/jobs/699956394#L11326", "url": "https://github.com/apache/druid/pull/10056#discussion_r443888320", "createdAt": "2020-06-23T00:02:23Z", "author": {"login": "ccaominh"}, "path": "sql/src/test/java/org/apache/druid/sql/calcite/CalciteQueryTest.java", "diffHunk": "@@ -11987,6 +11992,83 @@ public void testNestedGroupByOnInlineDataSourceWithFilter(Map<String, Object> qu\n     );\n   }\n \n+  @Test\n+  @Parameters(source = QueryContextForJoinProvider.class)\n+  public void testGroupByJoinAsNativeQueryWithUnoptimizedFilter(Map<String, Object> queryContext) throws Exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 35}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "06ecb1562e53bcd56ec526b2eee8b8ec20c2f1fb", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/06ecb1562e53bcd56ec526b2eee8b8ec20c2f1fb", "committedDate": "2020-07-01T19:32:20Z", "message": "Ensure that join filter pre-analysis operates on optimized filters, add DimFilter.toOptimizedFilter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "06ecb1562e53bcd56ec526b2eee8b8ec20c2f1fb", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/06ecb1562e53bcd56ec526b2eee8b8ec20c2f1fb", "committedDate": "2020-07-01T19:32:20Z", "message": "Ensure that join filter pre-analysis operates on optimized filters, add DimFilter.toOptimizedFilter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83fd145e3fde446d088ed6c0b5ea87c4bd426c8e", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/83fd145e3fde446d088ed6c0b5ea87c4bd426c8e", "committedDate": "2020-07-01T19:38:34Z", "message": "Remove aggressive equality check that was used for testing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMTg0ODk1", "url": "https://github.com/apache/druid/pull/10056#pullrequestreview-441184895", "createdAt": "2020-07-01T20:45:18Z", "commit": {"oid": "83fd145e3fde446d088ed6c0b5ea87c4bd426c8e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMDo0NToxOVrOGr0yWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMDo0NToxOVrOGr0yWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYwNjgwOA==", "bodyText": "I think this is going to be called by different processing threads simultaneously, so it should be thread-safe. Perhaps use Suppliers.memoize.", "url": "https://github.com/apache/druid/pull/10056#discussion_r448606808", "createdAt": "2020-07-01T20:45:19Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/filter/AbstractOptimizableDimFilter.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.filter;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+\n+/**\n+ * Base class for DimFilters that support optimization.\n+ */\n+abstract class AbstractOptimizableDimFilter implements DimFilter\n+{\n+  private Filter cachedOptimizedFilter = null;\n+\n+  @JsonIgnore\n+  @Override\n+  public Filter toOptimizedFilter()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83fd145e3fde446d088ed6c0b5ea87c4bd426c8e"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d32bbdad32346c9189dba05495985710dd5b334", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/8d32bbdad32346c9189dba05495985710dd5b334", "committedDate": "2020-07-01T22:21:10Z", "message": "Use Suppliers.memoize"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMjM0MzMw", "url": "https://github.com/apache/druid/pull/10056#pullrequestreview-441234330", "createdAt": "2020-07-01T22:24:50Z", "commit": {"oid": "8d32bbdad32346c9189dba05495985710dd5b334"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMjM0NzU2", "url": "https://github.com/apache/druid/pull/10056#pullrequestreview-441234756", "createdAt": "2020-07-01T22:25:53Z", "commit": {"oid": "8d32bbdad32346c9189dba05495985710dd5b334"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMzAyMDgw", "url": "https://github.com/apache/druid/pull/10056#pullrequestreview-441302080", "createdAt": "2020-07-02T02:04:19Z", "commit": {"oid": "8d32bbdad32346c9189dba05495985710dd5b334"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMzExMTYx", "url": "https://github.com/apache/druid/pull/10056#pullrequestreview-441311161", "createdAt": "2020-07-02T02:36:36Z", "commit": {"oid": "8d32bbdad32346c9189dba05495985710dd5b334"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMjozNjozN1rOGr7arA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMjozNjozN1rOGr7arA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcxNTQzNg==", "bodyText": "CI is flagging these 4 as unused imports", "url": "https://github.com/apache/druid/pull/10056#discussion_r448715436", "createdAt": "2020-07-02T02:36:37Z", "author": {"login": "ccaominh"}, "path": "processing/src/main/java/org/apache/druid/query/filter/DimFilter.java", "diffHunk": "@@ -23,7 +23,11 @@\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import com.google.common.collect.RangeSet;\n import org.apache.druid.java.util.common.Cacheable;\n+import org.apache.druid.java.util.common.granularity.Granularity;\n+import org.apache.druid.query.QueryMetrics;\n import org.apache.druid.query.extraction.ExtractionFn;\n+import org.apache.druid.segment.VirtualColumns;\n+import org.joda.time.Interval;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d32bbdad32346c9189dba05495985710dd5b334"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b013ac4ca3e92fd3c061299fc48ed8e43e14e729", "author": {"user": {"login": "jon-wei", "name": "Jonathan Wei"}}, "url": "https://github.com/apache/druid/commit/b013ac4ca3e92fd3c061299fc48ed8e43e14e729", "committedDate": "2020-07-02T02:53:40Z", "message": "Checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMzU5MDAx", "url": "https://github.com/apache/druid/pull/10056#pullrequestreview-441359001", "createdAt": "2020-07-02T05:26:08Z", "commit": {"oid": "b013ac4ca3e92fd3c061299fc48ed8e43e14e729"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2133, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}