{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMTE5OTQy", "number": 10543, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOTo1NTozMFrOE_yQ0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMzozNDozNFrOFLIekg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MzE5MjQ4OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/server/AsyncQueryForwardingServlet.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOTo1NTozMFrOH9rvpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMjo1MjowNVrOIIL-mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0MTg5Mw==", "bodyText": "What is this variable for?", "url": "https://github.com/apache/druid/pull/10543#discussion_r534441893", "createdAt": "2020-12-02T19:55:30Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/server/AsyncQueryForwardingServlet.java", "diffHunk": "@@ -88,6 +92,7 @@\n   private static final String OBJECTMAPPER_ATTRIBUTE = \"org.apache.druid.proxy.objectMapper\";\n \n   private static final int CANCELLATION_TIMEOUT_MILLIS = 500;\n+  private static final long serialVersionUID = 2026655693637894524L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE5NjcyNw==", "bodyText": "It's because I'm using the transient keyword below and the class is serializable (documentation) and basically to satisfy LGMT", "url": "https://github.com/apache/druid/pull/10543#discussion_r535196727", "createdAt": "2020-12-03T12:43:30Z", "author": {"login": "lkm"}, "path": "server/src/main/java/org/apache/druid/server/AsyncQueryForwardingServlet.java", "diffHunk": "@@ -88,6 +92,7 @@\n   private static final String OBJECTMAPPER_ATTRIBUTE = \"org.apache.druid.proxy.objectMapper\";\n \n   private static final int CANCELLATION_TIMEOUT_MILLIS = 500;\n+  private static final long serialVersionUID = 2026655693637894524L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0MTg5Mw=="}, "originalCommit": null, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQ1NTc3MQ==", "bodyText": "I think we can ignore LGTM in this case. Please delete this too.", "url": "https://github.com/apache/druid/pull/10543#discussion_r545455771", "createdAt": "2020-12-17T22:52:05Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/server/AsyncQueryForwardingServlet.java", "diffHunk": "@@ -88,6 +92,7 @@\n   private static final String OBJECTMAPPER_ATTRIBUTE = \"org.apache.druid.proxy.objectMapper\";\n \n   private static final int CANCELLATION_TIMEOUT_MILLIS = 500;\n+  private static final long serialVersionUID = 2026655693637894524L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0MTg5Mw=="}, "originalCommit": null, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MzE5MzU1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/server/AsyncQueryForwardingServlet.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOTo1NTo1MVrOH9rwWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMTowMzoxMFrOIIPBHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0MjA3Mw==", "bodyText": "What is transient keyword for?", "url": "https://github.com/apache/druid/pull/10543#discussion_r534442073", "createdAt": "2020-12-02T19:55:51Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/server/AsyncQueryForwardingServlet.java", "diffHunk": "@@ -119,6 +124,7 @@ private static void handleException(HttpServletResponse response, ObjectMapper o\n   private final RequestLogger requestLogger;\n   private final GenericQueryMetricsFactory queryMetricsFactory;\n   private final AuthenticatorMapper authenticatorMapper;\n+  private final transient ProtobufTranslation protobufTranslation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE5NTcwNQ==", "bodyText": "The servlet is serializable and the ProtobufTranslation isn't, so this is required", "url": "https://github.com/apache/druid/pull/10543#discussion_r535195705", "createdAt": "2020-12-03T12:41:55Z", "author": {"login": "lkm"}, "path": "server/src/main/java/org/apache/druid/server/AsyncQueryForwardingServlet.java", "diffHunk": "@@ -119,6 +124,7 @@ private static void handleException(HttpServletResponse response, ObjectMapper o\n   private final RequestLogger requestLogger;\n   private final GenericQueryMetricsFactory queryMetricsFactory;\n   private final AuthenticatorMapper authenticatorMapper;\n+  private final transient ProtobufTranslation protobufTranslation;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0MjA3Mw=="}, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc0MTQxOA==", "bodyText": "Hmm, I didn't know that the servlet is serializable. However, it seems that Jetty doesn't support serializing servlets anyway. I would suggest to not add it since it can be misleading as other variables are not transient.", "url": "https://github.com/apache/druid/pull/10543#discussion_r535741418", "createdAt": "2020-12-04T00:15:57Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/server/AsyncQueryForwardingServlet.java", "diffHunk": "@@ -119,6 +124,7 @@ private static void handleException(HttpServletResponse response, ObjectMapper o\n   private final RequestLogger requestLogger;\n   private final GenericQueryMetricsFactory queryMetricsFactory;\n   private final AuthenticatorMapper authenticatorMapper;\n+  private final transient ProtobufTranslation protobufTranslation;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0MjA3Mw=="}, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEwMzQwMA==", "bodyText": "After removing transient spotbugs is failing with\norg.apache.calcite.avatica.remote.ProtobufTranslationImpl stored into non-transient field", "url": "https://github.com/apache/druid/pull/10543#discussion_r544103400", "createdAt": "2020-12-16T08:28:32Z", "author": {"login": "lkm"}, "path": "server/src/main/java/org/apache/druid/server/AsyncQueryForwardingServlet.java", "diffHunk": "@@ -119,6 +124,7 @@ private static void handleException(HttpServletResponse response, ObjectMapper o\n   private final RequestLogger requestLogger;\n   private final GenericQueryMetricsFactory queryMetricsFactory;\n   private final AuthenticatorMapper authenticatorMapper;\n+  private final transient ProtobufTranslation protobufTranslation;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0MjA3Mw=="}, "originalCommit": null, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUwNTU2NQ==", "bodyText": "You can add an exclusion rule for it here.", "url": "https://github.com/apache/druid/pull/10543#discussion_r545505565", "createdAt": "2020-12-18T01:03:10Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/server/AsyncQueryForwardingServlet.java", "diffHunk": "@@ -119,6 +124,7 @@ private static void handleException(HttpServletResponse response, ObjectMapper o\n   private final RequestLogger requestLogger;\n   private final GenericQueryMetricsFactory queryMetricsFactory;\n   private final AuthenticatorMapper authenticatorMapper;\n+  private final transient ProtobufTranslation protobufTranslation;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0MjA3Mw=="}, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MzIxMjIxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/server/AsyncQueryForwardingServlet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMDowMTowN1rOH9r8Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMjowMTo0OFrOH-X3mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0NTA1OA==", "bodyText": "These if clause seems fragile from changes on Avatica request types (such as new request type), but I'm not sure if there is a better way..", "url": "https://github.com/apache/druid/pull/10543#discussion_r534445058", "createdAt": "2020-12-02T20:01:07Z", "author": {"login": "jihoonson"}, "path": "server/src/main/java/org/apache/druid/server/AsyncQueryForwardingServlet.java", "diffHunk": "@@ -449,6 +463,95 @@ static String getAvaticaConnectionId(Map<String, Object> requestMap)\n     return (String) connectionIdObj;\n   }\n \n+  static String getAvaticaProtobufConnectionId(Service.Request request)\n+  {\n+    if (request instanceof Service.CatalogsRequest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE2NDgyNg==", "bodyText": "Agreed, it's a bit fragile, however, that, I'm afraid, is the nature of protobufs. I'm not sure how likely they are to add new request types without significant overhaul to Calcite though", "url": "https://github.com/apache/druid/pull/10543#discussion_r535164826", "createdAt": "2020-12-03T12:01:48Z", "author": {"login": "lkm"}, "path": "server/src/main/java/org/apache/druid/server/AsyncQueryForwardingServlet.java", "diffHunk": "@@ -449,6 +463,95 @@ static String getAvaticaConnectionId(Map<String, Object> requestMap)\n     return (String) connectionIdObj;\n   }\n \n+  static String getAvaticaProtobufConnectionId(Service.Request request)\n+  {\n+    if (request instanceof Service.CatalogsRequest) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0NTA1OA=="}, "originalCommit": null, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MzIyMTMzOnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/org/apache/druid/sql/avatica/DruidAvaticaProtobufHandler.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMDowMzozMFrOH9sBoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQwMTowMTozM1rOIIO_UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0NjQ5Nw==", "bodyText": "I'm wondering if we can use the same path for both Avatica and Json, but accept a query parameter to choose one of them. I think it could be better in terms of maintenance. In AsyncQueryForwardingServlet, it seems that you can check the query string. In DruidAvaticaHandler, it can have two delegates for JSON and protobuf and calls one of them based on query string in the request.", "url": "https://github.com/apache/druid/pull/10543#discussion_r534446497", "createdAt": "2020-12-02T20:03:30Z", "author": {"login": "jihoonson"}, "path": "sql/src/main/java/org/apache/druid/sql/avatica/DruidAvaticaProtobufHandler.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.avatica;\n+\n+import com.google.inject.Inject;\n+import org.apache.calcite.avatica.remote.LocalService;\n+import org.apache.calcite.avatica.remote.Service;\n+import org.apache.calcite.avatica.server.AvaticaProtobufHandler;\n+import org.apache.druid.guice.annotations.Self;\n+import org.apache.druid.server.DruidNode;\n+import org.eclipse.jetty.server.Request;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+\n+public class DruidAvaticaProtobufHandler extends AvaticaProtobufHandler\n+{\n+  public static final String AVATICA_PATH = \"/druid/v2/sql/avatica-pb/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE2MzI1OA==", "bodyText": "The problem is the drivers. If we want to support JDBC and golang drivers, I'm not sure they would be happy with always appending a query param to the url. The other option I can think of that may work is to auto-detect it when the first letter of the post is [ or { (ie. json), that just seemed a bit dirty to me", "url": "https://github.com/apache/druid/pull/10543#discussion_r535163258", "createdAt": "2020-12-03T11:59:53Z", "author": {"login": "lkm"}, "path": "sql/src/main/java/org/apache/druid/sql/avatica/DruidAvaticaProtobufHandler.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.avatica;\n+\n+import com.google.inject.Inject;\n+import org.apache.calcite.avatica.remote.LocalService;\n+import org.apache.calcite.avatica.remote.Service;\n+import org.apache.calcite.avatica.server.AvaticaProtobufHandler;\n+import org.apache.druid.guice.annotations.Self;\n+import org.apache.druid.server.DruidNode;\n+import org.eclipse.jetty.server.Request;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+\n+public class DruidAvaticaProtobufHandler extends AvaticaProtobufHandler\n+{\n+  public static final String AVATICA_PATH = \"/druid/v2/sql/avatica-pb/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0NjQ5Nw=="}, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc0MTQwMA==", "bodyText": "I see. It sounds reasonable to me.", "url": "https://github.com/apache/druid/pull/10543#discussion_r535741400", "createdAt": "2020-12-04T00:15:54Z", "author": {"login": "jihoonson"}, "path": "sql/src/main/java/org/apache/druid/sql/avatica/DruidAvaticaProtobufHandler.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.avatica;\n+\n+import com.google.inject.Inject;\n+import org.apache.calcite.avatica.remote.LocalService;\n+import org.apache.calcite.avatica.remote.Service;\n+import org.apache.calcite.avatica.server.AvaticaProtobufHandler;\n+import org.apache.druid.guice.annotations.Self;\n+import org.apache.druid.server.DruidNode;\n+import org.eclipse.jetty.server.Request;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+\n+public class DruidAvaticaProtobufHandler extends AvaticaProtobufHandler\n+{\n+  public static final String AVATICA_PATH = \"/druid/v2/sql/avatica-pb/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0NjQ5Nw=="}, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI4MTM1Ng==", "bodyText": "@jihoonson To be clear, do you think I should go the JSON sniffer way instead of having a separate endpoint?", "url": "https://github.com/apache/druid/pull/10543#discussion_r543281356", "createdAt": "2020-12-15T11:56:17Z", "author": {"login": "lkm"}, "path": "sql/src/main/java/org/apache/druid/sql/avatica/DruidAvaticaProtobufHandler.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.avatica;\n+\n+import com.google.inject.Inject;\n+import org.apache.calcite.avatica.remote.LocalService;\n+import org.apache.calcite.avatica.remote.Service;\n+import org.apache.calcite.avatica.server.AvaticaProtobufHandler;\n+import org.apache.druid.guice.annotations.Self;\n+import org.apache.druid.server.DruidNode;\n+import org.eclipse.jetty.server.Request;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+\n+public class DruidAvaticaProtobufHandler extends AvaticaProtobufHandler\n+{\n+  public static final String AVATICA_PATH = \"/druid/v2/sql/avatica-pb/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0NjQ5Nw=="}, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTUwNTEwNA==", "bodyText": "No, I think having a separate endpoint makes sense.", "url": "https://github.com/apache/druid/pull/10543#discussion_r545505104", "createdAt": "2020-12-18T01:01:33Z", "author": {"login": "jihoonson"}, "path": "sql/src/main/java/org/apache/druid/sql/avatica/DruidAvaticaProtobufHandler.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.avatica;\n+\n+import com.google.inject.Inject;\n+import org.apache.calcite.avatica.remote.LocalService;\n+import org.apache.calcite.avatica.remote.Service;\n+import org.apache.calcite.avatica.server.AvaticaProtobufHandler;\n+import org.apache.druid.guice.annotations.Self;\n+import org.apache.druid.server.DruidNode;\n+import org.eclipse.jetty.server.Request;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+\n+public class DruidAvaticaProtobufHandler extends AvaticaProtobufHandler\n+{\n+  public static final String AVATICA_PATH = \"/druid/v2/sql/avatica-pb/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0NjQ5Nw=="}, "originalCommit": null, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjE0NzEwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/org/apache/druid/server/AsyncQueryForwardingServlet.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMzoxNzozNVrOIOIwxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNFQwOTo0NTo0NFrOIwG5nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY5NDUzMw==", "bodyText": "side note, since we now have avatica stuff as dependencies to this project, it probably makes sense in a follow-up to modify the JSON version to use the types like this is doing instead of deserializing to a map.", "url": "https://github.com/apache/druid/pull/10543#discussion_r551694533", "createdAt": "2021-01-05T03:17:35Z", "author": {"login": "clintropolis"}, "path": "server/src/main/java/org/apache/druid/server/AsyncQueryForwardingServlet.java", "diffHunk": "@@ -457,6 +470,95 @@ static String getAvaticaConnectionId(Map<String, Object> requestMap)\n     return (String) connectionIdObj;\n   }\n \n+  static String getAvaticaProtobufConnectionId(Service.Request request)", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjc5MjQwOQ==", "bodyText": "I'm not sure how much there is to gain from that, what are you thinking would be the advantage? Also, looking through it I can't find an easy to use class like ProtobufTranslationImpl for json.", "url": "https://github.com/apache/druid/pull/10543#discussion_r572792409", "createdAt": "2021-02-09T11:03:34Z", "author": {"login": "lkm"}, "path": "server/src/main/java/org/apache/druid/server/AsyncQueryForwardingServlet.java", "diffHunk": "@@ -457,6 +470,95 @@ static String getAvaticaConnectionId(Map<String, Object> requestMap)\n     return (String) connectionIdObj;\n   }\n \n+  static String getAvaticaProtobufConnectionId(Service.Request request)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY5NDUzMw=="}, "originalCommit": null, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzMxNTYxNQ==", "bodyText": "BTW, I guess the reason would be defensive for the most part, to more strongly type the check so that whenever we upgrade the library, stuff would fail at compile time instead of just fail in strange ways at run time if any of the requests ever change, however unlikely.\nSome of the unit tests for the json path are using the avatica types for json to test this area already, so was just thinking since its used as a runtime depend now we could use the expected types for non tests too. But yeah, its definitely not necessary and doesn't provide a lot of gain, nor do I think we should do it in this PR or anything.", "url": "https://github.com/apache/druid/pull/10543#discussion_r587315615", "createdAt": "2021-03-04T09:45:44Z", "author": {"login": "clintropolis"}, "path": "server/src/main/java/org/apache/druid/server/AsyncQueryForwardingServlet.java", "diffHunk": "@@ -457,6 +470,95 @@ static String getAvaticaConnectionId(Map<String, Object> requestMap)\n     return (String) connectionIdObj;\n   }\n \n+  static String getAvaticaProtobufConnectionId(Service.Request request)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY5NDUzMw=="}, "originalCommit": null, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjE2MzcwOnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/org/apache/druid/sql/avatica/DruidAvaticaProtobufHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMzoyNzoyOVrOIOI6BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxMDozMjoyM1rOIiPEYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY5NjkwMQ==", "bodyText": "super nitpick: I think it might be nicer to spell out the endpoint e.g. /druid/v2/sql/avatica-protobuf/ instead of /druid/v2/sql/avatica-pb/, but I don't feel super strongly about this and is also ok as it is", "url": "https://github.com/apache/druid/pull/10543#discussion_r551696901", "createdAt": "2021-01-05T03:27:29Z", "author": {"login": "clintropolis"}, "path": "sql/src/main/java/org/apache/druid/sql/avatica/DruidAvaticaProtobufHandler.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.avatica;\n+\n+import com.google.inject.Inject;\n+import org.apache.calcite.avatica.remote.LocalService;\n+import org.apache.calcite.avatica.remote.Service;\n+import org.apache.calcite.avatica.server.AvaticaProtobufHandler;\n+import org.apache.druid.guice.annotations.Self;\n+import org.apache.druid.server.DruidNode;\n+import org.eclipse.jetty.server.Request;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+\n+public class DruidAvaticaProtobufHandler extends AvaticaProtobufHandler\n+{\n+  public static final String AVATICA_PATH = \"/druid/v2/sql/avatica-pb/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjc2OTM3Ng==", "bodyText": "Happy to, I don't feel strongly about it either", "url": "https://github.com/apache/druid/pull/10543#discussion_r572769376", "createdAt": "2021-02-09T10:32:23Z", "author": {"login": "lkm"}, "path": "sql/src/main/java/org/apache/druid/sql/avatica/DruidAvaticaProtobufHandler.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.sql.avatica;\n+\n+import com.google.inject.Inject;\n+import org.apache.calcite.avatica.remote.LocalService;\n+import org.apache.calcite.avatica.remote.Service;\n+import org.apache.calcite.avatica.server.AvaticaProtobufHandler;\n+import org.apache.druid.guice.annotations.Self;\n+import org.apache.druid.server.DruidNode;\n+import org.eclipse.jetty.server.Request;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+\n+public class DruidAvaticaProtobufHandler extends AvaticaProtobufHandler\n+{\n+  public static final String AVATICA_PATH = \"/druid/v2/sql/avatica-pb/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY5NjkwMQ=="}, "originalCommit": null, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjE3MDc2OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/org/apache/druid/sql/avatica/DruidMeta.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMzozMjowM1rOIOI-AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMzozMjowM1rOIOI-AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY5NzkyMA==", "bodyText": "i wonder if this was causing some problem before... looking at other implementations some do check for null on this field, \ud83d\udc4d", "url": "https://github.com/apache/druid/pull/10543#discussion_r551697920", "createdAt": "2021-01-05T03:32:03Z", "author": {"login": "clintropolis"}, "path": "sql/src/main/java/org/apache/druid/sql/avatica/DruidMeta.java", "diffHunk": "@@ -104,8 +104,10 @@ public void openConnection(final ConnectionHandle ch, final Map<String, String>\n   {\n     // Build connection context.\n     final ImmutableMap.Builder<String, Object> context = ImmutableMap.builder();\n-    for (Map.Entry<String, String> entry : info.entrySet()) {\n-      context.put(entry);\n+    if (info != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjE3NTU0OnYy", "diffSide": "RIGHT", "path": "sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMzozNDozNFrOIOJAhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxMDozMTo1MlrOIiPDCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY5ODU2NQ==", "bodyText": "nit: I wonder if this test would be better using @RunWith(JUnitParamsRunner.class)  with the different handler implementations instead of making it an abstract class", "url": "https://github.com/apache/druid/pull/10543#discussion_r551698565", "createdAt": "2021-01-05T03:34:34Z", "author": {"login": "clintropolis"}, "path": "sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java", "diffHunk": "@@ -101,7 +101,7 @@\n import java.util.concurrent.Executors;\n import java.util.concurrent.ThreadLocalRandom;\n \n-public class DruidAvaticaHandlerTest extends CalciteTestBase\n+public abstract class DruidAvaticaHandlerTest extends CalciteTestBase", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjc2OTAzNA==", "bodyText": "Would that not make the test harder to read? You mean parameterising each test case? I was going for a lighter touch approach, the abstracted methods are called in setUp, which would then need rewriting", "url": "https://github.com/apache/druid/pull/10543#discussion_r572769034", "createdAt": "2021-02-09T10:31:52Z", "author": {"login": "lkm"}, "path": "sql/src/test/java/org/apache/druid/sql/avatica/DruidAvaticaHandlerTest.java", "diffHunk": "@@ -101,7 +101,7 @@\n import java.util.concurrent.Executors;\n import java.util.concurrent.ThreadLocalRandom;\n \n-public class DruidAvaticaHandlerTest extends CalciteTestBase\n+public abstract class DruidAvaticaHandlerTest extends CalciteTestBase", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY5ODU2NQ=="}, "originalCommit": null, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3077, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}