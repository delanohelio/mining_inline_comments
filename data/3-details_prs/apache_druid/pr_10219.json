{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3NzU5OTAz", "number": 10219, "title": "add hasNulls to ColumnCapabilities, ColumnAnalysis", "bodyText": "Description\nThis PR adds a computed hasNulls property to ColumnCapabilities in service of allowing segment metadata queries to accurately report which columns have null values via the updated ColumnAnalysis.\nThis PR also fixes a bug with filtering numeric null values on the numeric dimension indexers, where the null values were being treated as nulls rather than default values in default null handling mode, meaning a query against an incremental index would not produce results consistent with after it was persisted into a segment. This bug was being masked by the way BaseFilterTest was creating its test data, which would automatically turn all null rows into default values to handle the rowBasedWithoutTypeSignature finisher, but is now actually how the incremental index handles null valued rows. I've modified BaseFilterTest to have a property canTestNumericNullsAsDefaultValues which will allow special handling for the rowBasedWithoutTypeSignature finisher and allow treating it as sql compatible mode, even when it isn't, in order to not hide future issues like this, and dropped the magic null to default value logic that was creating the test data.\nIn a follow-up PR, with this information in place, RowSignature can be expanded to also track the nullable columns, allowing the SQL planner to more correctly plan a query based on whether or not a column has nulls instead of tying it to druid.generic.useDefaultValueForNull. INFORMATION_SCHEMA.COLUMNS will also correctly set IS_NULLABLE. This change is moderately disruptive to tests however, so I decided to split it out to keep things easy to review.\nOther follow-up work to do after this PR is modifying the query engines to take advantage of this new information by examining the column capabilities instead of using the global value of druid.generic.useDefaultValueForNull, for example to decide if NullableNumericAggregator needs to be employed for numeric primitive aggregations to handle null or not.\nLonger term, I would like to remove/repurpose druid.generic.useDefaultValueForNull and make Druid always be in SQL compatible mode, and at ingestion time just specify on the dimension specs which columns can and cannot have null values and what the default value should be (like other databases). I expect a setting will remain once the dust is settled on how to handle null and '' for legacy string columns created in default mode, but I think it should be possible to transition everywhere else to just always operate in SQL compatible null handling mode with little disruption.\n\nThis PR has:\n\n been self-reviewed.\n\n using the concurrency checklist (Remove this item if the PR doesn't have any relation to concurrency.)\n\n\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths, ensuring the threshold for code coverage is met.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-07-28T11:54:31Z", "url": "https://github.com/apache/druid/pull/10219", "merged": true, "mergeCommit": {"oid": "e053348f747f6428e14362e4844e916f8790b726"}, "closed": true, "closedAt": "2020-08-13T21:55:33Z", "author": {"login": "clintropolis"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1t5DlgH2gAyNDU3NzU5OTAzOmYxYzViMmRlYmFlNzNjOTJhNmMwYjE5YmNmZGE5MWE1ODU4NGZmZDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-nQS6gFqTQ2NzE1NjkwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f1c5b2debae73c92a6c0b19bcfda91a58584ffd6", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/f1c5b2debae73c92a6c0b19bcfda91a58584ffd6", "committedDate": "2020-07-17T06:32:07Z", "message": "add isNullable to ColumnCapabilities, ColumnAnalysis"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69e772e2998375dccad0966a08e84ff4472ddf82", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/69e772e2998375dccad0966a08e84ff4472ddf82", "committedDate": "2020-07-21T11:09:01Z", "message": "better builder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1126f1579f4d284778aa385b0e9379df34d581d3", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/1126f1579f4d284778aa385b0e9379df34d581d3", "committedDate": "2020-07-30T20:00:54Z", "message": "fix segment metadata queries in integration tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMTgxMzQ3", "url": "https://github.com/apache/druid/pull/10219#pullrequestreview-462181347", "createdAt": "2020-08-06T04:37:24Z", "commit": {"oid": "1126f1579f4d284778aa385b0e9379df34d581d3"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNDozNzoyNFrOG8i-0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNTo0NzoxM1rOG8kKZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE0MDg4MQ==", "bodyText": "I realize you just copied this code from somewhere else, but is there a way we can do this without instanceof? Maybe a new method on StorageAdapter with some nice javadocs? This code is pretty brittle otherwise.", "url": "https://github.com/apache/druid/pull/10219#discussion_r466140881", "createdAt": "2020-08-06T04:37:24Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/metadata/SegmentAnalyzer.java", "diffHunk": "@@ -100,6 +100,11 @@ public long numRows(Segment segment)\n \n     Map<String, ColumnAnalysis> columns = new TreeMap<>();\n \n+    Function<String, ColumnCapabilities> adapterCapabilitesFn =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1126f1579f4d284778aa385b0e9379df34d581d3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE0MTQ3Ng==", "bodyText": "When would it be unknown if a column has nulls?\nWill bad stuff happen if we return false when it actually does have nulls, but for some reason it's marked as unknown?", "url": "https://github.com/apache/druid/pull/10219#discussion_r466141476", "createdAt": "2020-08-06T04:39:42Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/metadata/SegmentAnalyzer.java", "diffHunk": "@@ -192,6 +193,7 @@ private ColumnAnalysis analyzeNumericColumn(\n     return new ColumnAnalysis(\n         capabilities.getType().name(),\n         capabilities.hasMultipleValues().isTrue(),\n+        capabilities.isNullable().isTrue(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1126f1579f4d284778aa385b0e9379df34d581d3"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1Mjk4Ng==", "bodyText": "With this addition, I'm wondering if the snapshot method still makes sense. What reason is there that callers generally want to set all these unknown things to the same boolean? They don't seem incredibly related. Maybe we should have callers explicitly resolve all the unknowns in particular directions.", "url": "https://github.com/apache/druid/pull/10219#discussion_r466152986", "createdAt": "2020-08-06T05:23:07Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilitiesImpl.java", "diffHunk": "@@ -72,22 +74,35 @@ public static ColumnCapabilitiesImpl snapshot(@Nullable final ColumnCapabilities\n     copy.hasMultipleValues = copy.hasMultipleValues.coerceUnknownToBoolean(unknownIsTrue);\n     copy.dictionaryValuesSorted = copy.dictionaryValuesSorted.coerceUnknownToBoolean(unknownIsTrue);\n     copy.dictionaryValuesUnique = copy.dictionaryValuesUnique.coerceUnknownToBoolean(unknownIsTrue);\n+    copy.nullable = copy.nullable.coerceUnknownToBoolean(unknownIsTrue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1126f1579f4d284778aa385b0e9379df34d581d3"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1NDMzMA==", "bodyText": "If it's string won't it still count as a null, even in replace-with-default mode?\nBtw, consider adding a NullHandling.isNullable(ValueType) method if seems useful.", "url": "https://github.com/apache/druid/pull/10219#discussion_r466154330", "createdAt": "2020-08-06T05:27:53Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/incremental/IncrementalIndex.java", "diffHunk": "@@ -685,6 +685,9 @@ IncrementalIndexRowResult toIncrementalIndexRow(InputRow row)\n         }\n         dimsKeySize += indexer.estimateEncodedKeyComponentSize(dimsKey);\n         // Set column capabilities as data is coming in\n+        if (dimsKey == null) {\n+          capabilities.setIsNullable(NullHandling.sqlCompatible());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1126f1579f4d284778aa385b0e9379df34d581d3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1OTA0Mg==", "bodyText": "Broad comment: \"hasNulls\" would be a better name for this property, because it's meant to mean whether or not the column really has nulls in it right now.\n\"isNullable\" will make people think of the SQL sense of the term, which is a different concept: it means a column could have nulls potentially, even if it doesn't right now.", "url": "https://github.com/apache/druid/pull/10219#discussion_r466159042", "createdAt": "2020-08-06T05:43:32Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilities.java", "diffHunk": "@@ -38,6 +38,7 @@\n   boolean hasSpatialIndexes();\n   Capable hasMultipleValues();\n   boolean isFilterable();\n+  Capable isNullable();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1126f1579f4d284778aa385b0e9379df34d581d3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1OTkxMw==", "bodyText": "It would be better to use !bitmap.isEmpty(), because bitmap.size() isn't always cached and could potentially require walking the bitmap. Similar comment for the other serde types.", "url": "https://github.com/apache/druid/pull/10219#discussion_r466159913", "createdAt": "2020-08-06T05:46:16Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/serde/DoubleNumericColumnPartSerdeV2.java", "diffHunk": "@@ -152,13 +152,17 @@ public Deserializer getDeserializer()\n \n       buffer.position(initialPos + offset);\n       final ImmutableBitmap bitmap;\n+      final boolean isNullable;\n       if (buffer.hasRemaining()) {\n         bitmap = bitmapSerdeFactory.getObjectStrategy().fromByteBufferWithSize(buffer);\n+        isNullable = bitmap.size() > 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1126f1579f4d284778aa385b0e9379df34d581d3"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE2MDIyOQ==", "bodyText": "What if it's a multi-value column with no explicit nulls, but some empty rows? Two questions in that scenario:\n\nShould a column like that report \"yes\" or \"no\" for having nulls? I'm guessing \"yes\" makes sense, because if you filter on col is null then that should match empty rows. So it stands to reason that it has nulls in some sense, even though you won't see them if you walk through the column.\nWhat will firstDictionaryEntry be?", "url": "https://github.com/apache/druid/pull/10219#discussion_r466160229", "createdAt": "2020-08-06T05:47:13Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/serde/DictionaryEncodedColumnPartSerde.java", "diffHunk": "@@ -329,6 +331,7 @@ public void read(ByteBuffer buffer, ColumnBuilder builder, ColumnConfig columnCo\n         );\n         builder\n             .setHasMultipleValues(hasMultipleValues)\n+            .setNullable(firstDictionaryEntry == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1126f1579f4d284778aa385b0e9379df34d581d3"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1dddd40f2022fbdbfc9743174fe11719ad01a99b", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/1dddd40f2022fbdbfc9743174fe11719ad01a99b", "committedDate": "2020-08-11T20:58:46Z", "message": "Merge remote-tracking branch 'upstream/master' into column-nullable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0455c2f518d005991f2ad00ed1aed3552872662c", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/0455c2f518d005991f2ad00ed1aed3552872662c", "committedDate": "2020-08-12T11:42:54Z", "message": "adjustments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d8908542fd501ba9b5467563de974e2ff5309ec", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/5d8908542fd501ba9b5467563de974e2ff5309ec", "committedDate": "2020-08-12T12:09:23Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9087a738c5b1306ae7fe942e1ce80f04fd9a1046", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/9087a738c5b1306ae7fe942e1ce80f04fd9a1046", "committedDate": "2020-08-12T20:02:52Z", "message": "fix spotbugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82ff3e452eae3ae1e77ce854e22f563d874bb055", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/82ff3e452eae3ae1e77ce854e22f563d874bb055", "committedDate": "2020-08-12T21:04:31Z", "message": "treat unknown as true in segmentmetadata"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MzMxNDc3", "url": "https://github.com/apache/druid/pull/10219#pullrequestreview-466331477", "createdAt": "2020-08-12T22:57:01Z", "commit": {"oid": "82ff3e452eae3ae1e77ce854e22f563d874bb055"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMjo1NzowMVrOG_1pDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzoxNToxMVrOG_2ADA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU5MjMzNQ==", "bodyText": "Could you please rename this to hasNulls, for this reason: #10219 (comment)?", "url": "https://github.com/apache/druid/pull/10219#discussion_r469592335", "createdAt": "2020-08-12T22:57:01Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/metadata/SegmentAnalyzer.java", "diffHunk": "@@ -335,6 +339,8 @@ private ColumnAnalysis analyzeComplexColumn(\n   {\n     try (final ComplexColumn complexColumn = columnHolder != null ? (ComplexColumn) columnHolder.getColumn() : null) {\n       final boolean hasMultipleValues = capabilities != null && capabilities.hasMultipleValues().isTrue();\n+      // if we don't know for sure, then we should plan to check for nulls\n+      final boolean nullable = capabilities != null && capabilities.hasNulls().isMaybeTrue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82ff3e452eae3ae1e77ce854e22f563d874bb055"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU5MzI0OQ==", "bodyText": "This comment doesn't make a lot of sense in the context of SegmentAnalyzer. It shouldn't \"know\" what the fields are being used for, so it shouldn't \"know\" they're going to be used to check for nulls somewhere higher up the chain.\nMaybe a better thing to do would be:\n\nDefine \"hasNulls\" as meaning \"definitely has nulls, or can't determine\". This should be in the docs for the segmentMetadata query too.\nNow this comment could read: \"If we don't know for sure, return true to adhere to the definition of hasNulls\"", "url": "https://github.com/apache/druid/pull/10219#discussion_r469593249", "createdAt": "2020-08-12T22:59:51Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/metadata/SegmentAnalyzer.java", "diffHunk": "@@ -192,6 +193,7 @@ private ColumnAnalysis analyzeNumericColumn(\n     return new ColumnAnalysis(\n         capabilities.getType().name(),\n         capabilities.hasMultipleValues().isTrue(),\n+        capabilities.hasNulls().isMaybeTrue(), // if we don't know for sure, then we should plan to check for nulls", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82ff3e452eae3ae1e77ce854e22f563d874bb055"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU5ODIyMA==", "bodyText": "I do feel that it shouldn't be called isNullable. I think we should avoid the word \"nullable\" in core Druid to refer to this concept, because one day, we might want to introduce the SQL-style concept of nullable vs non-nullable columns. That concept is more of a definition thing than a reality thing, and will be confusing to introduce to core if we have the reality-thing using the word \"nullable\".\nAlso, if we did introduce it to core, we'd probably want to report both (a column that is nullable table-wide might not actually have nulls in a specific segment, and that's useful to know).", "url": "https://github.com/apache/druid/pull/10219#discussion_r469598220", "createdAt": "2020-08-12T23:15:11Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/column/ColumnCapabilities.java", "diffHunk": "@@ -38,6 +38,7 @@\n   boolean hasSpatialIndexes();\n   Capable hasMultipleValues();\n   boolean isFilterable();\n+  Capable isNullable();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1OTA0Mg=="}, "originalCommit": {"oid": "1126f1579f4d284778aa385b0e9379df34d581d3"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdd6b07d2c635fbe52f9ce044ad508fba96e0a55", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/bdd6b07d2c635fbe52f9ce044ad508fba96e0a55", "committedDate": "2020-08-12T23:51:43Z", "message": "rename to hasNulls, add docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MzUzNTY3", "url": "https://github.com/apache/druid/pull/10219#pullrequestreview-466353567", "createdAt": "2020-08-12T23:59:51Z", "commit": {"oid": "bdd6b07d2c635fbe52f9ce044ad508fba96e0a55"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09d452b82efed4cde8cc62957c72bedf439d61fc", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/09d452b82efed4cde8cc62957c72bedf439d61fc", "committedDate": "2020-08-13T03:40:16Z", "message": "fixup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "336dbbb630563f9081e548a45e7d979935f53451", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/336dbbb630563f9081e548a45e7d979935f53451", "committedDate": "2020-08-13T05:32:38Z", "message": "test the dim indexer selector isNull fix for numeric columns"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8c1145feb382ee50c1c7e0db84a16beb0093629", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/b8c1145feb382ee50c1c7e0db84a16beb0093629", "committedDate": "2020-08-13T10:07:14Z", "message": "fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a21abb884ef9be7453840206752fcde5ec80a8e", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/2a21abb884ef9be7453840206752fcde5ec80a8e", "committedDate": "2020-08-13T11:44:04Z", "message": "oof"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MTU2OTA2", "url": "https://github.com/apache/druid/pull/10219#pullrequestreview-467156906", "createdAt": "2020-08-13T21:53:29Z", "commit": {"oid": "2a21abb884ef9be7453840206752fcde5ec80a8e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1889, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}