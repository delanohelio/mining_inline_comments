{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwODQ1NDAx", "number": 10088, "title": "Add integration tests for all InputFormat", "bodyText": "Add integration tests for all InputFormat\nDescription\nAdd integration tests for all InputFormat using local InputSource. The set of new tests cover happy path for all InputFormat. (Including the new Avro OCF introduced in #9671)\nThis also fix a bug for handling number value starting with negative sign or decimal point when use with a quantilesDoublesSketch for csv (which ingest objects as String)\nThis PR has:\n\n been self-reviewed.\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths, ensuring the threshold for code coverage is met.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-06-27T01:59:50Z", "url": "https://github.com/apache/druid/pull/10088", "merged": true, "mergeCommit": {"oid": "4e8570b71b6b8b6ab1299faed051d7287395013a"}, "closed": true, "closedAt": "2020-07-08T19:50:30Z", "author": {"login": "maytasm"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcvN7sAgH2gAyNDQwODQ1NDAxOjg5MzU0Zjk4NmU3M2QyNDIxZDk1NWJiMWFlMTJmY2E2ZWYyNzlkMmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcw4JasgH2gAyNDQwODQ1NDAxOmE0YTBiNDcxMWU2N2QzYTc2YzM5OTRhMTFiZTYxMzc4MDBjZDBiNTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "89354f986e73d2421d955bb1ae12fca6ef279d2c", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/89354f986e73d2421d955bb1ae12fca6ef279d2c", "committedDate": "2020-06-27T01:54:29Z", "message": "Add integration tests for Avro OCF InputFormat"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0b552006f91f38952ad480ae912b2c049d2568e", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/a0b552006f91f38952ad480ae912b2c049d2568e", "committedDate": "2020-06-27T01:57:28Z", "message": "Add integration tests for Avro OCF InputFormat"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b5d4d599ad46999dc2f917c722e28c96f48f96f", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/2b5d4d599ad46999dc2f917c722e28c96f48f96f", "committedDate": "2020-06-27T08:05:38Z", "message": "add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aaf60b92201029c31b229a385225069ff293eef9", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/aaf60b92201029c31b229a385225069ff293eef9", "committedDate": "2020-06-27T09:16:45Z", "message": "fix bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b5d37790bc0859c926c97ee1f5b9c1e08335a61", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/4b5d37790bc0859c926c97ee1f5b9c1e08335a61", "committedDate": "2020-06-27T09:19:52Z", "message": "fix bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61ff5f2cfbfd13f625eab7c1a703eddaa4a09851", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/61ff5f2cfbfd13f625eab7c1a703eddaa4a09851", "committedDate": "2020-06-27T09:50:59Z", "message": "fix failing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb12d6c5ec50d487865716757183ad05b71020a9", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/cb12d6c5ec50d487865716757183ad05b71020a9", "committedDate": "2020-06-27T09:59:49Z", "message": "add comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4Njk3MDUy", "url": "https://github.com/apache/druid/pull/10088#pullrequestreview-438697052", "createdAt": "2020-06-27T13:01:39Z", "commit": {"oid": "cb12d6c5ec50d487865716757183ad05b71020a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxMzowMTozOVrOGp1sww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxMzowMTozOVrOGp1sww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyNDYxMQ==", "bodyText": "Are these named around the wrong way? This one seems to be without whilst the one above seems to be supplying a schema.", "url": "https://github.com/apache/druid/pull/10088#discussion_r446524611", "createdAt": "2020-06-27T13:01:39Z", "author": {"login": "josephglanville"}, "path": "integration-tests/src/test/java/org/apache/druid/tests/parallelized/ITLocalInputSourceAllInputFormatTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.tests.parallelized;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.druid.testing.guice.DruidTestModuleFactory;\n+import org.apache.druid.tests.TestNGGroup;\n+import org.apache.druid.tests.indexer.AbstractLocalInputSourceParallelIndexTest;\n+import org.testng.annotations.Guice;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Test(groups = TestNGGroup.BATCH_INDEX)\n+@Guice(moduleFactory = DruidTestModuleFactory.class)\n+public class ITLocalInputSourceAllInputFormatTest extends AbstractLocalInputSourceParallelIndexTest\n+{\n+  @Test\n+  public void testAvroInputFormatIndexDataIngestionSpecWithoutSchema() throws Exception\n+  {\n+    List fieldList = ImmutableList.of(\n+        ImmutableMap.of(\"name\", \"timestamp\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"page\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"language\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"user\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"unpatrolled\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"newPage\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"robot\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"anonymous\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"namespace\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"continent\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"country\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"region\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"city\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"added\", \"type\", \"int\"),\n+        ImmutableMap.of(\"name\", \"deleted\", \"type\", \"int\"),\n+        ImmutableMap.of(\"name\", \"delta\", \"type\", \"int\")\n+    );\n+    Map schema = ImmutableMap.of(\"namespace\", \"org.apache.druid.data.input\",\n+                                 \"type\", \"record\",\n+                                 \"name\", \"wikipedia\",\n+                                 \"fields\", fieldList);\n+    doIndexTest(InputFormatDetails.AVRO, ImmutableMap.of(\"schema\", schema));\n+  }\n+\n+  @Test\n+  public void testAvroInputFormatIndexDataIngestionSpecWithSchema() throws Exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb12d6c5ec50d487865716757183ad05b71020a9"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf2ccd1ffa9cceb63ad8862adbd71678f7958868", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/cf2ccd1ffa9cceb63ad8862adbd71678f7958868", "committedDate": "2020-06-27T21:01:01Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4ODM3NjUz", "url": "https://github.com/apache/druid/pull/10088#pullrequestreview-438837653", "createdAt": "2020-06-29T01:24:45Z", "commit": {"oid": "cf2ccd1ffa9cceb63ad8862adbd71678f7958868"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwMToyNDo0NlrOGqCERA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwMToyNDo0NlrOGqCERA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcyNzIzNg==", "bodyText": "Since this method is going to look at every character of the string to check if it's a number, I wonder if it's better to just try to parse it to a double and then use it if it's not null, maybe\n...\n          final Double doubleValue;\n          if (objectString.isEmpty()) {\n            return DoublesSketchOperations.EMPTY_SKETCH;\n          } else if ((doubleValue = Doubles.tryParse(objectString)) != null) {\n            UpdateDoublesSketch sketch = DoublesSketch.builder().setK(MIN_K).build();\n            sketch.update(doubleValue);\n            return sketch;\n          }\n...", "url": "https://github.com/apache/druid/pull/10088#discussion_r446727236", "createdAt": "2020-06-29T01:24:46Z", "author": {"login": "clintropolis"}, "path": "extensions-core/datasketches/src/main/java/org/apache/druid/query/aggregation/datasketches/quantiles/DoublesSketchComplexMetricSerde.java", "diffHunk": "@@ -77,7 +78,7 @@ public Object extractValue(final InputRow inputRow, final String metricName)\n           // This corresponds to \"A\" in base64, so it is not a digit\n           if (objectString.isEmpty()) {\n             return DoublesSketchOperations.EMPTY_SKETCH;\n-          } else if (Character.isDigit(objectString.charAt(0))) {\n+          } else if (NumberUtils.isParsable(objectString)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf2ccd1ffa9cceb63ad8862adbd71678f7958868"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4ODQyMTAz", "url": "https://github.com/apache/druid/pull/10088#pullrequestreview-438842103", "createdAt": "2020-06-29T01:46:55Z", "commit": {"oid": "cf2ccd1ffa9cceb63ad8862adbd71678f7958868"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwMTo0Njo1NVrOGqCUag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwMTo0Njo1NVrOGqCUag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjczMTM3MA==", "bodyText": "I wonder if these could all run in parallel in a single test?", "url": "https://github.com/apache/druid/pull/10088#discussion_r446731370", "createdAt": "2020-06-29T01:46:55Z", "author": {"login": "clintropolis"}, "path": "integration-tests/src/test/java/org/apache/druid/tests/parallelized/ITLocalInputSourceAllInputFormatTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.tests.parallelized;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.druid.testing.guice.DruidTestModuleFactory;\n+import org.apache.druid.tests.TestNGGroup;\n+import org.apache.druid.tests.indexer.AbstractLocalInputSourceParallelIndexTest;\n+import org.testng.annotations.Guice;\n+import org.testng.annotations.Test;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@Test(groups = TestNGGroup.INPUT_FORMAT)\n+@Guice(moduleFactory = DruidTestModuleFactory.class)\n+public class ITLocalInputSourceAllInputFormatTest extends AbstractLocalInputSourceParallelIndexTest\n+{\n+  @Test\n+  public void testAvroInputFormatIndexDataIngestionSpecWithSchema() throws Exception\n+  {\n+    List fieldList = ImmutableList.of(\n+        ImmutableMap.of(\"name\", \"timestamp\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"page\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"language\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"user\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"unpatrolled\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"newPage\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"robot\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"anonymous\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"namespace\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"continent\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"country\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"region\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"city\", \"type\", \"string\"),\n+        ImmutableMap.of(\"name\", \"added\", \"type\", \"int\"),\n+        ImmutableMap.of(\"name\", \"deleted\", \"type\", \"int\"),\n+        ImmutableMap.of(\"name\", \"delta\", \"type\", \"int\")\n+    );\n+    Map schema = ImmutableMap.of(\"namespace\", \"org.apache.druid.data.input\",\n+                                 \"type\", \"record\",\n+                                 \"name\", \"wikipedia\",\n+                                 \"fields\", fieldList);\n+    doIndexTest(InputFormatDetails.AVRO, ImmutableMap.of(\"schema\", schema));\n+  }\n+\n+  @Test\n+  public void testAvroInputFormatIndexDataIngestionSpecWithoutSchema() throws Exception\n+  {\n+    doIndexTest(InputFormatDetails.AVRO);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf2ccd1ffa9cceb63ad8862adbd71678f7958868"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1a80b03a6c19e64b0465c2179aceb3157abbceb", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/c1a80b03a6c19e64b0465c2179aceb3157abbceb", "committedDate": "2020-06-29T21:09:08Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69e22a795df721e4f71e22e7386c3b8dff395931", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/69e22a795df721e4f71e22e7386c3b8dff395931", "committedDate": "2020-06-29T21:14:51Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca475d1e1ef4887a1915756cbe3859181e225029", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/ca475d1e1ef4887a1915756cbe3859181e225029", "committedDate": "2020-06-29T21:46:19Z", "message": "fix test data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a93ee2fcdecaab33122aacb5c93a36fb6fb5a091", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/a93ee2fcdecaab33122aacb5c93a36fb6fb5a091", "committedDate": "2020-06-30T19:39:41Z", "message": "reduce resource needed for IT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72b78702bb28f2fb647fe2f58ecff2a419851b6d", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/72b78702bb28f2fb647fe2f58ecff2a419851b6d", "committedDate": "2020-07-01T00:36:34Z", "message": "remove bug fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a1588c048e066e9a3e17c98402ded406bfecb37", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/3a1588c048e066e9a3e17c98402ded406bfecb37", "committedDate": "2020-07-01T00:38:40Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDk3MjYy", "url": "https://github.com/apache/druid/pull/10088#pullrequestreview-440497262", "createdAt": "2020-07-01T01:56:59Z", "commit": {"oid": "3a1588c048e066e9a3e17c98402ded406bfecb37"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd0dda5a7f69af8d1d8cb05f28ad90df9fbabc73", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/bd0dda5a7f69af8d1d8cb05f28ad90df9fbabc73", "committedDate": "2020-07-01T05:44:54Z", "message": "add bug fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4a0b4711e67d3a76c3994a11be6137800cd0b52", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/a4a0b4711e67d3a76c3994a11be6137800cd0b52", "committedDate": "2020-07-02T05:39:25Z", "message": "resolve conflict"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2180, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}