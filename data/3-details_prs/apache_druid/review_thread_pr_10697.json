{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNTEzODAz", "number": 10697, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNFQwMTowNjoxOVrOFhNGTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNVQwMDoxMDoxMlrOFh04Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcwMzYxOTMyOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/planning/DataSourceAnalysis.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNFQwMTowNjoxOVrOIvvfFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNFQwMTowNjoxOVrOIvvfFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjkzMTk5MA==", "bodyText": "this was probably an accident?", "url": "https://github.com/apache/druid/pull/10697#discussion_r586931990", "createdAt": "2021-03-04T01:06:19Z", "author": {"login": "clintropolis"}, "path": "processing/src/main/java/org/apache/druid/query/planning/DataSourceAnalysis.java", "diffHunk": "@@ -98,12 +102,13 @@ private DataSourceAnalysis(\n     this.dataSource = dataSource;\n     this.baseDataSource = baseDataSource;\n     this.baseQuery = baseQuery;\n+    this.joinBaseTableFilter = joinBaseTableFilter;\n     this.preJoinableClauses = preJoinableClauses;\n   }\n \n   public static DataSourceAnalysis forDataSource(final DataSource dataSource)\n   {\n-    // Strip outer queries, retaining querySegmentSpecs as we go down (lowest will become the 'baseQuerySegmentSpec').\n+    // Strip outer queries, retaining querySegmentSpecs as we go down (lowest will become the 'baseQuerySegmentSpec'o).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "538244aaa1a31f1c10fa62131e5e8657e94569f2"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcwNjExMDkzOnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/org/apache/druid/sql/calcite/rel/DruidQuery.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNFQwOToxNDoxNlrOIwFYtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNFQwOToxNDoxNlrOIwFYtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzI5MDgwNw==", "bodyText": "nit: typo donw -> done?", "url": "https://github.com/apache/druid/pull/10697#discussion_r587290807", "createdAt": "2021-03-04T09:14:16Z", "author": {"login": "clintropolis"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/rel/DruidQuery.java", "diffHunk": "@@ -648,6 +651,52 @@ private VirtualColumns getVirtualColumns(final boolean includeDimensions)\n     return VirtualColumns.create(columns);\n   }\n \n+  /**\n+   * Returns a pair of DataSource and Filtration object created on the query filter. In case the, data source is\n+   * a join datasource, the datasource may be altered and left filter of join datasource may\n+   * be rid of time filters.\n+   * TODO: should we optimize the base table filter just like we do with query filters\n+   */\n+  @VisibleForTesting\n+  static Pair<DataSource, Filtration> getFiltration(\n+      DataSource dataSource,\n+      DimFilter filter,\n+      VirtualColumnRegistry virtualColumnRegistry\n+  )\n+  {\n+    if (!(dataSource instanceof JoinDataSource)) {\n+      return Pair.of(dataSource, toFiltration(filter, virtualColumnRegistry));\n+    }\n+    JoinDataSource joinDataSource = (JoinDataSource) dataSource;\n+    if (joinDataSource.getLeftFilter() == null) {\n+      return Pair.of(dataSource, toFiltration(filter, virtualColumnRegistry));\n+    }\n+    //TODO: We should avoid promoting the time filter as interval for right outer and full outer joins. This is not\n+    // donw now as we apply the intervals to left base table today irrespective of the join type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c681bac6cd364ac0ecc68b77b539061c865a9782"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcxMDA2ODQzOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNFQyMzo1MTowNVrOIwrsIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wOFQxODoyNDo0MVrOIyVTBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzkxODM3MA==", "bodyText": "No what?", "url": "https://github.com/apache/druid/pull/10697#discussion_r587918370", "createdAt": "2021-03-04T23:51:05Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java", "diffHunk": "@@ -69,8 +70,25 @@\n       final List<JoinableClause> clauses,\n       final JoinFilterPreAnalysis joinFilterPreAnalysis\n   )\n+  {\n+    this(baseAdapter, null, clauses, joinFilterPreAnalysis);\n+  }\n+\n+  /**\n+   * @param baseAdapter           A StorageAdapter for the left-hand side base segment\n+   * @param baseFilter            A filter for the left-hand side base segment\n+   * @param clauses               The right-hand side clauses. The caller is responsible for ensuring that there are no", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b51e4eb87135084d6036d1e989c8cd609bd51d80"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTY0ODY0Ng==", "bodyText": "copy-paste error. will fix it in another patch.", "url": "https://github.com/apache/druid/pull/10697#discussion_r589648646", "createdAt": "2021-03-08T18:24:41Z", "author": {"login": "abhishekagarwal87"}, "path": "processing/src/main/java/org/apache/druid/segment/join/HashJoinSegmentStorageAdapter.java", "diffHunk": "@@ -69,8 +70,25 @@\n       final List<JoinableClause> clauses,\n       final JoinFilterPreAnalysis joinFilterPreAnalysis\n   )\n+  {\n+    this(baseAdapter, null, clauses, joinFilterPreAnalysis);\n+  }\n+\n+  /**\n+   * @param baseAdapter           A StorageAdapter for the left-hand side base segment\n+   * @param baseFilter            A filter for the left-hand side base segment\n+   * @param clauses               The right-hand side clauses. The caller is responsible for ensuring that there are no", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzkxODM3MA=="}, "originalCommit": {"oid": "b51e4eb87135084d6036d1e989c8cd609bd51d80"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcxMDExMjk2OnYy", "diffSide": "RIGHT", "path": "sql/src/main/java/org/apache/druid/sql/calcite/rule/DruidJoinRule.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNVQwMDowMDozMFrOIwsF9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNVQxODozMDo1NlrOIxTCaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzkyNDk4Mw==", "bodyText": "This may not work right if left is a DruidJoinQueryRel or DruidOuterQueryRel instead of a DruidQueryRel (since leftFilter is only supported for regular tables).", "url": "https://github.com/apache/druid/pull/10697#discussion_r587924983", "createdAt": "2021-03-05T00:00:30Z", "author": {"login": "gianm"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/rule/DruidJoinRule.java", "diffHunk": "@@ -97,18 +98,19 @@ public void onMatch(RelOptRuleCall call)\n \n     final DruidRel<?> newLeft;\n     final DruidRel<?> newRight;\n+    final Filter leftFilter;\n     final List<RexNode> newProjectExprs = new ArrayList<>();\n \n     // Already verified to be present in \"matches\", so just call \"get\".\n     // Can't be final, because we're going to reassign it up to a couple of times.\n     ConditionAnalysis conditionAnalysis = analyzeCondition(join.getCondition(), join.getLeft().getRowType()).get();\n \n-    if (left.getPartialDruidQuery().stage() == PartialDruidQuery.Stage.SELECT_PROJECT\n-        && left.getPartialDruidQuery().getWhereFilter() == null) {\n+    if (left.getPartialDruidQuery().stage() == PartialDruidQuery.Stage.SELECT_PROJECT) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b51e4eb87135084d6036d1e989c8cd609bd51d80"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODU2MzA1MQ==", "bodyText": "oops. good catch. will fix this.", "url": "https://github.com/apache/druid/pull/10697#discussion_r588563051", "createdAt": "2021-03-05T18:30:56Z", "author": {"login": "abhishekagarwal87"}, "path": "sql/src/main/java/org/apache/druid/sql/calcite/rule/DruidJoinRule.java", "diffHunk": "@@ -97,18 +98,19 @@ public void onMatch(RelOptRuleCall call)\n \n     final DruidRel<?> newLeft;\n     final DruidRel<?> newRight;\n+    final Filter leftFilter;\n     final List<RexNode> newProjectExprs = new ArrayList<>();\n \n     // Already verified to be present in \"matches\", so just call \"get\".\n     // Can't be final, because we're going to reassign it up to a couple of times.\n     ConditionAnalysis conditionAnalysis = analyzeCondition(join.getCondition(), join.getLeft().getRowType()).get();\n \n-    if (left.getPartialDruidQuery().stage() == PartialDruidQuery.Stage.SELECT_PROJECT\n-        && left.getPartialDruidQuery().getWhereFilter() == null) {\n+    if (left.getPartialDruidQuery().stage() == PartialDruidQuery.Stage.SELECT_PROJECT) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzkyNDk4Mw=="}, "originalCommit": {"oid": "b51e4eb87135084d6036d1e989c8cd609bd51d80"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcxMDEzMjQyOnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/JoinDataSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNVQwMDowODoyNFrOIwsRcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNVQwMDowODoyNFrOIwsRcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzkyNzkyMA==", "bodyText": "The javadoc doesn't seem right, it doesn't accept a JoinConditionAnalysis.\nFwiw, also, I don't really like adding \"everything minus one\" constructors when a new parameter is added. It minimizes the amount of code to update, but it leaves things messier, and it makes it more likely that someone will forget to use the new parameter when it is actually important to use. IMO it is better to remove this constructor and update all the call sites to use the new one.", "url": "https://github.com/apache/druid/pull/10697#discussion_r587927920", "createdAt": "2021-03-05T00:08:24Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/JoinDataSource.java", "diffHunk": "@@ -108,10 +122,26 @@ public static JoinDataSource create(\n       final DataSource right,\n       final String rightPrefix,\n       final JoinConditionAnalysis conditionAnalysis,\n-      final JoinType joinType\n+      final JoinType joinType,\n+      final DimFilter leftFilter\n+  )\n+  {\n+    return new JoinDataSource(left, right, rightPrefix, conditionAnalysis, joinType, leftFilter);\n+  }\n+\n+  /**\n+   * Create a join dataSource from an existing {@link JoinConditionAnalysis}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b51e4eb87135084d6036d1e989c8cd609bd51d80"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzcxMDEzNjc5OnYy", "diffSide": "RIGHT", "path": "processing/src/main/java/org/apache/druid/query/planning/DataSourceAnalysis.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNVQwMDoxMDoxMlrOIwsT9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNVQwMDoxMDoxMlrOIwsT9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzkyODU2NQ==", "bodyText": "nit: Nested Pairs probably mean it's time for a named class.", "url": "https://github.com/apache/druid/pull/10697#discussion_r587928565", "createdAt": "2021-03-05T00:10:12Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/query/planning/DataSourceAnalysis.java", "diffHunk": "@@ -156,7 +166,7 @@ public static DataSourceAnalysis forDataSource(final DataSource dataSource)\n     // going-up order. So reverse them.\n     Collections.reverse(preJoinableClauses);\n \n-    return Pair.of(current, preJoinableClauses);\n+    return Pair.of(Pair.of(current, currentDimFilter), preJoinableClauses);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b51e4eb87135084d6036d1e989c8cd609bd51d80"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2940, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}