{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzMzE2NzE5", "number": 10437, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxOTowOTowOVrOEnkp9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxOTowOTowOVrOEnkp9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTMwNDg1OnYy", "diffSide": "LEFT", "path": "core/src/main/java/org/apache/druid/math/expr/Expr.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxOTowOTowOVrOHYPcnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxOToyMToxOFrOHYPx2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE4MDk1OQ==", "bodyText": "Can you remove Visitor as well?", "url": "https://github.com/apache/druid/pull/10437#discussion_r495180959", "createdAt": "2020-09-25T19:09:09Z", "author": {"login": "clintropolis"}, "path": "core/src/main/java/org/apache/druid/math/expr/Expr.java", "diffHunk": "@@ -112,12 +112,6 @@ default String getBindingIfIdentifier()\n    */\n   String stringify();\n \n-  /**\n-   * Programmatically inspect the {@link Expr} tree with a {@link Visitor}. Each {@link Expr} is responsible for\n-   * ensuring the {@link Visitor} can visit all of its {@link Expr} children before visiting itself\n-   */\n-  void visit(Visitor visitor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c2b9c1321d68eadd2e2c7056b7ef5f58f3a1eb0"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE4NjM5Mw==", "bodyText": "Yes, good point, I just removed it.", "url": "https://github.com/apache/druid/pull/10437#discussion_r495186393", "createdAt": "2020-09-25T19:21:18Z", "author": {"login": "gianm"}, "path": "core/src/main/java/org/apache/druid/math/expr/Expr.java", "diffHunk": "@@ -112,12 +112,6 @@ default String getBindingIfIdentifier()\n    */\n   String stringify();\n \n-  /**\n-   * Programmatically inspect the {@link Expr} tree with a {@link Visitor}. Each {@link Expr} is responsible for\n-   * ensuring the {@link Visitor} can visit all of its {@link Expr} children before visiting itself\n-   */\n-  void visit(Visitor visitor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE4MDk1OQ=="}, "originalCommit": {"oid": "2c2b9c1321d68eadd2e2c7056b7ef5f58f3a1eb0"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2978, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}