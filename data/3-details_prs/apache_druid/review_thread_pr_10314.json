{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNDUwODY0", "number": 10314, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMDo0MToxOVrOE_ZiHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMDo0ODoyN1rOE_ZorQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTE0MDc4OnYy", "diffSide": "RIGHT", "path": "extensions-core/avro-extensions/src/main/java/org/apache/druid/data/input/avro/SchemaRegistryBasedAvroBytesDecoder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMDo0MToxOVrOH9FptA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNlQxMzo1MDoyMVrOIsnNcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgxNzc4MA==", "bodyText": "it seems like this method is deprecated as well, but it doesn't really seem like there is a better replacement since the underlying method is doing this\n    ParsedSchema schema = this.getSchemaById(id);\n    return schema instanceof AvroSchema ? ((AvroSchema)schema).rawSchema() : null;", "url": "https://github.com/apache/druid/pull/10314#discussion_r533817780", "createdAt": "2020-12-02T00:41:19Z", "author": {"login": "clintropolis"}, "path": "extensions-core/avro-extensions/src/main/java/org/apache/druid/data/input/avro/SchemaRegistryBasedAvroBytesDecoder.java", "diffHunk": "@@ -63,7 +73,7 @@ public GenericRecord parse(ByteBuffer bytes)\n       int id = bytes.getInt(); // extract schema registry id\n       int length = bytes.limit() - 1 - 4;\n       int offset = bytes.position() + bytes.arrayOffset();\n-      Schema schema = registry.getByID(id);\n+      Schema schema = registry.getById(id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad7c7b0d18c47fd7599bf3da3fd9335c4c593c8b"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MzY1MDY3Mw==", "bodyText": "Updated to use getSchemaById, which is anyway overridden by the CachedSchemaRegistryClient implementation that is being used here.\nEDIT: actually just used that piece of code, it makes more sense I think, in case getById() gets changed in the future", "url": "https://github.com/apache/druid/pull/10314#discussion_r583650673", "createdAt": "2021-02-26T13:50:21Z", "author": {"login": "spinatelli"}, "path": "extensions-core/avro-extensions/src/main/java/org/apache/druid/data/input/avro/SchemaRegistryBasedAvroBytesDecoder.java", "diffHunk": "@@ -63,7 +73,7 @@ public GenericRecord parse(ByteBuffer bytes)\n       int id = bytes.getInt(); // extract schema registry id\n       int length = bytes.limit() - 1 - 4;\n       int offset = bytes.position() + bytes.arrayOffset();\n-      Schema schema = registry.getByID(id);\n+      Schema schema = registry.getById(id);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgxNzc4MA=="}, "originalCommit": {"oid": "ad7c7b0d18c47fd7599bf3da3fd9335c4c593c8b"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTE0ODE2OnYy", "diffSide": "RIGHT", "path": "licenses.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMDo0NDoyOVrOH9Ft3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yNlQxMzo0OTo1NVrOIsnMQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgxODg0Ng==", "bodyText": "nit: did this get tagged with an incorrect module or was it just missing from the file? (it doesn't seem like there were any changes to that extension)", "url": "https://github.com/apache/druid/pull/10314#discussion_r533818846", "createdAt": "2020-12-02T00:44:29Z", "author": {"login": "clintropolis"}, "path": "licenses.yaml", "diffHunk": "@@ -3081,13 +3081,105 @@ notices:\n ---\n \n name: Kafka Schema Registry Client\n-version: 3.0.1\n+version: 5.5.1\n license_category: binary\n module: extensions/druid-avro-extensions\n license_name: Apache License version 2.0\n libraries:\n   - io.confluent: kafka-schema-registry-client\n+  - io.confluent: common-config\n+  - io.confluent: common-utils\n+\n+---\n+\n+name: com.101tec zkclient\n+license_category: binary\n+version: '0.10'\n+module: druid-ranger-security", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad7c7b0d18c47fd7599bf3da3fd9335c4c593c8b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MzY1MDM3MA==", "bodyText": "Removed it, it was a duplicate", "url": "https://github.com/apache/druid/pull/10314#discussion_r583650370", "createdAt": "2021-02-26T13:49:55Z", "author": {"login": "spinatelli"}, "path": "licenses.yaml", "diffHunk": "@@ -3081,13 +3081,105 @@ notices:\n ---\n \n name: Kafka Schema Registry Client\n-version: 3.0.1\n+version: 5.5.1\n license_category: binary\n module: extensions/druid-avro-extensions\n license_name: Apache License version 2.0\n libraries:\n   - io.confluent: kafka-schema-registry-client\n+  - io.confluent: common-config\n+  - io.confluent: common-utils\n+\n+---\n+\n+name: com.101tec zkclient\n+license_category: binary\n+version: '0.10'\n+module: druid-ranger-security", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgxODg0Ng=="}, "originalCommit": {"oid": "ad7c7b0d18c47fd7599bf3da3fd9335c4c593c8b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTE1NzU3OnYy", "diffSide": "RIGHT", "path": "docs/ingestion/data-formats.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMDo0ODoyN1rOH9FzSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwODo1NDoxOVrOH9QZ9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgyMDIzNQ==", "bodyText": "The basic auth example I don't think works anymore, looking at the code underneath it looks like the schema.registry prefix is only for the ssl config\n    if (configs != null && !configs.isEmpty()) {\n      restService.configure(configs);\n      Map<String, Object> sslConfigs = (Map)configs.entrySet().stream().filter((e) -> {\n        return ((String)e.getKey()).startsWith(\"schema.registry.\");\n      }).collect(Collectors.toMap((e) -> {\n        return ((String)e.getKey()).substring(\"schema.registry.\".length());\n      }, Entry::getValue));\n      SslFactory sslFactory = new SslFactory(sslConfigs);\n      if (sslFactory != null && sslFactory.sslContext() != null) {\n        restService.setSslSocketFactory(sslFactory.sslContext().getSocketFactory());\n      }\n    }\n\nwhere restService is not considering the prefix:\n    String basicCredentialsSource = (String)configs.get(\"basic.auth.credentials.source\");\n    String bearerCredentialsSource = (String)configs.get(\"bearer.auth.credentials.source\");\n...\n\nAfter reading through https://docs.confluent.io/platform/current/schema-registry/security/index.html#additional-configurations-for-https, should we also include the SSL config since it seems relevant if connecting to https?\nAlso, formatting seems a bit off here compared to the other JSON example:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               \"type\"   : \"schema_registry\",\n          \n          \n            \n               \"urls\"   : [<schema-registry-url-1>, <schema-registry-url-2>, ...],\n          \n          \n            \n               \"config\" : {\n          \n          \n            \n                           \"schema.registry.basic.auth.credentials.source\" : \"USER_INFO\",\n          \n          \n            \n                           \"schema.registry.basic.auth.user.info\"          : \"fred:letmein\",\n          \n          \n            \n                           ... \n          \n          \n            \n                          },\n          \n          \n            \n               \"headers\": {\n          \n          \n            \n                           \"traceID\"   : \"b29c5de2-0db4-490b-b421\",\n          \n          \n            \n                           \"timeStamp\" : \"1577191871865\",\n          \n          \n            \n                           ...\n          \n          \n            \n                           \n          \n          \n            \n                         }\n          \n          \n            \n               \"type\" : \"schema_registry\",\n          \n          \n            \n               \"urls\" : [<schema-registry-url-1>, <schema-registry-url-2>, ...],\n          \n          \n            \n               \"config\" : {\n          \n          \n            \n                    \"basic.auth.credentials.source\": \"USER_INFO\",\n          \n          \n            \n                    \"basic.auth.user.info\": \"fred:letmein\",\n          \n          \n            \n                    \"schema.registry.ssl.truststore.location\": \"/some/secrets/kafka.client.truststore.jks\",\n          \n          \n            \n                    \"schema.registry.ssl.truststore.password\": \"<password>\",\n          \n          \n            \n                    \"schema.registry.ssl.keystore.location\": \"/some/secrets/kafka.client.keystore.jks\",\n          \n          \n            \n                    \"schema.registry.ssl.keystore.password\": \"<password>\",\n          \n          \n            \n                    \"schema.registry.ssl.key.password\": \"<password>\"\n          \n          \n            \n                   ... \n          \n          \n            \n               },\n          \n          \n            \n               \"headers\": {\n          \n          \n            \n                   \"traceID\" : \"b29c5de2-0db4-490b-b421\",\n          \n          \n            \n                   \"timeStamp\" : \"1577191871865\",\n          \n          \n            \n                   ...\n          \n          \n            \n                }", "url": "https://github.com/apache/druid/pull/10314#discussion_r533820235", "createdAt": "2020-12-02T00:48:27Z", "author": {"login": "clintropolis"}, "path": "docs/ingestion/data-formats.md", "diffHunk": "@@ -1020,6 +1026,27 @@ For details, see the Schema Registry [documentation](http://docs.confluent.io/cu\n ...\n ```\n \n+Multiple Instances:\n+```json\n+...\n+\"avroBytesDecoder\" : {\n+   \"type\"   : \"schema_registry\",\n+   \"urls\"   : [<schema-registry-url-1>, <schema-registry-url-2>, ...],\n+   \"config\" : {\n+               \"schema.registry.basic.auth.credentials.source\" : \"USER_INFO\",\n+               \"schema.registry.basic.auth.user.info\"          : \"fred:letmein\",\n+               ... \n+              },\n+   \"headers\": {\n+               \"traceID\"   : \"b29c5de2-0db4-490b-b421\",\n+               \"timeStamp\" : \"1577191871865\",\n+               ...\n+               \n+             }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad7c7b0d18c47fd7599bf3da3fd9335c4c593c8b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk5Mzk3Mg==", "bodyText": "Also since this config section contains potentially sensitive information, longer term it might make sense to use something like what is suggested in #10309 (though obviously not in this PR)", "url": "https://github.com/apache/druid/pull/10314#discussion_r533993972", "createdAt": "2020-12-02T08:54:19Z", "author": {"login": "clintropolis"}, "path": "docs/ingestion/data-formats.md", "diffHunk": "@@ -1020,6 +1026,27 @@ For details, see the Schema Registry [documentation](http://docs.confluent.io/cu\n ...\n ```\n \n+Multiple Instances:\n+```json\n+...\n+\"avroBytesDecoder\" : {\n+   \"type\"   : \"schema_registry\",\n+   \"urls\"   : [<schema-registry-url-1>, <schema-registry-url-2>, ...],\n+   \"config\" : {\n+               \"schema.registry.basic.auth.credentials.source\" : \"USER_INFO\",\n+               \"schema.registry.basic.auth.user.info\"          : \"fred:letmein\",\n+               ... \n+              },\n+   \"headers\": {\n+               \"traceID\"   : \"b29c5de2-0db4-490b-b421\",\n+               \"timeStamp\" : \"1577191871865\",\n+               ...\n+               \n+             }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgyMDIzNQ=="}, "originalCommit": {"oid": "ad7c7b0d18c47fd7599bf3da3fd9335c4c593c8b"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3113, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}