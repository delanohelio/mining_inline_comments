{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0NjUzNDA5", "number": 9573, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNjoyNToyNVrODu-8vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNTozNzo1N1rODwQt7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTkyNDQ2OnYy", "diffSide": "RIGHT", "path": "extensions-contrib/kafka-emitter/src/main/java/org/apache/druid/emitter/kafka/KafkaEmitter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNjoyNToyNVrOGBJTGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNjoyNToyNVrOGBJTGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg1NDEwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                catch (InterruptedException e) {\n          \n          \n            \n                catch (Throwable e) {", "url": "https://github.com/apache/druid/pull/9573#discussion_r403854106", "createdAt": "2020-04-06T06:25:25Z", "author": {"login": "himanshug"}, "path": "extensions-contrib/kafka-emitter/src/main/java/org/apache/druid/emitter/kafka/KafkaEmitter.java", "diffHunk": "@@ -130,21 +120,21 @@ public void start()\n \n   private void sendMetricToKafka()\n   {\n-    sendToKafka(config.getMetricTopic(), metricQueue);\n+    sendToKafka(config.getMetricTopic(), metricQueue, setProducerCallback(metricLost));\n   }\n \n   private void sendAlertToKafka()\n   {\n-    sendToKafka(config.getAlertTopic(), alertQueue);\n+    sendToKafka(config.getAlertTopic(), alertQueue, setProducerCallback(alertLost));\n   }\n \n-  private void sendToKafka(final String topic, MemoryBoundLinkedBlockingQueue<String> recordQueue)\n+  private void sendToKafka(final String topic, MemoryBoundLinkedBlockingQueue<String> recordQueue, Callback callback)\n   {\n     ObjectContainer<String> objectToSend;\n     try {\n       while (true) {\n         objectToSend = recordQueue.take();\n-        producer.send(new ProducerRecord<>(topic, objectToSend.getData()), producerCallback);\n+        producer.send(new ProducerRecord<>(topic, objectToSend.getData()), callback);\n       }\n     }\n     catch (InterruptedException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047635bd13a858211499c85662452ca6b4d9c4d2"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzc4MTE3OnYy", "diffSide": "RIGHT", "path": "extensions-contrib/kafka-emitter/src/main/java/org/apache/druid/emitter/kafka/KafkaEmitter.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODozMDo1MVrOGC7wbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMTo1MToxNVrOGDuxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyOTM4OQ==", "bodyText": "on any  exception  from the block inside while(true) { ... } would lead to event emission getting stopped. Does it make sense to have a try-catch inside there to ignore exceptions except for InterruptedException so that emitting stops only on thread interrupt which would happen when druid is shutting down.", "url": "https://github.com/apache/druid/pull/9573#discussion_r405729389", "createdAt": "2020-04-08T18:30:51Z", "author": {"login": "himanshug"}, "path": "extensions-contrib/kafka-emitter/src/main/java/org/apache/druid/emitter/kafka/KafkaEmitter.java", "diffHunk": "@@ -130,24 +120,24 @@ public void start()\n \n   private void sendMetricToKafka()\n   {\n-    sendToKafka(config.getMetricTopic(), metricQueue);\n+    sendToKafka(config.getMetricTopic(), metricQueue, setProducerCallback(metricLost));\n   }\n \n   private void sendAlertToKafka()\n   {\n-    sendToKafka(config.getAlertTopic(), alertQueue);\n+    sendToKafka(config.getAlertTopic(), alertQueue, setProducerCallback(alertLost));\n   }\n \n-  private void sendToKafka(final String topic, MemoryBoundLinkedBlockingQueue<String> recordQueue)\n+  private void sendToKafka(final String topic, MemoryBoundLinkedBlockingQueue<String> recordQueue, Callback callback)\n   {\n     ObjectContainer<String> objectToSend;\n     try {\n       while (true) {\n         objectToSend = recordQueue.take();\n-        producer.send(new ProducerRecord<>(topic, objectToSend.getData()), producerCallback);\n+        producer.send(new ProducerRecord<>(topic, objectToSend.getData()), callback);\n       }\n     }\n-    catch (InterruptedException e) {\n+    catch (Throwable e) {\n       log.warn(e, \"Failed to take record from queue!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f493e70581ec5f9230864b9e606496f26968773"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkwMzQwMQ==", "bodyText": "@himanshug, thanks for the review. As the potential exceptions from the producer are handled in the callback, so in my opinion, currently the while(true) { ... } block is already supposed to raised the InterruptedException only.", "url": "https://github.com/apache/druid/pull/9573#discussion_r405903401", "createdAt": "2020-04-09T01:19:20Z", "author": {"login": "yuanlihan"}, "path": "extensions-contrib/kafka-emitter/src/main/java/org/apache/druid/emitter/kafka/KafkaEmitter.java", "diffHunk": "@@ -130,24 +120,24 @@ public void start()\n \n   private void sendMetricToKafka()\n   {\n-    sendToKafka(config.getMetricTopic(), metricQueue);\n+    sendToKafka(config.getMetricTopic(), metricQueue, setProducerCallback(metricLost));\n   }\n \n   private void sendAlertToKafka()\n   {\n-    sendToKafka(config.getAlertTopic(), alertQueue);\n+    sendToKafka(config.getAlertTopic(), alertQueue, setProducerCallback(alertLost));\n   }\n \n-  private void sendToKafka(final String topic, MemoryBoundLinkedBlockingQueue<String> recordQueue)\n+  private void sendToKafka(final String topic, MemoryBoundLinkedBlockingQueue<String> recordQueue, Callback callback)\n   {\n     ObjectContainer<String> objectToSend;\n     try {\n       while (true) {\n         objectToSend = recordQueue.take();\n-        producer.send(new ProducerRecord<>(topic, objectToSend.getData()), producerCallback);\n+        producer.send(new ProducerRecord<>(topic, objectToSend.getData()), callback);\n       }\n     }\n-    catch (InterruptedException e) {\n+    catch (Throwable e) {\n       log.warn(e, \"Failed to take record from queue!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyOTM4OQ=="}, "originalCommit": {"oid": "0f493e70581ec5f9230864b9e606496f26968773"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk2NjY0Mg==", "bodyText": "sounds reasonable, however I would still make slight log messaage change just in case.", "url": "https://github.com/apache/druid/pull/9573#discussion_r405966642", "createdAt": "2020-04-09T05:38:03Z", "author": {"login": "himanshug"}, "path": "extensions-contrib/kafka-emitter/src/main/java/org/apache/druid/emitter/kafka/KafkaEmitter.java", "diffHunk": "@@ -130,24 +120,24 @@ public void start()\n \n   private void sendMetricToKafka()\n   {\n-    sendToKafka(config.getMetricTopic(), metricQueue);\n+    sendToKafka(config.getMetricTopic(), metricQueue, setProducerCallback(metricLost));\n   }\n \n   private void sendAlertToKafka()\n   {\n-    sendToKafka(config.getAlertTopic(), alertQueue);\n+    sendToKafka(config.getAlertTopic(), alertQueue, setProducerCallback(alertLost));\n   }\n \n-  private void sendToKafka(final String topic, MemoryBoundLinkedBlockingQueue<String> recordQueue)\n+  private void sendToKafka(final String topic, MemoryBoundLinkedBlockingQueue<String> recordQueue, Callback callback)\n   {\n     ObjectContainer<String> objectToSend;\n     try {\n       while (true) {\n         objectToSend = recordQueue.take();\n-        producer.send(new ProducerRecord<>(topic, objectToSend.getData()), producerCallback);\n+        producer.send(new ProducerRecord<>(topic, objectToSend.getData()), callback);\n       }\n     }\n-    catch (InterruptedException e) {\n+    catch (Throwable e) {\n       log.warn(e, \"Failed to take record from queue!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyOTM4OQ=="}, "originalCommit": {"oid": "0f493e70581ec5f9230864b9e606496f26968773"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU2NTE3Mg==", "bodyText": "thanks @himanshug, it's more clear now.", "url": "https://github.com/apache/druid/pull/9573#discussion_r406565172", "createdAt": "2020-04-10T01:51:15Z", "author": {"login": "yuanlihan"}, "path": "extensions-contrib/kafka-emitter/src/main/java/org/apache/druid/emitter/kafka/KafkaEmitter.java", "diffHunk": "@@ -130,24 +120,24 @@ public void start()\n \n   private void sendMetricToKafka()\n   {\n-    sendToKafka(config.getMetricTopic(), metricQueue);\n+    sendToKafka(config.getMetricTopic(), metricQueue, setProducerCallback(metricLost));\n   }\n \n   private void sendAlertToKafka()\n   {\n-    sendToKafka(config.getAlertTopic(), alertQueue);\n+    sendToKafka(config.getAlertTopic(), alertQueue, setProducerCallback(alertLost));\n   }\n \n-  private void sendToKafka(final String topic, MemoryBoundLinkedBlockingQueue<String> recordQueue)\n+  private void sendToKafka(final String topic, MemoryBoundLinkedBlockingQueue<String> recordQueue, Callback callback)\n   {\n     ObjectContainer<String> objectToSend;\n     try {\n       while (true) {\n         objectToSend = recordQueue.take();\n-        producer.send(new ProducerRecord<>(topic, objectToSend.getData()), producerCallback);\n+        producer.send(new ProducerRecord<>(topic, objectToSend.getData()), callback);\n       }\n     }\n-    catch (InterruptedException e) {\n+    catch (Throwable e) {\n       log.warn(e, \"Failed to take record from queue!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyOTM4OQ=="}, "originalCommit": {"oid": "0f493e70581ec5f9230864b9e606496f26968773"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTMyMTQwOnYy", "diffSide": "RIGHT", "path": "extensions-contrib/kafka-emitter/src/main/java/org/apache/druid/emitter/kafka/KafkaEmitter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNTozNzo1N1rOGDKPHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNTozNzo1N1rOGDKPHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk2NjYyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  log.warn(e, \"Failed to take record from queue!\");\n          \n          \n            \n                  log.warn(e, \"Exception while getting record from queue or producer send, Events would not be emitted anymore.\");", "url": "https://github.com/apache/druid/pull/9573#discussion_r405966622", "createdAt": "2020-04-09T05:37:57Z", "author": {"login": "himanshug"}, "path": "extensions-contrib/kafka-emitter/src/main/java/org/apache/druid/emitter/kafka/KafkaEmitter.java", "diffHunk": "@@ -130,24 +120,24 @@ public void start()\n \n   private void sendMetricToKafka()\n   {\n-    sendToKafka(config.getMetricTopic(), metricQueue);\n+    sendToKafka(config.getMetricTopic(), metricQueue, setProducerCallback(metricLost));\n   }\n \n   private void sendAlertToKafka()\n   {\n-    sendToKafka(config.getAlertTopic(), alertQueue);\n+    sendToKafka(config.getAlertTopic(), alertQueue, setProducerCallback(alertLost));\n   }\n \n-  private void sendToKafka(final String topic, MemoryBoundLinkedBlockingQueue<String> recordQueue)\n+  private void sendToKafka(final String topic, MemoryBoundLinkedBlockingQueue<String> recordQueue, Callback callback)\n   {\n     ObjectContainer<String> objectToSend;\n     try {\n       while (true) {\n         objectToSend = recordQueue.take();\n-        producer.send(new ProducerRecord<>(topic, objectToSend.getData()), producerCallback);\n+        producer.send(new ProducerRecord<>(topic, objectToSend.getData()), callback);\n       }\n     }\n-    catch (InterruptedException e) {\n+    catch (Throwable e) {\n       log.warn(e, \"Failed to take record from queue!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f493e70581ec5f9230864b9e606496f26968773"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2683, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}