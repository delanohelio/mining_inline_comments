{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwODYyNDY1", "number": 10089, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDowMzoyM1rOEJz43Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDowMzoyM1rOEJz43Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzIyNzgxOnYy", "diffSide": "RIGHT", "path": "indexing-service/src/main/java/org/apache/druid/indexing/common/task/batch/parallel/PartialDimensionDistributionTask.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDowMzoyM1rOGqgMcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMToxNjowNlrOGqig0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIyMDg1MA==", "bodyText": "I haven't fully looked into the logic of determineDistribution, but a warning: this isn't the right way to get the list of dimension names that will end up in the finished product, since it won't work properly in schemaless dimensions mode. So determineDistribution may need to accept the DimensionsSpec itself and do the same logic that the index generator code itself would do.\nWatch out for the queryGranularity as well, which is part of the rollup key. It looks like determineDistribution isn't currently inspecting it (it comes from granularitySpec.getQueryGranularity()).", "url": "https://github.com/apache/druid/pull/10089#discussion_r447220850", "createdAt": "2020-06-29T20:03:23Z", "author": {"login": "gianm"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/common/task/batch/parallel/PartialDimensionDistributionTask.java", "diffHunk": "@@ -223,17 +224,19 @@ public TaskStatus runTask(TaskToolbox toolbox) throws Exception\n \n     try (\n         CloseableIterator<InputRow> inputRowIterator = inputSourceReader.read();\n-        HandlingInputRowIterator iterator = new RangePartitionIndexTaskInputRowIteratorBuilder(partitionDimension, SKIP_NULL)\n-            .delegate(inputRowIterator)\n-            .granularitySpec(granularitySpec)\n-            .nullRowRunnable(IndexTaskInputRowIteratorBuilder.NOOP_RUNNABLE)\n-            .absentBucketIntervalConsumer(IndexTaskInputRowIteratorBuilder.NOOP_CONSUMER)\n-            .build()\n+        HandlingInputRowIterator iterator =\n+            new RangePartitionIndexTaskInputRowIteratorBuilder(partitionDimension, SKIP_NULL)\n+                .delegate(inputRowIterator)\n+                .granularitySpec(granularitySpec)\n+                .nullRowRunnable(IndexTaskInputRowIteratorBuilder.NOOP_RUNNABLE)\n+                .absentBucketIntervalConsumer(IndexTaskInputRowIteratorBuilder.NOOP_CONSUMER)\n+                .build()\n     ) {\n       Map<Interval, StringDistribution> distribution = determineDistribution(\n           iterator,\n           granularitySpec,\n           partitionDimension,\n+          dataSchema.getDimensionsSpec().getDimensionNames(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d437ffddfca9d536ea0798bb9859ce674941a93b"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzNDE2MA==", "bodyText": "Maybe use Rows.toGroupKey?", "url": "https://github.com/apache/druid/pull/10089#discussion_r447234160", "createdAt": "2020-06-29T20:28:40Z", "author": {"login": "gianm"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/common/task/batch/parallel/PartialDimensionDistributionTask.java", "diffHunk": "@@ -223,17 +224,19 @@ public TaskStatus runTask(TaskToolbox toolbox) throws Exception\n \n     try (\n         CloseableIterator<InputRow> inputRowIterator = inputSourceReader.read();\n-        HandlingInputRowIterator iterator = new RangePartitionIndexTaskInputRowIteratorBuilder(partitionDimension, SKIP_NULL)\n-            .delegate(inputRowIterator)\n-            .granularitySpec(granularitySpec)\n-            .nullRowRunnable(IndexTaskInputRowIteratorBuilder.NOOP_RUNNABLE)\n-            .absentBucketIntervalConsumer(IndexTaskInputRowIteratorBuilder.NOOP_CONSUMER)\n-            .build()\n+        HandlingInputRowIterator iterator =\n+            new RangePartitionIndexTaskInputRowIteratorBuilder(partitionDimension, SKIP_NULL)\n+                .delegate(inputRowIterator)\n+                .granularitySpec(granularitySpec)\n+                .nullRowRunnable(IndexTaskInputRowIteratorBuilder.NOOP_RUNNABLE)\n+                .absentBucketIntervalConsumer(IndexTaskInputRowIteratorBuilder.NOOP_CONSUMER)\n+                .build()\n     ) {\n       Map<Interval, StringDistribution> distribution = determineDistribution(\n           iterator,\n           granularitySpec,\n           partitionDimension,\n+          dataSchema.getDimensionsSpec().getDimensionNames(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIyMDg1MA=="}, "originalCommit": {"oid": "d437ffddfca9d536ea0798bb9859ce674941a93b"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI1ODgzNA==", "bodyText": "Changed to use Rows.toGroupKey(). The code was already using queryGranualrity as part of the rollup key.", "url": "https://github.com/apache/druid/pull/10089#discussion_r447258834", "createdAt": "2020-06-29T21:16:06Z", "author": {"login": "ccaominh"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/common/task/batch/parallel/PartialDimensionDistributionTask.java", "diffHunk": "@@ -223,17 +224,19 @@ public TaskStatus runTask(TaskToolbox toolbox) throws Exception\n \n     try (\n         CloseableIterator<InputRow> inputRowIterator = inputSourceReader.read();\n-        HandlingInputRowIterator iterator = new RangePartitionIndexTaskInputRowIteratorBuilder(partitionDimension, SKIP_NULL)\n-            .delegate(inputRowIterator)\n-            .granularitySpec(granularitySpec)\n-            .nullRowRunnable(IndexTaskInputRowIteratorBuilder.NOOP_RUNNABLE)\n-            .absentBucketIntervalConsumer(IndexTaskInputRowIteratorBuilder.NOOP_CONSUMER)\n-            .build()\n+        HandlingInputRowIterator iterator =\n+            new RangePartitionIndexTaskInputRowIteratorBuilder(partitionDimension, SKIP_NULL)\n+                .delegate(inputRowIterator)\n+                .granularitySpec(granularitySpec)\n+                .nullRowRunnable(IndexTaskInputRowIteratorBuilder.NOOP_RUNNABLE)\n+                .absentBucketIntervalConsumer(IndexTaskInputRowIteratorBuilder.NOOP_CONSUMER)\n+                .build()\n     ) {\n       Map<Interval, StringDistribution> distribution = determineDistribution(\n           iterator,\n           granularitySpec,\n           partitionDimension,\n+          dataSchema.getDimensionsSpec().getDimensionNames(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIyMDg1MA=="}, "originalCommit": {"oid": "d437ffddfca9d536ea0798bb9859ce674941a93b"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2377, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}