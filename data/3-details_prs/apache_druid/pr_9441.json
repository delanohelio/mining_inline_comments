{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNzU0NDcy", "number": 9441, "title": "Improve OvershadowableManager performance", "bodyText": "Fixes #9383.\nDescription\nTwo key changes:\n\nUsing the Iterator instead of higherKey() or higherEntry().\nUsing the Iterator API instead of Stream.\n\nHere are the benchmark results.\nmaster\n\n\n\nBenchmark\nnumInitialRootGenSegmentsPerInterval\nnumNonRootGenerations\nsegmentGranularity\nuseSegmentLock\nScore\nScore Error (99.9%)\nUnit\n\n\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchAdd\n100\n1\nMONTH\nFALSE\n74.593736\n0.157821\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchAdd\n100\n1\nMONTH\nTRUE\n61.296126\n0.289691\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchAdd\n100\n1\nDAY\nFALSE\n4.027792\n0.050178\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchAdd\n100\n1\nDAY\nTRUE\n2.214782\n0.009032\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchAdd\n100\n2\nMONTH\nFALSE\n69.753337\n0.118109\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchAdd\n100\n2\nMONTH\nTRUE\n62.510767\n0.249751\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchAdd\n100\n2\nDAY\nFALSE\n3.355433\n0.013972\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchAdd\n100\n2\nDAY\nTRUE\n2.141556\n0.00617\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchFindFullyOvershadowed\n100\n1\nMONTH\nFALSE\n3911.931702\n14.962425\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchFindFullyOvershadowed\n100\n1\nMONTH\nTRUE\n187.36298\n0.75218\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchFindFullyOvershadowed\n100\n1\nDAY\nFALSE\n94.90354\n0.287476\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchFindFullyOvershadowed\n100\n1\nDAY\nTRUE\n5.258894\n0.020194\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchFindFullyOvershadowed\n100\n2\nMONTH\nFALSE\n2366.365056\n2.69362\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchFindFullyOvershadowed\n100\n2\nMONTH\nTRUE\n599.976444\n1.165907\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchFindFullyOvershadowed\n100\n2\nDAY\nFALSE\n59.840876\n0.178956\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchFindFullyOvershadowed\n100\n2\nDAY\nTRUE\n15.444807\n0.038935\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchIsOvershadowed\n100\n1\nMONTH\nFALSE\n320817.4244\n934.954223\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchIsOvershadowed\n100\n1\nMONTH\nTRUE\n476919.8161\n1121.243296\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchIsOvershadowed\n100\n1\nDAY\nFALSE\n263759.8788\n3747.8076\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchIsOvershadowed\n100\n1\nDAY\nTRUE\n326754.8762\n7650.798385\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchIsOvershadowed\n100\n2\nMONTH\nFALSE\n449372.3674\n1293.973306\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchIsOvershadowed\n100\n2\nMONTH\nTRUE\n577509.4054\n1953.6536\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchIsOvershadowed\n100\n2\nDAY\nFALSE\n281385.7145\n11966.14959\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchIsOvershadowed\n100\n2\nDAY\nTRUE\n389066.6441\n6112.571051\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchLookup\n100\n1\nMONTH\nFALSE\n113573.3886\n179.29859\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchLookup\n100\n1\nMONTH\nTRUE\n51644.26753\n159.035054\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchLookup\n100\n1\nDAY\nFALSE\n71691.90114\n3125.221368\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchLookup\n100\n1\nDAY\nTRUE\n23271.51767\n902.091057\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchLookup\n100\n2\nMONTH\nFALSE\n111247.1351\n174.299341\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchLookup\n100\n2\nMONTH\nTRUE\n36208.02057\n48.240014\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchLookup\n100\n2\nDAY\nFALSE\n73012.95922\n482.553345\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchLookup\n100\n2\nDAY\nTRUE\n15486.10912\n976.58672\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchRemove\n100\n1\nMONTH\nFALSE\n91.150018\n0.442367\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchRemove\n100\n1\nMONTH\nTRUE\n23.28416\n0.177942\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchRemove\n100\n1\nDAY\nFALSE\n2.865762\n0.0207\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchRemove\n100\n1\nDAY\nTRUE\n0.722529\n0.007548\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchRemove\n100\n2\nMONTH\nFALSE\n99.904202\n0.830639\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchRemove\n100\n2\nMONTH\nTRUE\n1.562742\n0.089012\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchRemove\n100\n2\nDAY\nFALSE\n2.142417\n0.017723\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchRemove\n100\n2\nDAY\nTRUE\n0.047155\n0.001535\nops/s\n\n\n\nAfter PR\n\n\n\nBenchmark\nParam: numInitialRootGenSegmentsPerInterval\nParam: numNonRootGenerations\nParam: segmentGranularity\nParam: useSegmentLock\nScore\nScore Error (99.9%)\nUnit\n\n\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchAdd\n100\n1\nMONTH\nFALSE\n423.598695\n3.520175\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchAdd\n100\n1\nMONTH\nTRUE\n165.432408\n1.179293\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchAdd\n100\n1\nDAY\nFALSE\n15.926139\n0.051969\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchAdd\n100\n1\nDAY\nTRUE\n4.787306\n0.011304\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchAdd\n100\n2\nMONTH\nFALSE\n296.005812\n2.672103\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchAdd\n100\n2\nMONTH\nTRUE\n150.081513\n0.39904\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchAdd\n100\n2\nDAY\nFALSE\n12.446414\n0.085265\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchAdd\n100\n2\nDAY\nTRUE\n4.223133\n0.007413\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchFindFullyOvershadowed\n100\n1\nMONTH\nFALSE\n4348.161344\n3.31101\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchFindFullyOvershadowed\n100\n1\nMONTH\nTRUE\n946.35651\n4.968384\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchFindFullyOvershadowed\n100\n1\nDAY\nFALSE\n103.790997\n0.711689\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchFindFullyOvershadowed\n100\n1\nDAY\nTRUE\n25.720033\n0.147587\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchFindFullyOvershadowed\n100\n2\nMONTH\nFALSE\n2638.004319\n2.163262\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchFindFullyOvershadowed\n100\n2\nMONTH\nTRUE\n659.062763\n2.468865\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchFindFullyOvershadowed\n100\n2\nDAY\nFALSE\n63.55069\n0.170092\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchFindFullyOvershadowed\n100\n2\nDAY\nTRUE\n19.008214\n0.135881\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchIsOvershadowed\n100\n1\nMONTH\nFALSE\n705123.9855\n3619.138328\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchIsOvershadowed\n100\n1\nMONTH\nTRUE\n806885.8445\n1038.68212\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchIsOvershadowed\n100\n1\nDAY\nFALSE\n409478.6873\n21179.31478\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchIsOvershadowed\n100\n1\nDAY\nTRUE\n486011.2014\n22202.02013\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchIsOvershadowed\n100\n2\nMONTH\nFALSE\n890916.9849\n1583.87703\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchIsOvershadowed\n100\n2\nMONTH\nTRUE\n1028235.656\n4183.111624\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchIsOvershadowed\n100\n2\nDAY\nFALSE\n460951.8017\n17596.90437\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchIsOvershadowed\n100\n2\nDAY\nTRUE\n540136.4034\n21796.82371\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchLookup\n100\n1\nMONTH\nFALSE\n135469.5003\n367.690318\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchLookup\n100\n1\nMONTH\nTRUE\n57444.90682\n109.662664\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchLookup\n100\n1\nDAY\nFALSE\n67781.1601\n1669.652261\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchLookup\n100\n1\nDAY\nTRUE\n19968.74589\n1366.281118\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchLookup\n100\n2\nMONTH\nFALSE\n132912.5099\n182.816225\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchLookup\n100\n2\nMONTH\nTRUE\n34443.96685\n127.638394\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchLookup\n100\n2\nDAY\nFALSE\n66278.64465\n2923.865498\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchLookup\n100\n2\nDAY\nTRUE\n15643.27084\n449.80444\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchRemove\n100\n1\nMONTH\nFALSE\n479.409132\n9.566923\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchRemove\n100\n1\nMONTH\nTRUE\n118.908165\n0.309454\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchRemove\n100\n1\nDAY\nFALSE\n5.717129\n0.034974\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchRemove\n100\n1\nDAY\nTRUE\n2.408836\n0.029314\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchRemove\n100\n2\nMONTH\nFALSE\n345.903707\n1.457845\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchRemove\n100\n2\nMONTH\nTRUE\n107.075497\n0.771716\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchRemove\n100\n2\nDAY\nFALSE\n3.769484\n0.057692\nops/s\n\n\norg.apache.druid.timeline.VersionedIntervalTimelineBenchmark.benchRemove\n100\n2\nDAY\nTRUE\n1.986003\n0.008282\nops/s\n\n\n\n\nThis PR has:\n\n been self-reviewed.\n\n using the concurrency checklist (Remove this item if the PR doesn't have any relation to concurrency.)\n\n\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths.\n added integration tests.\n been tested in a test Druid cluster.\n\n\nKey changed/added classes in this PR\n\nOvershadowableManager", "createdAt": "2020-02-29T05:21:17Z", "url": "https://github.com/apache/druid/pull/9441", "merged": true, "mergeCommit": {"oid": "7401bb3f9315bf0622b6e0fe7c7fd855d1c65052"}, "closed": true, "closedAt": "2020-03-10T20:22:19Z", "author": {"login": "jihoonson"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcI9OV2gH2gAyMzgxNzU0NDcyOjI2ZWRiZmYxYTMzMTk1NmZmMDg3OTI0ODEwNTY4YjMyYjQ2ZWFhMjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMXEuWgFqTM3MjIyODUzNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "26edbff1a331956ff087924810568b32b46eaa27", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/26edbff1a331956ff087924810568b32b46eaa27", "committedDate": "2020-02-29T04:57:21Z", "message": "Use the iterator instead of higherKey(); use the iterator API instead of stream"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MjE2Njk3", "url": "https://github.com/apache/druid/pull/9441#pullrequestreview-368216697", "createdAt": "2020-03-03T18:24:02Z", "commit": {"oid": "26edbff1a331956ff087924810568b32b46eaa27"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODoyNDowMlrOFxRTRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTozMzo0NFrOFxTo1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIwODAwNw==", "bodyText": "missing unit tests for this function?", "url": "https://github.com/apache/druid/pull/9441#discussion_r387208007", "createdAt": "2020-03-03T18:24:02Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/timeline/VersionedIntervalTimeline.java", "diffHunk": "@@ -161,11 +162,11 @@ public int getNumObjects()\n    */\n   public Set<ObjectType> findNonOvershadowedObjectsInInterval(Interval interval, Partitions completeness)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26edbff1a331956ff087924810568b32b46eaa27"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0NjI5Mw==", "bodyText": "Are we guaranteed that chunk.getObject will never be null?", "url": "https://github.com/apache/druid/pull/9441#discussion_r387246293", "createdAt": "2020-03-03T19:33:44Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/timeline/VersionedIntervalTimeline.java", "diffHunk": "@@ -482,7 +483,12 @@ public boolean isOvershadowed(Interval interval, VersionType version, ObjectType\n         if (versionCompare > 0) {\n           return false;\n         } else if (versionCompare == 0) {\n-          if (timelineEntry.partitionHolder.stream().noneMatch(chunk -> chunk.getObject().overshadows(object))) {\n+          // Intentionally use the Iterators API instead of the stream API for performance.\n+          //noinspection ConstantConditions\n+          final boolean nonOvershadowedObject = Iterators.all(\n+              timelineEntry.partitionHolder.iterator(), chunk -> !chunk.getObject().overshadows(object)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26edbff1a331956ff087924810568b32b46eaa27"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5504debc61a685b6aaa546bf41a0566da25ecbf8", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/5504debc61a685b6aaa546bf41a0566da25ecbf8", "committedDate": "2020-03-04T02:31:56Z", "message": "Fix tests; fix a concurrency bug in timeline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e18dea1adf770b829d56113a5ddc785255bfceab", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/e18dea1adf770b829d56113a5ddc785255bfceab", "committedDate": "2020-03-09T17:15:55Z", "message": "fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42fd983d88c4d99f78074b86abcd3ab2873dfe3d", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/42fd983d88c4d99f78074b86abcd3ab2873dfe3d", "committedDate": "2020-03-09T17:33:36Z", "message": "add tests for findNonOvershadowedObjectsInInterval"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "114bf34c62cac009270a81c1ddd580c65172fa93", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/114bf34c62cac009270a81c1ddd580c65172fa93", "committedDate": "2020-03-09T17:44:03Z", "message": "fix test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNTA3OTM5", "url": "https://github.com/apache/druid/pull/9441#pullrequestreview-371507939", "createdAt": "2020-03-09T20:32:52Z", "commit": {"oid": "114bf34c62cac009270a81c1ddd580c65172fa93"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDozMjo1MlrOFz4WKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDozOTowNFrOFz4iTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk0NDg3NA==", "bodyText": "should this override public OvershadowableManager<T> clone() instead?", "url": "https://github.com/apache/druid/pull/9441#discussion_r389944874", "createdAt": "2020-03-09T20:32:52Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/timeline/partition/OvershadowableManager.java", "diffHunk": "@@ -105,12 +105,46 @@\n     this.overshadowedGroups = new TreeMap<>();\n   }\n \n-  OvershadowableManager(OvershadowableManager<T> other)\n+  public OvershadowableManager<T> copyVisible()\n   {\n-    this.knownPartitionChunks = new HashMap<>(other.knownPartitionChunks);\n-    this.standbyGroups = new TreeMap<>(other.standbyGroups);\n-    this.visibleGroupPerRange = new TreeMap<>(other.visibleGroupPerRange);\n-    this.overshadowedGroups = new TreeMap<>(other.overshadowedGroups);\n+    final OvershadowableManager<T> copy = new OvershadowableManager<>();\n+    visibleGroupPerRange.forEach((partitionRange, versionToGroups) -> {\n+      // There should be only one group per partition range\n+      final AtomicUpdateGroup<T> group = versionToGroups.values().iterator().next();\n+      group.getChunks().forEach(chunk -> copy.knownPartitionChunks.put(chunk.getChunkNumber(), chunk));\n+\n+      copy.visibleGroupPerRange.put(\n+          partitionRange,\n+          new SingleEntryShort2ObjectSortedMap<>(group.getMinorVersion(), AtomicUpdateGroup.copy(group))\n+      );\n+    });\n+    return copy;\n+  }\n+\n+  public OvershadowableManager<T> deepCopy()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114bf34c62cac009270a81c1ddd580c65172fa93"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk0NTQ3Mw==", "bodyText": "missing tests to verify that the returned copy is a deepCopy() - what if new fields are added to the overshadowable manager? Similar comments for copyVisible()", "url": "https://github.com/apache/druid/pull/9441#discussion_r389945473", "createdAt": "2020-03-09T20:34:03Z", "author": {"login": "suneet-s"}, "path": "core/src/main/java/org/apache/druid/timeline/partition/OvershadowableManager.java", "diffHunk": "@@ -105,12 +105,46 @@\n     this.overshadowedGroups = new TreeMap<>();\n   }\n \n-  OvershadowableManager(OvershadowableManager<T> other)\n+  public OvershadowableManager<T> copyVisible()\n   {\n-    this.knownPartitionChunks = new HashMap<>(other.knownPartitionChunks);\n-    this.standbyGroups = new TreeMap<>(other.standbyGroups);\n-    this.visibleGroupPerRange = new TreeMap<>(other.visibleGroupPerRange);\n-    this.overshadowedGroups = new TreeMap<>(other.overshadowedGroups);\n+    final OvershadowableManager<T> copy = new OvershadowableManager<>();\n+    visibleGroupPerRange.forEach((partitionRange, versionToGroups) -> {\n+      // There should be only one group per partition range\n+      final AtomicUpdateGroup<T> group = versionToGroups.values().iterator().next();\n+      group.getChunks().forEach(chunk -> copy.knownPartitionChunks.put(chunk.getChunkNumber(), chunk));\n+\n+      copy.visibleGroupPerRange.put(\n+          partitionRange,\n+          new SingleEntryShort2ObjectSortedMap<>(group.getMinorVersion(), AtomicUpdateGroup.copy(group))\n+      );\n+    });\n+    return copy;\n+  }\n+\n+  public OvershadowableManager<T> deepCopy()\n+  {\n+    final OvershadowableManager<T> copy = copyVisible();\n+    overshadowedGroups.forEach((partitionRange, versionToGroups) -> {\n+      // There should be only one group per partition range\n+      final AtomicUpdateGroup<T> group = versionToGroups.values().iterator().next();\n+      group.getChunks().forEach(chunk -> copy.knownPartitionChunks.put(chunk.getChunkNumber(), chunk));\n+\n+      copy.overshadowedGroups.put(\n+          partitionRange,\n+          new SingleEntryShort2ObjectSortedMap<>(group.getMinorVersion(), AtomicUpdateGroup.copy(group))\n+      );\n+    });\n+    standbyGroups.forEach((partitionRange, versionToGroups) -> {\n+      // There should be only one group per partition range\n+      final AtomicUpdateGroup<T> group = versionToGroups.values().iterator().next();\n+      group.getChunks().forEach(chunk -> copy.knownPartitionChunks.put(chunk.getChunkNumber(), chunk));\n+\n+      copy.standbyGroups.put(\n+          partitionRange,\n+          new SingleEntryShort2ObjectSortedMap<>(group.getMinorVersion(), AtomicUpdateGroup.copy(group))\n+      );\n+    });\n+    return copy;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114bf34c62cac009270a81c1ddd580c65172fa93"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk0Nzk4MA==", "bodyText": "Does the order of the segments matter?\nWhy not just calculate the min start and max end with O(n) implementation by looping over segments", "url": "https://github.com/apache/druid/pull/9441#discussion_r389947980", "createdAt": "2020-03-09T20:39:04Z", "author": {"login": "suneet-s"}, "path": "server/src/main/java/org/apache/druid/server/coordinator/duty/NewestSegmentFirstIterator.java", "diffHunk": "@@ -509,12 +509,13 @@ private SegmentsToCompact findSegmentsToCompact(\n     private QueueEntry(List<DataSegment> segments)\n     {\n       Preconditions.checkArgument(segments != null && !segments.isEmpty());\n-      Collections.sort(segments);\n+      final List<DataSegment> segmentsToSort = new ArrayList<>(segments);\n+      Collections.sort(segmentsToSort);\n       this.interval = new Interval(\n-          segments.get(0).getInterval().getStart(),\n-          segments.get(segments.size() - 1).getInterval().getEnd()\n+          segmentsToSort.get(0).getInterval().getStart(),\n+          segmentsToSort.get(segmentsToSort.size() - 1).getInterval().getEnd()\n       );\n-      this.segments = segments;\n+      this.segments = segmentsToSort;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114bf34c62cac009270a81c1ddd580c65172fa93"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b49262fa6df2b22d97c6605fb9bdcb3e58a0e8c0", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/b49262fa6df2b22d97c6605fb9bdcb3e58a0e8c0", "committedDate": "2020-03-09T22:02:00Z", "message": "add missing tests; fix a bug in QueueEntry"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNTg3NTY1", "url": "https://github.com/apache/druid/pull/9441#pullrequestreview-371587565", "createdAt": "2020-03-09T23:12:47Z", "commit": {"oid": "b49262fa6df2b22d97c6605fb9bdcb3e58a0e8c0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMzoxMjo0N1rOFz8Y-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMzoxMjo0N1rOFz8Y-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAxMTEyOA==", "bodyText": "Thanks for the tests! One last ask, since this depends on equals to be implemented correctly, I think we need another test for equals\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            \n          \n          \n            \n              @Test\n          \n          \n            \n              public void testEqualAndHashCodeContract()\n          \n          \n            \n              {\n          \n          \n            \n                EqualsVerifier.forClass(OvershadowableManager.class).usingGetClass().verify();\n          \n          \n            \n              }", "url": "https://github.com/apache/druid/pull/9441#discussion_r390011128", "createdAt": "2020-03-09T23:12:47Z", "author": {"login": "suneet-s"}, "path": "core/src/test/java/org/apache/druid/timeline/partition/OvershadowableManagerTest.java", "diffHunk": "@@ -63,6 +64,57 @@ public void setup()\n     expectedStandbyChunks = new ArrayList<>();\n   }\n \n+  @Test\n+  public void testCopyVisible()\n+  {\n+    // chunks of partition id 0 and 1\n+    manager.addChunk(newRootChunk());\n+    manager.addChunk(newRootChunk());\n+\n+    // chunks to overshadow the partition id range [0, 2)\n+    manager.addChunk(newNonRootChunk(0, 2, 1, 3));\n+    manager.addChunk(newNonRootChunk(0, 2, 1, 3));\n+    manager.addChunk(newNonRootChunk(0, 2, 1, 3));\n+\n+    // chunks of partition id 3 and 4\n+    manager.addChunk(newRootChunk());\n+    manager.addChunk(newRootChunk());\n+\n+    // standby chunk\n+    manager.addChunk(newNonRootChunk(2, 4, 1, 3));\n+\n+    OvershadowableManager<OvershadowableInteger> copy = OvershadowableManager.copyVisible(manager);\n+    Assert.assertTrue(copy.getOvershadowedChunks().isEmpty());\n+    Assert.assertTrue(copy.getStandbyChunks().isEmpty());\n+    Assert.assertEquals(\n+        Lists.newArrayList(manager.visibleChunksIterator()),\n+        Lists.newArrayList(copy.visibleChunksIterator())\n+    );\n+  }\n+\n+  @Test\n+  public void testDeepCopy()\n+  {\n+    // chunks of partition id 0 and 1\n+    manager.addChunk(newRootChunk());\n+    manager.addChunk(newRootChunk());\n+\n+    // chunks to overshadow the partition id range [0, 2)\n+    manager.addChunk(newNonRootChunk(0, 2, 1, 3));\n+    manager.addChunk(newNonRootChunk(0, 2, 1, 3));\n+    manager.addChunk(newNonRootChunk(0, 2, 1, 3));\n+\n+    // chunks of partition id 3 and 4\n+    manager.addChunk(newRootChunk());\n+    manager.addChunk(newRootChunk());\n+\n+    // standby chunk\n+    manager.addChunk(newNonRootChunk(2, 4, 1, 3));\n+\n+    OvershadowableManager<OvershadowableInteger> copy = OvershadowableManager.deepCopy(manager);\n+    Assert.assertEquals(manager, copy);\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b49262fa6df2b22d97c6605fb9bdcb3e58a0e8c0"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNTg3NjI1", "url": "https://github.com/apache/druid/pull/9441#pullrequestreview-371587625", "createdAt": "2020-03-09T23:12:57Z", "commit": {"oid": "b49262fa6df2b22d97c6605fb9bdcb3e58a0e8c0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b4974e4eeb47c056bc7ac3ad45309e57dcba97d", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/0b4974e4eeb47c056bc7ac3ad45309e57dcba97d", "committedDate": "2020-03-09T23:19:59Z", "message": "equals tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4476989fe54dcdf67f38d9c85e4a44c99d1666bc", "author": {"user": {"login": "jihoonson", "name": "Jihoon Son"}}, "url": "https://github.com/apache/druid/commit/4476989fe54dcdf67f38d9c85e4a44c99d1666bc", "committedDate": "2020-03-10T05:41:38Z", "message": "fix test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMjI4NTM1", "url": "https://github.com/apache/druid/pull/9441#pullrequestreview-372228535", "createdAt": "2020-03-10T18:46:09Z", "commit": {"oid": "4476989fe54dcdf67f38d9c85e4a44c99d1666bc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2980, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}