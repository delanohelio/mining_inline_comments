{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4NzYyNTY1", "number": 9994, "title": "remove incorrect and unnecessary overrides from BooleanVectorValueMatcher", "bodyText": "BooleanVectorValueMatcher.getMaxVectorSize is incorrect (returning current vector size instead of max vector size), and the implementations provided by BaseVectorValueMatcher should be adequate, so the overrides have been removed.\nThe added test case would fail with errors of the form:\n2020-06-09T02:45:44,236 ERROR [main] org.apache.druid.query.groupby.epinephelinae.GroupByMergingQueryRunnerV2 - Exception with one of the sequences!\njava.lang.ArrayIndexOutOfBoundsException: 2\n\tat org.apache.druid.query.aggregation.FilteredVectorAggregator.aggregate(FilteredVectorAggregator.java:110) ~[classes/:?]\n\tat org.apache.druid.query.aggregation.AggregatorAdapters.aggregateVector(AggregatorAdapters.java:200) ~[classes/:?]\n...\n\nprior to this patch.", "createdAt": "2020-06-05T21:09:50Z", "url": "https://github.com/apache/druid/pull/9994", "merged": true, "mergeCommit": {"oid": "1c9ca55247f7d90cf15d65e43aba0c1853d85629"}, "closed": true, "closedAt": "2020-06-10T02:32:17Z", "author": {"login": "clintropolis"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcoZQKaAH2gAyNDI4NzYyNTY1OmM2YTA5OGQ4Mjg1MDRjNDg0ODQ4MzdhYjdhMDQ0N2M3ODY5OTE4MTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcptP9MAFqTQyNzYwMTk5Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c6a098d828504c48484837ab7a0447c786991815", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/c6a098d828504c48484837ab7a0447c786991815", "committedDate": "2020-06-05T21:08:20Z", "message": "remove incorrect and unnecessary overrides from BooleanVectorValueMatcher"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NjMyMDMw", "url": "https://github.com/apache/druid/pull/9994#pullrequestreview-425632030", "createdAt": "2020-06-05T21:20:35Z", "commit": {"oid": "c6a098d828504c48484837ab7a0447c786991815"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NDMyMDcy", "url": "https://github.com/apache/druid/pull/9994#pullrequestreview-426432072", "createdAt": "2020-06-08T16:55:17Z", "commit": {"oid": "c6a098d828504c48484837ab7a0447c786991815"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjo1NToxN1rOGgnZ9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjo1NToxN1rOGgnZ9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg1MzIzNw==", "bodyText": "nit: maybe good to have unit tests for future proof.", "url": "https://github.com/apache/druid/pull/9994#discussion_r436853237", "createdAt": "2020-06-08T16:55:17Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/query/filter/vector/BooleanVectorValueMatcher.java", "diffHunk": "@@ -38,18 +36,6 @@ public static BooleanVectorValueMatcher of(final VectorSizeInspector selector, f\n     return new BooleanVectorValueMatcher(selector, matches);\n   }\n \n-  @Override\n-  public int getCurrentVectorSize()\n-  {\n-    return selector.getCurrentVectorSize();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6a098d828504c48484837ab7a0447c786991815"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b49744b8bf9940e0a01c1f81fee0b4ea2d302ad", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/1b49744b8bf9940e0a01c1f81fee0b4ea2d302ad", "committedDate": "2020-06-09T09:20:28Z", "message": "Merge remote-tracking branch 'upstream/master' into remove-boolean-vector-value-matcher-overrides"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6998f91090693efd1d79f578169ac97952ee9338", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/6998f91090693efd1d79f578169ac97952ee9338", "committedDate": "2020-06-09T10:05:15Z", "message": "add test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2761970008e6c10c819a6b71bc0b8d212c7a8fbc", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/2761970008e6c10c819a6b71bc0b8d212c7a8fbc", "committedDate": "2020-06-09T11:14:07Z", "message": "add unit tests for ... part of VectorValueMatcherColumnProcessorFactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "278d20c741cfd12b8efbb29fdfd993b8650bfb90", "author": {"user": {"login": "clintropolis", "name": "Clint Wylie"}}, "url": "https://github.com/apache/druid/commit/278d20c741cfd12b8efbb29fdfd993b8650bfb90", "committedDate": "2020-06-09T13:34:24Z", "message": "Update VectorValueMatcherColumnProcessorFactoryTest.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NTUwNzc1", "url": "https://github.com/apache/druid/pull/9994#pullrequestreview-427550775", "createdAt": "2020-06-09T21:15:08Z", "commit": {"oid": "278d20c741cfd12b8efbb29fdfd993b8650bfb90"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NTU0NTMx", "url": "https://github.com/apache/druid/pull/9994#pullrequestreview-427554531", "createdAt": "2020-06-09T21:21:19Z", "commit": {"oid": "278d20c741cfd12b8efbb29fdfd993b8650bfb90"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMToyMToxOVrOGhc6Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMToyMToxOVrOGhc6Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcyOTgyMg==", "bodyText": "If value cardinality == 0, shouldn't it return this thing...\n      return new BaseVectorValueMatcher(selector)\n      {\n        final VectorMatch match = VectorMatch.wrap(new int[selector.getMaxVectorSize()]);\n\n        @Override\n        public ReadableVectorMatch match(final ReadableVectorMatch mask)\n        {\n          final int[] vector = selector.getRowVector();\n          final int[] selection = match.getSelection();\n\n          int numRows = 0;\n\n          for (int i = 0; i < mask.getSelectionSize(); i++) {\n            final int rowNum = mask.getSelection()[i];\n            if (predicate.apply(selector.lookupName(vector[rowNum]))) {\n              selection[numRows++] = rowNum;\n            }\n          }\n\n          match.setSelectionSize(numRows);\n          assert match.isValid(mask);\n          return match;\n        }\n      };", "url": "https://github.com/apache/druid/pull/9994#discussion_r437729822", "createdAt": "2020-06-09T21:21:19Z", "author": {"login": "maytasm"}, "path": "processing/src/test/java/org/apache/druid/query/filter/vector/VectorValueMatcherColumnProcessorFactoryTest.java", "diffHunk": "@@ -0,0 +1,277 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.query.filter.vector;\n+\n+import org.apache.druid.common.config.NullHandling;\n+import org.apache.druid.segment.IdLookup;\n+import org.apache.druid.segment.vector.MultiValueDimensionVectorSelector;\n+import org.apache.druid.segment.vector.SingleValueDimensionVectorSelector;\n+import org.apache.druid.segment.vector.VectorValueSelector;\n+import org.apache.druid.testing.InitializedNullHandlingTest;\n+import org.easymock.EasyMock;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class VectorValueMatcherColumnProcessorFactoryTest extends InitializedNullHandlingTest\n+{\n+  private static final int VECTOR_SIZE = 128;\n+  private static final int CURRENT_SIZE = 24;\n+  private VectorValueSelector vectorValueSelector;\n+\n+  @Before\n+  public void setup()\n+  {\n+    vectorValueSelector = EasyMock.createMock(VectorValueSelector.class);\n+    EasyMock.expect(vectorValueSelector.getCurrentVectorSize()).andReturn(CURRENT_SIZE).anyTimes();\n+    EasyMock.expect(vectorValueSelector.getMaxVectorSize()).andReturn(VECTOR_SIZE).anyTimes();\n+    EasyMock.replay(vectorValueSelector);\n+  }\n+\n+  @Test\n+  public void testFloat()\n+  {\n+    VectorValueMatcherFactory matcherFactory =\n+        VectorValueMatcherColumnProcessorFactory.instance().makeFloatProcessor(vectorValueSelector);\n+\n+    Assert.assertTrue(matcherFactory instanceof FloatVectorValueMatcher);\n+\n+    VectorValueMatcher matcher = matcherFactory.makeMatcher(\"2.0\");\n+    Assert.assertFalse(matcher instanceof BooleanVectorValueMatcher);\n+    Assert.assertEquals(VECTOR_SIZE, matcher.getMaxVectorSize());\n+    Assert.assertEquals(CURRENT_SIZE, matcher.getCurrentVectorSize());\n+\n+    // in default mode, matching null produces a boolean matcher\n+    VectorValueMatcher booleanMatcher = matcherFactory.makeMatcher((String) null);\n+    if (NullHandling.replaceWithDefault()) {\n+      Assert.assertTrue(booleanMatcher instanceof BooleanVectorValueMatcher);\n+    } else {\n+      Assert.assertFalse(booleanMatcher instanceof BooleanVectorValueMatcher);\n+    }\n+    Assert.assertEquals(VECTOR_SIZE, booleanMatcher.getMaxVectorSize());\n+    Assert.assertEquals(CURRENT_SIZE, booleanMatcher.getCurrentVectorSize());\n+    EasyMock.verify(vectorValueSelector);\n+  }\n+\n+  @Test\n+  public void testDouble()\n+  {\n+    VectorValueMatcherFactory matcherFactory =\n+        VectorValueMatcherColumnProcessorFactory.instance().makeDoubleProcessor(vectorValueSelector);\n+\n+    Assert.assertTrue(matcherFactory instanceof DoubleVectorValueMatcher);\n+\n+\n+    VectorValueMatcher matcher = matcherFactory.makeMatcher(\"1.0\");\n+    Assert.assertFalse(matcher instanceof BooleanVectorValueMatcher);\n+    Assert.assertEquals(VECTOR_SIZE, matcher.getMaxVectorSize());\n+    Assert.assertEquals(CURRENT_SIZE, matcher.getCurrentVectorSize());\n+\n+    // in default mode, matching null produces a boolean matcher\n+    VectorValueMatcher booleanMatcher = matcherFactory.makeMatcher((String) null);\n+    if (NullHandling.replaceWithDefault()) {\n+      Assert.assertTrue(booleanMatcher instanceof BooleanVectorValueMatcher);\n+    } else {\n+      Assert.assertFalse(booleanMatcher instanceof BooleanVectorValueMatcher);\n+    }\n+    Assert.assertEquals(VECTOR_SIZE, booleanMatcher.getMaxVectorSize());\n+    Assert.assertEquals(CURRENT_SIZE, booleanMatcher.getCurrentVectorSize());\n+    EasyMock.verify(vectorValueSelector);\n+  }\n+\n+  @Test\n+  public void testLong()\n+  {\n+    VectorValueMatcherFactory matcherFactory =\n+        VectorValueMatcherColumnProcessorFactory.instance().makeLongProcessor(vectorValueSelector);\n+\n+    Assert.assertTrue(matcherFactory instanceof LongVectorValueMatcher);\n+\n+    VectorValueMatcher matcher = matcherFactory.makeMatcher(\"1\");\n+    Assert.assertFalse(matcher instanceof BooleanVectorValueMatcher);\n+    Assert.assertEquals(VECTOR_SIZE, matcher.getMaxVectorSize());\n+    Assert.assertEquals(CURRENT_SIZE, matcher.getCurrentVectorSize());\n+\n+    // in default mode, matching null produces a boolean matcher\n+    VectorValueMatcher booleanMatcher = matcherFactory.makeMatcher((String) null);\n+    if (NullHandling.replaceWithDefault()) {\n+      Assert.assertTrue(booleanMatcher instanceof BooleanVectorValueMatcher);\n+    } else {\n+      Assert.assertFalse(booleanMatcher instanceof BooleanVectorValueMatcher);\n+    }\n+    Assert.assertEquals(VECTOR_SIZE, booleanMatcher.getMaxVectorSize());\n+    Assert.assertEquals(CURRENT_SIZE, booleanMatcher.getCurrentVectorSize());\n+    EasyMock.verify(vectorValueSelector);\n+  }\n+\n+  @Test\n+  public void testSingleValueString()\n+  {\n+    IdLookup lookup = EasyMock.createMock(IdLookup.class);\n+    SingleValueDimensionVectorSelector selector =\n+        EasyMock.createMock(SingleValueDimensionVectorSelector.class);\n+    EasyMock.expect(selector.getCurrentVectorSize()).andReturn(CURRENT_SIZE).anyTimes();\n+    EasyMock.expect(selector.getMaxVectorSize()).andReturn(VECTOR_SIZE).anyTimes();\n+    EasyMock.expect(selector.getValueCardinality()).andReturn(1024).anyTimes();\n+    EasyMock.expect(selector.nameLookupPossibleInAdvance()).andReturn(false).anyTimes();\n+    EasyMock.expect(selector.idLookup()).andReturn(lookup).anyTimes();\n+    EasyMock.expect(lookup.lookupId(\"any value\")).andReturn(1).anyTimes();\n+    EasyMock.expect(lookup.lookupId(\"another value\")).andReturn(-1).anyTimes();\n+    EasyMock.replay(selector, lookup);\n+\n+    VectorValueMatcherFactory matcherFactory =\n+        VectorValueMatcherColumnProcessorFactory.instance().makeSingleValueDimensionProcessor(selector);\n+\n+    Assert.assertTrue(matcherFactory instanceof SingleValueStringVectorValueMatcher);\n+\n+    // value exists in column nonboolean matcher\n+    VectorValueMatcher matcher = matcherFactory.makeMatcher(\"any value\");\n+    Assert.assertFalse(matcher instanceof BooleanVectorValueMatcher);\n+    Assert.assertEquals(VECTOR_SIZE, matcher.getMaxVectorSize());\n+    Assert.assertEquals(CURRENT_SIZE, matcher.getCurrentVectorSize());\n+\n+    // value not exist in dictionary uses boolean matcher\n+    VectorValueMatcher booleanMatcher = matcherFactory.makeMatcher(\"another value\");\n+    Assert.assertTrue(booleanMatcher instanceof BooleanVectorValueMatcher);\n+    Assert.assertEquals(VECTOR_SIZE, booleanMatcher.getMaxVectorSize());\n+    Assert.assertEquals(CURRENT_SIZE, booleanMatcher.getCurrentVectorSize());\n+    EasyMock.verify(selector, lookup);\n+  }\n+\n+  @Test\n+  public void testSingleValueStringZeroCardinalityAlwaysBooleanMatcher()\n+  {\n+    // cardinality 0 has special path to always use boolean matcher\n+    SingleValueDimensionVectorSelector selector =\n+        EasyMock.createMock(SingleValueDimensionVectorSelector.class);\n+    EasyMock.expect(selector.getCurrentVectorSize()).andReturn(CURRENT_SIZE).anyTimes();\n+    EasyMock.expect(selector.getMaxVectorSize()).andReturn(VECTOR_SIZE).anyTimes();\n+    EasyMock.expect(selector.getValueCardinality()).andReturn(0).anyTimes();\n+    EasyMock.replay(selector);\n+\n+    VectorValueMatcherFactory matcherFactory =\n+        VectorValueMatcherColumnProcessorFactory.instance().makeSingleValueDimensionProcessor(selector);\n+\n+    Assert.assertTrue(matcherFactory instanceof SingleValueStringVectorValueMatcher);\n+\n+    VectorValueMatcher matcher = matcherFactory.makeMatcher(\"any value\");\n+    Assert.assertTrue(matcher instanceof BooleanVectorValueMatcher);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "278d20c741cfd12b8efbb29fdfd993b8650bfb90"}, "originalPosition": 175}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NjAxOTky", "url": "https://github.com/apache/druid/pull/9994#pullrequestreview-427601992", "createdAt": "2020-06-09T23:00:08Z", "commit": {"oid": "278d20c741cfd12b8efbb29fdfd993b8650bfb90"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2021, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}