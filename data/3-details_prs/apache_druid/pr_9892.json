{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5ODQyMTI1", "number": 9892, "title": "Fails creation of TaskResource if availabilityGroup is null", "bodyText": "Fails creation of TaskResource if availabilityGroup is null\navailabilityGroup in TaskResource should never be null. If a task has availabilityGroup = null, it does not fails and still runs. However, while this task is running, all other tasks will fails to start (and will be mark FAILED). Once the task with availabilityGroup = null finish running, other tasks will now be able to be created.\nThe error seen is (when other good task tries to run and fails):\n2020-05-04T04:19:59,129 ERROR [tasks-runner-0] org.apache.druid.indexing.overlord.RemoteTaskRunner - Exception while trying to assign task: {class=org.apache.druid.indexing.overlord.RemoteTaskRunner, exceptionType=class java.lang.NullPointerException, exceptionMessage=at index 0, taskId=index_kafka_xxx}\njava.lang.NullPointerException: at index 0\n\tat com.google.common.collect.ObjectArrays.checkElementNotNull(ObjectArrays.java:240) ~[guava-16.0.1.jar:?]\n\tat com.google.common.collect.ImmutableSet.construct(ImmutableSet.java:195) ~[guava-16.0.1.jar:?]\n\tat com.google.common.collect.ImmutableSet.copyOf(ImmutableSet.java:375) ~[guava-16.0.1.jar:?]\n\tat org.apache.druid.indexing.overlord.ImmutableWorkerInfo.<init>(ImmutableWorkerInfo.java:59)\n\tat org.apache.druid.indexing.overlord.ZkWorker.toImmutable(ZkWorker.java:184)\n\t\n\nWhile availabilityGroup should never be null, we have seen in our environment that task can appears with availabilityGroup = null. We have yet to determined how this happened. Although one possible scenario is if the ingestionSpec posted to Druid explicitly contains availabilityGroup set to null (For example, \"resource\":{\"availabilityGroup\":null,\"requiredCapacity\":1}).\nRegardless of how it happened, we should fail task that has availabilityGroup = null by enforcing availabilityGroup not null on TaskResource. We should do this for the following reason:\n\nBad task with availabilityGroup = null should not be able to affect other good tasks running on the cluster (especially as those other tasks can be for different datasource, etc.). Hence, the bad  task with availabilityGroup = null should fail fast instead of running normally.\nWe should fail fast so that we know exactly how / where TaskResource got created with availabilityGroup = null. (to help with debug)\n\nThis PR has:\n\n been self-reviewed.\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-05-19T02:42:44Z", "url": "https://github.com/apache/druid/pull/9892", "merged": true, "mergeCommit": {"oid": "5b4b5d77a81817baf4359574d61e2dd2acabddba"}, "closed": true, "closedAt": "2020-05-20T05:19:23Z", "author": {"login": "maytasm"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcirL_FgH2gAyNDE5ODQyMTI1Ojg4OWU1MDJjZjgwYWQ3ZGI5NDYwNWZhOTBjODgxN2U1OGE4MzhiN2E=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjCFfFAFqTQxNDk5ODk3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "889e502cf80ad7db94605fa90c8817e58a838b7a", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/889e502cf80ad7db94605fa90c8817e58a838b7a", "committedDate": "2020-05-19T02:38:31Z", "message": "Fails creation of TaskResource if availabilityGroup is null"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NjM0NTQ4", "url": "https://github.com/apache/druid/pull/9892#pullrequestreview-414634548", "createdAt": "2020-05-19T16:44:55Z", "commit": {"oid": "889e502cf80ad7db94605fa90c8817e58a838b7a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NjU2ODI3", "url": "https://github.com/apache/druid/pull/9892#pullrequestreview-414656827", "createdAt": "2020-05-19T17:13:00Z", "commit": {"oid": "889e502cf80ad7db94605fa90c8817e58a838b7a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0bd0514120084b437b936d0b2bc3040e47ecee1", "author": {"user": {"login": "maytasm", "name": "Maytas Monsereenusorn"}}, "url": "https://github.com/apache/druid/commit/d0bd0514120084b437b936d0b2bc3040e47ecee1", "committedDate": "2020-05-20T01:51:37Z", "message": "add check for requiredCapacity"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTQyNzAz", "url": "https://github.com/apache/druid/pull/9892#pullrequestreview-414942703", "createdAt": "2020-05-20T02:03:34Z", "commit": {"oid": "d0bd0514120084b437b936d0b2bc3040e47ecee1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMjowMzozNFrOGX4wCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMjowMzozNFrOGX4wCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcwMDIzNA==", "bodyText": "just curious: How do we decide between using @Min and @Nonnull annotations on the constructor vs adding an explicit Preconditions check? Is there an advantage to one over another?\nfwiw: I think annotations are easier to read than Preconditions, but I see we use both, so I'm not advocating for one way or another, just curious what your thoughts are", "url": "https://github.com/apache/druid/pull/9892#discussion_r427700234", "createdAt": "2020-05-20T02:03:34Z", "author": {"login": "suneet-s"}, "path": "indexing-service/src/main/java/org/apache/druid/indexing/common/task/TaskResource.java", "diffHunk": "@@ -37,6 +37,7 @@ public TaskResource(\n   )\n   {\n     this.availabilityGroup = Preconditions.checkNotNull(availabilityGroup, \"availabilityGroup\");\n+    Preconditions.checkArgument(requiredCapacity > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0bd0514120084b437b936d0b2bc3040e47ecee1"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTk4OTc1", "url": "https://github.com/apache/druid/pull/9892#pullrequestreview-414998975", "createdAt": "2020-05-20T05:19:14Z", "commit": {"oid": "d0bd0514120084b437b936d0b2bc3040e47ecee1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2369, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}