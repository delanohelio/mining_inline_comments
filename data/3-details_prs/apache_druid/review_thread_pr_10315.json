{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNTUzOTA3", "number": 10315, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNDoxNDowNlrOEb4pNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNDoxODoxNFrOEb4vrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Njc1MDYzOnYy", "diffSide": "RIGHT", "path": "extensions-core/kinesis-indexing-service/src/main/java/org/apache/druid/indexing/kinesis/KinesisSequenceNumber.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNDoxNDowNlrOHGFp8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjoyNzozMFrOHGgEhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE0NjE2MQ==", "bodyText": "nit: use isValidAWSKinesisSequence instead\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (END_OF_SHARD_MARKER.equals(sequenceNumber)\n          \n          \n            \n                    || NO_END_SEQUENCE_NUMBER.equals(sequenceNumber)\n          \n          \n            \n                    || EXPIRED_MARKER.equals(sequenceNumber)) {\n          \n          \n            \n                if (!isValidAWSKinesisSequence(sequenceNumber)) {", "url": "https://github.com/apache/druid/pull/10315#discussion_r476146161", "createdAt": "2020-08-25T04:14:06Z", "author": {"login": "suneet-s"}, "path": "extensions-core/kinesis-indexing-service/src/main/java/org/apache/druid/indexing/kinesis/KinesisSequenceNumber.java", "diffHunk": "@@ -62,7 +62,9 @@\n   private KinesisSequenceNumber(String sequenceNumber, boolean isExclusive)\n   {\n     super(sequenceNumber, isExclusive);\n-    if (END_OF_SHARD_MARKER.equals(sequenceNumber) || NO_END_SEQUENCE_NUMBER.equals(sequenceNumber)) {\n+    if (END_OF_SHARD_MARKER.equals(sequenceNumber)\n+        || NO_END_SEQUENCE_NUMBER.equals(sequenceNumber)\n+        || EXPIRED_MARKER.equals(sequenceNumber)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb01896f58228bd3d3636bad92c9e023605a2050"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyMjI0Ng==", "bodyText": "I avoided that deliberately since we may have a sequence number that does not indicate max sequence but is not a valid kinesis sequence number either.", "url": "https://github.com/apache/druid/pull/10315#discussion_r476422246", "createdAt": "2020-08-25T12:50:33Z", "author": {"login": "abhishekagarwal87"}, "path": "extensions-core/kinesis-indexing-service/src/main/java/org/apache/druid/indexing/kinesis/KinesisSequenceNumber.java", "diffHunk": "@@ -62,7 +62,9 @@\n   private KinesisSequenceNumber(String sequenceNumber, boolean isExclusive)\n   {\n     super(sequenceNumber, isExclusive);\n-    if (END_OF_SHARD_MARKER.equals(sequenceNumber) || NO_END_SEQUENCE_NUMBER.equals(sequenceNumber)) {\n+    if (END_OF_SHARD_MARKER.equals(sequenceNumber)\n+        || NO_END_SEQUENCE_NUMBER.equals(sequenceNumber)\n+        || EXPIRED_MARKER.equals(sequenceNumber)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE0NjE2MQ=="}, "originalCommit": {"oid": "cb01896f58228bd3d3636bad92c9e023605a2050"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3ODk1MQ==", "bodyText": "makes sense \ud83d\udc4d", "url": "https://github.com/apache/druid/pull/10315#discussion_r476578951", "createdAt": "2020-08-25T16:27:30Z", "author": {"login": "suneet-s"}, "path": "extensions-core/kinesis-indexing-service/src/main/java/org/apache/druid/indexing/kinesis/KinesisSequenceNumber.java", "diffHunk": "@@ -62,7 +62,9 @@\n   private KinesisSequenceNumber(String sequenceNumber, boolean isExclusive)\n   {\n     super(sequenceNumber, isExclusive);\n-    if (END_OF_SHARD_MARKER.equals(sequenceNumber) || NO_END_SEQUENCE_NUMBER.equals(sequenceNumber)) {\n+    if (END_OF_SHARD_MARKER.equals(sequenceNumber)\n+        || NO_END_SEQUENCE_NUMBER.equals(sequenceNumber)\n+        || EXPIRED_MARKER.equals(sequenceNumber)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE0NjE2MQ=="}, "originalCommit": {"oid": "cb01896f58228bd3d3636bad92c9e023605a2050"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Njc2NzE5OnYy", "diffSide": "RIGHT", "path": "extensions-core/kinesis-indexing-service/src/main/java/org/apache/druid/indexing/kinesis/KinesisRecordSupplier.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNDoxODoxNFrOHGF1XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMjo1MDo0OFrOHGWg8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE0OTA4NQ==", "bodyText": "Can we add some tests for this? I don't know if we can simulate this scenario in an integration test, but can we add a unit test for this", "url": "https://github.com/apache/druid/pull/10315#discussion_r476149085", "createdAt": "2020-08-25T04:18:14Z", "author": {"login": "suneet-s"}, "path": "extensions-core/kinesis-indexing-service/src/main/java/org/apache/druid/indexing/kinesis/KinesisRecordSupplier.java", "diffHunk": "@@ -718,9 +718,11 @@ public String getEarliestSequenceNumber(StreamPartition<String> partition)\n   {\n     Map<String, Long> partitionLag = Maps.newHashMapWithExpectedSize(currentOffsets.size());\n     for (Map.Entry<String, String> partitionOffset : currentOffsets.entrySet()) {\n-      StreamPartition<String> partition = new StreamPartition<>(stream, partitionOffset.getKey());\n-      long currentLag = getPartitionTimeLag(partition, partitionOffset.getValue());\n-      partitionLag.put(partitionOffset.getKey(), currentLag);\n+      if (KinesisSequenceNumber.isValidAWSKinesisSequence(partitionOffset.getValue())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb01896f58228bd3d3636bad92c9e023605a2050"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyMjM4Nw==", "bodyText": "Ack", "url": "https://github.com/apache/druid/pull/10315#discussion_r476422387", "createdAt": "2020-08-25T12:50:48Z", "author": {"login": "abhishekagarwal87"}, "path": "extensions-core/kinesis-indexing-service/src/main/java/org/apache/druid/indexing/kinesis/KinesisRecordSupplier.java", "diffHunk": "@@ -718,9 +718,11 @@ public String getEarliestSequenceNumber(StreamPartition<String> partition)\n   {\n     Map<String, Long> partitionLag = Maps.newHashMapWithExpectedSize(currentOffsets.size());\n     for (Map.Entry<String, String> partitionOffset : currentOffsets.entrySet()) {\n-      StreamPartition<String> partition = new StreamPartition<>(stream, partitionOffset.getKey());\n-      long currentLag = getPartitionTimeLag(partition, partitionOffset.getValue());\n-      partitionLag.put(partitionOffset.getKey(), currentLag);\n+      if (KinesisSequenceNumber.isValidAWSKinesisSequence(partitionOffset.getValue())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE0OTA4NQ=="}, "originalCommit": {"oid": "cb01896f58228bd3d3636bad92c9e023605a2050"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3116, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}