{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3NjMyMzQ2", "number": 9265, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMDowNDowOVrODbWsJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMTozMzoyMlrODcHPzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDA5ODkzOnYy", "diffSide": "RIGHT", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureDataSegmentPusher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMDowNDowOVrOFiywlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMToyMToyMVrOFj_DMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAyNzU0Mg==", "bodyText": "Would you change the log level to debug? it doesn't look worth to be the info level.", "url": "https://github.com/apache/druid/pull/9265#discussion_r372027542", "createdAt": "2020-01-28T20:04:09Z", "author": {"login": "jihoonson"}, "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureDataSegmentPusher.java", "diffHunk": "@@ -179,4 +151,36 @@ public DataSegment push(final File indexFilesDir, final DataSegment segment, fin\n         uri.toString()\n     );\n   }\n+\n+  @VisibleForTesting\n+  String getAzurePath(final DataSegment segment, final boolean useUniquePath)\n+  {\n+    final String storageDir = this.getStorageDir(segment, useUniquePath);\n+\n+    return StringUtils.format(\"%s/%s\", storageDir, AzureStorageDruidModule.INDEX_ZIP_FILE_NAME);\n+\n+  }\n+\n+  @VisibleForTesting\n+  DataSegment uploadDataSegment(\n+      DataSegment segment,\n+      final int binaryVersion,\n+      final long size,\n+      final File compressedSegmentData,\n+      final String azurePath\n+  )\n+      throws StorageException, IOException, URISyntaxException\n+  {\n+    azureStorage.uploadBlob(compressedSegmentData, config.getContainer(), azurePath);\n+\n+    final DataSegment outSegment = segment\n+        .withSize(size)\n+        .withLoadSpec(this.makeLoadSpec(new URI(azurePath)))\n+        .withBinaryVersion(binaryVersion);\n+\n+    log.info(\"Deleting file [%s]\", compressedSegmentData);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85293294d93e4bd7f08efa207e873c49de97d135"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI3NzQ4OA==", "bodyText": "fixed", "url": "https://github.com/apache/druid/pull/9265#discussion_r373277488", "createdAt": "2020-01-31T01:21:21Z", "author": {"login": "zachjsh"}, "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureDataSegmentPusher.java", "diffHunk": "@@ -179,4 +151,36 @@ public DataSegment push(final File indexFilesDir, final DataSegment segment, fin\n         uri.toString()\n     );\n   }\n+\n+  @VisibleForTesting\n+  String getAzurePath(final DataSegment segment, final boolean useUniquePath)\n+  {\n+    final String storageDir = this.getStorageDir(segment, useUniquePath);\n+\n+    return StringUtils.format(\"%s/%s\", storageDir, AzureStorageDruidModule.INDEX_ZIP_FILE_NAME);\n+\n+  }\n+\n+  @VisibleForTesting\n+  DataSegment uploadDataSegment(\n+      DataSegment segment,\n+      final int binaryVersion,\n+      final long size,\n+      final File compressedSegmentData,\n+      final String azurePath\n+  )\n+      throws StorageException, IOException, URISyntaxException\n+  {\n+    azureStorage.uploadBlob(compressedSegmentData, config.getContainer(), azurePath);\n+\n+    final DataSegment outSegment = segment\n+        .withSize(size)\n+        .withLoadSpec(this.makeLoadSpec(new URI(azurePath)))\n+        .withBinaryVersion(binaryVersion);\n+\n+    log.info(\"Deleting file [%s]\", compressedSegmentData);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAyNzU0Mg=="}, "originalCommit": {"oid": "85293294d93e4bd7f08efa207e873c49de97d135"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzY1MjY2OnYy", "diffSide": "RIGHT", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureDataSegmentPusher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjowMjoyMVrOFj7ZYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMToyMToxNFrOFj_DDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxNzYzNA==", "bodyText": "Haha, is this question for the reviewers? I think RuntimeException is enough for now.", "url": "https://github.com/apache/druid/pull/9265#discussion_r373217634", "createdAt": "2020-01-30T22:02:21Z", "author": {"login": "jihoonson"}, "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureDataSegmentPusher.java", "diffHunk": "@@ -157,6 +128,7 @@ public DataSegment push(final File indexFilesDir, final DataSegment segment, fin\n       );\n     }\n     catch (Exception e) {\n+      // do we want to throw a specfic exception here? Interface only expects IOExceptions to be thrown.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5103fb69db63e058b68edfc52dddc33509101d4"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI3NzQ1Mg==", "bodyText": "removed comment", "url": "https://github.com/apache/druid/pull/9265#discussion_r373277452", "createdAt": "2020-01-31T01:21:14Z", "author": {"login": "zachjsh"}, "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureDataSegmentPusher.java", "diffHunk": "@@ -157,6 +128,7 @@ public DataSegment push(final File indexFilesDir, final DataSegment segment, fin\n       );\n     }\n     catch (Exception e) {\n+      // do we want to throw a specfic exception here? Interface only expects IOExceptions to be thrown.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxNzYzNA=="}, "originalCommit": {"oid": "c5103fb69db63e058b68edfc52dddc33509101d4"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzY1OTUwOnYy", "diffSide": "RIGHT", "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureStorage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjowNTowMlrOFj7dlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMToyMTowMVrOFj_C1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxODcwOQ==", "bodyText": "nit: this method not just returns a container, but can create it if it doesn't exist. Maybe better to rename to something more clear such as getOrCreateCloudBlobContainer().", "url": "https://github.com/apache/druid/pull/9265#discussion_r373218709", "createdAt": "2020-01-30T22:05:02Z", "author": {"login": "jihoonson"}, "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureStorage.java", "diffHunk": "@@ -95,13 +87,34 @@ public long getBlobLength(final String containerName, final String blobPath)\n \n   public InputStream getBlobInputStream(final String containerName, final String blobPath)\n       throws URISyntaxException, StorageException\n+  {\n+    return getBlobInputStream(0L, containerName, blobPath);\n+  }\n+\n+  public InputStream getBlobInputStream(long offset, final String containerName, final String blobPath)\n+      throws URISyntaxException, StorageException\n   {\n     CloudBlobContainer container = getCloudBlobContainer(containerName);\n-    return container.getBlockBlobReference(blobPath).openInputStream();\n+    return container.getBlockBlobReference(blobPath).openInputStream(offset, null, null, null, null);\n   }\n \n   public boolean getBlobExists(String container, String blobPath) throws URISyntaxException, StorageException\n   {\n     return getCloudBlobContainer(container).getBlockBlobReference(blobPath).exists();\n   }\n+\n+  @VisibleForTesting\n+  CloudBlobClient getCloudBlobClient()\n+  {\n+    return this.cloudBlobClient;\n+  }\n+\n+  private CloudBlobContainer getCloudBlobContainer(final String containerName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5103fb69db63e058b68edfc52dddc33509101d4"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI3NzM5Nw==", "bodyText": "fixed", "url": "https://github.com/apache/druid/pull/9265#discussion_r373277397", "createdAt": "2020-01-31T01:21:01Z", "author": {"login": "zachjsh"}, "path": "extensions-contrib/azure-extensions/src/main/java/org/apache/druid/storage/azure/AzureStorage.java", "diffHunk": "@@ -95,13 +87,34 @@ public long getBlobLength(final String containerName, final String blobPath)\n \n   public InputStream getBlobInputStream(final String containerName, final String blobPath)\n       throws URISyntaxException, StorageException\n+  {\n+    return getBlobInputStream(0L, containerName, blobPath);\n+  }\n+\n+  public InputStream getBlobInputStream(long offset, final String containerName, final String blobPath)\n+      throws URISyntaxException, StorageException\n   {\n     CloudBlobContainer container = getCloudBlobContainer(containerName);\n-    return container.getBlockBlobReference(blobPath).openInputStream();\n+    return container.getBlockBlobReference(blobPath).openInputStream(offset, null, null, null, null);\n   }\n \n   public boolean getBlobExists(String container, String blobPath) throws URISyntaxException, StorageException\n   {\n     return getCloudBlobContainer(container).getBlockBlobReference(blobPath).exists();\n   }\n+\n+  @VisibleForTesting\n+  CloudBlobClient getCloudBlobClient()\n+  {\n+    return this.cloudBlobClient;\n+  }\n+\n+  private CloudBlobContainer getCloudBlobContainer(final String containerName)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxODcwOQ=="}, "originalCommit": {"oid": "c5103fb69db63e058b68edfc52dddc33509101d4"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODA1NDUyOnYy", "diffSide": "RIGHT", "path": "extensions-contrib/azure-extensions/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMTozMzoyMlrOFj_OmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMTozMzoyMlrOFj_OmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4MDQwOA==", "bodyText": "Thanks for adding it. Even though we disabled coveralls in #8382 because of its flakiness, this test seems to be working based on the CI history of this PR. I think it's better than not having it. We can apply to the entire project later someday.", "url": "https://github.com/apache/druid/pull/9265#discussion_r373280408", "createdAt": "2020-01-31T01:33:22Z", "author": {"login": "jihoonson"}, "path": "extensions-contrib/azure-extensions/pom.xml", "diffHunk": "@@ -135,4 +142,66 @@\n         </dependency>\n     </dependencies>\n \n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.jacoco</groupId>\n+                <artifactId>jacoco-maven-plugin</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "432136882c43bd4cb568c510d93bdbf032ca67ec"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2171, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}