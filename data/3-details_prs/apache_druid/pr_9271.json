{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3NzgzMTU5", "number": 9271, "title": "Expose JoinableFactory through Guice Bindings", "bodyText": "This change makes it so that extensions can register a JoinableFactory that\nshould be used for a DataSource.\nExtensions can provide the factories via DruidBinders#joinableFactoryBinder\nKnown DataSources - like InlineDataSource are provided in the\nJoinableFactoryModule. This module installs a FactoryWarehouse that is\nused to decide which factory should be used to generate the Joinable for\nthe provided DataSource.\nOther modules can register JoinableFactories for the datasources they support\nthrough the DruidBinders\n\nThis PR has:\n\n been self-reviewed.\n\n using the concurrency checklist (Remove this item if the PR doesn't have any relation to concurrency.)\n\n\n added documentation for new or modified features or behaviors.\n added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.\n added or updated version, license, or notice information in licenses.yaml\n added comments explaining the \"why\" and the intent of the code wherever would not be obvious for an unfamiliar reader.\n added unit tests or modified existing tests to cover new code paths.\n added integration tests.\n been tested in a test Druid cluster.", "createdAt": "2020-01-28T01:19:33Z", "url": "https://github.com/apache/druid/pull/9271", "merged": true, "mergeCommit": {"oid": "0ccfe5ca8980a8cbe57d00c2d560555d71e8fcdc"}, "closed": true, "closedAt": "2020-01-28T21:59:07Z", "author": {"login": "suneet-s"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-m6uPAH2gAyMzY3NzgzMTU5OjNmMjhiYWY0NDBlZDg5MmE0NGI3NWFiN2U2NzUwZmYwNDMxNDZhMDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb-4vHlgFqTM0OTczMzIzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3f28baf440ed892a44b75ab7e6750ff043146a05", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/3f28baf440ed892a44b75ab7e6750ff043146a05", "committedDate": "2020-01-28T01:18:46Z", "message": "Make JoinableFactory an extension point\n\nThis change makes it so that extensions can register a JoinableFactory that\nshould be used for a DataSource.\n\nExtensions can provide the factories via DruidBinders#joinableFactoryBinder\nKnown DataSources - like InlineDataSource are provided in the\nJoinableFactoryModule. This module installs a FactoryWarehouse that is\nused to decide which factory should be used to generate the Joinable for\nthe provided DataSource.\n\nThe ExtensionPoint is marked as Beta since it is not yet clear if this\nneeds to remain available to other extensions or if the best way to\nregister a factory is by using the datasource class."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDkwNDU0", "url": "https://github.com/apache/druid/pull/9271#pullrequestreview-349090454", "createdAt": "2020-01-28T01:50:07Z", "commit": {"oid": "3f28baf440ed892a44b75ab7e6750ff043146a05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTo1MDowN1rOFiXNfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTo1MDowN1rOFiXNfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3NjE4OA==", "bodyText": "Do you want to add a unit test for this class?", "url": "https://github.com/apache/druid/pull/9271#discussion_r371576188", "createdAt": "2020-01-28T01:50:07Z", "author": {"login": "ccaominh"}, "path": "server/src/main/java/org/apache/druid/guice/JoinableFactoryModule.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.guice;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.inject.Binder;\n+import com.google.inject.Module;\n+import com.google.inject.Scopes;\n+import com.google.inject.multibindings.MapBinder;\n+import org.apache.druid.query.DataSource;\n+import org.apache.druid.query.InlineDataSource;\n+import org.apache.druid.segment.join.InlineJoinableFactory;\n+import org.apache.druid.segment.join.JoinableFactory;\n+import org.apache.druid.segment.join.MapDataSourceJoinableFactoryWarehouse;\n+\n+import java.util.Map;\n+\n+/**\n+ * Module that installs {@link JoinableFactory} for the appropriate DataSource.\n+ */\n+public class JoinableFactoryModule implements Module", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f28baf440ed892a44b75ab7e6750ff043146a05"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eaa807002ea0129f033cbf41211deb8fdda7612b", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/eaa807002ea0129f033cbf41211deb8fdda7612b", "committedDate": "2020-01-28T07:55:39Z", "message": "Add module test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d99e5df3a89a8dac42744c611d34bd7dd8cc08c", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/6d99e5df3a89a8dac42744c611d34bd7dd8cc08c", "committedDate": "2020-01-28T07:56:05Z", "message": "Merge remote-tracking branch 'upstream/master' into joinable-factory"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MTk3NDU5", "url": "https://github.com/apache/druid/pull/9271#pullrequestreview-349197459", "createdAt": "2020-01-28T08:34:40Z", "commit": {"oid": "6d99e5df3a89a8dac42744c611d34bd7dd8cc08c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwODozNDo0MFrOFicjiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwODo0NDo1NVrOFic0CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY2Mzc1Mg==", "bodyText": "How does it make different from other extension points without @Beta? Does it mean this extension point can change in breaking ways even between minor releases?", "url": "https://github.com/apache/druid/pull/9271#discussion_r371663752", "createdAt": "2020-01-28T08:34:40Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/segment/join/JoinableFactory.java", "diffHunk": "@@ -19,13 +19,17 @@\n \n package org.apache.druid.segment.join;\n \n+import com.google.common.annotations.Beta;\n+import org.apache.druid.guice.annotations.ExtensionPoint;\n import org.apache.druid.query.DataSource;\n \n import java.util.Optional;\n \n /**\n  * Utility for creating {@link Joinable} objects.\n  */\n+@Beta", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d99e5df3a89a8dac42744c611d34bd7dd8cc08c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY2NTQxNQ==", "bodyText": "{@link DruidBinders}?", "url": "https://github.com/apache/druid/pull/9271#discussion_r371665415", "createdAt": "2020-01-28T08:38:48Z", "author": {"login": "jihoonson"}, "path": "processing/src/main/java/org/apache/druid/segment/join/MapDataSourceJoinableFactoryWarehouse.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.join;\n+\n+import com.google.inject.Inject;\n+import org.apache.druid.query.DataSource;\n+\n+import java.util.IdentityHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * A {@link JoinableFactory} that delegates to the appropriate factory based on the type of the datasource.\n+ *\n+ * Datasources can register a factory via a DruidBinder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d99e5df3a89a8dac42744c611d34bd7dd8cc08c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY2Nzk3Ng==", "bodyText": "What is props for?", "url": "https://github.com/apache/druid/pull/9271#discussion_r371667976", "createdAt": "2020-01-28T08:44:55Z", "author": {"login": "jihoonson"}, "path": "server/src/test/java/org/apache/druid/guice/JoinableFactoryModuleTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.guice;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+import com.google.inject.Key;\n+import com.google.inject.Module;\n+import com.google.inject.Scopes;\n+import com.google.inject.TypeLiteral;\n+import org.apache.druid.query.DataSource;\n+import org.apache.druid.query.InlineDataSource;\n+import org.apache.druid.segment.join.InlineJoinableFactory;\n+import org.apache.druid.segment.join.JoinableFactory;\n+import org.apache.druid.segment.join.MapDataSourceJoinableFactoryWarehouse;\n+import org.apache.druid.segment.join.NoopDataSource;\n+import org.apache.druid.segment.join.NoopJoinableFactory;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import javax.validation.Validation;\n+import javax.validation.Validator;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+public class JoinableFactoryModuleTest\n+{\n+  private Injector injector;\n+\n+  @Before\n+  public void setUp()\n+  {\n+    Properties props = new Properties();\n+    injector = makeInjectorWithProperties(props);\n+  }\n+\n+  @Test\n+  public void testInjectJoinableFactoryIsSingleton()\n+  {\n+    JoinableFactory factory = injector.getInstance(JoinableFactory.class);\n+    Assert.assertEquals(MapDataSourceJoinableFactoryWarehouse.class, factory.getClass());\n+    JoinableFactory otherFactory = injector.getInstance(JoinableFactory.class);\n+    Assert.assertSame(factory, otherFactory);\n+  }\n+\n+  @Test\n+  public void testInjectDefaultBindingsShouldBeInjected()\n+  {\n+    Map<Class<? extends DataSource>, JoinableFactory> joinableFactories =\n+        injector.getInstance(Key.get(new TypeLiteral<Map<Class<? extends DataSource>, JoinableFactory>>() {}));\n+    Assert.assertEquals(1, joinableFactories.size());\n+    Assert.assertEquals(InlineJoinableFactory.class, joinableFactories.get(InlineDataSource.class).getClass());\n+  }\n+\n+  @Test\n+  public void testJoinableFactoryCanBind()\n+  {\n+    injector = makeInjectorWithProperties(\n+        new Properties(),\n+        binder -> DruidBinders.joinableFactoryBinder(binder).addBinding(NoopDataSource.class).toInstance(NoopJoinableFactory.INSTANCE));\n+    Map<Class<? extends DataSource>, JoinableFactory> joinableFactories =\n+        injector.getInstance(Key.get(new TypeLiteral<Map<Class<? extends DataSource>, JoinableFactory>>() {}));\n+    Assert.assertEquals(2, joinableFactories.size());\n+    Assert.assertEquals(NoopJoinableFactory.INSTANCE, joinableFactories.get(NoopDataSource.class));\n+  }\n+\n+  private Injector makeInjectorWithProperties(final Properties props, Module... otherModules)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d99e5df3a89a8dac42744c611d34bd7dd8cc08c"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "554e36e4dc2029a2c41db4f658abb1c15683f50b", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/554e36e4dc2029a2c41db4f658abb1c15683f50b", "committedDate": "2020-01-28T12:42:25Z", "message": "remove useless bindings in test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23731df7e2c06fca6920c332bb52230d8f269f38", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/23731df7e2c06fca6920c332bb52230d8f269f38", "committedDate": "2020-01-28T18:25:58Z", "message": "remove ExtensionPoint annotation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NjAzOTkw", "url": "https://github.com/apache/druid/pull/9271#pullrequestreview-349603990", "createdAt": "2020-01-28T18:29:37Z", "commit": {"oid": "23731df7e2c06fca6920c332bb52230d8f269f38"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NjEyODM5", "url": "https://github.com/apache/druid/pull/9271#pullrequestreview-349612839", "createdAt": "2020-01-28T18:43:32Z", "commit": {"oid": "23731df7e2c06fca6920c332bb52230d8f269f38"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91ee6764cfaee72c2b6226e967882c77bb4034d6", "author": {"user": {"login": "suneet-s", "name": "Suneet Saldanha"}}, "url": "https://github.com/apache/druid/commit/91ee6764cfaee72c2b6226e967882c77bb4034d6", "committedDate": "2020-01-28T19:08:41Z", "message": "Make LifecycleLock not final to help with testing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NzMzMjMw", "url": "https://github.com/apache/druid/pull/9271#pullrequestreview-349733230", "createdAt": "2020-01-28T21:57:02Z", "commit": {"oid": "91ee6764cfaee72c2b6226e967882c77bb4034d6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMTo1NzowMlrOFi2CoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMTo1NzowMlrOFi2CoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA4MTMxMg==", "bodyText": "MapJoinableFactory sounds like a nicer name to me since the \"DataSource\" isn't adding much, and this is actually a JoinableFactory, not a JoinableFactoryWarehouse.\nFactories come from warehouses? \ud83d\ude42", "url": "https://github.com/apache/druid/pull/9271#discussion_r372081312", "createdAt": "2020-01-28T21:57:02Z", "author": {"login": "gianm"}, "path": "processing/src/main/java/org/apache/druid/segment/join/MapDataSourceJoinableFactoryWarehouse.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.druid.segment.join;\n+\n+import com.google.inject.Inject;\n+import org.apache.druid.query.DataSource;\n+\n+import java.util.IdentityHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * A {@link JoinableFactory} that delegates to the appropriate factory based on the type of the datasource.\n+ *\n+ * Datasources can register a factory via a DruidBinder\n+ */\n+public class MapDataSourceJoinableFactoryWarehouse implements JoinableFactory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91ee6764cfaee72c2b6226e967882c77bb4034d6"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3817, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}