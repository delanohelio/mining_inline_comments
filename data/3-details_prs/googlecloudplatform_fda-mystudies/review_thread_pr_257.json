{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwMTc2OTgx", "number": 257, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNTozMTowNlrOD3QKyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNTozOTozNlrOD3QeKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MjYzMTc3OnYy", "diffSide": "RIGHT", "path": "iOS/HPHC/HPHC/Controllers/StudyUI/StudyOverviewUI/StudyHomeViewController.swift", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNTozMTowN1rOGNZ-Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzozNTo0NFrOGNfXpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcxMDE0Ng==", "bodyText": "why does this need to be lazy if it's a primitive?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/257#discussion_r416710146", "createdAt": "2020-04-28T15:31:07Z", "author": {"login": "nikklassen"}, "path": "iOS/HPHC/HPHC/Controllers/StudyUI/StudyOverviewUI/StudyHomeViewController.swift", "diffHunk": "@@ -72,6 +72,7 @@ class StudyHomeViewController: UIViewController {\n   var isUpdatingIneligibility: Bool = false\n \n   var consentRestorationData: Data?\n+  lazy var isStudyActivitiesPresented = false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46589e921f464149540bb5e7c975745f13bb96fd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5ODYyOQ==", "bodyText": "I see It's not required here. Thanks.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/257#discussion_r416798629", "createdAt": "2020-04-28T17:35:44Z", "author": {"login": "tushar-boston"}, "path": "iOS/HPHC/HPHC/Controllers/StudyUI/StudyOverviewUI/StudyHomeViewController.swift", "diffHunk": "@@ -72,6 +72,7 @@ class StudyHomeViewController: UIViewController {\n   var isUpdatingIneligibility: Bool = false\n \n   var consentRestorationData: Data?\n+  lazy var isStudyActivitiesPresented = false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcxMDE0Ng=="}, "originalCommit": {"oid": "46589e921f464149540bb5e7c975745f13bb96fd"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MjY1MTQ1OnYy", "diffSide": "RIGHT", "path": "iOS/HPHC/HPHC/Views/Cells/LineChartCell.swift", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNTozNToxMVrOGNaKLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzozMjo1NVrOGNfQ1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcxMzI2Mw==", "bodyText": "fix indentation here", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/257#discussion_r416713263", "createdAt": "2020-04-28T15:35:11Z", "author": {"login": "nikklassen"}, "path": "iOS/HPHC/HPHC/Views/Cells/LineChartCell.swift", "diffHunk": "@@ -296,37 +298,11 @@ class LineChartCell: GraphChartTableViewCell {\n       self.handleWeeksOfMonthForDate(date: hourOfDayDate)\n \n     case .runs:\n-      self.buttonForward.isEnabled = true\n+     self.buttonForward.isEnabled = true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46589e921f464149540bb5e7c975745f13bb96fd"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5Njg4NQ==", "bodyText": "Done.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/257#discussion_r416796885", "createdAt": "2020-04-28T17:32:55Z", "author": {"login": "tushar-boston"}, "path": "iOS/HPHC/HPHC/Views/Cells/LineChartCell.swift", "diffHunk": "@@ -296,37 +298,11 @@ class LineChartCell: GraphChartTableViewCell {\n       self.handleWeeksOfMonthForDate(date: hourOfDayDate)\n \n     case .runs:\n-      self.buttonForward.isEnabled = true\n+     self.buttonForward.isEnabled = true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcxMzI2Mw=="}, "originalCommit": {"oid": "46589e921f464149540bb5e7c975745f13bb96fd"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MjY3MDUwOnYy", "diffSide": "RIGHT", "path": "iOS/HPHC/HPHC/Views/Cells/LineChartCell.swift", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNTozNzo1M1rOGNaU9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzozMjo0OFrOGNfQiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcxNjAyMw==", "bodyText": "This can more cleanly be written as\nif frequencySet.isEmpty {\n  self.graphView.reloadData()\n  return false\n}\nlet sTime = ...\n\nThis reduces nesting and positive conditions are easier to read.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/257#discussion_r416716023", "createdAt": "2020-04-28T15:37:53Z", "author": {"login": "nikklassen"}, "path": "iOS/HPHC/HPHC/Views/Cells/LineChartCell.swift", "diffHunk": "@@ -479,6 +430,40 @@ class LineChartCell: GraphChartTableViewCell {\n     return frequencyRunsSet\n   }\n \n+  @discardableResult\n+  private func plotForRunsType() -> Bool {\n+\n+    frequencyPageIndex = frequencyPageSize * pageNumber\n+    let frequencySet = self.getNextSetOfFrequencyRuns()\n+\n+    if !frequencySet.isEmpty {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46589e921f464149540bb5e7c975745f13bb96fd"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5NjgwOA==", "bodyText": "Yes, Updated.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/257#discussion_r416796808", "createdAt": "2020-04-28T17:32:48Z", "author": {"login": "tushar-boston"}, "path": "iOS/HPHC/HPHC/Views/Cells/LineChartCell.swift", "diffHunk": "@@ -479,6 +430,40 @@ class LineChartCell: GraphChartTableViewCell {\n     return frequencyRunsSet\n   }\n \n+  @discardableResult\n+  private func plotForRunsType() -> Bool {\n+\n+    frequencyPageIndex = frequencyPageSize * pageNumber\n+    let frequencySet = self.getNextSetOfFrequencyRuns()\n+\n+    if !frequencySet.isEmpty {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcxNjAyMw=="}, "originalCommit": {"oid": "46589e921f464149540bb5e7c975745f13bb96fd"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MjY3NTA5OnYy", "diffSide": "RIGHT", "path": "iOS/HPHC/HPHC/Utils/Helpers/DateHelper.swift", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNTozODozOFrOGNaXog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzozMjozMFrOGNfPzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcxNjcwNg==", "bodyText": "Combine let and return", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/257#discussion_r416716706", "createdAt": "2020-04-28T15:38:38Z", "author": {"login": "nikklassen"}, "path": "iOS/HPHC/HPHC/Utils/Helpers/DateHelper.swift", "diffHunk": "@@ -0,0 +1,48 @@\n+//  Copyright 2020 Google LLC\n+//\n+//  Use of this source code is governed by an MIT-style\n+//  license that can be found in the LICENSE file or at\n+//  https://opensource.org/licenses/MIT.\n+\n+import Foundation\n+\n+enum DateHelper {\n+\n+  static private let runDateFormat = \"yyyy-MM-dd HH:mm:ss Z\"\n+\n+  enum DateType { case date, time }\n+\n+  static var iso8601DateFormatter: DateFormatter {\n+    let dateFormatter = DateFormatter()\n+    let locale = Locale(identifier: \"en_US_POSIX\")\n+    dateFormatter.timeZone = TimeZone.current\n+    dateFormatter.locale = locale\n+    dateFormatter.dateFormat = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"\n+    return dateFormatter\n+  }\n+\n+  static func stringFromDate(date: Date, format: String) -> String {\n+    let dateFormatter = DateFormatter()\n+    dateFormatter.dateFormat = format\n+    dateFormatter.timeZone = TimeZone.current\n+    dateFormatter.locale = Locale(identifier: \"en_US_POSIX\")\n+    let dateString = dateFormatter.string(from: date)\n+\n+    return dateString", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46589e921f464149540bb5e7c975745f13bb96fd"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5NjYyMA==", "bodyText": "Done.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/257#discussion_r416796620", "createdAt": "2020-04-28T17:32:30Z", "author": {"login": "tushar-boston"}, "path": "iOS/HPHC/HPHC/Utils/Helpers/DateHelper.swift", "diffHunk": "@@ -0,0 +1,48 @@\n+//  Copyright 2020 Google LLC\n+//\n+//  Use of this source code is governed by an MIT-style\n+//  license that can be found in the LICENSE file or at\n+//  https://opensource.org/licenses/MIT.\n+\n+import Foundation\n+\n+enum DateHelper {\n+\n+  static private let runDateFormat = \"yyyy-MM-dd HH:mm:ss Z\"\n+\n+  enum DateType { case date, time }\n+\n+  static var iso8601DateFormatter: DateFormatter {\n+    let dateFormatter = DateFormatter()\n+    let locale = Locale(identifier: \"en_US_POSIX\")\n+    dateFormatter.timeZone = TimeZone.current\n+    dateFormatter.locale = locale\n+    dateFormatter.dateFormat = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"\n+    return dateFormatter\n+  }\n+\n+  static func stringFromDate(date: Date, format: String) -> String {\n+    let dateFormatter = DateFormatter()\n+    dateFormatter.dateFormat = format\n+    dateFormatter.timeZone = TimeZone.current\n+    dateFormatter.locale = Locale(identifier: \"en_US_POSIX\")\n+    let dateString = dateFormatter.string(from: date)\n+\n+    return dateString", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcxNjcwNg=="}, "originalCommit": {"oid": "46589e921f464149540bb5e7c975745f13bb96fd"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MjY3NTUzOnYy", "diffSide": "RIGHT", "path": "iOS/HPHC/HPHC/Utils/Helpers/DateHelper.swift", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNTozODo0M1rOGNaX5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzozMjoyN1rOGNfPqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcxNjc3Mg==", "bodyText": "Combine let and return", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/257#discussion_r416716772", "createdAt": "2020-04-28T15:38:43Z", "author": {"login": "nikklassen"}, "path": "iOS/HPHC/HPHC/Utils/Helpers/DateHelper.swift", "diffHunk": "@@ -0,0 +1,48 @@\n+//  Copyright 2020 Google LLC\n+//\n+//  Use of this source code is governed by an MIT-style\n+//  license that can be found in the LICENSE file or at\n+//  https://opensource.org/licenses/MIT.\n+\n+import Foundation\n+\n+enum DateHelper {\n+\n+  static private let runDateFormat = \"yyyy-MM-dd HH:mm:ss Z\"\n+\n+  enum DateType { case date, time }\n+\n+  static var iso8601DateFormatter: DateFormatter {\n+    let dateFormatter = DateFormatter()\n+    let locale = Locale(identifier: \"en_US_POSIX\")\n+    dateFormatter.timeZone = TimeZone.current\n+    dateFormatter.locale = locale\n+    dateFormatter.dateFormat = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"\n+    return dateFormatter\n+  }\n+\n+  static func stringFromDate(date: Date, format: String) -> String {\n+    let dateFormatter = DateFormatter()\n+    dateFormatter.dateFormat = format\n+    dateFormatter.timeZone = TimeZone.current\n+    dateFormatter.locale = Locale(identifier: \"en_US_POSIX\")\n+    let dateString = dateFormatter.string(from: date)\n+\n+    return dateString\n+  }\n+\n+  static func dateFromString(date: String, format: String) -> Date? {\n+    let dateFormatter = DateFormatter()\n+    dateFormatter.dateFormat = format\n+    dateFormatter.timeZone = TimeZone.current\n+    dateFormatter.locale = Locale(identifier: \"en_US_POSIX\")\n+    let date = dateFormatter.date(from: date)\n+\n+    return date", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46589e921f464149540bb5e7c975745f13bb96fd"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5NjU4Ng==", "bodyText": "Done.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/257#discussion_r416796586", "createdAt": "2020-04-28T17:32:27Z", "author": {"login": "tushar-boston"}, "path": "iOS/HPHC/HPHC/Utils/Helpers/DateHelper.swift", "diffHunk": "@@ -0,0 +1,48 @@\n+//  Copyright 2020 Google LLC\n+//\n+//  Use of this source code is governed by an MIT-style\n+//  license that can be found in the LICENSE file or at\n+//  https://opensource.org/licenses/MIT.\n+\n+import Foundation\n+\n+enum DateHelper {\n+\n+  static private let runDateFormat = \"yyyy-MM-dd HH:mm:ss Z\"\n+\n+  enum DateType { case date, time }\n+\n+  static var iso8601DateFormatter: DateFormatter {\n+    let dateFormatter = DateFormatter()\n+    let locale = Locale(identifier: \"en_US_POSIX\")\n+    dateFormatter.timeZone = TimeZone.current\n+    dateFormatter.locale = locale\n+    dateFormatter.dateFormat = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"\n+    return dateFormatter\n+  }\n+\n+  static func stringFromDate(date: Date, format: String) -> String {\n+    let dateFormatter = DateFormatter()\n+    dateFormatter.dateFormat = format\n+    dateFormatter.timeZone = TimeZone.current\n+    dateFormatter.locale = Locale(identifier: \"en_US_POSIX\")\n+    let dateString = dateFormatter.string(from: date)\n+\n+    return dateString\n+  }\n+\n+  static func dateFromString(date: String, format: String) -> Date? {\n+    let dateFormatter = DateFormatter()\n+    dateFormatter.dateFormat = format\n+    dateFormatter.timeZone = TimeZone.current\n+    dateFormatter.locale = Locale(identifier: \"en_US_POSIX\")\n+    let date = dateFormatter.date(from: date)\n+\n+    return date", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcxNjc3Mg=="}, "originalCommit": {"oid": "46589e921f464149540bb5e7c975745f13bb96fd"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MjY4MTM2OnYy", "diffSide": "RIGHT", "path": "iOS/HPHC/HPHC/Controllers/StudyUI/ChartsUI/ChartsViewController.swift", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNTozOTozNlrOGNabEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzozMjoyNFrOGNfPkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcxNzU4NQ==", "bodyText": "Can you rewrite this to remove the force-cast?", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/257#discussion_r416717585", "createdAt": "2020-04-28T15:39:36Z", "author": {"login": "nikklassen"}, "path": "iOS/HPHC/HPHC/Controllers/StudyUI/ChartsUI/ChartsViewController.swift", "diffHunk": "@@ -111,26 +111,21 @@ class ChartsViewController: UIViewController {\n extension ChartsViewController: UITableViewDataSource {\n \n   func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n-    return 1\n-  }\n-\n-  func numberOfSections(in tableView: UITableView) -> Int {\n     return StudyDashboard.instance.charts.count\n   }\n \n   func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n \n-    let chart = StudyDashboard.instance.charts[indexPath.section]\n+    let chart = StudyDashboard.instance.charts[indexPath.row]\n \n     if chart.chartType == \"line-chart\" {\n-\n-      let cell = tableView.dequeueReusableCell(withIdentifier: \"lineChart\") as! LineChartCell\n+      let cell = tableView.dequeueReusableCell(withIdentifier: \"lineChart\", for: indexPath) as! LineChartCell", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46589e921f464149540bb5e7c975745f13bb96fd"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc5NjU2MA==", "bodyText": "Done.", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/257#discussion_r416796560", "createdAt": "2020-04-28T17:32:24Z", "author": {"login": "tushar-boston"}, "path": "iOS/HPHC/HPHC/Controllers/StudyUI/ChartsUI/ChartsViewController.swift", "diffHunk": "@@ -111,26 +111,21 @@ class ChartsViewController: UIViewController {\n extension ChartsViewController: UITableViewDataSource {\n \n   func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n-    return 1\n-  }\n-\n-  func numberOfSections(in tableView: UITableView) -> Int {\n     return StudyDashboard.instance.charts.count\n   }\n \n   func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n \n-    let chart = StudyDashboard.instance.charts[indexPath.section]\n+    let chart = StudyDashboard.instance.charts[indexPath.row]\n \n     if chart.chartType == \"line-chart\" {\n-\n-      let cell = tableView.dequeueReusableCell(withIdentifier: \"lineChart\") as! LineChartCell\n+      let cell = tableView.dequeueReusableCell(withIdentifier: \"lineChart\", for: indexPath) as! LineChartCell", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcxNzU4NQ=="}, "originalCommit": {"oid": "46589e921f464149540bb5e7c975745f13bb96fd"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1203, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}